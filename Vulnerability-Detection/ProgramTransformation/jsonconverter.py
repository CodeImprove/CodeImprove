from __future__ import absolute_import, division, print_function
import sys
import argparse
import glob
import logging
import os
import pickle
import random
import re
import shutil

import numpy as np
import torch
from torch.utils.data import DataLoader, Dataset, SequentialSampler, RandomSampler,TensorDataset
from torch.utils.data.distributed import DistributedSampler
import json
try:
    from torch.utils.tensorboard import SummaryWriter
except:
    from tensorboardX import SummaryWriter

from tqdm import tqdm, trange
import multiprocessing
import subprocess
import shutil
#sys.path.append('/nas1-nfs1/home/rsr200002/CodeXGLUE/Code-Code/Defect-detection/code1')
from model import Model
import random
from Dissector import PVScore
#from model import Model
#import code
#from code import mutualinfo
#from mutualinfo import mutual_information

from transformers import (WEIGHTS_NAME, AdamW, get_linear_schedule_with_warmup,
                          BertConfig, BertForMaskedLM, BertTokenizer,
                          GPT2Config, GPT2LMHeadModel, GPT2Tokenizer,
                          OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer,
                          RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer,
                          DistilBertConfig, DistilBertForMaskedLM, DistilBertTokenizer)

logger = logging.getLogger(__name__)

MODEL_CLASSES = {
    'gpt2': (GPT2Config, GPT2LMHeadModel, GPT2Tokenizer),
    'openai-gpt': (OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer),
    'bert': (BertConfig, BertForMaskedLM, BertTokenizer),
    'roberta': (RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer),
    'distilbert': (DistilBertConfig, DistilBertForMaskedLM, DistilBertTokenizer)
}

#from model import Model
cpu_cont = multiprocessing.cpu_count()
path = os.path.abspath('/nas1-nfs1/home/rsr200002/CLONEGEN/CodeTransformationTest')
c_filename = 'motivation.c'
mutatedfile = 'Mutated.c'
program = os.path.join(path, c_filename)
mutated = os.path.join(path,mutatedfile)


def set_seed(seed=42):
    random.seed(seed)
    os.environ['PYHTONHASHSEED'] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.backends.cudnn.deterministic = True


def mutual_information(test_dataloader, model, device):
    """
    Compute the mutual information as defined in [3] given a number of predictions. Thus, this metric expects
    a logit tensor of size batch_size x num_predictions x seq_len x output_size.
    [3] https://arxiv.org/pdf/1803.08533.pdf
    Parameters
    ----------
    logits: torch.FloatTensor
        Logits of the current batch.
    Returns
    -------
    torch.FloatTensor
       Mutual information for the current batch.
    """
    eps = 1e-5
    logits, _, _ = hidden_states(test_dataloader, model, device)
    #logits = torch.from_numpy(logits)
    probs = torch.softmax(logits, dim=-1)
    print(probs.shape)
    #mean_probs = probs.mean(dim=0).reshape(1, -1)
    #mutual_info = -(probs.mean(dim=0) * torch.log(probs.mean(dim=0) + eps)).sum(dim=0) + (probs * torch.log(probs + eps)).sum(dim=0).mean(dim=0)
    #mutual_info = -(mean_probs * torch.log(mean_probs + eps)).sum() + (probs * torch.log(probs + eps)).sum().mean()
    mutual_info = -(probs * torch.log(probs.float() + eps)).sum(dim=1) + torch.log(torch.tensor([probs.shape[1]], dtype=torch.float))

    return common_ten2numpy(mutual_info)

def common_ten2numpy(a:torch.Tensor):
    return a.detach().cpu().numpy()


def hidden_states(dataloader, model, device):
    pred_pos, pred_list, y_list = [], [], []
    logits_list = []    

    model.eval()
    hidden = []
    logits=[]  
    y_trues=[]
   
    b_list = []
    c_list = []

    for batch in dataloader:
        inputs = batch[0].to(device)        
        labels=batch[1].to(device) 
        with torch.no_grad():
            logit, hidden_state = model(inputs)
            #print(logit[2:])
            for i in range(len(inputs)):
                hidden.append(hidden_state[-1][i].detach().cpu())

            pred_y = torch.argmax(logit,dim=1)
                #print(pred_y)
            pred_list.append(pred_y.cpu())
            
            logits_list.append(logit.cpu())
            y_list.append(labels.cpu())
            
            logits_list.append(logit.cpu().numpy())
    
    for c in hidden:
        c_list.append(c)

    for array in c_list:
        reshaped_array = array.reshape(1, -1)
        b_list.append(reshaped_array)
    
    print(len(b_list))
        
    
    
    return torch.cat(b_list, dim=0), torch.cat(pred_list, dim = 0), torch.cat(y_list, dim=0)



class InputFeatures(object):
    """A single training/test features for a example."""
    def __init__(self,
                 input_tokens,
                 input_ids,
                 idx,
                 label,

    ):
        self.input_tokens = input_tokens
        self.input_ids = input_ids
        self.idx=str(idx)
        self.label=label

def get_code_to_transform(js, tokenizer, args):
    #source
    code=' '.join(js['func'].split())
    #codes = code.split('\n')
    id = js['idx']
    #print(type(id))
    #print(id)
    ####if (id == 3):
        #f'{id}.c'
    print("here")
    with open(c_filename, 'w') as f:
        f.write(code)
        #print(program)
    with open(c_filename, 'r') as f1:
        f1.seek(0)
                #print(f'{id}.c')
        contents = f1.read()
        #print(contents)
    with open(program, 'w') as f2:
            f2.write(contents)
    subprocess.run(['./runner.sh', 'motivation.c' , '1'], cwd=path )

    with open (mutated, 'r') as f3:
        f3.seek(0)
        newcontents = f3.read()
    #print(newcontents)

    return newcontents

        




def create_new_dataset(js, tokenizer, args, newcontents):
    
    code = newcontents
    code_tokens = tokenizer.tokenize(code)[:args.block_size-2]
    source_tokens = [tokenizer.cls_token]+code_tokens + [tokenizer.sep_token]
    source_ids = tokenizer.convert_tokens_to_ids(source_tokens)
    padding_length = args.block_size - len(source_ids)
    source_ids += [tokenizer.pad_token_id]*padding_length
    return InputFeatures(source_tokens, source_ids, js['idx'], js['target'])

        
    


    #code_tokens=tokenizer.tokenize(code)[:args.block_size-2]
    #source_tokens =[tokenizer.cls_token]+code_tokens+[tokenizer.sep_token]
    #source_ids =  tokenizer.convert_tokens_to_ids(source_tokens)
    #padding_length = args.block_size - len(source_ids)
    #source_ids+=[tokenizer.pad_token_id]*padding_length
    #return InputFeatures(source_tokens,source_ids,js['idx'],js['target'])


class TextDataset(Dataset):
    def __init__(self, js, tokenizer, args, model, contents):
        self.examples = []
        
        #self.examples.append(convert_examples_to_features(js))
        
        self.examples.append(create_new_dataset(js,tokenizer,args,contents))


        """      
        if 'train' in file_path:
            for idx, example in enumerate(self.examples[:3]):
                    logger.info("*** Example ***")
                    logger.info("idx: {}".format(idx))
                    logger.info("label: {}".format(example.label))
                    logger.info("input_tokens: {}".format([x.replace('\u0120','_') for x in example.input_tokens]))
                    logger.info("input_ids: {}".format(' '.join(map(str, example.input_ids))))
        """
    def __len__(self):
        return len(self.examples)

    def __getitem__(self, i):       
        return torch.tensor(self.examples[i].input_ids),torch.tensor(self.examples[i].label)



def transform(tokenizer, args, model, index, trainloader, evalloader):
    #filename = "../dataset/test.jsonl"
    filename = "test.jsonl"
    json_list = []
    with open(filename) as f:
        for line in f:
            js = json.loads(line.strip())
            print(js['idx'])
            if (js['idx'] in index):
                contents = get_code_to_transform(js, tokenizer, args)
                dataset = TextDataset(js,tokenizer, args, model,contents)

                #eval_data_set = create_new_dataset(js, tokenizer, args, newcontents)
                eval_sampler = SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)
                eval_dataloader = DataLoader(dataset, sampler = eval_sampler, batch_size = 32)
                print(len(eval_dataloader))

                #hidden_outputs, _, _ = hidden_states(eval_dataloader, model, args.device)
                dissector = PVScore(model=model, train_loader=trainloader, dev_loader=evalloader, args=args)
                get_uncertainty_score = dissector._uncertainty_calculate(eval_dataloader)
                
                if (get_uncertainty_score[0][0] >0.4):
                    with open (mutated, 'r') as f3:
                        f3.seek(0)
                        newcontents = f3.read()

                    with open(program, 'w') as f2:
                        f2.write(newcontents)
                    print("doing crossoverr")
                    #doing a crossover 
                    subprocess.run(['./runner.sh', 'motivation.c' , '1'], cwd=path )
                    print("doing mutation")
                    #mutate the code
                    ran_num = random.randint(2,15)
                    with open (mutated, 'r') as f3:
                        f3.seek(0)
                        newcontents = f3.read()

                    with open(program, 'w') as f2:
                        f2.write(newcontents)
                    
                    subprocess.run(['./runner.sh', 'motivation.c' , str(ran_num)], cwd=path )

                    with open (mutated, 'r') as f3:
                        f3.seek(0)
                        newcontents = f3.read()

                    js['func'] = newcontents
                    #print(js['func'])
                    line = js
                    json_list.append(json.loads(json.dumps(line)))
                    #print(line)
                    #print(len(json_list))


                else:
                    with open (c_filename, 'r') as f3:
                        f3.seek(0)
                        codelines = f3.read()
                    js['func'] = codelines
                    new_js = do_more_transformations(js, tokenizer, args, model, trainloader, evalloader)
                    line = new_js
                    json_list.append(json.loads(json.dumps(line)))
            else:
                line = js
                json_list.append(json.loads(json.dumps(line)))

    with open("json_file.jsonl", 'w') as we:
        for obj in json_list:
            #print(obj)
            we.write(json.dumps(obj))
            we.write('\n')

def do_more_transformations(js, tokenizer, args, model, trainloader, evalloader):
    i = 2;
    while i <16:
        #i = int(i)

        
        with open(c_filename, 'r') as f1:
            f1.seek(0)
                #print(f'{id}.c')
            contents = f1.read()
            #print(contents)
        with open(program, 'w') as f2:
            f2.write(contents)
        print(i)
        subprocess.run(['./runner.sh', 'motivation.c' , str(i)], cwd=path )

        with open (mutated, 'r') as f3:
                f3.seek(0)
                new_contents = f3.read()

        dataset = TextDataset(js,tokenizer,args,model,new_contents)
        eval_sampler = SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)
        eval_dataloader = DataLoader(dataset, sampler = eval_sampler, batch_size = 32)
        print(len(eval_dataloader))

                #hidden_outputs, _, _ = hidden_states(eval_dataloader, model, args.device)
        dissector = PVScore(model=model, train_loader=trainloader, dev_loader=evalloader, args=args)
        get_uncertainty_score = dissector._uncertainty_calculate(eval_dataloader)
        #get_uncertainty_score = mutual_information(eval_dataloader, model, args.device)

        if(get_uncertainty_score[0][0]) >0.4:
            with open (mutated, 'r') as f3:
                        f3.seek(0)
                        newcontents = f3.read()

            with open(program, 'w') as f2:
                    f2.write(newcontents)
            print("doing crossoverr")
                    #doing a crossover 
            subprocess.run(['./runner.sh', 'motivation.c' , '1'], cwd=path )
            print("doing mutation")
                    #mutate the code
            ran_num = random.randint(2,15)

            with open (mutated, 'r') as f3:
                    f3.seek(0)
                    newcontents = f3.read()

            with open(program, 'w') as f2:
                f2.write(newcontents)
                    
            subprocess.run(['./runner.sh', 'motivation.c' , str(ran_num)], cwd=path )

            with open (mutated, 'r') as f3:
                f3.seek(0)
                newcontents = f3.read()
                js['func'] = newcontents

            break;

        else: 
            i = i+1
            js['func'] = contents

    return js



        
class InputFeaturesnew(object):
    """A single training/test features for a example."""
    def __init__(self,
                 input_tokens,
                 input_ids,
                 idx,
                 label,

    ):
        self.input_tokens = input_tokens
        self.input_ids = input_ids
        self.idx=str(idx)
        self.label=label


def convert_examples_to_featuresnew(js,tokenizer,args):
    #source
    code=' '.join(js['func'].split())
    code_tokens=tokenizer.tokenize(code)[:args.block_size-2]
    source_tokens =[tokenizer.cls_token]+code_tokens+[tokenizer.sep_token]
    source_ids =  tokenizer.convert_tokens_to_ids(source_tokens)
    padding_length = args.block_size - len(source_ids)
    source_ids+=[tokenizer.pad_token_id]*padding_length
    return InputFeatures(source_tokens,source_ids,js['idx'],js['target'])

class TextDatasetnew(Dataset):
    def __init__(self, tokenizer, args, file_path=None):
        self.examples = []
        with open(file_path) as f:
            for line in f:
                js=json.loads(line.strip())
                self.examples.append(convert_examples_to_featuresnew(js,tokenizer,args))
        if 'train' in file_path:
            for idx, example in enumerate(self.examples[:3]):
                    logger.info("*** Example ***")
                    logger.info("idx: {}".format(idx))
                    logger.info("label: {}".format(example.label))
                    logger.info("input_tokens: {}".format([x.replace('\u0120','_') for x in example.input_tokens]))
                    logger.info("input_ids: {}".format(' '.join(map(str, example.input_ids))))

    def __len__(self):
        return len(self.examples)

    def __getitem__(self, i):
        return torch.tensor(self.examples[i].input_ids),torch.tensor(self.examples[i].label)





                    
                    




def main():
    parser = argparse.ArgumentParser()

    ## Required parameters
    parser.add_argument("--train_data_file", default=None, type=str, required=True,
                        help="The input training data file (a text file).")
    parser.add_argument("--output_dir", default=None, type=str, required=True,
                        help="The output directory where the model predictions and checkpoints will be written.")

    ## Other parameters
    parser.add_argument("--eval_data_file", default=None, type=str,
                        help="An optional input evaluation data file to evaluate the perplexity on (a text file).")
    parser.add_argument("--test_data_file", default=None, type=str,
                        help="An optional input evaluation data file to evaluate the perplexity on (a text file).")

    parser.add_argument("--model_type", default="bert", type=str,
                        help="The model architecture to be fine-tuned.")
    parser.add_argument("--model_name_or_path", default=None, type=str,
                        help="The model checkpoint for weights initialization.")

    parser.add_argument("--mlm", action='store_true',
                        help="Train with masked-language modeling loss instead of language modeling.")
    parser.add_argument("--mlm_probability", type=float, default=0.15,
                        help="Ratio of tokens to mask for masked language modeling loss")

    parser.add_argument("--config_name", default="", type=str,
                        help="Optional pretrained config name or path if not the same as model_name_or_path")
    parser.add_argument("--tokenizer_name", default="", type=str,
                        help="Optional pretrained tokenizer name or path if not the same as model_name_or_path")
    parser.add_argument("--cache_dir", default="", type=str,
                        help="Optional directory to store the pre-trained models downloaded from s3 (instread of the default one)")
    parser.add_argument("--block_size", default=-1, type=int,
                        help="Optional input sequence length after tokenization."
                             "The training dataset will be truncated in block of this size for training."
                             "Default to the model max input length for single sentence inputs (take into account special tokens).")
    parser.add_argument("--do_train", action='store_true',
                        help="Whether to run training.")
    parser.add_argument("--do_eval", action='store_true',
                        help="Whether to run eval on the dev set.")
    parser.add_argument("--do_test", action='store_true',
                        help="Whether to run eval on the dev set.")
    parser.add_argument("--evaluate_during_training", action='store_true',
                        help="Run evaluation during training at each logging step.")
    parser.add_argument("--do_lower_case", action='store_true',
                        help="Set this flag if you are using an uncased model.")

    parser.add_argument("--train_batch_size", default=4, type=int,
                        help="Batch size per GPU/CPU for training.")
    parser.add_argument("--eval_batch_size", default=4, type=int,
                        help="Batch size per GPU/CPU for evaluation.")
    parser.add_argument('--gradient_accumulation_steps', type=int, default=1,
                        help="Number of updates steps to accumulate before performing a backward/update pass.")
    parser.add_argument("--learning_rate", default=5e-5, type=float,
                        help="The initial learning rate for Adam.")
    parser.add_argument("--weight_decay", default=0.0, type=float,
                        help="Weight deay if we apply some.")
    parser.add_argument("--adam_epsilon", default=1e-8, type=float,
                        help="Epsilon for Adam optimizer.")
    parser.add_argument("--max_grad_norm", default=1.0, type=float,
                        help="Max gradient norm.")
    parser.add_argument("--num_train_epochs", default=1.0, type=float,
                        help="Total number of training epochs to perform.")
    parser.add_argument("--max_steps", default=-1, type=int,
                        help="If > 0: set total number of training steps to perform. Override num_train_epochs.")
    parser.add_argument("--warmup_steps", default=0, type=int,
                        help="Linear warmup over warmup_steps.")

    parser.add_argument('--logging_steps', type=int, default=50,
                        help="Log every X updates steps.")
    parser.add_argument('--save_steps', type=int, default=50,
                        help="Save checkpoint every X updates steps.")
    parser.add_argument('--save_total_limit', type=int, default=None,
                        help='Limit the total amount of checkpoints, delete the older checkpoints in the output_dir, does not delete by default')
    parser.add_argument("--eval_all_checkpoints", action='store_true',
                        help="Evaluate all checkpoints starting with the same prefix as model_name_or_path ending and ending with step number")
    parser.add_argument("--no_cuda", action='store_true',
                        help="Avoid using CUDA when available")
    parser.add_argument('--overwrite_output_dir', action='store_true',
                        help="Overwrite the content of the output directory")
    parser.add_argument('--overwrite_cache', action='store_true',
                        help="Overwrite the cached training and evaluation sets")
    parser.add_argument('--seed', type=int, default=42,
                        help="random seed for initialization")
    parser.add_argument('--epoch', type=int, default=42,
                        help="random seed for initialization")
    parser.add_argument('--fp16', action='store_true',
                        help="Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit")
    parser.add_argument('--fp16_opt_level', type=str, default='O1',
                        help="For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3']."
                             "See details at https://nvidia.github.io/apex/amp.html")
    parser.add_argument("--local_rank", type=int, default=-1,
                        help="For distributed training: local_rank")
    parser.add_argument('--server_ip', type=str, default='', help="For distant debugging.")
    parser.add_argument('--server_port', type=str, default='', help="For distant debugging.")

    # Add early stopping parameters and dropout probability parameters
    parser.add_argument("--early_stopping_patience", type=int, default=None,
                        help="Number of epochs with no improvement after which training will be stopped.")
    parser.add_argument("--min_loss_delta", type=float, default=0.001,
                        help="Minimum change in the loss required to qualify as an improvement.")
    parser.add_argument('--dropout_probability', type=float, default=0, help='dropout probability')

    parser.add_argument('--dissector', action='store_true')


    

    args = parser.parse_args()

    # Setup distant debugging if needed
    if args.server_ip and args.server_port:
        # Distant debugging - see https://code.visualstudio.com/docs/python/debugging#_attach-to-a-local-script
        import ptvsd
        print("Waiting for debugger attach")
        ptvsd.enable_attach(address=(args.server_ip, args.server_port), redirect_output=True)
        ptvsd.wait_for_attach()

    # Setup CUDA, GPU & distributed training
    if args.local_rank == -1 or args.no_cuda:
        device = torch.device("cuda" if torch.cuda.is_available() and not args.no_cuda else "cpu")
        args.n_gpu = torch.cuda.device_count()
    else:  # Initializes the distributed backend which will take care of sychronizing nodes/GPUs
        torch.cuda.set_device(args.local_rank)
        device = torch.device("cuda", args.local_rank)
        torch.distributed.init_process_group(backend='nccl')
        args.n_gpu = 1
    args.device = device
    args.per_gpu_train_batch_size=args.train_batch_size //args.n_gpu
    args.per_gpu_eval_batch_size=args.eval_batch_size //args.n_gpu
    torch.cuda.set_device(5)
    args.device = torch.device("cuda", torch.cuda.set_device(5))
    # Setup logging
    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s',
                        datefmt='%m/%d/%Y %H:%M:%S',
                        level=logging.INFO if args.local_rank in [-1, 0] else logging.WARN)
    logger.warning("Process rank: %s, device: %s, n_gpu: %s, distributed training: %s, 16-bits training: %s",
                   args.local_rank, device, args.n_gpu, bool(args.local_rank != -1), args.fp16)
    logger.info("device number: ")
    logger.info(torch.cuda.current_device())



    # Set seed
    set_seed(args.seed)

    # Load pretrained model and tokenizer
    if args.local_rank not in [-1, 0]:
        torch.distributed.barrier()  # Barrier to make sure only the first process in distributed training download model & vocab

    args.start_epoch = 0
    args.start_step = 0
    checkpoint_last = os.path.join(args.output_dir, 'checkpoint-last')
    if os.path.exists(checkpoint_last) and os.listdir(checkpoint_last):
        args.model_name_or_path = os.path.join(checkpoint_last, 'pytorch_model.bin')
        args.config_name = os.path.join(checkpoint_last, 'config.json')
        idx_file = os.path.join(checkpoint_last, 'idx_file.txt')
        with open(idx_file, encoding='utf-8') as idxf:
            args.start_epoch = int(idxf.readlines()[0].strip()) + 1

        step_file = os.path.join(checkpoint_last, 'step_file.txt')
        if os.path.exists(step_file):
            with open(step_file, encoding='utf-8') as stepf:
                args.start_step = int(stepf.readlines()[0].strip())

        logger.info("reload model from {}, resume from {} epoch".format(checkpoint_last, args.start_epoch))

    config_class, model_class, tokenizer_class = MODEL_CLASSES[args.model_type]
    config = config_class.from_pretrained(args.config_name if args.config_name else args.model_name_or_path,
                                          cache_dir=args.cache_dir if args.cache_dir else None, output_hidden_states=True)
    config.num_labels=1
    #config.output_hidden_states = True
    tokenizer = tokenizer_class.from_pretrained(args.tokenizer_name,
                                                do_lower_case=args.do_lower_case,
                                                cache_dir=args.cache_dir if args.cache_dir else None)
    if args.block_size <= 0:
        args.block_size = tokenizer.max_len_single_sentence  # Our input block size will be the max possible for the model
    args.block_size = min(args.block_size, tokenizer.max_len_single_sentence)
    if args.model_name_or_path:
        model = model_class.from_pretrained(args.model_name_or_path, 
                                            from_tf=bool('.ckpt' in args.model_name_or_path),
                                            config=config,
                                            cache_dir=args.cache_dir if args.cache_dir else None)    
    else:
        model = model_class(config)

    #print(model)
    model=Model(model,config,tokenizer,args)
    if args.local_rank == 0:
        torch.distributed.barrier()  # End of barrier to make sure only the first process in distributed training download model & vocab

    print(args.device)
    checkpoint_prefix = 'checkpoint-best-acc/model.bin'
    output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))  
    model.load_state_dict(torch.load(output_dir))      
    model.to(args.device)
    model.eval()
    print(device)
    index = []
    count = 0
    with open("../code/scores/misclassified.txt", "r") as fm:
        for line in fm:
            #print(line)
            line=line.strip()
            idx,label=line.split()
            if (float(label) < 0.4):
                index.append(int(idx))
                count = count +1
    train_dataset = TextDatasetnew(tokenizer, args, args.train_data_file)
    train_dataloader = DataLoader(train_dataset, batch_size=args.train_batch_size,num_workers=4,pin_memory=True)

    dev_dataset = TextDatasetnew(tokenizer, args, args.eval_data_file)
    dev_dataloader = DataLoader(dev_dataset, batch_size=args.eval_batch_size,num_workers=4,pin_memory=True)
       
    #print(index)       
    transform(tokenizer, args, model, index, train_dataloader, dev_dataloader)

if __name__ == "__main__":
    main()



"""

get the program set that needs transformations based on the IDX 

for each of those idx, convert into seperate .c file. 
apply one transformation. 
return content from mutated

---fitness computation----
convert the transformation into the data loader 
get the uncertaintainty scores. 
if the uncertainty score is lesser than 




"""

