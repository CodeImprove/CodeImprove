from __future__ import absolute_import, division, print_function
import pwd
import sys
import argparse
import glob
import logging
import os
import pickle
import random
import re
import shutil

import numpy as np
import torch
from torch.utils.data import DataLoader, Dataset, SequentialSampler, RandomSampler,TensorDataset
from torch.utils.data.distributed import DistributedSampler
import json
try:
    from torch.utils.tensorboard import SummaryWriter
except:
    from tensorboardX import SummaryWriter

from tqdm import tqdm, trange
import multiprocessing
import subprocess
import shutil
#sys.path.append('/nas1-nfs1/home/rsr200002/CodeXGLUE/Code-Code/Defect-detection/code1')
from model import Model
import random
from Dissector import PVScore
#from Read_Count import get_count,read_format_code
from pathlib import Path
import math
#from model import Model
#import code
#from code import mutualinfo
#from mutualinfo import mutual_information

from transformers import (WEIGHTS_NAME, AdamW, get_linear_schedule_with_warmup,
                          BertConfig, BertForMaskedLM, BertTokenizer,
                          GPT2Config, GPT2LMHeadModel, GPT2Tokenizer,
                          OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer,
                          RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer,
                          DistilBertConfig, DistilBertForMaskedLM, DistilBertTokenizer)

logger = logging.getLogger(__name__)

MODEL_CLASSES = {
    'gpt2': (GPT2Config, GPT2LMHeadModel, GPT2Tokenizer),
    'openai-gpt': (OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer),
    'bert': (BertConfig, BertForMaskedLM, BertTokenizer),
    'roberta': (RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer),
    'distilbert': (DistilBertConfig, DistilBertForMaskedLM, DistilBertTokenizer)
}

#from model import Model
cpu_cont = multiprocessing.cpu_count()
path = os.path.abspath('/nas1-nfs1/home/rsr200002/CLONEGEN/CodeTransformationTest')
c_filename = 'motivation.c'
mutatedfile = 'Mutated.c'
program = os.path.join(path, c_filename)
mutated = os.path.join(path,mutatedfile)



def set_seed(seed=42):
    random.seed(seed)
    os.environ['PYHTONHASHSEED'] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.backends.cudnn.deterministic = True

def saveCode(js, code_id):
    #code_sets = json.load(open('../dataset/function.json'))
    #for id in index:
    
    code_content=' '.join(js['func'].split())
    with open(f'{path}/transformation_set/{code_id}.c', 'w') as code:
        code.write(code_content)

def read_format_code(code_id):
    os.system(f"txl   -q -s 128  \"{path}/transformation_set/{code_id}.c\" \"{path}/Txl/RemoveCompoundStateSemicolon.Txl\" > aaa.c")
    os.system(f"txl   -q -s 128 aaa.c \"{path}/Txl/RemoveNullStatements.Txl\" > bbb.c")
    content = open('bbb.c').read()
    os.system(f'rm aaa.c && rm bbb.c')
    #print(content)
    return content



def transform_and_test(js, original_code, code_id):
    os.chdir(f'{path}/RM')
    path1 = f'{path}/transformation_set/{code_id}.c'
    os.system(f'cp {path1} .')
    filename = path1.split('/')[-1]
    generated_Codes = []
    for i in range(1,16):
        os.system(f"./mutation.sh {filename} {i}")
        after_transform = open(f'{path}/RM/Mutated.c').read()
        #print(after_transform)
        if original_code == after_transform:
            #print(after_transform)
            continue
        else :
            generated_Codes.append({'id': i, 'code': after_transform})

        
        #os.system(f"cp  {path}/RM/Mutated.c {path}/after_transform_train_sets/{filename.split('.')[0]}/{i}.c")
    #print("length of initial_population {}".format(len(generated_Codes)))
    os.system(f"rm {filename}")
    
    return generated_Codes

def get_predictions(codes,js, code_id, tokenizer, args, model, label):
    dataset = GenerateDataset(codes,code_id,label,tokenizer,args)

    #eval_data_set = create_new_dataset(js, tokenizer, args, newcontents)
    sampler = SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)
    transformed_dataloader = DataLoader(dataset, sampler = sampler, batch_size = 32)
    os.chdir('/nas1-nfs1/home/rsr200002/dissector/ProgramTransformation')
    logit, predictions, y_labels= common_predict(transformed_dataloader, model, args.device)
    return predictions



def common_predict(test_dataloader, model, device):
    pred_pos, pred_list, y_list = [], [], []
    logits_list = []    
    hidden = []
    nb_eval_steps = 0
    model.eval()

    logits=[]  
    y_trues=[]
   
    for batch in test_dataloader:
        inputs = batch[0].to(device)        
        labels=batch[1].to(device) 
        with torch.no_grad():
            logit = model(inputs)
            
            pred_y = logit > 0.5
                #print(pred_y)
            pred_list.append(pred_y.cpu())
            
            logits_list.append(logit.cpu())
            y_list.append(labels.cpu())
           
           
        nb_eval_steps += 1
    
    #logits_list = np.concatenate(logits_list, axis=0)
    #pred_list = np.concatenate(pred_list,0)
    #y_list = np.concatenate(y_list,0)
    

    return torch.cat(logits_list, dim=0) , torch.cat(pred_list, dim = 0), torch.cat(y_list, dim=0)



class GenerateDataset(Dataset):
    def __init__(self, initial_population, code_id, label, tokenizer, args):
        self.examples = []
        for items in initial_population:
            c_id = items['id']
            code_sample = items['code']
            label = label
            self.examples.append(convert_code_into_features(c_id,code_sample,label, tokenizer, args))

    def __len__(self):
        return len(self.examples)

    def __getitem__(self, i):
        return torch.tensor(self.examples[i].input_ids),torch.tensor(self.examples[i].label)

def convert_code_into_features(c_id,code_sample,label, tokenizer, args):
    code= code_sample
    code_tokens=tokenizer.tokenize(code)[:args.block_size-2]
    source_tokens =[tokenizer.cls_token]+code_tokens+[tokenizer.sep_token]
    source_ids =  tokenizer.convert_tokens_to_ids(source_tokens)
    padding_length = args.block_size - len(source_ids)
    source_ids+=[tokenizer.pad_token_id]*padding_length
    return InputFeatures(source_tokens,source_ids,c_id,label)

class InputFeatures(object):
    """A single training/test features for a example."""
    def __init__(self,
                 input_tokens,
                 input_ids,
                 idx,
                 label,

    ):
        self.input_tokens = input_tokens
        self.input_ids = input_ids
        self.idx=str(idx)
        self.label=label



def TransformTrainingset(model, args, tokenizer):
    filename = "../dataset/train.jsonl"
    json_list = []

    with open(filename) as f:
        for line in f:
            js = json.loads(line.strip())
            code_id = int(js['idx'])
            label = js['target']
            
            saveCode(js,code_id)
            original_code = read_format_code(code_id)

            transformed_Code = transform_and_test(js, original_code, code_id)
            print("printing lengthhh")
            print(len(transformed_Code))
            codes =transformed_Code[:]
            predictions = get_predictions(codes,js, code_id, tokenizer, args, model, label)
            predictions = predictions.detach().cpu().numpy().flatten()
            prediction = [int(value) for value in predictions]
            print(prediction)

            for item, sc in zip(codes, prediction):
                print(len(codes))
                print(len(prediction))
                if label != prediction[sc]:
                    js['idx'] = code_id + item['id']
                    js['label'] = prediction[sc]
                    js['func'] = item['code']
                    line = js
                    json_list.append(json.loads(json.dumps(line)))

    with open("newtrain.jsonl", 'w') as we:
        for obj in json_list:
            #print(obj)
            we.write(json.dumps(obj))
            we.write('\n')



            



def main():
    parser = argparse.ArgumentParser()

    ## Required parameters
    parser.add_argument("--train_data_file", default=None, type=str, required=True,
                        help="The input training data file (a text file).")
    parser.add_argument("--output_dir", default=None, type=str, required=True,
                        help="The output directory where the model predictions and checkpoints will be written.")

    ## Other parameters
    parser.add_argument("--eval_data_file", default=None, type=str,
                        help="An optional input evaluation data file to evaluate the perplexity on (a text file).")
    parser.add_argument("--test_data_file", default=None, type=str,
                        help="An optional input evaluation data file to evaluate the perplexity on (a text file).")

    parser.add_argument("--model_type", default="bert", type=str,
                        help="The model architecture to be fine-tuned.")
    parser.add_argument("--model_name_or_path", default=None, type=str,
                        help="The model checkpoint for weights initialization.")

    parser.add_argument("--mlm", action='store_true',
                        help="Train with masked-language modeling loss instead of language modeling.")
    parser.add_argument("--mlm_probability", type=float, default=0.15,
                        help="Ratio of tokens to mask for masked language modeling loss")

    parser.add_argument("--config_name", default="", type=str,
                        help="Optional pretrained config name or path if not the same as model_name_or_path")
    parser.add_argument("--tokenizer_name", default="", type=str,
                        help="Optional pretrained tokenizer name or path if not the same as model_name_or_path")
    parser.add_argument("--cache_dir", default="", type=str,
                        help="Optional directory to store the pre-trained models downloaded from s3 (instread of the default one)")
    parser.add_argument("--block_size", default=-1, type=int,
                        help="Optional input sequence length after tokenization."
                             "The training dataset will be truncated in block of this size for training."
                             "Default to the model max input length for single sentence inputs (take into account special tokens).")
    parser.add_argument("--do_train", action='store_true',
                        help="Whether to run training.")
    parser.add_argument("--do_eval", action='store_true',
                        help="Whether to run eval on the dev set.")
    parser.add_argument("--do_test", action='store_true',
                        help="Whether to run eval on the dev set.")
    parser.add_argument("--evaluate_during_training", action='store_true',
                        help="Run evaluation during training at each logging step.")
    parser.add_argument("--do_lower_case", action='store_true',
                        help="Set this flag if you are using an uncased model.")

    parser.add_argument("--train_batch_size", default=4, type=int,
                        help="Batch size per GPU/CPU for training.")
    parser.add_argument("--eval_batch_size", default=4, type=int,
                        help="Batch size per GPU/CPU for evaluation.")
    parser.add_argument('--gradient_accumulation_steps', type=int, default=1,
                        help="Number of updates steps to accumulate before performing a backward/update pass.")
    parser.add_argument("--learning_rate", default=5e-5, type=float,
                        help="The initial learning rate for Adam.")
    parser.add_argument("--weight_decay", default=0.0, type=float,
                        help="Weight deay if we apply some.")
    parser.add_argument("--adam_epsilon", default=1e-8, type=float,
                        help="Epsilon for Adam optimizer.")
    parser.add_argument("--max_grad_norm", default=1.0, type=float,
                        help="Max gradient norm.")
    parser.add_argument("--num_train_epochs", default=1.0, type=float,
                        help="Total number of training epochs to perform.")
    parser.add_argument("--max_steps", default=-1, type=int,
                        help="If > 0: set total number of training steps to perform. Override num_train_epochs.")
    parser.add_argument("--warmup_steps", default=0, type=int,
                        help="Linear warmup over warmup_steps.")

    parser.add_argument('--logging_steps', type=int, default=50,
                        help="Log every X updates steps.")
    parser.add_argument('--save_steps', type=int, default=50,
                        help="Save checkpoint every X updates steps.")
    parser.add_argument('--save_total_limit', type=int, default=None,
                        help='Limit the total amount of checkpoints, delete the older checkpoints in the output_dir, does not delete by default')
    parser.add_argument("--eval_all_checkpoints", action='store_true',
                        help="Evaluate all checkpoints starting with the same prefix as model_name_or_path ending and ending with step number")
    parser.add_argument("--no_cuda", action='store_true',
                        help="Avoid using CUDA when available")
    parser.add_argument('--overwrite_output_dir', action='store_true',
                        help="Overwrite the content of the output directory")
    parser.add_argument('--overwrite_cache', action='store_true',
                        help="Overwrite the cached training and evaluation sets")
    parser.add_argument('--seed', type=int, default=42,
                        help="random seed for initialization")
    parser.add_argument('--epoch', type=int, default=42,
                        help="random seed for initialization")
    parser.add_argument('--fp16', action='store_true',
                        help="Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit")
    parser.add_argument('--fp16_opt_level', type=str, default='O1',
                        help="For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3']."
                             "See details at https://nvidia.github.io/apex/amp.html")
    parser.add_argument("--local_rank", type=int, default=-1,
                        help="For distributed training: local_rank")
    parser.add_argument('--server_ip', type=str, default='', help="For distant debugging.")
    parser.add_argument('--server_port', type=str, default='', help="For distant debugging.")

    # Add early stopping parameters and dropout probability parameters
    parser.add_argument("--early_stopping_patience", type=int, default=None,
                        help="Number of epochs with no improvement after which training will be stopped.")
    parser.add_argument("--min_loss_delta", type=float, default=0.001,
                        help="Minimum change in the loss required to qualify as an improvement.")
    parser.add_argument('--dropout_probability', type=float, default=0, help='dropout probability')

    parser.add_argument('--dissector', action='store_true')


    

    args = parser.parse_args()

    

    # Setup CUDA, GPU & distributed training
    if args.local_rank == -1 or args.no_cuda:
        device = torch.device("cuda" if torch.cuda.is_available() and not args.no_cuda else "cpu")
        args.n_gpu = torch.cuda.device_count()
    else:  # Initializes the distributed backend which will take care of sychronizing nodes/GPUs
        torch.cuda.set_device(args.local_rank)
        device = torch.device("cuda", args.local_rank)
        torch.distributed.init_process_group(backend='nccl')
        args.n_gpu = 1
    args.device = device
    
    torch.cuda.set_device(5)
    args.device = torch.device("cuda", torch.cuda.set_device(5))



    # Set seed
    set_seed(args.seed)

    # Load pretrained model and tokenizer
    if args.local_rank not in [-1, 0]:
        torch.distributed.barrier()  # Barrier to make sure only the first process in distributed training download model & vocab

    
    config_class, model_class, tokenizer_class = MODEL_CLASSES[args.model_type]
    config = config_class.from_pretrained(args.config_name if args.config_name else args.model_name_or_path,
                                          cache_dir=args.cache_dir if args.cache_dir else None, output_hidden_states=True)
    config.num_labels=1
    #config.output_hidden_states = True
    tokenizer = tokenizer_class.from_pretrained(args.tokenizer_name,
                                                do_lower_case=args.do_lower_case,
                                                cache_dir=args.cache_dir if args.cache_dir else None)
    if args.block_size <= 0:
        args.block_size = tokenizer.max_len_single_sentence  # Our input block size will be the max possible for the model
    args.block_size = min(args.block_size, tokenizer.max_len_single_sentence)
    if args.model_name_or_path:
        model = model_class.from_pretrained(args.model_name_or_path, 
                                            from_tf=bool('.ckpt' in args.model_name_or_path),
                                            config=config,
                                            cache_dir=args.cache_dir if args.cache_dir else None)    
    else:
        model = model_class(config)

    #print(model)
    model=Model(model,config,tokenizer,args)
    if args.local_rank == 0:
        torch.distributed.barrier()  # End of barrier to make sure only the first process in distributed training download model & vocab

    print(args.device)
    checkpoint_prefix = 'checkpoint-best-acc/model.bin'
    output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))  
    model.load_state_dict(torch.load(output_dir))      
    model.to(args.device)
    model.eval()
    print(device)

    TransformTrainingset(model, args, tokenizer)

if __name__ == '__main__':
    main()