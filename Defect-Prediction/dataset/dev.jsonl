{"input": "int fastread ( ) { int t = 0 ; char ch = getchar_unlocked ( ) ; while ( ch < 33 ) ch = getchar_unlocked ( ) ; while ( ch > 33 ) { t = t * 10 + ch - '0' ; ch = getchar_unlocked ( ) ; } return t ; } int sumi ( int , int ) ; int a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] , n ; int main ( ) { int i , j , k , t ; t = fastread ( ) ; while ( t -- ) { n = fastread ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; b [ i ] [ j ] = - 1 ; } k = sumi ( 0 , 0 ) ; printf ( \"%d\n\" , k ) ; } return 0 ; } int sumi ( int i , int j ) { int t1 , t2 ; if ( i == n ) return 0 ; if ( b [ i ] [ j ] != - 1 ) return b [ i ] [ j ] ; t1 = sumi ( i + 1 , j ) ; t2 = sumi ( i + 1 , j + 1 ) ; b [ i ] [ j ] = max ( t1 , t2 ) + a [ i ] [ j ] ; return b [ i ] [ j ] ; }", "label": 0, "id": 20334}
{"input": "int main ( ) { int i , t ; long int A , a , B , b , r , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld %ld\" , & A , & B ) ; a = A ; b = B ; r = 1 ; while ( r != 0 ) { r = a % b ; a = b ; b = r ; } gcd = a ; lcm = A * B / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 16016}
{"input": "int get ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; n = get ( ) ; while ( n -- ) { t = get ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = get ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16199}
{"input": "int main ( ) { int t , a , b , c , m , l , i , r , s , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( a != 0 ) { c = a ; a = b % a ; b = c ; } if ( m <= n ) { s = m ; l = n ; } else { s = n ; l = m ; } for ( i = 1 ; i <= s ; i ++ ) { r = ( l * i ) % s ; if ( r == 0 ) break ; } printf ( \"%d %d\n\" , b , l * i ) ; } return 0 ; }", "label": 1, "id": 10686}
{"input": "int main ( ) { long int i , t , n1 , n2 , x , y , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } lcm = ( n1 * n2 ) / x ; printf ( \"%d\\t%d\n\" , y , lcm ) ; } }", "label": 1, "id": 20226}
{"input": "int sumTriangles ( int * * array , int rowpos , int colpos , int maxrows , int maxcolumns ) { int value1 , value2 ; if ( rowpos == maxrows || colpos == maxcolumns ) return array [ rowpos ] [ colpos ] ; value1 = sumTriangles ( array , rowpos + 1 , colpos , maxrows , maxcolumns ) ; value2 = sumTriangles ( array , rowpos + 1 , colpos + 1 , maxrows , maxcolumns ) ; if ( value1 > value2 ) return value1 + array [ rowpos ] [ colpos ] ; else return value2 + array [ rowpos ] [ colpos ] ; } int main ( ) { int noIter , * * array1 , i , j , k , nrows , ncolumns = 1 ; scanf ( \"%d\" , & noIter ) ; for ( i = 0 ; i < noIter ; i ++ ) { scanf ( \"%d\" , & nrows ) ; array1 = ( int * * ) malloc ( nrows * sizeof ( int * ) ) ; ncolumns = 1 ; for ( j = 0 ; j < nrows ; j ++ ) { array1 [ j ] = ( int * ) malloc ( ncolumns * sizeof ( int ) ) ; for ( k = 0 ; k < ncolumns ; k ++ ) { scanf ( \"%d\" , & array1 [ j ] [ k ] ) ; } ncolumns ++ ; } printf ( \"%d\n\" , sumTriangles ( array1 , 0 , 0 , nrows - 1 , nrows - 1 ) ) ; for ( j = 0 ; j < nrows ; j ++ ) { free ( array1 [ j ] ) ; } free ( array1 ) ; } return 0 ; }", "label": 2, "id": 375}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } main ( ) { int t , a , b , min = 0 , max = 0 , hcf = 0 , lcm = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- != 0 ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } hcf = gcd ( min , max ) ; lcm = ( a * b / hcf ) ; printf ( \"%d %d\" , hcf , lcm ) ; } }", "label": 1, "id": 15763}
{"input": "int main ( ) { int TestCaseCount , ArraySize , i , TotalCombinations ; int Resultarray [ 100000 ] = { 0 } ; scanf ( \"%d\" , & TestCaseCount ) ; while ( TestCaseCount -- ) { int ArrayMatrix [ 100000 ] = { 0 } ; scanf ( \"%d\" , & ArraySize ) ; for ( i = 0 ; i < ArraySize ; i ++ ) scanf ( \"%d\" , & ArrayMatrix [ i ] ) ; TotalCombinations = 0 ; for ( i = 0 ; i < ArraySize ; i ++ ) { if ( i + 1 < ArraySize ) { TotalCombinations = TotalCombinations + 1 ; if ( ArrayMatrix [ i ] < ArrayMatrix [ i + 1 ] ) { TotalCombinations = TotalCombinations + 1 ; } } else if ( i + 1 == ArraySize ) { TotalCombinations = TotalCombinations + 1 ; } } printf ( \"%d\n\" , TotalCombinations ) ; } return 0 ; }", "label": 1, "id": 10228}
{"input": "int a [ size ] ; int elem ( int i , int j ) { return ( i - 1 ) * i / 2 + j ; } int summ ( int i , int j ) { int sum_left = 0 , sum_up = 0 ; if ( j == 0 ) { if ( i == 1 ) return a [ elem ( i , j ) ] ; else { sum_up = summ ( i - 1 , j ) + a [ elem ( i , j ) ] ; return sum_up ; } } else if ( j == i - 1 ) { sum_left = summ ( i - 1 , j - 1 ) + a [ elem ( i , j ) ] ; return sum_left ; } else { sum_left = summ ( i - 1 , j - 1 ) + a [ elem ( i , j ) ] ; sum_up = summ ( i - 1 , j ) + a [ elem ( i , j ) ] ; if ( sum_left >= sum_up ) return sum_left ; else return sum_up ; } } int main ( ) { int t , i , n , r , c ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( r = 1 ; r <= n ; r ++ ) { for ( c = 0 ; c < r ; c ++ ) scanf ( \"%d\" , & a [ elem ( r , c ) ] ) ; } int max = 0 , temp ; for ( c = 0 ; c < n ; c ++ ) { temp = summ ( n , c ) ; if ( temp >= max ) max = temp ; } printf ( \"%d\" , max ) ; } }", "label": 2, "id": 11595}
{"input": "int main ( void ) { int round , row , i , j , sum = 1 , big = 1 , arr [ 101 ] , k ; static int element [ 101 ] [ 101 ] ; scanf ( \"%d\" , & round ) ; for ( k = 1 ; k <= round ; k ++ ) { scanf ( \"%d\" , & row ) ; for ( i = 1 ; i <= row ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & element [ i ] [ j ] ) ; } } for ( i = 1 ; i <= row ; i ++ ) { for ( j = 1 ; j <= row ; j ++ ) sum += element [ j ] [ i ] ; if ( big < sum ) big = sum ; sum = 1 ; } arr [ k ] = big ; big = 1 ; } for ( k = 1 ; k <= round ; k ++ ) printf ( \"\n%d\" , arr [ k ] ) ; return 0 ; }", "label": 3, "id": 10865}
{"input": "int main ( ) { int sum [ 100 ] [ 100 ] , i = 0 , j = 0 , size = 0 , max = 0 , t = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & sum [ i ] [ j ] ) ; } for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) sum [ i ] [ j ] = sum [ i ] [ j ] ; else if ( j == 0 ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - 1 ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - 1 ] [ j - 1 ] ; else { if ( sum [ i - 1 ] [ j - 1 ] > sum [ i - 1 ] [ j ] ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - 1 ] [ j - 1 ] ; else sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - 1 ] [ j ] ; } } } for ( i = size - 1 , j = 0 ; j <= i ; j ++ ) { if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 20982}
{"input": "int main ( ) { int t , a , b , x , i , j ; scanf ( \"%d\" , & t ) ; int gcd [ t ] , lcm [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; lcm [ i ] = a * b ; if ( a == 0 ) gcd [ i ] = a ; else if ( b == 0 ) gcd [ i ] = b ; else { for ( j = 0 ; b != 0 ; j ++ ) { x = b ; b = a % b ; a = x ; } gcd [ i ] = a ; } lcm [ i ] = lcm [ i ] / gcd [ i ] ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d %d\n\" , gcd [ i ] , lcm [ i ] ) ; } }", "label": 1, "id": 24673}
{"input": "int main ( void ) { int n , i , p , q ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & p , & q ) ; printf ( \"%d %d\n\" , gcd ( p , q ) , p * q / gcd ( p , q ) ) ; } return 0 ; } int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } return a ; }", "label": 1, "id": 17987}
{"input": "int main ( ) { int a , b , gcd , lcm , p , q , r , t ; scanf ( \"%d\" , & t ) ; for ( t = 1 ; 1 <= t <= 1000 ; ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { q = a ; r = b ; } else { q = b ; r = a ; } p = q % r ; while ( p != 0 ) { q = r ; r = p ; p = q % r ; } gcd = r ; lcm = a * b / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 9250}
{"input": "int a [ 100 ] [ 100 ] ; int n ; int max ( int i , int j ) { if ( i == n - 1 ) return a [ i ] [ j ] ; int x = max ( i + 1 , j ) ; int y = max ( i + 1 , j + 1 ) ; return ( a [ i ] [ j ] + ( x > y ? x : y ) ) ; } int main ( ) { int t , i , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } printf ( \"%d\n\" , max ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 22310}
{"input": "int main ( ) { long int t , n , A [ 50000 ] , i , min ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { min = 1000000 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & A [ i ] ) ; if ( A [ i ] < min ) min = A [ i ] ; } printf ( \"%ld\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 22383}
{"input": "int main ( ) { int n , r , i , j , k , e ; scanf ( \"%d\" , & n ) ; int ans [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & r ) ; int a [ r ] [ r ] , f [ r ] [ r ] ; for ( j = 0 ; j < r ; j ++ ) { for ( k = 0 ; k < r ; k ++ ) { a [ j ] [ k ] = 0 ; } } for ( j = 0 ; j < r ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } f [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( j = 1 ; j < r ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { if ( k == 0 ) f [ j ] [ k ] = f [ j - 1 ] [ k ] + a [ j ] [ k ] ; else if ( j != k ) { if ( f [ j - 1 ] [ k - 1 ] > f [ j - 1 ] [ k ] ) f [ j ] [ k ] = f [ j - 1 ] [ k - 1 ] + a [ j ] [ k ] ; else f [ j ] [ k ] = f [ j - 1 ] [ k ] + a [ j ] [ k ] ; } else f [ j ] [ k ] = f [ j - 1 ] [ k - 1 ] + a [ j ] [ k ] ; } } int max = f [ r - 1 ] [ 0 ] ; for ( e = 1 ; e < r ; e ++ ) { if ( f [ r - 1 ] [ e ] > max ) max = f [ r - 1 ] [ e ] ; } ans [ i ] = max ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , ans [ i ] ) ; } return 0 ; }", "label": 0, "id": 23155}
{"input": "int main ( ) { int i , j , k , t , s , n ; long long int a [ 10001 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { s = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) if ( a [ i ] <= a [ i + 1 ] ) { j = i ; while ( a [ i ] < a [ i + 1 ] ) i ++ ; for ( k = 0 ; i - k - j != 0 ; k ++ ) s = s + ( i - j - k ) ; } printf ( \"%d\n\" , s + n ) ; } return 0 ; }", "label": 3, "id": 4542}
{"input": "int main ( ) { int t , n , i , j ; int arr [ 105 ] [ 105 ] , dp [ 105 ] [ 105 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } dp [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { dp [ i ] [ i ] = dp [ i - 1 ] [ i - 1 ] + arr [ i ] [ i ] ; for ( j = 0 ; j < i ; j ++ ) { dp [ i ] [ j ] = arr [ i ] [ j ] + max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; } } j = dp [ n - 1 ] [ 0 ] ; for ( i = 1 ; i <= n ; i ++ ) { if ( j < dp [ n - 1 ] [ i ] ) { j = dp [ n - 1 ] [ i ] ; } } printf ( \"%d\n\" , j ) ; } return 0 ; }", "label": 0, "id": 20726}
{"input": "int main ( void ) { int t , gcd , lcm ; scanf ( \"%i\" , & t ) ; for ( int z = 0 ; z < t ; z ++ ) { int a , b ; scanf ( \"%i%i\" , & a , & b ) ; if ( a > b ) { for ( int i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } } else { for ( int i = 1 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } } for ( int j = 1 ; j <= ( a * b ) ; j ++ ) { if ( j % a == 0 && j % b == 0 ) { lcm = j ; break ; } } printf ( \"%i %i\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 15013}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , x , y , b ; scanf ( \"%d %d\" , & x , & y ) ; b = gcd ( x , y ) ; a = ( x * y ) / b ; printf ( \"%d %d\n\" , b , a ) ; } return 0 ; }", "label": 1, "id": 6269}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; else if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b , int g ) { int l ; l = ( a * b ) / g ; return l ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a ; int b ; scanf ( \"%d%d\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = lcm ( a , b , g ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 5709}
{"input": "int main ( void ) { int t , gcd , lcm , a , b , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = 1 ; for ( i = 2 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 15902}
{"input": "int main ( ) { long int i , j , n , t , INT_MAX ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < INT_MAX ) { INT_MAX = a [ j ] ; } } printf ( \"%ld\n\" , ( INT_MAX * ( n - 1 ) ) ) ; } return 0 ; }", "label": 1, "id": 940}
{"input": "int a [ 1000 ] [ 1000 ] ; int sum [ 100 ] ; void insert ( int t ) { int i , j ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } void action ( int t ) { int i , j = 0 ; for ( i = 0 ; i < t ; i ++ ) { sum [ i ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } int max = 0 ; for ( i = 0 ; i < t ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\" , max ) ; } int main ( ) { int t , n , x ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; insert ( t ) ; action ( t ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 9958}
{"input": "int main ( ) { int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( \"enter two numbers:\" ) ; scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( \"gcd of %d and %d= %d\" , A , B , gcd ) ; printf ( \"lcm of %d and %d =%d\" , A , B , lcm ) ; return 0 ; }", "label": 1, "id": 24868}
{"input": "int triangle [ 100 ] [ 100 ] , treelen ; int manipulate ( int counter ) { int i , j = 0 , sum = triangle [ 0 ] [ 0 ] ; for ( i = 1 ; i < treelen ; i ++ ) { j += counter & 1 ; counter >>= 1 ; sum += triangle [ i ] [ j ] ; } return ( sum ) ; } int pow2 ( int a ) { int res = 1 ; while ( a -- ) res *= 2 ; return ( res ) ; } int main ( ) { int tests , sum , sumd , counter , i , j ; scanf ( \"%d\" , & tests ) ; while ( tests -- ) { sum = 0 ; scanf ( \"%d\" , & treelen ) ; for ( i = 0 ; i < treelen ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; counter = pow2 ( treelen - 1 ) ; while ( counter -- ) { sumd = manipulate ( counter ) ; if ( sumd > sum ) sum = sumd ; } printf ( \"%d\n\" , sum ) ; } return ( 0 ) ; }", "label": 1, "id": 26625}
{"input": "int main ( ) { int i , t , a , b , c , d , hcf , gcd ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; c = a ; d = b ; while ( c != d ) { if ( c > d ) { c = c - d ; } else { d = d - c ; } } hcf = c ; gcd = a * b / hcf ; printf ( \"%d %d\n\" , hcf , gcd ) ; } return 0 ; }", "label": 1, "id": 8453}
{"input": "main ( ) { int t , q ; scanf ( \"%d\" , & t ) ; for ( q = 0 ; q < t ; q ++ ) { int n , a [ 100000 ] , i , small ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] ) ; small = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < small ) small = a [ i ] ; } printf ( \"%d\" , small * ( n - 1 ) ) ; } }", "label": 1, "id": 11848}
{"input": "int main ( ) { int t , i ; long int a , b , x , y , lcm , hcf , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i = i + 1 ) { scanf ( \"%ld %ld\" , & a , & b ) ; x = a ; y = b ; while ( b != 0 ) { m = b ; b = a % b ; a = m ; } hcf = a ; lcm = x * y / hcf ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } }", "label": 0, "id": 6834}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , k , l , sum [ 100 ] , n , h ; scanf ( \"%d\" , & l ) ; for ( h = 0 ; h < l ; h ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { if ( j <= i ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; else a [ i ] [ j ] = 0 ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) sum [ j ] = a [ i ] [ j ] ; else sum [ j ] = a [ i ] [ j + 1 ] ; } for ( k = 0 ; k < n ; k ++ ) a [ i - 1 ] [ k ] += sum [ k ] ; sum [ n - i - 1 ] = 0 ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 3144}
{"input": "int main ( ) { int n , k = 0 , i , j , s1 = 0 , s2 = 0 , count = 0 , l , x ; scanf ( \"%d\" , & n ) ; while ( count < n ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & x ) ; if ( j == 0 ) s1 = s1 + x ; if ( k == j ) { s2 = s2 + x ; if ( k < i ) k = k + 1 ; } } } if ( s1 > s2 ) printf ( \"%d\" , s1 ) ; else printf ( \"%d\" , s2 ) ; count = count + 1 ; s1 = 0 ; s2 = 0 ; } }", "label": 1, "id": 896}
{"input": "int main ( ) { int t , i , n , j , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int * * a ; a = ( int * * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { * ( a + i ) = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & * ( * ( a + i ) + j ) ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 9890}
{"input": "int main ( ) { long int a , b , x , i , j , gcd , lcm ; scanf ( \"%d\" , & i ) ; while ( i -- ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = 1 ; lcm = 1 ; for ( j = 1 ; j <= a && j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { gcd = j ; } lcm = ( a * b ) / gcd ; } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 18991}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 1939}
{"input": "int main ( ) { long long int a , b , c , e , i , num1 , num2 ; long long int f ; scanf ( \"%lld\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%lld%lld\" , & b , & c ) ; if ( b > c ) { num1 = b ; num2 = c ; } if ( b == c ) { printf ( \"%lld %lld\n\" , b , c ) ; } else { num1 = c ; num2 = b ; } e = ( num1 % num2 ) ; while ( e != 0 ) { num1 = num2 ; num2 = e ; e = ( num1 % num2 ) ; } f = ( b * c ) / num2 ; printf ( \"%lld %lld\n\" , num2 , f ) ; } return 0 ; }", "label": 0, "id": 17394}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int f = 1 ; printf ( \"\n\" ) ; while ( f <= t ) { int k ; scanf ( \"%d\" , & k ) ; int a [ k ] ; printf ( \"\n\" ) ; int i ; for ( i = 0 ; i < ( k ) ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; printf ( \" \" ) ; } int min = a [ 0 ] ; int cost ; for ( i = 1 ; i < 0 ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } cost = min * ( k - 1 ) ; printf ( \"\n\" ) ; printf ( \"%d\" , cost ) ; f = f + 1 ; } return 0 ; }", "label": 1, "id": 10357}
{"input": "int main ( ) { int i , j , t , n , count ; long int a [ 100000 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; count = n ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < a [ j + 1 ] ) { count ++ ; } } printf ( \"%d\" , count ) ; } }", "label": 1, "id": 22056}
{"input": "int comparetor ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int loop = 0 , max_loop = 0 , g = 0 ; scanf ( \"%d\" , & loop ) ; int sum1 [ 200 ] = { 0 } ; int sum2 [ 200 ] = { 0 } ; int arr [ 110 ] [ 110 ] = { 0 } ; for ( g = 0 ; g < loop ; g ++ ) { int lines = 0 , i = 0 , j = 0 ; scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } sum1 [ 0 ] = arr [ 0 ] [ 0 ] ; sum1 [ 1 ] = - 1 ; for ( i = 0 ; i < lines ; i ++ ) { int num ; if ( i == lines - 1 ) { qsort ( sum1 , 200 , sizeof ( int ) , comparetor ) ; printf ( \"%d\n\" , sum1 [ 199 ] ) ; } else { int count = 0 , cum = 0 ; while ( sum1 [ cum ] != - 1 ) { if ( i >= 2 && cum > i ) { sum2 [ count ] = sum1 [ cum ] + arr [ i + 1 ] [ i + 1 ] ; count ++ ; } else { sum2 [ count ] = sum1 [ cum ] + arr [ i + 1 ] [ cum ] ; sum2 [ count + 1 ] = sum1 [ cum ] + arr [ i + 1 ] [ cum + 1 ] ; count = count + 2 ; } cum ++ ; } num = count ; } int l = 0 ; for ( l = 0 ; l < num ; l ++ ) sum1 [ l ] = sum2 [ l ] ; sum1 [ l ] = - 1 ; for ( l = 0 ; l < num ; l ++ ) sum2 [ l ] = 0 ; } } return 0 ; }", "label": 3, "id": 17923}
{"input": "int main ( ) { int gcd , lcm , a , b , x , i , c , d ; scanf ( \"%d\" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { scanf ( \"%d%d\" , & c , & d ) ; a = c ; b = d ; while ( b != 0 ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } gcd = a ; lcm = ( ( c * d ) / gcd ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 25854}
{"input": "int main ( ) { int i , j , t , a [ 100 ] [ 100 ] , sub_path = 0 , path = 0 , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; path = 0 ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sub_path = a [ 0 ] [ 0 ] ; path += sub_path ; j = 0 ; for ( i = 1 ; i < r ; i ++ ) { if ( a [ i ] [ j ] < sub_path ) { sub_path = a [ i ] [ j + 1 ] ; j = j + 1 ; } else sub_path = a [ i ] [ j ] ; path += sub_path ; } printf ( \"\n%d\" , path ) ; } }", "label": 1, "id": 9371}
{"input": "int main ( ) { int t , a [ SIZE ] , n , i , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) temp = a [ i ] ; else temp = a [ i + 1 ] ; } printf ( \"%d\n\" , temp * ( n - 1 ) ) ; } return ( 0 ) ; }", "label": 1, "id": 14714}
{"input": "main ( ) { int i , j , t , n ; int sum ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( i > 0 ) { if ( j == 0 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ? a [ i - 1 ] [ j ] : a [ i - 1 ] [ j - 1 ] ; } } for ( j = 0 ; j < n ; j ++ ) sum = a [ n - 1 ] [ j ] > sum ? a [ n - 1 ] [ j ] : sum ; printf ( \"%d\n\" , sum ) ; } exit ( 0 ) ; }", "label": 0, "id": 8535}
{"input": "long gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } long long int lcm ( int a , int b ) { return ( long long int ) ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , g , l ; long x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & x , & y ) ; printf ( \"%ld %lld\n\" , gcd ( x , y ) , lcm ( x , y ) ) ; } return 0 ; }", "label": 1, "id": 22561}
{"input": "int main ( void ) { int t , i , j ; long int n , a [ 100002 ] , k ; char c ; t = 0 ; c = getchar ( ) ; while ( ( c < '0' ) || ( c > '9' ) ) c = getchar ( ) ; while ( ( c >= '0' ) && ( c <= '9' ) ) { t = t * 10 + ( c - '0' ) ; c = getchar ( ) ; } while ( t -- ) { n = 0 ; while ( ( c < '0' ) || ( c > '9' ) ) c = getchar ( ) ; while ( ( c >= '0' ) && ( c <= '9' ) ) { n = n * 10 + ( c - '0' ) ; c = getchar ( ) ; } k = 0 ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = 0 ; while ( ( c < '0' ) || ( c > '9' ) ) c = getchar ( ) ; while ( ( c >= '0' ) && ( c <= '9' ) ) { a [ i ] = a [ i ] * 10 + ( c - '0' ) ; c = getchar ( ) ; } k ++ ; for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ j ] <= a [ j + 1 ] ) k ++ ; else break ; } } printf ( \"%d\n\" , k ) ; } return 0 ; }", "label": 0, "id": 15790}
{"input": "int greater ( int a , int b ) ; int main ( ) { int a , b [ 101 ] = { 0 } , c [ 101 ] = { 0 } , d , e , f , t , k [ 101 ] = { 0 } , i , j , m , n ; scanf ( \"%d\" , & e ) ; for ( t = 0 ; t < e ; t ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b [ 0 ] ) ; k [ 0 ] = b [ 0 ] ; for ( i = 1 ; i < a ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & c [ j ] ) ; } for ( j = 1 ; j < i ; j ++ ) { d = greater ( b [ j - 1 ] , b [ j ] ) ; k [ j ] = b [ j ] ; b [ j ] = c [ j ] + d ; } b [ i ] = c [ i ] + k [ j - 1 ] ; b [ 0 ] = c [ 0 ] + b [ 0 ] ; } for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < a ; j ++ ) { if ( b [ i ] > b [ j ] ) { f = b [ i ] ; b [ i ] = b [ j ] ; b [ j ] = f ; } } } } } int greater ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 1, "id": 25847}
{"input": "int gcd ( int a , int b ) { int g ; while ( a % b != 0 ) { g = a ; a = b ; b = g % b ; } return b ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , ( a * b / gcd ( a , b ) ) ) ; } return 0 ; }", "label": 1, "id": 24155}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , n , l , g ; scanf ( \"%d\n\" , & n ) ; while ( n > 0 ) { scanf ( \"\n%d %d\" , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; printf ( \"%d \" , g ) ; l = a * b / g ; printf ( \"%d\n\" , l ) ; n -- ; } return 0 ; } int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 9040}
{"input": "int main ( ) { int i , j , r , n , x , y ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; int a [ r ] [ r ] ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = r - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { x = a [ i ] [ j ] ; y = a [ i ] [ j + 1 ] ; a [ i - 1 ] [ j ] += ( ( x >= y ) ? x : y ) ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 12287}
{"input": "int main ( ) { int a ; scanf ( \"%d\" , & a ) ; while ( a -- ) { long long int n ; scanf ( \"%lld\" , & n ) ; int d [ n ] ; int i , min = 10000000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & d [ i ] ) ; if ( min > d [ i ] ) min = d [ i ] ; } n = ( n - 1 ) * min ; printf ( \"%lld\n\" , n ) ; } return 0 ; }", "label": 0, "id": 10585}
{"input": "int a [ 200 ] [ 200 ] ; main ( ) { int m = 0 ; int k , l , n ; int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { printf ( \"Enter n\" ) ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { for ( l = 0 ; l <= k ; l ++ ) { scanf ( \"%d\" , & a [ k ] [ l ] ) ; } } for ( k = 0 ; k < n ; k ++ ) { m = findmax ( m , tri ( 0 , n , k ) ) ; } printf ( \"%d\" , m ) ; } } int findmax ( int a , int b ) { return ( a > b ? a : b ) ; } int tri ( int sum , int i , int j ) { if ( i == 0 ) return ( sum ) ; if ( j == 0 ) { sum = sum + a [ i - 1 ] [ 0 ] ; i -- ; tri ( sum , i , j ) ; } else { int x = findmax ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) ; if ( x == a [ i - 1 ] [ j - 1 ] ) { i -- ; j -- ; } else { i -- ; } sum = sum + x ; tri ( sum , i , j ) ; } }", "label": 1, "id": 12804}
{"input": "int min ( int m , int n ) { if ( m < n ) return m ; else return n ; } void merging ( int low , int mid , int high , int * a ) { int l1 , l2 , i , b [ high ] ; for ( l1 = low , l2 = mid + 1 , i = low ; l1 <= mid && l2 <= high ; i ++ ) { if ( a [ l1 ] <= a [ l2 ] ) b [ i ] = a [ l1 ++ ] ; else b [ i ] = a [ l2 ++ ] ; } while ( l1 <= mid ) b [ i ++ ] = a [ l1 ++ ] ; while ( l2 <= high ) b [ i ++ ] = a [ l2 ++ ] ; for ( i = low ; i <= high ; i ++ ) a [ i ] = b [ i ] ; } void sort ( int low , int high , int * a ) { int mid ; if ( low < high ) { mid = ( low + high ) / 2 ; sort ( low , mid , a ) ; sort ( mid + 1 , high , a ) ; merging ( low , mid , high , a ) ; } else { return ; } } int main ( ) { int test , i , p , s , sum = 0 , j , a ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & p ) ; int array [ p ] ; for ( i = 0 ; i < p ; i ++ ) scanf ( \"%d\" , & array [ i ] ) ; sort ( 0 , p - 1 , array ) ; s = array [ 0 ] ; for ( i = 1 ; i < p ; i ++ ) { s = min ( s , array [ i ] ) ; sum = sum + s ; } printf ( \"%d\n\" , sum ) ; sum = 0 ; } return 0 ; }", "label": 0, "id": 12750}
{"input": "int main ( ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int cost = 0 , xy = 0 , A [ n ] ; for ( i = 0 ; i < n ; ++ i ) scanf ( \"%d\" , & A [ i ] ) ; for ( i = 0 ; i < n ; ++ i ) { if ( xy > A [ i ] ) xy = A [ i ] ; else if ( i == 0 ) xy = A [ i ] ; } printf ( \"%d\n\" , xy * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 24989}
{"input": "long int gcd ( long int n , long int m ) { if ( n == 0 ) return m ; if ( m == 0 ) return n ; return gcd ( m , n % m ) ; } int main ( void ) { long int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , m ; scanf ( \"%ld %ld\" , & n , & m ) ; long int g = gcd ( n , m ) ; long int l = ( n * m ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 10167}
{"input": "int main ( void ) { long long int T , N , i ; scanf ( \"%lld\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%lld\" , & N ) ; long long int a [ N ] , t , j ; for ( j = 0 ; j < N ; j ++ ) scanf ( \"%lld\" , & a [ j ] ) ; for ( j = 0 ; j < N ; j ++ ) { t = a [ j ] ; for ( j = 0 ; j < N ; j ++ ) { if ( t > a [ j ] ) t = a [ j ] ; } } printf ( \"%lld\n\" , t * ( N - 1 ) ) ; } }", "label": 0, "id": 8967}
{"input": "int main ( ) { int T , rows , i , j , k , max = 0 ; int input [ 100 ] [ 100 ] ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & rows ) ; scanf ( \"%d\" , & input [ 0 ] [ 0 ] ) ; for ( i = 1 , k = 0 ; i < rows ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & input [ i ] [ j ] ) ; if ( j == 0 ) input [ i ] [ j ] = input [ i - 1 ] [ j ] + input [ i ] [ j ] ; else input [ i ] [ j ] += ( input [ i - 1 ] [ j ] > input [ i - 1 ] [ j - 1 ] ) ? input [ i - 1 ] [ j ] : input [ i - 1 ] [ j - 1 ] ; } max = input [ rows - 1 ] [ 0 ] ; for ( k = 1 ; k < rows ; k ++ ) { if ( input [ rows - 1 ] [ k ] > max ) max = input [ rows - 1 ] [ k ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 25014}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; printf ( \"Enter two integers\n\" ) ; scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"GCD of %d and %d = %d\n\" , x , y , gcd ) ; printf ( \"LCM of %d and %d = %d\n\" , x , y , lcm ) ; return 0 ; }", "label": 1, "id": 8852}
{"input": "int temp [ 100 ] [ 100 ] ; int max ( int , int ) ; int fun ( int a [ ] [ 100 ] , int i , int j , int n ) { if ( temp [ i ] [ j ] != - 1 ) return temp [ i ] [ j ] ; if ( i == n - 1 ) { temp [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; return temp [ i ] [ j ] ; } temp [ i ] [ j ] = a [ i ] [ j ] + max ( fun ( a , i + 1 , j , n ) , fun ( a , i + 1 , j + 1 , n ) ) ; return temp [ i ] [ j ] ; } int main ( ) { int j , i , t , n , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; temp [ i ] [ j ] = - 1 ; } printf ( \"%d\n\" , fun ( a , 0 , 0 , n - 1 ) ) ; } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 25297}
{"input": "int sumofa [ 100 ] [ 100 ] ; int a [ 100 ] [ 100 ] ; int n ; int sum ( int , int ) ; int main ( ) { int i , j , k , t ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; sumofa [ j ] [ k ] = 0 ; } printf ( \"%d\n\" , sum ( 0 , 0 ) ) ; } return 0 ; } int sum ( int row , int column ) { int p , q ; if ( row == n - 1 ) { sumofa [ row ] [ column ] = a [ row ] [ column ] ; return sumofa [ row ] [ column ] ; } if ( sumofa [ row ] [ column ] == 0 ) { p = sum ( row + 1 , column + 1 ) ; q = sum ( row + 1 , column ) ; sumofa [ row ] [ column ] = a [ row ] [ column ] + ( p > q ? p : q ) ; return sumofa [ row ] [ column ] ; } else return sumofa [ row ] [ column ] ; }", "label": 0, "id": 19766}
{"input": "int main ( ) { int cases , test , n , i , j ; scanf ( \"%d\" , & cases ) ; for ( test = 1 ; test <= cases ; test ++ ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 5883}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; for ( int i = 0 ; i < T ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ 100 ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { int k = 0 ; for ( int j = 1 ; j <= i ; j ++ ) { arr [ i - 1 ] [ k ++ ] += arr [ i ] [ j - 1 ] > arr [ i ] [ j ] ? arr [ i ] [ j - 1 ] : arr [ i ] [ j ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 23999}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == 0 ) return b ; else { if ( a > b ) return gcd ( a , b ) ; else return gcd ( b , a ) ; } } int main ( ) { int t , i ; unsigned long long int a , b , c , d ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%llu\" , & a ) ; scanf ( \"%llu\" , & b ) ; if ( a > b ) c = gcd ( a , b ) ; else c = gcd ( b , a ) ; d = ( a * b ) / c ; printf ( \"%llu %llu\n\" , c , d ) ; } return 0 ; }", "label": 3, "id": 11120}
{"input": "int co ; int arrayremove ( int * A , int n ) { int i , max = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( A [ max ] < A [ i ] ) max = i ; } if ( max == 0 ) { co = A [ max + 1 ] + co ; } else if ( max == n - 1 ) { co = A [ max - 1 ] + co ; } else if ( ( A [ max - 1 ] ) > ( A [ max + 1 ] ) ) { co = A [ max - 1 ] + co ; } else if ( ( A [ max - 1 ] ) < ( A [ max + 1 ] ) ) { co = A [ max + 1 ] + co ; } for ( i = max ; i < n ; i ++ ) { A [ i ] = A [ i + 1 ] ; } n = n - 1 ; if ( n != 1 ) arrayremove ( A , n ) ; else return co ; } int main ( ) { int A [ 60000 ] , t , n , i , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } co = 0 ; cost = arrayremove ( A , n ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 11472}
{"input": "int main ( ) { int T , i , j , N , k ; scanf ( \"%d\" , & T ) ; int maxi [ T ] ; for ( k = 0 ; k < T ; k ++ ) maxi [ k ] = 0 ; for ( k = 0 ; k < T ; k ++ ) { scanf ( \"%d\" , & N ) ; int a [ N ] ; for ( i = 0 ; i < N ; i ++ ) a [ i ] = 0 ; for ( i = 0 ; i < N ; i ++ ) { int b [ i + 1 ] ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & b [ j ] ) ; } for ( j = 0 ; j <= i ; j ++ ) { if ( b [ j ] < b [ j + 1 ] && j + 1 < i ) a [ j ] = a [ j ] + b [ j + 1 ] ; else a [ j ] = a [ j ] + b [ j ] ; } } for ( i = 0 ; i < N ; i ++ ) { if ( a [ i ] > maxi [ k ] ) maxi [ k ] = a [ i ] ; } } for ( k = 0 ; k < T ; k ++ ) printf ( \"%d\n\" , maxi [ k ] ) ; return 0 ; }", "label": 1, "id": 23912}
{"input": "unsigned int co ; unsigned int arrayremove ( unsigned int * A , unsigned int n ) { int i , max = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( A [ max ] < A [ i ] ) max = i ; } if ( max == 0 ) { co = A [ max + 1 ] + co ; } else if ( max == n - 1 ) { co = A [ max - 1 ] + co ; } else if ( ( A [ max - 1 ] ) > ( A [ max + 1 ] ) ) { co = A [ max - 1 ] + co ; } else if ( ( A [ max - 1 ] ) < ( A [ max + 1 ] ) ) { co = A [ max + 1 ] + co ; } for ( i = max ; i < n ; i ++ ) { A [ i ] = A [ i + 1 ] ; } n = n - 1 ; if ( n != 1 ) arrayremove ( A , n ) ; else return co ; } int main ( ) { unsigned int A [ 20 ] , t , n , i , cost ; scanf ( \"%u\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%u\" , & A [ i ] ) ; } co = 0 ; cost = arrayremove ( A , n ) ; printf ( \"%u\n\" , cost ) ; } return 0 ; }", "label": 3, "id": 9365}
{"input": "void sort ( ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { t -- ; sort ( ) ; } return 0 ; } void sort ( ) { long long int a , m , i , c [ 100001 ] ; scanf ( \"%lld\" , & a ) ; scanf ( \"%lld\" , & c [ 0 ] ) ; m = c [ 0 ] ; for ( i = 1 ; i < a ; i ++ ) { scanf ( \"%lld\" , & c [ i ] ) ; if ( c [ i ] < m ) m = c [ i ] ; } printf ( \"%lld\n\" , m * ( a - 1 ) ) ; }", "label": 0, "id": 19328}
{"input": "int main ( void ) { int tc , a , b , i , hcf , lcm , min , j ; scanf ( \"%d\" , & tc ) ; for ( i = 0 ; i < tc ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; min = a > b ? b : a ; hcf = 1 ; for ( j = min ; j >= 1 ; j -- ) { if ( a % j == 0 && b % j == 0 && hcf % j != 0 ) hcf = hcf * j ; if ( j == min && a % j == 0 && b % j == 0 ) break ; } lcm = ( a * b ) / hcf ; printf ( \"%d %d \n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 15745}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long long int a , b , g = 0 , j , max ; scanf ( \"%lld %lld\" , & a , & b ) ; for ( j = 1 ; j <= a && j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) g = j ; } printf ( \"%lld \" , g ) ; max = ( a * b ) / g ; printf ( \"%lld\n\" , max ) ; } return 0 ; }", "label": 2, "id": 24746}
{"input": "int main ( void ) { int m , n , a , i , j , k , p , c ; scanf ( \"%d\" , & m ) ; if ( m < 1000 ) { for ( p = 0 ; p < m ; p ++ ) { c = 0 ; scanf ( \"%d\" , & n ) ; if ( n > 0 && n < 100 ) { for ( i = 0 ; i < n ; i ++ ) { k = i + 1 ; for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , & a ) ; if ( a >= 0 && a <= 99 ) { if ( i < ( n - 1 ) && j == 0 ) c = c + a ; else if ( ( i == n - 1 ) && j == 1 ) c = c + a ; } } } printf ( \"%d\n\" , c ) ; } } } return 0 ; }", "label": 1, "id": 27006}
{"input": "int main ( ) { int t , i , j , * * a , n ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 12623}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( ( T -- ) > 0 ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int M [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & M [ i ] [ j ] ) ; } int p = 0 ; int s = M [ 0 ] [ 0 ] ; int a , b ; for ( a = 0 ; a < ( n - 1 ) ; a ++ ) { if ( M [ ( a + 1 ) ] [ ( p + 1 ) ] > M [ ( a + 1 ) ] [ p ] ) p ++ ; s = s + M [ ( a + 1 ) ] [ p ] ; } printf ( \"%d\" , s ) ; } }", "label": 1, "id": 1652}
{"input": "int main ( ) { int t ; long int a , b , c , d , e ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; d = a ; e = b ; do { c = d % e ; d = e ; e = c ; } while ( c != 0 ) ; printf ( \"%ld %llu\n\" , d , ( a * b ) / d ) ; } }", "label": 0, "id": 25971}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\" , a , ( n1 * n2 ) / a ) ; } return 0 ; }", "label": 1, "id": 7153}
{"input": "typedef unsigned long long int ull ; ull gc ( ull a , ull b ) { if ( b == 0 ) { return a ; } return gc ( b , a % b ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { ull a , b ; scanf ( \"%lld %lld\" , & a , & b ) ; ull gcd = gc ( a , b ) ; ull lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 13947}
{"input": "int main ( ) { int t , r , i , j , k , record = 0 , sum = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & r ) ; int a [ r ] ; for ( j = 0 ; j < r ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ k ] ) ; } if ( j == 0 ) { sum = sum + a [ 0 ] ; record = 0 ; } else if ( a [ record ] >= a [ record + 1 ] ) sum = sum + a [ record ] ; else { sum = sum + a [ record + 1 ] ; record = record + 1 ; } } printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 1, "id": 12823}
{"input": "int main ( void ) { int a , b , gcd = 0 , lcm = 0 , n , j , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; for ( j = 1 ; j <= a && j <= b ; ++ j ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; else gcd = 1 ; } lcm = a * b ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 19600}
{"input": "main ( ) { int t , i , k ; int num1 , Num1 , num2 , Num2 , Nnum1 , temp , temp1 ; scanf ( \"%d\" , & t ) ; int arr [ t ] [ 2 ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num2 > num1 ) { temp = num2 ; num2 = num1 ; num1 = temp ; } if ( num1 % num2 == 0 ) { arr [ i ] [ 0 ] = num2 ; arr [ i ] [ 1 ] = num1 ; break ; } Num1 = num1 ; Nnum1 = num1 ; Num2 = num2 ; while ( num1 % num2 != 0 ) { temp1 = num1 % num2 ; num1 = num2 ; num2 = temp1 ; } arr [ i ] [ 0 ] = num2 ; do { Num1 ++ ; } while ( ( Num1 % Num2 != 0 ) || ( Num1 % Nnum1 != 0 ) ) ; arr [ i ] [ 1 ] = Num1 ; } printf ( \"\n\" ) ; for ( k = 0 ; k < t ; k ++ ) { printf ( \"%d %d\" , arr [ k ] [ 0 ] , arr [ k ] [ 1 ] ) ; printf ( \"\n\" ) ; } }", "label": 2, "id": 18765}
{"input": "int main ( ) { int t ; unsigned long n , a , min , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100000 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a ) ; if ( a < min ) min = a ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 7805}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , k ; scanf ( \"%d%d\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%d %d\n\" , k , ( a * b ) / k ) ; } return 0 ; }", "label": 1, "id": 317}
{"input": "long long int GCD ( long long int , long long int ) ; long long int LCM ( long long int , long long int ) ; int main ( ) { int T ; long long int A , B , g , p ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & A , & B ) ; g = GCD ( A , B ) ; printf ( \"%lld %lld\n\" , g , ( A * B ) / g ) ; } return 0 ; } long long int GCD ( long long int a , long long int b ) { if ( a % b == 0 ) { return b ; } else { return GCD ( b , a % b ) ; } }", "label": 0, "id": 7046}
{"input": "int main ( ) { int t , i , j , * a , n , min , sum = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; min = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) if ( min > a [ j ] ) min = a [ j ] ; sum = min * ( n - 1 ) ; printf ( \"%d\n\" , sum ) ; free ( a ) ; } return 0 ; }", "label": 0, "id": 23682}
{"input": "typedef struct triangle_ { int elements [ 5050 ] ; int tam ; } triangle ; triangle sub_triangle ( triangle t , int head ) { int itam , icol , elementcount = 0 ; triangle result ; result . tam = t . tam - 1 ; if ( result . tam < 2 ) return t ; for ( itam = 1 ; itam <= result . tam ; itam ++ ) { for ( icol = head ; icol < itam + head ; icol ++ ) { result . elements [ elementcount ] = t . elements [ icol + ( itam * ( itam + 1 ) / 2 ) ] ; elementcount ++ ; } } return result ; } void print_triangle ( triangle t ) { int i , j , elementcount = 0 ; for ( i = 1 ; i <= t . tam ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { printf ( \"%d \" , t . elements [ elementcount ] ) ; elementcount ++ ; } printf ( \"\n\" ) ; } } int max_sum_triangle ( triangle t ) { int sum1 , sum2 , result = 0 ; if ( t . tam < 3 ) result = ( t . elements [ 1 ] > t . elements [ 2 ] ) ? t . elements [ 1 ] : t . elements [ 2 ] ; else { sum1 = max_sum_triangle ( sub_triangle ( t , 0 ) ) ; sum2 = max_sum_triangle ( sub_triangle ( t , 1 ) ) ; result = ( sum1 > sum2 ) ? sum1 : sum2 ; } result += t . elements [ 0 ] ; return result ; } void test ( ) { int i ; triangle t ; scanf ( \"%d\" , & t . tam ) ; for ( i = 0 ; i < t . tam * ( t . tam + 1 ) / 2 ; i ++ ) { scanf ( \"%d\" , & t . elements [ i ] ) ; } printf ( \"%d\n\" , max_sum_triangle ( t ) ) ; } int main ( ) { int testcases , i ; scanf ( \"%d\" , & testcases ) ; for ( i = 0 ; i < testcases ; i ++ ) { test ( ) ; } return 0 ; }", "label": 2, "id": 456}
{"input": "long gcd ( long , long ) ; int main ( ) { int t = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long x , y , hcf , lcm ; scanf ( \"%ld %ld\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d\n\" , hcf ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; } long gcd ( long x , long y ) { if ( x == 0 ) { return y ; } while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 1, "id": 9055}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm , T , temp ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d \" , gcd ) ; printf ( \"%d \" , lcm ) ; } return 0 ; }", "label": 1, "id": 16268}
{"input": "int main ( ) { int p = 0 , a = 0 , b = 0 , temp = 0 ; register int i , j , k = 0 ; int n_row , t_case , sum = 0 , sum1 = 0 ; scanf ( \"%d\" , & t_case ) ; for ( i = 0 ; i < t_case ; i ++ ) { scanf ( \"%d\" , & n_row ) ; int take [ n_row ] [ n_row ] ; for ( j = 0 ; j < n_row ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & take [ j ] [ k ] ) ; } printf ( \"\n\" ) ; } for ( j = 0 ; j < n_row ; j ++ ) { k = p ; while ( k < n_row ) { sum += take [ k ] [ j ] ; if ( k == ( n_row - 2 ) ) { a = k , b = j ; a ++ , b ++ ; sum1 = sum + take [ a ] [ b ] ; } k ++ ; } ( sum > sum1 ) ? ( ( temp < sum ) ? ( temp = sum ) : temp ) : ( ( temp < sum1 ) ? ( temp = sum1 ) : temp ) ; sum = 0 , sum1 = 0 , p ++ ; } p = 0 ; printf ( \"%d\n\" , temp ) ; temp = 0 ; } return 0 ; }", "label": 1, "id": 11025}
{"input": "int sum ( int * * a , int n , int m ) { int i ; if ( n == 0 && m == 0 ) { return * ( * ( a + n ) + m ) ; } else if ( * ( * ( a + n - 1 ) + m ) > * ( * ( a + n - 1 ) + m - 1 ) ) { return * ( * ( a + n ) + m ) + sum ( a , n - 1 , m ) ; } else { return * ( * ( a + n ) + m ) + sum ( a , n - 1 , m - 1 ) ; } } int main ( ) { int t , n , * * a , max , i , j , max1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { * ( a + i ) = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , ( * ( a + i ) + j ) ) ; } } max = sum ( a , n - 1 , 0 ) ; for ( i = 1 ; i < n ; i ++ ) { max1 = sum ( a , n - 1 , i ) ; { if ( max1 > max ) { max = max1 ; } } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 15513}
{"input": "int main ( ) { long long int T ; scanf ( \"%lld\" , & T ) ; while ( T -- ) { long long int N , ar [ 100000 ] , i , min , ans ; scanf ( \"%lld\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%lld\" , & ar [ i ] ) ; } min = ar [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) { if ( ar [ i ] < min ) { min = ar [ i ] ; } } ans = min * ( N - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 1568}
{"input": "int main ( ) { int t , n , i , j , a , small ; int A [ 50000 ] ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & A [ j ] ) ; } small = 100001 ; for ( j = 0 ; j < n ; j ++ ) { if ( A [ j ] < small ) small = A [ j ] ; } a = small * ( n - 1 ) ; printf ( \"%d\n\" , a ) ; } return 0 ; }", "label": 0, "id": 4395}
{"input": "long int HCF ( long int , long int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , x , y ; scanf ( \"%ld%ld\" , & a , & b ) ; x = HCF ( a , b ) ; y = ( a * b ) / x ; printf ( \"%ld  %ld\n\" , x , y ) ; } return 0 ; } long int HCF ( long int n , long int m ) { if ( n > m && m != 0 ) return HCF ( n % m , m ) ; else if ( m > n && n != 0 ) return HCF ( n , m % n ) ; else if ( n == 0 ) return m ; else if ( m == 0 ) return n ; }", "label": 0, "id": 23224}
{"input": "int main ( ) { int m , n , t , lcm , i , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & m , & n ) ; a = m ; b = n ; while ( m != n ) { if ( m > n ) m = m - n ; else n = n - m ; } lcm = ( a * b ) / m ; printf ( \"%d %d\n\" , m , lcm ) ; } }", "label": 1, "id": 24849}
{"input": "int gcdf ( int a , int b ) ; int main ( ) { int t , a , b , i , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; gcd = gcdf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } return 0 ; } int gcdf ( int x , int y ) { if ( x % y == 0 ) return y ; return gcdf ( y , x % y ) ; }", "label": 1, "id": 11997}
{"input": "int func ( int ( * arr ) [ 100 ] , int n , int i , int max ) { int j , a , b , c ; if ( i < 0 ) return max ; else { for ( j = 0 ; j <= i ; j ++ ) { a = * ( * ( arr + i ) + j ) ; b = * ( * ( arr + ( i + 1 ) ) + j ) ; c = * ( * ( arr + ( i + 1 ) ) + ( j + 1 ) ) ; if ( ( a + b ) >= ( a + c ) ) { max = ( a + b ) ; * ( * ( arr + i ) + j ) = max ; } if ( ( a + c ) > ( a + b ) ) { max = ( a + c ) ; * ( * ( arr + i ) + j ) = max ; } } func ( arr , n , i - 1 , max ) ; } } int main ( ) { int n , array [ 100 ] [ 100 ] , i , j , t , z ; scanf ( \"%d\" , & t ) ; for ( z = 0 ; z < t ; z ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & array [ i ] [ j ] ) ; } if ( n == 1 ) printf ( \"%d\n\" , array [ 0 ] [ 0 ] ) ; else printf ( \"%d\n\" , func ( array , n , n - 2 , 0 ) ) ; } return 0 ; }", "label": 0, "id": 1961}
{"input": "int main ( ) { int T , i ; int A [ 50000 ] , N , c ; long int minimum ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d\" , & N ) ; for ( c = 0 ; c < N ; c ++ ) { scanf ( \"%d\" , & A [ c ] ) ; } minimum = A [ 0 ] ; for ( c = 1 ; c < N ; c ++ ) { if ( A [ c ] < minimum ) { minimum = A [ c ] ; } } printf ( \"%ld\n\" , minimum * ( N - 1 ) ) ; } return 0 ; }", "label": 0, "id": 22307}
{"input": "int main ( ) { int t , n , l , i , j ; scanf ( \"%d\" , & t ) ; int ans [ t ] ; for ( l = 0 ; l < t ; l ++ ) { scanf ( \"%d\" , & n ) ; int str [ n ] [ n ] , arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i + 1 ; j ++ ) arr [ i ] [ j ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & str [ i ] [ j ] ) ; } } arr [ 0 ] [ 0 ] = str [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = str [ i ] [ 0 ] + arr [ i - 1 ] [ 0 ] ; arr [ i ] [ i ] = str [ i ] [ i ] + arr [ i - 1 ] [ i - 1 ] ; for ( j = 1 ; j < i ; j ++ ) { if ( str [ i ] [ j ] + arr [ i - 1 ] [ j ] >= str [ i ] [ j ] + arr [ i - 1 ] [ j - 1 ] ) { arr [ i ] [ j ] = str [ i ] [ j ] + arr [ i - 1 ] [ j ] ; } else arr [ i ] [ j ] = str [ i ] [ j ] + arr [ i - 1 ] [ j - 1 ] ; } } int max ; max = arr [ n - 1 ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( max < arr [ n - 1 ] [ j ] ) max = arr [ n - 1 ] [ j ] ; } ans [ l ] = max ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , ans [ i ] ) ; } return 0 ; }", "label": 0, "id": 12186}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; printf ( \"\n\" ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; printf ( \"\n\" ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } printf ( \"\n\" ) ; } printf ( \"%d\n\" , solve ( x ) ) ; } return 0 ; }", "label": 0, "id": 26174}
{"input": "int main ( void ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int x ; int sum = 0 ; scanf ( \"%ld\" , & x ) ; int a [ 100001 ] ; for ( i = 0 ; i < x ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < x ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { sum += a [ i ] ; } else sum += a [ i + 1 ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 19898}
{"input": "int num_collec [ 99 ] [ 99 ] ; int height ; int main ( ) { int row , i , j = 0 , val , sum , temp = 0 ; int num_tri ; scanf ( \"%d\" , & num_tri ) ; while ( num_tri != 0 ) { scanf ( \"%d\" , & height ) ; for ( i = 0 ; i < height ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num_collec [ i ] [ j ] ) ; } } printf ( \"%d\" , solve ( 0 , 0 ) ) ; num_tri -- ; } return 0 ; } int solve ( int p , int q ) { int sum1 = num_collec [ p ] [ q ] , sum2 = num_collec [ p ] [ q ] ; if ( p == height ) { return 0 ; } else { sum1 = sum1 + solve ( p + 1 , q ) ; sum2 = sum2 + solve ( p + 1 , q + 1 ) ; } if ( sum1 > sum2 ) { return sum1 ; } else { return sum2 ; } }", "label": 2, "id": 1786}
{"input": "main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , min = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 25723}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , key [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; key [ 0 ] [ 0 ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { key [ i + 1 ] [ 0 ] = key [ i + 1 ] [ 1 ] = key [ i ] [ 0 ] + a [ i ] [ 0 ] ; for ( j = 1 ; j < i + 1 ; j ++ ) { key [ i + 1 ] [ j + 1 ] = key [ i ] [ j ] + a [ i ] [ j ] ; if ( key [ i + 1 ] [ j ] < key [ i ] [ j ] + a [ i ] [ j ] ) key [ i + 1 ] [ j ] = key [ i ] [ j ] + a [ i ] [ j ] ; } } int big = key [ n ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( key [ n ] [ i ] > big ) big = key [ n ] [ i ] ; printf ( \"%d\n\" , big ) ; t -- ; } return 0 ; }", "label": 0, "id": 23833}
{"input": "int main ( ) { int i , j , n , l ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & l ) ; while ( l > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } l -- ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 20746}
{"input": "int main ( ) { int t , n , i , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; m = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( m > a [ i ] ) m = a [ i ] ; } printf ( \"%d\n\" , m * ( n - 1 ) ) ; } }", "label": 0, "id": 19830}
{"input": "int main ( int argc , char * argv [ ] ) { int t ; printf ( \"Enter the no of test case:\n\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n1 , n2 , x , y ; printf ( \"enter two no:\n\" ) ; scanf ( \"%d%d\" , & n1 , & n2 ) ; x = gcd ( n1 , n2 ) ; printf ( \"gcd is :%d\n\" , x ) ; y = lcm ( n1 , n2 ) ; printf ( \"lcm is :%d\n\" , y ) ; } } int gcd ( int n1 , int n2 ) { while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } return n1 ; } int lcm ( int n1 , int n2 ) { int x , y ; x = n1 , y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } return x * y / n1 ; }", "label": 1, "id": 21773}
{"input": "int max_sum ( int * , int , int , int ) ; int max ( int , int ) ; int main ( ) { int tests , i , lines , j = 0 ; scanf ( \"%d\" , & tests ) ; int * output = ( int * ) malloc ( sizeof ( int ) * tests ) ; for ( i = 0 ; i < tests ; i ++ ) { scanf ( \"%d\" , & lines ) ; int size = ( lines * ( lines + 1 ) ) / 2 ; int * nos = ( int * ) malloc ( sizeof ( int ) * size ) ; while ( j < size ) scanf ( \"%d\" , & nos [ j ++ ] ) ; j = 0 ; output [ i ] = max_sum ( nos , lines , 0 , 0 ) ; free ( nos ) ; } for ( i = 0 ; i < tests ; i ++ ) printf ( \"%d\n\" , output [ i ] ) ; free ( output ) ; return 0 ; } int max_sum ( int * nos , int lines , int line_no , int index ) { if ( line_no == lines ) return 0 ; if ( index > line_no ) return 0 ; return nos [ ( line_no * ( line_no + 1 ) ) / 2 + index ] + max ( max_sum ( nos , lines , line_no + 1 , index ) , max_sum ( nos , lines , line_no + 1 , index + 1 ) ) ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 2, "id": 19963}
{"input": "long long int arr [ 100 ] [ 100 ] ; long long int m [ 100 ] [ 100 ] ; int findmax ( int a , int b ) { return a > b ? a : b ; } long long int maxsum ( int i , int j , int l ) { if ( i == l - 1 ) return arr [ i ] [ j ] ; else m [ i ] [ j ] = arr [ i ] [ j ] + findmax ( maxsum ( i + 1 , j , l ) , maxsum ( i + 1 , j + 1 , l ) ) ; return m [ i ] [ j ] ; } int main ( ) { long long int sum ; int t , n ; int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; m [ i ] [ j ] = 0 ; } } sum = maxsum ( 0 , 0 , n ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 25550}
{"input": "int main ( ) { long long int T , top1 , top2 , count , check , flag , i , n , arr [ 100000 ] ; scanf ( \"%lld\" , & T ) ; while ( T -- ) { count = 0 , flag = 1 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & arr [ i ] ) ; top1 = n - 1 ; top2 = n - 2 ; check = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == check ) continue ; else { flag = 0 ; break ; } } if ( flag == 0 ) { while ( top1 != - 1 ) { if ( top2 < 0 ) { top1 -- ; top2 = top1 - 1 ; continue ; } else if ( arr [ top1 ] >= arr [ top2 ] ) { count ++ ; top2 -- ; } else if ( arr [ top1 ] < arr [ top2 ] ) { top1 -- ; top2 = top1 - 1 ; } } printf ( \"%lld\n\" , count + n ) ; } else printf ( \"%lld\n\" , n ) ; } return 0 ; }", "label": 1, "id": 3227}
{"input": "main ( ) { int I , j , k , a [ 100 ] [ 100 ] , b = 0 , n , d , l ; scanf ( \"%d\" , & n ) ; for ( I = 0 ; I < n ; I ++ ) { scanf ( \"%d\" , & d ) ; for ( j = 0 ; j < d ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = 1 ; j < d ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { l = a [ j ] [ k ] ; a [ j ] [ k ] = a [ j ] [ k + 1 ] ; a [ j ] [ k + 1 ] = l ; } b = a [ j ] [ k + 1 ] + b ; } printf ( \"%d\" , b ) ; } }", "label": 1, "id": 24116}
{"input": "int row ; int findmax ( int arr [ ] [ 100 ] , int r , int c ) ; int main ( ) { int arr [ 100 ] [ 100 ] , i , j , k , finalmin = 0 , min = 0 , test ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { arr [ i ] [ j ] = - 1 ; } } scanf ( \"%d\" , & test ) ; for ( i = 1 ; i <= test ; i ++ ) { scanf ( \"%d\" , & row ) ; for ( j = 0 ; j < row ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } finalmin = findmax ( arr , 0 , 0 ) ; printf ( \"\n%d\" , finalmin ) ; } return 0 ; } int findmax ( int arr [ ] [ 100 ] , int r , int c ) { int result1 , result2 ; if ( r == row - 1 ) { return arr [ r ] [ c ] ; } else { result1 = findmax ( arr , r + 1 , c ) ; result2 = findmax ( arr , r + 1 , c + 1 ) ; if ( result1 > result2 ) { return result1 + arr [ r ] [ c ] ; } else { return result2 + arr [ r ] [ c ] ; } } }", "label": 2, "id": 10513}
{"input": "int main ( ) { int n , t , j , k , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } int min = a [ 0 ] ; for ( k = 0 ; k < n ; k ++ ) { if ( a [ k ] < min ) min = a [ k ] ; } cost = min * ( n - 1 ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 11212}
{"input": "int main ( void ) { int t , b , a ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; int x = a ; int y = b ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } printf ( \"%d \" , x ) ; int m = a ; int n = b ; while ( m != n ) { if ( m > n ) n = n + b ; else m = m + a ; } printf ( \"%d\n\" , n ) ; } }", "label": 2, "id": 5666}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , a , b ; long long int l , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = a * b ; l = l / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; } int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 16732}
{"input": "int t , n , a [ 150 ] [ 150 ] = { 0 } , i , c = 0 , k , temp1 , temp2 ; void sum ( int r , int j ) { for ( r ; r > 0 ; r -- ) { for ( c = j ; c > 0 ; c -- ) { temp1 = a [ r ] [ c ] + a [ r - 1 ] [ c - 1 ] ; temp2 = a [ r ] [ c - 1 ] + a [ r - 1 ] [ c - 1 ] ; a [ r - 1 ] [ c - 1 ] = ( temp1 > temp2 ) ? temp1 : temp2 ; } -- j ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } int main ( ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 ; i <= k ; i ++ ) { scanf ( \"%d\" , & a [ k ] [ i ] ) ; } } sum ( k - 1 , i - 1 ) ; } return 0 ; }", "label": 0, "id": 14463}
{"input": "int main ( ) { int t , i , min , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int ar [ n ] ; min = 100001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & ar [ i ] ) ; if ( min > ar [ i ] ) min = ar [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 25524}
{"input": "int main ( ) { int r , n , i , min = 1000005 ; scanf ( \"%d\" , & r ) ; while ( r -- ) { scanf ( \"%d\" , & n ) ; if ( n < 2 ) continue ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 1, "id": 9163}
{"input": "void main ( ) { int t , g , rem , nr , dr ; scanf ( \"%d\" , & t ) ; for ( g = 1 ; g <= t ; g ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; nr = a ; dr = b ; rem = nr % dr ; while ( rem != 0 ) { nr = dr ; dr = rem ; rem = nr % dr ; } printf ( \"%d %d\" , dr , a * b / dr ) ; } return 0 ; }", "label": 1, "id": 26068}
{"input": "main ( ) { int x [ 20 ] , y [ 20 ] , i , j , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & x [ i ] , & y [ i ] ) ; } for ( i = 0 ; i < t ; i ++ ) { for ( j = ( ( x [ i ] < y [ i ] ) ? x [ i ] : y [ i ] ) ; 1 ; -- j ) { if ( x [ i ] % j == 0 && y [ i ] % j == 0 ) { break ; } } printf ( \"%d %d\n\" , j , ( x [ i ] * y [ i ] ) / j ) ; } return 0 ; }", "label": 2, "id": 19383}
{"input": "long gcd ( long n , long m ) { if ( n % m == 0 || m == 0 ) return m ; else return gcd ( m , n % m ) ; } int main ( ) { long n , m , t , l ; scanf ( \"%ld %ld\" , & n , & m ) ; if ( n < m ) { t = n ; n = m ; m = t ; } t = gcd ( n , m ) ; l = ( n * m ) / t ; printf ( \"%ld %ld\n\" , t , l ) ; }", "label": 1, "id": 10631}
{"input": "int main ( ) { unsigned i , n , small ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%u\" , & n ) ; int a [ n - 1 ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; small = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < small ) small = a [ i ] ; } printf ( \"%u\n\" , ( ( n - 1 ) * small ) ) ; } return 0 ; }", "label": 0, "id": 11597}
{"input": "int fastread ( ) { char c = 0 ; int input = 0 ; c = getchar_unlocked ( ) ; if ( c < 33 ) c = getchar_unlocked ( ) ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int t , n , i , j ; int arr [ 101 ] [ 101 ] ; t = fastread ( ) ; while ( t -- ) { n = fastread ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] += ( ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 5615}
{"input": "int main ( ) { long long int t , s [ 50100 ] , a , i , min , ans ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { scanf ( \"%lld\" , & s [ i ] ) ; } min = s [ 0 ] ; for ( i = 1 ; i < a ; i ++ ) { if ( s [ i ] < min ) { min = s [ i ] ; } } ans = min * ( a - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 22785}
{"input": "int main ( ) { int i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int A [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { A [ i - 1 ] [ j ] += A [ i ] [ j ] > A [ i ] [ j + 1 ] ? A [ i ] [ j ] : A [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23776}
{"input": "int main ( ) { int T , i ; int a [ 50 ] , n , c ; long int min ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( c = 0 ; c < n ; c ++ ) { scanf ( \"%d\" , & a [ c ] ) ; } min = a [ 0 ] ; for ( c = 1 ; c < n ; c ++ ) { if ( a [ c ] < min ) { min = a [ c ] ; } } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 22130}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int b [ t ] ; int a [ 100 ] [ 100 ] ; int i , j , k , sum , count ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & b [ i ] ) ; for ( j = 1 ; j <= b [ i ] ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } } for ( i = 1 ; i <= t ; i ++ ) { sum = 0 ; k = 1 ; for ( j = 1 ; j <= b [ i ] ; j ++ ) { if ( ( a [ j ] [ k ] + a [ j + 1 ] [ k ] ) > ( a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ) ) { sum = a [ j + 1 ] [ k ] + a [ j ] [ k ] ; a [ j + 1 ] [ k ] = sum ; } else { sum = a [ j + 1 ] [ k + 1 ] + a [ j ] [ k ] ; a [ j + 1 ] [ k + 1 ] = sum ; k ++ ; } } printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 3, "id": 13899}
{"input": "int gcd ( int n1 , int n2 ) { if ( n2 == 0 ) return n1 ; else return gcd ( n2 , n1 % n2 ) ; } int main ( ) { int t ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { int n1 , n2 ; scanf ( \"%d%d\" , & n1 , & n2 ) ; int res = gcd ( n1 , n2 ) ; int res1 = ( n1 * n2 ) / res ; printf ( \"%d %d\n\" , res , res1 ) ; } return 0 ; }", "label": 1, "id": 20871}
{"input": "int gcd ( int c , int d ) { int r , a , b ; if ( c > d ) { a = c ; b = d ; } else { a = d ; b = c ; } r = a % b ; if ( r == 0 ) { return b ; } else { a = b ; b = r ; gcd ( a , b ) ; } } int main ( ) { int t ; int lcm ; int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; int g = gcd ( a , b ) ; lcm = a * b / g ; printf ( \"%d %d\n\" , g , lcm ) ; } return 0 ; }", "label": 1, "id": 18712}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { int n , i , j = 0 , sum = 0 , m = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ i - 1 ] ) { m = i - j ; sum += ( m + 1 ) * ( m ) / 2 ; j = i ; } } if ( j < i ) { m = i - j ; sum += ( m + 1 ) * ( m ) / 2 ; j = i ; } printf ( \"%d\n\" , sum ) ; } }", "label": 0, "id": 7259}
{"input": "long long sum ; int main ( ) { int t , n , ar [ 100001 ] , i , min , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & ar [ i ] ) ; sum = 0 ; min = ar [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( ar [ i ] < min ) min = ar [ i ] ; } m = n - 1 ; sum = min * m ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 8931}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , min , i ; long long int ans ; scanf ( \"%d\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( i == 0 ) min = a [ i ] ; if ( min > a [ i ] ) min = a [ i ] ; } ans = min * ( n - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 3577}
{"input": "void read_input ( ) ; void process ( ) ; void calculate ( int ) ; void print_input ( ) ; int num_test_cases ; typedef struct test_case { int num_lines ; int * * values ; } testcase ; testcase * t ; int main ( ) { read_input ( ) ; process ( ) ; return 0 ; } void read_input ( ) { char * s ; char * ipstring ; char * token ; int i , j , k , n , ipval ; s = ( char * ) malloc ( 3 * sizeof ( char ) ) ; gets ( s ) ; num_test_cases = atoi ( s ) ; t = ( testcase * ) malloc ( num_test_cases * sizeof ( struct test_case ) ) ; for ( i = 0 ; i < num_test_cases ; i ++ ) { gets ( s ) ; n = atoi ( s ) ; ( t + i ) -> num_lines = n ; ( t + i ) -> values = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( j = 1 ; j <= n ; j ++ ) { ( t + i ) -> values [ j - 1 ] = ( int * ) malloc ( j * sizeof ( int ) ) ; ipstring = ( char * ) malloc ( 4 * j * sizeof ( char ) ) ; gets ( ipstring ) ; token = strtok ( ipstring , \" \" ) ; k = 1 ; while ( token != NULL ) { * ( ( ( t + i ) -> values [ j - 1 ] ) + ( k - 1 ) ) = atoi ( token ) ; token = strtok ( NULL , \" \" ) ; k ++ ; } } } } void process ( ) { int i ; for ( i = 0 ; i < num_test_cases ; i ++ ) { calculate ( i ) ; } } void calculate ( int n ) { int k , j ; int down , down_right ; int * * a = ( t + n ) -> values ; for ( k = ( t + n ) -> num_lines - 1 ; k >= 0 ; k -- ) { for ( j = 0 ; j < k ; j ++ ) { down = * ( a [ k ] + j ) ; down_right = * ( a [ k ] + ( j + 1 ) ) ; if ( down > down_right ) { * ( a [ k - 1 ] + j ) += down ; } else { * ( a [ k - 1 ] + j ) += down_right ; } } } printf ( \"%d\n\" , * ( a [ 0 ] + 0 ) ) ; }", "label": 0, "id": 149}
{"input": "int maxm ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int n , i , j , max , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { max = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , b [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) b [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) b [ i ] [ j ] = a [ i ] [ j ] ; else if ( i != 0 && j == 0 ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j ] ; else if ( i == j ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j - 1 ] ; else b [ i ] [ j ] = a [ i ] [ j ] + maxm ( b [ i - 1 ] [ j ] , b [ i - 1 ] [ j - 1 ] ) ; } i = n - 1 ; for ( j = 0 ; j <= i ; j ++ ) { if ( b [ i ] [ j ] > max ) max = b [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 20954}
{"input": "int main ( ) { long int t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long int n1 , n2 , l , lcm , g , gcd ; scanf ( \"%ld%ld\" , & n1 , & n2 ) ; for ( l = n1 > n2 ? n1 : n2 ; l <= n1 * n2 ; l ++ ) if ( l % n1 == 0 && l % n2 == 0 ) { lcm = l ; break ; } for ( g = 1 ; g <= n1 && g <= n2 ; g ++ ) if ( n1 % g == 0 && n2 % g == 0 ) { gcd = g ; break ; } printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 21530}
{"input": "int main ( ) { int a , b , l , g ; printf ( \"enter the two nos:\" ) ; scanf ( \"%d\n%d\" , & a , & b ) ; l = lcm ( a , b ) ; printf ( \"lcm is %d\n\" , l ) ; g = gcd ( a , b ) ; printf ( \"gcd is %d\" , g ) ; } lcm ( int a , int b ) { int i , k , l = 1 ; if ( a <= b ) k = a ; else k = b ; for ( i = 2 ; i <= k ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { a = a / i ; b = b / i ; l = i * l ; i = i - 1 ; } } l = l * a * b ; return ( l ) ; } gcd ( int a , int b ) { int i , g , k ; if ( a <= b ) k = a ; else k = b ; for ( i = 2 ; i <= k ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = i ; break ; } } if ( g != i ) return ( 1 ) ; else return ( g ) ; }", "label": 1, "id": 25173}
{"input": "int gcd ( int a , int b ) { if ( a > b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } else { if ( a == 0 ) return b ; else return gcd ( a , b % a ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int hcf = gcd ( a , b ) ; long long int lcm = ( a * b ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 13914}
{"input": "int lcm ( int a , int b ) ; int gcd ( int a , int b ) ; int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; } int gcd ( int a , int b ) { int r ; r = a % b ; if ( r == 0 ) return b ; else gcd ( b , r ) ; } int lcm ( int a , int b ) { int t ; t = ( a * b ) / gcd ( a , b ) ; return t ; }", "label": 1, "id": 16496}
{"input": "int gcd ( int , int ) ; long long int lcm ( int , int , int ) ; int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B ; scanf ( \"%d %d\" , & A , & B ) ; int G = gcd ( A , B ) ; long long int L = lcm ( A , B , G ) ; printf ( \"%d %lld\n\" , G , L ) ; } return 0 ; } int gcd ( int A , int B ) { if ( A % B == 0 ) return B ; return gcd ( B , A % B ) ; } long long int lcm ( int A , int B , int G ) { return ( A / G ) * B ; }", "label": 1, "id": 6048}
{"input": "int main ( ) { int n , p , i , j ; int var [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & p ) ; for ( i = 0 ; i < p ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & var [ i ] [ j ] ) ; } } for ( i = p - 1 ; i > 0 ; i -- ) { for ( j = p - 1 ; j > 0 ; j -- ) { if ( ( var [ i ] [ j ] + var [ i - 1 ] [ j - 1 ] ) > ( var [ i ] [ j - 1 ] + var [ i - 1 ] [ j - 1 ] ) ) var [ i - 1 ] [ j - 1 ] = var [ i - 1 ] [ j - 1 ] + var [ i ] [ j ] ; else var [ i - 1 ] [ j - 1 ] = var [ i - 1 ] [ j - 1 ] + var [ i ] [ j - 1 ] ; } } printf ( \"%d\n\" , var [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8157}
{"input": "void main ( ) { int i , j , n , t , a [ 50001 ] , min = 50001 ; scanf ( \"%d\" , & t ) ; for ( j = 1 ; j <= t ; j ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 1, "id": 13499}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , t , i , k , j , n ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = n - 1 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { if ( ( a [ j ] [ k ] + a [ j + 1 ] [ k ] ) >= ( a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ) ) { a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k ] ; } else a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 12876}
{"input": "main ( ) { int t , r , c , n , temp1 , temp2 , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( r = 0 ; r <= n ; r ++ ) for ( c = 0 ; c <= n ; c ++ ) a [ r ] [ c ] = 0 ; for ( r = 1 ; r <= n ; r ++ ) for ( c = 1 ; c <= r ; c ++ ) scanf ( \"%d\" , & a [ r ] [ c ] ) ; for ( r = 1 ; r <= n ; r ++ ) for ( c = 1 ; c <= r ; c ++ ) { temp1 = a [ r ] [ c ] + a [ r - 1 ] [ c ] ; temp2 = a [ r ] [ c ] + a [ r - 1 ] [ c - 1 ] ; if ( temp1 > temp2 ) a [ r ] [ c ] = temp1 ; else a [ r ] [ c ] = temp2 ; } max = a [ n ] [ 0 ] ; for ( c = 1 ; c <= n ; c ++ ) if ( max < a [ n ] [ c ] ) max = a [ n ] [ c ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 6906}
{"input": "int main ( void ) { int t , n , a [ 100000 ] , i , ctr [ 100000 ] , j = 0 ; scanf ( \"%d\" , & t ) ; int x = t ; while ( t -- ) { ctr [ j ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i != 0 ) { if ( a [ i ] > a [ i - 1 ] ) ctr [ j ] = ctr [ j ] + 1 ; } } ctr [ j ] = ctr [ j ] + n ; j = j + 1 ; } for ( i = 0 ; i < x ; i ++ ) printf ( \"%d\n\" , ctr [ j ] ) ; return 0 ; }", "label": 1, "id": 16973}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; } int main ( void ) { int a , b , t , lcm ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d %d\" , & a , & b ) ; int gc = gcd ( a , b ) ; lcm = ( a * b ) / gc ; printf ( \"%d %d\n\" , gc , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 12599}
{"input": "int n , a [ 100 ] [ 100 ] ; int sum ( int i , int j ) { int t1 , t2 ; if ( i > n ) { return 0 ; } t1 = sum ( i + 1 , j ) ; t2 = sum ( i + 1 , j + 1 ) ; if ( t1 > t2 ) return t1 + a [ i ] [ j ] ; else return t2 + a [ i ] [ j ] ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; for ( ; t ; -- t ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\n\" , sum ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 14406}
{"input": "int main ( ) { int i , k , j , n , a [ 100 ] [ 100 ] ; scanf ( \"%d%d\" , & k ) ; while ( k -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 13770}
{"input": "int main ( void ) { long long s ; scanf ( \"%lld\" , & s ) ; while ( s -- ) { long long a , b , rem , gcd , p ; scanf ( \"%lld %lld\" , & a , & b ) ; p = a * b ; if ( a > b ) while ( 1 ) { rem = a % b ; if ( rem == 0 ) { gcd = b ; break ; } a = b ; b = rem ; } printf ( \"%lld %lld\n\" , gcd , ( p ) / gcd ) ; } return 0 ; }", "label": 1, "id": 16908}
{"input": "int maxim ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + maxim ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 15015}
{"input": "int quickread_int ( ) { int ch ; int num = 0 ; ch = getchar_unlocked ( ) ; while ( ch < '0' || ch > '9' ) ch = getchar_unlocked ( ) ; while ( ch >= '0' && ch <= '9' ) { num = num * 10 + ch - '0' ; ch = getchar_unlocked ( ) ; } return num ; } int main ( ) { int ar [ 100 ] [ 100 ] ; int n , max ; int t ; ; register int i , j , k = 0 ; t = quickread_int ( ) ; while ( k < t ) { n = quickread_int ( ) ; for ( i = 0 ; i < ( n ) ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) ar [ i ] [ j ] = quickread_int ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { ar [ i ] [ j ] += ( ar [ i + 1 ] [ j ] > ar [ i + 1 ] [ j + 1 ] ? ar [ i + 1 ] [ j ] : ar [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 18033}
{"input": "int sum ( int a [ 100 ] [ 100 ] , int n , int j , int k ) { int b , c ; if ( j == n ) return a [ j ] [ k ] ; else { b = a [ j ] [ k ] + sum ( a , n , j + 1 , k ) ; c = a [ j ] [ k ] + sum ( a , n , j + 1 , k + 1 ) ; } return ( b > c ? b : c ) ; } int main ( ) { int t , n , i , j , k , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } printf ( \"%d\n\" , sum ( a , n , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 18341}
{"input": "int gcde ( int , int ) ; int main ( ) { int t , a , b , gcd ; long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; gcd = gcde ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %ld\n \" , gcd , lcm ) ; } return 0 ; } int gcde ( int a , int b ) { int c ; if ( a < b ) { c = a ; a = b ; b = c ; } while ( a % b != 0 ) { c = a % b ; a = b ; b = c ; } return b ; }", "label": 1, "id": 3342}
{"input": "int hcf ( int n1 , int n2 ) { if ( n1 == 0 ) return n2 ; return hcf ( n2 % n1 , n1 ) ; } int main ( ) { int a , b , t ; int c , d , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = hcf ( a , b ) ; printf ( \"%d %d\n\" , c , ( a * b ) / c ) ; } return 0 ; }", "label": 1, "id": 16630}
{"input": "long long int gcd ( long int a , long int b ) { int temp ; while ( a ) { temp = a ; a = b % a ; b = temp ; } return b ; } int main ( int argc , char const * argv [ ] ) { long int t , a , b ; long long int hcf , lcm ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) lcm = gcd ( b , a ) ; else lcm = gcd ( a , b ) ; hcf = ( a * b ) / lcm ; printf ( \"%lld %lld\n\" , lcm , hcf ) ; } return 0 ; }", "label": 0, "id": 15110}
{"input": "int main ( ) { int g , t , i , j , a , b , c , m , s ; scanf ( \"%d\" , & t ) ; int ans [ t + 1 ] ; for ( i = 1 ; i <= t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; s = 0 ; if ( a > b ) { m = b ; } else { m = a ; } s = s + m ; for ( j = 1 ; j <= n - 2 ; j ++ ) { scanf ( \"%d\" , & c ) ; if ( c < m ) { m = c ; } s = s + m ; } ans [ i ] = s ; } for ( g = 1 ; g <= t ; g ++ ) { printf ( \"%d\n\" , ans [ g ] ) ; } return 0 ; }", "label": 1, "id": 18588}
{"input": "int gcd ( int , int ) ; int main ( ) { int t ; int a , b ; int hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = a * b / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; }", "label": 1, "id": 13318}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , low ; long long int lcm ; long int gc , remainder ; scanf ( \"%ld %ld\" , & a , & b ) ; while ( 1 ) { remainder = a % b ; if ( remainder == 0 ) { gc = b ; break ; } else { a = b ; b = remainder ; } } lcm = a * b / gc ; printf ( \"%ld %lld\n\" , gc , lcm ) ; } return 0 ; }", "label": 1, "id": 13237}
{"input": "int main ( ) { int t , i , a [ 1000 ] , b [ 1000 ] , k , g [ 1000 ] , l [ 1000 ] , j , p ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\\t%d\" , & a [ i ] , & b [ i ] ) ; for ( k = a [ i ] ; k >= 1 ; k -- ) { if ( a [ i ] % k == 0 && b [ i ] % k == 0 ) g [ i ] = k ; else g [ i ] = 1 ; } p = a [ i ] * b [ i ] ; for ( j = p - 1 ; j > 1 ; j -- ) { if ( a [ i ] % j == 0 && b [ i ] % j == 0 && p % j == 0 ) l [ i ] = j ; else l [ i ] = p ; } } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\\t%d\n\" , g [ i ] , l [ i ] ) ; } return 0 ; }", "label": 2, "id": 11733}
{"input": "int main ( ) { int i = 0 , t , n , a [ 50000 ] , b [ 50000 ] , s [ 10 ] , k , j ; scanf ( \" %d\" , & t ) ; while ( i ++ < t ) { scanf ( \" %d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \" %d\" , & a [ i ] ) ; b [ 0 ] = a [ 0 ] ; k = 0 ; s [ i ] = 0 ; for ( j = 1 ; j < n ; j ++ ) if ( a [ j ] < b [ k ] ) { b [ k ] = a [ j ] ; s [ i ] += b [ k ++ ] ; } } i = 0 ; while ( i ++ < t ) printf ( \"%d\n\" , s [ i ] ) ; return 0 ; }", "label": 1, "id": 23128}
{"input": "int main ( ) { int t , s , * * A , * * B , i , j , sol ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & s ) ; sol = - 1 ; A = ( int * * ) malloc ( s * sizeof ( int * ) ) ; for ( i = 0 ; i < s ; i ++ ) A [ i ] = ( int * ) malloc ( s * sizeof ( int ) ) ; B = ( int * * ) malloc ( s * sizeof ( int * ) ) ; for ( i = 0 ; i < s ; i ++ ) B [ i ] = ( int * ) calloc ( s , sizeof ( int ) ) ; for ( i = 0 ; i < s ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; } B [ 0 ] [ 0 ] = A [ 0 ] [ 0 ] ; for ( i = 1 ; i < s ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) B [ i ] [ j ] = A [ i ] [ j ] + B [ i - 1 ] [ j ] ; else B [ i ] [ j ] = A [ i ] [ j ] + ( ( B [ i - 1 ] [ j ] >= B [ i - 1 ] [ j - 1 ] ) ? B [ i - 1 ] [ j ] : B [ i - 1 ] [ j - 1 ] ) ; if ( i == s - 1 ) if ( B [ i ] [ j ] > sol ) sol = B [ i ] [ j ] ; } } for ( i = 0 ; i < s ; i ++ ) { free ( A [ i ] ) ; free ( B [ i ] ) ; } free ( A ) ; free ( B ) ; printf ( \"%d\n\" , sol ) ; } return 0 ; }", "label": 0, "id": 6017}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n1 , n2 , i , gcd , lcm ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d  %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 16251}
{"input": "int compare ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int sum , i , n , ar [ 100002 ] , t ; scanf ( \"%d\" , & n ) ; for ( ; n > 0 ; n -- ) { sum = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & ar [ i ] ) ; } qsort ( ar , t , sizeof ( int ) , compare ) ; sum = ar [ 0 ] * ( t - 1 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 24571}
{"input": "int main ( ) { int x ; scanf ( \"%d\" , & x ) ; int i ; for ( i = 0 ; i < x ; i ++ ) { long d = 0 , l = 0 ; long y ; long n = 1 , k = 0 , j ; long a [ 100000 ] ; scanf ( \"%d\" , & y ) ; for ( j = 1 ; j <= y ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } if ( y == 1 ) { printf ( \"1\" ) ; } else { for ( n = 1 ; n < y ; n ++ ) { if ( a [ n ] <= a [ n + 1 ] ) { k ++ ; } else { if ( a [ n - 1 ] <= a [ n ] && n > 1 ) { l = k + 1 ; d = d + ( ( l * ( l + 1 ) ) / 2 ) ; k = 0 ; l = 0 ; } } } if ( k != 0 ) { d = d + ( ( ( k + 1 ) * ( k + 2 ) ) / 2 ) ; } printf ( \"%ld\" , d ) ; } } }", "label": 1, "id": 792}
{"input": "int main ( void ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i ; long long a , b , c = 1 , s = 0 ; scanf ( \"%d\" , & n ) ; scanf ( \"%lld\" , & a ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & b ) ; if ( b < a ) { s += ( c * ( c + 1 ) ) / 2 ; c = 0 ; } c ++ ; a = b ; } s += ( c * ( c + 1 ) ) / 2 ; printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 20234}
{"input": "int main ( void ) { int t ; long long n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long a [ n ] ; long long mincost ; int i = 1 ; scanf ( \"%lld\" , & mincost ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , a + i ) ; if ( a [ i ] < mincost ) mincost = a [ i ] ; } printf ( \"%lld\n\" , mincost * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 15312}
{"input": "int num [ 100 ] [ 100 ] ; int r , r1 ; int a [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int ans ( int num [ 100 ] [ 100 ] , int i , int j ) { if ( a [ i ] [ j ] != 0 ) return a [ i ] [ j ] ; if ( i < 0 || j < 0 ) return 0 ; if ( i == 0 && j == 0 ) { a [ i ] [ j ] = num [ i ] [ j ] ; return a [ i ] [ j ] ; } else { a [ i ] [ j ] = ( num [ i ] [ j ] + max ( ans ( num , i - 1 , j ) , ans ( num , i - 1 , j - 1 ) ) ) ; return a [ i ] [ j ] ; } } void fastRead ( ) { int i = 0 , p = 0 , q = 0 ; char s [ 65535 ] ; char * string ; int bytesRead ; int nbytes = 100 ; string = ( char * ) malloc ( nbytes + 1 ) ; int u = 0 ; scanf ( \"%d\n\" , & r ) ; r1 = r ; while ( r ) { bytesRead = getline ( & string , & nbytes , stdin ) ; while ( string [ i ] != '\n' ) { if ( string [ i ] == ' ' ) { num [ p ] [ q ] = u ; u = 0 ; i ++ ; q ++ ; } else { u = u * 10 + ( string [ i ] - '0' ) ; i ++ ; } } num [ p ] [ q ] = u ; u = 0 ; p ++ ; r -- ; q = 0 ; i = 0 ; } } int main ( int argc , char * * argv ) { int n , i , j , count = 0 , se ; int an [ 100 ] ; scanf ( \"%d\n\" , & n ) ; while ( n ) { fastRead ( ) ; for ( i = 0 ; i <= 100 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = 0 ; i = 0 ; se = ans ( num , r1 - 1 , i ) ; for ( i = 0 ; i < r1 ; i ++ ) { if ( ans ( num , r1 - 1 , i ) > se ) se = ans ( num , r1 - 1 , i ) ; } an [ count ] = se ; count ++ ; n -- ; } for ( i = 0 ; i < count ; i ++ ) printf ( \"%d\n\" , an [ i ] ) ; return ( EXIT_SUCCESS ) ; }", "label": 3, "id": 1408}
{"input": "int main ( ) { int n , r , i = 0 , j = 0 ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = r - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; n -- ; } return 0 ; }", "label": 0, "id": 21486}
{"input": "int main ( ) { int t ; long int a , b , num , den , rem , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 24963}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; int s [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) s [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else { if ( s [ i - 1 ] [ j - 1 ] > s [ i - 1 ] [ j - 1 ] ) s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } } } -- i ; -- j ; int max = 0 ; for ( j = 0 ; j <= i ; j ++ ) if ( max < s [ i ] [ j ] ) max = s [ i ] [ j ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 14655}
{"input": "int main ( void ) { long long int t , n , i , j , s , a [ 50000 ] , ans [ 10 ] ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lld\" , & a [ j ] ) ; s = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < s ) s = a [ j ] ; } ans [ i ] = s * ( n - 1 ) ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%lld\n\" , ans [ i ] ) ; return 0 ; }", "label": 0, "id": 11770}
{"input": "int main ( ) { int test , row , i , k , j ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & row ) ; int a [ row ] [ row ] ; for ( k = 0 ; k < row ; k ++ ) { for ( j = 0 ; j <= k ; j ++ ) { scanf ( \"%d\" , & a [ k ] [ j ] ) ; } } for ( i = row - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < row - 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16755}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i ; long long int a , b , n , d , r ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } r = n % d ; while ( r != 0 ) { n = d ; d = r ; r = n % d ; } printf ( \"%lld %lld\n\" , d , ( a * b ) / d ) ; } return 0 ; }", "label": 0, "id": 8725}
{"input": "long long int gcdf ( long long int a , long long int b ) { long long int i ; if ( a > b ) i = b ; else i = a ; for ( ; i > 0 ; i -- ) { if ( a % i == 0 && b % i == 0 ) return i ; } } long long int lcmf ( long long int a , long long int b ) { long long int i ; if ( a > b ) i = a ; else i = b ; long long int h = i ; while ( 1 ) { if ( i % a == 0 && i % b == 0 ) return i ; i += h ; } } int main ( ) { long long int t , lcm = 0 , gcd = 0 , a , b ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; lcm = lcmf ( a , b ) ; gcd = gcdf ( a , b ) ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } }", "label": 2, "id": 19474}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { long long max ; max = a ; while ( 1 ) { if ( max % a == 0 && max % b == 0 ) return max ; max ++ ; } } int main ( void ) { long long a , b , t , g , l ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; if ( a > b ) l = lcm ( a , b ) ; else l = lcm ( b , a ) ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 26239}
{"input": "int main ( ) { int T , i , a , b , d , L , k ; scanf ( \"%d\" , & T ) ; for ( d = 0 ; d < T ; d ++ ) { scanf ( \"%d%d\" , & a , & b ) ; for ( L = a > b ? a : b ; L < a * b ; L = L + ( a > b ? a : b ) ) { if ( L % a == 0 && L % b == 0 ) { break ; } } if ( ( a * b ) / L < 1 ) { k = 1 ; printf ( \"%d %d\n\" , k , L ) ; } else { printf ( \"%d %d\n\" , ( a * b ) / L , L ) ; } } return 0 ; }", "label": 1, "id": 2113}
{"input": "static char buf [ BUF_SIZE ] ; static int pos = 0 ; static int len = 0 ; int isSpaceChar ( char c ) { return c == ' ' || c == '\\r' || c == '\n' || c == '\\t' || c == - 1 ; } char readC ( ) { if ( pos >= len ) { len = read ( 0 , buf , BUF_SIZE ) ; if ( len < 1 ) return - 1 ; pos = 0 ; } return buf [ pos ++ ] ; } int readInt ( ) { int c , ve = 1 , i = 0 ; do { c = readC ( ) ; } while ( isSpaceChar ( c ) ) ; if ( c == '-' ) { ve = - 1 ; c = readC ( ) ; } do { i = ( i << 3 + i << 1 ) + c - '0' ; c = readC ( ) ; } while ( ! isSpaceChar ( c ) ) ; return i * ve ; } int main ( ) { int T , n , i , j ; T = readInt ( ) ; while ( T -- ) { n = readInt ( ) ; int A [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] = readInt ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] += MAX ( A [ i + 1 ] [ j ] , A [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 12191}
{"input": "int main ( ) { int test , counter , i , j , lines ; scanf ( \"%d\" , & test ) ; for ( counter = 0 ; counter < test ; counter ++ ) { scanf ( \"%d\" , & lines ) ; int a [ lines ] [ lines ] ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = lines - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15106}
{"input": "int main ( ) { int t , n , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int c = 0 ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( a = 0 ; a < n ; a ++ ) scanf ( \"%d\" , & arr [ a ] ) ; for ( a = 0 ; a < n - 1 ; a ++ ) { if ( arr [ a ] > arr [ a + 1 ] ) { b = a ; c = c + arr [ a + 1 ] ; } else { b = a + 1 ; c = c + arr [ a ] ; } for ( a = b ; b < n - 1 ; b ++ ) arr [ a ] = arr [ a + 1 ] ; } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 2, "id": 7344}
{"input": "int gcd ( int a , int b ) { if ( b % a == 0 ) return ( a ) ; else return ( gcd ( b % a , a ) ) ; } int main ( ) { int a , b , t , hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%d %d\" , hcf , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 23606}
{"input": "int main ( ) { int n , m , sum = 0 , i , j , * b , k = 0 , temp = 0 , l = 0 ; scanf ( \"%d\" , & n ) ; int ar [ 100 ] [ 100 ] ; for ( ; n > 0 ; n -- ) { scanf ( \"%d\" , & m ) ; b = calloc ( m , sizeof ( int ) ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } for ( i = 0 ; i < m ; i ++ ) { sum += ar [ i ] [ 0 ] ; l += ar [ i ] [ i ] ; } temp = sum ; for ( j = m - 1 ; j > k ; ) { if ( b [ j ] == b [ j - 1 ] ) { temp = temp - ar [ j ] [ b [ j ] ] + ar [ j ] [ 1 + b [ j ] ] ; b [ j ] ++ ; if ( sum < temp ) sum = temp ; j = m - 1 ; } if ( b [ j ] == j ) { k ++ ; j = m - 1 ; } if ( ( b [ j ] - 1 ) == b [ j - 1 ] ) j -- ; } if ( sum < l ) sum = l ; printf ( \"%d\n\" , sum ) ; sum = temp = l = 0 ; } }", "label": 1, "id": 1896}
{"input": "int main ( ) { long int i , t , a [ 50000 ] , min , j , n ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } min = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } min = min * ( n - 1 ) ; printf ( \"%d\n\" , min ) ; } }", "label": 1, "id": 13368}
{"input": "int main ( ) { int n , i , j ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\" , a [ i ] [ j ] ) ; }", "label": 3, "id": 6433}
{"input": "int n , sum ; void func ( int ar [ n ] [ n ] , int i , int j , int max ) { if ( i <= n - 1 ) { max += ar [ i ] [ j ] ; func ( ar , i + 1 , j , max ) ; func ( ar , i + 1 , j + 1 , max ) ; } else { if ( max > sum ) sum = max ; } } int main ( void ) { int t , k , temp , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int ar [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } func ( ar , 0 , 0 , 0 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 16737}
{"input": "int main ( ) { int n ; int rows ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & rows ) ; int b [ rows ] [ rows ] ; int i , j , temp , sum ; while ( n -- ) { for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & b [ i ] [ j ] ) ; } for ( i = rows - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( b [ i ] [ j ] < b [ i ] [ j + 1 ] ) { b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] + b [ i ] [ j + 1 ] ; } else if ( b [ i ] [ j ] >= b [ i ] [ j + 1 ] ) { b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] + b [ i ] [ j ] ; } } } printf ( \"%d\n\" , b [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 15971}
{"input": "long find_lcm ( long l , long s ) ; int main ( void ) { int t ; long a , b , large , small , hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a >= b ) { large = a ; small = b ; } else { large = b ; small = a ; } if ( large % small == 0 ) { hcf = small ; lcm = large ; } else { lcm = find_lcm ( large , small ) ; hcf = ( large * small ) / lcm ; } printf ( \"%ld %ld\n\" , hcf , lcm ) ; } return 0 ; } long find_lcm ( long l , long s ) { long i = 1 ; while ( ( l * i ) % s != 0 ) i ++ ; return ( l * i ) ; }", "label": 2, "id": 4322}
{"input": "int main ( ) { int a , b , n , repeat ; long temp ; long gcd , lcm , tempa , tempb ; scanf ( \"%d\" , & n ) ; for ( repeat = 0 ; repeat < n ; repeat ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a < b ) { tempa = b ; tempb = a ; } else { tempa = a ; tempb = b ; } temp = a ; while ( b != 0 ) { a = b ; b = temp % b ; temp = a ; } gcd = a ; printf ( \"%d\" , a ) ; a = tempa / gcd ; b = tempb / gcd ; lcm = gcd * a * b ; printf ( \"  %d\" , lcm ) ; } return 0 ; }", "label": 1, "id": 11336}
{"input": "int gcd ( int x , int y ) { if ( y > x ) { y = y + x ; x = y - x ; y = y - x ; } if ( ! ( x % y ) ) { return y ; } else { gcd ( y , x % y ) ; } } int main ( ) { int tst , i , j ; scanf ( \"%d\" , & tst ) ; for ( i = 0 ; i < tst ; i ++ ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; long int hcf = gcd ( a , b ) ; long int lcm = a * ( b / hcf ) ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } }", "label": 0, "id": 4869}
{"input": "int hcf ( int x , int y ) { if ( x == 0 ) { return y ; } else if ( y == 0 ) { return x ; } else { return hcf ( y , x % y ) ; } } int main ( ) { int a , b , gcd , p , q , T ; long lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\n%d\" , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %ld\n\" , gcd , lcm ) ; } }", "label": 1, "id": 13954}
{"input": "int main ( ) { int m ; unsigned long long n , a , i , min = 10000000 ; scanf ( \"%d\" , & m ) ; while ( m -- ) { scanf ( \"%llu\" , & n ) ; i = 0 ; while ( i < n ) { scanf ( \"%llu\" , & a ) ; if ( a < min ) min = a ; i ++ ; } printf ( \"%llu\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 15134}
{"input": "int main ( ) { int T , j , i , size , times = 0 , total = 0 , nos , count = 0 , largest = - 9999999 ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & size ) ; int arr [ size ] [ size ] ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j < size ; j ++ ) { if ( j <= i ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } if ( size == 1 ) { printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; continue ; } for ( i = 0 ; i < ( size - 1 ) ; i ++ ) { j = 0 ; if ( ( arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ) > ( arr [ i ] [ j ] + arr [ i + 1 ] [ j ] + arr [ i + 1 ] [ j + 1 ] ) ) { if ( largest < arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ) largest = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ; } else { if ( largest < ( arr [ i ] [ j ] + arr [ i + 1 ] [ j ] + arr [ i + 1 ] [ j + 1 ] ) ) largest = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , largest ) ; } return 0 ; }", "label": 1, "id": 19806}
{"input": "int sum ( int , int [ 100 ] [ 100 ] ) ; int max ( int , int ) ; int scanInt ( ) ; int main ( ) { int n , r , o , p , q , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { r = scanInt ( ) ; for ( o = 0 ; o < r ; o ++ ) for ( q = 0 ; q <= o ; q ++ ) { a [ o ] [ q ] = scanInt ( ) ; } printf ( \"%d\n\" , sum ( r , a ) ) ; } } int sum ( int n , int a [ 100 ] [ 100 ] ) { int i , j ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { a [ i - 1 ] [ j ] += max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; } return a [ 0 ] [ 0 ] ; } int max ( int a , int b ) { return ( a > b ) ? a : b ; } int scanInt ( ) { int x = 0 ; register char ch ; ch = getchar_unlocked ( ) ; while ( ch <= '9' && ch >= '0' ) { x = ( x << 3 ) + ( x << 1 ) + ch - '0' ; ch = getchar_unlocked ( ) ; } return x ; }", "label": 1, "id": 13481}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int * a ; int i = 0 ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; while ( i < n ) { scanf ( \"%d\" , & a [ i ] ) ; i ++ ; } int min = 1000000 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%d\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 4273}
{"input": "int gcd ( int , int ) ; int main ( void ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int a , b , lcm , result ; scanf ( \"%lld%lld\" , & a , & b ) ; result = gcd ( a , b ) ; lcm = ( a * b ) / result ; printf ( \"%lld %lld\n\" , result , lcm ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return ( 0 ) ; else if ( a == b ) return ( 1 ) ; else { while ( a != b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else if ( a < b ) return gcd ( a , b - a ) ; } return ( a ) ; } }", "label": 1, "id": 10129}
{"input": "int main ( ) { int t , i , j , A , B , g , l ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; g = ( A / A ) ; l = ( A * B ) ; printf ( \"%d %d\" , g , l ) ; } return 0 ; }", "label": 1, "id": 18684}
{"input": "int a [ 100 ] [ 100 ] , n ; int sum ( ) ; int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\n\" , sum ( ) ) ; } return 0 ; } int sum ( ) { int i , j ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } } return a [ 0 ] [ 0 ] ; }", "label": 1, "id": 25636}
{"input": "int main ( ) { short int test , row , p , n , i , var1 ; scanf ( \"%hd\" , & test ) ; while ( test -- ) { scanf ( \"%hd\" , & row ) ; i = row * ( row + 1 ) / 2 ; short int array [ i ] ; for ( var1 = 0 ; var1 < i ; var1 ++ ) scanf ( \"%hd\" , & array [ var1 ] ) ; n = i - row ; p = n - row + 1 ; i = p ; while ( p >= 0 ) { i = 0 ; while ( i < ( n - p ) ) { if ( array [ n + i ] > array [ n + i + 1 ] ) array [ p + i ] = array [ p + i ] + array [ n + i ] ; else array [ p + i ] = array [ p + i ] + array [ n + i + 1 ] ; i ++ ; } var1 = p ; p = 2 * p - n + 1 ; n = var1 ; } printf ( \"%hd\n\" , array [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 3553}
{"input": "int main ( ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , m [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { if ( i != n - 1 ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += m [ j ] ; } } for ( j = 0 ; j <= i - 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { m [ j ] = a [ i ] [ j ] ; } else { m [ j ] = a [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 258}
{"input": "int main ( ) { int t ; int r , k , x , y ; int i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { i = 0 ; scanf ( \"%d %d\" , & x , & y ) ; if ( y > x ) { r = x ; x = y ; y = r ; } r = x * y ; while ( y ) { printf ( \"%d\n\" , i ++ ) ; k = x % y ; x = y ; y = k ; } printf ( \"\n%d %d\n\" , x , r / x ) ; } return 0 ; }", "label": 1, "id": 3548}
{"input": "int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int a , b , t , result1 = 0 , result2 = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; result1 = gcd ( a , b ) ; result2 = ( a * b ) / result2 ; printf ( \"%d %d\" , result1 , result2 ) ; } return 0 ; }", "label": 3, "id": 2993}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , j , k , temp ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = 0 ; k < ( n - j ) - 1 ; k ++ ) { if ( a [ k ] > a [ k + 1 ] ) { temp = a [ k ] ; a [ k ] = a [ k + 1 ] ; a [ k + 1 ] = temp ; } } } int cost = ( n - 1 ) * a [ 0 ] ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 22291}
{"input": "long int gcd ( long int , long int ) ; int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , l , g ; scanf ( \"%ld %ld\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; } long int gcd ( long int a , long int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; }", "label": 0, "id": 21015}
{"input": "int hcf ( int a , int b ) { if ( b == 0 ) return a ; else return hcf ( b , a % b ) ; } int main ( ) { int n ; int a [ 2 ] ; scanf ( \"%d\" , & n ) ; int * gcd = ( int * ) malloc ( sizeof ( int ) * n ) ; int * lcm = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( int i = 0 ; i < n ; i ++ ) { fflush ( stdin ) ; for ( int j = 0 ; j < 2 ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } gcd [ i ] = hcf ( a [ 0 ] , a [ 1 ] ) ; lcm [ i ] = a [ 0 ] * a [ 1 ] / gcd [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { printf ( \"%d %d\n\" , gcd [ i ] , lcm [ i ] ) ; } }", "label": 1, "id": 24953}
{"input": "int gcd ( int n , int m ) { int temp , i ; for ( i = 1 ; i <= n || i <= m ; i ++ ) { if ( n % i == 0 && m % i == 0 ) temp = i ; } return temp ; } int lcm ( int n , int m ) { return m * n / gcd ( n , m ) ; } main ( ) { int t , a , i , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 2, "id": 9968}
{"input": "int maxpath ( int , int ) ; int n , F [ 100 ] [ 100 ] , a [ 100 ] [ 100 ] ; int main ( ) { int i , j , t , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) F [ i ] [ j ] = - 1 ; } max = maxpath ( 0 , 0 ) ; printf ( \"%d\n\" , max ) ; } } int maxpath ( int i , int j ) { int t1 , t2 ; if ( i == n ) return 0 ; else if ( F [ i ] [ j ] != - 1 ) return F [ i ] [ j ] ; else { t1 = a [ i ] [ j ] + maxpath ( i + 1 , j ) ; t2 = a [ i ] [ j ] + maxpath ( i + 1 , j + 1 ) ; if ( t1 > t2 ) { F [ i ] [ j ] = t1 ; return t1 ; } else { F [ i ] [ j ] = t2 ; return t2 ; } } }", "label": 0, "id": 9640}
{"input": "int find_minimume ( int * arr , int len ) { int best = * ( arr ) ; for ( int i = 1 ; i < len ; i ++ ) { if ( * ( arr + i ) < best ) best = * ( arr + i ) ; } return best ; } int main ( ) { int t ; int arr [ 50000 ] ; int number ; int n ; int result ; int result_array [ 10 ] ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & number ) ; arr [ j ] = number ; } result = find_minimume ( arr , n ) ; result = result * ( n - 1 ) ; result_array [ i ] = result ; } for ( int i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , result_array [ i ] ) ; } }", "label": 0, "id": 4219}
{"input": "static char _rbuf [ 8192 * 8 ] ; static char * _rend = 0 ; static char * _rpos = 0 ; static int _getchar ( ) { int n = read ( 0 , _rbuf , sizeof _rbuf ) ; if ( n <= 0 ) { printf ( \"EOF(%d)\n\" , n ) ; exit ( 1 ) ; } _rend = _rbuf + n ; _rpos = _rbuf + 1 ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < '0' ) { } int n = c - '0' ; while ( ( ( c = mygetchar ( ) ) ) >= '0' ) { n = n * 10 + c - '0' ; } return n ; } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - 1 ; while ( 1 ) { buf [ bn -- ] = '0' + ( n ) ; n = n / 10 ; if ( n == 0 ) break ; } while ( bn < BSIZE - 1 ) putchar ( buf [ ++ bn ] ) ; putchar ( '\n' ) ; } static int dump ( int a [ ] , int n ) { int i = 0 ; printf ( \"line-dump:\" ) ; while ( i < n ) printf ( \"%d \" , a [ i ++ ] ) ; printf ( \"\n\" ) ; } void tria ( int n ) { int a [ n ] ; int b [ n ] ; a [ 0 ] = 0 ; int * cur = b ; int * old = a ; int i = 0 ; while ( i < n ) { cur [ 0 ] = get_i ( ) + old [ 0 ] ; int j = 1 ; while ( j < i ) { cur [ j ] = get_i ( ) + max ( old [ j - 1 ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = get_i ( ) + old [ j - 1 ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } i ++ ; } int mx = 0 ; for ( i = 0 ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; put_i ( mx ) ; } int main ( int ac , char * * av ) { int n = get_i ( ) ; while ( n -- > 0 ) { tria ( get_i ( ) ) ; } return 0 ; }", "label": 1, "id": 22941}
{"input": "int findmax ( int i , int j ) ; int mat [ 100 ] [ 100 ] , n , r ; int main ( ) { int n , i , j , k , hsum ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & r ) ; for ( j = 0 ; j < r ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & mat [ j ] [ k ] ) ; } } int max = findmax ( 0 , 0 ) ; printf ( \"%d\" , max ) ; } return 0 ; } int findmax ( int i , int j ) { if ( i >= ( r - 1 ) ) return mat [ i ] [ j ] ; int mleft = findmax ( i + 1 , j ) ; int mright = findmax ( i + 1 , j + 1 ) ; int t = 0 ; if ( mleft > mright ) { t = mat [ i ] [ j ] + mleft ; } else if ( mleft < mright ) { t = mat [ i ] [ j ] + mright ; } else t = mat [ i ] [ j ] + mleft ; return t ; }", "label": 2, "id": 14793}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm ; int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == 0 && n2 % i == 0 ) { gcd = i ; } } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 6521}
{"input": "int greater ( int a , int b ) ; int main ( ) { int a , b [ 101 ] = { 0 } , c [ 101 ] = { 0 } , d , e , f , t , k [ 101 ] = { 0 } , i , j , m , n ; scanf ( \"%d\" , & e ) ; for ( t = 0 ; t < e ; t ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b [ 0 ] ) ; k [ 0 ] = b [ 0 ] ; for ( i = 1 ; i < a ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & c [ j ] ) ; } for ( j = 1 ; j < i ; j ++ ) { d = greater ( b [ j - 1 ] , b [ j ] ) ; k [ j ] = b [ j ] ; b [ j ] = c [ j ] + d ; } b [ i ] = c [ i ] + k [ j - 1 ] ; b [ 0 ] = c [ 0 ] + b [ 0 ] ; } for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < a ; j ++ ) { if ( b [ i ] > b [ j ] ) { f = b [ i ] ; b [ i ] = b [ j ] ; b [ j ] = f ; } } } printf ( \"%d\" , b [ 0 ] ) ; } } int greater ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 1, "id": 25360}
{"input": "int main ( void ) { int i , j , k , n , a , b [ 101 ] [ 101 ] ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a ) ; for ( j = 0 ; j < a ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , b [ j ] [ k ] ) ; } } for ( j = a - 1 ; j > 0 ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { if ( b [ j ] [ k + 1 ] > b [ j ] [ k ] ) b [ j - 1 ] [ k ] += b [ j ] [ k + 1 ] ; else b [ j - 1 ] [ k ] += b [ j ] [ k ] ; } } printf ( \"%d\n\" , b [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 11781}
{"input": "int main ( ) { int T , i ; long long int A [ 50000 ] , N , min ; scanf ( \"%d\" , & T ) ; while ( T ) { scanf ( \"%lld\" , & N ) ; scanf ( \"%lld\" , & A [ 0 ] ) ; min = A [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { scanf ( \"%lld\" , & A [ i ] ) ; if ( A [ i ] < min ) min = A [ i ] ; } printf ( \"%lld\n\" , ( min * ( N - 1 ) ) ) ; T -- ; } return 0 ; }", "label": 0, "id": 16345}
{"input": "int main ( int argc , char * * argv ) { int T , N , triangle [ 99 ] [ 99 ] , best [ 99 ] [ 99 ] , i , j , k ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & N ) ; for ( j = 0 ; j < N ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & triangle [ j ] [ k ] ) ; } } best [ 0 ] [ 0 ] = triangle [ 0 ] [ 0 ] ; for ( j = 1 ; j < N ; j ++ ) { best [ j ] [ 0 ] = triangle [ j ] [ 0 ] + best [ j - 1 ] [ 0 ] ; for ( k = 1 ; k <= j ; k ++ ) { best [ j ] [ k ] = triangle [ j ] [ k ] + ( ( best [ j - 1 ] [ k ] > best [ j - 1 ] [ k - 1 ] ) ? best [ j - 1 ] [ k ] : best [ j - 1 ] [ k - 1 ] ) ; } } int max = best [ N - 1 ] [ 0 ] ; for ( j = 1 ; j < N ; j ++ ) { if ( best [ N - 1 ] [ j ] > max ) max = best [ N - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return ( EXIT_SUCCESS ) ; }", "label": 3, "id": 1426}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , c , d ; scanf ( \"%lld %lld\" , & a , & b ) ; c = gcd ( a , b ) ; d = ( a * b ) / gcd ( a , b ) ; printf ( \"%lld %lld\n\" , c , d ) ; } return 0 ; }", "label": 0, "id": 22856}
{"input": "int main ( ) { int a , b , i = 0 , j = 0 , gcd = 0 , lcm = 0 , n ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i < a && i < b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; lcm = ( a * b ) / gcd ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 1419}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int min ( int a , int b ) { if ( a >= b ) return b ; else return a ; } int gcd ( int a , int b ) { if ( a > b && a % b == 0 ) { return b ; } else if ( a < b && b % a == 0 ) { return a ; } else return gcd ( b , a % b ) ; } int min_of_n ( int len , int arr [ ] ) { int i = 0 , j = 1 ; int minimum = min ( arr [ 0 ] , arr [ 1 ] ) ; if ( len % 2 == 0 ) { for ( ; i < len && j < len ; i += 2 , j += 2 ) { int temp = ( min ( arr [ i ] , arr [ j ] ) ) ; if ( temp < minimum ) { minimum = temp ; } } } if ( len % 2 != 0 ) { for ( ; i < len && j < len ; i += 2 , j += 2 ) { int temp = ( min ( arr [ i ] , arr [ j ] ) ) ; if ( temp < minimum ) { minimum = temp ; } minimum = min ( minimum , arr [ len - 1 ] ) ; } } return minimum * ( len - 1 ) ; } int main ( ) { int t ; int a [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int noneed = 0 ; for ( noneed = 0 ; noneed < n ; noneed ++ ) { scanf ( \"%d\" , & a [ noneed ] ) ; } printf ( \"%d\n\" , min_of_n ( n , a ) ) ; } return 0 ; }", "label": 0, "id": 23215}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd1 , lcm ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) gcd1 = gcd ( a , b ) ; else gcd1 = gcd ( b , a ) ; lcm = ( a * b ) / gcd1 ; printf ( \"%d %d\n\" , gcd1 , lcm ) ; } }", "label": 1, "id": 24596}
{"input": "int main ( ) { int n , k , num , total = 0 ; system ( \"clear\" ) ; scanf ( \"%d%d\" , & n , & k ) ; for ( n ; n > 0 ; n -- ) { scanf ( \"%d\" , & num ) ; if ( num % k == 0 ) total ++ ; } printf ( \"%d\" , total ) ; return 0 ; }", "label": 1, "id": 6059}
{"input": "int arr [ 102 ] [ 102 ] = { 0 } ; int main ( void ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; }", "label": 0, "id": 3174}
{"input": "int ans = 0 , arr [ 100 ] [ 100 ] ; void maximize ( int n , int r , int c , int s ) { int i ; if ( r == n ) ans = ( ( s > ans ) ? s : ans ) ; else for ( i = 0 ; i < 2 ; i ++ ) maximize ( n , r + 1 , c + i , s + arr [ r ] [ c - 1 + i ] ) ; } int main ( ) { int t , n , row , col ; scanf ( \"%d\" , & t ) ; for ( ; t > 0 ; t -- , ans = 0 ) { scanf ( \"%d\" , & n ) ; for ( row = 0 ; row < n ; row ++ ) for ( col = 0 ; col <= row ; col ++ ) scanf ( \"%d\" , & arr [ row ] [ col ] ) ; maximize ( n , 1 , 1 , arr [ 0 ] [ 0 ] ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 2, "id": 18659}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , count = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) b [ i ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) b [ i ] = b [ i - 1 ] + b [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { count = count + b [ i ] ; } printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 0, "id": 20594}
{"input": "int main ( void ) { int t , a [ 10000000 ] , n , i ; long long int sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } sum = 1 ; b [ 0 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) b [ i ] = b [ i - 1 ] + 1 ; else b [ i ] = 1 ; sum += b [ i ] ; } printf ( \"%llu\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 17180}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n , i , j , p = 1 , max , track1 , track2 ; scanf ( \"%d\" , & n ) ; int ar [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < p ; j ++ ) { scanf ( \"%d\" , & ar [ i ] [ j ] ) ; track1 = j ; } for ( j = track1 + 1 ; j < n ; j ++ ) { ar [ i ] [ j ] = 0 ; } p ++ ; } max = ar [ n - 1 ] [ 0 ] ; track2 = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( ar [ n - 1 ] [ i ] > max ) { max = ar [ n - 1 ] [ i ] ; track2 = i ; } } for ( i = 1 ; i < n - 1 ; i ++ ) { if ( track2 == 0 ) { max += ar [ n - ( i + 1 ) ] [ track2 ] ; } if ( track2 > 0 && ar [ n - i - 1 ] [ track2 ] > ar [ n - i - 1 ] [ track2 - 1 ] ) { max += ar [ n - i - 1 ] [ track2 ] ; } else { max += ar [ n - i - 1 ] [ track2 - 1 ] ; track2 = track2 - 1 ; } } max += ar [ 0 ] [ 0 ] ; printf ( \"%d\n\" , max ) ; } }", "label": 1, "id": 12525}
{"input": "int main ( void ) { int t , a [ 100005 ] , n , min = 0x3f3f , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 19916}
{"input": "int main ( ) { int T , i , n , t , a [ 50001 ] ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { int c = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i >= 1 ) { if ( a [ i - 1 ] < a [ i ] ) { c = c + a [ i - 1 ] ; t = a [ i - 1 ] ; a [ i - 1 ] = a [ i ] ; a [ i ] = t ; } else { c = c + a [ i ] ; } } } printf ( \"%d\n\" , c ) ; T -- ; } return 0 ; }", "label": 1, "id": 14934}
{"input": "int fmin ( int a [ ] , int n ) { int i , min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } return min ; } int main ( ) { int t , i ; int a [ 500000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , min = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & ( a [ i ] ) ) ; min = fmin ( a , n ) ; long long int g ; g = min * ( n - 1 ) ; printf ( \"%lld\n\" , g ) ; } return 0 ; }", "label": 0, "id": 21042}
{"input": "void fun ( long * , long * , long * ) ; int main ( ) { int t , i = 0 ; long n , a [ 50000 ] , j = 0 , k = 1 , cost = 0 , g = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & a [ j ] ) ; for ( j = 0 , k = 1 ; j < n && k < n ; ) { if ( a [ j ] > a [ k ] ) { fun ( & a , & n , & j ) ; g = a [ k ] ; } else { fun ( & a , & n , & k ) ; g = a [ j ] ; } printf ( \"%ld\n\" , g ) ; cost = cost + g ; } printf ( \"%ld\" , cost ) ; printf ( \"\n\" ) ; cost = 0 ; } return 0 ; } void fun ( long * p , long * q , long * r ) { long i = 0 ; for ( i = * r ; i < * q - 1 ; i ++ ) * ( p + i ) = * ( p + i + 1 ) ; * q = * q - 1 ; }", "label": 2, "id": 7129}
{"input": "int main ( ) { int test ; long int n , i , j , k , sub_array = 0 ; scanf ( \"%d\" , & test ) ; while ( test != 0 ) { scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , arr + i ) ; } if ( n == 1 ) { printf ( \"1\n\" ) ; test -- ; continue ; } i = j = k = 0 ; while ( i <= n - 1 && j <= n - 1 ) { if ( arr [ i ] == arr [ j ] && i == j ) { sub_array ++ ; k = i ; j ++ ; } else if ( arr [ i ] <= arr [ j ] ) { sub_array ++ ; i ++ ; j ++ ; if ( j > n - 1 ) { j = i ; } } else { k ++ ; i = k ; j = k ; } } printf ( \"%ld\n\" , sub_array ) ; sub_array = 0 ; test -- ; } return 0 ; }", "label": 1, "id": 319}
{"input": "int hcf_lcm ( int a , int b ) { int c = 0 ; while ( a % b != 0 ) { c = a % b ; a = b ; b = c ; } return b ; } int main ( ) { int n , i , a , b , hcf , lcm = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; hcf = hcf_lcm ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } }", "label": 1, "id": 23285}
{"input": "int array [ 101 ] [ 101 ] = { { 0 } } ; char line [ 4 * 101 ] = { 0 } ; int path [ 101 ] = { 0 } ; void set_line ( int i ) { int idx = 0 , j = 0 ; char num [ 4 ] = { 0 } ; char * tmp_line = NULL ; tmp_line = line ; while ( * tmp_line != '\\0' ) { if ( * tmp_line == ' ' ) { num [ idx ] = '\\0' ; array [ i ] [ j ++ ] = atoi ( num ) ; idx = 0 ; tmp_line ++ ; continue ; } num [ idx ++ ] = * tmp_line ; tmp_line ++ ; } num [ idx ] = '\\0' ; array [ i ] [ j ] = atoi ( num ) ; } void dump_all ( int m , int n ) { int i , j ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( \"= \" , array [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } } void sum_trian ( int i ) { int n = 0 ; int x , y ; for ( n = 0 ; n <= i ; n ++ ) { path [ n ] = 0 ; } for ( x = i - 1 ; x >= 0 ; x -- ) { for ( y = 0 ; y <= i ; y ++ ) { if ( path [ y ] > path [ y + 1 ] ) { path [ y ] = path [ y ] + array [ x ] [ y ] ; } else { path [ y ] = path [ y + 1 ] + array [ x ] [ y ] ; } } } printf ( \"%d\n\" , path [ 0 ] ) ; } void proc_trian ( ) { int total = 0 , i = 0 ; if ( scanf ( \"%d\" , & total ) > 0 ) { gets ( line ) ; while ( total -- ) { if ( gets ( line ) != NULL ) { set_line ( i ) ; } i ++ ; } } sum_trian ( i ) ; } int main ( int argc , char * argv [ ] ) { int n = 0 ; if ( scanf ( \"%d\" , & n ) > 0 ) { while ( n -- ) { proc_trian ( ) ; } } return 0 ; }", "label": 0, "id": 15927}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int c = a , d = b ; while ( a != b ) { if ( a > b ) { a -= b ; } else { b -= a ; } } long long int lcm = c * d / a ; printf ( \"%d %lld\n\" , a , lcm ) ; } return 0 ; }", "label": 1, "id": 11907}
{"input": "int main ( ) { unsigned long int t , i , n , j , a , min ; scanf ( \"%llu\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%llu\" , & n ) ; min = 1000000 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%llu\" , & a ) ; if ( min > a ) { min = a ; } } printf ( \"%llu\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 2167}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , y , x ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j < n - 1 ; j ++ ) { x = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; y = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = x > y ? x : y ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 18916}
{"input": "int main ( void ) { int t ; long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int l = 0 ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; for ( int j = i ; j < n ; j ++ ) { long int y = 0 ; for ( int k = i + 1 ; k <= j ; k ++ ) { if ( a [ k ] >= a [ k - 1 ] ) y ++ ; } if ( y == ( j - i ) ) l ++ ; } } printf ( \"%ld\n\" , l ) ; } }", "label": 2, "id": 25940}
{"input": "int hcf ( int n1 , int n2 ) { int dividend , divisor , rem = 1 ; if ( n1 > n2 ) { dividend = n1 ; divisor = n2 ; } else { dividend = n2 ; divisor = n1 ; } while ( rem != 0 ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; } return dividend ; } int main ( ) { long int t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long int a , b ; scanf ( \"%ld%ld\" , & a , & b ) ; int hello = hcf ( a , b ) ; int lcm , lcm2 ; lcm = ( a * b ) ; lcm2 = lcm / hello ; printf ( \"%ld %ld \n\" , hello , lcm2 ) ; } return 0 ; }", "label": 1, "id": 635}
{"input": "int main ( ) { int n , i , m , s , t , final_ans , count ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { final_ans = 0 ; scanf ( \"%d\" , & n ) ; long long int arr [ n ] ; for ( m = 0 ; m < n ; m ++ ) scanf ( \"%lld\" , & arr [ m ] ) ; for ( m = 0 ; m < n ; m ++ ) { count = 1 ; for ( s = m ; s < n - 1 ; s ++ ) { if ( arr [ s + 1 ] >= arr [ s ] ) count ++ ; else { m = s ; break ; } } final_ans = final_ans + ( count * ( count + 1 ) / 2 ) ; if ( s == ( n - 1 ) ) break ; } printf ( \"%d\n\" , final_ans ) ; } return 0 ; }", "label": 0, "id": 7148}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; void swap ( int * , int * ) ; int main ( ) { int a , b , c [ 1000 ] , d [ 1000 ] , t , m ; scanf ( \"%d\" , & t ) ; for ( m = 0 ; m < t ; m ++ ) { scanf ( \"%d %d\" , & a , & b ) ; c [ m ] = gcd ( a , b ) ; d [ m ] = lcm ( a , b ) ; } for ( m = 0 ; m < t ; m ++ ) printf ( \"%d %d\n\" , c [ m ] , d [ m ] ) ; } int gcd ( int a , int b ) { int g ; if ( b > a ) swap ( & a , & b ) ; while ( b != 0 ) { g = a % b ; a = b ; b = g ; } return a ; } void swap ( int * a , int * b ) { int tmp ; tmp = * a ; * a = * b ; * b = tmp ; } int lcm ( int a , int b ) { int i = 2 , lcm = 1 ; if ( b > a ) swap ( & b , & a ) ; while ( a != 1 || b != 1 ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { lcm = lcm * i ; a = a / i ; b = b / i ; } else { if ( a % i == 0 ) { lcm = lcm * i ; a = a / i ; } else if ( b % i == 0 ) { lcm = lcm * i ; b = b / i ; } } if ( a % i != 0 && b % i != 0 ) i ++ ; } return lcm ; }", "label": 2, "id": 11202}
{"input": "void max_sum ( ) { unsigned int array [ SIZE ] [ SIZE ] = { 0 } ; unsigned int row_cnt = 0 ; unsigned int x_index = 0 ; unsigned int y_index = 0 ; unsigned int max_sum = 0 ; scanf ( \"%d\" , & row_cnt ) ; for ( ; x_index < row_cnt ; x_index ++ ) for ( y_index = 0 ; y_index <= x_index ; y_index ++ ) scanf ( \"%d\" , & array [ x_index ] [ y_index ] ) ; for ( row_cnt -- , x_index = 1 ; x_index < row_cnt ; x_index ++ ) for ( y_index = 0 ; y_index <= x_index ; y_index ++ ) { if ( y_index == 0 ) { array [ x_index ] [ y_index ] += array [ x_index - 1 ] [ y_index ] ; } else { if ( array [ x_index - 1 ] [ y_index - 1 ] >= array [ x_index - 1 ] [ y_index ] ) array [ x_index ] [ y_index ] += array [ x_index - 1 ] [ y_index - 1 ] ; else array [ x_index ] [ y_index ] += array [ x_index - 1 ] [ y_index ] ; } } array [ x_index ] [ 0 ] += array [ x_index - 1 ] [ 0 ] ; max_sum = array [ x_index ] [ 0 ] ; for ( y_index = 1 ; y_index <= x_index ; y_index ++ ) { if ( array [ x_index - 1 ] [ y_index - 1 ] >= array [ x_index - 1 ] [ y_index ] ) array [ x_index ] [ y_index ] += array [ x_index - 1 ] [ y_index - 1 ] ; else array [ x_index ] [ y_index ] += array [ x_index - 1 ] [ y_index ] ; if ( max_sum < array [ x_index ] [ y_index ] ) max_sum = array [ x_index ] [ y_index ] ; } printf ( \"%d\n\" , max_sum ) ; } int main ( ) { unsigned int itration = 0 ; unsigned int test_id = 0 ; scanf ( \"%d\" , & itration ) ; for ( ; test_id < itration ; test_id ++ ) max_sum ( ) ; return 0 ; }", "label": 0, "id": 8978}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; int n , m , g , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n , & m ) ; g = gcd ( n , m ) ; lcm = ( n * m ) / g ; printf ( \"%d %d\n\" , g , lcm ) ; } return 0 ; }", "label": 1, "id": 2755}
{"input": "int glob = 0 ; int getMax ( int i , int val , int * arr , int row , int curr ) ; int main ( ) { int num = 0 ; int i = 0 ; char buf [ 1024 ] ; scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) { int row = 0 ; int j = 0 ; int * arr = NULL ; int lum = 0 ; int count = 0 ; int max = 0 ; char * str = ( char * ) malloc ( 1024 ) ; scanf ( \"%d\" , & row ) ; j = ( ( row ) * ( row + 1 ) ) / 2 ; arr = ( int * ) malloc ( j * sizeof ( int ) ) ; getline ( & str , & j , stdin ) ; for ( j = 0 ; j < row ; j ++ ) { int k = 0 ; char * tmp , * tmp1 ; int lum = 0 ; int byte_read = getline ( & str , & k , stdin ) ; int len = strlen ( str ) ; str [ len ] = '\\0' ; lum = j + 1 ; tmp = str ; tmp1 = str ; do { tmp = strchr ( tmp1 , ' ' ) ; if ( tmp ) { tmp [ 0 ] = '\\0' ; } arr [ count ++ ] = atoi ( tmp1 ) ; tmp1 = tmp + 1 ; lum -- ; } while ( lum ) ; } count = 0 ; max = 0 ; glob = 0 ; max = getMax ( 0 , max , arr , row , 0 ) ; printf ( \"%d\n\" , glob ) ; } return 0 ; } int getMax ( int i , int val , int * arr , int row , int curr ) { int j = i + 1 ; int l = 0 ; int fib = ( i * j ) / 2 ; int lim = ( curr + 1 ) > i ? i : ( curr + 1 ) ; if ( row == j ) { for ( l = curr ; l <= lim ; l ++ ) { if ( ( arr [ fib + l ] + val ) > glob ) { glob = arr [ fib + l ] + val ; } } return 1 ; } else { for ( l = curr ; l <= lim ; l ++ ) { int tmp = 0 ; tmp = arr [ fib + l ] + val ; tmp = getMax ( i + 1 , tmp , arr , row , l ) ; } } }", "label": 2, "id": 15722}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b , g , l ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; } int gcd ( int x , int y ) { if ( x == 0 || y == 0 ) return 0 ; if ( x > y ) return gcd ( x - y , y ) ; if ( x < y ) return gcd ( x , y - x ) ; if ( x == y ) return x ; }", "label": 1, "id": 8790}
{"input": "long int GCD ( long int a , long int b ) { if ( a % b == 0 ) return b ; else return GCD ( b , a % b ) ; } int main ( void ) { int t ; long int a , b , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%ld%ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 19023}
{"input": "void gcd ( int a , int b ) { long int pro = a * b ; while ( a != b ) { if ( a > b ) { a -= b ; } else { b -= a ; } } printf ( \"%d %d\n\" , a , pro / a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; gcd ( a , b ) ; } return 0 ; }", "label": 1, "id": 21944}
{"input": "int main ( ) { int a , t , b ; long long int c , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = a ; d = b ; while ( d != c ) { if ( d > c ) d = d - c ; else c = c - d ; } printf ( \"%lld %lld\n\" , d , ( a * b ) / d ) ; } return 0 ; }", "label": 1, "id": 16109}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 9387}
{"input": "int main ( ) { int t , n , small , i , sum , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; temp = n - 1 ; sum = 0 ; small = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( small >= a [ i ] ) small = a [ i ] ; } sum = small * temp ; printf ( \"%d\n\" , sum ) ; } }", "label": 1, "id": 21205}
{"input": "unsigned int count = 0 ; void find_max_path_sum ( unsigned long [ ] [ 200 ] , unsigned long , unsigned long , unsigned long , unsigned long , unsigned long * ) ; void store_sum ( unsigned long * , unsigned long ) ; unsigned long find_max ( unsigned long * ) ; int main ( ) { unsigned long t , max_sum , i , n , j , k , x , a [ 200 ] [ 200 ] ; unsigned long sum_store [ 500 ] ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%ld\" , & x ) ; a [ j ] [ k ] = x ; } } find_max_path_sum ( a , 0 , 0 , 0 , n , sum_store ) ; printf ( \"%ld\" , find_max ( sum_store ) ) ; for ( k = 0 ; k < count ; k ++ ) sum_store [ k ] = 0 ; count = 0 ; if ( i < t - 1 ) printf ( \"\n\" ) ; } return 0 ; } void find_max_path_sum ( unsigned long a [ 200 ] [ 200 ] , unsigned long i , unsigned long j , unsigned long sum , unsigned long n , unsigned long * sum_store ) { if ( i > ( n - 1 ) ) { store_sum ( sum_store , sum ) ; } else { sum = sum + a [ i ] [ j ] ; find_max_path_sum ( a , i + 1 , j , sum , n , sum_store ) ; find_max_path_sum ( a , i + 1 , j + 1 , sum , n , sum_store ) ; } } void store_sum ( unsigned long * sum_store , unsigned long sum ) { sum_store [ count ] = sum ; count ++ ; } unsigned long find_max ( unsigned long * sum_store ) { unsigned long i ; unsigned long max = sum_store [ 0 ] ; for ( i = 0 ; i < count ; i ++ ) { if ( sum_store [ i ] > max ) max = sum_store [ i ] ; } return max ; }", "label": 3, "id": 19612}
{"input": "int find_sum ( int * arr , int , int , int , int * ) ; int main ( ) { int i , n , num , * arr , ret , * dp ; scanf ( \"%d\" , & num ) ; while ( num -- ) { scanf ( \"%d\" , & n ) ; arr = ( int * ) malloc ( ( n * ( n + 1 ) / 2 ) * sizeof ( int ) ) ; dp = ( int * ) malloc ( ( n * ( n + 1 ) / 2 ) * sizeof ( int ) ) ; for ( i = 0 ; i < ( n * ( n + 1 ) ) / 2 ; i ++ ) { scanf ( \"%d\" , arr + i ) ; * ( dp + i ) = - 1 ; } ret = find_sum ( arr , 0 , 1 , n , dp ) ; printf ( \"%d\n\" , ret ) ; free ( arr ) ; free ( dp ) ; } return 0 ; } int maxim ( int a , int b ) { if ( a > b ) return a ; return b ; } int find_sum ( int * arr , int pos , int level , int max , int * dp ) { int temp ; temp = ( level - 1 ) * level / 2 + pos ; if ( level == max ) { dp [ temp ] = arr [ temp ] ; return dp [ temp ] ; } else { if ( dp [ temp ] == - 1 ) dp [ temp ] = arr [ temp ] + find_sum ( arr , pos , level + 1 , max , dp ) ; if ( dp [ temp + 1 ] == - 1 ) dp [ temp + 1 ] = arr [ temp ] + find_sum ( arr , pos + 1 , level + 1 , max , dp ) ; return ( maxim ( dp [ temp ] , dp [ temp + 1 ] ) ) ; } }", "label": 1, "id": 19142}
{"input": "int main ( ) { int n1 , n2 , k , i , minMultiple , gcd ; scanf ( \"%d %d\" , & n1 , & n2 ) ; minMultiple = ( n1 > n2 ) ? n1 : n2 ; while ( 1 ) { if ( minMultiple % n1 == 0 && minMultiple % n2 == 0 ) { k = minMultiple ; break ; } ++ minMultiple ; } printf ( \"%d\" , k ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } printf ( \"%d\" , gcd ) ; printf ( \"\n\" ) ; return 0 ; }", "label": 1, "id": 8553}
{"input": "int a [ 101 ] [ 101 ] ; int n = 0 ; int sum ( int i , int j ) { if ( i > n ) { return 0 ; } else { int t1 = sum ( i + 1 , j ) ; int t2 = sum ( i + 1 , j + 1 ) ; if ( t1 > t2 ) { return t1 + a [ i ] [ j ] ; } else { return t2 + a [ i ] [ j ] ; } } } int main ( ) { int i = 0 , j = 0 , no_t = 0 , k ; scanf ( \"%d\" , & no_t ) ; for ( k = 0 ; k < no_t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , sum ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 9664}
{"input": "int main ( ) { int n , t ; long long int y , a , b ; int j ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { for ( j = 1 ; j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) t = j ; } y = a * b / t ; printf ( \"%d %lld\n\" , t , y ) ; } else { for ( j = 1 ; j <= a ; j ++ ) { if ( a % j == 0 && b % j == 0 ) t = j ; } y = a * b / t ; printf ( \"%d %lld\n\" , t , y ) ; } n -- ; } }", "label": 2, "id": 24848}
{"input": "int main ( ) { int n , i , j , k , m , a [ 100 ] , high , l ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & m ) ; { int sum = 0 ; for ( j = 0 ; j < m ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ k ] ) ; high = a [ 0 ] ; { for ( l = 1 ; l <= k ; l ++ ) { if ( a [ l ] > a [ l - 1 ] ) { high = a [ l ] ; } } } } sum = sum + high ; } printf ( \"%d\" , sum ) ; } } return 0 ; }", "label": 1, "id": 24058}
{"input": "int main ( void ) { int t , n , i , min ; long int ar [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%ld\" , & n , & ar [ 0 ] ) ; min = ar [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%ld\" , & ar [ i ] ) ; if ( min > ar [ i ] ) min = ar [ i ] ; } printf ( \"\n%ld\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 16607}
{"input": "int main ( ) { int t , i , j , min , r ; int a [ 100 ] , n ; scanf ( \"%d\" , & t ) ; i = 0 ; while ( i < t ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } min = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ j ] < min ) { min = a [ j ] ; } } r = ( n - 1 ) * min ; printf ( \"%d\n\" , r ) ; i ++ ; } return 0 ; }", "label": 2, "id": 17076}
{"input": "int main ( void ) { int n1 , n2 , t , max , min , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \" %d%d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { max = n1 ; min = n2 ; } else { max = n2 ; min = n1 ; } if ( max % min == 0 ) lcm = max ; else lcm = n1 * n2 ; for ( int i = 2 ; i <= min ; i ++ ) { if ( ( n1 % i == 0 ) && ( n2 % i == 0 ) ) lcm /= i ; } if ( ( ( n1 * n2 ) % lcm ) == 0 ) gcd = ( n1 * n2 ) / lcm ; else gcd = 1 ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 3, "id": 1155}
{"input": "int s ; long long int checkSum ( long long int n , long long int a [ ] [ n ] , int x , int y ) ; int main ( ) { long long int t , n , ans ; int i , j ; printf ( \"Enter t\n\" ) ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { printf ( \"Enter n\n\" ) ; scanf ( \"%lld\" , & n ) ; s = n ; long long int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } ans = checkSum ( n , a , 0 , 0 ) ; printf ( \"%lld\" , ans ) ; } return 0 ; } long long int checkSum ( long long int n , long long int a [ s ] [ s ] , int x , int y ) { if ( n == 1 ) { return a [ x ] [ y ] ; } else { if ( checkSum ( n - 1 , a , x + 1 , y ) > checkSum ( n - 1 , a , x + 1 , y + 1 ) ) return a [ x ] [ y ] + checkSum ( n - 1 , a , x + 1 , y ) ; else return a [ x ] [ y ] + checkSum ( n - 1 , a , x + 1 , y + 1 ) ; } }", "label": 2, "id": 17426}
{"input": "int main ( ) { int a , b , i , k , t , lcm , gcd ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; for ( k = 1 ; k <= a && k <= b ; ++ k ) { if ( a % k == 0 && b % k == 0 ) gcd = k ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 18325}
{"input": "int findGcd ( int , int ) ; int findLcm ( int , int ) ; int main ( ) { int test_cases , t ; int num1 , num2 ; int gcd , lcm ; scanf ( \"%d\" , & test_cases ) ; for ( t = 0 ; t < test_cases ; t ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; gcd = findGcd ( num1 , num2 ) ; lcm = ( ( num1 * num2 ) ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; } int findGcd ( int x , int y ) { int lssr , grtr ; int temp ; if ( x <= y ) { lssr = x ; grtr = y ; } else { lssr = y ; grtr = x ; } while ( 1 ) { temp = grtr ; grtr = lssr ; lssr = temp % lssr ; if ( lssr == 0 ) { return grtr ; } } }", "label": 1, "id": 8627}
{"input": "main ( ) { int a [ 1000 ] ; static int sum [ 1000 ] , c [ 1000 ] ; int t , n , i , j , l , k ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; k = ( c [ j ] < c [ j - 1 ] ) ? c [ j - 1 ] : c [ j ] ; if ( j == 0 ) k = c [ 0 ] ; if ( i == 0 ) k = 0 ; sum [ j ] = a [ j ] + k ; } for ( j = 0 ; j < ( i + 1 ) ; j ++ ) c [ j ] = sum [ j ] ; } for ( l = 0 ; l < n ; l ++ ) { if ( k <= sum [ l ] ) k = sum [ l ] ; } printf ( \"%d\" , k ) ; t -- ; } }", "label": 1, "id": 2758}
{"input": "int main ( void ) { int t , j ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { int i , n , a [ 10000 ] = { 0 } , cnt = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { cnt ++ ; } else { continue ; } } cnt = cnt + n ; printf ( \"%d\n\" , cnt ) ; } return 0 ; }", "label": 3, "id": 10683}
{"input": "int max ( int a , int b ) { if ( a > b ) return b ; else return a ; } int main ( ) { int n , l , i , c , j , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"hey1\n\" ) ; c = a [ 0 ] [ 0 ] ; j = 0 ; for ( i = 1 ; i < l , j <= i ; i ++ ) { c = c + max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; if ( max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) == a [ i ] [ j + 1 ] ) j ++ ; } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 3, "id": 19312}
{"input": "int sum ( int , char [ 100 ] [ 100 ] ) ; int max ( int , int ) ; int main ( ) { char a [ 100 ] [ 100 ] = { 0 } ; int n , r , o , p , q , temp ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; for ( o = 0 ; o < r ; o ++ ) for ( q = 0 ; q <= o ; q ++ ) { scanf ( \"%d\" , & temp ) ; a [ o ] [ q ] = ( char ) temp ; } printf ( \"%d\n\" , sum ( r , a ) ) ; } } int sum ( int n , char a [ 100 ] [ 100 ] ) { char L1 [ 100 ] [ 100 ] , L2 [ 100 ] [ 100 ] ; int i , j , i1 , j1 , k , m = 0 ; if ( n == 1 ) return a [ 0 ] [ 0 ] ; else if ( n == 2 ) return max ( a [ 0 ] [ 0 ] + a [ 1 ] [ 0 ] , a [ 0 ] [ 0 ] + a [ 1 ] [ 1 ] ) ; else { for ( i = 1 , i1 = 0 ; i < n ; i ++ , i1 ++ ) for ( j = 0 , j1 = 0 ; j < i ; j ++ , j1 ++ ) { L1 [ i1 ] [ j1 ] = a [ i ] [ j ] ; } for ( i = 1 , i1 = 0 ; i < n ; i ++ , i1 ++ ) for ( j = 1 , j1 = 0 ; j <= i ; j1 ++ , j ++ ) { L2 [ i1 ] [ j1 ] = a [ i ] [ j ] ; } return a [ 0 ] [ 0 ] + max ( sum ( n - 1 , L1 ) , sum ( n - 1 , L2 ) ) ; } } int max ( int a , int b ) { return ( a > b ) ? a : b ; }", "label": 2, "id": 6289}
{"input": "int main ( ) { int test , i , j , k ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { int num ; scanf ( \"%d\" , & num ) ; int a [ num ] [ num ] ; for ( k = 0 ; k < num ; k ++ ) { for ( j = 0 ; j < ( k + 1 ) ; j ++ ) scanf ( \"%d\" , & a [ k ] [ j ] ) ; } for ( k = num - 2 ; k >= 0 ; k -- ) for ( j = i ; j >= 0 ; j -- ) { int ab = a [ k ] [ j ] + a [ k + 1 ] [ j ] ; int bb = a [ k ] [ j ] + a [ k + 1 ] [ j + 1 ] ; a [ k ] [ j ] = ( ab > bb ) ? ab : bb ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 24450}
{"input": "int main ( ) { int len , i = 0 , min = 0 , j = 0 ; int b [ 100 ] ; int nc ; scanf ( \"%d\" , & nc ) ; scanf ( \"%d\" , & len ) ; while ( nc != 0 ) { for ( i = 0 ; i < len ; i ++ ) { scanf ( \"%d\" , & b [ i ] ) ; } for ( j = 0 ; j < len ; j ++ ) { min = b [ 0 ] ; if ( b [ j ] < b [ 0 ] ) { min = b [ j ] ; } } printf ( \"%d\" , ( len - 1 ) * min ) ; min = 0 ; nc -- ; } return 0 ; }", "label": 3, "id": 3674}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int a [ 100 ] [ 100 ] , T , i , j , n ; T = fastread ( ) ; while ( T > 0 ) { n = fastread ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) ? a [ i + 1 ] [ j + 1 ] : a [ i + 1 ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; T -- ; } return 0 ; }", "label": 0, "id": 15794}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) { return b ; } else { return gcd ( a , a % b ) ; } } int main ( ) { int a , b , t , gcd1 , lcm , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; gcd1 = gcd ( a , b ) ; lcm = ( x * y ) / gcd1 ; printf ( \"%d %d\n\" , lcm , gcd1 ) ; } return 0 ; }", "label": 1, "id": 3170}
{"input": "int main ( ) { int t , p , i , j ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & p ) ; for ( i = 0 ; i < p ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = p - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] = arr [ i - 1 ] [ j ] + arr [ i ] [ j ] ; else arr [ i - 1 ] [ j ] = arr [ i - 1 ] [ j ] + arr [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 5583}
{"input": "int main ( ) { int n , rows , count , sum , i , j ; int result [ MAXSIZE ] ; int store [ MAXSIZE ] [ MAXSIZE ] ; int val [ MAXSIZE ] [ MAXSIZE ] ; for ( i = 0 ; i < MAXSIZE ; i ++ ) for ( j = 0 ; j < MAXSIZE ; store [ i ] [ j ++ ] = 0 , val [ i ] [ j ] = 0 ) ; scanf ( \"%d\" , & n ) ; for ( count = 1 ; count <= n ; count ++ ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & store [ i ] [ j ] ) ; } } for ( i = rows - 1 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( i == rows - 1 ) val [ i ] [ j ] = store [ i ] [ j ] ; else { val [ i ] [ j ] = store [ i ] [ j ] + ( val [ i + 1 ] [ j + 1 ] > val [ i + 1 ] [ j ] ? val [ i + 1 ] [ j + 1 ] : val [ i + 1 ] [ j ] ) ; } } } result [ count - 1 ] = val [ 0 ] [ 0 ] ; } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , result [ i ] ) ; return 0 ; }", "label": 1, "id": 77}
{"input": "long long CC ( long long n , long long d ) ; int main ( ) { int T ; int A , B , C , D ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & A , & B ) ; C = CC ( A , B ) ; D = A * B / C ; printf ( \"%d %d\n\" , C , D ) ; } return 0 ; } long long CC ( long long n , long long d ) { if ( d == 1 || n == 1 ) return 1 ; while ( 1 ) { n = n % d ; if ( n == 0 ) return d ; d = d % n ; if ( d == 0 ) return n ; } }", "label": 1, "id": 25648}
{"input": "int main ( ) { int a , b , l , n , h ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( l = a > b ? a : b ; l <= a * b ; l ++ ) { if ( l % a == 0 && l % b == 0 ) break ; } for ( h = a < b ? a : b ; h >= 1 ; h -- ) { if ( a % h == 0 && b % h == 0 ) break ; } printf ( \"%d %d\n\" , h , l ) ; } return 0 ; }", "label": 2, "id": 20504}
{"input": "int main ( ) { int i , j ; int n , a ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int A [ n ] ; for ( i = 1 ; i <= n ; i ++ ) { int sum = 0 ; for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a ) ; sum = a + sum ; } A [ i ] = sum ; } int max = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( A [ i ] > max ) { max = A [ i ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 19915}
{"input": "int gcd ( int m , int n ) { if ( m < n ) return gcd ( n , m ) ; if ( n == 0 ) return m ; if ( m > n ) return gcd ( n , m % n ) ; } int main ( ) { int s , m , n , c ; scanf ( \"%d\" , & s ) ; while ( s -- ) { scanf ( \"%d\" , & m ) ; scanf ( \"%d\" , & n ) ; c = gcd ( m , n ) ; printf ( \"%d %d\" , c , ( m * n ) / c ) ; } return 0 ; }", "label": 1, "id": 17508}
{"input": "int gcd ( int a , int b ) { int f = 1 ; for ( int j = 1 ; j <= a * b ; j ++ ) if ( a % j == 0 && b % j == 0 ) f = j ; printf ( \"%d \" , f ) ; } int lcm ( int a , int b ) { int f ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } for ( int i = b ; i <= a * b ; i ++ ) if ( i % a == 0 && i % b == 0 ) f = i ; printf ( \"%d\n\" , f ) ; } main ( ) { int a , b , t ; scanf ( \"%d\" , & t ) ; for ( int i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; gcd ( a , b ) ; lcm ( a , b ) ; } }", "label": 2, "id": 16424}
{"input": "int main ( void ) { int i , n , j , z , k , x , res ; scanf ( \"%d\" , & n ) ; int a [ n ] , temp [ n ] , t [ n ] [ 4950 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; temp [ i ] = ( a [ i ] * ( a [ i ] + 1 ) ) / 2 ; for ( j = 0 ; j < temp [ i ] ; j ++ ) { scanf ( \"%d\" , & t [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { k = a [ i ] ; int sum [ k ] ; x = 0 ; for ( j = 0 ; j < k ; j ++ ) { sum [ j ] = 0 ; for ( z = j ; z >= 0 ; z -- ) { sum [ j ] = sum [ j ] + ( t [ i ] [ x ++ ] ) ; } } res = sum [ 0 ] ; for ( j = 0 ; j < k ; j ++ ) { if ( res < sum [ j ] ) { res = sum [ j ] ; } } printf ( \"%d\n\" , res ) ; } return 0 ; }", "label": 3, "id": 11230}
{"input": "int main ( ) { long long int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { long long int size , sl = 9999999 ; scanf ( \"%d\" , & size ) ; int arr [ size ] , i , j , k ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < sl ) sl = arr [ i ] ; } int result = sl * ( size - 1 ) ; printf ( \"%d\n\" , result ) ; } }", "label": 3, "id": 24496}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , m ; long long int s ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; m = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { m = ( a [ i ] > m ) ? m : a [ i ] ; } s = ( n - 1 ) * m ; printf ( \"%lld\n\" , s ) ; return 0 ; } }", "label": 1, "id": 22572}
{"input": "int main ( ) { int i , t , a , b , temp ; printf ( \"Enter the number of testcases:\n\" ) ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { printf ( \"Enter two integers:\n\" ) ; scanf ( \"%d%d\" , & a , & b ) ; temp = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"GCD=%d LCM=%d\n\" , a , temp / a ) ; } return 0 ; }", "label": 1, "id": 11458}
{"input": "int main ( ) { int t , a [ 10 ] [ 100 ] , n , i , j , b , c , ans = 0 ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d\" , & n ) ; if ( n <= 2 || n >= 50000 ) { return 0 ; } else { for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ j ] [ i ] ) ; } for ( b = 0 ; b < n - 1 ; b ++ ) { for ( i = 0 ; i < n - b - 1 ; i ++ ) { if ( a [ j ] [ i ] > a [ j ] [ i + 1 ] ) { c = a [ j ] [ i ] ; a [ j ] [ i ] = a [ j ] [ i + 1 ] ; a [ j ] [ i + 1 ] = c ; } } } ans = a [ j ] [ 0 ] * ( n - 1 ) ; printf ( \"%d\n\" , ans ) ; } } return 0 ; }", "label": 1, "id": 2467}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i , hcf = 1 , lcm ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { for ( i = 1 ; i <= b ; i ++ ) if ( ( a % i == 0 ) && ( b % i == 0 ) ) hcf = i ; for ( i = b * a ; i >= b ; i -- ) if ( ( i % a == 0 ) && ( i % b == 0 ) ) lcm = i ; printf ( \"%d %d\n\" , hcf , lcm ) ; } else if ( b > a ) { for ( i = 1 ; i <= a ; i ++ ) if ( ( a % i == 0 ) && ( b % i == 0 ) ) hcf = i ; for ( i = b * a ; i >= a ; i -- ) if ( ( i % a == 0 ) && ( i % b == 0 ) ) lcm = i ; printf ( \"%d %d\n\" , hcf , lcm ) ; } else printf ( \"%d %d\n\" , a , a ) ; } }", "label": 2, "id": 2523}
{"input": "int main ( void ) { int t , i , j , k = 0 , a , p = 0 ; long int n , arr [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; a = n ; k = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; } for ( j = 0 ; j < n ; j ++ ) { while ( n > j ) { for ( i = j ; i < n - 1 ; i ++ ) { if ( arr [ i ] <= arr [ i + 1 ] ) { if ( i == ( n - 2 ) && p == 0 ) k ++ ; } else p ++ ; } n -- ; p = 0 ; } n = a ; } printf ( \"%d\" , k + n ) ; } return 0 ; }", "label": 2, "id": 17222}
{"input": "main ( ) { int t , i , n1 , n2 , temp1 , temp2 , hcf ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; temp1 = n1 ; temp2 = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) { n1 = n1 - n2 ; hcf = n1 ; } else { n2 = n2 - n1 ; hcf = n2 ; } } printf ( \"%d %d\n\" , hcf , temp1 * temp2 / hcf ) ; } }", "label": 1, "id": 11578}
{"input": "int gcd ( long long int x , long long int y ) { long long int temp = x % y ; if ( temp == 0 ) { return y ; } else { gcd ( y , temp ) ; } } int main ( ) { int T , i ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { long long int A , B , gcf , lcm ; scanf ( \"%lld %lld\" , & A , & B ) ; if ( A == 0 && B == 0 ) { gcf = 0 ; lcm = 0 ; printf ( \"%lld %lld\n\" , gcf , lcm ) ; } else { gcf = gcd ( A , B ) ; lcm = ( A * B ) / gcf ; printf ( \"%lld %lld\n\" , gcf , lcm ) ; } } return 0 ; }", "label": 0, "id": 26156}
{"input": "int main ( ) { int n , l , i , j , k , a [ 102 ] [ 102 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & l ) ; for ( j = 0 ; j < l ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; for ( j = l - 2 ; j >= 0 ; j -- ) for ( k = 0 ; k <= j ; k ++ ) a [ j ] [ k ] += ( a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ? a [ j + 1 ] [ k ] : a [ j + 1 ] [ k + 1 ] ) ; printf ( \"%d/n\" , a [ 0 ] [ 0 ] ) ; } getchar ( ) ; return 0 ; }", "label": 1, "id": 21025}
{"input": "int main ( ) { int tc , nl , i , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- != 0 ) { scanf ( \"%d\" , & nl ) ; int a [ nl ] [ nl ] , b [ nl - 1 ] [ nl - 1 ] ; for ( i = 0 ; i < nl ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) { a [ i ] [ j ] = 0 ; if ( j <= i ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = nl - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { int s1 , s2 ; s1 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; s2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = s1 > s2 ? s1 : s2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2776}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; int a [ n ] [ n ] ; int r , c , k = 1 ; for ( i = 0 ; i < k && k < n ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; k ++ ; } long int sum = a [ 0 ] [ 0 ] ; k = 0 , r = 0 , c = 0 ; while ( k < n ) { if ( a [ r + 1 ] [ c ] > a [ r + 1 ] [ c + 1 ] ) { sum += a [ r + 1 ] [ c ] ; r = r + 1 ; } else { sum += a [ r + 1 ] [ c + 1 ] ; r = r + 1 ; c = c + 1 ; } k ++ ; } printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 14430}
{"input": "int main ( ) { int t ; long long int a [ 500 ] , n , temp , i , k ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 1 ; i < n ; i ++ ) { if ( a [ 0 ] > a [ i ] ) { temp = a [ 0 ] ; a [ 0 ] = a [ i ] ; a [ i ] = temp ; } } k = a [ 0 ] * ( n - 1 ) ; printf ( \"%lld\" , k ) ; t -- ; } return 0 ; }", "label": 3, "id": 23335}
{"input": "int main ( ) { long int i , j , t , a , b , x ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) x = i ; } printf ( \"%ld \" , x ) ; long int y = 1 ; y = a * b / x ; printf ( \"%ld\n\" , y ) ; } return 0 ; }", "label": 2, "id": 9045}
{"input": "long long int hcf ( long long int n1 , long long int n2 ) ; long long int lcm ( long long int x , long long int y ) ; int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { long long int n1 , n2 , x , y ; scanf ( \"%lld %lld\" , & n1 , & n2 ) ; x = n1 ; y = n2 ; long long int g = hcf ( n1 , n2 ) ; long long int z = lcm ( x , y ) ; printf ( \"%lld %lld\n\" , g , z ) ; } return 0 ; } long long int hcf ( long long int n1 , long long int n2 ) { if ( n2 != 0 ) return hcf ( n2 , n1 % n2 ) ; else { return n1 ; } } long long int lcm ( long long int x , long long int y ) { int i ; for ( i = 1 ; ; i ++ ) { if ( i % x == 0 && i % y == 0 ) { break ; } } return i ; }", "label": 2, "id": 13382}
{"input": "int main ( ) { int t , n , a [ 50001 ] , i , s ; long long int c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; s = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < s ) s = a [ i ] ; } c = s * ( n - 1 ) ; printf ( \"%lld\n\" , c ) ; } return 0 ; }", "label": 0, "id": 14807}
{"input": "int main ( ) { int t , n , i ; long long int x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 100000 ] = { '0' } ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & x ) ; a [ x ] ++ ; } for ( i = 1 ; i < 100000 ; i ++ ) { if ( a [ i ] != 0 ) { x = i * ( n - 1 ) ; break ; } } printf ( \"%lld\n\" , x ) ; } return 0 ; }", "label": 0, "id": 153}
{"input": "int max ( int * a , int i , int k ) { int j , l ; if ( a [ 0 ] == 1 ) return a [ 1 ] ; else if ( k < a [ 0 ] ) { j = ( j = max ( a , i + k , k + 1 ) ) > ( l = max ( a , i + k + 1 , k + 1 ) ) ? j : l ; return j + a [ i ] ; } else return 0 ; } int main ( ) { int a [ 4950 ] , * b , i , t , j = 0 ; scanf ( \"%d\" , & t ) ; b = ( int * ) malloc ( sizeof ( int ) * t ) ; while ( t > 0 ) { t -- ; scanf ( \"%d\" , & a [ 0 ] ) ; a [ 0 ] = a [ 0 ] * ( a [ 0 ] + 1 ) / 2 ; for ( i = 1 ; i <= a [ 0 ] ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; b [ j ] = max ( a , 1 , 1 ) ; j ++ ; } for ( i = 0 ; i < j ; i ++ ) printf ( \"%d\n\" , b [ i ] ) ; return 0 ; }", "label": 3, "id": 18755}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , min = 100000000 ; int i ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%d\n\" , ( min * ( n - 1 ) ) ) ; } }", "label": 0, "id": 21297}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , g , l ; long int i ; scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = i ; } } for ( i = a * b ; i >= b && i >= a ; i -- ) { if ( i % a == 0 && i % b == 0 ) { l = i ; } } printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 19204}
{"input": "int maximum ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( ) { int arr [ 100 ] [ 100 ] = { 0 } , arr1 [ 100 ] [ 100 ] ; int i , n , t , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } arr1 [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { arr1 [ i ] [ 0 ] = arr1 [ i - 1 ] [ 0 ] + arr [ i ] [ 0 ] ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { arr1 [ i ] [ j ] = arr [ i ] [ j ] + maximum ( arr1 [ i - 1 ] [ j ] , arr1 [ i - 1 ] [ j - 1 ] ) ; } } max = arr1 [ n - 1 ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( arr1 [ n - 1 ] [ j ] > max ) max = arr1 [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 13441}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b % a == 0 ) return ( a ) ; else return ( gcd ( b % a , a ) ) ; } int main ( ) { long long int a , b , t , hcf , lcm ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\" , hcf , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 0, "id": 12397}
{"input": "int sum ( int , int ) ; int a [ 102 ] [ 102 ] ; int r ; int main ( ) { int b [ 100 ] , t , i , j , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ k ] = sum ( 0 , 0 ) ; } for ( k = 0 ; k < t ; k ++ ) printf ( \"\n%d\" , b [ k ] ) ; return 0 ; } int sum ( int i , int j ) { if ( i >= r ) return 0 ; if ( sum ( i + 1 , j ) >= sum ( i + 1 , j + 1 ) ) return ( sum ( i + 1 , j ) + a [ i ] [ j ] ) ; else return ( sum ( i + 1 , j + 1 ) + a [ i ] [ j ] ) ; }", "label": 2, "id": 26250}
{"input": "int main ( void ) { int t , i , j , k , size , l , m , q ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & size ) ; long int a [ size ] ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } long int min = 0 ; for ( i = 0 ; i < size - 1 ; i ++ ) { if ( a [ 0 ] > a [ 1 ] ) { min = min + a [ 1 ] ; for ( l = 0 ; l < size - 1 ; l ++ ) a [ l ] = a [ l + 1 ] ; } else { min = min + a [ 0 ] ; for ( m = 1 ; m < size - 1 ; m ++ ) a [ m ] = a [ m + 1 ] ; } } printf ( \"%ld\n\" , min ) ; } return 0 ; }", "label": 2, "id": 22780}
{"input": "int main ( ) { int i , t , n , j , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] > a [ i ] [ j - 1 ] + a [ i - 1 ] [ j - 1 ] ) a [ i - 1 ] [ j - 1 ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; else a [ i - 1 ] [ j - 1 ] = a [ i ] [ j - 1 ] + a [ i - 1 ] [ j - 1 ] ; } } printf ( \"\nSUM IS %d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 11850}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int s ; scanf ( \"%d\" , & s ) ; int a [ s ] ; for ( int i = 1 ; i <= s ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( int i = 1 ; i <= s ; i ++ ) { for ( int j = i + 1 ; j <= s ; j ++ ) { if ( a [ i ] > a [ j ] ) { int t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } } } if ( s == 1 ) printf ( \"%d\n\" , a [ 1 ] ) ; else { long long int a1 = a [ 1 ] ; s = s - 1 ; a1 = a1 * s ; printf ( \"%lld\n\" , a1 ) ; } } }", "label": 2, "id": 13061}
{"input": "main ( ) { long int t , a , b , prod , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; prod = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } gcd = a ; lcm = prod / gcd ; printf ( \"\n %ld %ld\" , gcd , lcm ) ; } }", "label": 1, "id": 8681}
{"input": "int main ( void ) { int T , N , i , j , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = N - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 21769}
{"input": "int main ( ) { int T , a , b , r , i , q , x , y ; scanf ( \"%d\" , & T ) ; while ( T -- ) { q = 1 ; scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; if ( a > b ) r = a ; else r = b ; for ( i = 2 ; i <= r ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { q *= i ; a /= i ; b /= i ; i -- ; } else if ( a % i == 0 ) { q = q * i ; a /= i ; i -- ; } else if ( b % i == 0 ) { q = q * i ; b /= i ; i -- ; } } printf ( \"%d\\t\" , ( x * y ) / q ) ; printf ( \"%d\n\" , q ) ; } return 0 ; }", "label": 2, "id": 18660}
{"input": "int max ( int , int ) ; main ( ) { int t , n , i , j , ma ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int s [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { s [ i ] [ j ] = 0 ; } } s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - 1 ] [ j ] ; } else { s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - 1 ] [ j - 1 ] , s [ i - 1 ] [ j ] ) ; } } } ma = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( s [ n - 1 ] [ i ] > ma ) { ma = s [ n - 1 ] [ i ] ; } } printf ( \"%d\n\" , ma ) ; } } int max ( int a , int b ) { if ( a > b ) { return a ; } else return b ; }", "label": 0, "id": 17242}
{"input": "int main ( ) { int t ; long int a , b , hcf , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { hcf = i ; } } printf ( \"%ld %ld\n\" , hcf , ( a * b ) / hcf ) ; } return ( 0 ) ; }", "label": 2, "id": 20235}
{"input": "void main ( ) { int arr [ 100 ] [ 100 ] ; int i , j , tc , go , row , k ; long sum = 0 , max = 0 ; scanf ( \"%d\" , & tc ) ; for ( go = 1 ; go <= tc ; go ++ ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = 0 ; i < row ; i ++ ) { sum = 0 ; k = i ; for ( j = i ; k < row ; k ++ ) { sum = sum + arr [ k ] [ j ] ; } sum = sum + arr [ k - 1 ] [ j + 1 ] ; if ( sum > max ) max = sum ; } printf ( \"%ld\" , max ) ; } }", "label": 1, "id": 15987}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int i , j , temp ; long int n ; long long int s = 0 ; scanf ( \"%ld\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int min = a [ 0 ] ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { min = a [ i + 1 ] ; } else { min = a [ i ] ; } } s = ( min * ( n - 1 ) ) ; printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 1, "id": 176}
{"input": "long int GCD ( long int x , long int y ) { if ( y == 0 ) return x ; else return GCD ( y , x % y ) ; } int main ( ) { long int n1 , n2 , i , LCM , gcd ; int T , I ; scanf ( \" %d\" , & T ) ; if ( T < 1 || T > 1000 ) return 0 ; long int ans [ T ] [ 2 ] ; for ( I = 0 ; I < T ; I ++ ) { scanf ( \" %ld %ld\" , & n1 , & n2 ) ; if ( n1 < 1 || n2 < 1 || n1 > 1000000 || n2 > 1000000 ) return 0 ; gcd = GCD ( n1 , n2 ) ; LCM = ( n1 * n2 ) / gcd ; ans [ I ] [ 0 ] = gcd ; ans [ I ] [ 1 ] = LCM ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%ld %ld\n\" , ans [ i ] [ 0 ] , ans [ i ] [ 1 ] ) ; return 0 ; }", "label": 0, "id": 10130}
{"input": "int n ; int summ ( int a [ 100 ] [ 100 ] , int i , int j ) ; int max ( int a , int b ) ; void main ( ) { int a [ 100 ] [ 100 ] = { 0 } , res [ 1000 ] , i , j , k ; int t ; scanf ( \"%d\" , & t ) ; k = 0 ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } res [ k ] = summ ( a , 0 , 0 ) ; k ++ ; } for ( i = 0 ; i < k ; i ++ ) printf ( \"%d\n\" , res [ i ] ) ; } int summ ( int a [ 100 ] [ 100 ] , int i , int j ) { if ( i > n || j > n ) return 0 ; else { return a [ i ] [ j ] + max ( summ ( a , i + 1 , j ) , summ ( a , i + 1 , j + 1 ) ) ; } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 2, "id": 9753}
{"input": "int main ( ) { int t , a [ max ] , n , i , j , count = 0 ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) { count ++ ; } } } printf ( \"%d\" , count ) ; t -- ; } return 0 ; }", "label": 3, "id": 1629}
{"input": "int quickread_int ( ) { int ch ; int num = 0 ; ch = getchar_unlocked ( ) ; while ( ch < '0' || ch > '9' ) ch = getchar_unlocked ( ) ; while ( ch >= '0' && ch <= '9' ) { num = num * 10 + ch - '0' ; ch = getchar_unlocked ( ) ; } return num ; } int main ( ) { int ar [ 100 ] [ 100 ] ; register int n , t , i , j ; t = quickread_int ( ) ; while ( t -- ) { n = quickread_int ( ) ; for ( i = 0 ; i < ( n ) ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) ar [ i ] [ j ] = quickread_int ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { ar [ i ] [ j ] += ( ar [ i + 1 ] [ j ] > ar [ i + 1 ] [ j + 1 ] ? ar [ i + 1 ] [ j ] : ar [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 23809}
{"input": "void main ( ) { int num_test_case , line ; int a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & num_test_case ) ; while ( num_test_case -- ) { scanf ( \"%d\" , & line ) ; for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = line - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ j + 1 ] [ i + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 15592}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , i , b ; scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) { i = a ; a = b ; b = i ; } for ( i = a ; i > 0 ; i -- ) { if ( b % i == 0 && a % i == 0 ) break ; } printf ( \"%ld %ld\" , i , a * b / i ) ; } return 0 ; }", "label": 2, "id": 6513}
{"input": "main ( ) { int arr [ 99 ] [ 99 ] , sum , i , j , pos , rows , max , test ; scanf ( \"%d\" , & test ) ; while ( test != 0 ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } pos = 0 ; sum = arr [ 0 ] [ 0 ] ; for ( i = 1 ; i < rows ; i ++ ) { max = ( ( ( arr [ i ] [ pos + 1 ] - arr [ i ] [ pos ] ) > arr [ i + 1 ] [ pos ] ) ? arr [ i ] [ pos = pos + 1 ] : arr [ i ] [ pos = pos ] ) ; sum = sum + max ; } printf ( \"%d\n\" , sum ) ; test -- ; } return 0 ; }", "label": 3, "id": 4085}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7926}
{"input": "int maximum ( int * * array , int a , int b ) { return array [ a ] [ b ] > array [ a ] [ b - 1 ] ? array [ a ] [ b ] : array [ a ] [ b - 1 ] ; } int main ( ) { int * * triarray ; int * * sumarray ; int tests ; int rows ; int i , j , k ; int firstrow ; int highest = 0 ; scanf ( \"%d\" , & tests ) ; for ( i = 0 ; i < tests ; i ++ ) { scanf ( \"%d\" , & rows ) ; triarray = malloc ( sizeof ( int * ) * rows ) ; sumarray = malloc ( sizeof ( int * ) * rows ) ; for ( j = 0 ; j < rows ; j ++ ) { triarray [ j ] = malloc ( sizeof ( int ) * ( j + 2 ) ) ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & ( triarray [ j ] [ k ] ) ) ; } } firstrow = 0 ; for ( j = 0 ; j < rows ; j ++ ) { sumarray [ j ] = malloc ( sizeof ( int ) * ( j + 2 ) ) ; firstrow += triarray [ j ] [ 0 ] ; sumarray [ j ] [ 0 ] = firstrow ; for ( k = 1 ; k <= j ; k ++ ) { sumarray [ j ] [ k ] = maximum ( sumarray , j - 1 , k ) + triarray [ j ] [ k ] ; } } for ( k = 0 ; k < rows ; k ++ ) { if ( sumarray [ rows - 1 ] [ k ] > highest ) { highest = sumarray [ rows - 1 ] [ k ] ; } } printf ( \"%d\n\" , highest ) ; } }", "label": 1, "id": 7792}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; long long min = INT_MAX ; scanf ( \"%d\" , & n ) ; long long a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 219}
{"input": "int valores [ 101 ] [ 101 ] ; long costos [ 101 ] [ 101 ] ; int t , n = 100 ; int i , j ; long max ( long a , long b ) { return ( a > b ) ? a : b ; } void iniciar ( ) { for ( i = 1 ; i < n + 1 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) costos [ i ] [ j ] = 0 , valores [ i ] [ j ] = 0 ; } void solucion ( ) { long maxi = - 1 ; costos [ 0 ] [ 0 ] = valores [ 0 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { costos [ i + 1 ] [ j + 1 ] = max ( costos [ i + 1 ] [ j + 1 ] , valores [ i + 1 ] [ j + 1 ] + costos [ i ] [ j ] ) ; maxi = max ( maxi , costos [ i + 1 ] [ j + 1 ] ) ; costos [ i + 1 ] [ j ] = max ( costos [ i + 1 ] [ j ] , valores [ i + 1 ] [ j ] + costos [ i ] [ j ] ) ; maxi = max ( maxi , costos [ i + 1 ] [ j ] ) ; } } printf ( \"%ld\n\" , maxi ) ; } int main ( ) { scanf ( \"%d\" , & t ) ; while ( t ) { iniciar ( ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & valores [ i ] [ j ] ) ; solucion ( ) ; t -- ; } return 0 ; }", "label": 0, "id": 17491}
{"input": "int main ( ) { int t , n , i ; long long a [ 50001 ] , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100000 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 14533}
{"input": "int main ( ) { long long int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%lld %lld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } }", "label": 1, "id": 18335}
{"input": "int main ( ) { int t , r , n , i , j ; scanf ( \"%d\" , & r ) ; while ( r -- ) { t = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 , j = i + 1 ; i < n , j < n ; i ++ , j ++ ) { if ( a [ i ] < a [ j ] ) t = t + a [ i ] ; else t = t + a [ i + 1 ] ; } printf ( \"%d\" , t ) ; } return 0 ; }", "label": 1, "id": 7192}
{"input": "int main ( ) { int T ; long int N , i ; long long int a [ 500000 ] , p ; scanf ( \"%d\n\" , & T ) ; while ( T -- ) { scanf ( \"%ld\n\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 0 ; i < N - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { p = a [ i + 1 ] ; a [ i + 1 ] = a [ i ] ; } else p = a [ i ] ; } printf ( \"%lld\" , p ) ; } return 0 ; }", "label": 1, "id": 10405}
{"input": "int main ( ) { int a [ 100 ] [ 20 ] , i , j , n , t , max ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 5347}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int r , i ; scanf ( \"%d\" , & r ) ; int a [ r ] ; for ( i = 0 ; i < r ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int s = a [ 0 ] ; for ( i = 0 ; i < r ; i ++ ) { if ( a [ i ] < s ) { s = a [ i ] ; } } printf ( \"%d\n\" , s * ( r - 1 ) ) ; } }", "label": 0, "id": 19706}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) { return a ; } gcd ( b , a % b ) ; } int main ( void ) { long int t ; scanf ( \"%ld\" , & t ) ; while ( t > 0 ) { long int a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( \"%ld %ld\" , g , l ) ; t -- ; puts ( \"\" ) ; } }", "label": 0, "id": 24423}
{"input": "int main ( void ) { int t ; long long int n ; long long int a [ 50000 ] , i , min ; scanf ( \"%d\" , & t ) ; printf ( \"\n\" ) ; while ( t -- ) { min = 1 ; scanf ( \"%lld\" , & n ) ; printf ( \"\n\" ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; printf ( \"%lld \" , a [ i ] ) ; if ( i ) { if ( min < a [ i ] ) min = a [ i ] ; } else min = a [ i ] ; } printf ( \"\n%lld\n\" , ( min * ( n - 1 ) ) ) ; } }", "label": 3, "id": 21543}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int i , j ; long int n ; scanf ( \"%ld\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } long long int min = a [ 0 ] ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { min = a [ j + 1 ] ; } else { min = a [ j ] ; } } printf ( \"%lld\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 1, "id": 18751}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] ; int i , j , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j + 1 ] > a [ i ] [ j ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 13821}
{"input": "int a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] ; int sum , k ; int max ( int a , int c ) { if ( a > c ) return a ; else return c ; } int find_max ( int i , int j , int n ) { int c , t , d ; if ( i == n - 1 ) return ( a [ i ] [ j ] ) ; if ( b [ i ] [ j ] ) return ( b [ i ] [ j ] ) ; c = find_max ( i + 1 , j , n ) ; d = find_max ( i + 1 , j + 1 , n ) ; t = max ( c , d ) + a [ i ] [ j ] ; b [ i ] [ j ] = t ; return t ; } int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) { a [ i ] [ j ] = 0 ; b [ i ] [ j ] = 0 ; } sum = 0 ; k = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = find_max ( 0 , 0 , n ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 18433}
{"input": "int main ( ) { int t , n , a [ 100001 ] , smallest , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { smallest = 50001 ; memset ( a , 50001 , 100001 * sizeof ( int ) ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < 100001 ; i ++ ) if ( a [ i ] < smallest ) smallest = a [ i ] ; printf ( \"%d\n\" , smallest * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 18385}
{"input": "int main ( ) { char arr [ 100 ] [ 100 ] ; char sum [ 100 ] [ 100 ] ; int n , i , j , k , rslt = 0 , s ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & s ) ; for ( i = 0 ; i < s ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; if ( j == 0 && i != 0 ) { if ( i == 1 ) sum [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + arr [ i ] [ j ] ; } else if ( j == i ) { sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; } else if ( i > 0 ) { sum [ i ] [ j ] = arr [ i ] [ j ] + grst ( sum [ i - 1 ] [ j ] , sum [ i - 1 ] [ j - 1 ] ) ; } } } rslt = 0 ; for ( i = 0 ; i < s ; i ++ ) { if ( rslt < sum [ s - 1 ] [ i ] ) rslt = sum [ s - 1 ] [ i ] ; } printf ( \"%d\" , rslt ) ; } return 0 ; }", "label": 1, "id": 21489}
{"input": "int gcd ( int , int ) ; void main ( ) { int a , b , res ; printf ( \"two values \" ) ; scanf ( \"%d%d\" , & a , & b ) ; res = gcd ( a , b ) ; printf ( \"\ngcd is %d\" , res ) ; } int gcd ( int a , int b ) { int rem ; rem = a % b ; if ( rem == 0 ) return b ; else return ( gcd ( b , rem ) ) ; }", "label": 1, "id": 5060}
{"input": "int T , A , B , i , den , num , Rem , GCD , LCM ; int main ( ) { scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; if ( A > B ) { num = A ; den = B ; } else { num = B ; den = A ; } Rem = num % den ; while ( Rem != 0 ) { num = den ; den = Rem ; Rem = num % den ; } GCD = den ; LCM = ( A * B ) / GCD ; printf ( \"%d\\t%d\n\" , GCD , LCM ) ; } }", "label": 1, "id": 14234}
{"input": "int main ( ) { int t , n , currentele , prevele , count , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long answer = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & currentele ) ; if ( i == 0 ) count = 1 ; else if ( currentele >= prevele ) ++ count ; else count = 1 ; answer += count ; prevele = currentele ; } printf ( \"%lld\n\" , answer ) ; } return 0 ; }", "label": 0, "id": 23667}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 18226}
{"input": "int main ( ) { int t ; long long count , i , j , n , prev , num ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; scanf ( \"%lld\" , & num ) ; prev = num ; i = 1 ; j = 1 ; count = 0 ; for ( i = 1 ; i < n ; ) { scanf ( \"%lld\" , & num ) ; i ++ ; if ( num >= prev ) { prev = num ; j ++ ; } else { prev = num ; count = count + j * ( j + 1 ) / 2 ; j = 1 ; } } count = count + j * ( j + 1 ) / 2 ; printf ( \"%lld\" , count ) ; } return 0 ; }", "label": 1, "id": 16329}
{"input": "int triangle [ MAXSIZE ] ; char buffer [ 500 ] ; int main ( void ) { int t , N , n , index = 0 , num = 0 , i , j , k , m , count ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & N ) ; n = N ; while ( n -- ) { count = read ( 0 , buffer , 500 ) ; i = 0 ; while ( i < count && buffer [ i ] != '\n' ) { if ( buffer [ i ] == ' ' ) { triangle [ index ] = num ; num = 0 ; index ++ ; } else { num = num * 10 + ( buffer [ i ] - 48 ) ; } i ++ ; } triangle [ index ] = num ; num = 0 ; index ++ ; } k = N - 2 ; while ( k >= 0 ) { m = k * ( k + 1 ) / 2 ; for ( j = 0 ; j <= k ; j ++ ) { triangle [ m + j ] = ( ( ( triangle [ m + j ] + triangle [ m + j + k + 1 ] ) > ( triangle [ m + j ] + triangle [ m + j + k + 2 ] ) ) ? ( triangle [ m + j ] + triangle [ m + j + k + 1 ] ) : ( triangle [ m + j ] + triangle [ m + j + k + 2 ] ) ) ; } k -- ; } printf ( \"%d\n\" , triangle [ 0 ] ) ; index = 0 ; } return 0 ; }", "label": 1, "id": 21848}
{"input": "int main ( ) { int A [ size ] , t , N , i , j , k , l , min , cost [ 11 ] ; scanf ( \"%d\" , & t ) ; if ( t <= 10 && t >= 1 ) { for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & N ) ; if ( N >= 2 && N <= 50000 ) { for ( k = 0 ; k < N ; k ++ ) scanf ( \"%d\" , & A [ k ] ) ; min = A [ 0 ] ; for ( l = 1 ; l < N ; l ++ ) { if ( min >= A [ l ] ) min = A [ l ] ; } cost [ i ] = ( N - 1 ) * min ; } else { printf ( \"Size of Array is wrong\" ) ; exit ( 1 ) ; } } } else { printf ( \"Test cases should be in between 1 to 10:\n\" ) ; exit ( 1 ) ; } for ( i = 1 ; i <= t ; i ++ ) printf ( \"%d\n\" , cost [ i ] ) ; return 0 ; }", "label": 0, "id": 18946}
{"input": "int main ( ) { int i , j , k , l ; long int sum , max , prev ; int a [ 100 ] [ 100 ] ; for ( scanf ( \"d\" , & i ) ; i > 0 ; i -- ) { scanf ( \"%d\" , & l ) ; for ( j = 0 ; j < l ; j ++ ) { for ( k = 0 ; k <= i ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } prev = 0 ; max = 0 ; for ( j = 0 ; j < l ; j ++ ) { sum = prev ; prev = prev + a [ j ] [ j ] ; for ( k = j ; k < l ; k ++ ) { sum = sum + a [ k ] [ j ] ; } if ( sum > max ) { max = sum ; } } printf ( \"%ld\" , max ) ; } return 0 ; }", "label": 1, "id": 15640}
{"input": "int main ( void ) { int n , l , s , i , j , max , arr [ MAX ] [ MAX ] = { 0 } ; scanf ( \"%d\" , & n ) ; for ( l = 1 ; l <= n ; l ++ ) { scanf ( \"%d\" , & s ) ; for ( i = 0 ; i < s ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; if ( i >= 1 ) { max = arr [ i - 1 ] [ j ] ; if ( j >= 1 ) { if ( arr [ i - 1 ] [ j - 1 ] > max ) max = arr [ i - 1 ] [ j - 1 ] ; } arr [ i ] [ j ] = arr [ i ] [ j ] + max ; } } } max = arr [ s - 1 ] [ 0 ] ; for ( i = 1 ; i < s ; i ++ ) { if ( max < arr [ s - 1 ] [ i ] ) max = arr [ s - 1 ] [ i ] ; } printf ( \"\n%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 19352}
{"input": "int main ( ) { int n , a [ 1000 ] , sum = 0 , t , i , j , k , max ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; ( i < n && ( n >= 1 && n <= 1000 ) ) ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; max = 0 ; for ( k = 1 ; k <= a [ i ] && ( a [ i ] >= 1 && a [ i ] <= 100 ) ; k ++ ) { sum = 0 ; for ( j = 1 ; j <= k ; j ++ ) { scanf ( \"%d\" , & t ) ; sum += t ; } if ( sum >= max ) max = sum ; } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 1, "id": 10439}
{"input": "int gcd_algorithm ( int x , int y ) { if ( y == 0 ) { return x ; } else if ( x >= y && y > 0 ) { return gcd_algorithm ( y , ( x % y ) ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int x , y , gcd , lcm ; scanf ( \"%lld%lld\" , & x , & y ) ; gcd = gcd_algorithm ( x , y ) ; lcm = ( x * y ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 10689}
{"input": "int main ( ) { int t , s = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , a [ 100001 ] , min ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 1, "id": 20012}
{"input": "int main ( void ) { int i , t , n1 , n2 , c , k , m ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { c = 1 ; scanf ( \"%d\" , & n1 ) ; scanf ( \"%d\" , & n2 ) ; if ( n1 > n2 ) { k = n2 ; } else { k = n1 ; } for ( i = 2 ; i <= k ; i ++ ) { if ( n1 % i == 0 ) { if ( n2 % i == 0 ) { c = i ; } } } m = ( n1 / c ) * ( n2 / c ) ; printf ( \"%d %d\n\" , c , c * m ) ; t -- ; } return 0 ; }", "label": 1, "id": 768}
{"input": "main ( ) { int a [ 100 ] [ 100 ] = { 0 } , n , m , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = m - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25804}
{"input": "int main ( void ) { long long int t , a , b , i , n , hcf = 1 , lcm = 1 ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; n = ( a < b ) ? a : b ; for ( i = 1 ; i <= n ; i ++ ) if ( a % i == 0 && b % i == 0 ) hcf = i ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; hcf = 1 ; lcm = 1 ; } return 0 ; }", "label": 2, "id": 24984}
{"input": "int main ( ) { int b , c , d , i , j , n , f [ 2 ] [ 101 ] , p , q , k ; for ( scanf ( \"%d\" , & n ) ; n ; n -- ) { q = 1 , p = 0 , k = 0 ; f [ 0 ] [ 0 ] = 0 ; for ( scanf ( \"%d\" , & b ) , c = b ; b ; b -- ) { scanf ( \"%d\" , & d ) ; f [ q ] [ 0 ] = f [ p ] [ 0 ] + d ; for ( j = 1 ; j < c - b ; j ++ ) { scanf ( \"%d\" , & d ) ; if ( f [ p ] [ j ] > f [ p ] [ j - 1 ] ) f [ q ] [ j ] = f [ p ] [ j ] + d ; else f [ q ] [ j ] = f [ p ] [ j - 1 ] + d ; } if ( c - b ) { scanf ( \"%d\" , & d ) ; f [ q ] [ j ] = f [ p ] [ j - 1 ] + d ; } if ( q ) q = 0 , p = 1 ; else q = 1 , p = 0 ; } for ( i = 0 ; i < c ; i ++ ) if ( k < f [ p ] [ i ] ) k = f [ p ] [ i ] ; printf ( \"%d\n\" , k ) ; } return 0 ; }", "label": 0, "id": 10596}
{"input": "int main ( ) { int t , a , b , LCM , GCD , temp , i , p , q ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; temp = 1 ; LCM = a * b ; for ( i = 2 ; i <= a && b ; i ++ ) { p = a % i ; q = b % i ; if ( p == 0 && q == 0 ) { temp = i ; } } if ( temp >= 2 ) printf ( \"%d %d\n\" , temp , LCM ) ; else if ( temp = 1 ) printf ( \"%d %d\n\" , temp , LCM ) ; } return 0 ; }", "label": 2, "id": 6121}
{"input": "int gcd ( int m , int n ) { int r = m % n ; if ( r == 0 ) { return n ; } else { return gcd ( n , r ) ; } } int lcm ( int m , int n , int x ) { return ( m * n ) / x ; } int main ( ) { int T ; scanf ( \"%d\" , & T ) ; for ( int i = 0 ; i < T ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int x = gcd ( a , b ) ; int y = lcm ( a , b , x ) ; printf ( \"%d %d\n\" , x , y ) ; } }", "label": 1, "id": 25928}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , x , y , l , i , g = 1 ; scanf ( \"%d%d\" , & a , & b ) ; for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { if ( b % i == 0 ) { g = i ; } } } a = a / g ; b = b / g ; l = a * b * g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 17142}
{"input": "unsigned int tri [ 100 ] [ 100 ] ; int main ( ) { unsigned int n , l , i , j , total ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { total = 0 ; scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & tri [ i ] [ j ] ) ; if ( j > 0 && i > 0 && j < i ) { tri [ i ] [ j ] += tri [ i - 1 ] [ j - 1 ] > tri [ i - 1 ] [ j ] ? tri [ i - 1 ] [ j - 1 ] : tri [ i - 1 ] [ j ] ; } else if ( j == 0 ) { tri [ i ] [ j ] += tri [ i - 1 ] [ 0 ] ; } else if ( j == i ) { tri [ i ] [ j ] += tri [ i - i ] [ j - 1 ] ; } } for ( i = 0 ; i < l ; i ++ ) { total = total > tri [ l - 1 ] [ i ] ? total : tri [ l - 1 ] [ i ] ; } printf ( \"%d\n\" , total ) ; n -- ; } return 0 ; }", "label": 3, "id": 18931}
{"input": "int lcmnum ( int x , int y ) { long long int z ; z = ( x < y ) ? x : y ; if ( x == 0 || y == 0 ) return 0 ; if ( x == y ) return x ; for ( int j = 2 ; j <= z ; j ++ ) { if ( x % j == 0 && y % j == 0 ) { return z ; break ; } } return x * y ; } int main ( ) { long long int t , m , k ; scanf ( \"%lld\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; m = lcmnum ( a , b ) ; if ( m == 0 ) k = 0 ; else k = a * b / m ; printf ( \"%lld %lld\n\" , k , m ) ; } }", "label": 1, "id": 17225}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 7695}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } int lcm ( int x , int y , int z ) { int g = ( y * z ) / x ; return g ; } int main ( ) { int t , a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( g , a , b ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 21712}
{"input": "int gcdr ( int a , int b ) { if ( a == 0 ) return b ; return gcdr ( b % a , a ) ; } int main ( ) { long long int t , a , b , temp , temp1 , lcm , gcd ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; temp = ( a > b ) ? a : b ; temp1 = ( a < b ) ? a : b ; gcd = gcdr ( temp1 , temp ) ; lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 4739}
{"input": "int sum ( int n ) { int i , j , a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; return 0 ; } int main ( ) { int test , n ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; sum ( n ) ; } return 0 ; }", "label": 1, "id": 2465}
{"input": "int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int N , i , min = 0 ; scanf ( \"%d\" , & N ) ; int A [ N ] ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } min = A [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) { if ( A [ i ] < min ) min = A [ i ] ; } int c = min * ( N - 1 ) ; printf ( \"%d \n\" , c ) ; } return 0 ; }", "label": 1, "id": 21220}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n , j , k , p = 0 ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( j = 1 ; j <= n ; j ++ ) for ( k = 0 ; k < j ; k ++ ) scanf ( \"%d\" , & arr [ j - 1 ] [ k ] ) ; for ( j = n - 1 ; j >= 0 ; j -- ) for ( k = 0 ; k < j ; k ++ ) { if ( arr [ j ] [ k ] > arr [ j ] [ k + 1 ] ) arr [ j - 1 ] [ k ] += arr [ j ] [ k ] ; else arr [ j - 1 ] [ k ] += arr [ j ] [ k + 1 ] ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 6458}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%d\n\" , solve ( x ) ) ; } return 0 ; }", "label": 0, "id": 12382}
{"input": "int main ( void ) { int size , m , n , count ; scanf ( \"%d\" , & count ) ; while ( count -- ) { scanf ( \"%d\" , & size ) ; int a [ size ] [ size ] ; for ( m = 0 ; m < size ; m ++ ) { for ( n = 0 ; n <= m ; n ++ ) scanf ( \"%d\" , & a [ m ] [ n ] ) ; } for ( m = size - 2 ; m >= 0 ; m -- ) { for ( n = 0 ; n <= m ; n ++ ) { if ( a [ m + 1 ] [ n ] > a [ m + 1 ] [ n + 1 ] ) a [ m ] [ n ] += a [ m + 1 ] [ n ] ; else a [ m ] [ n ] += a [ m + 1 ] [ n + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 3615}
{"input": "int main ( ) { int a , t , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( n != m ) { if ( n > m ) n = n - m ; else m = m - n ; } printf ( \"%d\n%d\n\" , n , ( a * b ) / n ) ; } return 0 ; }", "label": 1, "id": 2904}
{"input": "int main ( ) { int t , T , n , i , j ; scanf ( \"%d\" , & T ) ; t = 0 ; while ( t < T ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , b [ n ] [ n ] ; for ( i = 0 ; i < n ; i = i + 1 ) { for ( j = 0 ; j <= i ; j = j + 1 ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 0 ; j < n ; j = j + 1 ) { b [ n - 1 ] [ j ] = a [ n - 1 ] [ j ] ; } for ( i = n - 1 ; i > 0 ; i = i - 1 ) { for ( j = i ; j > 0 ; j = j - 1 ) { b [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + ( b [ i ] [ j ] > b [ i ] [ j - 1 ] ? b [ i ] [ j ] : b [ i ] [ j - 1 ] ) ; } } printf ( \"%d\n\" , b [ 0 ] [ 0 ] ) ; t = t + 1 ; } return 0 ; }", "label": 0, "id": 9473}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int tc = 0 ; tc < t ; tc ++ ) { long long int n ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( long long int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; long long int c = 0 ; for ( long long int i = 0 ; i + 1 < n && i < n ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) c ++ ; } printf ( \"%lld\n\" , c + n ) ; } return 0 ; }", "label": 1, "id": 8530}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; for ( int i = 1 ; i <= n ; i ++ ) { int a , b , m , n ; scanf ( \"%d%d\" , & m , & n ) ; a = m ; b = n ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } int gcd = a ; int lcm = ( m * n ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 7312}
{"input": "int a [ 100 ] [ 100 ] ; int temp [ 100 ] ; int recursion ( int j ) { int rval , k ; if ( j == 0 ) { rval = a [ 0 ] [ 0 ] + temp [ 0 ] ; } else { for ( k = 0 ; k <= j ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] + temp [ k ] ; } for ( k = 0 ; k < j ; k ++ ) { temp [ k ] = a [ j ] [ k ] > a [ j ] [ k + 1 ] ? a [ j ] [ k ] : a [ j ] [ k + 1 ] ; } rval = recursion ( j - 1 ) ; } return rval ; } int main ( ) { int t , n ; int i , j , k ; int v , maxsum ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < 100 ; j ++ ) temp [ j ] = 0 ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & v ) ; a [ j ] [ k ] = v ; } } maxsum = recursion ( j - 1 ) ; printf ( \"%d \n\" , maxsum ) ; } return 0 ; }", "label": 0, "id": 13392}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , t , r , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; r = gcd ( a , b ) ; l = ( a * b ) / r ; printf ( \"%d\\t%d\" , r , l ) ; } return 0 ; } int gcd ( int a , int b ) { if ( ( a % b ) == 0 ) return b ; else { return gcd ( b , ( a % b ) ) ; } }", "label": 1, "id": 4947}
{"input": "int main ( ) { int T , a , b , i , z ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; z = gcd ( a , b ) ; printf ( \"%d %d\" , z , ( a * b / z ) ) ; } } int gcd ( int a , int b ) { int temp , rem ; if ( a > b ) { temp = a ; a = b ; b = temp ; } rem = b % a ; if ( rem == 0 ) return ( a ) ; else { b = a ; a = rem ; return ( gcd ( a , b ) ) ; } }", "label": 1, "id": 24498}
{"input": "int main ( ) { int a , b , tm , t , p ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; p = a * b ; if ( b < a ) { tm = a ; a = b ; b = tm ; } while ( ( b % a ) != 0 ) { tm = ( b % a ) ; b = a ; a = tm ; } printf ( \"%d %d\n\" , a , ( p / a ) ) ; } return 0 ; }", "label": 1, "id": 6988}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int t , n , i , j , max1 , max2 , sum , sum1 , sum2 , posi1 , posi2 , posj1 , posj2 , sum3 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; sum1 = sum2 = 0 ; max1 = max2 = 0 ; posi1 = posi2 = 0 ; posj1 = posj2 = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } i = n - 1 ; for ( j = 0 ; j <= n - 1 ; j ++ ) { if ( a [ i ] [ j ] >= max1 ) { max1 = a [ i ] [ j ] ; posi1 = i ; posj1 = j ; } } i = n - 2 ; max2 = - 1 ; for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] >= max2 ) { max2 = a [ i ] [ j ] ; posi2 = i ; posj2 = j ; } } if ( max1 <= max2 ) { sum = max2 ; if ( a [ posi2 + 1 ] [ posj2 ] >= a [ posi2 + 1 ] [ posj2 + 1 ] ) { sum = sum + a [ posi2 + 1 ] [ posj2 ] ; } else { sum = sum + a [ posi2 + 1 ] [ posj2 + 1 ] ; } posi2 -- ; while ( posi2 >= 0 ) { if ( posj2 != 0 ) { if ( posj2 == n - 2 ) { posj2 -- ; sum += a [ posi2 ] [ posj2 ] ; } else { if ( a [ posi2 ] [ posj2 ] >= a [ posi2 ] [ posj2 - 1 ] ) { sum = sum + a [ posi2 ] [ posj2 ] ; } else { sum += a [ posi2 ] [ posj2 - 1 ] ; posj2 -- ; } } } else { sum += a [ posi2 ] [ posj2 ] ; } posi2 -- ; } } else { sum1 = max1 ; posi1 -- ; while ( posi1 >= 0 ) { if ( posj1 != 0 ) { if ( posj1 == ( n - 1 ) ) { posj1 -- ; sum1 += a [ posi1 ] [ posj1 ] ; } else { if ( a [ posi1 ] [ posj1 ] >= a [ posi1 ] [ posj1 - 1 ] ) { sum1 = sum1 + a [ posi1 ] [ posj1 ] ; } else { sum1 += a [ posi1 ] [ posj1 - 1 ] ; posj1 -- ; } } } else { sum1 = sum1 + a [ posi1 ] [ posj1 ] ; } posi1 -- ; } sum2 = max2 ; if ( a [ posi2 + 1 ] [ posj2 ] >= a [ posi2 + 1 ] [ posj2 + 1 ] ) { sum2 = sum2 + a [ posi2 + 1 ] [ posj2 ] ; } else { sum2 += a [ posi2 + 1 ] [ posj2 + 1 ] ; } posi2 -- ; while ( posi2 > 0 ) { if ( posj2 != 0 ) { if ( posj2 == n - 2 ) { sum2 += a [ posi2 ] [ posj2 ] ; posj2 -- ; } else { if ( a [ posi2 ] [ posj2 ] >= a [ posi2 ] [ posj2 - 1 ] ) sum2 = sum2 + a [ posi2 ] [ posj2 ] ; else { sum2 += a [ posi2 ] [ posj2 - 1 ] ; posj2 -- ; } } } else sum2 += a [ posi2 ] [ posj2 ] ; posi2 -- ; } if ( sum1 >= sum2 ) sum = sum1 ; else sum = sum2 ; } j = 0 ; sum3 = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) sum3 += a [ i ] [ j ] ; else if ( a [ i ] [ j ] == a [ i ] [ j + 1 ] ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j ] ) sum3 += a [ i ] [ j ] ; else sum3 += a [ i ] [ j + 1 ] ; } else { sum3 += a [ i ] [ j + 1 ] ; j ++ ; } } if ( sum3 >= sum ) sum = sum3 ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 1145}
{"input": "int main ( ) { int n , m , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; int a [ m ] [ m ] ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = m - 1 ; i > 0 ; i -- ) { for ( j = i ; j > 0 ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j - 1 ] ) a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j - 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 23042}
{"input": "int main ( ) { unsigned int i = 0 , t , z , ref ; long unsigned int a [ 2 ] ; scanf ( \"%u\n\" , & t ) ; ref = t ; long unsigned int sum [ 10 ] ; while ( t > 0 ) { scanf ( \"%u\n\" , & z ) ; sum [ i ] = 0 ; scanf ( \"%lu \" , & a [ 0 ] ) ; while ( z > 1 ) { scanf ( \"%lu \" , & a [ 1 ] ) ; if ( a [ 0 ] > a [ 1 ] ) { sum [ i ] += a [ 1 ] ; a [ 0 ] = a [ 1 ] ; } else { sum [ i ] += a [ 0 ] ; } z -- ; } t -- ; i ++ ; } i = 0 ; while ( ref > 0 ) { printf ( \"%lu\n\" , sum [ i ] ) ; i ++ ; ref -- ; } return 0 ; }", "label": 1, "id": 5766}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b , int temp ) { if ( temp % a == 0 && temp % b == 0 ) return temp ; else { temp ++ ; return lcm ( a , b , temp ) ; } } int main ( void ) { int n , a , b ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( b > a ) { a = a + b ; b = b - a ; a = a - b ; } printf ( \"\n%d %d\" , gcd ( a , b ) , lcm ( a , b , 1 ) ) ; } return 0 ; }", "label": 3, "id": 14716}
{"input": "int main ( ) { int i , t , n = 3 , s , max = 0 , min = 123 , a [ 3 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( max < a [ i ] ) { max = a [ i ] ; } if ( min > a [ i ] ) { min = a [ i ] ; } } for ( i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] != min ) && ( a [ i ] != max ) ) s = a [ i ] ; } max = 0 ; min = 123 ; printf ( \"%d\n\" , s ) ; } }", "label": 1, "id": 3511}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , m , n , t ; scanf ( \"%d\" , & m ) ; for ( t = 1 ; t <= m ; t ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return ( 0 ) ; }", "label": 0, "id": 16749}
{"input": "long long int gcdcheck ( long long int a , long long int b ) { if ( a % b == 0 ) return b ; else { long long int temp = b ; b = a % b ; a = temp ; gcdcheck ( a , b ) ; } } int main ( void ) { long long int t , a , b , gcd , lcm , i ; scanf ( \"%lld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; gcd = gcdcheck ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 21584}
{"input": "int main ( void ) { int t ; long int n1 , n2 , num1 , num2 , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & n1 , & n2 ) ; num1 = n1 ; num2 = n2 ; while ( n2 != 1 ) { temp = n1 % n2 ; n1 = n2 ; if ( temp == 0 ) break ; else n2 = temp ; } printf ( \"%d %ld\n\" , n2 , ( num1 * num2 ) / n2 ) ; } return 0 ; }", "label": 0, "id": 14394}
{"input": "int solve ( int , int ) ; void read ( int * ) ; int r , arr1 [ 99 ] [ 99 ] ; int main ( ) { int n1 , num , i , k = 0 , j , x , z ; read ( & n1 ) ; for ( i = 0 ; i < n1 ; i ++ ) { read ( & r ) ; for ( j = 0 ; j < r ; j ++ ) { while ( k < j + 1 ) { read ( & num ) ; arr1 [ j ] [ k ] = num ; k ++ ; } k = 0 ; } z = solve ( 0 , 0 ) ; printf ( \"%d\n\" , z ) ; } return 0 ; } void read ( int * n ) { * n = 0 ; int ve = 1 ; char c ; c = GC ; while ( c < 48 || c > 57 ) { if ( c == '-' ) ve = ve * - 1 ; c = GC ; } while ( c >= 48 && c <= 57 ) { * n = * n * 10 ; * n = * n + c - '0' ; c = GC ; } * n = * n * ve ; } int solve ( int m , int p ) { if ( m > r ) return 0 ; else { int t1 = solve ( m + 1 , p ) ; int t2 = solve ( m + 1 , p + 1 ) ; int result = max ( t1 , t2 ) + arr1 [ m ] [ p ] ; return result ; } }", "label": 2, "id": 8586}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , len = 0 , count = 1 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld \" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { len += count ; if ( a [ i + 1 ] > a [ i ] ) { count ++ ; } else { count = 1 ; } } len += count ; printf ( \"%lld\n\" , len ) ; } return 0 ; }", "label": 0, "id": 18824}
{"input": "int main ( ) { long long int T , A , a , B , b , x , y , i = 1 ; scanf ( \"%lld\" , & T ) ; while ( i <= T ) { scanf ( \"%lld %lld\" , & A , & B ) ; a = A ; b = B ; while ( b != 0 ) { x = b ; b = a % b ; a = x ; } y = ( A * B ) / a ; printf ( \"%lld %lld\n\" , a , y ) ; i ++ ; } }", "label": 0, "id": 20393}
{"input": "int main ( ) { int t , n , i , j , a [ 50 ] [ 50 ] , s1 , s2 ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < n - 1 ; j ++ ) { s1 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; s2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( s1 > s2 ) a [ i ] [ j ] = s1 ; else a [ i ] [ j ] = s2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 3, "id": 21092}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { int h , t ; float c ; scanf ( \"%d %f %d\" , & h , & c , & t ) ; if ( h > 50 && c < 0.7 && t > 5600 ) printf ( \"10\n\" ) ; else if ( h > 50 && c < 0.7 ) printf ( \"9\n\" ) ; else if ( c < 0.7 && t > 5600 ) printf ( \"8\n\" ) ; else if ( h > 50 && t > 5600 ) printf ( \"7\n\" ) ; else if ( h < 50 && c > 0.7 && t < 5600 ) printf ( \"5\n\" ) ; else printf ( \"6\n\" ) ; } }", "label": 1, "id": 20978}
{"input": "void fun ( long * , long * , long * ) ; int main ( ) { int t , i = 0 ; int n , a [ 50000 ] , j = 0 , k = 1 , cost = 0 , g = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; for ( j = 0 , k = 1 ; j < n && k < n ; ) { if ( a [ j ] > a [ k ] ) { fun ( & a , & n , & j ) ; g = a [ k ] ; } else { fun ( & a , & n , & k ) ; g = a [ j ] ; } cost = cost + g ; } printf ( \"%d\" , cost ) ; printf ( \"\n\" ) ; cost = 0 ; a [ 0 ] = 0 ; } return 0 ; } void fun ( long * p , long * q , long * r ) { long i = 0 ; for ( i = * r ; i < * q - 1 ; i ++ ) * ( p + i ) = * ( p + i + 1 ) ; * q = * q - 1 ; }", "label": 3, "id": 18265}
{"input": "int main ( void ) { long long int A , B , max , min , r , T , i ; scanf ( \"%lld\n\" , & T ) ; while ( T -- > 0 ) { scanf ( \"%lld%lld\n\" , & A , & B ) ; max = ( A > B ) ? A : B ; min = ( A <= B ) ? A : B ; while ( max > min ) { r = max % min ; if ( r != 0 ) { max = min ; min = r ; } else break ; } printf ( \"%lld %lld\n\" , min , A * B / min ) ; } return 0 ; }", "label": 0, "id": 12878}
{"input": "int main ( void ) { int t , n ; scanf ( \"%d\n\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d\n\" , & n ) ; int a [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( \"%d \" , & a [ j ] ) ; } int max1 = a [ 0 ] ; for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] > max1 ) { max1 = a [ k ] ; } } int max2 = a [ 0 ] ; for ( int l = 1 ; l < n ; l ++ ) { if ( a [ l ] > max2 && a [ l ] < max1 ) { max2 = a [ l ] ; } } printf ( \"%d\n\" , max2 ) ; } return 0 ; }", "label": 1, "id": 16813}
{"input": "int main ( ) { int t , n , i , j , k , l , x , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; x = 0 ; k = 0 ; l = 0 ; max = 0 ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) ; { l = a [ i ] [ j ] ; if ( ( i - 1 ) >= 0 ) x = l + a [ i - 1 ] [ j ] ; if ( ( i - 1 ) >= 0 && ( j - 1 ) >= 0 ) k = l + a [ i - 1 ] [ j - 1 ] ; if ( x > k ) a [ i ] [ j ] = x ; else a [ i ] [ j ] = k ; } } i = n - 1 ; max = a [ i ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } printf ( \"\n%d\" , max ) ; } return 0 ; }", "label": 1, "id": 21657}
{"input": "int main ( ) { int a [ 100 ] , row = 1 , ele , numrow , test , temp1 , temp2 , i , max ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & numrow ) ; row = 0 ; for ( i = 0 ; i <= numrow ; i ++ ) a [ i ] = 0 ; max = 0 ; while ( row ++ < numrow ) { ele = 0 ; temp1 = 0 ; while ( ele ++ < row ) { scanf ( \"%d\" , & temp2 ) ; temp2 = temp2 + ( ( a [ ele ] > a [ ele - 1 ] ) ? a [ ele ] : a [ ele - 1 ] ) ; a [ ele - 1 ] = temp1 ; temp1 = temp2 ; max = ( max < temp1 ) ? temp1 : max ; } a [ ele - 1 ] += temp1 ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 15445}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , * ptr ; scanf ( \"%d\" , & n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & ptr [ i ] ) ; } int j ; int count = n ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n - 1 ; j ++ ) { if ( ptr [ j ] <= ptr [ j + 1 ] ) { count ++ ; } else break ; } } printf ( \"%d\n\" , count ) ; } }", "label": 0, "id": 24896}
{"input": "int a [ 99 ] [ 99 ] ; int main ( ) { int b , i , n , j , x = 0 , c ; int s ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & b ) ; i = 0 ; while ( i < b ) { j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; ++ j ; } ++ i ; } -- i ; -- j ; s = 0 ; c = j ; while ( j >= 0 ) { if ( s < a [ i ] [ j ] ) { s = a [ i ] [ j ] ; x = j ; } -- j ; } -- i ; while ( i >= 0 ) { if ( x > 0 ) { if ( a [ i ] [ x ] < a [ i ] [ x - 1 ] ) { s = s + a [ i ] [ x - 1 ] ; -- x ; } else s = s + a [ i ] [ x ] ; } else if ( x == c ) s = s + a [ i ] [ x - 1 ] ; else s = s + a [ i ] [ x ] ; -- i ; } printf ( \"%d\" , s ) ; } return 0 ; }", "label": 1, "id": 16700}
{"input": "unsigned int funcRec ( unsigned int arr [ 100 ] [ 100 ] , unsigned int rowNum , unsigned int colNum , unsigned int maxRow ) { if ( rowNum == maxRow ) return arr [ rowNum ] [ colNum ] ; else { unsigned int r1 = funcRec ( arr , rowNum + 1 , colNum , maxRow ) ; unsigned int r2 = funcRec ( arr , rowNum + 1 , colNum + 1 , maxRow ) ; if ( r1 > r2 ) return r1 + arr [ rowNum ] [ colNum ] ; else return r2 + arr [ rowNum ] [ colNum ] ; } } main ( ) { unsigned int arr [ 150 ] [ 100 ] ; int arrTest [ 200 ] ; int arrTestCount = 0 ; int testCases ; scanf ( \"%d\" , & testCases ) ; int temp = 0 ; int arrSize ; int i ; int j ; while ( temp < testCases ) { i = 0 ; j = 0 ; scanf ( \"%d\" , & arrSize ) ; for ( ; i < arrSize ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } printf ( \"%d\n\" , funcRec ( arr , 0 , 0 , arrSize - 1 ) ) ; temp ++ ; } }", "label": 2, "id": 21072}
{"input": "int main ( ) { int i , t , smallest , cost = 0 ; long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } smallest = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < smallest ) { smallest = a [ i ] ; } } cost = ( n - 1 ) * smallest ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 19810}
{"input": "int GCD ( long a , long b ) { long temp ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { long a , b , x , y , lcm , gcd , n , i ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; x = a , y = b ; gcd = GCD ( a , b ) ; lcm = ( x * y ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 2901}
{"input": "int main ( void ) { int t , a , b , prod , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( ( t >= 1 ) && ( t <= 1000 ) ) { scanf ( \"%d %d\" , & a , & b ) ; prod = a * b ; if ( ( a >= 1 ) && ( a <= 1000000 ) ) { if ( ( b >= 1 ) && ( b <= 1000000 ) ) { while ( a != b ) { if ( a > b ) a = a - b ; gcd = b ; if ( b > a ) b = b - a ; gcd = b ; lcm = prod / gcd ; } } } printf ( \"%d %d\n\" , gcd , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 11990}
{"input": "int p [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; return y ; } int s ( int i , int j , int n ) { int t1 , t2 , t ; if ( i > n ) return 0 ; t1 = s ( i + 1 , j , n ) ; t2 = s ( i + 1 , j + 1 , n ) ; t = max ( t1 , t2 ) + p [ i ] [ j ] ; return t ; } int main ( ) { int l , z , n , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & p [ i ] [ j ] ) ; z = s ( 0 , 0 , n ) ; printf ( \"%d\" , z ) ; } return 0 ; }", "label": 2, "id": 19317}
{"input": "int main ( ) { long long int t , a , b , gcd , m , n ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; m = a ; n = b ; while ( ( a != 0 ) || ( b != 0 ) ) { a = a % b ; if ( a == 0 ) { gcd = b ; break ; } b = b % a ; if ( b == 0 ) { gcd = a ; break ; } } printf ( \"%ld %ld\n\" , gcd , m * n / gcd ) ; } return 0 ; }", "label": 0, "id": 24788}
{"input": "int main ( ) { int t , n , i , j , num ; int dp [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & dp [ i ] [ j ] ) ; for ( i = 2 ; i <= n ; i ++ ) { dp [ i ] [ 1 ] += dp [ i - 1 ] [ 1 ] ; for ( j = 2 ; j < i ; j ++ ) if ( dp [ i - 1 ] [ j - 1 ] > dp [ i - 1 ] [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ; dp [ i ] [ i ] += dp [ i - 1 ] [ i - 1 ] ; } num = 0 ; for ( i = 1 ; i <= n ; i ++ ) if ( dp [ n ] [ i ] > num ) num = dp [ n ] [ i ] ; printf ( \"%d\n\" , num ) ; } return 0 ; }", "label": 3, "id": 4018}
{"input": "int main ( ) { int arr [ size ] , i , min ; for ( i = 0 ; i < size ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; min = arr [ 0 ] ; for ( i = 1 ; i < size ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } min = min * ( size - 1 ) ; printf ( \"%d\" , min ) ; return 0 ; }", "label": 1, "id": 17531}
{"input": "int main ( ) { int i , j , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int mat [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } } if ( n == 1 ) { printf ( \"%d\n\" , mat [ 0 ] [ 0 ] ) ; } else { for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { mat [ i ] [ j ] += max ( mat [ i + 1 ] [ j ] , mat [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , mat [ 0 ] [ 0 ] ) ; } } return 0 ; }", "label": 0, "id": 870}
{"input": "int main ( ) { int t , i = 1 , num , den , rem , lcm , gcd ; int a [ 1001 ] ; int b [ 1001 ] ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & a [ i ] , & b [ i ] ) ; if ( a [ i ] > b [ i ] ) { num = a [ i ] ; den = b [ i ] ; } else { num = b [ i ] ; den = a [ i ] ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a [ i ] * b [ i ] / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 5244}
{"input": "void build_tringle ( ) ; int max ( int , int ) ; int a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] ; int main ( ) { int i , j , n , rows = 0 , sum = 0 ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } build_tringle ( ) ; for ( i = 0 ; i < rows ; i ++ ) { if ( b [ rows - 1 ] [ i ] >= sum ) sum = b [ rows - 1 ] [ i ] ; } printf ( \"d\n\" , sum ) ; n -- ; } return 0 ; } void build_tringle ( ) { int sum , max_sum ; sum = max_sum = 0 ; int i , j ; b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < 100 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == i ) { b [ i ] [ j ] = b [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } b [ i ] [ j ] = max ( b [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] , b [ i - 1 ] [ j ] + a [ i ] [ j ] ) ; } } } int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; }", "label": 1, "id": 22326}
{"input": "int main ( ) { int T , t , a [ 1000 ] , n , i , sum [ 10 ] ; scanf ( \"%d\" , & t ) ; T = t ; while ( t > 0 ) { sum [ t ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) sum [ t ] = sum [ t ] + a [ i + 1 ] ; else sum [ t ] = sum [ t ] + a [ i ] ; } t -- ; } for ( t = T ; t > 0 ; t -- ) printf ( \"%d\n\" , sum [ t ] ) ; return 0 ; }", "label": 3, "id": 4306}
{"input": "int main ( ) { int t , a = 0 , b = 0 , c = 0 , x = 0 , g = 0 ; scanf ( \"%d\" , & t ) ; int d = 3 * t ; int ar [ d ] , res [ t ] ; while ( a < t ) { b = 0 ; int f = 0 ; scanf ( \"%d\" , & ar [ a ] ) ; int ar1 [ ar [ a ] ] ; while ( b < ar [ a ] ) { scanf ( \"%d\" , & ar1 [ b ] ) ; ++ b ; } int e = ar [ 0 ] ; while ( f < ar [ a ] ) { if ( ar1 [ f ] < e ) { e = ar1 [ f ] ; f = x ; } ++ f ; } if ( ar1 [ x - 1 ] < ar1 [ x + 1 ] ) { res [ a ] = ar1 [ x - 1 ] ; } else if ( ar1 [ x + 1 ] < ar1 [ x - 1 ] ) { res [ a ] = ar1 [ x + 1 ] ; } a = a + 1 ; } while ( g < t ) { printf ( \"%d\n\" , res [ g ] ) ; ++ g ; } return 0 ; }", "label": 1, "id": 14767}
{"input": "int main ( ) { int n , m , i , j ; int a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = m - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 22041}
{"input": "int gcd ( int a , int b ) { int c ; while ( a != 0 ) { c = a ; a = b % a ; b = c ; } return b ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; int k = gcd ( a , b ) ; printf ( \"\n%d\\t%d\" , k , ( a * b / k ) ) ; } }", "label": 1, "id": 6429}
{"input": "main ( ) { int j , k , d [ 100 ] [ 100 ] , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & d [ j ] [ k ] ) ; } for ( j = n - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) d [ j ] [ k ] += d [ j + 1 ] [ k ] > d [ j + 1 ] [ k + 1 ] ? d [ j + 1 ] [ k ] : d [ j + 1 ] [ k + 1 ] ; } printf ( \"%d\n\" , d [ 0 ] [ 0 ] ) ; } return ; }", "label": 0, "id": 25218}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; long int m = 0 ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; if ( m < a [ j ] ) { m = a [ j ] ; } } printf ( \"%ld\n\" , m * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 7354}
{"input": "int cal ( int a [ ] [ 101 ] , int r , int c ) ; int mem [ 101 ] [ 101 ] , n ; int main ( ) { int num [ 101 ] [ 101 ] ; int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num [ i ] [ j ] ) ; mem [ i ] [ j ] = - 1 ; } printf ( \"%d\n\" , cal ( num , 0 , 0 ) ) ; } return 0 ; } int cal ( int a [ ] [ 101 ] , int r , int c ) { int left , right ; if ( mem [ r ] [ c ] != - 1 ) return mem [ r ] [ c ] ; if ( r == n - 1 ) return a [ r ] [ c ] ; left = cal ( a , r + 1 , c ) ; right = cal ( a , r + 1 , c + 1 ) ; if ( left > right ) { return mem [ r ] [ c ] = a [ r ] [ c ] + left ; } else return mem [ r ] [ c ] = a [ r ] [ c ] + right ; }", "label": 0, "id": 25948}
{"input": "int getmin ( int a [ ] , int size ) { int min = a [ 0 ] , i ; for ( i = 0 ; i < size ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } return min ; } int main ( ) { int arr [ 100 ] , i , t , cost , min ; long long int a_size ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & a_size ) ; for ( i = 0 ; i < a_size ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } min = getmin ( arr , a_size ) ; cost = min * ( a_size - 1 ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 3, "id": 4233}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int min ( int , int ) ; int arr [ MAX ] ; int main ( ) { long int a , t , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a == b ) { return a ; } else if ( a > b ) { return ( gcd ( ( a - b ) , b ) ) ; } else { return ( gcd ( a , ( b - a ) ) ) ; } }", "label": 1, "id": 12060}
{"input": "int main ( ) { int T ; int A [ 100000 ] ; int i , k , sum [ 10 ] = { 0 } , j , l ; long e ; do { scanf ( \"%d\" , & T ) ; } while ( T < 1 || T > 10 ) ; for ( k = 0 ; k < T ; k ++ ) { do { scanf ( \"%d\" , & e ) ; } while ( e < 2 || e > 50000 ) ; for ( i = 0 ; i < e ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } for ( j = 0 ; j < i ; j ++ ) { if ( i == 1 ) break ; if ( A [ j ] > A [ j + 1 ] ) { A [ j ] = A [ j ] - A [ j + 1 ] ; sum [ k ] = sum [ k ] + A [ j + 1 ] ; for ( l = 0 ; l < i - 1 ; l ++ ) { A [ l ] = A [ l + 1 ] ; j = - 1 ; i -- ; } } else { A [ j + 1 ] = A [ j + 1 ] - A [ j ] ; sum [ k ] = sum [ k ] + A [ j ] ; for ( l = 1 ; l < i - 1 ; l ++ ) { A [ l ] = A [ l + 1 ] ; j = - 1 ; i -- ; } } } } for ( k = 0 ; k < T ; k ++ ) { printf ( \"%d\n\" , sum [ k ] ) ; } return 0 ; }", "label": 1, "id": 13265}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i , s , hcf , lcm ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) s = a ; else s = b ; for ( i = 1 ; i <= s ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { hcf = i ; } } printf ( \"%d\n\" , hcf ) ; lcm = ( a * b ) / hcf ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 2, "id": 17006}
{"input": "int main ( ) { int t , i , min = 0 , n ; unsigned long long int ans ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; unsigned long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lu\" , & a [ i ] ) ; if ( i == 0 ) min = a [ i ] ; else { if ( a [ i ] < min ) { min = a [ i ] ; } } } ans = min * ( n - 1 ) ; printf ( \"%llu\n\" , ans ) ; t -- ; min = 0 ; } return 0 ; }", "label": 0, "id": 17301}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 3863}
{"input": "int main ( ) { int n = 0 , i = 0 , j = 0 , t ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= n ; j ++ ) { if ( arr [ i + 1 ] [ j ] >= arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] = arr [ i + 1 ] [ j ] + arr [ i ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; t = t - 1 ; } return 0 ; }", "label": 0, "id": 9217}
{"input": "int main ( ) { int t , a , b , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; int m = a , n = b ; while ( n != 0 ) { i = n ; n = m % n ; m = i ; } printf ( \"%d %d\n\" , m , a * b / m ) ; } return 0 ; }", "label": 1, "id": 26386}
{"input": "int main ( ) { int size , num , i , j , max ; int * data , * inp ; scanf ( \"%d\" , & size ) ; for ( size ; size > 0 ; size -- ) { scanf ( \"%d\" , & num ) ; data = ( int * ) malloc ( sizeof ( int ) * num ) ; inp = ( int * ) malloc ( sizeof ( int ) * num ) ; for ( i = 0 ; i < num ; i ++ ) data [ i ] = 0 ; for ( i = 1 ; i <= num ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) scanf ( \"%d\" , & inp [ j ] ) ; if ( i > 1 ) { data [ i - 1 ] = data [ i - 2 ] + inp [ i - 1 ] ; } for ( j = i - 2 ; j >= 1 ; j -- ) { data [ j ] = data [ j ] > data [ j - 1 ] ? data [ j ] + inp [ j ] : data [ j - 1 ] + inp [ j ] ; } data [ 0 ] += inp [ 0 ] ; } max = data [ 0 ] ; for ( i = 1 ; i < num ; i ++ ) if ( max < data [ i ] ) max = data [ i ] ; printf ( \"%d\" , max ) ; free ( inp ) ; free ( data ) ; } return 0 ; }", "label": 1, "id": 11485}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , b , j ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] == a [ i ] - 1 ) { b = a [ j ] ; } } } printf ( \"%d\n\" , b ) ; } return 0 ; }", "label": 2, "id": 16354}
{"input": "int main ( ) { int i , j , max , val , idx , N , NN , first , sum , tempidx ; scanf ( \"%d\" , & N ) ; while ( N -- ) { scanf ( \"%d\" , & NN ) ; sum = 0 ; scanf ( \"%d\" , & first ) ; sum += first ; idx = 0 ; for ( i = 1 ; i < NN ; i ++ ) { max = 0 ; for ( j = 0 ; j <= ( idx + 1 ) ; j ++ ) { scanf ( \"%d\" , & val ) ; if ( val > max && ( ( j == idx ) || ( j == idx + 1 ) ) ) { max = val ; tempidx = j ; } } idx = tempidx ; sum += max ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 773}
{"input": "void out ( long int a , long int b , long int x ) { long int i ; long long int y , g = 1 ; for ( i = 1 ; i <= x ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) g = i ; } printf ( \"%lld \" , g ) ; g = 1 ; for ( i = 1 ; i <= x ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) g = g * i ; } y = ( g * ( a / g ) * ( b / g ) ) ; printf ( \"%lld\" , y ) ; } int main ( ) { long int n , x ; scanf ( \"%ld \" , & n ) ; long int i , a , b ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a >= b ) x = b ; else x = a ; out ( a , b , x ) ; } return 0 ; }", "label": 2, "id": 2392}
{"input": "long int a [ 10000 ] ; int main ( ) { long int n , t , i , s , j , k , p ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { k = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) { if ( i == j || j == i + 1 ) k ++ ; } } } printf ( \"%ld\n\" , k ) ; } }", "label": 3, "id": 25513}
{"input": "int main ( ) { int a , b , i , hcf , lcm , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; } } for ( i = a ; ; i ++ ) { if ( i % a == 0 && i % b == 0 ) { lcm = i ; break ; } } printf ( \"%d %d\n\" , hcf , lcm ) ; } }", "label": 2, "id": 26179}
{"input": "int main ( ) { int t , n1 , n2 , i , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } printf ( \"%d\" , gcd ) ; printf ( \"\n\" ) ; lcm = ( n1 * n2 ) / gcd ; printf ( \"%d\" , lcm ) ; } return 0 ; }", "label": 1, "id": 8785}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int m , n , i , h ; scanf ( \"%d%d\" , & m , & n ) ; for ( i = 1 ; i <= m * n ; i ++ ) { if ( i % m == 0 && i % n == 0 ) break ; } for ( h = m < n ? m : n ; h >= 1 ; h -- ) { if ( m % h == 0 && n % h == 0 ) break ; } printf ( \"\n %d %d\" , h , i ) ; } return 0 ; }", "label": 2, "id": 26970}
{"input": "int readNum ( ) ; int main ( ) { int T ; T = readNum ( ) ; while ( T -- > 0 ) { int N = readNum ( ) ; int i = N ; int min ; min = readNum ( ) ; while ( -- i > 0 ) { int new = readNum ( ) ; if ( new < min ) min = new ; } long int answer = min * ( N - 1 ) ; printf ( \"%ld\n\" , answer ) ; } return 0 ; } int readNum ( ) { char c ; int num = 0 ; c = getchar ( ) ; while ( c != ' ' && c != '\n' ) { num = num * 10 + ( c - '0' ) ; c = getchar ( ) ; } return num ; }", "label": 2, "id": 25484}
{"input": "int n ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int sum ( int a [ ] [ 1000 ] ) { int i = 0 , j = 0 ; for ( i = ( n - 1 ) ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } int main ( ) { int t = 0 , i = 0 , j = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 1000 ] [ 1000 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum ( a ) ; } }", "label": 1, "id": 7820}
{"input": "int maxVal = 0 ; int size = 0 ; void recurseThis ( int triangle [ ] [ size ] , int sum , int xPos , int yPos ) { if ( ( xPos + 1 ) == size ) { int current = sum + triangle [ xPos ] [ yPos ] ; if ( current > maxVal ) { maxVal = current ; } } else { recurseThis ( triangle , ( sum + triangle [ xPos ] [ yPos ] ) , xPos + 1 , yPos ) ; recurseThis ( triangle , ( sum + triangle [ xPos ] [ yPos ] ) , xPos + 1 , yPos + 1 ) ; } } int main ( ) { int total = 0 ; scanf ( \"%d\" , & total ) ; int x = 0 ; for ( x = 0 ; x < total ; x ++ ) { scanf ( \"%d\" , & size ) ; maxVal = 0 ; int triangle [ size ] [ size ] ; int i = 0 ; for ( i = 0 ; i < size ; i ++ ) { int j = 0 ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; } } recurseThis ( triangle , 0 , 0 , 0 ) ; printf ( \"%d\n\" , maxVal ) ; } return 0 ; }", "label": 2, "id": 7497}
{"input": "void insertionSort ( int arr [ ] , int n ) { int i , key , j ; for ( i = 1 ; i < n ; i ++ ) { key = arr [ i ] ; j = i - 1 ; while ( j >= 0 && arr [ j ] > key ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } arr [ j + 1 ] = key ; } } int main ( ) { int ch [ 50000 ] , k , n ; scanf ( \"%d\" , & k ) ; int i , cost = 0 , min ; while ( k > 0 ) { scanf ( \"%d\" , & n ) ; printf ( \"%d\n\" , n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & ch [ i ] ) ; } insertionSort ( ch , n ) ; min = ch [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { cost = cost + min ; } printf ( \"%d\n\" , cost ) ; k -- ; } return 0 ; }", "label": 2, "id": 24504}
{"input": "int main ( ) { int T ; long int n , p , min , i ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%ld\" , & n ) ; scanf ( \"%ld\" , & p ) ; min = p ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%ld\" , & p ) ; if ( p < min ) min = p ; } printf ( \"%ld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 21361}
{"input": "int main ( ) { int n , t , i , j ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24236}
{"input": "int fmin ( int a [ ] , int n ) { int i , min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } return min ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , min = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & ( a [ i ] ) ) ; min = fmin ( a , n ) ; long long int g ; g = min * ( n - 1 ) ; printf ( \"%lld\n\" , g ) ; } return 0 ; }", "label": 0, "id": 20307}
{"input": "int n , m ; int max [ 100 ] [ 100 ] ; int findmax ( int ( * a ) [ 100 ] , int , int ) ; int main ( ) { int test_cases ; int output [ 100 ] = { 0 } ; int a [ 100 ] [ 100 ] ; int i , j , k = 0 ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = 0 ; scanf ( \"%d\" , & a [ i ] [ j ] ) ; max [ i ] [ j ] = - 1 ; } output [ k ] = findmax ( a , 0 , 0 ) ; k ++ ; } while ( ++ test_cases < k ) { printf ( \"%d\n\" , output [ test_cases ] ) ; } return 0 ; } int findmax ( int ( * a ) [ 100 ] , int x , int y ) { int left = 0 , right = 0 ; int i = x , j = y ; if ( i == n - 1 ) return max [ i ] [ j ] = a [ i ] [ j ] ; else { if ( max [ i ] [ j ] != - 1 ) return max [ i ] [ j ] ; if ( max [ i + 1 ] [ j ] < 0 ) { findmax ( a , i + 1 , j ) ; } if ( max [ i + 1 ] [ j + 1 ] < 0 ) { findmax ( a , i + 1 , j + 1 ) ; } left = a [ i ] [ j ] + max [ i + 1 ] [ j ] ; right = a [ i ] [ j ] + max [ i + 1 ] [ j + 1 ] ; if ( left > right ) { return max [ i ] [ j ] = left ; } else { return max [ i ] [ j ] = right ; } } }", "label": 1, "id": 4973}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int a , b , hcf , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; hcf = gcd ( a , b ) ; printf ( \"%d %d\n\" , hcf , a * b / hcf ) ; } return 0 ; }", "label": 1, "id": 4141}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , i , min = 0 , max = 0 , m = 1 , j , n , k = 1 ; scanf ( \"%lld %lld\" , & a , & b ) ; if ( a < b ) { min = a ; max = b ; } else { min = b ; max = a ; } for ( i = 2 ; i <= min ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { k = i ; break ; } } n = a * b ; printf ( \"%lld %lld\n\" , k , n ) ; } return 0 ; }", "label": 2, "id": 16299}
{"input": "void freeTriangle ( int * * triangle , int nbOfLines ) { for ( int i = 0 ; i < nbOfLines ; i ++ ) { free ( triangle [ i ] ) ; } free ( triangle ) ; } void printTriangle ( int * * triangle , int nbOfLines ) { for ( int i = 0 ; i < nbOfLines ; i ++ ) { for ( int j = 0 ; j < i + 1 ; j ++ ) { printf ( \"%d \" , triangle [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } } int * * createTriangle ( int nbOfLines ) { int * * triangle = NULL ; triangle = malloc ( sizeof ( * triangle ) * nbOfLines ) ; for ( int j = 0 ; j < nbOfLines ; j ++ ) { triangle [ j ] = malloc ( sizeof ( * triangle [ j ] ) * ( j + 1 ) ) ; for ( int k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & triangle [ j ] [ k ] ) ; } } return triangle ; } int calcMaxSum ( int * * triangle , int nbOfLines ) { int max = 0 ; for ( int i = nbOfLines - 1 ; i > 0 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) { max = triangle [ i ] [ j ] > triangle [ i ] [ j + 1 ] ? triangle [ i ] [ j ] : triangle [ i ] [ j + 1 ] ; triangle [ i - 1 ] [ j ] += max ; } } return triangle [ 0 ] [ 0 ] ; } int main ( ) { int n = 0 , nbOfLines = 0 ; int * * triangle = NULL ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & nbOfLines ) ; triangle = createTriangle ( nbOfLines ) ; printf ( \"%d\n\" , calcMaxSum ( triangle , nbOfLines ) ) ; freeTriangle ( triangle , nbOfLines ) ; } return 0 ; }", "label": 0, "id": 23078}
{"input": "int main ( ) { int t , i , j , n , a [ 100 ] [ 100 ] , maxm = - 1 ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += ( ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) ? a [ i - 1 ] [ j ] : a [ i - 1 ] [ j - 1 ] ) ; } } for ( j = 0 ; j < n ; j ++ ) if ( maxm < a [ n - 1 ] [ j ] ) maxm = a [ n - 1 ] [ j ] ; printf ( \"%d\n\" , maxm ) ; } return 0 ; }", "label": 1, "id": 12591}
{"input": "int main ( ) { int no_of_testcase , i , j ; scanf ( \"%d\" , & no_of_testcase ) ; while ( no_of_testcase -- ) { int no_of_rows ; scanf ( \"%d\" , & no_of_rows ) ; int a [ no_of_rows ] [ no_of_rows ] ; for ( i = 0 ; i < no_of_rows ; i ++ ) { for ( j = 0 ; j <= no_of_rows ; j ++ ) { if ( j <= i ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; else a [ i ] [ j ] = 0 ; } } for ( i = no_of_rows - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 511}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; int x ; int sum = 0 , min = INT_MAX ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & x ) ; if ( x < min ) min = x ; sum = sum + min ; } printf ( \"%d\n\" , min ) ; } return 0 ; }", "label": 1, "id": 10798}
{"input": "int main ( ) { long long T , A , B , tA , tB , i , temp , gcd , lcm ; scanf ( \"%lld\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%lld %lld\" , & A , & B ) ; tA = A ; tB = B ; while ( tB != tA ) { if ( tA > tB ) tA = tA - tB ; else tB = tB - tA ; } gcd = tA ; lcm = ( A * B ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 9318}
{"input": "int main ( ) { int n , ans , i , j , testcase , arr [ 105 ] [ 105 ] , rows ; scanf ( \"%d\" , & testcase ) ; while ( testcase -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 1 ; i <= rows ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } if ( rows == 1 ) { printf ( \"%d\n\" , arr [ 1 ] [ 1 ] ) ; continue ; } ans = 0 ; for ( i = 2 ; i <= rows ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( j > 1 && arr [ i - 1 ] [ j - 1 ] > arr [ i - 1 ] [ j ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - 1 ] [ j - 1 ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - 1 ] [ j ] ; if ( i == rows && ans < arr [ i ] [ j ] ) ans = arr [ i ] [ j ] ; } } printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 1564}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int n , i ; scanf ( \"%d\" , & n ) ; long A [ n ] , min = A [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; if ( A [ i ] < min ) min = A [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 6043}
{"input": "int main ( ) { long int t , n , i , j ; long long int r , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = 0 ; scanf ( \"%ld\" , & n ) ; long long int a [ n ] ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; c ++ ; } for ( i = 1 ; i < n ; i ++ ) { r = a [ i ] ; for ( j = i + 1 ; j <= n ; j ++ ) { if ( r < a [ j ] ) { c ++ ; r = a [ j ] ; } } } printf ( \"%ld\n\" , c ) ; } return 0 ; }", "label": 2, "id": 7025}
{"input": "int main ( ) { int t , a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } }", "label": 1, "id": 1554}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , j , k , count ; int h [ t ] ; for ( count = 0 ; count < t ; count ++ ) { int l ; scanf ( \"%d\" , & l ) ; int a [ l ] [ l ] ; for ( i = 0 ; i < l ; i ++ ) for ( j = 0 ; j < l ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 1 ; i <= l ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { int m ; scanf ( \"%d\" , & m ) ; a [ i ] [ j ] = m ; } } int ms [ l ] ; int curr_r = 0 ; int curr_c = 0 ; ms [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < l - 1 ; i ++ ) { if ( a [ curr_r + 1 ] [ curr_c ] > a [ curr_r + 1 ] [ curr_c + 1 ] ) { ms [ i + 1 ] = a [ curr_r + 1 ] [ curr_c ] ; curr_r = curr_r + 1 ; } else if ( a [ curr_r + 1 ] [ curr_c ] < a [ curr_r + 1 ] [ curr_c + 1 ] ) { ms [ i + 1 ] = a [ curr_r + 1 ] [ curr_c + 1 ] ; curr_r = curr_r + 1 ; curr_c = curr_c + 1 ; } } int sum = 0 ; for ( k = 0 ; k < l ; k ++ ) sum = sum + ms [ k ] ; h [ count ] = sum ; } for ( j = 0 ; j < t ; j ++ ) printf ( \"%d\n\" , h [ j ] ) ; }", "label": 1, "id": 12493}
{"input": "int mat [ 100 ] [ 100 ] ; int main ( ) { int t , i , j , nr , max = 0 ; for ( scanf ( \"%d\" , & t ) ; t ; t -- ) { for ( scanf ( \"%d\" , & nr ) , max = 0 , i = 0 ; i < nr ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; if ( i ) if ( 0 < j < i ) mat [ i ] [ j ] += mat [ i - 1 ] [ j - 1 ] > mat [ i - 1 ] [ j ] ? mat [ i - 1 ] [ j - 1 ] : mat [ i - 1 ] [ j ] ; else if ( j == 0 ) mat [ i ] [ j ] += mat [ i - 1 ] [ j ] ; else if ( j == i ) mat [ i ] [ j ] += mat [ i - 1 ] [ j - 1 ] ; if ( i == nr - 1 ) max = max > mat [ i ] [ j ] ? max : mat [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; } }", "label": 0, "id": 11010}
{"input": "int sum ( int a [ 100 ] [ 100 ] , int n , int i , int j ) { if ( i == n - 1 ) return a [ i ] [ j ] ; else return ( a [ i ] [ j ] + max ( sum ( a , n , i + 1 , j ) , sum ( a , n , i + 1 , j + 1 ) ) ) ; } int main ( ) { int a [ 100 ] [ 100 ] , n , t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\n\" , sum ( a , n , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 18117}
{"input": "int number_of_subarrays ( int A [ ] , int N ) ; int main ( ) { long long N , T ; long long * A , * result ; int x , i , j ; scanf ( \"%lld\" , & T ) ; if ( ! ( T >= 1 && T <= 5 ) ) return ( 0 ) ; x = T ; result = ( long long * ) malloc ( sizeof ( ( long long * ) T ) ) ; j = 0 ; while ( T > 0 && j < x ) { scanf ( \"%lld\" , & N ) ; if ( ! ( N >= 1 && N <= 100000 ) ) return ( 0 ) ; A = ( long long * ) malloc ( sizeof ( ( long long * ) N ) ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; if ( ! ( A [ i ] >= 1 && A [ i ] <= 1000000000 ) ) return ( 0 ) ; } result [ j ] = number_of_subarrays ( A , N ) ; j ++ ; T -- ; free ( A ) ; } printf ( \"\n\" ) ; for ( i = 0 ; i < x ; i ++ ) printf ( \"%d\n\" , result [ i ] ) ; free ( result ) ; return 0 ; } int number_of_subarrays ( int arr [ ] , int N ) { int i , j ; int subarrays = 0 ; int temp_product = 1 ; for ( i = 0 ; i < N ; i ++ ) { for ( j = i + 1 ; j <= N ; j ++ ) { if ( arr [ i ] <= arr [ j ] ) ++ subarrays ; } } return subarrays ; }", "label": 3, "id": 16860}
{"input": "int a [ 100 ] [ 100 ] , size ; int main ( void ) { int case_count , i , j ; scanf ( \"%d\" , & case_count ) ; while ( case_count ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\n\" , calc_max ( 0 , 0 ) ) ; case_count -- ; } } int calc_max ( int i , int j ) { if ( i == size - 1 ) return a [ i ] [ j ] ; else return max ( calc_max ( i + 1 , j ) , calc_max ( i + 1 , j + 1 ) ) + a [ i ] [ j ] ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 2, "id": 15946}
{"input": "int main ( ) { int n , i ; long h , l ; scanf ( \"%d\" , & n ) ; long a [ 2 ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld %ld\" , & a [ 0 ] [ i ] , & a [ 1 ] [ i ] ) ; printf ( \"\n\" ) ; for ( i = 0 ; i < n ; i ++ ) { for ( h = a [ 0 ] [ i ] < a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; h >= 1 ; h -- ) { if ( a [ 0 ] [ i ] % h == 0 && a [ 1 ] [ i ] % h == 0 ) break ; } printf ( \"%ld \" , h ) ; for ( l = a [ 0 ] [ i ] > a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; l <= a [ 0 ] [ i ] * a [ 1 ] [ i ] ; l += ( a [ 0 ] [ i ] > a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ) ) if ( l % a [ 0 ] [ i ] == 0 && l % a [ 1 ] [ i ] == 0 ) break ; printf ( \"%ld\n\" , l ) ; } return 0 ; }", "label": 2, "id": 13870}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t , i ; int x , y , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; x = gcd ( a , b ) ; y = lcm ( a , b ) ; printf ( \"%d %d\" , x , y ) ; printf ( \"\n\" ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { static int tmp = 1 ; if ( tmp % a == 0 && tmp % b == 0 ) return tmp ; tmp ++ ; lcm ( a , b ) ; return tmp ; }", "label": 3, "id": 5170}
{"input": "int find_sum ( int * arr , int , int , int ) ; int main ( ) { int i , n , num , * arr , ret ; scanf ( \"%d\" , & num ) ; while ( num -- ) { scanf ( \"%d\" , & n ) ; arr = ( int * ) malloc ( ( n * ( n + 1 ) / 2 ) * sizeof ( int ) ) ; for ( i = 0 ; i < ( n * ( n + 1 ) ) / 2 ; i ++ ) scanf ( \"%d\" , arr + i ) ; ret = find_sum ( arr , 0 , 1 , n ) ; printf ( \"%d\n\" , ret ) ; free ( arr ) ; } return 0 ; } int maxim ( int a , int b ) { if ( a > b ) return a ; return b ; } int find_sum ( int * arr , int pos , int level , int max ) { int temp ; temp = arr [ ( level - 1 ) * level / 2 + pos ] ; if ( level == max ) return temp ; else return ( maxim ( temp + find_sum ( arr , pos , level + 1 , max ) , temp + find_sum ( arr , pos + 1 , level + 1 , max ) ) ) ; }", "label": 2, "id": 10086}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] , sum = 0 , x = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } x = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( x > a [ i ] ) { sum = sum + a [ i ] ; x = a [ i ] ; } else { sum = sum + x ; } } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 1093}
{"input": "int main ( void ) { int t , n , a , b , i , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & b ) ; if ( a > b ) { cost += b ; a = b ; } else cost += a ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 7308}
{"input": "main ( ) { int n1 , n2 , i , t , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d\\t%d\" , gcd , lcm ) ; } }", "label": 1, "id": 12282}
{"input": "int subinc ( ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; int i = 0 , j = 0 , count = n , flag = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } i = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { j = 0 ; flag = 0 ; while ( arr [ i ] <= arr [ i + j ] && flag == 0 ) { if ( j > 0 ) { count ++ ; flag = 1 ; } j ++ ; } } return count ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , count ; int arr [ t ] ; for ( i = 1 ; i <= t ; i ++ ) { count = subinc ( ) ; arr [ i - 1 ] = count ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , arr [ i ] ) ; } return 0 ; }", "label": 1, "id": 22962}
{"input": "int main ( ) { int t , i , n , j , p , q , max ; int a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ 0 ] ; } else if ( i == j ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; } else { p = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; q = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; if ( p > q ) { a [ i ] [ j ] = p ; } else { a [ i ] [ j ] = q ; } } } } max = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( max < a [ i ] [ j ] ) { max = a [ i ] [ j ] ; } } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 15166}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , s , lcm , gcd ; scanf ( \"%d%d\" , & a , & b ) ; s = a > b ? b : a ; for ( i = 1 ; i < s ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { lcm = i ; break ; } } gcd = ( a * b ) / lcm ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 6316}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a [ 100000 ] ; long long int i , n , count = 0 , n1 = 1 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) n1 ++ ; else { count += ( n1 * ( n1 - 1 ) ) / 2 ; n1 = 1 ; } } count += ( n1 * ( n1 - 1 ) ) / 2 ; printf ( \"%lld\n\" , count + n ) ; } return 0 ; }", "label": 0, "id": 3713}
{"input": "void swap ( long long int * num_1 , long long int * num_2 ) { long long int temp ; temp = * num_1 ; * num_1 = * num_2 ; * num_2 = temp ; } long long int hcf ( long long int num_1 , long long int num_2 ) { if ( num_1 < num_2 ) swap ( & num_1 , & num_2 ) ; if ( num_1 % num_2 == 0 ) return ( num_2 ) ; else return ( hcf ( num_2 , num_1 % num_2 ) ) ; } int main ( ) { int T ; long long int A , B ; long long int gcd ; long long int lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & A , & B ) ; gcd = hcf ( A , B ) ; lcm = ( ( A * B ) / gcd ) ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 12098}
{"input": "int main ( ) { int t , n , i ; long long int arr [ 50001 ] , p ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"d\" , & p ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < p ) { p = arr [ i ] ; } } printf ( \"d\n\" , ( n - 1 ) * p ) ; } return 0 ; }", "label": 3, "id": 19567}
{"input": "int main ( ) { int i ; scanf ( \"%d\" , & i ) ; while ( i -- ) { int small , i ; long long int N ; scanf ( \"%d\" , & N ) ; int arr [ N ] ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; small = arr [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) { if ( arr [ i ] < small ) small = arr [ i ] ; } printf ( \"%d\n\" , small * ( N - 1 ) ) ; } return 0 ; }", "label": 3, "id": 21520}
{"input": "int main ( ) { int i , j , a , sum [ 101 ] [ 101 ] , t , n , p , x = 0 , y = 0 ; while ( x < 101 && y < 101 ) { sum [ 0 ] [ y ] = 0 ; sum [ x ] [ 0 ] = 0 ; x ++ ; y ++ ; } scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & n ) ; p = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a ) ; if ( ( sum [ i - 1 ] [ j ] + a ) > ( sum [ i - 1 ] [ j - 1 ] + a ) ) { sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + a ; } else { sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + a ; } if ( i == n ) { if ( sum [ i ] [ j ] > p ) { p = sum [ i ] [ j ] ; } } } } printf ( \"%d\n\" , p ) ; t -- ; } return 0 ; }", "label": 1, "id": 20489}
{"input": "int main ( void ) { int n1 = 0 , n2 = 0 , t = 0 , min = 0 , i = 0 , gcd = 0 , lcm = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; min = n1 < n2 ? n1 : n2 ; for ( i = min ; i > 0 ; i -- ) { if ( n1 % i == 0 && n2 % i == 0 ) break ; } gcd = i ; lcm = n1 * n2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 4672}
{"input": "int main ( ) { int num1 , num2 , a , b , n , temp ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; a = num1 ; b = num2 ; while ( b > 0 ) { temp = b ; b = a % b ; a = temp ; } printf ( \"\n%d %d\" , a , ( num1 * num2 ) / a ) ; n -- ; } return 0 ; }", "label": 1, "id": 13906}
{"input": "main ( ) { int min , a [ 10 ] , c = 1 , t , no , i ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , no ) ; for ( i = 0 ; i < no ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < no ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } c = min * ( no - 1 ) ; printf ( \"\n%d\n\" , c ) ; } return 0 ; }", "label": 3, "id": 2605}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j <= i ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } else { a [ i ] [ j ] = 0 ; } } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; } else { a [ i - 1 ] [ j ] = a [ i ] [ j + 1 ] + a [ i - 1 ] [ j ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19414}
{"input": "int main ( ) { long t , i , j , n , a [ 102 ] [ 102 ] , maxm = - 1 ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j - 1 >= 0 ) { if ( j == i ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += ( ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) ? a [ i - 1 ] [ j ] : a [ i - 1 ] [ j - 1 ] ) ; } else a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } } for ( j = 0 ; j < n ; j ++ ) if ( maxm < a [ n - 1 ] [ j ] ) maxm = a [ n - 1 ] [ j ] ; printf ( \"%d\n\" , maxm ) ; } return 0 ; }", "label": 1, "id": 19748}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } long long int c = a [ 0 ] ; for ( j = 0 ; j + 1 < n ; j ++ ) { if ( a [ j ] < a [ j + 1 ] ) c = a [ j ] ; } printf ( \"%lld\n\" , ( n - 1 ) * c ) ; } return 0 ; }", "label": 1, "id": 15230}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int j = 1 ; int cost = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( j > ( n - 1 ) ) break ; if ( a [ i ] < a [ j ] ) { cost += a [ i ] ; } else { cost += a [ j ] ; } j ++ ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 10401}
{"input": "int main ( ) { long long int t , n , i , j , sum = 0 , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = a [ 0 ] [ 0 ] ; j = 0 ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) a [ i - 1 ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 12166}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int N , arr [ 50003 ] , small , i ; scanf ( \"%ld\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; } small = arr [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { if ( arr [ i ] < small ) { small = arr [ i ] ; } } printf ( \"%ld\n\" , ( ( N - 1 ) * small ) ) ; } return 0 ; }", "label": 0, "id": 10914}
{"input": "int main ( ) { long long int i = 0 , j = 0 , n = 0 , b [ 10 ] ; int t , min = 0 , r = 0 , k = 0 ; scanf ( \"%d\" , & t ) ; if ( t >= 1 && t <= 10 ) { for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; if ( n >= 2 ) { for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( min > a [ j ] ) { min = a [ j ] ; } } b [ k ] = ( min * ( n - 1 ) ) ; min = 0 ; } } for ( r = 0 ; r < t ; r ++ ) printf ( \"%d\n\" , b [ r ] ) ; return 0 ; }", "label": 0, "id": 11894}
{"input": "int main ( ) { int n , a , m , A [ 50000 ] , i ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } m = A [ 0 ] ; for ( i = 1 ; i < a ; i ++ ) { if ( m > A [ i ] ) m = A [ i ] ; } printf ( \"%d \n\" , m * ( a - 1 ) ) ; } return 0 ; }", "label": 1, "id": 15060}
{"input": "int main ( ) { long int max ; int t ; int x , y ; int wp1 , wp2 ; scanf ( \"%d\" , & t ) ; int n ; int k ; int q , w ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] = { 0 } ; int i , j ; for ( q = 0 ; q < n ; q ++ ) { for ( w = 0 ; w <= q ; w ++ ) { scanf ( \"%d\" , & a [ q ] [ w ] ) ; } } i = n - 1 ; max = a [ i ] [ 0 ] + a [ i - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ i ] [ j ] + a [ i - 1 ] [ j ] >= max ) { max = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; x = j ; y = i - 1 ; } if ( a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] >= max ) { max = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; x = j - 1 ; y = i - 1 ; } } while ( y != 0 ) { if ( x == 0 ) { for ( k = y - 1 ; k >= 0 ; k -- ) max = max + a [ k ] [ 0 ] ; break ; } wp1 = max + a [ x ] [ y - 1 ] ; wp2 = max + a [ x - 1 ] [ y - 1 ] ; if ( wp2 >= wp1 ) { x = x - 1 ; y = y - 1 ; max = wp2 ; } else { y = y - 1 ; max = wp1 ; } } printf ( \"%ld\n\" , max ) ; t = t - 1 ; } return 0 ; }", "label": 1, "id": 12136}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) { return b ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int m , n ; scanf ( \"%d%d\" , & m , & n ) ; int p = gcd ( m , n ) ; int lcm = ( m * n ) / p ; printf ( \"%d \" , p ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 7993}
{"input": "int main ( ) { int n , i , j , test , a [ 100 ] [ 100 ] , x1 , x2 ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { x1 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; x2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( x1 > x2 ) a [ i ] [ j ] = x1 ; else a [ i ] [ j ] = x2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 4627}
{"input": "int main ( ) { int n , m , i , j , now = 1 , max , data [ 2 ] [ 102 ] = { } ; scanf ( \"%d\" , & n ) ; while ( n -- ) { max = 0 ; scanf ( \"%d\" , & m ) ; scanf ( \"%d\" , & data [ 0 ] [ 1 ] ) ; data [ 0 ] [ 2 ] = 0 ; for ( i = 2 ; i <= m ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & data [ now ] [ j ] ) ; if ( data [ 1 - now ] [ j ] > data [ 1 - now ] [ j - 1 ] ) data [ now ] [ j ] += data [ 1 - now ] [ j ] ; else data [ now ] [ j ] += data [ 1 - now ] [ j - 1 ] ; if ( data [ now ] [ j ] > max ) max = data [ now ] [ j ] ; } data [ now ] [ j ] = 0 ; now = 1 - now ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 1492}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int i , n , temp , min ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i ++ ] ) min = a [ i ] ; } temp = min * ( n - 1 ) ; printf ( \"%ld\" , temp ) ; } return 0 ; }", "label": 1, "id": 15567}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] , s = n ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( a [ j ] <= a [ j + 1 ] ) s ++ ; else ; break ; } } printf ( \"%d\n\" , s ) ; } }", "label": 1, "id": 14035}
{"input": "int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int x , y , t ; scanf ( \"%lld%lld\" , & x , & y ) ; long long int a , b ; a = x ; b = y ; if ( x < y ) { while ( x > 0 ) { t = x ; x = y % x ; y = t ; } } else { while ( y > 0 ) { t = y ; y = x % y ; x = t ; } } long long int lcm ; lcm = ( a * b ) / t ; printf ( \"%lld %lld\n\" , t , lcm ) ; } return 0 ; }", "label": 0, "id": 19386}
{"input": "int main ( ) { int t , n , i , s , a [ 5000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; s = 0 ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i + 1 < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { s = s + a [ i + 1 ] ; } else { s = s + a [ i ] ; a [ i + 1 ] = a [ i ] ; } } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 4794}
{"input": "int main ( ) { int t , i , j , num [ 100 ] [ 100 ] , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( num [ i ] [ j ] > num [ i ] [ j + 1 ] ) num [ i - 1 ] [ j ] += num [ i ] [ j ] ; else num [ i - 1 ] [ j ] += num [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , num [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25127}
{"input": "int main ( ) { int t , l , i , j , k ; long long int a [ 101 ] [ 101 ] = { { 0 } } ; long long int ans [ 1000 ] = { { 0 } } ; scanf ( \"%d\" , & t ) ; int tcopy = t ; while ( t -- ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%ld\" , & a [ i ] [ j ] ) ; } for ( i = l - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } ans [ t ] = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < 101 ; i ++ ) { for ( j = 0 ; j < 101 ; j ++ ) a [ i ] [ j ] = 0 ; } } for ( k = tcopy - 1 ; k >= 0 ; k -- ) printf ( \"%ld \n\" , ans [ k ] ) ; return 0 ; }", "label": 0, "id": 20247}
{"input": "int main ( ) { unsigned short int t , n , i , j ; scanf ( \"%hd\" , & t ) ; while ( t -- ) { scanf ( \"%hd\" , & n ) ; unsigned short int k , a [ n ] , b [ n ] , arr [ n ] , * cur , * old , sum = 0 ; cur = a ; old = b ; b [ 0 ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { k = 0 ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%hd\" , & arr [ j ] ) ; cur [ 0 ] = arr [ k ++ ] + old [ 0 ] ; j = 1 ; while ( j < i ) { cur [ j ] = arr [ k ++ ] + max ( old [ j - 1 ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = arr [ k ++ ] + old [ j - 1 ] ; if ( cur == a ) { cur = b ; old = a ; } else { cur = a ; old = b ; } } for ( i = 0 ; i < n ; i ++ ) sum = max ( sum , old [ i ] ) ; printf ( \"%hd\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 8398}
{"input": "int main ( ) { int i , j , num [ MAX ] , sum [ MAX ] , count , n , t , tcount = 0 , largest ; scanf ( \"%d\" , & t ) ; while ( tcount < t ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) sum [ i ] = 0 ; scanf ( \"%d\" , & num [ 0 ] ) ; sum [ 0 ] = num [ 0 ] ; count = 1 ; largest = sum [ 0 ] ; while ( count < n ) { for ( i = 0 ; i <= count ; i ++ ) scanf ( \"%d\" , & num [ i ] ) ; for ( i = count - 1 ; i >= 0 ; i -- ) { if ( sum [ i ] + num [ i + 1 ] > sum [ i + 1 ] ) sum [ i + 1 ] = sum [ i ] + num [ i + 1 ] ; if ( sum [ i ] + num [ i ] > sum [ i ] ) sum [ i ] += num [ i ] ; largest = sum [ i ] > largest ? sum [ i ] : largest ; largest = sum [ i + 1 ] > largest ? sum [ i + 1 ] : largest ; } count ++ ; } printf ( \"%d\n\" , largest ) ; tcount ++ ; } return ( 0 ) ; }", "label": 0, "id": 9953}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , x , y , temp , gcd , lcm ; scanf ( \"%ld%ld\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 25745}
{"input": "int comparetor ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int loop , max_loop = 0 , g ; scanf ( \"%d\" , & loop ) ; int final [ loop ] ; for ( g = 0 ; g < loop ; g ++ ) { int sum1 [ 200 ] ; int sum2 [ 200 ] ; int lines , i , j ; int arr [ 110 ] [ 110 ] ; scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } sum1 [ 0 ] = arr [ 0 ] [ 0 ] ; sum1 [ 1 ] = - 1 ; for ( i = 0 ; i < lines ; i ++ ) { int num ; if ( i == lines - 1 ) { qsort ( sum1 , 200 , sizeof ( int ) , comparetor ) ; final [ max_loop ] = sum1 [ 199 ] ; max_loop ++ ; } else { int count = 0 , cum = 0 ; while ( sum1 [ cum ] != - 1 ) { if ( i >= 2 && cum > i ) { sum2 [ count ] = sum1 [ cum ] + arr [ i + 1 ] [ i + 1 ] ; count ++ ; } else { sum2 [ count ] = sum1 [ cum ] + arr [ i + 1 ] [ cum ] ; sum2 [ count + 1 ] = sum1 [ cum ] + arr [ i + 1 ] [ cum + 1 ] ; count = count + 2 ; } cum ++ ; } num = count ; } int l = 0 ; for ( l = 0 ; l < num ; l ++ ) sum1 [ l ] = sum2 [ l ] ; sum1 [ l ] = - 1 ; for ( l = 0 ; l < num ; l ++ ) sum2 [ l ] = 0 ; } } int r = 0 ; for ( r = 0 ; r < max_loop ; r ++ ) printf ( \"%d\n\" , final [ r ] ) ; }", "label": 3, "id": 11821}
{"input": "int main ( void ) { int n , i , j , t , sum ; scanf ( \"%d\" , & t ) ; int a [ 100 ] [ 100 ] ; while ( t ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) sum = a [ i ] [ j ] ; else sum = a [ i ] [ j + 1 ] ; a [ i - 1 ] [ j ] += sum ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 17368}
{"input": "int main ( ) { int n , i , j , k , h , l , a , b ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; h = a ; l = b ; for ( j = 0 ; ; j ++ ) { k = a % b ; if ( k == 0 ) { printf ( \"%d\" , b ) ; break ; } a = b ; b = k ; } k = ( h * l ) / b ; printf ( \" %d\n\" , k ) ; } return 0 ; }", "label": 1, "id": 26236}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm , i ; scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; ++ i ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%d%d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 13074}
{"input": "int gcd ( int a , int b ) { int temp , k ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( b != 0 ) { k = a % b ; a = b ; b = k ; } return a ; } int lcm ( int a , int b ) { int minMultiple ; minMultiple = ( a > b ) ? a : b ; while ( 1 ) { if ( minMultiple % a == 0 && minMultiple % b == 0 ) { break ; } ++ minMultiple ; } return minMultiple ; } int main ( ) { int t , a , b , p , q ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; p = gcd ( a , b ) ; q = lcm ( a , b ) ; printf ( \"%d %d\n\" , p , q ) ; } return 0 ; }", "label": 2, "id": 8810}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int ntc , i , sz ; scanf ( \"%d\" , & ntc ) ; for ( i = 1 ; i <= ntc ; i ++ ) { scanf ( \"%d\" , & sz ) ; calc ( sz ) ; } return 0 ; } int calc ( int sz ) { int i , j , m = 0 ; int a [ 100 ] [ 100 ] = { 0 } ; for ( i = 0 ; i < sz ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < sz ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i > 0 ) { if ( j > 0 ) a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) ; } else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; } } for ( j = 1 ; j < sz ; j ++ ) { m = max ( a [ sz - 1 ] [ j ] , a [ sz - 1 ] [ j - 1 ] ) ; } printf ( \"%d\" , m ) ; return 0 ; }", "label": 1, "id": 13409}
{"input": "int main ( void ) { int t , a [ 20 ] , n ; int i , j , p ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } p = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( p > a [ j ] ) p = a [ j ] ; } printf ( \"%d\n\" , ( n - 1 ) * p ) ; } return 0 ; }", "label": 3, "id": 23810}
{"input": "int max ( int , int ) ; int inp ( ) { int i = 0 ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; while ( c > 33 ) { i = i * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return i ; } int main ( ) { int * * a , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = inp ( ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 0, "id": 359}
{"input": "int gcdf ( int a , int b ) { int m ; if ( ( a % b ) == 0 ) { return b ; } else { m = gcdf ( b , a % b ) ; } return m ; } int main ( ) { int T , N1 , N2 , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & N1 , & N2 ) ; gcd = lcm = 0 ; gcd = gcdf ( N1 , N2 ) ; lcm = ( N1 * N2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 23229}
{"input": "int gcd ( int a , int b ) { int temp ; if ( a > b ) { temp = a ; a = b ; b = temp ; } if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { long int a , b , d ; scanf ( \"%ld%ld\" , & a , & b ) ; long long int c ; c = a * b ; d = gcd ( a , b ) ; printf ( \"%ld %lld\n\" , d , c / d ) ; } return 0 ; }", "label": 0, "id": 4544}
{"input": "int main ( ) { int n , i , o , s , l ; int gcd ( int , int ) ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & o , & l ) ; s = gcd ( o , l ) ; printf ( \"%d %d\n\" , s , ( ( o * l ) / s ) ) ; } return 0 ; } gcd ( int a , int l ) { a = a % l ; if ( a == 0 ) return l ; gcd ( l , a ) ; }", "label": 1, "id": 24448}
{"input": "int t , n ; int dp [ 101 ] [ 101 ] ; int arr [ 101 ] [ 101 ] ; int solve ( int i , int j ) { if ( i > n ) return 0 ; if ( dp [ i ] [ j ] != 0 ) return dp [ i ] [ j ] ; t = max ( solve ( i + 1 , j ) , solve ( i + 1 , j + 1 ) ) + arr [ i ] [ j ] ; dp [ i ] [ j ] = t ; return t ; } int main ( ) { int i , j , test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; memset ( dp , 0 , sizeof ( dp [ 0 ] [ 0 ] ) * 101 * 101 ) ; t = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; printf ( \"%d\n\" , solve ( 0 , 0 ) ) ; } return 0 ; }", "label": 0, "id": 17087}
{"input": "int main ( ) { int a [ 3 ] , b [ 3 ] , x [ 3 ] , y [ 3 ] , i , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a [ i ] , & b [ i ] ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < n ; i ++ ) { x [ i ] = a [ i ] ; y [ i ] = b [ i ] ; while ( a [ i ] != b [ i ] ) { if ( a [ i ] > b [ i ] ) a [ i ] -= b [ i ] ; else b [ i ] -= a [ i ] ; } printf ( \"%d\" , a [ i ] ) ; printf ( \" \" ) ; printf ( \"%d\" , x [ i ] * y [ i ] / a [ i ] ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 3, "id": 20581}
{"input": "int main ( ) { int i , t ; long temp ; scanf ( \"%d\" , & t ) ; long n , j ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] < a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } } printf ( \"%ld\n\" , a [ n - 1 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 26380}
{"input": "main ( ) { int n , row ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d \" , & row ) ; int * row1 = ( int * ) malloc ( sizeof ( int ) * row ) , * row2 = ( int * ) malloc ( sizeof ( int ) * row ) ; int i , j , maxVal ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & row2 [ j ] ) ; maxVal = row2 [ 0 ] ; for ( j = 0 ; j <= i ; maxVal = row2 [ j ] > maxVal ? row2 [ j ] : maxVal , j ++ ) row2 [ j ] = ( i ) ? ( j == i ) ? row2 [ j ] + row1 [ j - 1 ] : j ? row2 [ j ] + max ( row1 [ j ] , row1 [ j - 1 ] ) : row2 [ j ] + row1 [ j ] : row2 [ j ] ; int * temp = row1 ; row1 = row2 ; row2 = temp ; } printf ( \"%d\n\" , maxVal ) ; } }", "label": 0, "id": 24481}
{"input": "int main ( ) { int n , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17887}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) { return a ; } else { gcd ( b , a % b ) ; } return 1 ; } int main ( void ) { long int t ; scanf ( \"%ld\" , & t ) ; while ( t > 0 ) { long int a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; t -- ; } }", "label": 1, "id": 21311}
{"input": "int main ( ) { int t , num1 , num2 , cost = 0 , i , num , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & num ) ; if ( num > 0 ) scanf ( \"%d\" , & num1 ) ; for ( j = 0 ; j < num - 1 ; j ++ ) { scanf ( \"%d\" , & num2 ) ; cost = ( num1 < num2 ) ? num1 : num2 ; num1 = num2 ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 11902}
{"input": "int main ( ) { int T , l , i , j ; scanf ( \"%d\" , & T ) ; for ( ; T > 0 ; T -- ) { scanf ( \"%d\" , & l ) ; int a [ l ] [ l ] ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= l - 1 ; i ++ ) { for ( j = 0 ; j <= l - 1 - i ; j ++ ) { a [ l - 1 - i ] [ j ] += a [ l - i ] [ j ] > a [ l - i ] [ j + 1 ] ? a [ l - i ] [ j ] : a [ l - i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15931}
{"input": "int glob = 0 ; int getMax ( int i , int val , int * arr , int row , int curr ) ; int main ( ) { int num = 0 ; int i = 0 ; char * * str1 ; char buf [ 1024 ] ; char buf1 [ 1024 ] ; int len1 = 0 ; scanf ( \"%d\" , & num ) ; str1 = ( char * * ) malloc ( num * sizeof ( char * ) ) ; for ( i = 0 ; i < num ; i ++ ) { int row = 0 ; int j = 0 ; int * arr = NULL ; int lum = 0 ; int count = 0 ; int max = 0 ; char * str = ( char * ) malloc ( 1024 ) ; scanf ( \"%d\" , & row ) ; j = ( ( row ) * ( row + 1 ) ) / 2 ; arr = ( int * ) malloc ( j * sizeof ( int ) ) ; getline ( & str , & j , stdin ) ; for ( j = 0 ; j < row ; j ++ ) { int k = 0 ; char * tmp , * tmp1 ; int lum = 0 ; int byte_read = getline ( & str , & k , stdin ) ; int len = strlen ( str ) ; str [ len ] = '\\0' ; lum = j + 1 ; tmp = str ; tmp1 = str ; do { tmp = strchr ( tmp1 , ' ' ) ; if ( tmp ) { tmp [ 0 ] = '\\0' ; } arr [ count ++ ] = atoi ( tmp1 ) ; tmp1 = tmp + 1 ; lum -- ; } while ( lum ) ; } count = 0 ; max = 0 ; glob = 0 ; max = getMax ( 0 , max , arr , row , 0 ) ; sprintf ( buf1 , \"%d\" , glob ) ; len1 = strlen ( buf1 ) + 1 ; str1 [ i ] = ( char * ) malloc ( len1 ) ; strcpy ( str1 [ i ] , buf1 ) ; free ( arr ) ; free ( str ) ; } for ( i = 0 ; i < num ; i ++ ) { printf ( \"%s\n\" , str1 [ i ] ) ; free ( str1 [ i ] ) ; } free ( str1 ) ; return 0 ; } int getMax ( int i , int val , int * arr , int row , int curr ) { int j = i + 1 ; int l = 0 ; int fib = ( i * j ) / 2 ; int lim = ( curr + 1 ) > i ? i : ( curr + 1 ) ; if ( row == j ) { for ( l = curr ; l <= lim ; l ++ ) { if ( ( arr [ fib + l ] + val ) > glob ) { glob = arr [ fib + l ] + val ; } } return 1 ; } else { for ( l = curr ; l <= lim ; l ++ ) { int tmp = 0 ; tmp = arr [ fib + l ] + val ; tmp = getMax ( i + 1 , tmp , arr , row , l ) ; } } }", "label": 2, "id": 262}
{"input": "int main ( ) { int x , n , a , y , z , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & x , & a ) ; if ( a > x ) { y = x ; x = a ; a = y ; } z = x * a ; while ( x % a != 0 ) { y = a ; a = x % a ; x = y ; } printf ( \"%d %d\n\" , a , z ) ; } return 0 ; }", "label": 1, "id": 9756}
{"input": "void main ( ) { int t , i , j , n , temp , a [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } printf ( \"%d\n\" , a [ 0 ] ) ; } }", "label": 3, "id": 20613}
{"input": "int main ( ) { int nn , tt ; scanf ( \"%d\" , & nn ) ; for ( tt = 1 ; tt <= nn ; tt ++ ) { long long int a , b , c , d , i ; scanf ( \"%lli%lli\" , & a , & b ) ; for ( i = a ; i >= 1 ; i -- ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { c = i ; break ; } } d = a * b / c ; printf ( \"%lli %lli\n\" , c , d ) ; } return 0 ; }", "label": 2, "id": 15758}
{"input": "int gcd ( int x , int y ) { return y == 0 ? x : gcd ( y , x % y ) ; } int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int hcf , a , b , lcm ; scanf ( \"%lld %lld\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 10277}
{"input": "int gcd ( int a , int b ) { int t ; while ( a != 0 ) { t = a ; a = b % a ; b = t ; } return b ; } int main ( ) { int t , h ; int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; h = gcd ( a , b ) ; printf ( \"%d %d\n\" , h , ( a * b ) / h ) ; } }", "label": 1, "id": 19884}
{"input": "int largestSum ( int * * y , int * * x , int n , int low , int high ) ; int main ( ) { int n , i , j , k ; int S [ 1000 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int r ; int * * x ; int * * y ; scanf ( \"%d\" , & r ) ; x = ( int * * ) malloc ( r * sizeof ( int * ) ) ; y = ( int * * ) malloc ( r * sizeof ( int * ) ) ; for ( j = 0 ; j < r ; j ++ ) { x [ j ] = ( int * ) malloc ( ( j + 1 ) * sizeof ( int ) ) ; y [ j ] = ( int * ) malloc ( ( j + 1 ) * sizeof ( int ) ) ; } for ( j = 0 ; j < r ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & x [ j ] [ k ] ) ; y [ j ] [ k ] = - 1 ; } } S [ i ] = largestSum ( y , x , r , 0 , r - 1 ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , S [ i ] ) ; } return 0 ; } largestSum ( int * * y , int * * x , int n , int low , int high ) { int max = 0 , i , S , j , k ; if ( n == 1 ) { return x [ n - 1 ] [ 0 ] ; } for ( i = low ; i <= high ; i ++ ) { if ( y [ n - 1 ] [ i ] == - 1 ) { int a = 0 , b = n - 2 ; if ( i - 1 > 0 ) a = i - 1 ; if ( i < n - 2 ) b = i ; S = x [ n - 1 ] [ i ] + largestSum ( y , x , n - 1 , a , b ) ; } else S = y [ n - 1 ] [ i ] ; y [ n - 1 ] [ i ] = S ; if ( S > max ) max = S ; } return max ; }", "label": 0, "id": 4376}
{"input": "void main ( ) { int T , i , A , B , j , G , L , p ; printf ( \"enter the number of case :\n\" ) ; scanf ( \"%d\" , & T ) ; if ( T <= 1000 ) { for ( i = 1 ; i <= T ; i ++ ) { printf ( \"enter the two number :\n\" ) ; scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; G = 1 ; L = 1 ; p = A * B ; if ( A > B ) { for ( j = 1 ; j <= B ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \n LCM=%d\n\" , G , L ) ; } else if ( B > A ) { for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \n LCM=%d\n\" , G , L ) ; } else { printf ( \"GCD=%d \n LCM=%d\n\" , A , B ) ; } } } }", "label": 1, "id": 3185}
{"input": "int n ; int A [ 101 ] [ 101 ] ; int max [ 101 ] [ 101 ] ; void find_soln ( ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) max [ n - 1 ] [ i ] = A [ n - 1 ] [ i ] ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) max [ i ] [ j ] = A [ i ] [ j ] + ( ( max [ i + 1 ] [ j ] > max [ i + 1 ] [ j + 1 ] ) ? max [ i + 1 ] [ j ] : max [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , max [ 0 ] [ 0 ] ) ; } int main ( ) { int t , i , j , num , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { num = j + 1 ; while ( num ) scanf ( \"%d\" , & A [ j ] [ j + 1 - ( num -- ) ] ) ; } find_soln ( ) ; } return 0 ; }", "label": 0, "id": 5450}
{"input": "int main ( ) { int t , a , b , i ; long long int l , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; if ( a == 0 || b == 0 ) { printf ( \"0 0\n\" ) ; } else { if ( a > b ) { for ( i = b ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { g = i ; break ; } } } else { for ( i = a ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { g = i ; break ; } } } l = ( a * b ) / g ; printf ( \"%lld %lld\n\" , g , l ) ; } } }", "label": 1, "id": 6528}
{"input": "int main ( ) { int n , a , b , i , flag = 0 ; scanf ( \"%d\" , & n ) ; while ( n ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; for ( i = 1 ; i < a , i < b ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) flag = i ; } printf ( \"%d  \" , flag ) ; i = ( a * b ) / flag ; printf ( \"%d\n\n\" , i ) ; n -- ; } return 0 ; }", "label": 2, "id": 14928}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int i , j , n = 1 , z = 1 , a [ 101 ] [ 101 ] , lines ; scanf ( \"%d\" , & lines ) ; if ( 0 < lines < 100 ) { for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } n ++ ; } for ( i = lines - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } } return 0 ; }", "label": 1, "id": 12704}
{"input": "int main ( void ) { int n = 0 , t = 0 , i = 0 , j = 0 , a [ MAX ] [ MAX ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 7844}
{"input": "int tabulate ( long long int arr [ ] , long int n ) { int l , i , j , tab [ n ] [ n ] ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { if ( i == j ) tab [ i ] [ j ] = 1 ; else tab [ i ] [ j ] = 0 ; } } for ( l = 2 ; l <= n ; l ++ ) { for ( i = 1 ; i <= n - l + 1 ; i ++ ) { j = l + i - 1 ; if ( j == ( i + 1 ) ) { if ( arr [ j ] >= arr [ i ] ) tab [ i ] [ j ] = 1 ; } else { if ( tab [ i ] [ j - 1 ] == 1 ) { if ( arr [ j ] >= arr [ j - 1 ] ) tab [ i ] [ j ] = 1 ; } } } } int c = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { if ( tab [ i ] [ j ] == 1 ) c ++ ; } } return c ; } int main ( ) { int no , t , i ; long int n ; long long int arr [ 100000 ] ; scanf ( \"%d\" , & t ) ; if ( t >= 1 && t <= 5 ) { while ( t >= 1 ) { scanf ( \"%ld\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; } no = tabulate ( arr , n ) ; printf ( \"%d\n\" , no ) ; t -- ; } } return 0 ; }", "label": 3, "id": 5179}
{"input": "int main ( ) { int n , i , x = 0 , c = 0 , t = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { x ++ ; c = c + x ; } else x = 0 ; } printf ( \"%d\n\" , n + c ) ; } return 0 ; }", "label": 1, "id": 17766}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } else { return gcd ( b % a , a ) ; } } int main ( ) { int t , min , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int gcd1 = gcd ( a , b ) ; int lcm1 = ( a * b ) / gcd1 ; printf ( \"%d %d\n\" , gcd1 , lcm1 ) ; } return 0 ; }", "label": 1, "id": 2541}
{"input": "int main ( ) { int n ; int t ; int i = 0 , j , k , a [ 100 ] [ 100 ] , sum ; scanf ( \"%d\" , & n ) ; while ( 1 ) { i ++ ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } sum = a [ 0 ] [ 0 ] ; k = 0 ; for ( j = 1 ; j < t ; j ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + 1 ] ) sum = sum + a [ j ] [ k ] ; else { sum = sum + a [ j ] [ k + 1 ] ; k = k + 1 ; } } printf ( \"%d\" , sum ) ; if ( i == n ) break ; } return 0 ; }", "label": 1, "id": 11348}
{"input": "int main ( ) { int n , a , b , t , hcf , lcm , x , y ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; if ( b > a ) { t = b ; b = a ; a = t ; } while ( a % b != 0 ) { t = b ; b = a % b ; a = t ; } hcf = b ; lcm = x * y / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 1452}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int min ; scanf ( \"%d\" , & min ) ; for ( int i = 1 ; i < n ; i ++ ) { int temp ; scanf ( \"%d\" , & temp ) ; if ( temp < min ) min = temp ; } long long int ans = ( long long int ) min * ( long long int ) ( n - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 6193}
{"input": "int arr [ 100 ] [ 100 ] , i , j , test_cas , n , visited [ 100 ] [ 100 ] ; int value ( int i , int j ) { int m , v1 , v2 ; if ( i >= n ) return 0 ; if ( visited [ i ] [ j ] > 0 ) return visited [ i ] [ j ] ; v1 = value ( i + 1 , j ) ; v2 = value ( i + 1 , j + 1 ) ; if ( v1 > v2 ) m = v1 ; else m = v2 ; visited [ i ] [ j ] = m + arr [ i ] [ j ] ; return m + arr [ i ] [ j ] ; } int main ( ) { scanf ( \"%d\" , & test_cas ) ; while ( test_cas -- ) { for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { visited [ i ] [ j ] = 0 ; } } scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; printf ( \"%d\n\" , value ( 0 , 0 ) ) ; } return 0 ; }", "label": 0, "id": 10811}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , k ; scanf ( \"%d%d\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%d %d\n\" , k , ( a * b ) / k ) ; } return 0 ; }", "label": 1, "id": 10737}
{"input": "int main ( ) { int t , a [ 98 ] [ 98 ] , n , i , j , b [ 100 ] , c = 0 , sum , s , lar , k ; scanf ( \"%d\" , & t ) ; while ( t ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 0 ; j < n ; j ++ ) { for ( i = j ; i < n ; i ++ ) { sum = sum + a [ i ] [ j ] ; } b [ c ] = sum ; c ++ ; sum = 0 ; if ( c >= 100 ) { lar = b [ 0 ] ; for ( i = 0 ; i < c ; i ++ ) { if ( b [ i ] > lar ) lar = b [ i ] ; } b [ 0 ] = lar ; c = 1 ; } } for ( k = 1 ; k < n ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { s = j ; for ( i = j ; i < n ; i ++ ) { if ( ( i == ( j + k ) ) && ( ( n - j ) != 1 ) ) s = j ++ ; sum = sum + a [ i ] [ s ] ; } b [ c ] = sum ; c ++ ; sum = 0 ; if ( c >= 100 ) { lar = b [ 0 ] ; for ( i = 0 ; i < c ; i ++ ) { if ( b [ i ] > lar ) lar = b [ i ] ; } b [ 0 ] = lar ; c = 1 ; } } } lar = b [ 0 ] ; for ( i = 0 ; i < c ; i ++ ) { if ( b [ i ] > lar ) lar = b [ i ] ; } printf ( \"%d\n\" , lar ) ; t -- ; } return 0 ; }", "label": 2, "id": 16485}
{"input": "int main ( ) { int arr [ 101 ] [ 101 ] , t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) arr [ i - 1 ] [ j ] += arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ? arr [ i ] [ j ] : arr [ i ] [ j + 1 ] ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 6707}
{"input": "int main ( ) { long int t , n , a , b ; scanf ( \"%ld\" , & t ) ; for ( long int i = 0 ; i < t ; i ++ ) { long int g = 1 , l , r = 1 , m , n ; scanf ( \"%ld\" , & a ) ; scanf ( \"%ld\" , & b ) ; m = a ; n = b ; while ( r != 0 ) { r = a % b ; a = b ; b = r ; } g = a ; l = m * n / g ; printf ( \"%ld  %ld\n\" , g , l ) ; } }", "label": 0, "id": 9247}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { long long int k ; scanf ( \"%lld\" , & k ) ; long long int a [ k ] ; int f = 0 , count = k ; for ( int j = 0 ; j < k ; j ++ ) scanf ( \"%lld\" , & a [ j ] ) ; for ( int j = 0 ; j < k ; j ++ ) { int s = j ; while ( a [ s + 1 ] >= a [ s ] && s < k - 1 ) { count ++ ; s ++ ; } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 0, "id": 6714}
{"input": "int main ( ) { int t , r , s [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & s [ i ] [ j ] ) ; for ( j = r - 2 ; j >= 0 ; j -- ) for ( i = 0 ; i <= j ; i ++ ) s [ j ] [ i ] += ( s [ j + 1 ] [ i ] > s [ j + 1 ] [ i + 1 ] ) ? s [ j + 1 ] [ i ] : s [ j + 1 ] [ i + 1 ] ; printf ( \"%d\" , s [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 1023}
{"input": "int gcd ( int a , int b ) { if ( a < b ) gcd ( a , b - a ) ; else if ( a > b ) gcd ( a - b , b ) ; else return a ; } int main ( ) { int a , b , n , g , l ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / gcd ( a , b ) ; printf ( \"%d %d\" , g , l ) ; } return 0 ; }", "label": 1, "id": 26070}
{"input": "int main ( ) { int t , n , i , min , sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( min > a [ i + 1 ] ) min = a [ i + 1 ] ; sum = sum + min ; } printf ( \"%d\n\" , sum ) ; sum = 0 ; t -- ; } }", "label": 1, "id": 2691}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i ; for ( i = 1 ; i <= t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } int cost = min * ( n - 1 ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 19012}
{"input": "int n , a [ 100 ] [ 100 ] , rowno ; int r [ 100 ] , i , j , sum ; int max ( int t1 , int t2 ) { if ( t1 > t2 ) return t1 ; return t2 ; } int calsum ( int m , int n ) { int sum1 , sum2 , finsum ; if ( m == rowno ) return 0 ; sum1 = calsum ( m + 1 , n ) ; sum2 = calsum ( m + 1 , n + 1 ) ; finsum = max ( sum1 , sum2 ) + a [ m ] [ n ] ; return finsum ; } int main ( ) { scanf ( \"%d\" , & n ) ; while ( n ) { sum = 0 ; scanf ( \"%d\" , & rowno ) ; for ( i = 0 ; i < rowno ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = calsum ( 0 , 0 ) ; printf ( \"%d\" , sum ) ; n -- ; } return 0 ; }", "label": 2, "id": 26711}
{"input": "int a [ 101 ] [ 101 ] ; int main ( ) { int t , n , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { max = - 1 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { a [ i ] [ j ] = - 1 ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; continue ; } if ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; if ( i == n - 1 ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 14747}
{"input": "main ( ) { int t ; int a , b ; long long int num1 , num2 , i , j ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { num1 = a ; num2 = b ; } else { num1 = b ; num2 = a ; } while ( num1 % num2 != 0 ) { i = num1 / num2 ; j = num1 % num2 ; num1 = num2 ; num2 = j ; } printf ( \"%lld %lld\n\" , num2 , ( a * b / num2 ) ) ; t -- ; } }", "label": 1, "id": 7118}
{"input": "inline int getInt ( ) { char c ; int val = 0 ; while ( ! isdigit ( c = getchar_unlocked ( ) ) ) ; do { val = val * 10 + ( c - '0' ) ; } while ( isdigit ( c = getchar_unlocked ( ) ) ) ; return val ; } int getInt ( ) ; int main ( ) { int t = getInt ( ) ; unsigned long long int result [ MAX ] ; int i ; for ( i = 0 ; i < t ; i ++ ) { int n = getInt ( ) ; int j , min = getInt ( ) ; for ( j = 1 ; j < n ; j ++ ) { int a = getInt ( ) ; if ( a < min ) min = a ; } result [ i ] = ( unsigned long long ) min * ( n - 1 ) ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%llu\n\" , result [ i ] ) ; return 0 ; }", "label": 0, "id": 17039}
{"input": "int main ( ) { int test_case ; scanf ( \"%d\" , & test_case ) ; while ( test_case -- ) { int rows , total = 0 ; scanf ( \"%d\" , & rows ) ; for ( int a = 1 ; a <= rows ; a ++ ) { int max_number = 0 ; for ( int b = 0 ; b < a ; b ++ ) { int current_number ; scanf ( \"%d\" , & current_number ) ; if ( current_number > max_number ) { max_number = current_number ; } } total += max_number ; } printf ( \"%d\n\" , total - 1 ) ; } }", "label": 1, "id": 14055}
{"input": "int main ( ) { int t ; scanf ( \"%d\n\" , & t ) ; while ( t -- > 0 ) { int n , i ; scanf ( \"%d\n\" , & n ) ; int arr [ n ] ; scanf ( \"%d\" , & arr [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < arr [ 0 ] ) arr [ 0 ] = arr [ i ] ; } printf ( \"%d\n\" , ( arr [ 0 ] * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 5465}
{"input": "int main ( ) { int t , i , n , a , t2 , j , k , sum = 0 , cc = 0 , big = 0 , result , cc1 = 0 ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & t2 ) ; for ( i = 0 ; i < t2 ; i ++ ) { cc ++ ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & t ) ; if ( j == 0 && cc != t2 ) { sum = sum + t ; } if ( cc == t2 && cc1 < 2 ) { if ( t > big ) big = t ; cc1 ++ ; } } } result = sum + big ; printf ( \"%d\" , result ) ; sum = 0 ; big = 0 ; cc = 0 ; cc1 = 0 ; } }", "label": 1, "id": 24747}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] , k , i , j , max , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } sum = 0 ; for ( k = 0 ; k < n ; k ++ ) { max = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( ( i - k ) >= 0 ) { if ( a [ i ] [ i - k ] > max ) max = a [ i ] [ i - k ] ; } } sum += max ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 22540}
{"input": "int main ( ) { int a ; scanf ( \"%d\" , & a ) ; while ( a -- ) { long b , c , m , n ; scanf ( \"%li%li\" , & b , & c ) ; m = b ; n = c ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%li %li\n\" , m , ( b * c ) / m ) ; } }", "label": 0, "id": 17550}
{"input": "int main ( ) { int t , i , j , n , a [ 100 ] [ 100 ] , m [ 1000 ] ; int k = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i + 1 ] [ j ] ) > ( a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } m [ k ] = a [ 0 ] [ 0 ] ; k ++ ; } for ( i = 0 ; i < k ; i ++ ) printf ( \"%d \n\" , m [ i ] ) ; return 0 ; }", "label": 0, "id": 22328}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int A [ 101 ] [ 101 ] ; int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { A [ i - 1 ] [ j - 1 ] = A [ i - 1 ] [ j - 1 ] + max ( A [ i ] [ j - 1 ] , A [ i ] [ j ] ) ; } } printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7405}
{"input": "int main ( ) { int t , i , sz , j , k ; int p , q ; scanf ( \"%d\" , & t ) ; int arr [ 100 ] [ 100 ] ; int answ [ 100 ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & sz ) ; for ( j = 0 ; j < sz ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } for ( i = sz - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { p = ( arr [ i - 1 ] [ j ] + arr [ i ] [ j ] ) ; q = ( arr [ i - 1 ] [ j ] + arr [ i ] [ j + 1 ] ) ; if ( p > q ) arr [ i - 1 ] [ j ] = p ; else arr [ i - 1 ] [ j ] = q ; } } answ [ i ] = arr [ 0 ] [ 0 ] ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\" , answ [ i ] ) ; return 0 ; }", "label": 2, "id": 16149}
{"input": "void fastRead ( int * a ) { register char c = 0 ; while ( c < 33 ) c = getchar ( ) ; * a = 0 ; while ( c > 33 ) { * a = * a * 10 + c - '0' ; c = getchar ( ) ; } } int tab [ 101 ] [ 101 ] ; int in [ 101 ] [ 101 ] ; int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a , Test , res , n , i , j , r ; fastRead ( & Test ) ; while ( Test -- ) { fastRead ( & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { fastRead ( & a ) ; in [ i ] [ j ] = a ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { in [ i ] [ j ] += in [ i + 1 ] [ j ] > in [ i + 1 ] [ j + 1 ] ? in [ i + 1 ] [ j ] : in [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , in [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 14333}
{"input": "int rec ( int n ) { if ( n == 0 ) { return 0 ; } else return ( n + rec ( n - 1 ) ) ; } void sumoftriangle ( int a ) { int arr [ 1000 ] ; int c ; int d [ 10 ] ; int k ; int i = 0 ; int p = 0 ; int q = 1 ; int r = 2 ; int x ; int y ; int z ; int f ; int b ; int v ; int n = a ; int l , j ; int e ; c = a + 1 ; e = rec ( c ) ; for ( k = 0 ; k < e ; k ++ ) { scanf ( \"%d\" , & arr [ k ] ) ; } for ( i = 0 ; i < a ; i ++ ) { x = arr [ p ] ; y = arr [ q ] ; z = arr [ r ] ; b = x + y + z ; d [ i ] = b ; f = ( q - p ) + 1 ; p = q ; q = p + f ; r = q + 1 ; } for ( l = 0 ; l < n ; l ++ ) { for ( j = l + 1 ; j < n - 1 ; j ++ ) { if ( d [ l ] > d [ j ] ) { int temp = d [ l ] ; d [ l ] = d [ j ] ; d [ j ] = temp ; } } } printf ( \"\n\n%d\n\" , d [ n - 1 ] ) ; } int main ( ) { int m ; int g ; int a ; int e ; scanf ( \"%d\" , & m ) ; for ( g = 0 ; g < m ; g ++ ) { scanf ( \"%d\" , & a ) ; e = a - 1 ; sumoftriangle ( e ) ; } return 0 ; }", "label": 3, "id": 19291}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int p [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & p [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) p [ i ] [ j ] += ( p [ i + 1 ] [ j ] > p [ i + 1 ] [ j + 1 ] ? p [ i + 1 ] [ j ] : p [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , p [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16730}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , n , a [ 105 ] [ 105 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { t -- ; i = 0 ; j = 0 ; ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j <= i - 1 ; j ++ ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 12806}
{"input": "int main ( ) { int t , n , x , m , max , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n , & m ) ; max = ( n > m ) ? n : m ; min = ( n > m ) ? m : n ; while ( max % min != 0 ) { x = min ; min = max % min ; max = x ; } printf ( \"%d %d\n\" , min , ( n * m ) / min ) ; } return 0 ; }", "label": 1, "id": 10753}
{"input": "int Calculate ( long long int * , long long int ) ; int main ( ) { long long int a [ 100005 ] ; long long int i , t , n , j , count ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lld\" , & a [ j ] ) ; count = Calculate ( a , n ) ; printf ( \"%lld\n\" , count ) ; } return 0 ; } int Calculate ( long long int * a , long long int n ) { int i , count = 0 , sum = 0 , temp = 0 , j , b [ 100005 ] ; b [ temp ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { temp ++ ; b [ temp ] = i ; } } temp = temp + 1 ; b [ temp ] = i - 1 ; for ( i = 1 ; i <= temp ; i ++ ) { sum = b [ i ] - b [ i - 1 ] ; count += ( sum * ( sum + 1 ) ) / 2 ; } return count ; }", "label": 0, "id": 17961}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { long int a , b , A , B ; long int lcm ; long int gc , remainder ; scanf ( \"%ld%ld\" , & a , & b ) ; A = a ; B = b ; while ( 1 ) { remainder = a % b ; if ( remainder == 0 ) { gc = b ; break ; } else { a = b ; b = remainder ; } } lcm = A * B / gc ; printf ( \"%ld %ld\n\" , gc , lcm ) ; n -- ; } return 0 ; }", "label": 0, "id": 25506}
{"input": "int main ( ) { int t , n , i , flag = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , x , y , t , gcd , lcm ; scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 10470}
{"input": "int main ( ) { int i , t ; long int a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; for ( i = a * b ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; break ; } } lcm = a * b / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 4316}
{"input": "int main ( ) { int no_of_inputs ; scanf ( \"%i\" , & no_of_inputs ) ; int count = 0 ; while ( count < no_of_inputs ) { count ++ ; int trisize ; scanf ( \"%i\" , & trisize ) ; int triangle [ 100 ] [ 100 ] ; int i ; int n ; for ( i = 1 ; i <= trisize ; i ++ ) { for ( n = 0 ; n < i ; n ++ ) { scanf ( \"%i\" , & triangle [ i - 1 ] [ n ] ) ; } } for ( i = trisize - 2 ; i >= 0 ; i -- ) { for ( n = i ; n >= 0 ; n -- ) { int right = triangle [ i + 1 ] [ n + 1 ] ; int left = triangle [ i + 1 ] [ n ] ; if ( right > left ) { triangle [ i ] [ n ] = right + triangle [ i ] [ n ] ; } else { triangle [ i ] [ n ] = left + triangle [ i ] [ n ] ; } } } printf ( \"%i\n\" , triangle [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 12507}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { long long n , i , min , sum = 0 , a [ 100000 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( i == 0 ) { min = a [ i ] ; } if ( min > a [ i ] ) { min = a [ i ] ; } } sum = min * ( -- n ) ; printf ( \"%lld\" , sum ) ; } return 0 ; }", "label": 1, "id": 22652}
{"input": "main ( ) { int t , g , rem , nr , dr ; scanf ( \"%d\" , & t ) ; for ( g = 1 ; g <= t ; g ++ ) { int a , b , hcf , lcm ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { nr = a ; dr = b ; } else { nr = b ; dr = a ; } rem = nr % dr ; while ( rem != 0 ) { nr = dr ; dr = rem ; rem = nr % dr ; } hcf = dr ; lcm = a * b / hcf ; printf ( \"hcf is %d and lcm is %d\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 15925}
{"input": "void perform ( ) { int n , i , l ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } l = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < l ) l = a [ i ] ; } printf ( \"%d\n\" , ( n - 1 ) * l ) ; } int main ( ) { int nooftestcases , i ; scanf ( \"%d\" , & nooftestcases ) ; for ( i = 0 ; i < nooftestcases ; i ++ ) { perform ( ) ; } return 0 ; }", "label": 0, "id": 12641}
{"input": "int main ( ) { int c , i , d , j , t ; long long int a , b ; scanf ( \"%d\n\" , & t ) ; while ( t > 0 ) { scanf ( \"%lld%lld\" , & a , & b ) ; if ( a > b ) { for ( i = 1 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) c = i ; } } else if ( a < b ) { for ( i = 1 ; i <= a ; i ++ ) { if ( b % i == 0 && a % i == 0 ) c = i ; } } else c = a ; for ( j = 1 ; j <= a * b ; j ++ ) { if ( a * b % j == 0 && j % a == 0 && j % b == 0 ) { d = j ; break ; } if ( a * b % j != 0 ) d = j ; } printf ( \"%d %d\n\" , c , d ) ; -- t ; } return 0 ; }", "label": 2, "id": 19145}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; printf ( \"Enter two integers\n\" ) ; scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"Greatest common divisor of %d and %d = %d\n\" , x , y , gcd ) ; printf ( \"Least common multiple of %d and %d = %d\n\" , x , y , lcm ) ; return 0 ; }", "label": 1, "id": 11391}
{"input": "void main ( ) { int A , B , gcd , lcm , rem , num , d ; scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { num = A ; d = B ; } else { num = B ; d = A ; } rem = A % B ; while ( rem != 0 ) { num = d ; d = rem ; rem = num % d ; } gcd = d ; lcm = A * B / gcd ; printf ( \"%d \" , gcd ) ; printf ( \"%d\" , lcm ) ; }", "label": 1, "id": 3636}
{"input": "long long gcd1 ( long long a , long long b ) { long long m ; if ( a % b == 0 ) { return b ; } else { m = gcd1 ( b , a % b ) ; } return m ; } int main ( ) { int t ; long long g , l , n1 , n2 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & n1 , & n2 ) ; g = 0 ; l = 0 ; g = gcd1 ( n1 , n2 ) ; l = n1 * n2 / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 1856}
{"input": "int main ( ) { int try [ 100 ] [ 100 ] , t , row , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & try [ i ] [ j ] ) ; for ( i = row - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i + 1 ; j ++ ) ( try [ i ] [ j ] + try [ i + 1 ] [ j ] ) >= ( try [ i ] [ j ] + try [ i + 1 ] [ j + 1 ] ) ? ( try [ i ] [ j ] = ( try [ i ] [ j ] + try [ i + 1 ] [ j ] ) ) : ( try [ i ] [ j ] = ( try [ i ] [ j ] + try [ i + 1 ] [ j + 1 ] ) ) ; } printf ( \"%d\n\" , try [ 0 ] [ 0 ] ) ; return 0 ; }", "label": 1, "id": 20546}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , m , n , o ; scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; o = m ; m = n ; n = o ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 4410}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { int a , min ; scanf ( \"%d\" , & a ) ; int t [ a ] ; for ( int j = 0 ; j < a ; j ++ ) { scanf ( \"%d\" , & t [ j ] ) ; } min = t [ 0 ] ; for ( int j = 0 ; j < a ; j ++ ) { if ( t [ j ] < min ) { min = t [ j ] ; } } printf ( \"%d\n\" , ( a - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 16285}
{"input": "main ( ) { int t , i , n , a [ 100000 ] ; long long int sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int dp [ n ] ; for ( i = 0 ; i < n ; i ++ ) dp [ i ] = 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( i > 0 ) { if ( a [ i ] > a [ i - 1 ] ) dp [ i ] = dp [ i ] + dp [ i - 1 ] ; else dp [ i ] = 1 ; } sum += dp [ i ] ; } printf ( \"%lld\" , sum ) ; } }", "label": 3, "id": 6132}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 100 ] [ 100 ] = { 0 } , b [ 100 ] [ 101 ] = { 0 } ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ 0 ] [ 1 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 1 ; j <= i + 1 ; j ++ ) { if ( b [ i - 1 ] [ j ] >= b [ i - 1 ] [ j - 1 ] ) b [ i ] [ j ] = b [ i - 1 ] [ j ] + a [ i ] [ j - 1 ] ; else b [ i ] [ j ] = b [ i - 1 ] [ j - 1 ] + a [ i ] [ j - 1 ] ; } int max = 0 ; for ( i = 1 ; i <= n ; i ++ ) if ( max <= b [ n - 1 ] [ i ] ) max = b [ n - 1 ] [ i ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 23361}
{"input": "int arr [ 100 ] [ 100 ] ; int max = 0 ; void get_max ( int x , int y , int n ) { static int total = 0 ; if ( x == n || y == n || x < 0 || y < 0 ) { if ( x == n ) { if ( total > max ) { max = total ; } } return ; } else { total = total + arr [ x ] [ y ] ; get_max ( x + 1 , y + 1 , n ) ; get_max ( x + 1 , y , n ) ; total -= arr [ x ] [ y ] ; } } int main ( int argc , char * * argv ) { int t = 0 , i = 0 , n = 0 , j = 0 , k = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { printf ( \"\n\" ) ; for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } get_max ( 0 , 0 , n ) ; printf ( \"%d\" , max ) ; max = 0 ; } return ( EXIT_SUCCESS ) ; }", "label": 2, "id": 12183}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i ; for ( i = 1 ; i <= t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int j ; int min ; scanf ( \"%d\" , & min ) ; int temp ; for ( j = 1 ; j < n ; j ++ ) { scanf ( \"%d\" , & temp ) ; if ( temp < min ) min = temp ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 1454}
{"input": "long gcd ( long , long ) ; int main ( ) { int T , i , hcf ; long x , y , lcm ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld%ld\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %ld\n\" , hcf , lcm ) ; } return 0 ; } long gcd ( long x , long y ) { if ( x == 0 ) { return y ; } while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 0, "id": 9360}
{"input": "int triangle [ 100 ] [ 100 ] ; int sums [ 100 ] [ 100 ] ; int main ( ) { int numTest , i , j , k , rows , mx ; scanf ( \"%d\" , & numTest ) ; while ( numTest -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 && i == 0 ) sums [ i ] [ j ] = triangle [ i ] [ j ] ; else if ( j == 0 && i != 0 ) sums [ i ] [ j ] = sums [ i - 1 ] [ 0 ] + triangle [ i ] [ 0 ] ; else if ( j == i ) sums [ i ] [ j ] = sums [ i - 1 ] [ j - 1 ] + triangle [ i ] [ j ] ; else { k = sums [ i - 1 ] [ j - 1 ] > sums [ i - 1 ] [ j ] ? sums [ i - 1 ] [ j - 1 ] : sums [ i - 1 ] [ j ] ; sums [ i ] [ j ] = k + triangle [ i ] [ j ] ; } } } k = rows - 1 ; mx = sums [ k ] [ 0 ] ; for ( i = 1 ; i < rows ; i ++ ) mx = sums [ k ] [ i ] > mx ? sums [ k ] [ i ] : mx ; printf ( \"%d\n\" , mx ) ; memset ( sums , 0 , sizeof ( sums ) ) ; } return 0 ; }", "label": 0, "id": 4300}
{"input": "int main ( ) { int t , n , arr [ 100000 ] = { } , i , j , k , check , temp , count ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { while ( arr [ i ] < arr [ i + 1 ] ) i ++ ; count ++ ; } printf ( \"%d\n\" , count + n ) ; } return 0 ; }", "label": 1, "id": 12585}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , s = 0 ; scanf ( \"%d\" , & n ) ; int a [ 100000 ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { a [ i ] = 0 ; s = s + a [ i + 1 ] ; } else { a [ i + 1 ] = 0 ; s = s + a [ i ] ; } } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 1569}
{"input": "int main ( void ) { int T , N , i , j ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & N ) ; long long int A [ N ] , s = 0 , min ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%lld\" , & A [ j ] ) ; } s = A [ 0 ] ; for ( j = 1 ; j < N ; j ++ ) { if ( s > A [ j ] ) { s = A [ j ] ; } } min = s * ( N - 1 ) ; printf ( \"%lld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 19855}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; long int min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%ld\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 22997}
{"input": "int gcd ( int a , int b ) { int r ; while ( b > 0 ) { r = a % b ; a = b ; b = r ; } return a ; } int main ( ) { int T , a , b , GCD , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & a , & b ) ; GCD = gcd ( a , b ) ; lcm = ( a * b ) / GCD ; printf ( \"%d %d\" , GCD , lcm ) ; } return 0 ; }", "label": 1, "id": 9424}
{"input": "int main ( ) { long long int t , n , i ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] , min ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 23626}
{"input": "int main ( void ) { long long int a , b , m , n ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%lld %lld\" , & m , & n ) ; a = m , b = n ; while ( b != 0 ) { long long int temp = a ; a = b ; b = temp % b ; } printf ( \"%lld %lld\n\" , a , m / a * n ) ; } return 0 ; }", "label": 0, "id": 8138}
{"input": "void solve ( int * a , int n ) { int i , j , i1 , j1 , i2 , j2 , max ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) { max = a [ i * n + j ] ; } else { if ( j == 0 ) { j1 = j2 = 0 ; i1 = i2 = i - 1 ; } else { j1 = j - 1 ; j2 = j ; i1 = i2 = i - 1 ; } if ( i == j && j != 0 ) { i1 = i2 = i - 1 ; j1 = j2 = i - 1 ; } if ( a [ i1 * n + j1 ] > a [ i2 * n + j2 ] ) a [ i * n + j ] = a [ i1 * n + j1 ] + a [ i * n + j ] ; else a [ i * n + j ] = a [ i2 * n + j2 ] + a [ i * n + j ] ; } if ( max < a [ i * n + j ] ) max = a [ i * n + j ] ; } } printf ( \"%d\n\" , max ) ; } int main ( ) { int * a , n , rounds ; int i , j , k ; scanf ( \"%d\" , & rounds ) ; for ( k = 0 ; k < rounds ; k ++ ) { scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( n * n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i * n + j ] ) ; solve ( a , n ) ; } }", "label": 0, "id": 990}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , g , l ; long int i ; scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = i ; } } l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 6963}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int count , k ; scanf ( \"%d\" , & count ) ; for ( k = 0 ; k < count ; k = k + 1 ) { int n , i , j , msum ; scanf ( \"%d\" , & n ) ; int * arr [ n ] , * sum [ n ] ; for ( i = 0 ; i < n ; i ++ ) { arr [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; sum [ i ] = ( int * ) calloc ( ( i + 1 ) , sizeof ( int ) ) ; for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; if ( i == 0 && j == 0 ) sum [ i ] [ j ] = arr [ i ] [ j ] ; if ( j == 0 && i != 0 ) sum [ i ] [ j ] = arr [ i ] [ j ] + sum [ i - 1 ] [ j ] ; if ( i != 0 && j != 0 && i == j ) sum [ i ] [ j ] = arr [ i ] [ j ] + sum [ i - 1 ] [ j - 1 ] ; if ( i != j && i != 0 && j != 0 ) sum [ i ] [ j ] = max ( sum [ i - 1 ] [ j ] + arr [ i ] [ j ] , sum [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ) ; } } msum = sum [ n - 1 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( sum [ n - 1 ] [ i ] > msum ) msum = sum [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , msum ) ; } return 0 ; }", "label": 0, "id": 2684}
{"input": "int main ( ) { int t , n , i , j , k ; int a [ 110 ] [ 110 ] ; int dp [ 110 ] [ 110 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int cnt = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == ( n - 1 ) ) { dp [ i ] [ j ] = a [ i ] [ j ] ; } else { int temp = max ( dp [ i + 1 ] [ j ] , dp [ i + 1 ] [ j + 1 ] ) ; dp [ i ] [ j ] = a [ i ] [ j ] + temp ; } } } printf ( \"%d\n\" , dp [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26376}
{"input": "int main ( ) { long long int n , i , a , j ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a ) ; long long int b [ a ] , m ; for ( j = 0 ; j < a ; j ++ ) scanf ( \"%lld\" , & b [ j ] ) ; m = b [ 0 ] ; long long int k ; for ( k = 0 ; k < a ; k ++ ) { if ( b [ j ] < m ) m = b [ j ] ; } printf ( \"\n%lld\" , m * ( a - 1 ) ) ; } return 0 ; }", "label": 1, "id": 5949}
{"input": "int max ( int x , int b ) { if ( x > b ) return x ; else return b ; } int q ( int a [ ] [ 100 ] , int i , int j , int r , int s ) { s = s + a [ i ] [ j ] ; if ( i < r ) s = max ( q ( a , i + 1 , j , r , s ) , q ( a , i + 1 , j + 1 , r , s ) ) ; return s ; } int main ( ) { int a [ 100 ] [ 100 ] , t , i , j , r , s = 0 ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & r ) ; for ( i = 1 ; i <= r ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; i = 1 ; j = 1 ; s = q ( a , i , j , r , s ) ; printf ( \"%d\n\" , s ) ; t -- ; } return 0 ; }", "label": 2, "id": 17757}
{"input": "int GCD ( int a , int b ) { int r ; r = a % b ; if ( r == 0 ) return b ; else return GCD ( b , r ) ; } int main ( void ) { int t , a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 4303}
{"input": "int main ( ) { int i , j , a , b , c , lcm , hcf ; scanf ( \"%d\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%d %d\" , & b , & c ) ; for ( j = 1 ; j % b != 0 || j % c != 0 ; ) { j = j + 1 ; } lcm = j ; hcf = b * c / j ; printf ( \"%d %d\" , hcf , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 2, "id": 13949}
{"input": "main ( t , h , i , j ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & h ) ; int x [ h ] [ h ] ; for ( i = 0 ; i < h ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & x [ i ] [ j ] ) ; for ( i = h - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) x [ i ] [ j ] += x [ i + 1 ] [ j ] > x [ i + 1 ] [ j + 1 ] ? x [ i + 1 ] [ j ] : x [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , x [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 15512}
{"input": "int main ( int argc , char * argv [ ] ) { int i = 0 ; int T = 0 ; int h = 0 ; int l = 0 ; int x = 0 ; int n = 0 ; int * tri = NULL ; scanf ( \"%d\" , & T ) ; for ( ; T > 0 ; -- T ) { scanf ( \"%d\" , & h ) ; n = h * ( h + 1 ) / 2 ; tri = realloc ( tri , n * sizeof ( int ) ) ; for ( l = 0 ; l < n ; ++ l ) { scanf ( \"%d\" , & tri [ l ] ) ; } for ( x = h - 1 ; x > 0 ; -- x ) { for ( i = x * ( x - 1 ) / 2 ; i < x * ( x + 1 ) / 2 ; ++ i ) { if ( tri [ i + x ] > tri [ i + x + 1 ] ) tri [ i ] += tri [ i + x ] ; else tri [ i ] += tri [ i + x + 1 ] ; } } printf ( \"%d\n\" , tri [ 0 ] ) ; } free ( tri ) ; return 0 ; }", "label": 0, "id": 8937}
{"input": "void main ( ) { long long int i , j , n , a [ 50001 ] , s [ 5001 ] ; int t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { s [ i ] = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] < a [ j + 1 ] ) a [ j + 1 ] = a [ j ] ; s [ i ] = s [ i ] + a [ j + 1 ] ; } } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , s [ i ] ) ; return 0 ; }", "label": 1, "id": 10658}
{"input": "int main ( ) { int n , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26135}
{"input": "int main ( ) { int x , n , i , j ; scanf ( \"%d\" , & x ) ; while ( x ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) ? a [ i + 1 ] [ j + 1 ] : a [ i + 1 ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; x -- ; } return 0 ; }", "label": 0, "id": 16001}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n ; int a [ 200 ] [ 200 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 642}
{"input": "int main ( ) { int t , i ; long long int a , b , x , y , x1 , y1 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; x = a ; y = b ; x1 = a ; y1 = b ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; if ( x1 < y1 ) x1 = x1 + a ; else y1 = x1 + b ; } printf ( \"%lld \" , x ) ; printf ( \"%lld\n\" , x1 ) ; } return 0 ; }", "label": 1, "id": 20681}
{"input": "int main ( ) { long i , n , a , minimum , t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { minimum = LONG_MAX ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a ) ; minimum = min ( a , minimum ) ; } minimum = minimum * ( n - 1 ) ; printf ( \"%ld\n\" , minimum ) ; } return 0 ; }", "label": 0, "id": 24946}
{"input": "int max ( int x , int y ) { return ( x > y ? x : y ) ; } int arr [ 99 ] [ 99 ] ; int sum , m ; int CalSum ( int i , int j ) { if ( i >= m ) return 0 ; sum = max ( CalSum ( i + 1 , j ) , CalSum ( i + 1 , j + 1 ) ) + arr [ i ] [ j ] ; return sum ; } int main ( ) { int n , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { memset ( arr , 0 , sizeof ( arr [ 0 ] [ 0 ] ) * 99 * 99 ) ; scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } printf ( \"%d\n\" , CalSum ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 2725}
{"input": "int gcd ( int n1 , int n2 ) { if ( n2 != 0 ) return gcd ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int n , i , a , b , x , y ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , a , ( x * y ) / a ) ; } return 0 ; }", "label": 1, "id": 13987}
{"input": "int main ( ) { int t , n , i , j , a [ 100 ] [ 100 ] , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22641}
{"input": "int hcf ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; if ( a >= b ) printf ( \"%d %d\" , hcf ( a , b ) , lcm ( a , b ) ) ; else printf ( \"%d %d\" , hcf ( b , a ) , lcm ( b , a ) ) ; } return 0 ; } int hcf ( int a , int b ) { int i ; for ( i = 1 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) return i ; } } int lcm ( int a , int b ) { int c = a ; while ( 1 ) { if ( c % b == 0 && c % a == 0 ) return c ; c ++ ; } }", "label": 2, "id": 9619}
{"input": "int gc ( int , int ) ; int main ( ) { int n , a , b , g , l ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gc ( a , b ) ; l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } } int gc ( int a , int b ) { if ( b != 0 ) { return gc ( b , a % b ) ; } else { return a ; } }", "label": 1, "id": 19104}
{"input": "int a [ 105 ] [ 105 ] , n ; max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int fun ( int i , int j ) { int t ; if ( i + 1 == n ) { return max ( a [ i ] [ j ] + a [ i + 1 ] [ j ] , a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ; } else { t = a [ i ] [ j ] + max ( fun ( i + 1 , j ) , fun ( i + 1 , j + 1 ) ) ; return t ; } } int main ( ) { int t , ans , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; n -- ; ans = fun ( 0 , 0 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 2, "id": 23105}
{"input": "int main ( ) { int n , min , m , ans [ 10 ] ; int t , i , j ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d%d\" , & n , & m ) ; if ( n < m ) min = n ; else min = m ; for ( i = min ; i >= 1 ; i -- ) { if ( n % i == 0 && m % i == 0 ) break ; } ans [ j * 2 ] = i ; ans [ j * 2 + 1 ] = m * n / i ; } for ( j = 0 ; j < t ; j ++ ) { printf ( \"%d  %d\n\" , ans [ j * 2 ] , ans [ j * 2 + 1 ] ) ; } return 0 ; }", "label": 3, "id": 22744}
{"input": "long gcd ( long , long ) ; int main ( ) { int t ; long a , b , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%d \" , c ) ; a = a / c ; b = b / c ; printf ( \"%d\n\" , a * b ) ; } } long gcd ( long a , long b ) { if ( a % b == 0 ) return b ; else gcd ( b , ( a % b ) ) ; }", "label": 1, "id": 27001}
{"input": "long n , a [ 100002 ] , i , j , count , dp [ 100002 ] ; long long sum = 0 ; main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) dp [ i ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( dp [ i ] == 0 ) { count = 1 ; for ( j = i + 1 ; j < n && a [ j - 1 ] < a [ j ] ; j ++ ) { count ++ ; } dp [ i ] = count ; for ( j = 1 ; j <= count - 1 ; j ++ ) dp [ i + j ] = dp [ i + j - 1 ] - 1 ; } sum += dp [ i ] ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 24027}
{"input": "void main ( ) { int t , i , j , gcd = 1 , lcm , k , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & i , & j ) ; x = ( i > j ) ? j : i ; k = ( i > j ) ? i : j ; while ( x > 1 ) { if ( ( i % x == 0 ) && ( j % x == 0 ) ) break ; x -- ; } gcd = x ; while ( k != ( i * j ) + 1 ) { if ( ( k % i == 0 ) && ( k % j == 0 ) ) { lcm = k ; break ; } k ++ ; } printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 18315}
{"input": "main ( ) { int t , n , a [ 50000 ] , i , c , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } c = c + min ; } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 1, "id": 25343}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; long int min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%ld\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 2923}
{"input": "int main ( void ) { int t ; scanf ( \"%d\n\" , & t ) ; long long int n ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\n\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\n\" , & a [ i ] ) ; } long long int min = a [ 0 ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( min > a [ j ] ) { min = a [ j ] ; } } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 1481}
{"input": "int main ( ) { int t , p , s , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & p ) ; int array [ p ] ; for ( i = 0 ; i < p ; ++ i ) scanf ( \"%d\" , & array [ i ] ) ; int smallest = array [ 0 ] ; for ( i = 0 ; i < p ; i ++ ) if ( array [ i ] < smallest ) smallest = array [ i ] ; printf ( \"%d\n\" , smallest * ( p - 1 ) ) ; } return 0 ; }", "label": 0, "id": 11704}
{"input": "int main ( ) { int test , row , i , k , j , t ; scanf ( \"%d\" , & test ) ; for ( t = 0 ; t < test ; t ++ ) { scanf ( \"%d\" , & row ) ; int a [ row ] [ row ] ; for ( k = 0 ; k < row ; k ++ ) { for ( j = 0 ; j <= k ; j ++ ) { scanf ( \"%d\" , & a [ k ] [ j ] ) ; } } for ( i = row - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < row - 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 13286}
{"input": "int main ( ) { int i , t , gcd ; long int a , b , mul , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; gcd = 0 ; lcm = 0 ; mul = a * b ; while ( a > 1 || b > 1 ) { if ( a > b ) a = a - b ; else if ( b > a ) b = b - a ; else if ( a == b ) break ; } gcd = a ; lcm = mul / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 18618}
{"input": "int max ( int m , int n ) ; int main ( ) { int tcases , no , i , j , p , q ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & tcases ) ; while ( tcases -- ) { i = 0 ; j = 0 ; q = 0 ; p = 0 ; scanf ( \"%d\" , & no ) ; for ( i = 0 ; i < no ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } i = no - 1 ; j = 0 ; p = no ; q = 0 ; for ( i = no - 1 ; i >= 0 ; i -- ) { while ( j < no - 1 && q < no - 1 ) { a [ i ] [ j ] = max ( a [ i ] [ j ] + a [ p ] [ q ] , a [ i ] [ j ] + a [ p ] [ q + 1 ] ) ; j ++ ; q ++ ; } p -- ; j = 0 ; q = 0 ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; } int max ( int m , int n ) { if ( m > n ) { return m ; } else { return n ; } }", "label": 1, "id": 2228}
{"input": "int main ( ) { long long int t , i , j , k , n [ 7 ] [ 100000 ] , flag ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n [ i ] [ 0 ] ) ; for ( j = 1 ; j < n [ i ] [ 0 ] ; j ++ ) scanf ( \"%lld\" , & n [ i ] [ j ] ) ; } for ( i = 0 ; i < t ; i ++ ) { j = 1 ; flag = 0 ; while ( j < n [ i ] [ 0 ] ) { if ( n [ i ] [ j ] < n [ i ] [ j + 1 ] ) flag ++ ; j ++ ; } flag = flag + n [ i ] [ 0 ] ; printf ( \"%lld\n\" , flag ) ; } return 0 ; }", "label": 2, "id": 8446}
{"input": "int maxsum ( int arr [ ] [ 100 ] , int row , int col ) ; int max ( int a , int b ) ; int n ; int main ( ) { int arr [ 100 ] [ 100 ] , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } printf ( \"%d\n\" , maxsum ( arr , 0 , 0 ) ) ; } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int maxsum ( int arr [ ] [ 100 ] , int row , int col ) { static int maxm = 0 ; int sum = 0 ; static int dp_sum [ 100 ] [ 100 ] = { 0 } ; if ( row == n - 1 ) { maxm = arr [ row ] [ col ] ; dp_sum [ row ] [ col ] = maxm ; return maxm ; } else { if ( ! dp_sum [ row ] [ col ] ) { maxm = arr [ row ] [ col ] + max ( maxsum ( arr , row + 1 , col ) , maxsum ( arr , row + 1 , col + 1 ) ) ; dp_sum [ row ] [ col ] = maxm ; } else maxm = arr [ row ] [ col ] + dp_sum [ row ] [ col ] ; } return maxm ; }", "label": 1, "id": 19437}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , i , j , tc ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 9457}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int val , n1 = n ; long min = 99999 ; while ( n -- ) { scanf ( \"%d\" , & val ) ; if ( val < min ) min = val ; } long s = ( n1 - 1 ) * min ; printf ( \"%ld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 691}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , i , n ; scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) n = num2 ; else n = num1 ; for ( i = 1 ; i <= n ; i ++ ) { if ( ( num1 % i == 0 ) && ( num2 % i == 0 ) ) gcd = i ; } lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; return 0 ; }", "label": 1, "id": 1058}
{"input": "int arr [ 100 ] [ 100 ] ; int main ( ) { int t ; int i , j , k , n ; printf ( \"Enter t\n\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"Enter n\n\" ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) { arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; } else { arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 20208}
{"input": "long long readInt ( ) { long long n = 0 , c = gc ( ) , f = 1 ; while ( c != '-' && ( c < '0' || c > '9' ) ) c = gc ( ) ; if ( c == '-' ) f = - 1 , c = gc ( ) ; while ( c >= '0' && c <= '9' ) n = ( n << 3 ) + ( n << 1 ) + c - '0' , c = gc ( ) ; return n * f ; } void writeInt ( int a ) { char snum [ 20 ] ; int i = 0 ; do { snum [ i ++ ] = a + 48 ; a = a / 10 ; } while ( a != 0 ) ; i = i - 1 ; while ( i >= 0 ) pc ( snum [ i -- ] ) ; pc ( '\n' ) ; } int a [ 101 ] [ 101 ] ; int maxi ( int a , int b ) { a = a > b ? a : b ; return a ; } int main ( ) { int t , n , i , j , max ; t = readInt ( ) ; while ( t -- ) { n = readInt ( ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] = readInt ( ) ; a [ i ] [ j ] = a [ i ] [ j ] + maxi ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; } } max = 0 ; for ( i = 1 ; i <= n ; i ++ ) max = max > a [ n ] [ i ] ? max : a [ n ] [ i ] ; writeInt ( max ) ; } return 0 ; }", "label": 1, "id": 23271}
{"input": "int main ( ) { long int gcd , i , t , m , n , small , j ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & m , & n ) ; if ( m == 0 && n == 0 ) printf ( \"0 0\n\" ) ; else { if ( m <= n ) small = m ; else small = n ; for ( i = small ; i >= 1 ; i -- ) { if ( m % i == 0 && n % i == 0 ) { gcd = i ; break ; } } printf ( \"%ld %lld\n\" , gcd , ( m * n ) / gcd ) ; } } return 0 ; }", "label": 2, "id": 8261}
{"input": "int main ( ) { int i , j , t , r , a [ 101 ] [ 101 ] , b [ 1001 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = r - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & b [ i ] ) ; } } for ( i = 1 ; i <= t ; i ++ ) printf ( \"%d\" , b [ i ] ) ; return 0 ; }", "label": 1, "id": 5422}
{"input": "int main ( ) { int i = 0 , cases = 0 , c = 0 ; int j = 0 , lines = 0 , sum = 0 ; int case_no [ 101 ] ; int arr [ 105 ] [ 105 ] ; scanf ( \"%d\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%d\" , & lines ) ; for ( j = 0 ; j < lines ; j ++ ) { for ( c = 0 ; c <= j ; c ++ ) scanf ( \"%d\" , & arr [ j ] [ c ] ) ; } for ( j = lines - 1 ; j > 0 ; j -- ) { for ( c = 0 ; c < j ; c ++ ) { sum = greater ( arr [ j ] [ c ] , arr [ j ] [ c + 1 ] ) ; arr [ j - 1 ] [ c ] += sum ; } } case_no [ i ] = arr [ 0 ] [ 0 ] ; } for ( i = 0 ; i < cases ; i ++ ) printf ( \"%d\" , case_no [ i ] ) ; exit ( 0 ) ; }", "label": 1, "id": 15700}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int x = a , y = b ; while ( x % y ) { int temp = y ; y = x % y ; x = temp ; } printf ( \"%d %d\n\" , y , a * b / y ) ; } }", "label": 1, "id": 24402}
{"input": "int main ( ) { int a , b , x , t , l , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( l = 1 ; l <= t ; ++ l ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) { x = a ; } else { x = b ; } for ( ; x >= 1 ; x -- ) { if ( a % x == 0 && b % x == 0 ) { gcd = x ; lcm = ( a * b ) / gcd ; break ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 8270}
{"input": "int main ( ) { int t , i , j , n ; unsigned long a , s = 100000 , p ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; unsigned long num [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lu\" , & num [ j ] ) ; a = num [ j ] ; if ( a < s ) { s = a ; } } p = ( n - 1 ) * s ; printf ( \"%d\n\" , p ) ; } return 0 ; }", "label": 1, "id": 12239}
{"input": "int max1 ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int n , i , j , k , arr [ t ] , max , temp ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; for ( j = 1 ; j < n - 1 ; j ++ ) { scanf ( \"%d\" , & temp ) ; a [ j ] [ 0 ] = temp + a [ j - 1 ] [ 0 ] ; for ( k = 1 ; k < j ; k ++ ) { scanf ( \"%d\" , & temp ) ; a [ j ] [ k ] = max1 ( temp + a [ j - 1 ] [ k - 1 ] , temp + a [ j - 1 ] [ k ] ) ; } scanf ( \"%d\" , & temp ) ; a [ j ] [ j ] = a [ j - 1 ] [ j - 1 ] + temp ; } scanf ( \"%d\" , & temp ) ; max = temp + a [ n - 2 ] [ 0 ] ; for ( j = 1 ; j < n - 1 ; j ++ ) { scanf ( \"%d\" , & temp ) ; temp = max1 ( temp + a [ n - 2 ] [ j - 1 ] , temp + a [ n - 2 ] [ j ] ) ; if ( temp > max ) max = temp ; } scanf ( \"%d\" , & temp ) ; temp = temp + a [ n - 2 ] [ n - 2 ] ; if ( temp > max ) max = temp ; arr [ i ] = max ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d \n\" , arr [ i ] ) ; } return 0 ; }", "label": 0, "id": 20713}
{"input": "int mat [ MAX ] [ MAX ] ; int max ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int tc , i , j , k , n ; scanf ( \"%d\" , & tc ) ; for ( k = 0 ; k < tc ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & mat [ i ] [ j ] ) ; if ( j < i + 1 ) scanf ( \"\n\" ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { mat [ i ] [ j ] = mat [ i ] [ j ] + max ( mat [ i + 1 ] [ j ] , mat [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , mat [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 3075}
{"input": "int main ( ) { int a [ 500 ] [ 500 ] ; int t , n , i , k , j , sum , key = 0 ; scanf ( \"%d\n\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { k = 0 ; for ( j = i ; k <= i ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } sum = 0 ; for ( i = 1 ; i < n ; i ++ ) { k = 0 ; key = a [ i ] [ 0 ] ; for ( j = i ; k <= i ; k ++ ) { if ( a [ j ] [ k + 1 ] != '\\0' ) { if ( key < a [ j ] [ k + 1 ] ) { key = a [ j ] [ k + 1 ] ; } } } sum = sum + key ; } printf ( \"%d\n\" , sum ) ; t -- ; } return 0 ; }", "label": 1, "id": 24424}
{"input": "int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int n , cnt = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] >= a [ j - 1 ] ) cnt ++ ; else break ; } } printf ( \"%lld\n\" , cnt + n ) ; } return 0 ; }", "label": 0, "id": 17124}
{"input": "void main ( ) { int t , c , a , b , i , j ; scanf ( \"%d\" , & t ) ; for ( c = 1 ; c <= t ; c ++ ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; ( i <= a ) && ( i <= b ) ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) j = i ; } printf ( \"%d %d\n\" , j , ( a * b ) / j ) ; } }", "label": 1, "id": 3329}
{"input": "int a [ 100 ] [ 100 ] ; void max_sum ( int d ) ; int main ( ) { int t , h , val , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & h ) ; for ( i = 0 ; i < h ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & val ) ; a [ i ] [ j ] = val ; } max_sum ( h - 1 ) ; } return 0 ; } void max_sum ( int d ) { int t = 0 , i ; if ( d == 0 ) { printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } else { for ( i = 0 ; i < d ; i ++ ) a [ d - 1 ] [ i ] += ( max ( a [ d ] [ i ] , a [ d ] [ i + 1 ] ) ) ; max_sum ( d - 1 ) ; } }", "label": 0, "id": 16243}
{"input": "int main ( ) { int n , t ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] ; for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( int i = t - 1 ; i > 0 ; i -- ) for ( int j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17150}
{"input": "int gcd ( long long int a , long long int b ) { if ( b != 0 ) return gcd ( b , a % b ) ; else return a ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int q , p ; scanf ( \"%lld %lld\" , & q , & p ) ; long long int h = gcd ( q , p ) ; long long int l = ( p * q ) / h ; printf ( \"%lld %lld\n\" , h , l ) ; } return 0 ; }", "label": 0, "id": 22954}
{"input": "int main ( ) { int i , j , n , a [ 100 ] [ 100 ] ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17408}
{"input": "int main ( ) { int t , i ; long long int a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; long long int n = a , m = b ; while ( a != b ) { if ( a > b ) { a -= b ; } else { b -= a ; } } gcd = a ; lcm = ( n * m ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 2280}
{"input": "void findmax ( int * a , int n , int * p ) { int temp = 0 , i ; for ( i = 0 ; i < n ; i ++ ) if ( temp < a [ i ] ) { temp = a [ i ] ; * p = i ; } return ; } int main ( ) { int t , * a , n , i , * cost , p = 0 , x , ad = 0 , f , g ; scanf ( \"%d\" , & t ) ; cost = ( int * ) malloc ( t * sizeof ( int ) ) ; while ( t -- ) { cost [ p ] = 0 ; scanf ( \"%d\" , & n ) ; x = n ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; x != 1 ; i ++ ) { findmax ( a , n , & ad ) ; if ( ( ad + 1 ) < n && ( ad - 1 ) >= 0 ) { for ( i = ad + 1 ; i < n ; i ++ ) { if ( a [ i ] != - 1 ) { f = i ; break ; } } for ( i = ad - 1 ; i >= 0 ; i -- ) { if ( a [ i ] != - 1 ) { g = i ; break ; } } if ( a [ g ] > a [ f ] ) { a [ ad ] = - 1 ; x -- ; cost [ p ] += a [ f ] ; } else { a [ ad ] = - 1 ; x -- ; cost [ p ] += a [ g ] ; } } else if ( ad + 1 < n ) { for ( i = ad + 1 ; i < n ; i ++ ) { if ( a [ i ] != - 1 ) { f = i ; break ; } } a [ ad ] = - 1 ; x -- ; cost [ p ] += a [ f ] ; } else { for ( i = ad - 1 ; i >= 0 ; i -- ) { if ( a [ i ] != - 1 ) { g = i ; break ; } } a [ ad ] = - 1 ; x -- ; cost [ p ] += a [ g ] ; } } p ++ ; } for ( i = 0 ; i < p ; i ++ ) printf ( \"%d\n\" , cost [ i ] ) ; return 0 ; }", "label": 2, "id": 23233}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; int n , i , j , k , r ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( j >= k ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } else { a [ j ] [ k ] = 0 ; } } } r = 0 ; for ( j = 1 ; j < n - 1 ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( k == 0 ) a [ j + 1 ] [ k ] = a [ j + 1 ] [ k ] + a [ j ] [ k ] ; else a [ j + 1 ] [ k ] = max ( ( a [ j ] [ k - 1 ] + a [ j + 1 ] [ k ] ) , ( a [ j ] [ k ] + a [ j + 1 ] [ k ] ) ) ; } } for ( j = 0 ; j < n ; j ++ ) { if ( r < a [ n - 1 ] [ j ] ) r = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , r + a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4539}
{"input": "int a [ 50000 ] = { 0 } ; int main ( ) { int t , i , n , min = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i == 0 ) min = a [ 0 ] ; else { if ( min > a [ i ] ) min = a [ i ] ; } } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 26648}
{"input": "int gcd ( int m , int n ) { if ( n == 0 ) return m ; else return gcd ( n , m % n ) ; } int lcm ( int m , int n ) { return ( m * n ) / gcd ( m , n ) ; } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int m , n , gc , lc ; scanf ( \"%d\" , & m ) ; scanf ( \"%d\" , & n ) ; gc = gcd ( m , n ) ; lc = lcm ( m , n ) ; printf ( \"%d \" , gc ) ; printf ( \"%d \n\" , lc ) ; } }", "label": 1, "id": 10663}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , a , b , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ) ; } } int gcd ( int a , int b ) { if ( a == b ) return ( a ) ; if ( a % b == 0 ) return ( b ) ; if ( b % a == 0 ) return ( a ) ; if ( a > b ) return ( gcd ( a % b , b ) ) ; else return ( gcd ( a , b % a ) ) ; }", "label": 1, "id": 1770}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b != 0 ) return gcd ( b , a % b ) ; return a ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , g ; scanf ( \"%lld %lld\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 0, "id": 24791}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , T ; scanf ( \"%d\" , & T ) ; for ( t = 0 ; t < T ; t ++ ) { int N ; scanf ( \"%d\" , & N ) ; long long int A [ N ] [ N ] ; int i , j ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%lld\" , & A [ i ] [ j ] ) ; } } long long int sum [ 100 ] [ 100 ] = { 0 } ; sum [ 0 ] [ 0 ] = A [ 0 ] [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { sum [ i ] [ 0 ] = A [ i ] [ 0 ] + sum [ i - 1 ] [ 0 ] ; for ( j = 1 ; j <= i ; j ++ ) { sum [ i ] [ j ] = max ( sum [ i - 1 ] [ j ] , sum [ i - 1 ] [ j - 1 ] ) + A [ i ] [ j ] ; } } long long int max = sum [ N - 1 ] [ 0 ] ; for ( i = 0 ; i <= N - 1 ; i ++ ) { if ( sum [ N - 1 ] [ i ] > max ) max = sum [ N - 1 ] [ i ] ; } printf ( \"%lld\n\" , max ) ; } return 0 ; }", "label": 0, "id": 7061}
{"input": "main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , min = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 18860}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int n1 , n2 , remainder , numerator , denominator , lcm , gcd ; while ( t -- ) { lcm = 0 , gcd = 0 , denominator = 0 ; scanf ( \"%d%d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { numerator = n1 ; denominator = n2 ; } else { numerator = n2 ; denominator = n1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = n1 * n2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 24102}
{"input": "void main ( ) { int t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { long int n , m , a , b , l ; scanf ( \"%lu%lu\" , & a , & b ) ; n = a ; m = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } l = ( m * n ) / a ; printf ( \"%lu %lu\n\" , a , l ) ; } }", "label": 0, "id": 12324}
{"input": "long long int gcd ( long long int a , long long int b ) ; int main ( ) { long long int t , a , b , g , l ; scanf ( \"%lld\" , & t ) ; while ( t != 0 ) { scanf ( \"%lld%lld\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a / g ) * b ; printf ( \"%lld %lld\n\" , g , l ) ; t -- ; } return 0 ; } long long int gcd ( long long int a , long long int b ) { long long int t ; while ( b != 0 ) { t = a % b ; a = b ; b = t ; } return a ; }", "label": 0, "id": 10255}
{"input": "int main ( ) { int n , num , i , j , MaxSum ; int a [ 100 ] [ 100 ] ; int b [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { b [ i ] [ j ] = - 1 ; } } MaxSum = SumsInTriangle ( 0 , 0 , num , a , b ) ; printf ( \"%d\" , MaxSum ) ; } ; return 0 ; } int Max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int SumsInTriangle ( int i , int j , int num , int a [ 100 ] [ 100 ] , int b [ 100 ] [ 100 ] ) { int t ; if ( i >= num ) return 0 ; else if ( b [ i ] [ j ] != - 1 ) return b [ i ] [ j ] ; t = ( Max ( SumsInTriangle ( i + 1 , j , num , a , b ) , SumsInTriangle ( i + 1 , j + 1 , num , a , b ) ) + a [ i ] [ j ] ) ; b [ i ] [ j ] = t ; return t ; }", "label": 1, "id": 23706}
{"input": "int compare_ints ( const void * a , const void * b ) { const long int * p , * q ; p = ( const long int * ) a ; q = ( const long int * ) b ; if ( * p == * q ) return 0 ; else if ( * p > * q ) return 1 ; else return - 1 ; } int main ( ) { long int n ; int i ; long int * a ; scanf ( \"%d\" , & n ) ; a = ( long int * ) malloc ( sizeof ( long int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; qsort ( a , n , sizeof ( long int ) , compare_ints ) ; for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , a [ i ] ) ; return 0 ; }", "label": 3, "id": 18337}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int r ; long x , y , a , b , gcd , lcm ; scanf ( \"%ld %ld\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { r = a % b ; a = b ; b = r ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 11447}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 26614}
{"input": "int maxim ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( ) { int triangle [ 100 ] [ 100 ] [ 2 ] = { 0 } ; int i , j , k , n , m , max ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & m ) ; for ( j = 0 ; j < 100 ; j ++ ) for ( k = 0 ; k < 100 ; k ++ ) triangle [ j ] [ k ] [ 0 ] = triangle [ j ] [ k ] [ 1 ] = 0 ; for ( j = 0 ; j < m ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & triangle [ j ] [ k ] [ 0 ] ) ; max = 0 ; triangle [ 0 ] [ 0 ] [ 1 ] = triangle [ 0 ] [ 0 ] [ 0 ] ; for ( j = 1 ; j < m ; j ++ ) { triangle [ j ] [ 0 ] [ 1 ] = triangle [ j - 1 ] [ 0 ] [ 1 ] + triangle [ j ] [ 0 ] [ 0 ] ; for ( k = 1 ; k <= j ; k ++ ) triangle [ j ] [ k ] [ 1 ] = maxim ( triangle [ j - 1 ] [ k - 1 ] [ 1 ] , triangle [ j - 1 ] [ k ] [ 1 ] ) + triangle [ j ] [ k ] [ 0 ] ; } for ( j = 0 ; j < m ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) if ( triangle [ j ] [ k ] [ 1 ] > max ) max = triangle [ j ] [ k ] [ 1 ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 26777}
{"input": "int a [ 1000 ] [ 1000 ] ; int cache [ 1000 ] [ 1000 ] ; int n ; int m = - 1 ; int sum ( int r , int c , int s ) { if ( r == n ) { return 0 ; } if ( cache [ r ] [ c ] ) { s += cache [ r ] [ c ] ; if ( s > m ) { m = s ; } return ; } s = s + a [ r ] [ c ] ; if ( s > m ) { m = s ; } sum ( r + 1 , c + 1 , s ) ; sum ( r + 1 , c , s ) ; cache [ r ] [ c ] = m - s ; } int main ( ) { int i , j ; int c ; scanf ( \"%d\" , & c ) ; while ( c != 0 ) { c -- ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum ( 0 , 0 , 0 ) ; printf ( \"%d\n\" , m ) ; memset ( cache , 0 , sizeof ( cache ) ) ; m = - 1 ; } return 0 ; }", "label": 1, "id": 25652}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int arr [ 100000 ] ; long int n ; int i , j ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; } long long int cnt = 0 , flag = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = i ; j < n - 1 ; j ++ ) { if ( arr [ j + 1 ] >= arr [ j ] ) cnt ++ ; } } cnt = cnt + n ; printf ( \"%lld\" , cnt ) ; } return 0 ; }", "label": 2, "id": 9819}
{"input": "int main ( ) { int j , T ; long a , b , x , gcd , lcm ; scanf ( \"%d\" , & T ) ; for ( j = 1 ; j <= T ; j ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a < b ) { x = a ; } else { x = b ; } for ( ; x >= 1 ; x -- ) { if ( a % x == 0 && b % x == 0 ) { gcd = x ; break ; } } lcm = a * b / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 16106}
{"input": "int main ( ) { int n , t , summax , number , a [ 99 ] [ 99 ] , s [ 99 ] [ 99 ] , counter , counter1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & number ) ; counter = 1 ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; while ( counter < number ) { scanf ( \"%d\" , & a [ counter ] [ 0 ] ) ; s [ counter ] [ 0 ] = a [ counter ] [ 0 ] + s [ counter - 1 ] [ 0 ] ; counter1 = 1 ; while ( counter1 < counter ) { scanf ( \"%d\" , & a [ counter ] [ counter1 ] ) ; if ( s [ counter - 1 ] [ counter1 ] > s [ counter - 1 ] [ counter1 - 1 ] ) { s [ counter ] [ counter1 ] = s [ counter - 1 ] [ counter1 ] + a [ counter ] [ counter1 ] ; } else s [ counter ] [ counter1 ] = s [ counter - 1 ] [ counter1 - 1 ] + a [ counter ] [ counter1 ] ; counter1 ++ ; } scanf ( \"%d\" , & a [ counter ] [ counter1 ] ) ; s [ counter ] [ counter1 ] = s [ counter - 1 ] [ counter1 - 1 ] + a [ counter ] [ counter1 ] ; counter ++ ; } n = number - 1 ; counter = 0 ; summax = 0 ; while ( counter < number ) { if ( summax < s [ n ] [ counter ] ) summax = s [ number ] [ counter ] ; counter ++ ; } printf ( \"%d\n\" , summax ) ; } return 0 ; }", "label": 3, "id": 1078}
{"input": "int main ( ) { int t , i , j , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; for ( j = a ; j >= 1 ; j -- ) if ( a % j == 0 && b % j == 0 ) { printf ( \"%d\" , j ) ; break ; } for ( j = 1 ; j <= a * b ; j ++ ) if ( j % a == 0 && j % b == 0 ) { printf ( \" %d\" , j ) ; break ; } printf ( \"\n\" ) ; } return 0 ; }", "label": 2, "id": 10947}
{"input": "int main ( void ) { int t = 0 ; long int a = 0 , b = 0 , temp = 0 ; long int lcm = 0 , gcd = 0 , i = 0 , j = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { lcm = gcd = 0 ; temp = 0 ; scanf ( \"%ld %ld\" , & a , & b ) ; i = a ; j = b ; if ( b > a ) { temp = b ; b = a ; a = temp ; } temp = 0 ; while ( b != 0 && a != 0 ) { temp = b ; a %= b ; b = a ; a = temp ; } gcd = a == 0 ? b : a ; lcm = gcd * ( i / gcd ) * ( j / gcd ) ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 20464}
{"input": "int n ; int ms ( int a [ n ] [ n ] , int i , int j ) { if ( i == n - 1 ) return a [ i ] [ j ] ; else return a [ i ] [ j ] + max ( ms ( a , i + 1 , j ) , ms ( a , i + 1 , j + 1 ) ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int i , j , a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; int ans = ms ( a , 0 , 0 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 2, "id": 10225}
{"input": "int main ( int argc , char const * argv [ ] ) { int array [ 100 ] [ 100 ] ; int t , k ; int i , j ; int sum = 0 , max = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & array [ i ] [ j ] ) ; } } for ( i = k - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < k + 1 ; j ++ ) { if ( array [ i ] [ j ] > array [ i ] [ j + 1 ] ) array [ i - 1 ] [ j ] += array [ i ] [ j ] ; else array [ i - 1 ] [ j ] += array [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , array [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 10419}
{"input": "int main ( void ) { int testcases ; scanf ( \"%d\" , & testcases ) ; int count_testcases = 0 ; int gcd_cases [ testcases ] , lcm_cases [ testcases ] ; int k = 0 ; while ( count_testcases < testcases ) { int number1 , number2 ; scanf ( \"%d %d\" , & number1 , & number2 ) ; gcd_cases [ k ] = gcd ( number1 , number2 ) ; lcm_cases [ k ] = ( number1 * number2 ) / gcd_cases [ k ] ; k ++ ; count_testcases ++ ; } int i ; for ( i = 0 ; i < testcases ; i ++ ) { printf ( \"%d %d\n\" , gcd_cases [ i ] , lcm_cases [ i ] ) ; } } int gcd ( int number1 , int number2 ) { if ( number2 == 0 ) return number1 ; else return gcd ( number2 , number1 % number2 ) ; }", "label": 1, "id": 26104}
{"input": "int n ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int sumtri ( int arr [ n + 1 ] [ n + 1 ] , int n , int row , int col ) { if ( row == n ) return 0 ; else { if ( col + 1 < n ) return max ( sumtri ( arr , n , row + 1 , col ) + arr [ row + 1 ] [ col ] , sumtri ( arr , n , row + 1 , col + 1 ) + arr [ row + 1 ] [ col + 1 ] ) ; else if ( col + 1 == n ) return sumtri ( arr , n , row + 1 , col ) + arr [ row + 1 ] [ col ] ; else return 0 ; } } int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- > 0 ) { int i , j ; scanf ( \"%d\" , & n ) ; int arr [ n + 1 ] [ n + 1 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] + sumtri ( arr , n , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 15977}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { int t ; long long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return 0 ; } long long int gcd ( long long int a , long long int b ) { if ( a % b == 0 ) return b ; else gcd ( b , a % b ) ; }", "label": 0, "id": 15021}
{"input": "int main ( ) { int t , u ; scanf ( \"%d\" , & t ) ; if ( t <= 1000 ) { for ( u = 1 ; u <= t ; u ++ ) { int n , i , j , k ; scanf ( \"%d\" , & n ) ; if ( n > 0 && n < 100 ) { int arr [ n ] [ n ] ; int sum = 0 ; int m = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( k = 0 ; k <= i ; k ++ ) { if ( arr [ i ] [ k ] > m ) ; m = arr [ i ] [ k ] ; } sum = sum + m ; m = 0 ; } printf ( \"%d\n\" , sum ) ; } return 0 ; } } }", "label": 1, "id": 8724}
{"input": "int main ( void ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long a , b , j , k , l , lcm , gcd ; scanf ( \"%li\" , & a ) ; scanf ( \"%li\" , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } k = a ; l = b ; while ( 1 ) { if ( a % b != 0 ) { gcd = a % b ; j = a ; a = b % a ; b = j ; } else break ; } lcm = ( k * l ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 1102}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int T ; long int Ain , Bin ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%ld %ld\" , & Ain , & Bin ) ; printf ( \"%ld %ld\n\" , gcd ( Ain , Bin ) , ( Ain * Bin ) / gcd ( Ain , Bin ) ) ; T -- ; } return 0 ; } long int gcd ( long int n1 , long int n2 ) { if ( n2 != 0 ) return gcd ( n2 , n1 % n2 ) ; else return n1 ; }", "label": 0, "id": 25317}
{"input": "void initialize ( int lines ) ; int findSum ( int matrix [ 100 ] [ 100 ] , int lines ) ; int max ( int a , int b ) ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int findSum ( int matrix [ 100 ] [ 100 ] , int lines ) { int i = 0 ; while ( lines > 1 ) { for ( i = 0 ; i <= lines - 2 ; i ++ ) { matrix [ lines - 2 ] [ i ] = matrix [ lines - 2 ] [ i ] + max ( matrix [ lines - 1 ] [ i ] , matrix [ lines - 1 ] [ i + 1 ] ) ; } lines -- ; } return matrix [ 0 ] [ 0 ] ; } void initialize ( int lines ) { int matrix [ 100 ] [ 100 ] ; int i = 0 ; int a = 0 ; int val = 0 ; for ( ; i < lines ; i ++ ) { for ( ; a < lines ; a ++ ) { if ( a > i ) matrix [ i ] [ a ] = 0 ; else { scanf ( \"%d\" , & matrix [ i ] [ a ] ) ; if ( matrix [ i ] [ a ] > 99 || matrix [ i ] [ a ] < 0 ) return ; } } a = 0 ; } val = findSum ( matrix , lines ) ; printf ( \"%d\" , val ) ; } int main ( ) { int cases = 0 ; int lines = 0 ; int i = 0 ; scanf ( \"%d\" , & cases ) ; if ( lines < 0 || lines > 100 ) { return - 1 ; } for ( ; i < cases ; i ++ ) { scanf ( \"%d\" , & lines ) ; initialize ( lines ) ; } return 0 ; }", "label": 1, "id": 20627}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j ; unsigned long n , temp ; scanf ( \"%lu\" , & n ) ; unsigned long arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lu\" , & arr [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n && arr [ j ] > arr [ j + 1 ] ) { temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( \"%lu \" , arr [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 2618}
{"input": "int fastInput ( ) { int val = 0 ; char c = getchar_unlocked ( ) ; while ( c < 33 ) c = getchar_unlocked ( ) ; while ( c > 33 ) val = ( val << 1 ) + ( val << 3 ) + ( c - '0' ) , c = getchar_unlocked ( ) ; return val ; } int main ( void ) { int i , t , n , min , temp ; t = fastInput ( ) ; while ( t -- ) { n = fastInput ( ) ; min = fastInput ( ) ; for ( i = 1 ; i < n ; i ++ ) { temp = fastInput ( ) ; if ( temp < min ) min = temp ; } long long int ans = ( long long int ) min * ( long long int ) ( n - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 11885}
{"input": "int los ( int x [ ] , int max ) { int i = 0 , count = 0 ; int not = max - 1 ; int num , temp , j ; for ( j = 0 ; j < not ; j ++ ) { count ++ ; num = x [ i ] + x [ i + count ] + x [ count + i + 1 ] ; i = i + count ; if ( num > temp ) { temp = num ; } temp = num ; } printf ( \"%d\n\" , temp ) ; return 0 ; } int main ( ) { int non , i , j , k ; scanf ( \"%d\" , & non ) ; int ar [ non ] ; for ( i = 0 ; i < non ; i ++ ) { scanf ( \"%d\" , & ar [ i ] ) ; k = ( ar [ i ] * ( ar [ i ] + 1 ) ) / 2 ; int ar1 [ k ] ; for ( j = 0 ; j < k ; j ++ ) scanf ( \"%d\" , & ar1 [ j ] ) ; los ( ar1 , ar [ i ] ) ; } return 0 ; }", "label": 1, "id": 5771}
{"input": "int main ( ) { int a , b , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"1 %d\n\" , a * b ) ; } }", "label": 1, "id": 25282}
{"input": "int main ( ) { int test , n , i , j ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 17171}
{"input": "int main ( ) { int T , i = 0 ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { int N , j = 0 ; scanf ( \"%d\" , & N ) ; long long int a [ N ] , ku = 100000 ; for ( j = 0 ; j < N ; j ++ ) scanf ( \"%lld\" , & a [ j ] ) ; for ( j = 0 ; j < N ; j ++ ) { if ( ku >= a [ j ] ) ku = a [ j ] ; } printf ( \"%lld\n\" , ku * ( N - 1 ) ) ; } return 0 ; }", "label": 0, "id": 2265}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int i , n , a ; scanf ( \"%d\" , & n ) ; long int min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a ) ; if ( a < min ) { min = a ; } } min = min * ( n - 1 ) ; printf ( \"%ld\n\" , min ) ; } }", "label": 0, "id": 7132}
{"input": "short int i , j ; int main ( ) { short int t ; scanf ( \"%d\" , & t ) ; char * name [ t ] , * p ; char n [ 100 ] ; short int len , store [ t ] , counter = 0 ; j = 0 ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%s\" , n ) ; len = strlen ( n ) ; p = ( char * ) malloc ( len + 1 ) ; strcpy ( p , n ) ; name [ i ] = p ; while ( * name [ i ] != '\\0' ) { switch ( * name [ i ] ) { case 'A' : case 'D' : case 'O' : case 'P' : case 'R' : case 'Q' : j ++ ; break ; case 'B' : j = j + 2 ; } store [ counter ] = j ; name [ i ] ++ ; } counter ++ ; j = 0 ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , store [ i ] ) ; } return 0 ; }", "label": 1, "id": 749}
{"input": "typedef long long int ll ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ 100001 ] ; int i , j ; ll ans = 0 , x = 0 ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) { int flag = 1 ; for ( j = i ; j <= n && flag ; j ++ ) { if ( arr [ j ] <= arr [ j + 1 ] ) x ++ ; else { ans += ( x * ( x + 1 ) ) / 2 ; i = j ; x = 0 ; flag = 0 ; } } } printf ( \"%lld\n\" , ans + n ) ; } }", "label": 0, "id": 22496}
{"input": "int solve ( int i , int j , int n ) ; int a [ 105 ] [ 105 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , l , s ; scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } s = solve ( 0 , 0 , l ) ; printf ( \"%d\n\" , s ) ; } return 0 ; } int solve ( int i , int j , int n ) { int t1 , t2 , t ; if ( i >= n ) return 0 ; else { t1 = solve ( i + 1 , j , n ) ; t2 = solve ( i + 1 , j + 1 , n ) ; t = ( ( t1 > t2 ) ? ( t1 + a [ i ] [ j ] ) : ( t2 + a [ i ] [ j ] ) ) ; return t ; } }", "label": 2, "id": 24151}
{"input": "void main ( ) { int t , i , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\n\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d\\t\" , gcd ) ; printf ( \" %d\" , lcm ) ; } }", "label": 1, "id": 16778}
{"input": "int main ( ) { long i , j , T , n , a , b ; long cost = 0 ; scanf ( \"%li\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%li\" , & n ) ; scanf ( \"%li\" , & a ) ; cost = 0 ; for ( j = 2 ; j <= n ; j ++ ) { scanf ( \"%li\" , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } cost += a ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 9083}
{"input": "void main ( ) { int test_cases , num_rows , temp , i , j ; scanf ( \"%d\" , & test_cases ) ; for ( i = 0 ; i < test_cases ; i ++ ) { scanf ( \"%d\" , & num_rows ) ; int list [ num_rows * ( num_rows + 1 ) / 2 ] ; for ( j = 0 ; j < num_rows * ( num_rows + 1 ) / 2 ; j ++ ) { scanf ( \"%d\" , & temp ) ; list [ j ] = temp ; } max_path ( list , num_rows ) ; } } void max_path ( int list [ ] , int rows ) { int i , j ; for ( i = rows - 1 ; i > 0 ; i -- ) { for ( j = i * ( i + 1 ) / 2 ; j > i * ( i - 1 ) / 2 ; j -- ) { if ( list [ j - 1 + i ] > list [ j - 1 + i + 1 ] ) list [ j - 1 ] = list [ j - 1 ] + list [ j - 1 + i ] ; else list [ j - 1 ] = list [ j - 1 ] + list [ j - 1 + i + 1 ] ; } } printf ( \"%d\n\" , list [ 0 ] ) ; }", "label": 0, "id": 20183}
{"input": "int main ( ) { int t ; long int a , b ; long long int prod ; printf ( \"Enter value of t\n\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"\nEnter value of a and b\n\" ) ; scanf ( \"%d %d\" , & a , & b ) ; prod = a * b ; while ( b != a ) { if ( b > a ) b = b - a ; else a = a - b ; } printf ( \"\n%d %d\n\" , a , ( prod / a ) ) ; } return 0 ; }", "label": 1, "id": 13209}
{"input": "int main ( ) { int a [ 10 ] [ 10 ] ; int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"enter how many lines you want: \" ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( \"enter line %d: \" , i + 1 ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) a [ i - 1 ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; printf ( \"sum is: %d\" , a [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 18370}
{"input": "int main ( ) { long long int T , a , b , z , i , m , n , v ; scanf ( \"%lld\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( b > a ) { z = a ; a = b ; b = z ; } m = a ; n = b ; while ( a % b != 0 ) { a = a % b ; if ( b > a ) { z = a ; a = b ; b = z ; } } printf ( \"%lld \" , b ) ; v = m ; while ( v % m != 0 || v % n != 0 ) { v = v + b ; } printf ( \"%lld\n\" , v ) ; } return 0 ; }", "label": 2, "id": 23562}
{"input": "int main ( ) { long int n ; int t , small , i , a [ n ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } small = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( small > a [ i ] ) { small = a [ i ] ; } } printf ( \"%d\n\" , small * ( n - 1 ) ) ; } }", "label": 3, "id": 25828}
{"input": "int main ( ) { int testCases , sizeData , itrInner , itrOuter , max = 0 , addThis ; int data [ MAX ] [ MAX ] ; int maxPath [ MAX ] [ MAX ] ; scanf ( \"%d\" , & testCases ) ; while ( testCases -- ) { scanf ( \"%d\" , & sizeData ) ; for ( itrInner = 0 ; itrInner < sizeData ; itrInner ++ ) { for ( itrOuter = 0 ; itrOuter < sizeData ; itrOuter ++ ) { if ( itrOuter <= itrInner ) scanf ( \"%d\" , & data [ itrInner ] [ itrOuter ] ) ; else data [ itrInner ] [ itrOuter ] = 0 ; } } for ( itrInner = 0 ; itrInner < sizeData ; itrInner ++ ) { for ( itrOuter = 0 ; itrOuter <= itrInner ; itrOuter ++ ) { if ( itrInner != 0 && itrOuter != 0 ) { addThis = ( maxPath [ itrInner - 1 ] [ itrOuter ] >= maxPath [ itrInner - 1 ] [ itrOuter - 1 ] ) ? maxPath [ itrInner - 1 ] [ itrOuter ] : maxPath [ itrInner - 1 ] [ itrOuter - 1 ] ; } else if ( itrInner == 0 && itrOuter == 0 ) addThis = 0 ; else if ( itrInner != 0 && itrOuter == 0 ) { addThis = maxPath [ itrInner - 1 ] [ itrOuter ] ; } maxPath [ itrInner ] [ itrOuter ] = data [ itrInner ] [ itrOuter ] + addThis ; } } for ( itrInner = 0 ; itrInner < sizeData ; itrInner ++ ) { if ( max < maxPath [ sizeData - 1 ] [ itrInner ] ) max = maxPath [ sizeData - 1 ] [ itrInner ] ; } printf ( \"%d\n\" , max ) ; } }", "label": 1, "id": 7822}
{"input": "int lcmnum ( int x , int y ) { int z ; z = ( x < y ) ? x : y ; for ( int j = 2 ; j <= z ; j ++ ) { if ( x % j == 0 && y % j == 0 ) { return z ; break ; } } return x * y ; } int main ( ) { int t , m , k ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; m = lcmnum ( a , b ) ; k = a * b / m ; printf ( \"%d %d\n\" , k , m ) ; } }", "label": 1, "id": 10522}
{"input": "int main ( ) { int t , i = 0 , n , * a , cost , j ; scanf ( \"%d\" , & t ) ; while ( i != t ) { scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( j = 0 ; j <= n - 1 ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; cost = 0 ; for ( j = 0 ; j <= n - 2 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { a [ j ] = 0 ; cost = a [ j + 1 ] ; } else { a [ j + 1 ] = 0 ; cost = a [ j ] + cost ; } } printf ( \"%d\n\" , cost ) ; i ++ ; } }", "label": 1, "id": 12143}
{"input": "int main ( ) { long int t , i ; scanf ( \"%lld\" , & t ) ; while ( t > 0 ) { int n , i , j , c = 0 ; scanf ( \"%lld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } c = n ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] > a [ j - 1 ] ) { c ++ ; } else break ; } } printf ( \"count is %lld\" , c ) ; } return 0 ; }", "label": 2, "id": 9178}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , r , n , d ; printf ( \"enter two num\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { n = num1 ; d = num2 ; } else { n = num2 ; d = num1 ; } r = n % d ; while ( ( r != 0 ) ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = num1 * num2 / gcd ; printf ( \"GCDis=%d\n\" , gcd ) ; printf ( \"LCMis=%d\n\" , lcm ) ; }", "label": 1, "id": 21190}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , a [ 100 ] [ 100 ] , n , j , i , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & x ) ; a [ i ] [ j ] = x ; } for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23032}
{"input": "int main ( ) { int tc ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { int n , i , index , arr [ 50000 ] , brr [ 25000 ] ; scanf ( \"%d\" , & n ) ; for ( index = 0 ; index < n ; index ++ ) scanf ( \"%d\" , arr + index ) ; int cost = 0 ; while ( n != 1 ) { i = 0 ; for ( index = 0 ; index < n ; index += 2 ) { if ( index + 1 < n && arr [ index ] <= arr [ index + 1 ] ) brr [ i ++ ] = arr [ index ] , cost += arr [ index ] ; else if ( index + 1 < n && arr [ index ] > arr [ index + 1 ] ) brr [ i ++ ] = arr [ index + 1 ] , cost += arr [ index + 1 ] ; else brr [ i ++ ] = arr [ index ] ; } n = i ; for ( index = 0 ; index < i ; ++ index ) arr [ index ] = brr [ index ] ; } printf ( \"%d\n\" , cost ) ; } }", "label": 1, "id": 518}
{"input": "long pow ( int b , int p ) { long ans = 1 ; while ( p -- ) ans *= b ; return ans ; } int main ( ) { int t , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; int max = r * ( r + 1 ) / 2 ; unsigned char j = 1 , i = 0 ; unsigned char now [ 100 ] ; unsigned char * prev = NULL , * next = NULL ; unsigned char maxn = 0 ; while ( j <= r ) { i = 0 ; while ( i < j ) { scanf ( \"%hhu\" , & now [ i ] ) ; i ++ ; } next = ( unsigned char * ) malloc ( sizeof ( unsigned char ) * pow ( 2 , j - 1 ) ) ; unsigned char k = 0 ; unsigned char l = 0 ; i = 0 ; unsigned long power = pow ( 2 , j - 1 ) ; while ( l < power ) { if ( j != 1 ) next [ l ] = prev [ k ] + now [ i ] ; else next [ l ] = now [ i ] ; if ( maxn < next [ l ] ) maxn = next [ l ] ; l ++ ; i ++ ; if ( l >= power ) break ; next [ l ] = prev [ k ] + now [ i ] ; if ( maxn < next [ l ] ) maxn = next [ l ] ; l ++ ; k ++ ; } j ++ ; i = 0 ; prev = ( unsigned char * ) realloc ( prev , 0 ) ; prev = next ; } printf ( \"%hhu\n\" , maxn ) ; } return 0 ; }", "label": 2, "id": 14689}
{"input": "int main ( ) { int a , x , y , b , n , t , gcd , lcm ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d \" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 16165}
{"input": "int main ( void ) { int testCases ; scanf ( \"%d\" , & testCases ) ; while ( testCases -- ) { int num1 , num2 ; scanf ( \"%d%d\" , & num1 , & num2 ) ; int gcd = 1 , i ; int lcm ; if ( num1 > num2 ) lcm = num1 ; else lcm = num2 ; i = 2 ; while ( 1 ) { if ( lcm % num1 == 0 && lcm % num2 == 0 ) break ; else { lcm = num2 * i ; i ++ ; } } gcd = ( num1 * num2 ) / lcm ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 20371}
{"input": "int main ( ) { int i , j , t , n , a [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = max ( a [ i ] [ j ] + a [ i + 1 ] [ j ] , a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22090}
{"input": "void quickSort ( int [ ] , int , int ) ; void swa ( int * , int * ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; if ( n == 1 ) { scanf ( \"%d\" , & i ) ; printf ( \"%d\n\" , i ) ; } else { int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; quickSort ( arr , 0 , n - 1 ) ; int sum = arr [ 0 ] * ( n - 1 ) ; printf ( \"%d\n\" , sum ) ; } } } int partition ( int a [ ] , int low , int high ) { int i , j , pivot ; pivot = a [ high ] ; i = low - 1 ; for ( j = low ; j <= high - 1 ; j ++ ) { if ( a [ j ] <= pivot ) { i ++ ; swa ( & a [ i ] , & a [ j ] ) ; } } swa ( & a [ i + 1 ] , & a [ high ] ) ; return ( i + 1 ) ; } void quickSort ( int a [ ] , int low , int high ) { if ( low < high ) { int p = partition ( a , low , high ) ; quickSort ( a , low , p - 1 ) ; quickSort ( a , p + 1 , high ) ; } } void swa ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; }", "label": 2, "id": 4081}
{"input": "int a [ 1000 ] [ 1000 ] ; int sum [ 100 ] ; void action ( int t ) { int i , j ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < t ; i ++ ) { sum [ i ] = a [ i ] [ 0 ] + a [ i + 1 ] [ 0 ] + a [ i + 1 ] [ 1 ] ; } int max = 0 ; for ( i = 0 ; i < t ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\n\" , max ) ; } int main ( ) { int t , n , x ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; action ( t ) ; } return 0 ; }", "label": 1, "id": 14473}
{"input": "void calculate ( int [ ] [ 100 ] , int rows ) ; int main ( ) { int n , rows , i , j , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 1 ; i <= rows ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; calculate ( a , rows ) ; } return 0 ; } void calculate ( int a [ ] [ 100 ] , int rows ) { int k , i , j ; for ( i = rows ; i >= 2 ; i -- ) for ( j = 1 ; j <= i - 1 ; j ++ ) { k = ( a [ i ] [ j + 1 ] > a [ i ] [ j ] ) ; a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + k ] ; } printf ( \"%d\" , a [ 1 ] [ 1 ] ) ; printf ( \"\n\" ) ; }", "label": 3, "id": 6164}
{"input": "int main ( ) { long long int n , i , j , n1 , n2 , p , q , r , GCD , LCM ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld%lld\" , & n1 , & n2 ) ; if ( n1 > n2 ) { p = n1 ; q = n2 ; } else { p = n2 ; q = n1 ; } r = p % q ; for ( j = 0 ; r != 0 ; j ++ ) { p = q ; q = r ; r = p % q ; } GCD = q ; LCM = ( n1 * n2 ) / GCD ; printf ( \"%lld %lld\n\" , GCD , LCM ) ; } return 0 ; }", "label": 0, "id": 10754}
{"input": "int main ( ) { int T , h , l ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int p , q ; scanf ( \"%d%d\" , & p , & q ) ; h = hcf ( p , q ) ; l = ( p * q ) / h ; printf ( \"%d\\t%d\" , h , l ) ; } return 0 ; } int hcf ( int a , int b ) { while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } return a ; }", "label": 1, "id": 25399}
{"input": "int hcf ( int a , int b ) ; int main ( ) { int a , b , t , h , i ; long long int l ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( \"%d %lld\n\" , h , l ) ; } return 0 ; } int hcf ( int x , int y ) { if ( y == 0 ) return x ; if ( x == 0 ) return y ; else return hcf ( y , x % y ) ; }", "label": 1, "id": 19110}
{"input": "int main ( ) { long n , i , h , l ; scanf ( \"%lld\" , & n ) ; long a [ 2 ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld %ld\" , & a [ 0 ] [ i ] , & a [ 1 ] [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( h = a [ 0 ] [ i ] < a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; h >= 1 ; h -- ) { if ( a [ 0 ] [ i ] % h == 0 && a [ 1 ] [ i ] % h == 0 ) break ; } printf ( \"%ld \" , h ) ; printf ( \"%ld\n\" , a [ 0 ] [ i ] * a [ 1 ] [ i ] / h ) ; } return 0 ; }", "label": 2, "id": 12756}
{"input": "int main ( void ) { int t , a , b , r , d , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; d = a > b ? a : b ; r = a < b ? a : b ; while ( d % r ) { d %= r ; s = d ; d = r ; r = s ; } printf ( \"%d %d\n\" , r , a * b / r ) ; } return 0 ; }", "label": 1, "id": 8537}
{"input": "int main ( void ) { int t , b ; long long int n , i , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%llu\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%llu\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { cost += a [ i + 1 ] ; b = a [ i ] ; } else { cost += a [ i ] ; a [ i ] = a [ i + 1 ] ; } } printf ( \"%llu\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 15835}
{"input": "int main ( ) { int t , i , min , n ; long long int c ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { c = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } c = ( n - 1 ) * min ; printf ( \"%lld\n\" , c ) ; t -- ; } return 0 ; }", "label": 0, "id": 19843}
{"input": "int main ( ) { int t ; long long int a , b , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; int x = 1 ; long long int l = 1 ; x = a ; y = b ; while ( x != y ) { if ( y > x ) y = y - x ; else x = x - y ; } l = ( ( a * b ) / x ) ; printf ( \"%d %lld\n\" , x , l ) ; } return 0 ; }", "label": 0, "id": 15043}
{"input": "long int gcd ( long int a , long int b ) { long int c ; while ( b ) { c = a % b ; a = b ; b = c ; } return a ; } long long int lcm ( long int a , long int b , long int g ) { return a / g * b ; } int main ( ) { int T ; long int a , b ; long int g ; long long int l ; scanf ( \"%d\" , & T ) ; while ( T ) { scanf ( \"%ld %ld\" , & a , & b ) ; g = gcd ( a > b ? a : b , a > b ? b : a ) ; l = lcm ( a , b , g ) ; printf ( \"%ld %lld\n\" , g , l ) ; T -- ; } return 0 ; }", "label": 0, "id": 8204}
{"input": "main ( ) { int a [ 100 ] [ 100 ] , i , j , d , f , c , l , max , k ; scanf ( \"%d\" , & c ) ; for ( k = 1 ; k <= c ; k ++ ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 && i == 0 ) a [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == 0 ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else if ( j == i ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; else { d = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; f = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; if ( d >= f ) a [ i ] [ j ] = d ; else a [ i ] [ j ] = f ; } } } max = a [ l - 1 ] [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) { if ( a [ l - 1 ] [ i ] > max ) max = a [ l - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 10534}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } }", "label": 1, "id": 19213}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { int n , i ; scanf ( \"%d\" , & n ) ; long long int a [ n ] , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } int min , max ; min = a [ 0 ] ; max = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( max > a [ i ] ) { min = a [ i ] ; } else { min = a [ i - 1 ] ; max = a [ i ] ; } sum += min ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 1499}
{"input": "int main ( ) { int i , n ; long int a , b , c , gcd , lcm , prod ; scanf ( \"%d\" , & n ) ; if ( n <= 1 && n <= 1000 ) { for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%l %l\" , & a , & b ) ; if ( a >= 1 && a <= 1000000 && b >= 1 && b <= 1000000 ) { prod = a * b ; while ( b != 0 ) { c = a % b ; if ( c != 0 ) { a = b ; b = c ; } else { gcd = b ; } } } } lcm = prod / gcd ; printf ( \"\n%l %l\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 26176}
{"input": "int main ( ) { long int t , n , i , j , min , ans , arr [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & arr [ j ] ) ; min = arr [ 0 ] ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( arr [ j ] <= min ) min = arr [ j ] ; } ans = min * ( n - 1 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 3, "id": 21959}
{"input": "void quicksort ( int sum [ ] , int first , int last ) { int pivot , j , temp , i ; if ( first < last ) { pivot = first ; i = first ; j = last ; while ( i < j ) { while ( sum [ i ] <= sum [ pivot ] && i < last ) i ++ ; while ( sum [ j ] > sum [ pivot ] ) j -- ; if ( i < j ) { temp = sum [ i ] ; sum [ i ] = sum [ j ] ; sum [ j ] = temp ; } } temp = sum [ pivot ] ; sum [ pivot ] = sum [ j ] ; sum [ j ] = temp ; quicksort ( sum , first , j - 1 ) ; quicksort ( sum , j + 1 , last ) ; } } int main ( ) { int t , num , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & num ) ; int arry [ num ] ; long long ans ; for ( i = 0 ; i < num ; i ++ ) { scanf ( \"%d\" , & arry [ i ] ) ; } quicksort ( arry , 0 , num - 1 ) ; ans = ( num - 1 ) * arry [ 0 ] ; printf ( \"%lld\n\" , ans ) ; } return ( 0 ) ; }", "label": 0, "id": 25786}
{"input": "int main ( void ) { int numOfTestCases ; int inputs ; int storage [ MAX ] [ MAX ] ; int count , i , j ; int n ; int max_sum ; scanf ( \"%d\" , & numOfTestCases ) ; for ( count = 0 ; count < numOfTestCases ; count ++ ) { scanf ( \"%d\" , & inputs ) ; max_sum = 0 ; for ( i = 0 ; i < inputs ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & n ) ; if ( i == 0 ) { storage [ i ] [ j ] = n ; max_sum = n ; break ; } else { if ( j == 0 ) { storage [ i ] [ j ] = n + storage [ i - 1 ] [ j ] ; max_sum = storage [ i ] [ j ] ; } else { if ( i == j ) { storage [ i ] [ j ] = n + storage [ i - 1 ] [ j - 1 ] ; } else { storage [ i ] [ j ] = n + max ( storage [ i - 1 ] [ j - 1 ] , storage [ i - 1 ] [ j ] ) ; } max_sum = max ( max_sum , storage [ i ] [ j ] ) ; } } } } printf ( \"%d\n\" , max_sum ) ; } return 0 ; }", "label": 0, "id": 20869}
{"input": "int main ( ) { int T , a , b , x , y , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a >= b ) { x = a ; y = b ; } else { x = b ; y = a ; } lcm = x * y ; while ( y != 0 ) { gcd = x % y ; x = y ; y = gcd ; } lcm = lcm / x ; printf ( \"%d %d\n\" , x , lcm ) ; } scanf ( \"%d\" ) ; return 0 ; }", "label": 1, "id": 19413}
{"input": "int main ( ) { unsigned int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { unsigned int n , j , k ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; int min = a [ 0 ] ; for ( k = 0 ; k < n ; k ++ ) { if ( a [ k ] < min ) min = a [ k ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 15348}
{"input": "int main ( ) { int t ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ 50000 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int j ; int minimum = 100000 ; for ( i = 0 ; i < n ; i ++ ) { if ( minimum > a [ i ] ) minimum = a [ i ] ; } printf ( \"%d\n\" , minimum * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 16983}
{"input": "long int gcd1 ( long int a , long int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd1 ( a - b , b ) ; else return gcd1 ( a , b - a ) ; } long int lcm1 ( long int a , long int b ) { return ( a * b ) / gcd1 ( a , b ) ; } int main ( ) { int i , t ; long int a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; if ( t < 1 || t > 1000 ) return 0 ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( ( a < 1 || a > 1000000 ) || ( b < 1 || b > 1000000 ) ) return ; gcd = gcd1 ( a , b ) ; lcm = lcm1 ( a , b ) ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 4954}
{"input": "int main ( ) { long long int j , t , n , i , count , len ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; count = 0 ; long long int cur , prev ; scanf ( \"%lld\" , & prev ) ; len = 1 ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & cur ) ; if ( cur >= prev ) { ++ len ; } else { count += ( len * ( len + 1 ) ) / 2 ; len = 1 ; } prev = cur ; } count += ( len * ( len + 1 ) ) / 2 ; printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 0, "id": 6879}
{"input": "int main ( ) { int i , j , d , in [ 100 ] [ 100 ] , tc , r , b ; scanf ( \"%d\" , & tc ) ; while ( tc -- > 0 ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & in [ i ] [ j ] ) ; d = r - 1 ; while ( d > 0 ) { for ( i = 0 ; i < d ; i ++ ) { b = in [ d ] [ i ] < in [ d ] [ i + 1 ] ; in [ d - 1 ] [ i ] += in [ d ] [ i + b ] ; } -- d ; } printf ( \"%d\n\" , in [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23702}
{"input": "int max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; int i ; int t ; int j ; int k ; int maxm ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; int arr [ t ] ; int temp [ t ] ; for ( j = 0 ; j < t ; j ++ ) { arr [ j ] = 0 ; temp [ j ] = 0 ; } for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & temp [ k ] ) ; } for ( k = j ; k > - 1 ; k -- ) { if ( k != 0 ) { arr [ k ] = max ( arr [ k ] , arr [ k - 1 ] ) + temp [ k ] ; } else { arr [ 0 ] = arr [ 0 ] + temp [ 0 ] ; } } } maxm = 0 ; for ( j = 0 ; j < t ; j ++ ) { maxm = max ( maxm , arr [ j ] ) ; } printf ( \"%d\n\" , maxm ) ; } return 0 ; }", "label": 0, "id": 6916}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int n ; scanf ( \"%d\" , & n ) ; int i , a , min = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( min == 0 || min > a ) min = a ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 3400}
{"input": "int main ( ) { int t , i , n , m , k , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n , & m ) ; for ( i = 1 ; i <= n && i <= m ; ++ i ) { if ( n % i == 0 && m % i == 0 ) gcd = i ; } printf ( \"%d %d\" , gcd , ( n * m ) / gcd ) ; } return 0 ; }", "label": 1, "id": 2724}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23010}
{"input": "int main ( ) { long long max = 0 ; int t , n , i , j , a [ 101 ] [ 101 ] = { 0 } , s [ 101 ] [ 101 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { max = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; else if ( j == 0 ) s [ i ] [ 0 ] = a [ i ] [ 0 ] + s [ i - 1 ] [ 0 ] ; else { if ( s [ i - 1 ] [ j - 1 ] > s [ i - 1 ] [ j ] ) s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } for ( j = 0 ; j < n ; j ++ ) if ( s [ n - 1 ] [ j ] > max ) max = s [ n - 1 ] [ j ] ; printf ( \"%lld\n\" , max ) ; } return 0 ; }", "label": 0, "id": 6723}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i - 1 ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15892}
{"input": "int triangle [ 100 ] [ 100 ] ; int lines ; int indices [ 128 ] ; int main ( ) { int testcases , i , j , k , l , m ; scanf ( \"%d\" , & testcases ) ; for ( i = 0 ; i < testcases ; i ++ ) { scanf ( \"%d\" , & lines ) ; for ( j = 0 ; j < lines ; j ++ ) { indices [ j ] = 0 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & triangle [ j ] [ k ] ) ; } } for ( j = lines - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { l = triangle [ j + 1 ] [ k ] ; m = triangle [ j + 1 ] [ k + 1 ] ; triangle [ j ] [ k ] += l > m ? l : m ; } } printf ( \"%d\n\" , triangle [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7960}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , j ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int * a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) ( malloc ( ( i + 1 ) * sizeof ( int ) ) ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) if ( j == 0 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else if ( a [ i - 1 ] [ j ] >= a [ i - 1 ] [ j - 1 ] ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; for ( j = 1 ; j < n ; j ++ ) if ( a [ n - 1 ] [ 0 ] < a [ n - 1 ] [ j ] ) a [ n - 1 ] [ 0 ] = a [ n - 1 ] [ j ] ; printf ( \"%d\n\" , a [ n - 1 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24245}
{"input": "long long gcd ( int x , int y ) ; int main ( ) { int T ; long long a , b , gcd_val , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; gcd_val = gcd ( a , b ) ; lcm = ( a * b ) / gcd_val ; printf ( \"%lld %lld\n\" , gcd_val , lcm ) ; } return 0 ; } long long gcd ( int x , int y ) { if ( y == 0 ) return x ; else return gcd ( y , x % y ) ; }", "label": 0, "id": 1331}
{"input": "int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { int n ; long long int s = 0 ; scanf ( \"%d\" , & n ) ; int p [ n ] , min = 100001 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & p [ j ] ) ; if ( p [ j ] < min ) { min = p [ j ] ; } } for ( j = 1 ; j < n ; j ++ ) { s = s + min ; } printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 23832}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , min = 99999999 , a , x ; scanf ( \"%d\" , & n ) ; x = n ; while ( x -- ) { scanf ( \"%d\" , & a ) ; if ( a < min ) min = a ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 3251}
{"input": "void LcmHcf ( long x , long y ) { long a = x , b = y , t ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } printf ( \"%ld %ld\n\" , a , ( x * y ) / a ) ; } int main ( ) { int n , i ; long a , b ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; LcmHcf ( a , b ) ; } return 0 ; }", "label": 0, "id": 9630}
{"input": "int main ( void ) { long long int t , i , j , count , n ; scanf ( \"%lld\" , & t ) ; long long int a [ 100005 ] ; long long int b [ 100005 ] ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; b [ 0 ] = 1 ; count = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - 1 ] ) b [ i ] = b [ i - 1 ] + 1 ; else b [ i ] = 1 ; count += b [ i ] ; } printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 0, "id": 11783}
{"input": "int main ( ) { int i , j , n , lines , sum ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & lines ) ; int item [ lines ] [ lines ] ; memset ( item , 0 , sizeof ( int ) * lines * lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & item [ i ] [ j ] ) ; } } sum = item [ 0 ] [ 0 ] ; for ( i = lines - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( item [ i + 1 ] [ j ] > item [ i + 1 ] [ j + 1 ] ) { item [ i ] [ j ] += item [ i + 1 ] [ j ] ; } else { item [ i ] [ j ] += item [ i + 1 ] [ j + 1 ] ; } } } printf ( \"\n%d\" , item [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 21173}
{"input": "int tc ; main ( ) { scanf ( \"%d\" , & tc ) ; while ( tc -- ) { long long int a , b , c , d , p , i ; scanf ( \"%lld\" , & a ) ; scanf ( \"%lld\" , & b ) ; if ( a > b ) { for ( i = b ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { c = i ; break ; } } } else { for ( i = a ; i >= 1 ; i -- ) { if ( b % i == 0 && a % i == 0 ) { c = i ; break ; } } } p = a * b ; for ( i = a ; i <= p ; i ++ ) { if ( i % a == 0 && i % b == 0 ) { d = i ; break ; } } printf ( \"%lld %lld\n\" , c , d ) ; } }", "label": 2, "id": 17974}
{"input": "int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } return a ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int hcf = gcd ( a , b ) ; long long int lcm = ( a * b ) / hcf ; printf ( \"%d %lld\" , hcf , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 16620}
{"input": "int main ( ) { int t ; long long i , a , b , rem , p , q , l ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; p = a ; q = b ; rem = a % b ; while ( rem > 0 ) { a = b ; b = rem ; rem = a % b ; } l = ( p * q ) / b ; printf ( \"%lld %lld\n\" , b , l ) ; } return 0 ; }", "label": 0, "id": 4292}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { long long int n , num , min = 1000000 ; scanf ( \"%lld\" , & n ) ; long long int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & num ) ; if ( num < min ) min = num ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 18507}
{"input": "int main ( void ) { int t , a , b , lcm , r , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; if ( a < b ) { r = b ; b = a ; a = r ; } r = a % b ; while ( r != 0 ) { a = b ; b = r ; r = a % b ; } lcm = x * y / b ; printf ( \"%d %d\n\" , b , lcm ) ; } return 0 ; }", "label": 1, "id": 12134}
{"input": "int a [ 100 ] [ 100 ] ; int nol , notc ; int max ; void add ( int r , int c , int sum ) { sum += a [ r ] [ c ] ; if ( r == nol ) { if ( sum > max ) max = sum ; return ; } else { add ( r + 1 , c , sum ) ; add ( r + 1 , c + 1 , sum ) ; } } void calc ( int t ) { int sum , i , j ; nol = 0 ; sum = 0 ; max = 0 ; scanf ( \"%d\" , & nol ) ; for ( i = 0 ; i < nol ; i ++ ) for ( j = 0 ; j < i + 2 ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < nol ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; add ( 0 , 0 , sum ) ; printf ( \"%d\n\" , max ) ; } int main ( ) { int tmp , i ; scanf ( \"%d\" , & notc ) ; tmp = notc ; while ( tmp -- ) { calc ( notc - tmp ) ; } return 1 ; }", "label": 2, "id": 4406}
{"input": "int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int a , b , t , x , y , lcm ; scanf ( \"%lld%lld\" , & x , & y ) ; a = x ; b = y ; if ( x < y ) { while ( x > 0 ) { t = x ; x = y % x ; y = t ; } } else { while ( y > 0 ) { t = y ; y = x % y ; x = t ; } lcm = ( a * b ) / t ; printf ( \"%lld %lld\n\" , t , lcm ) ; } } return 0 ; }", "label": 1, "id": 21570}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int n1 , i , j ; scanf ( \"%d\" , & n1 ) ; int a [ n1 ] [ n1 ] ; for ( i = 1 ; i <= n1 ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n1 - 1 ; i > 0 ; i -- ) { for ( j = 1 ; j <= n1 ; j ++ ) { a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } }", "label": 3, "id": 15958}
{"input": "int main ( ) { int t , n , i , j , a , o = 0 , m , d ; int oy [ 3 ] = { 5 , 3 , 1 } ; char od [ 7 ] [ 15 ] = { \"sunday\" , \"monday\" , \"tuesday\" , \"wednesday\" , \"thursday\" , \"friday\" , \"saturday\" } ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; d = 1 ; m = 1 ; n = n - 1 ; n = n % 400 ; a = n / 100 ; n = n % 100 ; n = n + 24 + oy [ a ] ; o = n % 7 ; printf ( \"%s\n\" , od [ o ] ) ; } return 0 ; }", "label": 1, "id": 23958}
{"input": "int main ( ) { int a , b , gcd , i , n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; printf ( \"%d %d\n\" , gcd , ( a * b ) / gcd ) ; } } } return 0 ; }", "label": 1, "id": 21840}
{"input": "int main ( ) { int t ; long int a , b , min , lcm , gcd ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) min = b ; else min = a ; for ( long z = min ; z >= 1 ; z -- ) { if ( a % z == 0 && b % z == 0 ) { gcd = z ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 7019}
{"input": "int maxsum = 0 ; void fun ( int arr [ 100 ] [ 100 ] , int i , int j , int sum , int n ) ; int main ( ) { int t , n , i , j , sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { arr [ i ] [ j ] = - 1 ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } fun ( arr , 0 , 0 , 0 , n ) ; printf ( \"%d\" , maxsum ) ; } } void fun ( int arr [ 100 ] [ 100 ] , int i , int j , int sum , int n ) { int k = 0 ; if ( i <= n - 1 ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + 1 ] ) { j = j + 1 ; k = 1 ; } sum = sum + arr [ i ] [ j ] ; fun ( arr , i + 1 , j , sum , n ) ; if ( maxsum < sum ) maxsum = sum ; } if ( i < n - 1 ) { if ( k == 1 ) { sum = sum - arr [ i ] [ j ] ; j = j - 1 ; } else { sum = sum - arr [ i ] [ j ] ; j = j + 1 ; } sum = sum + arr [ i ] [ j ] ; fun ( arr , i + 1 , j , sum , n ) ; } }", "label": 2, "id": 19939}
{"input": "int main ( ) { int k , t , i , j , n , a [ 100000 ] , l , m ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { k = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( l = 0 ; l < n ; l ++ ) { for ( m = l ; m < n ; m ++ ) { if ( a [ m ] <= a [ m + 1 ] ) k ++ ; else break ; } } printf ( \"%d\n\" , k + n ) ; } return 0 ; }", "label": 0, "id": 16346}
{"input": "int main ( ) { int a , b , c , k , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"dd\" , & a , & b ) ; k = a * b ; while ( a % b != 0 ) { c = a % b ; a = b ; b = c ; } printf ( \"%d %d\n\" , c , k / c ) ; } return 0 ; }", "label": 3, "id": 7293}
{"input": "int gcd ( int k , int j ) { if ( j % k == 0 ) return k ; else return gcd ( j % k , k ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i ; scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 12608}
{"input": "void main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n1 , n2 , minmultiple ; scanf ( \"%d %d\" , & n1 , & n2 ) ; minmultiple = ( n1 > n2 ) ? n1 : n2 ; while ( 1 ) { if ( minmultiple % n1 == 0 && minmultiple % n2 == 0 ) { printf ( \"%d %d\" , ( n1 * n2 ) / minmultiple , minmultiple ) ; break ; } ++ minmultiple ; } } }", "label": 2, "id": 19290}
{"input": "unsigned int input ( ) { char c = get ( ) ; unsigned int n = 0 ; while ( c < '0' || c > '9' ) c = get ( ) ; while ( c >= '0' && c <= '9' ) { n = ( n << 1 ) + ( n << 3 ) + ( c & 15 ) ; c = get ( ) ; } return n ; } unsigned int gcd ( unsigned int a , unsigned int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; int shift = __builtin_ctz ( a | b ) ; a >>= __builtin_ctz ( a ) ; do { b >>= __builtin_ctz ( b ) ; if ( a > b ) { a += b ; b = a - b ; a = a - b ; } b -= a ; } while ( b ) ; return a << shift ; } int main ( ) { unsigned int t , a , b , c ; t = input ( ) ; while ( t -- ) { a = input ( ) ; b = input ( ) ; c = gcd ( a , b ) ; printf ( \"%d %d\n\" , c , a / c * b ) ; } return 0 ; }", "label": 1, "id": 13809}
{"input": "int main ( void ) { int Arr [ 100 ] = { } ; int N = 0 , Rows = 0 , i = 0 , j = 0 , Input = 0 , Previous = 0 , Max = 0 , Temp = 0 ; scanf ( \"%d*\n\" , & N ) ; getchar ( ) ; while ( N -- ) { for ( i = 0 ; i < 100 ; i ++ ) Arr [ i ] = 0 ; Max = 0 ; i = 0 ; scanf ( \"%d*\n\" , & Rows ) ; getchar ( ) ; scanf ( \" %d*\n\" , & Arr [ i ] ) ; getchar ( ) ; for ( i = 1 ; i < Rows ; i ++ ) { j = 0 ; scanf ( \"%d*\n\" , & Input ) ; getchar ( ) ; Previous = Arr [ j ] ; Arr [ j ] += Input ; for ( j = 1 ; j < i - 1 ; j ++ ) { scanf ( \"%d\" , & Input ) ; getchar ( ) ; Temp = Arr [ j ] ; if ( Previous >= Arr [ j ] ) { Arr [ j ] = Previous + Input ; } else { Temp = Arr [ j ] ; Arr [ j ] += Input ; } Previous = Temp ; } scanf ( \"%d*\n\" , & Input ) ; getchar ( ) ; Arr [ j ] = Previous + Input ; } i = 0 ; Max = Arr [ i ] ; for ( i = 1 ; i < Rows ; i ++ ) { if ( Arr [ i ] > Max ) Max = Arr [ i ] ; } printf ( \"%d\n\" , Max ) ; } return 0 ; }", "label": 1, "id": 16405}
{"input": "long int gcd ( long int a , long int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { long int i , j , t , a , b , x , y ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; x = gcd ( b , a ) ; printf ( \"%ld \" , x ) ; y = a * b / x ; printf ( \"%ld\n\" , y ) ; } return 0 ; }", "label": 0, "id": 1689}
{"input": "int main ( ) { long int t , te , a , b , a1 , b1 , i , gcd , max , min , lcm ; scanf ( \"%ld\" , & t ) ; for ( te = 0 ; te < t ; te ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; a1 = a ; b1 = b ; i = 1 ; while ( i <= a1 && i <= b1 ) { if ( a1 % i == 0 && b1 % i == 0 ) { gcd = i ; } i ++ ; } if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } lcm = max / gcd ; lcm = lcm * min ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 25602}
{"input": "int main ( ) { int t , n , a , b , g , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) i = b ; else i = a ; for ( ; i >= 1 ; i -- ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { g = i ; break ; } } printf ( \"%d %d\n\" , g , a * b / g ) ; } return 0 ; }", "label": 1, "id": 8044}
{"input": "int main ( ) { int t , a , b , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; int g = 1 ; long long int l = 1 ; if ( a == 0 || b == 0 ) printf ( \"0 0\" ) ; else if ( a > b ) { for ( i = 2 ; i < ( a / 2 ) ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g = g * i ; } } else { for ( i = 2 ; i < ( b / 2 ) ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g = g * i ; } } l = ( ( a * b ) / g ) ; printf ( \"%d %lld\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 21288}
{"input": "int main ( ) { int n , i , k , m , j , s = 0 , val , max = 0 , a [ 50 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & m ) ; for ( j = 1 ; j <= m ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & val ) ; s = s + val ; } if ( s > max ) max = s ; } a [ i ] = max ; max = 0 ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\" , a [ i ] ) ; } }", "label": 3, "id": 3474}
{"input": "int main ( int argc , char * argv [ ] ) { int * results ; int sums [ 100 ] ; int round , rounds ; int line , width ; int i , tmp ; scanf ( \"%d\" , & rounds ) ; results = calloc ( rounds , sizeof ( int ) ) ; for ( round = 0 ; round < rounds ; ++ round ) { scanf ( \"%d\" , & width ) ; for ( i = 0 ; i < width ; ++ i ) sums [ i ] = 0 ; for ( line = 0 ; line < width ; ++ line ) { for ( i = 0 ; i < line + 1 ; ++ i ) { scanf ( \"%d\" , & tmp ) ; sums [ i ] += tmp ; } } for ( i = 0 ; i < line + 1 ; ++ i ) { if ( results [ round ] < sums [ i ] ) { results [ round ] = sums [ i ] ; } } } for ( round = 0 ; round < rounds ; ++ round ) { printf ( \"%d\n\" , results [ round ] ) ; } free ( results ) ; return 0 ; }", "label": 1, "id": 8939}
{"input": "int subarray ( int A [ ] , int p ) { int i = 0 , j , count , sum = 0 , size = p ; while ( i < p ) { j = i ; count = 0 ; while ( j < size - 1 ) { if ( A [ j ] <= A [ j + 1 ] ) { j ++ ; i ++ ; count = 1 ; } else break ; } sum = sum + count ; i ++ ; } return sum + p ; } int main ( ) { int n , i , p , j ; scanf ( \"%d\" , & n ) ; printf ( \"\n\" ) ; int b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & p ) ; int a [ p ] ; for ( j = 0 ; j < p ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } b [ i ] = subarray ( a , p ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , b [ i ] ) ; } }", "label": 1, "id": 23827}
{"input": "int main ( ) { int t , i ; long long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; int g = 1 ; long long int l = 1 ; if ( a > b ) { for ( i = 2 ; i <= ( b / 2 ) ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g = g * i ; } } else { for ( i = 2 ; i <= ( a / 2 ) ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g = g * i ; } } l = ( ( a * b ) / g ) ; printf ( \"%d %lld\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 11130}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long N ; scanf ( \"%ld\" , & N ) ; int A [ N ] ; long i ; long ans ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%d\" , & A [ i ] ) ; int min = A [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) if ( min > A [ i ] ) min = A [ i ] ; ans = ( N - 1 ) * min ; printf ( \"%ld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 19710}
{"input": "int main ( ) { int a , b , num , den , rem , gcd , lcm ; scanf ( \"%d\\t%d\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( a * b ) / gcd ; printf ( \"%d\" , gcd ) ; printf ( \"\\t%d\" , lcm ) ; return 0 ; }", "label": 1, "id": 8906}
{"input": "long long int fastread ( ) { long long int input ; char c = getchar_unlocked ( ) ; while ( c < 33 ) c = getchar_unlocked ( ) ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { long long int t , a , b , i , j , num , dend , div , quo , rem = - 1 , gcd , lcm , k ; t = fastread ( ) ; while ( t -- ) { a = fastread ( ) ; b = fastread ( ) ; if ( a > b ) { dend = a ; div = b ; } else { dend = b ; div = a ; } while ( rem != 0 ) { rem = dend % div ; div = rem ; dend = div ; } gcd = dend ; if ( a > b ) { num = a ; k = b ; } else { num = b ; k = a ; } i = 2 ; while ( num % k != 0 ) { num *= i ; i ++ ; } lcm = num ; printf ( \"\n%lli %lli\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 13112}
{"input": "int main ( ) { int num1 , num2 , i , hcf , max , t , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; for ( i = 1 ; i <= num1 || i <= num2 ; ++ i ) { if ( num1 % i == 0 && num2 % i == 0 ) hcf = i ; } while ( 1 ) { if ( max % num1 == 0 && max % num2 == 0 ) { lcm = max ; break ; } ++ max ; } printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 23164}
{"input": "int mat [ 100 ] [ 100 ] , summat [ 100 ] [ 100 ] ; int main ( void ) { int t , n , i , j , k , max ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) summat [ i ] [ j ] = mat [ i ] [ j ] ; if ( j == 0 ) summat [ i ] [ j ] = mat [ i ] [ j ] + summat [ i - 1 ] [ j ] ; if ( j == i ) summat [ i ] [ j ] = mat [ i ] [ j ] + summat [ i - 1 ] [ j - 1 ] ; else { if ( summat [ i - 1 ] [ j ] > summat [ i - 1 ] [ j - 1 ] ) summat [ i ] [ j ] = mat [ i ] [ j ] + summat [ i - 1 ] [ j ] ; else summat [ i ] [ j ] = mat [ i ] [ j ] + summat [ i - 1 ] [ j - 1 ] ; } } } max = summat [ n - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( summat [ n - 1 ] [ j ] > max ) max = summat [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 19079}
{"input": "int gcd ( int a , int b ) ; long int lcm ( int a , int b , int d ) ; int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 1 ; i <= t ; i ++ ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int d = gcd ( a , b ) ; long int l = lcm ( a , b , d ) ; printf ( \"%d %ld\n\" , d , l ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a < b ) { int c = a ; a = b ; b = c ; } int n = a % b ; if ( n == 0 ) return b ; else return ( gcd ( b , n ) ) ; } long int lcm ( int a , int b , int d ) { long int l = ( long int ) ( a * b ) / d ; return l ; }", "label": 1, "id": 13714}
{"input": "int gcd ( int x , int y ) ; int main ( ) { int a [ 1000 ] , b [ 1000 ] , hcf , lcm ; int n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a [ i ] , & b [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { hcf = gcd ( a [ i ] , b [ i ] ) ; lcm = ( a [ i ] * b [ i ] ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; } int gcd ( int x , int y ) { if ( x == 0 ) return y ; while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 1, "id": 20811}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } }", "label": 0, "id": 8577}
{"input": "int hcf ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; if ( a >= b ) printf ( \"%d %d\" , hcf ( a , b ) , lcm ( a , b ) ) ; else printf ( \"%d %d\" , hcf ( b , a ) , lcm ( b , a ) ) ; } return 0 ; } int hcf ( int a , int b ) { if ( a % b == 0 ) return b ; return ( hcf ( b , a % b ) ) ; } int lcm ( int a , int b ) { int c = a ; while ( 1 ) { if ( c % b == 0 && c % a == 0 ) return c ; c ++ ; } }", "label": 2, "id": 18650}
{"input": "int main ( void ) { int a , c , i , j ; int x [ 102 ] [ 102 ] ; scanf ( \"%d\" , & a ) ; printf ( \"\n\" ) ; while ( a -- ) { scanf ( \"%d\" , & c ) ; for ( i = 0 ; i < c ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & x [ i ] [ j ] ) ; } } } for ( i = a - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { x [ i ] [ j ] += ( ( x [ i + 1 ] [ j ] > x [ i + 1 ] [ j + 1 ] ) ? x [ i + 1 ] [ j ] : x [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , x [ 0 ] [ 0 ] ) ; return 0 ; }", "label": 1, "id": 25341}
{"input": "int main ( ) { int i , t , ans = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , a + i ) ; b [ 0 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) b [ i ] = b [ i - 1 ] + 1 ; if ( a [ i - 1 ] > a [ i ] ) b [ i ] = 1 ; } for ( i = 0 ; i < n ; i ++ ) ans += b [ i ] ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 2218}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y , u , i ; scanf ( \"%d%d\" , & x , & y ) ; u = gcd ( x , y ) ; i = x * y / gcd ( x , y ) ; printf ( \"%d %d\n\" , u , i ) ; } return 0 ; }", "label": 1, "id": 44}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int rec ( int i , int j , int arr [ ] [ 101 ] , int maxs [ ] [ 101 ] ) { if ( arr [ i ] [ j ] == 0 ) return 0 ; if ( maxs [ i ] [ j ] != 0 ) return maxs [ i ] [ j ] ; int s1 = rec ( i + 1 , j , arr , maxs ) ; ; int s2 = rec ( i + 1 , j + 1 , arr , maxs ) ; maxs [ i ] [ j ] = arr [ i ] [ j ] + max ( s1 , s2 ) ; return maxs [ i ] [ j ] ; } int main ( ) { int t , r , n ; int i , j ; int arr [ 101 ] [ 101 ] = { 0 } , maxs [ 101 ] [ 101 ] = { 0 } ; scanf ( \"%d\" , & t ) ; for ( n = 0 ; n < t ; n ++ ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \" %d\" , & arr [ i ] [ j ] ) ; } } printf ( \"%d\n\" , rec ( 0 , 0 , arr , maxs ) ) ; memset ( arr , 0 , sizeof ( arr ) ) ; memset ( maxs , 0 , sizeof ( maxs ) ) ; } }", "label": 1, "id": 21410}
{"input": "main ( ) { int i , j , n , t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; int ar [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( ar [ i ] [ j ] > ar [ i ] [ j + 1 ] ) ar [ i - 1 ] [ j ] = ar [ i - 1 ] [ j ] + ar [ i ] [ j ] ; else ar [ i - 1 ] [ j ] = ar [ i - 1 ] [ j ] + ar [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 21690}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , min , c ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ n - 1 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } c = min * ( n - 1 ) ; printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 0, "id": 24761}
{"input": "int n ; int arr [ 101 ] [ 101 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int i , j ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { if ( i == 1 ) continue ; for ( j = 1 ; j <= i ; j ++ ) { if ( j - 1 >= 1 ) { if ( j == i ) { arr [ i ] [ j ] += arr [ i - 1 ] [ j - 1 ] ; } else { arr [ i ] [ j ] += ( arr [ i - 1 ] [ j ] > arr [ i - 1 ] [ j - 1 ] ? arr [ i - 1 ] [ j ] : arr [ i - 1 ] [ j - 1 ] ) ; } } else { arr [ i ] [ j ] += arr [ i - 1 ] [ j ] ; } } } int sum = - 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( arr [ n ] [ j ] > sum ) sum = arr [ n ] [ j ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 9851}
{"input": "int main ( ) { int t , i , n , j , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; unsigned long int cnt = 0 ; scanf ( \"%d\" , & n ) ; int * arr = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n && arr [ j ] > arr [ j + 1 ] ) cnt = cnt + arr [ j + 1 ] ; if ( j + 1 < n && arr [ j ] < arr [ j + 1 ] ) { cnt = cnt + arr [ j ] ; temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } printf ( \"%ld\n\" , cnt ) ; } return 0 ; }", "label": 1, "id": 18739}
{"input": "int gcd ( int num1 , int num2 ) ; int main ( ) { int t , num1 , num2 , GCD , LCM ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; GCD = gcd ( num1 , num2 ) ; LCM = ( num1 * num2 ) / GCD ; printf ( \"%d %d\n\" , GCD , LCM ) ; } return 0 ; } int gcd ( int num1 , int num2 ) { if ( num2 != 0 ) return gcd ( num2 , num1 % num2 ) ; else return num1 ; }", "label": 1, "id": 15879}
{"input": "main ( ) { long long int i , t , j , n ; scanf ( \"%lld\" , & t ) ; for ( i = t ; i > 0 ; i -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n - 1 ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lld\" , & a [ j ] ) ; long long int p = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < p ) p = a [ j ] ; } printf ( \"%lld\n\" , p * ( n - 1 ) ) ; } }", "label": 0, "id": 25152}
{"input": "int main ( ) { unsigned long long int i , j , max , s1 , s2 , t , n ; int A [ 102 ] [ 102 ] ; scanf ( \"%lli\" , & t ) ; while ( t -- ) { scanf ( \"%lli\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i >= j ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; } } i = 2 ; while ( i <= n ) { A [ i - 1 ] [ 0 ] = A [ i - 1 ] [ 0 ] + A [ i - 2 ] [ 0 ] ; j = 2 ; while ( j < i ) { s1 = A [ i - 1 ] [ j - 1 ] + A [ i - 2 ] [ j - 1 ] ; s2 = A [ i - 1 ] [ j - 1 ] + A [ i - 2 ] [ j - 2 ] ; if ( s1 > s2 ) A [ i - 1 ] [ j - 1 ] = s1 ; else A [ i - 1 ] [ j - 1 ] = s2 ; j ++ ; } A [ i - 1 ] [ j - 1 ] = A [ i - 1 ] [ j - 1 ] + A [ i - 2 ] [ j - 2 ] ; i ++ ; } max = A [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( A [ n - 1 ] [ i ] > max ) max = A [ n - 1 ] [ i ] ; } printf ( \"%lli\n\" , max ) ; } }", "label": 0, "id": 9213}
{"input": "int main ( ) { int t , n , i , c = 0 , a [ 10 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { c = c + a [ i + 1 ] ; } else { c = c + a [ i ] ; a [ i + 1 ] = a [ i ] ; } } printf ( \"\n %d\" , c ) ; } return 0 ; }", "label": 3, "id": 3371}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { static int r , a [ 99 ] [ 99 ] , i , j ; scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j = 0 ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else if ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; } } for ( i = 1 ; i < r ; i ++ ) if ( a [ r - 1 ] [ i ] > a [ r - 1 ] [ i - 1 ] ) j = a [ r - 1 ] [ i ] ; else j = a [ r - 1 ] [ i - 1 ] ; printf ( \"%d\n\" , j ) ; } return 0 ; }", "label": 2, "id": 21206}
{"input": "int main ( ) { int v ; long long int a , b , x , y , t , gcd , lcm ; scanf ( \"%d\" , & v ) ; while ( v -- ) { scanf ( \"%lld %lld\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"\n%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 26035}
{"input": "int main ( ) { int t , l , a [ 500 ] [ 500 ] = { 0 } , sum , big , i , j , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; x = 0 ; big = 0 ; for ( j = 0 ; j < l ; j ++ ) { if ( a [ l - 1 ] [ j ] > big ) { big = a [ l - 1 ] [ j ] ; x = j ; } } sum = big ; for ( i = l - 2 ; i >= 0 ; i -- ) { big = 0 ; j = x ; if ( a [ i ] [ j ] < a [ i ] [ j - 1 ] ) { x = j - 1 ; big = a [ i ] [ j - 1 ] ; } else { x = j ; big = a [ i ] [ j ] ; } sum += big ; } } printf ( \"%d\n\" , sum ) ; return 0 ; }", "label": 1, "id": 23301}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int n , i , j ; int count = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] > a [ i ] ) count ++ ; else break ; } } count = count + n ; printf ( \"%d\n\" , count ) ; t -- ; } return 0 ; }", "label": 1, "id": 13586}
{"input": "int main ( ) { int t , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 12313}
{"input": "int main ( void ) { long long t , n , f , s , ret , j , a ; scanf ( \" %lld\" , & t ) ; while ( t -- > 0 ) { scanf ( \" %lld\" , & n ) ; scanf ( \" %lld\" , & f ) ; s = f ; ret = 1 ; a = 1 ; for ( j = 1 ; j < n ; j ++ ) { s = f ; scanf ( \" %lld\" , & f ) ; if ( s <= f ) ++ a ; else a = 1 ; ret += a ; } printf ( \"%lld\n\" , ret ) ; } return 0 ; }", "label": 0, "id": 12375}
{"input": "int main ( ) { int t , n , i , j , a [ 200 ] [ 200 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return ( 0 ) ; }", "label": 0, "id": 15962}
{"input": "int main ( ) { int a , b , l , n , h ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( h = a < b ? a : b ; h >= 1 ; h -- ) { if ( a % h == 0 && b % h == 0 ) break ; } l = a * b / h ; printf ( \"%d %d\n\" , h , l ) ; } return 0 ; }", "label": 1, "id": 21745}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n , m , max , min , gcd , lcm ; scanf ( \"%d %d\" , & n , & m ) ; if ( n > m ) { max = n ; min = m ; } else { max = m ; min = n ; } for ( i = min ; i >= 1 ; i -- ) { if ( ( max % i == 0 ) && ( min % i == 0 ) ) { gcd = i ; break ; } } for ( i = 1 ; i <= min ; i ++ ) { j = max * i ; if ( j % min == 0 ) { lcm = j ; break ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 4968}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , i , j , tc ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 26965}
{"input": "int main ( ) { int t ; long long int n , m , a , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; m = n ; scanf ( \"%lld\" , & s ) ; m -- ; while ( m -- ) { scanf ( \"%lld\" , & a ) ; if ( a < s ) s = a ; } s = s * ( n - 1 ) ; printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 2406}
{"input": "int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; long long int min ; long long int n ; scanf ( \"%d\" , & n ) ; long long int ptr [ 50001 ] ; for ( j = 0 ; j < t ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & ptr [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { min = ptr [ 0 ] ; if ( ptr [ i ] < min ) min = ptr [ i ] ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 1, "id": 12897}
{"input": "int main ( ) { long long n , testcases , i ; long long arr [ 50000 ] , min ; scanf ( \"%lld\" , & testcases ) ; while ( testcases -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & arr [ i ] ) ; min = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return ( 0 ) ; }", "label": 0, "id": 7905}
{"input": "long long int GCD ( long long int a , long long int b ) { if ( b == 0 ) { return a ; } else { GCD ( b , a % b ) ; } } int main ( ) { long long int a , c , d , l ; scanf ( \"%lld\" , & a ) ; while ( a -- ) { scanf ( \"%lld%lld\" , & c , & d ) ; l = GCD ( c , d ) ; a = ( c * d ) / ( GCD ( c , d ) ) ; printf ( \"%lld %lld\n\" , l , a ) ; } return 0 ; }", "label": 2, "id": 17616}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 1 ; i <= t ; i ++ ) { int a , b , g , l ; scanf ( \"%d %d\" , & a , & b ) ; for ( int i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g = i ; } l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 849}
{"input": "int main ( ) { int arr [ 10 ] [ 10 ] , i , j , max = 0 , sum = 0 , k = 0 , t , n ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] [ 1 ] ) ; sum = sum + arr [ i ] [ 1 ] ; } printf ( \"%d\" , sum + 1 ) ; } return 0 ; }", "label": 2, "id": 21539}
{"input": "int a [ 100 ] [ 100 ] ; int max ( int i , int j , int l ) ; int main ( ) { int i , j , l , m , t ; j = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & l ) ; while ( j < l ) { for ( i = 0 ; i <= j ; i ++ ) scanf ( \"%d\" , & a [ j ] [ i ] ) ; j ++ ; } i = 0 ; j = 0 ; m = max ( i , j , l ) ; printf ( \"%d\n\" , m ) ; } return 0 ; } int max ( int i , int j , int l ) { int m , m1 , m2 ; if ( ( i + 1 ) == l ) { m = a [ i ] [ j ] ; return m ; } m1 = ( a [ i ] [ j ] + max ( i + 1 , j , l ) ) ; m2 = ( a [ i ] [ j ] + max ( i + 1 , j + 1 , l ) ) ; if ( m1 > m2 ) m = m1 ; else m = m2 ; return m ; }", "label": 2, "id": 13724}
{"input": "char rbuffer [ rbuffer_size ] ; int rfptr = rbuffer_size ; char wbuffer [ wbuffer_size ] ; int wfptr = 0 ; int readno = 0 ; void rd ( ) { rfptr = 0 ; readno = read ( 0 , rbuffer , sizeof ( rbuffer ) ) ; } int get_i ( ) { int sum = 0 ; char c ; int sign = 1 ; while ( 1 ) { if ( ( rfptr >= rbuffer_size ) || ( rfptr >= readno ) ) rd ( ) ; c = rbuffer [ rfptr ++ ] ; if ( c == '-' ) { sign = - 1 ; } else { if ( c == '\n' || c == ' ' ) return sum * sign ; else sum = sum * 10 + c - '0' ; } } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int t , n , i ; int * * p ; int k ; int tempval ; t = get_i ( ) ; while ( t -- > 0 ) { n = get_i ( ) ; p = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( k = 0 ; k <= i ; k ++ ) { p [ i ] [ k ] = get_i ( ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( k = 0 ; k <= i ; k ++ ) { p [ i ] [ k ] += max ( p [ i + 1 ] [ k ] , p [ i + 1 ] [ k + 1 ] ) ; } } printf ( \"%d\n\" , p [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 20975}
{"input": "int main ( ) { int nt , x , y , g , l , i ; scanf ( \"%d\" , & nt ) ; while ( nt -- ) { g = 0 , l = 0 ; scanf ( \"%d%d\" , & x , & y ) ; for ( i = 1 ; i <= ( x <= y ? x : y ) ; i ++ ) { if ( x % i == 0 && y % i == 0 ) g = i ; } for ( i = ( x >= y ? x : y ) ; i <= x * y ; i ++ ) { if ( i % x == 0 && i % y == 0 ) { l = i ; break ; } } printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 958}
{"input": "int main ( ) { long int T ; scanf ( \"%ld\" , & T ) ; while ( T > 0 ) { long int a , b , g , i ; long int x , y ; scanf ( \"%ld%ld\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } i = ( x * y ) / a ; printf ( \"%ld\" , a ) ; printf ( \" \" ) ; printf ( \"%ld\" , i ) ; T -- ; printf ( \"\n\" ) ; } return 0 ; }", "label": 0, "id": 1900}
{"input": "struct arr { int a [ 10 ] ; } b [ 5 ] , c [ 5 ] ; int n , i , n1 , j , k , max , m ; void job ( ) ; int main ( ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & n1 ) ; for ( j = 0 ; j < n1 ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & b [ j ] . a [ k ] ) ; } } job ( ) ; } } void job ( ) { c [ 0 ] . a [ 0 ] = b [ 0 ] . a [ 0 ] ; for ( j = 1 ; j < n1 ; j ++ ) { for ( k = 0 , m = 0 ; k < ( 2 * j ) ; k += 2 , m ++ ) { if ( j == 1 ) { c [ j ] . a [ k ] = b [ j ] . a [ k ] + b [ j - 1 ] . a [ k ] ; c [ j ] . a [ k + 1 ] = b [ j - 1 ] . a [ k ] + b [ j ] . a [ k + 1 ] ; } else { c [ j ] . a [ k ] = b [ j ] . a [ m ] + c [ j - 1 ] . a [ m ] ; c [ j ] . a [ k + 1 ] = b [ j ] . a [ m + 1 ] + c [ j - 1 ] . a [ m ] ; } } } max = c [ n1 - 1 ] . a [ 0 ] ; for ( k = 0 ; k < 2 * ( n1 - 1 ) ; k ++ ) { if ( c [ n1 - 1 ] . a [ k ] > max ) { max = c [ n1 - 1 ] . a [ k ] ; } } printf ( \"%d  \" , max ) ; }", "label": 3, "id": 16256}
{"input": "int lcm ( int a , int b ) { int l = 1 ; while ( gcd ( a , b ) != 1 ) { l = l * gcd ( a , b ) ; a = a / gcd ( a , b ) ; b = b / gcd ( a , b ) ; } l = l * a * b ; return ( l ) ; } int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return ( gcd ( b , a % b ) ) ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int min ( int a , int b ) { if ( a < b ) return a ; return b ; } int main ( ) { int a , b , c , d , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & c , & d ) ; a = max ( c , d ) ; b = min ( c , d ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 14317}
{"input": "int main ( ) { int tc ; int d [ 100000 ] ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { int n , count = 0 , i , j , k , flag = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & d [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { flag = 0 ; for ( k = i ; k < j ; k ++ ) { if ( d [ k ] < d [ k + 1 ] ) { flag ++ ; } else break ; } if ( flag == 0 ) count ++ ; } } printf ( \"%d\n\" , count + n ) ; } return 0 ; }", "label": 2, "id": 11278}
{"input": "int main ( ) { int t , n , i , cost ; long long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & b ) ; a = a < b ? a : b ; } printf ( \"%lld\n\" , a * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 9007}
{"input": "int main ( ) { int n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { long long int j , size ; scanf ( \"%lld\" , & size ) ; long long int ar [ size ] , t ; for ( j = 0 ; j < size ; j ++ ) { scanf ( \"%lld\" , & ar [ j ] ) ; if ( j == 0 ) { t = ar [ j ] ; } if ( j > 0 ) { if ( ar [ j ] < t ) { t = ar [ j ] ; } } } printf ( \"%lld\" , t ) ; } return 0 ; }", "label": 1, "id": 4774}
{"input": "int main ( ) { int a , b , n , lcm , x , y ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } lcm = ( x * y ) / a ; printf ( \"%d %d\n\" , a , lcm ) ; } return 0 ; }", "label": 1, "id": 12720}
{"input": "int main ( ) { int test , i ; long a , b , min , lcm , gcd , a1 , b1 ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; i = 2 ; lcm = 1 ; a1 = a ; b1 = b ; while ( a1 > 1 && b1 > 1 ) { if ( a1 % i == 0 && b1 % i == 0 ) { a1 = a1 / i ; b1 = b1 / i ; lcm = lcm * i ; } i ++ ; } gcd = ( a * b ) / lcm ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 13260}
{"input": "void main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int m , i ; scanf ( \"%lld\" , & m ) ; long long int a [ m ] ; for ( i = 0 ; i < m ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < m - 1 ; i ++ ) a [ i ] = ( a [ i ] < a [ i + 1 ] ) ? a [ i ] : a [ i + 1 ] ; printf ( \"%lld\n\" , a [ m - 2 ] ) ; } }", "label": 1, "id": 17747}
{"input": "int main ( ) { int t , i ; long int n , a [ 100000 ] , j , sum = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & a [ j ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] >= a [ j + 1 ] ) sum = sum + a [ j + 1 ] ; else sum = sum + a [ j ] ; } printf ( \"%ld\n\" , sum ) ; sum = 0 ; } return 0 ; }", "label": 1, "id": 22924}
{"input": "int arr [ 100 ] [ 100 ] ; int get ( ) { char c ; while ( c = getchar ( ) , ( c < '0' || c > '9' ) && ( c != '-' ) ) ; int flag = ( c == '-' ) ; if ( flag ) c = getchar ( ) ; int x = 0 ; while ( c >= '0' && c <= '9' ) { x = x * 10 + c - 48 ; c = getchar ( ) ; } return flag ? - x : x ; } int main ( ) { int n , t , i , j ; t = get ( ) ; while ( t -- ) { n = get ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] = get ( ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { arr [ i - 1 ] [ j ] += ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ? arr [ i ] [ j ] : arr [ i ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 3283}
{"input": "int hcf ( int n1 , int n2 ) ; int main ( ) { int gcd , n1 , n2 , lcm ; int t ; scanf ( \"%d\" , t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; gcd = hcf ( n1 , n2 ) ; printf ( \"%d %d\n\" , gcd , ( n1 * n2 ) / gcd ) ; } return 0 ; } int hcf ( int n1 , int n2 ) { if ( n2 != 0 ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; }", "label": 3, "id": 11755}
{"input": "int main ( ) { int t , i , j , k , a , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; int arr [ a ] [ a ] ; for ( j = 0 ; j < a ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } int ar [ a ] ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < a ; j ++ ) { ar [ i ] = ar [ i ] + arr [ j ] [ i ] ; } } m = ar [ 0 ] ; for ( i = 0 ; i < a ; i ++ ) { if ( ar [ i ] > m ) { m = ar [ i ] ; } } printf ( \"%d \n\" , m ) ; } return 0 ; }", "label": 2, "id": 19525}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long a , b , d , i , lcm , gcd ; scanf ( \"%ld%ld\" , & a , & b ) ; d = a > b ? b : a ; for ( i = d ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%ld  %ld\n\" , gcd , lcm ) ; } }", "label": 2, "id": 11373}
{"input": "int main ( ) { int t , n , i , j , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; int s [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { s [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & s [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( s [ i ] [ j ] >= s [ i ] [ j + 1 ] ) s [ i - 1 ] [ j ] += s [ i ] [ j ] ; else s [ i - 1 ] [ j ] += s [ i ] [ j + 1 ] ; } } printf ( \"%d\" , s [ 0 ] [ 0 ] ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 0, "id": 4051}
{"input": "int main ( ) { int arr [ 100 ] [ 100 ] , result [ 100 ] [ 100 ] ; int t , i , lines , j ; scanf ( \"%d\" , & t ) ; while ( t ) { t -- ; scanf ( \"%d\" , & lines ) ; for ( i = 1 ; i <= lines ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i - 1 ] [ j - 1 ] ) ; } } for ( i = 0 ; i < lines ; i ++ ) result [ lines - 1 ] [ i ] = arr [ lines - 1 ] [ i ] ; for ( i = lines - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { result [ i ] [ j ] = arr [ i ] [ j ] + ( result [ i + 1 ] [ j ] > result [ i + 1 ] [ j + 1 ] ? result [ i + 1 ] [ j ] : result [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , result [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15712}
{"input": "int main ( ) { long long int t , n , i , j , ar [ 100000 ] ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & n , & ar [ 0 ] ) ; int min = ar [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { scanf ( \"%lld\" , & ar [ j ] ) ; if ( min > ar [ j ] ) min = ar [ j ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 20668}
{"input": "int main ( ) { int test , n , i , c = 0 ; unsigned a [ size ] ; scanf ( \"%d\" , & test ) ; while ( test > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%u\" , & a [ i ] ) ; } c = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) c += a [ i + 1 ] ; if ( a [ i ] < a [ i + 1 ] ) c += a [ i ] ; } printf ( \"%d\n\" , c ) ; test -- ; } }", "label": 3, "id": 16431}
{"input": "int main ( void ) { int t ; int arr [ 100 ] ; int n , i ; int cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } while ( n != 1 ) { if ( arr [ 0 ] > arr [ 1 ] ) { cost = cost + arr [ 1 ] ; for ( i = 1 ; i < n ; i ++ ) arr [ i - 1 ] = arr [ i ] ; } else { cost = cost + arr [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) arr [ i - 1 ] = arr [ i ] ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 3, "id": 481}
{"input": "int main ( ) { unsigned long long int k , n , n1 , n2 , i , a ; unsigned long long int l [ 1001 ] , gcd [ 1001 ] , f ; scanf ( \"%lld\" , & k ) ; for ( n = 0 ; n < k ; n ++ ) { scanf ( \"%lld %lld\" , & n1 , & n2 ) ; f = n1 * n2 ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd [ n ] = i ; } l [ n ] = f / gcd [ n ] ; } for ( n = 0 ; n < k ; n ++ ) printf ( \"%lld %lld\n\" , gcd [ n ] , l [ n ] ) ; return 0 ; }", "label": 2, "id": 4675}
{"input": "int main ( void ) { int temp , i , t , n , a [ 1000000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; temp = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( temp > a [ i ] ) temp = a [ i ] ; } printf ( \"%d\n\" , temp * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 11118}
{"input": "int sum ( int [ ] [ 100 ] , int ) ; int max ( int , int ) ; int main ( ) { int mat [ 100 ] [ 100 ] ; int t ; scanf ( \"%d\" , & t ) ; int i , x , j , k ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } printf ( \"%d\" , sum ( mat , x ) ) ; } return 0 ; } int sum ( int mat [ 100 ] [ 100 ] , int x ) { int i , j ; if ( x == 0 ) { return mat [ 0 ] [ 0 ] ; } else { for ( i = x - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < x ; j ++ ) { mat [ i ] [ j ] = mat [ i ] [ j ] + max ( mat [ i + 1 ] [ j ] , mat [ i + 1 ] [ j + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; }", "label": 2, "id": 10037}
{"input": "int main ( void ) { int t , i , j , a , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n , & i ) ; a = n - 1 ; while ( -- n ) { scanf ( \"%d\" , & j ) ; if ( i > j ) i = j ; } printf ( \"%d\n\" , a * i ) ; } return 0 ; }", "label": 0, "id": 19381}
{"input": "int main ( ) { int i , t , j , k , a , b , n , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { gcd = 0 ; lcm = 0 ; scanf ( \"%d %d\" , & a , & b ) ; for ( j = 1 ; ; j ++ ) { if ( a % j == 0 && b % j == 0 && j > gcd ) gcd = j ; if ( k % a == 0 && k % b == 0 ) { lcm = k ; break ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 23296}
{"input": "int los ( int x [ ] , int max ) { int i = 0 , count = 0 ; int not = max - 1 ; int num , temp , j ; for ( j = 0 ; j < not ; j ++ ) { count ++ ; num = x [ i ] + x [ i + count ] + x [ count + i + 1 ] ; i = i + count ; if ( num > temp ) { temp = num ; } temp = num ; } return temp ; } int main ( ) { int non , i , j , k ; scanf ( \"%d\" , & non ) ; int ar [ non ] ; for ( i = 0 ; i < non ; i ++ ) { scanf ( \"%d\" , & ar [ i ] ) ; k = ( ar [ i ] * ( ar [ i ] + 1 ) ) / 2 ; int ar1 [ k ] ; for ( j = 0 ; j < k ; j ++ ) scanf ( \"%d\" , & ar1 [ j ] ) ; ar [ i ] = los ( ar1 , ar [ i ] ) ; } for ( i = 0 ; i < non ; i ++ ) printf ( \"%d\n\" , ar [ i ] ) ; return 0 ; }", "label": 1, "id": 26302}
{"input": "int main ( ) { int t , n , i , j , pt , cond , ct ; scanf ( \"%d\" , & t ) ; int b [ t ] ; for ( i = 0 ; i < t ; i ++ ) { ct = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( pt = 0 ; pt < n ; pt ++ ) { cond = 1 ; for ( j = pt ; cond == 1 && j < n ; j ++ ) { if ( a [ j ] <= a [ pt ] ) { ct ++ ; } else { cond = 0 ; } } } b [ i ] = ct ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , b [ i ] ) ; } return 0 ; }", "label": 2, "id": 8196}
{"input": "int cntarr ( long long int a [ ] , long long int size ) { int count = 0 , i ; for ( i = 0 ; i < size - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) count ++ ; } count = count + size ; return count ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i ; scanf ( \"%lld\" , & n ) ; long long int a [ 100000 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } int p = cntarr ( a , n ) ; printf ( \"%d\n\" , p ) ; } return 0 ; }", "label": 1, "id": 23439}
{"input": "int main ( ) { int n , i , a , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; int b [ a ] , m ; for ( j = 0 ; j < a ; j ++ ) scanf ( \"%d\" , & b [ j ] ) ; m = b [ 0 ] ; for ( j = 0 ; j < a ; j ++ ) { if ( b [ j ] < m ) m = b [ j ] ; } printf ( \"\n%lld\" , m * ( a - 1 ) ) ; } return 0 ; }", "label": 1, "id": 26057}
{"input": "int select ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int temp , i , j , k , l ; k = 0 ; int mat [ 100 ] [ 100 ] , cases , size , ans [ 100 ] ; scanf ( \"%d\" , & cases ) ; l = cases ; while ( cases -- ) { scanf ( \"%d\" , & size ) ; scanf ( \"%d\" , & mat [ 0 ] [ 0 ] ) ; for ( i = 1 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; mat [ i ] [ j ] = select ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] ) + mat [ i ] [ j ] ; } mat [ i ] [ j + 1 ] = 0 ; } temp = mat [ size - 1 ] [ 0 ] ; for ( i = 0 ; i < size ; i ++ ) { if ( mat [ size - 1 ] [ i ] > temp ) { temp = mat [ size - 1 ] [ i ] ; } } ans [ k ] = temp ; k ++ ; } for ( k = 0 ; k < l ; k ++ ) { printf ( \"%d\n\" , ans [ k ] ) ; } fflush ( stdin ) ; return 0 ; }", "label": 1, "id": 16857}
{"input": "int main ( ) { int t , i , j , n ; int a [ 10000 ] ; int count = 0 , p = 1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; p = 1 ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%s\" , & a [ i ] ) ; if ( a [ i ] > a [ i - 1 ] || a [ i ] == a [ i - 1 ] ) p ++ ; else { count += ( p * ( p + 1 ) ) / 2 - p ; p = 1 ; } } if ( i == n ) count += ( p * ( p + 1 ) ) / 2 - p ; count += n ; printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 3, "id": 8155}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int c = a ; int d = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , a , c * d / a ) ; } }", "label": 1, "id": 6230}
{"input": "int main ( ) { int n , t , a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ( a [ i ] [ j ] ) ) ; } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } printf ( \"\n%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 13247}
{"input": "int main ( void ) { int a [ 100 ] , i , t , min , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } min = min * ( n - 1 ) ; printf ( \"%d\n\" , min ) ; } return 0 ; }", "label": 3, "id": 13376}
{"input": "int main ( ) { int t , n , i , a , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( i == 0 ) cost = a ; else if ( cost > a ) { cost = a ; } } int b = cost * ( n - 1 ) ; printf ( \"%d\n\" , b ) ; } }", "label": 0, "id": 10435}
{"input": "long int GCD ( long int a , long int b ) { if ( a % b == 0 ) return b ; else return GCD ( b , a % b ) ; } int main ( void ) { int t ; long int a , b , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 8982}
{"input": "int main ( void ) { int T ; long N ; long A [ 50000 ] ; long cost [ 10 ] ; int i , j , k ; scanf ( \"%d\" , & T ) ; i = 0 ; while ( i < T ) { cost [ i ] = 0 ; scanf ( \"%li\" , & N ) ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%li\" , & A [ j ] ) ; } while ( N > 1 ) { if ( A [ 0 ] > A [ 1 ] ) { for ( k = 1 ; k < N ; k ++ ) { A [ k - 1 ] = A [ k ] ; } } else { for ( k = 2 ; k < N ; k ++ ) { A [ k - 1 ] = A [ k ] ; } } cost [ i ] = cost [ i ] + A [ 0 ] ; N -- ; } i ++ ; } for ( i = 0 ; i < T ; i ++ ) { printf ( \"%li\n\" , cost [ i ] ) ; } return 0 ; }", "label": 2, "id": 9153}
{"input": "int main ( void ) { long long int T , i , a , b , LCM , GCD ; scanf ( \"%lld\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; while ( a != b ) { if ( a > b ) GCD = a - b ; else b = b - a ; } printf ( \"%lld\n\" , GCD ) ; LCM = ( a * b ) / GCD ; printf ( \"%lld\n\" , LCM ) ; } return 0 ; }", "label": 2, "id": 6999}
{"input": "int main ( ) { long int cost ; int t , i , j , n , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; long int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & arr [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n && arr [ j ] > arr [ j + 1 ] ) { temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } } cost = arr [ 0 ] * ( n - 1 ) ; printf ( \"%ld\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 4658}
{"input": "int gcd ( int n1 , int n2 ) { if ( n2 != 0 ) return gcd ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int n , i , j , A , B ; long long int LCM , X ; scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\n\" , & A , & B ) ; X = gcd ( A , B ) ; for ( j = 1 ; j <= A && j <= B ; ++ j ) { if ( A % j == 0 && B % j == 0 ) X = j ; } LCM = ( A * B ) / X ; printf ( \"%lld %lld\n\" , gcd ( A , B ) , LCM ) ; } return 0 ; }", "label": 1, "id": 6595}
{"input": "int main ( ) { unsigned int num , row , temp , max ; unsigned short val [ 100 ] [ 100 ] ; int j , i , k ; scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) { scanf ( \"%d\" , & row ) ; for ( j = 0 ; j < row ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & val [ j ] [ k ] ) ; } } max = 0 ; for ( j = 0 ; j < row - 1 ; j ++ ) { val [ j + 1 ] [ 0 ] += val [ j ] [ 0 ] ; for ( k = 0 ; k <= j ; k ++ ) { if ( k < j ) { if ( val [ j ] [ k + 1 ] > val [ j ] [ k ] ) val [ j + 1 ] [ k + 1 ] += val [ j ] [ k + 1 ] ; else val [ j + 1 ] [ k + 1 ] += val [ j ] [ k ] ; } else { val [ j + 1 ] [ k + 1 ] += val [ j ] [ k ] ; } if ( j + 1 == row - 1 ) { if ( max < val [ j + 1 ] [ k ] ) max = val [ j + 1 ] [ k ] ; } } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 4828}
{"input": "int GCD ( int , int ) ; int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B ; scanf ( \"%d%d\" , & A , & B ) ; int gcd = GCD ( A , B ) ; printf ( \"%d\" , gcd ) ; printf ( \" \" ) ; printf ( \"%d\n\" , ( A * B ) / gcd ) ; } return 0 ; } int GCD ( int a , int b ) { if ( a == 0 ) return b ; else if ( b == 0 ) return a ; else if ( a > b ) return GCD ( b , a % b ) ; else return GCD ( a , b % a ) ; }", "label": 1, "id": 12694}
{"input": "int main ( ) { int x , y , a , b , t , gcd , lcm , i , j ; scanf ( \"%d\" , & i ) ; for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = x * y / gcd ; printf ( \"%d \" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 19481}
{"input": "int main ( ) { int p , t , i , j , s = 100000 , a , n ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int num [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & num [ j ] ) ; a = num [ j ] ; if ( a < s ) { s = a ; } } p = ( n - 1 ) * s ; printf ( \"%d\" , p ) ; } }", "label": 1, "id": 5810}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int num1 , num2 , i , min , max , lcm , temp ; scanf ( \"%d\" , & num1 ) ; scanf ( \"%d\" , & num2 ) ; max = num1 > num2 ? num1 : num2 ; min = num1 < num2 ? num1 : num2 ; while ( min != 0 ) { temp = min ; min = max % temp ; max = temp ; } printf ( \"%d \" , max ) ; printf ( \"%d\n\" , num1 * num2 / max ) ; } return 0 ; }", "label": 1, "id": 18202}
{"input": "int getLcm ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int length , breath , gcd ; scanf ( \"%d%d\" , & length , & breath ) ; if ( length > breath ) gcd = getGcd ( length , breath ) ; else gcd = getGcd ( breath , length ) ; printf ( \"%d %d\n\" , gcd , ( length * breath ) / gcd ) ; } } int getGcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return ( getGcd ( b , a % b ) ) ; }", "label": 1, "id": 8119}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y ; scanf ( \"%d%d\" , & x , & y ) ; int a = x , b = y ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } int gcd = a ; int lcm = ( x * y ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } }", "label": 1, "id": 19590}
{"input": "int a [ 101 ] [ 101 ] , c [ 101 ] [ 101 ] , n , calls = 0 ; int path ( int i , int j ) { int t , t1 = 0 , t2 = 0 ; if ( i > n ) { calls ++ ; return ( 0 ) ; } t = c [ i ] [ j ] ; if ( t != - 1 ) { return ( t ) ; } t1 = path ( i + 1 , j ) ; t2 = path ( i + 1 , j + 1 ) ; if ( t1 > t2 ) t = t1 ; else t = t2 ; t = t + a [ i ] [ j ] ; c [ i ] [ j ] = t ; return ( t ) ; } int main ( void ) { int i , j , s , u , t ; scanf ( \"%d\" , & t ) ; for ( u = 0 ; u < t ; u ++ ) { calls = 0 ; for ( i = 0 ; i < 101 ; i ++ ) { for ( j = 0 ; j < 101 ; j ++ ) { a [ i ] [ j ] = 0 ; c [ i ] [ j ] = - 1 ; } } s = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d \" , & a [ i ] [ j ] ) ; } } s = path ( 0 , 0 ) ; printf ( \"%d\n\" , s ) ; } return ( 0 ) ; }", "label": 0, "id": 17924}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int t , i , n , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n + 1 ] [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = 2 ; i <= n ; i ++ ) { arr [ i ] [ 1 ] += arr [ i - 1 ] [ 1 ] ; for ( j = 2 ; j < i ; j ++ ) { arr [ i ] [ j ] += max ( arr [ i - 1 ] [ j ] , arr [ i - 1 ] [ j - 1 ] ) ; } arr [ i ] [ i ] += arr [ i - 1 ] [ i - 1 ] ; } int ans = - 1 ; for ( i = 1 ; i <= n ; i ++ ) { ans = max ( ans , arr [ n ] [ i ] ) ; } printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 21113}
{"input": "int main ( ) { int t , n , i = 0 , j , num , sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num ) ; } sum = sum + num ; } printf ( \"%d\n\" , sum ) ; sum = 0 ; t -- ; } return 0 ; }", "label": 1, "id": 16554}
{"input": "int main ( ) { int t , i , j , a , b , hcf ; long lcm = 0 , c ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; for ( j = 1 ; j <= a ; j ++ ) { if ( a % j == 0 && b % j == 0 ) hcf = j ; } c = a ; while ( lcm == 0 ) { if ( c % a == 0 && a % b == 0 ) { lcm = c ; } c = c + 1 ; } printf ( \"\n%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 20742}
{"input": "int max_sum ( int * triangle [ ] , int row ) { int temp , temp1 ; int i , j , prev_row ; int * curr_row_ptr ; int * prev_row_ptr ; for ( i = 1 , prev_row = 0 ; i < row ; i ++ , prev_row ++ ) { curr_row_ptr = triangle [ i ] ; prev_row_ptr = triangle [ prev_row ] ; * curr_row_ptr += * prev_row_ptr ; for ( j = 1 ; j <= i ; j ++ ) { temp = * ( prev_row_ptr + j ) ; temp1 = * ( prev_row_ptr + j - 1 ) ; if ( temp1 > temp ) temp = temp1 ; * ( curr_row_ptr + j ) += temp ; } } temp = * prev_row_ptr ; ; for ( j = 1 ; j <= i ; j ++ ) { if ( * ( prev_row_ptr + j ) > temp ) temp = * ( prev_row_ptr + j ) ; } return temp ; } int main ( ) { int test_cases ; int rows ; char str [ 300 ] ; char * temp ; int i , j , num ; int * triangle [ 100 ] = { NULL } ; int * row_ptr ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%d\" , & rows ) ; fflush ( stdin ) ; for ( i = 0 ; i < rows ; i ++ ) { gets ( str ) ; if ( triangle [ i ] == NULL ) triangle [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; row_ptr = triangle [ i ] ; temp = strtok ( str , \" \" ) ; while ( temp ) { sscanf ( temp , \"%d\" , row_ptr ++ ) ; temp = strtok ( NULL , \" \" ) ; } } printf ( \"%d\n\" , max_sum ( triangle , rows ) ) ; } return 0 ; }", "label": 3, "id": 16492}
{"input": "int main ( ) { int n , a [ 105 ] [ 105 ] ; int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { int x = 0 ; int y = 0 ; if ( j <= ( i - 1 ) ) { x = a [ i - 1 ] [ j ] ; } if ( ( j - 1 ) >= 0 ) { y = a [ i - 1 ] [ j - 1 ] ; } if ( x > y ) { a [ i ] [ j ] += x ; } else { a [ i ] [ j ] += y ; } } } int max = a [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ n - 1 ] [ i ] > max ) { max = a [ n - 1 ] [ i ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 25281}
{"input": "int trianglesum ( int n ) ; main ( ) { int i , m , n ; scanf ( \"%d\" , & m ) ; for ( i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & n ) ; printf ( \"%d\n\" , trianglesum ( n ) ) ; } return 0 ; } int trianglesum ( int n ) { int i , j , * * M , * * S ; int val , maxx = 0 ; M = ( int * * ) malloc ( n * sizeof ( int * ) ) ; S = ( int * * ) malloc ( ( n + 1 ) * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) M [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( i = 0 ; i <= n ; i ++ ) S [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ( M [ i ] [ j ] ) ) ; S [ 0 ] [ 0 ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) { S [ i ] [ i ] = 0 ; S [ i ] [ 0 ] = S [ i - 1 ] [ 0 ] + M [ i - 1 ] [ 0 ] ; } for ( i = 2 ; i <= n ; i ++ ) for ( j = 1 ; j < i ; j ++ ) S [ i ] [ j ] = max ( S [ i - 1 ] [ j - 1 ] , S [ i - 1 ] [ j ] ) + M [ i - 1 ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) if ( maxx < S [ n ] [ i ] ) maxx = S [ n ] [ i ] ; val = maxx ; for ( i = 0 ; i < n ; i ++ ) free ( M [ i ] ) ; for ( j = 0 ; j <= n ; j ++ ) free ( S [ j ] ) ; free ( M ) ; free ( S ) ; return val ; }", "label": 0, "id": 27031}
{"input": "int main ( ) { int t , test ; scanf ( \"%d\" , & test ) ; for ( t = 0 ; t < test ; t ++ ) { int a [ 102 ] [ 102 ] , n , i , j , t1 , t2 , max = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( j == i ) { a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; continue ; } if ( j == 0 ) { a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; continue ; } t1 = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; t2 = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; if ( t1 > t2 ) a [ i ] [ j ] = t1 ; else a [ i ] [ j ] = t2 ; } } for ( i = 0 ; i < n ; i ++ ) { if ( a [ n - 1 ] [ i ] > max ) max = a [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 9377}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int dp [ n ] ; dp [ 0 ] = 1 ; int sum = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) { dp [ i ] = dp [ i - 1 ] + 1 ; } else { dp [ i ] = 1 ; } } for ( i = 0 ; i < n ; i ++ ) { sum += dp [ i ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 14614}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%d\n\" , solve ( x ) ) ; } return 0 ; }", "label": 0, "id": 2808}
{"input": "long int gcd ( long int a , long int b ) ; long int lcm ( long int a , long int b ) ; int main ( ) { long int k , a , b , p , q ; scanf ( \"%ld\" , & k ) ; while ( k != 0 ) { scanf ( \"%ld %ld\" , & a , & b ) ; p = gcd ( a , b ) ; q = lcm ( a , b ) ; printf ( \"%ld %ld\" , p , q ) ; printf ( \"\n\" ) ; k -- ; } return 0 ; } long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; }", "label": 0, "id": 25453}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , min = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & j ) ; if ( i == 0 ) min = j ; if ( j < min ) min = j ; } printf ( \"%lld\n\" , ( long long ) min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 24478}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( void ) { int t , a , b , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) { r = a ; a = b ; b = r ; } printf ( \"%d %d\n\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 15951}
{"input": "int main ( ) { int n , t , i , j , a [ 50 ] [ 50 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = t ; i > 0 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ i ] [ j ] ) ; } return 0 ; }", "label": 3, "id": 16512}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 19996}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , gcd = 1 , lcm , c ; scanf ( \"%d %d\" , & a , & b ) ; a < b ? ( c = a ) : ( c = b ) ; for ( int i = 2 ; i <= c ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 10780}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( void ) { int i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int A [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { A [ i - 1 ] [ j ] = A [ i - 1 ] [ j ] + max ( A [ i ] [ j ] , A [ i ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25774}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int N ; scanf ( \"%d\" , & N ) ; int a [ 1000 ] ; int i , j ; for ( i = 1 ; i <= N ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int count = 0 ; for ( i = 1 ; i <= N ; i ++ ) { for ( j = i ; j = i + 1 ; j ++ ) { if ( ( a [ i ] == a [ j ] ) || ( a [ i ] < a [ j + 1 ] ) ) { count ++ ; } } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 3, "id": 21900}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B ; int long long lcm ; scanf ( \"%d %d\" , & A , & B ) ; int n1 = A , n2 = B ; if ( A != 0 && B != 0 ) { while ( A != B ) { if ( A > B ) A = A - B ; else B = B - A ; } } lcm = ( n1 * n2 ) / A ; printf ( \"%d %lld\n\" , A , lcm ) ; } return 0 ; }", "label": 1, "id": 21787}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int lines , tri [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & lines ) ; int i , j , in ; for ( i = 1 ; i <= lines ; i += 1 ) { for ( j = 1 ; j <= i ; j += 1 ) { scanf ( \"%d\" , & in ) ; tri [ i ] [ j ] = ( ( in + tri [ i - 1 ] [ j - 1 ] ) > ( in + tri [ i - 1 ] [ j ] ) ) ? ( in + tri [ i - 1 ] [ j - 1 ] ) : ( in + tri [ i - 1 ] [ j ] ) ; } } int max = 0 ; for ( i = 1 ; i <= lines ; i ++ ) { if ( max < tri [ lines ] [ i ] ) max = tri [ lines ] [ i ] ; } printf ( \"%d\" , max ) ; if ( t != 0 ) printf ( \"\n\" ) ; } return 0 ; }", "label": 3, "id": 22321}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , c = 0 , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] != 0 ) { if ( a [ i ] > a [ j ] ) { a [ i ] = 0 ; c += a [ j ] ; break ; } else if ( a [ j ] > a [ i ] ) { a [ j ] = 0 ; c += a [ i ] ; break ; } } } } } printf ( \"%d\n\" , c ) ; } }", "label": 1, "id": 13438}
{"input": "unsigned int sumd ( unsigned int s , unsigned int n , unsigned int i , unsigned int j , unsigned int arr [ 10 ] [ 10 ] ) ; unsigned int sumr ( unsigned int s , unsigned int n , unsigned int i , unsigned int j , unsigned int arr [ 10 ] [ 10 ] ) ; int main ( ) { unsigned int arr [ 10 ] [ 10 ] ; unsigned int i , j , tc , go , row , k ; unsigned int sumrt = 0 , sumdn , sum ; scanf ( \"%u\" , & tc ) ; for ( go = 1 ; go <= tc ; go ++ ) { scanf ( \"%u\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%u\" , & arr [ i ] [ j ] ) ; } } sum = 0 ; sumrt = sumr ( sum , row , 0 , 0 , arr ) ; sumdn = sumd ( sum , row , 0 , 0 , arr ) ; if ( sumrt > sumdn ) printf ( \"%u\n\" , sumrt ) ; else printf ( \"%u\n\" , sumdn ) ; } return 0 ; } unsigned int sumd ( unsigned int s , unsigned int n , unsigned int i , unsigned int j , unsigned int arr [ 10 ] [ 10 ] ) { unsigned int sumdn , sumrt ; if ( i < n ) { s = s + arr [ i ] [ j ] ; sumdn = sumd ( s , n , i + 1 , j , arr ) ; sumrt = sumr ( s , n , i + 1 , j + 1 , arr ) ; if ( sumrt > sumdn ) return sumrt ; else return sumdn ; } return s ; } unsigned int sumr ( unsigned int s , unsigned int n , unsigned int i , unsigned int j , unsigned int arr [ 10 ] [ 10 ] ) { unsigned int sumdn , sumrt ; if ( i < n ) { s = s + arr [ i ] [ j ] ; sumdn = sumd ( s , n , i + 1 , j , arr ) ; sumrt = sumr ( s , n , i + 1 , j + 1 , arr ) ; if ( sumrt > sumdn ) return sumrt ; else return sumdn ; } return s ; }", "label": 2, "id": 12857}
{"input": "int main ( void ) { long t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long long a , b , min , max ; scanf ( \"%lld %lld\" , & a , & b ) ; min = ( a + b - abs ( a - b ) ) / 2 ; max = ( a + b + abs ( a - b ) ) / 2 ; while ( min != 0 ) { if ( max % min == 0 ) { printf ( \"%lld %lld\n\" , min , ( a * b ) / min ) ; break ; } min = max % min ; } } return 0 ; }", "label": 1, "id": 6676}
{"input": "int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & n ) ; while ( n ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n \n\" , a [ 0 ] [ 0 ] ) ; n -- ; } return 0 ; }", "label": 0, "id": 4328}
{"input": "int main ( ) { int numOfLines ; int triHeight ; int triangles [ 1000 ] [ 1000 ] = { 0 } ; scanf ( \"%d\" , & numOfLines ) ; while ( numOfLines > 0 ) { scanf ( \"%d\" , & triHeight ) ; int i = 0 ; int j ; while ( i < triHeight ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & triangles [ i ] [ j ] ) ; } i ++ ; } triHeight -= 2 ; while ( triHeight >= 0 ) { for ( j = 0 ; j <= triHeight ; j ++ ) { int currentNumber = triangles [ triHeight ] [ j ] ; int leftBelow = triangles [ triHeight + 1 ] [ j ] + currentNumber ; int rightBelow = triangles [ triHeight + 1 ] [ j + 1 ] + currentNumber ; triangles [ triHeight ] [ j ] = leftBelow > rightBelow ? leftBelow : rightBelow ; } triHeight -- ; } printf ( \"%d\n\" , triangles [ 0 ] [ 0 ] ) ; numOfLines -- ; } return 0 ; }", "label": 0, "id": 11984}
{"input": "int main ( ) { int t , a , b , i , j ; scanf ( \"%d\" , & t ) ; if ( t <= 1000 && t >= 1 ) while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a <= 1000000 && a >= 1 && b <= 1000000 && b >= 1 ) { if ( a > b ) i = b ; else i = a ; for ( ; ; i -- ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) printf ( \"%d\n\" , i ) ; break ; } j = a * b / i ; printf ( \"%d\n\" , j ) ; } else break ; } return 0 ; }", "label": 1, "id": 14843}
{"input": "int main ( ) { int a , b , i , lcm , hcf , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; ( i <= a ) && ( i <= b ) ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) hcf = i ; } lcm = ( a * b ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 12744}
{"input": "int main ( ) { int i , t ; long int j , n ; long int pre ; long int A [ MAX ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { pre = 50001 ; scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & A [ j ] ) ; if ( pre > A [ j ] ) pre = A [ j ] ; } printf ( \"%ld\n\" , ( pre * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 22267}
{"input": "int main ( ) { long long int cost ; long int temp , n ; int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & arr [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n && arr [ j ] > arr [ j + 1 ] ) { temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } } cost = arr [ 0 ] * ( n - 1 ) ; printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 3842}
{"input": "int main ( ) { int t , i , gcd , a , b , x , y ; long long int lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } gcd = a ; lcm = x * y / gcd ; printf ( \"%d %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 16112}
{"input": "int main ( ) { int n , i , j , x , y , product , temp , rem ; scanf ( \"%d\" , & n ) ; long int arr [ n ] [ 2 ] , hcf [ n ] [ 2 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) ; } i = 0 ; for ( i = 0 ; i < n ; i ++ ) { x = arr [ i ] [ 0 ] ; y = arr [ i ] [ 1 ] ; product = x * y ; if ( y > x ) { temp = y ; y = x ; x = y ; } while ( 1 ) { rem = x % y ; if ( rem == 0 ) { break ; } x = y ; y = rem ; } hcf [ i ] [ 0 ] = y ; hcf [ i ] [ 1 ] = product / y ; } i = 0 ; for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d %d\" , hcf [ i ] [ 0 ] , hcf [ i ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 4528}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int Num1 , Num2 , LCM ; scanf ( \"%d %d\" , & Num1 , & Num2 ) ; int i , HCF , product ; product = Num1 * Num2 ; if ( Num1 >= Num2 ) { for ( i = 1 ; i <= Num2 ; i ++ ) { if ( ( Num1 % i == 0 ) && ( Num2 % i == 0 ) ) HCF = i ; } } else if ( Num1 < Num2 ) { for ( i = 1 ; i <= Num1 ; i ++ ) { if ( ( Num1 % i == 0 ) && ( Num2 % i == 0 ) ) HCF = i ; } } LCM = product / HCF ; printf ( \"%d %d\n\" , HCF , LCM ) ; } }", "label": 1, "id": 17911}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , count = 0 , sum = 0 , i ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; scanf ( \"%ld\" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( a [ i ] >= a [ i - 1 ] ) count ++ ; else { sum += ( count * ( count + 1 ) ) / 2 ; count = 0 ; } } sum += ( count * ( count + 1 ) ) / 2 ; printf ( \"%ld\n\" , sum + n ) ; } }", "label": 0, "id": 21409}
{"input": "int fact ( int a , int b ) { if ( a % b == 0 ) return b ; else { int j = a % b ; a = b ; b = j ; fact ( a , b ) ; } } int main ( ) { int gcd , lcm , n1 , n2 , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; if ( n1 > n2 ) gcd = fact ( n1 , n2 ) ; else gcd = fact ( n2 , n1 ) ; lcm = ( n2 * n1 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 20703}
{"input": "int main ( void ) { int T , rows , sum , largest , num , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & rows ) ; largest = 0 ; for ( i = 1 ; i <= rows ; i ++ ) { sum = 0 ; for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num ) ; sum = sum + num ; } if ( sum >= largest ) largest = sum ; } printf ( \"%d\" , largest ) ; } return 0 ; }", "label": 1, "id": 8880}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int t ; if ( a < b ) { t = a ; a = b ; b = t ; } int x , y ; x = a , y = b ; int r , q ; while ( b > 0 ) { r = a % b ; q = a / b ; a = b ; b = r ; } int p = ( x * y ) / a ; printf ( \"%d %d\n\" , a , p ) ; } return 0 ; }", "label": 1, "id": 25094}
{"input": "int main ( void ) { int a , b , h , l , p , r , t ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d %d\" , & a , & b ) ; p = a * b ; while ( r != 1 ) { r = a % b ; if ( r == 0 ) { h = b ; break ; } else { a = b ; b = r ; } } if ( r == 1 ) h = 1 ; l = p / h ; printf ( \"%d %d\n\" , h , l ) ; -- t ; } return 0 ; }", "label": 1, "id": 995}
{"input": "int main ( ) { int i , j , n , t , k , a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] , c , p [ 10 ] ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) { b [ i ] [ j ] = a [ i ] [ j ] ; } else if ( i == 0 || j == 0 ) { b [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; a [ i ] [ j ] = b [ i ] [ j ] ; } else if ( j > 0 && ( a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ) > ( a [ i ] [ j ] + a [ i - 1 ] [ j ] ) ) { b [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; a [ i ] [ j ] = b [ i ] [ j ] ; } else b [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; a [ i ] [ j ] = b [ i ] [ j ] ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( p [ k ] < b [ i ] [ j ] ) { p [ k ] = b [ i ] [ j ] ; } } } } for ( i = 0 ; i < t - 1 ; i ++ ) { printf ( \"%d\n\" , p [ i ] ) ; } printf ( \"%d\" , p [ t - 1 ] ) ; return 0 ; }", "label": 1, "id": 10469}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%d\n\" , solve ( x ) ) ; } return 0 ; }", "label": 0, "id": 738}
{"input": "int main ( void ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; int gcd , lcm , i , min , max ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } for ( i = 1 ; i <= min ; i ++ ) if ( a % i == 0 && b % i == 0 ) gcd = i ; lcm = ( min * ( max / gcd ) ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 16636}
{"input": "int arr [ 100 ] [ 100 ] , max = 0 ; void max_sum ( int max_row , int row , int col , int temp ) { int i ; if ( row == max_row ) { temp += arr [ row ] [ col ] ; if ( max < temp ) max = temp ; return ; } else { temp += arr [ row ] [ col ] ; max_sum ( max_row , row + 1 , col , temp ) ; max_sum ( max_row , row + 1 , col + 1 , temp ) ; } } int main ( ) { int i , j , k , row , col , test ; scanf ( \"%d\" , & test ) ; for ( k = 0 ; k < test ; i ++ ) { max = 0 ; scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; max_sum ( row - 1 , 0 , 0 , 0 ) ; printf ( \"\n%d\" , max ) ; } return 0 ; }", "label": 2, "id": 3044}
{"input": "int main ( ) { int b [ 101 ] [ 101 ] , a [ 100000 ] , i , j , n , k = 1 , x [ 1000 ] , t , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { x [ i ] = 0 ; } for ( m = 0 ; m < t ; m ++ ) { scanf ( \"\n%d\" , & n ) ; for ( i = 0 ; i < 100000 ; i ++ ) { a [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & b [ i ] [ j ] ) ; } } a [ 1 ] = b [ 0 ] [ 0 ] ; a [ 2 ] = b [ 1 ] [ 0 ] + b [ 0 ] [ 0 ] ; a [ 3 ] = b [ 1 ] [ 1 ] + b [ 0 ] [ 0 ] ; a [ 4 ] = a [ 2 ] + b [ 2 ] [ 0 ] ; a [ 5 ] = a [ 2 ] + b [ 2 ] [ 1 ] ; a [ 6 ] = a [ 3 ] + b [ 2 ] [ 1 ] ; a [ 7 ] = a [ 3 ] + b [ 2 ] [ 2 ] ; k = 8 ; for ( i = 3 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { a [ k ] = b [ i ] [ j ] + a [ ( i - 1 ) * ( i - 1 ) - i + j + 3 ] ; ++ k ; a [ k ] = b [ i ] [ j + 1 ] + a [ ( i - 1 ) * ( i - 1 ) - i + j + 3 ] ; ++ k ; } } for ( i = 1 ; i < ( n * n ) ; i ++ ) { if ( x [ m ] < a [ i ] ) { x [ m ] = a [ i ] ; } } } i = 0 ; while ( i < t ) { printf ( \"\n%d\" , x [ i ] ) ; i ++ ; } return 0 ; }", "label": 1, "id": 24851}
{"input": "int cost ( int * a , int beg , int end , int sum ) { int i , loc , min ; min = a [ beg ] ; for ( i = beg ; i <= end ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; loc = i ; } } printf ( \"%d\n\" , min * end ) ; return 0 ; } int main ( ) { int t = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int sum = 0 , n , m ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( m = 0 ; m < n ; m ++ ) { scanf ( \"%d\" , & a [ m ] ) ; } cost ( a , 0 , n - 1 , sum ) ; } return 0 ; }", "label": 0, "id": 22311}
{"input": "long long int gcd ( long long int a , long long int b ) { long long int g = a ; while ( 1 ) { if ( a % g == 0 && b % g == 0 ) break ; else g -- ; } return g ; } long long int lcm ( long long int a , long long int b ) { long long int l = a ; while ( 1 ) { if ( l % a == 0 && l % b == 0 ) break ; else l ++ ; } return l ; } int main ( ) { long long int t , a , b ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 2, "id": 14350}
{"input": "int main ( ) { unsigned int t , a , b , i , x ; scanf ( \"%u\" , & t ) ; while ( t -- ) { if ( t <= 1000 ) { scanf ( \"%u %u\" , & a , & b ) ; x = ( a < b ) ? a : b ; for ( i = x ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { break ; } } printf ( \"%u %u\n\" , i , ( a * b ) / i ) ; } } return 0 ; }", "label": 1, "id": 22945}
{"input": "long long int gcd ( long long int , long long int ) ; long long int gcd ( long long int a , long long int b ) { return b == 0 ? a : gcd ( b , a % b ) ; } int main ( ) { long long int a , b , hcf , lcm ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 6016}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , n , arr [ 101 ] [ 101 ] , i , j , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25450}
{"input": "int main ( ) { int TestCases ; int ArraySize ; int iTemp1 ; int CurrSmaller ; int CurrLarger ; int Cost ; scanf ( \"%d\" , & TestCases ) ; while ( TestCases > 0 ) { TestCases -- ; scanf ( \"%d\" , & ArraySize ) ; Cost = 0 ; int Array [ ArraySize ] ; for ( iTemp1 = 0 ; iTemp1 < ArraySize ; iTemp1 ++ ) { scanf ( \"%d\" , & Array [ iTemp1 ] ) ; } if ( Array [ 0 ] > Array [ 1 ] ) { CurrSmaller = Array [ 1 ] ; } else { CurrSmaller = Array [ 0 ] ; } for ( iTemp1 = 1 ; iTemp1 < ArraySize ; iTemp1 ++ ) { if ( Array [ iTemp1 ] < CurrSmaller ) { Cost = Cost + CurrSmaller ; CurrSmaller = Array [ iTemp1 ] ; } else { Cost = Cost + CurrSmaller ; } } printf ( \"%d\n\" , Cost ) ; } }", "label": 1, "id": 7964}
{"input": "int main ( ) { int i , m , j , t , n , a [ 1000 ] , min ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j <= n - 1 ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } min = a [ 0 ] ; for ( m = 1 ; m <= n - 1 ; m ++ ) { if ( min > a [ m ] ) min = a [ m ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 17237}
{"input": "int GCD ( int n , int m ) { if ( n == 0 ) { return m ; } if ( m == 0 ) { return n ; } if ( n % m == 0 ) { return m ; } else { return GCD ( m , ( n % m ) ) ; } } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int n , m ; scanf ( \"%d%d\" , & n , & m ) ; if ( n < m ) { int t = n ; n = m ; m = t ; } int gcd = GCD ( n , m ) ; int lcm = ( n * m ) / gcd ; printf ( \"\n%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 7063}
{"input": "long long int a [ 1000 ] [ 500 ] , m [ 1000 ] [ 500 ] ; long long int max ( long long int a , long long int b ) { if ( a > b ) return a ; return b ; } int main ( ) { long long int t , n , i , j , k , l , r , c ; scanf ( \"%lld\" , & t ) ; for ( k = 1 ; k <= t ; k ++ ) { scanf ( \"%lld\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } for ( l = 1 ; l <= n ; l ++ ) m [ n ] [ l ] = a [ n ] [ l ] ; for ( r = n - 1 ; r >= 1 ; r -- ) { for ( c = 1 ; c <= r ; c ++ ) { m [ r ] [ c ] = a [ r ] [ c ] + max ( m [ r + 1 ] [ c ] , m [ r + 1 ] [ c + 1 ] ) ; } } printf ( \"%lld\" , m [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 1, "id": 16580}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%d\n\" , solve ( x ) ) ; } return 0 ; }", "label": 0, "id": 2782}
{"input": "int main ( ) { int t , s , i , j , n , no ; scanf ( \"%d\" , & t ) ; while ( t -- ) { s = 0 ; scanf ( \"%d\" , & no ) ; for ( i = 0 ; i < no ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & n ) ; s = s + n ; } } printf ( \"%d\n\" , s / 2 ) ; } return 0 ; }", "label": 1, "id": 3275}
{"input": "int main ( ) { int i , j , a [ 100 ] [ 100 ] , n , k , r ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & r ) ; for ( j = 0 ; j < r ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = n - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { a [ j ] [ k ] += a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ? a [ j + 1 ] [ k ] : a [ j + 1 ] [ k + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 12848}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b [ 100000 ] , i ; scanf ( \"%lld\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%lld\" , & b [ i ] ) ; } long long int min , s = 0 ; min = b [ 1 ] ; for ( i = 2 ; i <= a ; i ++ ) { if ( min > b [ i ] ) min = b [ i ] ; s = ( a - 1 ) * min ; } printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 10487}
{"input": "int gcd ( int a , int b ) { if ( a > b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } else { if ( b % a == 0 ) return a ; else return gcd ( a , b % a ) ; } } int main ( ) { int t , a , b , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%d %lld\n\" , g , ( long long ) a * b / g ) ; } return 0 ; }", "label": 0, "id": 18353}
{"input": "int t = 0 , arr [ 100 ] [ 99 ] ; long max ( long num1 , long num2 ) { if ( num1 >= num2 ) return num1 ; else return num2 ; } long max_pathlength ( int i_index , int j_index ) { long sum = 0 ; if ( i_index == t ) { return ( long ) ( arr [ i_index ] [ j_index ] ) ; } else { sum = arr [ i_index ] [ j_index ] + ( max ( max_pathlength ( i_index + 1 , j_index ) , max_pathlength ( i_index + 1 , j_index + 1 ) ) ) ; return sum ; } } int main ( ) { int n , i , j , max = 0 ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } i = 0 , j = 0 ; printf ( \"%ld\n\" , max_pathlength ( 0 , 0 ) ) ; n -- ; } return 0 ; }", "label": 2, "id": 2065}
{"input": "int main ( void ) { int t , n , a , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a ) ; min = a ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( a < min ) min = a ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 933}
{"input": "int main ( void ) { int t , n , i , j , k , a [ 100000 ] ; long long int y ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } int min = a [ 0 ] ; for ( k = 1 ; k < n ; k ++ ) { if ( a [ k ] < min ) { min = a [ k ] ; } } y = ( min * ( n - 1 ) ) ; printf ( \"%lld\n\" , y ) ; } return 0 ; }", "label": 0, "id": 5718}
{"input": "int main ( int argc , char * argv [ ] ) { long t , i , j , n , max , temp ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { max = 0 ; scanf ( \"%ld\" , & n ) ; long a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } i = n - 1 ; while ( i > 0 ) { if ( a [ i ] > a [ i - 1 ] ) { max = max + a [ i - 1 ] ; a [ i ] = - 1 ; i -- ; } else if ( a [ i ] < a [ i - 1 ] ) { max = max + a [ i ] ; temp = a [ i ] ; a [ i ] = a [ i - 1 ] ; a [ i - 1 ] = temp ; i -- ; } } printf ( \"%ld\n\" , max ) ; } return 0 ; }", "label": 2, "id": 19325}
{"input": "int main ( ) { int test , arr [ 100 ] [ 100 ] , i , j , size ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = size - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) arr [ i - 1 ] [ j ] += MAX ( arr [ i ] [ j ] , arr [ i ] [ j + 1 ] ) ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 14468}
{"input": "int main ( ) { int cases , rows , factor , factor2 ; int row [ 2 ] [ 100 ] ; register int i , j , k ; scanf ( \"%d\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 0 ; j < 100 ; j ++ ) row [ 0 ] [ j ] = row [ 1 ] [ j ] = 0 ; for ( j = 0 ; j < rows ; j ++ ) { factor = j % 2 ; factor2 = ( j + 1 ) % 2 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & row [ factor ] [ k ] ) ; if ( k == 0 ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else if ( k == j ) row [ factor ] [ k ] += row [ factor2 ] [ k - 1 ] ; else row [ factor ] [ k ] += ( row [ factor2 ] [ k ] > row [ factor2 ] [ k - 1 ] ) ? row [ factor2 ] [ k ] : row [ factor2 ] [ k - 1 ] ; } } factor2 = - 1 ; for ( k = 0 ; k < rows ; k ++ ) if ( row [ factor ] [ k ] > factor2 ) factor2 = row [ factor ] [ k ] ; printf ( \"%d\n\" , factor2 ) ; } return 0 ; }", "label": 0, "id": 18166}
{"input": "int n ; int max = - 1 ; int check ( int a [ n ] [ n ] , int i , int j , int sum ) { if ( i == n ) { if ( sum > max ) max = sum ; return 0 ; } sum = sum + a [ i ] [ j ] ; check ( a , i + 1 , j + 1 , sum ) ; check ( a , i + 1 , j , sum ) ; return 0 ; } void code ( ) { int i , j , k ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; k <= i ; k ++ ) { scanf ( \"%d\" , & a [ i ] [ k ] ) ; } } k = check ( a , 0 , 0 , 0 ) ; printf ( \"%d\n\" , max ) ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { code ( ) ; } return 0 ; }", "label": 2, "id": 5326}
{"input": "int main ( ) { long long int t , n , a [ 100000 ] , b , c , i , j , k , s ; scanf ( \"%lld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { b = 0 ; c = 0 ; scanf ( \"%lld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } s = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( s <= a [ j ] ) { s = a [ j ] ; b ++ ; } else { c = c + b * ( b + 1 ) / 2 ; b = 0 ; s = a [ j ] ; } } if ( b != 0 ) { c = c + b * ( b + 1 ) / 2 ; } printf ( \"%lld\n\" , c + n ) ; } return 0 ; }", "label": 0, "id": 15832}
{"input": "int main ( ) { int x [ 100 ] [ 100 ] , l , n , a , b ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & l ) ; for ( a = 0 ; a < l ; a ++ ) for ( b = 0 ; b <= a ; b ++ ) scanf ( \"%d\" , & x [ a ] [ b ] ) ; for ( a = l - 1 ; a > 0 ; a -- ) for ( b = 0 ; b < a ; b ++ ) x [ a - 1 ] [ b ] += ( x [ a ] [ b ] > x [ a ] [ b + 1 ] ? x [ a ] [ b ] : x [ a ] [ b + 1 ] ) ; printf ( \"%d\n\" , * * x ) ; } return 0 ; }", "label": 0, "id": 13861}
{"input": "int a [ 100 ] [ 100 ] , n , max ; int main ( ) { int t , x , i , j , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { x = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; y = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; if ( x > y ) a [ i ] [ j ] = x ; else a [ i ] [ j ] = y ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2872}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b != 0 ) return gcd ( b , a % b ) ; else return a ; } int main ( ) { long long int a , b , i , j , g , l , t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; j = gcd ( a , b ) ; l = ( a * b ) / j ; printf ( \"%lld %lld\n\" , j , l ) ; } return 0 ; }", "label": 0, "id": 18003}
{"input": "int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { long long int N , i , a , R ; scanf ( \"%lld\" , & N ) ; long long int min = 500002 ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%lld\" , & a ) ; if ( min > a ) min = a ; } R = min * ( N - 1 ) ; printf ( \"%lld\n\" , R ) ; } }", "label": 0, "id": 4562}
{"input": "int main ( ) { long long int str ; int temp , t , n , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = INT_MAX ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & temp ) ; if ( temp < min ) min = temp ; } str = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) str += min ; printf ( \"%lld\n\" , str ) ; } return 0 ; }", "label": 0, "id": 14387}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) { c = getchar_unlocked ( ) ; } input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int sum_max = 0 ; int a [ 150 ] [ 150 ] = { 0 } ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; int i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } int sum = 0 , count = 0 ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25213}
{"input": "int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { long long int a , b , j , d , gcd , lcm ; scanf ( \"%lld%lld\" , & a , & b ) ; d = a < b ? a : b ; for ( j = 1 ; j <= d ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; lcm = ( a * b ) / gcd ; } printf ( \"%lld\n\" , gcd ) ; printf ( \"%lld\n\" , lcm ) ; } return 0 ; }", "label": 2, "id": 4252}
{"input": "int hcf ( int a , int b ) { while ( a != b ) { if ( a > b ) return hcf ( a - b , b ) ; else return hcf ( a , b - a ) ; } return a ; } int main ( ) { int t ; long long int a , b , c , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; c = hcf ( a , b ) ; l = ( a * b ) / c ; printf ( \"%lld %lld\n\" , c , l ) ; } return 0 ; }", "label": 0, "id": 4132}
{"input": "int main ( ) { unsigned int t , n , i ; long a [ NUM ] , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; min = 100001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 21895}
{"input": "int scan ( ) { int n = 0 ; int ch = getchar_unlocked ( ) ; while ( ch < '0' || ch > '9' ) ch = getchar_unlocked ( ) ; while ( ch >= '0' && ch <= '9' ) { n = ( n * 10 ) + ch - '0' ; ch = getchar_unlocked ( ) ; } return n ; } main ( ) { int max , i , j , t , n , a [ 101 ] [ 101 ] , s [ 101 ] [ 101 ] ; t = scan ( ) ; while ( t -- ) { for ( i = 0 ; i < 101 ; i ++ ) { for ( j = 0 ; j < 101 ; j ++ ) { s [ i ] [ j ] = 0 ; } } n = scan ( ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] = scan ( ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - 1 ] [ j - 1 ] , s [ i - 1 ] [ j ] ) ; } } max = s [ n ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( s [ n ] [ i ] > max ) max = s [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 19336}
{"input": "int main ( ) { int t , i , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 18801}
{"input": "int main ( ) { int n , raz , i , j , k , max = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int polje [ 101 ] [ 101 ] = { 0 } ; scanf ( \"%d\" , & raz ) ; for ( j = 1 ; j <= raz ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & polje [ j ] [ k ] ) ; polje [ j ] [ k ] += ( polje [ j - 1 ] [ k - 1 ] < polje [ j - 1 ] [ k ] ) ? polje [ j - 1 ] [ k ] : polje [ j - 1 ] [ k - 1 ] ; } } max = polje [ raz ] [ 1 ] ; for ( j = 1 ; j <= raz ; j ++ ) max = ( polje [ raz ] [ j ] > max ) ? polje [ raz ] [ j ] : max ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 1932}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int T , n , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; int b [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 0 ; j < n ; j ++ ) { b [ n - 1 ] [ j ] = a [ n - 1 ] [ j ] ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = i ; j > 0 ; j -- ) { b [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + max ( b [ i ] [ j ] , b [ i ] [ j - 1 ] ) ; } } printf ( \"%d\n\" , b [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15908}
{"input": "int main ( ) { int * a , t , i , p = 0 , * cost , j , n , temp = 0 ; scanf ( \"%d\" , & t ) ; cost = ( int * ) malloc ( t * sizeof ( int ) ) ; while ( t -- ) { cost [ p ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ i ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } } cost [ p ] = a [ 0 ] * ( n - 1 ) ; p ++ ; } for ( i = 0 ; i < p ; i ++ ) printf ( \"%d\n\" , cost [ i ] ) ; return 0 ; }", "label": 3, "id": 22596}
{"input": "int main ( ) { int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( \"enter two numbers:\" ) ; scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) { denominator = A ; numerator = B ; } else { numerator = A ; denominator = B ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( \"gcd of %d and %d= %d\" , gcd ) ; printf ( \"lcm of %d and %d =%d\" , lcm ) ; return 0 ; }", "label": 1, "id": 15293}
{"input": "void main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int lcm , n1 , n2 , m ; scanf ( \"%d %d\" , & n1 , & n2 ) ; if ( n1 < n2 ) m = n1 ; else m = n2 ; while ( 1 ) { if ( n1 % m == 0 && n2 & m == 0 ) { lcm = m ; break ; } ++ m ; } printf ( \"%d %d\" , ( n1 * n2 ) / lcm , lcm ) ; } }", "label": 2, "id": 12089}
{"input": "void rec ( int , int ) ; int a [ 5 ] [ 5 ] = { 0 , 0 } , save = 0 ; int main ( ) { int i , l , t , j , cases , ccnt ; scanf ( \"%d\" , & cases ) ; for ( ccnt = 0 ; ccnt < cases ; ccnt ++ ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) for ( t = 0 ; t <= i ; t ++ ) { scanf ( \"%d\" , & a [ i ] [ t ] ) ; } for ( j = 0 ; j <= l ; j ++ ) a [ i ] [ j ] = 0 ; rec ( 0 , 0 ) ; printf ( \"%d\n\" , save ) ; save = 0 ; } return 0 ; } void rec ( int i , int j ) { static int sum = 0 ; sum = sum + a [ i ] [ j ] ; if ( a [ i + 1 ] [ j ] != 0 ) { rec ( i + 1 , j ) ; rec ( i + 1 , j + 1 ) ; sum -= a [ i ] [ j ] ; } else { if ( sum > save ) save = sum ; sum -= a [ i ] [ j ] ; } }", "label": 2, "id": 15165}
{"input": "int max ( ) ; int main ( ) { int n , t , i , j , num , tmp , tmp1 ; int tot [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & n ) ; int tmp3 = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { tot [ j ] = 0 ; scanf ( \"%d\" , & num ) ; tmp = tot [ j ] ; tot [ j ] = tot [ j ] + num ; tmp1 = tot [ j ] ; if ( ( j - 1 ) != 0 ) { tot [ j ] = tmp3 + num ; if ( tmp1 > tot [ j ] ) { tot [ j ] = tmp1 ; } } tmp3 = tmp ; } } num = tot [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( tot [ i ] > num ) { num = tot [ i ] ; } } printf ( \"%d\n\" , num ) ; } return 0 ; }", "label": 2, "id": 9366}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int main ( void ) { int hcf , lcm ; int T ; int A , B ; scanf ( \"%d\" , & T ) ; while ( T -- > 0 ) { scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; hcf = gcd ( A , B ) ; printf ( \"%d %d\n\" , hcf , A * B / hcf ) ; } return 0 ; }", "label": 1, "id": 4791}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%d\n\" , solve ( x ) ) ; } return 0 ; }", "label": 0, "id": 14849}
{"input": "int triangle [ 100 ] [ 100 ] ; int lines ; int indices [ 128 ] ; int sumtrian ( ) ; int bump ( ) ; int main ( ) { int testcases , i , j , k ; int sum , temp ; scanf ( \"%d\" , & testcases ) ; for ( i = 0 ; i < testcases ; i ++ ) { scanf ( \"%d\" , & lines ) ; for ( j = 0 ; j < lines ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & triangle [ j ] [ k ] ) ; } } sum = 0 ; memset ( indices , 0 , sizeof ( indices ) ) ; while ( 1 ) { temp = sumtrian ( ) ; sum = ( sum > temp ) ? sum : temp ; if ( ! bump ( ) ) break ; } printf ( \"%d\n\" , sum ) ; } return 0 ; } int sumtrian ( ) { int i , sum = 0 ; for ( i = 0 ; i < lines ; i ++ ) { if ( 0 ) printf ( \"sum=%d, i=%d, triangle[%d][%d]=%d\n\" , sum , i , i , indices [ i ] , triangle [ i ] [ indices [ i ] ] ) ; sum += triangle [ i ] [ indices [ i ] ] ; } return sum ; } int bump ( ) { int i ; for ( i = lines - 1 ; i > 0 ; i -- ) { if ( indices [ i ] == i || indices [ i ] - indices [ i - 1 ] ) continue ; else { indices [ i ] ++ ; return 1 ; } } return 0 ; }", "label": 2, "id": 16479}
{"input": "void calculate ( ) ; int mylog ( int num ) ; int main ( int argc , char * argv [ ] ) { int triangleCount ; scanf ( \"%d\" , & triangleCount ) ; while ( triangleCount > 0 ) { calculate ( ) ; triangleCount -- ; } return EXIT_SUCCESS ; } void calculate ( ) { int lineCount , lineNum , sumLen , i , max , size ; scanf ( \"%d\" , & lineCount ) ; int line [ lineCount ] ; size = 1 ; for ( i = 0 ; i < lineCount ; i ++ ) size *= 2 ; printf ( \"%d\n\" , size ) ; int sum [ size ] ; lineNum = 0 ; sumLen = 0 ; max = 0 ; while ( lineCount > 0 ) { int i ; lineNum ++ ; for ( i = 0 ; i < lineNum ; i ++ ) scanf ( \"%d\" , & line [ i ] ) ; if ( lineNum == 1 ) { sum [ 0 ] = line [ 0 ] ; sumLen = 1 ; } else { for ( i = sumLen ; i > 0 ; i -- ) { int lineC = mylog ( i ) ; sum [ ( 2 * i ) - 1 ] = sum [ i - 1 ] + line [ lineC + 1 ] ; sum [ ( 2 * i ) - 2 ] = sum [ i - 1 ] + line [ lineC ] ; } sumLen *= 2 ; } lineCount -- ; } for ( i = 0 ; i < sumLen ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\n\" , max ) ; } int mylog ( int num ) { int count = 0 ; while ( num > 0 ) { num = num / 2 ; count ++ ; } return count - 1 ; }", "label": 3, "id": 15948}
{"input": "static long int arr [ 50000 ] ; int main ( ) { int t ; long long int n , i , pos , min ; long long int cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%lli\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lli\" , & arr [ i ] ) ; min = arr [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } cost = min * ( n - 1 ) ; printf ( \"%lli\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 18682}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int r , i , j ; scanf ( \"%d\" , & r ) ; int a [ 110 ] [ 110 ] ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = r - 2 ; i >= 0 ; i -- ) { for ( j = r - i - 2 ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 14042}
{"input": "int getgcd ( int x , int y ) ; int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( \"%d %d\" , & a , & b ) ; gcd = getgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; } int getgcd ( int x , int y ) { if ( y != 0 ) { getgcd ( y , x % y ) ; } else { return ( x ) ; } }", "label": 1, "id": 1643}
{"input": "int main ( ) { long long int a , b ; int n , i , c ; scanf ( \"%lld\" , & n ) ; while ( n -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { for ( i = 1 ; i <= a / 2 ; i ++ ) { if ( a % i == 0 && b % i == 0 ) c = i ; } } else { for ( i = 1 ; i <= b / 2 ; i ++ ) { if ( a % i == 0 && b % i == 0 ) c = i ; } } printf ( \"%d %d\n\" , c , ( a * b ) / c ) ; } return 0 ; }", "label": 2, "id": 18011}
{"input": "int a [ 101 ] [ 101 ] = { 0 } , t , n , i , j , k ; int main ( ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { k = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 2 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += a [ i - 1 ] [ j ] ; if ( a [ n ] [ j ] > k ) k = a [ n ] [ j ] ; } printf ( \"%d\n\" , k ) ; } return 0 ; }", "label": 1, "id": 14135}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b != 0 ) return gcd ( b , a % b ) ; else return a ; } int main ( ) { int t , i ; long long int a , b , c , d ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & a ) ; scanf ( \"%lld\" , & b ) ; if ( a > b ) c = gcd ( a , b ) ; else c = gcd ( b , a ) ; d = ( a * b ) / c ; printf ( \"%lld %lld\n\" , c , d ) ; } return 0 ; }", "label": 0, "id": 11083}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { int l = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ; int r = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; arr [ i ] [ j ] = ( l >= r ) ? l : r ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19456}
{"input": "void main ( ) { int num_cases , n , triangle [ 100 ] [ 100 ] , i , j , temp ; scanf ( \"%d\" , & num_cases ) ; while ( num_cases -- > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { temp = triangle [ i ] [ j ] + triangle [ i + 1 ] [ j ] ; if ( temp < triangle [ i ] [ j ] + triangle [ i + 1 ] [ j + 1 ] ) temp = triangle [ i ] [ j ] + triangle [ i + 1 ] [ j + 1 ] ; triangle [ i ] [ j ] = temp ; } } printf ( \"%d\n\" , triangle [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 13519}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , not , t1 , nor , t2 , i , j , res [ 1000 ] , sum1 , sum2 , pos = 0 ; scanf ( \"%d\" , & not ) ; t1 = not ; while ( t1 -- ) { scanf ( \"%d\" , & nor ) ; t2 = nor ; i = 0 , j = 0 ; while ( t2 -- ) { while ( j <= i ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; j ++ ; } i ++ ; j = 0 ; } i = nor - 2 ; while ( i >= 0 ) { j = 0 ; while ( j <= i ) { sum1 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; sum2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = ( sum1 > sum2 ) ? sum1 : sum2 ; j ++ ; } i -- ; } res [ pos ++ ] = a [ 0 ] [ 0 ] ; } for ( i = 0 ; i < pos ; i ++ ) printf ( \"\n%d\" , res [ i ] ) ; return 0 ; }", "label": 0, "id": 25884}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int t , i , j , k , n , arr [ n ] [ n ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\n\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } for ( j = n - 1 ; j >= 1 ; j -- ) { for ( k = j ; k >= 1 ; k -- ) { arr [ j - 1 ] [ k - 1 ] += max ( arr [ j ] [ k ] , arr [ j ] [ k - 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 455}
{"input": "int main ( ) { int t , n , i , j , sum ; int a [ 100 ] = { 0 } ; int b [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { sum = 0 ; a [ j ] = b [ j ] ; scanf ( \"%d\" , & b [ j ] ) ; if ( j >= 0 && ( j < i || j == 0 ) ) { sum = a [ j ] + b [ j ] ; } if ( j - 1 >= 0 ) { if ( sum < a [ j - 1 ] + b [ j ] ) sum = a [ j - 1 ] + b [ j ] ; } b [ j ] = sum ; } } sum = b [ j ] ; for ( i = 0 ; i < n ; i ++ ) { if ( sum < b [ i ] ) sum = b [ i ] ; b [ i ] = a [ i ] = 0 ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 17613}
{"input": "int main ( ) { long int T , N , min , a , result ; int i ; scanf ( \"%ld\" , & T ) ; while ( T -- ) { scanf ( \"%ld\" , & N ) ; min = MAX ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%ld\" , & a ) ; if ( a < min ) min = a ; } printf ( \"%ld\n\" , min * ( N - 1 ) ) ; } return 0 ; }", "label": 0, "id": 15922}
{"input": "int main ( ) { long long a [ 50000 ] ; long int i ; long long sm ; long int n ; int tc ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; sm = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( sm > a [ i ] ) sm = a [ i ] ; } printf ( \"%lld\n\" , ( 1 | ( sm * ( n - 1 ) ) ) ) ; } return 0 ; }", "label": 1, "id": 21544}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n1 , n2 , gcd = 0 ; scanf ( \"%d%d\" , & n1 , & n2 ) ; if ( n2 == 0 ) gcd = n1 ; for ( int i = 1 ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } printf ( \"%d\\t%d\n\" , gcd , ( n1 * n2 ) / gcd ) ; } return 0 ; }", "label": 2, "id": 27015}
{"input": "int main ( ) { int n , count , i , j , k ; long long int a [ 2001 ] , a1 , b , c ; do { scanf ( \"%d\" , & n ) ; if ( n == 0 ) break ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; count = 0 ; for ( i = 0 ; i < n - 2 ; i ++ ) { for ( j = i + 1 ; j < n - 1 ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { a1 = a [ i ] ; b = a [ j ] ; c = a [ k ] ; if ( ( c > a1 + b ) || ( b > c + a1 ) || ( a1 > b + c ) ) count ++ ; } } } printf ( \"%d\n\" , count ) ; } while ( n ) ; return 0 ; }", "label": 1, "id": 12265}
{"input": "int main ( ) { long int a , b , x , y , r , g , l , t ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\n\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { r = a % b ; a = b ; b = r ; } g = a ; l = ( x * y ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 5613}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8545}
{"input": "int main ( void ) { int n , i , j , t ; int a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; } int max ( int a , int b ) { if ( a >= b ) return a ; return b ; }", "label": 0, "id": 22716}
{"input": "int main ( ) { int t , a , flag = 0 , b , i , j , min , max , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { min = b ; ; max = a ; } else { min = a ; max = b ; } for ( i = 1 ; i <= a * b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; if ( i % a == 0 && i % b == 0 ) break ; } lcm = i ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 15}
{"input": "void remove_element ( long int * * temp , int index , long int n ) { long int * array = malloc ( ( n - 1 ) * sizeof ( long int * ) ) ; memmove ( array , * temp , ( index ) * sizeof ( long int ) ) ; memmove ( array + index , ( * temp ) + ( index + 1 ) , ( n - ( index + 1 ) ) * ( sizeof ( long int ) ) ) ; free ( * temp ) ; * temp = array ; } int main ( ) { int t , i , rem_ele_inx = 0 ; long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"Enter the total:\" ) ; scanf ( \"%ld\" , & n ) ; long int * temp = malloc ( n * sizeof ( long int * ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , ( temp + i ) ) ; for ( ; n != 1 ; ) { if ( ( temp [ 0 ] ) < ( temp [ 1 ] ) ) { rem_ele_inx = 1 ; } else rem_ele_inx = 0 ; remove_element ( & temp , rem_ele_inx , n ) ; n -- ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"\nTemp:%ld\" , temp [ i ] ) ; } } }", "label": 2, "id": 4593}
{"input": "long int a [ 50000 ] ; int main ( ) { int t ; long int n , i ; long long int c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } c = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < c ) c = a [ i ] ; } printf ( \"%lld \n\" , ( ( n - 1 ) * c ) ) ; } return 0 ; }", "label": 1, "id": 7161}
{"input": "long max ( long a , long b ) { if ( a > b ) return a ; else return b ; } long min ( long a , long b ) { if ( a > b ) return b ; else return a ; } int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { long a , b , g = 1 , M , m , i ; scanf ( \"%ld %ld\" , & a , & b ) ; long long l ; M = min ( a , b ) ; for ( i = 2 ; i <= M ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g = i ; } m = max ( a , b ) ; while ( m % a != 0 || m % b != 0 ) m ++ ; l = m ; printf ( \"%ld %lld\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 5776}
{"input": "int main ( ) { int T , l , q , p , t , lcm , r ; int A , B ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) { t = A ; A = B ; B = t ; } p = A ; q = B ; while ( p != 0 ) { r = q / p ; p = q % p ; q = ( q - p ) / r ; } lcm = ( A * B ) / q ; printf ( \"%d %d\n\" , q , lcm ) ; } return 0 ; }", "label": 1, "id": 8340}
{"input": "int cache [ 110 ] [ 110 ] , n , a [ 110 ] [ 110 ] ; int MAX ( int a , int b ) { if ( a > b ) return a ; else return b ; } int sum ( int row , int col ) { if ( cache [ row ] [ col ] != - 1 ) return cache [ row ] [ col ] ; else if ( row == n - 1 ) return a [ row ] [ col ] ; else return cache [ row ] [ col ] = MAX ( sum ( row + 1 , col ) , sum ( row + 1 , col + 1 ) ) + a [ row ] [ col ] ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"\n\" ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) cache [ i ] [ j ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) { printf ( \"\n\" ) ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"\n %d\" , sum ( 0 , 0 ) ) ; } return 0 ; }", "label": 1, "id": 7496}
{"input": "int main ( ) { long long int n , i , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld %lld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } a [ i ] = denominator ; b [ i ] = num1 * num2 / a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%lld %lld\n\" , a [ i ] , b [ i ] ) ; } return 0 ; }", "label": 0, "id": 12002}
{"input": "int main ( ) { int a , b , x , y , z , n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { x = x % y ; z = x ; x = y ; y = z ; } printf ( \"%d %d\n\" , x , a * b / x ) ; } return 0 ; }", "label": 1, "id": 3028}
{"input": "int cost ( int n ) ; int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T >= 1 && T <= 10 ) { unsigned int n ; scanf ( \"%d\" , & n ) ; printf ( \"%d\n\" , cost ( n ) ) ; T -- ; } return 0 ; } int cost ( int n ) { unsigned int a [ n ] , top = 0 , i , delele , sum = 0 , b = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; if ( n == 1 ) return a [ 0 ] ; do { delele = a [ b ] > a [ b + 1 ] ? a [ b ] : a [ b + 1 ] ; if ( delele == a [ b ] ) { sum = sum + a [ b + 1 ] ; top ++ ; } else { sum = sum + a [ b ] ; a [ b ] = a [ b ] + a [ b + 1 ] ; a [ b + 1 ] = a [ b ] - a [ b + 1 ] ; a [ b ] = a [ b ] - a [ b + 1 ] ; top ++ ; } b ++ ; } while ( top != n - 1 ) ; return sum ; }", "label": 1, "id": 17564}
{"input": "int gcd ( int m , int n ) { if ( n == 0 ) return m ; else return gcd ( n , m % n ) ; } int main ( ) { int t , a , b , h , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; h = gcd ( a , b ) ; l = ( a / h ) * b ; printf ( \"%d %d\n\" , h , l ) ; } return 0 ; }", "label": 1, "id": 24645}
{"input": "int main ( ) { long long int T ; scanf ( \"%lld\" , & T ) ; long long int i , A , B ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%lld%lld\" , & A , & B ) ; long long int C = A ; long long int D = B ; long long int rem , gcd ; if ( A > B ) { rem = A % B ; if ( rem == 0 ) gcd = B ; else { while ( rem != 0 ) { rem = A % B ; A = B ; B = rem ; } gcd = A ; } } else { rem = B % A ; if ( rem == 0 ) gcd = A ; else { while ( rem != 0 ) { rem = B % A ; B = A ; A = rem ; } gcd = B ; } } if ( gcd > 1 ) { do { C = C / gcd ; D = D / gcd ; } while ( C % gcd == 0 && D % gcd == 0 ) ; } long long int lcm ; lcm = gcd * C * D ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 10388}
{"input": "int sum = 0 , ele [ 100 ] [ 100 ] , store [ 100 ] [ 100 ] ; int maxfunc ( int row , int col , int l ) { if ( store [ row ] [ col ] ) { return store [ row ] [ col ] ; } if ( row < l ) { sum = ele [ row ] [ col ] + max ( maxfunc ( row + 1 , col , l ) , maxfunc ( row + 1 , col + 1 , l ) ) ; store [ row ] [ col ] = sum ; return sum ; } else return 0 ; } int main ( ) { int n , l , i , j , k , ans [ 1000 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & l ) ; for ( j = 0 ; j < l ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & ele [ j ] [ k ] ) ; } } ans [ i ] = maxfunc ( 0 , 0 , l ) ; memset ( store , 0 , 1000 ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , ans [ i ] ) ; } }", "label": 1, "id": 14634}
{"input": "int tri [ 100 ] [ 100 ] = { 0 } , arr [ 202 ] [ 202 ] = { 0 } ; int main ( ) { int t , n , i , j , key , k = 0 ; scanf ( \"%d\" , & t ) ; while ( t ) { for ( i = 0 ; i < 202 ; i ++ ) { for ( j = 0 ; j < 202 ; j ++ ) arr [ i ] [ j ] = 0 ; } scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & tri [ i ] [ j ] ) ; } arr [ 0 ] [ 0 ] = tri [ 0 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { k = 0 ; for ( j = 0 ; j <= 2 * i ; j ++ ) { arr [ i + 1 ] [ k ] = arr [ i ] [ j ] + tri [ i + 1 ] [ j ] ; k ++ ; arr [ i + 1 ] [ k ] = arr [ i ] [ j ] + tri [ i + 1 ] [ j + 1 ] ; k ++ ; } } key = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 2 * i ; j ++ ) { if ( arr [ i ] [ j ] > key ) { key = arr [ i ] [ j ] ; } } } printf ( \"%d\n\" , key ) ; t -- ; } return 0 ; }", "label": 1, "id": 26841}
{"input": "int main ( ) { int m ; long long n , a , i , min = 99999 ; scanf ( \"%d\" , & m ) ; while ( m -- ) { scanf ( \"%llu\" , & n ) ; i = 0 ; while ( i < n ) { scanf ( \"%llu\" , & a ) ; if ( a < min ) min = a ; i ++ ; } printf ( \"%llu\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 24565}
{"input": "int main ( ) { int t , n , i , j , sum , max , num ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; max = - 1 ; for ( i = 0 ; i < n ; i ++ ) { sum = 0 ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num ) ; sum = sum + num ; } if ( sum > max ) max = sum ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 247}
{"input": "int main ( ) { int n , T , i , min , a [ 50001 ] ; scanf ( \"%d\" , & T ) ; while ( T -- ) { min = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < a [ min ] ) min = i ; } printf ( \"%d\n\" , a [ min ] * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 11091}
{"input": "int main ( void ) { int T , n ; int A [ SIZE ] [ SIZE ] = { 0 } ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) { if ( A [ i ] [ j ] > A [ i ] [ j + 1 ] ) { A [ i - 1 ] [ j ] = A [ i - 1 ] [ j ] + A [ i ] [ j ] ; } else { A [ i - 1 ] [ j ] = A [ i - 1 ] [ j ] + A [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4390}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { long int a , b , i = 0 , z , y ; long int gcd = 1 , lcm ; scanf ( \"%ld %ld\" , & a , & b ) ; if ( a >= b ) { z = a ; y = b ; } else { z = b ; y = a ; } while ( 1 ) { if ( z % y == 0 ) { gcd = y ; break ; } else { y = z % y ; } } lcm = a * b / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 21402}
{"input": "int main ( ) { int T , N , i , j , min = 100001 , cost ; printf ( \"Enter the no. of test cases:\n\" ) ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { printf ( \"Enter size of array:\n\" ) ; scanf ( \"%d\" , & N ) ; int A [ N ] ; printf ( \"Enter the array elements:\n\" ) ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%d\" , & A [ j ] ) ; if ( A [ j ] < min ) min = A [ j ] ; } cost = ( N - 1 ) * min ; printf ( \"Minimum Cost=%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 25816}
{"input": "int main ( ) { int T , i , j , A , B , g ; double l , c ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; g = 1 ; c = A * B ; if ( A > B ) { for ( j = 2 ; j < B ; j ++ ) { if ( A % j == 0 && B % j == 0 ) { g = g * j ; A = A / j ; B = B / j ; } } l = c / g ; printf ( \"%d %0.lf\n\" , g , l ) ; } else if ( A < B ) { for ( j = 2 ; j < A ; j ++ ) { if ( A % j == 0 && B % j == 0 ) { g = g * j ; A = A / j ; B = B / j ; } } l = c / g ; printf ( \"%d %0.lf\n\" , g , l ) ; } else printf ( \"%d %d\n\" , A , A ) ; } return 0 ; }", "label": 1, "id": 24640}
{"input": "int main ( ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = i ; j > 0 ; j -- ) { if ( ( a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ) > ( a [ i ] [ j - 1 ] + a [ i - 1 ] [ j - 1 ] ) ) a [ i - 1 ] [ j - 1 ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; else { a [ i - 1 ] [ j - 1 ] = a [ i ] [ j - 1 ] + a [ i - 1 ] [ j - 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { printf ( \"%d\\t\" , a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } } return 0 ; }", "label": 1, "id": 26184}
{"input": "int main ( ) { int T ; long int A , B ; scanf ( \"%d\" , & T ) ; for ( int i = 0 ; i < T ; i ++ ) { scanf ( \"%ld %ld\" , & A , & B ) ; long int lcm = 0 , rem , num1 = A , num2 = B ; while ( B != 0 ) { rem = A % B ; A = B ; B = rem ; } lcm = ( num1 * num2 ) / A ; printf ( \"%ld %ld\n\" , lcm , A ) ; } return 0 ; }", "label": 1, "id": 15520}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int small , i , j ; int price [ t ] ; long int n ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld\" , & n ) ; int arr1 [ n ] ; for ( j = 1 ; j <= n ; j ++ ) { scanf ( \"%d\" , & arr1 [ j ] ) ; } small = arr1 [ 1 ] ; for ( j = 1 ; j <= n ; j ++ ) { if ( arr1 [ j ] < small ) small = arr1 [ j ] ; } price [ i ] = small * ( n - 1 ) ; } int arr1 [ n ] ; for ( i = 1 ; i <= t ; i ++ ) { printf ( \"%d\n\" , price [ i ] ) ; } }", "label": 0, "id": 26674}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n1 , n2 , num1 , num2 , rem , GCD , LCM ; scanf ( \"%d %d\" , & num1 , & num2 ) ; n1 = num1 , n2 = num2 ; while ( n2 != 0 ) { rem = n1 % n2 ; n1 = n2 ; n2 = rem ; } GCD = n1 ; LCM = ( num1 / GCD ) * num2 ; printf ( \"%d\n\" , GCD ) ; printf ( \"%d\n\" , LCM ) ; } return 0 ; }", "label": 1, "id": 15800}
{"input": "int read ( ) { register int c , n = 0 ; while ( ( c = getchar_unlocked ( ) ) > '9' || c < '0' ) ; while ( c >= '0' && c <= '9' ) { n = ( n << 3 ) + ( n << 1 ) + c - '0' ; c = getchar_unlocked ( ) ; } return n ; } int main ( void ) { register int i , j ; int t , n , arr [ 100 ] [ 100 ] ; t = read ( ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) arr [ i ] [ j ] = read ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += MAX ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 14538}
{"input": "int max ( int , int ) ; int main ( ) { int * * a , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 0, "id": 5929}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n ; scanf ( \"%d\" , & n ) ; int ar [ n ] ; int i , length = 1 , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & ar [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { length ++ ; if ( ar [ i ] > ar [ i + 1 ] ) { sum += ( ( length ) * ( length + 1 ) / 2 ) ; length = 1 ; } } sum += ( ( length ) * ( length + 1 ) / 2 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 17522}
{"input": "int n ; int max ( int a , int b ) { if ( a > b ) return a ; if ( b > a ) return b ; } int check ( int a [ n ] [ n ] , int i , int j ) { int t1 , t2 , t ; if ( i == n ) { return 0 ; } t1 = check ( a , i + 1 , j + 1 ) ; t2 = check ( a , i + 1 , j ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; return t ; } void code ( ) { int i , j , k ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; k <= i ; k ++ ) { scanf ( \"%d\" , & a [ i ] [ k ] ) ; } } k = check ( a , 0 , 0 ) ; printf ( \"%d\n\" , k ) ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { code ( ) ; } return 0 ; }", "label": 2, "id": 11705}
{"input": "int main ( ) { int test , size , i ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { scanf ( \"%d\" , & size ) ; int a [ size ] ; int min = 1000000 ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } long long int cost = min * ( size - 1 ) ; printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 15976}
{"input": "int main ( ) { long int T , a , b , z , i , m , n , v ; scanf ( \"%ld\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( b > a ) { z = a ; a = b ; b = z ; } m = a ; n = b ; while ( a % b != 0 ) { a = a % b ; if ( b > a ) { z = a ; a = b ; b = z ; } } printf ( \"%ld \" , b ) ; v = m ; while ( v % m != 0 || v % n != 0 ) { v = v + m ; } printf ( \"%ld\n\" , v ) ; } return 0 ; }", "label": 2, "id": 13172}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; long int a , b , temp ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( b < a ) { temp = a ; a = b ; b = temp ; } if ( a % b == 0 ) { printf ( \"%ld %ld\" , b , a ) ; continue ; } temp = b / 2 ; while ( b % temp != 0 || a % temp != 0 ) { temp -- ; } b = b * a ; b = b / temp ; printf ( \"%ld %ld\n\" , temp , b ) ; } return 0 ; }", "label": 2, "id": 2323}
{"input": "int main ( ) { int T , N ; long long int A , B , L ; scanf ( \"%d\" , & T ) ; while ( T ) { scanf ( \"lld%%lld\" , & A , & B ) ; while ( A % B ) { A = B ; B = A % B ; } for ( L = 1 ; L <= ( A * B ) ; L ++ ) { if ( L % A == 0 && L % B == 0 ) break ; } printf ( \"%lld %lld\n\" , B , L ) ; T = T - 1 ; } return 0 ; }", "label": 3, "id": 24540}
{"input": "int findMaxPath ( int grid [ 100 ] [ 100 ] , int , int ) ; int main ( ) { int notc , k ; int grid [ 100 ] [ 100 ] ; scanf ( \"%d\" , & notc ) ; while ( notc -- ) { int nol , i , j ; scanf ( \"%d\" , & nol ) ; for ( i = 0 ; i < nol ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & grid [ i ] [ j ] ) ; } } printf ( \"%d\n\" , findMaxPath ( grid , nol , 1 ) ) ; } return 0 ; } int max ( int a , int b ) { return ( ( a > b ) ? a : b ) ; } int findMaxPath ( int grid [ 100 ] [ 100 ] , int nol , int i ) { if ( nol == 1 ) { return grid [ 0 ] [ 0 ] ; } else { int j ; int maxPrev = 0 , maxNow = 0 ; for ( j = 0 ; j < i ; j ++ ) { int temp1 , temp2 ; temp1 = grid [ 0 ] [ j ] + findMaxPath ( ( grid [ 1 ] + j ) , nol - 1 , i + 1 ) ; temp2 = grid [ 0 ] [ j ] + findMaxPath ( ( grid [ 1 ] + 1 + j ) , nol - 1 , i + 1 ) ; maxPrev = maxNow ; maxNow = max ( temp1 , temp2 ) ; maxNow = max ( maxPrev , maxNow ) ; } return maxNow ; } }", "label": 2, "id": 8565}
{"input": "int max ( int m , int n ) { if ( m > n ) return m ; return n ; } int main ( void ) { int n , i , j , p , mx , t ; char ch [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\n\" , & ch [ i ] [ j ] ) ; for ( i = 1 ; i < n ; i ++ ) { p = i - 1 ; ch [ i ] [ 0 ] = ch [ i ] [ 0 ] + ch [ p ] [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) ch [ i ] [ j ] = ch [ i ] [ j ] + max ( ch [ p ] [ j ] , ch [ p ] [ j - 1 ] ) ; ch [ i ] [ j ] = ch [ i ] [ j ] + ch [ p ] [ j - 1 ] ; } p = n - 1 ; mx = ch [ p ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( ch [ p ] [ i ] > mx ) mx = ch [ p ] [ i ] ; printf ( \"%d\n\" , mx ) ; t -- ; } return 0 ; }", "label": 1, "id": 25047}
{"input": "void main ( ) { int T , N ; int * ctr , * A ; int p , q , i , j , ch ; scanf ( \"%d\" , & T ) ; ctr = ( int * ) calloc ( T , sizeof ( int ) ) ; if ( ctr == NULL ) { exit ( 0 ) ; } for ( p = 0 ; p < T ; p ++ ) { scanf ( \"%d\" , & N ) ; A = ( int * ) malloc ( N * sizeof ( int ) ) ; if ( A == NULL ) { free ( ctr ) ; exit ( 0 ) ; } for ( q = 0 ; q < N ; q ++ ) { scanf ( \"%d\" , A + q ) ; } for ( i = 0 ; i < N ; i ++ ) { ch = A [ i ] ; for ( j = i ; j < N ; j ++ ) { if ( ch <= A [ j ] ) { ctr [ p ] ++ ; ch = A [ j ] ; } else break ; } } } for ( p = 0 ; p < T ; p ++ ) { printf ( \"%d\n\" , ctr [ p ] ) ; } free ( ctr ) ; free ( A ) ; }", "label": 0, "id": 26858}
{"input": "int arr [ 100 ] ; int main ( ) { int t_case , i , j , k , a , b , temp_prev , row , max , num , m ; scanf ( \"%d\" , & t_case ) ; for ( i = 0 ; i < t_case ; i ++ ) { scanf ( \"%d\" , & row ) ; for ( j = 0 ; j < row ; j ++ ) arr [ j ] = 0 ; for ( j = 1 ; j <= row ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { scanf ( \"%d\" , & num ) ; if ( k == 0 ) { temp_prev = arr [ k ] ; arr [ k ] += num ; } else { if ( k != ( j - 1 ) ) { a = temp_prev + num ; b = arr [ k ] + num ; temp_prev = arr [ k ] ; if ( a > b ) arr [ k ] = a ; else arr [ k ] = b ; } else { arr [ k ] += ( temp_prev + num ) ; } } } } max = arr [ 0 ] ; for ( j = 1 ; j < row ; j ++ ) { if ( arr [ j ] > max ) max = arr [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 6291}
{"input": "void main ( ) { int i , j , t , a [ 1000 ] , b , l , n , m ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & m ) ; for ( j = 0 ; j < m ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = m - 1 , b = 0 ; j > 0 ; j -- ) { for ( l = 0 ; a [ j ] != 0 ; ) { n = a [ j ] ; a [ j ] = a [ j ] / 10 ; if ( l < n ) { l = n ; } } b = b + l ; } printf ( \"%d\" , b ) ; } }", "label": 1, "id": 811}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; long long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; if ( a < b ) { long long int temp = a ; a = b ; b = temp ; } long long int g = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 0, "id": 1151}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a , b , n , lcm ; scanf ( \"%d%d\" , & a , & b ) ; n = gcd ( a , b ) ; lcm = a * b / n ; printf ( \"%d \" , n ) ; printf ( \"%d\n\" , lcm ) ; } } int gcd ( int x , int y ) { if ( x > y ) { if ( x % y == 0 ) return y ; else return gcd ( y , x % y ) ; } else { if ( y % x == 0 ) return x ; else return ( x , y % x ) ; } }", "label": 1, "id": 15789}
{"input": "int main ( ) { int t , num [ 100000 ] , i , k ; scanf ( \"%d\" , & t ) ; int nm [ 50000 ] , n , min [ t ] ; for ( i = 0 ; i < t ; i ++ ) { min [ i ] = 100000 ; scanf ( \"%d\" , & nm [ i ] ) ; for ( k = 0 ; k < nm [ i ] ; k ++ ) { scanf ( \"%d\" , & num [ k ] ) ; } for ( k = 0 ; k < nm [ i ] ; k ++ ) { if ( min [ i ] > num [ k ] ) min [ i ] = num [ k ] ; } } for ( i = 0 ; i < t ; i ++ ) { n = min [ i ] * ( nm [ i ] - 1 ) ; printf ( \"%d\n\" , n ) ; } }", "label": 0, "id": 8205}
{"input": "int main ( ) { int n1 , n2 , i , gcd , t ; printf ( \"Enter two integers: \" ) ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } t = ( n1 > n2 ) ? n1 : n2 ; while ( 1 ) { if ( t % n1 == 0 && t % n2 == 0 ) { break ; } ++ t ; } return 0 ; printf ( \"%d%d\" , gcd , t ) ; return 0 ; }", "label": 1, "id": 24377}
{"input": "int main ( ) { int n , j , i ; scanf ( \"%d\" , n ) ; int input [ n ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & input [ i ] [ j ] ) ; } solve ( 0 , 0 , n , input ) ; return 0 ; } int solve ( int i , int j , int n , int input [ n ] [ 100 ] ) { int t1 , t2 , t ; if ( i >= n ) return 0 ; else { t1 = solve ( i + 1 , j , n , input ) ; t2 = solve ( i + 1 , j + 1 , n , input ) ; t = input [ i ] [ j ] + max ( t1 , t2 ) ; printf ( \"%d\" , t ) ; return t ; } } int max ( t1 , t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; }", "label": 3, "id": 16711}
{"input": "main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , min = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 12554}
{"input": "int main ( ) { int T , i = 0 , n , count , x , j , N ; scanf ( \"%d\" , & T ) ; int ans [ T ] ; while ( 1 ) { scanf ( \"%d\" , & N ) ; int a [ N + 1 ] ; count = 0 ; a [ N ] = 0 ; for ( j = 0 ; j < N ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; j = 0 ; while ( 1 ) { n = 1 ; while ( 1 ) { if ( a [ j + 1 ] >= a [ j ] ) { n ++ ; j ++ ; continue ; } else break ; } count = count + ( n * ( n + 1 ) ) / 2 ; j ++ ; if ( j == N ) break ; } ans [ i ] = count ; i ++ ; if ( i == T ) break ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%d\n\" , ans [ i ] ) ; return 0 ; }", "label": 0, "id": 8147}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long int a , b ; scanf ( \"%ld%ld\" , & a , & b ) ; long int x = gcd ( a , b ) ; printf ( \"%ld %d\n\" , x , ( a * b ) ) ; } return 0 ; }", "label": 1, "id": 16627}
{"input": "int sort ( int * a , int first , int last ) { int i = first ; int j = last ; int p = first ; if ( i >= j ) { return 0 ; } while ( i < j ) { while ( a [ i ] >= a [ p ] && i < j ) i ++ ; while ( a [ j ] < a [ p ] ) j -- ; if ( i < j ) { int temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } int temp = a [ p ] ; a [ p ] = a [ j ] ; a [ j ] = temp ; sort ( a , first , j - 1 ) ; sort ( a , j + 1 , last ) ; return 0 ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int k = 1 ; int i , j ; int array [ n ] ; int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , array + j ) ; } sort ( array , 0 , k - 1 ) ; k ++ ; if ( i == 0 ) { continue ; } sum += array [ 0 ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 7185}
{"input": "int gcd ( int a , int b ) { int g ; while ( a % b != 0 ) { g = a ; a = b ; b = g % b ; } return b ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , ( a * b / gcd ( a , b ) ) ) ; t -- ; } return 0 ; }", "label": 1, "id": 2780}
{"input": "int A [ 100 ] [ 100 ] ; int sum ( int n , int i , int j ) { int s ; if ( i == n ) s = A [ i ] [ j ] ; else if ( sum ( n , i + 1 , j ) >= sum ( n , i + 1 , j + 1 ) ) s = sum ( n , i + 1 , j ) + A [ i ] [ j ] ; else s = sum ( n , i + 1 , j + 1 ) + A [ i ] [ j ] ; return s ; } int main ( ) { int t , k , x , y , n ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( x = 0 ; x < n ; x ++ ) { for ( y = 0 ; y <= x ; y ++ ) { if ( x >= y ) scanf ( \"%d\" , & A [ x ] [ y ] ) ; } } printf ( \"%d\n\" , sum ( n , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 13980}
{"input": "int main ( ) { int tc , num1 , num2 , gcd , lcm , i ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; for ( i = 0 ; i <= num1 && i <= num2 ; i ++ ) { if ( num1 % i == 0 && num2 % i == 0 ) gcd = i ; printf ( \"%d\" , gcd ) ; } lcm = num1 * num2 / gcd ; printf ( \"%d \n\" , lcm ) ; } return 0 ; }", "label": 3, "id": 18964}
{"input": "int main ( ) { int t , num1 , num2 , gcd , lcm [ 100 ] , i , x , count , j , temp = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%d %d\" , & num1 , & num2 ) ; for ( i = ( num1 < num2 ? num1 : num2 ) ; i > 0 ; i -- ) { if ( num1 % i == 0 && num2 % i == 0 ) { gcd = i ; break ; } } num1 = num1 / gcd ; i = 0 ; do { lcm [ i ] = num1 ; i ++ ; } while ( num1 = num1 / 10 ) ; j = 0 ; while ( j < i || temp != 0 ) { if ( j < i ) { x = lcm [ j ] * num2 + temp ; lcm [ j ] = x ; temp = x / 10 ; j ++ ; } else { lcm [ j ] = temp ; temp = temp / 10 ; j ++ ; } count ++ ; } printf ( \"%d \" , gcd ) ; for ( i = count - 1 ; i >= 0 ; i -- ) printf ( \"%d\" , lcm [ i ] ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 22120}
{"input": "int main ( ) { int i , j , t , a , b , g ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; j = 1 ; while ( j <= a ) { if ( a % j == 0 && b % j == 0 ) g = j ; j ++ ; } printf ( \"%d %d\n\" , g , ( a * b / g ) ) ; } }", "label": 2, "id": 10384}
{"input": "int main ( ) { int i , t , a , b , temp ; printf ( \"Enter the number of testcases:\n\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"Enter two integers:\n\" ) ; scanf ( \"%d%d\" , & a , & b ) ; temp = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , a , temp / a ) ; } return 0 ; }", "label": 1, "id": 26367}
{"input": "int main ( ) { int t , a , b , l , max , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { max = 1 ; scanf ( \"%d%d\" , & a , & b ) ; for ( i = 2 ; ( ( i <= a ) && ( i <= b ) ) ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) max = i ; } for ( i = 1 ; i <= ( a * b ) ; i ++ ) { if ( ( i % a == 0 ) && ( i % b == 0 ) ) { l = i ; break ; } } printf ( \"%d %d\" , max , l ) ; } return 0 ; }", "label": 2, "id": 20319}
{"input": "int main ( ) { int t , a , b , n , i = 2 , gcd = 1 , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; n = a > b ? b : a ; while ( i <= n ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) gcd = i ; i ++ ; } n = a > b ? a : b ; while ( 1 ) { if ( n % a == 0 && n % b == 0 ) { lcm = n ; break ; } ++ n ; } printf ( \"%d %d\n\" , gcd , lcm ) ; gcd = 1 ; i = 2 ; } return 0 ; }", "label": 2, "id": 26927}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] , c = 0 , i , j ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i ; j < n - 1 ; j ++ ) { if ( a [ j ] <= a [ j + 1 ] ) c ++ ; else break ; } } printf ( \"%lld\n\" , c + n ) ; } return 0 ; }", "label": 0, "id": 23972}
{"input": "int main ( void ) { long long int a , b , p , q , gcd , lcm ; int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; p = a ; q = b ; if ( p != 0 && q != 0 ) { while ( p != 0 && q != 0 ) { if ( p > q ) { p = p - q ; } else { q = q - p ; } gcd = p ; } lcm = a * b / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; if ( a == b ) printf ( \"%lld %lld\" , a , b ) ; } if ( a == 0 || b == 0 ) printf ( \"0 0\n\" ) ; else if ( a == 0 && b == 0 ) printf ( \"0 0\n\" ) ; } return 0 ; }", "label": 0, "id": 22770}
{"input": "int gcd ( int , int ) ; int main ( ) { int temp = 1 , a , b , x ; scanf ( \"%d%d\" , & a , & b ) ; while ( 1 ) { if ( ( temp % a == 0 ) && ( temp % b == 0 ) ) { break ; } temp ++ ; } printf ( \"%d\n\" , temp ) ; if ( a < b ) { x = gcd ( a , b ) ; } else { x = gcd ( b , a ) ; } printf ( \"%d\n\" , x ) ; } int gcd ( int a , int b ) { if ( b % a == 0 ) { return a ; } else { gcd ( b % a , a ) ; } }", "label": 1, "id": 15534}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int A [ 100 ] [ 100 ] , i , j , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( A [ i ] [ j ] + A [ i + 1 ] [ j ] >= ( A [ i ] [ j ] + A [ i + 1 ] [ j + 1 ] ) ) A [ i ] [ j ] += A [ i + 1 ] [ j ] ; else A [ i ] [ j ] += A [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 370}
{"input": "int main ( ) { long int a , b , i , j , t , m , gcd = 1 , lcm ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { m = b ; } else { m = a ; } for ( j = m ; j >= 1 ; j -- ) { if ( a % j == 0 && b % j == 0 ) { gcd = j ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\" , gcd , lcm ) ; gcd = 1 ; } return 0 ; }", "label": 2, "id": 19864}
{"input": "int small ( int temp [ ] , int t ) { int i , j , k ; k = temp [ 0 ] ; for ( i = 0 ; i < t ; i ++ ) { if ( k > temp [ i ] && temp [ i ] != 0 ) { k = temp [ i ] ; } } return k ; } void re ( int temp [ ] , int t ) { int i , j , k ; for ( i = 0 ; i < t ; i ++ ) { k = temp [ i ] ; for ( j = i + 1 ; j < t ; j ++ ) { if ( k == temp [ j ] ) { temp [ j ] = 0 ; } } } } int main ( ) { unsigned int n , s ; int i , j , k , t , temp [ 1000 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; t = ( t * t + t ) / 2 ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d\" , & temp [ j ] ) ; } re ( temp , t ) ; k = small ( temp , t ) ; int sum = 0 ; for ( j = 0 ; j < t ; j ++ ) { sum = sum + temp [ j ] ; } sum = sum - k ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 13435}
{"input": "int main ( ) { int t , n , i , x , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100001 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & x ) ; if ( x < min ) min = x ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 25246}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11285}
{"input": "int main ( ) { int n , m , i , j , now , max , data [ 2 ] [ 102 ] = { } ; scanf ( \"%d\" , & n ) ; while ( n -- ) { now = 0 ; scanf ( \"%d\" , & m ) ; scanf ( \"%d\" , & data [ now ] [ 1 ] ) ; max = data [ now ] [ 1 ] ; data [ now ] [ 2 ] = 0 ; for ( i = 2 ; i <= m ; i ++ ) { now = 1 - now ; for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & data [ now ] [ j ] ) ; if ( data [ 1 - now ] [ j ] > data [ 1 - now ] [ j - 1 ] ) data [ now ] [ j ] += data [ 1 - now ] [ j ] ; else data [ now ] [ j ] += data [ 1 - now ] [ j - 1 ] ; if ( data [ now ] [ j ] > max ) max = data [ now ] [ j ] ; } data [ now ] [ j ] = 0 ; } printf ( \"%d\n\" , max ) ; } }", "label": 0, "id": 19805}
{"input": "void rec ( int , int ) ; int a [ 100 ] [ 100 ] = { 0 , 0 } , save = 0 ; int main ( ) { int i , l , t , j , cases , ccnt ; scanf ( \"%d\" , & cases ) ; for ( ccnt = 0 ; ccnt < cases ; ccnt ++ ) { scanf ( \"%d\" , & l ) ; getchar ( ) ; for ( i = 0 ; i < l ; i ++ ) for ( t = 0 ; t <= i ; t ++ ) { a [ i ] [ t ] = getchar ( ) - '0' ; getchar ( ) ; } for ( j = 0 ; j <= l ; j ++ ) a [ i ] [ j ] = 0 ; rec ( 0 , 0 ) ; printf ( \"%d\n\" , save ) ; save = 0 ; } return 0 ; } void rec ( int i , int j ) { static int sum = 0 ; sum = sum + a [ i ] [ j ] ; if ( a [ i + 1 ] [ j ] != 0 ) { rec ( i + 1 , j ) ; rec ( i + 1 , j + 1 ) ; sum -= a [ i ] [ j ] ; } else { if ( sum > save ) save = sum ; sum -= a [ i ] [ j ] ; } }", "label": 2, "id": 22154}
{"input": "int maxi ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int func ( int i , int j , int n , int a [ ] [ n ] , int b [ ] [ n ] ) { if ( b [ i ] [ j ] != - 1 ) { return b [ i ] [ j ] ; } if ( i == n - 1 ) { b [ i ] [ j ] = a [ i ] [ j ] ; return a [ i ] [ j ] ; } return maxi ( a [ i ] [ j ] + func ( i + 1 , j , n , a , b ) , a [ i ] [ j ] + func ( i + 1 , j + 1 , n , a , b ) ) ; } int main ( ) { int t , i , j , k , sum , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , b [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ i ] [ j ] = - 1 ; } } printf ( \"%d\n\" , func ( 0 , 0 , n , a , b ) ) ; } return 0 ; }", "label": 2, "id": 8892}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; long int m ; scanf ( \" %ld\" , & n ) ; long int a [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( \" %ld\" , & a [ j ] ) ; } m = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( m > a [ i ] ) { m = a [ i ] ; } } printf ( \"%ld\n\" , m * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 5462}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , j , t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = 0 ; j < i - 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 873}
{"input": "long int A [ 100000 ] = { 0 } , N = 0 , j = 0 , sub = 0 , z = 0 ; main ( ) { int T , i , j ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld\" , & N ) ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%ld\" , & A [ j ] ) ; if ( ( j - 1 ) != - 1 ) { if ( A [ j - 1 ] <= A [ j ] ) { sub ++ ; printf ( \"%ld\n\" , sub ) ; if ( ( j - 1 ) != z ) { sub = sub + ( ( j - 1 ) - z ) ; printf ( \"%ld\n\" , sub ) ; } } else { z = j ; } } } printf ( \"%ld\n\" , sub ) ; sub = 0 ; z = 0 ; } }", "label": 1, "id": 2059}
{"input": "int main ( ) { int t , i ; long long a , b , gcd = 1 , lcm , j , l , s ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; if ( a >= b ) { l = a ; s = b ; } else { l = b ; s = a ; } j = 1 ; lcm = l ; while ( 1 ) { if ( lcm % s == 0 ) { break ; } else { j ++ ; lcm = l * j ; } } gcd = ( a * b ) / lcm ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 376}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n ; int a [ 200 ] [ 200 ] ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } j = 1 ; int s = a [ 1 ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( a [ i ] [ j ] == a [ i ] [ j + 1 ] ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) s = s + a [ i ] [ j ] ; else { s = s + a [ i ] [ j + 1 ] ; j ++ ; } } else { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { s = s + a [ i ] [ j ] ; } else { s = s + a [ i ] [ j + 1 ] ; j ++ ; } } } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 18425}
{"input": "int main ( void ) { int n1 , n2 , t , dividend , divisor , remainder , lcm ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { dividend = n1 ; divisor = n2 ; } else { dividend = n2 ; divisor = n1 ; } while ( divisor ) { remainder = dividend % divisor ; dividend = divisor ; divisor = remainder ; } lcm = ( n1 * n2 ) / dividend ; printf ( \"%d %d \n\" , dividend , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 7759}
{"input": "int subarray ( int A [ ] , int p ) { int i = 0 , j , count , sum = 0 , size = p ; while ( i < p ) { j = i ; count = 0 ; while ( j < size - 1 ) { if ( A [ j ] <= A [ j + 1 ] ) { j ++ ; i ++ ; count = 1 ; } else break ; } sum = sum + count ; i ++ ; } return sum + p ; } int main ( ) { int n , i , p , j ; scanf ( \"%d\" , & n ) ; printf ( \"\n\" ) ; int b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & p ) ; int a [ p ] ; for ( j = 0 ; j < p ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } b [ i ] = subarray ( a , p ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , b [ i ] ) ; } }", "label": 1, "id": 3565}
{"input": "int main ( ) { int cases , lns , i , j , k , great , values [ MAX ] , results [ MAX ] ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { j = 0 ; i = 0 ; scanf ( \"%d\" , & lns ) ; while ( lns -- ) { for ( j = 0 ; j <= i ; ++ j ) { scanf ( \"%d\" , & values [ j ] ) ; } results [ i ] = 0 ; j -- ; while ( j >= 0 ) { results [ i ] += values [ j ] ; -- j ; } i ++ ; } great = 0 ; -- i ; while ( i ) { if ( results [ i ] >= great ) great = results [ i ] ; -- i ; } printf ( \"%d\n\" , great ) ; } return 0 ; }", "label": 1, "id": 25574}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , min = 100001 , x ; long long int n ; scanf ( \"%lld\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ) ; if ( x < min ) min = x ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 22015}
{"input": "int main ( ) { int t , a [ 50000 ] , n , i , cost = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { cost = cost + a [ i ] ; a [ i + 1 ] = a [ i ] ; } else { cost = cost + a [ i + 1 ] ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 19933}
{"input": "int main ( ) { int t , n , i , j , A [ 50500 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int min = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & A [ j ] ) ; } long long int k = 0 ; min = A [ 0 ] ; for ( k = 1 ; k < n ; k ++ ) if ( min > A [ k ] ) min = A [ k ] ; printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 15649}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int index = 0 ; int sum = 0 ; int max = 0 ; int n ; scanf ( \"%d\" , & n ) ; int i , j , k , l ; int ar [ n ] [ n ] ; k = 1 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } k ++ ; } for ( i = 0 ; i < n ; i ++ ) { if ( ar [ n - 1 ] [ i ] > max ) { max = ar [ n - 1 ] [ i ] ; index = i ; sum = max ; } } k = n - 2 ; for ( i = ( n - 2 ) ; i >= 0 ; i -- ) { if ( index == 0 ) { sum = sum + ar [ i ] [ index ] ; goto x ; } else if ( index == k ) { sum = sum + ar [ i ] [ index - 1 ] ; index = index - 1 ; } else if ( ar [ i ] [ index - 1 ] > ar [ i ] [ index ] ) { sum = sum + ar [ i ] [ index - 1 ] ; index = index - 1 ; goto x ; } else if ( ar [ i ] [ index - 1 ] <= ar [ i ] [ index ] ) { sum = sum + ar [ i ] [ index ] ; goto x ; } x : k = k - 1 ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 4272}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; int p , q ; scanf ( \"%d\" , & t ) ; assert ( t <= 1000 && t >= 1 ) ; while ( t -- ) { scanf ( \"%d%d\" , & p , & q ) ; int g = gcd ( p , q ) ; long int l = ( p * q ) / g ; printf ( \"%d %ld\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 18180}
{"input": "int main ( ) { int t , i ; long int a , b , hcf , lcm ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { i = 1 ; scanf ( \"%ld %ld\" , & a , & b ) ; while ( i <= a && i <= b ) { if ( a % i == 0 && b % i == 0 ) hcf = i ; i ++ ; } lcm = a * b / hcf ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 11186}
{"input": "long gcd ( long a , long b ) { if ( a == 0 || b == 0 ) { return 0 ; } if ( a == b ) { return a ; } if ( a > b ) { return ( gcd ( a - b , b ) ) ; } else { return ( gcd ( a , b - a ) ) ; } } long lcm ( long a , long b ) { int lcm ; lcm = ( a * b ) / gcd ( a , b ) ; return lcm ; } main ( ) { int t ; long a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lu %lu\" , & a , & b ) ; printf ( \"%lu %lu\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 983}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t , a , b , h ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; h = gcd ( a , b ) ; printf ( \"%d %d\n\" , h , ( a * b ) / h ) ; } return 0 ; }", "label": 1, "id": 26500}
{"input": "int gcd ( a , b ) { int num = 0 , den = 0 , rem = 0 , c = 0 ; a = num ; b = den ; if ( num < den ) { num = b ; den = a ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } c = den ; return ( c ) ; } int main ( ) { int A , B , t , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%d%d\" , & A , & B ) ; g = gcd ( A , B ) ; l = ( A * B ) / g ; printf ( \"%d %d\" , g , l ) ; } return ( 0 ) ; }", "label": 3, "id": 434}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i , l = 1 , g = 1 ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { for ( i = 2 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = g * i ; l = l * i ; a = a / i ; b = b / i ; } } l = l * a * b ; printf ( \"%d\n%d\n\" , g , l ) ; } else { for ( i = 2 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = g * i ; l = l * i ; a = a / i ; b = b / i ; } } l = l * a * b ; printf ( \"%d\n%d\n\" , g , l ) ; } } return 0 ; }", "label": 1, "id": 9004}
{"input": "int main ( ) { long long int T , N , m , x ; scanf ( \"%lld\" , & T ) ; for ( int j = 1 ; j <= T ; j ++ ) { int c = 0 ; scanf ( \"%lld\" , & N ) ; scanf ( \"%lld\" , & x ) ; m = x ; for ( int i = 2 ; i <= N ; i ++ ) { scanf ( \"%lld\" , & x ) ; if ( x < m ) m = x ; } printf ( \"%lld\n\" , m * ( N - 1 ) ) ; } return 0 ; }", "label": 0, "id": 22494}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int A [ n ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } int m = A [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( m > A [ i ] ) { m = A [ i ] ; } } long long int x ; x = m * ( n - 1 ) ; printf ( \"%lld\n\" , x ) ; } return 0 ; }", "label": 0, "id": 23728}
{"input": "main ( ) { int t , n , i , j , k = 0 , a , p = 0 ; long int arr [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; a = n ; k = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; } for ( j = 0 ; j < n ; j ++ ) { while ( n > j ) { for ( i = j ; i < n - 1 ; i ++ ) { if ( arr [ i ] <= arr [ i + 1 ] ) { if ( i == ( n - 2 ) && p == 0 ) k ++ ; } else p ++ ; } n -- ; p = 0 ; } n = a ; } printf ( \"%d\" , k + n ) ; } }", "label": 2, "id": 12363}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int n ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , s1 = 0 , s2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( i == 0 && j <= i ) s1 = s1 + a [ i ] [ j ] ; if ( i == j ) s2 = s2 + a [ i ] [ j ] ; } } if ( s1 > s2 ) printf ( \"%d\n\" , s1 ) ; else printf ( \"%d\n\" , s2 ) ; } return 0 ; }", "label": 1, "id": 15399}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; } long int gcd ( long int a , long int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; return gcd ( b , a % b ) ; }", "label": 0, "id": 1181}
{"input": "int main ( ) { int t , hcf ; long int a , b , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( b > a ) { if ( b % a == 0 ) lcm = b ; else lcm = a * b ; } else { if ( a % b == 0 ) lcm = a ; else lcm = a * b ; } while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %ld\" , b , lcm ) ; } return 0 ; }", "label": 1, "id": 21194}
{"input": "int main ( ) { long long int a , z [ 101 ] [ 101 ] , n , i , j , t , s = 0 , b = 0 ; scanf ( \"%lld\" , & n ) ; for ( t = 0 ; t < n ; t ++ ) { scanf ( \"%lld\" , & a ) ; for ( j = 0 ; j < a ; j ++ ) { for ( i = 0 ; i <= j ; i ++ ) scanf ( \"%lld\" , & z [ j ] [ i ] ) ; i = 0 ; } j = 0 ; for ( j = 0 ; j < a ; j ++ ) s = s + z [ j ] [ 0 ] ; if ( a > 1 ) { for ( j = 0 ; j < a - 1 ; j ++ ) { b = z [ j ] [ 0 ] + z [ j + 1 ] [ 0 ] + z [ j + 1 ] [ 1 ] ; if ( b > s ) s = b ; } } printf ( \"%lld\n\" , s ) ; s = 0 ; } }", "label": 1, "id": 8834}
{"input": "int main ( int argc , char * argv [ ] ) { long int a [ 101 ] [ 101 ] , i , j , q , a1 , a2 , w , n , pr = 0 , sa = 0 , k , out [ 101 ] ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & w ) ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 0 ; j < w ; j ++ ) a [ i ] [ j ] = 0 ; } for ( i = 0 ; i < w ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = w - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < w ; j ++ ) { a1 = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; a2 = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; if ( a1 > a2 ) a [ i ] [ j ] = a1 ; else a [ i ] [ j ] = a2 ; } } pr = a [ 0 ] [ 0 ] ; out [ sa ] = pr ; sa ++ ; } for ( i = 0 ; i < sa ; i ++ ) { printf ( \"%d\" , out [ i ] ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 25716}
{"input": "int main ( void ) { int t , n , arr [ MAX ] [ MAX ] ; int i , j , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( arr [ i + 1 ] [ j ] >= arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25314}
{"input": "int main ( void ) { int t ; int i , min = 0 , cost , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 0 ; cost = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; cost = min ; if ( a [ 1 ] < min ) { min = a [ 1 ] ; cost = min ; } for ( i = 2 ; i < n ; i ++ ) { if ( min < a [ i ] ) { cost = cost + min ; } else { min = a [ i ] ; cost = cost + min ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 18327}
{"input": "int main ( ) { int t ; long long int a , sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%lld\" , & a ) ; int b [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { scanf ( \"%d\" , & b [ i ] ) ; } for ( int i = 0 ; i < a - 1 ; i ++ ) { if ( b [ i ] > b [ i + 1 ] ) { b [ i ] = 0 ; sum = sum + b [ i + 1 ] ; } else if ( b [ i + 1 ] > b [ i ] ) { b [ i + 1 ] = b [ i ] ; sum = sum + b [ i ] ; b [ i ] = 0 ; } } printf ( \"%lld\n\" , sum ) ; } }", "label": 1, "id": 10306}
{"input": "int main ( ) { int T , A , B , i , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & A , & B ) ; for ( i = 1 ; i <= A && i <= B ; ++ i ) { if ( A % i == 0 && B % i == 0 ) gcd = i ; } printf ( \"%d \" , gcd ) ; lcm = ( A * B ) / gcd ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 10048}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j ; unsigned long n , temp ; scanf ( \"%lu\" , & n ) ; unsigned long arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lu\" , & arr [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n && arr [ j ] > arr [ j + 1 ] ) { temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( \"%ld\n\" , arr [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 3492}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , min ; scanf ( \"%lld\" , & n ) ; long long int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & arr [ i ] ) ; min = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } min = min * ( n - 1 ) ; printf ( \"%lld\" , min ) ; } return 0 ; }", "label": 1, "id": 7765}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , c = 0 , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int m = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( m > a [ i ] ) { m = a [ i ] ; } } printf ( \"%d\n\" , m * ( n - 1 ) ) ; } }", "label": 0, "id": 5885}
{"input": "int max ( int a , int b ) { int result ; if ( a > b ) { result = a ; } else { result = b ; } return result ; } int main ( ) { int a [ 100 ] [ 100 ] ; int answer [ 100 ] ; int more , rows , i , j , greatest , track = 0 , var ; scanf ( \"%d\" , & more ) ; var = more ; while ( more ) { scanf ( \"%d\" , & rows ) ; scanf ( \"%d\" , & ( a [ 0 ] [ 0 ] ) ) ; for ( i = 1 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ( a [ i ] [ j ] ) ) ; if ( j != 0 && j != i ) { a [ i ] [ j ] += max ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) ; } else if ( j == 0 ) { a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } } } greatest = a [ rows - 1 ] [ 0 ] ; for ( j = 0 ; j < rows - 1 ; j ++ ) { if ( a [ rows - 1 ] [ j ] > greatest ) { greatest = a [ rows - 1 ] [ j ] ; } } answer [ track ++ ] = greatest ; more -- ; } for ( i = 0 ; i < var ; i ++ ) { printf ( \"%d\n\" , answer [ i ] ) ; } return 0 ; }", "label": 1, "id": 25489}
{"input": "int main ( int argc , char * * argv ) { int n , array [ 102 ] [ 102 ] , row , i , j , q = 0 ; ; scanf ( \"%d\" , & n ) ; while ( q < n ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & array [ i ] [ j ] ) ; for ( i = row - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( array [ i + 1 ] [ j ] > array [ i + 1 ] [ j + 1 ] ) array [ i ] [ j ] += array [ i + 1 ] [ j ] ; else array [ i ] [ j ] += array [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , array [ 0 ] [ 0 ] ) ; ++ q ; } return 0 ; }", "label": 0, "id": 7543}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24808}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm ; printf ( \"Enter two positive integers: \" ) ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"The LCM of two numbers %d and %d is %d.\" , n1 , n2 , lcm ) ; return 0 ; }", "label": 1, "id": 12711}
{"input": "int main ( ) { int t , i , n , j , no_testcases ; int a [ 100 ] [ 100 ] ; int ans [ 1000 ] ; scanf ( \"%d\" , & no_testcases ) ; int c = 0 ; for ( t = 0 ; t < no_testcases ; t ++ ) { int max = - 1 ; int n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int sum , sum1 , p ; p = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum = sum1 = 0 ; for ( j = p ; j < n ; j ++ ) { sum += a [ j ] [ i ] ; } sum1 = sum - a [ j - 1 ] [ i ] + a [ j - 1 ] [ i + 1 ] ; int final_sum = ( sum > sum1 ? sum : sum1 ) ; max = ( max > final_sum ? max : final_sum ) ; p = p ++ ; } ans [ c ++ ] = max ; } for ( i = 0 ; i < c ; i ++ ) printf ( \"%d\n\" , ans [ i ] ) ; return 0 ; }", "label": 1, "id": 20743}
{"input": "int main ( ) { int i , j , k , t , n , a [ 5055 ] , b [ 5055 ] = { 0 } , x , max = - 1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; x = ( n * ( n + 1 ) ) >> 1 ; for ( i = 0 ; i < 5055 ; i ++ ) b [ i ] = 0 ; for ( i = 1 ; i <= x ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; x = 1 ; k = 1 ; b [ 1 ] = a [ 1 ] ; while ( x <= n ) { for ( i = 1 ; i <= x ; i ++ ) { if ( b [ k ] + a [ k + x ] > b [ k + x ] ) b [ k + x ] = b [ k ] + a [ k + x ] ; if ( b [ k ] + a [ k + x + 1 ] > b [ k + x + 1 ] ) b [ k + x + 1 ] = b [ k ] + a [ k + x + 1 ] ; k ++ ; } x ++ ; } max = - 1 ; for ( i = k - n ; i < k ; i ++ ) { if ( b [ i ] > max ) max = b [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 20915}
{"input": "int main ( ) { int i , sum = 0 , t ; long a [ 100000 ] , n ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { a [ i + 1 ] = a [ i ] ; } sum = sum + a [ i + 1 ] ; } printf ( \"%d\n\" , sum ) ; sum = 0 ; t -- ; } return 0 ; }", "label": 1, "id": 3918}
{"input": "int main ( ) { int t , n , i , j , sum , sum1 = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; if ( n > 0 && n < 100 ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } sum = a [ 0 ] [ 0 ] ; i = 0 ; j = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) sum = sum + a [ i + 1 ] [ j ] ; else sum = sum + a [ i + 1 ] [ j + 1 ] ; } if ( sum > sum1 ) { sum1 = sum ; sum = 0 ; } } printf ( \"%d\n\" , sum1 ) ; } } return 0 ; }", "label": 1, "id": 12472}
{"input": "void main ( ) { int n = 0 , i = 0 , smtsize = 0 , j = 0 , a [ 1000 ] , b [ 100 ] [ 100 ] , k , k1 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & smtsize ) ; for ( k = 0 ; k < smtsize ; k ++ ) { for ( k1 = 0 ; k1 < k + 1 ; k1 ++ ) { scanf ( \"%d\" , & b [ k ] [ k1 ] ) ; a [ i ] += b [ k ] [ k1 ] ; } } } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , a [ i ] ) ; }", "label": 1, "id": 10613}
{"input": "int main ( void ) { int t ; long long int n , i , count , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int * a = ( long long int * ) malloc ( n * sizeof ( long long int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; count = 1 ; for ( i = 1 ; i <= ( n - 1 ) ; i ++ ) count = count * i ; printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 1, "id": 15120}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , j , min , m ; scanf ( \"%lld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 2707}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; int n ; int sum1 = 0 ; int sum2 = 0 ; int i = 0 ; int j = 0 ; int a [ 100 ] [ 100 ] ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { if ( i == j ) { sum1 = sum1 + a [ i ] [ j ] ; } if ( j == 1 ) { sum2 += a [ i ] [ j ] ; } } } if ( sum1 > sum2 ) printf ( \"%d\n\" , sum1 ) ; else printf ( \"%d\n\" , sum2 ) ; } return 0 ; }", "label": 3, "id": 16375}
{"input": "int a [ 10000 ] ; int min ; int swap ( int min , int a [ ] ) ; int main ( ) { long int n , sum ; int t , i , min , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { min = a [ i ] ; sum = sum + a [ i ] ; temp = min ; min = a [ i + 1 ] ; a [ i + 1 ] = temp ; } else { min = a [ i + 1 ] ; sum = sum + a [ i + 1 ] ; } } printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 3, "id": 25523}
{"input": "int main ( ) { int t , n , i , j , s = 0 , m = 0 ; int a [ 1000 ] [ 1000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { s = a [ i ] [ j ] + a [ i + 1 ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( m < s ) m = s ; } } printf ( \"%d \n\" , m ) ; } return 0 ; }", "label": 1, "id": 10699}
{"input": "int main ( ) { int t ; long long int b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , max = 100001 , a ; scanf ( \"%lld\" , & n ) ; b = n - 1 ; while ( n -- ) { scanf ( \"%lld\" , & a ) ; if ( a < max ) max = a ; } max *= b ; printf ( \"%lld\n\" , max ) ; } return 0 ; }", "label": 0, "id": 16151}
{"input": "long long int fun ( long long int , long long int ) ; int main ( ) { int n , i ; long long int l , h , a , b ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; h = fun ( a , b ) ; l = ( a * b ) / h ; printf ( \"%lld %lld\n\" , h , l ) ; } return 0 ; } long long int fun ( long long int a , long long int b ) { if ( b == 0 ) return a ; else return fun ( b , a % b ) ; }", "label": 0, "id": 16706}
{"input": "int main ( ) { int t , a , b , x , y , hcf ; long long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } hcf = a ; lcm = ( x * y ) / hcf ; printf ( \"%d %lld\n\" , hcf , lcm ) ; } }", "label": 1, "id": 11047}
{"input": "int main ( ) { int T , a , b , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T ) { int i ; scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; T -- ; } return 0 ; }", "label": 1, "id": 18485}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t , m , n , p , q ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n , & m ) ; p = gcd ( n , m ) ; q = ( m * n ) / p ; printf ( \"%d %d\n\" , p , q ) ; } return 0 ; }", "label": 1, "id": 23471}
{"input": "int triangle_sum ( int * , int numbers [ 100 ] [ 100 ] ) ; int main ( ) { int lines , i , j , index = 0 , tests , numbers [ 100 ] [ 100 ] = { 0 } , test_results [ 1000 ] = { 0 } ; scanf ( \"%i\" , & tests ) ; while ( tests -- ) { scanf ( \"%i\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%i\" , & numbers [ i ] [ j ] ) ; test_results [ index ++ ] = triangle_sum ( & lines , numbers ) ; } for ( i = 0 ; i < index ; i ++ ) printf ( \"%i\n\" , test_results [ i ] ) ; return 0 ; } int triangle_sum ( int * lines , int numbers [ 100 ] [ 100 ] ) { int i , j ; for ( i = * lines - 1 ; i > 0 ; i -- ) for ( j = 0 ; j <= i - 1 ; j ++ ) if ( numbers [ i ] [ j ] > numbers [ i ] [ j + 1 ] ) numbers [ i - 1 ] [ j ] += numbers [ i ] [ j ] ; else numbers [ i - 1 ] [ j ] += numbers [ i ] [ j + 1 ] ; return numbers [ 0 ] [ 0 ] ; }", "label": 0, "id": 16447}
{"input": "int a [ 101 ] [ 101 ] , line ; int max ( int * i , int * j ) ; void main ( ) { int cas , i , j , k , * ptr , val ; scanf ( \"%d\" , & cas ) ; for ( i = 0 ; i < cas ; i ++ ) { scanf ( \"%d\" , & line ) ; for ( j = 0 ; j < line ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = line ; j > 0 ; j -- ) { a [ 0 ] [ j - 1 ] += a [ 0 ] [ j ] ; a [ j - 1 ] [ j - 1 ] += a [ j ] [ j ] ; } for ( k = 1 , j = line ; k < line - 1 , j > 0 ; k ++ , j -- ) { a [ k - 1 ] [ j - 1 ] += a [ k ] [ j ] ; a [ k ] [ j - 1 ] += a [ k ] [ j ] ; } a [ 0 ] [ 0 ] -= ( a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) ; ptr = & a [ 0 ] [ 0 ] ; for ( j = 0 , k = 0 ; j < line , k < line ; j ++ , k ++ ) { * ptr += max ( & a [ j + 1 ] [ k ] , & a [ j + 1 ] [ k + 1 ] ) ; } val = * ptr ; printf ( \"%d\" , val ) ; } } int max ( int * i , int * j ) { if ( * i >= * j ) { * i -= ( * ( i + line ) + * ( i + line + 1 ) ) ; return * i ; } else if ( * j > * i ) { j -= ( * ( j + line ) + * ( i + line + 1 ) ) ; return * j ; } }", "label": 3, "id": 14755}
{"input": "int gcd ( int , int ) ; int main ( ) { int n , a , b , i ; int x [ 10 ] , y [ 10 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; int val = gcd ( a , b ) ; x [ i ] = val ; int temp = ( a * b ) / val ; y [ i ] = temp ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d %d\n\" , x [ i ] , y [ i ] ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a > b ) { return ( gcd ( ( a - b ) , b ) ) ; } else if ( a < b ) { return ( gcd ( a , b - a ) ) ; } else if ( a = b ) { return ( a ) ; } }", "label": 3, "id": 2987}
{"input": "int main ( ) { int t , c , n , i , j ; long long int a [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; c = n ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = i ; j < n - 1 ; j ++ ) if ( a [ j ] <= a [ j + 1 ] ) c ++ ; else break ; printf ( \"%d\n\" , c ) ; } }", "label": 0, "id": 8385}
{"input": "int main ( ) { int i , j , t , n , x , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } x = a [ 0 ] [ 0 ] ; for ( i = n ; i > 0 ; i -- ) { for ( j = 0 ; j < i - 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } } printf ( \"%d\" , a [ 1 ] [ 0 ] + x ) ; } return 0 ; }", "label": 1, "id": 10093}
{"input": "int main ( ) { int i , j , k , n [ 23 ] , a [ 14 ] [ 10 ] [ 20 ] , test , ch , tot , tot1 [ 5 ] [ 34 ] , max , z ; scanf ( \"%d\" , & test ) ; for ( k = 1 ; k <= test ; k ++ ) { scanf ( \"%d\" , & n [ k ] ) ; for ( i = 1 ; i <= n [ k ] ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ k ] [ i ] [ j ] ) ; } } } for ( z = 1 ; z <= test ; z ++ ) { for ( k = 1 ; k <= n [ z ] - 1 ; k ++ ) { ch = 1 ; tot = 0 ; for ( i = k ; i <= k + 1 ; i ++ ) { for ( j = 1 ; j <= ch ; j ++ ) { tot = tot + a [ z ] [ i ] [ j ] ; } ch ++ ; } tot1 [ z ] [ k ] = tot ; } } for ( j = 1 ; j <= test ; j ++ ) { for ( i = 1 ; i < n [ j ] ; i ++ ) { if ( tot1 [ j ] [ i ] < tot1 [ j ] [ i + 1 ] ) max = tot1 [ j ] [ i + 1 ] ; max = tot1 [ j ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 1557}
{"input": "int gcd ( int a , int b ) { int c = a % b ; if ( c == 0 ) return b ; else gcd ( b , c ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int p , q , f , g ; scanf ( \"%d%d\" , & p , & q ) ; f = gcd ( p , q ) ; g = ( p * q ) / f ; printf ( \"%d %d\n\" , f , g ) ; } return 0 ; }", "label": 1, "id": 17127}
{"input": "int GCD ( int a , int b ) { int rem = a % b ; if ( rem == 0 ) return b ; else return GCD ( b , rem ) ; } int main ( ) { int t , n1 , n2 , gcd , i , lcm ; scanf ( \"%d\" , & t ) ; while ( t >= 1 ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; gcd = GCD ( n1 , n2 ) ; lcm = gcd * ( n1 / gcd ) * ( n2 / gcd ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 3692}
{"input": "int calculateGCD ( int a , int b ) { if ( b == 0 ) return a ; calculateGCD ( b , a % b ) ; } int main ( ) { int testCases , a , b ; scanf ( \"%d\" , & testCases ) ; while ( testCases -- ) { scanf ( \"%d%d\" , & a , & b ) ; int remainder = 0 ; int lcm , gcd ; gcd = calculateGCD ( a , b ) ; lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 5991}
{"input": "int main ( ) { int n , a , b , x , y ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( b > a ) b = b - a ; else a = a - b ; } printf ( \"%d   %d\" , b , ( x * y ) / b ) ; } return 0 ; }", "label": 1, "id": 13451}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9601}
{"input": "struct list { int data ; struct list * link ; } ; int insert ( struct list * * head , struct list * * rear , int data ) { struct list * temp ; temp = ( struct list * ) malloc ( sizeof ( struct list ) ) ; temp -> data = data ; temp -> link = NULL ; if ( * ( head ) == NULL ) { * head = temp ; * rear = temp ; } else { ( * rear ) -> link = temp ; * rear = temp ; } return 1 ; } int main ( ) { int t , j ; scanf ( \"%d\" , & t ) ; int i , n ; int cnt [ t ] ; struct list * head = NULL ; struct list * rear ; struct list * val1 ; struct list * val2 ; int num ; for ( i = 0 ; i < t ; i ++ ) { head = NULL ; scanf ( \"%d\" , & n ) ; cnt [ i ] = 0 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & num ) ; insert ( & head , & rear , num ) ; } for ( j = 0 ; j < n - 1 ; j ++ ) { val1 = head ; val2 = head -> link ; if ( val1 -> data < val2 -> data ) { if ( val2 -> link != NULL ) val1 -> link = val2 -> link ; cnt [ i ] += val1 -> data ; } else { cnt [ i ] += val2 -> data ; } } } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , cnt [ i ] ) ; return 0 ; }", "label": 1, "id": 25779}
{"input": "int main ( ) { int t , f = 0 , l = 0 , s = 0 , d = 0 , s1 = 0 , sum = 0 , x , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; l = n ; x = n ; d = 0 ; s = 0 ; while ( x != 0 ) { d = x ; s = s * 10 + d ; x = x / 10 ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 7477}
{"input": "main ( ) { int T , i ; long a , b , d , j ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; for ( j = 1 ; j <= a * b ; j ++ ) { if ( j % a == 0 && j % b == 0 ) { break ; } } d = ( a * b ) / j ; printf ( \"%ld \" , d ) ; printf ( \"%ld\n\" , j ) ; } }", "label": 2, "id": 8764}
{"input": "main ( ) { int i , j , t ; long int size ; int * v ; int min = INT_MAX ; long long int sum2 [ 100000 ] ; long long int min2 [ 100000 ] ; scanf ( \"%d\" , & t ) ; for ( j = 1 ; j <= t ; j ++ ) { min = INT_MAX ; scanf ( \"%ld\" , & size ) ; v = ( int * ) malloc ( size * sizeof ( int ) ) ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%ld\" , & v [ i ] ) ; if ( min > v [ i ] ) { min = v [ i ] ; } } min2 [ j ] = min * ( size - 1 ) ; } for ( j = 1 ; j <= t ; j ++ ) { printf ( \"%lld\n\" , min2 [ j ] ) ; } }", "label": 0, "id": 18071}
{"input": "int f [ 100000 ] , top = 0 ; void fact ( int n ) { int i ; top = 0 ; for ( i = n ; i > 0 ; i -- ) if ( n % i == 0 ) f [ top ++ ] = i ; } main ( ) { int t , g , l , a , b , n , m , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; n = a > b ? b : a ; m = a > b ? a : b ; fact ( n ) ; for ( j = 0 ; j < top ; j ++ ) if ( m % f [ j ] == 0 ) { g = f [ j ] ; l = a * b / g ; break ; } printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 23996}
{"input": "int main ( void ) { int t , n , k , m , i , j ; scanf ( \"%d\" , & t ) ; for ( ; t ; -- t ) { scanf ( \"%d\" , & n ) ; int a [ n + 1 ] [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { k = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; m = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; if ( k > m ) a [ i ] [ j ] = k ; else a [ i ] [ j ] = m ; } } printf ( \"%d\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 1, "id": 2316}
{"input": "int main ( void ) { int a , b , n , i , x ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; x = a * b ; while ( b != 0 ) { i = b ; b = a % b ; a = i ; } printf ( \"%d %d\" , a , x / a ) ; } return 0 ; }", "label": 1, "id": 24469}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { long long int x , a , b , i , j , gcd , lcm ; scanf ( \"%lld%lld\" , & a , & b ) ; i = ( a > b ? b : a ) ; j = ( a > b ? a : b ) ; while ( i != 0 ) { x = i ; i = ( j % i ) ; j = x ; } gcd = j ; lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 19478}
{"input": "int main ( ) { int final [ 1000 ] , arr [ 100 ] ; char str [ 300 ] ; int i , j , k , a , b , c , max_so_far = - 1 , prev = 0 , coll ; scanf ( \"%d\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%d\" , & b ) ; for ( j = 1 ; j <= b ; j ++ ) { gets ( str ) ; if ( str [ 0 ] == '\\0' ) { j -- ; continue ; } coll = 1 ; c = 0 ; k = 0 ; while ( 1 ) { if ( str [ k ] == ' ' || str [ k ] == '\\0' ) { if ( j == 1 ) arr [ 1 ] = c ; else if ( coll == 1 ) arr [ 1 ] = arr [ 1 ] + c ; else if ( ( arr [ coll - 1 ] - prev ) > arr [ coll ] ) arr [ coll ] = arr [ coll - 1 ] + c - prev ; else arr [ coll ] = arr [ coll ] + c ; prev = c ; c = 0 ; if ( max_so_far < arr [ coll ] ) max_so_far = arr [ coll ] ; if ( str [ k ] == '\\0' ) break ; coll ++ ; } else c = 10 * c + ( str [ k ] - '0' ) ; k ++ ; } } final [ i ] = max_so_far ; } for ( i = 1 ; i <= a ; i ++ ) printf ( \"%d\n\" , final [ i ] ) ; return 0 ; }", "label": 1, "id": 10952}
{"input": "int max = 0 ; void maxsum ( int size , int m , int n , int sum , int a [ ] [ size ] ) { if ( m == size - 1 ) { sum += a [ m ] [ n ] ; if ( max < sum ) { max = sum ; } } if ( m < size - 1 ) { sum += a [ m ] [ n ] ; maxsum ( size , m + 1 , n , sum , a ) ; maxsum ( size , m + 1 , n + 1 , sum , a ) ; } return ; } int main ( void ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } maxsum ( n , 0 , 0 , 0 , a ) ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 22251}
{"input": "int main ( ) { unsigned long int n1 , n2 , t ; scanf ( \"%ld\" , & t ) ; if ( t >= 0 && t <= 1000 ) while ( t -- ) { unsigned long int a [ 2 ] ; scanf ( \"%ld\" , & a [ 0 ] ) ; scanf ( \"%ld\" , & a [ 1 ] ) ; unsigned long int res = a [ 0 ] ; unsigned long int temp = a [ 1 ] ; if ( a [ 0 ] >= 1 && a [ 0 ] <= 1000000 && a [ 1 ] >= 1 && a [ 1 ] <= 1000000 ) while ( a [ 0 ] != a [ 1 ] ) { if ( a [ 0 ] > a [ 1 ] ) a [ 0 ] -= a [ 1 ] ; else a [ 1 ] -= a [ 0 ] ; } unsigned long int gcd = a [ 1 ] ; unsigned long int lcm = ( res * temp ) / ( gcd ) ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 11022}
{"input": "main ( ) { int t ; int a , b , num1 , num2 , i , j ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { num1 = a ; num2 = b ; } else { num1 = b ; num2 = a ; } while ( num1 % num2 != 0 ) { i = num1 / num2 ; j = num1 % num2 ; num1 = num2 ; num2 = j ; } printf ( \"%d  %d\n\" , num2 , ( a * b / num2 ) ) ; t -- ; } }", "label": 1, "id": 20379}
{"input": "int gcd ( int n , int m ) { if ( n % m == 0 ) return m ; else return gcd ( m , n % m ) ; } int main ( ) { int l ; int t , i , n [ 1000 ] , m [ 1000 ] , tmp ; scanf ( \"%d\" , & t ) ; int a [ t ] ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & n [ i ] , & m [ i ] ) ; if ( n [ i ] < m [ i ] ) { tmp = n [ i ] ; n [ i ] = m [ i ] ; m [ i ] = tmp ; } a [ i ] = gcd ( n [ i ] , m [ i ] ) ; } for ( i = 1 ; i <= t ; i ++ ) { l = ( n [ i ] * m [ i ] ) / a [ i ] ; printf ( \"%d %d\" , a [ i ] , l ) ; if ( i != t ) printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 26147}
{"input": "void main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , n , min , max , t , gcd , lcm ; scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } t = min ; while ( ( max % min ) != 0 ) { min = ( max % min ) ; max = t ; t = min ; } gcd = min ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } if ( ( max % min ) == 0 ) { lcm = max ; } else lcm = max * min ; printf ( \"%lld %lld\" , gcd , lcm ) ; } }", "label": 1, "id": 14422}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , i , j , m , l , a [ 100 ] [ 100 ] ; int sum [ 100 ] [ 100 ] , maxval ; scanf ( \"%d\" , & t ) ; for ( m = 0 ; m < t ; m ++ ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 ) { sum [ i ] [ j ] = a [ i ] [ j ] ; maxval = sum [ i ] [ j ] ; } else if ( j == 0 ) { sum [ i ] [ j ] = a [ i ] [ j ] + sum [ i - 1 ] [ j ] ; maxval = max ( sum [ i ] [ j ] , maxval ) ; } else if ( j == i ) { sum [ i ] [ j ] = a [ i ] [ j ] + sum [ i - 1 ] [ j - 1 ] ; maxval = max ( sum [ i ] [ j ] , maxval ) ; } else { sum [ i ] [ j ] = a [ i ] [ j ] + max ( sum [ i - 1 ] [ j ] , sum [ i - 1 ] [ j - 1 ] ) ; maxval = max ( sum [ i ] [ j ] , maxval ) ; } } } printf ( \"%d\n\" , maxval ) ; } return 0 ; }", "label": 0, "id": 9974}
{"input": "int trianHt = 0 ; int trianIpt [ MAX_TRIAN_HT ] [ MAX_TRIAN_HT ] = { { 0 , } , } ; int answer = 0 ; void recFind ( int htIdx , int brthIdx , int currVal ) { if ( ( trianHt <= htIdx ) || ( ( htIdx + 1 ) <= brthIdx ) ) { return ; } if ( currVal > answer ) { answer = currVal ; } if ( trianHt > ( htIdx + 1 ) ) { recFind ( ( htIdx + 1 ) , brthIdx , ( currVal + trianIpt [ htIdx + 1 ] [ brthIdx ] ) ) ; } if ( ( trianHt > ( htIdx + 1 ) ) && ( ( htIdx + 1 ) > brthIdx ) ) { recFind ( ( htIdx + 1 ) , ( brthIdx + 1 ) , ( currVal + trianIpt [ ( htIdx + 1 ) ] [ ( brthIdx + 1 ) ] ) ) ; } } int main ( ) { int testCaseIdx = 0 ; int numTestCases = 0 ; int iLoop = 0 ; int jLoop = 0 ; scanf ( \"%d\" , & numTestCases ) ; for ( testCaseIdx = 0 ; testCaseIdx < numTestCases ; testCaseIdx ++ ) { scanf ( \"%d\" , & trianHt ) ; for ( iLoop = 0 ; iLoop < trianHt ; iLoop ++ ) { for ( jLoop = 0 ; jLoop <= iLoop ; jLoop ++ ) { scanf ( \"%d\" , & trianIpt [ iLoop ] [ jLoop ] ) ; } } recFind ( 0 , 0 , trianIpt [ 0 ] [ 0 ] ) ; printf ( \"%d\n\" , answer ) ; } return 0 ; }", "label": 2, "id": 24768}
{"input": "int gcd ( long int a , long int b ) ; int main ( ) { int n , d ; long int a , b , c ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) { d = gcd ( a , b ) ; c = ( a * b ) / d ; printf ( \"%d %ld\n\" , d , c ) ; } else { d = gcd ( b , a ) ; c = ( a * b ) / d ; printf ( \"%d %ld\n\" , d , c ) ; } } return 0 ; } int gcd ( long int a , long int b ) { int d ; if ( b == 0 ) { return a ; } else d = gcd ( b , a % b ) ; return d ; }", "label": 0, "id": 25041}
{"input": "int main ( ) { long int t , i , j , a , b , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; i = ( a > b ? b : a ) ; j = ( a > b ? a : b ) ; for ( x = i ; x >= 1 ; x -- ) { if ( j % x == 0 && i % x == 0 ) { printf ( \"%ld\n\" , x ) ; break ; } } y = ( i * j ) / x ; printf ( \"%ld\n\" , y ) ; } return 0 ; }", "label": 2, "id": 25584}
{"input": "int main ( ) { int T , i , j , l , sum = 0 , A [ 100 ] [ 100 ] ; while ( T -- ) { scanf ( \"%d\" , l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; } } for ( i = 0 ; i < l - 1 ; i ++ ) { sum = sum + A [ i ] [ 0 ] ; } sum = sum + A [ l ] [ 1 ] ; printf ( \"%d\n\" , sum ) ; sum = 0 ; } return 0 ; }", "label": 1, "id": 10353}
{"input": "main ( ) { int t , t1 , n , i , num , count = 0 , j = 0 ; char c ; int arr [ 2000 ] ; memset ( arr , 0 , sizeof ( arr ) ) ; int len = 2000 ; scanf ( \"%d\" , & t ) ; for ( t1 = 0 ; t1 < t ; t1 ++ ) { scanf ( \"%d\" , & n ) ; int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( i > 0 ) { j = 0 ; do { scanf ( \"%d\" , & num ) ; c = getchar ( ) ; arr [ j ] = num ; j ++ ; } while ( c != '\n' ) ; for ( j = 0 ; j <= i ; j ++ ) { if ( j < i ) { count = arr [ len - 1 - j ] + arr [ j ] + arr [ j + 1 ] ; if ( count > sum ) { sum = count ; } } int clear = arr [ j ] ; arr [ len - 1 - j ] = clear ; } } else { scanf ( \"%d\" , & num ) ; arr [ len - 1 ] = num ; sum = num ; } } printf ( \"%d\n\" , sum ) ; } }", "label": 3, "id": 15647}
{"input": "int hcf ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( \"%d%d\" , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"\n%d %d\" , gcd , lcm ) ; } return 0 ; } int hcf ( int a , int b ) { int i , gcd ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( ( ( a % i ) == 0 ) && ( ( b % i ) == 0 ) ) gcd = i ; } return gcd ; }", "label": 1, "id": 18343}
{"input": "int main ( ) { int T ; int A , B ; int temp , X , Y ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & A , & B ) ; X = A ; Y = B ; while ( Y != 0 ) { temp = Y ; Y = X % Y ; X = temp ; } printf ( \"%d %d\n\" , X , ( A * B ) / X ) ; } return 0 ; }", "label": 1, "id": 230}
{"input": "void call ( long ) ; long array [ 600000 ] ; long result [ 11 ] ; long count = 0 ; int main ( ) { long i , t , inner , j ; scanf ( \"%lu\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lu\" , & inner ) ; for ( j = 0 ; j < inner ; j ++ ) { scanf ( \"%lu\" , & array [ j ] ) ; } call ( inner ) ; } for ( j = 0 ; j < count ; j ++ ) { printf ( \"%lu\n\" , result [ j ] ) ; } return 0 ; } void call ( long inner ) { long i , sum = 0 ; for ( i = 0 ; i < inner - 1 ; i ++ ) { if ( array [ i ] < array [ i + 1 ] ) { array [ i + 1 ] = array [ i ] ; } sum = sum + array [ i + 1 ] ; } result [ count ++ ] = sum ; }", "label": 1, "id": 17951}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , ar [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; ar [ 1 ] [ 0 ] += ar [ 0 ] [ 0 ] ; ar [ 1 ] [ 1 ] += ar [ 0 ] [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) ar [ i ] [ 0 ] += ar [ i - 1 ] [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { if ( ar [ i - 1 ] [ j - 1 ] > ar [ i - 1 ] [ j ] ) ar [ i ] [ j ] += ar [ i - 1 ] [ j - 1 ] ; else ar [ i ] [ j ] += ar [ i - 1 ] [ j ] ; } int maxi = ar [ n - 1 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( ar [ n - 1 ] [ i ] > maxi ) maxi = ar [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , maxi ) ; } }", "label": 1, "id": 12636}
{"input": "main ( ) { long long t , n , p , k , i , y ; long long * a ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { k = 0 ; scanf ( \"%lld\" , & n ) ; p = n ; a = ( long long * ) malloc ( sizeof ( long long ) * n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - 1 ] ) { k ++ ; } else { y = k * ( k + 1 ) / 2 ; p = p + y ; k = 0 ; } } if ( k != 0 ) { y = k * ( k + 1 ) / 2 ; p = p + y ; k = 0 ; } printf ( \"%lld\n\" , p ) ; t -- ; } }", "label": 0, "id": 7152}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int f = 1 ; printf ( \"\n\" ) ; while ( f <= t ) { int k ; scanf ( \"%d\" , & k ) ; int a [ k ] ; printf ( \"\n\" ) ; int i ; for ( i = 0 ; i < ( k ) ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; printf ( \" \" ) ; } int min , cost , greater = a [ 0 ] ; for ( i = 2 ; i < ( k - 2 ) ; i ++ ) { if ( a [ i ] > greater ) greater = a [ i ] ; else greater = a [ i + 1 ] ; } if ( greater > a [ k ] ) cost = a [ k ] ; else cost = greater ; printf ( \"\n\" ) ; printf ( \"%d\" , cost ) ; } }", "label": 2, "id": 23377}
{"input": "int main ( ) { int max_sum [ 2 ] [ 100 ] ; int flag_a = 0 ; int flag_b = 1 ; int result [ 100 ] ; int input , temp ; int total_cases , total_inputs ; int i , row , column , j ; scanf ( \"%d\" , & total_cases ) ; for ( i = 0 ; i < 100 ; i ++ ) max_sum [ 0 ] [ i ] = 0 ; max_sum [ 1 ] [ i ] = 0 ; for ( i = 0 ; i < total_cases ; i ++ ) { scanf ( \"%d\" , & total_inputs ) ; for ( row = 1 ; row <= total_inputs ; row ++ ) { for ( column = 0 ; column < row ; column ++ ) { scanf ( \"%d\" , & input ) ; if ( column != 0 ) { if ( max_sum [ flag_a ] [ column ] > max_sum [ flag_a ] [ column - 1 ] ) max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column ] ; else max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column - 1 ] ; } if ( column == 0 ) max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column ] ; } temp = flag_a ; flag_a = flag_b ; flag_b = temp ; } int max = 0 ; for ( j = 0 ; j < total_inputs ; j ++ ) { if ( max_sum [ flag_a ] [ j ] > max ) max = max_sum [ flag_a ] [ j ] ; } result [ i ] = max ; } for ( i = 0 ; i < total_cases ; i ++ ) { printf ( \"%d\n\" , result [ i ] ) ; } }", "label": 3, "id": 12846}
{"input": "int main ( ) { int test , i , n ; long long int d , min , p ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%lld\" , & p ) ; min = p ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & d ) ; if ( min > d ) min = d ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 16938}
{"input": "int main ( ) { int n , A [ 100 ] , i , j , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } int count = 0 , m ; for ( i = 0 ; i < n ; i ++ ) { int k = i ; for ( m = i + 1 ; m < n ; m ++ ) { if ( A [ k ] < A [ m ] ) { k = m ; m = m + 1 ; count ++ ; } else { break ; } } } printf ( \"%d\n\" , count + n ) ; } return 0 ; }", "label": 3, "id": 11027}
{"input": "typedef unsigned long long int ull ; ull gc ( ull a , ull b ) { if ( a == 0 ) { return b ; } return gc ( b % a , a ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { ull a , b ; scanf ( \"%lld %lld\" , & a , & b ) ; ull gcd = gc ( a , b ) ; ull lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 525}
{"input": "int main ( ) { int A , B , a , b , c , gcd , lcm , T ; while ( T -- ) { scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { a = A ; b = B ; } else { a = B ; b = A ; } while ( b != 0 ) { c = b ; b = a % b ; a = c ; } gcd = a ; lcm = ( A * B ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 18261}
{"input": "int main ( ) { int t , temp , A [ 100 ] [ 100 ] , i , n , min ; scanf ( \"%d\" , & t ) ; temp = t ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & A [ t ] [ i ] ) ; } t = temp ; while ( t -- ) { min = A [ t ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > A [ t ] [ i ] ) min = A [ t ] [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 12427}
{"input": "int main ( ) { int n , i , j , a [ zz ] [ zz ] , k ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; k = 1 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; k ++ ; } k = n ; int tmp1 , tmp2 ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < k ; j ++ ) { tmp1 = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; tmp2 = a [ i ] [ j + 1 ] + a [ i - 1 ] [ j ] ; if ( tmp1 > tmp2 ) a [ i - 1 ] [ j ] = tmp1 ; else a [ i - 1 ] [ j ] = tmp2 ; } k -- ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9411}
{"input": "int getgcd ( int x , int y ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , lcm , gcd ; scanf ( \"%lld %lld\" , & a , & b ) ; gcd = getgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; } int getgcd ( int x , int y ) { if ( y != 0 ) { getgcd ( y , x % y ) ; } else { return ( x ) ; } }", "label": 0, "id": 25239}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int n ; scanf ( \"%d\" , & n ) ; int i , a , min = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( min == 0 || min > a ) min = a ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 18608}
{"input": "int GCD ( long int x , long int y ) { int temp ; if ( x < y ) { temp = x ; x = y ; y = temp ; } while ( x % y != 0 ) { temp = x % y ; x = y ; y = temp ; } return y ; } int main ( ) { long int t , x , y , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & x , & y ) ; a = GCD ( x , y ) ; b = a * 2 ; printf ( \"%d %d\n\" , a , b ) ; } }", "label": 1, "id": 24711}
{"input": "int main ( ) { int t , s , n , i , a [ 1000 ] , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { s = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( n == 1 ) break ; if ( a [ i ] < a [ i + 1 ] ) { s = s + a [ i ] ; for ( j = i + 1 ; j < n - 1 ; j ++ ) a [ j ] = a [ j + 1 ] ; i -- ; n -- ; } else { s = s + a [ i + 1 ] ; for ( j = i ; j < n - 1 ; j ++ ) a [ j ] = a [ j + 1 ] ; i -- ; n -- ; } } printf ( \"%d\n\" , s ) ; } }", "label": 3, "id": 425}
{"input": "void main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { sol ( ) ; } } void sol ( ) { long int A , B , gcd , lcm ; scanf ( \"%ld%ld\" , & A , & B ) ; gcd = g ( A , B ) ; lcm = gcd * ( A / gcd ) * ( B / gcd ) ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } int g ( long int x , long int y ) { if ( ( y % x ) == 0 ) return x ; else return g ( y % x , x ) ; }", "label": 0, "id": 119}
{"input": "int main ( ) { int t , n , arr [ 50000 ] , min , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100000 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 19653}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , min = 0 , i , j ; scanf ( \"%lld%lld\" , & a , & b ) ; min = ( a <= b ) ? a : b ; for ( i = min ; i > 0 ; i -- ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) break ; } j = ( a * b ) / i ; printf ( \"%lld %lld\n\" , i , j ) ; } }", "label": 2, "id": 19602}
{"input": "int main ( ) { int a , i , j , total , in [ 100 ] [ 1000 ] , t , temp = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & in [ i ] [ j ] ) ; } } for ( i = a - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( in [ i + 1 ] [ j ] > in [ i + 1 ] [ j + 1 ] ) { in [ i ] [ j ] = in [ i ] [ j ] + in [ i + 1 ] [ j ] ; } else { in [ i ] [ j ] = in [ i ] [ j ] + in [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , in [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8583}
{"input": "int main ( void ) { int t , n , a [ 100 ] [ 100 ] , i , j , k , max , sum , col ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 1 ; j <= n ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } j = n ; max = 0 ; col = 0 ; for ( k = j ; k >= 1 ; k -- ) { if ( a [ j ] [ k ] > max ) { max = a [ j ] [ k ] ; col = k ; } } sum = sum + max ; for ( j = n - 1 ; j >= 1 ; j -- ) { if ( col == j + 1 ) { max = a [ j ] [ col - 1 ] ; col = col - 1 ; } else if ( a [ j ] [ col ] > a [ j ] [ col - 1 ] ) { max = a [ j ] [ col ] ; } else { max = a [ j ] [ col - 1 ] ; col = col - 1 ; } sum = sum + max ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 11245}
{"input": "int main ( ) { int t , a , b , m , n , r , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; m = a ; n = b ; while ( m % n != 0 ) { r = m % n ; m = n ; n = r ; } printf ( \"%d %d\n\" , n , a * b / n ) ; } return 0 ; }", "label": 1, "id": 16688}
{"input": "int main ( ) { int t , a , b , gcd , lcm , c , d , e ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; d = a ; e = b ; while ( e != 0 ) { c = e ; e = d % e ; d = c ; } gcd = d ; lcm = ( a * b ) / gcd ; printf ( \"%d \" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } }", "label": 1, "id": 23103}
{"input": "int main ( ) { long t , n , min , x , c , i ; scanf ( \"%ld\" , & t ) ; while ( t > 0 ) { min = 1000000 ; scanf ( \"%ld\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld\" , & x ) ; if ( x < min ) { min = x ; } } c = min * ( n - 1 ) ; printf ( \"%ld\n\" , c ) ; t -- ; } return ( 0 ) ; }", "label": 0, "id": 16283}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] , c ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } c = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < c ) { c = a [ i ] ; } } c = c * ( n - 1 ) ; printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 0, "id": 1738}
{"input": "int t , n ; int a [ 100 ] [ 100 ] ; int fun ( int sum , int i , int j ) { int s1 , s2 ; if ( i == n - 1 || j == n - 1 ) { s1 = a [ i ] [ j ] ; return s1 ; } s1 = a [ i ] [ j ] + fun ( sum , i + 1 , j + 1 ) ; s2 = a [ i ] [ j ] + fun ( sum , i + 1 , j ) ; if ( s1 >= s2 ) return s1 ; else return s2 ; } int main ( ) { int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"\n%d\" , fun ( a [ 0 ] [ 0 ] , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 7829}
{"input": "typedef long long int ll ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ 100001 ] ; int i , j ; ll ans = n , x = 1 ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) { int flag = 1 ; for ( j = i ; j <= n && flag ; j ++ ) { if ( arr [ j ] <= arr [ j + 1 ] ) x ++ ; else { ans += ( x * ( x - 1 ) ) / 2 ; i = j ; x = 1 ; flag = 0 ; } } } printf ( \"%lld\n\" , ans ) ; } }", "label": 0, "id": 7001}
{"input": "void max ( int a [ 100 ] [ 100 ] , int b ) { int i = 0 , j = 0 ; for ( i = b - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } int main ( int argc , char * argv [ ] ) { int a , b , i , j , k ; int t [ 100 ] [ 100 ] ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { scanf ( \"%d\" , & b ) ; for ( j = 0 ; j < b ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & t [ j ] [ k ] ) ; } } max ( t , b ) ; } }", "label": 0, "id": 11407}
{"input": "int main ( ) { int T , i , j , l , A [ 100 ] [ 100 ] ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; } } int s = A [ 0 ] [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) { if ( s + A [ i ] [ 0 ] > s + A [ i ] [ 1 ] ) s = s + A [ i ] [ 0 ] ; else s = s + A [ i ] [ 1 ] ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 4722}
{"input": "int main ( ) { int t , size , num , min , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & size ) ; scanf ( \"%d \" , & num ) ; min = num ; for ( j = 1 ; j < size - 1 ; j ++ ) { scanf ( \"%d \" , & num ) ; if ( num < min ) min = num ; } scanf ( \"%d\" , & num ) ; if ( num < min ) min = num ; printf ( \"%d\" , min * ( size - 1 ) ) ; } }", "label": 1, "id": 22878}
{"input": "int main ( void ) { int err , T , i ; long N , * a , ii , minA ; long long * y ; err = scanf ( \"%d\n\" , & T ) ; y = calloc ( T , sizeof ( long long ) ) ; for ( i = 0 ; i < T ; i ++ ) { err = scanf ( \"%ld\" , & N ) ; a = calloc ( N , sizeof ( long ) ) ; for ( ii = 0 ; ii < N ; ii ++ ) scanf ( \"%ld\" , & a [ ii ] ) ; minA = a [ 0 ] ; for ( ii = 1 ; ii < N ; ii ++ ) if ( a [ ii ] < minA ) minA = a [ ii ] ; y [ i ] = ( N - 1 ) * ( long long ) minA ; free ( a ) ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%lld\n\" , y [ i ] ) ; free ( y ) ; return 0 ; }", "label": 0, "id": 10437}
{"input": "int main ( ) { int a , b , c , d , t , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = a ; d = b ; while ( 1 ) { if ( a == b ) { printf ( \"%d \" , a ) ; break ; } else if ( a > b ) a = a - b ; else b = b - a ; } lcm = c * d / a ; printf ( \"%d\n\" , lcm ) ; } }", "label": 1, "id": 25406}
{"input": "int main ( void ) { int t , m , n , i , j ; scanf ( \"%d\" , & m ) ; for ( t = 0 ; t < m ; t ++ ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 3416}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , b [ 205 ] , i , j , test = 0 , n = 0 ; long int ans ; for ( i = 0 ; i < 205 ; i ++ ) b [ i ] = 0 ; scanf ( \"%d\" , & test ) ; while ( test != 0 ) { scanf ( \"%d\" , & n ) ; while ( n != 0 ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] [ 0 ] > a [ i ] [ 1 ] ) b [ i ] = a [ i ] [ 0 ] ; else b [ i ] = a [ i ] [ 1 ] ; } for ( i = 0 ; i < 205 ; i ++ ) ans += b [ i ] ; printf ( \"%ld\" , ans ) ; printf ( \"\n\" ) ; } } return 0 ; }", "label": 2, "id": 16788}
{"input": "int main ( ) { int a , i ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { int b , c , j , lcm , m , x , y ; scanf ( \"%d %d\" , & b , & c ) ; x = b ; y = c ; while ( b != c ) { if ( b > c ) b = b - c ; else c = c - b ; } lcm = ( x * y ) / b ; printf ( \"%d %d\n\" , b , lcm ) ; } return 0 ; }", "label": 1, "id": 19362}
{"input": "int main ( void ) { int i , t , n , min = 0 , sum , j , a [ 50 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } min = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { min = ( min < a [ j ] ) ? min : a [ j ] ; sum = sum + min ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 5616}
{"input": "int mat [ 100 ] [ 100 ] , n , maxarr [ 100 ] [ 100 ] = { 0 } ; int maxpath ( int i , int j ) { int x , y , max ; if ( i == n - 1 ) return mat [ i ] [ j ] ; if ( maxarr [ i + 1 ] [ j ] == 0 ) { x = maxpath ( i + 1 , j ) ; maxarr [ i + 1 ] [ j ] = x ; } else x = maxarr [ i + 1 ] [ j ] ; if ( maxarr [ i + 1 ] [ j + 1 ] == 0 ) { y = maxpath ( i + 1 , j + 1 ) ; maxarr [ i + 1 ] [ j + 1 ] = y ; } else y = maxarr [ i + 1 ] [ j + 1 ] ; max = ( x > y ) ? x : y ; return ( mat [ i ] [ j ] + max ) ; } int main ( ) { int t ; int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; maxarr [ i ] [ j ] = 0 ; } } printf ( \"%d\n\" , maxpath ( 0 , 0 ) ) ; } return 0 ; }", "label": 0, "id": 21939}
{"input": "int maxsum ( int * * a , int * * b , int i , int j ) { if ( i == 0 && j == 0 ) return a [ 0 ] [ 0 ] ; if ( b [ i ] [ j ] != 0 ) return b [ i ] [ j ] ; if ( j == 0 ) { b [ i ] [ j ] = maxsum ( a , b , i - 1 , j ) + a [ i ] [ j ] ; } else if ( j == i ) { b [ i ] [ j ] = maxsum ( a , b , i - 1 , j - 1 ) + a [ i ] [ j ] ; } else { if ( maxsum ( a , b , i - 1 , j ) >= maxsum ( a , b , i - 1 , j - 1 ) ) b [ i ] [ j ] = maxsum ( a , b , i - 1 , j ) + a [ i ] [ j ] ; else b [ i ] [ j ] = maxsum ( a , b , i - 1 , j - 1 ) + a [ i ] [ j ] ; } return b [ i ] [ j ] ; } int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { int t , max = 0 ; scanf ( \"%d\" , & t ) ; int * * a = ( int * * ) malloc ( t * sizeof ( int * ) ) ; int * * b = ( int * * ) malloc ( t * sizeof ( int * ) ) ; int i , j ; for ( i = 0 ; i < t ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } b [ i ] = ( int * ) calloc ( i + 1 , sizeof ( int ) ) ; } b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < t ; i ++ ) { int p = maxsum ( a , b , t - 1 , i ) ; if ( p > max ) max = p ; } printf ( \"%d\n\" , max ) ; n -- ; } return 0 ; }", "label": 0, "id": 15751}
{"input": "main ( ) { int num , i , count , k ; scanf ( \"%d\" , & count ) ; while ( count -- ) { scanf ( \"%d\" , & num ) ; k = num * ( num + 1 ) / 2 ; int a [ k ] ; for ( i = 0 ; i < k ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; k = k - num ; while ( -- num ) { k = k - num ; for ( i = 0 ; i < num ; i ++ ) a [ k + i ] += a [ k + num + i ] > a [ k + num + i + 1 ] ? a [ k + num + i ] : a [ k + num + i + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22422}
{"input": "long int a [ 50000 ] ; int main ( ) { int t ; long int n , i , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } c = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < c ) c = a [ i ] ; } printf ( \"%ld \n\" , ( ( n - 1 ) * c ) ) ; } return 0 ; }", "label": 1, "id": 14968}
{"input": "int main ( void ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"  %d  \" , a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) sum = sum + a [ i ] [ i ] ; else if ( a [ i ] [ n - 1 - i ] > a [ i ] [ n - i ] ) sum = sum + a [ i ] [ n - 1 - i ] ; else sum = sum + a [ i ] [ n - i ] ; } printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 1, "id": 17204}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y , gcd ; scanf ( \"%d%d\" , & x , & y ) ; for ( int i = 1 ; i <= x && i <= y ; ++ i ) { if ( x % i == 0 && y % i == 0 ) { gcd = i ; } } printf ( \"%d %d\n\" , gcd , ( x * y ) / gcd ) ; } return 0 ; }", "label": 1, "id": 26165}
{"input": "int max ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int maxim , n , line , i , j ; int Arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & line ) ; i = 0 ; for ( i ; i < line ; i ++ ) { j = 0 ; for ( j ; j <= i ; j ++ ) { scanf ( \"%d\" , & Arr [ i ] [ j ] ) ; } } for ( i = 1 ; i < line ; i ++ ) { j = 0 ; for ( j ; j <= i ; j ++ ) { if ( j == 0 ) Arr [ i ] [ j ] += Arr [ i - 1 ] [ j ] ; else if ( j == i ) Arr [ i ] [ j ] += Arr [ i - 1 ] [ j - 1 ] ; else Arr [ i ] [ j ] += max ( Arr [ i - 1 ] [ j - 1 ] , Arr [ i - 1 ] [ j ] ) ; } } j = 0 ; maxim = 0 ; for ( j ; j < line ; j ++ ) { if ( Arr [ line - 1 ] [ j ] > maxim ) maxim = Arr [ line - 1 ] [ j ] ; } printf ( \"\n%d\" , maxim ) ; } return 0 ; }", "label": 0, "id": 8082}
{"input": "int main ( void ) { int t , a , gcd , lcm , k , g , x , y , c , v ; scanf ( \"%d\" , & t ) ; for ( a = 1 ; a <= t ; a ++ ) { scanf ( \"%d%d\" , & x , & y ) ; g = 2 ; if ( x > y ) { for ( c = 1 ; c <= y ; c ++ ) { k = ( x * g ) ; if ( k % y == 0 ) lcm = k ; g ++ ; } } else { for ( v = 1 ; v <= x ; v ++ ) { k = y * g ; if ( k % x == 0 ) lcm = k ; g ++ ; } } gcd = x * y / lcm ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 19868}
{"input": "int read_int ( ) { char c = gc ( ) ; while ( c < '0' || c > '9' ) c = gc ( ) ; int ret = 0 ; while ( c >= '0' && c <= '9' ) { ret = 10 * ret + c - 48 ; c = gc ( ) ; } return ret ; } int main ( ) { int t ; t = read_int ( ) ; while ( t -- ) { int n ; n = read_int ( ) ; int a , i ; long long int min ; for ( i = 0 ; i < n ; i ++ ) { a = read_int ( ) ; if ( i == 0 ) { min = a ; } else if ( a < min ) min = a ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 8156}
{"input": "int n , a [ 100 ] [ 100 ] ; int recur ( int , int , int ) ; int recur ( int x , int i , int j ) { int s = 0 ; if ( i == n - 1 || j == n - 1 ) return a [ i ] [ j ] ; int l = recur ( a [ i + 1 ] [ j ] , i + 1 , j ) ; int r = recur ( a [ i + 1 ] [ j + 1 ] , i + 1 , j + 1 ) ; if ( l > r ) s = s + l + a [ i ] [ j ] ; else s = s + a [ i ] [ j ] + r ; return s ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } int s = 0 ; s = recur ( a [ 0 ] [ 0 ] , 0 , 0 ) ; printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 2, "id": 7724}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { long long int a , b , t , h ; scanf ( \"%lld %lld\" , & a , & b ) ; long long int x = a ; long long int y = b ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } h = a ; h = ( x * y ) / a ; printf ( \"%lld %lld\" , a , h ) ; } return 0 ; }", "label": 1, "id": 16389}
{"input": "int main ( ) { int t , n , no , i , j , add , pos ; int arr [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d \" , & t ) ; while ( t -- ) { add = 0 ; scanf ( \"%d \" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d \" , & arr [ i ] [ j ] ) ; for ( i = n - 1 , j = 0 ; j < n ; j ++ ) if ( add < arr [ i ] [ j ] ) { add = arr [ i ] [ j ] ; pos = j ; } for ( i = n - 2 ; i >= 0 ; i -- ) { j = pos ; if ( ( j - 1 ) >= 0 ) { if ( arr [ i ] [ j ] > arr [ i ] [ j - 1 ] ) add += arr [ i ] [ j ] ; else { add += arr [ i ] [ j - 1 ] ; pos -= 1 ; } } else add += arr [ i ] [ 0 ] ; } printf ( \"%d \" , add ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 19307}
{"input": "int main ( ) { int test_case ; long int n , count , sum , i ; scanf ( \"%d\" , & test_case ) ; while ( test_case -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; count = 1 ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - 1 ] ) { count ++ ; } else { sum = sum + ( count * ( count + 1 ) / 2 ) ; count = 1 ; } } sum = sum + ( count * ( count + 1 ) / 2 ) ; printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 2837}
{"input": "int main ( ) { short int t ; long * a , N , i , cost , minimum ; scanf ( \"%uh\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%ld\" , & N ) ; a = ( long * ) malloc ( N * sizeof ( long ) ) ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; minimum = a [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { if ( a [ i ] < minimum ) minimum = a [ i ] ; } cost = minimum * ( N - 1 ) ; printf ( \"%ld\n\" , cost ) ; free ( a ) ; } return 0 ; }", "label": 0, "id": 2873}
{"input": "long long int gcd ( ) ; int main ( ) { int T ; long long int A , B , lcm , r ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%lld %lld\" , & A , & B ) ; r = gcd ( A , B ) ; lcm = ( A * B ) / r ; printf ( \"%lld %lld\n\" , r , lcm ) ; T -- ; } return 0 ; } long long int gcd ( x , y ) { long long int r ; if ( x >= y ) { if ( x % y == 0 ) return ( r = y ) ; else return ( gcd ( x - y , y ) ) ; } else { if ( x % y == 0 ) return ( r = y ) ; else return ( gcd ( x , y - x ) ) ; } }", "label": 0, "id": 6784}
{"input": "int main ( ) { int a , b , i , gcd , lcm ; int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 16370}
{"input": "int gcd ( int x , int y ) { int i ; if ( x > y ) i = y ; else i = x ; while ( ( ( x % i ) != 0 ) || ( ( y % i ) != 0 ) ) { i = i - 1 ; } return ( i ) ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { int x , y , c ; scanf ( \"%d %d\" , & x , & y ) ; c = gcd ( x , y ) ; printf ( \"%d %d \n\" , c , x * y / c ) ; } return ( 0 ) ; }", "label": 1, "id": 17876}
{"input": "int main ( ) { int t , i , n , j , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; unsigned long int cnt = 0 ; scanf ( \"%d\" , & n ) ; int * arr = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n && arr [ j ] > arr [ j + 1 ] ) cnt = cnt + arr [ j + 1 ] ; else if ( j + 1 < n && arr [ j ] < arr [ j + 1 ] ) { cnt = cnt + arr [ j ] ; temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } printf ( \"%ld\n\" , cnt ) ; } return 0 ; }", "label": 1, "id": 21792}
{"input": "int main ( ) { int i , j , l , a [ 100 ] [ 100 ] ; long int t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = l - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 9056}
{"input": "int main ( ) { int a , b , k , n , i = 1 , hcf ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; int m = 0 ; int p = a , q = b ; while ( m == 0 ) { if ( a % b == 0 ) { m = 1 ; hcf = b ; printf ( \"\n%d\" , hcf ) ; } else { a = a % b ; k = a ; a = b ; b = k ; } } int lcm = ( p * q ) / hcf ; printf ( \"\n%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 9462}
{"input": "int hcf ( int a , int b ) { int r = 1 , h , t ; if ( a > b ) { t = a ; a = b ; b = t ; } while ( r != 0 ) { r = b % a ; if ( r == 0 ) h = a ; else { b = a ; a = r ; } } return h ; } int main ( ) { int i , t , a , h , l , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { scanf ( \"%d %d\" , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( \"%d %d\" , h , l ) ; } }", "label": 1, "id": 8092}
{"input": "int func ( int [ ] [ 100 ] , int , int , int ) ; int max ( int , int ) ; int main ( ) { int ans , num , a [ 100 ] [ 100 ] , r , m , n , l , j , i ; scanf ( \"%d\" , & num ) ; while ( num != 0 ) { scanf ( \"%d\" , & r ) ; l = 1 ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; ( ( j < l ) && ( ( scanf ( \"%d\" , & a [ i ] [ j ] ) ) == 1 ) ) ; j ++ ) { } l ++ ; } m = 0 , n = 0 ; ans = func ( a , m , n , r ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; } int func ( int a [ ] [ 100 ] , int m , int n , int p ) { int ans ; if ( ( m == p ) || ( n == p ) ) { return a [ m ] [ n ] ; } else { return ( a [ m ] [ n ] + max ( func ( a , m + 1 , n , p ) , func ( a , m + 1 , n + 1 , p ) ) ) ; } } int max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } }", "label": 2, "id": 11128}
{"input": "int main ( ) { int T , A , B , a , b , temp ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; A = a ; B = b ; while ( A % B ) { temp = B ; B = A % B ; A = temp ; } printf ( \"%d %d\n\" , B , ( a * b ) / B ) ; } return 0 ; }", "label": 1, "id": 7835}
{"input": "int main ( void ) { int t , n ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] , min = INT_MAX ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( min > a [ j ] ) min = a [ j ] ; } printf ( \"%d\n\" , min ) ; } return 0 ; }", "label": 1, "id": 3026}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; return b ; } int main ( ) { int t , n , i , j , dp [ 100 ] [ 100 ] , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 1 ; i <= n ; i ++ ) dp [ n ] [ i ] = a [ n ] [ i ] ; for ( i = n - 1 ; i >= 1 ; i -- ) for ( j = 1 ; j <= i ; j ++ ) dp [ i ] [ j ] = a [ i ] [ j ] + max ( dp [ i + 1 ] [ j ] , dp [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , dp [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 150}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 15118}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n ; scanf ( \"%d\" , & n ) ; int t [ 100 ] [ 100 ] = { 0 } , i , j ; for ( i = 0 ; i < n ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) { scanf ( \"%d\" , & t [ i ] [ j ] ) ; } } for ( i = ( n - 1 ) ; i > 0 ; -- i ) { for ( j = 0 ; j < i ; ++ j ) { if ( t [ i ] [ j ] > t [ i ] [ j + 1 ] ) t [ i - 1 ] [ j ] += t [ i ] [ j ] ; else t [ i - 1 ] [ j ] += t [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , t [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15375}
{"input": "int main ( ) { int i , j , n , t , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = i ; j > 1 ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - 1 ] ? a [ i ] [ j ] : a [ i ] [ j - 1 ] ; a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + max ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 6452}
{"input": "int main ( ) { int s ; scanf ( \"%d\" , & s ) ; int a [ 100 ] [ 100 ] ; int n , sum , i , j ; while ( s > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = ( n - 1 ) ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { sum = a [ i ] [ j ] ; } else { sum = a [ i ] [ j + 1 ] ; } a [ i - 1 ] [ j ] += sum ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; s -- ; } return 0 ; }", "label": 0, "id": 24115}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , N ; scanf ( \"%d\" , & n ) ; N = n ; if ( ( N > 1 && N < 15 ) || ( N > 1 && N <= 100 ) || ( N > 1 && N <= 50000 ) ) { int a [ n ] ; while ( n -- ) { scanf ( \"%d\" , & a [ N - n ] ) ; } int min = a [ 1 ] ; int i ; for ( i = 2 ; i <= n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } } return 0 ; }", "label": 1, "id": 22329}
{"input": "int a [ 50000 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , min = 100001 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 19553}
{"input": "int gcd ( int a , int b ) { if ( a > b ) { if ( b != 0 ) return gcd ( b , a % b ) ; else return a ; } else { if ( b != 0 ) return gcd ( a , b % a ) ; else return b ; } } int main ( ) { int a , b , t , i = 0 , c ; long long int d ; scanf ( \"%d\" , & t ) ; do { scanf ( \"%d%d\" , & a , & b ) ; c = gcd ( a , b ) ; d = a / c ; d = d * b ; printf ( \"%d %lld\n\" , c , d ) ; i ++ ; } while ( i < t ) ; }", "label": 0, "id": 5851}
{"input": "int n = 0 ; int main ( void ) { int t , i , test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & t ) ; n = t * ( t + 1 ) / 2 ; int arr [ 10000 ] = { 0 } ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; printf ( \"%d\n\" , fun ( arr , 1 ) + arr [ 1 ] ) ; } return 0 ; } int fun ( int arr [ ] , int k ) { if ( 2 * k > n ) return 0 ; else return max ( arr [ 2 * k ] + fun ( arr , 2 * k ) , arr [ 2 * k + 1 ] + fun ( arr , 2 * k + 1 ) ) ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 1, "id": 20715}
{"input": "int main ( ) { int p , i , j , t ; long long int n ; scanf ( \"%d\" , & p ) ; while ( p -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } } } printf ( \"%d\n\" , a [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 2108}
{"input": "void main ( ) { int a , b , t , x , y ; printf ( \"\nEnter the number of test cases.(between 0 to 1000)\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"\nEnter any two numbers.\" ) ; scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( b != 0 ) { t = a ; b = a % b ; a = t ; } printf ( \"\nGCD and LCM are %d %d\" , a , ( x * y ) / a ) ; } }", "label": 1, "id": 13649}
{"input": "int main ( ) { int n1 , n2 , max , lcm , i ; scanf ( \"%d\" , & n1 ) ; scanf ( \"%d\" , & n2 ) ; max = n1 > n2 ? n1 : n2 ; i = max ; for ( ; ; ) { if ( i % n1 == 0 && i % n2 == 0 ) { lcm = i ; break ; } i = i = max ; } printf ( \"%d\" , lcm ) ; return 0 ; }", "label": 2, "id": 5733}
{"input": "int main ( ) { int limit ; long int x , y , z ; scanf ( \"%d\" , & limit ) ; while ( limit -- ) { scanf ( \"%ld%ld\" , & x , & y ) ; z = x * y ; int c ; while ( x != 0 ) { c = x ; x = y % x ; y = c ; } printf ( \"%ld %ld\n\" , y , z / y ) ; } return 0 ; }", "label": 0, "id": 1209}
{"input": "int main ( ) { int i , n , a , b , j , l ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { for ( j = b ; j >= 1 ; j -- ) if ( b % j == 0 ) { if ( ( a % j ) == 0 ) { printf ( \"%d\n\" , j ) ; break ; } } else continue ; } else { for ( j = a ; j >= 1 ; j -- ) if ( a % j == 0 ) { if ( ( b % j ) == 0 ) { printf ( \"%d\n\" , j ) ; break ; } } else continue ; } l = ( a * b ) / j ; printf ( \"%d\n\" , l ) ; } return 0 ; }", "label": 1, "id": 14876}
{"input": "int main ( ) { int t , a , b , gcd , lcm , temp1 , temp2 , temp3 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; temp1 = a ; temp2 = b ; while ( a % b != 0 ) { temp3 = a ; a = b ; b = temp3 % b ; } gcd = b ; lcm = temp1 * temp2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 8854}
{"input": "int main ( int argc , char const * argv [ ] ) { int t , i , temp , min ; long long int n , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = INT_MAX ; cost = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & temp ) ; if ( temp < min ) min = temp ; if ( i >= 1 ) cost += min ; } printf ( \"%lld\" , cost ) ; } return 0 ; }", "label": 1, "id": 4865}
{"input": "int findmax ( int * * , int , int , int , int ) ; int main ( void ) { int n ; int lines ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { n -- ; scanf ( \"%d\" , & lines ) ; int * tr [ lines ] ; int i = 0 ; while ( i < lines ) { tr [ i ] = malloc ( sizeof ( int ) * ( i + 1 ) ) ; int j ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & tr [ i ] [ j ] ) ; } i ++ ; } printf ( \"%d\n\" , findmax ( tr , 0 , 0 , 0 , lines ) ) ; } return 0 ; } int findmax ( int * * tr , int i , int j , int max , int lines ) { if ( i == lines ) { return max ; } else { int temp1 , temp2 , k , temp = max ; for ( k = j ; k <= i ; k ++ ) { temp1 = findmax ( tr , i + 1 , j , max + tr [ i ] [ j ] , lines ) ; temp2 = findmax ( tr , i + 1 , j + 1 , max + tr [ i ] [ j ] , lines ) ; if ( temp1 >= temp2 ) { if ( temp1 > temp ) temp = temp1 ; } else { if ( temp2 > temp ) temp = temp2 ; } } return temp ; } }", "label": 2, "id": 7279}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i ; long int a , b , k ; scanf ( \"%ld%ld\" , & a , & b ) ; for ( i = a ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { printf ( \"%d \" , i ) ; break ; } } printf ( \"%d\n\" , a * b / i ) ; } return 0 ; }", "label": 2, "id": 22774}
{"input": "int a [ 99 ] [ 99 ] ; int main ( ) { int t , i , n , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; int sum = a [ 0 ] [ 0 ] ; sum += maxSum ( 1 , 0 , n ) ; printf ( \"%d\" , sum ) ; } system ( \"PAUSE\" ) ; } int maxSum ( int j , int k , int n ) { int sum1 , sum2 ; if ( j == n - 1 && k != n - 1 ) return a [ j ] [ k ] > a [ j ] [ k + 1 ] ? a [ j ] [ k ] : a [ j ] [ k + 1 ] ; else if ( j == n - 1 && k == n - 1 ) return a [ j ] [ k ] ; else { sum1 = a [ j ] [ k ] + maxSum ( j + 1 , k , n ) ; sum2 = a [ j ] [ k + 1 ] + maxSum ( j + 1 , k + 1 , n ) ; return sum1 > sum2 ? sum1 : sum2 ; } }", "label": 2, "id": 826}
{"input": "int sum , max , lind , rind ; void input ( ) { int n , a [ 100 ] [ 100 ] , j , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = 0 ; max = 0 ; lind = 0 ; rind = 0 ; func ( sum , n , a , lind , rind ) ; printf ( \"%d\n\" , max ) ; } void func ( int sum , int n , int a [ ] [ 100 ] , int lind , int rind ) { if ( lind >= n ) return ; if ( lind < rind ) return ; sum = sum + a [ lind ] [ rind ] ; if ( sum > max ) max = sum ; func ( sum , n , a , lind + 1 , rind ) ; if ( lind == 0 ) return ; sum = sum - a [ lind ] [ rind ] + a [ lind ] [ rind + 1 ] ; if ( sum > max ) max = sum ; rind ++ ; func ( sum , n , a , lind + 1 , rind ) ; } int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { input ( ) ; } return 0 ; }", "label": 2, "id": 24911}
{"input": "int main ( ) { int tc , a [ 1000 ] , ans [ 1000 ] ; int i , j , k , r , p , q , suml , sumr , it = 1 , flag ; scanf ( \"%d\" , & tc ) ; for ( i = 0 ; i < tc ; i ++ ) { r = 0 ; scanf ( \"%d\" , & a [ 0 ] ) ; for ( j = 1 ; j <= a [ 0 ] ; j ++ ) for ( k = 0 ; k < j ; k ++ ) scanf ( \"%d\" , & a [ ++ r ] ) ; flag = 1 ; it = 1 ; while ( flag ) { suml = 0 ; sumr = 0 ; for ( p = 1 ; p <= it ; p ++ ) suml += a [ p ] ; for ( q = r ; q > it ; q -- ) sumr += a [ q ] ; it ++ ; if ( suml == sumr ) { flag = 0 ; ans [ i ] = suml ; } } } for ( i = 0 ; i < tc ; i ++ ) printf ( \"\n%d\" , ans [ i ] ) ; return 0 ; }", "label": 3, "id": 6379}
{"input": "int main ( ) { int n , a , b , i , y , x , l , t , s ; scanf ( \"%d\" , & n ) ; while ( n -- ) { s = 1 ; t = 1 ; scanf ( \"%d%d\" , & a , & b ) ; l = ( a > b ? a : b ) ; x = a ; y = b ; for ( i = 1 ; i <= l ; i ++ ) { if ( x % i == 0 && y % i == 0 ) { t = t * i ; x = x / i ; y = y / i ; } if ( x % i == 0 || y % i == 0 ) { if ( x % i == 0 ) { s = s * i ; x = x / i ; } if ( y % i == 0 ) { s = s * i ; y = y / i ; } if ( x % i == 0 && y % i == 0 ) { s = s * i ; x = x / i ; y = y / i ; } } } printf ( \"%d %d\" , t , s ) ; } return 0 ; }", "label": 2, "id": 13858}
{"input": "int main ( ) { int n , a , b , i , lcm , ca , cb , rem ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; ca = a ; cb = b ; while ( a != 0 ) { rem = b % a ; b = a ; a = rem ; } lcm = ( ca * cb ) / a ; printf ( \"%d %d\" , a , lcm ) ; } }", "label": 3, "id": 12680}
{"input": "int main ( ) { int n , l , i , j , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & l ) ; int ay ; int sum = 0 ; for ( j = 0 ; j < l ; j ++ ) { int max = - INFINITY ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & ay ) ; if ( max <= ay ) { max = ay ; } } sum += max ; } printf ( \"%d\n\" , sum - 1 ) ; } return 0 ; }", "label": 1, "id": 1560}
{"input": "int main ( ) { int A [ 1000 ] , B [ 1000 ] ; int n , i , j , k , s , b ; long long int l , h ; h = 1 ; l = 1 ; j = 1 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & A [ i ] , & B [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( A [ i ] >= B [ i ] ) { s = B [ i ] ; b = A [ i ] ; } else { s = A [ i ] ; b = B [ i ] ; } k = b ; while ( j <= s ) { if ( s % j == 0 && b % j == 0 ) { h = j ; } j ++ ; } l = ( s * b ) / h ; printf ( \"%lld %lld\n\" , h , l ) ; h = 1 ; l = 1 ; } }", "label": 1, "id": 18497}
{"input": "int main ( ) { int a , b ; int temp , gcd ; long lcm , product ; printf ( \"\n enter two number:\" ) ; scanf ( \"%d%d\" , & a , & b ) ; product = a * b ; while ( a > 0 ) { if ( a < b ) { temp = a ; a = b ; b = temp ; } a = a % b ; } gcd = b ; lcm = product / gcd ; printf ( \"\ngcd and lcm values are:\" ) ; printf ( \"%d\\t%ld\" , gcd , lcm ) ; return 0 ; }", "label": 1, "id": 21810}
{"input": "int a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] ; void set0 ( int b [ 100 ] [ 100 ] ) { int i , j ; for ( i = 0 ; i < 100 ; ++ i ) { for ( j = 0 ; j < 100 ; ++ j ) { b [ i ] [ j ] = - 1 ; } } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int solve ( int i , int j , int n ) { int t1 , t2 , t ; if ( b [ i ] [ j ] != - 1 ) return b [ i ] [ j ] ; else if ( i >= n ) return 0 ; t1 = solve ( i + 1 , j , n ) ; t2 = solve ( i + 1 , j + 1 , n ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; b [ i ] [ j ] = t ; return t ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , sum , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } set0 ( b ) ; sum = solve ( 0 , 0 , n ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 20788}
{"input": "int gcd ( int m , int n ) { if ( m == 0 || n == 0 ) { return 0 ; } if ( m == n ) { return m ; } if ( m > n ) return gcd ( m - n , n ) ; return gcd ( m , n - m ) ; } int lcm ( int m , int n ) { return ( m * n ) / gcd ( m , n ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int a , b , i , ar [ t ] , arr [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; ar [ i ] = gcd ( a , b ) ; arr [ i ] = lcm ( a , b ) ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d %d\" , ar [ i ] , arr [ i ] ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 1544}
{"input": "int main ( ) { int t , a , b , g , l , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) if ( a % i == 0 && b % i == 0 ) g = i ; l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 6126}
{"input": "int readinput ( ) ; int main ( ) { int test , i , l , m , arr [ 100 ] [ 100 ] , ans [ 100 ] , n ; scanf ( \"%d\" , & test ) ; for ( i = 1 ; i <= test ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( l = 0 ; l < n ; l ++ ) { for ( m = 0 ; m <= l ; m ++ ) scanf ( \"%d\" , & arr [ l ] [ m ] ) ; } for ( l = n - 1 ; l >= 0 ; l -- ) { for ( m = 0 ; m < l ; m ++ ) { if ( arr [ l ] [ m ] > arr [ l ] [ m + 1 ] ) arr [ l - 1 ] [ m ] += arr [ l ] [ m ] ; else arr [ l - 1 ] [ m ] += arr [ l ] [ m + 1 ] ; } } ans [ i - 1 ] = arr [ 0 ] [ 0 ] ; } for ( i = 0 ; i < test ; i ++ ) printf ( \"%d\n\" , ans [ i ] ) ; return 0 ; }", "label": 1, "id": 1638}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int it = 0 ; it < t ; it ++ ) { int n , a [ 1000 ] [ 1000 ] ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( int i = n - 1 ; i >= 1 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) a [ i - 1 ] [ j ] += max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 3480}
{"input": "int max_sum ( int * , int , int , int ) ; int max ( int , int ) ; int main ( ) { int tests , i , lines , j = 0 ; scanf ( \"%d\" , & tests ) ; int * output = ( int * ) malloc ( sizeof ( int ) * tests ) ; for ( i = 0 ; i < tests ; i ++ ) { scanf ( \"%d\" , & lines ) ; int size = ( lines * ( lines + 1 ) ) / 2 ; int * nos = ( int * ) malloc ( sizeof ( int ) * size ) ; while ( j < size ) scanf ( \"%d\" , & nos [ j ++ ] ) ; j = 0 ; output [ i ] = max_sum ( nos , lines , 0 , 0 ) ; } for ( i = 0 ; i < tests ; i ++ ) printf ( \"%d\n\" , output [ i ] ) ; free ( output ) ; return 0 ; } int max_sum ( int * nos , int lines , int line_no , int index ) { if ( line_no == lines ) return 0 ; if ( index > line_no ) return 0 ; return nos [ ( line_no * ( line_no + 1 ) ) / 2 + index ] + max ( max_sum ( nos , lines , line_no + 1 , index ) , max_sum ( nos , lines , line_no + 1 , index + 1 ) ) ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 2, "id": 25647}
{"input": "int a [ 100 ] [ 100 ] , cache [ 100 ] [ 100 ] , check [ 100 ] [ 100 ] = { 0 } ; int solve ( int , int , int ) ; int main ( ) { int i , j , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } int ans = solve ( 0 , 0 , n ) ; printf ( \"%d\n\" , ans ) ; for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) { a [ i ] [ j ] = 0 ; cache [ i ] [ j ] = 0 ; check [ i ] [ j ] = 0 ; } } return 0 ; } int solve ( int i , int j , int n ) { int t , t1 , t2 ; if ( i >= n ) return 0 ; if ( check [ i ] [ j ] == 1 ) return cache [ i ] [ j ] ; t1 = solve ( i + 1 , j , n ) ; t2 = solve ( i + 1 , j + 1 , n ) ; t = a [ i ] [ j ] + ( t1 > t2 ? t1 : t2 ) ; cache [ i ] [ j ] = t ; check [ i ] [ j ] = 1 ; return t ; }", "label": 0, "id": 14892}
{"input": "int main ( ) { int t , a , b , gcd , lcm , min ; scanf ( \"%d\" , & t ) ; for ( ; t > 0 ; t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { min = b ; } else { min = a ; } for ( ; min >= 1 ; min -- ) { if ( a % min == 0 && b % min == 0 ) { gcd = min ; break ; } } printf ( \"%d\" , gcd ) ; lcm = ( a * b ) / ( gcd ) ; printf ( \"%d\n\" , lcm ) ; } }", "label": 1, "id": 13921}
{"input": "int main ( ) { long int t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long int a , b , x , y ; int tem , gcd , lcm ; scanf ( \"%ld%ld\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { tem = y ; y = x % y ; x = tem ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%d \" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 14204}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) ? a [ i + 1 ] [ j + 1 ] : a [ i + 1 ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 9985}
{"input": "int main ( ) { int n , a [ 100 ] [ 100 ] , i , j , l ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = l - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4023}
{"input": "int main ( void ) { int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( \"enter two numbers:\" ) ; scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) { A = numerator ; B = denominator ; } else { A = denominator ; B = numerator ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( \"gcd of %d and %d= %d\" , gcd ) ; printf ( \"lcm of %d and %d =%d\" , lcm ) ; return 0 ; }", "label": 3, "id": 19875}
{"input": "main ( ) { static int a [ 100 ] [ 100 ] ; int i , j , n , t , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ j ] [ i ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) a [ j ] [ i ] += ( a [ j ] [ i + 1 ] > a [ j + 1 ] [ i + 1 ] ? a [ j ] [ i + 1 ] : a [ j + 1 ] [ i + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 14733}
{"input": "int gcd ( int , int ) ; int main ( ) { int x , y , a , b , n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) x = gcd ( a , b ) ; else x = gcd ( b , a ) ; y = ( a * b ) / x ; printf ( \"%d %d\n\" , x , y ) ; } return 0 ; } int gcd ( int l , int q ) { if ( q == 0 ) return l ; else return gcd ( q , l % q ) ; }", "label": 1, "id": 5523}
{"input": "int findHCF ( int a , int b ) ; int main ( void ) { int a , b , hcf , t ; long lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a == b ) printf ( \"%d %d\n\" , a , b ) ; else { hcf = findHCF ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%d %ld\n\" , hcf , lcm ) ; } } return 0 ; } int findHCF ( int a , int b ) { if ( b == 0 ) return a ; return findHCF ( b , a % b ) ; }", "label": 1, "id": 10593}
{"input": "int main ( ) { int t , n ; int a [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int i ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; int k = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) k ++ ; } if ( n == 1 ) printf ( \"\n1\" ) ; else printf ( \"\n%d\" , ( k + n ) ) ; } }", "label": 1, "id": 25414}
{"input": "int main ( ) { int t , test ; scanf ( \"%d\" , & test ) ; for ( t = 0 ; t < test ; t ++ ) { int a [ 102 ] [ 102 ] , n , i , j , t1 , t2 , max = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( i == 0 ) { continue ; } if ( j == i ) { a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; continue ; } if ( j == 0 ) { a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; continue ; } t1 = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; t2 = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; if ( t1 > t2 ) a [ i ] [ j ] = t1 ; else a [ i ] [ j ] = t2 ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { printf ( \"%d \" , a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ n - 1 ] [ i ] > max ) max = a [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 2235}
{"input": "int sum_n ( int n ) { return ( n * ( n + 1 ) / 2 ) ; } int row_num ( int index ) { int row = 0 ; while ( ( row * ( row + 1 ) / 2 ) <= index ) { row ++ ; } return row ; } void sumtrian ( int * a , int index , int sum , int n , int * answer ) { if ( row_num ( index ) <= n ) { sum = sum + a [ index ] ; if ( row_num ( index ) == n ) { if ( * answer < sum ) { * answer = sum ; } } sumtrian ( a , index + row_num ( index ) , sum , n , answer ) ; sumtrian ( a , index + row_num ( index ) + 1 , sum , n , answer ) ; } } int main ( ) { int m , i , a [ 99 ] , row , sum [ 1000 ] , j , flag = 0 ; scanf ( \"%d\" , & m ) ; if ( m >= 0 && m <= 1000 ) for ( i = 0 ; i < m ; i ++ ) { sum [ i ] = 0 ; flag = 0 ; scanf ( \"%d\" , & row ) ; if ( row > 0 && row < 100 ) { for ( j = 0 ; j < sum_n ( row ) ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( a [ j ] <= 0 && a [ j ] > 99 ) { flag = 1 ; break ; } } if ( flag == 0 ) sumtrian ( a , 0 , 0 , row , & sum [ i ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { printf ( \"%d\n\" , sum [ i ] ) ; } return 0 ; }", "label": 2, "id": 3676}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int m , o , gcd , i , lcm ; scanf ( \"%d%d\" , & m , & o ) ; if ( m && n != 0 ) { for ( i = 1 ; i <= m && i <= o ; i ++ ) { if ( m % i == 0 && o % i == 0 ) { gcd = i ; } } lcm = ( m * o ) / ( gcd ) ; printf ( \"%d\n\" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } } return 0 ; }", "label": 2, "id": 15257}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned int n , i ; scanf ( \"%u\" , & n ) ; int a [ n ] , c ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } c = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < c ) { c = a [ i ] ; } } c = c * ( n - 1 ) ; printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 0, "id": 9057}
{"input": "int main ( void ) { int n , i , p , q ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & p , & q ) ; printf ( \"%d %d\n\" , gcd ( p , q ) , p * q / gcd ( p , q ) ) ; } return 0 ; } int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } return a ; }", "label": 1, "id": 4053}
{"input": "int main ( ) { int t , test ; scanf ( \"%d\" , & t ) ; test = t ; int res [ t ] ; while ( t > 0 ) { int n , i , j , x = 1 ; scanf ( \"%d\" , & n ) ; int e [ n ] [ n ] [ 2 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < x ; j ++ ) { scanf ( \"%d\" , & e [ i ] [ j ] [ 0 ] ) ; e [ i ] [ j ] [ 1 ] = 0 ; } x ++ ; } e [ 0 ] [ 0 ] [ 1 ] = e [ 0 ] [ 0 ] [ 0 ] ; x = 2 ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < x - 1 ; j ++ ) { if ( e [ i ] [ j ] [ 1 ] < e [ i - 1 ] [ j ] [ 1 ] + e [ i ] [ j ] [ 0 ] ) e [ i ] [ j ] [ 1 ] = e [ i - 1 ] [ j ] [ 1 ] + e [ i ] [ j ] [ 0 ] ; if ( e [ i ] [ j + 1 ] [ 1 ] < e [ i - 1 ] [ j ] [ 1 ] + e [ i ] [ j + 1 ] [ 0 ] ) e [ i ] [ j + 1 ] [ 1 ] = e [ i - 1 ] [ j ] [ 1 ] + e [ i ] [ j + 1 ] [ 0 ] ; } x ++ ; } res [ test - t ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( res [ test - t ] < e [ n - 1 ] [ i ] [ 1 ] ) { res [ test - t ] = e [ n - 1 ] [ i ] [ 1 ] ; } } t -- ; } for ( t = 0 ; t < test ; t ++ ) printf ( \"%d\n\" , res [ t ] ) ; return 0 ; }", "label": 0, "id": 22499}
{"input": "int main ( ) { int t , i , array [ 50000 ] , n ; long long min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100001 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & array [ i ] ) ; if ( array [ i ] < min ) { min = array [ i ] ; } } min = min * ( n - 1 ) ; printf ( \"%lld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 15228}
{"input": "int main ( ) { int i , j , min = 0 , d [ 10000 ] , o , x , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & x ) ; min = d [ 0 ] ; for ( j = 0 ; j < x ; j ++ ) { scanf ( \"%d\" , & d [ j ] ) ; } for ( j = 0 ; j < x ; j ++ ) if ( d [ j ] < min ) min = d [ j ] ; o = min * ( x - 1 ) ; printf ( \"%d\n\" , o ) ; } return 0 ; }", "label": 3, "id": 20109}
{"input": "int main ( ) { int i , j , k , t , n , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } for ( j = n - 2 ; j >= n ; j -- ) { for ( k = j ; k >= 0 ; k -- ) { if ( arr [ j + 1 ] [ k + 1 ] > arr [ j + 1 ] [ k ] ) { arr [ j ] [ k ] += arr [ j + 1 ] [ k + 1 ] ; } else { arr [ j ] [ k ] += arr [ j + 1 ] [ k ] ; } } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 4198}
{"input": "char ibuf [ BUF ] ; int ipt = BUF ; int readInt ( ) { while ( ipt < BUF && ibuf [ ipt ] < '0' ) ipt ++ ; if ( ipt == BUF ) { fread ( ibuf , 1 , BUF , stdin ) ; ipt = 0 ; while ( ipt < BUF && ibuf [ ipt ] < '0' ) ipt ++ ; } int n = 0 ; while ( ipt < BUF && ibuf [ ipt ] >= '0' ) n = ( n * 10 ) + ( ibuf [ ipt ++ ] - '0' ) ; if ( ipt == BUF ) { fread ( ibuf , 1 , BUF , stdin ) ; ipt = 0 ; while ( ipt < BUF && ibuf [ ipt ] >= '0' ) n = ( n * 10 ) + ( ibuf [ ipt ++ ] - '0' ) ; } return n ; } int main ( ) { int arr [ 100 ] [ 100 ] ; int t , n , i , j ; t = readInt ( ) ; while ( t -- ) { n = readInt ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] = readInt ( ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9349}
{"input": "int main ( ) { int x , n , t , a [ 100 ] [ 100 ] , i , j , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } printf ( \"\n\" ) ; } for ( j = ( t - 1 ) ; j > 0 ; j -- ) { for ( k = 0 ; k < j ; k ++ ) { x = ( a [ j ] [ k ] > a [ j ] [ k + 1 ] ) ? a [ j ] [ k ] : a [ j ] [ k + 1 ] ; a [ j - 1 ] [ k ] = a [ j - 1 ] [ k ] + x ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7070}
{"input": "int main ( ) { int a [ maxi ] [ maxi ] , s [ maxi ] [ maxi ] , n , t ; int i , j , max = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; max = s [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( j == i ) s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else { if ( s [ i - 1 ] [ j ] > s [ i - 1 ] [ j - 1 ] ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } } } max = s [ n - 1 ] [ 0 ] ; i = n - 1 ; j = 1 ; while ( j <= i ) { if ( s [ i ] [ j ] > max ) max = s [ i ] [ j ] ; j ++ ; } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 1, "id": 6537}
{"input": "int main ( ) { int t , n , i , j , max , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { for ( i = 0 ; i <= n ; i ++ ) a [ i ] [ 0 ] = 0 ; for ( j = 0 ; j <= n ; j ++ ) a [ 0 ] [ j ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = i + 1 ; j <= n ; j ++ ) a [ i ] [ j ] = 0 ; for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j ] += ( a [ i - 1 ] [ j - 1 ] >= a [ i - 1 ] [ j ] ? a [ i - 1 ] [ j - 1 ] : a [ i - 1 ] [ j ] ) ; } } max = a [ n ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) if ( a [ n ] [ j + 1 ] > a [ n ] [ j ] ) max = a [ n ] [ j + 1 ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 15770}
{"input": "int main ( ) { int t , i , j ; int long n , a [ n ] , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } printf ( \"%ld\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 14090}
{"input": "int main ( ) { long long int n , a [ 100000 ] , i , j , ct [ 100000 ] , sum [ 5 ] , t , x ; scanf ( \"%lld\" , & t ) ; x = t ; while ( t ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; i = 0 ; j = 0 ; while ( 1 ) { ct [ j ] = 1 ; while ( a [ i + 1 ] >= a [ i ] ) { ct [ j ] ++ ; i ++ ; } j ++ ; i ++ ; if ( i == n ) break ; } sum [ t ] = 0 ; for ( i = 0 ; i < j ; i ++ ) sum [ t ] += ct [ i ] * ( ct [ i ] + 1 ) / 2 ; t -- ; } for ( i = x ; i > 0 ; i -- ) printf ( \"%lld\n\" , sum [ i ] ) ; return 0 ; }", "label": 0, "id": 11195}
{"input": "int main ( ) { int t , n , i , j , k , count , found ; long long a [ 51 ] , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; count = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n - i ; j ++ ) { found = 1 ; max = 0 ; for ( k = j ; k <= j + i && k < n ; k ++ ) { if ( i == 0 ) { break ; } else { if ( a [ k ] > max ) { max = a [ k ] ; } else { found = 0 ; break ; } } } if ( found ) count ++ ; } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 3, "id": 8693}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { unsigned int n , a , i , min = INT_MIN ; scanf ( \"%u\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%u\" , & a ) ; if ( min > a ) { min = a ; } } printf ( \"%u\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 11109}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long int a , b , x , y , t1 , gcd , lcm ; scanf ( \"%ld %ld\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t1 = b ; b = a % b ; a = t1 ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 9236}
{"input": "int main ( ) { int t , n , i , min , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; scanf ( \"%d\" , & a [ 0 ] ) ; min = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( a [ j ] < min ) min = a [ j ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 1533}
{"input": "int main ( ) { int t , temp ; long int a , b , t1 , t2 , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%li%li\" , & a , & b ) ; t1 = a ; t2 = b ; if ( t1 > t2 ) { temp = t1 ; t1 = t2 ; t2 = temp ; } while ( t1 > 0 ) { t2 %= t1 ; temp = t1 ; t1 = t2 ; t2 = temp ; } gcd = t2 ; lcm = ( b / gcd ) * a ; printf ( \"%li %li\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 19466}
{"input": "int a [ N ] ; int main ( ) { int n , t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%d\" , & n ) ; int k = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ k ++ ] ) ; int last = n * ( n + 1 ) / 2 ; for ( i = n - 1 ; i > 0 ; i -- ) { int temp = i * ( i + 1 ) / 2 ; for ( j = temp ; j < last ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) a [ j - i ] = a [ j - i ] + a [ j ] ; else a [ j - i ] = a [ j - i ] + a [ j + 1 ] ; } last = temp - 1 ; } printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 21881}
{"input": "int main ( ) { int t , gcd , lcm , i , j , a , b , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) { for ( i = b ; i <= a * b ; i ++ ) { if ( ( i % a == 0 ) && ( i % b == 0 ) ) { lcm = i ; break ; } } for ( i = 1 ; i <= a ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { gcd = i ; } } } else { for ( i = a ; i <= a * b ; i ++ ) { if ( ( i % a == 0 ) && ( i % b == 0 ) ) { lcm = i ; break ; } } for ( i = 1 ; i <= b ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { gcd = i ; } } } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 24295}
{"input": "int hcf ( int a , int b ) { if ( b == 0 ) return a ; return hcf ( b , a % b ) ; } int main ( ) { int t , a , b , g , l , i , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { g = 1 ; l = 1 ; scanf ( \"%d %d\" , & a , & b ) ; g = hcf ( a , b ) ; l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 24096}
{"input": "int main ( void ) { int t ; long long int n , i , count , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ 100000 ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; count = 0 ; if ( n == 1 ) count = 1 ; else { for ( i = 0 ; i < ( n ) ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) count ++ ; } } count = count - n ; } printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 2, "id": 9154}
{"input": "int main ( ) { int t , test ; scanf ( \"%d\" , & test ) ; for ( t = 0 ; t < test ; t ++ ) { int a [ 102 ] [ 102 ] , n , i , j , t1 , t2 , max = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( i == 0 ) { continue ; } if ( j == i ) { a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] ; continue ; } if ( j == 0 ) { a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; continue ; } t1 = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; t2 = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; if ( t1 > t2 ) a [ i ] [ j ] = t1 ; else a [ i ] [ j ] = t2 ; } } for ( i = 0 ; i < n ; i ++ ) { if ( a [ n - 1 ] [ i ] > max ) max = a [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 13482}
{"input": "int main ( ) { int T , j , i , N ; scanf ( \"%d\" , & T ) ; for ( j = 0 ; j < T ; j ++ ) { int cost = 0 ; scanf ( \"%d\" , & N ) ; int arr [ N ] ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } for ( i = 0 ; i < N ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) cost += arr [ i ] ; else cost += arr [ i + 1 ] ; } printf ( \"%d\" , cost ) ; } }", "label": 1, "id": 20418}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return ( gcd ( b , a % b ) ) ; } } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , ( ( a * b ) / gcd ( a , b ) ) ) ; t -- ; } return 0 ; }", "label": 1, "id": 15057}
{"input": "int main ( ) { int n , t , i ; long long sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } sum = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i + 1 ] > a [ i ] ) { sum = sum + a [ i ] ; a [ i + 1 ] = a [ i ] ; } else sum = sum + a [ i + 1 ] ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 11164}
{"input": "int main ( ) { int n , i , j , num ; scanf ( \"%d\" , & num ) ; while ( num -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; } if ( j < i ) { if ( ( a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ) < ( a [ i + 1 ] [ j + 1 ] + a [ i ] [ j + 1 ] ) ) { a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j + 1 ] ; } else { a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } } else { a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } } int max = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) printf ( \"%d \" , a [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( max < a [ n - 1 ] [ i ] ) max = a [ n - 1 ] [ i ] ; } printf ( \"%d \n\" , max ) ; } return 0 ; }", "label": 3, "id": 26213}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 1 ; i <= t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int hcf = g ( a , b ) ; int lcm = a * b / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; } int g ( int a , int b ) { int S , B ; if ( a > b ) { S = b ; B = a ; } else { S = a ; B = b ; } while ( B % S != 0 ) { int tmp = B % S ; B = S ; S = tmp ; } return S ; }", "label": 1, "id": 5518}
{"input": "int main ( ) { int t ; long long int a , b , min , lcm , gcd ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; if ( a > b ) min = b ; else min = a ; for ( long long z = min ; z >= 1 ; z -- ) { if ( a % z == 0 && b % z == 0 ) { gcd = z ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 18247}
{"input": "int arr ( int , int , int [ ] ) ; int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int l , cost ; scanf ( \"%d\" , & l ) ; int a [ l ] , i ; for ( i = 0 ; i < l ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } cost = arr ( l , 0 , a ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; } int arr ( int l , int sum , int a1 [ l ] ) { int cost , k ; if ( a1 [ 0 ] < a1 [ 1 ] ) { cost = a1 [ 0 ] ; k = 1 ; } else { cost = a1 [ 1 ] ; k = 0 ; } int i , a2 [ l - 1 ] , g = 0 ; for ( i = 0 ; i < l ; i ++ ) { if ( i != k ) { g ++ ; a2 [ g ] = a1 [ i ] ; } else { g -- ; } } sum = sum + cost ; if ( l - 1 != 1 ) { arr ( l - 1 , sum , a2 ) ; } else { return sum ; } }", "label": 3, "id": 22674}
{"input": "int main ( ) { long int x , y , gcd , lcm , a [ 1000 ] , b [ 1000 ] , i , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( \"enter the two numbers\" ) ; scanf ( \"%d %d\" , & x , & y ) ; a [ i ] = x ; b [ i ] = y ; } for ( i = 0 ; i < n ; i ++ ) { while ( x % y != 0 ) { if ( x > y ) { gcd = x % y ; x = y ; y = gcd ; } else { gcd = y % x ; y = x ; x = gcd ; } } printf ( \"GCD is =%d\" , gcd ) ; lcm = ( a [ i ] * b [ i ] ) / gcd ; printf ( \"LCM is=%d\" , lcm ) ; } return 0 ; }", "label": 1, "id": 14922}
{"input": "int main ( ) { int t , x , y , a , b , gcd , lcm ; printf ( \"Enter the two no calculate gcd and lcm\" ) ; scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"Greastest common divisor of %d %d= %d\n\" , x , y , gcd ) ; printf ( \"leatss = %d\n,x,y,lcm\" ) ; return 0 ; }", "label": 1, "id": 7041}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] ; int t , n , i , j , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { { x = a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; } a [ i - 1 ] [ j ] += x ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5194}
{"input": "int main ( ) { int gcd , i , t , m , n , small , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & m , & n ) ; if ( m <= n ) small = m ; else small = n ; for ( i = small ; i >= 1 ; i -- ) { if ( m % i == 0 && n % i == 0 ) { gcd = i ; break ; } } printf ( \"%d %d\n\" , gcd , ( m * n ) / gcd ) ; } }", "label": 1, "id": 22094}
{"input": "int main ( ) { int a , b , c , n , i ; long int d ; scanf ( \"%d\n\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\n\" , & a , & b ) ; c = gcd ( a , b ) ; d = lcm ( a , b ) ; printf ( \"%d %ld\" , c , d ) ; } return 0 ; } int gcd ( int m , int n ) { if ( n == 0 ) return m ; else return gcd ( n , m % n ) ; } int lcm ( int m , int n ) { int p ; p = ( m * n ) / gcd ( m , n ) ; return p ; }", "label": 1, "id": 19544}
{"input": "int main ( ) { int t , a , b , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; int g = 1 ; int l = 1 ; if ( a > b ) { for ( i = 0 ; i < ( a / 2 ) ; i ++ ) if ( a % i == 0 && b % i == 0 ) g = g * i ; } else { for ( i = 0 ; i < ( b / 2 ) ; i ++ ) if ( a % i == 0 && b % i == 0 ) g = g * i ; } l = ( ( a * b ) / g ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 3, "id": 14598}
{"input": "void main ( ) { int gcd , lcm , n1 , n2 , d1 , d2 , rem , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n1 ) ; scanf ( \"%d\" , & n2 ) ; if ( n1 > n2 ) { d1 = n1 ; d2 = n2 ; } else { d1 = n2 ; d2 = n1 ; } rem = d1 % d2 ; while ( rem != 0 ) { d1 = d2 ; d2 = rem ; rem = d1 % d2 ; } gcd = d2 ; printf ( \"%d \" , d2 ) ; lcm = ( n1 * n2 ) / ( gcd ) ; printf ( \"%d\" , lcm ) ; } }", "label": 1, "id": 18799}
{"input": "int max1 ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j , max ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int ans [ t ] [ t ] ; for ( i = 0 , j = 0 ; j < t ; j ++ ) { ans [ i ] [ j ] = a [ i ] [ j ] ; } for ( i = 1 ; i < t ; i ++ ) { for ( j = 0 ; j < t ; j ++ ) { if ( j == 0 ) ans [ i ] [ j ] = a [ i ] [ j ] + ans [ i - 1 ] [ j ] ; if ( j > 0 ) ans [ i ] [ j ] = a [ i ] [ j ] + max1 ( ans [ i - 1 ] [ j ] , ans [ i - 1 ] [ j - 1 ] ) ; } } max = INT_MIN ; for ( i = t - 1 , j = 0 ; j < t ; j ++ ) { if ( max < ans [ i ] [ j ] ) max = ans [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; } getchar ( ) ; return 0 ; }", "label": 1, "id": 16386}
{"input": "int main ( void ) { int a = 3 , b = 4 , big ; int gcd , i = 1 ; if ( a > b ) big = a ; else big = b ; while ( i <= big ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { gcd = i ; } i ++ ; } printf ( \"gcd is:%d\" , gcd ) ; int j = 2 , lcm = 1 ; while ( j <= big ) { if ( ( a % j == 0 ) && ( b % j == 0 ) ) { lcm = lcm * j ; a = a / j , b = b / j ; j ++ ; } else { lcm = lcm * a * b ; break ; } } printf ( \"\nlcm is:%d\" , lcm ) ; return 0 ; }", "label": 1, "id": 16533}
{"input": "int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & n ) ; while ( n ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n \n\" , a [ 0 ] [ 0 ] ) ; n ++ ; } return 0 ; }", "label": 2, "id": 12045}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int n , t , i , p , q ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; for ( p = 0 ; p < t ; p ++ ) for ( q = 0 ; q <= q ; q ++ ) scanf ( \"%d\" , & a [ p ] [ q ] ) ; for ( q = t - 2 ; q >= 0 ; q -- ) for ( p = 0 ; p <= q ; p ++ ) a [ p ] [ q ] = MAX ( a [ p ] [ q ] + a [ p ] [ q + 1 ] , a [ p ] [ q ] + a [ p + 1 ] [ q + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 8957}
{"input": "int retmax ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; int no , temp , mx = 0 ; int a [ 102 ] [ 101 ] ; a [ 0 ] [ 0 ] = a [ 0 ] [ 1 ] = 0 ; int i ; int j ; while ( n -- ) { scanf ( \"%d\" , & no ) ; for ( i = 1 ; i <= no ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & temp ) ; a [ i ] [ j ] = retmax ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) + temp ; } a [ i ] [ i + 1 ] = 0 ; } mx = a [ no ] [ 1 ] ; for ( i = 1 ; i <= no ; i ++ ) if ( a [ no ] [ i ] > mx ) mx = a [ no ] [ i ] ; printf ( \"%d\n\" , mx ) ; } return 0 ; }", "label": 1, "id": 23058}
{"input": "int main ( ) { int t , n , i , j , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) c = a [ 0 ] [ 0 ] ; else if ( i == ( n - 1 ) ) { if ( a [ i ] [ 0 ] > a [ n - 1 ] [ 1 ] ) c += a [ n - 1 ] [ 0 ] ; else c += a [ n - 1 ] [ 1 ] ; } else c += a [ i ] [ 0 ] ; } printf ( \"%d\" , c ) ; } }", "label": 1, "id": 13163}
{"input": "int n , a [ 100 ] [ 100 ] ; int maximum ( int p , int q ) { if ( p > q ) return p ; else return q ; } int maxsum ( int b [ 100 ] [ 100 ] , int i , int j ) { int ans ; if ( i == ( n - 1 ) ) return b [ n - 1 ] [ j ] ; if ( a [ i ] [ j ] != - 1 ) return a [ i ] [ j ] ; ans = b [ i ] [ j ] + maximum ( maxsum ( b , i + 1 , j ) , maxsum ( b , i + 1 , j + 1 ) ) ; a [ i ] [ j ] = ans ; return ans ; } int main ( ) { int i , j , k , x , y , z , t , lines , b [ 100 ] [ 100 ] , w , q ; for ( w = 0 ; w < 100 ; w ++ ) for ( q = 0 ; q <= w ; q ++ ) a [ w ] [ q ] = - 1 ; scanf ( \"%d\" , & t ) ; for ( z = 0 ; z < t ; z ++ ) { for ( w = 0 ; w < 100 ; w ++ ) for ( q = 0 ; q <= w ; q ++ ) a [ w ] [ q ] = - 1 ; scanf ( \"%d\" , & lines ) ; n = lines ; for ( i = 0 ; i < lines ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & b [ i ] [ j ] ) ; x = maxsum ( b , 0 , 0 ) ; printf ( \"%d\n\" , x ) ; } return 0 ; }", "label": 0, "id": 3038}
{"input": "int main ( ) { int t , i , j , c = 0 , n , temp ; long long int a [ 10000 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { temp = i ; for ( j = i ; j < n ; j ++ ) { if ( a [ temp ] <= a [ j ] ) { c ++ ; temp = j ; } else { break ; } } } printf ( \"%d\n\" , c ) ; c = 0 ; t -- ; } }", "label": 3, "id": 24850}
{"input": "int arr [ 4950 ] ; int a2 [ 4950 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int sums ( int sum , int i , int rows ) { int k , row , ch1 , ch2 ; for ( k = 0 ; k <= rows ; k ++ ) { int temp = k * ( k + 1 ) / 2 ; if ( i == 2 ) { row = 2 ; break ; } if ( i < temp ) { row = k ; break ; } if ( i == temp ) { row = k + 1 ; break ; } } ch1 = i + row ; ch2 = i + row + 1 ; if ( arr [ ch1 ] != - 1 ) { if ( a2 [ i ] == - 1 ) { a2 [ i ] = max ( sums ( sum + arr [ ch1 ] , ch1 , rows ) , sums ( sum + arr [ ch2 ] , ch2 , rows ) ) ; } return a2 [ i ] ; } else return sum ; } int main ( ) { int num_cases , i ; scanf ( \"%d\" , & num_cases ) ; for ( i = 0 ; i < num_cases ; i ++ ) { int iter , j , elements , l ; scanf ( \"%d\" , & iter ) ; for ( j = 0 ; j < 4950 ; j ++ ) { arr [ j ] = - 1 ; a2 [ j ] = - 1 ; } elements = iter * ( iter + 1 ) / 2 ; for ( j = 0 ; j < elements ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; } j = sums ( arr [ 0 ] , 0 , iter ) ; printf ( \"%d\n\" , j ) ; } }", "label": 1, "id": 109}
{"input": "int fastread ( ) { int t = 0 ; char ch = getchar_unlocked ( ) ; while ( ch < 33 ) ch = getchar_unlocked ( ) ; while ( ch > 33 ) { t = t * 10 + ch - '0' ; ch = getchar_unlocked ( ) ; } return t ; } void sumi ( int , int , int , int ) ; int max , a [ 100 ] [ 100 ] ; int main ( ) { int i , j , k , n , t ; t = fastread ( ) ; while ( t -- ) { max = 0 ; n = fastread ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = fastread ( ) ; sumi ( 0 , 0 , n - 1 , 0 ) ; printf ( \"%d\n\" , max ) ; } return 0 ; } void sumi ( int i , int j , int n , int sum ) { int k ; sum += a [ i ] [ j ] ; if ( i == n ) { if ( sum > max ) max = sum ; return ; } sumi ( i + 1 , j , n , sum ) ; sumi ( i + 1 , j + 1 , n , sum ) ; }", "label": 2, "id": 12262}
{"input": "int gcd ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { long long int a , b , g , lcm ; scanf ( \"%lld %lld\n\" , & a , & b ) ; lcm = ( a * b / gcd ( a , b ) ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , lcm ) ; } return 0 ; } int gcd ( int a , int b ) { long long int k ; if ( b % a != 0 ) k = gcd ( b % a , a ) ; else k = a ; return k ; }", "label": 0, "id": 22531}
{"input": "long gcd ( long , long ) ; long lcm ( long , long ) ; int main ( ) { int t , i ; long a [ 1000000 ] , b [ 1000000 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) scanf ( \"%ld%ld\" , & a [ i ] , & b [ i ] ) ; for ( i = 0 ; i < t ; i ++ ) printf ( \"%ld %ld\n\" , gcd ( a [ i ] , b [ i ] ) , lcm ( a [ i ] , b [ i ] ) ) ; return 0 ; } long gcd ( long a , long b ) { long r ; if ( a > b ) { while ( b != 0 ) { r = b ; b = a % b ; a = r ; } return a ; } else { while ( a != 0 ) { r = a ; a = b % a ; b = r ; } return b ; } } long lcm ( long a , long b ) { return ( a * b / gcd ( a , b ) ) ; }", "label": 3, "id": 22753}
{"input": "int main ( void ) { int t ; long long int a , b , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , g , ( a * b ) / g ) ; } return 0 ; } int gcd ( long long int a , long long int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; }", "label": 0, "id": 9439}
{"input": "int main ( ) { int org [ 100 ] [ 100 ] ; int sum [ 100 ] [ 100 ] = { 0 } ; int t , i , j , N , max = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & org [ i ] [ j ] ) ; } sum [ 0 ] [ 0 ] = org [ 0 ] [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { sum [ i ] [ 0 ] = sum [ i - 1 ] [ 0 ] + org [ i ] [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) { if ( sum [ i - 1 ] [ j - 1 ] > sum [ i - 1 ] [ j ] ) sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + org [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + org [ i ] [ j ] ; } sum [ i ] [ i ] = org [ i ] [ i ] + org [ i - 1 ] [ j - 1 ] ; } for ( j = 0 ; j < N ; j ++ ) if ( max < sum [ N - 1 ] [ j ] ) max = sum [ N - 1 ] [ j ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 3808}
{"input": "int gcd ( int a , int b ) { int x ; if ( b == 0 ) return a ; else { x = gcd ( b , a % b ) ; } return x ; } int main ( ) { int t , i ; int a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\" , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 3504}
{"input": "int cost ; void func ( int arr [ ] , int size ) { int count = 0 ; int i ; if ( size == 1 ) { return ; } for ( i = 0 ; i < size ; ) { if ( ( size % 2 ) != 0 && ( i + 1 ) == size ) { arr [ count ] == arr [ i ] ; } else if ( arr [ i ] > arr [ i + 1 ] ) { cost = cost + arr [ i + 1 ] ; arr [ count ] = arr [ i + 1 ] ; } else { cost = cost + arr [ i ] ; arr [ count ] = arr [ i ] ; } count ++ ; i = i + 2 ; } if ( ( count + 1 ) > 1 ) { func ( arr , count ) ; } return ; } int main ( void ) { int t , size , i , ans ; int arr [ 5000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & size ) ; int arr [ size ] ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } func ( arr , size ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 8922}
{"input": "int main ( ) { long long int t , i , j , n , a [ 100000 ] , c ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; c = n ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) c ++ ; } printf ( \"%lld\n\" , c ) ; } return 0 ; }", "label": 1, "id": 17790}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i , j , n ; while ( test -- > 0 ) { scanf ( \"%d\" , & n ) ; int vec1 [ n + 1 ] [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & vec1 [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = i ; j >= 1 ; j -- ) { if ( vec1 [ i + 1 ] [ j ] > vec1 [ i + 1 ] [ j + 1 ] ) vec1 [ i ] [ j ] = vec1 [ i ] [ j ] + vec1 [ i + 1 ] [ j ] ; else vec1 [ i ] [ j ] = vec1 [ i ] [ j ] + vec1 [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , vec1 [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 1984}
{"input": "int main ( ) { int t , r , ar [ MAX ] [ MAX ] = { 0 } , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; for ( i = r - 1 ; i >= 0 ; i ++ ) for ( j = 0 ; j < i ; j ++ ) ar [ i - 1 ] [ j ] += ar [ i ] [ j ] > ar [ i ] [ j + 1 ] ? ar [ i ] [ j ] : ar [ i ] [ j + 1 ] ; printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 5515}
{"input": "int max , rows , a [ 100 ] [ 200 ] ; void sum ( int i , int j , int temp ) { if ( i == rows - 1 ) { max = a [ i ] [ j ] + temp ; return ; } temp += a [ i ] [ j ] ; sum ( i + 1 , j , temp ) ; sum ( i + 1 , j + 1 , temp ) ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"\n\" ) ; scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { printf ( \"\n\" ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum ( 0 , 0 , 0 ) ; printf ( \"\n %d\" , max ) ; } return 0 ; }", "label": 2, "id": 23744}
{"input": "main ( ) { int A , B , gcd , lcm , rem , T , nr , dr , i ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; T != 0 ; i ++ ) { scanf ( \"%ld%ld\" , & A , & B ) ; if ( A > B ) { nr = A ; dr = B ; } else { nr = B ; dr = A ; } rem = nr % dr ; while ( dr != 0 ) { nr = dr ; dr = rem ; rem = nr % dr ; } gcd = dr ; lcm = A * B / gcd ; printf ( \"%ld\\t\" , gcd ) ; printf ( \"%ld\n\" , lcm ) ; T -- ; } return 0 ; }", "label": 3, "id": 9944}
{"input": "int a [ 100 ] [ 100 ] ; int n ; int readint ( ) { int n = 0 ; char c = getchar_unlocked ( ) ; while ( c >= '0' && c <= '9' ) { n = ( n * 10 ) + ( c - '0' ) ; c = getchar_unlocked ( ) ; } return n ; } main ( ) { int T , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { n = readint ( ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = readint ( ) ; scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 20600}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17775}
{"input": "int HCF ( int a , int b ) { if ( b == 0 ) return a ; return HCF ( b , a % b ) ; } int main ( int argc , const char * argv [ ] ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { unsigned int m , n , a ; scanf ( \"%u %u\" , & m , & n ) ; a = HCF ( m , n ) ; printf ( \"%u %u\n\" , a , ( m * n ) / a ) ; } return 0 ; }", "label": 1, "id": 9503}
{"input": "void clearArray ( int * * array ) { int i , j ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { array [ i ] [ j ] = 0 ; } } return ; } void scanArray ( int * * array , int size ) { int i , j ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & array [ i ] [ j ] ) ; } } } int findPath ( int * * array , int size , int level , int position ) { int value1 = 0 ; int value2 = 0 ; if ( level + 1 < size ) { value1 = findPath ( array , size , level + 1 , position ) ; if ( position + 1 < size ) { value2 = findPath ( array , size , level + 1 , position + 1 ) ; } } return array [ level ] [ position ] + ( value1 > value2 ? value1 : value2 ) ; } int main ( int argc , const char * argv [ ] ) { int t , i , size ; int * * array = ( int * * ) malloc ( 100 * sizeof ( int * ) ) ; for ( i = 0 ; i < 100 ; i ++ ) { array [ i ] = ( int * ) malloc ( 100 * sizeof ( int ) ) ; } scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & size ) ; clearArray ( array ) ; scanArray ( array , size ) ; printf ( \"%d\n\" , findPath ( array , size , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 17286}
{"input": "int main ( ) { int n , i , j , k , t , mem = 0 ; int s [ 1001 ] ; int mat [ 101 ] ; for ( i = 0 ; i < 101 ; i ++ ) { mat [ i ] = 0 ; } for ( i = 0 ; i < 1001 ; i ++ ) s [ i ] = 0 ; mat [ i ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & mat [ k ] ) ; if ( mat [ mem + 1 ] > mat [ mem ] ) mem = mem + 1 ; s [ i ] += mat [ mem ] ; } } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , s [ i ] ) ; }", "label": 1, "id": 11838}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int p , n , i ; scanf ( \"%lld\" , & n ) ; int min = 200000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & p ) ; if ( min > p ) min = p ; } long long int q ; q = min * ( n - 1 ) ; printf ( \"%lld\n\" , q ) ; } return 0 ; }", "label": 0, "id": 23222}
{"input": "int check ( int n ) { if ( n > 0 ) return n + check ( n - 1 ) ; else return 0 ; } int main ( ) { int t , n , i , j , sum , tl , temp ; int a [ 1001 ] ; scanf ( \"%d\" , & tl ) ; while ( tl -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { temp = 0 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] > a [ i ] ) { temp ++ ; i ++ ; } else break ; } sum = sum + check ( temp ) ; } printf ( \"%d\n\" , sum + n ) ; } return 0 ; }", "label": 3, "id": 21395}
{"input": "main ( ) { int t , n , j , i , sum = 0 , p , k , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { p = 0 ; sum = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } sum = sum + a [ 0 ] [ 0 ] ; for ( m = 1 ; m < n ; m ++ ) { if ( a [ m ] [ p ] > a [ m ] [ p + 1 ] ) sum = sum + a [ m ] [ p ] ; else { sum = sum + a [ m ] [ p + 1 ] ; p ++ ; } } printf ( \"\n%d\" , sum ) ; } }", "label": 1, "id": 23163}
{"input": "int ans ( int * str , int size ) { int max = str [ 0 ] , i ; for ( i = 1 ; i < size ; i ++ ) { if ( str [ i ] > max ) max = str [ i ] ; } return max ; } int main ( ) { int tcs ; scanf ( \"%d\n\" , & tcs ) ; while ( tcs -- ) { int size , i , j , result ; scanf ( \"%d\n\" , & size ) ; int mat [ size + 1 ] [ size + 1 ] ; memset ( ( void * ) & mat , 0 , sizeof ( mat ) ) ; for ( i = 1 ; i <= size ; i ++ ) { char buf [ 2 * i ] ; gets ( buf ) ; for ( j = 0 ; j < i ; j ++ ) mat [ i ] [ j + 1 ] = buf [ 2 * j ] - '0' ; } for ( i = 1 ; i <= size ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( j < i ) mat [ i ] [ j ] += ( mat [ i - 1 ] [ j - 1 ] ) > ( mat [ i - 1 ] [ j ] ) ? ( mat [ i - 1 ] [ j - 1 ] ) : ( mat [ i - 1 ] [ j ] ) ; else mat [ i ] [ j ] += mat [ i - 1 ] [ j - 1 ] ; } } result = ans ( mat [ size ] , size + 1 ) ; printf ( \"%d\n\" , result ) ; } return 0 ; }", "label": 1, "id": 15179}
{"input": "int main ( ) { int data [ 100 ] [ 100 ] , n , i , max , last_row , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & data [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) { data [ i ] [ 0 ] += data [ i - 1 ] [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) { if ( data [ i - 1 ] [ j ] > data [ i - 1 ] [ j - 1 ] ) { data [ i ] [ j ] += data [ i - 1 ] [ j ] ; } else { data [ i ] [ j ] += data [ i - 1 ] [ j - 1 ] ; } } data [ i ] [ i ] += data [ i - 1 ] [ i - 1 ] ; } last_row = n - 1 ; max = data [ last_row ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( max < data [ last_row ] [ i ] ) { max = data [ last_row ] [ i ] ; } } printf ( \"%d \n\" , max ) ; return 0 ; }", "label": 3, "id": 18927}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 100 ] [ 100 ] , n , i , m , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i >= j ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < n ; j ++ ) { if ( i >= j ) { { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) m = a [ i ] [ j ] ; else m = a [ i ] [ j + 1 ] ; a [ i - 1 ] [ j ] += m ; } } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5022}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { n -- ; int no ; scanf ( \"%d\" , & no ) ; if ( no > 0 && no < 100 ) { int a [ no ] [ no ] ; int x , y ; for ( x = 0 ; x < no ; x ++ ) { for ( y = 0 ; y <= x ; y ++ ) { scanf ( \"%d\" , a [ x ] [ y ] ) ; } } int sum = a [ 0 ] [ 0 ] ; int i = 0 , j = 0 ; while ( no > 1 ) { no -- ; if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] && a [ i + 1 ] [ j ] > 0 && a [ i + 1 ] [ j ] < 99 ) { sum = sum + a [ i + 1 ] [ j ] ; i = i + 1 ; } if ( a [ i + 1 ] [ j ] < a [ i + 1 ] [ j + 1 ] && a [ i + 1 ] [ j + 1 ] > 0 && a [ i + 1 ] [ j + 1 ] < 99 ) { sum = sum + a [ i + 1 ] [ j + 1 ] ; i = i + 1 ; j = j + 1 ; } } printf ( \"%d\n\" , sum ) ; } } return 0 ; }", "label": 3, "id": 1360}
{"input": "int main ( ) { int arr [ 100 ] [ 100 ] , p [ 20 ] = { 0 } ; int n , i , j , k , a ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { for ( k = 0 ; k <= i ; k ++ ) scanf ( \"%d\" , & arr [ i ] [ k ] ) ; } for ( i = a - 2 ; i >= 0 ; i -- ) { for ( k = i ; k >= 0 ; k -- ) arr [ i ] [ k ] += ( ( arr [ i + 1 ] [ k + 1 ] > arr [ i + 1 ] [ k ] ) ? ( arr [ i + 1 ] [ k + 1 ] ) : ( arr [ i + 1 ] [ k ] ) ) ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 11271}
{"input": "struct array { int row ; int col ; struct array * next , * prev ; } ; int n , i ; int j , cost [ 100 ] [ 100 ] , n1 , o = 0 , f = 0 , dist [ 100 ] [ 100 ] ; struct array * head = NULL , * temp ; void main ( ) { scanf ( \"%d\" , & n ) ; while ( o < n ) { int h , n2 = 0 , t = 0 ; scanf ( \"%d\" , & n1 ) ; while ( n2 < n1 ) { for ( i = 0 ; i <= n2 ; i ++ ) { scanf ( \"%d\" , & cost [ n2 ] [ i ] ) ; dist [ n2 ] [ i ] = cost [ n2 ] [ i ] ; if ( head == NULL ) { head = ( struct array * ) malloc ( sizeof ( struct array ) ) ; head -> row = ( ( ( n2 ) * n1 ) + i ) ; head -> col = ( ( ( n2 + 1 ) * n1 ) + i ) ; head -> next = NULL ; head -> prev = NULL ; } else { temp = ( struct array * ) malloc ( sizeof ( struct array ) ) ; temp -> row = ( ( ( n2 ) * n1 ) + i ) ; temp -> col = ( ( ( n2 + 1 ) * n1 ) + i ) ; temp -> next = head ; head -> prev = temp ; head = temp ; } temp = ( struct array * ) malloc ( sizeof ( struct array ) ) ; temp -> row = ( ( ( n2 ) * n1 ) + i ) ; temp -> col = ( ( ( n2 + 1 ) * n1 ) + i + 1 ) ; temp -> next = head ; head -> prev = temp ; head = temp ; } n2 ++ ; t ++ ; } h = func ( t ) ; printf ( \"%d\n\" , h ) ; o ++ ; } } int func ( int t ) { while ( temp -> next != NULL ) { temp = temp -> next ; } while ( temp -> row != ( ( n1 * n1 ) - n1 ) ) { if ( ( ( temp -> row ) ) % n1 == 0 && f % 2 == 0 ) { for ( j = 0 ; j < n1 ; j ++ ) { cost [ ( ( temp -> row ) / n1 ) ] [ j ] = dist [ ( ( temp -> row ) / n1 ) ] [ j ] ; } } if ( ( ( temp -> row ) ) % n1 == 0 ) f ++ ; if ( dist [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] < cost [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] + cost [ ( temp -> row ) / n1 ] [ ( temp -> row ) % n1 ] ) dist [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] = cost [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] + cost [ ( temp -> row ) / n1 ] [ ( temp -> row ) % n1 ] ; temp = temp -> prev ; } int max1 = - 9999 ; for ( i = ( ( n1 * n1 ) - n1 ) ; i < ( n1 * n1 ) ; i ++ ) { if ( dist [ i / n1 ] [ i % n1 ] > max1 ) max1 = dist [ i / n1 ] [ i % n1 ] ; } return max1 ; }", "label": 2, "id": 4348}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , n , j = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { j = j + a [ i ] ; } else { j = j + a [ i + 1 ] ; } } printf ( \"%d\n\" , j ) ; } }", "label": 1, "id": 18788}
{"input": "int main ( ) { int n , t , i , j , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; int tri [ 101 ] [ 101 ] = { 0 } ; for ( j = 0 ; j < n ; j ++ ) { int z = 0 ; while ( z <= j ) { scanf ( \"%d\" , & tri [ j ] [ z ] ) ; z ++ ; } } int dpmat [ 101 ] [ 101 ] = { 0 } ; dpmat [ 0 ] [ 0 ] = tri [ 0 ] [ 0 ] ; dpmat [ 1 ] [ 0 ] = tri [ 1 ] [ 0 ] + tri [ 0 ] [ 0 ] ; dpmat [ 1 ] [ 1 ] = tri [ 1 ] [ 1 ] + tri [ 0 ] [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) dpmat [ i ] [ j ] = tri [ i ] [ j ] + dpmat [ i - 1 ] [ j ] ; else { if ( ( tri [ i ] [ j ] + dpmat [ i - 1 ] [ j ] ) >= ( tri [ i ] [ j ] + dpmat [ i - 1 ] [ j - 1 ] ) ) { dpmat [ i ] [ j ] = ( tri [ i ] [ j ] + dpmat [ i - 1 ] [ j ] ) ; } else { dpmat [ i ] [ j ] = ( tri [ i ] [ j ] + dpmat [ i - 1 ] [ j - 1 ] ) ; } } } } int max = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( dpmat [ n - 1 ] [ j ] > max ) max = dpmat [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 9196}
{"input": "int main ( void ) { int T , N , i , j ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & N ) ; int A [ N ] , s = 1000000 , min ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%d\" , & A [ j ] ) ; if ( A [ j ] < s ) { s = A [ j ] ; } } min = s * ( N - 1 ) ; printf ( \"%d\n\" , min ) ; } return 0 ; }", "label": 0, "id": 25027}
{"input": "long int hcf ( long int x , long int y ) { long int t ; while ( y % x ) { t = y % x ; y = x ; x = t ; } return x ; } long int lcm ( long int x , long int y , long int h ) { long int l = 1 ; if ( h == 1 ) return x * y ; else { while ( h != 1 ) { x = x / h ; y = y / h ; l = l * h ; h = hcf ( x , y ) ; } l = l * x * y ; return l ; } } int main ( void ) { long int t , i , a , b , x , y , h_c_f , l_c_m ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a == b ) { printf ( \"%ld %ld\n\" , a , a ) ; continue ; } else if ( a < b ) { x = a ; y = b ; } else if ( a > b ) { x = b ; y = a ; } h_c_f = hcf ( x , y ) ; l_c_m = lcm ( x , y , h_c_f ) ; printf ( \"%ld %ld\n\" , h_c_f , l_c_m ) ; } return 0 ; }", "label": 0, "id": 2756}
{"input": "void main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n1 , n2 , minmultiple ; scanf ( \"%d %d\" , & n1 , & n2 ) ; minmultiple = ( n1 > n2 ) ? n1 : n2 ; while ( 1 ) { if ( minmultiple % n1 == 0 && minmultiple % n2 == 0 ) { printf ( \"%d %d\" , ( n1 * n2 ) / minmultiple , minmultiple ) ; break ; } ++ minmultiple ; } } }", "label": 2, "id": 24043}
{"input": "int main ( ) { int t , i , j , n , temp , a [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } printf ( \"%d\n\" , a [ 0 ] ) ; } }", "label": 3, "id": 19271}
{"input": "int main ( ) { int n , t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d \n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 18932}
{"input": "typedef struct { int no1 , no2 , gcd , lcm ; } GCDLCM ; int main ( ) { int n , n1 , n2 , i , j ; GCDLCM GL [ 1000 ] ; printf ( \"\n\" ) ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & GL [ i ] . no1 , & GL [ i ] . no2 ) ; } for ( i = 1 ; i <= n ; i ++ ) { n1 = GL [ i ] . no1 ; n2 = GL [ i ] . no2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } GL [ i ] . gcd = n1 ; GL [ i ] . lcm = ( GL [ i ] . no1 * GL [ i ] . no2 ) / n1 ; printf ( \"\n%d %d\" , GL [ i ] . gcd , GL [ i ] . lcm ) ; } return 0 ; }", "label": 3, "id": 19116}
{"input": "int main ( ) { int t , a [ 100 ] [ 100 ] , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 24501}
{"input": "int pop1 ( ) ; int pop2 ( ) ; int pop3 ( ) ; void push ( int , int , int ) ; int stack1 [ MAX ] ; int stack2 [ MAX ] , stack3 [ MAX ] ; int top1 = - 1 , top2 = - 1 , top3 = - 1 ; int main ( ) { int t , r , i , j , m , n , s , a [ 100 ] [ 100 ] , x = 0 , sum [ 6000 ] , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { top1 = - 1 ; top2 = - 1 ; top3 = - 1 ; x = 0 ; scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } push ( 0 , 0 , 0 ) ; while ( top1 != - 1 && top2 != - 1 && top3 != - 1 ) { m = pop2 ( ) ; n = pop3 ( ) ; s = pop1 ( ) ; s = s + a [ m ] [ n ] ; for ( i = m ; i < r - 1 ; i ++ ) { push ( s , m + 1 , n + 1 ) ; s = s + a [ m + 1 ] [ n ] ; m = m + 1 ; } sum [ x ++ ] = s ; } max = sum [ 0 ] ; for ( i = 0 ; i < x ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; } void push ( int sum , int k , int l ) { top1 ++ ; stack1 [ top1 ] = sum ; top2 ++ ; stack2 [ top2 ] = k ; top3 ++ ; stack3 [ top3 ] = l ; } int pop1 ( ) { return ( stack1 [ top1 -- ] ) ; } int pop2 ( ) { return ( stack2 [ top2 -- ] ) ; } int pop3 ( ) { return ( stack3 [ top3 -- ] ) ; }", "label": 3, "id": 16430}
{"input": "typedef unsigned int input_number_t ; typedef unsigned int output_number_t ; static char s_aInputBuffer [ MAXIMUM_BUFFER_SIZE ] ; static char s_aOutputBuffer [ MAXIMUM_BUFFER_SIZE ] ; static char * s_pInputBufferLimit = s_aInputBuffer + sizeof ( s_aInputBuffer ) ; static const char * s_pOutputBufferLimit = s_aOutputBuffer + sizeof ( s_aOutputBuffer ) ; static char * s_pInputBufferIterator = s_aInputBuffer + sizeof ( s_aInputBuffer ) ; static char * s_pOutputBufferIterator = s_aOutputBuffer ; static inline input_number_t _readNumber ( void ) { input_number_t _result = 0 ; int _continue = 0 ; for ( ; ; ) { if ( s_pInputBufferIterator == s_pInputBufferLimit ) s_pInputBufferLimit = ( s_pInputBufferIterator = s_aInputBuffer ) + read ( 0 , s_aInputBuffer , sizeof ( s_aInputBuffer ) ) ; while ( s_pInputBufferIterator < s_pInputBufferLimit ) { if ( ( * s_pInputBufferIterator >= '0' ) && ( * s_pInputBufferIterator <= '9' ) ) { _result = ( 10 * _result ) + * s_pInputBufferIterator ++ - '0' ; ++ _continue ; } else if ( _continue ) return _result ; else * s_pInputBufferIterator ++ ; } } return _result ; } static inline void _flushOutput ( void ) { static const char _szEnd [ ] = \"\n\" ; write ( 1 , s_aOutputBuffer , ( int ) ( s_pOutputBufferIterator - s_aOutputBuffer ) ) ; write ( 1 , _szEnd , sizeof ( _szEnd ) ) ; } static inline void _writeNumber ( output_number_t _n , char _d ) { static char _aNumber [ 20 ] ; int _i ; for ( _i = 0 ; _n ; ++ _i ) { _aNumber [ _i ] = _n % 10 ; _n /= 10 ; } if ( ( s_pOutputBufferIterator + ( _i + 1 ) ) >= s_pOutputBufferLimit ) { write ( 1 , s_aOutputBuffer , ( int ) ( s_pOutputBufferIterator - s_aOutputBuffer ) ) ; s_pOutputBufferIterator = s_aOutputBuffer ; } for ( -- _i ; _i >= 0 ; -- _i ) * s_pOutputBufferIterator ++ = _aNumber [ _i ] + '0' ; * s_pOutputBufferIterator ++ = _d ; } static unsigned int s_aArray [ 5050 ] ; static unsigned int * s_aRows [ ] = { s_aArray + 0 , s_aArray + 1 , s_aArray + 3 , s_aArray + 6 , s_aArray + 10 , s_aArray + 15 , s_aArray + 21 , s_aArray + 28 , s_aArray + 36 , s_aArray + 45 , s_aArray + 55 , s_aArray + 66 , s_aArray + 78 , s_aArray + 91 , s_aArray + 105 , s_aArray + 120 , s_aArray + 136 , s_aArray + 153 , s_aArray + 171 , s_aArray + 190 , s_aArray + 210 , s_aArray + 231 , s_aArray + 253 , s_aArray + 276 , s_aArray + 300 , s_aArray + 325 , s_aArray + 351 , s_aArray + 378 , s_aArray + 406 , s_aArray + 435 , s_aArray + 465 , s_aArray + 496 , s_aArray + 528 , s_aArray + 561 , s_aArray + 595 , s_aArray + 630 , s_aArray + 666 , s_aArray + 703 , s_aArray + 741 , s_aArray + 780 , s_aArray + 820 , s_aArray + 861 , s_aArray + 903 , s_aArray + 946 , s_aArray + 990 , s_aArray + 1035 , s_aArray + 1081 , s_aArray + 1128 , s_aArray + 1176 , s_aArray + 1225 , s_aArray + 1275 , s_aArray + 1326 , s_aArray + 1378 , s_aArray + 1431 , s_aArray + 1485 , s_aArray + 1540 , s_aArray + 1596 , s_aArray + 1653 , s_aArray + 1711 , s_aArray + 1770 , s_aArray + 1830 , s_aArray + 1891 , s_aArray + 1953 , s_aArray + 2016 , s_aArray + 2080 , s_aArray + 2145 , s_aArray + 2211 , s_aArray + 2278 , s_aArray + 2346 , s_aArray + 2415 , s_aArray + 2485 , s_aArray + 2556 , s_aArray + 2628 , s_aArray + 2701 , s_aArray + 2775 , s_aArray + 2850 , s_aArray + 2926 , s_aArray + 3003 , s_aArray + 3081 , s_aArray + 3160 , s_aArray + 3240 , s_aArray + 3321 , s_aArray + 3403 , s_aArray + 3486 , s_aArray + 3570 , s_aArray + 3655 , s_aArray + 3741 , s_aArray + 3828 , s_aArray + 3916 , s_aArray + 4005 , s_aArray + 4095 , s_aArray + 4186 , s_aArray + 4278 , s_aArray + 4371 , s_aArray + 4465 , s_aArray + 4560 , s_aArray + 4656 , s_aArray + 4753 , s_aArray + 4851 , s_aArray + 4950 } ; int main ( void ) { int _t = _readNumber ( ) ; int _n ; int _i1 ; int _i2 ; int _i3 ; int _i4 ; for ( _i1 = 0 ; _i1 < _t ; ++ _i1 ) { _n = _readNumber ( ) ; _i4 = 0 ; for ( _i2 = 0 ; _i2 < _n ; ++ _i2 ) { for ( _i3 = 0 ; _i3 <= _i2 ; ++ _i3 ) s_aArray [ _i4 ++ ] = _readNumber ( ) ; } if ( _i2 > 1 ) { for ( _i2 -= 2 ; _i2 >= 0 ; -- _i2 ) { for ( _i3 = 0 ; _i3 <= _i2 ; ++ _i3 ) s_aRows [ _i2 ] [ _i3 ] += ( ( s_aRows [ _i2 + 1 ] [ _i3 ] > s_aRows [ _i2 + 1 ] [ _i3 + 1 ] ) ? s_aRows [ _i2 + 1 ] [ _i3 ] : s_aRows [ _i2 + 1 ] [ _i3 + 1 ] ) ; } } _writeNumber ( * s_aArray , '\n' ) ; } _flushOutput ( ) ; return 0 ; }", "label": 0, "id": 89}
{"input": "int main ( void ) { int T , i , n1 , n2 , rem = 1 ; long long int num1 ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { rem = 1 ; scanf ( \"%d %d\" , & n1 , & n2 ) ; num1 = n1 * n2 ; while ( rem ) { rem = n1 % n2 ; n1 = n2 ; n2 = rem ; } num1 = num1 / n1 ; printf ( \"%d %lld\n\" , n1 , num1 ) ; } return 0 ; }", "label": 1, "id": 4843}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] , min = 100001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 6498}
{"input": "long gcd ( long , long ) ; long lcm ( long , long ) ; int main ( ) { int t , i ; long a [ 1000000 ] , b [ 1000000 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) scanf ( \"%ld%ld\" , & a [ i ] , & b [ i ] ) ; for ( i = 0 ; i < t ; i ++ ) printf ( \"%ld %ld\n\" , gcd ( a [ i ] , b [ i ] ) , lcm ( a [ i ] , b [ i ] ) ) ; return 0 ; } long gcd ( long a , long b ) { long r ; if ( a > b ) while ( b != 0 ) { r = b ; b = a % b ; a = r ; return a ; } else while ( a != 0 ) { r = a ; a = b % a ; b = r ; return b ; } } long lcm ( long a , long b ) { return ( a * b / gcd ( a , b ) ) ; }", "label": 3, "id": 5653}
{"input": "int main ( ) { int m , n , gcd , a , b , lcm , i ; printf ( \"enter the number of test cases \n\" ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( \"Enter the 2 numbers:\n\" ) ; scanf ( \"%d\n%d\" , & m , & n ) ; } for ( i = 0 ; i < n ; i ++ ) { a = m ; b = n ; if ( m == 0 ) gcd = n ; else if ( n == 0 ) gcd = m ; else { while ( n != 0 ) { if ( m > n ) m = m - n ; else n = n - m ; gcd = m ; } } lcm = ( a * b ) / gcd ; } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d  %d \n\" , gcd , lcm ) ; return 0 ; }", "label": 1, "id": 7747}
{"input": "long long int a [ 200 ] [ 200 ] , k ; long long int f ( int i , int j ) { long long int max ; if ( i >= k ) return 0 ; else { max = a [ i ] [ j ] + MAX ( f ( i + 1 , j ) , f ( i + 1 , j + 1 ) ) ; } return max ; } int main ( ) { long long int i , ii , j , l ; scanf ( \"%lld\" , & i ) ; while ( i -- ) { scanf ( \"%lld\" , & k ) ; for ( j = 0 ; j < k ; j ++ ) { for ( l = 0 ; l <= j ; l ++ ) scanf ( \"%lld\" , & a [ j ] [ l ] ) ; } printf ( \"%lld\n\" , f ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 24824}
{"input": "int MAX ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , rows , i , j ; int triangle [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; } for ( i = rows - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) triangle [ i ] [ j ] = triangle [ i ] [ j ] + MAX ( triangle [ i + 1 ] [ j ] , triangle [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\" , triangle [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 25725}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t , k ; long int a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) { g = gcd ( a , b ) ; l = ( a * b ) / g ; } else if ( b > a ) { g = gcd ( b , a ) ; l = ( a * b ) / g ; } printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; } long int gcd ( long int x , long int y ) { long int temp ; while ( x != 0 ) { temp = y % x ; y = x ; x = temp ; } return y ; }", "label": 0, "id": 1046}
{"input": "int main ( ) { unsigned long long int a , b , c , d , lcm = 0 , gcd = 0 , rem = 0 ; int t ; scanf ( \"%d\" , & t ) ; while ( t ) { rem = 0 , lcm = 0 , gcd = 0 ; scanf ( \"%llu%llu\" , & a , & b ) ; c = a ; d = b ; rem = a % b ; while ( rem != 0 ) { rem = a % b ; a = b ; b = rem ; rem = a % b ; } gcd = b ; lcm = c * ( d / gcd ) ; printf ( \"\n%llu %llu\" , b , lcm ) ; t -- ; } return 0 ; }", "label": 0, "id": 8459}
{"input": "int main ( ) { int a , b ; int i , j ; int m ; int c1 , c2 ; int divsa [ 100 ] ; int multa [ 100 ] ; int divsb [ 100 ] ; int multb [ 100 ] ; int GCD ; int LCM ; printf ( \"Enter A \n\" ) ; scanf ( \"%i\" , & a ) ; printf ( \"Enter B \n\" ) ; scanf ( \"%i\" , & b ) ; c1 = 0 ; for ( i = a ; i > 0 ; i -- ) { if ( a % i == 0 ) { m = a / i ; divsa [ c1 ] = m ; c1 ++ ; } } printf ( \"\n\" ) ; c2 = 0 ; for ( i = b ; i > 0 ; i -- ) { if ( b % i == 0 ) { m = b / i ; divsb [ c2 ] = m ; c2 ++ ; } } m = 1 ; for ( i = c1 ; i > 0 ; i -- ) { for ( j = 0 ; j < c2 ; j ++ ) { if ( ( divsa [ i ] == divsb [ j ] ) && ( m != 0 ) ) { GCD = divsa [ i ] ; m = 0 ; } } } if ( GCD == 0 ) { GCD = 1 ; } LCM = ( a * b ) / GCD ; printf ( \"%i \n\" , GCD ) ; printf ( \"%i \n\" , LCM ) ; }", "label": 1, "id": 3764}
{"input": "int main ( ) { int n , rows , max , i , j , k , tri [ 100 ] [ 100 ] , sum ; scanf ( \"%d\" , & n ) ; if ( n > 0 && n < 1000 ) { for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & rows ) ; max = 0 ; for ( i = 0 ; i < rows ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & tri [ i ] [ j ] ) ; for ( i = rows - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ? tri [ i + 1 ] [ j ] : tri [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , tri [ 0 ] [ 0 ] ) ; } } return 0 ; }", "label": 1, "id": 1777}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) { return a ; } gcd ( b , a % b ) ; } int main ( void ) { long int t ; scanf ( \"%ld\" , & t ) ; while ( t > 0 ) { long int a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( \"%ld %ld\" , g , l ) ; t -- ; puts ( \"\" ) ; } }", "label": 0, "id": 26745}
{"input": "int main ( ) { int A , B , i , T , x , GCD , LCM ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; if ( A < B ) { x = A ; } else { x = B ; } for ( ; x >= 1 ; x -- ) { if ( A % x == 0 && B % x == 0 ) { GCD = x ; break ; } } LCM = ( A * B ) / GCD ; printf ( \"%d %d\" , GCD , LCM ) ; } return 0 ; }", "label": 1, "id": 10088}
{"input": "long int gcd ( long int n , long int m ) ; long int lcm ( long int n , long int m ) ; int main ( ) { int test_case , n1 , n2 , m , n ; scanf ( \"%d\" , & test_case ) ; while ( test_case -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; m = gcd ( n1 , n2 ) ; n = lcm ( n1 , n2 ) ; printf ( \"%d %d\n\" , m , n ) ; } } long int lcm ( long int n , long int m ) { long int i ; if ( n > m ) { i = ( n * m ) / gcd ( n , m ) ; } else { i = ( n * m ) / gcd ( m , n ) ; } return i ; } long int gcd ( long int n , long int m ) { long int rem ; if ( n % m == 0 ) { return m ; } else { rem = n % m ; return gcd ( m , rem ) ; } }", "label": 1, "id": 13059}
{"input": "int cache [ 100 ] [ 100 ] ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int solve ( int ln , int i , int j , int arr [ ] [ 100 ] ) { int t , t1 , t2 ; if ( i > ln ) return 0 ; if ( cache [ i ] [ j ] >= 0 ) { return cache [ i ] [ j ] ; } t1 = solve ( ln , i + 1 , j , arr ) ; t2 = solve ( ln , i + 1 , j + 1 , arr ) ; t = max ( t1 , t2 ) + arr [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int x , y ; int n , ln ; short int i , j ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & ln ) ; for ( i = 0 ; i < ln ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( x = 0 ; x < 100 ; x ++ ) { for ( y = 0 ; y < 100 ; y ++ ) { cache [ x ] [ y ] = - 1 ; } } printf ( \"%d\n\" , solve ( ln , 0 , 0 , arr ) ) ; } return 0 ; }", "label": 0, "id": 18107}
{"input": "int main ( ) { int i , n , j , k , t , a [ 105 ] [ 105 ] ; scanf ( \"%d\n\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\n\" , & t ) ; for ( j = 1 ; j <= t ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = t - 1 ; j >= 1 ; j -- ) { for ( k = 1 ; k <= i ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] + ( a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ? a [ j + 1 ] [ k ] : a [ j + 1 ] [ k + 1 ] ) ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } }", "label": 3, "id": 25777}
{"input": "int A [ 100 ] [ 100 ] , sum [ 10000000 ] , temp [ 10000000 ] , aj [ 10000000 ] ; int main ( ) { int t , tn , i , j , n , s , k , m , largest , l , r ; scanf ( \"%d\" , & tn ) ; for ( t = 0 ; t < tn ; t ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; } sum [ 0 ] = A [ 0 ] [ 0 ] ; temp [ 0 ] = sum [ 0 ] ; m = 1 ; aj [ 0 ] = 0 ; aj [ 1 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { m = m * 2 ; l = 0 ; for ( k = 0 ; k < m / 2 ; k = k + 2 ) { sum [ k ] = temp [ l ] + A [ i ] [ aj [ k ] ] ; sum [ k + 1 ] = temp [ l ] + A [ i ] [ aj [ k + 1 ] ] ; l ++ ; } for ( k = k , s = 0 ; k < m ; k = k + 2 , s = s + 2 ) { sum [ k ] = temp [ l ] + A [ i ] [ aj [ s ] + 1 ] ; sum [ k + 1 ] = temp [ l ] + A [ i ] [ aj [ s + 1 ] + 1 ] ; l ++ ; aj [ k ] = ( aj [ s ] + 1 ) ; aj [ k + 1 ] = ( aj [ s + 1 ] + 1 ) ; } for ( r = 0 ; r < m ; r ++ ) temp [ r ] = sum [ r ] ; } largest = sum [ 0 ] ; for ( i = 0 ; i < m ; i ++ ) { if ( sum [ i ] > largest ) largest = sum [ i ] ; } printf ( \"%d\n\" , largest ) ; } return 0 ; }", "label": 3, "id": 12764}
{"input": "int main ( ) { int t , i ; long long a , b , n1 , n2 , s ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & n1 , & n2 ) ; a = n1 ; b = n2 ; if ( a < b ) { s = a ; a = b ; b = s ; } while ( b != 0 ) { s = a ; a = b ; b = s % b ; } printf ( \"%lld %lld\n\" , a , n1 * n2 / a ) ; } return 0 ; }", "label": 0, "id": 18239}
{"input": "int maxsum , n ; void sumi ( int * * a , int i , int j , int sum ) { sum += a [ i ] [ j ] ; if ( i == n - 1 && sum <= maxsum ) return ; if ( i == n - 1 ) { maxsum = sum ; return ; } sumi ( a , i + 1 , j , sum ) ; sumi ( a , i + 1 , j + 1 , sum ) ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int * a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sumi ( a , 0 , 0 , 0 ) ; printf ( \"%d\n\" , maxsum ) ; } return 0 ; }", "label": 2, "id": 318}
{"input": "int main ( ) { int i , n , a , b , lcm , gcd ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%d  %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 4201}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , n ; int j , k , l ; int s1 , s2 ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } n = n - 2 ; for ( j = n ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { s1 = ( a [ j ] [ k ] ) + ( a [ j + 1 ] [ k ] ) ; s2 = ( a [ j ] [ k ] ) + ( a [ j + 1 ] [ k + 1 ] ) ; if ( s1 > s2 ) a [ j ] [ k ] = s1 ; else a [ j ] [ k ] = s2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 10855}
{"input": "int main ( ) { int a , t , b , p , q ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; p = a ; q = b ; while ( q != p ) { if ( q > p ) q = q - p ; else p = p - q ; } printf ( \"%d\n%d\n\" , q , ( a * b ) / q ) ; } return 0 ; }", "label": 1, "id": 19310}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , c , d ; scanf ( \"%d %d\" , & a , & b ) ; c = a ; d = b ; while ( d != 0 ) { c = c % d ; c = c ^ d ; d = d ^ c ; c = c ^ d ; } printf ( \"%d %d\n\" , c , ( a * b ) / c ) ; } }", "label": 1, "id": 14599}
{"input": "int main ( ) { int t , n , i , j , k , su , s , max , max1 , a [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { max1 = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 0 ; j < n ; j ++ ) { s = 0 ; su = 0 ; max = 0 ; for ( i = n - 1 ; i >= 0 ; i -- ) { k = j ; while ( k >= j - 1 ) { if ( k >= 0 ) { if ( i == n - 1 ) { s = s + a [ i ] [ k ] ; su = su + a [ i ] [ k ] ; break ; } else { if ( k == j ) s = s + a [ i ] [ k ] ; else su = su + a [ i ] [ k ] ; } } else { break ; } if ( s >= max && s >= su ) { max = s ; } else if ( su > max && su > s ) { max = su ; } k -- ; } } if ( max >= max1 ) { max1 = max ; } } printf ( \"%d\n\" , max1 ) ; } return 0 ; }", "label": 1, "id": 8815}
{"input": "int main ( ) { int t , line , i = 0 , j = 0 , temp1 , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & line ) ; int arr [ line ] [ line ] ; int last ; temp1 = line - 2 ; for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = temp1 ; i > - 1 ; i -- ) { for ( j = 0 ; j < temp1 + 1 ; j ++ ) { if ( arr [ temp1 ] [ j ] + arr [ temp1 + 1 ] [ j ] >= arr [ temp1 ] [ j ] + arr [ temp1 + 1 ] [ j + 1 ] ) { arr [ temp1 ] [ j ] = arr [ temp1 ] [ j ] + arr [ temp1 + 1 ] [ j ] ; last = arr [ temp1 ] [ j ] ; } else { arr [ temp1 ] [ j ] = arr [ temp1 ] [ j ] + arr [ temp1 + 1 ] [ j + 1 ] ; last = arr [ temp1 ] [ j ] ; } } temp1 -- ; } if ( line == 1 ) { last = arr [ i ] [ j ] ; } printf ( \"%d\n\" , last ) ; } return 0 ; }", "label": 0, "id": 11812}
{"input": "int main ( ) { long long int n , arr [ 100000 ] ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int cost = 0 ; scanf ( \"%lld\" , & n ) ; for ( long long int i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; if ( i == 0 ) cost = arr [ 0 ] ; if ( cost > arr [ i ] ) { cost = arr [ i ] ; } } printf ( \"%lld\n\" , cost * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 8410}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 14370}
{"input": "int calcgcd ( int m , int n ) { int r ; while ( n > 0 ) { r = m % n ; m = n ; n = r ; } return m ; } int main ( void ) { int a , b , gcd , lcm , n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; gcd = calcgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; n -- ; } return 0 ; }", "label": 1, "id": 11224}
{"input": "int solve ( int array [ 150 ] [ 150 ] , int i , int j , int k ) { int sum1 , sum2 ; if ( i >= k ) return 0 ; sum1 = solve ( array , i + 1 , j , k ) ; sum2 = solve ( array , i + 1 , j + 1 , k ) ; if ( sum1 > sum2 ) return ( array [ i ] [ j ] + sum1 ) ; return ( array [ i ] [ j ] + sum2 ) ; } int main ( ) { int array [ 150 ] [ 150 ] ; int i , j , num ; int n ; char ch ; int k ; scanf ( \"%d\n\" , & n ) ; while ( n -- ) { scanf ( \"%d\n\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { num = 0 ; ch = getchar ( ) ; do { num = num * 10 + ch - '0' ; ch = getchar ( ) ; } while ( ! ( ch == '\n' || ch == ' ' ) ) ; array [ i ] [ j ] = num ; } } printf ( \"%d\n\" , solve ( array , 0 , 0 , i ) ) ; } return 0 ; }", "label": 2, "id": 23138}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long n ; scanf ( \"%ld\" , & n ) ; long input , i , smallest = 100001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & input ) ; if ( input < smallest ) smallest = input ; } printf ( \"%ld\n\" , ( n - 1 ) * smallest ) ; } return 0 ; }", "label": 0, "id": 12791}
{"input": "long long int ar [ 1000000 ] ; long long int min = 1000000 ; int main ( ) { long long int t , i , n , temp , j ; scanf ( \"%lld\" , & t ) ; while ( t ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & ar [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( ar [ i ] < min ) { min = ar [ i ] ; } } printf ( \"%d\" , ar [ 0 ] * ( n - 1 ) ) ; t -- ; } return 0 ; }", "label": 1, "id": 16462}
{"input": "int main ( ) { int n , gcd , lcm , a , b ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d%d\" , & a , & b ) ; for ( int i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; n -- ; } return 0 ; }", "label": 1, "id": 24400}
{"input": "int gcd ( int a , int b ) { while ( a * b > 0 ) { if ( b > a ) b = b % a ; else a = a % b ; } return a + b ; } int main ( ) { int i , j ; scanf ( \"%d\" , & i ) ; j = i ; int grid [ i ] [ 4 ] ; for ( ; i > 0 ; i -- ) { scanf ( \"%d %d\" , & grid [ i ] [ 0 ] , & grid [ i ] [ 1 ] ) ; grid [ i ] [ 2 ] = gcd ( grid [ i ] [ 0 ] , grid [ i ] [ 1 ] ) ; grid [ i ] [ 3 ] = ( grid [ i ] [ 0 ] * grid [ i ] [ 1 ] ) / grid [ i ] [ 2 ] ; } for ( ; j > 0 ; j -- ) { printf ( \"%d %d\n\" , grid [ j ] [ 2 ] , grid [ j ] [ 3 ] ) ; } }", "label": 1, "id": 17402}
{"input": "main ( ) { int no ; scanf ( \"%d\" , & no ) ; while ( no -- ) { int num , i , j , k ; scanf ( \"%d\" , & num ) ; int a [ 99 ] [ 99 ] = { 0 } ; for ( j = 0 ; j < num ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( i = num - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 8581}
{"input": "int main ( ) { int i , t ; long long int a , b , temp ; unsigned long long int pro = 1 ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%lld %lld\" , & a , & b ) ; pro = a * b ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } printf ( \"%lld %lld\n\" , ( pro / a ) , a ) ; t -- ; } return 0 ; }", "label": 1, "id": 12685}
{"input": "int scan ( ) { int t = 0 ; char c ; c = getchar_unlocked ( ) ; while ( c < '0' || c > '9' ) c = getchar_unlocked ( ) ; while ( c >= '0' && c <= '9' ) { t = ( t << 3 ) + ( t << 1 ) + c - '0' ; c = getchar_unlocked ( ) ; } return ( t ) ; } main ( ) { int t , n , r , c , ans , temp , ele [ 120 ] [ 120 ] , j , i ; t = scan ( ) ; while ( t -- ) { r = scan ( ) ; for ( i = 1 ; i <= r ; ++ i ) for ( j = 1 ; j <= i ; ++ j ) { ele [ i ] [ j ] = scan ( ) ; } for ( i = r - 1 ; i >= 1 ; -- i ) { for ( j = 1 ; j <= i ; ++ j ) { ele [ i ] [ j ] = ele [ i ] [ j ] + ( ( ele [ i + 1 ] [ j ] ) > ( ele [ i + 1 ] [ j + 1 ] ) ? ( ele [ i + 1 ] [ j ] ) : ( ele [ i + 1 ] [ j + 1 ] ) ) ; } } printf ( \"%d\n\" , ele [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 18060}
{"input": "int main ( ) { int m , n , hcf = 1 , min , i , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & m , & n ) ; min = min ( m , n ) ; i = 1 ; while ( i <= min ) { if ( m % i == 0 && n % i == 0 ) hcf = i ; i ++ ; } printf ( \"%d %d\n\" , hcf , m * n / hcf ) ; } }", "label": 1, "id": 26485}
{"input": "int main ( ) { int n , t ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] ; for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( int i = t - 1 ; i > 0 ; i -- ) for ( int j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15190}
{"input": "int main ( void ) { int n , ltf , i , j , arr [ 100 ] [ 100 ] ; scanf ( \"%d\n\" , & n ) ; while ( n != 0 ) { ltf = 0 ; scanf ( \"%d\n\" , & ltf ) ; for ( i = 1 ; i <= ltf ; ++ i ) { for ( j = 0 ; j < i ; ++ j ) { scanf ( \"%d\" , & arr [ i - 1 ] [ j ] ) ; } } for ( i = ltf - 2 ; i >= 0 ; -- i ) { for ( j = 0 ; j <= i ; ++ j ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; -- n ; } return 0 ; }", "label": 0, "id": 8288}
{"input": "void main ( ) { int n , T , p , a , b , x , y ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { p = y ; y = x % y ; x = p ; } printf ( \"%d %d\n\" , x , a * b / x ) ; } }", "label": 1, "id": 6278}
{"input": "int main ( ) { int t , n , a [ 100000 ] , i , j , min ; long long int ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100000 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; ans = min * ( n - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 1517}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , m , n ; scanf ( \"%d%d\" , & a , & b ) ; n = a ; m = b ; while ( a != b ) { if ( a > b ) a = a - b ; if ( b > a ) b = b - a ; } if ( a == b ) printf ( \"%d \" , a ) ; gcd = ( m * n ) / a ; printf ( \"%d\n\" , gcd ) ; } return 0 ; }", "label": 1, "id": 11098}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm , n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d%d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 9773}
{"input": "int m [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int sol ( int n ) { if ( n == 0 ) return m [ 0 ] [ 0 ] ; else { int i , j ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { m [ i ] [ j ] = max ( m [ i ] [ j ] + m [ i + 1 ] [ j ] , m [ i ] [ j ] + m [ i + 1 ] [ j + 1 ] ) ; } } } return m [ 0 ] [ 0 ] ; } int main ( ) { int t , n , i , j , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & m [ i ] [ j ] ) ; } } x = sol ( n ) ; printf ( \"%d\n\" , x ) ; } return 0 ; }", "label": 0, "id": 7547}
{"input": "typedef unsigned long long ull ; typedef long long ll ; ull CalcGCD ( ull a , ull b ) { ull temp ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( void ) { ull numtests , a , b , gcd , lcm ; scanf ( \" %Lu\" , & numtests ) ; while ( numtests -- > 0 ) { scanf ( \" %Lu\" , & a ) ; scanf ( \" %Lu\" , & b ) ; gcd = CalcGCD ( a , b ) ; lcm = ( a / gcd ) * b ; printf ( \"%Lu %Lu\n\" , gcd , lcm % ( 1ULL << 32 ) ) ; } return 0 ; }", "label": 1, "id": 2940}
{"input": "int solve ( int a [ ] [ 100 ] , int cache [ ] [ 100 ] , int n , int i , int j ) ; int max ( int x , int y ) ; int main ( void ) { int cache [ 100 ] [ 100 ] , a [ 100 ] [ 100 ] , i , j , t , n , res , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { res = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { cache [ j ] [ k ] = 0 ; scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } res = solve ( a , cache , n , 0 , 0 ) ; printf ( \"%d\n\" , res ) ; } return 0 ; } int solve ( int a [ ] [ 100 ] , int cache [ ] [ 100 ] , int n , int i , int j ) { int t1 , t2 , t ; if ( i >= n ) return 0 ; else { if ( cache [ i ] [ j ] != 0 ) return cache [ i ] [ j ] ; else { t1 = solve ( a , cache , n , i + 1 , j ) ; t2 = solve ( a , cache , n , i + 1 , j + 1 ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } } } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; }", "label": 0, "id": 2649}
{"input": "int gcd ( int a , int b ) { int t = a ; if ( a < b && b % a == 0 ) return a ; else if ( a >= b && a % b == 0 ) return b ; while ( t ) { if ( t < b ) { b = b % t ; } else { t = t % b ; } if ( t == 0 ) return b ; else if ( b == 0 ) return t ; } return 1 ; } int main ( ) { int t ; scanf ( \" %d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \" %d\" , & a ) ; scanf ( \" %d\" , & b ) ; int g = gcd ( a , b ) ; int l = a * b / g ; printf ( \"%d %d\" , g , l ) ; } return 0 ; }", "label": 1, "id": 8436}
{"input": "int main ( ) { int k , t , m , i , j , temp = 0 , temp1 = 0 , ans = 0 , a [ 100 ] [ 0 ] ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\n\" , & m ) ; for ( j = 0 ; j < m ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d \" , & a [ j ] [ k ] ) ; printf ( \"\n\" ) ; } for ( j = 0 ; j < m ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { if ( j == k ) ans += a [ j ] [ k ] ; } } for ( j = 0 ; j < m ; j ++ ) { temp = 0 ; temp1 = 0 ; for ( k = 0 ; k <= j ; k ++ ) { if ( j == k ) temp += a [ k ] [ j ] ; if ( k == ( j + 1 ) ) temp1 += a [ j ] [ k ] ; } if ( temp1 > temp ) temp = temp1 ; if ( temp > ans ) ans = temp ; } printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 3, "id": 8800}
{"input": "int main ( ) { int tst ; long int num , i , j ; scanf ( \"%d\" , & tst ) ; while ( tst -- ) { long int count = 0 , x = 0 ; scanf ( \"%ld\" , & num ) ; long int inp [ num + 1 ] ; for ( i = 0 ; i < num ; i ++ ) { scanf ( \"%ld\" , & inp [ i ] ) ; } inp [ num ] = 0 ; x = 1 ; for ( i = 1 ; i <= num ; i ++ ) { if ( inp [ i ] >= inp [ i - 1 ] ) { x ++ ; } else { count = count + ( x * ( x + 1 ) / 2 ) ; x = 1 ; } } printf ( \"%ld\n\" , count ) ; } }", "label": 0, "id": 3878}
{"input": "struct node { int wt ; int row ; } tri [ SZ ] ; int main ( void ) { int n ; int num_rows , num_elem , last_row_index ; int i , row , j ; int max_sum , sum , chosen , chosen1 , chosen2 ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & num_rows ) ; num_elem = ( num_rows * ( num_rows + 1 ) ) / 2 ; last_row_index = ( ( num_rows - 1 ) * num_rows ) / 2 ; for ( i = 0 , row = 1 , j = row ; i < num_elem ; i ++ ) { scanf ( \"%d\" , & tri [ i ] . wt ) ; tri [ i ] . row = row ; j -- ; if ( j < 1 ) { row ++ ; j = row ; } } row -= 1 ; max_sum = - 1 ; for ( i = num_elem - 1 ; i >= last_row_index ; i -- ) { sum = tri [ i ] . wt ; chosen = i ; for ( j = row ; j > 0 ; j -- ) { chosen1 = chosen - j + 1 ; chosen2 = chosen - j ; chosen = chosen1 ; if ( ( tri [ chosen1 ] . row != j - 1 ) || ( ( tri [ chosen2 ] . row == j - 1 ) && ( tri [ chosen ] . wt < tri [ chosen2 ] . wt ) ) ) { chosen = chosen2 ; } sum += tri [ chosen ] . wt ; } if ( sum > max_sum ) { max_sum = sum ; } } printf ( \"%d\n\" , max_sum ) ; n -- ; } }", "label": 1, "id": 13388}
{"input": "int main ( ) { int i , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; int t ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; printf ( \"\n\" ) ; lcm = 0 ; gcd = 0 , remainder = 0 ; } return 0 ; }", "label": 1, "id": 27047}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { unsigned int a , i , s , b , h , m , c ; scanf ( \"%u %u\" , & a , & b ) ; if ( a < b ) { s = a ; c = b ; } else s = b ; c = a ; for ( i = 1 ; i <= s ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { h = i ; } } m = c ; while ( m % s != 0 ) m = m + c ; printf ( \"%u %u/n\" , h , m ) ; } return 0 ; }", "label": 2, "id": 24473}
{"input": "int main ( ) { int t , n , a [ 50000 ] , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 13702}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; int min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 16677}
{"input": "int main ( ) { int t , a , b , num , den , r , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } r = num % den ; while ( r != 0 ) { num = den ; den = num ; r = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 3265}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , n , T , i , j , rows , col ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } if ( n == 0 ) printf ( \"0\n\" ) ; for ( rows = n - 1 ; rows >= 0 ; rows -- ) { for ( col = 1 ; col <= rows ; col ++ ) { if ( a [ rows ] [ col - 1 ] >= a [ rows ] [ col ] ) { a [ rows - 1 ] [ col - 1 ] += a [ rows ] [ col - 1 ] ; } else { a [ rows - 1 ] [ col - 1 ] += a [ rows ] [ col ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 2013}
{"input": "int main ( ) { int j , i , k , m , sum = 0 , large = 0 ; scanf ( \"%d\" , & j ) ; int arr [ j ] [ j ] ; for ( i = 0 ; i < j ; i ++ ) { for ( k = 0 ; k <= i ; k ++ ) { scanf ( \"%d\" , & m ) ; arr [ i ] [ k ] = m ; } } for ( i = 0 ; i < j - 1 ; i ++ ) { for ( k = 0 ; k <= i ; k ++ ) { sum = arr [ i ] [ k ] + arr [ i + 1 ] [ k ] + arr [ i + 1 ] [ k + 1 ] ; if ( sum > large ) large = sum ; } sum = 0 ; } printf ( \"%d\" , large ) ; return 0 ; }", "label": 1, "id": 24744}
{"input": "int main ( ) { int n , r [ 1000000 ] , i , j , k , ar [ 1000 ] [ 1000 ] , A ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & r [ i ] ) ; for ( j = 0 ; j < r [ i ] ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & ar [ j ] [ k ] ) ; } } } system ( \"clear\" ) ; for ( i = 0 ; i < n ; i ++ ) { A = 0 ; for ( j = 0 ; j < r [ i ] ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { if ( ( k + 1 ) <= ( j + 1 ) ) { if ( ar [ j ] [ k + 1 ] > ar [ j ] [ k ] ) { A = A + ar [ j ] [ k + 1 ] ; break ; } else { A = A + ar [ j ] [ k ] ; break ; } } else { A = A + ar [ j ] [ k ] ; break ; } } } printf ( \"%d\n\" , A ) ; } return 0 ; }", "label": 1, "id": 7910}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , arr [ 105 ] [ 105 ] , dp [ 105 ] [ 105 ] , i , j , n , ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= i + 1 ; j ++ ) dp [ i ] [ j ] = 0 ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { dp [ i ] [ j ] = arr [ i ] [ j ] + max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; } } ans = dp [ n ] [ 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { if ( ans < dp [ n ] [ i ] ) ans = dp [ n ] [ i ] ; } printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 12236}
{"input": "int main ( void ) { int t , m , i , p , q , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d  %d\" , & m , & n ) ; p = m ; q = n ; while ( i > 0 ) { i = p % q ; p = q ; q = i ; } printf ( \"\n%d  %d\" , p , ( m * n ) / p ) ; } return 0 ; }", "label": 1, "id": 2226}
{"input": "int main ( ) { int n , i , j , swap , a ; scanf ( \"%lld\" , & a ) ; { scanf ( \"%lld\" , & n ) ; int b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & b [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 - i ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { swap = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = swap ; } } } printf ( \"%lld\n\" , b [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 12950}
{"input": "int arr [ 100 ] [ 100 ] = { 0 , 0 } ; int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int trial ; scanf ( \"%d\" , & trial ) ; while ( trial -- ) { int sz , i , j , hi ; scanf ( \"%d\" , & sz ) ; scanf ( \"%d\" , & arr [ 0 ] [ 0 ] ) ; for ( i = 1 ; i < sz ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] = max ( arr [ i - 1 ] [ j ] , arr [ i - 1 ] [ j - 1 ] ) + arr [ i ] [ j ] ; } arr [ i ] [ j + 1 ] = 0 ; } hi = arr [ sz - 1 ] [ 0 ] ; for ( i = 1 ; i < sz ; i ++ ) { if ( arr [ sz - 1 ] [ i ] > hi ) hi = arr [ sz - 1 ] [ i ] ; } printf ( \"%d\n\" , hi ) ; } return 0 ; }", "label": 0, "id": 22122}
{"input": "int greatest_common_divisor ( int , int ) ; int lowest_common_multiple ( int , int , int ) ; int main ( ) { int t , test ; int gcd ; int lcm ; int max ; int num1 , num2 ; int temp ; scanf ( \"%d\" , & test ) ; t = 0 ; while ( t < test ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 < num2 ) { temp = num1 ; num1 = num2 ; num2 = temp ; } max = ( num1 > num2 ) ? num1 : num2 ; gcd = greatest_common_divisor ( num1 , num2 ) ; lcm = lowest_common_multiple ( num1 , num2 , max ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; t ++ ; } getchar ( ) ; return 0 ; } int greatest_common_divisor ( int a , int b ) { int temp ; if ( b == 0 ) return a ; while ( b != 0 ) { temp = a % b ; a = b ; b = temp ; } return a ; } int lowest_common_multiple ( int a , int b , int max ) { while ( 1 ) { if ( max % a == 0 && max % b == 0 ) { return max ; break ; } max ++ ; } }", "label": 2, "id": 18171}
{"input": "int main ( ) { int test_case ; unsigned long n , i , min , a ; scanf ( \"%d\" , & test_case ) ; while ( test_case -- ) { scanf ( \"%lu\" , & n ) ; scanf ( \"%lu\" , & min ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lu\" , & a ) ; if ( a < min ) { min = a ; } } printf ( \"%lu\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 21411}
{"input": "int main ( ) { int t , i , min , n ; long long int c ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { c = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } c = ( n - 1 ) * min ; printf ( \"%lld\n\" , c ) ; t -- ; } return 0 ; }", "label": 0, "id": 22659}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; long long a , b , i , g , l , min , max ; while ( t -- ) { g = 1 ; l = 1 ; scanf ( \"%lld %lld\" , & a , & b ) ; if ( a < b ) { min = a ; max = b ; } else { min = b ; max = a ; } for ( i = 1 ; i < min ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g = i ; } for ( i = max ; ; i ++ ) { if ( i % max == 0 && i % min == 0 ) { l = i ; break ; } } printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 5553}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long long int l , j , a , b , p , q , cnt = 1 ; scanf ( \"%lld %lld\" , & a , & b ) ; p = a ; q = b ; j = 2 ; while ( a != 0 && b != 0 ) { if ( j <= a && j <= b ) { while ( a % j == 0 && b % j == 0 ) { cnt = cnt * j ; a = a / j ; b = b / j ; } j ++ ; } else { break ; } } l = ( p * q ) / cnt ; printf ( \"%lld %lld\n\" , cnt , l ) ; } return 0 ; }", "label": 2, "id": 649}
{"input": "buildheap ( long int * a , long int n ) { long int c , i , p , temp ; for ( i = 1 ; i < n ; i ++ ) { c = i ; do { p = ( c - 1 ) / 2 ; if ( a [ p ] < a [ c ] ) { temp = a [ p ] ; a [ p ] = a [ c ] ; a [ c ] = temp ; } else break ; c = p ; } while ( c != 0 ) ; } } heap ( long int * a , long int n ) { long int i , temp ; for ( i = n - 1 ; i >= 0 ; i -- ) { temp = a [ i ] ; a [ i ] = a [ 0 ] ; a [ 0 ] = temp ; buildheap ( a , i ) ; } } int main ( void ) { int t , i ; long int n , cost ; long int * a ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%ld\" , & n ) ; a = malloc ( sizeof ( long int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; buildheap ( a , n ) ; heap ( a , n ) ; for ( i = 0 ; i < ( n - 1 ) ; i ++ ) cost += a [ 0 ] ; printf ( \"%ld\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 21384}
{"input": "void add ( ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; printf ( \"sum is %d\" , a + b ) ; } int main ( ) { int a [ 20 ] [ 20 ] ; scanf ( \"%d\" , & a [ 20 ] [ 20 ] ) ; if ( a [ 20 ] [ 20 ] < 0 ) printf ( \"%d\" , a [ 20 ] [ 20 ] - a [ 20 ] [ 20 ] + 1 ) ; else printf ( \"%d\" , a [ 20 ] [ 20 ] - 2 ) ; add ( ) ; return 0 ; }", "label": 1, "id": 15756}
{"input": "int main ( ) { int i , j , t , n , c = 0 , e = 0 ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; int d , a [ n ] ; d = n ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j + 1 ] >= a [ j ] ) { c ++ ; d = d + c ; } else { c = 0 ; } } printf ( \"%d\n\" , d ) ; t -- ; } return 0 ; }", "label": 0, "id": 2329}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { unsigned int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%u %u\n\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%u %u\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 5496}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int min = 100000 ; long int a , n ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( min >= a ) { min = a ; } } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 18210}
{"input": "typedef struct triangle { int n_rows ; int * * content ; } Triangle ; int max ( int , int ) ; void inicializar ( Triangle * ) ; int max_path ( Triangle * ) ; int max ( int a , int b ) { if ( b > a ) return b ; else return a ; } void inicializar ( Triangle * T ) { int i ; int j ; scanf ( \"%d\" , & ( T -> n_rows ) ) ; T -> content = ( int * * ) malloc ( T -> n_rows * sizeof ( int * ) ) ; for ( i = 0 ; i < T -> n_rows ; i ++ ) { T -> content [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ( T -> content [ i ] [ j ] ) ) ; } } } int max_path ( Triangle * T ) { int n = T -> n_rows ; int i ; int j ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { T -> content [ i ] [ j ] += max ( T -> content [ i + 1 ] [ j ] , T -> content [ i + 1 ] [ j + 1 ] ) ; } free ( T -> content [ i + 1 ] ) ; } int result = T -> content [ 0 ] [ 0 ] ; free ( T -> content [ 0 ] ) ; free ( T -> content ) ; return result ; } int main ( ) { int n ; int i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { Triangle T ; inicializar ( & T ) ; printf ( \"%d\n\" , max_path ( & T ) ) ; } return 0 ; }", "label": 0, "id": 15924}
{"input": "int sums [ 4 ] [ 4 ] = { { 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 } } ; int findsum ( int * * a , int i , int j , int n ) { if ( sums [ i ] [ j ] > 0 ) return sums [ i ] [ j ] ; int sum1 = 0 , sum2 = 0 ; if ( i >= n - 2 || j > n - 2 ) { fflush ( stdin ) ; sum1 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; sum2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( sum1 >= sum2 ) { sums [ i ] [ j ] = sum1 ; return sum1 ; } sums [ i ] [ j ] = sum2 ; return sum2 ; } else { sum1 = a [ i ] [ j ] + findsum ( a , i + 1 , j , n ) ; sum2 = a [ i ] [ j ] + findsum ( a , i + 1 , j + 1 , n ) ; if ( sum1 >= sum2 ) { sums [ i ] [ j ] = sum1 ; return sum1 ; } sums [ i ] [ j ] = sum2 ; return sum2 ; } } int main ( ) { int t , n ; scanf ( \"%d\" , & t ) ; scanf ( \"%d\" , & n ) ; int * * a = malloc ( n * sizeof ( int * ) ) ; int i , j , k ; for ( k = 0 ; k < t ; k ++ ) { for ( i = 0 ; i < n ; i ++ ) { a [ i ] = malloc ( n * sizeof ( int ) ) ; for ( j = 0 ; j < 4 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( \"%d\\t\" , a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } printf ( \"%d\n\" , findsum ( a , 0 , 0 , n ) ) ; } return 0 ; }", "label": 1, "id": 7984}
{"input": "void main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i - 1 ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 13633}
{"input": "int main ( ) { long int a , b , c , i , j , n = 1 , d , e , m ; scanf ( \"%ld\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { scanf ( \"%ld\" , & c ) ; scanf ( \"%ld\" , & b ) ; e = 0 ; n = 1 ; if ( c == 1 ) { printf ( \"%ld\n\" , c ) ; } else { for ( j = 1 ; j <= ( c - 1 ) ; j ++ ) { scanf ( \"%ld\" , & d ) ; if ( b < d ) { n ++ ; b = d ; } if ( b >= d || j == c - 1 ) { e = e + ( n * ( n + 1 ) ) / 2 ; n = 1 ; b = d ; } } printf ( \"%ld\n\" , e ) ; } } return 0 ; }", "label": 1, "id": 12059}
{"input": "int main ( ) { int n , t ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] ; for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( int i = t - 1 ; i > 0 ; i -- ) for ( int j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8172}
{"input": "void main ( ) { int t , norow , i , j , temp = 0 , col = 0 ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & norow ) ; for ( i = 0 ; i < norow ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < norow ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i + 1 ] [ j ] += a [ i ] [ j ] > a [ i ] [ j - 1 ] ? a [ i ] [ j ] : a [ i ] [ j - 1 ] ; i = norow - 1 ; col = a [ i ] [ 0 ] ; for ( j = 0 ; j < norow - 1 ; j ++ ) col = col > a [ i ] [ j + 1 ] ? col : a [ i ] [ j + 1 ] ; printf ( \"%d\n\" , col ) ; } }", "label": 3, "id": 10512}
{"input": "int main ( ) { unsigned short i , j , tc , NL [ MS ] [ MS ] , lc ; scanf ( \"%hu\" , & tc ) ; while ( tc -- ) { unsigned short TL [ MS ] [ MS ] = { 0 } ; unsigned short maxsum ; scanf ( \"%hu\" , & lc ) ; maxsum = 0 ; i = 0 ; while ( i < lc ) { j = 0 ; while ( j <= i ) { scanf ( \"%hu\" , & NL [ i ] [ j ++ ] ) ; } i ++ ; } TL [ 0 ] [ 0 ] = NL [ 0 ] [ 0 ] ; for ( i = 0 ; i < lc - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { unsigned short n = TL [ i ] [ j ] ; unsigned short n1 = TL [ i + 1 ] [ j ] ; if ( TL [ i + 1 ] [ j ] < ( TL [ i ] [ j ] + NL [ i + 1 ] [ j ] ) ) { TL [ i + 1 ] [ j ] = TL [ i ] [ j ] + NL [ i + 1 ] [ j ] ; } TL [ i + 1 ] [ j + 1 ] = TL [ i ] [ j ] + NL [ i + 1 ] [ j + 1 ] ; } } maxsum = 0 ; for ( i = 0 ; i < lc ; i ++ ) { if ( maxsum < TL [ lc - 1 ] [ i ] ) maxsum = TL [ lc - 1 ] [ i ] ; } printf ( \"%hu\n\" , maxsum ) ; } return 0 ; }", "label": 0, "id": 8235}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { unsigned long int a , b , lcm , d , hcf ; int i ; scanf ( \"%ld\" , & a ) ; scanf ( \"%ld\" , & b ) ; d = ( a > b ) ? b : a ; for ( i = 1 ; i <= d ; i ++ ) { if ( a % i == 0 && b % i == 0 ) hcf = i ; } lcm = ( a * b ) / hcf ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 14244}
{"input": "void quicksort ( int * , int , int ) ; int partition ( int * , int , int ) ; int main ( ) { int T , i , n , m ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; quicksort ( a , 0 , n - 1 ) ; printf ( \"%lld\n\" , ( long long ) a [ 0 ] * ( n - 1 ) ) ; } return 0 ; } int partition ( int * A , int start , int end ) { int i , t = 0 , pivot , pindex ; pivot = A [ end ] ; pindex = start ; for ( i = start ; i < end ; i ++ ) { if ( A [ i ] <= pivot ) { t = A [ i ] ; A [ i ] = A [ pindex ] ; A [ pindex ] = t ; pindex ++ ; } } t = A [ pindex ] ; A [ pindex ] = A [ end ] ; A [ end ] = t ; return pindex ; } void quicksort ( int * A , int start , int end ) { if ( start < end ) { int pindex ; pindex = partition ( A , start , end ) ; quicksort ( A , start , pindex - 1 ) ; quicksort ( A , pindex + 1 , end ) ; } }", "label": 0, "id": 21919}
{"input": "int main ( ) { int t ; int a , b , min , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; min = ( a > b ) ? a : b ; for ( i = min ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) break ; } printf ( \"%d \" , i ) ; j = ( a * b ) / i ; printf ( \"%d\n\" , j ) ; } return 0 ; }", "label": 2, "id": 8206}
{"input": "int main ( ) { int t , i , j , * a , n , min , sum ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; min = a [ 0 ] ; for ( j = 1 ; j < t ; j ++ ) { if ( a [ j ] <= min ) min = a [ j ] ; } sum = min * ( n - 1 ) ; printf ( \"%d\n\" , sum ) ; free ( a ) ; } return 0 ; }", "label": 1, "id": 25224}
{"input": "int main ( ) { int T , i = 0 ; long A , B , g [ 1000 ] , l [ 1000 ] , small , j ; scanf ( \"%d\" , & T ) ; if ( T <= 1000 ) { while ( 1 ) { scanf ( \"%ld %ld\" , & A , & B ) ; if ( A <= 1000000 && B <= 1000000 ) { small = A < B ? A : B ; for ( j = small ; j >= 1 ; j -- ) { if ( A % j == 0 && B % j == 0 ) { g [ i ] = j ; break ; } else continue ; } l [ i ] = ( A * B ) / g [ i ] ; } i ++ ; if ( i == T ) break ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%ld %ld\n\" , g [ i ] , l [ i ] ) ; } return 0 ; }", "label": 2, "id": 22604}
{"input": "int main ( ) { int a , b , c , d ; printf ( \"\n enter a,b,c,values\" ) ; scanf ( \"%d%d%d\" , & a , & b , & c ) ; if ( a < b ) { if ( a < c ) printf ( \"\n a is minimum\" ) ; else printf ( \"\n c is minimum\" ) ; } else { if ( b < c ) printf ( \"\n b is minimum\" ) ; else printf ( \"\n c is minimum\" ) ; } }", "label": 1, "id": 16119}
{"input": "char _str [ 10 ] ; int main ( void ) { long long count , sum ; int a , b , n , t ; READ_INT ( t ) ; while ( t -- ) { READ_INT ( n ) ; READ_INT ( a ) ; for ( count = 1 , sum = 0 , n -- ; n > 0 ; n -- ) { READ_INT ( b ) ; if ( b >= a ) count ++ ; else { sum += ( count * ( count + 1 ) >> 1 ) ; count = 1 ; } a = b ; } sum += ( count * ( count + 1 ) >> 1 ) ; WRITE_INT ( sum ) ; putchar_unlocked ( '\n' ) ; } return 0 ; }", "label": 0, "id": 11431}
{"input": "int main ( void ) { int t , a , b , gcd , i ; long long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { if ( a % b == 0 ) { gcd = b ; } else { for ( i = 1 ; i < b ; i ++ ) { if ( ( a % ( b - i ) == 0 ) && ( b % ( b - i ) == 0 ) ) { gcd = ( b - i ) ; break ; } } } } else if ( a < b ) { if ( b % a == 0 ) { gcd = a ; } else { for ( i = 1 ; i < a ; i ++ ) { if ( ( b % ( a - i ) == 0 ) && ( a % ( a - i ) == 0 ) ) { gcd = ( a - i ) ; break ; } } } } else if ( a == b ) { gcd = a ; } lcm = ( a / gcd ) * b ; printf ( \"%d %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 861}
{"input": "int max1 ( int a , int b ) { return ( a > b ? a : b ) ; } int scan ( ) { int t = 0 ; char c ; c = getchar_unlocked ( ) ; while ( c >= '0' && c <= '9' ) { t = ( t << 3 ) + ( t << 1 ) + c - '0' ; c = getchar_unlocked ( ) ; } return ( t ) ; } int main ( ) { int j , n , t , i , k ; int s [ 100 ] [ 100 ] = { 0 } , max , a [ 100 ] [ 100 ] = { 0 } ; t = scan ( ) ; while ( t -- ) { max = 0 ; i = 0 ; n = scan ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = scan ( ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; else if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else { s [ i ] [ j ] = a [ i ] [ j ] + max1 ( s [ i - 1 ] [ j - 1 ] , s [ i - 1 ] [ j ] ) ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s [ n - 1 ] [ i ] > max ) max = s [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 10633}
{"input": "void main ( ) { int t , a , b , gcd = 0 , lcm ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = 1 ; lcm = a * b ; printf ( \"\n%d %d\" , gcd , lcm ) ; } }", "label": 1, "id": 14994}
{"input": "int main ( ) { int t , i , j , num_of_ele , n , ans ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & num_of_ele ) ; int arr [ num_of_ele ] ; for ( j = 0 ; j < num_of_ele ; j ++ ) { scanf ( \"%d\" , & n ) ; arr [ j ] = n ; } int min_element = 0 ; for ( j = 0 ; j < num_of_ele ; j ++ ) { if ( arr [ j ] <= arr [ min_element ] ) min_element = j ; } ans = arr [ min_element ] * ( num_of_ele - 1 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 11255}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] = arr [ i ] [ j ] + arr [ i - 1 ] [ j ] ; else arr [ i - 1 ] [ j ] = arr [ i ] [ j + 1 ] + arr [ i - 1 ] [ j ] ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 10145}
{"input": "int main ( ) { int i , j , t , a [ 101 ] [ 101 ] , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j <= i - 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2366}
{"input": "int main ( ) { long int t , n , i , sum ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { sum = sum + a [ i + 1 ] ; } else if ( a [ i + 1 ] > a [ i ] ) { sum = sum + a [ i ] ; a [ i + 1 ] = a [ i ] ; } } printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 14636}
{"input": "int input [ 100 ] ; int max_sum ; int sum [ 100 ] [ 100 ] ; void sumtrian ( ) { int problem_size ; int input_lines_size ; int i , j , k , l , m ; scanf ( \"%d\" , & problem_size ) ; for ( i = 0 ; i < problem_size ; i ++ ) { max_sum = 0 ; for ( l = 0 ; l < 100 ; l ++ ) { for ( m = 0 ; m < 100 ; m ++ ) { sum [ l ] [ m ] = 0 ; } } scanf ( \"%d\" , & input_lines_size ) ; for ( j = 0 ; j < input_lines_size ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & input [ k ] ) ; if ( j > 0 ) { if ( k == 0 ) { sum [ j ] [ k ] = sum [ j - 1 ] [ k ] + input [ k ] ; } else { sum [ j ] [ k ] = input [ k ] + ( ( sum [ j - 1 ] [ k - 1 ] > sum [ j - 1 ] [ k ] ) ? ( sum [ j - 1 ] [ k - 1 ] ) : sum [ j - 1 ] [ k ] ) ; } } else sum [ j ] [ k ] = input [ k ] ; if ( sum [ j ] [ k ] > max_sum ) max_sum = sum [ j ] [ k ] ; } } printf ( \"%d\n\" , max_sum ) ; } } int main ( ) { sumtrian ( ) ; return 0 ; }", "label": 0, "id": 10368}
{"input": "int gcd ( int x , int y ) { int temp ; while ( y != 0 ) { temp = y ; y = x % y ; x = temp ; } return x ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int res = gcd ( a , b ) ; printf ( \"%d %d\n\" , res , ( a * b ) / res ) ; } return 0 ; }", "label": 1, "id": 5111}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n , a , i , min = INT_MIN ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( min > a ) { min = a ; } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 4557}
{"input": "int GCD ( int q , int w ) { int i , c = 1 , s ; if ( q > w ) s = w ; else s = q ; for ( i = 1 ; i <= s ; i ++ ) { if ( ( q % i == 0 ) && ( w % i == 0 ) ) { if ( i == s ) { c = s ; break ; } else { c = i ; continue ; } } } return c ; } int main ( ) { int i , j , g , gcd , lcm , x , y , n ; scanf ( \"d\" , & n ) ; int a [ n ] [ 2 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < 2 ; j ++ ) scanf ( \"d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { lcm = 1 ; x = a [ i ] [ 0 ] ; y = a [ i ] [ 1 ] ; g = GCD ( x , y ) ; gcd = g ; while ( gcd > 1 ) { x = x / gcd ; y = y / gcd ; lcm = lcm * gcd ; gcd = GCD ( x , y ) ; } if ( g == 1 ) lcm = x * y ; else lcm = lcm * x * y ; printf ( \"%d %d\n\" , g , lcm ) ; } return 0 ; }", "label": 1, "id": 7939}
{"input": "unsigned int arr [ 100 ] [ 100 ] , n = 0 ; unsigned long cache [ 100 ] [ 100 ] ; inline unsigned int read ( ) { char temp ; unsigned int x = 0 ; temp = getchar_unlocked ( ) ; while ( temp < 48 ) temp = getchar_unlocked ( ) ; x += ( temp - '0' ) ; temp = getchar_unlocked ( ) ; while ( temp >= 48 ) { x = x * 10 ; x += ( temp - '0' ) ; temp = getchar_unlocked ( ) ; } return x ; } unsigned long solve ( unsigned int i , unsigned int j ) { register unsigned long t1 , t2 , t ; if ( i == n ) return 0 ; if ( cache [ i ] [ j ] != 0 ) return cache [ i ] [ j ] ; t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; if ( t2 > t1 ) t = t2 ; else t = t1 ; t += arr [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { unsigned int t = 0 ; register unsigned int i , j ; register unsigned long ans ; t = read ( ) ; while ( t -- ) { n = read ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = read ( ) ; cache [ i ] [ j ] = 0 ; } } ans = solve ( 0 , 0 ) ; printf ( \"%lu\n\" , ans ) ; } return 0 ; }", "label": 3, "id": 6489}
{"input": "int main ( ) { int t , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int max = 100001 , a ; long long int n ; scanf ( \"%d\" , & n ) ; b = n - 1 ; while ( n -- ) { scanf ( \"%d\" , & a ) ; if ( a < max ) max = a ; } max *= b ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 16271}
{"input": "int main ( ) { int t , n , a , i , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int sum = 0 ; for ( j = 1 ; j <= n ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a ) ; sum ++ ; } } printf ( \"%d\n\" , sum - 1 ) ; } return 0 ; }", "label": 1, "id": 24220}
{"input": "int maxsum = 0 ; int main ( ) { int t , i , j , k ; scanf ( \"%d\" , & t ) ; int result [ t ] ; int * * arr ; i = 0 ; int no_of_rows ; while ( i < t ) { scanf ( \"%d\" , & no_of_rows ) ; arr = ( int * * ) malloc ( no_of_rows * sizeof ( int * ) ) ; j = 0 ; while ( j < no_of_rows ) { arr [ j ] = ( int * ) calloc ( j + 1 , sizeof ( int ) ) ; k = 0 ; while ( k <= j ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; k ++ ; } j ++ ; } func ( no_of_rows , arr , 0 , 0 , 0 ) ; result [ i ] = maxsum ; maxsum = 0 ; i ++ ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , result [ i ] ) ; return 0 ; } int func ( int n , int * * arr , int row , int col , int sum ) { if ( row < n - 1 ) { sum = sum + arr [ row ] [ col ] ; func ( n , arr , row + 1 , col , sum ) ; func ( n , arr , row + 1 , col + 1 , sum ) ; } if ( row == n - 1 ) { sum = sum + arr [ row ] [ col ] ; if ( sum >= maxsum ) maxsum = sum ; } }", "label": 2, "id": 18467}
{"input": "int main ( ) { int t , n , i , j , max ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( j = i + 1 ; j < n ; j ++ ) { a [ i ] [ j ] = 0 ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = 1 ; j < n ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) { max = a [ i ] [ j + 1 ] ; } else { max = a [ i ] [ j ] ; } a [ i - 1 ] [ j ] += max ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 18132}
{"input": "int result ( int [ ] , int ) ; int main ( ) { int n , i , l , j , arr [ 396 ] , t [ 1001 ] , num ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & l ) ; if ( l >= 100 || l < 1 ) return 1 ; num = ( l * ( l + 1 ) ) / 2 ; for ( j = 0 ; j < num ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; if ( arr [ j ] >= 100 || arr [ j ] < 1 ) return 1 ; } t [ i ] = result ( arr , l ) ; } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , t [ i ] ) ; return 0 ; } int result ( int arr [ ] , int l ) { int i , j , k = 0 , sum = arr [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) { if ( arr [ i + k ] > arr [ i + k + 1 ] ) { sum += arr [ i + k ] ; k += i ; } else { sum += arr [ i + k + 1 ] ; k += i + 1 ; } } return sum ; }", "label": 3, "id": 23872}
{"input": "int main ( ) { int j , a , b , max , min ; int i , n ; long long int p ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } for ( j = min ; j > 0 ; j = j - ( max - min ) ) { if ( a % j == 0 && b % j == 0 ) { printf ( \"%d \" , j ) ; j = 0 ; } } for ( p = max ; p <= ( a * b ) ; p = p + max ) { if ( p % a == 0 && p % b == 0 ) { printf ( \"%I64d\n\" , p ) ; break ; } } } }", "label": 1, "id": 18142}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t ; int a , b ; int one , two ; scanf ( \"%d\" , & t ) ; for ( ; t > 0 ; t -- ) { scanf ( \"%d%d\" , & a , & b ) ; one = gcd ( a , b ) ; two = lcm ( a , b ) ; printf ( \"%d %d\n\" , one , two ) ; } return 0 ; } int gcd ( int x , int y ) { int i ; int l ; int p = 1 ; if ( x <= y ) l = x ; else l = y ; for ( i = 1 ; i <= l ; i ++ ) { if ( x % i == 0 && y % i == 0 ) { p = i ; } } return p ; } int lcm ( int x , int y ) { int i ; int h ; int p ; if ( x <= y ) h = y ; else h = x ; for ( i = x * y ; i >= h ; i -- ) { if ( i % x == 0 && i % y == 0 ) p = i ; } return p ; }", "label": 2, "id": 17018}
{"input": "int main ( ) { int i , t , a , sum ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; int arr [ a ] ; int sub [ a ] ; for ( i = 0 ; i < a ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 0 ; i < a ; i ++ ) sub [ i ] = 1 ; for ( i = 1 ; i < a ; i ++ ) { if ( arr [ i ] >= arr [ i - 1 ] ) sub [ i ] = sub [ i - 1 ] + 1 ; } sum = 0 ; for ( i = 0 ; i < a ; i ++ ) sum += sub [ i ] ; printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 1, "id": 4464}
{"input": "int main ( ) { long long int t , a , b , i , j , temp ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { i = a ; j = b ; } else { i = b ; j = a ; } while ( 1 ) { if ( i % j == 0 ) break ; temp = j ; j = i % j ; i = temp ; } printf ( \"%lld %lld\n\" , j , a * b / j ) ; } return ( 0 ) ; }", "label": 0, "id": 20392}
{"input": "int compare ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int TestCaseCount , ArraySize , i , j , k , TotalCombinations ; int Resultarray [ 100000 ] = { 0 } ; scanf ( \"%d\" , & TestCaseCount ) ; while ( TestCaseCount -- ) { int ArrayMatrix [ 100000 ] = { 0 } ; scanf ( \"%d\" , & ArraySize ) ; for ( i = 0 ; i < ArraySize ; i ++ ) scanf ( \"%d\" , & ArrayMatrix [ i ] ) ; qsort ( ArrayMatrix , ArraySize , sizeof ( int ) , compare ) ; TotalCombinations = 0 ; for ( i = 1 ; i < ArraySize ; i ++ ) { TotalCombinations = TotalCombinations + ( ArraySize - i ) ; } printf ( \"%d\n\" , TotalCombinations ) ; } return 0 ; }", "label": 1, "id": 3691}
{"input": "int main ( ) { int t , i = 0 , j ; scanf ( \"%d\" , & t ) ; long int a [ t ] , b [ t ] ; for ( ; i < t ; i ++ ) { scanf ( \"%ld %ld\" , & a [ i ] , & b [ i ] ) ; } for ( i = 0 ; i < t ; i ++ ) { for ( j = ( a [ i ] > b [ i ] ? b [ i ] : a [ i ] ) ; j >= 1 ; j -- ) { if ( a [ i ] % j == 0 && b [ i ] % j == 0 ) { printf ( \"%ld %ld\n\" , j , a [ i ] * ( b [ i ] / j ) ) ; break ; } } } return 0 ; }", "label": 2, "id": 20038}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( void ) { int a , b , c , lcm ; int t ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d %d\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%d\" , c ) ; lcm = ( a * b ) / c ; printf ( \"\\t%d\n\" , lcm ) ; -- t ; } return 0 ; }", "label": 1, "id": 24528}
{"input": "int main ( ) { long long int str ; int temp , t , n , i , min ; min = INT_MAX ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & temp ) ; if ( temp < min ) min = temp ; } str = ( long long int ) min * ( long long int ) ( n - 1 ) ; printf ( \"%lld\n\" , str ) ; } return 0 ; }", "label": 1, "id": 19442}
{"input": "int main ( void ) { int t , i , lcm , hcf , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { hcf = 1 ; scanf ( \"%d%d\" , & a , & b ) ; lcm = a * b ; for ( i = 2 ; i <= ( a + b ) / 2 ; i ++ ) if ( a % i == 0 && b % i == 0 ) hcf *= i ; lcm = lcm / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 1954}
{"input": "int main ( ) { int a , b , n , i , j = 0 , k , lcm = 1 , gcd = 1 , x , y , p , q ; int s [ 1000000 ] ; int count [ 1000000 ] = { 0 } ; scanf ( \"%d\n\" , & n ) ; for ( y = 0 ; y < n ; y ++ ) { scanf ( \"%d %d\n\" , & a , & b ) ; p = a ; q = b ; if ( a > b ) k = a ; else k = b ; for ( i = 2 ; i <= k ; i ++ ) { if ( a % i == 0 || b % i == 0 ) { while ( a % i != 0 && b % i != 0 ) { if ( a % i == 0 ) a = a / i ; else b = b / i ; count [ j ] = count [ j ] + 1 ; } s [ j ] = i ; j ++ ; } } while ( x >= 0 ) { x = j - 1 ; if ( p % s [ x ] == 0 && q % s [ x ] == 0 ) { gcd = gcd * s [ x ] ; lcm = lcm * s [ x ] * count [ x ] ; } else if ( p % s [ x ] != 0 && q % s [ x ] == 0 || p % s [ x ] == 0 && q % s [ x ] != 0 ) lcm = lcm * s [ x ] * count [ x ] ; x -- ; } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 13284}
{"input": "inline long long int GCD ( long long int , long long int ) ; long long int GCD ( long long int A , long long int B ) { if ( B == 0 ) return A ; else return ( GCD ( B , A % B ) ) ; } int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { long long int A , B , gcd , lcm ; scanf ( \"%lld%lld\" , & A , & B ) ; gcd = GCD ( A , B ) ; lcm = ( A / gcd ) * B ; printf ( \"%lld %lld\" , gcd , lcm ) ; } }", "label": 1, "id": 23171}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 1029}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned int i , n ; scanf ( \"%u\" , & n ) ; unsigned int a [ n ] , min = 10001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%u\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%u\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 7752}
{"input": "int gcm ( int x , int y ) { if ( x == y ) return ( x ) ; if ( x % y == 0 ) return ( y ) ; if ( y % x == 0 ) return ( x ) ; if ( x > y ) return ( gcm ( x % y , y ) ) ; else return ( gcm ( x , y % x ) ) ; } main ( ) { int a , b , c , d , e , f , g ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d%d\" , & b , & c ) ; e = gcm ( b , c ) ; printf ( \"%d \" , e ) ; g = ( c * b ) / e ; printf ( \"%d\n\" , g ) ; } }", "label": 1, "id": 8307}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 834}
{"input": "long long sum ( long long ) ; int main ( ) { long long t , n , arr [ 100000 ] = { } , i , j , count ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { j = 1 ; while ( ( arr [ i ] <= arr [ i + 1 ] ) && ( i + 1 < n ) ) { i ++ ; j ++ ; } count += sum ( j ) ; } printf ( \"%lld\n\" , count ) ; } return 0 ; } long long sum ( long long n ) { long long s ; s = n * ( n + 1 ) / 2 ; return s ; }", "label": 0, "id": 22891}
{"input": "int a [ 100 ] [ 100 ] ; int sum ; int maxchild ( int x , int y , int i , int n ) { if ( i == n ) { return maxi ( a [ x + 1 ] [ y ] , a [ x + 1 ] [ y + 1 ] ) ; } else { sum = a [ x ] [ y ] + maxi ( maxchild ( x + 1 , y , i + 1 , n ) , maxchild ( x + 1 , y + 1 , i + 1 , n ) ) ; return sum ; } } int main ( ) { int t , n , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } i = 1 ; max = maxchild ( 0 , 0 , 0 , n ) ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 10678}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 6104}
{"input": "int level , n , i , elements , p , a [ 5050 ] , x , j ; int testcases , big ; int main ( ) { scanf ( \"%d\" , & testcases ) ; for ( x = 1 ; x <= testcases ; x ++ ) { scanf ( \"%d\" , & level ) ; n = level - 1 ; elements = ( level * ( level + 1 ) ) / 2 ; i = elements - 1 - level ; for ( j = 0 ; j < elements ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; while ( i >= 0 ) { p = n ; while ( p > 0 ) { if ( a [ i + n ] > a [ i + n + 1 ] ) big = a [ i + n ] ; else big = a [ i + n + 1 ] ; a [ i ] = a [ i ] + big ; p -- ; i -- ; } n -- ; } printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17842}
{"input": "int main ( ) { int t , n , a [ 99 ] [ 99 ] , b [ 99 ] [ 99 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) { if ( i == n - 1 ) { for ( j = 0 ; j <= n - 1 ; j ++ ) b [ i ] [ j ] = a [ i ] [ j ] ; } else { for ( j = 0 ; j <= i ; j ++ ) { if ( b [ i + 1 ] [ j ] >= b [ i + 1 ] [ j + 1 ] ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i + 1 ] [ j ] ; else b [ i ] [ j ] = a [ i ] [ j ] + b [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , b [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 22276}
{"input": "int main ( void ) { int t , a [ 100000 ] , i , z , n , t1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { z = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { z = z + a [ i ] ; t1 = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = t1 ; } else if ( a [ i + 1 ] < a [ i ] ) z = z + a [ i + 1 ] ; } printf ( \"%d\n\" , z ) ; } return 0 ; }", "label": 1, "id": 14684}
{"input": "int main ( ) { int t , arr [ 100 ] [ 100 ] = { 0 } , i , n , j ; int max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( ( arr [ i ] [ j ] + arr [ i - 1 ] [ j ] ) > ( arr [ i ] [ j ] + arr [ i - 1 ] [ j - 1 ] ) ) arr [ i ] [ j ] += arr [ i - 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i - 1 ] [ j - 1 ] ; } } max = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( max < arr [ n ] [ i ] ) max = arr [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 6929}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , cost = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { int c = 0 ; c = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = c ; cost = cost + c ; } else cost = cost + a [ i + 1 ] ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 17421}
{"input": "int matrix [ 100 ] [ 100 ] ; int find_sum ( int , int , int ) ; int main ( ) { int count ; int lines ; int i , j ; scanf ( \"%d\" , & count ) ; while ( count > 0 ) { i = 0 ; scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & matrix [ i ] [ j ] ) ; } } printf ( \"%d\n\" , count ) ; count -- ; } return 0 ; } int find_sum ( int lines , int i , int j ) { int sum = 0 ; int max_sum = 0 ; if ( i < lines && j <= i ) { max_sum = find_sum ( lines , i + 1 , j ) ; sum = find_sum ( lines , i + 1 , j + 1 ) ; if ( max_sum < sum ) max_sum = sum ; max_sum += matrix [ i ] [ j ] ; } return max_sum ; }", "label": 1, "id": 16827}
{"input": "int main ( void ) { long long int t = 0 , n = 0 , a [ 100000 ] ; int count = 0 , i = 0 , j = 0 ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( a [ i ] >= a [ j ] ) { count ++ ; } else { break ; } } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 1, "id": 14975}
{"input": "int main ( ) { int i , j , n , r , d [ 100 ] [ 100 ] , dist [ 100 ] [ 100 ] , max ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & d [ i ] [ j ] ) ; dist [ i ] [ j ] = - 1 ; } } dist [ 0 ] [ 0 ] = d [ 0 ] [ 0 ] ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( dist [ i ] [ j ] < dist [ i - 1 ] [ j ] + d [ i ] [ j ] ) dist [ i ] [ j ] = dist [ i - 1 ] [ j ] + d [ i ] [ j ] ; if ( dist [ i ] [ j + 1 ] < dist [ i - 1 ] [ j ] + d [ i ] [ j + 1 ] ) dist [ i ] [ j + 1 ] = dist [ i - 1 ] [ j ] + d [ i ] [ j + 1 ] ; } } max = - 1 ; for ( j = 0 ; j < r ; j ++ ) { if ( dist [ r - 1 ] [ j ] > max ) max = dist [ r - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 16244}
{"input": "int main ( void ) { int test_cases ; int n , i , j ; int a [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + MAX ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5354}
{"input": "int main ( void ) { int t = 0 , n = 0 , a [ MAX ] , i = 0 ; long long min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 0 ; scanf ( \"%d\" , & n ) ; if ( n <= 1 ) { break ; } else { for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n - 1 ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } } min *= ( n - 1 ) ; printf ( \"%ld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 25054}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int arr1 [ 100 ] [ 100 ] , arr2 [ 100 ] [ 100 ] ; int tc , n , x , i , largest , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; x = 0 ; while ( x < n ) { for ( i = 0 ; i <= x ; i ++ ) scanf ( \"%d\" , & arr1 [ x ] [ i ] ) ; x += 1 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) { arr2 [ i ] [ j ] = arr1 [ i ] [ j ] ; continue ; } if ( j != 0 && j != i ) arr2 [ i ] [ j ] = arr1 [ i ] [ j ] + max ( arr2 [ i - 1 ] [ j ] , arr2 [ i - 1 ] [ j - 1 ] ) ; if ( j == 0 && i != 0 ) arr2 [ i ] [ j ] = arr1 [ i ] [ j ] + arr2 [ i - 1 ] [ j ] ; if ( j == i ) arr2 [ i ] [ j ] = arr1 [ i ] [ j ] + arr2 [ i - 1 ] [ j - 1 ] ; } } largest = arr2 [ n - 1 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) largest = max ( largest , arr2 [ n - 1 ] [ i ] ) ; printf ( \"%d\" , largest ) ; } return 0 ; }", "label": 1, "id": 25056}
{"input": "int max ( int x , int y ) ; int max ( int x , int y ) { if ( x > y ) { return x ; } else { return y ; } } int main ( ) { int t ; int r ; int i ; int j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; int a [ r ] [ r ] ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = ( r - 2 ) ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16382}
{"input": "int main ( ) { int t ; long a [ 5 ] [ 100002 ] , n [ 5 ] , count [ 5 ] , i , j , l , k , b [ 100002 ] , sum [ 5 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%li\" , & n [ i ] ) ; for ( j = 0 ; j < n [ i ] ; j ++ ) { scanf ( \"%li\" , & a [ i ] [ j ] ) ; b [ 0 ] = 1 ; if ( a [ i ] [ j ] >= a [ i ] [ j - 1 ] && j >= 1 ) { b [ j ] = b [ j - 1 ] + 1 ; } else { b [ j ] = 1 ; } } sum [ i ] = 0 ; for ( l = 0 ; l < n [ i ] ; l ++ ) { sum [ i ] = sum [ i ] + b [ l ] ; } } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%li\n\" , sum [ i ] ) ; } return 0 ; }", "label": 0, "id": 23688}
{"input": "void sort ( int a [ ] , int n , int m ) { int p = 0 ; if ( m > n ) { p = partation ( a , n , m ) ; sort ( a , n , p - 1 ) ; sort ( a , p + 1 , m ) ; } } int partation ( int a [ ] , int n , int m ) { int x = a [ m ] , h = n - 1 , k = 0 ; for ( k = n ; k <= m - 1 ; k ++ ) { if ( a [ k ] <= x ) { h = h + 1 ; swap ( & a [ h ] , & a [ k ] ) ; } } swap ( & a [ h + 1 ] , & a [ m ] ) ; return h + 1 ; } void swap ( int * a , int * b ) { int temp = 0 ; temp = * a ; * a = * b ; * b = temp ; } int main ( ) { int i , j , v ; long long sum = 0 ; scanf ( \"%d\" , & v ) ; while ( v > 0 ) { scanf ( \"%d\" , & i ) ; int a [ i ] ; for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } sort ( a , 0 , i - 1 ) ; sum = a [ 0 ] * ( i - 1 ) ; printf ( \"%lld\" , sum ) ; v -- ; } return 0 ; }", "label": 1, "id": 4384}
{"input": "int main ( ) { int t , n , cost , array [ 100000 ] , count , x , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & array [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( array [ i ] > array [ i + 1 ] ) count = count + array [ i + 1 ] ; else { if ( i == ( n - 2 ) ) { count = count + array [ i ] ; break ; } else { count = count + array [ i ] ; x = array [ i ] ; array [ i ] = array [ i + 1 ] ; array [ i + 1 ] = x ; } } } printf ( \"%d\n\" , count ) ; } }", "label": 1, "id": 3658}
{"input": "int main ( ) { int n , m , k , i , j , row , col , max = 0 ; int mat [ 101 ] [ 101 ] = { 0 } ; scanf ( \"%d\" , & m ) ; for ( k = m ; k > 0 ; k -- ) { max = 0 ; scanf ( \"%d\" , & n ) ; row = n ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } if ( row != 1 ) { for ( i = 1 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { mat [ i ] [ j ] += mat [ i - 1 ] [ j ] ; } else if ( mat [ i - 1 ] [ j - 1 ] >= mat [ i - 1 ] [ j ] ) { mat [ i ] [ j ] += mat [ i - 1 ] [ j - 1 ] ; } else mat [ i ] [ j ] += mat [ i - 1 ] [ j ] ; } } for ( i = 0 ; i < row ; i ++ ) { if ( mat [ row - 1 ] [ i ] > max ) max = mat [ row - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } else printf ( \"%d\n\" , mat [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 23642}
{"input": "int main ( ) { while ( 1 ) { int n1 , n2 , temp1 , temp2 , rem ; scanf ( \"%d %d\" , & n1 , & n2 ) ; temp1 = n1 ; temp2 = n2 ; while ( temp2 != 0 ) { rem = temp1 % temp2 ; temp1 = temp2 ; temp2 = rem ; } printf ( \"%d %d\n\" , temp1 , n1 * n2 / temp1 ) ; } return 0 ; }", "label": 2, "id": 15642}
{"input": "int main ( ) { int i , j , m , n , k ; int a [ n ] , b [ n ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; scanf ( \"%d\" , & b [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) k = a [ i ] ; k = b [ i ] ; for ( j = k ; j >= 1 ; j -- ) { if ( a [ i ] % j == 0 && b [ i ] % j == 0 ) { printf ( \"%d\" , j ) ; break ; } } for ( j = 1 ; j > 0 ; j ++ ) { if ( j % a [ i ] == 0 && j % b [ i ] == 0 ) { printf ( \"%d\n\" , j ) ; break ; } } } }", "label": 3, "id": 259}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int s = a [ 0 ] , sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s > a [ i + 1 ] ) { s = a [ i + 1 ] ; } sum = sum + s ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 25594}
{"input": "void mergesort ( long long int a [ ] , long int i , long int j ) ; void merge ( long long int a [ ] , long int i1 , long int j1 , long int i2 , long int j2 ) ; int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; long long int s = 0 ; scanf ( \"%ld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } mergesort ( a , 0 , n - 1 ) ; s = a [ 0 ] * ( n - 1 ) ; printf ( \"%lld\n\" , s ) ; } return 0 ; } void mergesort ( long long int a [ ] , long int i , long int j ) { int mid ; if ( i < j ) { mid = ( i + j ) / 2 ; mergesort ( a , i , mid ) ; mergesort ( a , mid + 1 , j ) ; merge ( a , i , mid , mid + 1 , j ) ; } } void merge ( long long int a [ ] , long int i1 , long int j1 , long int i2 , long int j2 ) { int temp [ 50 ] ; int i , j , k ; i = i1 ; j = i2 ; k = 0 ; while ( i <= j1 && j <= j2 ) { if ( a [ i ] < a [ j ] ) temp [ k ++ ] = a [ i ++ ] ; else temp [ k ++ ] = a [ j ++ ] ; } while ( i <= j1 ) temp [ k ++ ] = a [ i ++ ] ; while ( j <= j2 ) temp [ k ++ ] = a [ j ++ ] ; for ( i = i1 , j = 0 ; i <= j2 ; i ++ , j ++ ) a [ i ] = temp [ j ] ; }", "label": 3, "id": 19579}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , j , k ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( j >= k ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; else a [ j ] [ k ] = 0 ; } } for ( j = n - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { if ( a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k ] ; else a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22347}
{"input": "int triangle ( int rows , int row , int col ) ; int test [ 100 ] [ 100 ] ; int main ( ) { int n , i , j , k , ans [ 1000 ] , rows ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 0 ; j < rows ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & test [ j ] [ k ] ) ; } } ans [ i ] = triangle ( rows , 0 , 0 ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , ans [ i ] ) ; } return 0 ; } int triangle ( int rows , int row , int col ) { int right , down ; if ( row == rows - 1 ) { return test [ row ] [ col ] ; } right = triangle ( rows , row + 1 , col + 1 ) + test [ row ] [ col ] ; down = triangle ( rows , row + 1 , col ) + test [ row ] [ col ] ; if ( right > down ) { return right ; } else { return down ; } }", "label": 2, "id": 26022}
{"input": "long int gcd ( long int a , long int b ) { while ( ( b % a ) != 0 ) { long int r = b % a ; b = a ; a = r ; } printf ( \"%ld \" , a ) ; return a ; } main ( ) { long int a , b , t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } printf ( \"%ld\n\" , ( a * b ) / ( long int ) gcd ( a , b ) ) ; } }", "label": 0, "id": 21804}
{"input": "void main ( ) { int tc ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { int rows ; scanf ( \"%d\" , & rows ) ; int i ; int j ; int a [ rows ] [ rows ] ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = rows - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 4553}
{"input": "int main ( void ) { int t = 0 , n = 0 , i = 0 , j = 0 , a [ MAX ] , min = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ min ] ) { min = i ; } } printf ( \"%lld\n\" , a [ min ] * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 2185}
{"input": "unsigned int getBestSum ( unsigned int * pElems , unsigned int n_Elem , unsigned int n_Rows ) { while ( n_Rows -- ) { unsigned int i = ( n_Rows * ( n_Rows + 1 ) ) / 2 ; unsigned int limit = i + n_Rows ; unsigned int start = limit + 1 ; for ( ; i <= limit ; i ++ ) { pElems [ i ] += MAX ( pElems [ start ] , pElems [ start + 1 ] ) ; start ++ ; } } return pElems [ 0 ] ; } int main ( ) { unsigned int t ; for ( scanf ( \"%u\" , & t ) ; t > 0 ; t -- ) { unsigned int n_Rows , i , j , k = 0 , wrong_ip ; unsigned int * pElems ; char * tok ; char * pattern = \" \n\" ; char buff [ MAX_INPUT_BYTES ] ; scanf ( \"%u\" , & n_Rows ) ; fflush ( stdin ) ; pElems = ( unsigned int * ) malloc ( ( n_Rows * ( n_Rows + 1 ) ) / 2 ) ; for ( i = 0 ; i < n_Rows ; i ++ ) { j = i + 1 ; wrong_ip = 0 ; fgets ( buff , MAX_INPUT_BYTES , stdin ) ; fflush ( stdin ) ; tok = strtok ( buff , pattern ) ; j -- ; pElems [ k ++ ] = atoi ( tok ) ; while ( 1 ) { tok = strtok ( NULL , pattern ) ; if ( tok != NULL && j > 0 ) { pElems [ k ++ ] = atoi ( tok ) ; j -- ; } else { if ( ( ( tok == NULL ) && ( j > 0 ) ) || ( ( tok != NULL ) && ( j == 0 ) ) ) { wrong_ip = 1 ; } break ; } } } if ( wrong_ip == 0 ) { unsigned int sum = 0 ; if ( n_Rows == 1 ) { sum = * pElems ; } else { printf ( \"%u\n\" , getBestSum ( pElems , k , -- n_Rows ) ) ; } } else { printf ( \"%0\n\" ) ; } free ( pElems ) ; } return 0 ; }", "label": 3, "id": 18194}
{"input": "int main ( ) { int n , num , prev , t ; long long count , i , j ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & num ) ; prev = num ; i = 1 ; j = 1 ; count = 0 ; for ( i = 1 ; i < n ; ) { scanf ( \"%d\" , & num ) ; i ++ ; if ( num >= prev ) { prev = num ; j ++ ; } else { prev = num ; count = count + j * ( j + 1 ) / 2 ; j = 1 ; } } count = count + j * ( j + 1 ) / 2 ; printf ( \"%lld\" , count ) ; } return 0 ; }", "label": 1, "id": 18174}
{"input": "int main ( ) { int i , j , k , a , op1 , op2 ; scanf ( \"%d\" , & k ) ; while ( k -- ) { scanf ( \"%d\" , & a ) ; int p [ a + 1 ] [ a + 1 ] ; for ( i = 1 ; i <= a + 1 ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & p [ i ] [ j ] ) ; } } for ( i = a ; i > 0 ; i -- ) { op1 = 0 ; op2 = 0 ; for ( j = i ; j >= 0 ; j -- ) { op1 = p [ i + 1 ] [ j ] + p [ i ] [ j ] ; op2 = p [ i + 1 ] [ j + 1 ] + p [ i ] [ j ] ; if ( op1 >= op2 ) p [ i ] [ j ] = op1 ; else p [ i ] [ j ] = op2 ; } } printf ( \"%d\n\" , p [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 496}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a % b == 0 ) return b ; if ( b % a == 0 ) return a ; if ( a > b ) return ( gcd ( a % b , b ) ) ; else return ( gcd ( a , b % a ) ) ; } int main ( ) { int t , a , b , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int e ; scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; e = ( a * b ) ; printf ( \"\n%d %d\" , g , e ) ; } return 0 ; }", "label": 1, "id": 23952}
{"input": "int max1 ( int x , int y ) { return x > y ? x : y ; } int main ( ) { int p [ 102 ] [ 102 ] , i , j , n , r , max2 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; scanf ( \"%d\" , & p [ 0 ] [ 0 ] ) ; p [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & p [ i ] [ j ] ) ; p [ i ] [ j ] = max1 ( p [ i - 1 ] [ j ] , p [ i - 1 ] [ j - 1 ] ) + p [ i ] [ j ] ; } p [ i ] [ j + 1 ] = 0 ; } max2 = p [ r - 1 ] [ 0 ] ; for ( i = 1 ; i < r ; i ++ ) { if ( max2 < p [ r - 1 ] [ i ] ) max2 = p [ r - 1 ] [ i ] ; } printf ( \"%d\n\" , max2 ) ; } return 0 ; }", "label": 1, "id": 12043}
{"input": "int main ( ) { int n , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26668}
{"input": "int fun ( int [ ] [ 99 ] , int , int , int , int s [ ] ) ; main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int ar [ 99 ] [ 99 ] = { 0 } , i , j , n , s [ 5050 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { s [ i ] = - 1 ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] + fun ( ar , 1 , n , 0 , s ) ) ; } return 0 ; } int fun ( int ar [ ] [ 99 ] , int i , int n , int k , int s [ ] ) { int q , j = k , z , index = ( i * ( i + 1 ) ) / 2 + j ; if ( s [ index ] > 0 ) return s [ index ] ; q = - 1 ; for ( j ; j <= k + 1 ; j ++ ) { if ( i + 1 >= n ) z = ar [ i ] [ j ] ; else z = ar [ i ] [ j ] + fun ( ar , i + 1 , n , j , s ) ; if ( q < z ) q = z ; } s [ index ] = q ; return q ; }", "label": 3, "id": 108}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t , a , b , h ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; h = gcd ( a , b ) ; printf ( \"%d %d\n\" , h , ( a * b ) / h ) ; } return 0 ; }", "label": 1, "id": 24183}
{"input": "int main ( ) { int t , n , a [ 50000 ] , i , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; s = 100001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < s ) { s = a [ i ] ; } } printf ( \"%d\n\" , ( n - 1 ) * s ) ; } return 0 ; }", "label": 0, "id": 3449}
{"input": "int GCD ( int , int ) ; int main ( ) { int a , b , g , l , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = GCD ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; } int GCD ( int x , int y ) { while ( x != y ) { if ( x > y ) x -= y ; else y -= x ; } return x ; }", "label": 1, "id": 4661}
{"input": "int main ( ) { int t , a [ 500000 ] ; long long int i , n , k = 1000000 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] < k ) k = a [ i ] ; } printf ( \"%lld\n\" , k * ( n - 1 ) ) ; } }", "label": 1, "id": 6328}
{"input": "int gcd ( int a , int b ) ; int lcm ( int a , int b ) ; int main ( ) { int i , n , first [ n ] , second [ n ] , hcf [ n ] , lcmr [ n ] ; scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\n\" , & first [ i ] , & second [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { hcf [ i ] = gcd ( first [ i ] , second [ i ] ) ; lcmr [ i ] = lcm ( first [ i ] , second [ i ] ) ; printf ( \"%d %d\n\" , hcf [ i ] , lcmr [ i ] ) ; } return 0 ; } int gcd ( int a , int b ) { if ( b != 0 ) return gcd ( b , a % b ) ; else return a ; } int lcm ( int a , int b ) { int lcm ; lcm = ( a * b ) / gcd ( a , b ) ; return lcm ; }", "label": 1, "id": 22492}
{"input": "int main ( void ) { long curr [ 100 ] , prev [ 100 ] ; int input , i , j , t , n , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%ld\" , & prev [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & input ) ; if ( j == 0 ) curr [ j ] = input + prev [ j ] ; else if ( j == i ) curr [ j ] = input + prev [ j - 1 ] ; else if ( prev [ j ] > prev [ j - 1 ] ) curr [ j ] = input + prev [ j ] ; else curr [ j ] = input + prev [ j - 1 ] ; } for ( j = 0 ; j <= i ; j ++ ) prev [ j ] = curr [ j ] ; } for ( j = 0 , max = 0 ; j < n ; j ++ ) { if ( prev [ max ] < prev [ j ] ) max = j ; } printf ( \"%ld\n\" , prev [ max ] ) ; } return 0 ; }", "label": 0, "id": 19624}
{"input": "void main ( ) { int n1 , n2 , gcd , lcm , r , nume , deno , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { nume = n1 ; deno = n2 ; } else { nume = n2 ; deno = n1 ; } r = nume % deno ; while ( r != 0 ) { nume = deno ; deno = r ; r = nume % deno ; } gcd = deno ; lcm = n1 * n2 / gcd ; printf ( \"GCD of %d and %d = %d\n\" , n1 , n2 , gcd ) ; printf ( \"LCM of %d and %d = %d\n\" , n1 , n2 , lcm ) ; } }", "label": 1, "id": 20364}
{"input": "long int gcd ( long int a , long int b ) ; int main ( ) { long int k , x , y , t ; scanf ( \"%ld\" , & t ) ; if ( t < 1 || t > 1000 ) return 0 ; while ( t ) { scanf ( \"%ld%ld\" , & x , & y ) ; k = gcd ( x , y ) ; printf ( \"%ld %ld\n\" , k , ( x * y ) / k ) ; t -- ; } } long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; }", "label": 0, "id": 2387}
{"input": "int main ( ) { int calc ( int ) ; int t ; scanf ( \"%d\n\" , & t ) ; while ( t > 0 ) { int n ; scanf ( \"%d\n\" , & n ) ; int m = calc ( n ) ; printf ( \"%d\n\" , m ) ; t -- ; } return 0 ; } int calc ( int n ) { int a [ n ] ; int sum = 0 , i , t , j ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d \" , & a [ i ] ) ; } i = 0 ; if ( n != 1 ) { int m = n - 1 ; while ( m >= 1 ) { if ( a [ 0 ] < a [ 1 ] ) { t = a [ 0 ] ; } else t = a [ 1 ] ; a [ 0 ] = t ; for ( j = 1 ; j < m - 1 ; j ++ ) { a [ j ] = a [ j + 1 ] ; } sum = sum + t ; m -- ; } } else sum = a [ 0 ] ; return sum ; }", "label": 2, "id": 24435}
{"input": "long long int hcf ( long long int A , long long int B ) ; int lcm ( long long int A , long long int B , long long int C ) ; int T ; long long int A , B ; void main ( ) { long long int e , f ; int i ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & A , & B ) ; e = hcf ( A , B ) ; f = lcm ( A , B , e ) ; printf ( \"%lld %lld\" , e , f ) ; } } long long int hcf ( long long int a , long long int b ) { if ( a % b == 0 ) return b ; else return ( hcf ( b , ( a % b ) ) ) ; } int lcm ( long long int a , long long int b , long long int c ) { long long int lcm ; lcm = ( a * b ) / ( c ) ; return lcm ; }", "label": 1, "id": 17427}
{"input": "int main ( ) { int i , j , t , a [ 101 ] [ 101 ] , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j <= i - 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9641}
{"input": "int main ( ) { int m , n , a , b , x , t ; printf ( \"t\n\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { m = a ; n = b ; } else { m = b ; n = a ; } while ( n > 0 ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d,%d \n\" , m , ( a * b ) / m ) ; } }", "label": 1, "id": 6907}
{"input": "int a [ 102 ] [ 102 ] ; int main ( ) { int n , row ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int i , j ; scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = row - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j <= ( i - 1 ) ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22769}
{"input": "int main ( ) { int t , a , b , i , j , g , l , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { g = 0 ; l = 1 ; scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g = i ; } m = ( a > b ) ? a : b ; while ( 1 ) { if ( m % a == 0 && m % b == 0 ) { l = m ; break ; } ++ m ; } printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 8363}
{"input": "int main ( ) { int a , b , t , temp1 , dividend , divisor , gcd , i , rem = 1 ; long long int temp , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; temp = a * b ; if ( a < b ) { temp1 = a ; a = b ; b = temp1 ; } dividend = a ; divisor = b ; while ( rem > 0 ) { rem = dividend % divisor ; dividend = divisor ; if ( rem == 0 ) break ; divisor = rem ; } gcd = divisor ; lcm = temp / gcd ; printf ( \"%d %lld\" , gcd , lcm ) ; rem = 1 ; } return 0 ; }", "label": 1, "id": 2038}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] ; int i , j , r , n ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = r - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } else a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 2, "id": 20615}
{"input": "int main ( ) { int t , i , j , k , num , n , test , l ; int ar [ 100 ] [ 100 ] ; char ch ; scanf ( \"%d\" , & n ) ; for ( l = 0 ; l < n ; l ++ ) { scanf ( \"%d\" , & test ) ; for ( j = 0 ; j < test ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & num ) ; ar [ j ] [ k ] = num ; } } for ( i = test - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( ar [ i + 1 ] [ j ] > ar [ i + 1 ] [ j + 1 ] ) ar [ i ] [ j ] += ar [ i + 1 ] [ j ] ; else ar [ i ] [ j ] += ar [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\n\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 3497}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 4060}
{"input": "void gl ( int p , int q ) { int i , big ; ( p > q ) ? ( big = q ) : ( big = p ) ; for ( i = big ; i > 0 ; i -- ) { if ( ( p % i ) == 0 && ( q % i ) == 0 ) { printf ( \"%d \" , i ) ; break ; } } big = ( p * q ) / i ; printf ( \"%d \n\" , big ) ; } int main ( ) { int t ; int i , p , q ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & q ) ; scanf ( \"%d\" , & p ) ; gl ( p , q ) ; } return 0 ; }", "label": 1, "id": 13262}
{"input": "int sum ( int * * p , int ro , int co , int r , int s ) { if ( r > 0 ) { if ( r == 1 ) return p [ ro ] [ co ] ; int lt , ri ; lt = sum ( p , ro + 1 , co , r - 1 , s ) ; ri = sum ( p , ro + 1 , co + 1 , r - 1 , s ) ; if ( ri > lt ) ( s ) = p [ ro ] [ co ] + ri ; else ( s ) = p [ ro ] [ co ] + lt ; return s ; } else return 0 ; } int main ( ) { int n , r , * * p , i , j , k , s ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & r ) ; p = ( int * * ) malloc ( r * sizeof ( int * ) ) ; s = 0 ; for ( j = 1 ; j <= r ; j ++ ) { p [ j ] = ( int * ) malloc ( j * sizeof ( int ) ) ; for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & p [ j ] [ k ] ) ; } } s = sum ( p , 1 , 1 , r , s ) ; printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 3, "id": 15574}
{"input": "int main ( void ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n ; scanf ( \"%d\" , & n ) ; int i , b [ n ] ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; b [ 0 ] = 1 ; int sum = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) b [ i ] = b [ i - 1 ] + 1 ; else b [ i ] = 1 ; sum = sum + b [ i ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 21478}
{"input": "int tree [ 102 ] [ 102 ] ; int tree_length ; int greater_sum ( int , int ) ; int memo [ 100 ] [ 100 ] ; int main ( int argc , char * argv ) { int n , i , j , k ; for ( scanf ( \"%d\" , & n ) , i = 0 ; n > 0 ; n -- , i ++ ) { scanf ( \"%d\" , & tree_length ) ; for ( j = 1 ; j <= tree_length ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { memo [ j ] [ k ] = - 1 ; scanf ( \"%d\" , & tree [ j ] [ k ] ) ; } } printf ( \"%d\n\" , greater_sum ( 1 , 1 ) ) ; } } int greater_sum ( int i , int j ) { if ( memo [ i ] [ j ] != - 1 ) { return memo [ i ] [ j ] ; } else { if ( i == tree_length ) { return ( tree [ i ] [ j ] ) ; } else { if ( ( memo [ i + 1 ] [ j ] = greater_sum ( i + 1 , j ) ) > ( memo [ i + 1 ] [ j + 1 ] = greater_sum ( i + 1 , j + 1 ) ) ) { return ( memo [ i ] [ j ] = ( tree [ i ] [ j ] + memo [ i + 1 ] [ j ] ) ) ; } else { return ( memo [ i ] [ j ] = ( tree [ i ] [ j ] + memo [ i + 1 ] [ j + 1 ] ) ) ; } } } }", "label": 0, "id": 10720}
{"input": "int main ( ) { int n , i , j , s1 , s2 ; unsigned int m , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%u\" , & m ) ; s1 = 0 ; s2 = 0 ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%u\" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] > 90 ) exit ( 1 ) ; } s1 += a [ i ] [ 0 ] ; s2 += a [ i ] [ i ] ; } if ( s1 > s2 ) printf ( \"%d\n\" , s1 ) ; else printf ( \"%d\n\" , s2 ) ; } return 0 ; }", "label": 3, "id": 6580}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long n , i , * ptr ; scanf ( \"%d\" , & n ) ; ptr = ( long long * ) malloc ( n * sizeof ( long long ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & ptr [ i ] ) ; } long long j ; long long count = n ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n - 1 ; j ++ ) { if ( ptr [ j ] <= ptr [ j + 1 ] ) { count ++ ; } else break ; } } printf ( \"%lld\n\" , count ) ; } }", "label": 0, "id": 592}
{"input": "int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; int min ; long long int n ; long long int ptr [ 50001 ] ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & ptr [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { min = ptr [ 0 ] ; if ( ptr [ i ] < min ) min = ptr [ i ] ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 1, "id": 12590}
{"input": "int gcd ( int a , int b ) { int max = a , min = b ; if ( b > a ) { max = b ; min = a ; } if ( a == b ) return a ; else if ( max % min == 0 ) return min ; gcd ( max % min , min ) ; } main ( ) { int tc , a , b ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } }", "label": 1, "id": 13360}
{"input": "int max ( int c , int b ) { return c > b ? c : b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , ar [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; ar [ 1 ] [ 0 ] += ar [ 0 ] [ 0 ] ; ar [ 1 ] [ 1 ] += ar [ 0 ] [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) ar [ i ] [ 0 ] += ar [ i - 1 ] [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) ar [ i ] [ j ] += max ( ar [ i - 1 ] [ j - 1 ] , ar [ i - 1 ] [ j ] ) ; int maxi = ar [ n - 1 ] [ 0 ] ; for ( i = 0 ; i <= i ; i ++ ) { if ( ar [ n - 1 ] [ i ] > maxi ) maxi = ar [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , maxi ) ; } }", "label": 3, "id": 21859}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; int res [ t ] ; for ( i = 0 ; i < t ; i ++ ) { int sum = 0 , count = 0 , low = 0 , x ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; x = n ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { if ( arr [ j ] < arr [ j - 1 ] ) { count = ( j ) - low ; if ( count > 1 ) { sum = ( count * ( count - 1 ) ) / 2 ; x += sum ; } low = j ; } else if ( j == n - 1 ) { count = ( j + 1 ) - low ; if ( count > 1 ) { sum = ( count * ( count - 1 ) ) / 2 ; x += sum ; } } } res [ i ] = x ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , res [ i ] ) ; } return 0 ; }", "label": 0, "id": 1424}
{"input": "int scan ( void ) ; int main ( ) { int i , t = scan ( ) ; while ( t -- ) { int n = scan ( ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) arr [ i ] = scan ( ) ; long result = n ; int subs = 1 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] <= arr [ i + 1 ] ) { result += subs ; subs ++ ; } else subs = 1 ; } printf ( \"%ld\n\" , result ) ; } return 0 ; } int scan ( ) { int num = 0 , sign = 1 ; char c = '\\0' ; while ( c < '0' || c > '9' ) { c = getcx ( ) ; if ( c == '-' ) { sign = - 1 ; c = getcx ( ) ; break ; } } while ( c >= '0' && c <= '9' ) { num = num * 10 + c - '0' ; c = getcx ( ) ; } return num * sign ; }", "label": 0, "id": 23678}
{"input": "int fastread ( ) { int t = 0 ; char ch = getchar ( ) ; while ( ch < 33 ) ch = getchar ( ) ; while ( ch > 33 ) { t = t * 10 + ch - '0' ; ch = getchar ( ) ; } return t ; } int sumi ( int , int ) ; int a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] , n ; int main ( ) { int i , j , k , t ; t = fastread ( ) ; while ( t -- ) { n = fastread ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; b [ i ] [ j ] = - 1 ; } k = sumi ( 0 , 0 ) ; printf ( \"%d\n\" , k ) ; } return 0 ; } int sumi ( int i , int j ) { int t1 , t2 ; if ( i == n ) return 0 ; if ( b [ i ] [ j ] != - 1 ) { printf ( \"hllo %d\n\" , b [ i ] [ j ] ) ; return b [ i ] [ j ] ; } t1 = sumi ( i + 1 , j ) ; t2 = sumi ( i + 1 , j + 1 ) ; b [ i ] [ j ] = max ( t1 , t2 ) + a [ i ] [ j ] ; return b [ i ] [ j ] ; }", "label": 1, "id": 25091}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; long int a [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; int count = 0 , x = 1 ; for ( i = 2 ; i <= n ; i ++ ) { x ++ ; if ( a [ i - 1 ] > a [ i ] ) { count += x * ( x + 1 ) / 2 ; x = 0 ; } } if ( n == 1 ) count = 1 ; printf ( \"%d\n\" , count ) ; } }", "label": 1, "id": 24713}
{"input": "int main ( ) { long int n1 , n2 , x , y , lcm , t , i , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n2 > n1 ) n2 = n2 - n1 ; else n1 = n1 - n2 ; } gcd = n1 ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 24827}
{"input": "int main ( ) { int i , j , n , t , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = i ; j > 1 ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - 1 ] ? a [ i ] [ j ] : a [ i ] [ j - 1 ] ; a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + max ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 25199}
{"input": "int main ( void ) { int t , k , i ; scanf ( \"%d\" , & t ) ; for ( k = 1 ; k <= t ; k ++ ) { int n ; long p = 100000 , q ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( int j = 0 ; j < n - 1 ; j ++ ) { if ( p > a [ i ] ) p = a [ i ] ; } q = ( long ) p * ( n - 1 ) ; printf ( \"%d\" , q ) ; } return 0 ; }", "label": 1, "id": 16074}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , a [ 10000 ] , h = 0 , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { h = h + MIN ( a [ i ] , a [ i + 1 ] ) ; } printf ( \"%d\n\" , h ) ; } return 0 ; }", "label": 3, "id": 20175}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , cost ; scanf ( \"%ld\" , & n ) ; if ( n >= 2 ) { long int i , a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; cost = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ i - 1 ] ) cost += a [ i - 1 ] ; else cost += a [ i ] ; } } printf ( \"%ld\" , cost ) ; } }", "label": 1, "id": 9582}
{"input": "int main ( ) { int t , nl , i , j , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & nl ) ; for ( i = 0 ; i < nl ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = nl - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7729}
{"input": "int max ( int x , int y ) { return ( x > y ) ? x : y ; } int sums ( int a [ 99 ] [ 99 ] , int n , int i , int j ) { int t1 , t2 ; if ( i == n ) return 0 ; t1 = sums ( a , n , i + 1 , j ) ; t2 = sums ( a , n , i + 1 , j + 1 ) ; return a [ i ] [ j ] + max ( t1 , t2 ) ; } int main ( ) { int tc , n , a [ 99 ] [ 99 ] , i , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; scanf ( \"%d\" , & a [ i ] [ j ++ ] ) ) ; printf ( \"%d\n\" , sums ( a , n , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 19113}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( \"Enter two numbers\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"GCD of %d and %d = %d \n\" , num1 , num2 , gcd ) ; printf ( \"LCM of %d and %d = %d \n\" , num1 , num2 , lcm ) ; }", "label": 1, "id": 11123}
{"input": "void main ( ) { int n , arr , i , j ; int test ; int cost = 1000 ; scanf ( \"%d\" , & test ) ; for ( j = 1 ; j <= test ; j ++ ) { scanf ( \"%d\" , & n ) ; printf ( \" n=%d\" , n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr ) ; if ( cost > arr ) { cost = arr ; } } printf ( \"%d\" , cost ) ; cost = 1000 ; } }", "label": 1, "id": 1536}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long n , cost = 0 ; scanf ( \"%ld\" , & n ) ; long a , temp ; scanf ( \"%ld\" , & a ) ; n -- ; while ( n -- ) { scanf ( \"%ld\" , & temp ) ; if ( temp > a ) cost += a ; else { cost += temp ; a = temp ; } } printf ( \"%ld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 23283}
{"input": "int scan ( ) { char ch = get ( ) ; int n = 0 ; while ( ch < '0' || ch > '9' ) ch = get ( ) ; while ( ch <= '9' && ch >= '0' ) { n = ( n << 3 ) + ( n << 1 ) + ch - '0' ; ch = get ( ) ; } return n ; } int main ( ) { int T , N , i ; T = scan ( ) ; while ( T -- ) { N = scan ( ) ; int array [ N ] ; long long int count = 1 , res = 0 ; for ( i = 0 ; i < N ; i ++ ) array [ i ] = scan ( ) ; for ( i = 1 ; i < N ; i ++ ) { if ( array [ i ] >= array [ i - 1 ] ) count ++ ; else { res += count * ( count + 1 ) / 2 ; count = 1 ; } } res += count * ( count + 1 ) / 2 ; printf ( \"%lld\n\" , res ) ; } return 0 ; }", "label": 0, "id": 12085}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; long long int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int k = ( n - i - 1 ) ; for ( int j = 0 ; j < ( n - k ) ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 20398}
{"input": "int main ( ) { int t , n , i , j , a [ 10001 ] , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } m = 0 ; for ( j = 1 ; j <= n ; j ++ ) { for ( i = 1 ; i <= j ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { m ++ ; } else { continue ; } } } if ( m > 0 ) { printf ( \"%d\n\" , m ) ; } } return 0 ; }", "label": 3, "id": 8804}
{"input": "long int chkcount ( long int n ) { return ( ( n ) * ( n + 1 ) ) / 2 ; } int main ( ) { long int i , j , A [ mx ] , N , T , count , sum = 0 , m ; scanf ( \"%ld\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { count = 1 ; sum = 0 ; scanf ( \"%ld\" , & N ) ; m = N ; for ( j = 0 ; j < N ; j ++ ) scanf ( \"%ld\" , & A [ j ] ) ; if ( N == 1 ) sum = 1 ; else { for ( j = 0 ; j < N - 1 ; j ++ ) { count = 1 ; while ( A [ j ] <= A [ j + 1 ] ) { count ++ ; j ++ ; } sum += chkcount ( count ) ; } } printf ( \"%ld\n\" , sum ) ; } }", "label": 1, "id": 3531}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { int N ; scanf ( \"%d\" , & N ) ; int arr [ N ] ; int i ; long int min = 10000 ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( \"%ld\n\" , min * ( N - 1 ) ) ; T -- ; } return 0 ; }", "label": 0, "id": 17268}
{"input": "int max ( int , int ) ; int main ( ) { int i , j , k , t , n , A [ 1000 ] [ 1000 ] , B [ 1000 ] [ 1000 ] = { 0 } ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & A [ j ] [ k ] ) ; B [ j ] [ k ] = A [ j ] [ k ] ; } for ( j = n - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { B [ j ] [ k ] = A [ j ] [ k ] + max ( B [ j + 1 ] [ k ] , B [ j + 1 ] [ k + 1 ] ) ; } } printf ( \"%d\n\" , B [ 0 ] [ 0 ] ) ; } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 21882}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int t , n , i , j , max1 , max2 , sum , sum1 , sum2 , posi1 , posi2 , posj1 , posj2 , sum3 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; sum1 = sum2 = 0 ; max1 = max2 = 0 ; posi1 = posi2 = 0 ; posj1 = posj2 = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } i = n - 1 ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ i ] [ j ] > max1 ) { max1 = a [ i ] [ j ] ; posi1 = i ; posj1 = j ; } } i = n - 2 ; max2 = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > max2 ) { max2 = a [ i ] [ j ] ; posi2 = i ; posj2 = j ; } } if ( max1 < max2 ) { sum = max2 ; if ( a [ posi2 + 1 ] [ posj2 ] > a [ posi2 + 1 ] [ posj2 + 1 ] ) { sum = sum + a [ posi2 + 1 ] [ posj2 ] ; } else { sum = sum + a [ posi2 + 1 ] [ posj2 + 1 ] ; } posi2 -- ; while ( posi2 >= 0 ) { if ( posj2 != 0 ) { if ( posj2 == n - 2 ) { sum += a [ posi2 ] [ posj2 ] ; posj2 -- ; } else { if ( a [ posi2 ] [ posj2 ] > a [ posi2 ] [ posj2 - 1 ] ) { sum = sum + a [ posi2 ] [ posj2 ] ; } else { sum += a [ posi2 ] [ posj2 - 1 ] ; posj2 -- ; } } } else { sum += a [ posi2 ] [ posj2 ] ; } posi2 -- ; } } else { sum1 = max1 ; posi1 -- ; while ( posi1 >= 0 ) { if ( posj1 != 0 ) { if ( posj1 == ( n - 1 ) ) { posj1 -- ; sum1 += a [ posi1 ] [ posj1 ] ; } else { if ( a [ posi1 ] [ posj1 ] > a [ posi1 ] [ posj1 - 1 ] ) { sum1 = sum1 + a [ posi1 ] [ posj1 ] ; } else { sum1 += a [ posi1 ] [ posj1 - 1 ] ; posj1 -- ; } } } else { sum1 = sum1 + a [ posi1 ] [ posj1 ] ; } posi1 -- ; } sum2 = max2 ; if ( a [ posi2 + 1 ] [ posj2 ] > a [ posi2 + 1 ] [ posj2 + 1 ] ) { sum2 = sum2 + a [ posi2 + 1 ] [ posj2 ] ; } else { sum2 += a [ posi2 + 1 ] [ posj2 + 1 ] ; } posi2 -- ; while ( posi2 > 0 ) { if ( posj2 != 0 ) { if ( posj2 == n - 2 ) { sum2 += a [ posi2 ] [ posj2 ] ; posj2 -- ; } else { if ( a [ posi2 ] [ posj2 ] > a [ posi2 ] [ posj2 - 1 ] ) { sum2 = sum2 + a [ posi2 ] [ posj2 ] ; } else { sum2 += a [ posi2 ] [ posj2 - 1 ] ; posj2 -- ; } } } else { sum2 += a [ posi2 ] [ posj2 ] ; } posi2 -- ; } if ( sum1 > sum2 ) sum = sum1 ; else sum = sum2 ; } j = 0 ; sum3 = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) sum3 += a [ i ] [ j ] ; else { sum3 += a [ i ] [ j + 1 ] ; j ++ ; } } if ( sum3 > sum ) sum = sum3 ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 3661}
{"input": "int m , i , j , k , l , n , * p , * q , s , b [ 9999 ] ; int z ( int a , int b ) { return a > b ? a : b ; } void assert2 ( ) { while ( 1 ) { } } void f ( ) { p ++ , i ++ , k ++ ; if ( k == j ) { k = 0 ; j ++ ; p -- ; } assert2 ( p - b < 9999 ) ; q = p - 1 ; } int main ( ) { scanf ( \"%d\" , & m ) ; while ( m -- ) { scanf ( \"%d\" , & n ) ; for ( i = k = 0 , j = 1 , p = b ; i * 2 < n * n + n ; f ( ) ) { scanf ( \"%d\" , & s ) ; l = z ( l , ( b [ i ] = s + ( ( i > 0 ) ? ( ( k > 0 ) ? ( ( k < j - 1 ) ? z ( * p , * q ) : * q ) : * p ) : 0 ) ) ) ; } printf ( \"%d\n\" , l ) ; } }", "label": 2, "id": 23182}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm , i , j ; scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a || i <= b ; ++ i ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } printf ( \"%d\n\" , gcd ) ; if ( a > b ) j = a ; else j = b ; while ( 1 ) { if ( j % a == 0 && j % b == 0 ) { printf ( \"%d\n\" , j ) ; break ; } ++ j ; } } return 0 ; }", "label": 2, "id": 8645}
{"input": "void main ( ) { int n ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { long long int a , b , gcd , lcm , rem , num , den ; scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } }", "label": 0, "id": 2445}
{"input": "int t ; int max ( int i , int j , int a [ ] [ t ] ) ; int main ( ) { int i , n , j , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } printf ( \"%d\n\" , max ( 0 , 0 , a ) ) ; } return 0 ; } int max ( int i , int j , int a [ ] [ t ] ) { int c , d ; if ( i == ( t - 1 ) ) return a [ i ] [ j ] ; c = a [ i ] [ j ] + max ( i + 1 , j , a ) ; d = a [ i ] [ j ] + max ( i + 1 , j + 1 , a ) ; return ( c > d ? c : d ) ; }", "label": 2, "id": 20710}
{"input": "int main ( void ) { long i , j , n , a ; long arr [ 100 ] [ 100 ] ; scanf ( \"%ld\" , & n ) ; while ( n -- ) { scanf ( \"%ld\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%ld\" , & arr [ i ] [ j ] ) ; } } for ( i = a - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < a ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%ld\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 5908}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , temp ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } printf ( \"%d\n\" , a [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 23452}
{"input": "int main ( ) { long int t , i , j ; long int n ; scanf ( \"%ld\n\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld\n\" , & n ) ; long long int a [ n ] ; for ( j = 1 ; j <= n ; j ++ ) scanf ( \"%lld\n\" , & a [ j ] ) ; long long int min ; min = a [ 0 ] ; for ( j = 2 ; j <= n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } min = min * ( n - 1 ) ; printf ( \"\n%lld\" , min ) ; } return 0 ; }", "label": 1, "id": 11631}
{"input": "int main ( ) { int t ; long long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; long long int c = a , d = b ; int r = a % b ; while ( r != 0 ) { a = b ; b = r ; r = a % b ; } long long int mul = c / b ; printf ( \"%lld %lld\n\" , b , mul * d ) ; } }", "label": 0, "id": 10999}
{"input": "int main ( void ) { int t , i , n , j , a [ 20 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; ++ j ) { scanf ( \"%d\" , & a [ j ] ) ; } if ( a [ 0 ] < a [ n - 1 ] ) printf ( \"%d\n\" , a [ 0 ] ) ; else printf ( \"%d\n\" , a [ n - 1 ] ) ; } return 0 ; }", "label": 3, "id": 26811}
{"input": "long int gcd ( long , long ) ; main ( ) { int T , i , j , k ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { long int a , b , mn , hcf ; long int lcm ; scanf ( \"%ld %ld\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } } long int min ( long int x , long int y ) { if ( x < y ) return x ; else return y ; } long int gcd ( long a , long b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } }", "label": 0, "id": 14419}
{"input": "int lcm ( int , int ) ; int gcd ( int , int ) ; int main ( ) { int a , b , t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int gc , lc ; scanf ( \"%d %d\" , & a , & b ) ; lc = lcm ( a , b ) ; gc = gcd ( a , b ) ; printf ( \"%d %d\n\" , gc , lc ) ; } return 0 ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a > b ) return gcd ( b , a % b ) ; if ( a < b ) return gcd ( a , b % a ) ; }", "label": 1, "id": 16206}
{"input": "int main ( ) { int t , i ; long long int s , n , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { s = 0 ; scanf ( \"%d\" , & n ) ; long long int * a = ( long long int * ) malloc ( n * sizeof ( long long int ) ) ; scanf ( \"%lld\" , & a [ 0 ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } s = ( n - 1 ) * min ; printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 23336}
{"input": "int tree [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return tree [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { tree [ k ] [ l ] += max ( tree [ k + 1 ] [ l ] , tree [ k + 1 ] [ l + 1 ] ) ; } } return tree [ 0 ] [ 0 ] ; } void main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; tree [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } }", "label": 1, "id": 341}
{"input": "int sum_n ( int n ) { return ( n * ( n + 1 ) / 2 ) ; } int row_num ( int index ) { int row = 0 ; while ( ( row * ( row + 1 ) / 2 ) <= index ) { row ++ ; } return row ; } void sumtrian ( int * a , int index , int sum , int n , int * answer ) { if ( row_num ( index ) <= n ) { sum = sum + a [ index ] ; if ( row_num ( index ) == n ) { if ( * answer < sum ) { * answer = sum ; } } sumtrian ( a , index + row_num ( index ) , sum , n , answer ) ; sumtrian ( a , index + row_num ( index ) + 1 , sum , n , answer ) ; } } int main ( ) { int m , i , a [ 100 ] , row , sum [ 1000 ] , j , flag = 0 ; scanf ( \"%d\" , & m ) ; if ( m >= 0 && m <= 1000 ) for ( i = 0 ; i < m ; i ++ ) { sum [ i ] = 0 ; flag = 0 ; scanf ( \"%d\" , & row ) ; if ( row > 0 && row < 100 ) { for ( j = 0 ; j < sum_n ( row ) ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( a [ j ] <= 0 && a [ j ] > 99 ) { flag = 1 ; break ; } } if ( flag == 0 ) sumtrian ( a , 0 , 0 , row , & sum [ i ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { printf ( \"%d\n\" , sum [ i ] ) ; } return 0 ; }", "label": 2, "id": 16143}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 11250}
{"input": "int main ( ) { int i , a = 1 , e , n , j , k , l , s = 0 , d = 0 , b = 1 , t = 2 , p = 1 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & l ) ; l = l * ( l + 1 ) / 2 ; scanf ( \"%d\" , & e ) ; s = s + e ; a = a + p ; p ++ ; d = d + e ; b = b + t ; t ++ ; for ( j = 2 ; j <= l ; j ++ ) { scanf ( \"%d\" , & e ) ; if ( j == a ) { s = s + e ; a = a + p ; p ++ ; } else if ( j == b ) { d = d + e ; b = b + t ; t ++ ; } } if ( s > d ) printf ( \"%d\" , s ) ; else printf ( \"%d\" , d ) ; } return 0 ; }", "label": 1, "id": 26706}
{"input": "int main ( void ) { long int t , a , b , n , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( n = 1 ; n <= a && n <= b ; n ++ ) { if ( a % n == 0 && b % n == 0 ) gcd = n ; } lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 20519}
{"input": "int main ( void ) { int a , b , c , i , x , y , lcm ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { scanf ( \"%d %d\" , & b , & c ) ; x = b ; y = c ; while ( b != c ) { if ( b > c ) { b = b - c ; } else { c = c - b ; } } lcm = ( x * y ) / b ; printf ( \"%d %d\n\" , b , lcm ) ; } return 0 ; }", "label": 1, "id": 9603}
{"input": "int main ( ) { int t , n , x , cost , i , ss ; scanf ( \"%d\" , & t ) ; int arr [ 50000 ] ; int test = - 9999 , j = 0 , k ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( ss = 0 ; ss < n ; ss ++ ) { scanf ( \"%d \" , & arr [ ss ] ) ; } cost = 0 ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( arr [ j ] < arr [ j + 1 ] ) { test = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = test ; } cost = cost + arr [ j + 1 ] ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 10058}
{"input": "int main ( ) { int t ; scanf ( \" %d\" , & t ) ; while ( t -- ) { long int n , min ; scanf ( \" %ld\" , & n ) ; long int arr [ n ] ; int i ; for ( i = 0 ; i < n ; i ++ ) scanf ( \" %ld\" , arr + i ) ; min = arr [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 25320}
{"input": "int main ( ) { int n , i , j , in [ 100 ] [ 100 ] , a [ 100 ] [ 100 ] = { 0 } , max , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] = 0 ; in [ i ] [ j ] = 0 ; } } max = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & in [ i ] [ j ] ) ; } } a [ 1 ] [ 1 ] = in [ 1 ] [ 1 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i + 1 ] [ j ] = ( ( a [ i ] [ j ] + in [ i + 1 ] [ j ] ) > a [ i + 1 ] [ j ] ) ? ( a [ i ] [ j ] + in [ i + 1 ] [ j ] ) : a [ i + 1 ] [ j ] ; a [ i + 1 ] [ j + 1 ] = ( ( a [ i ] [ j ] + in [ i + 1 ] [ j + 1 ] ) > a [ i + 1 ] [ j + 1 ] ) ? ( a [ i ] [ j ] + in [ i + 1 ] [ j + 1 ] ) : a [ i + 1 ] [ j + 1 ] ; } } for ( i = 1 ; i <= n ; i ++ ) { if ( a [ n ] [ i ] > max ) max = a [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 16352}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , x , y , r , gcd , lcm ; scanf ( \"%ld%ld\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { r = x % y ; x = y ; y = r ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%ld\\t%ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 9266}
{"input": "int main ( ) { int t , i , n , co = 0 , j , * a , pre ; printf ( \"Enter test cases\n\" ) ; scanf ( \"%d\" , & t ) ; while ( t > 0 && t <= 5 ) { printf ( \"Enter N\n\" ) ; scanf ( \"%d\" , & n ) ; if ( n < 1 || n > 100000 ) break ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; printf ( \"Enter Array-\n\" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] > alimit || a [ i ] < 1 ) exit ( 0 ) ; } for ( i = 0 ; i < n ; i ++ ) { pre = i ; for ( j = i ; j < n ; j ++ ) { if ( a [ j ] >= a [ pre ] ) co ++ ; if ( j != i ) pre = j ; } } printf ( \"Sub-arr=%d\" , co ) ; t -- ; } return 0 ; }", "label": 2, "id": 20659}
{"input": "int dynamicpath ( int * * a , int n ) { int i , j ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else a [ i ] [ j ] += ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) ? a [ i - 1 ] [ j ] : a [ i - 1 ] [ j - 1 ] ; } } int max = - 1 ; i = n - 1 ; for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } return max ; } int main ( ) { int t , n , i , j , k , l ; scanf ( \"%d\" , & t ) ; int * o = ( int * ) malloc ( t * sizeof ( int ) ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int * * a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( k = 0 ; k < n ; k ++ ) { a [ k ] = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( l = 0 ; l < n ; l ++ ) a [ k ] [ l ] = 0 ; } for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } o [ i ] = dynamicpath ( a , n ) ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , o [ i ] ) ; } return 0 ; }", "label": 0, "id": 5597}
{"input": "int main ( void ) { int t ; unsigned long int a , b , n1 , n2 , gcd , lcm , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lu %lu\n\" , & a , & b ) ; n1 = a ; n2 = b ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = n1 * n2 / gcd ; printf ( \"%lu %lu\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 10246}
{"input": "int main ( void ) { int T , N ; scanf ( \"%d\" , & T ) ; int t ; for ( t = 0 ; t < T ; t ++ ) { scanf ( \"%d\" , & N ) ; int i ; int a [ N ] ; int num [ N ] ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; num [ i ] = 0 ; } int k = 0 ; int count = 0 ; for ( i = 1 ; i < N ; i ++ ) { if ( a [ i ] > a [ i - 1 ] ) count ++ ; else { num [ k ] = count ; count = 0 ; k ++ ; } } num [ k ++ ] = count ; count = 0 ; for ( i = 0 ; i < k ; i ++ ) { count += ( num [ i ] * ( num [ i ] + 1 ) ) / 2 ; } count += N ; printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 0, "id": 8658}
{"input": "int sum , max , rows ; int sumtriangle ( int * * a , int r , int c ) { int s1 , s2 ; if ( r == rows - 1 ) { return a [ r ] [ c ] ; } else { s1 = a [ r ] [ c ] + sumtriangle ( a , r + 1 , c ) ; s2 = a [ r ] [ c ] + sumtriangle ( a , r + 1 , c + 1 ) ; sum = ( s1 > s2 ) ? s1 : s2 ; return sum ; } } int main ( ) { int * * a , s3 , i , j , tc ; sum = max = 0 ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & rows ) ; a = ( int * * ) malloc ( rows * sizeof ( int * ) ) ; for ( i = 0 ; i < rows ; i ++ ) a [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( i = 0 ; i < rows ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < rows ; i ++ ) { s3 = sumtriangle ( a , i , i ) ; if ( s3 > max ) max = s3 ; } free ( a ) ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 17988}
{"input": "int a [ 101 ] [ 101 ] , temp [ 101 ] [ 101 ] , result [ 1000 ] ; int calculate ( int row , int col ) ; int n , t , sum ; int main ( ) { int i , j , t_temp ; scanf ( \"%d\" , & t ) ; t_temp = t ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { temp [ i ] [ j ] = - 1 ; } } sum = calculate ( 0 , 0 ) ; result [ t + 1 ] = sum ; } for ( i = t_temp ; i > 0 ; i -- ) { printf ( \"%d\n\" , result [ i ] ) ; } return 0 ; } int calculate ( int row , int col ) { int path1 , path2 ; if ( row > n ) { return 0 ; } else if ( temp [ row ] [ col ] != - 1 ) { return temp [ row ] [ col ] ; } else { path1 = calculate ( row + 1 , col ) ; path2 = calculate ( row + 1 , col + 1 ) ; if ( path1 > path2 ) { sum = a [ row ] [ col ] + path1 ; } else { sum = a [ row ] [ col ] + path2 ; } temp [ row ] [ col ] = sum ; return sum ; } }", "label": 1, "id": 9935}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int s [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & s [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = i ; j > 0 ; j -- ) { if ( s [ i ] [ j ] > s [ i ] [ j - 1 ] ) s [ i - 1 ] [ j - 1 ] += s [ i ] [ j ] ; else s [ i - 1 ] [ j - 1 ] += s [ i ] [ j - 1 ] ; } } printf ( \"%d\n\" , s [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2036}
{"input": "int arr [ 101 ] [ 101 ] , indArr [ 1001 ] ; int init ( ) { int i = 0 , j = 0 ; for ( ; i < 101 ; i ++ ) { indArr [ i ] = - 1 ; for ( ; j < 1001 ; j ++ ) arr [ i ] [ j ] = - 1 ; } indArr [ 0 ] = 0 ; } int findMax ( int index , int rowC ) { int indexM = 0 , i = 0 ; for ( ; i <= rowC ; i ++ ) { if ( arr [ index ] [ i ] > arr [ index ] [ indexM ] ) indexM = i ; } return indexM ; } int findMax2 ( int index , int rowC ) { if ( rowC == 0 ) return rowC ; else if ( arr [ index ] [ rowC ] == - 1 ) return rowC - 1 ; else { if ( arr [ index ] [ rowC ] > arr [ index ] [ rowC - 1 ] ) return rowC ; else return rowC - 1 ; } } void SumMaxLength ( int startI , int rowC ) { int sumMax = 0 , j = rowC - 2 , indexM = 0 ; indexM = findMax ( startI + rowC - 1 , rowC ) ; sumMax = arr [ startI + rowC - 1 ] [ indexM ] ; for ( ; j >= 0 ; j -- ) { indexM = findMax2 ( startI + j , indexM ) ; sumMax += arr [ startI + j ] [ indexM ] ; } printf ( \"%d\n\" , sumMax ) ; } int main ( ) { int i = 0 , cnt = 0 , len = 0 , val , j = 0 , indarr = 0 ; scanf ( \"%d\" , & cnt ) ; indArr [ indarr ++ ] = 0 ; while ( cnt -- ) { scanf ( \"%d\" , & val ) ; indArr [ indarr ] = indArr [ indarr - 1 ] + val ; len = 1 ; while ( val -- ) { for ( j = 0 ; j < len ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; i ++ ; len ++ ; } SumMaxLength ( indArr [ indarr - 1 ] , indArr [ indarr ] - indArr [ indarr - 1 ] ) ; indarr ++ ; } return 0 ; }", "label": 3, "id": 11685}
{"input": "void main ( ) { int t , i , j , n , a [ 100000 ] , num [ 100000 ] , sum , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { num [ i ] = a [ i + 1 ] ; } else { num [ i ] = a [ i ] ; temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; } } for ( i = 0 ; i < n - 1 ; i ++ ) { sum = sum + num [ i ] ; } printf ( \"%d\n\" , sum ) ; } }", "label": 1, "id": 20591}
{"input": "long int gcd ( long int a , long int b ) { while ( ( b % a ) != 0 ) { long int r = b % a ; b = a ; a = r ; } printf ( \"%ld \" , a ) ; return a ; } main ( ) { long int a , b , t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } printf ( \"%ld\n\" , ( a * b ) / ( long int ) gcd ( a , b ) ) ; } }", "label": 0, "id": 9463}
{"input": "int main ( ) { int t ; long long i , a , b , rem , p , q , l ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; p = a ; q = b ; rem = a % b ; while ( rem > 0 ) { a = b ; b = rem ; rem = a % b ; } l = ( p * q ) / b ; printf ( \"%lld %lld\n\" , b , l ) ; } return 0 ; }", "label": 0, "id": 21132}
{"input": "int main ( ) { long int t , i , j ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } long int min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 16739}
{"input": "long int gcd ( long a , long b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } long int lcm ( long int num1 , long int num2 ) { long int gcdnum = gcd ( num1 , num2 ) ; return ( num1 * num2 ) / gcdnum ; } int main ( ) { int nTestCases ; int nA , nB ; scanf ( \"%d\" , & nTestCases ) ; while ( nTestCases -- ) { scanf ( \"%d %d\" , & nA , & nB ) ; long int ll_lcm = 0 ; long int ll_gcd = 0 ; ll_lcm = lcm ( nA , nB ) ; ll_gcd = gcd ( nA , nB ) ; printf ( \"%ld %ld\n\" , ll_gcd , ll_lcm ) ; } return 0 ; }", "label": 0, "id": 26392}
{"input": "int a [ 100 ] [ 100 ] ; int n ; int readint ( ) { int n = 0 ; char c = getchar_unlocked ( ) ; while ( c >= '0' && c <= '9' ) { n = ( n * 10 ) + ( c - '0' ) ; c = getchar_unlocked ( ) ; } return n ; } main ( ) { int T , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 23416}
{"input": "int main ( ) { int n , lines , i , j , a [ 100 ] [ 100 ] , x ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = lines - 2 ; i >= 0 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { x = ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = a [ i ] [ j ] + x ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 753}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; int num1 , num2 , temp1 , temp2 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; temp1 = gcd ( num1 , num2 ) ; temp2 = ( num1 * num2 ) / temp1 ; printf ( \"%d %d\n\" , temp1 , temp2 ) ; } return 0 ; }", "label": 1, "id": 5036}
{"input": "int maxSum ( ) { int n ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; int i = 0 , j = 0 , max = 0 , max1 = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) max = max + a [ i ] [ 0 ] ; max1 = max + a [ n - 1 ] [ 1 ] - a [ n - 1 ] [ 0 ] ; if ( max > max1 ) return max ; else return max1 ; } main ( ) { int b [ 100 ] , n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { b [ i ] = maxSum ( ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , b [ i ] ) ; } }", "label": 3, "id": 5780}
{"input": "int main ( ) { int t , n , min , i ; scanf ( \"%d\" , & t ) ; int count = 0 ; while ( count < t ) { scanf ( \"%d\" , & n ) ; min = 1000001 ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < min ) { min = arr [ i ] ; } } long long cost ; cost = ( n - 1 ) * min ; printf ( \"%lld\n\" , cost ) ; count ++ ; } }", "label": 0, "id": 8097}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int x = a * b ; printf ( \"%d %d\n\" , gcd ( a , b ) , x / gcd ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 6514}
{"input": "int lines ; int data [ 100 ] [ 100 ] ; int solve ( ) { int i , j ; for ( i = lines - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) if ( data [ i + 1 ] [ j ] > data [ i + 1 ] [ j + 1 ] ) data [ i ] [ j ] += data [ i + 1 ] [ j ] ; else data [ i ] [ j ] += data [ i + 1 ] [ j + 1 ] ; } return data [ 0 ] [ 0 ] ; } int main ( int argc , char * argv [ ] ) { int n , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & data [ i ] [ j ] ) ; } printf ( \"%d\n\" , solve ( ) ) ; } return 0 ; }", "label": 0, "id": 7408}
{"input": "int main ( ) { long long int i , t , n , j , k , c , ans = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; long long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; j = 0 ; ans = 0 ; while ( j < n - 1 ) { c = 1 ; if ( a [ j ] <= a [ j + 1 ] ) { while ( ( a [ j ] <= a [ j + 1 ] ) && ( j < n - 1 ) ) { c ++ ; j ++ ; } ans += c * ( c - 1 ) / 2 ; } else j ++ ; } printf ( \"%d \" , ans + n ) ; } }", "label": 1, "id": 3754}
{"input": "int main ( void ) { long long t ; scanf ( \"%lld\" , & t ) ; while ( t -- != 0 ) { long long n , arr [ 50005 ] , i , min = 100005 , a ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } a = ( n - 1 ) * min ; printf ( \"%lld\n\" , a ) ; } return 0 ; }", "label": 0, "id": 19186}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n ; scanf ( \"%lld\" , & n ) ; int a [ n ] , min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( i == 0 ) min = a [ i ] ; else if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } }", "label": 0, "id": 15475}
{"input": "int max ( int , int ) ; int main ( ) { int test , line , i , j , temp ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & line ) ; int arr [ line ] [ line ] , table [ line ] [ line ] ; for ( i = 0 ; i < line ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; table [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; for ( i = 1 ; i < line ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) table [ i ] [ j ] = table [ i - 1 ] [ j ] + arr [ i ] [ j ] ; else if ( i == j ) table [ i ] [ j ] = table [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; else table [ i ] [ j ] = max ( table [ i - 1 ] [ j ] , table [ i - 1 ] [ j - 1 ] ) + arr [ i ] [ j ] ; } } temp = 0 ; for ( i = 0 ; i < line ; i ++ ) if ( table [ line - 1 ] [ i ] > temp ) temp = table [ line - 1 ] [ i ] ; printf ( \"%d\n\" , temp ) ; } exit ( 0 ) ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 0, "id": 23379}
{"input": "int main ( ) { int a , b , c , i , j , k ; int large , small ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { large = a ; } else large = b ; if ( a > b ) { small = b ; } else small = a ; for ( i = 1 ; i <= large ; i ++ ) { for ( j = 1 ; j <= large ; j ++ ) { if ( a * i == b * j ) { c = a * i ; printf ( \"%d\" , c ) ; break ; } } } for ( i = 1 ; i <= small ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { c = i ; } } printf ( \" %d\" , c ) ; return 0 ; }", "label": 1, "id": 23039}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; if ( test < 1 || test > 1000 ) { return 0 ; } else { int ans [ 2 * test ] ; int ui ; int t = 0 ; for ( ui = 0 ; ui < test ; ui ++ ) { int a ; int b ; scanf ( \"%d %d\" , & a , & b ) ; if ( ( a < 1 || a > 1000000 ) || ( b < 1 || b > 1000000 ) ) { return 0 ; } else { int lcm = 1 , hcf = 1 ; int temp ; if ( a > b ) { temp = a ; a = b ; b = temp ; } int x = a , y = b ; int i ; int lcmdone = 0 ; int count = 0 ; for ( i = 2 ; i <= y ; i ++ ) { if ( x % i == 0 ) { lcm *= i ; x /= i ; lcmdone ++ ; count ++ ; } if ( y % i == 0 ) { if ( lcmdone == 0 ) { lcm *= i ; } y /= i ; lcmdone = 0 ; count ++ ; } if ( count != 0 ) { i = 1 ; count = 0 ; lcmdone = 0 ; } } hcf = a * b / lcm ; ans [ t ++ ] = hcf ; ans [ t ++ ] = lcm ; } } int q ; for ( q = 0 ; q < 2 * test ; q = q + 2 ) { printf ( \"%d %d\" , ans [ q ] , ans [ q + 1 ] ) ; printf ( \"\n\" ) ; } } }", "label": 1, "id": 23333}
{"input": "int main ( ) { int n , l , i , j , k , a [ 102 ] [ 102 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & l ) ; for ( j = 0 ; j < l ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; for ( j = l - 2 ; j >= 0 ; j -- ) for ( k = 0 ; k <= j ; k ++ ) a [ j ] [ k ] += ( ( a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ) ? ( a [ j + 1 ] [ k ] ) : ( a [ j + 1 ] [ k + 1 ] ) ) ; printf ( \"%d/n\" , a [ 0 ] [ 0 ] ) ; } getchar ( ) ; getchar ( ) ; return 0 ; }", "label": 1, "id": 11727}
{"input": "int main ( ) { int n ; int i ; long int a ; long int b ; int j ; j = 0 ; scanf ( \"%d\" , & n ) ; long int gcd [ n ] ; long int lcm [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d %d\" , & a , & b ) ; if ( a > b ) { for ( i = 1 ; i <= b ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) gcd [ j ] = i ; } j += 1 ; } else if ( b > a ) { for ( i = 1 ; i <= a ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) gcd [ j ] = i ; } j += 1 ; } for ( i = 0 ; i < n ; i ++ ) { lcm [ i ] = ( a * b ) / gcd [ i ] ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d %d\" , gcd [ i ] , lcm [ i ] ) ; } return 0 ; }", "label": 3, "id": 22104}
{"input": "void main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int lcm , n1 , n2 , m ; scanf ( \"%d %d\" , & n1 , & n2 ) ; m = ( n1 < n2 ) ? n1 : n2 ; while ( 1 ) { if ( n1 % m == 0 && n2 & m == 0 ) { lcm = m ; break ; } ++ m ; } printf ( \"%d %d\" , ( n1 * n2 ) / lcm , lcm ) ; } }", "label": 2, "id": 23892}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm , T , temp ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d \" , gcd ) ; printf ( \"%d \" , lcm ) ; } return 0 ; }", "label": 1, "id": 24413}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , x , min = INT_MAX ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & x ) ; if ( x < min ) min = x ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 21139}
{"input": "int main ( ) { int test_case ; long long int n , count , sum , i ; scanf ( \"%d\" , & test_case ) ; while ( test_case -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; count = 1 ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - 1 ] ) { count ++ ; } else { sum = sum + ( count * ( count + 1 ) / 2 ) ; count = 1 ; } } sum = sum + ( count * ( count + 1 ) / 2 ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 4117}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int m ; scanf ( \"%d\" , & m ) ; int d , i , tmp , count = 0 ; scanf ( \"%d\" , & tmp ) ; for ( i = 1 ; i < m ; i ++ ) { scanf ( \"%d\" , & d ) ; if ( tmp < d ) count += tmp ; else { count += d ; tmp = d ; } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 1, "id": 24690}
{"input": "char a [ 5050 ] ; int main ( ) { int t , n , temp , i , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < ( n * ( n + 1 ) ) / 2 ; i ++ ) { scanf ( \"%d\" , & temp ) ; a [ i ] = temp ; } for ( l = n - 1 ; l >= 1 ; l -- ) for ( i = 0 ; i < l ; i ++ ) { temp = ( l * ( l - 1 ) ) / 2 ; a [ temp + i ] += a [ temp + i + l ] > a [ temp + i + l + 1 ] ? a [ temp + i + l ] : a [ temp + i + l + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 15305}
{"input": "int ans [ 100 ] [ 100 ] ; int trgl [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int maxsum ( int tot ) { int x , col ; for ( x = tot - 1 ; x >= 0 ; x -- ) { if ( x == tot - 1 ) { for ( col = 0 ; col < tot ; col ++ ) ans [ x ] [ col ] = trgl [ x ] [ col ] ; } else { for ( col = 0 ; col <= x ; col ++ ) ans [ x ] [ col ] = trgl [ x ] [ col ] + max ( ans [ x + 1 ] [ col ] , ans [ x + 1 ] [ col + 1 ] ) ; } } return ans [ 0 ] [ 0 ] ; } void triangle ( int number ) { int row , col ; for ( col = 0 ; col < number ; col ++ ) { for ( row = 0 ; row <= col ; row ++ ) { scanf ( \"%d\" , & trgl [ col ] [ row ] ) ; printf ( \"\" ) ; } } printf ( \"%d\n\" , maxsum ( number ) ) ; } void do_it ( ) { int number ; scanf ( \"%d\" , & number ) ; triangle ( number ) ; } int main ( ) { int x , n ; scanf ( \"%d\" , & x ) ; for ( n = 0 ; n < x ; n ++ ) do_it ( ) ; return 0 ; }", "label": 0, "id": 26780}
{"input": "int main ( void ) { int t , temp ; long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; int temp1 = a * b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } while ( b > 1 ) { temp = a % b ; if ( temp == 0 ) break ; a = b ; b = temp ; } printf ( \"%d %d\n\" , b , temp1 / b ) ; } return 0 ; }", "label": 1, "id": 25573}
{"input": "int a [ 100 ] [ 100 ] ; int max ( int i , int j ) { if ( i >= j ) { return i ; } else return j ; } int main ( ) { int c , n , i , j ; scanf ( \"%d\" , & c ) ; while ( c -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 460}
{"input": "void check ( int * * , int ) ; void make_triangle ( int ) ; int main ( ) { int i , test_cases ; scanf ( \"%d\" , & test_cases ) ; int height ; for ( i = 0 ; i < test_cases ; i ++ ) { scanf ( \"%d\" , & height ) ; make_triangle ( height ) ; } return 0 ; } void make_triangle ( int height ) { int * a [ height ] ; int i , j ; for ( i = 0 ; i < height ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; if ( a [ i ] == NULL ) { fprintf ( stderr , \"malloc failed\n\" ) ; for ( j = 0 ; j < i ; j ++ ) { free ( a [ j ] ) ; } exit ( 1 ) ; } } for ( i = 0 ; i < height ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , ( a [ i ] + j ) ) ; } } check ( a , height ) ; } void check ( int * * a , int height ) { int i , j ; for ( i = height - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j + 1 <= i ; j ++ ) { if ( * ( a [ i ] + j ) > * ( a [ i ] + j + 1 ) ) { * ( a [ i - 1 ] + j ) += * ( a [ i ] + j ) ; } else { * ( a [ i - 1 ] + j ) += * ( a [ i ] + j + 1 ) ; } } } printf ( \"%d\n\" , * a [ 0 ] ) ; }", "label": 0, "id": 25993}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int T ; long long int A , B ; long long int lcm , hcf ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & A , & B ) ; hcf = gcd ( A , B ) ; lcm = ( A * B ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 5095}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { sum = sum + a [ i + 1 ] ; } else { sum = sum + a [ i ] ; } } printf ( \"%d\n\" , sum ) ; } }", "label": 1, "id": 9453}
{"input": "int main ( ) { int t , n , i , j , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] == a [ i ] + 1 || a [ j ] == a [ i ] - 1 ) { if ( a [ j ] > a [ i ] ) { c = a [ i ] ; break ; } else { c = a [ j ] ; break ; } } } } printf ( \"%d\n \" , c ) ; } return 0 ; }", "label": 2, "id": 7387}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b [ 100000 ] , i ; scanf ( \"%lld\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%lld\" , & b [ i ] ) ; } long long int min , s = 0 ; min = b [ 1 ] ; for ( i = 2 ; i <= a ; i ++ ) { if ( min > b [ i ] ) min = b [ i ] ; s = s + min ; } printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 1, "id": 6509}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 2332}
{"input": "int main ( ) { int T , row , init_a , curr_b , max , j , i , sum ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { sum = 0 ; scanf ( \"%d\" , & row ) ; scanf ( \"%d\" , & init_a ) ; max = init_a ; j = 2 ; while ( j <= row ) { for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & curr_b ) ; if ( curr_b > max ) { max = curr_b ; } } sum = sum + max ; max = 1 ; j ++ ; } printf ( \"%d\n\" , sum ) ; T -- ; } }", "label": 1, "id": 8499}
{"input": "int main ( void ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n , i , count = 0 ; long a [ 100001 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( i != 0 ) { if ( a [ i ] >= a [ i - 1 ] ) { count ++ ; } } } for ( i = count - 1 ; i > 1 ; i -- ) { count *= i ; } count += n ; printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 1, "id": 10602}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j - 1 ] ) a [ i - 1 ] [ j - 1 ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j - 1 ] += a [ i ] [ j - 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 390}
{"input": "int max ( int a , int b ) ; int main ( ) { int n , t , a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] , key , i , j , temp = 0 , temp1 = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) b [ i ] [ j ] = 0 ; while ( ( n -- ) > 0 ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) b [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == 0 ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j ] ; else b [ i ] [ j ] = a [ i ] [ j ] + max ( b [ i - 1 ] [ j ] , b [ i - 1 ] [ j - 1 ] ) ; } } key = a [ t - 1 ] [ 0 ] ; for ( i = 1 ; i < t ; i ++ ) if ( key < b [ t - 1 ] [ i ] ) key = b [ t - 1 ] [ i ] ; printf ( \"%d\n\" , key ) ; } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 18530}
{"input": "int main ( ) { int sum , t , n , a [ 101 ] [ 101 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26477}
{"input": "int hcf ( int n1 , int n2 ) { int dividend , divisor , rem = 1 ; if ( n1 > n2 ) { dividend = n1 ; divisor = n2 ; } else { dividend = n2 ; divisor = n1 ; } while ( rem != 0 ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; } return dividend ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int hello = hcf ( a , b ) ; int lcm , lcm2 ; lcm = ( a * b ) ; lcm2 = lcm / hello ; printf ( \"%d %d\n\" , hello , lcm2 ) ; } return 0 ; }", "label": 1, "id": 10432}
{"input": "int main ( void ) { long long int t , n , a [ 100000 ] , i , min ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 26605}
{"input": "int pop1 ( ) ; int pop2 ( ) ; int pop3 ( ) ; void push ( int , int , int ) ; int stack1 [ 6000 ] ; int stack2 [ 6000 ] , stack3 [ 6000 ] ; int top1 = - 1 , top2 = - 1 , top3 = - 1 ; int main ( ) { int t , r , i , j , m , n , s , a [ 100 ] [ 100 ] , x = 0 , sum [ 6000 ] , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { x = 0 ; scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } push ( 0 , 0 , 0 ) ; while ( top1 != - 1 && top2 != - 1 && top3 != - 1 ) { m = pop2 ( ) ; n = pop3 ( ) ; s = pop1 ( ) ; s = s + a [ m ] [ n ] ; for ( i = m ; i < r - 1 ; i ++ ) { push ( s , m + 1 , n + 1 ) ; s = s + a [ m + 1 ] [ n ] ; m = m + 1 ; } sum [ x ++ ] = s ; } max = sum [ 0 ] ; for ( i = 0 ; i < x ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; } void push ( int sum , int k , int l ) { if ( top1 == MAX - 1 ) printf ( \"stack overflow\" ) ; else { top1 ++ ; stack1 [ top1 ] = sum ; } if ( top2 == MAX - 1 ) printf ( \"stack overflow\" ) ; else { top2 ++ ; stack2 [ top2 ] = k ; } if ( top3 == MAX - 1 ) printf ( \"stack overflow\" ) ; else { top3 ++ ; stack3 [ top3 ] = l ; } } int pop1 ( ) { if ( top1 == - 1 ) printf ( \"stack underflow\" ) ; else { return ( stack1 [ top1 -- ] ) ; } } int pop2 ( ) { if ( top2 == - 1 ) printf ( \"stack underflow\" ) ; else { return ( stack2 [ top2 -- ] ) ; } } int pop3 ( ) { if ( top3 == - 1 ) printf ( \"stack underflow\" ) ; else { return ( stack3 [ top3 -- ] ) ; } }", "label": 3, "id": 10070}
{"input": "int maxsum ( int a [ ] , int n , int i , int j ) { int k1 , k2 , k3 ; if ( i > n ) return 0 ; else { k1 = maxsum ( a , n , i + 1 , j ) ; k2 = maxsum ( a , n , i + 1 , j + 1 ) ; if ( k1 > k2 ) return k1 + a [ i * ( i - 1 ) / 2 + j ] ; else return k2 + a [ i * ( i - 1 ) / 2 + j ] ; } } int main ( ) { int t , n , i , j , a [ 10001 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n * ( n + 1 ) / 2 ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int l = maxsum ( a , n , 0 , 0 ) ; printf ( \"%d\n\" , l ) ; } return 0 ; }", "label": 2, "id": 12907}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 9431}
{"input": "int main ( ) { int i , j , n , t , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; ++ i ) { for ( j = 1 ; j <= i ; ++ j ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 1 ; -- i ) { for ( j = 1 ; j <= i ; ++ j ) { ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? ( arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ) : ( arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 20818}
{"input": "long long gcd ( long long a , long long b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; long long a , b , d ; freopen ( \"Test.txt\" , \"r\" , stdin ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%I64d%I64d\" , & a , & b ) ; d = gcd ( a , b ) ; printf ( \"%I64d %I64d\n\" , d , a / d * b ) ; } return 0 ; }", "label": 1, "id": 6803}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int t , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i <= ( t - 1 ) ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( int i = ( t - 1 ) ; i > 0 ; i -- ) { for ( int j = 0 ; j < ( t - 1 ) ; j ++ ) { if ( a [ i ] [ j ] <= a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } else { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 553}
{"input": "int main ( ) { int t , n , i , c ; long int b [ max ] , a [ max ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; b [ 0 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) b [ i ] = b [ i - 1 ] + 1 ; else b [ i ] = 1 ; } for ( i = 0 ; i < n ; i ++ ) c += b [ i ] ; printf ( \"\n%d\" , c ) ; } return 0 ; }", "label": 3, "id": 6114}
{"input": "int main ( ) { int a , b , t , i , gcd , lcm ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\n\" , & a , & b ) ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } gcd = a ; lcm = ( a * b ) / a ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 13749}
{"input": "int count_subarray ( int a [ ] , int l , int r ) { int mid , count = 0 ; if ( l < r ) { mid = ( l + r ) / 2 ; count += count_subarray ( a , l , mid ) ; count = count + count_subarray ( a , mid + 1 , r ) ; if ( a [ mid ] <= a [ mid + 1 ] ) count ++ ; } return count ; } int main ( ) { int t , n , i , j , count ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; count = n + count_subarray ( a , 0 , n - 1 ) ; printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 1, "id": 807}
{"input": "void mergesort ( int [ ] , int , int ) ; void merge ( int [ ] , int [ ] , int [ ] , int , int ) ; void mergesort ( int arr [ ] , int start , int end ) { if ( end - start <= 1 ) { return ; } else { int mid = ( end - start ) / 2 ; int left [ mid ] ; int right [ end - mid ] ; for ( int i = 0 ; i < mid ; i ++ ) { left [ i ] = arr [ i ] ; } for ( int i = 0 ; i < end - mid ; i ++ ) { right [ i ] = arr [ i + mid ] ; } mergesort ( left , start , mid ) ; mergesort ( right , start , end - mid ) ; merge ( arr , left , right , sizeof ( left ) / 4 , sizeof ( right ) / 4 ) ; } } void merge ( int a [ ] , int l [ ] , int r [ ] , int len_l , int len_r ) { int k = len_l + len_r ; int i = 0 , j = 0 , x = 0 ; while ( x < k && ( i < len_l && j < len_r ) ) { if ( l [ i ] < r [ j ] ) { a [ x ] = l [ i ] ; i ++ ; } else { a [ x ] = r [ j ] ; j ++ ; } x ++ ; if ( i == len_l ) { for ( int az = j ; az < len_r ; az ++ ) { a [ x ] = r [ az ] ; x ++ ; } } else if ( j == len_r ) { for ( int az = i ; az < len_l ; az ++ ) { a [ x ] = l [ az ] ; x ++ ; } } } } int main ( ) { int tst , len , i , j ; scanf ( \"%d\" , & tst ) ; for ( i = 0 ; i < tst ; i ++ ) { long int ans ; scanf ( \"%d\" , & len ) ; long int min ; int chk [ len ] ; for ( j = 0 ; j < len ; j ++ ) { scanf ( \"%d\" , & chk [ j ] ) ; } mergesort ( chk , 0 , len ) ; ans = ( len - 1 ) * chk [ 0 ] ; printf ( \"%ld\n\" , ans ) ; } }", "label": 2, "id": 8217}
{"input": "int main ( ) { int i , k , j , b , t ; long long int n [ 50000 ] , sum , a [ 10 ] , min ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & b ) ; for ( j = 0 ; j < b ; j ++ ) { scanf ( \"%lld\" , & n [ j ] ) ; } min = n [ 0 ] ; for ( k = 1 ; k < b ; k ++ ) { if ( min > n [ k ] ) min = n [ k ] ; } a [ i ] = min * ( b - 1 ) ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"\n%lld\" , a [ i ] ) ; return 0 ; }", "label": 1, "id": 16348}
{"input": "int main ( ) { int n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int m , j , c ; scanf ( \"%d\" , & m ) ; int a [ m ] ; for ( j = 0 ; j < m ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } c = a [ 0 ] ; for ( j = 0 ; j < m ; j ++ ) { if ( a [ j ] < c ) c = a [ j ] ; } printf ( \"%d\n\" , c * ( m - 1 ) ) ; } return 0 ; }", "label": 0, "id": 17511}
{"input": "int max_sum ( int * triangle [ ] , int rows ) { int temp ; int i , j , prev_row ; int * temp_ptr ; for ( i = 1 , prev_row = 0 ; i < rows ; i ++ , prev_row ++ ) { triangle [ i ] [ 0 ] += triangle [ prev_row ] [ 0 ] ; temp_ptr = triangle [ prev_row ] ; for ( j = 1 ; j <= i ; j ++ ) { temp = triangle [ prev_row ] [ j ] > triangle [ prev_row ] [ j - 1 ] ? triangle [ prev_row ] [ j ] : triangle [ prev_row ] [ j - 1 ] ; triangle [ i ] [ j ] += temp ; } } i -- ; temp = triangle [ i ] [ 0 ] ; for ( j = 1 , temp_ptr = triangle [ i ] ; j <= i ; j ++ , temp_ptr ++ ) { if ( triangle [ i ] [ j ] > temp ) temp = triangle [ i ] [ j ] ; } return temp ; } int main ( ) { int test_cases ; int rows ; char str [ 300 ] ; char * temp ; int i , j , num ; int * triangle [ 100 ] = { NULL } ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%d\" , & rows ) ; fflush ( stdin ) ; for ( i = 0 ; i < rows ; i ++ ) { if ( triangle [ i ] == NULL ) triangle [ i ] = malloc ( sizeof ( int ) * ( i + 1 ) ) ; gets ( str ) ; temp = strtok ( str , delimiter ) ; j = 0 ; while ( temp ) { sscanf ( temp , \"%d\" , triangle [ i ] + j ) ; temp = strtok ( NULL , delimiter ) ; j ++ ; } } printf ( \"%d\n\" , max_sum ( triangle , rows ) ) ; } return 0 ; }", "label": 1, "id": 7088}
{"input": "int main ( ) { int t , A [ 100 ] , i , n , piv , cost = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } piv = A [ 0 ] ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( piv > A [ i + 1 ] ) piv = A [ i + 1 ] ; cost = cost + piv ; } printf ( \"%d\" , cost ) ; } return 0 ; }", "label": 2, "id": 365}
{"input": "int fastinput ( void ) { char c ; int input = 0 ; while ( ( c = getchar_unlocked ( ) ) < 33 ) ; while ( ( c = getchar_unlocked ( ) ) > 33 ) input = input * 10 + c - '0' ; return input ; } int main ( void ) { int a [ 100 ] [ 100 ] , i , j , n , t ; t = fastinput ( ) ; while ( t -- ) { n = fastinput ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = fastinput ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 3425}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; int result ; scanf ( \"%d%d\" , & a , & b ) ; result = gcd ( a , b ) ; long lcm = 0 ; if ( result != 0 ) { lcm = a * b / result ; } printf ( \"d\\td\n\" , result , lcm ) ; } } int gcd ( int a , int b ) { if ( b != 0 ) return gcd ( b , a % b ) ; else return a ; }", "label": 1, "id": 11466}
{"input": "int max1 ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a [ 105 ] [ 105 ] , i , j , count , cases , max2 ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { scanf ( \"%d\" , & count ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; a [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i < count ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j ] = max1 ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; } a [ i ] [ j + 1 ] = 0 ; } max2 = a [ count - 1 ] [ 0 ] ; for ( i = 0 ; i < count ; i ++ ) { if ( a [ count - 1 ] [ i ] > max2 ) max2 = a [ count - 1 ] [ i ] ; } printf ( \"%d\n\" , max2 ) ; } return 0 ; }", "label": 1, "id": 11522}
{"input": "int cmpfnc ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int t , n , * a ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i ; scanf ( \"%d\" , & n ) ; a = malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; qsort ( a , n , sizeof ( int ) , cmpfnc ) ; long long int k = a [ 0 ] * ( n - 1 ) ; printf ( \"%lld\n\" , k ) ; } return 0 ; }", "label": 0, "id": 25944}
{"input": "int mat [ 100 ] [ 100 ] = { 0 } ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int m , i , j ; scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & mat [ i ] [ j ] ) ; for ( i = m - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) { if ( mat [ i + 1 ] [ j ] > mat [ i + 1 ] [ j + 1 ] ) mat [ i ] [ j ] = mat [ i ] [ j ] + mat [ i + 1 ] [ j ] ; else mat [ i ] [ j ] = mat [ i ] [ j ] + mat [ i + 1 ] [ j + 1 ] ; } printf ( \"%d  \n\" , mat [ 0 ] [ 0 ] ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) mat [ i ] [ j ] = 0 ; } return 0 ; }", "label": 0, "id": 24598}
{"input": "int min ( int a , int b ) { if ( a < b ) return a ; else return b ; } int main ( ) { int a [ 100000 ] , sum = 0 , i , n , t , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { c = min ( a [ i ] , a [ i + 1 ] ) ; sum = sum + c ; } printf ( \"%d\n\" , sum ) ; sum = 0 ; } return 0 ; }", "label": 1, "id": 18273}
{"input": "int main ( ) { int i , j , t , k , count , status ; long int a [ 100001 ] , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 , status = 0 ; scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & a [ j ] ) ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ j ] > a [ j - 1 ] ) { status = 1 ; if ( j + 1 != n ) continue ; } if ( status == 1 ) count ++ ; status = 0 ; } printf ( \"%d\n\" , count + n ) ; } return 0 ; }", "label": 1, "id": 21687}
{"input": "int main ( void ) { int i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int triangle [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( triangle [ i + 1 ] [ j ] > triangle [ i + 1 ] [ j + 1 ] ) { triangle [ i ] [ j ] += triangle [ i + 1 ] [ j ] ; } else { triangle [ i ] [ j ] += triangle [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , triangle [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 20838}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 12355}
{"input": "long long GCD ( long long big , long long small ) { if ( big < small ) { return GCD ( small , big ) ; } if ( small == 0 ) { return big ; } return GCD ( small , big % small ) ; } int main ( void ) { long long testCases , a , b , c ; while ( scanf ( \"%lld\" , & testCases ) > 0 ) { while ( testCases > 0 ) { scanf ( \"%lld%lld\" , & a , & b ) ; c = GCD ( a , b ) ; printf ( \"%lld %lld\n\" , c , ( a * b ) / c ) ; testCases -- ; } } return EXIT_SUCCESS ; }", "label": 0, "id": 10951}
{"input": "int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( void ) { int n , i ; long long int a , b , lcm = 0 , c ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; c = gcd ( a , b ) ; lcm = ( a * b ) / c ; printf ( \"\n%lld\\t%lld\" , c , lcm ) ; } return 0 ; }", "label": 0, "id": 18769}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int min = INT_MAX ; int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 3434}
{"input": "int main ( ) { int n1 , n2 , x , a , y , gcd , i ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) { n1 = n1 - n2 ; } else { n2 = n2 - n1 ; } } printf ( \"%d\" , n1 ) ; gcd = n1 ; float lcm = ( x * y ) / gcd ; printf ( \"\n %f\" , lcm ) ; } return 0 ; }", "label": 1, "id": 12495}
{"input": "int main ( ) { int t , n , i , j , k , c ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { c = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( j == k ) c ++ ; else if ( a [ j ] < a [ k + 1 ] && a [ k ] - a [ j ] == 1 ) c ++ ; } } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 2, "id": 6654}
{"input": "int n ; int a [ 101 ] [ 101 ] ; int b [ 101 ] [ 101 ] ; int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] [ 0 ] ) ; b [ i ] [ 0 ] = b [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( b [ i - 1 ] [ j - 1 ] < b [ i - 1 ] [ j ] ) b [ i ] [ j ] = b [ i - 1 ] [ j ] ; else b [ i ] [ j ] = b [ i - 1 ] [ j - 1 ] ; b [ i ] [ j ] += a [ i ] [ j ] ; } scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ i ] [ j ] = b [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } int ma = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( b [ n - 1 ] [ i ] > ma ) ma = b [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , ma ) ; } return 0 ; }", "label": 0, "id": 10516}
{"input": "int main ( ) { int n , i ; long h , l ; scanf ( \"%d\" , & n ) ; long a [ 2 ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld %ld\" , & a [ 0 ] [ i ] , & a [ 1 ] [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( h = a [ 0 ] [ i ] < a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; h >= 1 ; h -- ) { if ( a [ 0 ] [ i ] % h == 0 && a [ 1 ] [ i ] % h == 0 ) break ; } printf ( \"%ld \" , h ) ; for ( l = a [ 0 ] [ i ] > a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; l <= a [ 0 ] [ i ] * a [ 1 ] [ i ] ; l += ( a [ 0 ] [ i ] > a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ) ) if ( l % a [ 0 ] [ i ] == 0 && l % a [ 1 ] [ i ] == 0 ) break ; printf ( \"%ld\n\" , l ) ; } return 0 ; }", "label": 2, "id": 13716}
{"input": "long long int arr [ 100 ] [ 100 ] ; long long int m [ 100 ] [ 100 ] ; int findmax ( int a , int b ) { return a > b ? a : b ; } long long int maxsum ( int i , int j , int l ) { if ( i == l - 1 ) return arr [ i ] [ j ] ; else m [ i ] [ j ] = arr [ i ] [ j ] + findmax ( maxsum ( i + 1 , j , l ) , maxsum ( i + 1 , j + 1 , l ) ) ; return m [ i ] [ j ] ; } int main ( ) { long long int sum ; int t , n ; int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } sum = maxsum ( 0 , 0 , n ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 24630}
{"input": "int main ( ) { int t , A [ 100 ] [ 100 ] , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) if ( A [ i ] [ j ] > A [ i ] [ j + 1 ] ) A [ i - 1 ] [ j ] += A [ i ] [ j ] ; else A [ i - 1 ] [ j ] += A [ i ] [ j + 1 ] ; printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22480}
{"input": "short int n , cse , * a [ 100 ] , * b [ 100 ] ; int main ( ) { scanf ( \"%d\" , & cse ) ; short int i , j ; do { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) { a [ i ] = ( short int * ) malloc ( ( i + 1 ) * ( sizeof ( short int ) ) ) ; b [ i ] = ( short int * ) malloc ( ( i + 1 ) * ( sizeof ( short int ) ) ) ; } for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; ++ i ) { b [ i ] [ 0 ] = a [ i ] [ 0 ] + b [ i - 1 ] [ 0 ] ; b [ i ] [ i ] = a [ i ] [ i ] + b [ i - 1 ] [ i - 1 ] ; } for ( i = 2 ; i < n ; ++ i ) for ( j = 1 ; j < i ; ++ j ) ( b [ i ] [ j ] = a [ i ] [ j ] + ( max ( b [ i - 1 ] [ j ] , b [ i - 1 ] [ j - 1 ] ) ) ) ; j = b [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; ++ i ) if ( j < b [ n - 1 ] [ i ] ) j = b [ n - 1 ] [ i ] ; printf ( \"%d\n\" , j ) ; cse -- ; for ( i = 0 ; i < n ; ++ i ) { free ( a [ i ] ) ; free ( b [ i ] ) ; } } while ( cse ) ; return 0 ; }", "label": 3, "id": 2432}
{"input": "int main ( ) { int a ; scanf ( \"%d\" , & a ) ; while ( a -- ) { long long int n ; scanf ( \"%lld\" , & n ) ; long long int sum = 0 , c = 1 , k , l ; scanf ( \"%lld\" , & k ) ; n = n - 1 ; while ( n -- ) { scanf ( \"%lld\" , & l ) ; if ( l < k ) { sum = sum + ( c * ( c + 1 ) ) / 2 ; c = 1 ; } else c ++ ; k = l ; } sum = sum + ( c * ( c + 1 ) ) / 2 ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 152}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , z ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { z = max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; a [ i ] [ j ] = a [ i ] [ j ] + z ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 12736}
{"input": "int main ( ) { int n , t , k , i , j ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 21661}
{"input": "void main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; int x = a , y = b , r ; while ( y ) { r = x % y ; x = y ; y = r ; } printf ( \"%d %d\n\" , x , a * b / x ) ; } }", "label": 1, "id": 23623}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; int A [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; } } int k ; i = n - 2 ; while ( i >= 0 ) { for ( k = 0 ; k <= i ; k ++ ) { int a , b , c ; a = A [ i ] [ k ] + A [ i + 1 ] [ k ] ; b = A [ i ] [ k ] + A [ i + 1 ] [ k + 1 ] ; c = a - b ; if ( c > 0 ) { A [ i ] [ k ] = a ; } else { A [ i ] [ k ] = b ; } } i -- ; } printf ( \"%d\n \n\" , A [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 13653}
{"input": "void fun ( ) ; int sum = 0 ; int main ( ) { int c = 0 , i = 0 , j = 1 , n , k , nl , o , t , p , a [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( o = 0 ; o < t ; o ++ ) { scanf ( \"%d\" , & nl ) ; n = ( nl * ( nl + 1 ) ) / 2 ; for ( p = 0 ; p < n ; p ++ ) scanf ( \"%d\" , & a [ p ] ) ; fun ( c , i , j , a , n ) ; printf ( \"%d\" , sum ) ; sum = 0 ; } return 0 ; } void fun ( int c , int i , int j , int a [ ] , int n ) { c = c + a [ i ] ; if ( c > sum ) { sum = c ; } if ( i + j >= n ) { return ; } fun ( c , i + j , j + 1 , a , n ) ; fun ( c , i + j + 1 , j + 1 , a , n ) ; }", "label": 3, "id": 16053}
{"input": "long long int compare ( long long int * a , long long int * b ) { long long int l , n ; l = * a ; n = * b ; return ( l - n ) ; } int cmpfunc ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( void ) { int x ; scanf ( \"%d\" , & x ) ; while ( x -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int values [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & values [ i ] ) ; } qsort ( values , n , sizeof ( int ) , cmpfunc ) ; printf ( \"%d\n\" , values [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 16760}
{"input": "int main ( ) { int i , n , j , t , min ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; int * A = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , A + j ) ; min = * ( A ) ; for ( j = 0 ; j < n ; j ++ ) { if ( min > * ( A + j ) ) min = * ( A + j ) ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 16519}
{"input": "int a [ 105 ] [ 105 ] = { - 1 , - 1 } ; int m ( int a , int b ) { if ( a > b ) return ( a ) ; return ( b ) ; } int main ( ) { int t , n , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , a [ 1 ] [ 1 ] ) ; if ( n > 1 ) for ( i = 2 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , a [ i ] [ j ] ) ; if ( i == j ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += m ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; } max = a [ n ] [ 1 ] ; for ( j = 1 ; j <= n ; j ++ ) { if ( a [ n ] [ j ] > max ) max = a [ n ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return ( 0 ) ; }", "label": 3, "id": 6665}
{"input": "int arr [ 50000 + 5 ] = { 0 } ; int main ( ) { int tc ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { int n , min = 0 ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( i == 0 ) min = arr [ 0 ] ; else { if ( min > arr [ i ] ) min = arr [ i ] ; } } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 23764}
{"input": "int main ( ) { int t , a , b , x , r , i , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { r = 1 ; x = a > b ? b : a ; scanf ( \"%d %d\" , & a , & b ) ; for ( i = x ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { r = i ; break ; } } gcd = r ; lcm = ( a * b ) / r ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 22315}
{"input": "int main ( ) { int t ; long n1 , n2 , gcd , lcm , d , i , g ; scanf ( \"%d\" , t ) ; while ( t != 0 ) { scanf ( \"%ld%ld\" , & n1 , & n2 ) ; d = n1 > n2 ? n2 : n1 ; for ( i = 1 ; i <= d ; i ++ ) { g = d * i ; if ( n1 % g == 0 && n2 % g == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%ld  %ld\" , n1 , n2 ) ; t -- ; } return 0 ; }", "label": 3, "id": 16478}
{"input": "int main ( void ) { int t , n , a , m ; unsigned long long min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; min = 100001 ; m = n ; while ( m -- ) { scanf ( \"%d\" , & a ) ; if ( a < min ) { min = a ; } } printf ( \"%llu\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 13008}
{"input": "int main ( ) { int T , n , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 1881}
{"input": "int main ( ) { int t , a [ 99 ] [ 99 ] , n , i , j , b [ 10000 ] , c = 0 , sum , s , lar , k ; scanf ( \"%d\" , & t ) ; while ( t ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 0 ; j < n ; j ++ ) { for ( i = j ; i < n ; i ++ ) { sum = sum + a [ i ] [ j ] ; } b [ c ] = sum ; c ++ ; sum = 0 ; } sum = 0 ; for ( k = 1 ; k < n ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { s = j ; for ( i = j ; i < n ; i ++ ) { if ( ( i == ( j + k ) ) && ( n - j != 1 ) ) s = j ++ ; sum = sum + a [ i ] [ s ] ; } b [ c ] = sum ; c ++ ; sum = 0 ; } } lar = b [ 0 ] ; for ( i = 0 ; i < c ; i ++ ) { if ( b [ i ] > lar ) lar = b [ i ] ; } printf ( \"%d\n\" , lar ) ; t -- ; } return 0 ; }", "label": 3, "id": 19006}
{"input": "int main ( ) { int T , A , B ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int p = 0 , q = 0 , l = 0 ; scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { p = A ; q = B ; } else { p = B ; q = A ; } l = p % q ; while ( l > 0 ) { p = q ; q = l ; l = p % q ; } int GCD = q ; int LCM = ( A * B ) / GCD ; printf ( \"%d %d\" , GCD , LCM ) ; } }", "label": 1, "id": 21386}
{"input": "long long int GCD ( long long int a , long long int b ) { if ( b == 0 ) { return a ; } else { GCD ( b , a % b ) ; } } int main ( ) { long long int a , c , d , l ; scanf ( \"%lld\" , & a ) ; while ( a -- ) { scanf ( \"%lld%lld\" , & c , & d ) ; l = GCD ( c , d ) ; a = ( c * d ) / ( l ) ; printf ( \"%lld %lld\n\" , l , a ) ; } return 0 ; }", "label": 2, "id": 12733}
{"input": "int a [ 110 ] [ 110 ] ; int b [ 110 ] [ 110 ] ; int main ( ) { int t , n , i , j , z ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) for ( z = 0 ; z <= j ; z ++ ) scanf ( \"%d\" , & a [ j ] [ z ] ) ; for ( j = n - 1 ; j >= 0 ; j -- ) for ( z = 0 ; z <= j ; z ++ ) { if ( j == n - 1 ) b [ j ] [ z ] = a [ j ] [ z ] ; else { b [ j ] [ z ] = b [ j + 1 ] [ z ] > b [ j + 1 ] [ z + 1 ] ? b [ j + 1 ] [ z ] : b [ j + 1 ] [ z + 1 ] ; b [ j ] [ z ] += a [ j ] [ z ] ; } } printf ( \"%d\n\" , b [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 25403}
{"input": "int main ( void ) { int t , n , arr [ MAX ] [ MAX ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int i , j , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26652}
{"input": "long long int gcd ( long int , long int ) ; int main ( ) { long int t , a , b ; long long int h , l ; scanf ( \"%lu\" , & t ) ; while ( t -- ) { scanf ( \"%lu %lu\" , & a , & b ) ; h = gcd ( a , b ) ; l = ( a * b ) / h ; printf ( \"%llu %llu\" , h , l ) ; } return 0 ; } long long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; }", "label": 1, "id": 12405}
{"input": "int a [ 102 ] [ 102 ] = { 0 } ; int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i = 0 ; for ( i = 0 ; i < test ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int j = 0 ; int k = 0 ; k = 0 ; j = 0 ; for ( k = 0 ; k < n ; k ++ ) { for ( j = 0 ; j <= k ; j ++ ) { scanf ( \"%d\" , & a [ k ] [ j ] ) ; } } for ( k = n - 2 ; k >= 0 ; k -- ) { for ( j = 0 ; j <= k ; j ++ ) { if ( a [ k + 1 ] [ j ] > a [ k + 1 ] [ j + 1 ] ) a [ k ] [ j ] += a [ k + 1 ] [ j ] ; else a [ k ] [ j ] += a [ k + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 184}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , x , y , temp , gcd , lcm ; scanf ( \"%ld%ld\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 26017}
{"input": "void distance ( int [ ] [ 100 ] , int [ ] [ 100 ] , int ) ; int max ( int [ ] [ 100 ] , int ) ; int main ( ) { int t , n , i , j ; int a [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { a [ i ] [ j ] = 0 ; sum [ i ] [ j ] = 0 ; } } scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; distance ( a , sum , n ) ; printf ( \"%d\n\" , max ( sum , n ) ) ; } return 0 ; } void distance ( int a [ ] [ 100 ] , int sum [ ] [ 100 ] , int n ) { int i , j ; for ( i = 1 ; i < n ; i ++ ) sum [ i ] [ 0 ] = a [ i ] [ 0 ] + sum [ i - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( sum [ i - 1 ] [ j ] > sum [ i - 1 ] [ j - 1 ] ) { sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } } } int max ( int sum [ ] [ 100 ] , int n ) { int temp , i ; temp = sum [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( temp < sum [ n - 1 ] [ i ] ) temp = sum [ n - 1 ] [ i ] ; } return temp ; }", "label": 0, "id": 17231}
{"input": "int main ( ) { int T ; long long int min , tmp , i , n ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%lld\" , & tmp ) ; if ( i == 0 ) min = tmp ; else if ( tmp < min ) min = tmp ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 5112}
{"input": "int main ( ) { int a , b , c , t ; scanf ( \"%d\" , & t ) ; if ( t >= 1 && t <= 1000 ) { while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d\\t%d\n\" , a , c / a ) ; } } return 0 ; }", "label": 1, "id": 17560}
{"input": "int main ( void ) { long t , n , i ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; long s = 100001 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < s ) { s = a [ i ] ; } } printf ( \"%ld\n\" , ( n - 1 ) * s ) ; } return 0 ; }", "label": 0, "id": 4458}
{"input": "int main ( void ) { int t , count = 0 , temp = 1 ; long int n ; int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long long int a [ n ] ; scanf ( \"%lld\" , & a [ 0 ] ) ; if ( n == 1 ) count == 1 ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i - 1 ] >= a [ i ] ) { count += ( temp * ( temp + 1 ) ) / 2 ; temp = 1 ; i = i - 1 ; } else { temp ++ ; } } printf ( \"%d\" , count ) ; } return 0 ; }", "label": 2, "id": 19668}
{"input": "int main ( ) { int t , n , sum , d , temp1 , temp2 ; int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } i = 0 ; j = 0 ; temp1 = 0 ; temp2 = 0 ; sum = arr [ 0 ] [ 0 ] ; while ( i < n - 1 ) { temp1 = sum + arr [ i + 1 ] [ j ] ; temp2 = sum + arr [ i + 1 ] [ j + 1 ] ; if ( temp1 > temp2 ) { sum = temp1 ; i = i + 1 ; } else { sum = temp2 ; i = i + 1 ; j = j + 1 ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 5830}
{"input": "int func ( int , int , int ) ; int c , p , arr [ 100 ] [ 100 ] ; int main ( ) { int i , j , n , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { c = 0 ; scanf ( \"%d\" , & p ) ; for ( j = 0 ; j < p ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & arr [ j ] [ k ] ) ; func ( 0 , 0 , 0 ) ; printf ( \"%d\" , c ) ; } return 0 ; } int func ( int sum , int i , int j ) { if ( i == p ) { sum = sum + arr [ i ] [ j ] ; if ( c < sum ) c = sum ; return 0 ; } else { sum = sum + arr [ i ] [ j ] ; i ++ ; func ( arr [ i ] [ j ] , i , j ) ; j ++ ; func ( arr [ i ] [ j ] , i , j ) ; } }", "label": 2, "id": 20640}
{"input": "int cost [ MAX ] [ MAX ] ; int dp [ MAX ] [ MAX ] ; int results [ MAX ] ; int main ( void ) { int i , j ; int n , numOfLines ; int max , count = 0 ; scanf ( \"%d\" , & n ) ; while ( n > count ) { scanf ( \"%d\" , & numOfLines ) ; for ( i = 0 ; i < numOfLines ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) cost [ i ] [ j ] = 0 ; for ( i = 0 ; i < numOfLines ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & cost [ i ] [ j ] ) ; for ( i = 0 ; i < numOfLines ; i ++ ) for ( j = 0 ; j <= numOfLines ; j ++ ) dp [ i ] [ j ] = 0 ; dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i < numOfLines ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( ( dp [ i - 1 ] [ j ] + cost [ i ] [ j ] ) > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + cost [ i ] [ j ] ; if ( ( dp [ i - 1 ] [ j ] + cost [ i ] [ j + 1 ] ) > dp [ i ] [ j + 1 ] ) dp [ i ] [ j + 1 ] = dp [ i - 1 ] [ j ] + cost [ i ] [ j + 1 ] ; } } max = 0 ; for ( i = 1 ; i < numOfLines ; i ++ ) if ( dp [ numOfLines - 1 ] [ i ] > dp [ numOfLines - 1 ] [ max ] ) max = i ; results [ count ] = dp [ numOfLines - 1 ] [ max ] ; count ++ ; } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , results [ i ] ) ; return 0 ; }", "label": 1, "id": 4559}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int arr [ 100000 ] ; int n ; int i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; } long long int cnt = 0 , flag = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= arr [ i + 1 ] ) cnt ++ ; } cnt = cnt + n ; printf ( \"%lld\" , cnt ) ; } return 0 ; }", "label": 1, "id": 8328}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long long a , b , z ; scanf ( \"%lld%lld\" , & a , & b ) ; long long x = a , y = b ; while ( b != 0 ) { int temp = a % b ; a = b ; b = temp ; } printf ( \"%lld %lld\n\" , a , x * y / a ) ; } }", "label": 0, "id": 11474}
{"input": "int main ( ) { int t , a , b , gcd , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( ( a != 0 ) || ( b != 0 ) ) { a = a % b ; if ( a == 0 ) { gcd = b ; break ; } b = b % a ; if ( b == 0 ) { gcd = a ; break ; } } printf ( \"%d %d\n\" , gcd , m * n / gcd ) ; } return 0 ; }", "label": 1, "id": 8981}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , rem ; long long pro ; scanf ( \"%d%d\" , & a , & b ) ; pro = a * b ; while ( b != 0 ) { rem = a % b ; a = b ; b = rem ; } pro = pro / a ; printf ( \"%ld %lld\n\" , a , pro ) ; } return 0 ; }", "label": 0, "id": 13165}
{"input": "void main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B , GCD , LCM , remainder , numerator , denominator ; scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } GCD = denominator ; LCM = A * B / GCD ; printf ( \"\\t%d\" , GCD ) ; printf ( \"\\t%d\n\" , LCM ) ; } }", "label": 1, "id": 21580}
{"input": "long long int gcd ( long long int n1 , long long int n2 ) { while ( n2 > 0 ) { long long int temp = n2 ; n2 = n1 % n2 ; n1 = temp ; } return n1 ; } int main ( ) { long long int a , b ; int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return 0 ; }", "label": 0, "id": 23172}
{"input": "int maximum ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int noTestCases , i , j , k , catchBuff , temp ; scanf ( \"%d\" , & noTestCases ) ; int arr [ noTestCases ] ; int maxBuff [ noTestCases ] ; for ( i = 0 ; i < noTestCases ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; catchBuff = arr [ i ] + 1 ; int buff [ catchBuff ] [ catchBuff ] ; maxBuff [ i ] = 0 ; for ( j = 0 ; j < catchBuff ; j ++ ) { for ( k = 0 ; k < catchBuff ; k ++ ) { buff [ j ] [ k ] = 0 ; } } for ( j = 1 ; j < catchBuff ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & temp ) ; buff [ j ] [ k ] = maximum ( ( temp + buff [ j - 1 ] [ k - 1 ] ) , ( temp + buff [ j - 1 ] [ k ] ) ) ; if ( buff [ j ] [ k ] > maxBuff [ i ] ) maxBuff [ i ] = buff [ j ] [ k ] ; } } } for ( i = 0 ; i < noTestCases ; i ++ ) { printf ( \"%d\n\" , maxBuff [ i ] ) ; } return 0 ; }", "label": 0, "id": 25913}
{"input": "int main ( ) { int T ; long long int N ; scanf ( \"%d\n\" , & T ) ; while ( T -- ) { scanf ( \"%lli\n\" , & N ) ; long long int a [ N ] , j , M ; for ( j = 0 ; j < N ; j ++ ) scanf ( \"%lli\" , & a [ j ] ) ; M = N ; while ( N -- ) { if ( a [ N - 1 ] < a [ N ] ) M = M + 1 ; } printf ( \"%lli\n\" , M ) ; } return 0 ; }", "label": 1, "id": 10654}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , n ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; int min = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 2994}
{"input": "unsigned long long min ( unsigned long long c , unsigned long long d ) { unsigned long mini = ( c < d ) ? c : d ; return mini ; } int main ( ) { unsigned int t , i ; unsigned long long a [ 2 ] , x , n , u ; unsigned long long cost ; do { scanf ( \"%d\" , & t ) ; } while ( t < 1 || t > 10 ) ; while ( t -- ) { do { scanf ( \"%llu\" , & n ) ; } while ( n < 2 || n > 50000 ) ; scanf ( \"%llu%llu\" , & a [ 0 ] , & a [ 1 ] ) ; x = min ( a [ 0 ] , a [ 1 ] ) ; cost = x ; if ( n == 2 ) { printf ( \"%llu\n\" , cost ) ; continue ; } for ( i = 2 ; i < n ; i ++ ) { scanf ( \"%llu\" , & a [ 1 ] ) ; u = min ( x , a [ 1 ] ) ; x = u ; cost += x ; } printf ( \"%llu\n\" , cost ) ; } }", "label": 1, "id": 22271}
{"input": "short * * table ; unsigned short * * arr ; unsigned short t ; short fill ( short row , short col ) { if ( table [ row ] [ col ] == - 1 ) { if ( row - 1 >= 0 ) { unsigned int val1 , val2 ; if ( col - 1 >= 0 ) { if ( table [ row - 1 ] [ col - 1 ] == - 1 ) { table [ row - 1 ] [ col - 1 ] = fill ( row - 1 , col - 1 ) ; } val1 = arr [ row ] [ col ] + table [ row - 1 ] [ col - 1 ] ; } else val1 = arr [ row ] [ col ] ; if ( col <= row - 1 ) { if ( table [ row - 1 ] [ col ] == - 1 ) { table [ row - 1 ] [ col ] = fill ( row - 1 , col ) ; } val2 = arr [ row ] [ col ] + table [ row - 1 ] [ col ] ; } else val2 = arr [ row ] [ col ] ; table [ row ] [ col ] = val1 >= val2 ? val1 : val2 ; } else table [ row ] [ col ] = arr [ row ] [ col ] ; } return table [ row ] [ col ] ; } unsigned short get_max ( ) { unsigned short i , max = 0 ; for ( i = 0 ; i < t ; i ++ ) { if ( max < fill ( t - 1 , i ) ) max = fill ( t - 1 , i ) ; } return max ; } int main ( ) { unsigned short n ; scanf ( \"%hu\" , & n ) ; while ( n -- > 0 ) { unsigned int i ; scanf ( \"%u\" , & t ) ; arr = ( unsigned short * * ) malloc ( sizeof ( unsigned short * ) * t ) ; table = ( short * * ) malloc ( sizeof ( short * ) * t ) ; for ( i = 0 ; i < t ; i ++ ) { unsigned short j ; arr [ i ] = ( unsigned short * ) malloc ( sizeof ( unsigned short ) * ( i + 1 ) ) ; table [ i ] = ( short * ) malloc ( sizeof ( short ) * ( i + 1 ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%hu\" , & arr [ i ] [ j ] ) ; table [ i ] [ j ] = - 1 ; } } printf ( \"%hu\n\" , get_max ( ) ) ; free ( arr ) ; arr = NULL ; free ( table ) ; table = NULL ; } return 0 ; }", "label": 0, "id": 26567}
{"input": "long long gcd ( long long m , long long n ) { while ( m != n ) { if ( m > n ) m = m - n ; else n = n - m ; } return m ; } int main ( ) { long long t , a , b , g ; scanf ( \"%lld\n\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , g , a * b / g ) ; } return 0 ; }", "label": 0, "id": 13679}
{"input": "typedef long long ll ; int main ( ) { ll t , n , x , cost , i , ss ; scanf ( \"%ld\" , & t ) ; ll small ; int a [ 50005 ] ; ll test , j = 0 , k ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( ss = 0 ; ss < n ; ss ++ ) { scanf ( \"%d \" , & a [ ss ] ) ; } small = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < small ) { small = a [ j ] ; } } printf ( \"%ld\n\" , ( small * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 6194}
{"input": "int main ( ) { int n , t , i , a [ 50000 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int key ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; key = a [ 0 ] ; for ( i = 1 ; i < t ; i ++ ) { if ( a [ i ] < key ) key = a [ i ] ; } printf ( \"%d\n\" , key * ( t - 1 ) ) ; } return 0 ; }", "label": 0, "id": 3855}
{"input": "int main ( ) { int a , b , r , t , prod ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; prod = a * b ; while ( 1 ) { r = a % b ; if ( r == 0 ) break ; b = r ; } printf ( \"%d %d \n\" , b , prod / b ) ; } return 0 ; }", "label": 1, "id": 21441}
{"input": "int main ( ) { int n , * * a , i = 0 , j = 0 , k = 0 , max = - 1000 , n1 ; scanf ( \"%d\" , & n ) ; if ( n > 100 ) return 0 ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & n1 ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n1 ) ; for ( i = 0 ; i < n1 ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } if ( n1 == 1 ) max = a [ 0 ] [ 0 ] ; for ( i = n1 - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 11835}
{"input": "long long int max ( long long int q [ ] , long long int p , long long int i ) { long long int x , y ; if ( i >= p ) { return 0 ; } else { x = q [ i ] + max ( q , p , 2 * i + 1 ) ; y = q [ i ] + max ( q , p , 2 * i + 2 ) ; if ( x > y ) { return x ; } else { return y ; } } } int main ( ) { long long int t , i , n , j , p , q , s ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; p = ( n * ( n + 1 ) ) / 2 ; long long int q [ p ] ; for ( j = 0 ; j < p ; j ++ ) { scanf ( \"%lld\" , & q [ j ] ) ; } s = max ( q , p , 0 ) ; printf ( \"%lld\n\" , s ) ; } }", "label": 1, "id": 10660}
{"input": "int main ( ) { int numberOfLines , j , i , k , numberOfInputs , * * content , sum = 0 , max ; scanf ( \"%d\" , & numberOfInputs ) ; for ( k = 0 ; k < numberOfInputs ; k ++ ) { sum = 0 ; scanf ( \"%d\" , & numberOfLines ) ; content = ( int * * ) calloc ( numberOfLines , sizeof ( int ) ) ; for ( i = 1 ; i <= numberOfLines ; i ++ ) { content [ i - 1 ] = ( int * ) calloc ( i , sizeof ( int ) ) ; } for ( i = 0 ; i < numberOfLines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & content [ i ] [ j ] ) ; } } for ( i = 0 ; i < numberOfLines ; i ++ ) { max = 0 ; for ( j = 0 ; j <= i ; j ++ ) { if ( max < content [ i ] [ j ] ) { max = content [ i ] [ j ] ; } } sum += max ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 9894}
{"input": "int main ( int argc , char const * argv [ ] ) { long int test , i , gcd ; long int A , B ; scanf ( \"%ld\" , & test ) ; while ( test -- ) { scanf ( \"%ld %ld\" , & A , & B ) ; for ( i = 1 ; i <= A && i <= B ; ++ i ) { if ( A % i == 0 && B % i == 0 ) { gcd = i ; } } long int lcm = ( A * B ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 15365}
{"input": "static int pos = 0 ; static int len = 0 ; static char buffer [ BUF_SIZE ] ; int A [ 150 ] [ 150 ] ; static inline int read_more ( void ) { len = read ( 0 , buffer , BUF_SIZE ) ; if ( len ) { pos = 0 ; return buffer [ pos ] ; } else { return 0 ; } } int readInt ( void ) { int i = 0 ; int c = '0' ; if ( pos + 16 < len ) { do { i = i * 10 + ( c - '0' ) ; c = buffer [ pos ] ; pos ++ ; } while ( c >= '0' && c <= '9' ) ; do { c = buffer [ pos ] ; pos ++ ; } while ( c < '0' || c > '9' ) ; pos -- ; } else { do { i = i * 10 + ( c - '0' ) ; c = ( pos < len ) ? buffer [ pos ] : read_more ( ) ; pos ++ ; } while ( c >= '0' && c <= '9' ) ; do { c = ( pos < len ) ? buffer [ pos ] : read_more ( ) ; pos ++ ; } while ( ( c < '0' || c > '9' ) && c ) ; pos -- ; } return i ; } int main ( int argc , char * argv [ ] ) { int T , n , i , j ; T = readInt ( ) ; while ( T -- ) { n = readInt ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] = readInt ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] += MAX ( A [ i + 1 ] [ j ] , A [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16521}
{"input": "int main ( ) { int arr [ 50020 ] , i , t , num , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( i == 0 ) min = arr [ i ] ; else { if ( arr [ i ] < min ) min = arr [ i ] ; } } printf ( \"%d\n\" , ( num - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 19911}
{"input": "int main ( void ) { int i , t , j ; long n , temp , min ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; min = 100001 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & temp ) ; if ( min > temp ) min = temp ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 118}
{"input": "long int main ( ) { long int t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long int n = 0 , i = 0 ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; long int min = 999999999 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } long int cost = 0 ; cost = min * ( n - 1 ) ; printf ( \"%ld\n\" , cost ) ; } }", "label": 0, "id": 4473}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } main ( ) { int t , q , i , j ; scanf ( \"%d\" , & t ) ; for ( q = 0 ; q < t ; q ++ ) { int n ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( i != 0 ) { if ( j == 0 ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; } } } } int lar = a [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ n - 1 ] [ i ] > a [ n - 1 ] [ i - 1 ] ) lar = a [ n - 1 ] [ i ] ; else lar = a [ n - 1 ] [ j - 1 ] ; } printf ( \"%d\n\" , lar ) ; } }", "label": 1, "id": 7351}
{"input": "int main ( ) { int i , hcf , a , b , prod1 , prod2 , num1 , num2 , t ; int n = 1 ; printf ( \"enter the value of t\" ) ; scanf ( \"%d\" , & t ) ; while ( n == t ) { printf ( \"enter the values of a &b\" ) ; scanf ( \"%d %d\" , & a , & b ) ; prod1 = num1 * a ; prod2 = num2 * b ; if ( prod1 < prod2 ) { num1 ++ ; } else { num2 ++ ; } if ( prod1 = prod2 ) { printf ( \"LCM is %d\" , prod1 ) ; } for ( i = 0 ; i < hcf ; i ++ ) { if ( a % i == 0 && b % i == 0 && i < hcf ) { printf ( \"hcf is %d\" , i ) ; } } n ++ ; } return ( 0 ) ; }", "label": 1, "id": 12331}
{"input": "int maxi ( int a , int b ) { return a < b ? b : a ; } int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( \"%d\" , & n ) ; int vec1 [ n + 1 ] [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & vec1 [ i ] [ j ] ) ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( j == 1 ) { vec1 [ i ] [ 1 ] = vec1 [ i - 1 ] [ j ] + vec1 [ i ] [ j ] ; } else if ( j == i ) { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j - 1 ] + vec1 [ i ] [ j ] ; } else if ( vec1 [ i - 1 ] [ j ] > vec1 [ i - 1 ] [ j - 1 ] ) { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j ] + vec1 [ i ] [ j ] ; } else { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j - 1 ] + vec1 [ i ] [ j ] ; } } } max = vec1 [ n ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( vec1 [ n ] [ i ] > max ) max = vec1 [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 26488}
{"input": "int main ( ) { int a , b , i , n , prod , gcd , rem ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; prod = a * b ; while ( b != 0 ) { rem = a % b ; a = b ; b = rem ; } printf ( \"\n%d %d\" , b , prod / b ) ; } return 0 ; }", "label": 3, "id": 2891}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; for ( int i = 1 ; i <= n ; i ++ ) { int p , a [ 1000 ] , s = 0 , t ; scanf ( \"%d\" , & p ) ; for ( int j = 1 ; j <= p ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( int j = 1 ; j <= p ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { s = s + a [ j + 1 ] ; } else { s = s + a [ j ] ; t = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = t ; } } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 3, "id": 4076}
{"input": "void main ( ) { unsigned int i , j , t , n , a [ 100000 ] , nos ; scanf ( \"%d\" , & t ) ; while ( t -- ) { nos = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( j < n - 1 ) for ( j = i ; j < n ; ) { if ( a [ j ] <= a [ j + 1 ] ) { nos ++ ; j ++ ; } else break ; } } printf ( \"%d\" , ( nos + n ) ) ; } }", "label": 1, "id": 12067}
{"input": "int m [ 100 ] [ 100 ] , visited [ 100 ] [ 100 ] , n ; int cal ( int , int ) ; int max ( int , int ) ; int max ( int a , int b ) { int c ; c = a > b ? a : b ; return c ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & m [ i ] [ j ] ) ; visited [ i ] [ j ] = - 1 ; } } printf ( \"%d\n\" , cal ( 0 , 0 ) ) ; } return 0 ; } int cal ( int i , int j ) { int t1 , t2 ; if ( i > n - 1 ) return 0 ; else if ( visited [ i ] [ j ] > 0 ) return visited [ i ] [ j ] ; else { t1 = cal ( i + 1 , j ) ; t2 = cal ( i + 1 , j + 1 ) ; visited [ i ] [ j ] = max ( t1 , t2 ) + m [ i ] [ j ] ; return visited [ i ] [ j ] ; } }", "label": 0, "id": 8088}
{"input": "long long gcd ( long long a , long long b ) { int t ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } return a ; } int main ( ) { int T ; long long a , b ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return 0 ; }", "label": 0, "id": 10868}
{"input": "int main ( ) { int num1 , num2 , i , hcf , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; for ( i = 1 ; i <= num1 || i <= num2 ; ++ i ) { if ( num1 % i == 0 && num2 % i == 0 ) hcf = i ; } printf ( \"%d %d\n\" , hcf , ( num1 * num2 ) / hcf ) ; } return 0 ; }", "label": 2, "id": 12912}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int a , b , c , e ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; while ( a % b != 0 ) { c = a % b ; a = b ; b = c ; } e = c * b ; printf ( \"%d %d\n\" , c , e ) ; } }", "label": 1, "id": 7991}
{"input": "int main ( ) { int t , n , i , a [ 50005 ] , small ; char s1 [ 105 ] , s2 [ 105 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; small = 100001 ; for ( i = 0 ; i < n ; i ++ ) if ( small >= a [ i ] ) small = a [ i ] ; printf ( \"%d\n\" , small * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 22605}
{"input": "int main ( ) { int test_cases , t ; int * arr , size ; int i , min ; int count = 0 ; scanf ( \"%d\" , & test_cases ) ; for ( t = 0 ; t < test_cases ; t ++ ) { scanf ( \"%d\" , & size ) ; arr = ( int * ) calloc ( size , sizeof ( int ) ) ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } min = arr [ 0 ] ; for ( i = 1 ; i < size ; i ++ ) { if ( arr [ i ] != min ) { ++ count ; if ( arr [ i ] < min ) { min = arr [ i ] ; } } } printf ( \"%d\n\" , min * count ) ; free ( arr ) ; } return 0 ; } int min ( int x , int y ) { if ( x <= y ) { return x ; } return y ; }", "label": 1, "id": 21494}
{"input": "int q ( int a [ ] [ 100 ] , int i , int j , int r , int s ) { s = s + a [ i ] [ j ] ; if ( i < r ) s = q ( a , i + 1 , j , r , s ) > q ( a , i + 1 , j + 1 , r , s ) ? q ( a , i + 1 , j , r , s ) : q ( a , i + 1 , j + 1 , r , s ) ; return s ; } main ( ) { int a [ 100 ] [ 100 ] , t , i , j , r , s = 0 ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & r ) ; for ( i = 1 ; i <= r ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; i = 1 ; j = 1 ; s = 0 ; s = q ( a , i , j , r , s ) ; printf ( \"%d\n\" , s ) ; t -- ; } }", "label": 2, "id": 9221}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int ar [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & ar [ i ] ) ; } int br [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ar [ i ] > ar [ i + 1 ] ) { br [ i ] = ar [ i + 1 ] ; ar [ i ] = '\\0' ; } else { br [ i ] = ar [ i ] ; ar [ i + 1 ] = '\\0' ; } } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + br [ i ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 2841}
{"input": "int t , n , a [ 110 ] [ 110 ] , i , j , k , l , m , n , p ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } if ( n == 1 ) printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; else { for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } } return 0 ; }", "label": 0, "id": 24458}
{"input": "int main ( ) { int t , b , a , i , s , g , l , j ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) s = a ; else s = b ; for ( j = 1 ; j <= s ; j ++ ) { if ( a % j == 0 && b % j == 0 ) g = i ; } for ( j = s ; j < ( a * b ) ; j += s ) { if ( j % a == 0 && j % b == 0 ) { l = i ; break ; } } printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 21786}
{"input": "max ( a , b ) { if ( a > b ) return a ; else return b ; } solve ( t ) { int i , j , a [ 102 ] [ 102 ] ; for ( i = 1 ; i <= t ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = t - 1 ; i > 0 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } return a [ 1 ] [ 1 ] ; } main ( ) { int n , f , b ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & f ) ; b = solve ( f ) ; printf ( \"%d \n\" , b ) ; } return 0 ; }", "label": 0, "id": 22681}
{"input": "int * * j , * * arr ; int maxpath ( int k , int i , int v ) { int sum = 0 ; if ( i > k - 1 ) return 0 ; else if ( i == k - 1 ) return j [ i ] [ v ] ; else if ( arr [ i ] [ v ] != 0 ) return arr [ i ] [ v ] ; else sum = j [ i ] [ v ] + max ( maxpath ( k , i + 1 , v ) , maxpath ( k , i + 1 , v + 1 ) ) ; arr [ i ] [ v ] = sum ; return sum ; } int main ( ) { int n , i , k , l , a , * b , c = 0 , g , h ; scanf ( \"%d\" , & n ) ; b = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & k ) ; j = ( int * * ) malloc ( k * sizeof ( int * ) ) ; arr = ( int * * ) malloc ( k * sizeof ( int * ) ) ; for ( l = 0 ; l < k ; l ++ ) { j [ l ] = ( int * ) malloc ( ( l + 1 ) * sizeof ( int ) ) ; arr [ l ] = ( int * ) malloc ( ( l + 1 ) * sizeof ( int ) ) ; for ( a = 0 ; a <= l ; a ++ ) scanf ( \"%d\" , & j [ l ] [ a ] ) ; } for ( g = 0 ; g < k ; g ++ ) { for ( h = 0 ; h < g + 1 ; h ++ ) arr [ g ] [ h ] = 0 ; } b [ c ++ ] = maxpath ( k , 0 , 0 ) ; for ( a = 0 ; a < k ; a ++ ) { free ( ( void * ) j [ a ] ) ; free ( ( void * ) arr [ a ] ) ; } free ( ( void * ) j ) ; free ( ( void * ) arr ) ; } printf ( \"\n\" ) ; for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , b [ i ] ) ; free ( ( void * ) b ) ; return 0 ; }", "label": 0, "id": 23612}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; int lines ; int i , j , m ; int bel , right ; while ( n > 0 ) { scanf ( \"%d\" , & lines ) ; int num [ lines ] [ lines ] ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num [ i ] [ j ] ) ; } } for ( i = lines - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { right = num [ i ] [ j ] + num [ i + 1 ] [ j + 1 ] ; bel = num [ i ] [ j ] + num [ i + 1 ] [ j ] ; if ( right > bel ) { num [ i ] [ j ] = right ; } else { num [ i ] [ j ] = bel ; } } } printf ( \"%d\n\" , num [ 0 ] [ 0 ] ) ; n -- ; } return 0 ; }", "label": 0, "id": 3512}
{"input": "int store [ 100 ] [ 100 ] = { - 1 } ; int memo ( int i , int j ) { return store [ i ] [ j ] ; } int findpath ( int a [ 100 ] [ 100 ] , int i , int j , int lines ) { int c , b , current , weight ; weight = 0 ; if ( i > lines ) { return 0 ; } current = a [ i ] [ j ] ; if ( memo ( i + 1 , j ) == 0 ) c = findpath ( a , i + 1 , j , lines ) ; else c = memo ( i + 1 , j ) ; if ( memo ( i + 1 , j + 1 ) == 0 ) b = findpath ( a , i + 1 , j + 1 , lines ) ; else b = memo ( i + 1 , j + 1 ) ; if ( c > b ) weight = ( weight + current + c ) ; else weight = ( weight + current + b ) ; store [ i ] [ j ] = weight ; return weight ; } int main ( ) { int i , j , k , res ; int a [ 100 ] [ 100 ] ; int input , lines ; scanf ( \"%d\" , & input ) ; for ( k = 0 ; k < input ; k ++ ) { scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = 0 ; store [ i ] [ j ] = 0 ; scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } res = findpath ( a , 0 , 0 , lines ) ; printf ( \"%d\n\" , res ) ; } i = 0 ; j = 0 ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { } } return 0 ; }", "label": 1, "id": 9796}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b , c , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; c = gcd ( a , b ) ; d = ( a * b ) / c ; printf ( \"%d %d\n\" , c , d ) ; } return 0 ; } int gcd ( int a , int b ) { int i , j ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { j = i ; } } return ( j ) ; }", "label": 1, "id": 3659}
{"input": "int largestSum ( int i , int j , int n , int * * numbers , int * * sums ) { if ( sums [ i ] [ j ] != 0 ) { return sums [ i ] [ j ] ; } if ( i == n - 1 ) { sums [ i ] [ j ] = numbers [ i ] [ j ] ; return sums [ i ] [ j ] ; } int temp1 = largestSum ( i + 1 , j , n , numbers , sums ) ; int temp2 = largestSum ( i + 1 , j + 1 , n , numbers , sums ) ; if ( temp1 > temp2 ) { sums [ i ] [ j ] = numbers [ i ] [ j ] + temp1 ; } else { sums [ i ] [ j ] = numbers [ i ] [ j ] + temp2 ; } return sums [ i ] [ j ] ; } int main ( void ) { int * * numbers ; int * * sums ; int i , j ; numbers = ( int * * ) malloc ( 100 * sizeof ( int * ) ) ; sums = ( int * * ) malloc ( 100 * sizeof ( int * ) ) ; for ( i = 0 ; i < 100 ; ++ i ) { numbers [ i ] = ( int * ) malloc ( 100 * sizeof ( int ) ) ; sums [ i ] = ( int * ) malloc ( 100 * sizeof ( int ) ) ; } int T ; scanf ( \"%d\" , & T ) ; int t ; for ( t = 0 ; t < T ; t ++ ) { int noOfLines ; scanf ( \"%d\" , & noOfLines ) ; for ( i = 0 ; i < noOfLines ; ++ i ) { for ( j = 0 ; j < noOfLines ; ++ j ) { numbers [ i ] [ j ] = 0 ; sums [ i ] [ j ] = 0 ; } int temp ; for ( j = 0 ; j < i + 1 ; ++ j ) { scanf ( \"%d\" , & temp ) ; numbers [ i ] [ j ] = temp ; } } int answer = largestSum ( 0 , 0 , noOfLines , numbers , sums ) ; printf ( \"%d \n\" , answer ) ; } free ( sums ) ; free ( numbers ) ; fclose ( stdin ) ; }", "label": 0, "id": 23183}
{"input": "int main ( ) { long t , i , s , j , k , r , p ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int cost = 0 ; scanf ( \"%ld\" , & s ) ; p = s ; int a [ s ] ; for ( j = 0 ; j < s ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } for ( j = 0 ; j < s - 1 ; j ++ ) { r = 0 ; if ( a [ r ] > a [ r + 1 ] ) { for ( k = 0 ; k < p ; k ++ ) { a [ k ] = a [ k + 1 ] ; } cost = cost + a [ 0 ] ; } else { for ( k = 1 ; k < p ; k ++ ) { a [ k ] = a [ k + 1 ] ; } cost = cost + a [ 0 ] ; } p -- ; } printf ( \"%ld\n\" , cost - a [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 26074}
{"input": "int main ( ) { int z ; scanf ( \"%d\" , & z ) ; while ( z -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int min = 0 ; for ( i = 0 ; i < n ; i ++ ) if ( a [ min ] > a [ i ] ) min = i ; printf ( \"%d\n\" , a [ min ] * ( n - 1 ) ) ; } }", "label": 0, "id": 12149}
{"input": "int main ( ) { int * * a , i , n , j , k , maxm , t , p ; scanf ( \"%d\" , & t ) ; for ( p = 0 ; p < t ; p ++ ) { k = 0 ; scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } j = 0 ; for ( i = 0 ; i < n ; i ++ ) { k = k + a [ i ] [ j ] ; } maxm = k ; for ( j = 0 ; j < n ; j ++ ) { for ( i = n - 1 ; i >= 0 && i > j ; i -- ) { k = k + a [ i ] [ j + 1 ] - a [ i ] [ j ] ; if ( k > maxm ) maxm = k ; } } printf ( \"%d\n\" , maxm ) ; } return 0 ; }", "label": 1, "id": 2125}
{"input": "int main ( ) { int c , k , i , j , s ; int a [ 110 ] [ 110 ] , b [ 110 ] ; scanf ( \"%d\" , & c ) ; while ( c ) { scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j >= i + 1 ) { break ; } } } s = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { if ( i == 0 ) i = i + 1 ; if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { s += a [ i ] [ j ] ; } else { s += a [ i ] [ j + 1 ] ; j = j + 1 ; } } } b [ c - 1 ] = s ; c -- ; } for ( i = c - 1 ; i >= 0 ; i -- ) { printf ( \"%d\" , b [ i ] ) ; } return 0 ; }", "label": 1, "id": 26233}
{"input": "int main ( ) { int T , i , j ; long int A , B , lcm , gcd ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld %ld\" , & A , & B ) ; if ( A > B ) { for ( j = 1 ; j < B ; j ++ ) { if ( A % j == 0 && B % j == 0 ) gcd = j ; } } if ( B > A ) { for ( j = 1 ; j < A ; j ++ ) { if ( A % j == 0 && B % j == 0 ) gcd = j ; } } lcm = ( A * B ) / gcd ; printf ( \"%ld %ld\" , gcd , lcm ) ; } }", "label": 2, "id": 21023}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , j , ans ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld \" , & a [ i ] ) ; } ans = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { ans ++ ; } } } printf ( \"%lld\n\" , ans + n ) ; } return 0 ; }", "label": 2, "id": 20396}
{"input": "int GCD ( int x , int y ) ; int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int a , b , gcd ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) gcd = GCD ( a , b ) ; else if ( a < b ) gcd = GCD ( b , a ) ; else gcd = a ; printf ( \"%d %d \n\" , gcd , ( ( a * b ) / gcd ) ) ; } return 0 ; } int GCD ( int x , int y ) { int rem ; while ( rem != 0 ) { rem = x % y ; x = y ; y = rem ; } return x ; }", "label": 1, "id": 26529}
{"input": "int mat [ 100 + 10 ] [ 100 + 10 ] ; int A [ 100 + 10 ] [ 100 + 10 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int r , c ; while ( t -- > 0 ) { scanf ( \"%d\" , & r ) ; c = r ; int i , j ; for ( i = 0 ; i < c ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; mat [ 0 ] [ 0 ] = A [ 0 ] [ 0 ] ; for ( i = 1 ; i < r ; i ++ ) mat [ i ] [ 0 ] = mat [ i - 1 ] [ 0 ] + A [ i ] [ 0 ] ; for ( i = 1 ; i < r ; i ++ ) mat [ i ] [ i ] = mat [ i - 1 ] [ i - 1 ] + A [ i ] [ i ] ; for ( i = 1 ; i < r ; i ++ ) for ( j = 1 ; j < i ; j ++ ) mat [ i ] [ j ] = max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] ) + A [ i ] [ j ] ; int ans = - 1 ; for ( i = 0 ; i < c ; i ++ ) ans = max ( ans , mat [ r - 1 ] [ i ] ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 5799}
{"input": "int main ( ) { int t ; unsigned long long a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & n , & m ) ; a = n ; b = m ; while ( b ) { a = a % b ; a ^= b ^= a ^= b ; } printf ( \"%lld %lld\n\" , a , ( m * n ) / a ) ; } return 0 ; }", "label": 0, "id": 1911}
{"input": "int main ( ) { int t , a , b , s , lcm , gcd , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( d = 1 ; d <= a || d <= b ; d ++ ) { if ( a % d == 0 && b % d == 0 ) gcd = d ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 21716}
{"input": "int main ( ) { long int n1 , n2 , i , gcd , lcm , a ; scanf ( \"%ld\" , & a ) ; while ( a > 0 ) { gcd = 0 ; lcm = 0 ; scanf ( \"%ld %ld\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; a -- ; } return 0 ; }", "label": 2, "id": 18431}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int i , j , k ; scanf ( \"%d\" , & j ) ; while ( j -- ) { scanf ( \"%d%d\" , & i , & k ) ; int res = gcd ( i , k ) ; int lcm ; lcm = ( i * k ) / res ; printf ( \"%d \" , res ) ; printf ( \"%d\" , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 14656}
{"input": "void getint ( int * a ) ; int main ( ) { int n , l , i , j , a [ 100 ] [ 100 ] ; getint ( & n ) ; while ( n -- ) { getint ( & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { getint ( & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= ( l - i - 1 ) ; j ++ ) { a [ l - i - 1 ] [ j ] += ( a [ l - i ] [ j ] > a [ l - i ] [ j + 1 ] ) ? a [ l - i ] [ j ] : a [ l - i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; } void getint ( int * a ) { int c , num = 0 ; while ( ( c = getchar_unlocked ( ) ) != ' ' && c != '\n' && c != EOF ) { num = ( num << 1 ) + ( num << 3 ) + ( c - '0' ) ; } * a = num ; }", "label": 1, "id": 21784}
{"input": "int value ( int r [ ] [ 100 ] , int a , int b ) { if ( a < 0 || b < 0 ) { return 0 ; } else if ( b > a ) { return 0 ; } else { return r [ a ] [ b ] ; } } int max_1 ( int a , int b ) { if ( a >= b ) { return a ; } else { return b ; } } int main ( ) { int t , n , i , j , z ; int arr [ 100 ] [ 100 ] ; int * ptr ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { arr [ i ] [ j ] = 0 ; } } i = 0 ; j = 0 ; while ( i < n ) { j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & z ) ; arr [ i ] [ j ] = max_1 ( value ( arr , i - 1 , j - 1 ) , value ( arr , i - 1 , j ) ) + z ; j ++ ; } i ++ ; } int max = 0 ; i = n - 1 ; j = 0 ; while ( j < n ) { if ( arr [ i ] [ j ] > max ) { max = arr [ i ] [ j ] ; } j ++ ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 8683}
{"input": "int main ( void ) { int a , c ; scanf ( \"%d\" , & a ) ; int s [ a ] ; for ( c = 0 ; c < a ; c ++ ) { int i , j , b ; scanf ( \"%d\" , & b ) ; int arr [ b ] [ b ] ; for ( i = 0 ; i < b ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = b - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] = arr [ i - 1 ] [ j ] + arr [ i ] [ j ] ; else arr [ i - 1 ] [ j ] = arr [ i - 1 ] [ j ] + arr [ i ] [ j + 1 ] ; } } s [ c ] = arr [ 0 ] [ 0 ] ; } for ( c = 0 ; c < a ; c ++ ) printf ( \"%d\n\" , s [ c ] ) ; }", "label": 0, "id": 20931}
{"input": "int main ( void ) { int T , N , i , a [ 50005 ] , min , ans ; scanf ( \"%d\" , & T ) ; while ( T -- ) { min = 100005 ; scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } ans = min * ( N - 1 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 272}
{"input": "int main ( ) { int rows , test_cases , i , j , max , sum , temp , t ; scanf ( \"%d\" , & test_cases ) ; for ( i = 1 ; i <= test_cases ; i ++ ) { max = 0 ; scanf ( \"%d\" , & rows ) ; if ( rows < 100 ) { for ( j = 1 ; j <= rows ; j ++ ) { sum = 0 ; temp = j ; while ( temp -- ) { scanf ( \"%d\" , & t ) ; if ( t >= 0 && t <= 99 ) { sum = sum + t ; } } if ( sum > max ) max = sum ; } printf ( \"%d\n\" , max ) ; } } return 0 ; }", "label": 1, "id": 10092}
{"input": "main ( ) { int i , j , k , a , b , e , c , n , m ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; c = a > b ? b : a ; if ( a == 1 || b == 1 ) { printf ( \"1 %d\n\" , b ) ; } else { for ( j = 1 ; j < c ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { e = j ; } } a = a / e ; b = b / e ; k = a * b * e ; printf ( \"%d %d\n\" , e , k ) ; } } }", "label": 1, "id": 15141}
{"input": "unsigned int GCD ( unsigned int A , unsigned int B ) { if ( A == B ) return A ; if ( A == 0 ) return B ; if ( B == 0 ) return A ; if ( A > B ) { if ( A % B == 0 ) return B ; return GCD ( A - B , B ) ; } if ( B % A == 0 ) { return A ; } return GCD ( A , B - A ) ; } int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { unsigned int A , B ; scanf ( \"%lu %lu\" , & A , & B ) ; unsigned int gcd = GCD ( A , B ) ; printf ( \"%lu %lu\n\" , gcd , A * B / gcd ) ; } }", "label": 1, "id": 10923}
{"input": "int max ( int x , int y ) { if ( x < y ) return y ; else return x ; } int main ( ) { int a [ 100 ] [ 100 ] , i , t , j , n , p , m [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i >= j ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } m [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j == 0 ) m [ i ] [ j ] = a [ i ] [ j ] + m [ i - 1 ] [ j ] ; else if ( i == j ) m [ i ] [ j ] = a [ i ] [ j ] + m [ i - 1 ] [ j - 1 ] ; else m [ i ] [ j ] = a [ i ] [ j ] + max ( m [ i - 1 ] [ j ] , m [ i - 1 ] [ j - 1 ] ) ; } } p = m [ n - 1 ] [ 0 ] ; for ( i = n - 1 , j = 1 ; j < n ; j ++ ) { if ( m [ i ] [ j ] > p ) p = m [ i ] [ j ] ; } printf ( \"%d\" , p ) ; } return 0 ; }", "label": 1, "id": 3992}
{"input": "int main ( void ) { int a , b , ta , tb , tmp ; int t ; READ_INT ( t ) ; while ( t -- ) { READ_INT ( a ) ; READ_INT ( b ) ; for ( ta = a , tb = b ; tb != 0 ; ) tmp = tb , tb = ta % tb , ta = tmp ; WRITE_INT ( ta ) ; putchar_unlocked ( ' ' ) ; WRITE_INT ( a / ta * b ) ; putchar_unlocked ( '\n' ) ; } return 0 ; }", "label": 1, "id": 5174}
{"input": "int main ( ) { int a ; scanf ( \"%d\" , & a ) ; while ( a -- ) { long long unsigned int p , k = 0 , sum = 0 ; scanf ( \"%llu\" , & p ) ; long long unsigned int s [ p ] ; for ( int i = 0 ; i < p ; i ++ ) { scanf ( \"%llu\" , & s [ i ] ) ; } for ( int i = 0 ; i < p - 1 ; i ++ ) { if ( s [ i ] <= s [ i + 1 ] ) { k ++ ; continue ; } if ( k > 0 ) { sum += k ; k = 0 ; } } sum += k ; sum += p ; printf ( \"%llu\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 3302}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i ; long int j ; long int k ; long int n ; long int a [ 105000 ] ; long long int s = 0 ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } s = n ; for ( j = 0 ; j < n - 2 ; j ++ ) { for ( k = j ; k < n - 1 ; k ++ ) { if ( a [ k + 1 ] >= a [ k ] ) { s ++ ; } else { break ; } } } printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 2, "id": 21420}
{"input": "int main ( ) { int t , n , i , flag = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , x , y , t , gcd , lcm ; scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 15500}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int num [ n ] [ n ] , i = 0 , j = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { num [ i ] [ j ] = max ( num [ i ] [ j ] + num [ i + 1 ] [ j ] , num [ i ] [ j ] + num [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , num [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2878}
{"input": "int gcd ( int a , int b ) { int n , r , d , gd ; if ( a > b ) { n = a ; d = b ; } else n = b ; d = a ; r = a % b ; while ( r != 0 ) { n = d ; d = r ; r = n % d ; } gd = d ; return gd ; } int main ( ) { int t , a , b , gc = 0 , l , r , n , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { gc = 1 ; l = 1 ; scanf ( \"%d%d\" , & a , & b ) ; gc = gcd ( a , b ) ; l = ( a * b ) / gc ; printf ( \"%d %d\n\" , gc , l ) ; } return 0 ; }", "label": 1, "id": 2172}
{"input": "int m , i , j , k , l , t , n , * p , * q , s , b [ 9999 ] ; z ( int a , int b ) { return a > b ? a : b ; } void f ( ) { p ++ , i ++ , k ++ ; if ( k == j ) { k = 0 , j ++ , p -- ; } q = p - 1 ; } int main ( ) { scanf ( \"%d\" , & m ) ; while ( m -- ) { scanf ( \"%d\" , & n ) ; for ( i = k = l = 0 , j = 1 , p = b ; i < ( n * n + n ) / 2 ; f ( ) ) { t = scanf ( \"%d\" , & s ) ; l = z ( l , ( b [ i ] = s + ( ( 0 < i ) ? ( ( 0 < k ) ? ( ( k < j - 1 ) ? z ( * p , * q ) : * q ) : * p ) : 0 ) ) ) ; } printf ( \"%d\n\" , l ) ; } }", "label": 0, "id": 10346}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned int n , a [ 1000 ] ; int i , s = 0 , x ; scanf ( \"%u\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%u\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { x = a [ i ] < a [ i + 1 ] ? a [ i ] : a [ i + 1 ] ; s += x ; } printf ( \"%u\n\" , s ) ; } return 0 ; }", "label": 3, "id": 13900}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 12240}
{"input": "int main ( ) { int i , j , k , t , sum , l , sum1 = 0 , sum2 = 0 , m , sum4 = 0 , seq ; int * * tri , * a ; scanf ( \"%d\" , & seq ) ; * tri = ( int * ) malloc ( 100 ) ; a = ( int * ) malloc ( 100 ) ; for ( i = 0 ; i < 100 ; i ++ ) { tri [ i ] = ( int * ) malloc ( sizeof ( int * ) * 100 ) ; } for ( i = 0 ; i < seq ; i ++ ) { scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k < t ; k ++ ) { tri [ j ] [ k ] = 0 ; } } for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & tri [ j ] [ k ] ) ; } } sum = 0 ; for ( j = 0 ; j < t ; j ++ ) { sum = 0 ; for ( k = j ; k < t ; k ++ ) { sum4 = sum ; sum = sum + tri [ k ] [ j ] ; if ( ( tri [ k ] [ j + 1 ] > tri [ k ] [ j ] ) && ( k != j ) ) { sum2 = sum4 ; for ( l = k ; l < t ; l ++ ) { sum2 = sum2 + tri [ l ] [ j + 1 ] ; } } if ( sum1 < sum2 ) { sum1 = sum2 ; } } if ( sum1 < sum ) { sum1 = sum ; } } a [ i ] = sum1 ; } for ( i = 0 ; i < seq ; i ++ ) printf ( \"\n%d\" , a [ i ] ) ; return 0 ; }", "label": 3, "id": 12029}
{"input": "int main ( ) { int i , j , t , k ; scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ 100 ] ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = t - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } }", "label": 2, "id": 18744}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int c = a ; int d = b ; if ( a != b ) { while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } } printf ( \"%d %d\n\" , a , c * d / a ) ; } }", "label": 1, "id": 4492}
{"input": "main ( ) { int I , j , k , a [ 100 ] [ 100 ] , b = 0 , n , d , l ; scanf ( \"%d\" , & n ) ; for ( I = 0 ; I < n ; I ++ ) { scanf ( \"%d\" , & d ) ; for ( j = 0 ; j < d ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = 1 ; j < d ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + 1 ] ) { l = a [ j ] [ k ] ; a [ j ] [ k ] = a [ j ] [ k + 1 ] ; a [ j ] [ k + 1 ] = l ; } } b = a [ j ] [ k ] + b ; } printf ( \"%d\" , b ) ; } }", "label": 1, "id": 14612}
{"input": "int main ( ) { int t , n ; int a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 18889}
{"input": "int a [ 101 ] [ 101 ] ; int main ( ) { int n , i , j , sum , k , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 1 ; i -- ) for ( j = 1 ; j <= i ; j ++ ) a [ i ] [ j ] = ( a [ i ] [ j ] + a [ i + 1 ] [ j ] ) ^ ( ( ( a [ i ] [ j ] + a [ i + 1 ] [ j ] ) ^ ( a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ) & - ( ( a [ i ] [ j ] + a [ i + 1 ] [ j ] ) < ( a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ) ) ; printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 2321}
{"input": "int main ( ) { int t , c , l , n , i , j , a [ 100 ] , p = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = 0 ; p = 0 ; l = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; if ( n == 1 ) c = 1 ; else { for ( i = 0 ; i < n ; i ++ ) { l = i ; while ( a [ l + 1 ] > a [ l ] ) l ++ ; if ( l > i ) c ++ ; if ( l == n - 2 ) break ; } } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 3, "id": 14225}
{"input": "int main ( ) { int n , t , a [ 45 ] [ 45 ] , i , j ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d\" , & t ) ; scanf ( \"%d\" , & a [ 1 ] [ 1 ] ) ; for ( i = 2 ; i <= t ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 1 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else { if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } } j = 0 ; for ( i = 1 ; i <= t ; i ++ ) if ( a [ t ] [ i ] > j ) j = a [ t ] [ i ] ; printf ( \"%d\n\" , j ) ; n -- ; } return 0 ; }", "label": 3, "id": 21889}
{"input": "int main ( ) { int A , B , c , d , e , f , g , x , T ; scanf ( \"%d\" , & T ) ; if ( T > 1000 || T < 1 ) return 0 ; else { for ( x = 1 ; x <= T ; x ++ ) { scanf ( \"%d%d\" , & A , & B ) ; if ( A < 1 || B < 1 || A > 1000000 || B > 1000000 ) return 0 ; else { if ( A > B ) { c = A ; d = B ; } else { c = B ; d = A ; } e = c % d ; while ( e != 0 ) { c = d ; d = e ; e = c % d ; } f = d ; g = A * B / f ; printf ( \"%d %d\n\" , f , g ) ; } } } return 0 ; }", "label": 1, "id": 23071}
{"input": "int main ( ) { int t , n , i , min , sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; if ( n >= 1 && n <= 50000 ) { int ar [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & ar [ i ] ) ; } min = ar [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > ar [ i ] ) min = ar [ i ] ; sum = sum + min ; } printf ( \" %d\" , sum ) ; } } }", "label": 1, "id": 21320}
{"input": "int main ( ) { int t , sum , count , n , i , j ; int a [ 1001 ] [ 1001 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum = 0 ; count = 0 ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17145}
{"input": "long long deletion ( long long [ ] , long long , long long ) ; int main ( void ) { long long t , n , a [ 50000 ] , i , j , cost = { 0 } , k , min ; si ( t ) ; for ( i = 0 ; i < t ; i ++ ) { si ( n ) ; for ( j = 0 ; j < n ; j ++ ) si ( a [ j ] ) ; cost = 0 ; min = 0 ; while ( n != 1 ) { min = 0 ; for ( j = 1 ; j < n ; j ++ ) if ( a [ j ] < a [ min ] ) min = j ; cost += a [ min ] ; if ( min != n - 1 || min != 0 ) if ( a [ min - 1 ] >= a [ min + 1 ] ) n = deletion ( a , n , ( min - 1 ) ) ; else n = deletion ( a , n , ( min + 1 ) ) ; else if ( min == 0 ) n = deletion ( a , n , 1 ) ; else n = deletion ( a , n , ( n - 2 ) ) ; } printf ( \"%lld\n\" , cost ) ; } return 0 ; } long long deletion ( long long a [ ] , long long n , long long pos ) { long long i ; for ( i = pos ; i < n - 1 ; i ++ ) { a [ i ] = a [ i + 1 ] ; } n -- ; return n ; }", "label": 2, "id": 15975}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; return b ; } int solve ( int i , int j , int n , int a [ 100 ] [ 100 ] , int p [ 100 ] [ 100 ] ) { if ( p [ i ] [ j ] != 0 ) return p [ i ] [ j ] ; if ( i == n - 1 ) return ( a [ i ] [ j ] ) ; else { int t1 = solve ( i + 1 , j , n , a , p ) ; int t2 = solve ( i + 1 , j + 1 , n , a , p ) ; p [ i ] [ j ] = max ( t1 , t2 ) + a [ i ] [ j ] ; return p [ i ] [ j ] ; } } int main ( ) { int t , n , i , j , p [ 100 ] [ 100 ] , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) p [ i ] [ j ] = 0 ; } int x = solve ( 0 , 0 , n , a , p ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) p [ i ] [ j ] = 0 ; } printf ( \"%d\n\" , x ) ; } return 0 ; }", "label": 0, "id": 16600}
{"input": "int gcd ( ) ; int main ( ) { int a , b , c , i , j , flag = 0 , f , t , x ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; c = gcd ( a , b ) ; for ( x = 1 ; x <= 1000000 ; x ++ ) { int n ; n = a * i ; for ( j = 1 ; j <= 1000000 ; j ++ ) { int m ; m = b * j ; if ( n == m ) { flag = 1 ; f = n ; break ; } } if ( flag == 1 ) { break ; } } printf ( \"%d %d\n\" , c , f ) ; } return 0 ; } int gcd ( int n , int m ) { if ( n % m == 0 ) { return m ; } else { gcd ( n = m , n % m ) ; } }", "label": 2, "id": 2699}
{"input": "int main ( ) { long int i , tcase , min ; scanf ( \"%ld\" , & tcase ) ; while ( tcase -- ) { long int n ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 8473}
{"input": "int main ( void ) { int t , i , j ; long int n , a [ 100002 ] , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; k = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; k ++ ; for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ j ] <= a [ j + 1 ] ) k ++ ; else break ; } } printf ( \"%d\n\" , k ) ; } return 0 ; }", "label": 1, "id": 3282}
{"input": "int main ( ) { int t , i , j , n , max ; int arr [ 100 ] [ 100 ] ; int sum [ 100 ] [ 100 ] ; SCAN_INT ( t ) ; while ( t -- ) { SCAN_INT ( n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { SCAN_INT ( arr [ i ] [ j ] ) ; sum [ i ] [ j ] = - 1 ; } } sum [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { sum [ i + 1 ] [ j ] = MAX ( sum [ i ] [ j ] + arr [ i + 1 ] [ j ] , sum [ i + 1 ] [ j ] ) ; sum [ i + 1 ] [ j + 1 ] = MAX ( sum [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] , sum [ i + 1 ] [ j + 1 ] ) ; } } max = sum [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { max = MAX ( max , sum [ n - 1 ] [ i ] ) ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 18172}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%ld\" , & n ) ; long int a [ n ] , i , k = 0 , sum = n ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( k == 0 ) { k ++ ; } else { if ( a [ i ] >= a [ i - 1 ] ) { k ++ ; } else if ( a [ i ] < a [ i - 1 ] ) { if ( k > 1 ) { sum += ( ( k * ( k - 1 ) ) / 2 ) ; } k = 1 ; } } } printf ( \"%ld\n\" , sum + ( k * ( k - 1 ) ) / 2 ) ; } return 0 ; }", "label": 0, "id": 24902}
{"input": "int main ( ) { int t , n , min , a , i , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100009 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( a < min ) min = a ; } r = ( n - 1 ) * min ; printf ( \"%d\n\" , r ) ; } return 0 ; }", "label": 0, "id": 7705}
{"input": "long long int n , ans ; int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } long long int lcm ( int a , int b ) { n = a * b ; ans = ( ( n ) / ( gcd ( a , b ) ) ) ; return ans ; } int main ( ) { int t , i , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; printf ( \"%d \" , gcd ( a , b ) ) ; printf ( \"%lld\" , lcm ( a , b ) ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 20924}
{"input": "long int arr [ 10000 ] ; long int findmin ( long int len ) { int min = 1000000 , i ; for ( i = 0 ; i < len ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } return min ; } int main ( ) { long int test , num , i , len ; scanf ( \" %d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & len ) ; for ( i = 0 ; i < len ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; num = findmin ( len ) ; printf ( \"%d\n\" , num * ( len - 1 ) ) ; } return 0 ; }", "label": 3, "id": 26864}
{"input": "long int gcd ( long int a , long int b ) ; int main ( ) { int t ; long int a ; long int b ; long int g ; long int l ; scanf ( \" %d\" , & t ) ; while ( t -- ) { scanf ( \" %d\" , & a ) ; scanf ( \" %d\" , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; } long int gcd ( long int a , long int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } }", "label": 0, "id": 8083}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , t ) ; while ( t -- ) { int a , b , i , gcd , lcm ; scanf ( \"%d%d\" , a , b ) ; for ( i = 0 ; i < a && b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return ( 0 ) ; }", "label": 3, "id": 14871}
{"input": "main ( ) { long long int y ; int t , i , a , b , x ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; y = a ; y = y * b ; if ( b > a ) { x = a ; a = b ; b = x ; } x = a % b ; while ( x != 0 ) { a = b ; b = x ; x = a % b ; } printf ( \"%d %lld\n\" , b , y / b ) ; } return 0 ; }", "label": 0, "id": 13228}
{"input": "long long int main ( ) { long long int t , n , i , j , cout , a [ 1000 ] ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { cout = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; if ( n == 1 ) { printf ( \"1\n\" ) ; break ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] <= a [ j ] || a [ i ] >= a [ j ] || a [ i ] == a [ j ] ) cout ++ ; } } printf ( \"%lld\n\" , cout ) ; } return 0 ; }", "label": 3, "id": 14061}
{"input": "int maxpath ( int a [ ] [ 100 ] , int n , int cache [ ] [ 100 ] , int row , int col ) ; int main ( ) { int t , n , a [ 100 ] [ 100 ] , cache [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cache [ i ] [ j ] = - 1 ; } } for ( j = 0 ; j <= n ; j ++ ) cache [ n ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , maxpath ( a , n , cache , 0 , 0 ) ) ; } return 0 ; } int maxpath ( int a [ ] [ 100 ] , int n , int cache [ ] [ 100 ] , int row , int col ) { int v1 , v2 , v ; if ( cache [ row ] [ col ] != - 1 ) { return cache [ row ] [ col ] ; } v1 = maxpath ( a , n , cache , row + 1 , col ) ; v2 = maxpath ( a , n , cache , row + 1 , col + 1 ) ; if ( v1 > v2 ) v = a [ row ] [ col ] + v1 ; else v = a [ row ] [ col ] + v2 ; cache [ row ] [ col ] = v ; return v ; }", "label": 3, "id": 1081}
{"input": "int main ( ) { int t ; long n , s , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } s = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < s ) { s = a [ i ] ; } } printf ( \"%ld\n\" , s * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 23009}
{"input": "main ( ) { int t , i , n , a [ 100000 ] ; long long int sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int dp [ n ] ; for ( i = 0 ; i < n ; i ++ ) dp [ i ] = 1 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i > 0 ) { if ( a [ i ] > a [ i - 1 ] ) dp [ i ] = dp [ i ] + dp [ i - 1 ] ; else dp [ i ] = 1 ; } sum += dp [ i ] ; } printf ( \"%lld\" , sum ) ; } }", "label": 1, "id": 8664}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned int n , i ; scanf ( \"%u\" , & n ) ; unsigned int a [ n ] , min = 100001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%u\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%u\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 26016}
{"input": "int main ( ) { int i , j , t , temp ; scanf ( \"%d\" , & t ) ; long n ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n - i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; } } } printf ( \"%ld\n\" , a [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 26460}
{"input": "int main ( ) { int t ; long n , num , prev , i ; long long cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%ld%ld\" , & n , & prev ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( \"%ld\" , & num ) ; if ( prev > num ) prev = num ; } cost = prev * ( n - 1 ) ; printf ( \"%lld\n\" , cost ) ; } }", "label": 0, "id": 18161}
{"input": "int main ( ) { int t , p , a , b , r , l , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; p = a * b ; if ( a > b ) { l = a ; s = b ; } else { l = b ; s = a ; } while ( s ) { r = l % s ; l = s ; s = r ; } printf ( \"%d %d\n\" , l , p / l ) ; } return 0 ; }", "label": 1, "id": 8272}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { unsigned int a , i , s , b , h , m , c ; scanf ( \"%u %u\" , & a , & b ) ; if ( a < b ) { s = a ; c = b ; } else s = b ; c = a ; for ( i = 1 ; i <= s ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { h = i ; } } m = c ; while ( m % s != 0 ) m = m + c ; printf ( \"%u %u/n\" , h , m ) ; } return 0 ; }", "label": 2, "id": 7413}
{"input": "int main ( ) { long a , b , lcm , hcf ; int i , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; hcf = 1 ; for ( i = 2 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) hcf = i ; } lcm = ( a * b ) / hcf ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 20731}
{"input": "int sumcal ( int * arr , int i , int j , int n ) { int p , q ; if ( i == n - 1 ) { return ( arr [ i * ( i + 1 ) / 2 + j ] ) ; } else { p = sumcal ( arr , i + 1 , j , n ) ; q = sumcal ( arr , i + 1 , j + 1 , n ) ; if ( p > q ) { return ( p + arr [ i * ( i + 1 ) / 2 + j ] ) ; } else { return ( q + arr [ i * ( i + 1 ) / 2 + j ] ) ; } } } int main ( ) { int k , * ptr1 , * ptr2 , i , j , n , t ; scanf ( \"%d\" , & t ) ; ptr2 = ( int * ) malloc ( t * sizeof ( int ) ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; ptr1 = ( int * ) malloc ( n * ( n + 1 ) / 2 * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & ptr1 [ i * ( i + 1 ) / 2 + j ] ) ; } } ptr2 [ k ] = sumcal ( ptr1 , 0 , 0 , n ) ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , ptr2 [ i ] ) ; } return 0 ; }", "label": 2, "id": 4301}
{"input": "int main ( ) { int i , j , t , a , min1 , p ; double y ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & min1 ) ; for ( j = 1 ; j < a ; j ++ ) { scanf ( \"%d\" , & p ) ; if ( min1 > p ) { min1 = p ; } } y = min1 * ( a - 1 ) ; printf ( \"%lf\n\" , y ) ; } return 0 ; }", "label": 1, "id": 21142}
{"input": "long long int t , n , a [ 500004 ] , i , j , k , tmp , c = 0 , n1 = 10000000 ; int main ( ) { scanf ( \"%I64d\" , & t ) ; while ( t -- ) { scanf ( \"%I64d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%I64d\" , & a [ i ] ) ; if ( a [ i ] < n1 ) { n1 = a [ i ] ; } } c = n1 * ( n - 1 ) ; printf ( \"%I64d\n\" , c ) ; c = 0 ; n1 = 10000000 ; } return 0 ; }", "label": 2, "id": 5445}
{"input": "unsigned find ( unsigned long int a [ ] , unsigned int n ) { unsigned int min ; unsigned int i ; unsigned int j ; min = 10 , 000 ; i = 0 ; while ( i < n ) { if ( min >= a [ i ] ) { min = a [ i ] ; j = i ; } i ++ ; } return min ; } int main ( ) { unsigned int i ; unsigned int t ; unsigned int p ; unsigned int j ; unsigned int n ; unsigned int cost ; unsigned int a [ 10 ] ; scanf ( \"%u\" , & t ) ; while ( t > 0 ) { scanf ( \"%u\" , & p ) ; if ( p == 1 ) { break ; } i = 0 ; cost = 0 ; while ( i < p ) { scanf ( \"\\t%u\" , & a [ i ] ) ; i ++ ; } n = p ; j = find ( a , n ) ; j = j * ( n - 1 ) ; printf ( \"\n%u\" , j ) ; t -- ; } return 0 ; }", "label": 3, "id": 6845}
{"input": "int a [ 1000 ] [ 1000 ] ; int main ( ) { int s , m , n , i , j , k , k1 , ans ; scanf ( \"%d\" , & m ) ; for ( s = 0 ; s < m ; s ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & k ) ; if ( i == 0 ) { a [ i ] [ j ] = k ; ans = k ; } else { if ( i != j ) a [ i ] [ j ] = a [ i - 1 ] [ j > 0 ? j - 1 : j ] >= a [ i - 1 ] [ j ] ? ( a [ i - 1 ] [ j > 0 ? j - 1 : j ] + k ) : ( a [ i - 1 ] [ j ] + k ) ; else a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] + k ; k1 = a [ i ] [ j ] ; if ( k1 > ans ) ans = k1 ; } } printf ( \"%d\" , ans ) ; } return 0 ; }", "label": 1, "id": 18721}
{"input": "int main ( ) { int t , i , cost = 0 , min ; long long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; int a [ n ] ; scanf ( \"%d\" , & a [ 0 ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } cost = min * ( n - 1 ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 24813}
{"input": "int gcd ( int a , int b ) { int c = a % b ; if ( c == 0 ) return b ; else return gcd ( b , c ) ; } int main ( ) { int i , t , n , m , lcm , g ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & n , & m ) ; g = gcd ( n , m ) ; lcm = ( n * m ) / g ; printf ( \"%d %d\n\" , g , lcm ) ; } return 0 ; }", "label": 1, "id": 19501}
{"input": "int main ( ) { int t , n , * p , i , j , sums [ 200 ] , temp1 , temp2 , off , base , cnt ; scanf ( \"%d\" , & t ) ; while ( t -- ) { for ( i = 0 ; i < 200 ; i ++ ) sums [ i ] = 0 ; scanf ( \"%d\" , & n ) ; p = ( int * ) malloc ( ( ( n * ( n + 1 ) ) / 2 ) * sizeof ( int ) ) ; for ( i = 0 ; i < ( n * ( n + 1 ) / 2 ) ; i ++ ) scanf ( \"%d\" , p + i ) ; sums [ 0 ] = p [ 0 ] ; base = 200 ; for ( i = 1 , cnt = 1 ; i < n ; i ++ , cnt += i ) { for ( j = 0 ; j < i ; j ++ ) { off = j * base ; temp1 = sums [ off ] + p [ cnt + j ] ; temp2 = sums [ off ] + p [ cnt + j + 1 ] ; sums [ off ] = temp1 ; sums [ off + ( int ) base / 2 ] = temp2 ; } base = base / 2 ; } temp1 = sums [ 0 ] ; for ( i = 0 ; i < 200 ; i ++ ) { if ( sums [ i ] > temp1 ) temp1 = sums [ i ] ; } printf ( \"%d\n\" , temp1 ) ; } return 0 ; }", "label": 1, "id": 11284}
{"input": "int main ( void ) { int n , i ; scanf ( \"%d\" , & n ) ; unsigned long long int a , b , gcd , lcm , rem , num , den ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%I64d %I64d\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * ( b / gcd ) ; printf ( \"%I64d %I64d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 7848}
{"input": "int main ( ) { int a , b , c , n , i ; long int d ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\n\" , & a , & b ) ; c = gcd ( a , b ) ; d = lcm ( a , b ) ; printf ( \"%d %ld\" , c , d ) ; } return 0 ; } int gcd ( int m , int n ) { if ( n == 0 ) return m ; else return gcd ( n , m % n ) ; } int lcm ( int m , int n ) { int p ; p = ( m * n ) / gcd ( m , n ) ; return p ; }", "label": 1, "id": 16212}
{"input": "int main ( void ) { long int a , b , h , l , p , r , t ; scanf ( \"%ld\" , & t ) ; while ( t ) { scanf ( \"%ld %ld\" , & a , & b ) ; p = a * b ; while ( r != 1 ) { r = a % b ; if ( r == 0 ) { h = b ; break ; } else { a = b ; b = r ; } } if ( r == 1 ) h = 1 ; l = p / h ; printf ( \"%ld %ld\n\" , h , l ) ; -- t ; } return 0 ; }", "label": 1, "id": 24016}
{"input": "main ( ) { int T , A , B , X , Y , GCD , rem , LCM ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & A , & B ) ; X = A ; Y = B ; while ( B != 0 ) { rem = A % B ; A = B ; B = rem ; } GCD = A ; LCM = ( X * Y ) / GCD ; printf ( \"\n%d%d\" , GCD , LCM ) ; } }", "label": 1, "id": 17083}
{"input": "int main ( void ) { int t = 0 ; long long int a = 0 , b = 0 , temp = 0 ; long long int lcm = 0 , gcd = 0 , i = 0 , j = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { lcm = gcd = 0 ; temp = 0 ; scanf ( \"%lld %lld\" , & a , & b ) ; i = a ; j = b ; if ( b > a ) { temp = b ; b = a ; a = temp ; } temp = 0 ; while ( b != 0 && a != 0 ) { a -= b ; if ( b > a ) { temp = b ; b = a ; a = temp ; } } gcd = a == 0 ? b : a ; lcm = gcd * ( i / gcd ) * ( j / gcd ) ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 2395}
{"input": "int main ( ) { int t ; long n , i , min , minindex , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long * a = ( long * ) malloc ( n * sizeof ( long ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; cost = 0 ; while ( n != 1 ) { min = a [ 0 ] ; minindex = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; minindex = i ; } } cost = cost + min ; if ( a [ minindex ] > a [ minindex + 1 ] ) i = minindex ; else i = minindex + 1 ; for ( ; i < n ; i ++ ) a [ i ] = a [ i + 1 ] ; n -- ; } free ( a ) ; printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 1113}
{"input": "int main ( ) { int t , i ; long long int gcd = 0 , lcm = 0 , a , b , j ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; for ( j = 1 ; j <= MIN ( a , b ) ; j ++ ) { if ( ( a % i ) == 0 && ( b % i ) == 0 ) gcd = i ; lcm = ( a * b ) / gcd ; } printf ( \"%lld %lld \n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 4888}
{"input": "int main ( ) { long long t , a , b , l ; scanf ( \"%lld\n\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; l = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%lld %lld\n\" , a , l / a ) ; } return 0 ; }", "label": 0, "id": 20318}
{"input": "int a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] ; int sum_in_tri ( int i , int j , int k ) { if ( i >= k ) return 0 ; if ( b [ i ] [ j ] != - 1 ) { return b [ i ] [ j ] ; } else { int temp = sum_in_tri ( i + 1 , j , k ) ; int temp2 = sum_in_tri ( i + 1 , j + 1 , k ) ; int k = temp > temp2 ? ( temp + a [ i ] [ j ] ) : ( temp2 + a [ i ] [ j ] ) ; b [ i ] [ j ] = k ; return k ; } } int main ( ) { int n , k , i , j , ans ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { b [ i ] [ j ] = - 1 ; } } for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } ans = sum_in_tri ( 0 , 0 , k ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 8029}
{"input": "int n , i , j , k , l , T , n , a , b , c ; int main ( ) { scanf ( \"%d\" , & T ) ; long long unsigned int M [ T ] [ 2 ] ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; c = b ; if ( a % c != 0 || b % c != 0 ) { while ( a % c != 0 ) { c = a % c ; } while ( b % c != 0 ) { c = b % c ; } } M [ i ] [ 0 ] = c ; M [ i ] [ 1 ] = ( a / c ) * ( b / c ) * c ; } for ( l = 0 ; l < T ; l ++ ) { printf ( \"%llu %llu\n\" , M [ l ] [ 0 ] , M [ l ] [ 1 ] ) ; } }", "label": 1, "id": 26300}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; long long int N ; for ( int i = 1 ; i <= T ; i ++ ) { scanf ( \"%lld\" , & N ) ; long long int ar [ N ] ; for ( long long int j = 0 ; j < N ; j ++ ) { scanf ( \"%lld\" , & ar [ j ] ) ; } int min = ar [ 0 ] ; for ( long long int j = 1 ; j < N ; j ++ ) { if ( min > ar [ j ] ) min = ar [ j ] ; } printf ( \"%lld\n\" , min * ( N - 1 ) ) ; } return 0 ; }", "label": 0, "id": 11011}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int m , i , t , j , n , smax = 0 ; scanf ( \"%d\" , & m ) ; while ( m -- ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] , b [ t ] [ t ] ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j < t ; j ++ ) { a [ i ] [ j ] = 0 ; b [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < t ; i ++ ) { j = 0 ; while ( i >= j ) { scanf ( \"%d\" , & n ) ; a [ i ] [ j ] = n ; j ++ ; } } b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < t ; i ++ ) { for ( j = 0 ; j < t ; j ++ ) { if ( j - 1 >= 0 ) { b [ i ] [ j ] = max ( b [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] , b [ i - 1 ] [ j ] + a [ i ] [ j ] ) ; } else { b [ i ] [ j ] = b [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } } for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j < t ; j ++ ) { if ( b [ i ] [ j ] > smax ) smax = b [ i ] [ j ] ; } } printf ( \"%d\n\" , smax ) ; } return 0 ; }", "label": 1, "id": 4485}
{"input": "long int gcd ( long int a , long int b ) ; int main ( ) { int t ; long int a ; long int b ; long int g ; long int l ; scanf ( \" %d\" , & t ) ; while ( t -- ) { scanf ( \" %d\" , & a ) ; scanf ( \" %d\" , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; } long int gcd ( long int a , long int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } }", "label": 0, "id": 8338}
{"input": "int main ( ) { int t ; long i , n , num , min ; long long sol ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%ld\" , & min ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%ld\" , & num ) ; min = ( num < min ) ? num : min ; } printf ( \"val%ld\n  n:%ld\n\" , min , n - 1 ) ; sol = ( long long ) ( min ) * ( long long ) ( n - 1 ) ; printf ( \"%lld\n\" , sol ) ; } return 0 ; }", "label": 1, "id": 5001}
{"input": "int main ( ) { int i , j , min , l ; long long int arr , p , k ; scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { scanf ( \"%lld\" , & k ) ; for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%lld\" , & arr ) ; if ( j == 0 ) { min = arr ; } if ( min > arr ) { min = arr ; } } p = min * ( k - 1 ) ; printf ( \"%lld\n\" , p ) ; } return 0 ; }", "label": 0, "id": 21846}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( j = i + 1 ; j < n ; j ++ ) { arr [ i ] [ j ] = 0 ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + max ( arr [ i - 1 ] [ j ] , arr [ i - 1 ] [ j - 1 ] ) ; } } j = arr [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( j < arr [ n - 1 ] [ i ] ) j = arr [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , j ) ; } }", "label": 0, "id": 20248}
{"input": "int main ( ) { int t , a , b , p = 0 , hcf , lcm , temp = 0 ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; p = a * b ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } hcf = a ; lcm = p / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 22350}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int m = 1000000 ; for ( int i = 0 ; i < n ; ++ i ) { int x ; scanf ( \"%d\" , & x ) ; if ( x < m ) m = x ; } printf ( \"%d\n\" , m * -- n ) ; } return 0 ; }", "label": 0, "id": 21782}
{"input": "int gcd ( int n1 , int n2 ) { if ( n2 != 0 ) return gcd ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { long int t , a , b , g , l ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 12128}
{"input": "int main ( ) { int t , i , j ; int num ; int sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & num ) ; int arr [ num ] [ num ] ; for ( i = 0 ; i <= num ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } sum = 0 ; for ( i = 0 ; i <= num ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) sum += arr [ i ] [ j ] ; } printf ( \"%d\" , sum ) ; } }", "label": 3, "id": 14136}
{"input": "int main ( ) { int t = 0 , c = 0 ; scanf ( \"%d\" , & t ) ; for ( c = 0 ; c < t ; c ++ ) { long a , b , t , l , p ; scanf ( \"%lu %lu\" , & a , & b ) ; if ( a < b ) { t = a ; a = b ; b = t ; } p = a * b ; do { t = a % b ; a = b ; b = t ; } while ( b != 0 ) ; l = p / a ; printf ( \"%lu %lu\n\" , a , l ) ; } return 0 ; }", "label": 0, "id": 20848}
{"input": "int main ( ) { int t , n1 , n2 , i , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { gcd = 1 ; lcm = 1 ; scanf ( \"%d %d\" , & n1 , & n2 ) ; int n ; n = n1 <= n2 ? n1 : n2 ; for ( i = 2 ; i <= n ; i ++ ) { if ( ( n1 % i == 0 ) && ( n2 % i == 0 ) ) { gcd = i ; lcm = lcm * i ; n1 = n1 / i ; n2 /= i ; } if ( ( n1 % i == 0 ) && ( n2 % i != 0 ) ) { lcm = lcm * i ; n1 = n1 / i ; } if ( ( n2 % i == 0 ) && ( n1 % i != 0 ) ) { lcm = lcm * i ; n2 = n2 / i ; } } if ( ( n1 == 1 ) && ( n2 != 1 ) ) lcm = lcm * n2 ; else if ( ( n1 != 1 ) && ( n2 == 1 ) ) lcm = lcm * n1 ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 21547}
{"input": "int main ( ) { long int i , j , k , w = 0 , a [ 100001 ] ; int t , n = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { w = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; if ( n > 1 ) { for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { w ++ ; for ( k = j ; k < n - 1 ; k ++ ) { if ( a [ k ] < a [ k + 1 ] ) { w ++ ; } else break ; } } else break ; } } } else { printf ( \"%d\n\" , n ) ; continue ; } printf ( \"%ld\n\" , ++ w ) ; } }", "label": 1, "id": 267}
{"input": "int main ( ) { long long int t , i ; scanf ( \"%lld\" , & t ) ; while ( t > 0 ) { long long int n , i , j , c = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } long long int dp [ n ] ; for ( i = 0 ; i < n ; i ++ ) { dp [ i ] = 1 ; } for ( i = n - 2 ; i >= 0 ; i -- ) { if ( a [ i ] <= a [ i + 1 ] ) dp [ i ] = dp [ i ] + dp [ i + 1 ] ; else dp [ i ] = 1 ; } for ( i = 0 ; i < n ; i ++ ) { c = c + dp [ i ] ; } printf ( \"%lld\" , c ) ; } return 0 ; }", "label": 2, "id": 19036}
{"input": "int Sum ( int rs , int cs , int number , int * * elem , int z ) ; int main ( void ) { int test ; scanf ( \"%d\" , & test ) ; int i , k , j , ans ; for ( i = 0 ; i < test ; i ++ ) { int * * array ; int lines ; scanf ( \"%d\" , & lines ) ; array = ( int * * ) malloc ( sizeof ( int * ) * lines ) ; for ( j = 0 ; j < lines ; j ++ ) { array [ j ] = ( int * ) malloc ( sizeof ( int ) * lines ) ; } for ( j = 0 ; j < lines ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & array [ j ] [ k ] ) ; } for ( k = j + 1 ; k < lines ; k ++ ) { array [ j ] [ k ] = 0 ; } } ans = Sum ( 0 , 0 , lines , array , array [ 0 ] [ 0 ] ) ; printf ( \"%d\n\" , ans - array [ 0 ] [ 0 ] ) ; } return 0 ; } int Sum ( int rs , int cs , int number , int * * elem , int z ) { if ( rs > number ) return 0 ; int a ; int b ; int x , y ; if ( rs < number && cs < number ) { a = * ( * ( elem + rs ) ) ; b = * ( * ( elem + rs ) + cs ) ; } else { a = x ; b = y ; } x = z + Sum ( rs + 1 , cs , number , elem , a ) ; y = z + Sum ( rs + 1 , cs + 1 , number , elem , b ) ; if ( x > y ) return x ; else return y ; }", "label": 2, "id": 17590}
{"input": "int main ( ) { int * * a , i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; a = malloc ( ( n ) * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = malloc ( ( n ) * sizeof ( int ) ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) if ( a [ i ] [ j ] + a [ i + 1 ] [ j ] >= a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; free ( a ) ; } return 0 ; }", "label": 0, "id": 7921}
{"input": "int sum [ 100 ] [ 100 ] = { - 1 } ; int SumTriangle ( int * * a , int i , int j , int n ) ; int main ( ) { int tc , n , * * a , i , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) sum [ i ] [ j ] = - 1 ; printf ( \"%d\n\" , SumTriangle ( a , 0 , 0 , n ) ) ; free ( a ) ; } return 0 ; } int SumTriangle ( int * * a , int i , int j , int n ) { int s1 , s2 ; if ( i == n - 1 ) { sum [ i ] [ j ] = a [ i ] [ j ] ; return a [ i ] [ j ] ; } if ( sum [ i + 1 ] [ j ] == - 1 ) sum [ i + 1 ] [ j ] = SumTriangle ( a , i + 1 , j , n ) ; if ( sum [ i + 1 ] [ j + 1 ] == - 1 ) sum [ i + 1 ] [ j + 1 ] = SumTriangle ( a , i + 1 , j + 1 , n ) ; if ( sum [ i + 1 ] [ j ] > sum [ i + 1 ] [ j + 1 ] ) return a [ i ] [ j ] + sum [ i + 1 ] [ j ] ; else return a [ i ] [ j ] + sum [ i + 1 ] [ j + 1 ] ; }", "label": 0, "id": 3644}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 23571}
{"input": "int hcf ( int n1 , int n2 ) ; int main ( ) { int gcd , n1 , n2 , lcm ; int t ; scanf ( \"%d\" , t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; gcd = hcf ( n1 , n2 ) ; lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\n\" , gcd , ( n1 * n2 ) / gcd ) ; } return 0 ; } int hcf ( int n1 , int n2 ) { if ( n2 != 0 ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; }", "label": 3, "id": 18810}
{"input": "int main ( ) { int T , i , j ; long int A , B , lcm , gcd ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld %ld\" , & A , & B ) ; if ( A > B ) { for ( j = 1 ; j < B ; j ++ ) { if ( A % j == 0 && B % j == 0 ) gcd = j ; } } if ( B > A ) { for ( j = 1 ; j < A ; j ++ ) { if ( A % j == 0 && B % j == 0 ) gcd = j ; } } lcm = ( A * B ) / gcd ; printf ( \"%ld %ld\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 9364}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , * ptr ; scanf ( \"%d\" , & n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & ptr [ i ] ) ; } int j ; int count = n ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n - 1 ; j ++ ) { if ( ptr [ j ] <= ptr [ j + 1 ] ) { count ++ ; } else break ; } } printf ( \"%d\n\" , count ) ; } }", "label": 0, "id": 16314}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; } int main ( void ) { int a , b , t , lcm ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d %d\" , & a , & b ) ; int gc = gcd ( a , b ) ; lcm = ( a * b ) / gc ; printf ( \"%d %d\n\" , gc , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 21501}
{"input": "int main ( void ) { int a , b , t , temp , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\n\" , & a , & b ) ; m = a * b ; if ( a <= b ) { temp = a ; a = b ; b = temp ; } while ( b != 0 ) { temp = a ; a = b ; b = temp % b ; } printf ( \"%d %d\n\" , a , ( m / a ) ) ; } return 0 ; }", "label": 1, "id": 22082}
{"input": "int main ( ) { int a , b , i , j , x , y , min , max ; int u [ 80 ] ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d\" , & b ) ; for ( i = 0 ; i < b ; i ++ ) { scanf ( \"%d\" , & u [ i ] ) ; } int cost = 0 ; j = 0 ; while ( j != b - 1 ) { x = u [ j ] ; y = u [ j + 1 ] ; if ( x > y ) { min = y ; max = x ; u [ j ] = u [ j + 1 ] ; b = b - 1 ; } else { min = x ; max = y ; u [ j + 1 ] = u [ j + 2 ] ; b = b - 1 ; } cost = cost + min ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 3, "id": 11943}
{"input": "int gcd ( int n1 , int n2 ) { if ( n2 != 0 ) { return gcd ( n2 , n1 % n2 ) ; } else { return n1 ; } } main ( ) { int g , a , b ; printf ( \"\n enter the nos:\" ) ; scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"\n the gcd: %d\" , g ) ; }", "label": 1, "id": 11137}
{"input": "void main ( ) { int a [ 100 ] ; int T , N , k , i , j ; scanf ( \"%d\" , & T ) ; for ( j = 1 ; j <= T ; j ++ ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } k = N ; for ( i = 0 ; i < ( N - 1 ) ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) k ++ ; } printf ( \"%d\" , k ) ; } }", "label": 2, "id": 10485}
{"input": "int fastread ( ) { char c = 0 ; int input ; c = getchar_unlocked ( ) ; input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; return input ; } int main ( ) { int t , n , i , j ; int arr [ 102 ] [ 102 ] ; t = fastread ( ) ; while ( t -- ) { n = fastread ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = fastread ( ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] += ( ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 6246}
{"input": "void main ( ) { int i , j , t , a [ 100 ] , b , l , n , m ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & m ) ; for ( j = 0 ; j < m ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = m - 1 , b = 0 ; j > 0 ; j -- ) { for ( l = 0 ; a [ j ] != 0 ; ) { n = a [ j ] ; a [ j ] = a [ j ] / 10 ; if ( l < n ) { l = n ; } } b = b + l ; } printf ( \"%d\" , b ) ; } }", "label": 1, "id": 5482}
{"input": "int main ( ) { int i , j , n , l ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & l ) ; while ( l > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } l -- ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15943}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int t , a , b , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = gcd ( a , b ) ; a /= c ; b /= c ; printf ( \"%d %d\n\" , c , a * b * c ) ; } }", "label": 1, "id": 3372}
{"input": "int main ( ) { long long int t , n , i , j , k , d ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] , c = 0 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } for ( j = 0 ; j < n - 1 ; j ++ ) { d = 0 ; for ( k = j ; k < n ; k ++ ) { if ( a [ k + 1 ] >= a [ k ] ) { d ++ ; continue ; } else { c += d ; break ; } } } c = c + n ; printf ( \"%lld\n\" , c ) ; } }", "label": 1, "id": 12569}
{"input": "int main ( ) { int t ; long int a , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; for ( a = 0 ; a < n ; a ++ ) scanf ( \"%ld\" , & arr [ a ] ) ; long int min = arr [ 0 ] ; for ( a = 1 ; a < n ; a ++ ) if ( arr [ a ] < min ) min = arr [ a ] ; printf ( \"%ld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 7400}
{"input": "int main ( ) { long t , q , p , a ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & q , & p ) ; a = p * q ; while ( p != q ) { if ( p > q ) p -= q ; else q -= p ; } printf ( \"%ld %ld\n\" , p , a / p ) ; } return 0 ; }", "label": 0, "id": 12096}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int sol [ 100 ] , t , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i <= n - 1 ; i ++ ) { sol [ i ] = a [ n - 1 ] [ i ] ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { sol [ j ] = max ( sol [ j ] , sol [ j + 1 ] ) + a [ i ] [ j ] ; } } printf ( \"%d\n\" , sol [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 14381}
{"input": "int main ( ) { int n , l , t , i , j , m , sum = 0 , sum1 = 0 , sum2 = 0 , col = 0 , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & l ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum = a [ 1 ] [ 1 ] ; col = 1 ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { t = i ; while ( t <= n ) { sum1 += a [ i ] [ col ] ; sum2 += a [ i ] [ col + 1 ] ; t ++ ; } } if ( sum1 >= sum2 ) { m = col ; } else { m = col + 1 ; } sum += a [ i ] [ m ] ; } printf ( \"%d\n\" , sum ) ; n -- ; } return 0 ; }", "label": 3, "id": 3410}
{"input": "struct node { int id ; char name [ 10 ] ; int age ; struct node * n ; } ; static struct node * hash [ 10 ] ; static struct node * ptr [ 10 ] ; void del ( int x ) { int index = x , i = 0 ; struct node * p ; ptr [ index ] = hash [ index ] ; while ( ptr [ index ] -> n ) { if ( ptr [ index ] -> id == x ) { if ( i == 0 ) { free ( hash [ index ] ) ; hash [ index ] = ptr [ index ] -> n ; } else { p -> n = ptr [ index ] -> n ; } break ; } p = ptr [ index ] ; ptr [ index ] = ptr [ index ] -> n ; i ++ ; } for ( i = 0 ; i < 10 ; i ++ ) ptr [ i ] = hash [ i ] ; printf ( \"+-----+\n|  %d  |\" , index ) ; while ( ptr [ index ] -> n ) { printf ( \"---> | %d | %s | %d | \" , ptr [ index ] -> id , ptr [ index ] -> name , ptr [ index ] -> age ) ; ptr [ index ] = ptr [ index ] -> n ; } printf ( \" ---> X\n+-----+\n\n\" ) ; } int main ( ) { int max , index , find , remove , i , id , age ; char name [ 15 ] ; scanf ( \" %d\" , & max ) ; for ( i = 0 ; i < max ; i ++ ) { scanf ( \" %d %s %d\" , & id , name , & age ) ; index = id ; if ( ! ptr [ index ] ) { hash [ index ] = ptr [ index ] = ( struct node * ) malloc ( sizeof ( struct node ) ) ; } ptr [ index ] -> id = id ; strcpy ( ptr [ index ] -> name , name ) ; ptr [ index ] -> age = age ; ptr [ index ] -> n = ( struct node * ) malloc ( sizeof ( struct node ) ) ; ptr [ index ] = ptr [ index ] -> n ; ptr [ index ] -> n = NULL ; } scanf ( \" %d %d\" , & find , & remove ) ; for ( i = 0 ; i < 10 ; i ++ ) ptr [ i ] = hash [ i ] ; for ( i = 0 ; i < 10 ; i ++ ) { printf ( \"+-----+\n|  %d  |\" , i ) ; if ( ! ptr [ i ] ) { printf ( \"\n\" ) ; continue ; } while ( ptr [ i ] -> n ) { printf ( \"---> | %d | %s | %d | \" , ptr [ i ] -> id , ptr [ i ] -> name , ptr [ i ] -> age ) ; ptr [ i ] = ptr [ i ] -> n ; } printf ( \"---> X\n\" ) ; } printf ( \"+-----+\n\n\" ) ; for ( i = 0 ; i < 10 ; i ++ ) ptr [ i ] = hash [ i ] ; index = find ; printf ( \"+-----+\n|  %d  |\" , index ) ; while ( ptr [ index ] -> n ) { printf ( \"---> | %d | %s | %d | \" , ptr [ index ] -> id , ptr [ index ] -> name , ptr [ index ] -> age ) ; ptr [ index ] = ptr [ index ] -> n ; } printf ( \" ---> X\n+-----+\n\n\" ) ; del ( remove ) ; return 0 ; }", "label": 3, "id": 760}
{"input": "int main ( ) { int t ; long int n , i , temp = 50001 , p ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; p = n ; while ( n -- ) { scanf ( \"%ld\" , & i ) ; if ( i < temp ) temp = i ; } printf ( \"%ld\n\" , temp * ( p - 1 ) ) ; } return 0 ; }", "label": 1, "id": 23909}
{"input": "int main ( void ) { int arr [ 10 ] [ 10 ] , brr [ 10 ] [ 10 ] , i , j , k , n , m , sum ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { sum = 0 ; scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i > 0 && j < i && j > 0 ) { if ( brr [ i - 1 ] [ j ] > brr [ i - 1 ] [ j - 1 ] ) brr [ i ] [ j ] = arr [ i ] [ j ] + brr [ i - 1 ] [ j ] ; else brr [ i ] [ j ] = arr [ i ] [ j ] + brr [ i - 1 ] [ j - 1 ] ; } else if ( j == i && j > 0 ) brr [ i ] [ j ] = arr [ i ] [ j ] + brr [ i - 1 ] [ j - 1 ] ; else if ( j == 0 && i > 0 ) brr [ i ] [ j ] = arr [ i ] [ j ] + brr [ i - 1 ] [ j ] ; else if ( i == 0 && j == 0 ) brr [ i ] [ j ] = arr [ i ] [ j ] ; } } for ( j = 0 ; j < m ; j ++ ) { if ( brr [ m - 1 ] [ j ] > sum ) sum = brr [ m - 1 ] [ j ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 6832}
{"input": "int row [ 101 ] [ 101 ] , cur , rows ; int main ( ) { int tc , i , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & rows ) ; i = 0 ; cur = 0 ; for ( i = 0 ; i < rows ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & row [ i ] [ j ] ) ; for ( i = rows - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( row [ i ] [ j ] > row [ i ] [ j + 1 ] ) row [ i - 1 ] [ j ] += row [ i ] [ j ] ; else row [ i - 1 ] [ j ] += row [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , row [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8438}
{"input": "int a [ MR ] [ MR ] , store [ MR ] [ MR ] ; int sumtrian ( int i , int j , int n ) { int t1 , t2 , t ; if ( i >= n ) return 0 ; if ( store [ i ] [ j ] != 0 ) return store [ i ] [ j ] ; t1 = sumtrian ( i + 1 , j , n ) ; t2 = sumtrian ( i + 1 , j + 1 , n ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; store [ i ] [ j ] = t ; return t ; } int main ( ) { int cases , n , i , j , ans ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { scanf ( \"%d\" , & n ) ; ans = 0 ; for ( i = 0 ; i < MR ; i ++ ) for ( j = 0 ; j < MR ; j ++ ) store [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } ans = sumtrian ( 0 , 0 , n ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 18014}
{"input": "void sum_trian ( int i , int j , int rows ) ; int sum = 0 , max_sum = 0 ; short trian_mat [ 100 ] [ 100 ] ; int main ( ) { int t , rows ; int i , j ; assert ( scanf ( \"%d\" , & t ) == 1 ) ; assert ( 1 <= t && t < 1050 ) ; while ( t -- ) { assert ( scanf ( \"%d\" , & rows ) == 1 ) ; assert ( 1 <= rows && rows < 100 ) ; { for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%hd\" , & trian_mat [ i ] [ j ] ) ; } sum = trian_mat [ 0 ] [ 0 ] ; sum_trian ( 0 , 0 , rows ) ; printf ( \"%d\n\" , max_sum ) ; } } return 0 ; } void sum_trian ( int i , int j , int rows ) { int x ; if ( i == rows - 1 ) { sum = sum + trian_mat [ i ] [ j ] ; if ( max_sum < sum ) max_sum = sum ; return ; } x = sum ; sum = sum + trian_mat [ i ] [ j ] ; sum_trian ( i + 1 , j , rows ) ; sum = x ; sum_trian ( i + 1 , j + 1 , rows ) ; sum = x ; }", "label": 3, "id": 9730}
{"input": "int solution ( int * array , short int length ) { short int i , j ; for ( i = length - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) * ( array + length * i + j ) += MAX ( * ( array + length * ( i + 1 ) + j ) , * ( array + length * ( i + 1 ) + j + 1 ) ) ; return * array ; } int main ( ) { unsigned short int testCases , length , i , j ; scanf ( \"%hu\" , & testCases ) ; while ( testCases -- ) { scanf ( \"%hu\" , & length ) ; int * array = ( int * ) malloc ( length * length * sizeof ( int ) ) ; for ( i = 0 ; i < length ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , ( array + i * length + j ) ) ; printf ( \"%d\n\" , solution ( array , length ) ) ; free ( array ) ; } return 0 ; }", "label": 0, "id": 21227}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , a [ n ] [ n ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = 0 ; j < i - 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"\n%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 17759}
{"input": "int main ( ) { unsigned int T , n , i , j , small = 100000 ; xyz : scanf ( \"%d\" , & T ) ; if ( T < 1 || T > 10 ) goto xyz ; int out [ T ] ; for ( i = 0 ; i < T ; i ++ ) { abc : scanf ( \"%d\" , & n ) ; if ( n < 2 || n > 50000 ) goto abc ; int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) { label : scanf ( \"%d\" , & arr [ j ] ) ; if ( arr [ j ] < 1 || arr [ j ] > 100000 ) goto label ; } j = 0 ; while ( j < n ) { if ( arr [ j ] < small ) small = arr [ j ] ; j ++ ; } out [ i ] = small * ( n - 1 ) ; } for ( i = 0 ; i < T ; i ++ ) { printf ( \"%d\n\" , out [ i ] ) ; } return 0 ; }", "label": 1, "id": 9802}
{"input": "int main ( ) { int a [ 100 ] [ 200 ] , i , j , t , r , temp , col ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { printf ( \"\n\" ) ; for ( j = 0 ; j < ( r + 1 ) ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } temp = a [ 0 ] [ 0 ] ; col = 0 ; for ( i = 1 ; i < r ; i ++ ) { if ( a [ i ] [ col ] > a [ i ] [ col + 1 ] ) { temp += a [ i ] [ col ] ; } else { temp += a [ i ] [ col + 1 ] ; col ++ ; } } printf ( \"\n%d\" , temp ) ; } return 0 ; }", "label": 1, "id": 7485}
{"input": "int main ( ) { int t ; long n , num , prev , i ; long long cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%ld%ld\" , & n , & prev ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( \"%ld\" , & num ) ; if ( prev > num ) prev = num ; } cost = ( long long ) prev * ( long long ) n - 1 ; printf ( \"%lld\n\" , cost ) ; } }", "label": 1, "id": 1540}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , i , a , b , c ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; c = a * b ; printf ( \"%d \" , gcd ( a , b ) ) ; printf ( \"%d\n\" , c / gcd ( a , b ) ) ; } } int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; }", "label": 1, "id": 11764}
{"input": "int main ( ) { int t ; long int a , b , g , l , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; i = 1 ; while ( i <= a && i <= b ) { if ( a % i == 0 && b % i == 0 ) g = i ; i ++ ; } printf ( \"%ld %ld\n\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 2, "id": 5413}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; long int i = 0 ; while ( i < n ) { scanf ( \"%ld\" , & a [ i ] ) ; i += 1 ; } i = 0 ; long int min = a [ 0 ] ; while ( i < n ) { if ( a [ i ] < min ) { min = a [ i ] ; } i += 1 ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 364}
{"input": "int hcf ( int a , int b ) { if ( b == 0 ) return a ; else return hcf ( b , a % b ) ; } int main ( ) { int a , b , i , t , hc , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; hc = hcf ( a , b ) ; lcm = ( a * b ) / hc ; printf ( \"%d %d\n\" , hc , lcm ) ; } }", "label": 1, "id": 5601}
{"input": "int main ( void ) { long int a , b , hcf , flag = 0 , min , temp , max ; int t , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; min = a >= b ? b : a ; max = a >= b ? a : b ; flag = 0 ; while ( flag != 1 ) { if ( max % min == 0 ) { flag = 1 ; hcf = min ; } else { temp = min ; min = max % min ; max = temp ; } } printf ( \"%ld\" , hcf ) ; printf ( \"% ld\" , ( ( a * b ) / hcf ) ) ; } return 0 ; }", "label": 1, "id": 19384}
{"input": "int disp ( int ) ; int main ( ) { int t , no , ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & no ) ; ans = disp ( no ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; } int disp ( int n ) { int a [ n ] [ n ] , i , j , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } for ( i = 0 , j = n - 1 ; j >= 0 ; j -- , i ++ ) { sum = sum + a [ i ] [ j ] ; } return sum ; }", "label": 1, "id": 3796}
{"input": "int main ( ) { int t , s = 0 ; long long int n ; int a [ 50000 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%lld\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { a [ i + 1 ] = 0 ; s += a [ i ] ; } else { a [ i ] = 0 ; s += a [ i + 1 ] ; } } printf ( \"%d\n\" , s ) ; s = 0 ; t -- ; } return 0 ; }", "label": 1, "id": 26969}
{"input": "int main ( ) { long int t ; long long int n , i , min = 0 ; long long int a [ 50001 ] ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; scanf ( \"%lld\" , a [ 0 ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , a [ i ] ) ; if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 3, "id": 25381}
{"input": "int gcd_lcm ( int x , int y ) { int a = x % y ; if ( a == 0 ) return y ; gcd_lcm ( y , a ) ; } int main ( ) { int t , swap , i , x , y , c , s ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & x , & y ) ; if ( y > x ) { swap = x ; x = y ; y = swap ; } if ( x % y == 0 ) { c = ( x * y ) / y ; printf ( \"%d %d\n\" , y , c ) ; } else { s = gcd_lcm ( x , y ) ; c = ( x * y ) / s ; printf ( \"%d %d\n\" , s , c ) ; } } return 0 ; }", "label": 1, "id": 9655}
{"input": "int main ( ) { int n , a , b ; scanf ( \"%d\" , & n ) ; if ( n >= 1 && n <= 1000 ) while ( n > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; int n1 = a , n2 = b ; if ( a >= 1 && a <= 1000000 && b >= 1 && b <= 1000000 ) while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\" , a , ( n1 * n2 ) / a ) ; n -- ; } return 0 ; }", "label": 1, "id": 14969}
{"input": "int scan_f ( int * location ) { register int digit ; register int result = 0 ; while ( ( digit = getchar ( ) ) >= '0' ) result = ( result << 3 ) + ( result << 1 ) + digit - '0' ; * location = result ; return 0 ; } int max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int main ( ) { int t ; scan_f ( & t ) ; while ( t -- ) { int n ; int a [ 5556 ] , b [ 5556 ] = { 0 } ; scan_f ( & n ) ; int x ; x = ( n * ( n + 1 ) ) / 2 ; int i ; for ( i = 0 ; i < x ; i ++ ) { scan_f ( & a [ i ] ) ; } int c = 3 ; int j , k ; int y ; k = 2 ; b [ 0 ] = a [ 0 ] + a [ 1 ] ; int m = 0 ; b [ 1 ] = a [ 0 ] + a [ 2 ] ; y = c ; for ( j = 2 ; j < n ; j ++ ) { for ( m = 0 + m ; m < ( ( j * ( j + 1 ) ) / 2 ) - 1 ; m ++ ) { while ( k -- ) { b [ m + y - 1 ] = max ( ( b [ m ] + a [ m + y ] ) , b [ m + y - 1 ] ) ; y ++ ; } k = 2 ; y = c ; } y ++ ; c ++ ; } int maxi = 0 ; int l ; for ( l = 0 ; l < x - 1 ; l ++ ) { maxi = max ( maxi , b [ l ] ) ; } printf ( \"%d\n\" , maxi ) ; } }", "label": 1, "id": 25547}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int num1 , num2 , gcd , lcm , numerator , denominator , remainder ; printf ( \"enter two numbers:\" ) ; scanf ( \"%lld%lld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%lld%lld/n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 3048}
{"input": "int n , a [ 105 ] [ 105 ] ; int add ( int i , int j ) { int sum ; sum = 0 ; if ( i == n ) { sum = sum + a [ i ] [ j ] ; return sum ; } else { sum = sum + a [ i ] [ j ] ; int a , b ; a = add ( i + 1 , j ) ; b = add ( i + 1 , j + 1 ) ; if ( a > b ) { sum += a ; } else { sum += b ; } return sum ; } } int main ( ) { int p ; scanf ( \"%d\" , & p ) ; while ( p -- ) { int i , j ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\" , add ( 1 , 1 ) ) ; } return 0 ; }", "label": 2, "id": 22728}
{"input": "int main ( ) { int a , b , T , d , e , r , g , l , i ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; d = a ; e = b ; while ( e != 0 ) { r = d % e ; d = e ; e = r ; } g = d ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 7814}
{"input": "int maxim ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int non , nor ; scanf ( \"%d\" , & non ) ; while ( non -- ) { scanf ( \"%d\" , & nor ) ; int arr [ nor ] [ nor ] ; memset ( arr , 0 , sizeof ( nor ) ) ; int i , j ; for ( i = 0 ; i < nor ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = nor - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= nor - 2 ; j ++ ) arr [ i ] [ j ] += maxim ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } printf ( \"\n%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 23897}
{"input": "short int max_sum ( short int * , short int ) ; int main ( ) { short int i , j , line , n , size ; short int arr [ 5100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & line ) ; size = line * ( line + 1 ) / 2 ; for ( j = 0 ; j < size ; j ++ ) scanf ( \"%d\" , & arr [ j ] ) ; printf ( \"%d\n\" , max_sum ( arr , size ) ) ; } return 0 ; } short int max_sum ( short int arr [ ] , short int size ) { short int count , i , index , j , lower , max , upper ; short int sum [ 5100 ] ; sum [ 0 ] = arr [ 0 ] ; j = 0 ; i = lower = 1 ; count = upper = 2 ; while ( i < size ) { while ( i <= upper ) { if ( ( i == lower ) || ( j == 0 ) ) sum [ i ] = arr [ i ] + sum [ j ] ; else if ( i == upper ) sum [ i ] = arr [ i ] + sum [ j - 1 ] ; else { if ( sum [ j ] > sum [ j - 1 ] ) sum [ i ] = arr [ i ] + sum [ j ] ; else sum [ i ] = arr [ i ] + sum [ j - 1 ] ; } i ++ ; if ( i != upper ) j ++ ; } lower += count ; count ++ ; upper += count ; } index = lower - count + 1 ; max = sum [ index ] ; for ( i = index + 1 ; i < size ; i ++ ) if ( sum [ i ] > max ) max = sum [ i ] ; return max ; }", "label": 1, "id": 7843}
{"input": "int main ( ) { int n1 , n2 , i , gcd , t ; long long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; ( i <= n1 ) && ( i <= n2 ) ; ++ i ) { if ( ( n1 % i == 0 ) && ( n2 % i == 0 ) ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \" %d  %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 3735}
{"input": "int main ( ) { int a [ 50000 ] , n , t , i , tep , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { i = 0 ; scanf ( \"%d\" , & n ) ; while ( i < n ) scanf ( \"%d\" , & a [ i ++ ] ) ; tep = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < tep ) tep = a [ i ] ; } s = tep * ( n - 1 ) ; printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 0, "id": 23481}
{"input": "void scanNumb ( int * a ) { int c = 0 ; * a = 0 ; while ( c < '0' ) c = getchar ( ) ; while ( c >= '0' && c <= '9' ) { * a = * a * 10 + c - '0' ; c = getchar ( ) ; } } int main ( int argc , char * argv [ ] ) { int t , n , i , j ; scanNumb ( & t ) ; while ( t -- ) { scanNumb ( & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanNumb ( & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 21992}
{"input": "long long int subArrCount = 0 ; int arr [ 100000 ] ; int main ( void ) { unsigned int totalTest , testLoop , arrSize , arrLoop ; long long unsigned int i , temp ; scanf ( \"%d\" , & totalTest ) ; for ( testLoop = 0 ; testLoop < totalTest ; testLoop ++ ) { scanf ( \"%d\" , & arrSize ) ; for ( i = 0 ; i < arrSize ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } temp = arrSize - 1 ; for ( arrLoop = 0 ; arrLoop < arrSize ; arrLoop ++ ) { subArrCount ++ ; for ( i = arrLoop ; i < temp ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { subArrCount ++ ; } else break ; } } printf ( \"%d\n\" , subArrCount ) ; subArrCount = 0 ; } return ( 0 ) ; }", "label": 0, "id": 22036}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else gcd ( b , a % b ) ; } main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a , j , b ; scanf ( \"%d%d\" , & a , & b ) ; int s = 1 , n ; if ( a > b ) s = gcd ( a , b ) ; else s = gcd ( b , a ) ; long long int c = a * b / s ; printf ( \"%d %d\n\" , s , c ) ; } }", "label": 1, "id": 25570}
{"input": "int main ( ) { int A , B , m , i , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) m = B ; else m = A ; for ( i = m ; i >= 1 ; i -- ) { if ( A % i == 0 && B % i == 0 ) { printf ( \"%d %d\n\" , i , ( A * B ) / i ) ; break ; } } } return 0 ; }", "label": 1, "id": 14093}
{"input": "int main ( ) { int t , i , j , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned long n ; scanf ( \"%lu\" , & n ) ; int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lu\" , & arr [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n && arr [ j ] > arr [ j + 1 ] ) { temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( \"%lu\n\" , arr [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 8616}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int n1 , n2 , gcd , lcm ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( int i = 1 ; i <= n1 && i <= n2 ; i ++ ) { if ( ( n1 % i == 0 ) && ( n2 % i == 0 ) ) { gcd = i ; } } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 16789}
{"input": "int main ( ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int count = 1 , ans = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - 1 ] ) count ++ ; else { ans += ( count * ( count - 1 ) ) / 2 ; count = 1 ; } } ans += n ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 18160}
{"input": "int gcd ( int num1 , int num2 ) ; int lcm ( int num1 , int num2 ) ; int main ( ) { int t , num1 , num2 , GCD ; int LCM ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; GCD = gcd ( num1 , num2 ) ; LCM = lcm ( num1 , num2 ) ; printf ( \"%d %d\n\" , GCD , LCM ) ; } return 0 ; } int gcd ( int num1 , int num2 ) { if ( num2 != 0 ) return gcd ( num2 , num1 % num2 ) ; else return num1 ; } int lcm ( int num1 , int num2 ) { return ( num1 * num2 ) / gcd ( num1 , num2 ) ; }", "label": 1, "id": 19299}
{"input": "int main ( ) { int n , r , s = 0 ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { s = 0 ; scanf ( \"%d\" , & r ) ; int * p = ( int * ) malloc ( r * r * sizeof ( int ) ) ; for ( int j = 0 ; j < r ; j ++ ) { for ( int k = 0 ; k < r ; k ++ ) * ( p + j * r + k ) = 0 ; } for ( int j = 0 ; j < r ; j ++ ) { for ( int k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , ( p + j * r + k ) ) ; } int k = 0 ; for ( int j = 0 ; j < r ; j ++ ) { if ( * ( p + j * r + k ) > * ( p + j * r + ( k + 1 ) ) ) s = s + * ( p + j * r + k ) ; else { s = s + * ( p + j * r + ( k + 1 ) ) ; k ++ ; } } printf ( \"%d\n\" , s ) ; free ( p ) ; } }", "label": 1, "id": 2635}
{"input": "int main ( void ) { int test ; long long int a , b , i ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; long long int hcf ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; } } long long int lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 5362}
{"input": "int main ( ) { int t , n , cost , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; while ( n > 1 ) { i = 0 ; if ( arr [ i ] > arr [ i + 1 ] ) { cost += arr [ i + 1 ] ; for ( j = i + 1 ; j < n ; j ++ ) arr [ j - 1 ] = arr [ j ] ; } else { cost += arr [ i ] ; for ( j = i + 1 ; j < n ; j ++ ) arr [ j ] = arr [ j + 1 ] ; } n -- ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 20777}
{"input": "int a [ 1000 ] [ 1000 ] ; int sum [ 100 ] ; void insert ( int t ) { int i , j ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } void action ( int t ) { int i , j ; for ( i = 0 ; i < t ; i ++ ) { sum [ i ] = a [ i ] [ 0 ] + a [ i + 1 ] [ 0 ] + a [ i + 1 ] [ 1 ] ; } int max = 0 ; for ( i = 0 ; i < t ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\n\" , max ) ; } int main ( ) { int t , n , x ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; insert ( t ) ; action ( t ) ; } return 0 ; }", "label": 1, "id": 16117}
{"input": "int max1 ( int a , int b ) { return ( a > b ? a : b ) ; } int scan ( ) { int t = 0 ; char c ; c = getchar_unlocked ( ) ; while ( c < '0' || c > '9' ) c = getchar_unlocked ( ) ; while ( c >= '0' && c <= '9' ) { t = ( t << 3 ) + ( t << 1 ) + c - '0' ; c = getchar_unlocked ( ) ; } return ( t ) ; } int main ( ) { int j , n , t , i , k ; int s [ 100 ] [ 100 ] = { 0 } , max , a [ 100 ] [ 100 ] = { 0 } ; t = scan ( ) ; while ( t -- ) { max = 0 ; i = 0 ; n = scan ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = scan ( ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; else if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else { s [ i ] [ j ] = a [ i ] [ j ] + max1 ( s [ i - 1 ] [ j - 1 ] , s [ i - 1 ] [ j ] ) ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s [ n - 1 ] [ i ] > max ) max = s [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 24660}
{"input": "int get ( ) { char c ; while ( c = getchar ( ) , ( c < '0' || c > '9' ) && ( c != '-' ) ) ; int flag = ( c == '-' ) ; if ( flag ) c = getchar ( ) ; long long x = 0 ; while ( c >= '0' && c <= '9' ) { x = x * 10 + c - 48 ; c = getchar ( ) ; } return flag ? - x : x ; } int main ( ) { int t , i , n , j , a [ 100 ] [ 100 ] = { { 0 } } ; t = get ( ) ; while ( t -- ) { n = get ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = get ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9800}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , i ; long long int sum = 0 ; scanf ( \"%ld\" , & n ) ; long long int arr [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; } b [ 0 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] >= arr [ i - 1 ] ) { b [ i ] = b [ i - 1 ] + 1 ; } } for ( i = 0 ; i < n ; i ++ ) { sum = sum + b [ i ] ; } printf ( \"%lld\n\" , sum ) ; } }", "label": 1, "id": 23913}
{"input": "int max ( int a , int b ) { int result ; if ( a > b ) { result = a ; } else { result = b ; } return result ; } int main ( ) { int a [ 100 ] [ 100 ] ; int answer [ 100 ] ; int more , rows , i , j , greatest , track = 0 , var ; scanf ( \"%d\" , & more ) ; var = more ; while ( more ) { scanf ( \"%d\" , & rows ) ; scanf ( \"%d\" , & ( a [ 0 ] [ 0 ] ) ) ; for ( i = 1 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ( a [ i ] [ j ] ) ) ; if ( j != 0 && j != i ) { a [ i ] [ j ] += max ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) ; } else if ( j == 0 ) { a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } } } greatest = a [ rows - 1 ] [ 1 ] ; for ( j = 0 ; j < rows - 1 ; j ++ ) { if ( a [ rows - 1 ] [ j ] > greatest ) { greatest = a [ rows - 1 ] [ j ] ; } } answer [ track ++ ] = greatest ; more -- ; } for ( i = 0 ; i < var ; i ++ ) { printf ( \"%d\n\" , answer [ i ] ) ; } }", "label": 1, "id": 26030}
{"input": "main ( ) { int n , i , t , k , a [ 50001 ] , min , j , ans ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { ans = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } min = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( min > a [ j ] ) { min = a [ j ] ; } } ans = min * ( n - 1 ) ; printf ( \"%d\n\" , ans ) ; } }", "label": 0, "id": 24544}
{"input": "int main ( ) { int value ; int n , size , array [ 50001 ] , min , i ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & array [ i ] ) ; } min = array [ 0 ] ; for ( i = 0 ; i < size ; i ++ ) { if ( min > array [ i ] ) min = array [ i ] ; } value = ( size - 1 ) * ( long long ) min ; printf ( \"%d\n\" , value ) ; } return 0 ; }", "label": 0, "id": 6997}
{"input": "struct array { int row ; int col ; struct array * next , * prev ; } ; int n , i ; int j , cost [ 10 ] [ 10 ] , n1 , o = 0 , f = 0 , dist [ 10 ] [ 10 ] ; struct array * head = NULL , * temp ; void main ( ) { scanf ( \"%d\" , & n ) ; while ( o < n ) { int h , n2 = 0 , t = 0 ; scanf ( \"%d\" , & n1 ) ; while ( n2 < n1 ) { for ( i = 0 ; i <= n2 ; i ++ ) { scanf ( \"%d\" , & cost [ n2 ] [ i ] ) ; dist [ n2 ] [ i ] = cost [ n2 ] [ i ] ; if ( head == NULL ) { head = ( struct array * ) malloc ( sizeof ( struct array ) ) ; head -> row = ( ( ( n2 ) * n1 ) + i ) ; head -> col = ( ( ( n2 + 1 ) * n1 ) + i ) ; head -> next = NULL ; head -> prev = NULL ; } else { temp = ( struct array * ) malloc ( sizeof ( struct array ) ) ; temp -> row = ( ( ( n2 ) * n1 ) + i ) ; temp -> col = ( ( ( n2 + 1 ) * n1 ) + i ) ; temp -> next = head ; head -> prev = temp ; head = temp ; } temp = ( struct array * ) malloc ( sizeof ( struct array ) ) ; temp -> row = ( ( ( n2 ) * n1 ) + i ) ; temp -> col = ( ( ( n2 + 1 ) * n1 ) + i + 1 ) ; temp -> next = head ; head -> prev = temp ; head = temp ; } n2 ++ ; t ++ ; } h = func ( t ) ; printf ( \"%d\n\" , h ) ; o ++ ; } } int func ( int t ) { while ( temp -> next != NULL ) { temp = temp -> next ; } while ( temp -> row != ( ( n1 * n1 ) - n1 ) ) { if ( ( ( temp -> row ) ) % n1 == 0 && f % 2 == 0 ) { for ( j = 0 ; j < n1 ; j ++ ) { cost [ ( ( temp -> row ) / n1 ) ] [ j ] = dist [ ( ( temp -> row ) / n1 ) ] [ j ] ; } } if ( ( ( temp -> row ) ) % n1 == 0 ) f ++ ; if ( dist [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] < cost [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] + cost [ ( temp -> row ) / n1 ] [ ( temp -> row ) % n1 ] ) dist [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] = cost [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] + cost [ ( temp -> row ) / n1 ] [ ( temp -> row ) % n1 ] ; temp = temp -> prev ; } int max1 = - 9999 ; for ( i = ( ( n1 * n1 ) - n1 ) ; i < ( n1 * n1 ) ; i ++ ) { if ( dist [ i / n1 ] [ i % n1 ] > max1 ) max1 = dist [ i / n1 ] [ i % n1 ] ; } return max1 ; }", "label": 3, "id": 11585}
{"input": "int main ( ) { int i , j , n , l , h , a , b ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; for ( j = a ; j >= 1 ; j -- ) { if ( a % j == 0 && b % j == 0 ) { h = j ; break ; } } l = ( a * b ) / h ; printf ( \"%d %d\" , h , l ) ; } return 0 ; }", "label": 2, "id": 8926}
{"input": "int main ( void ) { int T ; long int A , B , r , C , D ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%ld %ld\" , & A , & B ) ; C = A ; D = B ; while ( B != 0 ) { r = A % B ; A = B ; B = r ; } printf ( \"%ld %ld\n\" , A , ( C / A ) * D ) ; } return 0 ; }", "label": 0, "id": 5141}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int l , i , j ; scanf ( \"%d\" , & l ) ; int n [ l ] [ l ] ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & n [ i ] [ j ] ) ; } int r , u , ul , max ; for ( r = 1 ; r < l ; r ++ ) { for ( i = 0 ; i <= r ; i ++ ) { if ( i == 0 ) n [ r ] [ 0 ] += n [ r - 1 ] [ 0 ] ; else if ( i == r ) n [ r ] [ r ] += n [ r - 1 ] [ r - 1 ] ; else { max = ( n [ r - 1 ] [ i ] > n [ r - 1 ] [ i - 1 ] ) ? n [ r - 1 ] [ i ] : n [ r - 1 ] [ i - 1 ] ; n [ r ] [ i ] += max ; } } } max = n [ l - 1 ] [ 0 ] ; for ( i = 0 ; i < l ; i ++ ) { if ( n [ l - 1 ] [ i ] > max ) max = n [ l - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 23292}
{"input": "int main ( ) { int t , a , b , c , m , l , i , r , s , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( a != 0 ) { c = a ; a = b % a ; b = c ; } if ( m <= n ) { s = m ; l = n ; } else { s = n ; l = m ; } for ( i = 0 ; i <= s ; i ++ ) { r = ( l * i ) % s ; if ( r == 0 ) break ; } printf ( \"%d %d\n\" , b , l * i ) ; } return 0 ; }", "label": 1, "id": 24906}
{"input": "int main ( ) { int tc , lp , i , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & lp ) ; int a [ lp ] [ lp ] ; for ( i = 0 ; i <= lp - 1 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = lp - 1 ; i > 0 ; i -- ) { for ( j = lp - 1 ; j > 0 ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j - 1 ] ) a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j - 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 2977}
{"input": "int main ( ) { int T , N , k ; long A [ 50000 ] , c [ 10 ] , l , i , j ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { c [ i ] = 0 ; k = 0 ; scanf ( \"%d\" , & N ) ; for ( l = 0 ; l < N ; l ++ ) { scanf ( \"%ld\" , & A [ l ] ) ; } while ( k < N - 1 ) { if ( A [ 0 ] > A [ 1 ] ) { c [ i ] += A [ 1 ] ; for ( j = 0 ; j < N - 1 ; j ++ ) { A [ j ] = A [ j + 1 ] ; } } else { c [ i ] += A [ 0 ] ; for ( j = 1 ; j < N - 1 ; j ++ ) { A [ j ] = A [ j + 1 ] ; } } k ++ ; } } for ( i = 0 ; i < T ; i ++ ) { printf ( \"%ld\n\" , c [ i ] ) ; } return 0 ; }", "label": 2, "id": 26472}
{"input": "int main ( ) { int i , j , k , n , c ; int a [ 105 ] [ 105 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & c ) ; for ( j = 0 ; j < c ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = c - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { if ( ( a [ j ] [ k ] + a [ j + 1 ] [ k ] ) > ( a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ) ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k ] ; else a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 20376}
{"input": "int main ( ) { int t , a , b , h , l , i ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( \"%d %d\" , a , b ) ; } return 0 ; } int hcf ( int a , int b ) { if ( a % b == 0 ) { return b ; } else { return ( hcf ( a % b , b ) ) ; } }", "label": 3, "id": 2596}
{"input": "void read ( int * a ) { char c = 0 ; while ( c < 33 ) { c = getchar ( ) ; } * a = 0 ; while ( c > 33 ) { * a = * a * 10 + c - '0' ; c = getchar ( ) ; } } int main ( ) { int ar [ 105 ] [ 105 ] , i , j , t , n1 ; read ( & t ) ; while ( t -- ) { read ( & n1 ) ; for ( i = 0 ; i < n1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) read ( & ar [ i ] [ j ] ) ; } for ( i = n1 - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( ar [ i ] [ j ] < ar [ i ] [ j + 1 ] ) ar [ i - 1 ] [ j ] = ar [ i - 1 ] [ j ] + ar [ i ] [ j + 1 ] ; else ar [ i - 1 ] [ j ] = ar [ i - 1 ] [ j ] + ar [ i ] [ j ] ; } } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19820}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 50005 ] , i , min , n , value , temp ; long long int min_cost ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 1 ; i < n ; i ++ ) { value = a [ i ] ; temp = i ; while ( temp > 0 && a [ temp - 1 ] > value ) { a [ temp ] = a [ temp - 1 ] ; temp -- ; } a [ temp ] = value ; } min_cost = ( a [ 0 ] * ( n - 1 ) ) ; printf ( \"%lld\n\" , min_cost ) ; } }", "label": 2, "id": 137}
{"input": "int main ( void ) { int t ; long long n , i , arr [ SIZE ] , m [ SIZE ] , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { m [ i ] = 1 ; } for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) { m [ i ] = m [ i - 1 ] + 1 ; } } for ( i = 0 ; i < n ; i ++ ) { sum += m [ i ] ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 20547}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 2084}
{"input": "int main ( ) { int t ; int a [ 50000 ] ; long long int min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , N ; scanf ( \"%d\" , & n ) ; N = n ; while ( n -- ) { scanf ( \"%d\" , & a [ N - n ] ) ; } min = a [ 1 ] ; int i ; for ( i = 2 ; i <= N ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( \"%lld\n\" , min * ( N - 1 ) ) ; } return 0 ; }", "label": 0, "id": 25356}
{"input": "int gcd ( int a , int b ) { if ( ! ( a % b ) ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int t , a , b , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%d %d\n\" , g , a * b / g ) ; } return 0 ; }", "label": 1, "id": 7520}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b ; long int ans ; scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { ans = a % b ; if ( ans == 0 ) { printf ( \"%ld %ld\n\" , ans , a ) ; } else printf ( \"1 %ld\n\" , a * b ) ; } else { ans = b % a ; if ( ans == 0 ) printf ( \"%ld %ld\n\" , ans , b ) ; else printf ( \"1 %ld\n\" , a * b ) ; } } return 0 ; }", "label": 1, "id": 13342}
{"input": "int largest_sum ( int nrows ) ; int main ( ) { int n , rows ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & rows ) ; printf ( \"%d\n\" , largest_sum ( rows ) ) ; } return 0 ; } int largest_sum ( int rows ) { int i , j , max = 0 , num [ SIZE ] = { 0 } , sum [ SIZE ] = { 0 } ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & num [ j ] ) ; while ( j >= 0 ) { sum [ j ] = MAX ( sum [ j - 1 ] , sum [ j ] ) + num [ j ] ; j -- ; } } for ( i = 0 ; i < rows ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } return max ; }", "label": 2, "id": 9549}
{"input": "int main ( ) { int t ; long num1 , num2 , gcd , lcm , r , num , d ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld %ld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { num = num1 ; d = num2 ; } else { num = num2 ; d = num1 ; } r = num % d ; while ( r != 0 ) { num = d ; d = r ; r = num % d ; } gcd = d ; lcm = num1 * num2 / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; t -- ; } return 0 ; }", "label": 0, "id": 24981}
{"input": "int main ( ) { int T , a , b , m , n , temp ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( a % b != 0 ) { temp = a ; a = b ; b = temp % b ; } printf ( \"%d %d\n\" , b , ( m * n ) / b ) ; } return 0 ; }", "label": 1, "id": 16911}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , hcf ; scanf ( \"%d  %d\" , & a , & b ) ; hcf = gcd ( a , b ) ; printf ( \"%d %d\n\" , hcf , ( a * b / hcf ) ) ; } return 0 ; } int gcd ( int p , int q ) { if ( p == 0 ) return q ; else return gcd ( q % p , p ) ; }", "label": 1, "id": 26528}
{"input": "int maxm ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int cases , lines , i , j , max ; int arr [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & cases ) ; while ( cases ) { scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = 1 ; i < lines ; i ++ ) { arr [ i ] [ 0 ] += arr [ i - 1 ] [ 0 ] ; for ( j = 1 ; j <= i ; j ++ ) { arr [ i ] [ j ] += maxm ( arr [ i - 1 ] [ j - 1 ] , arr [ i - 1 ] [ j ] ) ; } } i = lines - 1 ; max = arr [ i ] [ 0 ] ; for ( j = 0 ; j < lines ; j ++ ) { if ( arr [ i ] [ j ] > max ) max = arr [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; cases -- ; } return 0 ; }", "label": 0, "id": 26570}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i ; int ans [ test ] ; for ( i = 0 ; i < test ; i ++ ) { ans [ i ] = 0 ; int n ; scanf ( \"%d\" , & n ) ; long a [ n ] ; int j ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { int k ; int count = 1 ; for ( k = j ; k < n - 1 ; k ++ ) { if ( a [ k ] < a [ k + 1 ] ) { count ++ ; } else break ; } ans [ i ] = ans [ i ] + count ; } } for ( i = 0 ; i < test ; i ++ ) { printf ( \"\n%d\" , ans [ i ] ) ; } return 0 ; }", "label": 1, "id": 17955}
{"input": "int main ( ) { int t ; long int n , count , i , j , k , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { temp = 0 ; for ( k = i ; k <= j - 1 ; k ++ ) { if ( arr [ k + 1 ] < arr [ k ] ) { temp = 1 ; break ; } } if ( temp == 0 ) count ++ ; } } printf ( \"%ld\n\" , count + n ) ; } return 0 ; }", "label": 2, "id": 24718}
{"input": "int main ( void ) { long long int t ; scanf ( \"%lld\" , & t ) ; long long int a [ t ] , i , j , min ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; long long int b [ a [ i ] ] ; for ( j = 0 ; j < a [ i ] ; j ++ ) { scanf ( \"%lld\" , & b [ j ] ) ; } min = b [ 0 ] ; for ( j = 0 ; j < a [ i ] ; j ++ ) { if ( min > b [ j ] ) { min = b [ j ] ; } } min = min * ( a [ i ] - 1 ) ; printf ( \"%lld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 7178}
{"input": "int max ( const int a , const int b ) { return a <= b ? b : a ; } int largest ( int * nums , int N ) { int i , larg = 0 ; for ( i = 0 ; i < N ; i ++ ) { if ( nums [ N * ( N - 1 ) + i ] > larg ) { larg = nums [ N * ( N - 1 ) + i ] ; } } return larg ; } void init ( int * nums , int N ) { int i , j ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < N ; j ++ ) { nums [ i * N + j ] = 0 ; } } } int main ( int argc , char * argv [ ] ) { int T ; scanf ( \"%d\" , & T ) ; int N ; while ( T -- ) { scanf ( \"%d\" , & N ) ; int nums [ N * N ] ; init ( nums , N ) ; int i , j , val ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & val ) ; nums [ i * N + j ] = val ; if ( i != 0 ) { if ( j > 0 ) { nums [ i * N + j ] += max ( nums [ ( i - 1 ) * N + j ] , nums [ ( i - 1 ) * N + j - 1 ] ) ; } else { nums [ i * N ] += nums [ ( i - 1 ) * N ] ; } } } } printf ( \"%d\n\" , largest ( nums , N ) ) ; } return 0 ; }", "label": 0, "id": 4209}
{"input": "int main ( ) { int T , N ; while ( T -- ) { scanf ( \"%d\" , & N ) ; int A , i , min ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & A ) ; if ( i == 0 ) min = A ; else if ( A < min ) min = A ; } printf ( \"%d\" , min * ( N - 1 ) ) ; } return 0 ; }", "label": 1, "id": 8571}
{"input": "int main ( ) { int n , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int dp [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) dp [ i ] [ j ] = 0 ; dp [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j != 0 ) dp [ i ] [ j ] = a [ i ] [ j ] + max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; else dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - 1 ] [ j ] ; } } int m = INT_MIN ; for ( j = 0 ; j < n ; j ++ ) { if ( m < dp [ n - 1 ] [ j ] ) m = dp [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , m ) ; } } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; }", "label": 0, "id": 19859}
{"input": "int main ( ) { int a , b , t , i , p , q , gcd , lcm ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\n\" , & a , & b ) ; p = a ; q = b ; while ( p != q ) { if ( p > q ) p = p - q ; else q = q - p ; } gcd = p ; lcm = ( a * b ) / p ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 20404}
{"input": "int main ( ) { int cases , test , n , i , j ; scanf ( \"%d\" , & cases ) ; for ( test = 1 ; test <= cases ; test ++ ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 517}
{"input": "int getGCD ( int A , int B ) ; int main ( ) { int T , A , B , n ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & A , & B ) ; n = getGCD ( A , B ) ; printf ( \"%d %d\n\" , n , ( A * B ) / n ) ; } return 0 ; } int getGCD ( int A , int B ) { int max , min , t , s ; if ( A > B ) { max = A ; min = B ; } else { max = B ; min = A ; } if ( max % min == 0 ) { return min ; } else { while ( 1 ) { t = max % min ; if ( t == 0 ) break ; s = min ; min = t ; max = s ; } return min ; } }", "label": 1, "id": 8481}
{"input": "long long int t , n , arr , i , min ; int main ( ) { scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr ) ; if ( i == 0 ) min = arr ; else if ( arr < min ) min = arr ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 752}
{"input": "int main ( ) { int t , gcd , a , i , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; int z = 0 ; if ( a > b ) { if ( a % b == 0 ) { printf ( \"%d \" , b ) ; printf ( \"%d\n\" , a ) ; } else if ( a % b != 0 ) { for ( i = 1 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { if ( i > z ) { z = i ; } } } printf ( \"%d \" , z ) ; printf ( \"%d\n\" , a * b / z ) ; } } if ( b > a ) { if ( b % a == 0 ) { printf ( \"%d \" , a ) ; printf ( \"%d\n\" , b ) ; } if ( b % a != 0 ) { for ( i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { if ( i > z ) { z = i ; } } } printf ( \"%d \" , z ) ; printf ( \"%d\n\" , a * b / z ) ; } } } }", "label": 1, "id": 22035}
{"input": "long long int gcd1 ( long long int a , long long int b ) { while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , gcd , lcm ; scanf ( \"%lld%lld\" , & a , & b ) ; gcd = gcd1 ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 5370}
{"input": "int main ( ) { int t ; long long a , b , i , mul , gcd , x ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; mul = a * b ; if ( a < b ) { for ( ; a != 0 ; ) { x = a ; a = b % a ; b = x ; } gcd = b ; } else if ( b < a ) { for ( ; b != 0 ; ) { x = b ; b = a % b ; a = x ; } gcd = a ; } printf ( \"%lld %lld\n\" , gcd , mul / gcd ) ; } return 0 ; }", "label": 0, "id": 25549}
{"input": "int main ( ) { int a [ 101 ] [ 101 ] , t , i , w , j , k , nos , b [ 101 ] , v , temp ; scanf ( \"%d\" , & t ) ; while ( t >= 1 ) { for ( j = 0 ; j <= 100 ; j ++ ) { b [ j ] = 0 ; } for ( i = 0 ; i <= 100 ; i ++ ) { for ( j = 0 ; j <= 100 ; j ++ ) { a [ i ] [ j ] = 0 ; } } scanf ( \"%d\" , & nos ) ; for ( i = 1 ; i <= nos ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= nos ; i ++ ) { for ( j = 1 ; j <= nos ; j ++ ) { printf ( \"%d \" , a [ i ] [ j ] ) ; } } printf ( \"\n\n\n\n\n\" ) ; for ( i = 1 ; i <= nos ; i ++ ) { b [ i ] = a [ nos ] [ i ] ; } for ( k = 1 ; k <= nos ; k ++ ) { printf ( \"%d \" , b [ k ] ) ; } printf ( \"\n\" ) ; for ( i = nos ; i >= 1 ; i -- ) { for ( j = 1 ; j <= nos ; j ++ ) { v = b [ j ] + a [ i - 1 ] [ j - 1 ] ; w = b [ j ] + a [ i - 1 ] [ j ] ; if ( v > b [ j - 1 ] ) b [ j - 1 ] = v ; if ( w > b [ j ] ) b [ j ] = w ; } for ( k = 1 ; k <= nos ; k ++ ) { printf ( \"%d \" , b [ k ] ) ; } printf ( \"\n\" ) ; } for ( i = 0 ; i <= 99 ; i ++ ) { if ( b [ i ] > b [ i + 1 ] ) { temp = b [ i ] ; b [ i ] = b [ i + 1 ] ; b [ i + 1 ] = temp ; } } printf ( \"%d\n\" , b [ 100 ] ) ; t -- ; } return 0 ; }", "label": 2, "id": 12815}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; long long int i , j , temp ; long long int n ; long long int * a ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; a = ( long long int * ) malloc ( sizeof ( long long int ) * n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } temp = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( temp > a [ j ] ) { temp = a [ j ] ; } } printf ( \"%lld\n\" , temp * ( n - 1 ) ) ; free ( a ) ; } }", "label": 0, "id": 19929}
{"input": "int main ( ) { int T , A , B , a , b , temp ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; A = a ; B = b ; while ( A % B ) { temp = B ; B = A % B ; A = temp ; } printf ( \"%d %d\n\" , B , ( a * b ) / B ) ; } return 0 ; }", "label": 1, "id": 18782}
{"input": "int main ( ) { int t , g , rem , nr , dr ; scanf ( \"%d\" , & t ) ; for ( g = 1 ; g <= t ; g ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; nr = a ; dr = b ; rem = nr % dr ; while ( rem != 0 ) { nr = dr ; dr = rem ; rem = nr % dr ; } printf ( \"%d %d\" , dr , ( a * b ) / dr ) ; } return 0 ; }", "label": 1, "id": 17808}
{"input": "int main ( ) { int i , j , t , n , max , a [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; sum [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; max = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 0 ) sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else if ( sum [ i - 1 ] [ j ] > sum [ i - 1 ] [ j - 1 ] ) sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + a [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 13818}
{"input": "int main ( ) { int n , a , b , i , lcm , ca , cb , rem ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; ca = a ; cb = b ; while ( a != 0 ) { rem = b % a ; b = a ; a = rem ; } lcm = ( ca * cb ) / a ; printf ( \"%d %d\" , a , lcm ) ; } return ( 0 ) ; }", "label": 3, "id": 4468}
{"input": "int n , k , s [ 100 ] [ 100 ] = { 0 } , ar [ 100 ] [ 100 ] , j , i , t ; int funct ( int ar [ 100 ] [ 100 ] , int n ) { int a , b ; for ( a = n - 1 ; a >= 0 ; a -- ) { for ( b = 0 ; b < n ; b ++ ) s [ a ] [ b ] = ar [ a ] [ b ] + max ( s [ a + 1 ] [ b ] , s [ a + 1 ] [ b + 1 ] ) ; } return s [ 0 ] [ 0 ] ; } int main ( ) { int sm ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } sm = funct ( ar , n ) ; printf ( \"%d\n\" , sm ) ; } return 0 ; }", "label": 1, "id": 85}
{"input": "int d [ MAX_N ] ; int d2 [ MAX_N ] ; int main ( ) { int t , n , res , dd , i , j , k , l ; int * pd , * pd2 , * pdh ; scanf ( \"%d\" , & t ) ; do { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & res ) ; if ( n == 1 ) { printf ( \"%d\n\" , res ) ; continue ; } else if ( n == 2 ) { scanf ( \"%d\" , & i ) ; scanf ( \"%d\" , & j ) ; res += ( i < j ? j : i ) ; printf ( \"%d\n\" , res ) ; continue ; } for ( i = 0 ; i < MAX_N ; ++ i ) { d [ i ] = 0 ; d2 [ i ] = 0 ; } d [ 0 ] = res ; pd = d ; pd2 = d2 ; for ( i = 1 ; i < n ; ++ i ) { l = k = 0 ; res = pd [ k ] ; scanf ( \"%d\" , & dd ) ; pd2 [ l ++ ] = res + dd ; for ( j = 1 ; j < i ; ++ j ) { scanf ( \"%d\" , & dd ) ; pd2 [ l ++ ] = res + dd ; res = pd [ ++ k ] ; pd2 [ l ++ ] = res + dd ; } scanf ( \"%d\" , & dd ) ; pd2 [ l ++ ] = res + dd ; pdh = pd ; pd = pd2 ; pd2 = pdh ; } res = pd [ 0 ] ; for ( i = 1 ; i < ( n - 1 ) << 1 ; ++ i ) if ( pd [ i ] > res ) res = pd [ i ] ; printf ( \"%d\n\" , res ) ; } while ( -- t ) ; return 0 ; }", "label": 1, "id": 8476}
{"input": "int main ( void ) { int a [ N ] , t , n ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] ) ; int m = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( m > a [ i ] ) { m = a [ i ] ; } } printf ( \"%d\n\" , m * ( n - 1 ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 16556}
{"input": "int sumtobase ( int * * intpyr , int row , int col , int size ) { if ( row == size ) return intpyr [ row ] [ col ] ; else { int way1 , way2 ; way1 = intpyr [ row ] [ col ] + sumtobase ( intpyr , row + 1 , col + 1 , size ) ; way2 = intpyr [ row ] [ col ] + sumtobase ( intpyr , row + 1 , col , size ) ; if ( way1 > way2 ) return way1 ; else return way2 ; } } int makeNumPyr ( char * * pyramid , int size ) { int * * intpyr ; int i , j , ans = 0 ; intpyr = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( i = 0 ; i < size ; i ++ ) { char temp [ 4 ] ; int sz = strlen ( pyramid [ i ] ) ; int track = 0 ; int pyrtrck = 0 ; intpyr [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= sz ; j ++ ) { if ( ( pyramid [ i ] [ j ] == ' ' ) || ( pyramid [ i ] [ j ] == '\\0' ) ) { temp [ track ] = '\\0' ; track = 0 ; intpyr [ i ] [ pyrtrck ] = atoi ( temp , 10 ) ; pyrtrck ++ ; } else { temp [ track ] = pyramid [ i ] [ j ] ; track ++ ; } } } return sumtobase ( intpyr , 0 , 0 , size - 1 ) ; } int main ( ) { int itr ; int size ; char * * pyramid ; int * ans , i ; scanf ( \"%d\" , & itr ) ; ans = ( int * ) malloc ( itr * sizeof ( int ) ) ; for ( i = 0 ; i < itr ; i ++ ) { int j ; scanf ( \"%d\" , & size ) ; pyramid = ( char * * ) malloc ( size * sizeof ( char * ) ) ; for ( j = 0 ; j < size ; j ++ ) { fflush ( stdin ) ; pyramid [ j ] = ( char * ) malloc ( 300 * sizeof ( char ) ) ; scanf ( \"%[^\n]\" , pyramid [ j ] ) ; } ans [ i ] = makeNumPyr ( pyramid , size ) ; } for ( i = 0 ; i < itr ; i ++ ) printf ( \"%d\n\" , ans [ i ] ) ; return 0 ; }", "label": 2, "id": 18714}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( int argc , char const * argv [ ] ) { int t , n , i , j , res ; scanf ( \"%d\" , & n ) ; int input [ 100 ] [ 100 ] ; int sum [ 100 ] [ 100 ] ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) { scanf ( \"%d\" , & input [ i ] [ j ] ) ; } } i -- ; j = 0 ; while ( j <= i ) { sum [ i ] [ j ] = input [ i ] [ j ] ; j ++ ; } i -- ; for ( ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { sum [ i ] [ j ] = max ( input [ i ] [ j ] + sum [ i + 1 ] [ j ] , input [ i ] [ j ] + sum [ i + 1 ] [ j + 1 ] ) ; } } res = input [ 0 ] [ 0 ] ; for ( i = 1 , j = 0 ; i < t ; ++ i ) { if ( max ( sum [ i ] [ j ] , sum [ i ] [ j + 1 ] ) != sum [ i ] [ j ] ) { res += input [ i ] [ j + 1 ] ; j ++ ; } else { res += input [ i ] [ j ] ; } } printf ( \"%d\n\" , res ) ; } return 0 ; }", "label": 0, "id": 16458}
{"input": "int main ( ) { int T , i , j ; long int A , B ; long long int gcd , lcm ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld %ld\" , & A , & B ) ; if ( A > B ) { for ( j = 1 ; j < B ; j ++ ) { if ( A % j == 0 && B % j == 0 ) gcd = j ; } } if ( B > A ) { for ( j = 1 ; j < A ; j ++ ) { if ( A % j == 0 && B % j == 0 ) gcd = j ; } } lcm = ( A * B ) / gcd ; printf ( \"%lld %lld\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 16153}
{"input": "int a [ 102 ] [ 102 ] , n ; int main ( ) { int tc , i , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 10467}
{"input": "long int gcd ( long int n , long int m ) { if ( n == 0 ) return m ; if ( m == 0 ) return n ; return gcd ( m , n % m ) ; } int main ( void ) { long int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , m ; scanf ( \"%ld %ld\" , & n , & m ) ; long int g = gcd ( n , m ) ; long int l = ( n * m ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 10702}
{"input": "int input ( ) ; int main ( ) { int i , t , j , k , n , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { n = input ( ) ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) a [ j ] [ k ] = input ( ) ; for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; } inline int input ( ) { int a = 0 ; char c ; c = getchar ( ) ; while ( c < 33 ) { c = getchar ( ) ; } while ( c >= 33 ) { a = ( a << 3 ) + ( a << 1 ) + ( c - '0' ) ; c = getchar ( ) ; } return a ; } ;", "label": 2, "id": 20821}
{"input": "int main ( ) { int n , t , i , j , k , max , sum , key , num [ 100 ] [ 100 ] , loc ; int answer [ 100 ] ; int flag ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; max = 0 ; sum = 0 ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & num [ j ] [ k ] ) ; for ( j = 0 ; j < n ; j ++ ) { if ( num [ n - 1 ] [ j ] >= max ) { key = 0 ; max = num [ n - 1 ] [ j ] ; loc = j ; if ( loc == n - 1 ) key = 1 ; } } sum = sum + max ; for ( j = n - 2 ; j >= 0 ; j -- ) { if ( key == 1 ) sum += num [ j ] [ -- loc ] ; else { if ( num [ j ] [ loc ] > num [ j ] [ loc - 1 ] ) sum += num [ j ] [ loc ] ; else { sum += num [ j ] [ loc - 1 ] ; loc = loc - 1 ; } } } answer [ i ] = sum ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , answer [ i ] ) ; return 0 ; }", "label": 1, "id": 4673}
{"input": "int mat [ MAX ] [ MAX ] ; int max ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int tc , i , j , k , n ; scanf ( \"%d\" , & tc ) ; for ( k = 0 ; k < tc ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & mat [ i ] [ j ] ) ; if ( j < i + 1 ) scanf ( \"\n\" ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { mat [ i ] [ j ] = mat [ i ] [ j ] + max ( mat [ i + 1 ] [ j ] , mat [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , mat [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4813}
{"input": "int main ( ) { int n , d , r , gcd , lcm , i ; long int a , b , t ; scanf ( \"%d\" , & t ) ; printf ( \"%d\n\" , t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\\t%d\" , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else if ( b > a ) { n = b ; d = a ; } r = n % d ; while ( r != 0 ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = a * b / gcd ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 7357}
{"input": "int main ( ) { int a , c , d ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d\\t\\t%d\" , & c , & d ) ; int e , f = 0 ; for ( e = 1 ; e <= d ; e ++ ) { ( c % e > f ) ? f = c % e : 0 ; } printf ( \"%d\n\" , f ) ; } return 0 ; }", "label": 2, "id": 19930}
{"input": "int compare ( long arr [ ] , int i , int size ) { if ( ( i + 1 ) < size ) { if ( arr [ i ] <= arr [ i + 1 ] ) return ( 1 + compare ( arr , i + 1 , size ) ) ; else return 0 ; } else return 0 ; } int main ( ) { int size , i , t , n , mm ; scanf ( \"%d\" , & n ) ; for ( mm = 0 ; mm < n ; mm ++ ) { scanf ( \"%d\" , & size ) ; long arr [ size ] ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; } int sum = 0 ; for ( i = 0 ; i < size - 1 ; i ++ ) { t = compare ( arr , i , size ) ; sum += t ; } int arr2 [ size ] ; for ( i = 0 ; i < size ; i ++ ) arr2 [ i ] = arr [ i ] ; int c , d , swap ; for ( c = 0 ; c <= ( size - 1 ) ; c ++ ) { for ( d = 0 ; d <= ( size - c - 1 ) ; d ++ ) { if ( arr2 [ d ] >= arr2 [ d + 1 ] ) { swap = arr2 [ d ] ; arr2 [ d ] = arr2 [ d + 1 ] ; arr2 [ d + 1 ] = swap ; } } } int dog = 0 ; for ( i = 0 ; i < size ; i ++ ) { if ( arr2 [ i ] == arr2 [ i + 1 ] ) dog ++ ; } int goat ; goat = sum + size - dog ; printf ( \"%d\n\" , goat ) ; } return 0 ; }", "label": 2, "id": 8739}
{"input": "char array [ 5051 ] = { 0 } ; char sum [ 5051 ] = { 0 } ; int maxUpto ( int lineNumber , int endPoint ) ; int pop ( int id , int i , int j ) ; void push ( int id , int i , int j , int num ) ; int main ( int argc , char * * argv ) { int noOfCases ; scanf ( \"%d\" , & noOfCases ) ; while ( noOfCases -- ) { int N = 0 , tempSum = 0 , i = 0 , maxSum = 0 ; for ( i = 0 ; i < 5000 ; i ++ ) { array [ i ] = 0 ; sum [ i ] = 0 ; } scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N * ( N + 1 ) / 2 ; i ++ ) scanf ( \"%d\" , & array [ i ] ) ; for ( i = 0 ; i < N ; i ++ ) { tempSum = maxUpto ( N - 1 , i ) ; if ( tempSum > maxSum ) maxSum = tempSum ; } printf ( \"%d\n\" , maxSum ) ; } return 0 ; } int maxUpto ( int lineNumber , int endPoint ) { if ( pop ( 0 , lineNumber , endPoint ) != 0 ) return pop ( 0 , lineNumber , endPoint ) ; int i ; if ( lineNumber == 0 ) { push ( 0 , 0 , 0 , pop ( 1 , 0 , 0 ) ) ; return pop ( 0 , 0 , 0 ) ; } if ( endPoint == 0 ) { push ( 0 , lineNumber , 0 , ( pop ( 1 , lineNumber , 0 ) + maxUpto ( lineNumber - 1 , 0 ) ) ) ; return pop ( 0 , lineNumber , 0 ) ; } if ( endPoint <= lineNumber - 1 ) { int a = maxUpto ( lineNumber - 1 , endPoint - 1 ) ; int b = maxUpto ( lineNumber - 1 , endPoint ) ; int c = pop ( 1 , lineNumber , endPoint ) ; if ( a + c > b + c ) { push ( 0 , lineNumber , endPoint , a + c ) ; return a + c ; } else { push ( 0 , lineNumber , endPoint , b + c ) ; return b + c ; } } if ( endPoint == lineNumber ) { push ( 0 , lineNumber , lineNumber , maxUpto ( lineNumber - 1 , lineNumber - 1 ) + pop ( 1 , lineNumber , lineNumber ) ) ; return maxUpto ( lineNumber - 1 , lineNumber - 1 ) + pop ( 1 , lineNumber , lineNumber ) ; } } int pop ( int id , int i , int j ) { int index ; index = i * ( i + 1 ) / 2 + j ; if ( id == 0 ) return sum [ index ] ; else return array [ index ] ; } void push ( int id , int i , int j , int num ) { int index ; index = i * ( i + 1 ) / 2 + j ; if ( id == 0 ) sum [ index ] = num ; else array [ index ] = num ; return ; }", "label": 1, "id": 24117}
{"input": "int main ( ) { int t , i ; long long int a , b , x , y ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; x = a ; y = b ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } printf ( \"%lld \" , x ) ; x = a ; y = b ; while ( x != y ) { if ( x < y ) x = x + y ; else y = x + y ; } printf ( \"%lld\n\" , x ) ; } return 0 ; }", "label": 2, "id": 20081}
{"input": "int hcf ( int a , int b ) { int i , j , m , k ; if ( i < j ) { for ( k = i ; k >= 1 ; k -- ) { if ( j % k == 0 && i % k == 0 ) { m = k ; break ; } } } else { for ( k = j ; k >= 1 ; k -- ) { if ( i % k == 0 && j % k == 0 ) { m = k ; break ; } } } return m ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j ; scanf ( \"%d%d\" , & i , & j ) ; long long int gcd , lcm ; gcd = hcf ( i , j ) ; lcm = ( i * j ) / gcd ; printf ( \"%lld  %lld\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 11992}
{"input": "int main ( void ) { long int a , b , hcf , min , temp , max ; long int lcm ; int t , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; min = a >= b ? b : a ; max = a >= b ? a : b ; while ( 1 ) { if ( max % min == 0 ) { hcf = min ; break ; } else { temp = min ; min = max % min ; max = temp ; } } lcm = ( a * b ) / hcf ; printf ( \"%ld\" , hcf ) ; printf ( \"%c%ld\n\" , ' ' , lcm ) ; } return 0 ; }", "label": 0, "id": 20490}
{"input": "int hcf ( int a , int b ) ; int main ( ) { int gcd , lcm , a , b , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; gcd = hcf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; } int hcf ( int a , int b ) { int rem ; rem = a % b ; if ( rem == 0 ) return b ; else return hcf ( b , rem ) ; }", "label": 1, "id": 19216}
{"input": "int main ( ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] , ind = - 1 ; long min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] <= min ) { min = arr [ i ] ; ind = i ; } } printf ( \"%ld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 12757}
{"input": "int main ( ) { int a , b , i , j , T ; scanf ( \"%d\" , & T ) ; int * k = ( int * ) malloc ( T * sizeof ( int ) ) ; long int * l = ( long int * ) malloc ( T * sizeof ( int ) ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; int x = a , y = b ; while ( b != 0 ) { j = b ; b = a % b ; a = j ; } k [ i - 1 ] = a ; l [ i - 1 ] = x * y / k [ i - 1 ] ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%d %ld\n\" , k [ i ] , l [ i ] ) ; return 0 ; }", "label": 1, "id": 18977}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int small , i , j ; long long int price [ t ] ; long long int n ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld\" , & n ) ; int arr1 [ n ] ; for ( j = 1 ; j <= n ; j ++ ) { scanf ( \"%d\" , & arr1 [ j ] ) ; } small = arr1 [ 1 ] ; for ( j = 1 ; j <= n ; j ++ ) { if ( arr1 [ j ] < small ) small = arr1 [ j ] ; } price [ i ] = small * ( n - 1 ) ; } int arr1 [ n ] ; for ( i = 1 ; i <= t ; i ++ ) { printf ( \"%lld\n\" , price [ i ] ) ; } }", "label": 0, "id": 7830}
{"input": "int main ( ) { unsigned i , n , t , small , num ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & num ) ; if ( i == 0 ) small = num ; else { if ( small > num ) small = num ; } } printf ( \"%d\n\" , small * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 9650}
{"input": "int main ( ) { int * * a ; int n , i , j , p , t , k , max ; scanf ( \"%d\" , & t ) ; for ( k = 1 ; k <= t ; k ++ ) { scanf ( \"%d\" , & n ) ; p = ( n * n + n ) / 2 ; a = ( int * * ) malloc ( ( n ) * sizeof ( int * ) ) ; a [ 0 ] = ( int * ) malloc ( ( p ) * sizeof ( int ) ) ; for ( i = 1 ; i < n ; i ++ ) { a [ i ] = a [ i - 1 ] + i ; } for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( j > 0 && ( j != i ) ) a [ i ] [ j ] = max ( ( a [ i - 1 ] [ j ] ) , ( a [ i - 1 ] [ j - 1 ] ) ) + a [ i ] [ j ] ; else if ( j == i ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } max = - 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ n - 1 ] [ j ] > max ) max = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; free ( a [ 0 ] ) ; free ( a ) ; } return ( 0 ) ; }", "label": 0, "id": 12981}
{"input": "int main ( ) { int t , n , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , dp [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( ( i == 0 ) && ( j == 0 ) ) dp [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( j == i ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else { if ( dp [ i - 1 ] [ j - 1 ] >= dp [ i - 1 ] [ j ] ) dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - 1 ] [ j ] ; } } } max = dp [ n - 1 ] [ 0 ] ; for ( j = 1 ; j <= n - 1 ; j ++ ) { if ( max < dp [ n - 1 ] [ j ] ) max = dp [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 11538}
{"input": "int main ( ) { int n , i , t , j , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = t - 1 ; j > 0 ; j -- ) { for ( k = 0 ; k < t - 1 ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + 1 ] ) { a [ j - 1 ] [ k ] = a [ j - 1 ] [ k ] + a [ j ] [ k ] ; } else { a [ j - 1 ] [ k ] = a [ j - 1 ] [ k ] + a [ j ] [ k + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 19496}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , i , j , min , m ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%ld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 10641}
{"input": "int main ( ) { int r , a , b ; int x , y , lcm , t ; int i ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( b != 0 ) { r = a % b ; a = b ; b = r ; } lcm = ( x * y ) ; printf ( \"%d %d\" , a , lcm ) ; } }", "label": 1, "id": 22940}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int r , i , j ; scanf ( \"%d\" , & r ) ; int a [ r ] [ r ] ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = r - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i - 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 10146}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n , p , q , max = - 1 ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] , res [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } res [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { res [ i ] [ j ] = res [ i - 1 ] [ j ] + arr [ i ] [ j ] ; } else if ( i == j ) { res [ i ] [ j ] = res [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; } else { p = res [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; q = res [ i - 1 ] [ j ] + arr [ i ] [ j ] ; if ( p > q ) { res [ i ] [ j ] = p ; } else { res [ i ] [ j ] = q ; } if ( i == n - 1 ) { if ( arr [ i ] [ j ] > max ) { max = res [ i ] [ j ] ; } } } } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 1892}
{"input": "int main ( ) { int T , N , * A , i , j , min = 100001 , cost ; printf ( \"Enter the no. of test cases:\n\" ) ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { printf ( \"Enter size of array:\n\" ) ; scanf ( \"%d\" , & N ) ; A = ( int * ) malloc ( N * sizeof ( int ) ) ; printf ( \"Enter the array elements:\n\" ) ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%d\" , & A [ j ] ) ; if ( A [ j ] < min ) min = A [ j ] ; } free ( A ) ; cost = ( N - 1 ) * min ; printf ( \"Minimum Cost=%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 4835}
{"input": "void main ( ) { int n , m , i , j , k , tr [ 99 ] [ 99 ] ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 ; i < 99 ; i ++ ) for ( j = 0 ; j < 99 ; j ++ ) tr [ i ] [ j ] = 0 ; scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & tr [ i ] [ j ] ) ; for ( i = 1 ; i < m ; i ++ ) for ( j = 0 ; j < m - i ; j ++ ) { if ( tr [ m - i ] [ j + 1 ] > tr [ m - i ] [ j ] ) tr [ m - i - 1 ] [ j ] += tr [ m - i ] [ j + 1 ] ; else tr [ m - i - 1 ] [ j ] += tr [ m - i ] [ j ] ; } printf ( \"%d\n\" , tr [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 18416}
{"input": "int hcf ( int x , int y ) { if ( y != 0 ) return hcf ( y , x % y ) ; else return x ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , m , i , r , rs , c , a , b ; scanf ( \"%lld %lld\" , & m , & n ) ; r = hcf ( n , m ) ; if ( m >= n ) { a = m ; b = n ; } if ( m <= n ) { a = n ; b = m ; } c = a ; for ( i = a ; 1 ; ) { if ( i % b == 0 ) { rs = i ; break ; } i = i + c ; } printf ( \"%lld %lld\n\" , r , rs ) ; } return 0 ; }", "label": 2, "id": 8843}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11980}
{"input": "int main ( ) { int i , t , n , r , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { r = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; x = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { x = a [ i ] < x ? a [ i ] : x ; r = r + x ; } printf ( \"%d\n\" , r ) ; } return 0 ; }", "label": 1, "id": 16793}
{"input": "int main ( ) { int * a , t , n , count , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int count = 0 ; scanf ( \"%d\" , & n ) ; a = malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) if ( a [ j ] > a [ j - 1 ] ) count ++ ; else break ; } printf ( \"%d\n\" , count + n ) ; } return 0 ; }", "label": 0, "id": 13202}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i - 1 ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26755}
{"input": "int arr [ 100 ] [ 100 ] ; int recurse ( int row , int col ) { int i = row - 1 , j , sum = 0 ; while ( i > 0 ) { for ( j = col ; j >= 1 ; j -- ) { sum = 0 ; sum = arr [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; if ( sum < ( arr [ i ] [ j - 1 ] + arr [ i - 1 ] [ j - 1 ] ) ) { sum = ( arr [ i - 1 ] [ j - 1 ] + arr [ i ] [ j - 1 ] ) ; } arr [ i - 1 ] [ j - 1 ] = sum ; } i -- ; col -- ; } arr [ i ] [ j ] = sum ; return sum ; } int main ( ) { int i , j , k , n , n1 ; scanf ( \"%d\" , & n1 ) ; while ( n1 -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } printf ( \"\n %d\" , recurse ( n , n ) ) ; } return 0 ; }", "label": 1, "id": 5808}
{"input": "main ( ) { int t , a , b , c , i , gcd , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; ++ i ) if ( a % i == 0 && b % i == 0 ) gcd = i ; printf ( \"%d  \" , gcd ) ; min = a * b / gcd ; printf ( \"%d\n\" , min ) ; } }", "label": 1, "id": 6188}
{"input": "void calculate ( ) ; int mylog ( int num ) ; int main ( int argc , char * argv [ ] ) { int triangleCount ; scanf ( \"%d\" , & triangleCount ) ; while ( triangleCount > 0 ) { calculate ( ) ; triangleCount -- ; } return EXIT_SUCCESS ; } void calculate ( ) { int lineCount , lineNum , sumLen , i , max ; scanf ( \"%d\" , & lineCount ) ; int line [ lineCount ] ; int sum [ 300000 ] ; lineNum = 0 ; sumLen = 0 ; max = 0 ; while ( lineCount > 0 ) { int i ; lineNum ++ ; for ( i = 0 ; i < lineNum ; i ++ ) scanf ( \"%d\" , & line [ i ] ) ; if ( lineNum == 1 ) { sum [ 0 ] = line [ 0 ] ; sumLen = 1 ; } else { for ( i = sumLen ; i > 0 ; i -- ) { int lineC = mylog ( i ) ; sum [ ( 2 * i ) - 1 ] = sum [ i - 1 ] + line [ lineC + 1 ] ; sum [ ( 2 * i ) - 2 ] = sum [ i - 1 ] + line [ lineC ] ; } sumLen *= 2 ; } lineCount -- ; } for ( i = 0 ; i < sumLen ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\n\" , max ) ; } int mylog ( int num ) { int count = 0 ; while ( num > 0 ) { num = num / 2 ; count ++ ; } return count - 1 ; }", "label": 3, "id": 2750}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm , n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d\\t\" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 17460}
{"input": "int subArrCount = 0 ; int * arr ; void countCurrentSubarr ( int LoopStart , int size ) { int i ; subArrCount ++ ; for ( i = LoopStart ; i < size - 1 ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { subArrCount ++ ; } else return ; } } int getdata ( ) { int arrSize , i ; scanf ( \"%d\" , & arrSize ) ; arr = ( int * ) malloc ( sizeof ( int ) * arrSize ) ; for ( i = 0 ; i < arrSize ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; while ( arr [ i ] == ' ' || arr [ i ] == '\n' ) scanf ( \"%c\" , & arr [ i ] ) ; } return arrSize ; } int main ( void ) { int totalTest , testLoop , arrSize , arrLoop ; int i ; setbuf ( stdout , NULL ) ; scanf ( \"%d\" , & totalTest ) ; for ( testLoop = 0 ; testLoop < totalTest ; testLoop ++ ) { arrSize = getdata ( ) ; for ( arrLoop = 0 ; arrLoop < arrSize ; arrLoop ++ ) { countCurrentSubarr ( arrLoop , arrSize ) ; } printf ( \"%d\n\" , subArrCount ) ; subArrCount = 0 ; free ( arr ) ; } return ( 0 ) ; }", "label": 0, "id": 4834}
{"input": "int main ( ) { int no , a , b ; scanf ( \"%d\" , & no ) ; while ( no ) { int gcd , lcm , x , y , temp ; scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { temp = y ; y = x % y ; x = temp ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; no -- ; } return 0 ; }", "label": 1, "id": 2868}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else if ( a == 0 ) return b ; else gcd ( b , a % b ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = ( ( a * b ) / g ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 9774}
{"input": "int gcd ( int a , int b ) ; int lcm ( int a , int b ) ; int main ( ) { int k , a , b , p , q ; scanf ( \"%d\" , & k ) ; while ( k != 0 ) { scanf ( \"%d %d\" , & a , & b ) ; p = gcd ( a , b ) ; q = lcm ( a , b ) ; printf ( \"%d %d\" , p , q ) ; printf ( \"\n\" ) ; k -- ; } return 0 ; } int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; }", "label": 1, "id": 12429}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , m , z = 0 ; int a [ 2 ] ; int b [ 2 ] ; while ( t -- ) { for ( i = 0 ; i < 2 ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( m = 1000 ; m > 0 ; m -- ) { for ( i = 0 ; i < 2 ; i ++ ) { b [ i ] = a [ i ] % m ; { if ( b [ i ] != 0 ) { break ; } if ( i == 1 ) { z = m ; printf ( \"%d %d\n\" , z , ( a [ 0 ] * a [ 1 ] ) / z ) ; } } } } } }", "label": 1, "id": 2772}
{"input": "main ( ) { long long int i , k , j , n , t , s , temp , min , b = 0 ; scanf ( \"%lld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld\" , & s ) ; int a [ s ] ; for ( j = 0 ; j < s ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; if ( a [ j ] < 0 ) { break ; } } min = a [ 0 ] ; for ( k = 1 ; k < s ; k ++ ) { if ( min > a [ k ] ) { temp = min ; min = a [ k ] ; a [ k ] = temp ; } } b = min * ( s - 1 ) ; printf ( \"%lld\n\" , b ) ; } }", "label": 0, "id": 18055}
{"input": "int main ( ) { int arr [ MAX ] , n , n1 , big , a [ 2 ] , i , j , temp , temp2 ; scanf ( \"%d\" , & n1 ) ; while ( n1 -- ) { big = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) arr [ i ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == i ) scanf ( \"%d\" , a + ( i % 2 ) ) ; else scanf ( \"%d \" , a + j % 2 ) ; if ( j == 0 ) { temp = arr [ j ] ; arr [ j ] += a [ 0 ] ; a [ 0 ] = temp ; } else { temp2 = arr [ j ] ; temp = ( temp2 > a [ ( j + 1 ) % 2 ] ) ? temp2 : a [ ( j + 1 ) % 2 ] ; arr [ j ] = a [ j % 2 ] + temp ; a [ j % 2 ] = temp2 ; } } } for ( j = 0 ; j < n ; j ++ ) if ( arr [ j ] > big ) big = arr [ j ] ; printf ( \"\n%d\n\" , big ) ; } }", "label": 0, "id": 14377}
{"input": "int main ( ) { int n , i , x , a , b , gcd , lcm , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { x = b ; } else if ( a < b ) { x = a ; } for ( k = x ; k > 0 ; k -- ) { if ( ( a % k == 0 ) && ( b % k == 0 ) ) { gcd = k ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 9702}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int height , i , lineNo = 0 , number , max = 0 ; scanf ( \"%d\" , & height ) ; int * lastSum = ( int * ) malloc ( height * sizeof ( int ) ) ; int * currentSum = ( int * ) malloc ( height * sizeof ( int ) ) ; for ( i = 0 ; i < height ; i ++ ) { lastSum [ i ] = 0 ; currentSum [ i ] = 0 ; } int * a , * b ; a = lastSum ; b = currentSum ; while ( lineNo < height ) { for ( i = 0 ; i <= lineNo ; ) { scanf ( \"%d\" , & number ) ; if ( i == 0 ) { if ( ( a [ i ] + number ) > b [ i ] ) { b [ i ] = a [ i ] + number ; } } else { if ( ( a [ i - 1 ] + number ) > b [ i ] ) { b [ i ] = a [ i - 1 ] + number ; } if ( ( a [ i ] + number ) > b [ i ] ) { b [ i ] = a [ i ] + number ; } } if ( b [ i ] > max ) max = b [ i ] ; i ++ ; } if ( a == lastSum ) { a = b ; b = lastSum ; } else { a = b ; b = currentSum ; } lineNo ++ ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 26062}
{"input": "int main ( ) { unsigned int s , m , n , i , j , k , k1 , ans ; scanf ( \"%d\" , & m ) ; for ( s = 0 ; s < m ; s ++ ) { scanf ( \"%d\" , & n ) ; unsigned int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & k ) ; if ( i == 0 ) { a [ i ] [ j ] = k ; ans = k ; } else { if ( i != j ) a [ i ] [ j ] = a [ i - 1 ] [ j > 0 ? j - 1 : j ] >= a [ i - 1 ] [ j ] ? ( a [ i - 1 ] [ j > 0 ? j - 1 : j ] + k ) : ( a [ i - 1 ] [ j ] + k ) ; else a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] + k ; k1 = a [ i ] [ j ] ; if ( k1 > ans ) ans = k1 ; } } printf ( \"%d\" , ans ) ; } return 0 ; }", "label": 1, "id": 24612}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int findmax ( void * a , int i , int j , int size ) { if ( i == size ) return * ( ( ( int * ) a ) + ( size * i ) + j ) ; else return ( * ( ( ( int * ) a ) + ( size * i ) + j ) + max ( findmax ( a , i + 1 , j , size ) , findmax ( a , i + 1 , j + 1 , size ) ) ) ; } int main ( ) { int i = 0 , j = 0 ; int testcases = 0 ; int lineno = 0 ; int pathsum = 0 ; scanf ( \"%d\" , & testcases ) ; while ( testcases >= 1 ) { scanf ( \"%d\" , & lineno ) ; int a [ lineno ] [ lineno ] ; for ( i = 1 ; i <= lineno ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , ( * ( a + i ) + j ) ) ; } } pathsum = findmax ( a , 1 , 1 , lineno ) ; printf ( \"%d\n\" , pathsum ) ; testcases -- ; } return 0 ; }", "label": 2, "id": 24093}
{"input": "long long gcd ( long long m , long long n ) ; int main ( ) { long long t , i ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long long A , B , m , M ; scanf ( \"%lld %lld\" , & A , & B ) ; M = A * B ; m = gcd ( A , B ) ; M = M / m ; printf ( \"%lld %lld\n\" , m , M ) ; } return 0 ; } long long gcd ( long long m , long long n ) { if ( m % n == 0 ) return n ; else return ( gcd ( n , m % n ) ) ; }", "label": 0, "id": 530}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 4959}
{"input": "int main ( ) { int i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] = arr [ i ] [ j ] + ( ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 7257}
{"input": "main ( ) { int a , b , c , d , e , f , g ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d%d\" , & b , & c ) ; if ( b > c ) e = b ; if ( c > b ) e = c ; for ( d = 1 ; d <= e / 2 ; d ++ ) { if ( b % d == 0 && c % d == 0 ) f = d ; } printf ( \"%d \" , f ) ; b = b / f ; c = c / f ; g = f * b * c ; printf ( \"%d\n\" , g ) ; } }", "label": 1, "id": 12277}
{"input": "long int gcdcode ( long int a , long int b ) ; long int gcdcode ( long int a , long int b ) { if ( b == 0 ) return a ; return ( gcdcode ( b , a % b ) ) ; } int main ( ) { int t ; long int a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; g = gcdcode ( a , b ) ; l = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 6606}
{"input": "int main ( ) { int n , i , j ; int lines ; int max , max1 = 0 ; int arr [ 100 ] [ 100 ] ; int res [ 1000 ] ; int cnt = 0 ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & lines ) ; max = 0 ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; max1 = 0 ; if ( i == 0 && j == 0 ) { continue ; } if ( j == 0 ) { arr [ i ] [ 0 ] += arr [ i - 1 ] [ 0 ] ; continue ; } if ( j == i ) { arr [ i ] [ j ] += arr [ i - 1 ] [ j - 1 ] ; continue ; } if ( i - 1 >= 0 ) { max1 = arr [ i - 1 ] [ j ] ; if ( j - 1 >= 0 ) { if ( arr [ i - 1 ] [ j - 1 ] > arr [ i - 1 ] [ j ] ) { max1 = arr [ i - 1 ] [ j - 1 ] ; } } } arr [ i ] [ j ] += max1 ; } } for ( j = 0 ; j < lines ; j ++ ) if ( arr [ lines - 1 ] [ j ] > max ) max = arr [ lines - 1 ] [ j ] ; n -- ; res [ cnt ++ ] = max ; } for ( i = 0 ; i < cnt ; i ++ ) { printf ( \"%d\n\" , res [ i ] ) ; } return 0 ; }", "label": 0, "id": 13484}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int tc = 0 ; tc < t ; tc ++ ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; int min = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( min > arr [ i ] ) min = arr [ i ] ; } int cost = ( n - 1 ) * min ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 1071}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , a , b , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ) ; } } int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; }", "label": 1, "id": 16235}
{"input": "int main ( ) { int n , min , m , * ans ; int t , i , j ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d%d\" , & n , & m ) ; if ( n < m ) min = n ; else min = m ; for ( i = min ; i >= 1 ; i -- ) { if ( n % i == 0 && m % i == 0 ) break ; } * ( ans + j * 2 ) = i ; * ( ans + j * 2 + 1 ) = m * n / i ; } for ( j = 0 ; j < t ; j ++ ) { printf ( \"%d  %d\n\" , * ( ans + j * 2 ) , * ( ans + j * 2 + 1 ) ) ; } return 0 ; }", "label": 3, "id": 15671}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; long int min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%ld\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 10065}
{"input": "int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ 101 ] [ 101 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 21771}
{"input": "int main ( ) { int t , a , b , l , g , small ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; small = ( a < b ) ? a : b ; if ( ( a % small == 0 ) && ( b % small == 0 ) ) g = small ; else { small /= 2 ; while ( small >= 1 ) { if ( ( a % small == 0 ) && ( b % small == 0 ) ) { g = small ; break ; } else small -- ; } } l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 25756}
{"input": "int main ( ) { int a , b , min , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\n%d\" , & a , & b ) ; min = ( a > b ) ? a : b ; for ( i = min ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) break ; } printf ( \"%d \" , i ) ; j = ( a * b ) / i ; printf ( \"%d\n\" , j ) ; t -- ; } return 0 ; }", "label": 2, "id": 6456}
{"input": "int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & t ) ; int a [ 100 ] [ 100 ] ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4532}
{"input": "int call ( int x , int y ) { if ( y != 0 ) return call ( y , x % y ) ; else return x ; } int main ( ) { int T , A , B ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & A , & B ) ; printf ( \"%d %d\n\" , call ( A , B ) , ( A * B ) / call ( A , B ) ) ; } return 0 ; }", "label": 1, "id": 23915}
{"input": "int lcm ( int , int ) ; int gcd ( int , int ) ; int main ( ) { int a , b , t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int gc , lc ; scanf ( \"%d %d\" , & a , & b ) ; lc = lcm ( a , b ) ; gc = gcd ( a , b ) ; printf ( \"%d %d\n\" , gc , lc ) ; } return 0 ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a > b ) return gcd ( b , a % b ) ; if ( a < b ) return gcd ( a , b % a ) ; }", "label": 1, "id": 18976}
{"input": "main ( ) { int a ; scanf ( \"%d\" , & a ) ; while ( a -- ) { int n , i , z ; scanf ( \"%d\" , & n ) ; int b [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & b [ i ] ) ; int min = b [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > b [ i ] ) min = b [ i ] ; } z = ( n - 1 ) * min ; printf ( \"%d\" , z ) ; } }", "label": 1, "id": 23502}
{"input": "int maxi ( int x , int y ) { if ( x > y ) { return x ; } return y ; } int compute_max_sum ( int n , int a [ 100 ] [ 100 ] ) { for ( int i = n - 2 ; i >= 0 ; i -- ) { for ( int j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = maxi ( a [ i ] [ j ] + a [ i + 1 ] [ j ] , a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ; } } return a [ 0 ] [ 0 ] ; } int main ( ) { int n ; int rows ; int test_results [ 1100 ] ; int mat [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( int j = 0 ; j < rows ; j ++ ) { for ( int k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & mat [ j ] [ k ] ) ; } } test_results [ i ] = compute_max_sum ( rows , mat ) ; } for ( int i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , test_results [ i ] ) ; } return 0 ; }", "label": 0, "id": 15067}
{"input": "int col = 1 ; void give ( int row , int sum , int * max , int i , int a [ ] [ col ] , int n ) { if ( row == n - 1 ) { sum = sum + a [ row ] [ i ] ; if ( sum > * max ) { * max = sum ; } } else { sum = sum + a [ row ] [ i ] ; give ( row + 1 , sum , max , i , a , n ) ; give ( row + 1 , sum , max , i + 1 , a , n ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int n , i , j , k , arr [ t ] , sum = 0 ; int * max ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; col = n ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } max = & arr [ i ] ; * max = 0 ; give ( 0 , 0 , max , 0 , a , n ) ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d \n\" , arr [ i ] ) ; } return 0 ; }", "label": 2, "id": 9689}
{"input": "int main ( ) { long long t , n , a , i , sum , min ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; scanf ( \"%lld\" , & a ) ; min = a ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a ) ; if ( a < min ) min = a ; } sum = min * ( n - 1 ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 9643}
{"input": "int main ( ) { int i , t , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { unsigned int n , cost ; scanf ( \"%u\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } cost = 0 ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ 0 ] > a [ 1 ] ) { for ( k = 0 ; k < n ; k ++ ) { a [ k ] = a [ k + 1 ] ; } cost += a [ 0 ] ; } else if ( a [ 0 ] < a [ 1 ] ) { for ( k = 1 ; k < n ; k ++ ) { a [ k ] = a [ k + 1 ] ; } cost += a [ 0 ] ; } else { for ( k = 1 ; k < n ; k ++ ) { a [ k ] = a [ k + 1 ] ; } cost += a [ 0 ] ; } } printf ( \"%u\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 9358}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , len = 1 , count = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld \" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i + 1 ] > a [ i ] ) { len ++ ; } else { count += ( len * ( len - 1 ) ) / 2 ; len = 1 ; } } if ( len > 1 ) { count += ( len * ( len - 1 ) ) / 2 ; } printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 1, "id": 2270}
{"input": "int matrix [ 100 ] [ 100 ] ; int find_sum ( int , int , int ) ; int main ( ) { int count ; int lines ; int i , j ; scanf ( \"%d\" , & count ) ; while ( count > 0 ) { i = 0 ; scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & matrix [ i ] [ j ] ) ; } } printf ( \"%d\n\" , find_sum ( lines , 0 , 0 ) ) ; count -- ; } return 0 ; } int find_sum ( int lines , int i , int j ) { int sum = 0 ; int max_sum = 0 ; if ( i < lines && j <= i ) { max_sum = find_sum ( lines , i + 1 , j ) ; sum = find_sum ( lines , i + 1 , j + 1 ) ; if ( max_sum < sum ) max_sum = sum ; max_sum += matrix [ i ] [ j ] ; } return max_sum ; }", "label": 2, "id": 3375}
{"input": "int input ( ) ; int main ( ) { int i , t , j , k , n , a [ 100 ] [ 100 ] ; t = input ( ) ; for ( i = 0 ; i < t ; i ++ ) { n = input ( ) ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) a [ j ] [ k ] = input ( ) ; for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; } inline int input ( ) { int a = 0 ; register char c ; c = getchar_unlocked ( ) ; while ( c < 33 ) { c = getchar_unlocked ( ) ; } while ( c >= 33 ) { a = ( a << 3 ) + ( a << 1 ) + ( c - '0' ) ; c = getchar_unlocked ( ) ; } return a ; } ;", "label": 2, "id": 453}
{"input": "int main ( ) { int test ; int a , b , c , d ; printf ( \"enter number of test cases\n\" ) ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = a ; d = b ; while ( a != b ) { if ( a < b ) { b = b - a ; } else a = a - b ; } printf ( \"%d %d\n\" , a , c * d / a ) ; } return 0 ; }", "label": 1, "id": 21413}
{"input": "int main ( ) { int n , winner , lead = 0 , player1 = 0 , player2 = 0 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int a , b , temp ; scanf ( \"%d %d\" , & a , & b ) ; player1 = player1 + a ; player2 = player2 + b ; if ( player1 > player2 ) { temp = player1 - player2 ; if ( temp > lead ) { winner = 1 ; lead = temp ; } } else { temp = player2 - player1 ; if ( temp > lead ) { winner = 2 ; lead = temp ; } } } printf ( \"%d %d\" , winner , lead ) ; return 0 ; }", "label": 1, "id": 22401}
{"input": "main ( ) { int t , i , k , a , b , min , max ; scanf ( \"%d\" , & t ) ; int hcf [ t ] , lcm [ t ] ; for ( i = 0 ; i < t ; i ++ ) { printf ( \"\n\" ) ; scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; hcf [ i ] = 1 ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } if ( max % min == 0 ) { hcf [ i ] = min ; lcm [ i ] = max ; } else { for ( k = 2 ; k <= min / 2 ; k ++ ) { if ( min % k == 0 && max % k == 0 ) hcf [ i ] = k ; } lcm [ i ] = ( max * min ) / hcf [ i ] ; } } for ( i = 0 ; i < t ; i ++ ) { printf ( \"\n\" ) ; printf ( \"%d %d\" , hcf [ i ] , lcm [ i ] ) ; } }", "label": 1, "id": 21237}
{"input": "int main ( ) { int j , a , b , k , max , min ; int i , n ; long long int p ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } for ( j = min ; j > 0 ; j = j - ( max - min ) ) { if ( a % j == 0 && b % j == 0 ) { p = ( a * b ) / j ; printf ( \"%d %d\n\" , j , p ) ; j = 0 ; } } } }", "label": 1, "id": 1768}
{"input": "int input ( ) { int n = 0 ; char ch ; ch = getchar_unlocked ( ) ; while ( ch >= '0' && ch <= '9' ) { n = ( n << 3 ) + ( n << 1 ) + ( ch - '0' ) ; ch = getchar_unlocked ( ) ; } return n ; } int main ( ) { int t , * * arr ; t = input ( ) ; while ( t -- ) { int num , i , j , max ; num = input ( ) ; arr = ( int * * ) malloc ( sizeof ( int * ) * num ) ; for ( i = 0 ; i < num ; i ++ ) arr [ i ] = ( int * ) malloc ( sizeof ( int ) * num ) ; for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = input ( ) ; } } for ( i = num - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; free ( arr ) ; } return 0 ; }", "label": 3, "id": 16189}
{"input": "int a [ 101 ] [ 101 ] , w [ 101 ] [ 101 ] ; int maxSum ( int l ) { int i , j , max ; w [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { w [ i ] [ j ] = 0 ; if ( j != i ) w [ i ] [ j ] = w [ i - 1 ] [ j ] + a [ i ] [ j ] ; if ( ( j - 1 ) >= 0 && w [ i ] [ j ] < w [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ) w [ i ] [ j ] = w [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } max = w [ l - 1 ] [ 0 ] ; for ( i = 1 ; i <= l ; i ++ ) if ( w [ l - 1 ] [ i ] > max ) max = w [ l - 1 ] [ i ] ; return max ; } main ( ) { int i , j , n , l ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\n\" , maxSum ( l ) ) ; } }", "label": 0, "id": 21493}
{"input": "int main ( ) { int n1 , n2 , gcd , lcm , rem , x , num , den ; scanf ( \"%d\" , & x ) ; while ( x -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { num = n1 ; den = n2 ; } else { num = n2 ; den = n1 ; } while ( den != 0 ) { rem = num % den ; num = den ; den = rem ; } gcd = num ; lcm = ( n1 * n2 ) / gcd ; printf ( \"\n%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 8139}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else if ( a >= b && b > 0 ) { return ( b , ( a % b ) ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , g , l ; scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 12553}
{"input": "int main ( void ) { long int a , b , hcf , min , temp , max ; long long int lcm ; int t , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; min = a >= b ? b : a ; max = a >= b ? a : b ; while ( 1 ) { if ( max % min == 0 ) { hcf = min ; break ; } else { temp = min ; min = max % min ; max = temp ; } } lcm = a / hcf ; lcm = lcm * b ; printf ( \"%ld\" , hcf ) ; printf ( \"% lld\n\" , lcm ) ; } return 0 ; }", "label": 0, "id": 25761}
{"input": "int main ( ) { long long int t , n , i , j , a , b ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; scanf ( \"%lld\" , & b ) ; for ( j = 1 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a ) ; if ( a < b ) b = a ; } printf ( \"%lld\" , b * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 4890}
{"input": "int findGcd ( int a , int b ) { if ( a < b ) { int t = a ; a = b ; b = t ; } if ( b == 0 ) return a ; else return findGcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int gcd = findGcd ( a , b ) ; printf ( \"%d %lld\n\" , gcd , ( ( long long int ) a * b ) / gcd ) ; } return 0 ; }", "label": 0, "id": 25204}
{"input": "int main ( ) { int a [ 20 ] [ 20 ] , n , i , t , j , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } for ( j = t - 1 ; j > 0 ; j -- ) for ( k = 0 ; k < j ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + 1 ] ) a [ j - 1 ] [ k ] += a [ j ] [ k ] ; else a [ j - 1 ] [ k ] += a [ j ] [ k + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 13281}
{"input": "int n , sum ; void func ( int ar [ ] [ n ] , int i , int j , int max ) { A : if ( i <= n - 1 ) { max += ar [ i ] [ j ] ; func ( ar , i + 1 , j , max ) ; i ++ ; j ++ ; goto A ; } else { if ( max > sum ) sum = max ; } } int main ( void ) { int t , k , temp , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int ar [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } func ( ar , 0 , 0 , 0 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 4820}
{"input": "int main ( ) { int n , T , i , j , rows , col ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } if ( n == 0 ) printf ( \"0\n\" ) ; for ( rows = n - 1 ; rows > 0 ; rows -- ) { for ( col = 1 ; col <= rows ; col ++ ) { if ( a [ rows ] [ col - 1 ] >= a [ rows ] [ col ] ) { a [ rows - 1 ] [ col - 1 ] += a [ rows ] [ col - 1 ] ; } else { a [ rows - 1 ] [ col - 1 ] += a [ rows ] [ col ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 6040}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { call ( ) ; t -- ; } return 0 ; } call ( ) { long int n , i , j ; long long int a [ 1000000 ] , c = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 1 ; i < n + 1 ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; i = 1 ; while ( i < n + 1 ) { j = 0 ; while ( j < n - i ) { if ( a [ i + j ] <= a [ i + j + 1 ] ) j ++ ; else break ; } c += ( j + 1 ) * ( j + 2 ) / 2 ; i = i + j + 1 ; } printf ( \"%lld\n\" , c ) ; }", "label": 0, "id": 9834}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int m , n ; m = a ; n = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , a , ( m * n ) / a ) ; } return 0 ; }", "label": 1, "id": 14645}
{"input": "int MAX ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , rows , i , j ; int triangle [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; } for ( i = rows - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) triangle [ i ] [ j ] = triangle [ i ] [ j ] + MAX ( triangle [ i + 1 ] [ j ] , triangle [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\" , triangle [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 9065}
{"input": "int insertion ( int * , int ) ; int main ( ) { int * vec = malloc ( 1000000 * sizeof ( int ) ) ; int i , n ; int number , num ; scanf ( \"%d\" , & number ) ; while ( number != 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & vec [ i ] ) ; } int w = insertion ( vec , n ) ; w = w * ( n - 1 ) ; printf ( \"%d\" , w ) ; number -- ; } return 0 ; } int insertion ( int * x , int y ) { int temp , i , j ; for ( i = 1 ; i < y ; i ++ ) { temp = x [ i ] ; j = i - 1 ; while ( temp < x [ j ] && j >= 0 ) { x [ j + 1 ] = x [ j ] ; j = j - 1 ; } x [ j + 1 ] = temp ; } int w = x [ 0 ] ; return w ; }", "label": 2, "id": 10889}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 11748}
{"input": "long int hcf ( long int , long int ) ; int main ( ) { long long int l , h ; long int t , a , b ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( \"%lld %lld\n\" , h , l ) ; } return 0 ; } long int hcf ( long int a , long int b ) { if ( b == 0 ) return a ; else return hcf ( b , a % b ) ; }", "label": 0, "id": 13135}
{"input": "short int sum [ 2 ] [ 10000002 ] ; short int curr [ 10000002 ] ; int main ( ) { int test , lines , i = 0 , prsnt = 1 , j = 0 ; scanf ( \"%d\" , & test ) ; while ( test -- > 0 ) { prsnt = 1 ; j = 0 ; i = 0 ; scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < 10000002 ; i ++ ) { sum [ 0 ] [ i ] = sum [ 1 ] [ i ] = curr [ i ] = - 1 ; } while ( lines >= prsnt ) { for ( i = 0 ; curr [ i ] > - 1 ; i ++ ) { curr [ i ] = - 1 ; } for ( i = 0 ; i < prsnt ; i ++ ) scanf ( \"%hd\" , & curr [ i ] ) ; i = 0 ; if ( prsnt == 1 ) { while ( curr [ i ] != - 1 ) { sum [ 0 ] [ i ] = curr [ i ] ; i ++ ; } } else { j = 0 ; for ( i = 0 ; sum [ 0 ] [ i ] != - 1 ; i ++ ) { sum [ 1 ] [ j ] = sum [ 0 ] [ i ] + curr [ i ] ; j ++ ; sum [ 1 ] [ j ] = sum [ 0 ] [ i ] + curr [ i + 1 ] ; j ++ ; } } prsnt ++ ; for ( i = 0 ; sum [ 1 ] [ i ] != - 1 ; i ++ ) { sum [ 0 ] [ i ] = sum [ 1 ] [ i ] ; sum [ 1 ] [ i ] = - 1 ; } } int max = sum [ 0 ] [ 0 ] ; ; for ( i = 0 ; sum [ 0 ] [ i ] > - 1 ; i ++ ) { if ( sum [ 0 ] [ i ] > max ) max = sum [ 0 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 7992}
{"input": "int main ( ) { int i , j , t , a [ 100 ] [ 100 ] , r , s = 0 , min ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < r ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j <= i ; j ++ ) { if ( min < a [ i ] [ j + 1 ] ) { min = a [ i ] [ j + 1 ] ; } } s = s + min ; } printf ( \"%d\n\" , s ) ; t -- ; } return 0 ; }", "label": 1, "id": 16943}
{"input": "int main ( ) { int t , i , a [ 1000 ] , n , sum , pos , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < ( n * ( n + 1 ) ) / 2 ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; sum = a [ 0 ] ; pos = 0 ; for ( j = 1 ; j < n ; j ++ ) { pos += j ; if ( a [ pos ] > a [ pos + 1 ] ) sum += a [ pos ] ; else sum += a [ ++ pos ] ; } printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 3, "id": 19743}
{"input": "long long int lcm ( long long int , long long int ) ; long long int gcd ( long long int , long long int ) ; int main ( ) { long long int a , b ; int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long long int gc , lc ; scanf ( \"%lld %lld\" , & a , & b ) ; lc = lcm ( a , b ) ; gc = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , gc , lc ) ; } return 0 ; } long long int lcm ( long long int a , long long int b ) { return a * b / gcd ( a , b ) ; } long long int gcd ( long long int a , long long int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a > b ) return gcd ( b , a % b ) ; if ( a < b ) return gcd ( a , b % a ) ; }", "label": 0, "id": 14246}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else if ( b > a ) return b ; return b ; } int n ; int find ( int a [ n ] [ n ] , int r , int c , int l ) { if ( r == l - 1 ) { int ret = a [ r ] [ c ] ; return ret ; } else { int sum = 0 ; sum = sum + a [ r ] [ c ] + max ( find ( a , r + 1 , c , l ) , find ( a , r + 1 , c + 1 , l ) ) ; return sum ; } } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int sum = find ( a , 0 , 0 , n ) ; printf ( \"%d\n\" , sum ) ; } }", "label": 2, "id": 2434}
{"input": "int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; int dividend = a >= b ? a : b ; int divisor = a <= b ? a : b ; int r = 10000 ; while ( r > 0 ) { r = dividend % divisor ; dividend = divisor ; divisor = r ; } int gcd = dividend ; int p = a * b ; int lcm = p / gcd ; printf ( \"%d %d \n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 620}
{"input": "int main ( void ) { long long int t_cases ; scanf ( \"%lld\" , & t_cases ) ; while ( t_cases -- ) { long long int n , i ; scanf ( \"%lld\" , & n ) ; long long arr [ n ] ; scanf ( \"%lld\" , & arr [ 0 ] ) ; long long int min = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } }", "label": 0, "id": 4339}
{"input": "int gcd ( int i , int j ) { int temp ; if ( i % j != 0 ) { temp = j ; j = i % j ; i = temp ; gcd ( i , j ) ; } else return j ; } int main ( ) { int T , A , B , GCD , LCM ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & A , & B ) ; GCD = gcd ( A , B ) ; printf ( \"%d \" , GCD ) ; LCM = ( A * B ) / GCD ; printf ( \"%d\n\" , LCM ) ; } return 0 ; }", "label": 1, "id": 4389}
{"input": "int a [ 100 ] [ 100 ] = { 0 } , n , c [ 100 ] [ 100 ] = { 0 } ; int cache [ 100 ] [ 100 ] = { 0 } ; int main ( void ) { int i , j , p ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; c [ i ] [ j ] = 0 ; } p = solve ( 0 , 0 ) ; printf ( \"%d\n\" , p ) ; } return 0 ; } int solve ( int i , int j ) { int t1 , t2 , t ; if ( i > n - 1 ) return 0 ; if ( c [ i ] [ j ] == 1 ) { return cache [ i ] [ j ] ; } t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; if ( t1 > t2 ) { t = a [ i ] [ j ] + t1 ; cache [ i ] [ j ] = t ; c [ i ] [ j ] = 1 ; } else { t = a [ i ] [ j ] + t2 ; cache [ i ] [ j ] = t ; c [ i ] [ j ] = 1 ; } return t ; }", "label": 0, "id": 7647}
{"input": "int main ( ) { int a [ l_max ] [ l_max ] = { 0 } , max [ l_max ] = { 0 } ; int i , j , k , m , test , line , sum = 0 , sumMax = 0 ; scanf ( \"%d\" , & test ) ; for ( k = 0 ; k < test ; k ++ ) { scanf ( \"%d\" , & line ) ; if ( line < 0 || line > 99 ) return 0 ; for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] < 0 || a [ i ] [ j ] > 99 ) return 0 ; } } for ( m = 0 ; m < line ; m ++ ) { sum = 0 ; for ( i = m , j = m ; i < line ; i ++ ) { sum += a [ i ] [ j ] ; if ( sum > sumMax ) sumMax = sum ; } } max [ k ] = sumMax ; } for ( k = 0 ; k < test ; k ++ ) printf ( \"\n%d\" , max [ k ] ) ; return 0 ; }", "label": 1, "id": 8863}
{"input": "void main ( ) { int a , b , t , rem , nr , dr , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { nr = a ; dr = b ; } else nr = b ; dr = a ; while ( dr != 0 ) { rem = nr % dr ; nr = dr ; rem = dr ; } gcd = nr ; lcm = ( a * b ) / gcd ; printf ( \"%d\n\" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } }", "label": 2, "id": 5494}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , T ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; T -- ; } return 0 ; }", "label": 1, "id": 9575}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] , i , j , count = 0 , list ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { count += arr [ i + 1 ] ; } else { list = arr [ i ] ; arr [ i ] = arr [ i + 1 ] ; arr [ i + 1 ] = list ; count += arr [ i + 1 ] ; } } printf ( \"%d\" , count ) ; } return 0 ; }", "label": 1, "id": 10396}
{"input": "int main ( ) { int A [ A_MAX ] ; int T , M , I , min ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & M ) ; I = 0 ; while ( I < M && scanf ( \"%d\" , & A [ I ++ ] ) == 1 ) ; min = A [ 0 ] ; for ( I = 1 ; I < M ; I ++ ) { if ( A [ I ] < min ) min = A [ I ] ; } printf ( \"%d\n\" , min * ( M - 1 ) ) ; } return 0 ; }", "label": 0, "id": 15847}
{"input": "int main ( ) { int l , n , m , k , count , temp = 0 , i , j ; scanf ( \"%d\" , & m ) ; for ( k = 1 ; k <= m ; k ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( l = 0 ; l < n ; l ++ ) scanf ( \"%d\" , & a [ l ] ) ; count = n ; for ( i = 0 ; i <= n - 2 ; i ++ ) { temp = 0 ; for ( j = i ; j <= n - 1 ; j ++ ) { if ( a [ j ] <= a [ j + 1 ] ) { temp = 1 ; continue ; } else break ; } if ( temp == 1 ) count ++ ; } printf ( \"%d\" , count ) ; } return 0 ; }", "label": 1, "id": 23237}
{"input": "main ( ) { int i , j , t , n , a [ 50000 ] , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; m = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) if ( a [ j ] < m ) m = a [ j ] ; printf ( \"%d\n\" , m * ( n - 1 ) ) ; } }", "label": 0, "id": 12870}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return ( gcd ( b , a % b ) ) ; } int main ( ) { int n , i , g ; scanf ( \"%d\" , & n ) ; unsigned long long int n1 , n2 , l ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%llu %llu\" , & n1 , & n2 ) ; g = gcd ( n1 , n2 ) ; l = ( n1 * n2 ) / g ; printf ( \"%d %llu\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 26928}
{"input": "int main ( ) { int t ; int long i , n , a [ n ] , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%ld\n\" , ( min * ( n - 1 ) ) ) ; min = 0 ; } return 0 ; }", "label": 3, "id": 13290}
{"input": "int main ( ) { long int a , b , t , gcd , lcm , i ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; ++ i ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 24705}
{"input": "main ( ) { int arr [ 4951 ] , out [ 1000 ] , temp [ 102 ] , n , l , i , j , k ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & l ) ; arr [ 0 ] = l ; for ( j = 1 ; j <= l ; j ++ ) for ( i = 1 ; i <= j ; i ++ ) scanf ( \"%d\" , & arr [ j * ( j - 1 ) / 2 + i ] ) ; temp [ 0 ] = l ; for ( i = 1 ; i <= l ; i ++ ) temp [ i ] = 0 ; while ( temp [ 0 ] != 0 ) { for ( i = 1 ; i <= temp [ 0 ] ; i ++ ) { if ( temp [ i ] < temp [ i + 1 ] ) temp [ i ] = temp [ i + 1 ] ; temp [ i ] += arr [ temp [ 0 ] * ( temp [ 0 ] - 1 ) / 2 + i ] ; } temp [ 0 ] -- ; } out [ k ] = temp [ 1 ] ; } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , out [ i ] ) ; return 0 ; }", "label": 3, "id": 9841}
{"input": "int main ( ) { int t , c , i , j , k ; long int n ; int a [ 10000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; c = n ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { j = k ; while ( j <= n ) { if ( a [ j ] < a [ j + 1 ] ) { c ++ ; j ++ ; } else j = n + 1 ; } } printf ( \"%d\" , c ) ; } return 0 ; }", "label": 3, "id": 12218}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , n , k ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = k - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = ( a [ i ] [ j ] + a [ i + 1 ] [ j ] ) > ( a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ? ( a [ i ] [ j ] + a [ i + 1 ] [ j ] ) : ( a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; n -- ; } return 0 ; }", "label": 0, "id": 24804}
{"input": "int main ( ) { int a , b , min , i , j , t ; scanf ( \"%t\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n%d\" , & a , & b ) ; min = ( a > b ) ? a : b ; for ( i = min ; i >= 1 ; -- i ) { if ( a % i == 0 && b % i == 0 ) { printf ( \"%d\" , i ) ; break ; } } j = ( a * b ) / i ; printf ( \"%d\n\" , j ) ; return 0 ; } }", "label": 1, "id": 10438}
{"input": "int a [ 102 ] [ 102 ] ; int rec ( int i , int j , int row ) { int temp , temp1 , max = 0 ; if ( i == row - 1 ) { return a [ i ] [ j ] ; } if ( i >= j ) { temp = rec ( i + 1 , j , row ) ; printf ( \"max=%d\n\" , temp ) ; temp1 = rec ( i + 1 , j + 1 , row ) ; printf ( \"max1=%d\n\" , temp1 ) ; if ( temp + a [ i ] [ j ] <= temp1 + a [ i ] [ j ] ) { max += temp1 + a [ i ] [ j ] ; } else { max += temp + a [ i ] [ j ] ; } return max ; } } int main ( ) { int n , row ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int i , j ; scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , rec ( 0 , 0 , row ) ) ; } return 0 ; }", "label": 2, "id": 4877}
{"input": "int main ( ) { int n , i , a , b , c , d ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; c = a ; d = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , b , c * d / b ) ; } return 0 ; }", "label": 1, "id": 4056}
{"input": "int main ( ) { int t , gcd , lcm , a , b , s , c , k , n1 , n2 , p ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d%d\" , & a , & b ) ; n1 = a , n2 = b , k = 2 ; while ( k != 0 ) { s = a % b ; if ( s == 0 ) { gcd = b ; k = 0 ; } else { c = b ; b = s ; a = c ; } } p = n1 * n2 ; lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\n\" , gcd , p ) ; t = t - 1 ; } return 0 ; }", "label": 1, "id": 21907}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , min , i ; long int ans ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i == 0 ) min = a [ i ] ; if ( min > a [ i ] ) min = a [ i ] ; } ans = min * ( n - 1 ) ; printf ( \"%ld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 19647}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%d\" , & n ) ; int a [ n ] , s = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { n -- ; s = s + a [ i + 1 ] ; for ( j = i ; j < n ; j ++ ) a [ j ] = a [ j + 1 ] ; i -- ; } else { n -- ; s = s + a [ i ] ; for ( j = i + 1 ; j < n ; j ++ ) a [ j ] = a [ j + 1 ] ; i -- ; } } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 2, "id": 16224}
{"input": "int main ( void ) { int n , i , e , count ; int a [ 50 ] ; int dp [ 50 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { count = 0 ; scanf ( \"%d\" , & e ) ; for ( int i = 0 ; i < e ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } dp [ 0 ] = 1 ; for ( int i = 1 ; i < e ; i ++ ) { if ( a [ i ] >= a [ i - 1 ] ) { dp [ i ] = 1 + dp [ i - 1 ] ; } else { dp [ i ] = 1 ; } } for ( int i = 0 ; i < e ; i ++ ) { count += dp [ i ] ; } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 3, "id": 9809}
{"input": "int main ( ) { int t ; long long int n , a [ 100000 ] , k , j , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { j = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; k = n ; for ( i = 0 ; i < n ; i ++ ) { while ( a [ i + j ] <= a [ i + 1 + j ] ) { k ++ ; j ++ ; } j = 0 ; } printf ( \"%lld\n\" , k ) ; } return 0 ; }", "label": 1, "id": 24381}
{"input": "int main ( ) { long t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long n , ar [ 100000 ] , i , min , ans ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & ar [ i ] ) ; } min = ar [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( ar [ i ] < min ) { min = ar [ i ] ; } } ans = min * ( n - 1 ) ; printf ( \"ld\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 17129}
{"input": "int main ( ) { int i , t , m , n , j , k ; int max , min , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & m , & n ) ; min = m > n ? n : m ; max = m > n ? m : n ; for ( j = 1 ; j <= min ; j ++ ) { if ( m % j == 0 && n % j == 0 ) { gcd = j ; } } for ( k = max ; ; k ++ ) { if ( k % m == 0 && k % n == 0 ) { lcm = k ; break ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 18992}
{"input": "int gcd ( int a , int b ) { int c = a % b ; if ( c == 0 ) return b ; else gcd ( b , c ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int p , q , f ; long long int g ; scanf ( \"%d%d\" , & p , & q ) ; f = gcd ( p , q ) ; g = ( p * q ) / f ; printf ( \"%d %lld\n\" , f , g ) ; } return 0 ; }", "label": 1, "id": 24024}
{"input": "int main ( void ) { long int t , i , a , b , gcd , lcm ; scanf ( \"%ld\" , & t ) ; while ( t -- != 0 ) { scanf ( \"%ld %ld\" , & a , & b ) ; gcd = 1 ; for ( i = b ; i >= a ; i -- ) { if ( ( a % i ) == 0 && ( b % i ) == 0 ) { gcd = i ; break ; } } if ( a <= b ) { for ( i = b ; i <= 10000000 ; i ++ ) { if ( ( i % b ) == 0 && ( i % a ) == 0 ) { lcm = i ; break ; } } } else { for ( i = a ; i <= 10000000 ; i ++ ) { if ( ( i % b ) == 0 && ( i % a ) == 0 ) { lcm = i ; break ; } } } printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 23320}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 24030}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int tc = 0 ; tc < t ; tc ++ ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; int min = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( min > arr [ i ] ) min = arr [ i ] ; } long long int cost = ( n - 1 ) * ( long long int ) min ; printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 2250}
{"input": "int main ( void ) { int i ; long t , a [ 1000000 ] , l , n ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { l = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) l ++ ; } if ( n == 1 ) printf ( \"%ld\n\" , n ) ; else printf ( \"%ld\n\" , l + n ) ; } return 0 ; }", "label": 1, "id": 179}
{"input": "int gcd ( int x , int y ) { if ( x == 0 ) { return y ; } else if ( y == 0 ) { return x ; } else if ( y > x ) { return gcd ( x , y % x ) ; } else if ( x > y ) { return gcd ( x % y , y ) ; } else { return x ; } } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , ( a * b / gcd ( a , b ) ) ) ; } return 0 ; }", "label": 1, "id": 6836}
{"input": "int main ( ) { int i , j , k , r , suma , sumb , sum1 = 0 , sum2 = 0 ; for ( i = 1 ; i <= 4 ; i ++ ) { suma = 0 ; sumb = 0 ; for ( j = 1 ; j <= i ; j ++ ) { k = j + i ; if ( j == 1 ) { suma = suma + k ; } if ( j == i ) { sumb = sumb + k ; } } sum1 = suma + sum1 ; sum2 = sumb + sum2 ; } if ( sum2 > sum1 ) printf ( \" the value of largest sum is%d\" , sum2 ) ; else printf ( \"\n the value of largest sum is%d\" , sum1 ) ; return 0 ; }", "label": 1, "id": 7736}
{"input": "int gcd ( int , int ) ; int gcd ( int n , int m ) { if ( ( n >= m ) && ( ( n % m ) == 0 ) ) { return ( m ) ; } else { gcd ( m , ( n % m ) ) ; } } void main ( ) { int t , a , b , ans1 , ans2 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; ans1 = gcd ( a , b ) ; ans2 = ( a * b ) / ( ans1 ) ; printf ( \" %d %d\n\" , ans1 , ans2 ) ; } }", "label": 1, "id": 4147}
{"input": "int maxCal ( int * , int , int , int ) ; int main ( ) { int a [ 200 ] ; int n , i = 0 , row , j = 0 , tot = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & row ) ; tot = row * ( row + 1 ) / 2 ; printf ( \"total %d\n\" , tot ) ; for ( j = 0 ; j < tot ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } printf ( \"%d\" , maxCal ( a , row , 0 , 1 ) ) ; } return 0 ; } int maxCal ( int * a , int n , int in , int nl ) { int sum = 0 , sum1 = 0 ; if ( nl == n ) return a [ in ] ; sum1 = a [ in ] + maxCal ( a , n , in + nl , nl + 1 ) ; sum = a [ in ] + maxCal ( a , n , in + nl + 1 , nl + 1 ) ; if ( sum > sum1 ) return sum ; return sum1 ; }", "label": 3, "id": 25368}
{"input": "int gcd ( long int a , long int b ) { if ( a == 0 ) return b ; if ( a == b ) return a ; if ( b == 0 ) return a ; gcd ( b , a % b ) ; } int main ( void ) { long int a , b , g ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%ld %ld\n\" , g , ( a * b / g ) ) ; } return 0 ; }", "label": 0, "id": 6479}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( void ) { int t , a , b , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) { r = a ; a = b ; b = r ; } printf ( \"%d %d\n\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 13173}
{"input": "int mat [ 100 + 10 ] [ 100 + 10 ] ; int A [ 100 + 10 ] [ 100 + 10 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int r , c ; while ( t -- > 0 ) { scanf ( \"%d\" , & r ) ; c = r ; int i , j ; for ( i = 0 ; i < c ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; mat [ 0 ] [ 0 ] = A [ 0 ] [ 0 ] ; for ( i = 1 ; i < r ; i ++ ) mat [ i ] [ 0 ] = mat [ i - 1 ] [ 0 ] + A [ i ] [ 0 ] ; for ( i = 1 ; i < r ; i ++ ) mat [ i ] [ i ] = mat [ i - 1 ] [ i - 1 ] + A [ i ] [ i ] ; for ( i = 1 ; i < r ; i ++ ) for ( j = 1 ; j < i ; j ++ ) mat [ i ] [ j ] = max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] ) + A [ i ] [ j ] ; int ans = 0 ; for ( i = 0 ; i < c ; i ++ ) ans = max ( ans , mat [ r - 1 ] [ i ] ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 13592}
{"input": "int main ( ) { int t , a , b , c , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( a != 0 ) { c = a ; a = b % a ; b = c ; } printf ( \"%d %d\n\" , b , ( m * n ) / b ) ; } return 0 ; }", "label": 1, "id": 16558}
{"input": "int main ( ) { int n , limit , i , j , k , t , max , sum ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { max = 0 ; scanf ( \"%d\" , & limit ) ; for ( j = 0 ; j < limit ; j ++ ) { sum = 0 ; for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & t ) ; sum += t ; } if ( sum > max ) max = sum ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 14929}
{"input": "int find ( long int a [ ] , long int n ) { long int min = 0 ; long int i ; long int j ; i = 0 ; while ( i < n ) { if ( min <= a [ i ] ) { min = a [ i ] ; j = i ; } i ++ ; } return j ; } void swap ( long int * a , long int * b ) { long int temp ; temp = * a ; * a = * b ; * b = temp ; } int main ( ) { long int i ; int t ; long int p ; long int j ; long int n ; unsigned long int cost ; long int a [ 10 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld\" , & p ) ; if ( p == 1 ) { break ; } i = 0 ; cost = 0 ; while ( i < p ) { scanf ( \"%ld\" , & a [ i ] ) ; i ++ ; } n = p ; while ( n > 0 ) { j = find ( a , n ) ; if ( j < ( n - 1 ) && j > 0 && a [ j - 1 ] < a [ j + 1 ] ) { cost = cost + a [ j - 1 ] ; swap ( & a [ j ] , & a [ n - 1 ] ) ; } else if ( j < ( n - 1 ) && j > 0 && a [ j - 1 ] > a [ j + 1 ] ) { cost = cost + a [ j + 1 ] ; swap ( & a [ j ] , & a [ n - 1 ] ) ; } else if ( j == ( n - 1 ) ) { cost = cost + a [ j - 1 ] ; } else if ( j == 0 ) { cost = cost + a [ j + 1 ] ; swap ( & a [ j ] , & a [ n - 1 ] ) ; } n -- ; } printf ( \"%lu\" , cost ) ; t -- ; } return 0 ; }", "label": 3, "id": 3874}
{"input": "int a [ 101 ] [ 101 ] ; int sum ( int i , int j , int k ) { int c , d , l , m ; c = i , d = j ; l = 0 ; m = 0 ; for ( i ; i < k ; i ++ ) { l += a [ i ] [ d ] ; } for ( i = c ; i < k - 1 ; j ++ ) { m += a [ i + 1 ] [ d + 1 ] ; } if ( l > j ) { return d ; } else if ( j > l ) { return d + 1 ; } } int main ( ) { int i , j , k , n , o , sol , line , cas ; scanf ( \"%d\" , & cas ) ; for ( i = 0 ; i < cas ; i ++ ) { scanf ( \"%d\" , & line ) ; for ( j = 0 ; j < line ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , a [ j ] [ k ] ) ; } } o = 0 , sol = 0 ; for ( n = 0 ; n < line ; n ++ ) { sol += a [ n ] [ o ] ; o = sum ( n , o , line ) ; } printf ( \"%d\n\" , sol ) ; } }", "label": 3, "id": 11494}
{"input": "int main ( ) { int e , c , a , b ; scanf ( \"%d\" , & e ) ; while ( e != 0 ) { scanf ( \"%d%d\" , & a , & b ) ; c = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , a , c / a ) ; e -- ; } return 0 ; }", "label": 1, "id": 7304}
{"input": "main ( ) { int i , j , k , n , m , l , c , t ; scanf ( \"%d\" , & i ) ; for ( j = 1 ; j <= i ; j ++ ) { c = 0 ; printf ( \"\n\" ) ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( k = 0 ; k < n ; k ++ ) scanf ( \"%d\" , & a [ k ] ) ; for ( l = 0 ; l < n ; l ++ ) { t = 0 ; for ( m = l ; m < n ; m ++ ) { if ( a [ l ] <= a [ m ] ) { if ( a [ m ] > t ) { c ++ ; t = a [ m ] ; } } } } printf ( \"\n%d\" , c ) ; } return 0 ; }", "label": 2, "id": 15207}
{"input": "int main ( ) { int i , j , t ; long long int n , min ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } min = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ j ] < min ) { min = a [ j ] ; } } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return ( 0 ) ; }", "label": 0, "id": 22158}
{"input": "int main ( void ) { int t , i , L , H ; scanf ( \"%d\" , & t ) ; int AB [ t ] [ t ] ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & AB [ i ] [ 1 ] , & AB [ i ] [ 2 ] ) ; } for ( i = 1 ; i <= t ; i ++ ) { H = ( AB [ i ] [ 1 ] < AB [ i ] [ 2 ] ) ? AB [ i ] [ 1 ] : AB [ i ] [ 2 ] ; while ( 1 ) { if ( AB [ i ] [ 1 ] % H == 0 && AB [ i ] [ 2 ] % H == 0 ) { printf ( \"%d %d\n\" , H , ( AB [ i ] [ 1 ] * AB [ i ] [ 2 ] ) / H ) ; break ; } else H -- ; } } return 0 ; }", "label": 2, "id": 12581}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm , i , j , p ; scanf ( \"%d %d\" , & a , & b ) ; i = a ; j = b ; while ( j != 0 ) { p = j ; j = i % j ; i = p ; } gcd = i ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 5191}
{"input": "int gcd ( int num1 , int num2 ) { if ( num1 % num2 == 0 ) { return num2 ; } else { int c = num1 % num2 ; gcd ( num2 , c ) ; } } int main ( ) { int T , c ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int num1 , num2 ; scanf ( \"%d%d\" , & num1 , & num2 ) ; c = gcd ( num1 , num2 ) ; long long int d = ( num1 * num2 ) / c ; printf ( \"%d %lld\n\" , c , d ) ; } return 0 ; }", "label": 1, "id": 19721}
{"input": "char buffer [ 65535 ] , * buffer_cursor , * buffer_end ; int * number ; unsigned long long int * a , * b , * cur , * old ; int c ; void puti ( unsigned long long int n ) { char temp ; while ( n > 0 ) { temp = n + '0' ; putchar ( temp ) ; n /= 10 ; } } int main ( ) { static int i , t , n , i_f , j_f ; int x , j = 0 ; unsigned long long int mx = 0 ; FILE * in ; in = fopen ( \"D:\\\\input.txt\" , \"r\" ) ; do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , 1 , 65535 , in ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } t = t * 10 + * buffer_cursor - '0' ; } while ( ( * buffer_cursor ) >= '0' ) ; for ( i_f = 0 ; i < t ; i_f ++ ) { do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , 1 , 65535 , in ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } n = n * 10 + * buffer_cursor - '0' ; } while ( ( * buffer_cursor ) >= '0' ) ; x = ( n * ( n + 1 ) / 2 ) ; number = ( int * ) calloc ( x , sizeof ( int ) ) ; for ( i = 0 ; i < x ; i ++ ) { do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , 1 , 65535 , in ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } number [ i ] = number [ i ] * 10 + * buffer_cursor - '0' ; } while ( ( * buffer_cursor ) >= '0' ) ; } a = ( unsigned long long int * ) calloc ( n , sizeof ( unsigned long long int ) ) ; b = ( unsigned long long int * ) calloc ( n , sizeof ( unsigned long long int ) ) ; cur = a ; old = b ; j_f = 0 ; for ( i = 0 ; i < n ; i ++ ) { cur [ 0 ] = number [ j_f ++ ] + old [ 0 ] ; j = 1 ; while ( j < i ) { cur [ j ] = number [ j_f ++ ] + max ( old [ j - 1 ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = number [ j_f ++ ] + old [ j - 1 ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } } mx = 0 ; for ( i = 0 ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; puti ( mx ) ; putchar ( '\n' ) ; free ( number ) ; free ( a ) ; free ( a ) ; n = 0 ; } fclose ( in ) ; return 0 ; }", "label": 3, "id": 23227}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { int a , b , x , y , temp , g , l ; scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( b > 0 ) { temp = b ; b = a % b ; a = temp ; } g = a ; l = ( x * y ) / g ; printf ( \"%d %d\n\" , g , l ) ; n -= 1 ; } return 0 ; }", "label": 1, "id": 5649}
{"input": "void sub ( int * a , int n ) { int i , count , len ; len = 1 , count = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i + 1 ] > a [ i ] ) len ++ ; else { count += ( len * ( len - 1 ) ) / 2 ; len = 1 ; } } if ( len > 1 ) count += ( len * ( len - 1 ) ) / 2 ; printf ( \"%d\n\" , count + n ) ; } int main ( ) { int * a , t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int count = 0 ; scanf ( \"%d\" , & n ) ; a = malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; sub ( a , n ) ; } return 0 ; }", "label": 0, "id": 24977}
{"input": "int main ( ) { int triangle [ 100 ] [ 100 ] , i , j , n , p = 0 , sum1 , sum2 , max , testcases , t = 0 ; scanf ( \"%d\" , & testcases ) ; while ( t < testcases ) { p = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= p ; j ++ ) scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; p ++ ; } for ( i = 0 ; i < n - 1 ; i ++ ) { triangle [ i + 1 ] [ 0 ] += triangle [ i ] [ 0 ] ; for ( j = 0 ; j < p ; j ++ ) { sum1 = triangle [ i ] [ j ] + triangle [ i + 1 ] [ j + 1 ] ; sum2 = triangle [ i ] [ j + 1 ] + triangle [ i + 1 ] [ j + 1 ] ; if ( sum1 > sum2 ) triangle [ i + 1 ] [ j + 1 ] = sum1 ; else triangle [ i + 1 ] [ j + 1 ] = sum2 ; } p ++ ; triangle [ i + 1 ] [ j ] += triangle [ i ] [ j - 1 ] ; } max = triangle [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( max < triangle [ n - 1 ] [ i ] ) max = triangle [ n - 1 ] [ i ] ; } printf ( \"%d\" , max ) ; t ++ ; } }", "label": 3, "id": 4136}
{"input": "int rpn ( int * , int , int , int * ) ; int maxj = 0 , maxk = 0 ; int main ( ) { int i = - 1 , count = 0 , j_count , j = - 1 , k = - 1 ; scanf ( \"%d\" , & count ) ; while ( ++ i < count ) { int k = 0 , l = 0 ; int arr [ 100 ] [ 100 ] , cache [ 100 ] [ 100 ] ; for ( k = 0 ; k < 100 ; k ++ ) for ( l = 0 ; l < 100 ; l ++ ) { arr [ k ] [ l ] = 0 ; cache [ k ] [ l ] = 0 ; } j = - 1 ; scanf ( \"%d\" , & j_count ) ; while ( ++ j < j_count ) { int k = - 1 ; while ( ++ k <= j ) scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } maxj = j ; maxk = k ; printf ( \"%d\n\" , rpn ( & arr [ 0 ] [ 0 ] , 0 , 0 , & cache [ 0 ] [ 0 ] ) ) ; } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int rpn ( int * arr , int j , int k , int * cache ) { { if ( ( j >= maxj ) || ( k > maxj ) ) return 0 ; if ( cache [ j * 100 + k ] != 0 ) return cache [ j * 100 + k ] ; cache [ j * 100 + k ] = arr [ j * 100 + k ] + max ( rpn ( arr , j + 1 , k , cache ) , rpn ( arr , j + 1 , k + 1 , cache ) ) ; return arr [ j * 100 + k ] + max ( rpn ( arr , j + 1 , k , cache ) , rpn ( arr , j + 1 , k + 1 , cache ) ) ; } }", "label": 0, "id": 4641}
{"input": "void main ( ) { int a , b , c , gcd , lcm , remainder , numerator , denominator , i ; scanf ( \"%d\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%d %d\" , & b , & c ) ; if ( b > c ) { numerator = b ; denominator = c ; } else { numerator = c ; denominator = b ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( b * c ) / gcd ; printf ( \"%d\" , gcd ) ; printf ( \"%d\" , lcm ) ; } }", "label": 1, "id": 18430}
{"input": "long long gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t , a , b ; long long g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 16898}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , GCD , LCM , v ; scanf ( \"%d %d\" , & a , & b ) ; GCD = gcd ( a , b ) ; v = b / GCD ; LCM = v * a ; printf ( \"%d %d\n\" , GCD , LCM ) ; } return 0 ; }", "label": 1, "id": 8974}
{"input": "int prob [ 100 ] [ 100 ] = { 0 } ; int maxsum [ 100 ] [ 100 ] = { 0 } ; int getmaxsum ( int x , int y ) { if ( maxsum [ x ] [ y ] ) return maxsum [ x ] [ y ] ; else { if ( x == 0 ) return 0 ; else if ( y == 0 ) maxsum [ x ] [ y ] = getmaxsum ( x - 1 , y ) + prob [ x - 1 ] [ y ] ; else maxsum [ x ] [ y ] = max ( getmaxsum ( x - 1 , y - 1 ) + prob [ x - 1 ] [ y - 1 ] , getmaxsum ( x - 1 , y ) + prob [ x - 1 ] [ y ] ) ; return maxsum [ x ] [ y ] ; } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int max , t , i , j ; int size ; int testcases ; scanf ( \"%d\" , & testcases ) ; while ( testcases ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & prob [ i ] [ j ] ) ; maxsum [ i ] [ j ] = 0 ; } } size -- ; max = getmaxsum ( size , 0 ) + prob [ size ] [ 0 ] ; for ( i = 1 ; i < 4 ; i ++ ) { t = getmaxsum ( size , i ) + prob [ size ] [ i ] ; if ( t > max ) max = t ; } printf ( \"%d\n\" , max ) ; testcases -- ; } return 0 ; }", "label": 1, "id": 8776}
{"input": "int main ( ) { int T , a , b , x , y , t , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 16032}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int i , c ; long long int min = 999999 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & c ) ; if ( min > c ) min = c ; } long long int mul = min * ( n - 1 ) ; printf ( \"%lld\n\" , mul ) ; } return 0 ; }", "label": 0, "id": 23617}
{"input": "main ( ) { int t , l , a , b , n , m , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; n = a > b ? b : a ; m = a > b ? a : b ; if ( m % n != 0 ) l = m * n ; else l = n ; printf ( \"%d %d\n\" , a * b / l , l ) ; } }", "label": 1, "id": 21440}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , b [ n ] ; for ( int j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; b [ 0 ] = 1 ; for ( int j = 1 ; j < n ; j ++ ) { if ( a [ j - 1 ] <= a [ j ] ) b [ j ] = b [ j - 1 ] + 1 ; else b [ j ] = 1 ; } long int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += b [ j ] ; } printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 26509}
{"input": "int main ( ) { int t , n , a [ 100 ] , b [ 100 ] , large ; int temp , temp1 , i , j ; int temp2 ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } temp = 0 ; temp1 = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( i == 1 ) { b [ j ] = a [ j ] ; temp1 = a [ j ] ; } else { temp = temp1 ; if ( j == 0 ) { temp1 = b [ j ] ; b [ j ] = b [ j ] + a [ j ] ; } else if ( j != i - 1 ) { if ( a [ j ] + b [ j ] > temp1 + a [ j ] ) { b [ j ] = a [ j ] + b [ j ] ; temp1 = b [ j ] - a [ j ] ; } else { b [ j ] = temp1 + a [ j ] ; temp1 = b [ j ] - temp1 ; } } else b [ j ] = a [ j ] + temp1 ; } } } large = b [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( large < b [ i ] ) large = b [ i ] ; } printf ( \"%d\n\" , large ) ; t -- ; } ; }", "label": 1, "id": 25787}
{"input": "int main ( ) { int i , j , k , n , m , s , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { s = 0 ; scanf ( \"%d\" , & m ) ; for ( j = 0 ; j < m ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } for ( j = m - 1 ; j >= 0 ; j -- ) { s = s + a [ j ] [ 0 ] ; } printf ( \"%d\n\" , s ) ; } }", "label": 1, "id": 12201}
{"input": "int main ( ) { int a , b , x , y , temp , gcd , lcm , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"Greatest common divisor of %d and %d = %d\n\" , x , y , gcd ) ; printf ( \"Least common multiple of %d and %d = %d\n\" , x , y , lcm ) ; } return 0 ; }", "label": 1, "id": 6990}
{"input": "long long dope ( int tri [ ] [ 100 ] , int x , int y ) { if ( x == 0 ) return tri [ x ] [ y ] ; if ( y == 0 ) return tri [ x ] [ y ] + dope ( tri , x - 1 , y ) ; int p , q , r ; r = ( tri [ x - 1 ] [ y ] > tri [ x - 1 ] [ y - 1 ] ) ? 1 : 2 ; if ( r == 1 ) { p = x - 1 ; q = y ; } if ( r == 2 ) { p = x - 1 ; q = y - 1 ; } return tri [ x ] [ y ] + dope ( tri , p , q ) ; } long long maxsum ( int n , int tri [ ] [ 100 ] ) { int i ; long long max = 0 , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum = dope ( tri , n - 1 , i ) ; if ( sum > max ) max = sum ; } return max ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int tri [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) tri [ i ] [ j ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & tri [ i ] [ j ] ) ; printf ( \"%lld\n\" , maxsum ( n , tri ) ) ; } }", "label": 1, "id": 12035}
{"input": "int max ( int * a , int n ) { int i , m ; m = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > m ) m = a [ i ] ; } return m ; } int main ( void ) { int a [ 100000 ] , i , j , k , n , m , ad , s ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { s = 0 ; scanf ( \"%d\" , & m ) ; scanf ( \"%d\" , & ad ) ; for ( i = 1 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; k = max ( a , j ) ; s += k ; printf ( \"%d \" , s ) ; } } return 0 ; }", "label": 2, "id": 9482}
{"input": "int main ( ) { int t , i , n ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; unsigned long long int arr [ n ] ; scanf ( \"%llu\" , arr + 0 ) ; unsigned long long int min = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%llu\" , arr + i ) ; if ( * ( arr + i ) < min ) min = arr [ i ] ; } printf ( \"%llu\n\" , min * ( n - 1 ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 22057}
{"input": "int main ( ) { int a , b , c , arr [ 1000000 ] , sum , i , j , d ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d\" , & b ) ; scanf ( \"%d\" , & c ) ; sum = 0 ; d = c ; for ( i = 0 ; i < b - 1 ; i ++ ) { scanf ( \"%d\" , & c ) ; if ( c < d ) { d = c ; } } printf ( \"%d\n\" , d * ( b - 1 ) ) ; } return 0 ; }", "label": 0, "id": 24777}
{"input": "int main ( ) { long int t , n , a , i , min ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & n , & a ) ; min = a ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a ) ; if ( a < min ) min = a ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 13063}
{"input": "int main ( ) { int T , N ; int * A ; int cost , i , j ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { cost = 0 ; scanf ( \"%d\" , & N ) ; A = ( int * ) malloc ( N * sizeof ( int ) ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } i = 0 ; j = 1 ; while ( j < N ) { if ( A [ i ] < A [ j ] ) { cost += A [ i ] ; } else { cost += A [ j ] ; i = j ; } j ++ ; } printf ( \"%d\n\" , cost ) ; T -- ; } return 0 ; }", "label": 1, "id": 16976}
{"input": "int GCD ( int a , int b ) { if ( b == 0 ) return a ; else GCD ( b , a % b ) ; } int main ( ) { int a , c , d , l ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d%d\" , & c , & d ) ; l = GCD ( c , d ) ; printf ( \"%d %d\n\" , l , ( ( c * d ) / ( GCD ( c , d ) ) ) ) ; } return 0 ; }", "label": 1, "id": 15453}
{"input": "int main ( ) { int n , lines , i , j , a [ 100 ] [ 100 ] , x ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = lines - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { x = ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = a [ i ] [ j ] + x ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 25760}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , arr [ 50000 ] , sum , min1 , min2 , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; min1 = arr [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min1 ) { min2 = min1 ; min1 = arr [ i ] ; } } if ( arr [ 0 ] == min1 ) { min2 = arr [ 1 ] ; for ( i = 2 ; i < n ; i ++ ) { if ( arr [ i ] < min2 ) min2 = arr [ i ] ; } } sum = min1 + min2 ; printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 1, "id": 20554}
{"input": "int main ( ) { unsigned int d , n , i , k , j , a [ 98 ] [ 98 ] , sum = 0 , pos = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & d ) ; for ( j = 0 ; j < d ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) a [ j ] [ k ] = getchar_unlocked ( ) ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 9569}
{"input": "int hcf ( int n1 , int n2 ) { if ( n2 != 0 ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int A [ 1000 ] , B [ 1000 ] , c , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & A [ i ] , & B [ i ] ) ; } for ( i = 0 ; i < t ; i ++ ) { c = 0 ; c = hcf ( A [ i ] , B [ i ] ) ; printf ( \"%d %d\n\" , c , ( A [ i ] * B [ i ] ) / c ) ; } return 0 ; }", "label": 1, "id": 14526}
{"input": "int main ( ) { int a [ 102 ] [ 102 ] , b [ 100 ] , r , t , i , j , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ k ] = sum ( a , 0 , 0 , r ) ; } for ( k = 0 ; k < t ; k ++ ) printf ( \"\n%d\" , b [ k ] ) ; return 0 ; } int sum ( int a [ ] [ 102 ] , int i , int j , int r ) { int p , q ; if ( i >= r ) return 0 ; p = sum ( a , i + 1 , j , r ) ; q = sum ( a , i + 1 , j + 1 , r ) ; if ( p >= q ) return ( p + a [ i ] [ j ] ) ; else return ( q + a [ i ] [ j ] ) ; }", "label": 2, "id": 1219}
{"input": "int main ( ) { int T , N , sum , i , term1 , term2 ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { sum = 0 ; scanf ( \"%d\" , & N ) ; for ( i = 1 ; i <= N ; i ++ ) { int term1 = 0 , term2 = 0 , n = 0 ; if ( i == 1 ) { scanf ( \"%d\" , & term1 ) ; sum += term1 ; continue ; } scanf ( \"%d%d\" , & term1 , & term2 ) ; n = ( term1 >= term2 ) ? term1 : term2 ; sum += n ; } printf ( \"%d\n\" , sum ) ; T -- ; } return 0 ; }", "label": 1, "id": 1405}
{"input": "int max_sum ( int * triangle [ ] , int row ) { int temp , temp1 ; int i , j , prev_row ; int * curr_row_ptr ; int * prev_row_ptr ; for ( i = 1 , prev_row = 0 ; i < row ; i ++ , prev_row ++ ) { curr_row_ptr = triangle [ i ] ; prev_row_ptr = triangle [ prev_row ] ; * curr_row_ptr += * prev_row_ptr ; for ( j = 1 ; j < i ; j ++ , curr_row_ptr ++ , prev_row_ptr ++ ) { temp = * prev_row_ptr ; temp1 = * ( prev_row_ptr - 1 ) ; temp = temp > temp1 ? temp : temp1 ; * ( curr_row_ptr ) += temp ; } * curr_row_ptr += * ( prev_row_ptr - 1 ) ; } i -- ; curr_row_ptr = triangle [ i ] ; temp = * curr_row_ptr ; ; for ( j = 1 ; j <= i ; j ++ ) { if ( * ( curr_row_ptr + j ) > temp ) temp = * ( curr_row_ptr + j ) ; } return temp ; } int main ( ) { int test_cases ; int rows ; char str [ 300 ] ; char * temp ; int i , j , num ; int * triangle [ 100 ] = { NULL } ; int * row_ptr ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { if ( triangle [ i ] == NULL ) triangle [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; j = 0 ; row_ptr = triangle [ i ] ; while ( j <= i ) { scanf ( \"%d\" , row_ptr ++ ) ; j ++ ; } } printf ( \"%d\n\" , max_sum ( triangle , rows ) ) ; } return 0 ; }", "label": 1, "id": 22928}
{"input": "long long int checkSum ( long long int n , long long int a [ ] [ n ] ) ; int main ( ) { long long int t , n , ans ; int i , j ; printf ( \"Enter t\n\" ) ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { printf ( \"Enter n\n\" ) ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { printf ( \"%lld \" , a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } ans = checkSum ( n , a ) ; printf ( \"%lld\" , ans ) ; } return 0 ; } long long int checkSum ( long long int n , long long int a [ ] [ n ] ) { int i = 1 , j = 0 ; long long int sum = a [ 0 ] [ 0 ] ; sum += a [ i ] [ j ] ; while ( i < n - 1 ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { i = i + 1 ; sum += a [ i ] [ j ] ; } else { i = i + 1 ; j = j + 1 ; sum += a [ i ] [ j ] ; } } return sum ; }", "label": 1, "id": 16543}
{"input": "int fastread ( ) { int i = 0 ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; while ( c > 33 ) { i = i * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return i ; } int main ( ) { int t , n , a [ 100 ] [ 100 ] , i , j ; t = fastread ( ) ; for ( ; t ; t -- ) { n = fastread ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = fastread ( ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i - 1 ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 407}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B ; scanf ( \"%d%d\" , & A , & B ) ; int ans = gcd ( A , B ) ; printf ( \"%d \" , ans ) ; printf ( \"%d\n\" , ( A * B ) / ans ) ; } }", "label": 1, "id": 6596}
{"input": "long long cost ; void func ( long arr [ ] , long size ) { long count = 0 ; int i ; if ( size == 1 ) { return ; } for ( i = 0 ; i < size ; ) { if ( ( size % 2 ) != 0 && ( i + 1 ) == size ) { arr [ count ] == arr [ i ] ; } else if ( arr [ i ] > arr [ i + 1 ] ) { cost = cost + arr [ i + 1 ] ; arr [ count ] = arr [ i + 1 ] ; } else { cost = cost + arr [ i ] ; arr [ count ] = arr [ i ] ; } count ++ ; i = i + 2 ; } if ( ( count + 1 ) > 1 ) { func ( arr , count ) ; } return ; } int main ( void ) { int t , i ; long size ; long arr [ 5000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%li\" , & size ) ; int arr [ size ] ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%li\" , & arr [ i ] ) ; } func ( arr , size ) ; printf ( \"%lli\n\" , cost ) ; } return 0 ; }", "label": 3, "id": 13944}
{"input": "int main ( void ) { int t , arr [ 1000000 ] , min ; long int i , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } min = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( min > arr [ i ] ) min = arr [ i ] ; printf ( \"%ld\n\" , ( n - 1 ) * min ) ; } }", "label": 0, "id": 20892}
{"input": "int max ( int u , int v ) { if ( u >= v ) return u ; else return v ; } main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , m = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , b [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) b [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) { if ( j == 0 ) b [ i ] [ j ] = b [ i - 1 ] [ j ] + a [ i ] [ j ] ; else b [ i ] [ j ] = max ( b [ i - 1 ] [ j ] + a [ i ] [ j ] , b [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ) ; } for ( i = 0 ; i < n ; i ++ ) if ( b [ n - 1 ] [ i ] > m ) m = b [ n - 1 ] [ i ] ; printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 0, "id": 26123}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int l , p , i ; long maxx = 0 , temp = 0 ; scanf ( \"%d\" , & l ) ; getchar ( ) ; while ( l -- ) { char ch [ 1000 ] ; gets ( ch ) ; p = strlen ( ch ) ; for ( i = 0 ; i < p ; i ++ ) { if ( ch [ i + 1 ] != '\\0' && ch [ i + 1 ] != ' ' ) { temp = temp + ( ch [ i ] - 48 ) * 10 + ( ch [ i + 1 ] - 48 ) ; i = i + 2 ; } else if ( ch [ i + 1 ] == '\\0' || ch [ i + 1 ] == ' ' ) { temp = temp + ( ch [ i ] - 48 ) ; i ++ ; } } maxx = maxx > temp ? maxx : temp ; temp = 0 ; } printf ( \"%ld\n\" , maxx ) ; } return 0 ; }", "label": 1, "id": 1297}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , c = 0 ; scanf ( \"%d\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) if ( a [ i - 1 ] < a [ i ] ) c ++ ; printf ( \"%d\n\" , c + n ) ; } }", "label": 1, "id": 5392}
{"input": "main ( ) { int T , N , a [ 101 ] ; scanf ( \"%d\" , & T ) ; int i , j , k ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d\" , & N ) ; long count = N ; for ( j = 1 ; j <= N ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; for ( j = 1 ; j < N ; j ++ ) { for ( k = j + 1 ; k <= N ; k ++ ) { if ( a [ k - 1 ] <= a [ k ] ) count ++ ; if ( a [ k - 1 ] > a [ k ] ) { break ; } } } printf ( \"%lld\n\" , count ) ; } }", "label": 3, "id": 20830}
{"input": "int main ( ) { int t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i >= 1 ; i -- ) { for ( j = 1 ; j < n ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } } printf ( \"%d \n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 24109}
{"input": "int main ( void ) { int a [ 101 ] [ 101 ] ; int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j + 1 ] >= a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24313}
{"input": "int main ( ) { int i , k , m , a [ 100 ] , b [ 100 ] , t , s , p ; scanf ( \"%d\" , & i ) ; if ( i > 0 && i < 1000 ) { for ( k = 0 ; k < i ; k ++ ) { scanf ( \"%d\" , & a [ k ] ) ; s = 0 ; if ( i > 0 && i < 100 ) { t = a [ k ] ; for ( m = 0 ; m < .5 * t * ( t + 1 ) ; m ++ ) { scanf ( \"%d\" , & b [ m ] ) ; if ( b [ m ] < 0 && b [ m ] > 100 ) { break ; } } p = ( t * ( t + 1 ) * ( .5 ) ) - t ; if ( b [ p ] > b [ p + 1 ] ) { int n = 0 ; for ( m = 0 ; m < t ; m ++ ) { s = s + b [ m + n ] ; n = n + m ; } } else { int n = 0 ; for ( m = 0 ; m < t - 1 ; m ++ ) { s = s + b [ m + n ] ; n = n + m ; } s = s + b [ p + 1 ] ; } printf ( \"%d\" , s ) ; printf ( \"\n\" ) ; } } } return 0 ; }", "label": 1, "id": 9946}
{"input": "int main ( ) { char x [ 11 ] , y [ 11 ] ; int test , flag = 0 , i , n , h , c ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & h ) ; } printf ( \"%d\" , n + 1 ) ; } return 0 ; }", "label": 1, "id": 20359}
{"input": "int max_path ( int * a , int x , int y , int n ) ; int xyToIndex ( int x , int y ) ; int main ( ) { int t , n ; int i , j , k ; int sum_max ; int * a ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int num = ( ( n * ( n + 1 ) ) / 2 ) ; a = ( int * ) malloc ( num * sizeof ( int ) ) ; for ( j = 0 ; j < num ; j ++ ) { scanf ( \"%d\" , a + j ) ; } sum_max = max_path ( a , 0 , 0 , n ) ; printf ( \"%d\n\" , sum_max ) ; } } int max_path ( int * a , int x , int y , int n ) { int index = xyToIndex ( x , y ) ; int val = * ( a + index ) ; int xD = x , yD = y + 1 , xR = x + 1 , yR = y + 1 ; int iD = xyToIndex ( xD , yD ) , iR = xyToIndex ( xR , yR ) ; int valD = * ( a + iD ) , valR = * ( a + iR ) ; if ( yD == n - 1 ) { return val + ( valD > valR ? valD : valR ) ; } else { int pathD = max_path ( a , xD , yD , n ) ; int pathR = max_path ( a , xR , yR , n ) ; return val + ( pathD > pathR ? pathD : pathR ) ; } } int xyToIndex ( int x , int y ) { return ( x + ( ( y * ( y + 1 ) ) / 2 ) ) ; }", "label": 2, "id": 6250}
{"input": "int main ( void ) { int t , n , m , i , j , k , l , r , d , s , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } d = n ; m = 0 ; for ( i = 1 ; i <= n ; i ++ ) { s = 0 ; for ( j = 1 ; j < d ; j ++ ) { s = s + a [ j ] [ i ] ; } if ( i < n ) { s = s + a [ d ] [ i + 1 ] ; } else { s = s + a [ d ] [ i ] ; } if ( s > m ) { m = s ; } d -- ; } printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 1, "id": 21225}
{"input": "void find_max ( int * a , int level , int maxRows ) ; int main ( ) { int cases ; int a [ 10000 ] , total , i , rows ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { scanf ( \"%d\" , & rows ) ; total = ( rows * ( rows + 1 ) ) / 2 ; for ( i = 0 ; i < total ; i ++ ) scanf ( \"%d\" , a + i ) ; find_max ( a , 0 , rows ) ; printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; } void find_max ( int * a , int level , int maxRows ) { int i = 0 ; if ( level + 1 == maxRows ) { return ; } find_max ( a + level + 1 , level + 1 , maxRows ) ; for ( i = 0 ; i <= level ; i ++ ) { a [ i ] += a [ i + level + 1 ] > a [ i + level + 2 ] ? a [ i + level + 1 ] : a [ i + level + 2 ] ; } }", "label": 0, "id": 22521}
{"input": "int maxInt ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int _case ; scanf ( \"%d\" , & _case ) ; int row , max ; int d [ 2 ] [ 100 ] ; int i , j , k ; int pre , cur ; while ( _case -- ) { scanf ( \"%d\" , & row ) ; scanf ( \"%d\" , & d [ 0 ] [ 0 ] ) ; for ( i = 1 ; i < row ; i ++ ) { pre = ( i - 1 ) & 1 ; cur = i & 1 ; scanf ( \"%d\" , & d [ cur ] [ 0 ] ) ; d [ cur ] [ 0 ] += d [ pre ] [ 0 ] ; max = d [ cur ] [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) { k = maxInt ( d [ pre ] [ j - 1 ] , d [ pre ] [ j ] ) ; scanf ( \"%d\" , & d [ cur ] [ j ] ) ; d [ cur ] [ j ] += k ; if ( d [ cur ] [ j ] > max ) max = d [ cur ] [ j ] ; } scanf ( \"%d\" , & d [ cur ] [ i ] ) ; d [ cur ] [ i ] += d [ pre ] [ i - 1 ] ; if ( d [ cur ] [ i ] > max ) max = d [ cur ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 21261}
{"input": "int main ( ) { int t ; long int n , i , min , ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%li\" , & n ) ; long int a [ n ] ; scanf ( \"%li\" , & a [ 1 ] ) ; min = a [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { scanf ( \"%li\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } ans = min * ( n - 1 ) ; printf ( \"\n%li\" , ans ) ; } return 0 ; }", "label": 1, "id": 3280}
{"input": "int gcd ( int x , int y ) { if ( x == y ) return x ; if ( x > y ) return gcd ( x - y , y ) ; else return gcd ( x , y - x ) ; } int main ( ) { int T , i , hcf ; int x , y , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%ld%ld\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %ld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 4811}
{"input": "int main ( ) { int n , sum = 0 , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; sum = sum + arr [ i ] ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 7798}
{"input": "int main ( ) { long long int t , s , n , i , j , k , c ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } c = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { s = a [ i ] ; for ( k = i + 1 ; k <= j ; k ++ ) { if ( a [ k ] < s ) break ; else s = a [ k ] ; } if ( k == j + 1 ) c ++ ; if ( a [ k ] < s ) break ; } } printf ( \"%lld\n\" , c + n ) ; } return 0 ; }", "label": 0, "id": 13324}
{"input": "int main ( void ) { long int a , b , t , gcd , lcm , rem ; scanf ( \"%ld\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld %ld\" , & a , & b ) ; lcm = a * b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } while ( b > 0 ) { rem = a % b ; a = b ; b = rem ; } gcd = a ; lcm = lcm / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; t -= 1 ; } return 0 ; }", "label": 0, "id": 9048}
{"input": "int a [ 100 ] [ 100 ] , cache [ 100 ] [ 100 ] ; int visited [ 100 ] [ 100 ] ; int n , nl ; int solve ( int i , int j ) { int t , t1 , t2 ; if ( i > nl ) return 0 ; if ( visited [ i ] [ j ] == 1 ) return cache [ i ] [ j ] ; t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; t = a [ i ] [ j ] + ( ( t1 > t2 ) ? t1 : t2 ) ; cache [ i ] [ j ] = t ; visited [ i ] [ j ] = 1 ; return t ; } int main ( ) { int i , j , max = 0 ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d\" , & nl ) ; for ( i = 0 ; i < nl ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } max = solve ( 0 , 0 ) ; printf ( \"%d\n\" , max ) ; n -- ; } }", "label": 1, "id": 20853}
{"input": "int main ( ) { int t ; long long int n , i , j , cost , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 , min = 100002 ; scanf ( \"%lld\" , & n ) ; long int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 7967}
{"input": "int scan ( ) { int n = 0 ; int ch = getchar_unlocked ( ) ; while ( ch < '0' || ch > '9' ) ch = getchar_unlocked ( ) ; while ( ch >= '0' && ch <= '9' ) { n = ( n * 10 ) + ch - '0' ; ch = getchar_unlocked ( ) ; } return n ; } int main ( ) { int t , n , i , j ; t = scan ( ) ; while ( t -- ) { n = scan ( ) ; int arr [ 100 ] [ 100 ] = { { 0 } } ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] = scan ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8022}
{"input": "int main ( ) { int a , i ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { int b , c , j , lcm , m , x , y ; scanf ( \"%d %d\" , & b , & c ) ; x = b ; y = c ; while ( c != 0 ) { if ( b > c ) b = b - c ; else c = c - b ; } lcm = x * y / b ; printf ( \"%d %d\" , b , lcm ) ; } return 0 ; }", "label": 1, "id": 15868}
{"input": "int main ( ) { int i , t ; long long int sum ; long int n , min ; scanf ( \" %d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \" %ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \" %ld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } sum = ( n - 1 ) * min ; printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 1, "id": 14945}
{"input": "int main ( ) { int x , y , z , i , k , j , b [ 10 ] [ 10 ] ; scanf ( \"%d\" , & x ) ; int a [ x ] , sum [ x ] ; for ( i = 0 ; i < x ; i ++ ) sum [ i ] = 0 ; for ( i = 0 ; i < x ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( k = 0 ; k < x ; k ++ ) for ( i = 0 ; i < a [ k ] ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & b [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( k = 0 ; k < x ; k ++ ) { j = 0 ; for ( i = 0 ; i < a [ k ] ; i ++ ) { if ( i == 0 ) sum [ k ] += b [ i ] [ j ] ; else if ( b [ i ] [ j ] < b [ i ] [ j + 1 ] ) { j += 1 ; sum [ k ] += b [ i ] [ j ] ; } else if ( b [ i ] [ j ] > b [ i ] [ j + 1 ] ) sum [ k ] += b [ i ] [ j ] ; } } for ( i = 0 ; i < x ; i ++ ) printf ( \"%d\n\" , sum [ i ] ) ; return 0 ; }", "label": 3, "id": 1090}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] = { 0 } , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16834}
{"input": "int main ( ) { int i , j , k , n , p1 , p2 , cases , lines , largest ; scanf ( \"%d\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%d\" , & lines ) ; int mainArray [ lines ] ; mainArray [ 0 ] = 0 ; largest = 0 ; for ( j = 0 ; j < lines ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & n ) ; if ( k == 0 ) { p1 = mainArray [ k ] ; mainArray [ k ] = p1 + n ; if ( mainArray [ k ] > largest ) largest = mainArray [ k ] ; } else if ( k == j ) { mainArray [ k ] = p1 + n ; if ( mainArray [ k ] > largest ) largest = mainArray [ k ] ; } else { p2 = mainArray [ k ] ; if ( p1 >= p2 ) mainArray [ k ] = p1 + n ; else mainArray [ k ] = p2 + n ; if ( mainArray [ k ] > largest ) largest = mainArray [ k ] ; p1 = p2 ; } } } printf ( \"%d\n\" , largest ) ; } return 0 ; }", "label": 0, "id": 13443}
{"input": "int main ( ) { int n , i , j , num ; scanf ( \"%d\" , & num ) ; while ( num -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; } if ( i == j ) { a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } else { if ( ( a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ) < ( a [ i + 1 ] [ j + 1 ] + a [ i ] [ j + 1 ] ) ) a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j + 1 ] ; else a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } } int max = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( max < a [ n - 1 ] [ i ] ) max = a [ n - 1 ] [ i ] ; } printf ( \"%d \n\" , max ) ; } return 0 ; }", "label": 3, "id": 26196}
{"input": "int main ( ) { int in [ 100000 ] , i , j , n , count ; int res [ 5 ] , t , k = 0 ; scanf ( \"%d\" , & t ) ; if ( t < 0 || t > 5 ) return 0 ; while ( k < t ) { scanf ( \"%d\" , & n ) ; count = n ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & in [ i ] ) ; for ( j = i ; j >= 1 ; ) if ( in [ j ] >= in [ -- j ] ) count ++ ; else break ; } res [ k ++ ] = count ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , res [ i ] ) ; return 0 ; }", "label": 0, "id": 17451}
{"input": "int main ( ) { int x , i , min ; scanf ( \"%d\" , & x ) ; while ( x -- ) { int b , x = 0 ; scanf ( \"%d\" , & b ) ; int a [ b ] ; for ( i = 0 ; i < b ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < b ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; x += min ; } else x += min ; } printf ( \"%d\" , x ) ; } return 0 ; }", "label": 1, "id": 20063}
{"input": "int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int n ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( long long int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; long long int dp [ n ] ; dp [ 0 ] = 1 ; for ( long long int i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) dp [ i ] = dp [ i - 1 ] + 1 ; else dp [ i ] = 1 ; } long long int ans = 0 ; for ( long long int i = 0 ; i < n ; i ++ ) ans = ans + dp [ i ] ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 1026}
{"input": "int main ( void ) { int t = 0 ; int n = 0 , i = 0 , count = 0 , flag = 0 ; long long int x = 0 , prev = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; prev = count = 0 ; scanf ( \"%lld\" , & prev ) ; flag = 1 ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & x ) ; if ( x >= prev ) { flag ++ ; } else if ( x < prev ) { count += ( flag * ( flag + 1 ) / 2 ) ; flag = 1 ; } prev = x ; } count += ( flag * ( flag + 1 ) / 2 ) ; printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 0, "id": 26448}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b ; scanf ( \"%ld\" , & a ) ; scanf ( \"%ld\" , & b ) ; long int gcd , lcm ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } if ( a > b ) gcd = b ; else gcd = a ; lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 16259}
{"input": "int a [ 1000 ] [ 1000 ] ; int sum [ 100 ] ; void insert ( int t ) { int i , j ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } void action ( int t ) { int i , j ; for ( i = 0 ; i < t ; i ++ ) { sum [ i ] = a [ i ] [ 0 ] + a [ i + 1 ] [ 0 ] + a [ i + 1 ] [ 1 ] ; } int max = 0 ; for ( i = 0 ; i < t ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\" , max ) ; } int main ( ) { int t , n , x ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; insert ( t ) ; action ( t ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 10259}
{"input": "int main ( ) { int p = 0 , a = 0 , b = 0 , temp = 0 , add = 0 ; register int i , j , k = 0 ; int n_row , t_case , sum = 0 , sum1 = 0 ; scanf ( \"%d\" , & t_case ) ; for ( i = 0 ; i < t_case ; i ++ ) { scanf ( \"%d\" , & n_row ) ; int take [ n_row ] [ n_row ] ; for ( j = 0 ; j < n_row ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & take [ j ] [ k ] ) ; } printf ( \"\n\" ) ; } for ( j = 0 ; j < n_row ; j ++ ) { k = p ; if ( j == p ) { add += take [ p ] [ j ] ; } while ( k < n_row ) { sum += take [ k ] [ j ] ; if ( k == ( n_row - 2 ) ) { a = k , b = j ; a ++ , b ++ ; sum1 = sum + take [ a ] [ b ] ; } k ++ ; } ( sum > sum1 ) ? ( ( temp < sum ) ? ( temp = sum ) : temp ) : ( ( temp < sum1 ) ? ( temp = sum1 ) : temp ) ; sum = 0 , sum1 = 0 , p ++ ; } p = 0 ; add > temp ? printf ( \"%d\n\" , add ) : printf ( \"%d\n\" , temp ) ; temp = 0 , add = 0 ; } return 0 ; }", "label": 1, "id": 1252}
{"input": "int main ( ) { int t ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\n\" , & n ) ; int a [ n ] , s = 0 , i , j , m ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\\t\" , & a [ i ] ) ; printf ( \"\n\" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ 0 ] > a [ i + 1 ] ) { a [ 0 ] = a [ i + 1 ] ; s = s + a [ i + 1 ] ; } else s = s + a [ 0 ] ; } printf ( \"%d\n\" , s ) ; s = 0 ; } }", "label": 1, "id": 7777}
{"input": "int main ( ) { int test ; int line ; int mat [ 1000 ] [ 1000 ] ; int sum [ 200 ] = { 0 } ; int i , j , k ; int a , b ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { scanf ( \"%d\" , & line ) ; k = 0 ; for ( j = 0 ; j < line ; j ++ ) { while ( k <= j ) { scanf ( \"%d\" , & mat [ j ] [ k ] ) ; k ++ ; } } a = 1 ; b = 0 ; sum [ i ] = mat [ 0 ] [ 0 ] ; while ( a < line && b < line ) { if ( mat [ a ] [ b ] < mat [ a ] [ b + 1 ] ) { b = b + 1 ; } sum [ i ] += mat [ a ] [ b + 1 ] ; a = a + 1 ; } } for ( i = 0 ; i < test ; i ++ ) printf ( \"%d\n\" , sum [ i ] ) ; return 0 ; }", "label": 1, "id": 25675}
{"input": "int main ( void ) { int T ; int N , i , maxIndex ; int * numbers ; int * substructure ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; maxIndex = N * ( N + 1 ) / 2 ; numbers = malloc ( sizeof ( int ) * maxIndex ) ; substructure = malloc ( sizeof ( int ) * maxIndex ) ; for ( i = 0 ; i < maxIndex ; i ++ ) { substructure [ i ] = - 1 ; scanf ( \"%d\" , & numbers [ i ] ) ; } printf ( \"%d\n\" , subproblem ( 0 , substructure , numbers , maxIndex ) ) ; } return 0 ; } int subproblem ( int index , int * subStructure , int * numbers , int maxIndex ) { if ( index >= maxIndex ) { return 0 ; } if ( subStructure [ index ] > - 1 ) { return subStructure [ index ] ; } else { int k = 1 ; while ( 2 * ( index + 1 ) > k * ( k + 1 ) ) { k ++ ; } subStructure [ index ] = max ( subproblem ( index + k , subStructure , numbers , maxIndex ) + numbers [ index ] , subproblem ( index + k + 1 , subStructure , numbers , maxIndex ) + numbers [ index ] ) ; return subStructure [ index ] ; } } int max ( int x , int y ) { return ( x > y ) ? x : y ; }", "label": 0, "id": 15744}
{"input": "long int max ( long int a , long int b ) { if ( a > b ) return a ; else return b ; } void main ( ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int x = n * ( n + 1 ) / 2 ; long int * a = malloc ( sizeof ( long int ) * x ) ; int i , j , init_pos , prl_pos , temp ; for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { scanf ( \"%d\" , & a [ 0 ] ) ; continue ; } init_pos = i * ( i + 1 ) / 2 ; prl_pos = init_pos - i ; for ( j = init_pos ; j < init_pos + i + 1 ; j ++ ) { scanf ( \"%d\" , & temp ) ; if ( j == init_pos || j == init_pos + i ) { a [ j ] = temp + a [ prl_pos ] ; } else { a [ j ] = temp + max ( a [ prl_pos ] , a [ prl_pos + 1 ] ) ; prl_pos ++ ; } } } long int max = a [ x - 1 ] ; for ( i = x - 2 ; i >= x - n ; i -- ) { if ( a [ i ] > max ) max = a [ i ] ; } printf ( \"%d\n\" , max ) ; } }", "label": 0, "id": 3353}
{"input": "int main ( ) { int t , max = 0 ; unsigned short int n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%u\" , & n ) ; int ar [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { int s = 0 ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ar [ i ] [ j ] ) ; s = s + ar [ i ] [ j ] ; } if ( s > max ) max = s ; } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 1, "id": 19746}
{"input": "int main ( ) { int i , n , * w , z , max , t ; char * cans , * rans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { max = 0 ; z = 0 ; scanf ( \"%d\" , & n ) ; cans = malloc ( sizeof ( char ) * n ) ; rans = malloc ( sizeof ( char ) * n ) ; w = ( int * ) malloc ( sizeof ( int ) * ( n + 1 ) ) ; scanf ( \"%s\" , cans ) ; scanf ( \"%s\" , rans ) ; for ( i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & w [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( cans [ i ] == rans [ i ] ) z = z + 1 ; } if ( z == n ) { max = w [ z ] ; } else { for ( i = 0 ; i <= z ; i ++ ) { if ( max < w [ i ] ) max = w [ i ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 19688}
{"input": "int main ( ) { int t , n ; int arr [ 100 ] [ 100 ] ; int tmp ; int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < n - 1 ; j ++ ) { tmp = arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ? arr [ i ] [ j ] : arr [ i ] [ j + 1 ] ; arr [ i - 1 ] [ j ] += tmp ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 10446}
{"input": "void main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i , hcf = 1 , lcm ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { for ( i = 1 ; i <= b ; i ++ ) if ( ( a % i == 0 ) && ( b % i == 0 ) ) hcf = i ; for ( i = b * a ; i >= b ; i -- ) if ( ( i % a == 0 ) && ( i % b == 0 ) ) lcm = i ; printf ( \"%d %d\n\" , hcf , lcm ) ; } else if ( b > a ) { for ( i = 1 ; i <= a ; i ++ ) if ( ( a % i == 0 ) && ( b % i == 0 ) ) hcf = i ; for ( i = b * a ; i >= a ; i -- ) if ( ( i % a == 0 ) && ( i % b == 0 ) ) lcm = i ; printf ( \"%d %d\n\" , hcf , lcm ) ; } else printf ( \"%d %d\n\" , a , a ) ; } }", "label": 2, "id": 15650}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = 1 ; j < n ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 20956}
{"input": "int a [ 105 ] [ 105 ] ; int numRow ; int sumTrian ( int row , int col ) ; int main ( ) { int t , ans , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & numRow ) ; for ( j = 1 ; j <= numRow ; ++ j ) { for ( i = 1 ; i <= j ; ++ i ) { scanf ( \"%d\" , & a [ j ] [ i ] ) ; } } if ( numRow >= 2 ) { ans = sumTrian ( 1 , 1 ) ; } else { ans = a [ 1 ] [ 1 ] ; } printf ( \"%d\n\" , ans ) ; } return 0 ; } int sumTrian ( int row , int col ) { int s1 , s2 ; if ( row == numRow - 1 ) { if ( a [ row + 1 ] [ col ] > a [ row + 1 ] [ col + 1 ] ) { return ( a [ row ] [ col ] + a [ row + 1 ] [ col ] ) ; } else { return ( a [ row ] [ col ] + a [ row + 1 ] [ col + 1 ] ) ; } } s1 = sumTrian ( row + 1 , col ) ; s2 = sumTrian ( row + 1 , col + 1 ) ; if ( s1 > s2 ) { return ( a [ row ] [ col ] + s1 ) ; } else { return ( a [ row ] [ col ] + s2 ) ; } }", "label": 2, "id": 24624}
{"input": "int max ( int a , int b ) { if ( a < b ) return b ; else a ; } void main ( ) { int a [ 100 ] [ 100 ] , m [ 100 ] [ 100 ] , result [ 100 ] ; int i = 0 , j = 0 , n , m1 , k = 0 ; scanf ( \"%d\" , & m1 ) ; for ( k = 0 ; k < m1 ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; j ++ ; } } for ( j = 0 ; j < n ; j ++ ) { m [ n - 1 ] [ j ] = a [ n - 1 ] [ j ] ; } j = 0 ; i = n - 2 ; while ( i >= 0 ) { for ( j = 0 ; j <= i ; j ++ ) { m [ i ] [ j ] = a [ i ] [ j ] + max ( m [ i + 1 ] [ j ] , m [ i + 1 ] [ j + 1 ] ) ; } i -- ; } result [ k ] = m [ 0 ] [ 0 ] ; } for ( k = 0 ; k < m1 ; k ++ ) { printf ( \"%d\n\" , result [ k ] ) ; } }", "label": 1, "id": 2802}
{"input": "int main ( ) { int t , a , b , i , m ; scanf ( \"%d\" , & t ) ; int gcd = 0 , lcm = 0 ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } m = a * b ; lcm = m / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 26026}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , m ; long long int s ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; m = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { m = ( a [ i ] > m ) ? m : a [ i ] ; } s = ( n - 1 ) * m ; printf ( \"%lld\n\" , s ) ; return 0 ; } }", "label": 1, "id": 6985}
{"input": "int main ( ) { long int num1 , num2 , c ; int t ; scanf ( \"%d\" , & t ) ; for ( int i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld %ld\" , & num1 , & num2 ) ; long int a = num1 , b = num2 ; while ( num1 % num2 != 0 ) { c = num1 % num2 ; num1 = num2 ; num2 = c ; } printf ( \"%ld %ld\n\" , num2 , ( a * b ) / c ) ; } return 0 ; }", "label": 0, "id": 16473}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , g , l ; scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( a , b ) ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 7771}
{"input": "void main ( ) { int n1 , n2 , gcd , lcm , r , n , d ; printf ( \"Enter two numbers\n\" ) ; scanf ( \"%d %d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { n = n1 ; d = n2 ; } else { n = n2 ; d = n1 ; } r = n % d ; while ( r != 0 ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = n1 * n2 / gcd ; printf ( \"GCD of %d and %d = %d\n\" , n1 , n2 , gcd ) ; printf ( \"LCM of %d and %d = %d\n\" , n1 , n2 , lcm ) ; }", "label": 1, "id": 6158}
{"input": "int main ( ) { int n , m , i , j , k , t , u , h , l , g ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & m ) ; u = 0 ; l = 0 ; for ( j = 0 ; j < m ; j ++ ) { u = u + h ; l = g ; h = g = 0 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & t ) ; if ( ( k == l || k == l + 1 ) && h <= t ) { g = k ; h = t ; } } printf ( \"\n\" ) ; } } return 0 ; }", "label": 1, "id": 9108}
{"input": "int arr [ 100 ] [ 100 ] ; int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] += arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22215}
{"input": "int sum ( int a [ 100 ] [ 100 ] , int r , int c , int R , int C ) { int ans , sum1 , sum2 ; if ( r < R && c < C ) { sum1 = sum ( a , r + 1 , c , R , C ) ; sum2 = sum ( a , r + 1 , c + 1 , R , C ) ; ans = ( sum1 >= sum2 ) ? sum1 : sum2 ; } else if ( r < R && c == C ) { ans = sum ( a , r + 1 , c , R , C ) ; } else if ( r == R ) { return a [ r ] [ c ] ; } return ans + a [ r ] [ c ] ; } int main ( ) { int t , n , i , j , a [ 100 ] [ 100 ] ; int ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; ans = sum ( a , 0 , 0 , n - 1 , n - 1 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 2, "id": 7764}
{"input": "int maxCal ( int * , int , int , int ) ; int main ( ) { int a [ 200 ] ; int n , i = 0 , row , j = 0 , tot = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & row ) ; tot = row * ( row + 1 ) / 2 ; for ( j = 0 ; j < tot ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } printf ( \"%d\" , maxCal ( a , row , 0 , 1 ) ) ; } return 0 ; } int maxCal ( int * a , int n , int in , int nl ) { int sum = 0 , sum1 = 0 ; if ( nl == n - 1 ) return a [ in ] ; sum1 = a [ in ] + maxCal ( a , n , in + nl , nl ) ; sum = a [ in ] + maxCal ( a , n , in + nl + 1 , nl ) ; if ( sum > sum1 ) return sum ; return sum1 ; }", "label": 3, "id": 7193}
{"input": "int main ( ) { int t , i , n , sum ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int a [ n + 1 ] , b [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } b [ 0 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { b [ i ] = b [ i - 1 ] + 1 ; } else { b [ i ] = 1 ; } } for ( i = 0 ; i < n ; i ++ ) { sum = sum + b [ i ] ; } printf ( \"%d\n\" , sum ) ; t -- ; } }", "label": 0, "id": 12173}
{"input": "int gcd ( int m , int n ) { if ( n == 0 ) return m ; else return gcd ( n , m % n ) ; } int lcm ( int m , int n ) { return ( m * n ) / gcd ( m , n ) ; } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int m , n , gc , lc ; scanf ( \"%d\" , & m ) ; scanf ( \"%d\" , & n ) ; gc = gcd ( m , n ) ; lc = lcm ( m , n ) ; printf ( \"%d \" , gc ) ; printf ( \"%d \n\" , lc ) ; } }", "label": 1, "id": 8963}
{"input": "int main ( void ) { long int t , i , n , min , a [ 100000 ] ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { min = 10000000 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 13478}
{"input": "int main ( ) { long int T , a , b , x , y , gcd , lcm ; scanf ( \"%ld\" , & T ) ; while ( T -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a >= b ) { x = a ; y = b ; } else { x = b ; y = a ; } lcm = x * y ; while ( y != 0 ) { gcd = x % y ; x = y ; y = gcd ; } lcm = lcm / x ; printf ( \"%ld %ld\n\" , x , lcm ) ; } scanf ( \"%d\" ) ; return 0 ; }", "label": 0, "id": 5098}
{"input": "int main ( ) { int i , j , t , a , b , gcd ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } for ( j = 1 ; j <= a ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { gcd = j ; } } printf ( \"%d %d\n\" , gcd , ( a * b / gcd ) ) ; } return 0 ; }", "label": 1, "id": 22047}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int n , t , i = 0 , j = 0 , large = 0 ; scanf ( \"%d\" , & t ) ; fflush ( stdin ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; fflush ( stdin ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; fflush ( stdin ) ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; fflush ( stdin ) ; if ( j == 0 ) a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else { if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } } large = a [ n - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ n - 1 ] [ j ] > large ) large = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , large ) ; } return 0 ; }", "label": 2, "id": 13518}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , n , l , g ; scanf ( \"%d\n\" , & n ) ; while ( n > 0 ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; printf ( \"%d\n\" , g ) ; l = a * b / g ; printf ( \"\n%d\" , l ) ; n -- ; } return 0 ; } int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 1021}
{"input": "int main ( ) { int a , b , c , i , n , prod , gcd , lcm , num , den , rem ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; prod = a * b ; while ( b != 0 ) { rem = a % b ; a = den ; b = rem ; } printf ( \"\n%d %d\" , b , prod / b ) ; } return 0 ; }", "label": 3, "id": 23421}
{"input": "int hcf ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a > b ) return hcf ( a % b , b ) ; if ( b > a ) return hcf ( a , b % a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i ; scanf ( \"%d%d\" , & a , & b ) ; i = hcf ( a , b ) ; printf ( \"%d %d\n\" , i , a * b / i ) ; } return 0 ; }", "label": 1, "id": 10552}
{"input": "int main ( ) { int t1 ; scanf ( \"%d\" , & t1 ) ; int x , y ; unsigned long long p , lcm , a , b , t , gcd ; while ( t1 -- ) { scanf ( \"%d %d\" , & x , & y ) ; if ( x > y ) { a = ( unsigned long long ) x ; b = ( unsigned long long ) y ; } else { b = ( unsigned long long ) x ; a = ( unsigned long long ) y ; } while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; p = ( unsigned long long ) x * y ; lcm = ( p ) / gcd ; printf ( \" %llu %llu\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 14197}
{"input": "int max ( int A [ 100 ] [ 100 ] , int B [ 100 ] [ 100 ] , int N , int j , int k ) ; int main ( ) { int T , i , j , k , N ; int A [ 100 ] [ 100 ] , B [ 100 ] [ 100 ] ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & N ) ; for ( j = 0 ; j < N ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) { B [ j ] [ k ] = - 1 ; } for ( j = 0 ; j < N ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & A [ j ] [ k ] ) ; } printf ( \"%d\n\" , max ( A , B , N , 0 , 0 ) ) ; } return 0 ; } int max ( int A [ 100 ] [ 100 ] , int B [ 100 ] [ 100 ] , int N , int j , int k ) { if ( j > N || k > N ) return 0 ; if ( B [ j ] [ k ] != - 1 ) return B [ j ] [ k ] ; int lsum , rsum ; lsum = max ( A , B , N , j + 1 , k ) ; rsum = max ( A , B , N , j + 1 , k + 1 ) ; if ( lsum > rsum ) B [ j ] [ k ] = A [ j ] [ k ] + lsum ; else B [ j ] [ k ] = A [ j ] [ k ] + rsum ; return B [ j ] [ k ] ; }", "label": 1, "id": 5842}
{"input": "int main ( ) { long long int A [ SZ ] , sm1 , sm2 , i , j , t , n ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; sm1 = sm2 = SZ + 1 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & A [ j ] ) ; if ( A [ j ] < sm1 ) { sm2 = sm1 ; sm1 = A [ j ] ; } else if ( ( A [ j ] < sm2 ) && ( A [ j ] != sm1 ) ) sm2 = A [ j ] ; } sm1 += sm2 ; printf ( \"%lld\n\" , sm1 ) ; } return 0 ; }", "label": 1, "id": 15944}
{"input": "int getmin ( int a [ ] , int size ) { int min = a [ 0 ] , i ; for ( i = 0 ; i < size ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } return min ; } int main ( ) { int arr [ 100 ] , a_size , i , t , cost , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a_size ) ; for ( i = 0 ; i < a_size ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } min = getmin ( arr , a_size ) ; cost = min * ( a_size - 1 ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 3, "id": 3261}
{"input": "int main ( void ) { long long int a [ 100000 ] , i , t , min , n ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } min = min * ( n - 1 ) ; printf ( \"%lld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 25644}
{"input": "int main ( ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 3149}
{"input": "int main ( ) { int T , i ; scanf ( \"%d\" , & T ) ; while ( T -- ) { long long int a , b ; int gcd , lcm ; scanf ( \"%lld%lld\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 17215}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int A , B , GCD , LCM , i , x , y , L , M ; scanf ( \"%d %d\" , & A , & B ) ; if ( A >= B ) { for ( i = A ; i <= A * B ; i ++ ) { x = i % A ; y = i % B ; if ( ( x == 0 ) && ( y == 0 ) ) { LCM = i ; break ; } } } else { for ( i = B ; i <= A * B ; i ++ ) { L = i % A ; M = i % B ; if ( ( L == 0 ) && ( M == 0 ) ) { LCM = i ; break ; } } } GCD = ( A * B ) / LCM ; printf ( \"%d %d\n\" , GCD , LCM ) ; } return 0 ; }", "label": 2, "id": 6923}
{"input": "int main ( ) { int t ; int n , max , sum , x , k ; int a [ 100 ] [ 100 ] ; int i , j ; scanf ( \"%d\" , & t ) ; if ( t > 1000 || t < 1 ) return 0 ; while ( t -- ) { max = 0 ; scanf ( \"%d\" , & n ) ; if ( n > 100 || n < 1 ) continue ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & a [ i - 1 ] [ j ] ) ; if ( a [ i - 1 ] [ j ] > 99 || a [ i - 1 ] [ j ] < 0 ) return 0 ; } } if ( n == 1 ) { printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; continue ; } for ( k = n - 1 ; k >= 0 ; k -- ) { for ( j = 0 ; j < k ; j ++ ) { sum = 0 ; for ( i = k ; i >= 0 ; i -- ) { if ( i == k ) { sum += a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; } else { x = j <= i ? 0 : ( j - i ) ; sum += a [ i ] [ j - x ] ; } } if ( sum > max ) max = sum ; } } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 2, "id": 22341}
{"input": "long long h ( long long a , long long b ) { while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; } int main ( ) { long long t , a , b , hcf , lcm ; scanf ( \"%lld\" , & t ) ; while ( t > 0 ) { t -- ; scanf ( \"%lld%lld\" , & a , & b ) ; hcf = h ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 6141}
{"input": "int a [ 100 ] [ 100 ] ; int ans [ 100 ] ; int res , n ; void hell ( ) ; void back ( ) ; int main ( ) { int tc , i , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } res = a [ 0 ] [ 0 ] ; back ( 1 ) ; printf ( \"%d\n\" , res ) ; } return 0 ; } void back ( int row ) { int column ; column = ans [ row - 1 ] ; ans [ row ] = column ; if ( row == ( n - 1 ) ) hell ( ) ; else back ( row + 1 ) ; column ++ ; ans [ row ] = column ; if ( row == ( n - 1 ) ) hell ( ) ; else back ( row + 1 ) ; } void hell ( ) { int tmp = 0 , i ; for ( i = 0 ; i < n ; i ++ ) tmp = tmp + a [ i ] [ ans [ i ] ] ; if ( tmp > res ) res = tmp ; }", "label": 2, "id": 3347}
{"input": "int main ( void ) { long i , T , a , b , temp , A , B , gcd ; long lcm ; scanf ( \"%ld\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld %ld\" , & A , & B ) ; a = A , b = B ; while ( b != 0 ) { temp = a ; a = b ; b = temp % b ; } gcd = a ; lcm = A * B / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 13986}
{"input": "main ( ) { int max , i , j , t , n , a [ 101 ] [ 101 ] , s [ 101 ] [ 101 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { for ( i = 0 ; i < 101 ; i ++ ) { for ( j = 0 ; j < 101 ; j ++ ) { s [ i ] [ j ] = 0 ; } } scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { s [ i ] [ j ] = max ( a [ i ] [ j ] + s [ i - 1 ] [ j - 1 ] , a [ i ] [ j ] + s [ i - 1 ] [ j ] ) ; } } max = s [ n ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( s [ n ] [ i ] > max ) max = s [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 21920}
{"input": "int main ( ) { int t , a [ 50000 ] , n , i , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { a [ i + 1 ] = a [ i ] < a [ i + 1 ] ? a [ i ] : a [ i + 1 ] ; printf ( \"%d \" , sum ) ; sum += a [ i + 1 ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 2674}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { unsigned int a , i , s , b , h , l ; scanf ( \"%u %u\n\" , & a , & b ) ; if ( a < b ) { s = a ; } else s = b ; for ( i = 1 ; i <= s ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { h = i ; } } l = ( a * b ) / h ; printf ( \"%u %u/n\" , h , l ) ; } return 0 ; }", "label": 2, "id": 24893}
{"input": "int sum ( int , char [ 100 ] [ 100 ] , int , int ) ; int max ( int , int ) ; int scanInt ( ) ; void printInt ( int ) ; int M [ 101 ] [ 101 ] ; int main ( ) { char a [ 100 ] [ 100 ] = { 0 } ; int n , r , o , p , q , temp ; n = scanInt ( n ) ; while ( n -- ) { for ( o = 0 ; o < 100 ; o ++ ) for ( q = 0 ; q < 100 ; q ++ ) { M [ o ] [ q ] = - 1 ; } r = scanInt ( ) ; for ( o = 0 ; o < r ; o ++ ) for ( q = 0 ; q <= o ; q ++ ) { a [ o ] [ q ] = ( char ) scanInt ( ) ; } printf ( \"%d\n\" , sum ( r , a , 0 , 0 ) ) ; } } int sum ( int n , char a [ 100 ] [ 100 ] , int x , int y ) { char L1 [ 100 ] [ 100 ] , L2 [ 100 ] [ 100 ] ; int i , j , i1 , j1 , k , m = 0 ; if ( M [ x ] [ y ] >= 0 ) { putchar ( '$' ) ; return M [ x ] [ y ] ; } else { if ( n == 1 ) { M [ x ] [ y ] = a [ 0 ] [ 0 ] ; return M [ x ] [ y ] ; } else { for ( i = 1 , i1 = 0 ; i < n ; i ++ , i1 ++ ) for ( j = 0 , j1 = 0 ; j < i ; j ++ , j1 ++ ) { L1 [ i1 ] [ j1 ] = a [ i ] [ j ] ; } for ( i = 1 , i1 = 0 ; i < n ; i ++ , i1 ++ ) for ( j = 1 , j1 = 0 ; j <= i ; j1 ++ , j ++ ) { L2 [ i1 ] [ j1 ] = a [ i ] [ j ] ; } M [ x ] [ y ] = a [ 0 ] [ 0 ] + max ( sum ( n - 1 , L1 , x , y + 1 ) , sum ( n - 1 , L2 , x + 1 , y + 1 ) ) ; return M [ x ] [ y ] ; } } } int max ( int a , int b ) { return ( a > b ) ? a : b ; } int scanInt ( ) { int x = 0 ; char ch ; ch = getchar ( ) ; while ( ch > '9' || ch < '0' ) { ch = getchar ( ) ; } while ( ch <= '9' && ch >= '0' ) { x = ( x << 3 ) + ( x << 1 ) + ch - '0' ; ch = getchar ( ) ; } return x ; } void printInt ( int x ) { int i = 0 ; char ch [ 11 ] ; while ( x > 0 ) { ch [ i ++ ] = ( char ) ( '0' + x ) ; x /= 10 ; } while ( i -- ) { putchar ( ch [ i ] ) ; } }", "label": 2, "id": 1945}
{"input": "int main ( ) { int i , j , t , x = 0 , y = 0 , gcd = 1 , lcm = 1 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & x , & y ) ; int min ; if ( x < y ) min = x ; else min = y ; for ( j = 1 ; j <= min ; j ++ ) { if ( x % j == 0 && y % j == 0 ) { gcd = j ; } } int max ; if ( x < y ) max = y ; else max = x ; for ( j = max ; j <= x * y ; j ++ ) { if ( j % x == 0 && j % y == 0 ) { lcm = j ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 21191}
{"input": "int num [ 99 ] [ 99 ] , check , row ; int sum ( int i , int j ) { int l , r ; if ( i == ( row - 1 ) ) { return ( num [ i ] [ j ] ) ; } l = num [ i ] [ j ] + sum ( i + 1 , j ) ; r = num [ i ] [ j ] + sum ( i + 1 , j + 1 ) ; if ( l < r ) { return ( r ) ; } else { return ( l ) ; } } int main ( void ) { int t , i , j , ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num [ i ] [ j ] ) ; } } ans = sum ( 0 , 0 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 2, "id": 6318}
{"input": "int main ( ) { int i , j , k , l , m , n , p , arr [ 200 ] ; scanf ( \"%d\" , & k ) ; for ( m = 0 ; m < k ; m ++ ) { l = 0 ; for ( i = 0 ; i < 250 ; i ++ ) arr [ i ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & p ) ; arr [ ( i * ( i + 1 ) / 2 ) + j ] = arr [ ( i * ( i + 1 ) / 2 ) + j ] + p ; } arr [ ( ( i + 2 ) * ( i + 1 ) / 2 ) ] = arr [ ( i * ( i + 1 ) / 2 ) ] ; arr [ ( ( i + 2 ) * ( i + 1 ) / 2 ) + i + 1 ] = arr [ ( i * ( i + 1 ) / 2 ) + i ] ; if ( i > 0 ) { for ( j = 1 ; j <= i ; j ++ ) arr [ ( ( i + 2 ) * ( i + 1 ) / 2 ) + j ] = max ( arr [ ( i * ( i + 1 ) / 2 ) + j ] , arr [ ( i * ( i + 1 ) / 2 ) + j - 1 ] ) ; } } for ( i = ( ( n * ( n - 1 ) ) / 2 ) ; i < ( ( n * ( n - 1 ) ) / 2 ) + n ; i ++ ) { if ( l < arr [ i ] ) l = arr [ i ] ; } printf ( \"%d\n\" , l ) ; } exit ( 0 ) ; return 0 ; } int max ( int a , int b ) { if ( a < b ) return b ; else return a ; }", "label": 3, "id": 3391}
{"input": "int A [ SIZE ] ; void sel_sort ( int * p , int size ) { int i = 0 , j ; int temp ; for ( i = 0 ; i < size ; i ++ ) { for ( j = i ; j < size ; j ++ ) { if ( p [ j ] < p [ i ] ) { temp = p [ i ] ; p [ i ] = p [ j ] ; p [ j ] = temp ; } } } } int main ( ) { int T , N , i , j ; scanf ( \"%d\" , & T ) ; if ( T > M ) { return 0 ; } int min_cost [ T ] ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & N ) ; if ( N < 2 || N > SIZE ) { return 0 ; } for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%d\" , & A [ j ] ) ; } sel_sort ( A , N ) ; min_cost [ i ] = A [ 0 ] * ( N - 1 ) ; } for ( i = 0 ; i < T ; i ++ ) { printf ( \"%d\n\" , min_cost [ i ] ) ; } return 0 ; }", "label": 2, "id": 15244}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int array [ n ] ; int i = 0 ; while ( i < n ) { scanf ( \"%d\" , & array [ i ] ) ; i ++ ; } int min = 100000 ; i = 0 ; while ( i < n ) { if ( array [ i ] < min ) min = array [ i ] ; i ++ ; } min = min * ( n - 1 ) ; printf ( \"%d\n\" , min ) ; } return 0 ; }", "label": 0, "id": 2171}
{"input": "int GCD ( int big , int small ) { if ( big < small ) { return GCD ( small , big ) ; } if ( small == 0 && big == 0 ) { return 1 ; } else if ( small == 0 ) { return big ; } return GCD ( small , big % small ) ; } int main ( void ) { int testCases , a , b , c ; while ( scanf ( \"%d\" , & testCases ) > 0 ) { while ( testCases > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; c = GCD ( a , b ) ; printf ( \"%d %d\n\" , c , ( a * b ) / c ) ; testCases -- ; } } return EXIT_SUCCESS ; }", "label": 1, "id": 5366}
{"input": "int gcd ( int a , int b ) ; int lcm ( int a , int b ) ; int main ( ) { int a , b , t , i , n , g , l ; ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( a , b ) ; } return 0 ; } int gcd ( int a , int b ) { int i , hcf = 0 ; ; for ( i = 1 ; i <= a || i <= b ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) hcf = i ; } printf ( \"%d\n\" , hcf ) ; return 0 ; } int lcm ( int a , int b ) { int max ; max = ( a > b ) ? a : b ; while ( 1 ) { if ( ( max % a == 0 ) && ( max % b == 0 ) ) { printf ( \"%d\n\" , max ) ; break ; } max ++ ; } return 0 ; }", "label": 2, "id": 680}
{"input": "int main ( ) { long int t , n , cost , val1 , val2 , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%ld\" , & n ) ; scanf ( \"%ld\" , & val1 ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%ld\" , & val2 ) ; if ( val1 > val2 ) { cost += val2 ; val1 = val2 ; } else cost += val1 ; } printf ( \"%ld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 9728}
{"input": "int main ( ) { int T , A , B , i , j , LCM , GCD , s ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { s = 1 ; scanf ( \"%d%d\" , & A , & B ) ; for ( i = A * B ; i > 2 ; i -- ) if ( i % A == 0 && i % B == 0 ) LCM = i ; for ( i = 1 ; i < A ; i ++ ) if ( A % i == 0 && B % i == 0 ) GCD = i ; printf ( \"%d %d\n\" , GCD , LCM ) ; T -- ; } return 0 ; }", "label": 2, "id": 14371}
{"input": "int ans = 0 ; int l ; int max ( int a [ 101 ] [ 101 ] , int r , int c ) { int k , b ; if ( r == l ) return a [ r ] [ c ] ; k = max ( a , r + 1 , c ) ; b = max ( a , r + 1 , c + 1 ) ; if ( k > b ) return k + a [ r ] [ c ] ; else return b + a [ r ] [ c ] ; } main ( ) { int T , a [ 101 ] [ 101 ] ; int i , j ; scanf ( \"%d\" , & T ) ; for ( ; T > 0 ; T -- ) { scanf ( \"%d\" , & l ) ; for ( i = 1 ; i <= l ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , max ( a , 1 , 1 ) ) ; } return 0 ; }", "label": 2, "id": 22020}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n ; scanf ( \"%lld\" , & n ) ; int arr [ n + 1 ] ; int i , min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } long long int ans = min * ( n - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 24249}
{"input": "int a [ 1000 ] [ 1000 ] , n ; int solve ( int p , int q ) { int t1 , t2 , t ; if ( p > n ) return 0 ; else { t1 = solve ( p + 1 , q ) ; t2 = solve ( p + 1 , q + 1 ) ; if ( t1 > t2 ) t = t1 + a [ p ] [ q ] ; else t = t2 + a [ p ] [ q ] ; return t ; } } int main ( ) { int t , i , j , k , c ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } c = solve ( 0 , 0 ) ; printf ( \"%d\n\" , c ) ; } }", "label": 2, "id": 1494}
{"input": "int main ( ) { int n , rows , count , i , j ; int result [ 1000 ] ; int store [ MAXSIZE ] [ MAXSIZE ] ; scanf ( \"%d\" , & n ) ; for ( count = 1 ; count <= n ; count ++ ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & store [ i ] [ j ] ) ; } } for ( i = rows - 1 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( i != rows - 1 ) store [ i ] [ j ] += ( store [ i + 1 ] [ j + 1 ] > store [ i + 1 ] [ j ] ? store [ i + 1 ] [ j + 1 ] : store [ i + 1 ] [ j ] ) ; } } result [ count - 1 ] = store [ 0 ] [ 0 ] ; } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , result [ i ] ) ; return 0 ; }", "label": 0, "id": 1139}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , a [ 50010 ] , i ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] ) ; int s = 0 ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] > a [ i - 1 ] ) { a [ i ] = a [ i - 1 ] ; s = s + a [ i - 1 ] ; } else { s = s + a [ i ] ; } } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 16477}
{"input": "int main ( ) { int a [ 100 ] , n , t , i , j , k , l , m , count = 0 ; printf ( \"enter the no of test\" ) ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { printf ( \"enter the no of elements\" ) ; scanf ( \"%d\" , & n ) ; printf ( \"enter the elements\" ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; printf ( \" %d \" , a [ j ] ) ; } for ( m = 0 ; m < n ; m ++ ) { for ( k = m , l = m + 1 ; k < n , l < n ; k ++ ) { if ( a [ k ] < a [ l ] ) { count ++ ; } else break ; } } printf ( \"no of subarray=%d\" , count + n ) ; } return 0 ; }", "label": 3, "id": 910}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int c , i , l ; long long int a , b , s ; scanf ( \"%lld%lld\" , & a , & b ) ; l = a < b ? a : b ; for ( i = 1 ; i <= l ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { c = i ; } } s = ( a * b ) / c ; printf ( \"%lld %lld\n\" , c , s ) ; } return 0 ; }", "label": 2, "id": 4144}
{"input": "int max ( int , int ) ; int main ( ) { int n ; int a [ 100 ] [ 100 ] ; int t , j , b , sum , i ; sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } i = 0 ; j = 0 ; while ( i == 0 || i < n ) { b = max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; sum = a [ 0 ] [ 0 ] + b ; if ( b == a [ i + 1 ] [ j ] ) i = i + 1 ; else { i = i + 1 ; j = j + 1 ; } } printf ( \"%d\n\" , sum ) ; return 0 ; } int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; }", "label": 3, "id": 2008}
{"input": "int readint ( ) { char c = gc ( ) ; while ( c < '0' || c > '9' ) c = gc ( ) ; int ret = 0 ; while ( c >= '0' && c <= '9' ) { ret = 10 * ret + c - 48 ; c = gc ( ) ; } return ret ; } static int arr [ 4950 ] ; int main ( ) { int i , j , n , noOfRows , index = 0 ; n = readint ( ) ; while ( n -- ) { noOfRows = readint ( ) ; index = 0 ; for ( i = 0 ; i < noOfRows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) arr [ index ++ ] = readint ( ) ; } index -= noOfRows ; index -- ; while ( -- noOfRows ) { for ( i = 0 ; i < noOfRows ; i ++ ) { arr [ index ] += ( arr [ index + noOfRows ] > arr [ index + noOfRows + 1 ] ) ? arr [ index + noOfRows ] : arr [ index + noOfRows + 1 ] ; index -- ; } } printf ( \"\nSum : %d %d\" , arr [ 0 ] , n ) ; } return 0 ; }", "label": 1, "id": 10590}
{"input": "long gcd ( long a , long b ) { if ( a > b ) { if ( b == 0 ) return a ; gcd ( b , a % b ) ; } else if ( a < b ) { if ( a == 0 ) return b ; gcd ( a , b % a ) ; } else return a ; } long lcm ( long a , long b ) { return ( ( a * b ) / gcd ( a , b ) ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; printf ( \"%ld %ld\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 0, "id": 4750}
{"input": "int main ( ) { int i , j , t , n , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i + 1 ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9280}
{"input": "int main ( ) { int i , t , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int ar [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) if ( ar [ i ] [ j ] > ar [ i ] [ j + 1 ] ) ar [ i - 1 ] [ j ] += ar [ i ] [ j ] ; else ar [ i - 1 ] [ j ] += ar [ i ] [ j + 1 ] ; } printf ( \"%d\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 12317}
{"input": "int max1 ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a [ 105 ] [ 105 ] , i , j , count , cases , max2 ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { scanf ( \"%d\" , & count ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; a [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i < count ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j ] = max1 ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; } a [ i ] [ j + 1 ] = 0 ; } max2 = a [ count - 1 ] [ 0 ] ; for ( i = 0 ; i < count ; i ++ ) { if ( a [ count - 1 ] [ i ] > max2 ) max2 = a [ count - 1 ] [ i ] ; } printf ( \"%d\n\" , max2 ) ; } return 0 ; }", "label": 1, "id": 6940}
{"input": "long long int count1 ( int n ) { return ( ( n + 1 ) * n ) / 2 ; } int main ( ) { int n , i , t , flag ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; unsigned long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lu\" , & a [ i ] ) ; } long long int ans ; ans = 1 ; int count = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ i - 1 ] ) { count ++ ; flag = 0 ; } else { ans = ans + count1 ( count ) ; count = 1 ; flag = 1 ; } } if ( flag == 0 ) { ans = ans + count1 ( count ) ; } printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 10684}
{"input": "int gcd ( int n1 , int n2 ) { while ( n2 > 0 ) { int temp = n2 ; n2 = n1 % n2 ; n1 = temp ; } return n1 ; } int main ( ) { int a , b , test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %lld\n\" , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 17424}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { int m ; m = ( a > b ) ? a : b ; while ( 1 ) { if ( m % a == 0 && m % b == 0 ) { return m ; break ; } ++ m ; } } int main ( void ) { int t ; scanf ( \"%d\n\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d %d\n\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = lcm ( a , b ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 26494}
{"input": "int n , cse , * a [ 100 ] , * b [ 100 ] ; int main ( ) { scanf ( \"%d\" , & cse ) ; int i , j ; do { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) { a [ i ] = ( int * ) malloc ( ( i + 1 ) * ( sizeof ( int ) ) ) ; b [ i ] = ( int * ) malloc ( ( i + 1 ) * ( sizeof ( int ) ) ) ; } for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; ++ i ) { b [ i ] [ 0 ] = a [ i ] [ 0 ] + b [ i - 1 ] [ 0 ] ; b [ i ] [ i ] = a [ i ] [ i ] + b [ i - 1 ] [ i - 1 ] ; } for ( i = 2 ; i < n ; ++ i ) for ( j = 1 ; j < i ; ++ j ) ( b [ i ] [ j ] = a [ i ] [ j ] + ( max ( b [ i - 1 ] [ j ] , b [ i - 1 ] [ j - 1 ] ) ) ) ; j = b [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; ++ i ) if ( j < b [ n - 1 ] [ i ] ) j = b [ n - 1 ] [ i ] ; printf ( \"%d\n\" , j ) ; cse -- ; for ( i = 0 ; i < n ; ++ i ) { free ( a [ i ] ) ; free ( b [ i ] ) ; } } while ( cse ) ; return 0 ; }", "label": 0, "id": 12792}
{"input": "int main ( ) { int t ; while ( 1 ) { scanf ( \"%d\" , & t ) ; if ( t > 0 && t <= 10 ) break ; } while ( t -- ) { int n ; while ( 1 ) { scanf ( \"%d\" , & n ) ; if ( n >= 2 && n <= 50000 ) break ; } int a [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { while ( 1 ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] <= 100000 && a [ i ] > 0 ) break ; } } int m = INT_MAX ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < m ) m = a [ i ] ; } m *= n - 1 ; printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 0, "id": 12004}
{"input": "int main ( ) { int t , n , s , i , size , k , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; size = n ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; s = 0 ; while ( size != 1 ) { if ( a [ i ] >= a [ i + 1 ] ) { s += a [ i + 1 ] ; a [ i ] = a [ i + 1 ] ; } else { s += a [ i ] ; } for ( k = 2 ; k < n ; k ++ ) { a [ k ] = a [ k + 1 ] ; } size -- ; } printf ( \"%d\" , s ) ; } }", "label": 2, "id": 11033}
{"input": "int main ( void ) { int t , i , n , min , num ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; min = 10000001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & num ) ; min = MIN ( min , num ) ; } printf ( \"%lu\n\" , ( unsigned long ) min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 19243}
{"input": "int main ( void ) { int t = 0 , n = 0 , a [ MAX ] , i = 0 , min = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 0 ; scanf ( \"%d\" , & n ) ; if ( n <= 1 ) { break ; } else { for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n - 1 ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 9385}
{"input": "int arr [ 100 ] [ 100 ] ; int me [ 100 ] [ 100 ] ; int sum ( r , s , t ) { if ( r < t ) { if ( me [ r ] [ s ] == - 1 ) { int p , q ; p = sum ( r + 1 , s , t ) ; q = sum ( r + 1 , s + 1 , t ) ; me [ r ] [ s ] = arr [ r ] [ s ] + ( p > q ? p : q ) ; } return me [ r ] [ s ] ; } return 0 ; } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int p , i , j ; scanf ( \"%d\" , & p ) ; for ( i = 0 ; i < p ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { me [ i ] [ j ] = - 1 ; scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } printf ( \"%d\n\" , sum ( 0 , 0 , p ) ) ; } return 0 ; }", "label": 0, "id": 20034}
{"input": "int tack [ 100 ] ; int main ( ) { int n , p , o = 1 , arr [ 5050 ] ; int l , j , sum , ain = 0 , dif , i ; scanf ( \"%d\" , & n ) ; while ( n -- ) { o = 1 ; ain = 0 ; scanf ( \"%d\" , & l ) ; p = ( l * ( l + 1 ) ) / 2 ; for ( i = 0 ; i < p ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 0 ; i < l ; i ++ ) tack [ i ] = 0 ; while ( o ) { i = l - 1 ; while ( tack [ i ] && i >= 1 ) i -- ; if ( i <= 0 ) o = 0 ; dif = 1 ; sum = 0 ; for ( i = 0 , j = 0 ; j < l ; i = i + dif ++ , j ++ ) { if ( tack [ j ] == 1 ) i ++ ; sum = sum + arr [ i ] ; } if ( ain < sum ) ain = sum ; for ( i = l - 1 ; i >= 0 ; i -- ) { if ( tack [ i ] == 0 && tack [ i - 1 ] == 0 ) { tack [ i ] = 1 ; break ; } if ( tack [ i - 1 ] == 1 && tack [ i ] == 0 ) { tack [ i ] = 1 ; break ; } if ( tack [ i ] == 1 && tack [ i - 1 ] == 0 ) { tack [ i - 1 ] = 1 ; tack [ i ] = 0 ; break ; } if ( tack [ i ] == 1 && tack [ i - 1 ] == 1 ) { tack [ i ] = 0 ; } } } printf ( \"%d\n\" , ain ) ; } return 0 ; }", "label": 2, "id": 19984}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int n ; scanf ( \"%d\" , & n ) ; int i = 0 , arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } int min = arr [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } if ( n > 2 ) printf ( \"%d \" , min * ( n - 1 ) ) ; else printf ( \"%d \" , min ) ; t -- ; } }", "label": 1, "id": 4810}
{"input": "int main ( ) { int i , j , p , n , m , n1 , m1 , t ; scanf ( \"%d\" , & t ) ; while ( t ) { int gcd = 1 , lcm = 1 ; scanf ( \"%d%d\" , & n , & m ) ; p = n > m ? m : n ; n1 = n , m1 = m ; for ( i = 2 ; i <= p ; i ++ ) { if ( n1 % i == 0 ) { if ( m1 % i == 0 ) { gcd = i ; lcm = lcm * i ; n1 = n1 / i ; m1 = m1 / i ; i -- ; } } } printf ( \"%d %d\n\" , gcd , lcm * n1 * m1 ) ; t -- ; } return 0 ; }", "label": 2, "id": 9273}
{"input": "int main ( ) { int n , c , g ; scanf ( \"%d\" , & n ) ; for ( int z = 0 ; z < n ; z ++ ) { int p , s = 0 ; scanf ( \"%d\" , & p ) ; int arr [ p ] ; for ( int i = 0 ; i < p ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & c ) ; if ( j == 0 ) g = c ; if ( g <= c ) { g = c ; } } arr [ i ] = g ; } for ( int y = 0 ; y < p ; y ++ ) { s = s + arr [ y ] ; } s -- ; printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 4724}
{"input": "int read_int ( ) { int s = 0 ; char c ; while ( ( c = getchar_unlocked ( ) ) != ' ' && c != '\n' ) s = s * 10 + ( c - '0' ) ; return s ; } void write_int ( int n ) { char c [ 25 ] = { '\\0' } ; int j , i = 0 ; while ( n ) { c [ i ++ ] = n ; n = n / 10 ; } for ( j = i - 1 ; j >= 0 ; j -- ) putchar_unlocked ( c [ j ] + '0' ) ; } int main ( void ) { int t , n , a [ 101 ] [ 101 ] ; int i , j ; t = read_int ( ) ; while ( t -- ) { n = read_int ( ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) a [ i ] [ j ] = read_int ( ) ; int i = n , j = n ; for ( i = n ; i > 1 ; i -- ) for ( j = i ; j > 1 ; j -- ) a [ i - 1 ] [ j - 1 ] += ( ( a [ i ] [ j ] > a [ i ] [ j - 1 ] ) ? a [ i ] [ j ] : a [ i ] [ j - 1 ] ) ; printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 1, "id": 21102}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a [ 50000 ] , n , i , sum , b = 100001 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) ; { if ( a [ i ] < b ) b = a [ i ] ; } sum = b * ( n - 1 ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 5241}
{"input": "int main ( ) { int t , n1 , n2 , GCD = 1 , LCM , i , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; for ( j = 2 ; j <= n1 ; j ++ ) { if ( n1 % j == 0 && n2 % j == 0 ) { GCD = j ; continue ; } } printf ( \"%d \" , GCD ) ; LCM = n1 * n2 / GCD ; } printf ( \"%d\n\" , LCM ) ; return 0 ; }", "label": 2, "id": 16488}
{"input": "long long int Gcd ( long long int a , long long int b ) { if ( b == 0 ) { return a ; } else { Gcd ( b , a % b ) ; } } int main ( ) { long long int k , a , b , i , j , c , l ; scanf ( \"%lld\" , & k ) ; while ( k -- ) { scanf ( \"%lld%lld\" , & b , & a ) ; if ( a < b ) { l = Gcd ( b , a ) ; } else { l = Gcd ( a , b ) ; } c = l * ( b / l ) * ( a / l ) ; printf ( \"%lld %lld \n\" , l , c ) ; } return 0 ; }", "label": 0, "id": 3809}
{"input": "int main ( ) { int n , a , b , t , hcf , lcm , x , y ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; if ( b > a ) { t = b ; b = a ; a = t ; } while ( a % b != 0 ) { t = b ; b = a % b ; a = t ; } hcf = b ; lcm = x * y / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 14853}
{"input": "int main ( ) { long long int i , j , t , n , min ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int x [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & x [ i ] ) ; } min = x [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( x [ i ] < min ) min = x [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 5570}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b ; scanf ( \"%lf %lf\" , & a , & b ) ; int hcf = 0 ; ; int t = 0 ; if ( a > b ) { t = a ; } else { t = b ; } for ( int i = 1 ; i <= t ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; } } int lcm = 0 ; while ( 1 ) { if ( t % a == 0 && t % b == 0 ) { lcm = t ; break ; } t ++ ; } printf ( \"%d %d\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 3813}
{"input": "int a [ 100005 ] ; int main ( ) { int t , n , i ; long long int len , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } len = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ i - 1 ] ) { len ++ ; } else { sum += ( len * ( len + 1 ) ) / 2 ; len = 1 ; } } sum += ( len * ( len + 1 ) ) / 2 ; printf ( \"%lld\n\" , sum ) ; } }", "label": 0, "id": 4659}
{"input": "int main ( ) { int t , t1 , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int sum = 0 , max = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & t1 ) ; sum = sum + t1 ; } if ( sum > max ) max = sum ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 13446}
{"input": "int main ( ) { int t , i ; long a , b , x , n1 , n2 , tmp , lcd , gcd ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; n1 = a ; n2 = b ; while ( b != 0 ) { tmp = b ; b = ( a % b ) ; a = tmp ; } gcd = a ; lcd = ( n1 * n2 ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcd ) ; } return 0 ; }", "label": 0, "id": 3339}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , x , y ; scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d \" , a ) ; a = x ; b = y ; while ( a != b ) { if ( a < b ) a = a + x ; else b = b + y ; } printf ( \"%d\n\" , a ) ; } return 0 ; }", "label": 2, "id": 21826}
{"input": "int lcmnum ( int x , int y ) { long long int z ; z = ( x < y ) ? x : y ; for ( int j = 2 ; j <= z ; j ++ ) { if ( x % j == 0 && y % j == 0 ) { return z ; break ; } } return x * y ; } int main ( ) { long long int t , m , k ; scanf ( \"%lld\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; m = lcmnum ( a , b ) ; k = a * b / m ; printf ( \"%lld %lld\n\" , k , m ) ; } }", "label": 1, "id": 25578}
{"input": "static char _rbuf [ 8192 * 8 ] ; static char * _rend = 0 ; static char * _rpos = 0 ; static int ip [ 100 ] [ 100 ] ; int t ; int _getchar ( int lines ) { int i , cntr ; for ( i = 0 ; i < lines ; i ++ ) { int n = read ( 0 , _rbuf , sizeof _rbuf ) ; if ( n <= 0 ) { printf ( \"EOF(%d)\n\" , n ) ; exit ( 1 ) ; } _rend = _rbuf + n ; _rpos = _rbuf ; cntr = 0 ; while ( _rpos <= _rend - 2 ) { if ( * ( _rpos + 1 ) != ' ' && * ( _rpos + 1 ) != 0 && * ( _rpos + 1 ) != 10 ) { ip [ i ] [ cntr ] = ( int ) ( ( * ( _rpos ) - '0' ) * 10 + ( * ( _rpos + 1 ) - '0' ) ) ; _rpos = _rpos + 3 ; cntr ++ ; } else { ip [ i ] [ cntr ] = ( int ) ( * ( _rpos ) - '0' ) ; _rpos = _rpos + 2 ; cntr ++ ; } } } return 0 ; } int main ( ) { int j , k , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & l ) ; _getchar ( l ) ; for ( j = l - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { if ( ip [ j + 1 ] [ k ] > ip [ j + 1 ] [ k + 1 ] ) { ip [ j ] [ k ] = ip [ j ] [ k ] + ip [ j + 1 ] [ k ] ; } else { ip [ j ] [ k ] = ip [ j ] [ k ] + ip [ j + 1 ] [ k + 1 ] ; } } } printf ( \"%d\n\" , ip [ j + 1 ] [ k - 1 ] ) ; } return ( 0 ) ; }", "label": 3, "id": 787}
{"input": "int main ( ) { int t , n1 , n2 , numerator , denominator , remainder , lcm , gcd ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { numerator = n1 ; denominator = n2 ; } else { numerator = n2 ; denominator = n1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = n1 * n2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 1410}
{"input": "int main ( ) { int T , N , i , j , * * arr ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; arr = ( int * * ) malloc ( sizeof ( int ) * ( N + 1 ) ) ; for ( i = 0 ; i < N ; i ++ ) { arr [ i ] = ( int * ) malloc ( sizeof ( int ) * ( N ) ) ; } for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = N - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] += ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 9955}
{"input": "typedef unsigned int UINT ; static UINT a [ 101 ] ; int main ( ) { UINT t , n , i , j , tmp , max , prev , omax ; scanf ( \"%u\" , & t ) ; while ( t ) { scanf ( \"%u\" , & n ) ; a [ 0 ] = 0 ; for ( i = 1 ; i < n + 1 ; i ++ ) { a [ i ] = 0 ; prev = a [ 0 ] ; omax = 0 ; for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%u\" , & tmp ) ; if ( ! j ) a [ j ] += tmp ; else { max = ( a [ j ] > prev ) ? a [ j ] : prev ; prev = a [ j ] ; a [ j ] = tmp + max ; } if ( a [ j ] > omax ) omax = a [ j ] ; } } printf ( \"%u\n\" , omax ) ; t -- ; } return 0 ; }", "label": 0, "id": 20444}
{"input": "int main ( ) { int tc , T ; long long int arr [ 100002 ] ; scanf ( \"%d\" , & T ) ; for ( tc = 0 ; tc < T ; tc ++ ) { int n , i ; scanf ( \"%d\" , & n ) ; int table [ n ] ; long long int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; if ( i == 0 ) table [ i ] = 1 ; else { if ( arr [ i ] > arr [ i - 1 ] ) { table [ i ] = table [ i - 1 ] + 1 ; } else table [ i ] = 1 ; } sum += table [ i ] ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 16300}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { int a , b , i , k ; scanf ( \"\n%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a * b ; i ++ ) { if ( i % a == 0 && i % b == 0 ) break ; } k = a * b / i ; printf ( \"%d %d\n\" , k , i ) ; } return 0 ; }", "label": 2, "id": 19499}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , sum = 0 , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum = sum + a [ 0 ] [ 0 ] ; for ( i = 0 , j = 0 ; i < ( n - 1 ) && j < ( n - 1 ) ; i ++ ) { if ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) { sum = sum + a [ i + 1 ] [ j ] ; j = j ; } else { sum = sum + a [ i + 1 ] [ j + 1 ] ; j ++ ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 7880}
{"input": "int min ( int a [ ] , int n ) { int i , x = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( x > a [ i ] ) x = a [ i ] ; } return x ; } int main ( ) { int t , n , i , j , x ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } x = min ( a , n ) ; printf ( \"%lld\n\" , ( n - 1 ) * x ) ; } return 0 ; }", "label": 0, "id": 9330}
{"input": "int main ( ) { int i , t , n , k , j , a [ 50000 ] , cost , temp ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { cost = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j <= n - 1 ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; for ( j = 0 ; j <= n - 1 ; j ++ ) { for ( k = j + 1 ; k <= n - 1 ; k ++ ) { if ( a [ j ] > a [ k ] ) { temp = a [ j ] ; a [ j ] = a [ k ] ; a [ k ] = temp ; } } } for ( j = 0 ; j <= n - 2 ; j ++ ) { cost = cost + a [ j ] ; a [ j + 1 ] = a [ j ] ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 14286}
{"input": "int main ( ) { int a , b , i , j , k ; int c [ 100 ] [ 100 ] ; int s = 0 ; int e = 0 ; scanf ( \"%d\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%d\" , & b ) ; for ( j = 1 ; j <= b ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & c [ j ] [ k ] ) ; } } k = 1 ; for ( j = 1 ; j <= b ; j ++ ) { if ( j > 1 ) { if ( c [ j ] [ k ] < c [ j ] [ k + 1 ] ) s = s + c [ j ] [ k + 1 ] ; else s = s + c [ j ] [ k ] ; } else s = c [ j ] [ k ] ; } if ( j > 1 ) { k = 2 ; for ( j = 2 ; j <= b ; j ++ ) { if ( j > 2 ) { if ( c [ j ] [ k ] < c [ j ] [ k + 1 ] ) e = e + c [ j ] [ k + 1 ] ; else e = e + c [ j ] [ k ] ; } } if ( s > e ) printf ( \"%d\n\" , s ) ; else { e = e + c [ 1 ] [ 1 ] ; printf ( \"%d\n\" , e ) ; } } return 0 ; } }", "label": 3, "id": 6274}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int f = 1 ; while ( f <= t ) { int k ; scanf ( \"%d\" , & k ) ; int a [ k ] ; int i ; for ( i = 0 ; i < ( k ) ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int min , cost , greater ; for ( i = 0 ; i < ( k - 1 ) ; i ++ ) { if ( i != ( k - 2 ) ) { if ( a [ i ] > a [ i + 1 ] ) greater = a [ i ] ; else greater = a [ i + 1 ] ; } else { if ( a [ i ] > a [ i + 1 ] ) { greater = a [ i ] ; cost = a [ i + 1 ] ; } else { greater = a [ i + 1 ] ; cost = a [ i ] ; } } } printf ( \"%d\" , cost ) ; } }", "label": 2, "id": 12734}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { long int num1 , num2 , i , min , max , gcd , lcm ; scanf ( \"%ld %ld\" , & num1 , & num2 ) ; if ( num1 > num2 ) min = num2 ; max = num1 ; for ( i = min ; i > 0 ; i -- ) { if ( num1 % i == 0 && num2 % i == 0 ) { printf ( \"%ld \" , i ) ; gcd = i ; } } lcm = num1 * num2 / gcd ; printf ( \"%ld\n\" , lcm ) ; } return 0 ; }", "label": 2, "id": 6855}
{"input": "int main ( ) { int t ; long int a , b , x , y , r , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a < b ) { x = b ; y = a ; } else { x = a ; y = b ; } while ( y != 0 ) { r = x % y ; x = y ; y = r ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\" , lcm , gcd ) ; t -- ; } return 0 ; }", "label": 1, "id": 140}
{"input": "int main ( ) { unsigned long long int i , t , n , min ; int A [ 50002 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%llu\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } min = A [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > A [ i ] ) min = A [ i ] ; } min = min * ( n - 1 ) ; printf ( \"%llu\n\" , min ) ; } }", "label": 0, "id": 2515}
{"input": "int main ( ) { int t ; int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; long long int min , temp ; scanf ( \"%lld\" , & min ) ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & temp ) ; if ( temp < min ) min = temp ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 7668}
{"input": "int main ( ) { long long int t , a , b , i , gcd ; long long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } for ( i = a ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%d %lld\" , gcd , lcm ) ; } }", "label": 2, "id": 14710}
{"input": "int main ( ) { int n , t , b , i , c ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( b = 0 ; b < n ; b ++ ) { scanf ( \"%d\" , & a [ b ] ) ; if ( b == 0 ) c = a [ 0 ] ; if ( a [ b ] < c ) c = a [ b ] ; } printf ( \"%lld\n\" , ( n - 1 ) * c ) ; } return 0 ; }", "label": 0, "id": 4895}
{"input": "int main ( ) { int i , j , t , n = 100 , sum1 = 0 , sum2 = 0 , sum3 = 0 , a , b , c , e , f , g ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { for ( i = 1 ; i <= t ; i ++ ) { for ( j = 1 ; j <= t ; j ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; scanf ( \"%d\" , & c ) ; scanf ( \"%d\" , & e ) ; scanf ( \"%d\" , & f ) ; scanf ( \"%d\" , & g ) ; sum1 = sum1 + a ; sum2 = sum2 + ( b + c ) ; sum3 = sum3 + ( g + e + f ) ; if ( sum1 > sum2 && sum1 > sum3 ) { printf ( \"sum1 is greater\n\" ) ; printf ( \"%d\n\" , sum1 ) ; } else if ( sum2 > sum1 && sum2 > sum3 ) { printf ( \"sum2 is greater\n\" ) ; printf ( \"%d\n\" , sum2 ) ; } else printf ( \"sum3 is greater\n\" ) ; printf ( \"%d\n\" , sum3 ) ; } } } return 0 ; }", "label": 1, "id": 18035}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int p , q , m , n , r ; scanf ( \"%d%d\" , & m , & n ) ; p = m ; q = n ; while ( n != 0 ) { r = m % n ; m = n ; n = r ; } printf ( \"%d\\t%d\n\" , m , ( p * q ) / m ) ; } return 0 ; }", "label": 1, "id": 9129}
{"input": "int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19735}
{"input": "int main ( ) { int a [ 101 ] [ 101 ] ; int n , num , i , j , colsum [ 200 ] , rowsum [ 200 ] , dsum [ 200 ] , max = 0 ; scanf ( \"%d\" , & n ) ; for ( ; n ; n -- ) { scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < 100 ; i ++ ) colsum [ i ] = rowsum [ i ] = dsum [ i ] = 0 ; for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < num ; i ++ ) { for ( j = i ; j < num ; j ++ ) { colsum [ i ] += a [ j ] [ i ] ; } } for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { rowsum [ i ] += a [ i ] [ j ] ; } } for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j < num ; j ++ ) { dsum [ i ] += a [ j + i ] [ j ] ; } } max = colsum [ 0 ] ; for ( i = 0 ; i < num ; i ++ ) { if ( colsum [ i ] > max ) max = colsum [ i ] ; if ( rowsum [ i ] > max ) max = rowsum [ i ] ; if ( dsum [ i ] > max ) max = dsum [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 11910}
{"input": "long gcd ( long , long ) ; int main ( ) { long int t , i , a , b , rgcd , rlcm ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld\" , & a ) ; scanf ( \"%ld\" , & b ) ; rgcd = gcd ( a , b ) ; rlcm = ( a * b ) / rgcd ; printf ( \"%ld %ld\n\" , rgcd , rlcm ) ; } return 0 ; } long gcd ( long a , long b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; }", "label": 0, "id": 22705}
{"input": "int n , a [ 99 ] [ 99 ] , compare ; void recur ( int , int , int ) ; int main ( ) { int counter1 , counter2 , n1 , counter = 0 ; scanf ( \"%d\" , & n ) ; while ( counter < n ) { counter1 = 0 ; while ( counter1 < n1 ) { counter2 = 0 ; while ( counter2 <= counter1 ) { scanf ( \"%d\" , & a [ counter ] [ counter1 ] ) ; counter2 ++ ; } counter1 ++ ; } compare = 0 ; recur ( 0 , a [ 0 ] [ 0 ] , 1 ) ; printf ( \"%d\" , compare ) ; counter ++ ; } return 0 ; } void recur ( int rowele , int sum , int row ) { if ( row == n - 1 ) { if ( compare < sum ) compare = sum ; return ; } sum = sum + a [ row ] [ rowele ] ; recur ( rowele , sum , row + 1 ) ; sum = sum - a [ row ] [ rowele ] + a [ row ] [ rowele + 1 ] ; recur ( rowele + 1 , sum , row + 1 ) ; }", "label": 3, "id": 26075}
{"input": "int main ( void ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int arr [ max ] , i , n , count = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%lld\" , arr + i ) ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] <= arr [ i + 1 ] ) { count = count + arr [ i ] ; arr [ i + 1 ] = arr [ i ] ; } else count = count + arr [ i + 1 ] ; } printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 1, "id": 2491}
{"input": "int IsLastRow ( int [ ] , int ) ; void PrintIndices ( int [ ] , int ) ; void FindRowIndices ( int ) ; void Stablize ( int a [ 120 ] , int n ) ; int input [ 100 ] [ 100 ] ; int main ( ) { int i , j , k , n , num_testcases , a [ 120 ] [ 120 ] ; scanf ( \"%d\" , & num_testcases ) ; for ( i = 0 ; i < num_testcases ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & input [ j ] [ k ] ) ; } } FindRowIndices ( n ) ; } return 0 ; return 0 ; } void FindRowIndices ( int n ) { int digit , carry , i , largest = 0 , current = 0 , a [ 120 ] = { 0 } , j ; while ( IsLastRow ( a , n ) == 0 ) { a [ 0 ] = a [ 0 ] + 1 ; Stablize ( a , n ) ; current = 0 ; for ( i = n - 1 , j = 0 ; i >= 0 ; i -- , j ++ ) { current += input [ j ] [ a [ i ] ] ; } if ( current > largest ) largest = current ; } printf ( \"%d\n\" , largest ) ; } void PrintIndices ( int a [ 120 ] , int n ) { int i ; for ( i = n - 1 ; i >= 0 ; i -- ) { printf ( \"%d \" , a [ i ] ) ; } printf ( \"\n\" ) ; } int IsStable ( int a [ 120 ] , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] - a [ i + 1 ] != 0 && a [ i ] - a [ i + 1 ] != 1 ) { return 0 ; } } return 1 ; } void Stablize ( int a [ 120 ] , int n ) { int i , k , t ; L1 : for ( i = 0 ; i < n ; i ++ ) { t = a [ i ] - a [ i + 1 ] ; if ( t != 0 && t != 1 ) { a [ i + 1 ] += 1 ; for ( k = i ; k >= 0 ; k -- ) a [ k ] = a [ i + 1 ] ; goto L1 ; } } } int IsLastRow ( int a [ 120 ] , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] != n - 1 - i ) { return 0 ; } } return 1 ; }", "label": 2, "id": 16497}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long num1 , num2 ; int gcd , i , great ; float lcm ; scanf ( \"%ld%ld\" , & num1 , & num2 ) ; for ( i = 1 ; i < num1 && i < num2 ; i ++ ) { if ( num1 % i == 0 && num2 % i == 0 ) { gcd = i ; break ; } } lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %.0f\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 13022}
{"input": "int pathMax ( int ar [ ] [ 101 ] , int n , int m , int i , int max , int s ) ; int main ( ) { int q , tc , n , m , i , k , l , max , s ; int ar [ 101 ] [ 101 ] ; scanf ( \" %d\" , & tc ) ; for ( q = 0 ; q < tc ; q ++ ) { m = 0 , i = 0 , max = 0 , s = 0 ; scanf ( \" %d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { for ( l = 0 ; l <= k ; l ++ ) { scanf ( \" %d\" , & ar [ k ] [ l ] ) ; } } max = pathMax ( ar , n , m , i , max , s ) ; printf ( \"%d\n\" , max ) ; } return 0 ; } int pathMax ( int ar [ ] [ 101 ] , int n , int m , int i , int max , int s ) { int j , s1 ; if ( m < ( n - 1 ) ) { for ( j = i ; j < i + 2 ; j ++ ) { s1 = s + ar [ m ] [ j ] ; max = pathMax ( ar , n , m + 1 , j , max , s1 ) ; } return max ; } else { for ( j = i ; ( j <= i + 1 ) && ( j <= m ) ; j ++ ) { s1 = s + ar [ m ] [ j ] ; if ( s1 > max ) { max = s1 ; } } return max ; } }", "label": 2, "id": 6619}
{"input": "int solve ( int i , int j ) ; int a [ 100 ] [ 100 ] = { 0 } , c [ 100 ] [ 100 ] = { 0 } , k ; int cache [ 100 ] [ 100 ] = { 0 } ; main ( ) { int i , j , m , t , p , n ; scanf ( \"%d\" , & t ) ; for ( m = 1 ; m <= t ; m ++ ) { scanf ( \"%d\" , & n ) ; k = n - 1 ; for ( i = 0 ; i <= ( n - 1 ) ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; c [ i ] [ j ] = 0 ; } } p = solve ( 0 , 0 ) ; printf ( \"%d\" , p ) ; } return 0 ; } int solve ( int i , int j ) { int t1 , t2 , t ; if ( i > k ) { return 0 ; } if ( c [ i ] [ j ] == 1 ) { return cache [ i ] [ j ] ; } t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; if ( t1 > t2 ) { t = a [ i ] [ j ] + t1 ; c [ i ] [ j ] = 1 ; cache [ i ] [ j ] = t ; } else { t = a [ i ] [ j ] + t2 ; c [ i ] [ j ] = 1 ; cache [ i ] [ j ] = t ; } return t ; }", "label": 1, "id": 15476}
{"input": "int main ( ) { int a , b , x , y , i , t , j , lcm , gcd ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { j = b ; b = a % b ; a = j ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 8946}
{"input": "int main ( ) { int t ; long a , b ; long gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; long n1 = a ; long n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%ld %ld\n\" , b , n1 * n2 / b ) ; } return 0 ; }", "label": 0, "id": 5602}
{"input": "int main ( ) { int T , i , j ; long int a , b , gcd , lcm , min ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) min = b ; else min = a ; for ( j = 1 ; j <= min ; j ++ ) { if ( ( a % j == 0 ) && ( b % j == 0 ) ) gcd = j ; } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } }", "label": 2, "id": 25871}
{"input": "int GCD ( int A , int B ) { if ( A == B ) return A ; if ( A == 0 ) return B ; if ( B == 0 ) return A ; if ( A > B ) { if ( A % B == 0 ) return B ; return GCD ( A - B , B ) ; } if ( B % A == 0 ) { return A ; } return GCD ( A , B - A ) ; } int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B ; scanf ( \"%d %d\" , & A , & B ) ; int gcd = GCD ( A , B ) ; printf ( \"%d %d\n\" , gcd , A * B / gcd ) ; } }", "label": 1, "id": 21799}
{"input": "int main ( ) { int n , * * a , n1 , k , j , i ; scanf ( \"%d\" , & n1 ) ; for ( k = 1 ; k <= n1 ; k ++ ) { scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( i * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , a [ i ] + j ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 1582}
{"input": "int main ( ) { int arr [ 100 ] [ 100 ] , i , j , k , ii , kk , jj ; scanf ( \"%d\" , & ii ) ; for ( ; ii >= 1 ; ii -- ) { scanf ( \"%d\" , & jj ) ; for ( i = 0 ; i < jj ; i ++ ) { for ( kk = 0 ; kk <= i ; kk ++ ) scanf ( \"%d\" , & arr [ i ] [ kk ] ) ; } for ( i = kk ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + 1 ] ) k = arr [ i ] [ j + 1 ] ; else k = arr [ i ] [ j ] ; arr [ i - 1 ] [ j ] = arr [ i - 1 ] [ j ] + k ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } printf ( \"\n\" ) ; return 0 ; }", "label": 1, "id": 9586}
{"input": "unsigned int count = 0 ; void find_max_path_sum ( unsigned long a [ ] [ 100 ] , unsigned long , unsigned long , unsigned long , unsigned long , unsigned long * ) ; void store_sum ( unsigned long * , unsigned long ) ; unsigned long find_max ( unsigned long * ) ; int main ( ) { unsigned long t , max_sum , i , n , j , k , x , a [ 100 ] [ 100 ] ; unsigned long sum_store [ 200 ] ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%ld\" , & x ) ; a [ j ] [ k ] = x ; } } find_max_path_sum ( a , 0 , 0 , 0 , n , sum_store ) ; printf ( \"%ld\" , find_max ( sum_store ) ) ; for ( k = 0 ; k < count ; k ++ ) sum_store [ k ] = 0 ; count = 0 ; if ( i < t - 1 ) printf ( \"\n\" ) ; } return 0 ; } void find_max_path_sum ( unsigned long a [ 100 ] [ 100 ] , unsigned long i , unsigned long j , unsigned long sum , unsigned long n , unsigned long * sum_store ) { if ( i > ( n - 1 ) ) { store_sum ( sum_store , sum ) ; } else { sum = sum + a [ i ] [ j ] ; find_max_path_sum ( a , i + 1 , j , sum , n , sum_store ) ; find_max_path_sum ( a , i + 1 , j + 1 , sum , n , sum_store ) ; } } void store_sum ( unsigned long * sum_store , unsigned long sum ) { sum_store [ count ] = sum ; count ++ ; } unsigned long find_max ( unsigned long * sum_store ) { unsigned long i ; unsigned long max = sum_store [ 0 ] ; for ( i = 0 ; i < count ; i ++ ) { if ( sum_store [ i ] > max ) max = sum_store [ i ] ; } return max ; }", "label": 3, "id": 18009}
{"input": "int main ( void ) { int a [ 10 ] [ 10 ] , b , n , i , j ; scanf ( \"%d\" , & b ) ; while ( b -- ) { printf ( \"enter no of rows: \" ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i - 1 ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 16822}
{"input": "int main ( ) { int t , n , i , small ; int a [ 500005 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int small = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < small ) small = a [ i ] ; } printf ( \"%d\n\" , small * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 5578}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; if ( t > 0 && t <= 1000 ) { for ( int i = 1 ; i <= t ; i ++ ) { int n1 , n2 , gcd , lcm ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( int j = 1 ; j <= n1 && j <= n2 ; j ++ ) { if ( n1 % j == 0 && n2 % j == 0 ) gcd = j ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } } return 0 ; }", "label": 1, "id": 22598}
{"input": "int gcd ( long int a , long int b ) { int min , i , max ; if ( a < b ) { min = a ; max = b ; } else { min = b ; max = a ; } for ( i = min ; i > 0 ; i -- ) { if ( min % i == 0 && max % i == 0 ) { return i ; } } } int main ( ) { long int a , b , t , gc , lc ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; gc = gcd ( a , b ) ; lc = ( a * b ) / gc ; printf ( \"%d %d\n\" , gc , lc ) ; } return 0 ; }", "label": 1, "id": 17857}
{"input": "int main ( ) { int t , n1 , n2 , rem , num , den , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { num = n1 ; den = n2 ; } else { num = n2 ; den = n1 ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( n1 * n2 ) / gcd ; printf ( \"%d\" , gcd ) ; printf ( \" %d\" , lcm ) ; } }", "label": 1, "id": 9313}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int z = n - 1 ; for ( i = z ; i >= 0 ; i -- ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; } else if ( a [ i ] [ j + 1 ] >= a [ i ] [ j ] ) { a [ i - 1 ] [ j ] = a [ i ] [ j + 1 ] + a [ i - 1 ] [ j ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 20711}
{"input": "int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; int hcf , i , grt = - 99999 ; if ( a > b ) { grt = a ; } else { grt = b ; } for ( i = 1 ; i <= grt ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; } } printf ( \"%d %d\n\" , hcf , ( a * b ) / hcf ) ; } return 0 ; }", "label": 2, "id": 23074}
{"input": "int main ( ) { int t , a , b , i ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a || i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { printf ( \"%d\\t\" , i ) ; } } printf ( \"%d\n\" , ( a * b ) / i ) ; } return 0 ; }", "label": 2, "id": 2816}
{"input": "int main ( ) { int n , m , sum = 0 , i , j , * b , k = 0 , temp = 0 , l = 0 ; scanf ( \"%d\" , & n ) ; int ar [ 100 ] [ 100 ] ; for ( ; n > 0 ; n -- ) { scanf ( \"%d\" , & m ) ; b = calloc ( m , sizeof ( int ) ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } for ( i = 0 ; i < m ; i ++ ) { sum += ar [ i ] [ 0 ] ; l += ar [ i ] [ i ] ; } temp = sum ; for ( j = m - 1 ; j > k ; ) { if ( b [ j ] == b [ j - 1 ] ) { temp = temp - ar [ j ] [ b [ j ] ] + ar [ j ] [ ++ b [ j ] ] ; if ( sum < temp ) sum = temp ; j = m - 1 ; } if ( b [ j ] == j ) { k ++ ; j = m - 1 ; } if ( ( b [ j ] - 1 ) == b [ j - 1 ] ) j -- ; } if ( sum < l ) sum = l ; printf ( \"%d\n\" , sum ) ; sum = temp = l = 0 ; } }", "label": 1, "id": 3866}
{"input": "int main ( ) { int t ; int a , b , l , i , p , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; l = a ; k = b ; while ( k != 0 ) { p = k ; k = l % k ; l = p ; } printf ( \"%d %d\n\" , l , ( a * b ) / l ) ; } return 0 ; }", "label": 1, "id": 5020}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int a , b , c , d , gcd , lcm ; scanf ( \"%d %d\" , & a , & b ) ; d = ( a < b ) * a + ( b <= a ) * b ; for ( c = 1 ; c <= d ; c ++ ) { if ( ( a % c == 0 ) && ( b % c == 0 ) ) gcd = c ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 1922}
{"input": "int maxSum ( int a [ ] [ 105 ] , int r , int i , int j ) { if ( i == r ) return a [ i ] [ j ] ; int first = a [ i ] [ j ] + maxSum ( a , r , i + 1 , j ) ; int second = a [ i ] [ j ] + maxSum ( a , r , i + 1 , j + 1 ) ; return first > second ? first : second ; } int main ( int argc , char const * argv [ ] ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , r , sum ; int a [ 105 ] [ 105 ] ; scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum = maxSum ( a , r - 1 , 0 , 0 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 12291}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n = 0 ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19181}
{"input": "int main ( ) { int T , N , i , _max , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; int A [ N ] [ N ] ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; } for ( i = 1 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) A [ i ] [ j ] += A [ i - 1 ] [ j ] ; else if ( j == i ) A [ i ] [ j ] += A [ i - 1 ] [ j - 1 ] ; else A [ i ] [ j ] += max ( A [ i - 1 ] [ j ] , A [ i - 1 ] [ j - 1 ] ) ; } } _max = A [ N - 1 ] [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) if ( _max < A [ N - 1 ] [ i ] ) _max = A [ N - 1 ] [ i ] ; printf ( \"%d\n\" , _max ) ; } return 0 ; }", "label": 0, "id": 22606}
{"input": "int main ( ) { long long int t , n , a [ 50000 ] , z = 999999 , i , j , x ; scanf ( \"%lld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; if ( a [ j ] < z ) { z = a [ j ] ; } } x = z * ( n - 1 ) ; printf ( \"%lld\n\" , x ) ; z = 999999 ; } }", "label": 0, "id": 7083}
{"input": "int main ( ) { int i , n ; long a [ 1000 ] , b [ 1000 ] , num , j , gcd , num1 , num2 , k , sum ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld%ld\" , & a [ i ] , & b [ i ] ) ; } for ( i = 1 ; i <= n ; i ++ ) { num = a [ i ] > b [ i ] ? b [ i ] : a [ i ] ; for ( j = num ; j >= 1 ; j -- ) { if ( a [ i ] % j == 0 && b [ i ] % j == 0 ) { gcd = j ; printf ( \"%ld\" , gcd ) ; break ; } } k = 2 ; sum = 1 ; num1 = a [ i ] ; num2 = b [ i ] ; while ( num1 != 1 || num2 != 1 ) { while ( num1 % k == 0 || num2 % k == 0 ) { if ( num1 % k == 0 ) { num1 = num1 / k ; } if ( num2 % k == 0 ) { num2 = num2 / k ; } sum = sum * k ; } k ++ ; } printf ( \" %ld\" , sum ) ; printf ( \"\n\" ) ; } }", "label": 2, "id": 23670}
{"input": "int main ( ) { int t , i , j , k , l , n [ 100 ] [ 100 ] , b = 0 , c = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & l ) ; for ( j = 0 ; j < l ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & n [ j ] [ k ] ) ; } for ( k = 0 ; k < l ; k ++ ) { for ( j = 0 ; j < l ; j ++ ) b += n [ j ] [ k ] ; if ( b > c ) c = b ; b = 0 ; } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 1, "id": 9235}
{"input": "int gcd ( int x , int y ) { while ( x != y ) { if ( x > y ) return gcd ( x - y , y ) ; else return gcd ( x , y - x ) ; } return x ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , c , d ; scanf ( \"%d%d\" , & a , & b ) ; c = gcd ( a , b ) ; d = ( a * b ) / c ; printf ( \"%d\\t%d\n\" , c , d ) ; } return 0 ; }", "label": 1, "id": 13856}
{"input": "int main ( ) { int i , j , k , n , m , sum [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; int a [ m ] [ m ] ; for ( j = 0 ; j < m ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = m - 2 ; j >= 0 ; j -- ) { for ( k = m - 2 ; k >= 0 ; k -- ) { a [ j ] [ k ] += ( a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ? a [ j + 1 ] [ k ] : a [ j + 1 ] [ k + 1 ] ) ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 158}
{"input": "int main ( ) { int t ; long long result [ 10 ] ; int n , x ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & x ) ; int mini = x ; for ( int j = 1 ; j < n ; j ++ ) { scanf ( \"%d\" , & x ) ; if ( x < mini ) { mini = x ; } } result [ i ] = 1LL * ( n - 1 ) * mini ; } for ( int i = 0 ; i < t ; i ++ ) { printf ( \"%ld\n\" , result [ i ] ) ; } return 0 ; }", "label": 0, "id": 25836}
{"input": "int gcd1 ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd1 ( a - b , b ) ; else return gcd1 ( a , b - a ) ; } int lcm1 ( int a , int b ) { return ( a * b ) / gcd1 ( a , b ) ; } int main ( ) { int i , t ; int a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = gcd1 ( a , b ) ; lcm = lcm1 ( a , b ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 17710}
{"input": "main ( ) { long int i , j , k , a , b , e , c , n , m ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; c = a > b ? b : a ; for ( j = 1 ; j <= c ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { e = j ; } } a = a / e ; b = b / e ; k = a * b * e ; printf ( \"%ld %ld\n\" , e , k ) ; } }", "label": 2, "id": 21448}
{"input": "int maximum ( int * * s , int row , int col ) { int i , j , m [ row ] [ col ] ; for ( i = 0 ; i < row ; ++ i ) { for ( j = 0 ; j < row ; ++ j ) { m [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) m [ i ] [ j ] = s [ i ] [ j ] ; else if ( j == 0 ) m [ i ] [ j ] = m [ i - 1 ] [ j ] + s [ i ] [ j ] ; else if ( m [ i - 1 ] [ j ] > m [ i - 1 ] [ j - 1 ] ) m [ i ] [ j ] = m [ i - 1 ] [ j ] + s [ i ] [ j ] ; else m [ i ] [ j ] = m [ i - 1 ] [ j - 1 ] + s [ i ] [ j ] ; } } for ( i = 0 ; i < row ; ++ i ) { for ( j = 0 ; j < row ; ++ j ) { } } int max = 0 ; for ( i = 0 ; i < row ; ++ i ) { if ( m [ row - 1 ] [ i ] > max ) max = m [ row - 1 ] [ i ] ; } return max ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , * p [ 10 ] , * * pf ; scanf ( \"%d\" , & n ) ; int s [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & s [ i ] [ j ] ) ; } p [ i ] = s [ i ] ; } pf = p ; int sum = maximum ( ( int * * ) pf , n , n ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 5224}
{"input": "int gcd ( int x , int y ) { if ( x == 0 ) return y ; else return gcd ( y % x , x ) ; } int calGcd ( int x , int y ) { if ( x == y ) return x ; if ( x > y ) return gcd ( y , x ) ; return gcd ( x , y ) ; } int lcm ( int x , int y ) { int i ; for ( i = y ; i <= x * y ; i ++ ) if ( i % x == 0 && i % y == 0 ) return i ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i , hcf = 1 , lcm1 ; scanf ( \"%d%d\" , & a , & b ) ; hcf = calGcd ( a , b ) ; if ( a < b ) lcm1 = lcm ( a , b ) ; else lcm1 = lcm ( b , a ) ; printf ( \"%d %d\n\" , hcf , lcm1 ) ; } return 0 ; }", "label": 2, "id": 9134}
{"input": "int max ( int x , int y ) { return x > y ? x : y ; } int main ( ) { int t ; int curr [ MAX ] = { 0 } ; int new [ MAX ] = { 0 } ; int n ; int i , j , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & new [ j ] ) ; for ( j = i ; j >= 1 ; j -- ) curr [ j ] = new [ j ] + max ( curr [ j ] , curr [ j - 1 ] ) ; curr [ 0 ] += new [ 0 ] ; } c = 0 ; for ( i = 0 ; i < n ; i ++ ) if ( curr [ c ] < curr [ i ] ) c = i ; printf ( \"%d\n\" , curr [ c ] ) ; } return 0 ; }", "label": 1, "id": 24282}
{"input": "char ibuffer [ BS ] ; long ibuffer_size = 0 , ibuffer_offset = 0 ; static long inline fastread ( ) { long r = 0 , s = 1 ; while ( 1 ) { if ( ibuffer_offset >= ibuffer_size ) { ibuffer_size = read ( 0 , ibuffer , BS ) ; ibuffer_offset = 0 ; } if ( ibuffer [ ibuffer_offset ] < '0' ) { if ( s ) ibuffer_offset ++ ; else return r ; } else { s = 0 ; r = r * 10 + ibuffer [ ibuffer_offset ++ ] - '0' ; } } } int main ( ) { int a [ 100 ] [ 100 ] , i , j , N , T , max ; T = fastread ( ) ; while ( T -- ) { N = fastread ( ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; if ( j == 0 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else if ( i == j ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) ? a [ i - 1 ] [ j ] : a [ i - 1 ] [ j - 1 ] ; } } max = a [ N - 1 ] [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) if ( a [ N - 1 ] [ i ] > max ) max = a [ N - 1 ] [ i ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 25322}
{"input": "int function ( int [ ] , int , int , int ) ; int main ( void ) { int i , j , t , n ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } int x = function ( a , 0 , n , 0 ) ; printf ( \"%d\n\" , x + n ) ; } return 0 ; } int function ( int a [ ] , int low , int n , int count ) { if ( low < n - 1 ) { while ( a [ low + 1 ] >= a [ low ] ) { count ++ ; low ++ ; } function ( a , low + 1 , n , count ) ; } else { return ( count ) ; } }", "label": 1, "id": 23220}
{"input": "int main ( void ) { long long int t , n , ar [ 100012 ] = { 0 } , count [ 100010 ] = { 0 } ; ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int i = 0 ; while ( ( ( i ^ n ) != 0 ) ) { scanf ( \"%lld\" , & ar [ i ] ) ; i ++ ; } i = 0 ; count [ 0 ] = 1 ; long long int k = 0 ; while ( ( i ^ n ) != 0 ) { if ( ar [ i + 1 ] >= ar [ i ] ) { count [ k ] ++ ; } else { k ++ ; count [ k ] = 1 ; } i ++ ; } i = 0 ; long long int sum = 0 ; while ( ( i ^ k ) != 0 ) { sum += ( count [ i ] * ( count [ i ] + 1 ) ) / 2 ; i ++ ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 20269}
{"input": "int max [ 100 ] [ 100 ] ; int a [ 100 ] [ 100 ] ; int sumtrian ( int row , int col ) ; int main ( ) { int i , j , n , sum , t , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; temp = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { sum = sumtrian ( n - 1 , i ) ; if ( sum > temp ) temp = sum ; } printf ( \"%d\" , temp ) ; } return 0 ; } int sumtrian ( int row , int col ) { if ( row == 0 ) { max [ row ] [ col ] = a [ row ] [ col ] ; return max [ row ] [ col ] ; } if ( col == 0 ) { max [ row ] [ col ] = a [ row ] [ col ] + sumtrian ( row - 1 , col ) ; } else if ( col == row ) { max [ row ] [ col ] = a [ row ] [ col ] + sumtrian ( row - 1 , col - 1 ) ; } else { max [ row ] [ col ] = a [ row ] [ col ] + sumtrian ( row - 1 , col ) ; if ( max [ row - 1 ] [ col - 1 ] > max [ row - 1 ] [ col ] ) max [ row ] [ col ] = a [ row ] [ col ] + max [ row - 1 ] [ col - 1 ] ; } return max [ row ] [ col ] ; }", "label": 1, "id": 21473}
{"input": "int main ( ) { long long int GCD , LCM , i , T , x , y , A , B , r ; scanf ( \"%lld\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%lld %lld\" , & A , & B ) ; x = A ; y = B ; while ( y != 0 ) { r = x % y ; x = y ; y = r ; } GCD = x ; LCM = ( A * B ) / GCD ; printf ( \"%lld %lld\n\" , GCD , LCM ) ; } return 0 ; }", "label": 0, "id": 14508}
{"input": "int main ( void ) { long long b , a , temp , j , c ; int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { temp = b ; b = a ; a = temp ; } j = 2 ; c = b ; while ( c % a != 0 ) { c = b * j ; j ++ ; } printf ( \"%lld %lld\n\" , a * b / c , c ) ; } return 0 ; }", "label": 2, "id": 22144}
{"input": "int main ( ) { unsigned long long int t , k , a , b , q , r , gcd , a2 , b2 ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; b2 = b ; a2 = a ; if ( a == b ) { printf ( \"%lld %lld\n\" , a , a ) ; } else { r = 1 ; if ( a < b ) { k = a ; a = b ; b = k ; } while ( r != 0 ) { q = a / b ; r = a % b ; a = b ; if ( r != 0 ) { b = r ; } } printf ( \"%lld %lld\n\" , b , ( a2 * b2 ) / b ) ; } } }", "label": 0, "id": 17379}
{"input": "int main ( ) { int t , x , i ; int a [ 102 ] [ 102 ] ; long int sum , j ; scanf ( \"%d\" , & t ) ; while ( t ) { t -- ; scanf ( \"%d\" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { for ( j = i ; j < x ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = x - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } x -- ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 18280}
{"input": "int fun ( int * a , int * b , int i , int n , int j ) { if ( i >= n ) return 0 ; if ( * ( b + i * n + j ) != - 1 ) return * ( b + i * n + j ) ; int l = * ( a + i * n + j ) + fun ( a , b , i + 1 , n , j ) , r = * ( a + i * n + j ) + fun ( a , b , i + 1 , n , j + 1 ) ; if ( l > r ) { * ( b + i * n + j ) = l ; return l ; } else { * ( b + i * n + j ) = r ; return r ; } } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , b [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ i ] [ j ] = - 1 ; } printf ( \"%d\n\" , fun ( a [ 0 ] , b [ 0 ] , 0 , n , 0 ) ) ; } return 0 ; }", "label": 0, "id": 14338}
{"input": "int a [ 50000 ] ; void q_sort ( int , int ) ; int main ( ) { int n , t , * ans , i , j , count = 0 , flag = 0 ; scanf ( \"%d\" , & t ) ; ans = ( int * ) malloc ( t * sizeof ( int ) ) ; for ( i = 0 ; i < t && t <= 10 ; i ++ ) { count = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; q_sort ( 0 , n - 1 ) ; ans [ i ] = ( n - 1 ) * a [ 0 ] ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , ans [ i ] ) ; } return 0 ; } void q_sort ( int first , int last ) { int pivot , j , temp , i ; if ( first < last ) { pivot = first ; i = first + 1 ; j = last ; while ( i <= j ) { while ( a [ i ] <= a [ pivot ] ) i ++ ; while ( a [ j ] > a [ pivot ] ) j -- ; if ( i < j ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } temp = a [ pivot ] ; a [ pivot ] = a [ j ] ; a [ j ] = temp ; q_sort ( first , j - 1 ) ; q_sort ( j + 1 , last ) ; } }", "label": 3, "id": 24512}
{"input": "int arr [ 100 ] [ 100 ] ; int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int n , r , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = r - 2 ; i >= 0 ; -- i ) for ( j = 0 ; j <= i ; ++ j ) { arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11191}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 23775}
{"input": "int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; long int arr [ n ] , min = 9999999 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; if ( arr [ j ] < min ) { min = arr [ j ] ; } } printf ( \"%ld\n\" , ( ( n - 1 ) * min ) ) ; } return 0 ; }", "label": 1, "id": 8781}
{"input": "static char _rbuf [ 8192 * 8 ] ; static char * _rend = 0 ; static char * _rpos = 0 ; static int _getchar ( ) { int n = read ( 0 , _rbuf , sizeof _rbuf ) ; if ( n <= 0 ) { printf ( \"EOF(%d)\n\" , n ) ; exit ( 1 ) ; } _rend = _rbuf + n ; _rpos = _rbuf + 1 ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < '0' ) { } int n = c - '0' ; while ( ( ( c = mygetchar ( ) ) ) >= '0' ) { n = n * 10 + c - '0' ; } return n ; } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - 1 ; while ( 1 ) { buf [ bn -- ] = '0' + ( n ) ; n = n / 10 ; if ( n == 0 ) break ; } while ( bn < BSIZE - 1 ) putchar ( buf [ ++ bn ] ) ; putchar ( '\n' ) ; } static int dump ( int a [ ] , int n ) { int i = 0 ; printf ( \"line-dump:\" ) ; while ( i < n ) printf ( \"%d \" , a [ i ++ ] ) ; printf ( \"\n\" ) ; } void tria ( int n ) { int a [ n ] ; int b [ n ] ; a [ 0 ] = 0 ; int * cur = b ; int * old = a ; int i = 0 ; while ( i < n ) { cur [ 0 ] = get_i ( ) + old [ 0 ] ; int j = 1 ; while ( j < i ) { cur [ j ] = get_i ( ) + max ( old [ j - 1 ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = get_i ( ) + old [ j - 1 ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } i ++ ; } int mx = 0 ; for ( i = 0 ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; put_i ( mx ) ; } int main ( int ac , char * * av ) { int n = get_i ( ) ; while ( n -- > 0 ) { tria ( get_i ( ) ) ; } return 0 ; }", "label": 1, "id": 13808}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , n , i , j , k ; scanf ( \"%d\" , & k ) ; while ( k -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25132}
{"input": "int triangle [ 100 ] [ 100 ] ; int n ; static int sum ; int fun ( int , int , int ) ; int main ( void ) { int row , col ; int i , j , k ; int t ; int final_sum [ 1000 ] ; scanf ( \"%d\" , & t ) ; if ( t <= 1000 ) { for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; if ( n > 100 ) break ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; } } fun ( 0 , 0 , 0 ) ; final_sum [ k ] = sum ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , final_sum [ i ] ) ; } return 0 ; } int fun ( int row , int col , int temp ) { while ( row != n - 1 || col != n - 1 ) { if ( row < n ) { temp = temp + triangle [ row ] [ col ] ; fun ( row + 1 , col , temp ) ; fun ( row + 1 , col + 1 , temp ) ; } else { if ( sum < temp ) { sum = temp ; return 0 ; } } return 0 ; } }", "label": 2, "id": 24050}
{"input": "int maxcal ( int , int , int , int ) ; int * * val ; int main ( ) { int n , i , j , sum ; scanf ( \"%d\" , & n ) ; val = ( int * * ) malloc ( n * sizeof ( int * ) ) ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { val [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & val [ i ] [ j ] ) ; } sum = val [ 0 ] [ 0 ] ; sum = maxcal ( sum , 1 , 0 , n ) ; printf ( \"%d\" , sum ) ; return 0 ; } int maxcal ( int sum , int i , int j , int n ) { if ( i != n ) { int lval = sum + val [ i ] [ j ] ; int sum1 = maxcal ( lval , i + 1 , j , n ) ; int rval = sum + val [ i ] [ j + 1 ] ; int sum2 = maxcal ( rval , i + 1 , j + 1 , n ) ; if ( sum1 > sum2 ) sum = sum1 ; else sum = sum2 ; } return sum ; }", "label": 2, "id": 4288}
{"input": "void main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int min = 1000 ; if ( a [ i ] < min ) { min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 1, "id": 263}
{"input": "int main ( ) { int t , i , n , a [ 100 ] , min , cos ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; cos = min * ( n - 1 ) ; } printf ( \"%d\" , cos ) ; t -- ; } return 0 ; }", "label": 3, "id": 3135}
{"input": "int findmaxsum ( int triangle [ ] , int parentindex , int size , int level , int step ) { int leftindex = ( level + 1 ) * ( level + 2 ) / 2 + step ; if ( leftindex >= size ) return triangle [ parentindex ] ; int left = findmaxsum ( triangle , leftindex , size , level + 1 , step ) ; int rightindex = leftindex + 1 ; int right = findmaxsum ( triangle , rightindex , size , level + 1 , step + 1 ) ; int max = left > right ? left : right ; return triangle [ parentindex ] + max ; } int main ( ) { int t = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int numoflines , i , size = 0 , * nums ; scanf ( \"%d\" , & numoflines ) ; for ( i = 1 ; i <= numoflines ; i ++ ) { size += i ; } nums = ( int * ) malloc ( size * sizeof ( int ) ) ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & nums [ i ] ) ; } printf ( \"%d\n\" , findmaxsum ( nums , 0 , size , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 23818}
{"input": "int main ( ) { int a , b , r , x , y , lcm ; printf ( \"enter the value of a,b\" ) ; scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; if ( a < b ) { while ( 1 ) { r = b % a ; if ( r == 0 ) { printf ( \"gcd=%d\" , a ) ; lcm = ( x * y ) / a ; printf ( \"lcm=%d\" , lcm ) ; break ; } else { b = a ; a = r ; } } } if ( a > b ) { while ( 1 ) { r = a % b ; if ( r == 0 ) { printf ( \"%d\" , b ) ; lcm = ( x * y ) / b ; printf ( \"lcm=%d\" , lcm ) ; break ; } else { a = b ; b = r ; } } } return 0 ; }", "label": 1, "id": 13261}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { int a , b , i , k ; scanf ( \"\n%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a * b ; i ++ ) { if ( i % a == 0 && i % b == 0 ) break ; } for ( k = a < b ? a : b ; k >= 1 ; k -- ) { if ( a % k == 0 && b % k == 0 ) break ; } printf ( \"%d %d\n\" , k , i ) ; } return 0 ; }", "label": 2, "id": 17014}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2712}
{"input": "int triangle [ 100 ] [ 100 ] ; long int tsum [ 100 ] [ 100 ] ; long int max ( long int a , long int b ) { return a > b ? a : b ; } int main ( void ) { short int t , n , i , j , k ; long int mx ; scanf ( \"%hd\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%hd\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & triangle [ j ] [ k ] ) ; tsum [ 0 ] [ 0 ] = triangle [ 0 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { tsum [ j ] [ 0 ] = tsum [ j - 1 ] [ 0 ] + triangle [ j ] [ 0 ] ; tsum [ j ] [ j ] = tsum [ j - 1 ] [ j - 1 ] + triangle [ j ] [ j ] ; } for ( j = 1 ; j < n ; j ++ ) for ( k = 1 ; k < j ; k ++ ) tsum [ j ] [ k ] = triangle [ j ] [ k ] + max ( tsum [ j - 1 ] [ k - 1 ] , tsum [ j - 1 ] [ k ] ) ; mx = - 1 ; for ( j = 0 ; j < n ; j ++ ) if ( mx < tsum [ n - 1 ] [ j ] ) mx = tsum [ n - 1 ] [ j ] ; printf ( \"%ld\n\" , mx ) ; } return 0 ; }", "label": 0, "id": 20117}
{"input": "int main ( ) { int t , l , arr [ 1000 ] [ 1000 ] = { 0 } , i , sum [ 1000 ] = { 0 } , j , k ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = l - 1 ; i >= 0 ; i -- ) { sum [ i ] = 0 ; j = l - 1 ; k = i ; sum [ i ] += arr [ j ] [ k ] ; while ( j >= 0 ) { if ( arr [ j - 1 ] [ k ] > arr [ j - 1 ] [ k - 1 ] ) sum [ i ] += arr [ j - 1 ] [ k ] ; else { sum [ i ] += arr [ j - 1 ] [ k - 1 ] ; k = k - 1 ; } j -- ; } } int max = sum [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"\n%d\" , max ) ; t -- ; } return 0 ; }", "label": 1, "id": 3087}
{"input": "int hcf ( int n1 , int n2 ) { if ( n2 != 0 ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int T , A , B ; scanf ( \"%d\" , & T ) ; while ( T ) { scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; printf ( \"%d %d\n\" , hcf ( A , B ) , ( A * B ) / hcf ( A , B ) ) ; T -- ; } return 0 ; }", "label": 1, "id": 14942}
{"input": "int gcd ( long int , long int ) ; void main ( ) { int n , i , g , l ; long int x , y ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%li%li\" , & x , & y ) ; g = gcd ( x , y ) ; l = ( ( x * y ) / g ) ; printf ( \"%d %d\" , g , l ) ; } } int gcd ( long int m , long int n ) { if ( n == 0 ) return m ; else return gcd ( n , m % n ) ; }", "label": 1, "id": 16242}
{"input": "int getint ( ) { register int ans = 0 ; register char ch = getchar ( ) ; while ( ch < '0' || ch > '9' ) ch = getchar ( ) ; while ( ch >= '0' && ch <= '9' ) { ans = ans * 10 + ch - '0' ; ch = getchar ( ) ; } return ans ; } int t [ 100 ] [ 100 ] , storesum [ 100 ] [ 100 ] , r ; int Max ( int a , int b ) { if ( a <= b ) return b ; else return a ; } int compute ( int x , int y ) { if ( x == r || y == r ) return 0 ; if ( storesum [ x ] [ y ] == - 1 ) storesum [ x ] [ y ] = t [ x ] [ y ] + Max ( compute ( x + 1 , y ) , compute ( x + 1 , y + 1 ) ) ; return storesum [ x ] [ y ] ; } int main ( ) { register int n , i , j ; n = getint ( ) ; while ( n -- ) { r = getint ( ) ; for ( i = 0 ; i < r ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) storesum [ i ] [ j ] = - 1 ; for ( i = 0 ; i < r ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) t [ i ] [ j ] = getint ( ) ; printf ( \"%d\n\" , compute ( 0 , 0 ) ) ; } return 0 ; }", "label": 0, "id": 22436}
{"input": "int main ( ) { long T , i , A , B , gcd , lcm ; scanf ( \"%ld\" , & T ) ; while ( T != 0 ) { scanf ( \"%ld%ld\" , & A , & B ) ; for ( i = 1 ; i <= B ; i ++ ) { if ( A % i == 0 && B % i == 0 ) { gcd = i ; } } lcm = ( B * A ) / gcd ; printf ( \"%ld\\t%ld\n\" , gcd , lcm ) ; T -- ; } return 0 ; }", "label": 2, "id": 13547}
{"input": "int main ( ) { int t , i , a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; int n = a , m = b ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; } lcm = ( n * m ) / gcd ; } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 12543}
{"input": "int n , i , j , k , l , T , n , a , b , c ; int main ( ) { scanf ( \"%d\" , & T ) ; long long unsigned int M [ T ] [ 2 ] ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; c = b ; while ( a % c != 0 || b % c != 0 ) { while ( a % c != 0 ) { c = a % c ; } while ( b % c != 0 ) { c = b % c ; } } M [ i ] [ 0 ] = c ; M [ i ] [ 1 ] = ( a / c ) * b ; } for ( l = 0 ; l < T ; l ++ ) { printf ( \"%llu %llu\n\" , M [ l ] [ 0 ] , M [ l ] [ 1 ] ) ; } }", "label": 1, "id": 3680}
{"input": "int main ( void ) { int i , j , a , b , c , n ; long long d ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a < b ) { for ( i = 1 ; i < a ; i ++ ) if ( a % i == 0 ) if ( b % i == 0 ) c = i ; } else if ( b < a ) { for ( i = 1 ; i < b ; i ++ ) if ( b % i == 0 ) if ( a % i == 0 ) c = i ; } d = a * b ; printf ( \"%d %d\" , c , d ) ; } return 0 ; }", "label": 1, "id": 24003}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int num1 , gcd , lcm , num2 , i , great ; scanf ( \"%d%d\" , & num1 , & num2 ) ; for ( i = 1 ; i < num1 && i < num2 ; i ++ ) { if ( num1 % i == 0 && num2 % i == 0 ) { gcd = i ; break ; } } lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 2773}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , x , y , r , gcd , lcm ; scanf ( \"%ld%ld\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { r = x % y ; x = y ; y = r ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%ld\\t%ld\n\" , gcd , lcm ) ; } }", "label": 0, "id": 17466}
{"input": "int main ( ) { long long int cost ; long int temp ; int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & arr [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n && arr [ j ] > arr [ j + 1 ] ) { temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } } cost = arr [ 0 ] * ( n - 1 ) ; printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 5159}
{"input": "int main ( void ) { long int T , i , a , b , LCM , t ; scanf ( \"%ld\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; t = a ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%ld\" , a ) ; LCM = ( t * b ) / a ; printf ( \"%ld\" , LCM ) ; } return 0 ; }", "label": 1, "id": 4481}
{"input": "main ( ) { int n , t , m , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) m = a [ i + 1 ] [ j ] ; else m = a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = a [ i ] [ j ] + m ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 2730}
{"input": "int main ( ) { int t , count , n , i , k , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { count = 0 ; scanf ( \"%d\" , & n ) ; long a [ n ] ; for ( k = 0 ; k < n ; k ++ ) scanf ( \"%ld\" , & a [ k ] ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { if ( a [ k ] < a [ k - 1 ] ) { if ( k != j + 1 ) count += 1 ; break ; } if ( a [ k ] == a [ k - 1 ] && k != j + 1 ) { count += 1 ; break ; } if ( ( k == n - 1 ) && ( a [ n - 1 ] > a [ n - 2 ] ) ) count += 1 ; } } printf ( \"\n%d\" , count + n ) ; } return 0 ; }", "label": 1, "id": 889}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( \"Enter the numbers:\" ) ; scanf ( \"%d,%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) numerator = num1 ; denominator = num2 ; if ( num1 < num2 ) numerator = num2 ; denominator = num1 ; remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"gcd of %d and %d=%d\n\" , num1 , num2 , gcd ) ; printf ( \"lcm of %d and %d=%d\n\" , num1 , num2 , lcm ) ; }", "label": 1, "id": 21250}
{"input": "int main ( ) { long long int n , i , a [ 100 ] , count1 = 0 , b [ 1005 ] = { 0 } , count = 0 , j = 1 , test ; scanf ( \"%lld\" , & test ) ; while ( test -- ) { count = 0 ; count1 = 0 ; j = 1 ; for ( i = 1 ; i <= 1005 ; i ++ ) b [ i ] = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i + 1 ] >= a [ i ] ) count1 ++ ; else if ( a [ i + 1 ] < a [ i ] ) { b [ j ] = count1 + 1 ; count1 = 0 ; j ++ ; } } b [ j ] = 1 ; for ( i = 1 ; i <= 1005 ; i ++ ) if ( b [ i ] > 0 ) count ++ ; if ( n != 1 ) printf ( \"%lld\n\" , count + n ) ; else printf ( \"%lld\n\" , n ) ; } return 0 ; }", "label": 3, "id": 4274}
{"input": "int main ( ) { int t , n , i , j , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; int arr [ r ] [ r ] ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = r - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17904}
{"input": "int main ( ) { int arr [ 1000 ] , t , n , s , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } s = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { s = s + arr [ i + 1 ] ; } else { s = s + arr [ i ] ; } } printf ( \"%d\n\" , s ) ; } }", "label": 3, "id": 2095}
{"input": "int main ( ) { int t ; long a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; long dividend = a >= b ? a : b ; long divisor = a <= b ? a : b ; long r = 10000 ; while ( r > 0 ) { r = dividend % divisor ; dividend = divisor ; divisor = r ; } long gcd = dividend ; long p = a * b ; long lcm = p / gcd ; printf ( \"%ld %ld \n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 26045}
{"input": "int main ( ) { int i , j , T , max , N ; int A [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; scanf ( \"%d\" , & A [ 0 ] [ 0 ] ) ; sum [ 0 ] [ 0 ] = A [ 0 ] [ 0 ] ; max = sum [ 0 ] [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; if ( j == 0 ) sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + A [ i ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + A [ i ] [ j ] ; else { if ( sum [ i - 1 ] [ j ] > sum [ i - 1 ] [ j - 1 ] ) sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + A [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + A [ i ] [ j ] ; } if ( sum [ i ] [ j ] > max ) max = sum [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 26515}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return ( b ) ; else gcd ( b , a % b ) ; } int main ( ) { int n , a , b , s , t ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; s = gcd ( a , b ) ; if ( a > b ) { if ( a % b == 0 ) t = a ; else t = a * b ; } else { if ( b % a == 0 ) t = b ; else t = a * b ; } printf ( \"%d %d\n\" , s , t ) ; } return 0 ; }", "label": 1, "id": 2361}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a [ 100000 ] ; long long int i , n , count = 0 , n1 = 1 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) n1 ++ ; else { count += ( n1 * ( n1 - 1 ) ) / 2 ; n1 = 1 ; } } count += ( n1 * ( n1 - 1 ) ) / 2 ; printf ( \"%lld\n\" , count + n ) ; } return 0 ; }", "label": 0, "id": 26700}
{"input": "int main ( ) { int noOfLines , noOfTriangles , i , j , previousIndex = 0 , sum = 0 , max = 0 , count = 0 ; int * * base ; scanf ( \"%d\" , & noOfTriangles ) ; while ( noOfTriangles -- ) { sum = previousIndex = max = count = 0 ; scanf ( \"%d\" , & noOfLines ) ; base = ( int * * ) malloc ( sizeof ( int ) * noOfLines ) ; for ( i = 0 ; i < noOfLines ; i ++ ) { base [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; count = 0 ; for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & base [ i ] [ j ] ) ; if ( j == previousIndex && count < 1 ) { max = base [ i ] [ j ] ; count ++ ; } else if ( j == previousIndex + 1 && count < 2 ) { if ( max < base [ i ] [ j ] ) { max = base [ i ] [ j ] ; previousIndex = j ; } count ++ ; } } sum = sum + max ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 17190}
{"input": "int main ( ) { long int g , t , a , b , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a / 2 ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = i ; } } printf ( \"%d %d\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 2, "id": 25466}
{"input": "int main ( ) { int a , b , i , j , T ; scanf ( \"%d\" , & T ) ; long int * k = ( long int * ) malloc ( T * sizeof ( int ) ) ; long int * l = ( long int * ) malloc ( T * sizeof ( int ) ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; int x = a , y = b ; while ( b != 0 ) { j = b ; b = a % b ; a = j ; } k [ i - 1 ] = a ; l [ i - 1 ] = x * y / k [ i - 1 ] ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%ld %ld\n\" , k [ i ] , l [ i ] ) ; return 0 ; }", "label": 1, "id": 7280}
{"input": "int main ( ) { int * a , t , n , count , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int count = 0 ; scanf ( \"%d\" , & n ) ; a = malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) if ( a [ j ] > a [ j - 1 ] ) count ++ ; else break ; count ++ ; } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 0, "id": 3286}
{"input": "int main ( void ) { int a , b , d , l , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; d = gcd ( a , b ) ; printf ( \"%d\\t\" , d ) ; l = ( a * b ) / d ; printf ( \"%d\n\" , l ) ; } } int gcd ( int a , int b ) { int c ; while ( b != 0 ) { c = a % b ; a = b ; b = c ; } return ( a ) ; }", "label": 1, "id": 21962}
{"input": "int main ( ) { int i , t ; long long n1 , n2 , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%lld\\t%lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 674}
{"input": "int gcd ( int a , int b ) { if ( a > b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } else { if ( b % a == 0 ) return a ; else return gcd ( a , b % a ) ; } } int main ( ) { int t , a , b , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%d %lld\n\" , g , ( long long ) a * b / g ) ; } return 0 ; }", "label": 0, "id": 23907}
{"input": "int main ( void ) { int T , N , i , j , m = 0 ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\n\" , & T ) ; while ( T -- ) { scanf ( \"%d\n\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < N ; j ++ ) { a [ i ] [ j ] = 0 ; } } i = 1 ; j = 1 ; while ( i <= N ) { j = 1 ; while ( j <= i ) { scanf ( \"%d \" , & m ) ; a [ i - 1 ] [ j - 1 ] = m ; j ++ ; } scanf ( \"\n\" ) ; i ++ ; } for ( i = N - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7021}
{"input": "int main ( ) { int t ; long int i ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; long int s = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( a [ i ] < s ) s = a [ i ] ; printf ( \"%lu\n\" , s * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 18217}
{"input": "int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a , j , b , lcm = 0 , gcd = 1 ; scanf ( \"%d %d\" , & a , & b ) ; int x = a ; if ( b > a ) x = b ; for ( j = 1 ; j < x ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 15508}
{"input": "int optimal ( int a [ ] [ 100 ] , int , int , int ) ; int main ( ) { int a [ 100 ] [ 100 ] , r , sum , i , j , noc ; scanf ( \"%d\" , & noc ) ; while ( noc ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = optimal ( a , 0 , 0 , r ) ; printf ( \"%d\n\" , sum ) ; noc -- ; } return 0 ; } int optimal ( int a [ ] [ 100 ] , int row , int col , int r ) { if ( row == r ) return a [ row ] [ col ] ; if ( optimal ( a , row + 1 , col , r ) > optimal ( a , row + 1 , col + 1 , r ) ) return ( a [ row ] [ col ] + optimal ( a , row + 1 , col , r ) ) ; else return ( a [ row ] [ col ] + optimal ( a , row + 1 , col + 1 , r ) ) ; }", "label": 2, "id": 6491}
{"input": "int num_lines ; int max ( int a , int b ) { return a >= b ? a : b ; } int find_sum ( int arr [ ] [ num_lines ] , int num_lines ) { int trav1 ; int trav2 ; for ( trav1 = 1 ; trav1 < num_lines ; trav1 ++ ) { arr [ trav1 ] [ 0 ] += arr [ trav1 - 1 ] [ 0 ] ; arr [ trav1 ] [ trav1 ] = arr [ trav1 - 1 ] [ trav1 - 1 ] ; } for ( trav1 = 1 ; trav1 < num_lines ; trav1 ++ ) { for ( trav2 = 1 ; trav2 < trav1 ; trav2 ++ ) { arr [ trav1 ] [ trav2 ] += max ( arr [ trav1 - 1 ] [ trav2 ] , arr [ trav1 - 1 ] [ trav2 - 1 ] ) ; } } int max = 0 ; for ( trav1 = 0 ; trav1 < num_lines ; trav1 ++ ) { if ( arr [ num_lines - 1 ] [ trav1 ] > max ) max = arr [ num_lines - 1 ] [ trav1 ] ; } return max ; } void main ( ) { int num_test ; scanf ( \"%d\" , & num_test ) ; int trav ; int line ; int data ; for ( trav = 0 ; trav < num_test ; trav ++ ) { scanf ( \"%d\" , & num_lines ) ; int tot = ( num_lines * ( num_lines - 1 ) ) ; int trav1 ; int tt ; int res [ num_lines ] [ num_lines ] ; for ( line = 0 ; line < num_lines ; line ++ ) { for ( trav1 = 0 ; trav1 <= line ; trav1 ++ ) { scanf ( \"%d\" , & tt ) ; res [ line ] [ trav1 ] = tt ; } } int result = find_sum ( res , num_lines ) ; printf ( \"%d \n\" , result ) ; } }", "label": 1, "id": 26394}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26413}
{"input": "int maxCal ( int * , int , int , int ) ; int main ( ) { int a [ 200 ] ; int n , i = 0 , row , j = 0 , tot = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & row ) ; tot = row * ( row + 1 ) / 2 ; for ( j = 0 ; j < tot ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } printf ( \"%d\" , maxCal ( a , row , 0 , 0 ) ) ; } return 0 ; } int maxCal ( int * a , int n , int pl , int st ) { int nl = pl + 1 , sum = 0 , sum1 = 0 , temp = 0 ; if ( pl == n - 1 ) return a [ st ] ; st = nl + st ; temp = st + nl ; sum1 = a [ st ] + maxCal ( a , n , nl , temp ) ; sum = a [ st ] + maxCal ( a , n , nl , temp + 1 ) ; if ( sum > sum1 ) return sum ; return sum1 ; }", "label": 3, "id": 23520}
{"input": "int maxi ( int a , int b ) { return a < b ? b : a ; } int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( \"%d\" , & n ) ; int vec1 [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & vec1 [ i ] [ j ] ) ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j ] + vec1 [ i ] [ j ] ; } else if ( j == i ) { vec1 [ i ] [ i ] = vec1 [ i - 1 ] [ j - 1 ] + vec1 [ i ] [ j ] ; } else if ( vec1 [ i - 1 ] [ j ] > vec1 [ i - 1 ] [ j - 1 ] ) { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j ] + vec1 [ i ] [ j ] ; } else { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j - 1 ] + vec1 [ i ] [ j ] ; } } } max = vec1 [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( vec1 [ n - 1 ] [ i ] > max ) max = vec1 [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 398}
{"input": "int main ( ) { int n , l , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & l ) ; int a [ l ] [ l ] ; for ( i = 0 ; i <= l - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = l - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19030}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , m , n , o ; scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; o = m ; m = n ; n = o ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 25485}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , x , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = gcd ( a , b ) ; printf ( \"%d %d\n\" , x , ( a * b ) / x ) ; } return 0 ; }", "label": 1, "id": 12019}
{"input": "int main ( ) { int t , n , k , i , a [ 10000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { k = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) k = k + a [ i ] ; else k = k + a [ i + 1 ] ; } printf ( \"%d\n\" , k ) ; } return 0 ; }", "label": 3, "id": 26512}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 21699}
{"input": "void main ( ) { int t , a , b , gcd , lcm ; scanf ( \"%d\n\" , & t ) ; scanf ( \"%d %d\" , & a , & b ) ; while ( t -- ) { gcd = a % b ; while ( gcd > 0 ) { a = b ; b = gcd ; gcd = a % b ; } printf ( \"%d\n\" , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d\n\" , lcm ) ; } }", "label": 3, "id": 22009}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , sum , i , j ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 24878}
{"input": "int main ( ) { int a , b , H , L , n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; H = GCD ( a , b ) ; printf ( \"%d  \" , H ) ; L = ( a * b ) / H ; printf ( \"%d\n\" , L ) ; } return 0 ; } int GCD ( int a , int b ) { if ( a == b ) return a ; if ( a % b == 0 ) return b ; if ( b % a == 0 ) return a ; if ( a > b ) return ( GCD ( a % b , b ) ) ; else return ( GCD ( a , b % a ) ) ; }", "label": 1, "id": 6958}
{"input": "main ( ) { int t , i , a , b , x , y ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } printf ( \"%d \" , y ) ; x = a ; y = b ; while ( x != y ) { if ( x < y ) x = x + a ; else y = y + b ; } printf ( \"%d\n\" , y ) ; } }", "label": 2, "id": 5978}
{"input": "int main ( ) { int a [ 100 ] , b [ 100 ] , i , j , n , t , s , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] ) ; if ( n == 1 ) { sum = a [ 0 ] ; printf ( \"%d\n\" , sum ) ; } for ( i = 1 , sum = 0 ; i < n ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) scanf ( \"%d\" , & b [ j ] ) ; for ( j = 0 ; j < i ; ++ j ) { s = a [ j ] + b [ j ] + b [ j + 1 ] ; if ( s > sum ) sum = s ; } for ( j = 0 ; j <= i ; ++ j ) a [ j ] = b [ j ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 18958}
{"input": "int main ( ) { int t , i , max ; int size , rows , cnt , j , k ; int * arr ; char str [ 200 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & rows ) ; size = ( ( rows * ( rows + 1 ) ) / 2 ) ; arr = ( int * ) malloc ( size * sizeof ( int ) ) ; cnt = 0 ; for ( j = 0 ; j <= rows ; j ++ ) { gets ( str ) ; char * split = strtok ( str , \" \" ) ; while ( split != NULL ) { arr [ cnt ++ ] = atoi ( split ) ; split = strtok ( NULL , \" \" ) ; } } int index , prv_index ; for ( k = 2 ; k <= rows ; k ++ ) { index = ( k * ( k - 1 ) / 2 ) ; prv_index = index - ( k - 1 ) ; for ( j = 0 ; j < k ; j ++ ) { if ( ( index + j - ( k - 1 ) - 1 ) < prv_index ) arr [ index + j ] += arr [ index + j - ( k - 1 ) ] ; else if ( ( index + j - ( k - 1 ) ) >= index ) arr [ index + j ] += arr [ index + j - ( k - 1 ) - 1 ] ; else { int temp1 = arr [ index + j - ( k - 1 ) ] > arr [ index + j - ( k - 1 ) - 1 ] ? arr [ index + j - ( k - 1 ) ] : arr [ index + j - ( k - 1 ) - 1 ] ; arr [ index + j ] += temp1 ; } } } max = arr [ index ] ; for ( j = index + 1 ; j < cnt ; j ++ ) { max = ( max > arr [ j ] ) ? max : arr [ j ] ; } printf ( \"%d\n\" , max ) ; free ( arr ) ; } return 0 ; }", "label": 3, "id": 5927}
{"input": "int main ( ) { int test_cases ; long int n , * a , * b , smaller ; long long int sum ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%ld\" , & n ) ; a = ( long int * ) malloc ( n * sizeof ( long int ) ) ; for ( b = a ; b < ( a + n ) ; b ++ ) scanf ( \"%ld\" , b ) ; sum = 0 ; b = a ; do { if ( * b <= * ( b + 1 ) ) smaller = * b ; if ( * ( b + 1 ) <= * b ) smaller = * ( b + 1 ) ; sum += smaller ; b ++ ; * b = smaller ; } while ( b < ( a + n - 1 ) ) ; printf ( \"%lld\n\" , sum ) ; } return ( 0 ) ; }", "label": 1, "id": 7211}
{"input": "int temp = 0 ; void recursion ( int * arr , int n , int s , int count ) { if ( count == n - 1 ) { if ( s > temp ) { temp = s ; } } else { s = s + * arr ; recursion ( arr + n , n , s , count + 1 ) ; recursion ( arr + n + 1 , n , s , count + 1 ) ; } } void main ( ) { int n , i , j , s = 0 , count = - 1 , m ; scanf ( \"%d\" , & m ) ; while ( m -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; recursion ( & arr [ 0 ] [ 0 ] , n , s , count ) ; printf ( \"%d\n\" , temp ) ; } }", "label": 2, "id": 68}
{"input": "int main ( ) { int t ; long long int n ; long long int a [ 00000 ] , i , j , k = 0 , count = 0 ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; count = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; ) { k ++ ; count ++ ; for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) count ++ ; else { break ; } i ++ ; } i = k ; } printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 3, "id": 19681}
{"input": "int sum , max , lind , rind ; void input ( ) { int n , a [ 100 ] [ 100 ] , j , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = 0 ; max = 0 ; lind = 0 ; rind = 0 ; func ( sum , n , a , lind , rind ) ; printf ( \"%d\n\" , max ) ; } void func ( int sum , int n , int a [ ] [ 100 ] , int lind , int rind ) { if ( lind >= n ) return ; if ( lind < rind ) return ; sum = sum + a [ lind ] [ rind ] ; if ( sum > max ) max = sum ; func ( sum , n , a , lind + 1 , rind ) ; if ( lind == 0 ) return ; sum = sum - a [ lind ] [ rind ] + a [ lind ] [ rind + 1 ] ; if ( sum > max ) max = sum ; rind ++ ; func ( sum , n , a , lind + 1 , rind ) ; } int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { input ( ) ; } return 0 ; }", "label": 2, "id": 16746}
{"input": "int main ( ) { int i , j , T , arr [ 100 ] [ 100 ] , N ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = N - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16880}
{"input": "int main ( ) { int t , n , i , j , k , count = 0 ; long long int a [ 100000 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { if ( a [ k - 1 ] > a [ k ] ) break ; count += 1 ; } } printf ( \"%d\n\" , count + n ) ; } return 0 ; }", "label": 1, "id": 17516}
{"input": "int a [ 100 ] [ 100 ] , s [ 100 ] [ 100 ] , n ; int sum ( int i , int j ) { int temp ; if ( i < n ) { if ( s [ i ] [ j ] == - 1 ) { temp = ( sum ( i + 1 , j ) > sum ( i + 1 , j + 1 ) ? sum ( i + 1 , j ) : sum ( i + 1 , j + 1 ) ) ; s [ i ] [ j ] = temp + a [ i ] [ j ] ; } return s [ i ] [ j ] ; } return 0 ; } int main ( ) { int i , j , t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { i = 0 ; scanf ( \"%d\" , & n ) ; while ( i < n ) { j = 0 ; while ( j <= i ) { s [ i ] [ j ] = - 1 ; scanf ( \"%d\" , & a [ i ] [ j ] ) ; j ++ ; } i ++ ; } printf ( \"\n%d\" , sum ( 0 , 0 ) ) ; } return 0 ; }", "label": 0, "id": 2533}
{"input": "int main ( ) { int i , j , t , l , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & l ) ; int a [ l ] [ l ] ; for ( i = 0 ; i < l ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else if ( i == j ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else { if ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } if ( a [ i ] [ j ] > sum ) sum = a [ i ] [ j ] ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 10111}
{"input": "int main ( void ) { int t , n , a [ 50000 ] , i , j , out [ 10 ] = { 0 } , k , min ; si ( t ) ; for ( i = 0 ; i < t ; i ++ ) { si ( n ) ; for ( j = 0 ; j < n ; j ++ ) si ( a [ j ] ) ; while ( n != 1 ) { min = 0 ; for ( j = 1 ; j < n ; j ++ ) if ( a [ j ] < a [ min ] ) min = j ; out [ i ] += a [ min ] ; if ( min != n - 1 || min != 0 ) if ( a [ min - 1 ] >= a [ min + 1 ] ) n = deletion ( a , n , ( min - 1 ) ) ; else n = deletion ( a , n , ( min + 1 ) ) ; else if ( min == 0 ) n = deletion ( a , n , 1 ) ; else n = deletion ( a , n , ( n - 2 ) ) ; } } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , out [ i ] ) ; } int deletion ( int a [ ] , int n , int pos ) { int i ; for ( i = pos ; i < n - 1 ; i ++ ) { a [ i ] = a [ i + 1 ] ; } n -- ; return n ; }", "label": 2, "id": 6282}
{"input": "int func ( int ( * arr ) [ 100 ] , int n , int i , int max ) { int j , m , a , b , c ; if ( i == 0 ) return max ; else { for ( j = 0 ; j <= i ; j ++ ) { a = * ( * ( arr + i ) + j ) ; b = * ( * ( arr + ( i - 1 ) ) + j ) ; if ( j > 0 ) { c = * ( * ( arr + ( i - 1 ) ) + ( j - 1 ) ) ; if ( ( ( a + b ) >= ( a + c ) ) && ( ( a + b ) >= max ) ) { max = ( a + b ) ; m = j ; } if ( ( ( a + c ) > ( a + b ) ) && ( ( a + c ) > max ) && ( j > 0 ) ) { max = ( a + c ) ; m = j - 1 ; } } else { if ( ( a + b ) > max ) { max = ( a + b ) ; m = j ; } } } * ( * ( arr + ( i - 1 ) ) + m ) = max ; func ( arr , n , i - 1 , max ) ; } } int main ( ) { int n , array [ 100 ] [ 100 ] , i , j , t , z ; scanf ( \"%d\" , & t ) ; for ( z = 0 ; z < t ; z ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & array [ i ] [ j ] ) ; } if ( n == 1 ) printf ( \"%d\n\" , array [ 0 ] [ 0 ] ) ; else printf ( \"%d\n\" , func ( array , n , n - 1 , 0 ) ) ; } return 0 ; }", "label": 3, "id": 26043}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int n , i , j , c = 0 , d = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\n\" , solve ( c , d , n ) ) ; } int solve ( int i , int j , int n ) { int t1 , t2 , t ; if ( i >= n ) return 0 ; t1 = solve ( i + 1 , j , n ) ; t2 = solve ( i + 1 , j + 1 , n ) ; t = t1 > t2 ? ( t1 + a [ i ] [ j ] ) : ( t2 + a [ i ] [ j ] ) ; return t ; }", "label": 3, "id": 209}
{"input": "int main ( ) { long int a , b , x , i , j , k , gcd , lcm ; scanf ( \"%d\" , & i ) ; while ( i -- ) { scanf ( \"%d %d\" , & a , & b ) ; j = a ; k = b ; while ( b != 0 ) { x = b ; b = a % b ; a = x ; } gcd = a ; lcm = ( j * k ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 6229}
{"input": "int MAX ; struct node * last_node ; struct node { int data ; int index ; struct node * next ; struct node * prev ; } ; struct node * head ; void addnode ( int data ) { struct node * h1 , * temp ; h1 = head ; temp = malloc ( sizeof ( struct node ) ) ; temp -> next = NULL ; temp -> prev = NULL ; if ( h1 == NULL ) { head = temp ; temp -> data = data ; temp -> index = 1 ; } else { h1 = last_node ; h1 -> next = temp ; temp -> data = data ; temp -> index = ( last_node -> index ) + 1 ; temp -> prev = h1 ; } last_node = temp ; } void create ( int height ) { int i , j , data ; head = NULL ; for ( i = 0 ; i < height ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & data ) ; addnode ( data ) ; if ( j != 0 && j != i ) { addnode ( data ) ; } } printf ( \"\n\" ) ; } } int left ( int index ) { return ( 2 * index ) ; } int right ( int index ) { return ( 2 * index + 1 ) ; } void traverse ( struct node * current , int total ) { int l_cur_in , r_cur_in ; struct node * left_n , * right_n ; struct node * h1 ; h1 = head ; l_cur_in = left ( current -> index ) ; r_cur_in = right ( current -> index ) ; while ( h1 != NULL && h1 -> index != l_cur_in ) h1 = h1 -> next ; left_n = h1 ; h1 = head ; while ( h1 != NULL && h1 -> index != r_cur_in ) h1 = h1 -> next ; right_n = h1 ; h1 = head ; total += current -> data ; if ( left_n != NULL ) traverse ( left_n , total ) ; else if ( total > MAX ) MAX = total ; if ( right_n != NULL ) traverse ( right_n , total ) ; } int main ( ) { int loop , height ; scanf ( \"%d\" , & loop ) ; if ( loop >= 100 || loop <= 0 ) return 0 ; while ( loop != 0 ) { MAX = 0 ; scanf ( \"%d\" , & height ) ; if ( height >= 100 || height <= 0 ) return 0 ; create ( height ) ; traverse ( head , 0 ) ; printf ( \"%d\n\" , MAX ) ; loop -- ; } return 0 ; }", "label": 1, "id": 11316}
{"input": "main ( ) { int * y , c , i , j , k , l , m , n , o , t [ 99 ] [ 99 ] ; char * x = \"%d\" ; scanf ( x , & c ) ; for ( ; c > 0 ; c -- ) { scanf ( x , & n ) ; for ( j = 0 ; j < n ; j ++ ) { o = 0 ; y = & t [ j - 1 ] ; for ( k = 0 ; k <= j ; ) { scanf ( x , & m ) ; i = k > 0 ? k < j ? y [ k ] : 0 : j > 0 ? * y : 0 ; l = k > 0 ? y [ k - 1 ] : 0 ; m += i > l ? i : l ; o = o > m ? o : m ; t [ j ] [ k ++ ] = m ; } } printf ( x , o ) ; c > 1 ? printf ( \"\n\" ) : 0 ; } }", "label": 3, "id": 9289}
{"input": "int main ( ) { int s , i , j , n , b ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( b = 0 ; b < n ; b ++ ) { scanf ( \"%d\" , & s ) ; for ( i = 0 ; i < s ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = s - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19554}
{"input": "int main ( ) { int t , n , i , c ; int b [ 10 ^ 5 ] , a [ 10 ^ 5 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; b [ 0 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) b [ i ] = b [ i - 1 ] + 1 ; else b [ i ] = 1 ; } for ( i = 0 ; i < n ; i ++ ) c += b [ i ] ; printf ( \"\n%d\" , c ) ; } return 0 ; }", "label": 3, "id": 3908}
{"input": "long int gcd ( long int a , long int b ) ; long int lcm ( long int a , long int b ) ; long int gcd ( long int a , long int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { long int a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; printf ( \"%ld %ld\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 0, "id": 7755}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , b = 100000 , i ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; b = b > a [ i ] ? a [ i ] : b ; } b = b * ( n - 1 ) ; printf ( \"%ld\n\" , b ) ; } }", "label": 0, "id": 12703}
{"input": "int max ( int x , int y ) { return x >= y ? x : y ; } int main ( ) { int t ; int curr [ MAX ] = { 0 } ; int next [ MAX ] = { 0 } ; int n ; int i , j , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & next [ j ] ) ; for ( j = i ; j >= 1 ; j -- ) curr [ j ] = next [ j ] + max ( curr [ j ] , curr [ j - 1 ] ) ; curr [ 0 ] += next [ 0 ] ; } c = 0 ; for ( i = 0 ; i < n ; i ++ ) if ( curr [ c ] < curr [ i ] ) c = i ; printf ( \"%d\n\" , curr [ c ] ) ; } return 0 ; }", "label": 1, "id": 9407}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%d\" , & n ) ; long long int a [ n ] , i , min ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( i == 0 ) min = a [ 0 ] ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 23874}
{"input": "int main ( ) { long long int a [ 99999 ] ; int tc ; long long int i , n , num [ 99999 ] ; long int sum = 0 ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { sum = 1 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = 1 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & num [ i ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { if ( num [ i ] <= num [ i + 1 ] ) { a [ i ] += a [ i + 1 ] ; sum += a [ i ] ; } } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 6930}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int n , i , j ; long long int ko = 0 ; int a [ 50001 ] ; int min = 1000000 ; ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } ko = 0 ; for ( i = 0 ; i < ( n - 1 ) ; i ++ ) ko += min ; printf ( \"%lld\n\" , ko ) ; } return 0 ; }", "label": 1, "id": 16052}
{"input": "int main ( ) { unsigned int t , a [ 10000 ] , n , min , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 18245}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; return 0 ; }", "label": 1, "id": 26389}
{"input": "int grid [ 102 ] [ 102 ] ; void solve ( int n ) { int i , j ; for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( ( grid [ i ] [ j ] + grid [ i + 1 ] [ j ] ) > grid [ i ] [ j ] + grid [ i + 1 ] [ j + 1 ] ) grid [ i ] [ j ] += grid [ i + 1 ] [ j ] ; else grid [ i ] [ j ] += grid [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , grid [ 1 ] [ 0 ] ) ; } int main ( ) { int tc , n , i , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) scanf ( \"%d\" , & grid [ i ] [ j ] ) ; solve ( n ) ; } return 0 ; }", "label": 0, "id": 10144}
{"input": "int pop1 ( ) ; int pop2 ( ) ; int pop3 ( ) ; void push ( int , int , int ) ; int stack1 [ 100 ] ; int stack2 [ 100 ] , stack3 [ 100 ] ; int top1 = - 1 , top2 = - 1 , top3 = - 1 ; int main ( ) { int t , r , i , j , m , n , s , a [ 100 ] [ 100 ] , x = 0 , sum [ 100 ] , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { x = 0 ; scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } push ( 0 , 0 , 0 ) ; while ( top1 != - 1 && top2 != - 1 && top3 != - 1 ) { m = pop2 ( ) ; n = pop3 ( ) ; s = pop1 ( ) ; s = s + a [ m ] [ n ] ; for ( i = m ; i < r - 1 ; i ++ ) { push ( s , m + 1 , n + 1 ) ; s = s + a [ m + 1 ] [ n ] ; m = m + 1 ; } sum [ x ++ ] = s ; } max = sum [ 0 ] ; for ( i = 0 ; i < x ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; } void push ( int sum , int k , int l ) { if ( top1 == MAX - 1 ) printf ( \"stack overflow\" ) ; else { top1 ++ ; stack1 [ top1 ] = sum ; } if ( top2 == MAX - 1 ) printf ( \"stack overflow\" ) ; else { top2 ++ ; stack2 [ top2 ] = k ; } if ( top3 == MAX - 1 ) printf ( \"stack overflow\" ) ; else { top3 ++ ; stack3 [ top3 ] = l ; } } int pop1 ( ) { if ( top1 == - 1 ) printf ( \"stack underflow\" ) ; else { return ( stack1 [ top1 -- ] ) ; } } int pop2 ( ) { if ( top2 == - 1 ) printf ( \"stack underflow\" ) ; else { return ( stack2 [ top2 -- ] ) ; } } int pop3 ( ) { if ( top3 == - 1 ) printf ( \"stack underflow\" ) ; else { return ( stack3 [ top3 -- ] ) ; } }", "label": 3, "id": 15956}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , t , i , n , j ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\n\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25967}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , a , b , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( \"%d\\t%d\n\" , gcd ( a , b ) , lcm ) ; } } int gcd ( int a , int b ) { if ( b != 0 ) return ( gcd ( b , a % b ) ) ; else return ( 1 ) ; }", "label": 1, "id": 14269}
{"input": "int main ( void ) { long long int t , a , b , gcd , lcm , r , x , y ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; x = a ; y = b ; if ( a < b ) { r = b ; b = a ; a = r ; } r = a % b ; while ( r != 0 ) { a = b ; b = r ; r = a % b ; } printf ( \"%lld %lld\n\" , b , x * y / b ) ; } return 0 ; }", "label": 0, "id": 25790}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; long n , count , j , k ; long long a [ 200000 ] ; for ( i = 0 ; i < t ; i ++ ) { count = 0 ; scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lld\" , & a [ j ] ) ; k = 0 ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ j ] > a [ j - 1 ] ) { count ++ ; count = count + k ; k ++ ; } else k = 0 ; } printf ( \"%ld\n\" , count + n ) ; } return 0 ; }", "label": 0, "id": 23772}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int tc = 0 ; tc < t ; tc ++ ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int c = 0 ; int j ; for ( int i = 0 ; i < n ; i ++ ) { j = i + 1 ; if ( a [ i ] <= a [ j ] ) { c ++ ; while ( a [ j ] <= a [ j + 1 ] && j + 1 < n ) { c ++ ; j ++ ; } } } long long int res = c + n ; printf ( \"%lld\n\" , res ) ; } return 0 ; }", "label": 0, "id": 10256}
{"input": "int main ( void ) { int t , a , b , l , h ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; h = a < b ? a : b ; while ( h -- ) { if ( a % h == 0 && b % h == 0 ) { printf ( \"%d \" , l ) ; break ; } } l = a * b / h ; printf ( \"%d\n\" , l ) ; } return 0 ; }", "label": 1, "id": 9164}
{"input": "int main ( ) { int n , n1 , a [ 10 ] [ 50000 ] , i , j , sum [ 10 ] , min ; for ( i = 0 ; i < 10 ; i ++ ) sum [ i ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & n1 ) ; for ( j = 0 ; j < n1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 1 ; j < n1 ; j ++ ) { if ( a [ i ] [ j ] < min ) { sum [ i ] += a [ i ] [ j ] ; min = a [ i ] [ j ] ; } else sum [ i ] += min ; } } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , sum [ i ] ) ; return 0 ; }", "label": 1, "id": 24490}
{"input": "int main ( ) { int t , a , b , temp , t1 , x , y , lcm , i ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( a % b != 0 ) { t1 = b ; b = a % b ; a = t1 ; } lcm = ( x * y ) / b ; printf ( \"%d %d\n\" , b , lcm ) ; } }", "label": 1, "id": 956}
{"input": "int Gcd ( int a , int b ) { if ( a == 0 ) return b ; else return Gcd ( b % a , a ) ; } int main ( ) { int t , a , b , g ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\n\" , & a , & b ) ; g = Gcd ( a , b ) ; printf ( \"%d %d\n\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 1, "id": 508}
{"input": "int main ( ) { int T , A , B , i , j , LCM , GCD ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%d%d\" , & A , & B ) ; for ( i = A * B , j = 1 ; i > 1 ; j < A * B , i -- , j ++ ) { if ( i % A == 0 && i % B == 0 ) LCM = i ; if ( A % j == 0 && B % j == 0 ) GCD = j ; } printf ( \"%d %d\n\" , GCD , LCM ) ; T -- ; } return 0 ; }", "label": 2, "id": 9907}
{"input": "int main ( ) { int i , j , arr [ 101 ] [ 101 ] , temp , result , cases , lines , value ; scanf ( \"%d\" , & cases ) ; while ( 1 ) { for ( i = 0 ; i < 101 ; i ++ ) for ( j = 0 ; j < 101 ; j ++ ) arr [ i ] [ j ] = 0 ; result = 0 ; scanf ( \"%d\" , & lines ) ; for ( i = 1 ; i <= lines ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & value ) ; arr [ i ] [ j ] = value + arr [ i - 1 ] [ j - 1 ] ; temp = value + arr [ i - 1 ] [ j ] ; if ( temp > arr [ i ] [ j ] ) { arr [ i ] [ j ] = temp ; if ( result < arr [ i ] [ j ] ) result = arr [ i ] [ j ] ; } } } printf ( \"%d\n\" , result ) ; if ( -- cases == 0 ) break ; } return 0 ; }", "label": 1, "id": 7544}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; long int min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%ld\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 5380}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a , b , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = a * b / gcd ; printf ( \"%d  %d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 4408}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long int a , b , x , y , d , e , gcd , lcm ; scanf ( \"\" , & a , & b ) ; x = a ; y = b ; while ( d != 0 ) { e = d ; d = x % y ; x = e ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \" \n\" , gcd , lcm ) ; } }", "label": 1, "id": 26671}
{"input": "int main ( ) { int n , m , i , j , x , y ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = m - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { x = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; y = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( x > y ) a [ i ] [ j ] = x ; else a [ i ] [ j ] = y ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19015}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( ( a / gcd ( a , b ) ) * b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 13824}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] , i , j ; long long int max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { max = 0 ; scanf ( \" %d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \" %d\" , & a [ i ] [ j ] ) ; if ( i > 0 && j == 0 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; if ( i > 0 && j > 0 ) a [ i ] [ j ] += ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ? a [ i - 1 ] [ j ] : a [ i - 1 ] [ j - 1 ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( max < a [ n - 1 ] [ i ] ) max = a [ n - 1 ] [ i ] ; } printf ( \"%lld\n\" , max ) ; } return 0 ; }", "label": 1, "id": 4990}
{"input": "int main ( ) { int A , B , T , C , D , remainder , gcd , lcm , i ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; if ( T < 1 || T > 1000 || A < 1 || A > 1000000 || B < 1 || B > 1000000 ) { break ; } else { if ( A > B ) { C = A ; D = B ; } else { C = B ; D = A ; } remainder = C % D ; while ( remainder != 0 ) { C = D ; D = remainder ; remainder = C % D ; } gcd = D ; lcm = A * B / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } } return 0 ; }", "label": 1, "id": 3890}
{"input": "int main ( ) { int t , c , i , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; long int a [ n ] ; c = n ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) c ++ ; } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 1, "id": 8873}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int maxarr ( int a [ ] , int n ) { if ( n == 1 ) return 0 ; int i , max = 0 ; ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) max = a [ i ] ; } return max ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 2 ; i < n ; i ++ ) { j = 0 ; a [ i ] [ j ] += a [ i - 1 ] [ j ] ; for ( j = 1 ; j < i ; j ++ ) { a [ i ] [ j ] += max ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) ; } j = i ; a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } printf ( \"%d\n\" , maxarr ( a [ n - 1 ] , n ) + a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8484}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int l = 0 , i , j , sol = 0 ; scanf ( \"%d\" , & l ) ; int a [ l ] [ l ] ; for ( i = 0 ; i != l ; i ++ ) { for ( j = 0 ; j != l ; j ++ ) { a [ i ] [ j ] = 0 ; } } scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; for ( i = 1 ; i != l ; i ++ ) { for ( j = 0 ; j != l && j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; int t = a [ i - 1 ] [ j ] ; if ( j - 1 >= 0 ) { int tl = a [ i - 1 ] [ j - 1 ] ; a [ i ] [ j ] += ( tl > t ) ? tl : t ; } else a [ i ] [ j ] += t ; if ( a [ i ] [ j ] > sol ) { sol = a [ i ] [ j ] ; } } } printf ( \"%d\n\" , sol ) ; } return 0 ; }", "label": 0, "id": 23778}
{"input": "int GCDf ( int , int ) ; int main ( ) { int T , A , B , GCD , i ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { GCD = GCDf ( A , B ) ; } else { GCD = GCDf ( B , A ) ; } printf ( \"%d %d\n\" , GCD , ( A * B ) / GCD ) ; } return 0 ; } int GCDf ( int A , int B ) { if ( B == 0 ) return A ; else return GCDf ( B , A % B ) ; }", "label": 1, "id": 20629}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , c , l , i , h ; scanf ( \"%ld %ld\" , & a , & b ) ; c = ( a < b ) ? a : b ; for ( i = 1 ; i <= c ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { h = i ; } } l = ( a * b ) / h ; printf ( \"%ld %ld\n\" , h , l ) ; } return 0 ; }", "label": 2, "id": 17360}
{"input": "int a [ 100 ] [ 100 ] ; int sum , k ; int max ( int a , int c ) { if ( a > c ) return a ; else return c ; } void find_max ( int s , int i , int j , int n ) { if ( i == n - 1 ) { if ( s > sum ) sum = s ; return ; } else { find_max ( s + a [ i + 1 ] [ j ] , i + 1 , j , n ) ; find_max ( s + a [ i + 1 ] [ j + 1 ] , i + 1 , j + 1 , n ) ; } } int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; sum = 0 ; k = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; find_max ( a [ 0 ] [ 0 ] , 0 , 0 , n ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 5089}
{"input": "int s ; long long int checkSum ( long long int n , long long int a [ ] [ n ] ) ; int main ( ) { long long int t , n , ans ; int i , j ; printf ( \"Enter t\n\" ) ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { printf ( \"Enter n\n\" ) ; scanf ( \"%lld\" , & n ) ; s = n ; long long int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } ans = checkSum ( n , a ) ; printf ( \"%lld\" , ans ) ; } return 0 ; } long long int checkSum ( long long int n , long long int a [ s ] [ s ] ) { int i , j ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; return a [ 0 ] [ 0 ] ; }", "label": 1, "id": 26805}
{"input": "int main ( ) { int a [ 100 ] , i , t , n , j , k , min , minp , cost [ 10 ] , rem , l ; for ( i = 0 ; i < 100 ; i ++ ) a [ i ] = '\\0' ; for ( i = 0 ; i < 10 ; i ++ ) cost [ i ] = '\\0' ; entert : scanf ( \"%d\" , & t ) ; if ( ! ( t >= 1 && t <= 10 ) ) { goto entert ; } for ( i = 0 ; i < t ; i ++ ) { entern : scanf ( \"%d\" , & n ) ; if ( ! ( n >= 2 && n <= 100 ) ) { goto entern ; } for ( j = 0 ; j < n ; j ++ ) { entera : scanf ( \"%d\" , & a [ j ] ) ; if ( ! ( a [ j ] >= 1 ) ) { goto entera ; } } for ( l = 1 ; l < n ; l ++ ) { min = a [ 0 ] ; minp = 0 ; for ( k = 1 ; k < n - l + 1 ; k ++ ) if ( a [ k ] < min ) { min = a [ k ] ; minp = k ; } if ( a [ minp + 1 ] < a [ minp - 1 ] ) rem = minp - 1 ; else rem = minp + 1 ; cost [ i ] = cost [ i ] + min ; for ( k = rem ; k < n ; k ++ ) a [ k ] = a [ k + 1 ] ; } a [ 0 ] = '\\0' ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d \n\" , cost [ i ] ) ; return 0 ; }", "label": 1, "id": 24622}
{"input": "int main ( ) { long long int t , n , i , a [ 100000 ] , count [ 100000 ] , total ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; count [ i ] = 1 ; } for ( i = 1 ; i < n ; i ++ ) { ( a [ i ] > a [ i - 1 ] ) ? ( count [ i ] = count [ i - 1 ] + 1 ) : ( count [ i ] = 1 ) ; } total = 0 ; for ( i = 0 ; i < n ; i ++ ) { total = total + count [ i ] ; } printf ( \"%lld\n\" , total ) ; } return 0 ; }", "label": 0, "id": 5185}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int num1 , num2 , x , y , t , gcd , lcm ; scanf ( \"%d %d\" , & num1 , & num2 ) ; x = num1 ; y = num2 ; while ( y != 0 ) { t = y ; y = x % y ; x = t ; } gcd = x ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 292}
{"input": "int main ( void ) { int n , i , n1 , n2 , p , lcm ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; p = gcd ( n1 , n2 ) ; lcm = ( n1 * n2 ) / p ; printf ( \"%d %d\n\" , p , lcm ) ; } return 0 ; } int gcd ( int n , int m ) { if ( m == 0 ) return n ; else return gcd ( m , n % m ) ; }", "label": 1, "id": 12091}
{"input": "int sumrecur ( int * a , int row , int pos , int * cache ) ; int n ; int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ ( n * ( n + 1 ) ) / 2 ] ; int cache [ ( n * ( n + 1 ) ) / 2 ] ; for ( i = 0 ; i < n * ( n + 1 ) / 2 ; i ++ ) cache [ i ] = 0 ; for ( i = 0 ; i < n * ( n + 1 ) / 2 ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } printf ( \"%d\n\" , sumrecur ( a , 0 , 0 , cache ) ) ; } return 0 ; } int sumrecur ( int * a , int row , int pos , int * cache ) { int one , two ; if ( row == n - 1 ) return ( a [ pos ] ) ; else { if ( cache [ pos ] ) return cache [ pos ] ; else { one = sumrecur ( a , row + 1 , pos + row + 1 , cache ) ; two = sumrecur ( a , row + 1 , pos + row + 2 , cache ) ; cache [ pos ] = a [ pos ] + ( ( one > two ) ? one : two ) ; return cache [ pos ] ; } } }", "label": 0, "id": 2208}
{"input": "int main ( ) { int t , i ; long min , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; int a [ n ] ; min = 100001 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , a + i ) ; for ( i = 0 ; i < n ; i ++ ) min = ( a [ i ] < min ) ? a [ i ] : min ; printf ( \"%ld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 18948}
{"input": "long int gcd ( long int a , long int b ) ; int main ( ) { long int k , x , y , t ; scanf ( \"%ld\" , & t ) ; if ( t < 1 || t > 1000 ) return 0 ; while ( t ) { scanf ( \"%ld%ld\" , & x , & y ) ; k = gcd ( x , y ) ; printf ( \"%ld %ld\n\" , k , ( x * y ) / k ) ; t -- ; } } long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; }", "label": 0, "id": 18629}
{"input": "int main ( void ) { int t , i ; int a , g , l , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; i = 1 ; while ( i <= a && i <= b ) { if ( a % i == 0 && b % i == 0 ) g = i ; i = i + 1 ; } l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 26503}
{"input": "int main ( ) { int cf , cf2 , n , i = 0 , * p , x , count = 0 , ch ; scanf ( \"%d\" , & ch ) ; while ( ch != 0 ) { scanf ( \"%d\" , & n ) ; p = ( int * ) malloc ( n * sizeof ( int ) ) ; i = 0 ; while ( i != n ) { scanf ( \"%d\" , & p [ i ] ) ; i ++ ; } cf = n - 1 ; while ( cf != 0 ) { x = 0 ; while ( x < ( n - cf ) ) { i = x ; cf2 = 0 ; while ( i <= ( cf + x - 1 ) ) { if ( p [ i ] <= p [ i + 1 ] ) cf2 ++ ; i ++ ; } if ( cf == cf2 ) count ++ ; x ++ ; } cf -- ; } printf ( \"%d\n\" , ( count + n ) ) ; ch -- ; } return 0 ; }", "label": 2, "id": 1092}
{"input": "int main ( ) { int i , t ; long long int j , n ; long long int pre , in ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { pre = 99999999 ; scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & in ) ; if ( pre > in ) pre = in ; } long long int cost = pre * ( n - 1 ) ; printf ( \"%lli\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 3664}
{"input": "int b [ 100 ] [ 100 ] ; int maxsum ( int size , int keyr , int keyc ) { int sum1 , sum2 ; if ( size == keyr + 1 ) return b [ keyr ] [ keyc ] ; sum1 = b [ keyr ] [ keyc ] ; sum2 = b [ keyr ] [ keyc ] ; sum1 += maxsum ( size , keyr + 1 , keyc ) ; sum2 += maxsum ( size , keyr + 1 , keyc + 1 ) ; if ( sum1 > sum2 ) return sum1 ; else return sum2 ; } int main ( ) { int i , n , j , k , * a , * sum ; scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; sum = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = 0 ; j < 100 ; j ++ ) { for ( k = 0 ; k < 100 ; k ++ ) b [ j ] [ k ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; for ( j = 0 ; j < a [ i ] ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & b [ j ] [ k ] ) ; } sum [ i ] = maxsum ( a [ i ] , 0 , 0 ) ; } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , sum [ i ] ) ; }", "label": 2, "id": 10830}
{"input": "int main ( void ) { int test , a , b , prod ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d %d\" , & a , & b ) ; prod = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; if ( b > a ) b = b - a ; } printf ( \"%d %d\" , a , prod / a ) ; } return 0 ; }", "label": 1, "id": 15711}
{"input": "int main ( ) { int t ; unsigned long int a , b , c , d , r , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lu%lu\" , & a , & b ) ; c = a ; d = b ; while ( ( a % b != 0 ) && ( b != 0 ) ) { r = a % b ; a = b ; b = r ; } g = b ; l = ( c * d ) / g ; printf ( \"%lu %lu\n\" , g , l ) ; g = l = a = b = c = d = r = 0 ; } return 0 ; }", "label": 0, "id": 11198}
{"input": "int * a [ 100 ] ; int mem [ 100 ] [ 100 ] ; int num ; int func ( int i , int j ) { int sum [ 2 ] = { 0 } ; int k , m ; for ( k = j , m = 0 ; k <= j + 1 && k <= i ; k ++ , m ++ ) { if ( mem [ i ] [ j ] != - 1 ) return mem [ i ] [ j ] ; if ( i < num - 1 ) sum [ m ] = a [ i ] [ k ] + func ( i + 1 , k ) ; else sum [ m ] = a [ i ] [ k ] ; } if ( sum [ 0 ] > sum [ 1 ] ) { mem [ i ] [ j ] = sum [ 0 ] ; return sum [ 0 ] ; } else { mem [ i ] [ j ] = sum [ 1 ] ; return sum [ 1 ] ; } } int main ( ) { int i , j ; int t ; scanf ( \"%d\" , & t ) ; int k ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) for ( j = 0 ; j < num ; j ++ ) mem [ i ] [ j ] = - 1 ; for ( i = 0 ; i < num ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"%d\n\" , func ( 0 , 0 ) ) ; } return 0 ; }", "label": 0, "id": 25333}
{"input": "int maxtriangle ( ) { int maximum , left , above , index = 0 , lines = 1 , line = 2 , input , max [ 150 ] = { 0 } ; scanf ( \"%d\" , & lines ) ; scanf ( \"%d\" , & max [ 0 ] ) ; maximum = max [ 0 ] ; while ( -- lines ) { scanf ( \"%d\" , & input ) ; maximum = left = max [ 0 ] ; max [ 0 ] += input ; for ( index = 1 ; index < line ; ++ index ) { scanf ( \"%d\" , & input ) ; above = max [ index ] ; max [ index ] = input + ( ( left > above ) ? left : above ) ; left = above ; if ( max [ index ] > maximum ) maximum = max [ index ] ; } ++ line ; } return maximum ; } int main ( int argc , char * * argv ) { int times ; scanf ( \"%d\" , & times ) ; while ( times -- ) { printf ( \"%d \n\" , maxtriangle ( ) ) ; } return 0 ; }", "label": 0, "id": 10693}
{"input": "int main ( ) { int t , a [ 100 ] , n , i , j , e , temp = 0 , k , y ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( k = 1 ; k < n ; k ++ ) { for ( y = 0 ; y < n - 1 ; y ++ ) { if ( a [ y ] > a [ y + 1 ] ) { temp = a [ y ] ; a [ y ] = a [ y + 1 ] ; a [ y + 1 ] = temp ; } } } printf ( \"%d\n\" , a [ n - 2 ] ) ; temp = 0 ; } return 0 ; }", "label": 3, "id": 15997}
{"input": "int main ( ) { int t , i , n , a , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100000 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( a < min ) min = a ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 15360}
{"input": "int main ( ) { int n , l , i , j , k , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & l ) ; for ( j = 0 ; j < l ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = n - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { if ( a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ) a [ j ] [ k ] += a [ j + 1 ] [ k ] ; else a [ j ] [ k ] += a [ j + 1 ] [ k + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 13648}
{"input": "int main ( ) { int t , i , n , j , max = 0 , s = 0 , p ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; ++ j ) { scanf ( \"%d\" , & p ) ; s = s + p ; if ( max < p ) max = p ; } printf ( \"%d\n\" , s - max ) ; } }", "label": 1, "id": 5210}
{"input": "int max ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22004}
{"input": "int main ( ) { int i , j , t ; int n , min ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } min = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ j ] < min ) { min = a [ j ] ; } } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return ( 0 ) ; }", "label": 2, "id": 18998}
{"input": "int main ( ) { int cases ; long int a , b , gcd , lcm , k , p , q ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { gcd = 1 ; scanf ( \"%ld%ld\" , & a , & b ) ; p = a ; q = b ; if ( a > b ) { while ( 1 ) { k = a % b ; if ( k == 0 ) { gcd = b ; break ; } a = b ; b = k ; } } else { while ( 1 ) { k = b % a ; if ( k == 0 ) { gcd = a ; break ; } b = a ; a = k ; } } a = p / gcd ; b = q / gcd ; lcm = a * b * gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 10840}
{"input": "void merge ( long long int arr [ ] , int l , int m , int r ) { int i , j , k ; int n1 = m - l + 1 ; int n2 = r - m ; int L [ n1 ] , R [ n2 ] ; for ( i = 0 ; i < n1 ; i ++ ) L [ i ] = arr [ l + i ] ; for ( j = 0 ; j < n2 ; j ++ ) R [ j ] = arr [ m + 1 + j ] ; i = 0 ; j = 0 ; k = l ; while ( i < n1 && j < n2 ) { if ( L [ i ] <= R [ j ] ) { arr [ k ] = L [ i ] ; i ++ ; } else { arr [ k ] = R [ j ] ; j ++ ; } k ++ ; } while ( i < n1 ) { arr [ k ] = L [ i ] ; i ++ ; k ++ ; } while ( j < n2 ) { arr [ k ] = R [ j ] ; j ++ ; k ++ ; } } void mergeSort ( long long int arr [ ] , int l , int r ) { if ( l < r ) { int m = l + ( r - l ) / 2 ; mergeSort ( arr , l , m ) ; mergeSort ( arr , m + 1 , r ) ; merge ( arr , l , m , r ) ; } } int main ( ) { long int T , i , N ; long long int x ; do { scanf ( \"%u\" , & T ) ; } while ( T < 1 || T > 10 ) ; while ( T -- ) { do { scanf ( \"%lu\" , & N ) ; } while ( N < 2 || N > 50000 ) ; long long int A [ N ] ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%llu\" , & A [ i ] ) ; mergeSort ( A , 0 , N - 1 ) ; x = A [ 0 ] * ( N - 1 ) ; printf ( \"%llu\n\" , x ) ; } }", "label": 2, "id": 13610}
{"input": "int main ( ) { int n , arr_size , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- > 0 ) { scanf ( \"%d\" , & arr_size ) ; int arr [ arr_size ] [ arr_size ] ; for ( i = 0 ; i < arr_size ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = arr_size - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += ( ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25740}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int cost = 0 , small = 0 , a , i ; long int N ; scanf ( \"%ld\" , & N ) ; for ( i = 1 ; i <= N ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( i == 1 ) { small = a ; } else { if ( a > small ) { cost = cost + small ; } else { small = a ; cost = cost + small ; } } } printf ( \"%d\n\" , cost ) ; } }", "label": 1, "id": 15741}
{"input": "int total_sum = 0 , n ; void sum ( int a [ 100 ] [ 100 ] , int i , int j , int s ) { if ( i < n ) { s += a [ i ] [ j ] ; sum ( a , i + 1 , j , s ) ; if ( s > total_sum ) total_sum = s ; if ( j < n && i < n - 1 ) { sum ( a , i + 1 , j + 1 , s ) ; } } } int main ( ) { int t , i , j ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { t -- ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum ( a , 0 , 0 , 0 ) ; printf ( \"%d\n\" , total_sum ) ; } }", "label": 2, "id": 20350}
{"input": "int main ( ) { int t , j , i , a , b ; int g [ 1000 ] ; int lcm [ 1000 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i <= t - 1 ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; g [ i ] = gcd ( a , b ) ; lcm [ i ] = a * b / g [ i ] ; } for ( j = 0 ; j <= t - 1 ; j ++ ) printf ( \"\n%d %d\" , g [ j ] , lcm [ j ] ) ; } gcd ( int x , int y ) { int s , p ; if ( x >= y ) { for ( p = y ; p >= 1 ; p -- ) { if ( y % p == 0 && x % p == 0 ) { s = p ; break ; } } } if ( y > x ) { for ( p = x ; p >= 1 ; p -- ) { if ( y % p == 0 && x % p == 0 ) { s = p ; break ; } } } return ( s ) ; }", "label": 1, "id": 10310}
{"input": "int main ( ) { long long int cases , i , u , temp1 = 0 , temp4 = 0 , temp3 = 0 , temp6 , n , k ; scanf ( \"%lld\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%lld\" , & n ) ; for ( u = 0 ; u < n ; u ++ ) { temp4 = 0 ; for ( k = 0 ; k <= u ; k ++ ) { scanf ( \"%lld\" , & temp6 ) ; temp3 = temp6 ; if ( k == 0 ) { temp4 = temp3 ; } if ( temp4 < temp3 ) { temp4 = temp3 ; } temp3 = 0 ; } temp1 += temp4 ; } printf ( \"%lld\n\" , temp1 - 1 ) ; temp1 = 0 ; } return 0 ; }", "label": 1, "id": 26926}
{"input": "int main ( ) { int t , A [ 105 ] [ 105 ] , i , j , x ; long int S [ 105 ] [ 105 ] , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; if ( i == n ) S [ i ] [ j ] = A [ i ] [ j ] ; else S [ i ] [ j ] = 0 ; } } for ( i = ( n - 1 ) ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { x = ( S [ i + 1 ] [ j ] > S [ i + 1 ] [ j + 1 ] ) ? S [ i + 1 ] [ j ] : S [ i + 1 ] [ j + 1 ] ; S [ i ] [ j ] = A [ i ] [ j ] + x ; } } printf ( \"%ld\n\" , S [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 13864}
{"input": "int main ( ) { int cases , length , i ; int min ; int arr [ 100 ] ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { scanf ( \"%d\" , & length ) ; for ( i = 0 ; i < length ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } min = arr [ 0 ] ; for ( i = 0 ; i < length ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( \"%d\n\" , ( length - 1 ) * min ) ; } return 0 ; }", "label": 3, "id": 13007}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , n , l ; scanf ( \"%lld%lld\" , & a , & b ) ; n = hcf ( a , b ) ; l = ( a * b ) / n ; printf ( \"%lld%lld\n\" , n , n ) ; } return 0 ; } int hcf ( int p , int q ) { if ( p == q ) return p ; else if ( p > q ) return hcf ( p - q , q ) ; else return hcf ( p , q - p ) ; }", "label": 1, "id": 21805}
{"input": "int maxi ( int a [ 100 ] [ 100 ] , int n ) { int i , k = 1 , sum = a [ 1 ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( a [ i ] [ k ] > a [ i ] [ k + 1 ] ) { sum = sum + a [ i ] [ k ] ; } else { sum = sum + a [ i ] [ k + 1 ] ; k = k + 1 ; } } return sum ; } int main ( ) { int * sum ; int a [ 100 ] [ 100 ] , t , n , i , j , k ; scanf ( \"%d\" , & t ) ; sum = ( int * ) malloc ( t * sizeof ( int ) ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; { for ( j = 1 ; j <= n ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } sum [ i ] = maxi ( a , n ) ; } for ( i = 1 ; i <= n ; i ++ ) { printf ( \"%d \n\" , sum [ i ] ) ; } return 0 ; }", "label": 3, "id": 5669}
{"input": "int a [ 101 ] [ 101 ] = { - 1 , - 1 } ; int m ( int a , int b ) { if ( a > b ) return ( a ) ; return ( b ) ; } int main ( ) { int t , n , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , a [ 1 ] [ 1 ] ) ; if ( n > 1 ) for ( i = 2 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , a [ i ] [ j ] ) ; if ( i == j ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += m ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; } max = a [ n - 1 ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ n - 1 ] [ j ] > max ) max = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return ( 0 ) ; }", "label": 3, "id": 20602}
{"input": "int main ( void ) { int nt , n , i , sum , a [ 50005 ] , min ; scanf ( \"%d\" , & nt ) ; while ( nt -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; sum = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( min > a [ i + 1 ] ) { min = a [ i + 1 ] ; } sum += min ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 24974}
{"input": "int main ( ) { int a , b , t , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; while ( lcm % a != 0 || lcm % b != 0 ) lcm ++ ; while ( a % gcd != 0 || b % gcd != 0 ) gcd -- ; printf ( \"%d\n%d\n\" , lcm , gcd ) ; } }", "label": 2, "id": 15039}
{"input": "void main ( ) { int loop , i , j , n ; long int a [ 100000 ] ; long long int b [ 100000 ] , count = 0 ; scanf ( \"%d\" , & loop ) ; while ( loop -- ) { scanf ( \"%d\" , & n ) ; i = 0 ; while ( i < n ) { scanf ( \"%lu\" , & a [ i ] ) ; i ++ ; } j = 0 ; while ( j < n ) { i = j - 1 ; if ( j = 0 ) b [ j ] = 1 ; else { if ( a [ i ] <= a [ j ] ) b [ j ] = b [ i ] + 1 ; else b [ j ] = 1 ; } count += b [ j ] ; } printf ( \"The sub array is: %llu\" , count ) ; } }", "label": 2, "id": 14982}
{"input": "int main ( ) { int A , B , c , i , T ; scanf ( \"%d\" , & T ) ; scanf ( \"%d%d\" , & A , & B ) ; if ( A < B ) { for ( i = 2 ; i <= A ; i ++ ) { if ( A % i == 0 && B % i == 0 ) { c = i ; } } i = ( A * B ) / c ; printf ( \"%d %d\" , c , i ) ; } else { for ( i = 2 ; i <= B ; i ++ ) { if ( A % i == 0 && B % i == 0 ) { c = i ; } } i = ( A * B ) / c ; printf ( \"%d %d\" , c , i ) ; } }", "label": 1, "id": 15622}
{"input": "int main ( ) { long int a , b , i , j , t , m , gcd = 1 , lcm ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { m = b ; } else { m = a ; } for ( j = m ; j >= 1 ; j -- ) { if ( a % j == 0 && b % j == 0 ) { gcd = j ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; gcd = 1 ; } return 0 ; }", "label": 2, "id": 14805}
{"input": "int gcd ( int a , int b ) { int temp ; while ( b != 0 ) { temp = a % b ; a = b ; b = temp ; } return a ; } main ( ) { int t ; scanf ( \"%d\" , & t ) ; if ( t >= 1 && t < 1000 ) { int i , arr [ t ] [ 2 ] ; for ( i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; if ( a >= 1 && b >= 1 && a <= 1000000 && b <= 1000000 ) { arr [ i ] [ 0 ] = gcd ( a , b ) ; arr [ i ] [ 1 ] = ( a * b ) / ( arr [ i ] [ 0 ] ) ; } } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d %d\n\" , arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) ; } }", "label": 1, "id": 20510}
{"input": "int main ( ) { long long int cost ; int t , i , j , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & arr [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n && arr [ j ] > arr [ j + 1 ] ) { temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } } cost = arr [ 0 ] * ( n - 1 ) ; printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 18557}
{"input": "int main ( ) { int n , a , b , i , y , x , l , t , s ; scanf ( \"%d\" , & n ) ; while ( n -- ) { s = 1 ; t = 1 ; scanf ( \"%d%d\" , & a , & b ) ; l = ( a < b ? a : b ) ; x = a ; y = b ; for ( i = 1 ; i <= l ; i ++ ) { if ( x % i == 0 && y % i == 0 ) { t = t * i ; x = x / i ; y = y / i ; } } x = a ; y = b ; l = ( b > a ? b : a ) ; for ( i = 1 ; i <= l ; i ++ ) { if ( x % i == 0 || y % i == 0 ) { if ( x % i == 0 ) { s = s * i ; x = x / i ; } if ( y % i == 0 ) { s = s * i ; y = y / i ; } if ( x % i == 0 && y % i == 0 ) { s = s * i ; x = x / i ; y = y / i ; } } } printf ( \"%d %d\" , t , s ) ; } return 0 ; }", "label": 2, "id": 9612}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t ; long long int a , b , min , lcm , hcf , max ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } hcf = gcd ( max , min ) ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; } long int gcd ( long int p , long int q ) { if ( p % q == 0 ) return q ; else return gcd ( q , p % q ) ; }", "label": 0, "id": 25293}
{"input": "int powr ( int x , int y ) { int i , ans = 1 ; for ( i = 0 ; i < y ; i ++ ) ans = ans * x ; return ans ; } int main ( ) { int n , num , i , j , k ; int grt ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & num ) ; int b [ num ] [ num ] ; memset ( b , 0 , sizeof ( b [ 0 ] [ 0 ] ) * num * num ) ; for ( j = 0 ; j < num ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & b [ j ] [ k ] ) ; } } for ( j = num - 1 ; j >= 0 ; j -- ) { for ( k = 0 ; k < j + 1 ; k ++ ) { if ( b [ j ] [ k ] > b [ j ] [ k + 1 ] ) b [ j - 1 ] [ k ] += b [ j ] [ k ] ; else b [ j - 1 ] [ k ] += b [ j ] [ k + 1 ] ; } } a [ i ] = b [ 0 ] [ 0 ] ; } for ( j = 0 ; j < n ; j ++ ) { printf ( \"\n%d \" , a [ j ] ) ; } return 0 ; }", "label": 0, "id": 24520}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } t -- ; printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 2382}
{"input": "int main ( ) { int n , m , a [ 50 ] , i , j , k , sum = 0 , l ; scanf ( \"%d\" , & n ) ; for ( l = 0 ; l < n ; l ++ ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; if ( j == 0 ) { sum = a [ j ] ; k = j ; } else if ( max ( a [ k ] , a [ k + 1 ] ) == a [ k + 1 ] ) sum = sum + max ( a [ k ] , a [ ++ k ] ) ; else if ( max ( a [ k ] , a [ k + 1 ] ) == a [ k ] ) sum = sum + max ( a [ k ] , a [ k + 1 ] ) ; } printf ( \"\n%d\n\" , sum ) ; } } int max ( int x , int y ) { if ( x == y ) return x ; else return x > y ? x : y ; }", "label": 3, "id": 23062}
{"input": "int main ( void ) { unsigned long int t , n , * a , i , j , k , r [ 5 ] , l , p ; scanf ( \"%lu\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { r [ i ] = 0 ; scanf ( \"%lu\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lu\" , & a [ j ] ) ; for ( k = 1 ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < n - k ; l ++ ) { p = 1 ; for ( j = l ; j < l + k ; j ++ ) { if ( j + 1 == n ) { p = 0 ; break ; } if ( a [ j ] <= a [ j + 1 ] ) continue ; else { p = 0 ; break ; } } if ( p == 1 ) r [ i ] ++ ; } } r [ i ] = r [ i ] + n ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%lu\n\" , r [ i ] ) ; return 0 ; }", "label": 3, "id": 14301}
{"input": "int main ( void ) { int i , test_cases ; scanf ( \"%d\" , & test_cases ) ; for ( i = 0 ; i < test_cases ; i ++ ) { int j , size ; scanf ( \"%d\" , & size ) ; int arr [ 1 ] , cost = 0 ; for ( j = 0 ; j < size ; j ++ ) { int k ; scanf ( \"%d\" , & k ) ; if ( j >= 1 ) { if ( arr [ 0 ] > k ) { cost += k ; arr [ 0 ] = k ; } else { cost += arr [ 0 ] ; } } else if ( j == 0 ) { arr [ 0 ] = k ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 12300}
{"input": "int sum = 0 ; struct node { int index ; int data ; struct node * child1 ; struct node * child2 ; struct node * next ; } ; int total ( int height ) { return ( ( height * ( height + 1 ) ) / 2 ) ; } int greater ( int a , int b ) { return ( a > b ) ? a : b ; } void create_list ( struct node * * head , int total_ele ) { struct node * ptr , * temp , * last = NULL ; int i = 0 , data = 0 ; ptr = * head ; for ( i = 1 ; i <= total_ele ; i ++ ) { temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp -> index = i ; scanf ( \"%d\" , & data ) ; temp -> data = data ; temp -> child1 = NULL ; temp -> child2 = NULL ; temp -> next = NULL ; if ( ptr == NULL ) { * head = temp ; ptr = temp ; } else { last -> next = temp ; } last = temp ; } } void make_tree ( struct node * head , int total_ele , int level ) { struct node * ptr , * temp ; int t ; ptr = head ; temp = ptr ; t = ptr -> index + level ; if ( t > total_ele ) { return ; } while ( temp -> index != t ) temp = temp -> next ; ptr -> child1 = temp ; ptr -> child2 = temp -> next ; make_tree ( ptr -> child1 , total_ele , level + 1 ) ; make_tree ( ptr -> child2 , total_ele , level + 1 ) ; return ; } int best_path ( struct node * head ) { struct node * ptr ; ptr = head ; if ( ptr -> child1 == NULL ) return ( ptr -> data ) ; else { return ( ptr -> data + greater ( best_path ( ptr -> child1 ) , best_path ( ptr -> child2 ) ) ) ; } } int main ( ) { int loop = 0 , height = 0 , total_ele = 0 , i = 0 ; int bp [ 100 ] ; struct node * head ; scanf ( \"%d\" , & loop ) ; while ( loop > 0 ) { head = NULL ; scanf ( \"%d\" , & height ) ; total_ele = total ( height ) ; create_list ( & head , total_ele ) ; make_tree ( head , total_ele , 1 ) ; bp [ i ++ ] = best_path ( head ) ; bp [ i ] = ( - 8888 ) ; sum = 0 ; loop -- ; } i = 0 ; while ( bp [ i ] != ( - 8888 ) ) printf ( \"\n%d\" , bp [ i ++ ] ) ; return 0 ; }", "label": 2, "id": 22432}
{"input": "int traverse ( int ary [ ] [ 100 ] , int row , int col , int totalrow , int presum ) ; int main ( ) { int noOfCases , noOfRows , i , j , k , array [ 100 ] [ 100 ] ; scanf ( \"%d\" , & noOfCases ) ; for ( i = 0 ; i < noOfCases ; i ++ ) { scanf ( \"%d\" , & noOfRows ) ; for ( j = 0 ; j < noOfRows ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & array [ j ] [ k ] ) ; } printf ( \"%d\n\" , traverse ( array , 0 , 0 , noOfRows - 1 , 0 ) ) ; } return 0 ; } int traverse ( int ary [ ] [ 100 ] , int row , int col , int totalrow , int presum ) { int sum1 = 0 , sum2 = 0 ; if ( row >= totalrow ) return ( presum + ary [ row ] [ col ] ) ; sum1 = traverse ( ary , row + 1 , col , totalrow , presum + ary [ row ] [ col ] ) ; sum2 = traverse ( ary , row + 1 , col + 1 , totalrow , presum + ary [ row ] [ col ] ) ; if ( sum1 >= sum2 ) return sum1 ; return sum2 ; }", "label": 2, "id": 18218}
{"input": "long long int subArrCount = 0 ; int arr [ 100000 ] ; int main ( void ) { unsigned int totalTest , testLoop , arrSize , arrLoop ; unsigned int i , temp ; scanf ( \"%d\" , & totalTest ) ; for ( testLoop = 0 ; testLoop < totalTest ; testLoop ++ ) { scanf ( \"%d\" , & arrSize ) ; for ( i = 0 ; i < arrSize ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; temp = arrSize - 1 ; for ( arrLoop = 0 ; arrLoop < temp ; arrLoop ++ ) { subArrCount ++ ; for ( i = arrLoop ; i < arrSize ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { subArrCount ++ ; } else break ; } } printf ( \"%d\n\" , ++ subArrCount ) ; subArrCount = 0 ; } return ( 0 ) ; }", "label": 0, "id": 22782}
{"input": "void main ( ) { int i , j , n , m , k = 0 , sum , max , ans , v ; printf ( \"START\" ) ; scanf ( \"%d\" , & n ) ; while ( k < n ) { printf ( \"enter lines\n\" ) ; scanf ( \"%d\" , & m ) ; sum = 0 ; for ( i = 1 ; i <= m ; i ++ ) { max = 0 ; for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & v ) ; if ( v > max ) max = v ; } sum += max ; } k ++ ; printf ( \"%d\" , sum ) ; } }", "label": 1, "id": 19560}
{"input": "int maximum ( int x , int y ) { if ( x > y ) return x ; else return y ; } int maxcost ( int A [ ] [ 100 ] , int i , int j , int n ) { int x ; if ( i > n ) return 0 ; else x = A [ i ] [ j ] + maximum ( maxcost ( A , i + 1 , j , n ) , maxcost ( A , i + 1 , j + 1 , n ) ) ; return x ; } int main ( ) { int arr [ 100 ] [ 100 ] = { 0 } ; int i , n , t , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } max = maxcost ( arr , 0 , 0 , n ) ; printf ( \"%d\n\" , max ) ; } }", "label": 2, "id": 5684}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int collect ( int a [ ] [ 100 ] , int n ) { int till [ 100 ] [ 100 ] = { 0 } , i , j ; for ( j = 0 ; i < n ; i ++ ) { till [ n - 1 ] [ j ] = a [ n - 1 ] [ j ] ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { till [ i ] [ j ] = max ( till [ i + 1 ] [ j ] , till [ i + 1 ] [ j + 1 ] ) + a [ i ] [ j ] ; } } return till [ 0 ] [ 0 ] ; } int main ( ) { int n , x , a [ 100 ] [ 100 ] = { 0 } , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , collect ( a , x ) ) ; } return 0 ; }", "label": 1, "id": 4246}
{"input": "int main ( ) { int t , r , n , i , j ; scanf ( \"%d\" , & r ) ; while ( r -- ) { t = 0 ; scanf ( \"%d\" , & n ) ; if ( n < 2 ) continue ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 , j = i + 1 ; i < n , j < n ; i ++ , j ++ ) { if ( a [ i ] < a [ j ] ) t = t + a [ i ] ; else t = t + a [ i + 1 ] ; } printf ( \"%d\" , t ) ; } return 0 ; }", "label": 1, "id": 18529}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; int i , n , a [ n ] , min ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%u\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 14059}
{"input": "int gcd ( int x , int y ) { int i , q = 1 ; for ( i = x ; i >= 1 ; i -- ) { if ( x % i == 0 && y % i == 0 ) { q = i ; break ; } } return q ; } int main ( void ) { long long int t , i , j , n , temp = 0 ; long long int p , a , b ; long long int l ; scanf ( \"%d\" , & t ) ; while ( t -- != 0 ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a < b ) { p = gcd ( a , b ) ; } else { p = gcd ( b , a ) ; } l = ( a * b ) / p ; printf ( \"%d %lld\n\" , p , l ) ; } return 0 ; }", "label": 0, "id": 10767}
{"input": "int n ; int summ ( int a [ 100 ] [ 100 ] , int i , int j ) ; int max ( int a , int b ) ; void main ( ) { int a [ 100 ] [ 100 ] = { 0 } , res [ 1000 ] , i , j , k ; int t ; scanf ( \"%d\" , & t ) ; k = 0 ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } res [ k ] = summ ( a , 0 , 0 ) ; k ++ ; } for ( i = 0 ; i < k ; i ++ ) printf ( \"%d\n\" , res [ i ] ) ; } int summ ( int a [ 100 ] [ 100 ] , int i , int j ) { if ( i > n || j > n ) return 0 ; else { return a [ i ] [ j ] + max ( summ ( a , i + 1 , j ) , summ ( a , i + 1 , j + 1 ) ) ; } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 2, "id": 22445}
{"input": "int main ( ) { int n , i , j , num ; scanf ( \"%d\" , & num ) ; while ( num -- ) { scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; } if ( j < i ) { if ( ( a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ) < ( a [ i + 1 ] [ j + 1 ] + a [ i ] [ j + 1 ] ) ) { a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j + 1 ] ; } else { a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } } else { a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } } int max = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) printf ( \"%d \" , a [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( max < a [ n - 1 ] [ i ] ) max = a [ n - 1 ] [ i ] ; } printf ( \"%d \n\" , max ) ; } return 0 ; }", "label": 2, "id": 22286}
{"input": "int hcf ( int a , int b ) { if ( b == 0 ) return a ; else return hcf ( b , a % b ) ; } int main ( ) { int arr [ 2000 ] , brr [ 2000 ] , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & arr [ 2 * i ] , & arr [ 2 * i + 1 ] ) ; } for ( i = 0 ; i < t ; i ++ ) { brr [ 2 * i ] = hcf ( arr [ 2 * i ] , arr [ 2 * i + 1 ] ) ; brr [ 2 * i + 1 ] = ( arr [ 2 * i ] * arr [ 2 * i + 1 ] ) / brr [ 2 * i ] ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d %d\n\" , brr [ 2 * i ] , brr [ 2 * i + 1 ] ) ; } return 0 ; }", "label": 1, "id": 540}
{"input": "int main ( ) { int i , j , depth , input [ 100 ] [ 100 ] , testcases , rows ; scanf ( \"%d\" , & testcases ) ; while ( testcases -- > 0 ) { rows = 0 ; depth = 0 ; scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & input [ i ] [ j ] ) ; depth = rows - 1 ; while ( depth > 0 ) { for ( i = 0 ; i < depth ; i ++ ) { if ( input [ depth ] [ i ] > input [ depth ] [ i + 1 ] ) { input [ depth - 1 ] [ i ] += input [ depth ] [ i ] ; } else { input [ depth - 1 ] [ i ] += input [ depth ] [ i + 1 ] ; } } -- depth ; } printf ( \"%d\n\" , input [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 21442}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int j , a [ n ] , min ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; min = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( min < a [ j ] ) min = a [ j ] ; } printf ( \"%d\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 8378}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7379}
{"input": "int main ( ) { int t , j ; scanf ( \"%d\" , & t ) ; int g [ t ] , l [ t ] ; for ( j = 0 ; j < t ; j ++ ) { int i , a , b ; scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g [ j ] = i ; } l [ j ] = a * b / g [ j ] ; } int i ; for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d %d\n\" , g [ i ] , l [ i ] ) ; } return 0 ; }", "label": 2, "id": 9929}
{"input": "int main ( ) { int i , j , t , x = 0 , y = 0 , gcd = 1 , lcm = 1 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & x , & y ) ; int min ; if ( x < y ) min = x ; else min = y ; for ( j = 1 ; j <= min ; j ++ ) { if ( x % j == 0 && y % j == 0 ) { gcd = j ; } } int max ; if ( x < y ) max = y ; else max = x ; for ( j = max ; j <= x * y ; j ++ ) { if ( j % x == 0 && j % y == 0 ) { lcm = j ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 22602}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 12013}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; if ( b % a == 0 ) return a ; if ( a < b ) return gcd ( a , b % a ) ; if ( b < a ) return gcd ( a % b , b ) ; } int main ( ) { int t ; scanf ( \" %d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \" %d\" , & a ) ; scanf ( \" %d\" , & b ) ; int g = gcd ( a , b ) ; int l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 5184}
{"input": "int main ( void ) { long long int t , n , i , k , s ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; s = n ; for ( i = 0 ; i < n - 1 ; i ++ ) { k = 0 ; while ( i < n - 1 && a [ i + 1 ] >= a [ i ] ) { k ++ ; i ++ ; } s += k * ( k + 1 ) / 2 ; } printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 9394}
{"input": "int main ( ) { int a [ 10 ] [ 10 ] , s [ 10 ] , i , j , k , t , max ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & i ) ; for ( j = 1 ; j <= i ; j ++ ) s [ j ] = 0 ; for ( j = 1 ; j <= i ; j ++ ) for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; s [ j ] += a [ j ] [ k ] ; } max = s [ 0 ] ; for ( j = 2 ; j <= i ; j ++ ) if ( max < s [ j ] ) max = s [ j ] ; printf ( \"\n%d\" , max ) ; t -- ; } return 0 ; }", "label": 3, "id": 10400}
{"input": "int main ( ) { int a [ 100000 ] ; int t , i , j , k , count , n ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { count = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = j ; k < n ; k ++ ) { if ( a [ k ] < a [ k + 1 ] ) count ++ ; else { count ++ ; break ; } } } printf ( \"\n%d\" , count ) ; } }", "label": 1, "id": 26995}
{"input": "int main ( ) { int t , i , s , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; s = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i > 0 ) { if ( a [ i - 1 ] > a [ i ] ) a [ i - 1 ] = a [ i ] ; else a [ i ] = a [ i - 1 ] ; } } for ( i = 0 ; i < n - 1 ; i ++ ) s += a [ i ] ; printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 22771}
{"input": "int max ( int a , int b ) { return a >= b ? a : b ; } int main ( ) { int t ; int arr [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , limit ; scanf ( \"%d\" , & n ) ; limit = n * ( n + 1 ) / 2 ; for ( i = 0 ; i < limit ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } while ( n > 1 ) { int lastrow = ( n * ( n - 1 ) ) / 2 ; int b4last = ( n - 1 ) * ( n - 2 ) / 2 ; int i ; for ( i = 0 ; i < n - 1 ; i ++ ) { arr [ b4last ] += max ( arr [ lastrow ] , arr [ lastrow + 1 ] ) ; b4last ++ ; lastrow ++ ; } n -- ; } printf ( \"%d\n\" , arr [ 0 ] ) ; } }", "label": 0, "id": 16775}
{"input": "int gcd ( int x , int y ) ; void main ( ) { int a [ 1000 ] , b [ 1000 ] , hcf , lcm ; int n , i ; printf ( \"enter no. of line\n\" ) ; scanf ( \"%d\" , & n ) ; printf ( \"enter the pairs\n\" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a [ i ] , & b [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { hcf = gcd ( a [ i ] , b [ i ] ) ; lcm = ( a [ i ] * b [ i ] ) / hcf ; printf ( \"hcf and lcm is%d %d\n\" , hcf , lcm ) ; } } int gcd ( int x , int y ) { if ( x == 0 ) return y ; while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 1, "id": 11242}
{"input": "int main ( ) { int t , i , j , line ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & line ) ; int arr [ line ] [ line ] ; for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = line - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) arr [ i - 1 ] [ j ] += ( arr [ i ] [ j ] > arr [ i ] [ j ] ) ? arr [ i ] [ j ] : arr [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 20168}
{"input": "int main ( ) { int t ; long int a , b , g ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%li %li\" , & a , & b ) ; if ( a > b ) { g = b ; while ( a % g != 0 ) { g = a % g ; } if ( g < b && b % g != 0 ) { g = b % g ; } printf ( \"%li %li\n\" , g , ( a * b ) / g ) ; } else if ( a < b ) { g = a ; while ( b % g != 0 ) { g = b % g ; } if ( g < a && a % g != 0 ) { g = a % g ; } printf ( \"%li %li\n\" , g , ( a * b ) / g ) ; } else if ( a = b ) { printf ( \"%li %li\n\" , a , b ) ; } t -- ; } return 0 ; }", "label": 1, "id": 11634}
{"input": "int main ( void ) { int n , i , k , j ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { int x , z , sum = 0 ; scanf ( \"%d\" , & x ) ; int a [ x ] [ x ] ; for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j < x ; j ++ ) { a [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } z = 0 ; for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > z ) { z = a [ i ] [ j ] ; } } sum = sum + z ; } printf ( \"%d\n\" , ( sum - a [ 0 ] [ 0 ] ) ) ; } return 0 ; }", "label": 1, "id": 5632}
{"input": "int gcd ( int , int ) ; int main ( ) { int n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int rec = gcd ( a , b ) ; int lcm = ( a * b ) / rec ; printf ( \"%d %d\n\" , rec , lcm ) ; } } int gcd ( int x , int y ) { int k = x % y ; if ( k == 0 ) return y ; else { gcd ( y , k ) ; } }", "label": 1, "id": 5915}
{"input": "void main ( ) { long long int a [ 100001 ] , n , i , j , k , t , s ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; i = 0 , s = 0 ; j = 1 ; while ( j < n ) { if ( a [ i ] < a [ j ] ) { s += a [ i ] ; j ++ ; } else { s += a [ j ] ; i = j ; j ++ ; } } printf ( \"%lld\n\" , s ) ; } }", "label": 1, "id": 25266}
{"input": "main ( ) { long long n , i , t , j , k ; long long * a , * b ; scanf ( \"%lld\" , & t ) ; b = ( long long * ) malloc ( sizeof ( long long ) * t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; a = ( long long * ) malloc ( sizeof ( long long ) ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } k = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < k ) { k = a [ j ] ; } } b [ i ] = k * ( n - 1 ) ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"\n%lld\" , b [ i ] ) ; } }", "label": 3, "id": 26802}
{"input": "int main ( ) { int t , i , r , j , k , n ; int arr [ 100 ] [ 100 ] ; r = scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ; } else { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 21638}
{"input": "int max = 0 , ar [ 5050 ] ; void summer ( int i , int row , int r , int sum ) { if ( i <= r * ( r + 1 ) / 2 ) { summer ( i + row , row + 1 , r , sum + ar [ i ] ) ; summer ( i + row + 1 , row + 1 , r , sum + ar [ i ] ) ; return ; } else { if ( max < sum ) max = sum ; return ; } } int main ( ) { int i , j , n , r ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; j = 1 ; while ( j <= r * ( r + 1 ) / 2 ) scanf ( \"%d\" , & ar [ j ++ ] ) ; summer ( 1 , 1 , r , 0 ) ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 19932}
{"input": "int gcd ( a , b ) { if ( a % b == 0 ) return b ; if ( b % a == 0 ) return a ; if ( a > b ) return gcd ( b , a % b ) ; if ( b > a ) return gcd ( a , b % a ) ; } int lcm ( a , b ) { if ( a % b == 0 ) return a ; if ( b % a == 0 ) return b ; if ( a % b != 0 && b % a != 0 ) return ( a * b ) ; } main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\" , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 21002}
{"input": "int main ( ) { int t = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n = 0 , i = 0 , m = 1000000 , x = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & x ) , m = min ( m , x ) ; printf ( \"%lld\n\" , ( long long ) m * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 21883}
{"input": "int main ( ) { int t , a , b , l , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; l = lcm ( a , b ) ; g = gcd ( a , b ) ; printf ( \"%d \" , g ) ; printf ( \"%d\" , l ) ; } } lcm ( int a , int b ) { int i , k , l = 1 ; if ( a <= b ) k = a ; else k = b ; for ( i = 2 ; i <= k ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { a = a / i ; b = b / i ; l = i * l ; i = i - 1 ; } } l = l * a * b ; return ( l ) ; } gcd ( int a , int b ) { int i , g , k ; if ( a <= b ) k = a ; else k = b ; for ( i = 2 ; i <= k ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = i ; break ; } } if ( g != i ) return ( 1 ) ; else return ( g ) ; }", "label": 2, "id": 6450}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; int a , b ; while ( T -- ) { scanf ( \"%d%d\" , & a , & b ) ; int hcf = 1 ; int lcm = 1 ; int num , i ; num = ( ( a < b ) ? a : b ) ; for ( i = 2 ; i < num ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; } } lcm = a * b / hcf ; printf ( \"%d\\t\" , hcf ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 9284}
{"input": "int main ( ) { int T , s , max = 0 ; int A [ 100 ] = { 0 } , B [ 100 ] = { 0 } ; int r , i , j , k ; scanf ( \"%d\" , & T ) ; for ( k = 0 ; k < T ; ++ k ) { scanf ( \"%d\" , & r ) ; for ( j = 1 ; j <= r ; ++ j ) { for ( i = 0 ; i < j ; ++ i ) { scanf ( \"%d\" , & s ) ; if ( i == 0 && j == 1 ) { A [ 0 ] = s ; B [ 0 ] = s ; } else { if ( i == 0 && j != 1 ) B [ 0 ] = A [ 0 ] + s ; else if ( A [ i ] >= A [ i - 1 ] ) B [ i ] = A [ i ] + s ; else B [ i ] = A [ i - 1 ] + s ; } } for ( i = 0 ; i < j ; ++ i ) { A [ i ] = B [ i ] ; B [ i ] = 0 ; } } for ( i = 0 ; i < r ; ++ i ) { if ( A [ i ] > max ) max = A [ i ] ; A [ i ] = 0 ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 14160}
{"input": "int gcd ( int x , int y ) ; int main ( ) { int t , a , b , g , lcm ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; lcm = ( a * b ) / g ; printf ( \"%d\" , g ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; } int gcd ( int x , int y ) { int r ; r = x % y ; if ( r == 0 ) return y ; else return gcd ( y , r ) ; }", "label": 1, "id": 9916}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j , m ; int a [ 102 ] [ 102 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 1 ; j <= i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j <= i + 1 ; j ++ ) { a [ i ] [ j ] += max ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; } } i -- ; m = a [ i ] [ 0 ] ; for ( j = 1 ; j <= i ; j ++ ) m = max ( m , a [ i ] [ j ] ) ; printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 0, "id": 20240}
{"input": "int * * j ; int max ( int a , int b ) { if ( a >= b ) return a ; return b ; } int maxpath ( int k , int i , int v ) { int sum = 0 ; if ( i > k - 1 ) return 0 ; else sum = j [ i ] [ v ] + max ( maxpath ( k , i + 1 , v ) , maxpath ( k , i + 1 , v + 1 ) ) ; return sum ; } int main ( ) { int n , i , k , l , a , * b , c = 0 ; scanf ( \"%d\" , & n ) ; b = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & k ) ; j = ( int * * ) malloc ( k * sizeof ( int * ) ) ; for ( l = 0 ; l < k ; l ++ ) { j [ l ] = ( int * ) malloc ( ( l + 1 ) * sizeof ( int ) ) ; for ( a = 0 ; a <= l ; a ++ ) scanf ( \"%d\" , & j [ l ] [ a ] ) ; } b [ c ++ ] = maxpath ( k , 0 , 0 ) ; for ( a = 0 ; a < n ; a ++ ) free ( ( void * ) j [ a ] ) ; free ( ( void * ) j ) ; } printf ( \"\n\" ) ; for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , b [ i ] ) ; free ( ( void * ) b ) ; return 0 ; }", "label": 2, "id": 22534}
{"input": "long int a [ 100002 ] ; int min ( long int m ) { long int h , o ; h = a [ 0 ] ; for ( o = 0 ; o < m ; o ++ ) { if ( h > a [ o ] ) h = a [ o ] ; } return h ; } int main ( ) { long int i , j , t , n ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } printf ( \"%lld\n\" , min ( n ) * ( n - 1 ) ) ; } }", "label": 0, "id": 5299}
{"input": "int main ( ) { int a , b , i , j , gcd = 0 , lcm = 0 , n ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i < a && i < b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; lcm = ( a * b ) / gcd ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 16511}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; for ( int i = 0 ; i < T ; ++ i ) { long int A , B , hcf = 1 ; scanf ( \"%ld %ld\" , & A , & B ) ; long int smaller = A < B ? A : B ; long int tempA = A , tempB = B ; for ( long int j = 2 ; j <= smaller ; ++ j ) { while ( A % j == 0 && B % j == 0 ) { hcf *= j ; A /= j ; B /= j ; } } long long int lcm = A * B / hcf ; printf ( \"%ld %lld \n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 27018}
{"input": "int main ( ) { int t , n , a [ n ] , i , j , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 10566}
{"input": "int arr [ 100 ] [ 100 ] ; static int fast_readINT ( ) { int num = 0 ; int c = 0 ; c = getchar_unlocked ( ) ; for ( ; c >= '0' && c <= '9' ; c = getchar_unlocked ( ) ) { num = ( num << 1 ) + ( num << 3 ) + c - '0' ; } return num ; } int main ( ) { int t , n , res ; int i , j ; t = fast_readINT ( ) ; while ( t -- ) { n = fast_readINT ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = fast_readINT ( ) ; } } res = maxSum ( 0 , 0 , n ) ; printf ( \"%d\n\" , res ) ; } return 0 ; } int maxSum ( int row , int col , int n ) { int ls , rs ; if ( row == n ) { return 0 ; } ls = maxSum ( row + 1 , col , n ) ; rs = maxSum ( row + 1 , col + 1 , n ) ; if ( ls > rs ) return arr [ row ] [ col ] + ls ; else return arr [ row ] [ col ] + rs ; }", "label": 2, "id": 12407}
{"input": "int main ( ) { int i , j , t , n , k , p , q , r , s ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( r = 0 ; r < n ; r ++ ) for ( s = 0 ; s <= r ; s ++ ) { scanf ( \"%d\" , & a [ r ] [ s ] ) ; } for ( p = ( n - 2 ) ; p >= 0 ; p -- ) for ( q = 0 ; q <= p ; q ++ ) { if ( a [ p + 1 ] [ q ] > a [ p + 1 ] [ q + 1 ] ) a [ p ] [ q ] = a [ p ] [ q ] + a [ p + 1 ] [ q ] ; else a [ p ] [ q ] = a [ p ] [ q ] + a [ p + 1 ] [ q + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 11934}
{"input": "int main ( ) { long int A , B ; long int a , b , rem ; int i , T ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; a = A ; b = B ; while ( b > 0 ) { rem = a % b ; a = b ; b = rem ; } printf ( \"%ld %ld\n\" , a , ( ( A * B ) / a ) ) ; } return 0 ; }", "label": 0, "id": 19720}
{"input": "int main ( ) { int t , i , min , n ; long long int c ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { c = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } c = ( long long ) ( n - 1 ) * min ; printf ( \"%lld\n\" , c ) ; t -- ; } return 0 ; }", "label": 0, "id": 9202}
{"input": "int main ( ) { int i , j , n , t , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i >= 1 ; i -- ) { for ( j = i ; j >= 1 ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - 1 ] ? a [ i ] [ j ] : a [ i ] [ j - 1 ] ; a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + max ; } } printf ( \"%d\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 20160}
{"input": "int main ( ) { int t , a , flag = 0 , b , gcd , lcm , i , j , max ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; for ( i = 0 ; i <= a || i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } max = ( a > b ) ? a : b ; while ( 1 ) { if ( max % a == 0 && max % b == 0 ) { lcm = max ; flag = 1 ; } if ( flag == 1 ) break ; else max ++ ; } printf ( \"%d ,%d\n\" , gcd , lcm ) ; gcd = 1 ; lcm = 1 ; } return 0 ; }", "label": 3, "id": 22200}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int A , B , GCD , store1 , store2 ; scanf ( \"%lld %lld\" , & A , & B ) ; store1 = ( A >= B ) ? B : A ; store2 = ( A >= B ) ? A : B ; if ( store1 > store2 / 2 ) { store1 = store1 / 2 ; } for ( i = store1 ; i > 0 ; i -- ) { if ( A % i == 0 && B % i == 0 ) { printf ( \"%lld \" , i ) ; GCD = i ; break ; } } printf ( \"%lld\n\" , ( A * B ) / GCD ) ; } }", "label": 2, "id": 9084}
{"input": "int d [ MAX_N ] ; int d2 [ MAX_N ] ; int main ( ) { int t , n , res , r , dd , i , j , k , l ; int * pd , * pd2 , * pdh ; scanf ( \"%d\" , & t ) ; do { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & res ) ; if ( n == 1 ) { printf ( \"%d\n\" , res ) ; continue ; } else if ( n == 2 ) { scanf ( \"%d\" , & i ) ; scanf ( \"%d\" , & j ) ; res += ( i < j ? j : i ) ; printf ( \"%d\n\" , res ) ; continue ; } for ( i = 0 ; i < MAX_N ; ++ i ) { d [ i ] = 0 ; d2 [ i ] = 0 ; } d [ 0 ] = res ; pd = d ; pd2 = d2 ; for ( i = 1 ; i < n ; ++ i ) { l = k = 0 ; res = pd [ k ] ; scanf ( \"%d\" , & dd ) ; pd2 [ l ++ ] = res + dd ; for ( j = 1 ; j < i ; ++ j ) { scanf ( \"%d\" , & dd ) ; r = pd [ ++ k ] ; if ( res > r ) pd2 [ l ++ ] = res + dd ; else pd2 [ l ++ ] = r + dd ; res = r ; } scanf ( \"%d\" , & dd ) ; pd2 [ l ++ ] = res + dd ; pdh = pd ; pd = pd2 ; pd2 = pdh ; } res = pd [ 0 ] ; for ( i = 1 ; i < n ; ++ i ) if ( pd [ i ] > res ) res = pd [ i ] ; printf ( \"%d\n\" , res ) ; } while ( -- t ) ; return 0 ; }", "label": 0, "id": 5767}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 15370}
{"input": "int a [ 100 ] [ 100 ] ; int answer [ 100 ] [ 100 ] ; int g , h ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int ans ( int a [ 100 ] [ 100 ] , int i , int j ) { if ( answer [ i ] [ j ] != 0 ) return answer [ i ] [ j ] ; if ( i < 0 || j < 0 ) return 0 ; if ( i == 0 && j == 0 ) { answer [ i ] [ j ] = a [ i ] [ j ] ; return answer [ i ] [ j ] ; } else { answer [ i ] [ j ] = ( a [ i ] [ j ] + max ( ans ( a , i - 1 , j ) , ans ( a , i - 1 , j - 1 ) ) ) ; return answer [ i ] [ j ] ; } } int main ( ) { int n , r , i , j , count = 0 , se ; int an [ 100 ] ; for ( g = 0 ; g < 100 ; g ++ ) { for ( h = 0 ; h <= g ; h ++ ) { answer [ g ] [ h ] = 0 ; } } scanf ( \"%d\" , & n ) ; while ( n ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } se = ans ( a , r - 1 , i ) ; for ( i = 0 ; i < r ; i ++ ) { if ( ans ( a , r - 1 , i ) > se ) se = ans ( a , r - 1 , i ) ; } an [ count ] = se ; count ++ ; n -- ; } for ( i = 0 ; i < count ; i ++ ) printf ( \"%d\n\" , an [ i ] ) ; return 0 ; }", "label": 2, "id": 24950}
{"input": "long long gcd ( long long a , int b ) { if ( b != 0 ) return gcd ( b , a % b ) ; else return a ; } int main ( void ) { int t ; long long a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 1015}
{"input": "int mat [ 100 ] [ 100 ] ; int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = k ; l >= 0 ; l -- ) { if ( mat [ k + 1 ] [ l ] > mat [ k + 1 ] [ l + 1 ] ) mat [ k ] [ l ] += mat [ k + 1 ] [ l ] ; else mat [ k ] [ l ] += mat [ k + 1 ] [ l + 1 ] ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 4580}
{"input": "int a [ 101 ] [ 101 ] = { - 1 , - 1 } ; int m ( int a , int b ) { if ( a > b ) return ( a ) ; return ( b ) ; } int main ( ) { int t , n , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , a [ 1 ] [ 1 ] ) ; if ( n > 1 ) for ( i = 2 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , a [ i ] [ j ] ) ; if ( i == j ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += m ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; } max = a [ n - 1 ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ n - 1 ] [ j ] > max ) max = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return ( 0 ) ; }", "label": 3, "id": 23429}
{"input": "int size ; int arr [ 100 ] [ 100 ] ; int max = 0 ; int sum ( int i , int j ) { int a = 0 , b = 0 ; if ( i == size - 1 ) { return arr [ i ] [ j ] ; } else { a = max ; b = max ; a = sum ( i + 1 , j ) + arr [ i ] [ j ] ; b = sum ( i + 1 , j + 1 ) + arr [ i ] [ j ] ; if ( a > b ) { max = a ; } else if ( b > a ) { max = b ; } } } int main ( ) { int test_case ; int i , j , k ; int n ; scanf ( \"%d\" , & test_case ) ; for ( k = 0 ; k < test_case ; k ++ ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } } printf ( \"%d\" , sum ( 0 , 0 ) ) ; return 0 ; }", "label": 2, "id": 16342}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; return y ; } int main ( int argc , char * argv [ ] ) { int numCases = 0 ; int triangleLen = 0 ; int i = 0 , j = 0 ; int maxNum = 0 ; int M [ 100 ] [ 100 ] ; scanf ( \"%d\" , & numCases ) ; while ( numCases -- ) { scanf ( \"%d\" , & triangleLen ) ; i = 0 ; while ( i < triangleLen ) { j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & M [ i ] [ j ] ) ; j ++ ; } i ++ ; } i = 1 ; while ( i < triangleLen ) { M [ i ] [ 0 ] += M [ i - 1 ] [ 0 ] ; M [ i ] [ i ] += M [ i - 1 ] [ i - 1 ] ; j = 1 ; while ( j < i ) { M [ i ] [ j ] += max ( M [ i - 1 ] [ j - 1 ] , M [ i - 1 ] [ j ] ) ; ++ j ; } ++ i ; } maxNum = M [ triangleLen - 1 ] [ 0 ] ; for ( i = 1 ; i < triangleLen ; i ++ ) { maxNum = max ( M [ triangleLen - 1 ] [ i ] , maxNum ) ; } printf ( \"%d\n\" , maxNum ) ; } }", "label": 0, "id": 17966}
{"input": "int gcd ( int x , int y ) { if ( y != 0 ) return gcd ( y , x % y ) ; else return x ; } int main ( void ) { int t , g , l , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 5645}
{"input": "int hcf ( int , int ) ; void main ( ) { int num1 , num2 , gcd , remainder , numerator , denominator ; long lcm ; int test , count ; count = 0 ; printf ( \"Enter no. of Test :\" ) ; scanf ( \"%d\" , & test ) ; while ( count < test ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; gcd = hcf ( num1 , num2 ) ; lcm = ( long ) num2 / gcd ; printf ( \"%d %ld\" , gcd , ( num1 * lcm ) ) ; count ++ ; } } int hcf ( int a , int b ) { while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } return a ; }", "label": 1, "id": 24947}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int a [ 100 ] [ 100 ] ; int solve ( int i , int j , int n ) { int t1 , t2 , t ; if ( i > n ) return 0 ; t1 = solve ( i + 1 , j , n ) ; t2 = solve ( i + 1 , j + 1 , n ) ; t = a [ i ] [ j ] + max ( t1 , t2 ) ; return t ; } int main ( ) { int t , n , i , j , r , v ; scanf ( \"%d\" , & t ) ; for ( r = 0 ; r < t ; r ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } v = solve ( 1 , 1 , n ) ; printf ( \"%d\n\" , v ) ; } }", "label": 2, "id": 1815}
{"input": "int main ( ) { int a , i ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { int b , c , j , lcm , m , x , y ; scanf ( \"%d %d\" , & b , & c ) ; x = b ; y = c ; while ( b != c ) { if ( b > c ) b = b - c ; else c = c - b ; } lcm = x * y / b ; printf ( \"%d %d\n\" , b , lcm ) ; } return 0 ; }", "label": 1, "id": 25377}
{"input": "int hcf ( int a , int b ) { if ( a % b == 0 ) return b ; else return hcf ( b , a % b ) ; } int main ( ) { int t , d ; long int a , b , gcd ; long long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%li%li\" , & a , & b ) ; if ( a > b ) gcd = hcf ( a , b ) ; else gcd = hcf ( b , a ) ; lcm = ( ( a * b ) / gcd ) ; printf ( \"%li %lli\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 2768}
{"input": "main ( ) { int n , j , a , b , p , q ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( j = 1 ; j <= a && j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) p = j ; } q = a * b / p ; printf ( \"%d %d\" , p , q ) ; } }", "label": 1, "id": 1751}
{"input": "typedef struct number { int A ; int B ; } number ; int lcm ( number * C , int i ) { int j = 2 ; while ( j > 0 ) { if ( j % ( C [ i ] . A ) == 0 && j % ( C [ i ] . B ) == 0 ) return j ; j ++ ; } } int gcd ( number * C , int x , int i ) { return ( C [ i ] . A ) * ( C [ i ] . B ) / x ; } int main ( ) { int T , x , y , i ; scanf ( \"%d\" , & T ) ; number * C ; C = ( number * ) malloc ( sizeof ( number ) * T ) ; for ( i = 0 ; i < T ; i ++ ) { x = lcm ( C , i ) ; y = gcd ( C , x , i ) ; printf ( \"%d %d\" , x , y ) ; } return 0 ; }", "label": 3, "id": 3305}
{"input": "int main ( ) { int b , t , n , list [ 100 ] [ 100 ] , ans [ 100 ] , i , j , val [ 1000 ] ; scanf ( \"%d\" , & t ) ; for ( b = 0 ; b < t ; b ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & list [ i ] [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) ans [ j ] = max ( list , i - 1 , j ) ; int maximum = ans [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( ans [ j ] > maximum ) maximum = ans [ j ] ; } val [ b ] = maximum ; } for ( b = 0 ; b < t ; b ++ ) printf ( \"%d\n\" , val [ b ] ) ; return 0 ; } int max ( int list [ ] [ 20 ] , int n , int j ) { int c = list [ 0 ] [ 0 ] ; if ( n == 0 ) return c ; if ( n > 0 ) { int temp , x , y ; if ( j < n ) x = max ( list , n - 1 , j ) ; else x = 0 ; if ( j > 0 ) y = max ( list , n - 1 , j - 1 ) ; else y = 0 ; if ( x > y ) { return ( x + list [ n ] [ j ] ) ; } else { return ( y + list [ n ] [ j ] ) ; } } return 0 ; }", "label": 2, "id": 24324}
{"input": "int max1 ( int , int ) ; int main ( ) { int a [ 10 ] [ 10 ] , i , j , n , cases , max ; scanf ( \"%d\" , & cases ) ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; a [ 0 ] [ 1 ] = 0 ; while ( cases > 0 ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , a [ i ] [ j ] ) ; a [ i ] [ j ] = max1 ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; } a [ i ] [ j + 1 ] = 0 ; } max = a [ n - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { max = a [ n - 1 ] [ j ] > a [ n - 1 ] [ j + 1 ] ? a [ n - 1 ] [ j ] : a [ n - 1 ] [ j + 1 ] ; } printf ( \"%d\" , max ) ; cases -- ; } } int max1 ( int a , int b ) { return a > b ? a : b ; }", "label": 3, "id": 2642}
{"input": "main ( ) { int a , b , c , i , j , k , gcd , lcm ; scanf ( \"%d\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%d%d\" , & b , & c ) ; for ( j = 1 ; j <= b && j <= c ; j ++ ) { if ( b % j == 0 && c % j == 0 ) { gcd = i ; } } lcm = ( b * c / gcd ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 25763}
{"input": "int arr [ 101 ] [ 101 ] ; int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; -- i ) for ( j = 0 ; j <= i ; ++ j ) { if ( arr [ i + 1 ] [ j ] + arr [ i ] [ j ] > arr [ i + 1 ] [ j + 1 ] + arr [ i ] [ j ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 25347}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , n ; scanf ( \"%d\" , & n ) ; int a [ n ] , min = 1000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 7896}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { unsigned char max_sums_prev [ 100 ] ; unsigned char max_sums_now [ 100 ] ; unsigned char num ; int size = 0 , t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & max_sums_prev [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { memset ( max_sums_now , 0 , sizeof ( unsigned char ) * ( i + 1 ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num ) ; max_sums_now [ j ] = num + max ( j == 0 ? 0 : max_sums_prev [ j - 1 ] , j == i ? 0 : max_sums_prev [ j ] ) ; } memcpy ( max_sums_prev , max_sums_now , sizeof ( unsigned char ) * ( i + 1 ) ) ; } num = 0 ; for ( i = 0 ; i < n ; i ++ ) num = max ( max_sums_prev [ i ] , num ) ; printf ( \"%d\n\" , num ) ; } return 0 ; }", "label": 1, "id": 7636}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b ; long long int st , nd , rem ; scanf ( \"%lld%lld\" , & a , & b ) ; if ( a > b ) { st = a ; nd = b ; } else if ( b > a ) { st = b ; nd = a ; } rem = st % nd ; while ( rem != 0 ) { st = nd ; nd = rem ; rem = st % nd ; } printf ( \"%lld \" , nd ) ; printf ( \"%lld\n\" , a * b / nd ) ; } }", "label": 0, "id": 7863}
{"input": "int gcd ( int a , int b ) { int r = a % b ; while ( r != 0 ) { a = b ; b = r ; r = a % b ; } return b ; } int main ( void ) { int t ; long int a , b ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld%ld\" , & a , & b ) ; long int c = gcd ( a , b ) ; long int d = a * b / c ; printf ( \"%ld %ld\n\" , c , d ) ; t -- ; } return 0 ; }", "label": 0, "id": 22653}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , arr [ 50000 ] , t , s = 0 , i ; scanf ( \"%lu\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lu\" , & arr [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { s = s + arr [ i + 1 ] ; } else { s = s + arr [ i ] ; t = arr [ i ] ; arr [ i ] = arr [ i + 1 ] ; arr [ i + 1 ] = t ; } } printf ( \"%lu\n\" , s ) ; } return 0 ; }", "label": 1, "id": 18477}
{"input": "int main ( ) { int tc , n , i , j , k , c ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { c = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { for ( k = j ; k < n ; k ++ ) a [ k ] = a [ k + 1 ] ; c = c + a [ i ] ; } else { for ( k = i ; k < n ; k ++ ) a [ k ] = a [ k + 1 ] ; c = c + a [ j ] ; } n -- ; } } printf ( \"%d\n\" , c ) ; } }", "label": 2, "id": 21125}
{"input": "int n , temp = 0 ; int cal ( int a [ ] [ n ] , int i , int j , int d ) { if ( i == n - 1 || j == n - 1 ) { if ( temp < d ) temp = d ; } else { cal ( a , i + 1 , j , d + a [ i + 1 ] [ j ] ) ; cal ( a , i + 1 , j + 1 , d + a [ i + 1 ] [ j + 1 ] ) ; } return temp ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , d ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( j = 0 ; j < n ; j ++ ) for ( i = 0 ; i <= j ; i ++ ) { scanf ( \"%d\" , & a [ j ] [ i ] ) ; } d = cal ( a , 0 , 0 , a [ 0 ] [ 0 ] ) ; printf ( \"%d\n\" , d ) ; } return 0 ; }", "label": 2, "id": 22188}
{"input": "int arr [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solution ( int x ) { int k , l ; if ( x == 1 ) return arr [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { arr [ k ] [ l ] += max ( arr [ k + 1 ] [ l ] , arr [ k + 1 ] [ l + 1 ] ) ; } } return arr [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; arr [ k ] [ l ] = w ; } } printf ( \"%d\n\" , solution ( x ) ) ; } return 0 ; }", "label": 0, "id": 6321}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; int row , i , j ; int array [ 102 ] [ 102 ] ; while ( n -- ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & array [ i ] [ j ] ) ; } for ( i = row - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( array [ i + 1 ] [ j ] > array [ i + 1 ] [ j + 1 ] ) array [ i ] [ j ] += array [ i + 1 ] [ j ] ; else array [ i ] [ j ] += array [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , array [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5576}
{"input": "int main ( void ) { long int lcd , a , b , i , gcd ; int n ; scanf ( \"%d\n\" , & n ) ; while ( n -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; break ; } lcd = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcd ) ; } return 0 ; }", "label": 1, "id": 7842}
{"input": "int main ( ) { long int n1 , n2 , x , y , lcm , t , i , gcd ; scanf ( \"%1i\" , & t ) ; while ( t -- ) { scanf ( \"%1i%1i\" , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } gcd = n1 ; lcm = ( x * y ) / gcd ; printf ( \"%1i\\t%1i\n\" , gcd , lcm ) ; } }", "label": 3, "id": 6173}
{"input": "int main ( ) { int t , a , b , i , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = ( a < b ) ? a : b ; i > 0 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { printf ( \"%d \" , i ) ; break ; } } for ( i = ( a > b ) ? a : b ; i <= a * b ; i += ( a > b ) ? a : b ) { if ( i % a == 0 && i % b == 0 ) { printf ( \"%d\n\" , i ) ; break ; } } } return 0 ; }", "label": 1, "id": 15371}
{"input": "long int gcd ( long int a , long int b ) ; int main ( ) { long int t , i , a , b , c , d ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; c = a * b ; printf ( \"%ld \" , gcd ( a , b ) ) ; d = c / gcd ( a , b ) ; printf ( \"%ld\n\" , d ) ; } } long int gcd ( long int a , long int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; }", "label": 0, "id": 13741}
{"input": "int main ( ) { int n , m , i , j ; int a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = m - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 13422}
{"input": "int main ( ) { int i , n , t , mini , num ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & mini ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( \"%d\" , & num ) ; if ( num < mini ) mini = num ; } mini *= n - 1 ; printf ( \"%d\n\" , mini ) ; } return 0 ; }", "label": 0, "id": 2030}
{"input": "int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int m , n , p , q , r ; scanf ( \"%d%d\" , & m , & n ) ; p = m ; q = n ; while ( n != 0 ) { r = m % n ; m = n ; n = r ; } printf ( \"%d\\t%d\n\" , m , ( ( p * q ) / m ) ) ; } return 0 ; }", "label": 1, "id": 2005}
{"input": "int main ( ) { int i , T ; long long gcd , A , B , lcm , x , y ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%I64d %I64d\" , & A , & B ) ; if ( B > A ) { A = A + B ; B = A - B ; A = A - B ; } x = A , y = B ; while ( y != 0 ) { gcd = x % y ; x = y ; y = gcd ; } lcm = A / x * B ; printf ( \"%I64d %I64d\n\" , x , lcm ) ; } return 0 ; }", "label": 1, "id": 1363}
{"input": "static inline int readuint ( ) { int result = 0 ; char c = fgetc ( stdin ) ; do { result = 10 * result + ( c - '0' ) ; } while ( ( c = fgetc ( stdin ) ) != '\n' ) ; return result ; } static int z1 ( int n ) { int result = 0 ; while ( n >= 5 ) { n /= 5 ; result += n ; } return result ; } static unsigned int z2 ( unsigned int n ) { return ( n / 5 + n / 25 + n / 125 + n / 625 ) + ( n / 3125 + n / 15625 + n / 78125 + n / 390625 ) + ( n / 1953125 + n / 9765625 + n / 48828125 + n / 244140625 ) ; } static int z3 ( int n ) { int result = 0 ; while ( n ) { result += n / 5 + n / 25 + n / 125 + n / 625 + n / 3125 + n / 15625 ; n /= 15625 ; } return result ; } int main ( ) { int todo = readuint ( ) ; int buflen = 10 * todo ; char * inoutbuffer = ( char * ) malloc ( buflen ) ; char * p_in = inoutbuffer ; char * p_out = inoutbuffer ; int n , i ; char reverse [ 10 ] ; fread ( inoutbuffer , 1 , buflen , stdin ) ; while ( todo -- ) { n = ( * p_in ) - '0' ; while ( * ( ++ p_in ) != '\n' ) { n = 10 * n + ( * p_in - '0' ) ; } p_in ++ ; n = z2 ( n ) ; i = 0 ; do { reverse [ i ++ ] = n ; n = n / 10 ; } while ( n > 0 ) ; while ( -- i >= 0 ) { * ( p_out ++ ) = '0' + reverse [ i ] ; } * ( p_out ++ ) = '\n' ; } fwrite ( inoutbuffer , 1 , p_out - inoutbuffer , stdout ) ; free ( inoutbuffer ) ; }", "label": 3, "id": 6911}
{"input": "int maximum ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , a [ MAX ] [ MAX ] , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int dp [ MAX ] [ MAX ] = { 0 } ; dp [ 1 ] [ 1 ] = a [ 1 ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { dp [ i ] [ j ] = maximum ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; } } int sum = dp [ n ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( sum < dp [ n ] [ i ] ) sum = dp [ n ] [ i ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 5132}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , min ; scanf ( \"%lld\" , & n ) ; long long int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & arr [ i ] ) ; min = arr [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) if ( min > arr [ i ] ) min = arr [ i ] ; min = min * ( n - 1 ) ; printf ( \"%lld\" , min ) ; } return 0 ; }", "label": 1, "id": 12688}
{"input": "main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int a , b , i , s , gcd ; scanf ( \"%d %d\" , & a , & b ) ; s = ( a < b ) ? a : b ; for ( i = 1 ; i <= s ; i ++ ) if ( a % i == 0 && b % i == 0 ) gcd = i ; printf ( \"%d %d\n\" , gcd , a * b / gcd ) ; } }", "label": 2, "id": 8341}
{"input": "int gcd ( int i , int j ) { if ( j == 0 ) return i ; else return gcd ( j , i % j ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , l , g , temp ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { temp = b ; b = a ; a = temp ; } g = gcd ( a , b ) ; l = ( ( a * b ) / g ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 26105}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; if ( b != 0 ) return gcd ( b , a % b ) ; } int main ( void ) { int i , n , a , b , j , k ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; j = gcd ( a , b ) ; k = a * b / j ; printf ( \"%d %d\n\" , j , k ) ; } return 0 ; }", "label": 1, "id": 22777}
{"input": "int main ( void ) { long int arr [ 50000 ] , min = 100001 , n , i , j ; int t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; min = 100001 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & arr [ j ] ) ; if ( arr [ j ] < min ) min = arr [ j ] ; } printf ( \"%ld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 3344}
{"input": "int main ( ) { int t ; long long n , i , a [ 100000 ] , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%lld\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 1, "id": 10213}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else { int temp ; temp = b ; b = a % b ; a = temp ; return gcd ( a , b ) ; } } int lcm ( int a , int b ) { int l ; l = a * b / gcd ( a , b ) ; return l ; } int main ( void ) { int a , i , b , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; gcd ( a , b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 19941}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int a , b , g , x , y ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( x % y != 0 ) { g = y ; y = x % y ; x = g ; } printf ( \"%d %d\n\" , y , ( a * b ) / y ) ; } return 0 ; }", "label": 1, "id": 1310}
{"input": "int main ( ) { int t = 0 , o = 1 , i = 0 , k = 0 , s = 0 , p = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & p ) ; while ( p ) { int a [ 100 ] , m = 0 ; for ( k = 0 ; k < o ; k ++ ) { scanf ( \"%d\" , & a [ k ] ) ; } for ( k = 0 ; k < o ; k ++ ) { if ( ( m < a [ k ] ) && ( a [ k ] != 1 ) ) m = a [ k ] ; } s = s + m ; m = 0 ; o ++ ; p -- ; } printf ( \"%d\n\" , s ) ; s = 0 ; o = 1 ; } return 0 ; }", "label": 1, "id": 26940}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , i , min , c , a [ 1000000 ] ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } c = min * ( n - 1 ) ; printf ( \"%ld\n\" , c ) ; } }", "label": 0, "id": 26513}
{"input": "int main ( ) { int gcd , t , a , b , lcm , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; ++ i ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 1908}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , N ; scanf ( \"%d\" , & n ) ; N = n ; if ( ( N > 1 && N < 15 ) || ( N > 1 && N < 100 ) || ( N > 1 && N < 50000 ) ) { int a [ n ] ; while ( n -- ) { scanf ( \"%d\" , & a [ N - n ] ) ; } printf ( \"%d\n\" , N + 1 ) ; } } return 0 ; }", "label": 1, "id": 20032}
{"input": "int a [ 1001 ] [ 1001 ] ; int t ; int main ( ) { int i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int k ; int n ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { for ( j = 0 ; j <= k ; j ++ ) { scanf ( \"%d\" , & a [ k ] [ j ] ) ; } } for ( k = n - 2 ; k >= 0 ; k -- ) { for ( j = 0 ; j <= k ; j ++ ) { if ( a [ k + 1 ] [ j ] > a [ k + 1 ] [ j + 1 ] ) { a [ k ] [ j ] = a [ k + 1 ] [ j ] + a [ k ] [ j ] ; } else a [ k ] [ j ] = a [ k ] [ j ] + a [ k + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; for ( k = 0 ; k < n ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ k ] [ j ] = 0 ; } } } return 0 ; }", "label": 0, "id": 3097}
{"input": "int main ( ) { int t , n , i , j , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; } printf ( \"%d \n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9496}
{"input": "int main ( ) { long long int a [ 101 ] [ 101 ] , i , j , s , t , n ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; for ( s = 1 ; s <= n ; s ++ ) { for ( j = 1 ; j <= s ; j ++ ) { scanf ( \"%lld\" , & a [ s ] [ j ] ) ; } } for ( s = n - 1 ; s > 0 ; s -- ) { for ( j = 1 ; j <= s ; j ++ ) { if ( a [ s + 1 ] [ j ] > a [ s + 1 ] [ j + 1 ] ) { a [ s ] [ j ] = a [ s ] [ j ] + a [ s + 1 ] [ j ] ; } else a [ s ] [ j ] = a [ s ] [ j ] + a [ s + 1 ] [ j + 1 ] ; } } printf ( \"%lld\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 7164}
{"input": "int gcdo ( int a , int b ) { int gcd = 0 ; int i ; if ( a > b ) { for ( i = 1 ; i <= b ; i ++ ) if ( ( a % i == 0 ) && ( b % i == 0 ) ) gcd = i ; } else { for ( i = 1 ; i <= a ; i ++ ) if ( ( a % i == 0 ) && ( b % i == 0 ) ) gcd = i ; } return ( gcd ) ; } int main ( void ) { int tc ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { long a , b ; scanf ( \"%ld%ld\" , & a , & b ) ; printf ( \"%ld %ld\n\" , gcdo ( a , b ) , ( a * b ) / gcdo ( a , b ) ) ; } return 0 ; }", "label": 2, "id": 26835}
{"input": "int main ( ) { int a , t , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( n != m ) { if ( n > m ) n = n - m ; else m = m - n ; } printf ( \"%d\n%d\n\" , n , ( a * b ) / n ) ; } return 0 ; }", "label": 1, "id": 4571}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , g ; scanf ( \"%lld %lld\" , & a , & b ) ; long long int l = a * b ; if ( a < b ) a = b + a - ( b = a ) ; do { g = a % b ; a = b ; b = g ; } while ( g != 0 ) ; l = l / a ; printf ( \"%d %lld\n\" , a , l ) ; } return 0 ; }", "label": 0, "id": 22039}
{"input": "int n , i , j , k , l , T , e ; int main ( ) { scanf ( \"%d\" , & T ) ; int M [ T ] ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & n ) ; int N [ ( n * ( n + 1 ) ) / 2 ] ; for ( l = 0 ; l < ( n * ( n + 1 ) ) / 2 ; l ++ ) { N [ l ] = 0 ; } for ( j = 0 ; j < ( n * ( n + 1 ) ) / 2 ; j ++ ) { scanf ( \"%d\" , & e ) ; N [ j ] = e ; } M [ i ] = N [ ( ( n - 2 ) * ( n - 1 ) ) / 2 ] + N [ ( ( n - 1 ) * ( n ) ) / 2 ] + N [ ( ( n - 1 ) * ( n ) ) / 2 + 1 ] ; printf ( \"%d\n\" , M [ i ] ) ; } }", "label": 1, "id": 22406}
{"input": "int main ( ) { int T ; long long int A , B , HCF , LCM , i ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & A , & B ) ; HCF = 1 ; if ( A > B ) { for ( i = 2 ; i <= B ; i ++ ) { if ( A % i == 0 && B % i == 0 ) HCF = i ; } } else { for ( i = 2 ; i <= A ; i ++ ) { if ( A % i == 0 && B % i == 0 ) HCF = i ; } } printf ( \"%lld \" , HCF ) ; if ( ( A % B ) == 0 ) LCM = ( A / B ) * B ; else if ( B % A == 0 ) LCM = ( B / A ) * A ; else { if ( HCF == 1 ) LCM = A * B ; else LCM = HCF * ( A / HCF ) * ( B / HCF ) ; } printf ( \"%lld\n\" , LCM ) ; } return 0 ; }", "label": 2, "id": 25580}
{"input": "int fastread ( ) { char c = 0 ; int input ; c = getchar_unlocked ( ) ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int t , n , i , j ; int arr [ 102 ] [ 102 ] ; t = fastread ( ) ; while ( t -- ) { n = fastread ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = fastread ( ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] += ( ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17788}
{"input": "int max ; int add ( int l , int arr [ ] [ l ] , int n , int i , int j , int count ) { if ( ! ( i < l && j < l ) ) return 0 ; else { count = count + arr [ i ] [ j ] + add ( l , arr , n + 1 , i + 1 , j , count ) ; if ( count > max ) max = count ; if ( i < l && j < l ) count = count + arr [ i ] [ j ] + add ( l , arr , n + 1 , i + 1 , j + 1 , count ) ; if ( count > max ) max = count ; } return 0 ; } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int m , s ; scanf ( \"%d\" , & m ) ; int a [ m ] [ m ] ; int i , j ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } s = add ( m , a , 1 , 0 , 0 , 0 ) ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 141}
{"input": "int main ( void ) { int n , a , b , min , max , gcd , lcm , i ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d %d\" , & a , & b ) ; min = a > b ? b : a ; max = a > b ? a : b ; for ( i = 1 ; i <= min ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; } } lcm = a * b / gcd ; printf ( \"\n%d %d\" , gcd , lcm ) ; n -- ; } return 0 ; }", "label": 1, "id": 6099}
{"input": "long int gcd ( long int , long int ) ; int main ( void ) { int i , T ; long int A , B , gcd1 ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld%ld\" , & A , & B ) ; gcd1 = gcd ( A , B ) ; printf ( \"%ld %ld\" , gcd1 , ( A * B ) / gcd1 ) ; printf ( \"\n\" ) ; } return 0 ; } long int gcd ( long int a , long int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 1700}
{"input": "int main ( ) { int t , a [ 50000 ] , s , max , n , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { s = 0 ; max = - 1000000 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( max < a [ j ] ) max = a [ j ] ; s = s + a [ j ] ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 13847}
{"input": "int main ( ) { int n1 , n2 , gcd , lcm , t , i , j ; scanf ( \"%d\n\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; if ( n1 < n2 ) { for ( j = n1 ; j <= n2 ; j ++ ) { if ( n1 % j == 0 && n2 % j == 0 ) { gcd = j ; } else { gcd = 1 ; } } } else { for ( j = n2 ; j <= n1 ; j ++ ) { if ( n2 % j == 0 && n1 % j == 0 ) { gcd = j ; } else { gcd = 1 ; } } } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 23848}
{"input": "int maxi ( int a , int b ) { return a < b ? b : a ; } int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( \"%d\" , & n ) ; int vec1 [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & vec1 [ i ] [ j ] ) ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { vec1 [ i ] [ 0 ] = vec1 [ i - 1 ] [ j ] + vec1 [ i ] [ j ] ; } else if ( j == i ) { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j - 1 ] + vec1 [ i ] [ j ] ; } else if ( vec1 [ i - 1 ] [ j ] > vec1 [ i - 1 ] [ j - 1 ] ) { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j ] + vec1 [ i ] [ j ] ; } else { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j - 1 ] + vec1 [ i ] [ j ] ; } } } max = vec1 [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( vec1 [ n - 1 ] [ i ] > max ) max = vec1 [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 2457}
{"input": "int main ( ) { unsigned long long t , a , b , temp , i , lcm , gcd ; scanf ( \"%llu\" , & t ) ; while ( t -- ) { scanf ( \"%llu%llu\" , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } for ( i = b ; i <= a * b ; i += b ) { if ( i % a == 0 ) { lcm = i ; break ; } } for ( i = a ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; break ; } } printf ( \"%llu %llu\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 25590}
{"input": "int main ( ) { int i , j , t , n , x ; int a [ n ] ; scanf ( \"%d\" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 - i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { t = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = t ; } } } printf ( \"%d\" , a [ 0 ] * ( -- n ) ) ; } return 0 ; }", "label": 3, "id": 3731}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int hcf = gcd ( a , b ) ; printf ( \"%d %ld\n\" , hcf , ( ( long ) ( ( a / hcf ) * b ) ) ) ; } return 0 ; }", "label": 1, "id": 16862}
{"input": "int mat [ 100 ] [ 100 ] ; int ans , n ; void max_sum ( ) ; int main ( ) { int i , j , t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { t -- ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } ans = 0 ; max_sum ( ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; } void max_sum ( ) { int i , j , max = 0 ; ans = mat [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) { max = mat [ i - 1 ] [ j ] ; if ( j != 0 ) { if ( mat [ i - 1 ] [ j - 1 ] > max ) max = mat [ i - 1 ] [ j - 1 ] ; } mat [ i ] [ j ] += max ; if ( ( i == n - 1 ) && mat [ i ] [ j ] > ans ) ans = mat [ i ] [ j ] ; } }", "label": 0, "id": 928}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int num ; scanf ( \"%d\" , & num ) ; int min = num ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & num ) ; if ( num < min ) min = num ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 6744}
{"input": "int main ( void ) { long long int t , n , i , j , c , max ; long long int sum = 0 ; long long int a [ 100 ] [ 100 ] ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { c = sum = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%lld\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { max = 0 ; if ( i == 0 ) { sum += a [ i ] [ c ] ; continue ; } max = a [ i ] [ c ] ; if ( max <= a [ i ] [ c + 1 ] ) { max = a [ i ] [ c + 1 ] ; c += 1 ; } sum += max ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 1581}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , n , temp , a [ 100000 ] , sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; } } for ( i = 0 ; i < n ; i ++ ) { sum = sum + a [ i ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 25063}
{"input": "int main ( ) { int t = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; int i = 0 , j = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < ( i + 1 ) ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; long int max = 0 ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( j > 0 ) { if ( j != i ) { if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } else a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } else a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } } max = a [ n - 1 ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) if ( a [ n - 1 ] [ j ] > max ) max = a [ n - 1 ] [ j ] ; printf ( \"%ld\n\" , max ) ; } return 0 ; }", "label": 0, "id": 1686}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 2952}
{"input": "int main ( ) { int i , j , k , n , max = 0 , max1 = 0 ; int b [ 100 ] ; int a [ 100 ] [ 100 ] ; int arr [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & b [ i ] ) ; for ( j = 0 ; j < b [ i ] ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } } int z ; for ( z = 0 ; z < 100 ; z ++ ) { arr [ z ] = 0 ; } for ( i = 0 ; i < b [ i ] ; i ++ ) { arr [ 0 ] = a [ 0 ] [ 0 ] ; for ( j = 1 ; j < b [ i ] ; j ++ ) { for ( k = j ; k >= 0 ; k -- ) { if ( k == 0 ) { max = arr [ k ] ; } else { if ( arr [ k ] < arr [ k - 1 ] ) { max = arr [ k - 1 ] ; } else if ( arr [ k ] > arr [ k - 1 ] ) { max = arr [ k ] ; } } arr [ k ] = max + a [ j ] [ k ] ; } for ( k = 0 ; k < b [ i ] ; k ++ ) { if ( arr [ k ] > max1 ) { max1 = arr [ k ] ; } } } } printf ( \"%d\" , max1 ) ; }", "label": 3, "id": 23704}
{"input": "int input ( ) { int n = 0 ; char ch ; ch = getchar_unlocked ( ) ; while ( ch >= '0' && ch <= '9' ) { n = ( n << 3 ) + ( n << 1 ) + ( ch - '0' ) ; ch = getchar_unlocked ( ) ; } return n ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int num , i , j , max ; scanf ( \"%d\" , & num ) ; int arr [ num ] [ num ] ; for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = num - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26225}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26284}
{"input": "int main ( ) { int i , j , t , a , b , n , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; n = ( a < b ? a : b ) ; if ( a % n == 0 && b % n == 0 ) gcd = n ; else { for ( i = n - 1 ; a % i != 0 || b % i != 0 ; i -- ) { } gcd = i ; } lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 17852}
{"input": "void min ( int ) ; int main ( ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- != 0 ) { scanf ( \"%d\" , & n ) ; min ( n ) ; } return 0 ; } void min ( int n ) { long d , e ; int i ; scanf ( \"%ld\" , & d ) ; e = d ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%ld\" , & d ) ; if ( d < e ) e = d ; } printf ( \"\n%ld\n\" , e * ( n - 1 ) ) ; }", "label": 1, "id": 972}
{"input": "int maxpath ( void ) ; int main ( ) { int output [ 1000 ] = { 0 } ; int n , k ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { output [ k ] = maxpath ( ) ; } for ( k = 0 ; k < n ; k ++ ) printf ( \"%d\n\" , output [ k ] ) ; return 0 ; } int maxpath ( ) { int arr [ 100 ] = { 0 } ; int size , i , j , temp = 0 , temp1 = 0 , max = - 1 , prev = 0 ; scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & temp ) ; if ( ( temp + arr [ j ] ) >= ( temp + prev ) || j == 0 ) { prev = arr [ j ] ; arr [ j ] = arr [ j ] + temp ; } else { temp1 = prev ; prev = arr [ j ] ; arr [ j ] = temp + temp1 ; } if ( max < arr [ j ] ) max = arr [ j ] ; } } return max ; }", "label": 0, "id": 17635}
{"input": "int gcd_euclid ( int a , int b ) { if ( b == 0 ) return a ; if ( a >= b && b > 0 ) return gcd_euclid ( b , a % b ) ; return 1 ; } int main ( void ) { int t , a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = gcd_euclid ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 10941}
{"input": "void main ( ) { int t , g , rem , nr , dr ; scanf ( \"%d\" , & t ) ; for ( g = 1 ; g <= t ; g ++ ) { int a , b , hcf , lcm ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { nr = a ; dr = b ; } else { nr = b ; dr = a ; } rem = nr % dr ; while ( rem != 0 ) { nr = dr ; dr = rem ; rem = nr % dr ; } hcf = dr ; lcm = a * b / hcf ; printf ( \"hcf is %d and lcm is %d\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 13674}
{"input": "int main ( void ) { int t , arr1 [ 100 ] [ 100 ] , arr2 [ 100 ] [ 100 ] , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; i = 0 ; while ( i < n ) { j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & arr1 [ i ] [ j ] ) ; j ++ ; } i ++ ; } arr2 [ 0 ] [ 0 ] = arr1 [ 0 ] [ 0 ] ; i = 1 ; while ( i < n ) { j = 0 ; while ( j <= i ) { if ( j == 0 ) { arr2 [ i ] [ j ] = arr2 [ i - 1 ] [ j ] ; } else if ( j == i ) { arr2 [ i ] [ j ] = arr2 [ i - 1 ] [ j - 1 ] ; } else { arr2 [ i ] [ j ] = ( arr2 [ i - 1 ] [ j - 1 ] > arr2 [ i - 1 ] [ j ] ? arr2 [ i - 1 ] [ j - 1 ] : arr2 [ i - 1 ] [ j ] ) ; } arr2 [ i ] [ j ] += arr1 [ i ] [ j ] ; j ++ ; } printf ( \"\n\" ) ; i ++ ; } i = 0 ; j = arr2 [ n - 1 ] [ 0 ] ; while ( i < n ) { if ( arr2 [ n - 1 ] [ i ] > j ) { j = arr2 [ n - 1 ] [ i ] ; } i ++ ; } printf ( \"%d \" , j ) ; } return 0 ; }", "label": 0, "id": 8598}
{"input": "int main ( void ) { int t , n , count = 0 , temp = 1 ; int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] >= a [ i ] ) { count += ( temp * ( temp + 1 ) ) / 2 ; temp = 1 ; i = i - 1 ; } else { temp ++ ; } } printf ( \"%d\" , count ) ; } return 0 ; }", "label": 2, "id": 18169}
{"input": "int max ( int x , int y ) { if ( x <= y ) return y ; else return x ; } int main ( ) { int a [ 101 ] [ 101 ] ; int b , i , j , t , n ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , a [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { b = max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; a [ i ] [ j ] = a [ i ] [ j ] + b ; } } printf ( \"\n%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 23024}
{"input": "int main ( ) { int t , n ; int i , j ; int arr [ 10 ] [ 10 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 9205}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; long long int n ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; long long int min = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 13031}
{"input": "int hcf ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , n , l ; scanf ( \"%lld%lld\" , & a , & b ) ; n = hcf ( a , b ) ; l = ( a * b ) / n ; printf ( \"%lld %lld\n\" , n , l ) ; } return 0 ; } int hcf ( int p , int q ) { if ( p == q ) return p ; else if ( p > q ) return hcf ( p - q , q ) ; else return hcf ( p , q - p ) ; }", "label": 0, "id": 4808}
{"input": "int main ( void ) { unsigned long long T , N , i , j , max ; scanf ( \"%llu\" , & T ) ; while ( T -- ) { scanf ( \"%llu\" , & N ) ; unsigned long long A [ N ] [ N ] ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%llu\" , & A [ i ] [ j ] ) ; } for ( i = N - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] += ( A [ i + 1 ] [ j + 1 ] > A [ i + 1 ] [ j ] ) ? A [ i + 1 ] [ j + 1 ] : A [ i + 1 ] [ j ] ; printf ( \"%llu\n\" , A [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 8443}
{"input": "int main ( ) { int n , T , i , j ; int a [ 102 ] [ 102 ] ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7074}
{"input": "int main ( ) { long long int t , n , i , a [ 100000 ] , min = 2147483647 , count ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; count = 0 ; min = 2147483647 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } count = min * ( n - 1 ) ; printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 0, "id": 18496}
{"input": "int main ( void ) { long int n ; long int n1 [ 10 ] , n2 [ 10 ] , r [ 10 ] , p [ 10 ] , l [ 10 ] , i ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld%ld\" , & n1 [ i ] , & n2 [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) p [ i ] = n1 [ i ] * n2 [ i ] ; for ( i = 0 ; i < n ; i ++ ) { while ( n2 [ i ] > 0 ) { r [ i ] = n1 [ i ] % n2 [ i ] ; n1 [ i ] = n2 [ i ] ; n2 [ i ] = r [ i ] ; } } for ( i = 0 ; i < n ; i ++ ) l [ i ] = p [ i ] / n1 [ i ] ; for ( i = 0 ; i < n ; i ++ ) { printf ( \"%ld\\t\" , n1 [ i ] ) ; printf ( \"%ld\" , l [ i ] ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 3, "id": 4850}
{"input": "long int gcd ( int n1 , int n2 ) { if ( n2 == 0 ) return n1 ; else return gcd ( n2 , n1 % n2 ) ; } int main ( ) { int t ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { long int n1 , n2 ; scanf ( \"%ld%ld\" , & n1 , & n2 ) ; long int res = gcd ( n1 , n2 ) ; long int res1 = ( n1 * n2 ) / res ; printf ( \"%ld %ld\n\" , res , res1 ) ; } return 0 ; }", "label": 0, "id": 2205}
{"input": "int main ( ) { int b [ 101 ] [ 101 ] , a [ 100000 ] , i , j , n , k = 1 , x [ 1000 ] , t , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { x [ i ] = 0 ; } for ( m = 0 ; m < t ; m ++ ) { scanf ( \"\n%d\" , & n ) ; for ( i = 0 ; i < 100000 ; i ++ ) { a [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & b [ i ] [ j ] ) ; } } a [ 1 ] = b [ 0 ] [ 0 ] ; a [ 2 ] = b [ 1 ] [ 0 ] + b [ 0 ] [ 0 ] ; a [ 3 ] = b [ 1 ] [ 1 ] + b [ 0 ] [ 0 ] ; a [ 4 ] = a [ 2 ] + b [ 2 ] [ 0 ] ; a [ 5 ] = a [ 2 ] + b [ 2 ] [ 1 ] ; a [ 6 ] = a [ 3 ] + b [ 2 ] [ 1 ] ; a [ 7 ] = a [ 3 ] + b [ 2 ] [ 2 ] ; k = 8 ; for ( i = 3 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { a [ k ] = b [ i ] [ j ] + a [ ( i - 1 ) * ( i - 1 ) - i + j + 3 ] ; ++ k ; a [ k ] = b [ i ] [ j + 1 ] + a [ ( i - 1 ) * ( i - 1 ) - i + j + 3 ] ; ++ k ; } } for ( i = 1 ; i < ( n * n ) ; i ++ ) { if ( x [ m ] < a [ i ] ) { x [ m ] = a [ i ] ; } } } i = 0 ; while ( i < t ) { printf ( \"\n%d\" , x [ i ] ) ; i ++ ; } return 0 ; }", "label": 1, "id": 7598}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int i , j , k ; scanf ( \"%d\" , & k ) ; int a [ k ] [ k ] ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = k - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= 1 ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 13838}
{"input": "int a [ 100 ] [ 100 ] ; int dp [ 101 ] [ 101 ] ; int main ( ) { int t , n , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) dp [ i ] [ j ] = 0 ; dp [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( dp [ i - 1 ] [ j ] + a [ i ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + a [ i ] [ j ] ; dp [ i ] [ j + 1 ] = dp [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } max = dp [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( dp [ n - 1 ] [ i ] > max ) max = dp [ n - 1 ] [ i ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 845}
{"input": "int n , d [ 100 ] [ 100 ] ; int maxsum ( int a [ ] [ n ] , int i , int j , int k ) { if ( d [ i ] [ j ] != - 1 ) return d [ i ] [ j ] ; if ( i == ( k - 1 ) ) { d [ i ] [ j ] = a [ i ] [ j ] ; return a [ i ] [ j ] ; } else { d [ i ] [ j ] = a [ i ] [ j ] + ( max ( maxsum ( a , i + 1 , j , k ) , maxsum ( a , i + 1 , j + 1 , k ) ) ) ; return d [ i ] [ j ] ; } } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; d [ i ] [ j ] = - 1 ; } } printf ( \"%d\n\" , maxsum ( a , 0 , 0 , n ) ) ; } return 0 ; }", "label": 0, "id": 18039}
{"input": "int main ( ) { int i , j ; int a , n , arr [ 102 ] [ 102 ] ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11506}
{"input": "int gcd ( int x , int y ) ; int main ( ) { int * a , * b , hcf , lcm ; int n , i ; printf ( \"enter no. of line\n\" ) ; scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; b = ( int * ) malloc ( n * sizeof ( int ) ) ; printf ( \"enter the pairs\n\" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , ( a + i ) , ( b + i ) ) ; } for ( i = 0 ; i < n ; i ++ ) { hcf = gcd ( * ( a + i ) , * ( b + i ) ) ; lcm = ( * ( a + i ) * * ( b + i ) ) / hcf ; printf ( \"hcf and lcm is%d %d\n\" , hcf , lcm ) ; } return 0 ; } int gcd ( int x , int y ) { if ( x == 0 ) return y ; while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 1, "id": 26748}
{"input": "int hcf ( int a , int b ) { if ( b == 0 ) return a ; else { return hcf ( b , a % b ) ; } } int main ( void ) { int a ; long int b , c , gcd , temp , big , small , lcm ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%ld %ld\" , & b , & c ) ; gcd = hcf ( b , c ) ; lcm = b * c / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 10846}
{"input": "int main ( ) { int n , row , i , j , num ; int p ; int temp , sum ; int a [ 5 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { sum = 0 ; scanf ( \"%d\" , & row ) ; for ( j = 1 ; j <= row ; j ++ ) { p = j ; temp = 0 ; while ( p != 0 ) { scanf ( \"%d\" , & num ) ; if ( j >= 2 && num > temp ) { temp = num ; } p -- ; } sum = sum + temp ; a [ i ] = sum ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , a [ i ] ) ; } return 0 ; }", "label": 3, "id": 13084}
{"input": "int main ( void ) { int T , A , B , G , L ; scanf ( \"%d\" , & T ) ; while ( T ) { scanf ( \"%d%d\" , & A , & B ) ; L = A * B ; while ( A != B ) { if ( A < B ) B = B - A ; else A = A - B ; } G = A ; L = L / G ; printf ( \"%d %d\" , G , L ) ; printf ( \"\n\" ) ; T -- ; } return 0 ; }", "label": 1, "id": 15122}
{"input": "int fact ( int a , int b ) { if ( a % b == 0 ) return b ; else { int j = a % b ; a = b ; b = j ; fact ( a , b ) ; } } int main ( ) { int gcd , lcm , n1 , n2 , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { gcd = fact ( n1 , n2 ) ; lcm = ( n2 * n1 ) / gcd ; printf ( \"%d\n%d\" , gcd , lcm ) ; } else { gcd = fact ( n2 , n1 ) ; lcm = ( n2 * n1 ) / gcd ; printf ( \"%d\n%d\" , gcd , lcm ) ; } } return 0 ; }", "label": 1, "id": 24567}
{"input": "int gcd ( int a , int b ) { int x , y , z ; if ( b > a ) { x = b ; y = a ; } else { x = a ; y = b ; } z = ( int ) x / y ; while ( ( x - ( z * y ) ) != 0 ) { int t ; t = y ; y = ( x - ( z * y ) ) ; x = t ; z = x / y ; } return y ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int a , b , c , d ; scanf ( \"%d%d\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%d %d\n\" , c , ( b * a / c ) ) ; t -- ; } }", "label": 1, "id": 21242}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int i = 0 ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int max = 0 , min = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { min = max ; max = a [ i ] ; } else if ( a [ i ] > min ) { min = a [ i ] ; } } printf ( \"%d\n\" , min ) ; } return 0 ; }", "label": 1, "id": 10041}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n1 , n2 , gcd , lcm , i ; scanf ( \"%d%d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = n1 * n2 ; printf ( \"%d %d\" , gcd , lcm ) ; } }", "label": 1, "id": 11381}
{"input": "int t [ 100 ] [ 100 ] ; int s [ 100 ] [ 100 ] ; int lines ; int main ( ) { int i , j , nt ; scanf ( \"%d\" , & nt ) ; while ( nt > 0 ) { scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & t [ i ] [ j ] ) ; s [ i ] [ j ] = 0 ; } printf ( \"%d\n\" , function ( 0 , 0 ) ) ; nt -- ; } } int function ( int i , int j ) { int l , m ; if ( i < lines && j < lines ) { if ( s [ i + 1 ] [ j ] == 0 ) { l = function ( i + 1 , j ) + t [ i ] [ j ] ; } else { l = s [ i + 1 ] [ j ] ; } if ( s [ i + 1 ] [ j + 1 ] == 0 ) m = function ( i + 1 , j + 1 ) + t [ i ] [ j ] ; else m = s [ i + 1 ] [ j + 1 ] ; if ( l > m ) s [ i ] [ j ] = l ; else s [ i ] [ j ] = m ; return s [ i ] [ j ] ; } else { return 0 ; } }", "label": 1, "id": 11493}
{"input": "int gcd ( int x , int y ) { if ( y == 0 ) return x ; else return gcd ( y , x % y ) ; } int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B , hcf ; scanf ( \"%d %d\" , & A , & B ) ; hcf = gcd ( A , B ) ; printf ( \"%d %d\n\" , hcf , ( A * B ) / hcf ) ; } return 0 ; }", "label": 1, "id": 16232}
{"input": "int n ; int findmax ( int a [ ] [ n ] , int i , int j ) { int x , y ; if ( j < n && i < n ) { x = a [ i ] [ j ] + findmax ( a , i + 1 , j ) ; y = a [ i ] [ j ] + findmax ( a , i + 1 , j + 1 ) ; x = x > y ? x : y ; return x ; } else return 0 ; } int main ( ) { int i , j , k , l , t , ans = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { ans = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } ans = findmax ( a , 0 , 0 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 2, "id": 6857}
{"input": "int main ( ) { int t ; long long int i , n , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; x = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < x ) x = a [ i ] ; } x = x * ( n - 1 ) ; printf ( \"%lld\n\" , x ) ; } return 0 ; }", "label": 0, "id": 4297}
{"input": "int gcd ( int p , int q ) { } int main ( ) { int n , j , a , t , b , p , q ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d%d\" , & p , & q ) ; a = p ; b = q ; while ( a % b != 0 ) { t = b ; a = a % b ; b = a ; a = t ; } printf ( \"%d \" , b ) ; n -- ; printf ( \"%d\n\" , ( ( p * q ) / b ) ) ; } }", "label": 1, "id": 27000}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { int n ; scanf ( \"%d\" , & n ) ; int i , j ; int t [ 101 ] [ 101 ] ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { int k ; scanf ( \"%d\" , & k ) ; t [ i ] [ j ] = k ; } } int tabla [ 101 ] [ 101 ] ; tabla [ 1 ] [ 1 ] = t [ 1 ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { tabla [ i ] [ j ] = 0 ; if ( j != i ) { if ( tabla [ i ] [ j ] < tabla [ i - 1 ] [ j ] + t [ i ] [ j ] ) tabla [ i ] [ j ] = tabla [ i - 1 ] [ j ] + t [ i ] [ j ] ; } if ( j > 1 ) { if ( tabla [ i ] [ j ] < tabla [ i - 1 ] [ j ] + t [ i - 1 ] [ j - 1 ] ) tabla [ i ] [ j ] = tabla [ i - 1 ] [ j - 1 ] + t [ i ] [ j ] ; } } } int ma = - 10 ; for ( i = 1 ; i <= n ; i ++ ) { if ( ma < tabla [ n ] [ i ] ) ma = tabla [ n ] [ i ] ; } printf ( \"%d\n\" , ma ) ; T -- ; } }", "label": 1, "id": 23676}
{"input": "int max ( int c , int b ) { return c > b ? c : b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int m , a [ 100 ] [ 100 ] , i , j , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ 1 ] [ 0 ] += a [ 0 ] [ 0 ] ; a [ 1 ] [ 1 ] += a [ 0 ] [ 0 ] ; for ( j = 2 ; j < n ; j ++ ) a [ j ] [ 0 ] += a [ j - 1 ] [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) ; m = a [ n - 1 ] [ 0 ] ; for ( j = 0 ; j <= i ; j ++ ) if ( m < a [ n - 1 ] [ j ] ) m = a [ n - 1 ] [ j ] ; printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 1, "id": 14483}
{"input": "int GCD ( int , int ) ; long long int LCM ( int , int ) ; main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int x , y , w , u ; scanf ( \"%lld %lld\" , & x , & y ) ; w = GCD ( x , y ) ; u = LCM ( x , y ) ; printf ( \"%lld %lld\n\" , w , u ) ; } } int GCD ( int a , int b ) { if ( ! a ) return b ; return GCD ( b % a , a ) ; } long long int LCM ( int a , int b ) { long long int z ; z = ( ( a * b ) / GCD ( a , b ) ) ; return ( z ) ; }", "label": 1, "id": 9072}
{"input": "int main ( ) { int m , i , j , x , y , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & m ) ; long long a [ m ] [ m ] ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%lld\" , & a [ i ] [ j ] ) ; for ( i = m - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j <= m - 1 ; j ++ ) { x = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; y = a [ i ] [ j + 1 ] + a [ i - 1 ] [ j ] ; if ( x > y ) a [ i - 1 ] [ j ] = x ; else a [ i - 1 ] [ j ] = y ; } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11363}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) if ( n <= 1000 ) { { int r , i , j , max , sum = 0 , a [ 100 ] , k ; scanf ( \"%d\" , & r ) ; if ( r < 100 ) { scanf ( \"%d\" , & k ) ; for ( i = 2 ; i <= r ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } max = a [ 0 ] ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] > max ) { max = a [ j ] ; } } sum = sum + max ; } printf ( \"%d\n\" , sum ) ; } } } return 0 ; }", "label": 1, "id": 11513}
{"input": "int main ( ) { long long int a [ 50000 ] , b [ 50000 ] , low , m , i , j , k ; int n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & m ) ; for ( j = 0 ; j < m ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; if ( j == 0 ) { low = a [ j ] ; } if ( a [ j ] < low ) { low = a [ j ] ; } } b [ i ] = low * ( m - 1 ) ; } for ( i = 0 ; i < n ; i ++ ) printf ( \"%ld\n\" , b [ i ] ) ; return 0 ; }", "label": 0, "id": 14874}
{"input": "int input ( ) { int t = 0 ; char ch = getchar_unlocked ( ) ; while ( ch < 33 ) ch = getchar_unlocked ( ) ; while ( ch > 33 ) { t = ( t << 3 ) + ( t << 1 ) + ch - '0' ; ch = getchar_unlocked ( ) ; } return t ; } int sum ( int i , int j ) ; int n ; int A [ 100 ] [ 100 ] , B [ 100 ] [ 100 ] ; int main ( ) { int t , i , j ; t = input ( ) ; while ( t -- ) { n = input ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { A [ i ] [ j ] = input ( ) ; B [ i ] [ j ] = - 1 ; } } printf ( \"%d\n\" , sum ( 0 , 0 ) ) ; } return 0 ; } int sum ( int i , int j ) { int t1 , t2 ; if ( i == n ) return 0 ; if ( B [ i ] [ j ] != - 1 ) return B [ i ] [ j ] ; t1 = sum ( i + 1 , j ) ; t2 = sum ( i + 1 , j + 1 ) ; B [ i ] [ j ] = max ( t1 , t2 ) + A [ i ] [ j ] ; return B [ i ] [ j ] ; }", "label": 0, "id": 27025}
{"input": "void main ( ) { int T , N , i , j , maxSum ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; int Triangle [ N ] [ N ] , SumTri [ N ] [ N ] ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & Triangle [ i ] [ j ] ) ; SumTri [ i ] [ j ] = 0 ; } SumTri [ 0 ] [ 0 ] = Triangle [ 0 ] [ 0 ] ; if ( N > 1 ) { SumTri [ 1 ] [ 0 ] = SumTri [ 0 ] [ 0 ] + Triangle [ 1 ] [ 0 ] ; SumTri [ 1 ] [ 1 ] = SumTri [ 0 ] [ 0 ] + Triangle [ 1 ] [ 1 ] ; } for ( i = 1 ; i < N ; i ++ ) { SumTri [ i ] [ 0 ] = SumTri [ i - 1 ] [ 0 ] + Triangle [ i ] [ 0 ] ; SumTri [ i ] [ i ] = SumTri [ i - 1 ] [ i - 1 ] + Triangle [ i ] [ i ] ; } for ( i = 1 ; i < N ; i ++ ) for ( j = 1 ; j < i ; j ++ ) { if ( SumTri [ i - 1 ] [ j ] > SumTri [ i - 1 ] [ j - 1 ] ) SumTri [ i ] [ j ] = SumTri [ i - 1 ] [ j ] + Triangle [ i ] [ j ] ; else SumTri [ i ] [ j ] = SumTri [ i - 1 ] [ j - 1 ] + Triangle [ i ] [ j ] ; } maxSum = SumTri [ N - 1 ] [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) if ( SumTri [ N - 1 ] [ i ] > maxSum ) maxSum = SumTri [ N - 1 ] [ i ] ; printf ( \"%d\n\" , maxSum ) ; } }", "label": 0, "id": 9743}
{"input": "int min ( int a , int b ) { if ( a > b ) return b ; else return a ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int gcd ( int a , int b ) { int i , j , k = 0 ; i = min ( a , b ) ; j = max ( a , b ) ; while ( 1 ) { if ( j % i == 0 ) return i ; else { k = j % i ; j = i ; i = k ; if ( k == 1 ) return 1 ; } } } long long int lcm ( int a , int b ) { int i , j , k = 0 ; i = max ( a , b ) ; j = min ( a , b ) ; int x = 1 ; while ( 1 ) { k = i * x ; if ( k % j == 0 ) return k ; else x ++ ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; long long int c , d ; c = gcd ( a , b ) ; d = lcm ( a , b ) ; printf ( \"%lld %lld\n\" , c , d ) ; } return 0 ; }", "label": 1, "id": 16915}
{"input": "int main ( ) { int T , A , B ; int N , D , R ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { N = A ; D = B ; } else { N = B ; D = A ; } R = A % B ; while ( R != 0 ) { N = D ; D = R ; R = N % D ; } printf ( \"%d %d\n\" , D , A / D * B ) ; } return 0 ; }", "label": 1, "id": 10476}
{"input": "int main ( void ) { int n1 , n2 , i , g , m , t ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == 0 && n2 % i == 0 ) { g = i ; } } m = ( n1 > n2 ) ? n1 : n2 ; while ( n1 ) { if ( m % n1 == 0 && m % n2 == 0 ) { break ; } m ++ ; } printf ( \"%d\n%d\n\" , g , m ) ; t -- ; } return ( 0 ) ; }", "label": 2, "id": 21336}
{"input": "int max ( a , b ) { if ( a > b ) return a ; return b ; } int main ( ) { int test , n , i , j , ar [ 101 ] [ 101 ] ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; i = 0 ; while ( i < n ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; i ++ ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) ar [ i ] [ j ] = ar [ i ] [ j ] + max ( ar [ i + 1 ] [ j ] , ar [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 18836}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; else return ( gcd ( b , a % b ) ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , c ; scanf ( \"%ld %ld\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%ld %ld\n\" , c , a * b / c ) ; } return 0 ; }", "label": 0, "id": 12674}
{"input": "int main ( ) { int t , a , b , hcf , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( a % b != 0 ) { a = a % b ; hcf = a ; a = b ; b = hcf ; } printf ( \"%d %d\n\" , b , ( x * y ) / b ) ; } return 0 ; }", "label": 1, "id": 22861}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , j , k , c , x = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lld \" , & a [ j ] ) ; for ( j = 0 ; j < n ; j ++ ) { c = j + 1 ; for ( k = j ; k < c ; k ++ ) { if ( a [ k ] <= a [ k + 1 ] ) { c ++ ; } else break ; } if ( c > 0 ) x ++ ; } printf ( \"%lld\n\" , x + n ) ; } return 0 ; }", "label": 1, "id": 24976}
{"input": "int main ( ) { long long n , i , t ; long long c ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long a [ 500000 ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; c = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { a [ i ] = a [ i + 1 ] ; c += a [ i + 1 ] ; } else { a [ i + 1 ] = a [ i ] ; c += a [ i ] ; } } printf ( \"%lld\n\" , c ) ; } return 0 ; }", "label": 1, "id": 4104}
{"input": "int main ( ) { int j , i , a [ 100 ] [ 100 ] , n , test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23134}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { long int t , a , b , i , g , l ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; } inline long int gcd ( long int a , long int b ) { long int t ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } return a ; }", "label": 0, "id": 10038}
{"input": "int main ( ) { int m , n , i , j , t ; int * * l ; scanf ( \"%d \" , & n ) ; for ( ; n > 0 ; n -- ) { scanf ( \"%d \" , & m ) ; l = ( int * * ) calloc ( m , sizeof ( int * ) ) ; for ( i = 0 ; i < m ; i ++ ) { l [ i ] = ( int * ) calloc ( m , sizeof ( int ) ) ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { l [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & l [ i ] [ j ] ) ; } } for ( i = 1 ; i < m ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { if ( j == 0 ) { l [ i ] [ 0 ] = l [ i - 1 ] [ 0 ] + l [ i ] [ 0 ] ; } else if ( i == j ) { l [ i ] [ j ] = l [ i - 1 ] [ j - 1 ] + l [ i ] [ j ] ; } else { if ( l [ i - 1 ] [ j - 1 ] > l [ i - 1 ] [ j ] ) { l [ i ] [ j ] = l [ i ] [ j ] + l [ i - 1 ] [ j - 1 ] ; } else { l [ i ] [ j ] = l [ i ] [ j ] + l [ i - 1 ] [ j ] ; } } } } i = m - 1 ; t = l [ i ] [ 0 ] ; for ( j = 1 ; j < m ; j ++ ) { if ( t < l [ i ] [ j ] ) { t = l [ i ] [ j ] ; } } printf ( \"%d\n\" , t ) ; } return 0 ; }", "label": 3, "id": 26957}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int i , t , a , b , temp ; long long int g , l ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 20368}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { unsigned long a , b , gcd , lcm , num , deno , r ; scanf ( \"%lu %lu\" , & a , & b ) ; if ( a > b ) { num = a ; deno = b ; } else { num = b ; deno = a ; } r = num % deno ; while ( r != 0 ) { num = deno ; deno = r ; r = num % deno ; } gcd = deno ; lcm = ( a * b ) / gcd ; printf ( \"%lu %lu\n\" , gcd , lcm ) ; } }", "label": 0, "id": 7517}
{"input": "int n , s [ 100 ] ; void input ( int i ) { int j , a [ 100 ] ; if ( i < n ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } input ( i + 1 ) ; for ( j = 0 ; j <= i ; j ++ ) { if ( ( s [ j ] + a [ j ] ) > ( s [ j + 1 ] + a [ j ] ) ) s [ j ] += a [ j ] ; else s [ j ] = s [ j + 1 ] + a [ j ] ; } } } int main ( ) { int c , max = 0 , t , p = 0 , ma [ 1000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( c = 0 ; c < n ; c ++ ) s [ c ] = 0 ; input ( 0 ) ; for ( c = 0 ; c < n ; c ++ ) if ( max < s [ c ] ) max = s [ c ] ; ma [ p ] = max ; p ++ ; } for ( c = 0 ; c < p ; c ++ ) printf ( \"%d\n\" , ma [ c ] ) ; return ( 0 ) ; }", "label": 1, "id": 9587}
{"input": "int hcf ( int , int ) ; int main ( ) { int t , i , a , b , gcd ; long long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d% lld\n\" , gcd , lcm ) ; } return 0 ; } int hcf ( int x , int y ) { if ( x == 0 ) return y ; return hcf ( y % x , x ) ; }", "label": 1, "id": 12728}
{"input": "main ( ) { int a , b , c , d , e , n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; d = a ; e = b ; do { if ( a > b ) { a = a - b ; } else { b = b - a ; } } while ( a != b ) ; c = ( d * e ) / a ; printf ( \"%d %d\n\" , a , c ) ; } }", "label": 1, "id": 9104}
{"input": "const unsigned int bufsize = 524288 ; const unsigned int numbufsize = 10 ; const char zero = '0' ; const char newline = '\n' ; const char space = ' ' ; char inbuf [ 524288 ] ; char outbuf [ 524288 ] ; unsigned int inptr = 0 ; unsigned int outptr = 0 ; void dump ( unsigned int a [ ] , unsigned int j ) { unsigned int i ; printf ( \"a (j = %u) : \" , j ) ; if ( j == 0 ) { printf ( \"%u\n\" , a [ j ] ) ; return ; } for ( i = 0 ; i < j ; i ++ ) { printf ( \"%u \" , a [ i ] ) ; } printf ( \"%u\n\" , a [ j ] ) ; } unsigned int getint ( ) { unsigned int n = 0 ; while ( inbuf [ inptr ] != newline && inbuf [ inptr ] != space ) { n = n * 10 + ( inbuf [ inptr ++ ] - zero ) ; if ( inptr == bufsize ) { fread ( inbuf , bufsize , 1 , stdin ) ; inptr = 0 ; } } inptr ++ ; if ( inptr == bufsize ) { fread ( inbuf , bufsize , 1 , stdin ) ; inptr = 0 ; } return n ; } void setint ( unsigned int n ) { if ( n == 0 ) { outbuf [ outptr ++ ] = zero ; if ( outptr == bufsize ) { fwrite ( outbuf , bufsize , 1 , stdout ) ; outptr = 0 ; } outbuf [ outptr ++ ] = newline ; if ( outptr == bufsize ) { fwrite ( outbuf , bufsize , 1 , stdout ) ; outptr = 0 ; } } else { char numbuf [ 5 ] , i = 5 ; if ( outptr + 5 >= bufsize ) { fwrite ( outbuf , outptr , 1 , stdout ) ; outptr = 0 ; } numbuf [ -- i ] = newline ; while ( n > 0 ) { numbuf [ -- i ] = n % 10 + zero ; n = n / 10 ; } memcpy ( outbuf + outptr , numbuf + i , 5 - i ) ; outptr += ( 5 - i ) ; } } void initbuf ( ) { fread ( inbuf , bufsize , 1 , stdin ) ; } void flushbuf ( ) { fwrite ( outbuf , outptr , 1 , stdout ) ; } int main ( ) { unsigned int t , i , n ; initbuf ( ) ; t = getint ( ) ; for ( i = 0 ; i < t ; i ++ ) { unsigned int n = getint ( ) , j , a [ 100 ] , max , previous ; if ( n == 0 ) continue ; a [ 0 ] = previous = getint ( ) ; if ( n == 1 ) { setint ( previous ) ; continue ; } for ( j = 1 ; j < n - 1 ; j ++ ) { unsigned int k ; previous = a [ 0 ] ; a [ 0 ] = a [ 0 ] + getint ( ) ; for ( k = 1 ; k < j ; k ++ ) { unsigned int m = getint ( ) ; unsigned int current = a [ k ] ; a [ k ] = ( current > previous ) ? current + m : previous + m ; previous = current ; } a [ j ] = previous + getint ( ) ; } max = a [ 0 ] + getint ( ) ; previous = a [ 0 ] ; for ( j = 1 ; j < n - 1 ; j ++ ) { unsigned int m = getint ( ) ; unsigned int current = a [ j ] ; unsigned int x = ( current > previous ) ? current + m : previous + m ; if ( x > max ) max = x ; previous = current ; } unsigned int m = getint ( ) ; max = ( max > ( previous + m ) ) ? max : previous + m ; setint ( max ) ; } flushbuf ( ) ; return 0 ; }", "label": 1, "id": 20856}
{"input": "int main ( ) { long long int i , j , t , n , count ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] >= a [ j - 1 ] ) count ++ ; else break ; } } printf ( \"%lld\n\" , count + n ) ; } return 0 ; }", "label": 0, "id": 13449}
{"input": "int main ( ) { int dong ; scanf ( \"%d\" , & dong ) ; while ( dong -- ) { int so1 , so2 , i = 1 , ucln , k , bcnn ; scanf ( \"%d%d\" , & so1 , & so2 ) ; if ( so1 < so2 ) { while ( i <= so1 ) { if ( so1 % i == 0 && so2 % i == 0 ) ucln = i ; i ++ ; } printf ( \"%d \" , ucln ) ; k = so1 * so2 ; while ( k >= so2 ) { if ( k % so1 == 0 && k % so2 == 0 ) bcnn = k ; k -- ; } printf ( \"%d\n\" , bcnn ) ; } else if ( so1 > so2 ) { while ( i <= so2 ) { if ( so1 % i == 0 && so2 % i == 0 ) ucln = i ; i ++ ; } printf ( \"%d \" , ucln ) ; k = so1 * so2 ; while ( k >= so1 ) { if ( k % so1 == 0 && k % so2 == 0 ) bcnn = k ; k -- ; } printf ( \"%d\n\" , bcnn ) ; } else printf ( \"%d %d\n\" , so1 , so1 ) ; } return 0 ; }", "label": 2, "id": 24798}
{"input": "int main ( void ) { int i , t , j ; unsigned long long int a , b , gcd [ 1000 ] , lcm [ 1000 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; gcd [ i ] = 1 ; for ( j = 1 ; j < a / 2 ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { gcd [ i ] = j ; } } for ( j = a ; j <= a * b ; j ++ ) { if ( j % a == 0 && j % b == 0 ) { lcm [ i ] = j ; j = ( a * b ) + 1 ; } } } for ( i = 0 ; i < t ; i ++ ) printf ( \"%lld %lld\n\" , gcd [ i ] , lcm [ i ] ) ; return 0 ; }", "label": 2, "id": 26388}
{"input": "int pow ( int , int ) ; int * rec ( int * * , int , int , int , int * , int ) ; main ( ) { int n , * * arr , i , j , t , max , n1 ; scanf ( \"%d\" , & n1 ) ; while ( n > 0 ) { scanf ( \"%d\" , & n ) ; int * sum2 , * sum1 ; sum2 = ( int * ) malloc ( pow ( 2 , n - 1 ) * sizeof ( int ) ) ; arr = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 1 ; i <= n ; i ++ ) { arr [ i - 1 ] = ( int * ) malloc ( i * sizeof ( int ) ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } sum1 = rec ( arr , 0 , 0 , 0 , sum2 , n ) ; max = sum2 [ 0 ] ; for ( i = 0 ; i < pow ( 2 , n - 1 ) ; i ++ ) { if ( sum2 [ i ] > max ) { max = sum2 [ i ] ; } } printf ( \"%d\n\" , max ) ; n -- ; } return 0 ; } int pow ( int x , int y ) { int i , prod = 1 ; for ( i = 0 ; i < y ; i ++ ) { prod = prod * x ; } return prod ; } int * rec ( int * * arr , int i , int j , int sum , int * store , int n ) { int * store1 , * store2 ; if ( i == n - 1 ) { * ( store ) = sum + arr [ i ] [ j ] ; return store + 1 ; } else { store1 = rec ( arr , i + 1 , j , sum + arr [ i ] [ j ] , store , n ) ; store2 = rec ( arr , i + 1 , j + 1 , sum + arr [ i ] [ j ] , store1 , n ) ; return store2 ; } }", "label": 3, "id": 15804}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; int a [ n ] [ n ] ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int sum [ n ] [ n ] ; int max ; sum [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { sum [ i + 1 ] [ j + 1 ] = sum [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( j == 0 ) { sum [ i + 1 ] [ j ] = sum [ i ] [ j ] + a [ i + 1 ] [ j ] ; } else { max = sum [ i + 1 ] [ j ] ; if ( sum [ i ] [ j ] + a [ i + 1 ] [ j ] > max ) { sum [ i + 1 ] [ j ] = sum [ i ] [ j ] + a [ i + 1 ] [ j ] ; } else { sum [ i + 1 ] [ j ] = max ; } } } } int max_element = sum [ n - 1 ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( sum [ n - 1 ] [ j ] > max_element ) { max_element = sum [ n - 1 ] [ j ] ; } } printf ( \"%d\n\" , max_element ) ; t -- ; } return 0 ; }", "label": 3, "id": 8124}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int n , l , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & l ) ; int a [ l ] [ l ] ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = l - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { a [ i - 1 ] [ j ] += max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23401}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; return 0 ; }", "label": 1, "id": 23933}
{"input": "int main ( ) { int t , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d \" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 7599}
{"input": "main ( ) { int t , i , j , n , x , max ; long long int k , s , y ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { s = 0 ; k = 1 ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & x ) ; max = x ; for ( j = 1 ; j < n ; j ++ ) { scanf ( \"%d\" , & x ) ; if ( x >= max ) { k ++ ; max = x ; if ( j == n - 1 ) { y = k * ( k + 1 ) ; y = y / 2 ; s = s + y ; } } else { y = k * ( k + 1 ) ; y = y / 2 ; s = s + y ; k = 1 ; max = x ; if ( j == n - 1 ) { y = k * ( k + 1 ) ; y = y / 2 ; s = s + y ; } } } if ( n == 1 ) printf ( \"1\n\" ) ; else printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 2625}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n , sum = 0 ; scanf ( \"%d\" , & n ) ; int a1 [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a1 [ i ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a1 [ j ] >= a1 [ j + 1 ] ) { sum = sum + a1 [ j + 1 ] ; } else { sum = sum + a1 [ j ] ; a1 [ j + 1 ] = a1 [ j ] ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 13024}
{"input": "main ( ) { int t , i , a , b , g , l , r , temp , m , n ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( b > a ) { temp = a ; a = b ; b = temp ; } m = a ; n = b ; r = 1 ; while ( r != 0 ) { r = m % n ; m = n ; n = r ; } g = m ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 23370}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int i , j ; int a [ 101 ] [ 101 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + i ] [ j + 1 ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d \n\" , a [ i ] [ j ] ) ; } return 0 ; }", "label": 3, "id": 25839}
{"input": "int main ( ) { int t ; long long int n , i , min , a [ n ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 15334}
{"input": "int main ( ) { int a , b , x , y , n , gcd , tmp , i ; int lcm ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 13640}
{"input": "long long int min ; int main ( ) { long long int t , n , i , temp ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { min = 100001 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & temp ) ; if ( temp < min ) min = temp ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 23250}
{"input": "int main ( ) { int n , i , t , sum , temp ; scanf ( \"%d\n\" , & t ) ; while ( t != 0 ) { sum = 0 ; scanf ( \"%d\n\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) sum = sum + a [ i + 1 ] ; else { sum = sum + a [ i ] ; temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; } } t -- ; } return 0 ; }", "label": 1, "id": 4437}
{"input": "int gcd ( long int a , long int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int g , l , i , p , q ; scanf ( \"%ld %ld\" , & p , & q ) ; g = gcd ( p , q ) ; l = ( p * q ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } }", "label": 0, "id": 26366}
{"input": "int main ( void ) { int t , min , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 22118}
{"input": "int main ( ) { int a , b , c , m , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & m , & n ) ; a = m ; b = n ; while ( ( a % b ) != 0 ) { c = b ; b = a % b ; a = c ; } printf ( \"%d %d\n\" , b , ( m * n ) / b ) ; } return 0 ; }", "label": 1, "id": 12036}
{"input": "int main ( ) { int t , b , a , i , s , g , l , j ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a < b ) s = a ; else s = b ; for ( j = 1 ; j <= s ; j ++ ) { if ( a % j == 0 && b % j == 0 ) g = j ; } for ( j = s ; j <= ( a * b ) ; j = j + s ) { if ( j % a == 0 && j % b == 0 ) { l = j ; break ; } } printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 11662}
{"input": "main ( ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; long arr [ n ] ; int sum = 1 ; int i , j ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & arr [ i ] ) ; int arr2 [ n ] ; arr2 [ 0 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] >= arr [ i - 1 ] ) arr2 [ i ] = arr2 [ i - 1 ] + 1 ; else arr2 [ i ] = 1 ; sum = sum + arr2 [ i ] ; } printf ( \"%d\n\" , sum ) ; } }", "label": 0, "id": 3750}
{"input": "int max ( int x , int y ) { if ( x >= y ) return x ; else return y ; } int main ( ) { int ar [ 100 ] [ 100 ] ; int ar1 [ 100 ] [ 100 ] = { 0 } ; int t , n , i , j , k , m ; int sum ; sum = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & ar [ j ] [ k ] ) ; } } ar1 [ 0 ] [ 0 ] = ar [ 0 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) ar1 [ j ] [ 0 ] = ar [ j ] [ 0 ] + ar1 [ j - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { m = max ( ar1 [ j - 1 ] [ k ] , ar1 [ j - 1 ] [ k - 1 ] ) ; ar1 [ j ] [ k ] = m + ar [ j ] [ k ] ; } } sum = ar1 [ n - 1 ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( ar1 [ n - 1 ] [ j ] > sum ) sum = ar1 [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 24477}
{"input": "int main ( ) { int t ; int n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9581}
{"input": "int main ( ) { int cases , rows , factor , factor2 ; int row [ 2 ] [ 100 ] ; register int i , j , k ; for ( i = 0 ; i < 2 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) row [ i ] [ j ] = 0 ; scanf ( \"%d\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 0 ; j < rows ; j ++ ) { factor = j % 2 ; factor2 = ( j + 1 ) % 2 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & row [ factor ] [ k ] ) ; if ( k == 0 ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else if ( k < ( j - 1 ) ) row [ factor ] [ k ] += row [ factor2 ] [ k - 1 ] ; else { if ( row [ factor2 ] [ k ] > row [ factor2 ] [ k - 1 ] ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else row [ factor ] [ k ] += row [ factor2 ] [ k - 1 ] ; } } } factor = ( rows + 1 ) % 2 ; factor2 = 0 ; for ( k = 0 ; k < rows ; k ++ ) if ( row [ factor ] [ k ] > factor2 ) factor2 = row [ factor ] [ k ] ; printf ( \"%d\" , factor2 ) ; for ( j = 0 ; j < rows ; j ++ ) row [ 1 ] [ j ] = row [ 0 ] [ j ] = 0 ; } return 0 ; }", "label": 1, "id": 6294}
{"input": "int main ( ) { int long t , a , b , k , m , gcd , lcm ; scanf ( \"%ld\n\" , & t ) ; while ( t -- ) { scanf ( \"%ld l%d\" , & a , & b ) ; k = a ; m = b ; gcd = a % b ; while ( gcd != 0 ) { a = b ; b = gcd ; gcd = a % b ; } lcm = ( ( k * m ) / b ) ; printf ( \"l%d %ld\" , b , lcm ) ; } return 0 ; }", "label": 3, "id": 4596}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( \"Enter two numbers\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"GCD of %d and %d = %d\n\" , num1 , num2 , gcd ) ; printf ( \"LCM of %d and %d = %d\n\" , num1 , num2 , lcm ) ; return 0 ; }", "label": 1, "id": 15747}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b , int temp ) { if ( temp % a == 0 && temp % b == 0 ) return temp ; else { temp ++ ; return lcm ( a , b , temp ) ; } } int main ( void ) { int n , a , b ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( b > a ) { a = a + b ; b = b - a ; a = a - b ; } printf ( \"\n%d %d\" , gcd ( a , b ) , lcm ( a , b , 1 ) ) ; } return 0 ; }", "label": 3, "id": 6636}
{"input": "int t , n , * a , i , j , * b ; long long int c ; int main ( void ) { scanf ( \" %d\" , & t ) ; while ( t -- ) { scanf ( \" %d\" , & n ) ; a = ( int * ) ( malloc ( sizeof ( int ) * n ) ) ; b = ( int * ) ( malloc ( sizeof ( int ) * n ) ) ; scanf ( \" %d\" , & a [ 0 ] ) ; for ( c = 0 , j = 0 , i = 1 ; i < n ; ++ i ) { scanf ( \" %d\" , & a [ i ] ) ; if ( a [ i - 1 ] > a [ i ] ) b [ j ++ ] = i ; } b [ j ++ ] = n ; for ( i = j = 0 ; i < n ; ++ i ) { if ( i < b [ j ] ) c += b [ j ] - i ; else { j ++ ; c += b [ j ] - i ; } } printf ( \"%lld\n\" , c ) ; } return 0 ; }", "label": 0, "id": 1024}
{"input": "int main ( ) { int n , t , summax , number , a [ 99 ] [ 99 ] , s [ 99 ] [ 99 ] , counter , counter1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & number ) ; counter = 1 ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; while ( counter < number ) { scanf ( \"%d\" , & a [ counter ] [ 0 ] ) ; s [ counter ] [ 0 ] = a [ counter ] [ 0 ] + s [ counter - 1 ] [ 0 ] ; counter1 = 1 ; while ( counter1 < counter ) { scanf ( \"%d\" , & a [ counter ] [ counter1 ] ) ; if ( s [ counter - 1 ] [ counter1 ] > s [ counter - 1 ] [ counter1 - 1 ] ) { s [ counter ] [ counter1 ] = s [ counter - 1 ] [ counter1 ] + a [ counter ] [ counter1 ] ; } else s [ counter ] [ counter1 ] = s [ counter - 1 ] [ counter1 - 1 ] + a [ counter ] [ counter1 ] ; counter1 ++ ; } s [ counter ] [ counter1 ] = s [ counter - 1 ] [ counter1 - 1 ] + a [ counter ] [ counter1 ] ; counter ++ ; } n = number - 1 ; counter = 0 ; summax = 0 ; while ( counter < number ) { if ( summax < s [ n ] [ counter ] ) summax = s [ number ] [ counter ] ; counter ++ ; } printf ( \"%d\n\" , summax ) ; } return 0 ; }", "label": 3, "id": 21082}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int big = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( big < a [ i ] ) { big = a [ i ] ; } } int x , s = 0 , p ; p = big ; while ( big -- ) { x = big ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == x ) { s = 1 ; printf ( \"x = %d\n\" , x ) ; break ; } } if ( s == 1 ) { break ; } } if ( big == - 1 ) { printf ( \"%d\n\" , p ) ; } } return 0 ; }", "label": 1, "id": 15872}
{"input": "int main ( ) { long long int a , z [ 101 ] [ 101 ] , n , i , j , t , s = 0 , b = 0 ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i <= j ; i ++ ) scanf ( \"%lld\" , & z [ j ] [ i ] ) ; i = 0 ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( z [ i + 1 ] [ j ] > z [ i + 1 ] [ j + 1 ] ) z [ i ] [ j ] += z [ i + 1 ] [ j ] ; else z [ i ] [ j ] += z [ i + 1 ] [ j + 1 ] ; } } printf ( \"%lld\n\" , z [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2718}
{"input": "int main ( ) { int T , i , n ; int a [ 10001 ] , m ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; m = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < m ) m = a [ i ] ; } printf ( \"%d\n\" , m * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 14621}
{"input": "int max ( int l , int k ) ; int main ( ) { int t , i , w ; scanf ( \"%d\" , & t ) ; int ele [ t ] ; for ( i = 0 ; i < t ; i ++ ) { int a , j , k ; scanf ( \"%d\" , & a ) ; int arr [ a ] [ a ] ; for ( j = 0 ; j < a ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } for ( j = a - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { arr [ j ] [ k ] = arr [ j ] [ k ] + max ( arr [ j + 1 ] [ k ] , arr [ j + 1 ] [ k + 1 ] ) ; } } ele [ i ] = arr [ 0 ] [ 0 ] ; } for ( w = 0 ; w < t ; w ++ ) printf ( \"%d\n\" , ele [ w ] ) ; return 0 ; } int max ( int l , int k ) { if ( l <= k ) return k ; else return l ; }", "label": 0, "id": 22232}
{"input": "int main ( ) { long int t , n , a , b , g = 1 , l ; scanf ( \"%ld\" , & t ) ; for ( long int i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & a ) ; scanf ( \"%ld\" , & b ) ; if ( a < b ) { for ( long int j = 2 ; j <= a ; j ++ ) { if ( a % j == 0 && b % j == 0 ) g = j ; } } if ( a > b ) { for ( long int j = 2 ; j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) g = j ; } } l = a * b / g ; printf ( \"%ld %ld\" , g , l ) ; } }", "label": 2, "id": 26966}
{"input": "int main ( void ) { int n , a , b , min , max , gcd , lcm , i ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d %d\" , & a , & b ) ; min = a > b ? b : a ; max = a > b ? a : b ; for ( i = 1 ; i <= min ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; } } while ( 1 ) { if ( max % a == 0 && max % b == 0 ) { lcm = max ; break ; } max ++ ; } printf ( \"\n%d %d\" , gcd , lcm ) ; n -- ; } return 0 ; }", "label": 2, "id": 6187}
{"input": "int main ( void ) { int T , N , i , j , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = N - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 13996}
{"input": "int maxi ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int raw_array [ 101 ] [ 101 ] ; int d_array [ 101 ] [ 101 ] ; int i , j , maximum_d , k , no_of_rows , test_cases , number ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%d\" , & no_of_rows ) ; if ( no_of_rows > 0 && no_of_rows <= 100 ) { for ( i = 0 ; i < no_of_rows ; i ++ ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { scanf ( \"%d\" , & number ) ; raw_array [ i ] [ j ] = number ; d_array [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < no_of_rows ; i ++ ) { for ( j = 0 ; j < no_of_rows ; j ++ ) { if ( d_array [ i ] [ j ] != 0 ) d_array [ i ] [ j ] = 999 ; } } d_array [ 0 ] [ 0 ] = raw_array [ 0 ] [ 0 ] ; if ( no_of_rows > 1 ) { for ( i = 1 ; i < no_of_rows ; i ++ ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { if ( ( j - 1 ) < 0 ) d_array [ i ] [ j ] = raw_array [ i ] [ j ] + d_array [ i - 1 ] [ j ] ; if ( ( j - 1 ) >= 0 ) d_array [ i ] [ j ] = raw_array [ i ] [ j ] + maxi ( d_array [ i - 1 ] [ j ] , d_array [ i - 1 ] [ j - 1 ] ) ; } } } maximum_d = d_array [ no_of_rows - 1 ] [ 0 ] ; for ( i = 1 ; i < no_of_rows ; i ++ ) { if ( d_array [ no_of_rows - 1 ] [ i ] > maximum_d ) maximum_d = d_array [ no_of_rows - 1 ] [ i ] ; } printf ( \"%d\n\" , maximum_d ) ; } } return 0 ; }", "label": 0, "id": 8055}
{"input": "int main ( ) { int T , N , j , i ; scanf ( \" %d\" , & T ) ; for ( j = 0 ; j < T ; j ++ ) { scanf ( \" %d\" , & N ) ; int a [ N ] , sum = N , k ; for ( i = 0 ; i < N ; i ++ ) scanf ( \" %d\" , & a [ i ] ) ; for ( i = 0 ; i < N - 1 ; i ++ ) { for ( k = i + 1 ; k < N ; k ++ ) { if ( a [ k ] >= a [ k - 1 ] ) sum = sum + 1 ; else break ; } } printf ( \"%d\n\" , sum ) ; } }", "label": 0, "id": 17488}
{"input": "int main ( void ) { long long int n , i , g , j , t ; scanf ( \"%lli\" , & t ) ; for ( g = 1 ; g <= t ; g ++ ) { scanf ( \"%lli\" , & n ) ; long long int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%lli\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%lli\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16910}
{"input": "int main ( ) { int t , a [ 98 ] [ 98 ] , n , i , j , b [ 100000 ] , c = 0 , sum , s , lar , k ; scanf ( \"%d\" , & t ) ; while ( t ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 0 ; j < n ; j ++ ) { for ( i = j ; i < n ; i ++ ) { sum = sum + a [ i ] [ j ] ; } b [ c ] = sum ; c ++ ; sum = 0 ; } for ( k = 1 ; k < n ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { s = j ; for ( i = j ; i < n ; i ++ ) { if ( ( i == ( j + k ) ) && ( ( n - j ) != 1 ) ) s = j ++ ; sum = sum + a [ i ] [ s ] ; } b [ c ] = sum ; c ++ ; sum = 0 ; } } lar = b [ 0 ] ; for ( i = 0 ; i < c ; i ++ ) { if ( b [ i ] > lar ) lar = b [ i ] ; } printf ( \"%d\n\" , lar ) ; t -- ; } return 0 ; }", "label": 3, "id": 24153}
{"input": "int main ( ) { int k , i , j , t , n ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 8766}
{"input": "int main ( ) { int n , t , i , j , k , max , sum , key , num [ 100 ] [ 100 ] , loc ; int answer [ 1000 ] ; int flag ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; max = 0 ; sum = 0 ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k < n ; k ++ ) { if ( k <= j ) scanf ( \"%d\" , & num [ j ] [ k ] ) ; else num [ j ] [ k ] = 0 ; } for ( j = 0 ; j < n ; j ++ ) { if ( num [ n - 1 ] [ j ] >= max ) { key = 0 ; max = num [ n - 1 ] [ j ] ; loc = j ; if ( loc == n - 1 ) key = 1 ; } } sum = sum + max ; for ( j = n - 2 ; j >= 0 ; j -- ) { if ( key == 1 ) sum += num [ j ] [ -- loc ] ; else { if ( num [ j ] [ loc ] > num [ j ] [ loc - 1 ] ) sum += num [ j ] [ loc ] ; else { sum += num [ j ] [ loc - 1 ] ; loc = loc - 1 ; } } } answer [ i ] = sum ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , answer [ i ] ) ; return 0 ; }", "label": 1, "id": 6373}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( \"Enter two numbers\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"GCD of %d and %d = %d\n\" , num1 , num2 , gcd ) ; printf ( \"LCM of %d and %d = %d\n\" , num1 , num2 , lcm ) ; }", "label": 1, "id": 13531}
{"input": "main ( ) { int i , j , t , n , b [ 100 ] , m = - 1 ; scanf ( \"%d\" , & t ) ; while ( t ) { int a [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } b [ ++ m ] = a [ 0 ] [ 0 ] ; t -- ; } for ( i = 0 ; i <= m ; i ++ ) printf ( \"%d\n\" , b [ i ] ) ; }", "label": 1, "id": 2096}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int b , i , min ; scanf ( \"%d\" , & min ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & b ) ; if ( b < min ) min = b ; } int ans ; ans = min * ( n - 1 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 21391}
{"input": "int main ( ) { int a , b , t , h , i ; long int l ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( \"%d %ld\n\" , h , l ) ; } return 0 ; } int hcf ( int x , int y ) { if ( y == 0 ) return x ; else return hcf ( y , x % y ) ; }", "label": 1, "id": 320}
{"input": "int cmpfunc ( const void * a , const void * b ) { return * ( int * ) a - * ( int * ) b ; } int main ( ) { int t , c , l , n , i , j , a [ 100 ] , p = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = 0 ; p = 0 ; l = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; if ( n == 1 ) c = 1 ; else { for ( i = 0 ; i < n ; i ++ ) { l = i ; while ( a [ l + 1 ] > a [ l ] ) l ++ ; if ( l > i ) c ++ ; if ( l == n - 2 ) break ; } qsort ( a , n , sizeof ( int ) , cmpfunc ) ; for ( i = 0 ; i < n ; i ++ ) { l = i ; while ( a [ l ] == a [ l + 1 ] ) l ++ ; if ( l > i ) c += l - i - 1 ; else c ++ ; if ( l == n - 2 ) break ; } } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 3, "id": 3971}
{"input": "int main ( void ) { long N , i ; int t ; long arr [ 50000 ] ; int min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 50001 ; scanf ( \"%li\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%li\" , & arr [ i ] ) ; if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( \"%li\n\" , ( N - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 15063}
{"input": "main ( ) { int i , n , sum = 0 , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int a [ n + 1 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ 0 ] <= a [ i + 1 ] ) { sum = sum + a [ 0 ] ; } if ( a [ 0 ] > a [ i + 1 ] ) { a [ 0 ] = a [ i + 1 ] ; sum = sum + a [ 0 ] ; } } printf ( \"%d\n\" , sum ) ; } }", "label": 1, "id": 23969}
{"input": "int gcd ( int x , int y ) { int t = 6 , a = x , b = y ; while ( t != 0 ) { t = a % b ; a = b ; b = t ; } return a ; } int main ( ) { int t , a , b , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 19924}
{"input": "int T [ 100 ] [ 100 ] ; int main ( ) { int t ; int n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & T [ i ] [ j ] ) ; } } if ( n == 1 ) { printf ( \"%d\n\" , T [ 0 ] [ 0 ] ) ; } else { for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { T [ i ] [ j ] += max ( T [ i + 1 ] [ j ] , T [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , T [ 0 ] [ 0 ] ) ; } } return 0 ; }", "label": 0, "id": 8237}
{"input": "int main ( ) { int t , n , i , j , a [ 100 ] [ 100 ] , max = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { max = ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = a [ i ] [ j ] + max ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17856}
{"input": "int main ( ) { int i , j , n , tmp , c , t ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d\" , & n ) ; int arr [ n ] ; c = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; tmp = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( tmp >= arr [ i ] ) { tmp = tmp + arr [ i ] ; arr [ i ] = tmp - arr [ i ] ; tmp = tmp - arr [ i ] ; } c = c + tmp ; } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 1, "id": 24780}
{"input": "void main ( ) { int t , n ; long int a [ 100000 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; j = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) j = j ; else j ++ ; if ( i == n - 2 && a [ i ] <= a [ i + 1 ] ) j ++ ; } printf ( \"%ld\n\" , ( j + n ) ) ; } }", "label": 1, "id": 2586}
{"input": "int n ; int arr [ 100 ] [ 100 ] = { 0 } ; int choco ( int d , int w ) { if ( d == n ) { return arr [ d ] [ w ] ; } else { int cur = arr [ d ] [ w ] ; int cb = choco ( d + 1 , w ) ; int cbr = choco ( d + 1 , w + 1 ) ; return cur + maxx ( cb , cbr ) ; } } int main ( ) { int i , j , d , test , ans ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } choco ( 0 , 0 ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { printf ( \"%d\" , arr [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } ans = choco ( 0 , 0 ) ; printf ( \"ans = %d\" , ans ) ; } }", "label": 2, "id": 9892}
{"input": "int main ( ) { int i , n , t , a [ 20 ] , min = a [ 0 ] , cost , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( k = 0 ; k < n ; k ++ ) { if ( a [ k ] < min ) min = a [ k ] ; } cost = min * ( n - 1 ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 3, "id": 26224}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int N , i , count ; scanf ( \"%d\" , & N ) ; int a [ N ] , sum = N ; for ( i = 1 ; i <= N ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 1 ; i <= N ; i ++ ) { count = 0 ; while ( a [ i ] < a [ i + 1 ] && i <= N ) { count ++ ; i ++ ; } sum = sum + count ; } printf ( \"%d\n\" , -- sum ) ; } return 0 ; }", "label": 1, "id": 6968}
{"input": "int get_input ( ) { char c = gc ( ) ; while ( c < '0' || c > '9' ) { c = gc ( ) ; } int value = 0 ; while ( '0' <= c && c < '9' ) { int temp = c - '0' ; value = value * 10 + temp ; c = gc ( ) ; } return value ; } int main ( ) { int min = 9999 ; int t = get_input ( ) ; while ( t -- > 0 ) { int n = get_input ( ) ; int arr [ n ] , i ; for ( i = 0 ; i < n ; i ++ ) { arr [ i ] = get_input ( ) ; if ( min >= arr [ i ] ) min = arr [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 1, "id": 24620}
{"input": "int main ( ) { int t ; long n , i ; long long int count , val ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; count = 1 ; val = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) count ++ ; else { val += count * ( count + 1 ) / 2 ; count = 1 ; } val += count * ( count + 1 ) / 2 ; printf ( \"%lld\n\" , val ) ; } } return 0 ; }", "label": 1, "id": 340}
{"input": "unsigned int i , j , t , temp , max , r , p , a [ 100 ] ; unsigned int getint ( ) { unsigned int c ; unsigned int x = 0 ; while ( ( ( c = gc ( ) ) - '0' ) >= 10 ) { if ( c == '-' ) return - getint ( ) ; } do { x = ( x << 3 ) + ( x << 1 ) + ( c - '0' ) ; } while ( ( ( c = gc ( ) ) - '0' ) < 10 ) ; return x ; } int main ( ) { t = getint ( ) ; while ( t -- ) { r = getint ( ) ; memset ( a , 256 , r ) ; temp = getint ( ) ; a [ 0 ] = temp ; for ( i = 1 ; i < r ; i ++ ) { temp = getint ( ) ; p = a [ 0 ] ; a [ 0 ] += temp ; for ( j = 1 ; j < i ; j ++ ) { temp = getint ( ) ; if ( p > a [ j ] ) max = p ; else max = a [ j ] ; p = a [ j ] ; a [ j ] = max + temp ; } temp = getint ( ) ; a [ j ] = temp + p ; } for ( i = 0 , max = 0 ; i < r ; i ++ ) if ( max < a [ i ] ) max = a [ i ] ; printf ( \"%u\n\" , max ) ; } return 0 ; }", "label": 0, "id": 23080}
{"input": "int main ( void ) { int test ; long int n , cnt , i , a [ 50000 ] ; scanf ( \"%d\" , & test ) ; long int min ; long long int ans ; while ( test -- ) { min = 100001 ; cnt = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( a [ i ] < min ) { cnt = 1 ; min = a [ i ] ; } else if ( a [ i ] == min ) { cnt ++ ; } } ans = ( n - cnt ) * min ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 4444}
{"input": "int main ( void ) { int t , n , i , j , k , s = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i = j ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] < a [ j - 1 ] ) break ; } k = j - i ; s += ( k * ( k + 1 ) / 2 ) ; } printf ( \"%d\n\" , s ) ; s = 0 ; } return 0 ; }", "label": 0, "id": 10423}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; scanf ( \"%d\" , & a [ 0 ] ) ; int min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } int x = ( i - 1 ) * min ; printf ( \"%d\n\" , x ) ; } }", "label": 0, "id": 5431}
{"input": "int main ( ) { int n , n1 , q [ 100 ] [ 100 ] , ans [ 100 ] , cnt , j , r , c ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & n1 ) ; for ( r = 0 ; r < n1 ; r ++ ) { for ( c = 0 ; c <= r ; c ++ ) { scanf ( \"%d\" , & q [ r ] [ c ] ) ; if ( r > 0 ) { if ( r == c ) { q [ r ] [ c ] = q [ r ] [ c ] + q [ r - 1 ] [ c - 1 ] ; } else if ( c > 0 ) { if ( q [ r - 1 ] [ c ] > q [ r - 1 ] [ c - 1 ] ) { q [ r ] [ c ] = q [ r ] [ c ] + q [ r - 1 ] [ c ] ; } else { q [ r ] [ c ] = q [ r ] [ c ] + q [ r - 1 ] [ c - 1 ] ; } } else { q [ r ] [ c ] = q [ r ] [ c ] + q [ r - 1 ] [ c ] ; } if ( cnt < q [ r ] [ c ] ) { cnt = q [ r ] [ c ] ; } } else { cnt = q [ r ] [ c ] ; } } ans [ j ] = cnt ; } } for ( j = 0 ; j < n ; j ++ ) { printf ( \"%d\" , ans [ j ] ) ; } return 0 ; }", "label": 1, "id": 26535}
{"input": "int hcf ( int , int ) ; int main ( ) { int a , b , t , h , l , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( \"%d%d\" , h , l ) ; } return 0 ; } int hcf ( int x , int y ) { if ( y == 0 ) return x ; else return hcf ( y , x % y ) ; }", "label": 1, "id": 13628}
{"input": "int a [ 1000 ] [ 1000 ] ; int cache [ 100 ] [ 100 ] ; int n ; int m = 0 ; int sum ( int r , int c , int s ) { if ( cache [ r ] [ c ] ) { if ( cache [ r ] [ c ] + s > m ) { m = cache [ r ] [ c ] + s ; } return cache [ r ] [ c ] ; } if ( r == n ) { return 0 ; } s = s + a [ r ] [ c ] ; if ( s > m ) { m = s ; } int best = a [ r ] [ c ] + max ( sum ( r + 1 , c + 1 , s ) , sum ( r + 1 , c , s ) ) ; cache [ r ] [ c ] = best ; return best ; } int main ( ) { int i , j ; int c ; scanf ( \"%d\" , & c ) ; while ( c -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum ( 0 , 0 , 0 ) ; printf ( \"%d\n\" , m ) ; memset ( cache , 0 , sizeof ( cache ) ) ; m = 0 ; } return 0 ; }", "label": 0, "id": 14887}
{"input": "static long int arr [ 50000 ] ; int main ( ) { int t ; long int n , i , pos , min ; long long int cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%li\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%li\" , & arr [ i ] ) ; min = arr [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } cost = min * ( n - 1 ) ; printf ( \"%lli\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 4399}
{"input": "int main ( ) { int n , a , b , i ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { int flag = 0 ; scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i < a , i < b ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) flag = i ; } i = ( ( a * b ) / flag ) ; printf ( \"%d %d\n\" , flag , i ) ; n -- ; } return 0 ; }", "label": 2, "id": 13385}
{"input": "int hcf ( int n1 , int n2 ) ; int main ( ) { int gcd , n1 , n2 , lcm ; int t ; scanf ( \"%d\" , t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; gcd = hcf ( n1 , n2 ) ; lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; } int hcf ( int n1 , int n2 ) { if ( n2 != 0 ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; }", "label": 3, "id": 3122}
{"input": "void main ( ) { int num_test_case , line ; int a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & num_test_case ) ; while ( num_test_case -- ) { scanf ( \"%d\" , & line ) ; for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = line - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ j + 1 ] [ i + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 14779}
{"input": "main ( ) { int a [ 100 ] [ 100 ] , b [ 200 ] [ 200 ] , i , j , k , l , z , n , x , y ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( \"enter the number of lines\" ) ; scanf ( \"%d\" , & l ) ; for ( j = 0 ; j < l ; j ++ ) for ( k = 0 , z = j + 1 ; k < z ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( j = 1 ; j < l ; j ++ ) { y = 0 ; for ( k = 0 , z = j + 1 ; k < z ; k ++ ) { if ( k == j ) b [ j ] [ y ++ ] = a [ j ] [ k ] + b [ j - 1 ] [ k - 1 ] ; else b [ j ] [ y ++ ] = a [ j ] [ k ] + b [ j - 1 ] [ k ] ; if ( k > 0 && k < z - 1 ) b [ j ] [ y ++ ] = a [ j ] [ k ] + b [ j - 1 ] [ k - 1 ] ; x = y ; } } } int max = 0 ; for ( i = 0 ; i < x ; i ++ ) { if ( b [ j - 1 ] [ i ] > max ) max = b [ j - 1 ] [ i ] ; } printf ( \"%d\" , max ) ; return 0 ; }", "label": 1, "id": 21223}
{"input": "int main ( ) { int n , r , * * p , i , j , k , s ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & r ) ; p = ( int * * ) malloc ( r * sizeof ( int * ) ) ; for ( j = 0 ; j < r ; j ++ ) { p [ j ] = ( int * ) malloc ( ( j + 1 ) * sizeof ( int ) ) ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & p [ j ] [ k ] ) ; } } for ( i = r - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { p [ i ] [ j ] += sum ( p [ i + 1 ] [ j ] , p [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , p [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 26067}
{"input": "main ( ) { long int T , i , a , b , d ; long int z ; scanf ( \"%d\" , & T ) ; for ( d = 0 ; d < T ; d ++ ) { scanf ( \"%d%d\" , & a , & b ) ; z = a > b ? b : a ; for ( i = z ; i > 0 ; i -- ) if ( a % i == 0 && b % i == 0 ) break ; printf ( \"%d %d\n\" , ++ i , ( a * b ) / ++ i ) ; } }", "label": 2, "id": 3036}
{"input": "int min ( int a , int b ) { if ( a < b ) return a ; else return b ; } int main ( ) { int t , i , n , j , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; long long int cnt = 0 ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; long long int min = arr [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( arr [ j ] < min ) min = arr [ j ] ; } cnt = min * ( n - 1 ) ; printf ( \"%ld\n\" , cnt ) ; } return 0 ; }", "label": 0, "id": 18424}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 500 ] , n , i , min = 30000 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%d\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 3, "id": 8213}
{"input": "int main ( ) { int a , b , t , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = gcd1 ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; } int gcd1 ( int a , int b ) { if ( b == 0 ) return a ; return gcd1 ( b , a % b ) ; }", "label": 1, "id": 3312}
{"input": "int main ( ) { int t , l , arr [ 1000 ] [ 1000 ] = { 0 } , i , sum [ 1000 ] = { 0 } , j , k ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = l - 1 ; i >= 0 ; i -- ) { sum [ i ] = 0 ; j = l - 1 ; k = i ; sum [ i ] += arr [ j ] [ k ] ; while ( j > 0 && k > 0 ) { if ( arr [ j - 1 ] [ k ] > arr [ j - 1 ] [ k - 1 ] ) sum [ i ] += arr [ j - 1 ] [ k ] ; else { sum [ i ] += arr [ j - 1 ] [ k - 1 ] ; k = k - 1 ; } j -- ; } } int max = sum [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"\n%d\" , max ) ; t -- ; } return 0 ; }", "label": 1, "id": 13131}
{"input": "inline int fastReadInt ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int testcases , i , j ; scanf ( \"%d\" , & testcases ) ; while ( testcases -- ) { int arr [ 101 ] [ 101 ] , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += ( ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 10028}
{"input": "int main ( ) { int t ; long long int n , a , k , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; scanf ( \"%lld\" , & k ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a ) ; if ( a < k ) { k = a ; } } printf ( \"%llu\n\" , k * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 4785}
{"input": "int tri [ 102 ] [ 102 ] = { 0 } , arr [ 202 ] [ 202 ] = { 0 } ; int main ( ) { int t , n , i , j , key , k = 0 , a = 0 ; scanf ( \"%d\" , & t ) ; while ( t ) { for ( i = 0 ; i < 202 ; i ++ ) { for ( j = 0 ; j < 202 ; j ++ ) arr [ i ] [ j ] = 0 ; } scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & tri [ i ] [ j ] ) ; } arr [ 0 ] [ 0 ] = tri [ 0 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { k = 0 ; for ( j = 0 ; j <= 2 * i ; j ++ ) { if ( j != 0 && a != 1 && j % 2 == 0 ) { j -- ; a = 1 ; } else { a = 0 ; } arr [ i + 1 ] [ k ] = arr [ i ] [ j ] + tri [ i + 1 ] [ j ] ; k ++ ; arr [ i + 1 ] [ k ] = arr [ i ] [ j ] + tri [ i + 1 ] [ j + 1 ] ; k ++ ; } } key = 0 ; for ( j = 0 ; j < 2 * i ; j ++ ) { if ( arr [ n - 1 ] [ j ] > key ) { key = arr [ n - 1 ] [ j ] ; } } printf ( \"%d\n\" , key ) ; t -- ; } return 0 ; }", "label": 1, "id": 25751}
{"input": "int ar [ 100 ] [ 100 ] = { 0 } ; int ar_copy [ 100 ] [ 100 ] = { 0 } ; int main ( ) { int i , j , test , n , maxx , s ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } ar_copy [ 0 ] [ 0 ] = ar [ 0 ] [ 0 ] ; s = ar [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { s = ar [ i ] [ 0 ] + s ; ar_copy [ i ] [ 0 ] = s ; } s = 0 ; for ( i = 0 ; i < n ; i ++ ) { s = ar [ i ] [ i ] + s ; ar_copy [ i ] [ i ] = s ; } for ( i = 2 ; i < n ; i ++ ) for ( j = 1 ; j < i ; j ++ ) { ar_copy [ i ] [ j ] = ar [ i ] [ j ] + max ( ar_copy [ i - 1 ] [ j - 1 ] , ar_copy [ i - 1 ] [ j ] ) ; } maxx = ar_copy [ n - 1 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( ar_copy [ n - 1 ] [ i ] > maxx ) maxx = ar_copy [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , maxx ) ; } }", "label": 0, "id": 9410}
{"input": "main ( ) { int a , b , c , d , e , f , g ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d%d\" , & b , & c ) ; if ( b > c ) e = b ; if ( c > b ) e = c ; for ( d = 1 ; d <= e ; d ++ ) { if ( b % d == 0 && c % d == 0 ) f = d ; } printf ( \"%d \" , f ) ; g = ( c * b ) / f ; printf ( \"%d\n\" , g ) ; } }", "label": 2, "id": 8698}
{"input": "int main ( ) { int a , b , c , d , i ; printf ( \"Enter two numbers\" ) ; scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i < a || i < b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { c = i ; } } printf ( \"\nGCD is %d\" , c ) ; d = ( a * b ) / c ; printf ( \"\nThe LCM is %d\" , d ) ; return 0 ; }", "label": 1, "id": 13471}
{"input": "main ( ) { int n , m , a , b ; int gcd , lcm ; printf ( \"Enter 2 numbers\" ) ; scanf ( \"%d%d\" , & a , & b ) ; n = a ; m = b ; while ( n != m ) { if ( n > m ) n = n - m ; else m = m - n ; } gcd = n ; lcm = ( a * b ) / gcd ; printf ( \"The GCD and LCM are %d %d respectively\" , gcd , lcm ) ; }", "label": 1, "id": 19594}
{"input": "int A [ 101 ] [ 101 ] = { 0 } ; int t , row , i , j ; int memo ( int i , int j ) { int t , t1 , t2 ; if ( i > row ) return 0 ; t1 = memo ( i + 1 , j ) ; t2 = memo ( i + 1 , j + 1 ) ; t = A [ i ] [ j ] + max ( t1 , t2 ) ; return t ; } int main ( ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & row ) ; for ( i = 1 ; i <= row ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; printf ( \"%d\n\" , memo ( 1 , 1 ) ) ; } return 0 ; }", "label": 2, "id": 9857}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int max_arr ( int * a , int n ) { int m = 0 , i ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > m ) m = a [ i ] ; } return m ; } void read ( int * * a , int n ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } return ; } int path_max ( int * * a , int n ) { int i , j ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) a [ i ] [ j ] = a [ i - 1 ] [ 0 ] + a [ i ] [ j ] ; else if ( j == i ) a [ i ] [ j ] = a [ i - 1 ] [ i - 1 ] + a [ i ] [ i ] ; else a [ i ] [ j ] = max ( a [ i - 1 ] [ j ] + a [ i ] [ j ] , a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ) ; } } return max_arr ( & a [ n - 1 ] [ 0 ] , n ) ; } int main ( ) { int t , i , n ; int * * a ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; a = ( int * * ) calloc ( n , sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = ( int * ) calloc ( i + 1 , sizeof ( int ) ) ; read ( a , n ) ; printf ( \"%d\n\" , path_max ( a , n ) ) ; free ( a ) ; } return 0 ; }", "label": 0, "id": 15767}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long a , b , minmultiple ; scanf ( \"%ld %ld\" , & a , & b ) ; minmultiple = ( a > b ) ? a : b ; while ( 1 ) { if ( minmultiple % a == 0 && minmultiple % b == 0 ) { break ; } ++ minmultiple ; } printf ( \"%ld %ld\" , ( a * b ) / minmultiple , minmultiple ) ; } }", "label": 2, "id": 171}
{"input": "int main ( ) { int t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { int h , maxl = 0 , i , n , u ; scanf ( \"%d\" , & h ) ; int a [ ( h * ( h + 1 ) ) ] ; scanf ( \"%d\" , & a [ 0 ] ) ; a [ 1 ] = a [ 0 ] ; for ( i = 2 , n = 1 ; n < h ; n ++ ) { for ( u = 0 ; u < ( n + 1 ) ; u ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( u != n ) a [ i ] = a [ i ] + a [ i + 1 - 2 * n ] ; else a [ i ] = a [ i ] + a [ i + 1 - 2 * n - 3 ] ; if ( i == n * ( n + 1 ) ) a [ i + 1 ] = a [ i ] ; else { if ( a [ i - 2 ] > a [ i ] ) a [ i + 1 ] = a [ i - 2 ] ; else a [ i + 1 ] = a [ i ] ; } i = i + 2 ; } } u -- ; maxl = 0 ; for ( i = u * ( u + 1 ) ; i < h * ( h + 1 ) ; i ++ ) if ( maxl < a [ i ] ) maxl = a [ i ] ; printf ( \"%d\" , maxl ) ; } return 0 ; }", "label": 1, "id": 3803}
{"input": "int main ( ) { long int a , b , i , j , gcd , small ; int flag , t ; long long int hcf ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { flag = 1 ; scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; small = a ; if ( b < a ) small = b ; for ( j = 1 ; j <= small ; j ++ ) { if ( a % j != 0 || b % j != 0 ) flag = 0 ; if ( flag == 1 ) gcd = j ; flag = 1 ; } printf ( \"%li\" , gcd ) ; hcf = a * b / gcd ; printf ( \"% lli\" , hcf ) ; } return 0 ; }", "label": 2, "id": 7320}
{"input": "int main ( ) { int t , a [ 100 ] , N , s = 0 , i ; printf ( \"\n Enter No of test cases:\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"\n Enter Size of  Array:\" ) ; scanf ( \"%d\" , & N ) ; printf ( \"\n Enter Elements In Array:\" ) ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < N ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { s = a [ i ] + s ; a [ i + 1 ] = a [ i + 2 ] ; N = N - 1 ; } else if ( a [ i ] > a [ i + 1 ] ) { s = a [ i + 1 ] + s ; a [ i ] = a [ i + 1 ] ; N = N - 1 ; } } printf ( \"\n Sum=%d\" , s ) ; } return 0 ; }", "label": 3, "id": 24932}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return ( gcd ( b , a % b ) ) ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int min ( int a , int b ) { if ( a < b ) return a ; return b ; } int main ( ) { int a , b , c , d , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & c , & d ) ; a = max ( c , d ) ; b = min ( c , d ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , ( ( a * b ) / gcd ( a , b ) ) ) ; } return 0 ; }", "label": 1, "id": 5277}
{"input": "int main ( void ) { int t , n , j , min , arr [ 50000 ] ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , arr + j ) ; } min = arr [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( min > arr [ j ] ) min = arr [ j ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 5575}
{"input": "int main ( ) { int A , B , T , z = 1 ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & A , & B ) ; if ( lcm ( A , B ) ) { printf ( \"%d %d\n\" , z , lcm ( A , B ) ) ; } else { printf ( \"%d %d\n\" , A * B / lcm ( A , B ) , lcm ( A , B ) ) ; } } return 0 ; } int lcm ( int , int ) ; int lcm ( int x , int y ) { int i , max , l ; if ( x > y ) { max = x ; } else { max = y ; } for ( i = max ; i <= x * y ; i ++ ) { if ( i % x == 0 && i % y == 0 ) { l = i ; break ; } } return l ; }", "label": 2, "id": 12900}
{"input": "int len ; int maxsum ( int ( * a ) [ len ] , int len , int r , int c ) { if ( r == ( len - 1 ) ) { return a [ r ] [ c ] ; } else { int ans1 = maxsum ( a , len , r + 1 , c ) ; int ans2 = maxsum ( a , len , r + 1 , c + 1 ) ; if ( ans1 > ans2 ) { return a [ r ] [ c ] + ans1 ; } else { return a [ r ] [ c ] + ans2 ; } } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } len = n ; int mx = maxsum ( arr , len , 0 , 0 ) ; printf ( \"%d\n\" , mx ) ; t -- ; } return 0 ; }", "label": 2, "id": 8269}
{"input": "int main ( ) { long int t , a [ 100001 ] , i , m , min ; long long int cost = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; min = a [ 0 ] ; cost = 0 ; for ( i = 1 ; i < m ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; cost += min ; } printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 11370}
{"input": "int main ( ) { int n , x , c , i ; scanf ( \"%d\" , & n ) ; for ( ; n > 0 ; n -- ) { scanf ( \"%d\" , & x ) ; int a [ x ] ; for ( i = 0 ; i < x ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < x ; i ++ ) { if ( a [ 0 ] > a [ i ] ) { c = a [ 0 ] ; a [ 0 ] = a [ i ] ; a [ i ] = c ; } } printf ( \"%d\n\" , a [ 0 ] * ( x - 1 ) ) ; } }", "label": 0, "id": 16394}
{"input": "int main ( ) { int t ; scanf ( \" %d\" , & t ) ; while ( t -- ) { int n ; scanf ( \" %d\" , & n ) ; int arr [ n ] ; int i , j ; int count = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \" %d\" , & arr [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { count ++ ; } } } printf ( \" %d\" , count ) ; } return 0 ; }", "label": 2, "id": 26195}
{"input": "int main ( ) { int t , n , i , j , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( ; t > 0 ; t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - i ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 17254}
{"input": "int tri [ 102 ] [ 102 ] ; int sum = 0 ; int main ( ) { int i , j , n , t ; int calSum ( int row , int col , int n ) ; int bottom ( int i , int j , int n ) ; int diag ( int i , int j , int n ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & tri [ i ] [ j ] ) ; } printf ( \"%d\n\" , calSum ( 0 , 0 , n - 1 ) ) ; sum = 0 ; } return 0 ; } int calSum ( int row , int col , int n ) { if ( row > n ) return sum ; else { if ( bottom ( row , col , n ) >= diag ( row , col , n ) ) { sum += tri [ row ] [ col ] ; calSum ( row + 1 , col , n ) ; } else { sum += tri [ row ] [ col ] ; calSum ( row + 1 , col + 1 , n ) ; } } } int bottom ( int i , int j , int n ) { int s = 0 ; for ( ; i <= n ; i ++ ) s += tri [ i ] [ j ] ; return s ; } int diag ( int i , int j , int n ) { int s = 0 ; for ( ; i <= n ; i ++ , j ++ ) s += tri [ i ] [ j ] ; return s ; }", "label": 1, "id": 12765}
{"input": "int gcd ( int , int ) ; main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , c , d , y ; scanf ( \"%d%d\" , & a , & b ) ; c = a ; d = b ; if ( a > b ) y = gcd ( a , b ) ; else y = gcd ( b , a ) ; printf ( \"%d\\t%d\n\" , y , ( ( c * d ) / y ) ) ; } } int gcd ( int x , int y ) { int z ; while ( y != 0 ) { z = x % y ; x = y ; y = z ; } return x ; }", "label": 1, "id": 5209}
{"input": "int main ( ) { int t , n , max , i , j ; int ar [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & ar [ 0 ] [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ar [ i ] [ j ] ) ; if ( j == 0 ) ar [ i ] [ 0 ] += ar [ i - 1 ] [ 0 ] ; else { if ( ar [ i - 1 ] [ j ] > ar [ i - 1 ] [ j - 1 ] ) ar [ i ] [ j ] += ar [ i - 1 ] [ j ] ; else ar [ i ] [ j ] += ar [ i - 1 ] [ j - 1 ] ; } } max = ar [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( ar [ n - 1 ] [ i ] > max ) max = ar [ n - 1 ] [ i ] ; printf ( \"%d\n\" , max ) ; } }", "label": 1, "id": 20679}
{"input": "int main ( ) { int a [ 10 ] [ 10 ] ; int i , j , n , x , max = - 1 , p = 0 ; scanf ( \"%d\" , & n ) ; for ( p = 0 ; p < n ; p ++ ) { scanf ( \"%d\" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j < x ; j ++ ) { if ( j > i ) a [ i ] [ j ] = 0 ; else scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 0 ; j < x ; j ++ ) { for ( i = 1 ; i < x ; i ++ ) { if ( j == 0 ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else { if ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; } } } i = x - 1 ; max = - 1 ; for ( j = 0 ; j < x ; j ++ ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } printf ( \"\n%d\" , max ) ; } return 0 ; }", "label": 3, "id": 5832}
{"input": "int main ( ) { int a [ maxi ] [ maxi ] , s [ maxi ] [ maxi ] , n , t ; int i , j , max = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; max = s [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( j == i ) s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else { if ( s [ i - 1 ] [ j ] > s [ i - 1 ] [ j - 1 ] ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } } } max = s [ n - 1 ] [ 0 ] ; i = n - 1 ; j = 1 ; while ( j <= i ) { if ( s [ i ] [ j ] > max ) max = s [ i ] [ j ] ; j ++ ; } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 1, "id": 21014}
{"input": "int main ( ) { int T , N , x , m , i ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & x ) ; if ( ! i ) m = x ; else m = ( m < x ) ? m : x ; } printf ( \"%lld\n\" , m * ( long long ) ( N - 1 ) ) ; } return 0 ; }", "label": 0, "id": 6038}
{"input": "int main ( ) { int T , n , i , j , t , max ; scanf ( \"%d\n\" , & T ) ; for ( t = 0 ; t < T ; t ++ ) { scanf ( \"%d\n\" , & n ) ; int * * a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i < j ) a [ i ] [ j ] = 0 ; else scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) ? a [ i - 1 ] [ j - 1 ] : a [ i - 1 ] [ j ] ) ; } } max = a [ n - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ n - 1 ] [ j ] > max ) max = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 17855}
{"input": "int max_sum ( int * a , int l , int m , int n ) { int s1 , s2 ; if ( l == n - 1 ) return ( a [ l * n + m ] ) ; s1 = max_sum ( a , l + 1 , m , n ) ; s2 = max_sum ( a , l + 1 , m + 1 , n ) ; return ( a [ l * n + m ] + ( s1 > s2 ? s1 : s2 ) ) ; } int main ( ) { int t , l ; int n , i , j , * sol ; int * a ; scanf ( \"%d\" , & t ) ; l = t ; sol = ( int * ) malloc ( t * sizeof ( int * ) ) ; for ( t = 0 ; t < l ; t ++ ) { scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( n * n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i * n + j ] ) ; } sol [ t ] = max_sum ( a , 0 , 0 , n ) ; free ( a ) ; } for ( i = 0 ; i < l ; i ++ ) printf ( \"%d\n\" , sol [ i ] ) ; }", "label": 2, "id": 156}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else { return b ; } } int main ( ) { int t , i , n , k , * * matrix , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; matrix = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( j = 0 ; j < n ; j ++ ) { matrix [ j ] = ( int * ) malloc ( sizeof ( int ) * ( j + 1 ) ) ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & matrix [ j ] [ k ] ) ; } } for ( j = n - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { matrix [ j ] [ k ] = max ( matrix [ j + 1 ] [ k ] , matrix [ j + 1 ] [ k + 1 ] ) + matrix [ j ] [ k ] ; } } printf ( \"%d\n\" , matrix [ 0 ] [ 0 ] ) ; for ( j = 0 ; j < n ; j ++ ) free ( matrix [ j ] ) ; free ( matrix ) ; } return 0 ; }", "label": 0, "id": 24037}
{"input": "int temp [ 100 ] [ 100 ] ; int max ( int , int ) ; int fun ( int a [ ] [ 100 ] , int i , int j , int n ) { if ( i >= n ) { return 0 ; } if ( temp [ i ] [ j ] != 0 ) return temp [ i ] [ j ] ; temp [ i ] [ j ] = a [ i ] [ j ] + max ( fun ( a , i + 1 , j , n ) , fun ( a , i + 1 , j + 1 , n ) ) ; return temp [ i ] [ j ] ; } int main ( ) { int j , i , t , n , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; temp [ i ] [ j ] = 0 ; } printf ( \"%d\n\" , fun ( a , 0 , 0 , n ) ) ; } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 859}
{"input": "int main ( ) { long int i , j , n , t ; scanf ( \"%d\" , & t ) ; scanf ( \"%d\" , & n ) ; long int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%ld\" , & a [ i ] [ j ] ) ; } } while ( t -- ) { for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%ld\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 11626}
{"input": "int main ( ) { long long int t , N , c , m , i , j , s ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & N ) ; int a [ N ] ; c = 0 ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 0 ; i < N - 1 ; i ++ ) { for ( j = i ; j < N - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) break ; c ++ ; } s = c + N ; } printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 3157}
{"input": "int gcdf ( int , int ) ; int main ( ) { int t , i , a , b , d , lc ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; d = gcdf ( a , b ) ; lc = ( a * b ) / d ; printf ( \"%d %d\n\" , d , lc ) ; } return 0 ; } int gcdf ( int x , int y ) { if ( y == 0 ) return x ; else return ( gcdf ( y , x % y ) ) ; }", "label": 1, "id": 1802}
{"input": "long int A [ size ] ; int printDistinct ( int arr [ ] , int n ) { int temp = 0 , i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] == arr [ j ] ) break ; if ( i == j ) temp ++ ; } return temp ; } int main ( ) { int t ; int N , i , count , temp , j ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { count = 0 ; temp = 0 ; scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%ld\" , & A [ i ] ) ; } count = printDistinct ( A , N ) ; count = count / 2 ; count = count + N ; printf ( \"%d\n \" , count ) ; t -- ; } return 0 ; }", "label": 2, "id": 22334}
{"input": "int main ( void ) { int t , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , te ; scanf ( \"%d\" , & n ) ; int a [ n ] , i ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] > a [ i ] ) { te = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = te ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) a [ i ] = a [ i + 1 ] ; printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 6903}
{"input": "int main ( ) { int test_case , n , i ; unsigned long sum ; scanf ( \"%d\" , & test_case ) ; while ( test_case -- ) { scanf ( \"%d\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } sum = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= a [ i - 1 ] ) { sum = sum + a [ i ] ; } else { sum = sum + a [ i - 1 ] ; a [ i ] = a [ i - 1 ] ; } } printf ( \"%lu\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 1407}
{"input": "int main ( ) { int n , r , i , j , s1 , s2 , k , p ; scanf ( \"%d\" , & n ) ; p = 0 ; k = n ; while ( n -- != 0 ) { scanf ( \"%d\" , & r ) ; int a [ r ] [ r ] ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = r - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { s1 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; s2 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; if ( s1 > s2 ) a [ i ] [ j ] = s1 ; else a [ i ] [ j ] = s2 ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 0, "id": 19078}
{"input": "int main ( ) { int lcm , m , n , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { scanf ( \"%d\" , & m ) ; scanf ( \"%d\" , & n ) ; lcm = m * n ; while ( m % n != 0 ) { i = m % n ; m = n ; n = i ; } lcm = lcm / n ; printf ( \"%d \" , n ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 8671}
{"input": "int main ( ) { int t , n ; int l , i , j , k ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( l = 0 ; l < t ; l ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } for ( i = n ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] + arr [ i - 1 ] [ j ] > arr [ i ] [ j + 1 ] + arr [ i - 1 ] [ j ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 8231}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int i , count = 0 ; long long int a [ 100000 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ i - 1 ] ) count ++ ; } printf ( \"%d\n\" , count + n ) ; } return 0 ; }", "label": 1, "id": 13876}
{"input": "int sum ( int A [ ] [ 100 ] , int i , int j , int n ) { int s1 , s2 ; if ( i >= n ) return A [ i ] [ j ] ; s1 = sum ( A , i + 1 , j , n ) ; s2 = sum ( A , i + 1 , j + 1 , n ) ; if ( s1 > s2 ) return ( A [ i ] [ j ] + s1 ) ; else return ( A [ i ] [ j ] + s2 ) ; } int main ( void ) { int A [ 100 ] [ 100 ] , n , i , j , no , t ; scanf ( \"%d\n\" , & no ) ; for ( t = 0 ; t < no ; t ++ ) { scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d \" , & A [ i ] [ j ] ) ; } scanf ( \"\n\" ) ; } int ans = sum ( A , 0 , 0 , n - 1 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 2, "id": 11260}
{"input": "int main ( ) { int test ; scanf ( \" %d\" , & test ) ; while ( -- test >= 0 ) { int row , i , j , k ; scanf ( \" %d\" , & row ) ; int a [ row ] [ row ] , b [ row ] [ row ] ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \" %d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) b [ i ] [ j ] = - 1 ; b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < row - 1 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) for ( k = j ; k <= j + 1 ; k ++ ) { if ( a [ i ] [ j ] == - 1 ) break ; else if ( b [ i ] [ j ] + a [ i + 1 ] [ k ] >= b [ i + 1 ] [ k ] ) b [ i + 1 ] [ k ] = b [ i ] [ j ] + a [ i + 1 ] [ k ] ; else { b [ i + 1 ] [ k ] = b [ i + 1 ] [ k ] ; } } int greatSum = 0 ; for ( j = 0 ; j < row ; j ++ ) { if ( b [ i ] [ j ] > greatSum ) greatSum = b [ i ] [ j ] ; } printf ( \"%d\n\" , greatSum ) ; } return 0 ; }", "label": 0, "id": 10116}
{"input": "main ( ) { int i , j , a [ 100 ] [ 100 ] , b [ 1000 ] , max , sum = 0 , n ; int T , k ; scanf ( \"%d\" , & T ) ; for ( k = 0 ; k < T ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { max = a [ i ] [ 0 ] ; for ( j = 1 ; j <= i ; j ++ ) { if ( max < a [ i ] [ j ] ) max = a [ i ] [ j ] ; } sum = sum + max ; } b [ k ] = sum ; sum = 0 ; } for ( i = 0 ; i < T ; i ++ ) { b [ i ] = b [ i ] - a [ 1 ] [ 1 ] ; printf ( \"%d\n\" , b [ i ] ) ; } }", "label": 3, "id": 6313}
{"input": "int main ( ) { int t , i ; long int l , gcd , lcm , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { gcd = 1 ; scanf ( \"%ld%ld\" , & a , & b ) ; l = a < b ? a : b ; for ( i = 1 ; i <= l ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return ( 0 ) ; }", "label": 2, "id": 17945}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( void ) { int t ; int a , b , g ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%d %d\n\" , g , a * b / g ) ; } return 0 ; }", "label": 1, "id": 18129}
{"input": "int gcd ( int x , int y ) { if ( x == y ) return x ; if ( x > y ) return gcd ( x - y , y ) ; else return gcd ( x , y - x ) ; } int main ( ) { int T , i , hcf ; int x , y , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%ld%ld\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %ld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 18538}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; return gcd ( b , ( a % b ) ) ; } int main ( ) { int i , t , a , b , gcd0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; if ( a > b ) gcd0 = gcd ( a , b ) ; else gcd0 = gcd ( b , a ) ; printf ( \"%d %d\n\" , gcd0 , a * b / gcd0 ) ; } return 0 ; }", "label": 1, "id": 10443}
{"input": "main ( ) { int t , i ; long int a , b , h , l ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { h = 1 ; scanf ( \"%ld%ld\" , & a , & b ) ; for ( i = 1 ; i <= a ; i ++ ) if ( ( int ) a % i == 0 && ( int ) b % i == 0 ) h = i ; l = ( a * b ) / h ; printf ( \"%ld %ld\n\" , h , l ) ; t -- ; } }", "label": 2, "id": 26887}
{"input": "long long int gcd ( long int a , long int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b ; scanf ( \"%lld %lld\" , & a , & b ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return 0 ; }", "label": 0, "id": 26708}
{"input": "main ( ) { int n , k ; int m , i , j = 0 ; int arr [ 100 ] [ 100 ] ; int res [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = m - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ; res [ k ] = arr [ 0 ] [ 0 ] ; } for ( k = 0 ; k < n ; k ++ ) printf ( \"%d\n\" , res [ k ] ) ; return 0 ; }", "label": 1, "id": 15576}
{"input": "int tri ( int num [ ] , int i ) ; int main ( ) { int n , r , num [ 10 ] , i , j , max = 0 ; scanf ( \"%d\" , & n ) ; if ( n <= 1000 ) { while ( n -- ) { max = 0 ; scanf ( \"%d\" , & r ) ; if ( r > 0 && r < 100 ) { for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num [ j ] ) ; } if ( i == 0 ) continue ; else max = max + tri ( num , i ) ; } } printf ( \"%d\" , max ) ; } } return 0 ; } int tri ( int num [ 10 ] , int i ) { int k , max ; max = num [ 0 ] ; for ( k = 0 ; k <= i ; k ++ ) { if ( max <= num [ k ] ) max = num [ k ] ; } return max ; }", "label": 3, "id": 2121}
{"input": "int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return a * b / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; int gsd = gcd ( a , b ) ; int lsd = lcm ( a , b ) ; printf ( \"%d %d\n\" , gsd , lsd ) ; } }", "label": 1, "id": 12051}
{"input": "int main ( ) { int t , a , b , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) if ( a % i == 0 && b % i == 0 ) printf ( \"%d %d\n\" , i , ( a * b ) / i ) ; } return 0 ; }", "label": 1, "id": 16734}
{"input": "int main ( ) { int t , n , i , current ; t = scan ( ) ; while ( t -- ) { int min = 999999 ; n = scan ( ) ; for ( i = 0 ; i < n ; i ++ ) { current = scan ( ) ; if ( current < min ) min = current ; } printf ( \"%lld\n\" , ( long long ) min * ( n - 1 ) ) ; } return 0 ; } int scan ( ) { int num = 0 , sign = 1 ; char c = '\\0' ; while ( c < '0' || c > '9' ) { c = getcx ( ) ; if ( c == '-' ) { sign = - 1 ; c = getcx ( ) ; break ; } } while ( c >= '0' && c <= '9' ) { num = num * 10 + c - '0' ; c = getcx ( ) ; } return num * sign ; }", "label": 0, "id": 7003}
{"input": "int main ( ) { int t , n , m , i , a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & n , & m ) ; a = n , b = m ; while ( n != m ) { if ( m > n ) m = m - n ; else n = n - m ; } gcd = m ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 19398}
{"input": "long long h ( long long a , long long b ) { while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; } int main ( ) { long long t , a , b , hcf , lcm ; scanf ( \"%lld\" , & t ) ; while ( t > 0 ) { t -- ; scanf ( \"%lld%lld\" , & a , & b ) ; hcf = h ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 9633}
{"input": "int gcd ( int a , int b ) { int c ; while ( b != 0 ) { c = a % b ; a = b ; b = c ; } return ( a ) ; } main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , GCD , LCM ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { GCD = gcd ( a , b ) ; LCM = ( a * b ) / GCD ; } else { GCD = gcd ( b , a ) ; LCM = ( a * b ) / GCD ; } printf ( \"%d %d\n\" , GCD , LCM ) ; } }", "label": 1, "id": 12160}
{"input": "int sumcal ( int line , int x , int y , int matrix [ line ] [ line ] ) { if ( x < line - 1 ) return ( matrix [ x ] [ y ] + max ( sumcal ( line , x + 1 , y , matrix ) , sumcal ( line , x + 1 , y + 1 , matrix ) ) ) ; else return ( matrix [ x ] [ y ] ) ; } int tri ( int li ) { int j , k , matrix [ li ] [ li ] ; for ( j = 0 ; j < li ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & matrix [ j ] [ k ] ) ; } return ( sumcal ( li , 0 , 0 , matrix ) ) ; } int main ( ) { int t , l , i , j ; scanf ( \"%d\" , & t ) ; int out [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & l ) ; out [ i ] = tri ( l ) ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , out [ i ] ) ; }", "label": 2, "id": 23095}
{"input": "int main ( ) { long long int t ; scanf ( \"%lli\" , & t ) ; while ( t -- ) { long long int n ; scanf ( \"%lli\" , & n ) ; long long int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lli\" , & a [ i ] ) ; } int min = a [ 0 ] ; int sum = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( \"%lli\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 6467}
{"input": "struct newArray { int value ; int weight ; } ; int max ( int a , int b ) { return a > b ? a : b ; } int max_array ( int * b , int n ) { int i , x = b [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( x < b [ i ] ) { x = b [ i ] ; } } return x ; } int main ( ) { int n , i , j , k ; scanf ( \"%d\" , & n ) ; int A [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; struct newArray B [ A [ i ] ] [ A [ i ] ] ; int C [ A [ i ] ] ; for ( j = 0 ; j < A [ i ] ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & B [ j ] [ k ] . value ) ; if ( j == 0 && k == 0 ) { B [ j ] [ k ] . weight = B [ j ] [ k ] . value ; } else if ( k == 0 ) { B [ j ] [ k ] . weight = B [ j - 1 ] [ k ] . weight + B [ j ] [ k ] . value ; } else if ( j == k ) { B [ j ] [ k ] . weight = B [ j - 1 ] [ k - 1 ] . weight + B [ j ] [ k ] . value ; } else { B [ j ] [ k ] . weight = max ( B [ j - 1 ] [ k ] . weight , B [ j - 1 ] [ k - 1 ] . weight ) + B [ j ] [ k ] . value ; } C [ k ] = B [ j ] [ k ] . weight ; } } A [ i ] = max_array ( C , A [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , A [ i ] ) ; } return 0 ; }", "label": 0, "id": 11931}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , y , x ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j < n - 1 ; j ++ ) { x = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; y = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = x > y ? x : y ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26323}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm , j , n , f , a ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; a = ( n1 < n2 ) ? n1 : n2 ; for ( j = 1 ; j <= a ; j ++ ) { if ( n1 % j == 0 && n2 % j == 0 ) { gcd = j ; } } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 2542}
{"input": "int main ( ) { int test , size , i ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { scanf ( \"%d\" , & size ) ; int a [ size ] ; int min = 1000000 ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } int min_cost = min * ( size - 1 ) ; printf ( \"%d\n\" , min_cost ) ; } return 0 ; }", "label": 1, "id": 23643}
{"input": "int main ( ) { int j , i , a [ 101 ] [ 101 ] = { 0 } , n , s = 0 , t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; } } s = a [ n ] [ 1 ] ; for ( i = n , j = 1 ; j <= n ; j ++ ) if ( a [ i ] [ j ] > s ) s = a [ i ] [ j ] ; printf ( \"%d\n\" , s ) ; t -- ; } return 0 ; }", "label": 0, "id": 16628}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = lcm ( a , b ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; } int gcd ( int a , int b ) { int rem ; rem = a % b ; if ( rem == 0 ) return b ; if ( b == 0 ) return a ; if ( a == 0 ) return b ; return gcd ( b , rem ) ; } int lcm ( int a , int b ) { int l ; l = ( a * b ) / gcd ( a , b ) ; return l ; }", "label": 1, "id": 3987}
{"input": "int readInt ( ) { int read = 0 ; char c ; do { c = getchar ( ) ; } while ( c <= 47 && c >= 58 ) ; while ( c > 47 && c < 58 ) { read = ( read << 1 ) + ( read << 3 ) + c - 48 ; c = getchar ( ) ; } return read ; } int max ( int a , int b ) { return a > b ? a : b ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; int b [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( i == n - 1 ) b [ i ] [ j ] = a [ i ] [ j ] ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { b [ i ] [ j ] = max ( a [ i ] [ j ] + b [ i + 1 ] [ j ] , a [ i ] [ j ] + b [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , b [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 1381}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) a [ i ] [ j ] = max ( a [ i ] [ j ] + a [ i + 1 ] [ j ] , a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15705}
{"input": "int main ( ) { int t ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { int s , i , m ; long int n ; scanf ( \"%d\n\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } m = arr [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < m ) m = arr [ i ] ; } printf ( \"%ld\n\" , m * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 1761}
{"input": "int main ( ) { int i , j , k , row , t , n ; register long int sum , gr ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & row ) ; gr = 0 ; for ( j = 1 ; j <= row ; j ++ ) { sum = 0 ; for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & n ) ; sum += n ; } if ( sum > gr ) { gr = sum ; } } printf ( \"%d\" , gr ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 1654}
{"input": "int main ( ) { int i , j , n , a [ 100 ] [ 100 ] , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5315}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int i , n , c = 0 ; scanf ( \"%ld\" , & n ) ; long long int a [ n + 1 ] ; for ( i = n - 2 ; i >= 0 ; i -- ) { if ( a [ i ] <= a [ i + 1 ] ) c ++ ; } printf ( \"%ld\n\" , c + n ) ; } }", "label": 3, "id": 25437}
{"input": "int main ( ) { int i , j , k , t , a [ 100 ] [ 100 ] , row ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } for ( i = row ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 583}
{"input": "long gcd ( long a , long b ) { long r , i ; while ( b != 0 ) { r = a % b ; a = b ; b = r ; } return a ; } int main ( ) { int T , x , y ; long lcm , gcd1 ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & x , & y ) ; gcd1 = gcd ( x , y ) ; lcm = ( x * y ) / gcd1 ; printf ( \"%li %li\n\" , gcd1 , lcm ) ; } return 0 ; }", "label": 1, "id": 3242}
{"input": "int main ( ) { int m , n , rem = 0 , n1 , n2 ; int t ; scanf ( \"%d\n\" , & t ) ; printf ( \"\n\" ) ; while ( t -- ) { scanf ( \"%d %d\" , & m , & n ) ; n1 = m ; n2 = n ; rem = m % n ; while ( rem != 0 ) { m = n ; n = rem ; rem = m % n ; } printf ( \"%d \" , n ) ; printf ( \"%d\n\" , ( n1 * n2 ) / n ) ; } return 0 ; }", "label": 1, "id": 9580}
{"input": "int main ( ) { int T ; long int a , b , n , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; n = a ; if ( b < a ) n = b ; while ( n > 0 ) { if ( a % n == 0 && b % n == 0 ) { gcd = n ; break ; } n -- ; } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 1982}
{"input": "main ( ) { long long int i , t ; long long int j ; long long int a [ 100000 ] , b [ 100000 ] ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long long int n ; scanf ( \"%lld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } long long int min = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( min > a [ j ] ) min = a [ j ] ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } }", "label": 0, "id": 16791}
{"input": "int main ( void ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int x , y , counter ; scanf ( \"%d\" , & y ) ; counter = 0 ; for ( i = 1 ; i < n ; i ++ ) { x = y ; scanf ( \"%d\" , & y ) ; if ( x <= y ) counter ++ ; while ( x <= y ) { x = y ; if ( ++ i == n ) break ; scanf ( \"%d\" , & y ) ; } } printf ( \"%d\n\" , n + counter ) ; } return 0 ; }", "label": 1, "id": 20537}
{"input": "int triangle [ 100 ] [ 100 ] ; int M [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) { return a ; } return b ; } int main ( int argc , char * * argv ) { int cases , rowCount , i , j ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { scanf ( \"%d\" , & rowCount ) ; for ( i = 0 ; i < rowCount ; ++ i ) { for ( j = 0 ; j < i + 1 ; ++ j ) { scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; } } for ( i = 0 ; i < rowCount ; ++ i ) { M [ rowCount - 1 ] [ i ] = triangle [ rowCount - 1 ] [ i ] ; } int * line ; int s ; for ( i = rowCount - 2 ; i >= 0 ; -- i ) { line = triangle [ i ] ; for ( j = 0 ; j < i + 1 ; ++ j ) { s = line [ j ] ; M [ i ] [ j ] = max ( s + M [ i + 1 ] [ j ] , s + M [ i + 1 ] [ i + 1 > j + 1 ? j + 1 : i + 1 ] ) ; } } printf ( \"%d\n\" , M [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 11489}
{"input": "int dp [ 101 ] [ 101 ] ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int ms ( int a [ ] [ 101 ] , int n , int r , int p ) { if ( r == n ) return 0 ; if ( p == r + 1 ) return 0 ; if ( dp [ r ] [ p ] != - 1 ) return dp [ r ] [ p ] ; dp [ r ] [ p ] = max ( ms ( a , n , r + 1 , p ) + a [ r ] [ p ] , ms ( a , n , r + 1 , p + 1 ) + a [ r ] [ p ] ) ; return dp [ r ] [ p ] ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , ans ; for ( i = 0 ; i < 101 ; i ++ ) for ( j = 0 ; j < 101 ; j ++ ) dp [ i ] [ j ] = - 1 ; scanf ( \"%d\" , & n ) ; int a [ 101 ] [ 101 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; ans = ms ( a , n , 0 , 0 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 9336}
{"input": "int a [ 100 ] [ 100 ] ; main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17859}
{"input": "int main ( void ) { long long int n1 , n2 , t , max , min , lcm , gcd ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \" %lld%lld\" , & n1 , & n2 ) ; if ( n1 > n2 ) { max = n1 ; min = n2 ; } else { max = n2 ; min = n1 ; } if ( max % min == 0 ) lcm = max ; else { lcm = n1 * n2 ; for ( int i = 2 ; i <= min ; i ++ ) { if ( ( n1 % i == 0 ) && ( n2 % i == 0 ) ) { lcm /= i ; break ; } } } if ( ( ( n1 * n2 ) % lcm ) == 0 ) gcd = ( n1 * n2 ) / lcm ; else gcd = 1 ; printf ( \"%lld\\t%lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 24363}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 101 ] [ 101 ] = { 0 } ; int n ; scanf ( \"%d\" , & n ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int dp [ n + 1 ] [ n + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } dp [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { dp [ i ] [ j ] = max ( dp [ i ] [ j ] , a [ i ] [ j ] + dp [ i - 1 ] [ j ] ) ; dp [ n ] [ n ] = max ( dp [ n ] [ n ] , dp [ i ] [ j ] ) ; if ( j >= 1 ) { dp [ i ] [ j ] = max ( dp [ i ] [ j ] , a [ i ] [ j ] + dp [ i - 1 ] [ j - 1 ] ) ; dp [ n ] [ n ] = max ( dp [ n ] [ n ] , dp [ i ] [ j ] ) ; } } } printf ( \"%d\n\" , dp [ n ] [ n ] ) ; } }", "label": 0, "id": 4769}
{"input": "main ( ) { int a , b , gcd , t , i , p , q ; int lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & p , & q ) ; a = p ; b = q ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } lcm = ( p * q ) / a ; printf ( \"gcd=%d lcm=%d\n\" , a , lcm ) ; } }", "label": 1, "id": 4514}
{"input": "int gcd ( int a , int b ) { int r = a % b ; while ( r > 0 ) { a = b ; b = r ; r = a % b ; } return b ; } int main ( void ) { long int t , a , b , c , d ; scanf ( \"%ld\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld%ld\" , & a , & b ) ; c = gcd ( a , b ) ; d = a * b / c ; printf ( \"%ld %ld\n\" , c , d ) ; t -- ; } return 0 ; }", "label": 0, "id": 13646}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned long long int n , i , mini , a ; scanf ( \"%llu\" , & n ) ; scanf ( \"%llu\" , & mini ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%llu\" , & a ) ; if ( a < mini ) mini = a ; } printf ( \"%llu\n\" , mini * ( n - 1 ) ) ; } }", "label": 0, "id": 18077}
{"input": "main ( ) { int no , i , k , j ; scanf ( \"%d\" , & no ) ; for ( i = 0 ; i < no ; i ++ ) { int num , max = 0 , sum = 0 ; scanf ( \"%d\" , & num ) ; int a [ 100 ] [ 100 ] = { 0 } ; for ( j = 0 ; j < num ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( i = num - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 2, "id": 23258}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t ) { long n ; scanf ( \"%ld\" , & n ) ; int a [ n ] , i ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int small = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( small > a [ i ] ) small = a [ i ] ; printf ( \"%ld\n\" , small * ( n - 1 ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 8604}
{"input": "int main ( void ) { long long int t ; scanf ( \"%lld\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long long int n ; scanf ( \"%lld\" , & n ) ; long long int a , min = INT_MAX ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a ) ; if ( min > a ) min = a ; } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 22078}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a [ 100 ] [ 100 ] , i , j , m , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { memset ( a , 0 , sizeof ( a ) ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) { if ( i && j ) a [ i ] [ j ] += max ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; if ( i && ! j ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } m = a [ n - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ n - 1 ] [ j ] > m ) m = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 1, "id": 12255}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] , sum1 , sum2 , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } if ( n > 2 ) { for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { sum1 = 0 ; sum2 = 0 ; sum1 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; sum2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( sum1 >= sum2 ) a [ i ] [ j ] = sum1 ; else a [ i ] [ j ] = sum2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } else { sum1 = a [ 0 ] [ 0 ] + a [ 1 ] [ 0 ] ; sum2 = a [ 0 ] [ 0 ] + a [ 1 ] [ 1 ] ; if ( sum1 > sum2 ) printf ( \"%d\n\" , sum1 ) ; else printf ( \"%d\n\" , sum2 ) ; } } return 0 ; }", "label": 0, "id": 24838}
{"input": "long long sum ; int main ( ) { int t , n , i ; long ar [ 100001 ] , min , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & ar [ i ] ) ; sum = 0 ; min = ar [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( ar [ i ] < min ) min = ar [ i ] ; } m = n - 1 ; sum = min * m ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 23314}
{"input": "int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; int r ; long long int a , b , l ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; r = gcd ( a , b ) ; l = ( a * b ) / r ; printf ( \"%d %lld\n\" , r , l ) ; } return 0 ; }", "label": 0, "id": 25133}
{"input": "int main ( ) { int t , n , arr [ 100000 ] , i , j , k , check , temp , count ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { if ( j + i - 1 <= n ) { temp = arr [ j - 1 ] ; check = 1 ; for ( k = j ; ( k <= j + i - 1 ) ; k ++ ) { if ( arr [ k - 1 ] >= temp ) temp = arr [ k - 1 ] ; else { check = 0 ; break ; } } if ( check == 1 ) count ++ ; } else break ; } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 2, "id": 2646}
{"input": "int main ( ) { int t ; long int n , * a , sum , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%ld\" , & n ) ; a = ( long int * ) malloc ( sizeof ( long int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( i == 0 ) sum = a [ 0 ] ; else if ( a [ i ] < sum ) sum = a [ i ] ; } printf ( \"%ld\n\" , sum * ( n - 1 ) ) ; } }", "label": 0, "id": 13740}
{"input": "int main ( ) { int m ; scanf ( \"%d\" , & m ) ; while ( m -- ) { int t ; scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] , c [ t ] ; for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) if ( i > j ) if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; } for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) printf ( \"%d\" , a [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( int j = 0 ; j < t ; j ++ ) { c [ j ] = 0 ; for ( int i = j ; i < t ; i ++ ) c [ j ] = c [ j ] + a [ i ] [ j ] ; } int n = 0 ; for ( int i = 0 ; i < t ; i ++ ) { if ( n < c [ i ] ) n = c [ i ] ; } printf ( \"%d\n\" , n ) ; } }", "label": 1, "id": 22748}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 101 ] [ 101 ] , n , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j -- ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 3241}
{"input": "int main ( ) { int i , t , n , j , sum = 0 , p ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ ( n * ( n + 1 ) ) / 2 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { sum = sum + a [ 0 ] [ 0 ] ; p = 0 ; } if ( ( a [ i ] [ p ] ) > a [ i ] [ p + 1 ] ) { sum = sum + a [ i ] [ p ] ; } else { sum = sum + a [ i ] [ p + 1 ] ; p = p + 1 ; } } printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 2, "id": 1190}
{"input": "int main ( ) { int n , i ; long h , l ; scanf ( \"%d\" , & n ) ; long a [ 2 ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld %ld\" , & a [ 0 ] [ i ] , & a [ 1 ] [ i ] ) ; printf ( \"\n\" ) ; for ( i = 0 ; i < n ; i ++ ) { for ( h = a [ 0 ] [ i ] < a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; h >= 1 ; h -- ) { if ( a [ 0 ] [ i ] % h == 0 && a [ 1 ] [ i ] % h == 0 ) break ; } printf ( \"%ld \" , h ) ; for ( l = a [ 0 ] [ i ] > a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; l <= a [ 0 ] [ i ] * a [ 1 ] [ i ] ; l += ( a [ 0 ] [ i ] > a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ) ) { if ( l % a [ 0 ] [ i ] == 0 && l % a [ 1 ] [ i ] == 0 ) break ; } printf ( \"%ld\n\" , l ) ; } return 0 ; }", "label": 2, "id": 17851}
{"input": "int main ( ) { int i , T , gcd , lcm , j ; long int A , B ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld %ld\" , & A , & B ) ; for ( j = 1 ; ( j <= A ) && ( j <= B ) ; j ++ ) { if ( ( A % j == 0 ) && ( B % j == 0 ) ) gcd = j ; } lcm = A * B / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 17028}
{"input": "int hcf ( int , int ) ; int main ( ) { int a , b , t , h , l , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( \"%d\\t%d\" , h , l ) ; } return 0 ; } int hcf ( int x , int y ) { if ( y == 0 ) return x ; else return hcf ( y , x % y ) ; }", "label": 1, "id": 24568}
{"input": "int main ( int argc , char * argv [ ] ) { int * results ; int * sums = malloc ( MAX_SIZE * sizeof ( int ) ) ; int * prev_sums = malloc ( MAX_SIZE * sizeof ( int ) ) ; int round , rounds ; int line , width ; int i , tmp , max ; scanf ( \"%d\" , & rounds ) ; results = calloc ( rounds , sizeof ( int ) ) ; for ( round = 0 ; round < rounds ; ++ round ) { scanf ( \"%d\" , & width ) ; for ( i = 0 ; i < width ; ++ i ) prev_sums [ i ] = 0 ; for ( line = 0 ; line < width ; ++ line ) { for ( i = 0 ; i < ( line + 1 ) ; ++ i ) { scanf ( \"%d\" , & tmp ) ; if ( i == 0 ) { sums [ i ] = prev_sums [ i ] + tmp ; } else { sums [ i ] = ( prev_sums [ i ] > prev_sums [ i - 1 ] ) ? ( prev_sums [ i ] + tmp ) : ( prev_sums [ i - 1 ] + tmp ) ; } } for ( i = 0 ; i < ( line + 1 ) ; ++ i ) prev_sums [ i ] = sums [ i ] ; } for ( max = i = 0 ; i < width ; ++ i ) { if ( max < sums [ i ] ) { max = sums [ i ] ; } } printf ( \"%d\n\" , max ) ; } free ( prev_sums ) ; free ( sums ) ; free ( results ) ; return 0 ; }", "label": 0, "id": 5658}
{"input": "int main ( ) { int T , N , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; int A [ N ] [ N ] ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j < N ; j ++ ) A [ i ] [ j ] = 0 ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; for ( i = 1 ; i < N ; i ++ ) { A [ i ] [ i - 1 ] += A [ i - 1 ] [ i ] ; A [ i ] [ i ] += A [ i - 1 ] [ i ] ; } int max = A [ 0 ] [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( A [ i ] [ j ] > max ) max = A [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 26269}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = i + 1 ; j < n ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = n - 1 ; i > 0 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 12664}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; gcd ( b % a , a ) ; } long long int lcm ( int a , int b ) { return ( long long int ) a * b / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %lld\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 0, "id": 3936}
{"input": "int maximum ( int * * array , int a , int b ) { return array [ a ] [ b ] > array [ a ] [ b - 1 ] ? array [ a ] [ b ] : array [ a ] [ b - 1 ] ; } int main ( ) { int * * triarray ; int * * sumarray ; int tests ; int rows ; int i , j , k ; int firstrow ; int highest = 0 ; scanf ( \"%d\" , & tests ) ; for ( i = 0 ; i < tests ; i ++ ) { scanf ( \"%d\" , & rows ) ; triarray = malloc ( sizeof ( int * ) * rows ) ; sumarray = malloc ( sizeof ( int * ) * rows ) ; for ( j = 0 ; j < rows ; j ++ ) { triarray [ j ] = malloc ( sizeof ( int ) * ( j + 2 ) ) ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & ( triarray [ j ] [ k ] ) ) ; } } firstrow = 0 ; for ( j = 0 ; j < rows ; j ++ ) { sumarray [ j ] = malloc ( sizeof ( int ) * ( j + 2 ) ) ; firstrow += triarray [ j ] [ 0 ] ; sumarray [ j ] [ 0 ] = firstrow ; for ( k = 1 ; k <= j ; k ++ ) { sumarray [ j ] [ k ] = maximum ( sumarray , j - 1 , k ) + triarray [ j ] [ k ] ; } } for ( k = 0 ; k < rows ; k ++ ) { if ( sumarray [ rows - 1 ] [ k ] > highest ) { highest = sumarray [ rows - 1 ] [ k ] ; } } printf ( \"%d\n\" , highest ) ; } }", "label": 1, "id": 14273}
{"input": "int gcd ( int n1 , int n2 ) ; int gcd ( int n1 , int n2 ) { while ( n1 != n2 ) { if ( n1 > n2 ) { n1 = n1 - n2 ; } else { n2 = n2 - n1 ; } } return n1 ; } int main ( void ) { int x , y , n1 , n2 , result , lcm , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; x = n1 ; y = n2 ; result = gcd ( n1 , n2 ) ; lcm = ( x * y ) / result ; printf ( \"%d %d\n\" , result , lcm ) ; } }", "label": 1, "id": 19801}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { long long int t , a , b , min , max , lcm , hcf ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; max = ( a > b ) ? a : b ; min = ( a < b ) ? a : b ; hcf = gcd ( max , min ) ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\" , hcf , lcm ) ; } return 0 ; } long long int gcd ( long long int a , long long int b ) { if ( a % b == 0 ) { return b ; } else { return gcd ( b , a % b ) ; } }", "label": 1, "id": 9585}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , x , y , r , gcd , lcm ; scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { r = x % y ; x = y ; y = r ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 24921}
{"input": "int main ( ) { int t , n , a [ 1000 ] , i , sum , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"\n%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min < a [ i ] ) { sum = sum + min ; } else { min = a [ i ] ; sum = sum + min ; } } printf ( \"\n%d\" , sum ) ; } return 0 ; }", "label": 3, "id": 5746}
{"input": "int a [ 100 ] [ 100 ] ; int func ( int a [ ] [ 100 ] , int n ) { int i , j ; for ( i = n - 2 ; i >= 0 ; -- i ) { for ( j = 0 ; j <= i ; ++ j ) { a [ i ] [ j ] += MAX ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } return a [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; k = func ( a , n ) ; printf ( \"%d\n\" , k ) ; } return 0 ; }", "label": 0, "id": 10600}
{"input": "int main ( ) { int t , i , n , min , array [ 50000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100001 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & array [ i ] ) ; if ( array [ i ] < min ) { min = array [ i ] ; } } min = min * ( n - 1 ) ; printf ( \"%d\n\" , min ) ; } return 0 ; }", "label": 0, "id": 26219}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , temp = 0 , i , ans , j ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; i = 0 ; j = i + 1 ; while ( 1 ) { if ( a [ i ] <= a [ j ] ) { temp = temp + a [ i ] ; if ( ( j - i ) > 1 ) j ++ ; else j = i + 2 ; } else if ( a [ i ] > a [ j ] ) { temp = temp + a [ j ] ; i = j ; j ++ ; } if ( i == n || j == n ) break ; } printf ( \"%d\n\" , temp ) ; temp = 0 ; } }", "label": 1, "id": 4193}
{"input": "int main ( ) { int t , i , j , r , a , sum = 0 ; scanf ( \"%d\" , & t ) ; for ( a = 0 ; a < t ; a ++ ) { scanf ( \"%d\" , & r ) ; int array [ r ] [ r ] ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & array [ i ] [ j ] ) ; } } j = 0 ; sum = array [ 0 ] [ 0 ] ; for ( i = 1 ; i < r ; i ++ ) { if ( array [ i ] [ j ] >= array [ i ] [ j + 1 ] ) { sum = sum + array [ i ] [ j ] ; } else if ( array [ i ] [ j ] < array [ i ] [ j + 1 ] ) { sum = sum + array [ i ] [ j + 1 ] ; j ++ ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 20354}
{"input": "int main ( ) { int a [ 99 ] [ 99 ] ; int t , n , i , k , j , sum = 0 ; scanf ( \"%d\" , & t ) ; if ( t <= 100 ) { for ( k = 1 ; k <= t ; k ++ ) { scanf ( \"%d\" , & n ) ; if ( n < 100 ) { sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } sum += a [ 0 ] [ 0 ] ; j = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i + 1 ] [ j ] > a [ i ] [ j + 1 ] ) sum += a [ i ] [ j ] ; else if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) { sum += a [ i ] [ j + 1 ] ; j ++ ; } else sum += a [ i ] [ j ] ; } printf ( \"%d\n\" , sum ) ; } } } return 0 ; }", "label": 1, "id": 26037}
{"input": "int main ( ) { int a , b , lcm , t , i , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= b ; i ++ ) { if ( a * i % b == 0 ) { lcm = a * i ; break ; } } gcd = ( a * b ) / lcm ; printf ( \"%d %d\" , gcd , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 7852}
{"input": "void main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { long long int n , i , a [ 100000 ] , j , min ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( min > a [ i ] ) min = a [ i ] ; printf ( \"%lld\" , min * ( n - 1 ) ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 0, "id": 1215}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; int count = 0 , x = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - 1 ] ) x ++ ; else { count += x * ( x + 1 ) / 2 ; x = 1 ; } } count += x * ( x + 1 ) / 2 ; printf ( \"%d\n\" , count ) ; } }", "label": 0, "id": 18817}
{"input": "int gcd ( int , int ) ; int main ( ) { int temp = 1 , a , b , x , y ; scanf ( \"%d%d\" , & a , & b ) ; if ( a < b ) { y = lcm ( a , b ) ; } else { y = lcm ( b , a ) ; } printf ( \"%d\n\" , y ) ; if ( a < b ) { x = gcd ( a , b ) ; } else { x = gcd ( b , a ) ; } printf ( \"%d\n\" , x ) ; } int gcd ( int a , int b ) { if ( b % a == 0 ) { return a ; } else { gcd ( b % a , a ) ; } } int lcm ( a , b ) { if ( b % a == 0 ) { return b ; } else { lcm ( a , ( 2 * b ) ) ; } }", "label": 1, "id": 22811}
{"input": "int main ( ) { int a , b , t , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { lcm = a ; gcd = b ; } else { lcm = b ; gcd = a ; } while ( lcm % a != 0 || lcm % b != 0 ) lcm ++ ; while ( a % gcd != 0 || b % gcd != 0 ) gcd -- ; printf ( \"%d\n%d\n\" , lcm , gcd ) ; } }", "label": 2, "id": 12101}
{"input": "int main ( ) { int yo ; int row , col ; int i , j ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & yo ) ; while ( yo -- ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } row -- ; row -- ; for ( ; row != 0 ; row -- ) { col = 0 ; while ( col < row ) { if ( arr [ row ] [ col ] > arr [ row ] [ col + 1 ] ) arr [ row - 1 ] [ col ] += arr [ row ] [ col ] ; else arr [ row - 1 ] [ col ] += arr [ row ] [ col + 1 ] ; col ++ ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 18208}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n ; scanf ( \"%d\" , & n ) ; int ar [ n ] ; int i ; long long length = 1 , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & ar [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ , length ++ ) if ( ar [ i ] > ar [ i + 1 ] ) { sum += ( ( length ) * ( length + 1 ) / 2 ) ; length = 1 ; } sum += ( ( length ) * ( length + 1 ) / 2 ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 7087}
{"input": "int main ( void ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int x , y , counter ; scanf ( \"%d\" , & y ) ; counter = 0 ; for ( i = 1 ; i < n ; i ++ ) { x = y ; scanf ( \"%d\" , & y ) ; while ( x <= y ) { counter ++ ; x = y ; if ( ++ i == n ) break ; scanf ( \"%d\" , & y ) ; } } printf ( \"%d\n\" , n + counter ) ; } return 0 ; }", "label": 1, "id": 23001}
{"input": "int gcd ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int result = gcd ( a , b ) ; printf ( \"%d %d\n\" , result , ( a * b ) / result ) ; } return 0 ; } int gcd ( int a , int b ) { if ( b == 0 ) return a ; else { int c = a % b ; gcd ( b , c ) ; } }", "label": 1, "id": 15674}
{"input": "int main ( ) { int i , j , k , sum , gr = 0 , row , t , n ; scanf ( \"%d\" , & t ) ; if ( t <= 1000 ) { for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & row ) ; gr = 0 ; if ( row >= 0 && row <= 100 ) { for ( j = 1 ; j <= row ; j ++ ) { sum = 0 ; for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & n ) ; if ( n > 0 && n < 100 ) { sum += n ; } } if ( sum > gr ) { gr = sum ; } } printf ( \"%d\" , gr ) ; printf ( \"\n\" ) ; } } } return 0 ; }", "label": 1, "id": 21642}
{"input": "long long find ( long long int a [ ] , long int n ) { long long int min ; long int i ; min = a [ 0 ] ; i = 1 ; while ( i < n ) { if ( min >= a [ i ] ) { min = a [ i ] ; } i ++ ; } return min ; } int main ( ) { long int i ; int t ; long int p ; long long int j ; long int n ; long long int a [ 10 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld\" , & p ) ; if ( p == 1 ) { break ; } i = 0 ; while ( i < p ) { scanf ( \"\\t%lld\" , & a [ i ] ) ; i ++ ; } n = p ; j = find ( a , n ) ; j = j * ( n - 1 ) ; printf ( \"\n%lld\" , j ) ; t -- ; } return 0 ; }", "label": 3, "id": 25782}
{"input": "int main ( ) { int t , a [ 50 ] [ 50 ] , i , n , j , s1 = 0 , s2 = 0 ; scanf ( \"%d\" , & t ) ; while ( t ) { s1 = s2 = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 1 ) s1 += a [ i ] [ j ] ; if ( i == j ) s2 += a [ i ] [ j ] ; } printf ( \"\n\" ) ; } if ( s1 > s2 ) printf ( \"%d\n\" , s1 ) ; else printf ( \"%d\n\" , s2 ) ; t -- ; } return 0 ; }", "label": 3, "id": 11213}
{"input": "int main ( ) { int t , i ; long int n , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; x = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < x ) x = a [ i ] ; } x = x * ( n - 1 ) ; printf ( \"%ld\n\" , x ) ; } return 0 ; }", "label": 0, "id": 11234}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i + 1 ] [ j ] ) < ( a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2748}
{"input": "int main ( ) { int n , i = 0 , j = 0 , max1 = 0 , max2 = 0 , max , t ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; int A [ 100 ] [ 100 ] ; int m [ 100 ] [ 100 ] ; scanf ( \"%d\" , & A [ 0 ] [ 0 ] ) ; m [ 0 ] [ 0 ] = A [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; m [ i ] [ 0 ] = m [ i - 1 ] [ 0 ] + A [ i ] [ 0 ] ; } max = m [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( i == j ) m [ i ] [ j ] = m [ i - 1 ] [ j - 1 ] + A [ i ] [ j ] ; else { max1 = m [ i - 1 ] [ j ] + A [ i ] [ j ] ; max2 = m [ i - 1 ] [ j - 1 ] + A [ i ] [ j ] ; m [ i ] [ j ] = Max ( max1 , max2 ) ; max = Max ( max , m [ i ] [ j ] ) ; } } } printf ( \"%d\" , max ) ; t -- ; } return 0 ; }", "label": 1, "id": 11810}
{"input": "int gcd ( long int , long int ) ; void main ( ) { int n , i , g , l ; long int x , y ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%li%li\" , & x , & y ) ; g = gcd ( x , y ) ; l = ( ( x * y ) / g ) ; printf ( \"%d %d\" , g , l ) ; } } int gcd ( long int m , long int n ) { int i , j , h ; if ( m > n ) j = m ; else j = n ; for ( i = 2 ; i < j ; i ++ ) { if ( ( m % i ) == 0 && ( n % i ) == 0 ) h = i ; } if ( h != 1 ) return h ; else return 1 ; }", "label": 2, "id": 2342}
{"input": "int main ( ) { int t , i , a , b , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 10695}
{"input": "main ( ) { long int n , t , i , j ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] , count = 0 ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = i + 1 ; j <= n ; j ++ ) { if ( a [ i ] > a [ j ] ) count ++ ; } } printf ( \"%ld\" , count ) ; } }", "label": 2, "id": 7071}
{"input": "int main ( void ) { int t , a , b , gcd , i , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { if ( a % b == 0 ) { gcd = b ; } else { for ( i = 1 ; i < b ; i ++ ) { if ( ( a % ( b - i ) == 0 ) && ( b % ( b - i ) == 0 ) ) { gcd = ( b - i ) ; break ; } } } } else if ( a < b ) { if ( b % a == 0 ) { gcd = a ; } else { for ( i = 1 ; i < a ; i ++ ) { if ( ( b % ( a - i ) == 0 ) && ( a % ( a - i ) == 0 ) ) { gcd = ( a - i ) ; break ; } } } } else if ( a == b ) { gcd = a ; } lcm = ( a / gcd ) * b ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 19038}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { long int t , k ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long int a , b ; scanf ( \"%ld%ld\" , & a , & b ) ; k = gcd ( a , b ) ; long int l = ( a * b ) / k ; printf ( \"%ld %ld\n\" , k , l ) ; } }", "label": 0, "id": 21294}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j ; a [ 0 ] [ 0 ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 20598}
{"input": "int main ( ) { int n , count , l , i , j , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = l - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15656}
{"input": "int main ( ) { int t , a , b , min , i , hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a < b ) min = a ; else min = b ; for ( i = min ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; break ; } } lcm = ( a / hcf ) * b ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 22293}
{"input": "int main ( ) { int num1 , num2 , temp1 , temp2 , temp , GCD , LCM , test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; temp1 = num1 ; temp2 = num2 ; while ( temp2 != 0 ) { temp = temp2 ; temp2 = temp1 % temp2 ; temp1 = temp ; } GCD = temp1 ; LCM = ( num1 * num2 ) / GCD ; printf ( \"%d\\t\" , GCD ) ; printf ( \"%d\" , LCM ) ; } return 0 ; }", "label": 1, "id": 17623}
{"input": "long int gcd ( long int a , long int b ) { if ( a % b == 0l ) return b ; else return gcd ( b , a % b ) ; } int main ( void ) { int tt ; scanf ( \"%d\" , & tt ) ; while ( tt != 0 ) { long int a , b , c = 1l ; scanf ( \"%ld %ld\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%ld %ld\n\" , c , ( a * b ) / c ) ; tt -- ; } return 0 ; }", "label": 0, "id": 56}
{"input": "int row = 1 , i = 1 , n , rows = 1 , max = 0 , val1 , val2 , * a , * b ; int sumt ( int row , int i ) { int val1 , val2 , sum = 0 ; if ( b [ i ] != - 1 ) { return b [ i ] ; } if ( row == rows ) { sum = a [ i ] ; return sum ; } val1 = sumt ( row + 1 , row + i ) ; val2 = sumt ( row + 1 , row + i + 1 ) ; if ( val1 >= val2 ) { b [ i ] = val1 + a [ i ] ; sum = b [ i ] ; } else { b [ i ] = val2 + a [ i ] ; sum = b [ i ] ; } return sum ; } int main ( ) { int j = 1 , t ; scanf ( \"%d\" , & t ) ; while ( t >= 1 ) { scanf ( \"%d\" , & n ) ; rows = n ; n = ( ( ( rows + 1 ) * ( rows ) ) / 2 ) + 1 ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; b = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = 1 ; j <= n - 1 ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; b [ j ] = - 1 ; } max = sumt ( row , i ) ; printf ( \"%d\n\" , max ) ; t -- ; free ( a ) ; free ( b ) ; } return 0 ; }", "label": 0, "id": 755}
{"input": "int main ( ) { int T , n ; int i , j = 0 , k , len = 1 , count = 0 , flag = 0 ; scanf ( \"%d\" , & T ) ; int a [ T ] ; k = T ; while ( T -- ) { scanf ( \"%d\" , & n ) ; long int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] <= arr [ i + 1 ] ) { flag = 1 ; len ++ ; } else { if ( flag == 1 ) count += ( len * ( len - 1 ) ) / 2 ; flag = 0 ; len = 1 ; } } if ( flag == 1 ) count += ( len * ( len - 1 ) ) / 2 ; a [ j ] = count ; j ++ ; count = 0 ; flag = 0 ; len = 1 ; } for ( i = 0 ; i < k ; i ++ ) printf ( \"%d\n\" , a [ i ] ) ; return 0 ; }", "label": 1, "id": 3421}
{"input": "void remov ( int a [ ] , int size , int x ) { int i , k ; int flag = 0 ; for ( i = 0 ; i < size ; i ++ ) if ( a [ i ] == x ) { flag = 1 ; break ; } if ( flag == 1 ) { for ( k = i ; k < size - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; } } int main ( ) { int t , i , count , a [ 10004 ] ; long long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } while ( a [ 1 ] != '\\0' ) { if ( a [ 0 ] < a [ 1 ] ) { count = count + a [ 0 ] ; remov ( a , sizeof ( a ) / 4 , a [ 1 ] ) ; } else { count = count + a [ 1 ] ; remov ( a , sizeof ( a ) / 4 , a [ 0 ] ) ; } } printf ( \"%d\n\" , count ) ; } }", "label": 3, "id": 9042}
{"input": "int main ( ) { int t , a , b , s , x , y , l , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } g = a ; l = ( x * y ) / g ; printf ( \"%d %d \n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 20586}
{"input": "int main ( ) { long int n , j , i , t , a [ 100000 ] , b , k , s ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } for ( j = 0 ; j < ( n - 1 ) ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { if ( a [ k ] < a [ j ] ) { b = a [ j ] ; a [ j ] = a [ k ] ; a [ k ] = b ; } } } s = a [ 0 ] * ( n - 1 ) ; printf ( \"%ld\n\" , s ) ; } return 0 ; }", "label": 2, "id": 10422}
{"input": "int main ( ) { int a , b , i , j , T ; scanf ( \"%d\" , & T ) ; int * k = ( int * ) malloc ( T * sizeof ( int ) ) ; int * l = ( int * ) malloc ( T * sizeof ( int ) ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; int x = a , y = b ; while ( b != 0 ) { j = b ; b = a % b ; a = j ; } k [ i - 1 ] = a ; l [ i - 1 ] = x * y / k [ i - 1 ] ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%d %d\n\" , k [ i ] , l [ i ] ) ; return 0 ; }", "label": 1, "id": 2545}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n ; int a [ 200 ] [ 200 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 25899}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { long long int t , r , i , k , tri [ 1001 ] [ 1001 ] , j , sum ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & r ) ; for ( k = 0 ; k < r ; k ++ ) { for ( j = 0 ; j <= k ; j ++ ) { scanf ( \"%lld\" , & tri [ k ] [ j ] ) ; } } for ( k = 1 ; k < r ; k ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( j == 0 ) { tri [ k ] [ j ] = tri [ k ] [ j ] + tri [ k - 1 ] [ j ] ; } else if ( j == i ) { tri [ k ] [ j ] = tri [ k ] [ j ] + tri [ k - 1 ] [ j - 1 ] ; } else { tri [ k ] [ j ] = tri [ k ] [ j ] + max ( tri [ k - 1 ] [ j ] , tri [ k - 1 ] [ j - 1 ] ) ; } } } sum = 0 ; for ( j = 0 ; j < r ; j ++ ) { if ( tri [ r - 1 ] [ j ] > sum ) sum = tri [ r - 1 ] [ j ] ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 13787}
{"input": "int main ( ) { int T , n1 , n2 ; int x , y ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & x , & y ) ; n1 = x ; n2 = y ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } printf ( \"%d %d\n\" , x , ( n1 * n2 ) / x ) ; } return 0 ; }", "label": 1, "id": 9837}
{"input": "int main ( ) { long t , n , min , a , x ; scanf ( \"%ld\" , & t ) ; { while ( t -- ) { scanf ( \"%ld\" , & n ) ; x = n ; min = 50001 ; { while ( n -- ) { scanf ( \"%ld\" , & a ) ; if ( a < min ) { min = a ; continue ; } } printf ( \"%ld\n\" , min * ( x - 1 ) ) ; } } } }", "label": 0, "id": 8523}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int a , b , i , j ; scanf ( \"%d%d\" , & a , & b ) ; for ( i = a < b ? a : b ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) break ; } printf ( \"%d \" , i ) ; for ( j = a > b ? a : b ; j <= a * b ; j ++ ) { if ( j % a == 0 && j % b == 0 ) break ; } printf ( \"%d\n\" , j ) ; t -- ; } return 0 ; }", "label": 2, "id": 16010}
{"input": "long long int gcd ( long long int n1 , long long int n2 ) { while ( n2 > 0 ) { long long int temp = n2 ; n2 = n1 % n2 ; n1 = temp ; } return n1 ; } int main ( ) { long long int a , b ; int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return 0 ; }", "label": 0, "id": 7081}
{"input": "long long int gcd ( long long int a , long long int b ) ; int main ( ) { long long int t , a , b , g , l ; scanf ( \"%lld\" , & t ) ; while ( t != 0 ) { scanf ( \"%lld%lld\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a / g ) * b ; printf ( \"%lld %lld\n\" , g , l ) ; t -- ; } return 0 ; } long long int gcd ( long long int a , long long int b ) { long long int t ; if ( b > a ) { t = a ; a = b ; b = t ; } while ( b != 0 ) { t = a % b ; a = b ; b = t ; } return a ; }", "label": 0, "id": 5698}
{"input": "int gcd ( long int a , long int b ) { while ( a != b ) { if ( a > b ) { a -= b ; } else { b -= a ; } } return a ; } int lcm ( long int a , long int b ) { int lcm = ( a * b ) / gcd ( a , b ) ; return lcm ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; ++ i ) { long int a , b ; scanf ( \"%ld%ld\" , & a , & b ) ; printf ( \"%ld %ld\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 4983}
{"input": "int gcd ( int x , int y ) { int a ; a = y % x ; if ( a == 0 ) return x ; gcd ( a , x ) ; } int main ( ) { int a , b , swap , c , d , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { swap = a ; a = b ; b = swap ; } if ( a == 0 ) { d = ( a * b ) / b ; printf ( \"%d %d\n\" , b , d ) ; } else if ( b == 0 ) { d = ( a * b ) / a ; printf ( \"%d %d\n\" , a , d ) ; } else if ( a > 0 && b > 0 ) { if ( b % a == 0 ) { d = ( a * b ) / a ; printf ( \"%d %d\n\" , a , d ) ; } else { c = gcd ( a , b ) ; d = ( a * b ) / c ; printf ( \"%d %d\n\" , c , d ) ; } } } return 0 ; }", "label": 1, "id": 12968}
{"input": "int main ( ) { int i , n , j , k , t , a [ 105 ] [ 105 ] ; scanf ( \"%d\n\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\n\" , & t ) ; for ( j = 1 ; j <= t ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = t - 1 ; j >= 1 ; j -- ) { for ( k = 1 ; k <= j ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] + ( a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ? a [ j + 1 ] [ k ] : a [ j + 1 ] [ k + 1 ] ) ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } }", "label": 0, "id": 11562}
{"input": "long int b [ 100000 ] = { 0 } ; int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , l = 0 ; long long int r = 1 ; scanf ( \"%d\" , & n ) ; long int a [ n ] ; scanf ( \"%ld\" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( a [ i ] >= a [ i - 1 ] ) b [ l ] ++ ; else l ++ ; r ++ ; } for ( i = 0 ; i <= l ; i ++ ) { if ( b [ i ] > 0 ) r = r + ( b [ i ] * ( b [ i ] + 1 ) ) / 2 ; } printf ( \"%lld\n\" , r ) ; } return 0 ; }", "label": 1, "id": 8662}
{"input": "int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long int n1 , n2 ; scanf ( \"%d %d\" , & n1 , & n2 ) ; int gcd = 0 , lcm = 0 , k = 1 , j = 0 ; if ( n1 >= n2 ) { while ( k <= n2 ) { if ( n1 % k == 0 && n2 % k == 0 ) gcd = k ; k ++ ; } j = n1 ; while ( j >= n1 ) { if ( j % n1 == 0 && j % n2 == 0 ) { lcm = j ; break ; } else j += n1 ; } } else { while ( k <= n1 ) { if ( n1 % k == 0 && n2 % k == 0 ) gcd = k ; k ++ ; } j = n2 ; while ( j >= n2 ) { if ( j % n1 == 0 && j % n2 == 0 ) { lcm = j ; break ; } else j += n2 ; } } printf ( \"%d %d\" , gcd , lcm ) ; if ( i != t - 1 ) printf ( \"\n\" ) ; } return 0 ; }", "label": 2, "id": 6561}
{"input": "int main ( ) { int i , n , t ; int min = INT_MAX ; scanf ( \"%d\" , & t ) ; int arr [ 100000 ] ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( \"%lld\n\" , ( long long ) min * ( n - 1 ) ) ; min = INT_MAX ; } return 0 ; }", "label": 0, "id": 23322}
{"input": "int main ( void ) { long int x , y , a , b , t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & x , & y ) ; a = x ; b = y ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%ld \" , a ) ; a = x ; b = y ; while ( a != b ) { if ( a < b ) a = a + x ; else b = b + y ; } printf ( \"%ld\n\" , a ) ; } return 0 ; }", "label": 2, "id": 8409}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( void ) { int t , n , a [ 103 ] [ 103 ] , i , j ; t = fastread ( ) ; while ( t -- ) { n = fastread ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = fastread ( ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 1124}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , l , g ; scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 16808}
{"input": "main ( ) { int n1 , n2 , i , t , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\\t %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"\n\" ) ; printf ( \"%d %d\" , gcd , lcm ) ; } }", "label": 2, "id": 17641}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , c = 1 , d , e ; scanf ( \"%lld%lld\" , & a , & b ) ; d = gcd ( b , a ) ; e = d ; while ( d != 1 ) { c = c * d ; d = gcd ( a , b ) ; a = a / d ; b = b / d ; } if ( c != 1 ) printf ( \"%lld %lld\n\" , e , c ) ; else if ( d == 1 ) printf ( \"%lld %lld\n\" , e , a * b ) ; } return 0 ; }", "label": 1, "id": 24203}
{"input": "main ( ) { int long t , i , n1 , n2 , temp1 , temp2 , hcf ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld%ld\" , & n1 , & n2 ) ; temp1 = n1 ; temp2 = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) { n1 = n1 - n2 ; hcf = n1 ; } else if ( n1 < n2 ) { n2 = n2 - n1 ; hcf = n2 ; } } printf ( \"%ld %ld\n\" , hcf , temp1 * temp2 / hcf ) ; } }", "label": 0, "id": 5257}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } main ( ) { int n , t , i , j , a [ 102 ] [ 102 ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26599}
{"input": "int main ( ) { int t , lcm , i , x , gcd , a , b ; scanf ( \"%d\" , & t ) ; for ( x = 1 ; x <= t ; x ++ ) { scanf ( \"%d %d\" , & a , & b ) ; { for ( i = 1 ; i <= a && i <= b ; ++ i ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; lcm = ( a * b ) / gcd ; } printf ( \"%d %d\n\" , gcd , lcm ) ; } } return 0 ; }", "label": 2, "id": 20814}
{"input": "int main ( ) { int t , i ; unsigned long x ; int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; x = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < x ) x = a [ i ] ; } x = x * ( n - 1 ) ; printf ( \"%lu\n\" , x ) ; } return 0 ; }", "label": 0, "id": 6718}
{"input": "int main ( ) { int T , N , i , A [ 50000 ] , cost ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } cost = 0 ; for ( i = 0 ; i < N - 1 ; i ++ ) { if ( A [ i ] < A [ i + 1 ] ) { cost = cost + A [ i ] ; A [ i + 1 ] = A [ i ] ; } else { cost = cost + A [ i + 1 ] ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 20286}
{"input": "int main ( void ) { int t , arr [ 1000000 ] , min ; long int i , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } min = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( min > arr [ i ] ) min = arr [ i ] ; printf ( \"%d\n\" , ( n - 1 ) * min ) ; } }", "label": 0, "id": 16623}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , a [ 100 ] , i , k , sum = 0 ; scanf ( \"%llu\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%llu\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; ) { if ( a [ i + 1 ] < a [ i ] ) { for ( k = i ; k < n - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; n -- ; sum += a [ i ] ; } else { for ( k = i + 1 ; k < n - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; n -- ; sum += a [ i ] ; } } printf ( \"%llu\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 9269}
{"input": "long long gcd ( long long a , long long b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } long long int lcm ( long long int a , long long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( void ) { long int t , q , p ; double r ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & p , & q ) ; printf ( \"%lld %lld\n\" , gcd ( p , q ) , lcm ( p , q ) ) ; } return 0 ; }", "label": 0, "id": 6409}
{"input": "int c [ 100000 ] ; void counting_sort ( int a [ ] , int b [ ] , int n ) { int i ; for ( i = 0 ; i < 100000 ; i ++ ) { c [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { b [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { c [ a [ i ] - 1 ] ++ ; } for ( i = 1 ; i < 100000 ; i ++ ) { c [ i ] = c [ i ] + c [ i - 1 ] ; } for ( i = 0 ; i < n ; i ++ ) { b [ c [ a [ i ] - 1 ] - 1 ] = a [ i ] ; c [ a [ i ] - 1 ] -- ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int i , a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } counting_sort ( a , b , n ) ; printf ( \"\n%d\" , b [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 9579}
{"input": "int main ( ) { int t , i ; long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; int z = 0 ; if ( a > b ) { if ( a % b == 0 ) { printf ( \"%d \" , b ) ; printf ( \"%d\n\" , a ) ; } else if ( a % b != 0 ) { for ( i = 1 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { if ( i > z ) { z = i ; } } } printf ( \"%d \" , z ) ; printf ( \"%d\n\" , a * b / z ) ; } } if ( b > a ) { if ( b % a == 0 ) { printf ( \"%d \" , a ) ; printf ( \"%d\n\" , b ) ; } if ( b % a != 0 ) { for ( i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { if ( i > z ) { z = i ; } } } printf ( \"%d \" , z ) ; printf ( \"%d\n\" , a * b / z ) ; } } } }", "label": 2, "id": 16879}
{"input": "int main ( ) { int t ; long int n , i , a [ 50001 ] ; long long int s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } s = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < s ) s = a [ i ] ; } printf ( \"%lld\n\" , s * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 21030}
{"input": "int below ( int , int , int ) ; int right ( int , int , int ) ; int a [ 101 ] [ 101 ] , t = 1 , ans [ 10000 ] , rows ; int main ( ) { int i , j , test_case , k , r , max = 0 ; scanf ( \"%d\" , & test_case ) ; for ( i = 1 ; i <= test_case ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 1 ; j <= rows ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } below ( 1 , 1 , 1 ) ; right ( 1 , 1 , 1 ) ; for ( r = 1 ; ans [ r ] != '\\0' ; r ++ ) { if ( ans [ r ] > max ) max = ans [ r ] ; } printf ( \"%d\" , max ) ; } } int below ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + 1 ; } else { i = i + 1 ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } return 0 ; } int right ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + 1 ; } else { i = i + 1 ; j = j + 1 ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } return 0 ; }", "label": 3, "id": 18638}
{"input": "int main ( ) { int t , j , k , l , m , r , a [ 99 ] [ 99 ] ; scanf ( \"%d\" , & t ) ; while ( scanf ( \"%d\" , & r ) == 1 ) { for ( j = 0 ; j < r ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; l = r - 1 ; while ( l -- >= 0 ) { m = 0 ; while ( m <= l ) { a [ l ] [ m ] += a [ l + 1 ] [ m ] > a [ l + 1 ] [ m + 1 ] ? a [ l + 1 ] [ m ] : a [ l + 1 ] [ m + 1 ] ; m ++ ; } } printf ( \"%d\n\" , * a [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 11319}
{"input": "int main ( ) { long long int n , i , T ; scanf ( \"%lld\" , & T ) ; while ( T -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } long long int min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , ( ( n - 1 ) * min ) ) ; } return 0 ; }", "label": 0, "id": 11144}
{"input": "int main ( ) { long t , i , j , n , a [ 100 ] [ 100 ] , maxm = - 1 ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += ( ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) ? a [ i - 1 ] [ j ] : a [ i - 1 ] [ j - 1 ] ) ; } } for ( j = 0 ; j < n ; j ++ ) if ( maxm < a [ n - 1 ] [ j ] ) maxm = a [ n - 1 ] [ j ] ; printf ( \"%d\n\" , maxm ) ; } return 0 ; }", "label": 1, "id": 16663}
{"input": "int main ( ) { int i , j , T , x , y , l , r ; int p , q ; long int lcm ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; p = x ; q = y ; if ( x > y ) { r = y ; p = x ; } else { r = x ; p = y ; } for ( j = r ; j >= 2 ; ) { if ( p % j == 0 && r % j == 0 ) { l = j ; break ; } else j -- ; } printf ( \"%d\n\" , l ) ; if ( l == 1 ) { lcm = x * y ; } else if ( l > 1 ) { lcm = ( x * y ) / l ; } printf ( \"%ld\n\" , lcm ) ; l = 1 ; } return 0 ; }", "label": 1, "id": 6831}
{"input": "int gcd ( int n1 , int n2 ) { if ( n2 != 0 ) gcd ( n2 , n1 % n2 ) ; else return n1 ; } int main ( void ) { int tc ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 515}
{"input": "int fastscan ( ) { char c ; int t = 0 ; while ( ( c = g ) < 33 ) ; while ( ( '0' <= c ) && ( c <= '9' ) ) { t = ( t << 3 ) + ( t << 1 ) + ( c - '0' ) ; c = g ; } return t ; } int main ( ) { int T ; int i , j ; int Tc ; int n ; int ans [ 501 ] ; T = fastscan ( ) ; Tc = T ; while ( Tc -- ) { n = fastscan ( ) ; int num [ n ] ; int sums [ n ] ; memset ( ( void * ) sums , 0 , n * sizeof ( sums [ 0 ] ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { num [ j ] = fastscan ( ) ; } for ( j = i ; j >= 1 ; j -- ) { sums [ j ] = MAX ( sums [ j ] + num [ j ] , sums [ j - 1 ] + num [ j ] ) ; } sums [ 0 ] += num [ 0 ] ; } ans [ Tc ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { ans [ Tc ] = MAX ( sums [ i ] , ans [ Tc ] ) ; } } while ( T -- ) { printf ( \"%d\n\" , ans [ T ] ) ; } return 0 ; }", "label": 3, "id": 19368}
{"input": "int main ( ) { int t , i , n ; long int * a , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; min = 100000 ; a = ( long int * ) malloc ( sizeof ( long int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; min = min < a [ i ] ? min : a [ i ] ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 21671}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm , rem , num , deno ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { num = a ; deno = b ; } else { num = b ; deno = a ; } rem = num % deno ; while ( rem != 0 ) { num = deno ; deno = rem ; rem = num % deno ; } gcd = deno ; lcm = a * b / gcd ; printf ( \"gcd %d%d=%d\n\" , a , b , gcd ) ; printf ( \"lcm %d%d=%d\n\" , a , b , lcm ) ; } return 0 ; }", "label": 1, "id": 16977}
{"input": "int main ( ) { long int t , n , i , a [ 50000 ] , c , min ; scanf ( \"%ld\" , & t ) ; if ( t <= 10 ) while ( t -- ) { c = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( min > a [ i + 1 ] ) { min = a [ i + 1 ] ; c += a [ i + 1 ] ; } else c += min ; } printf ( \"%ld\n\" , c ) ; } }", "label": 1, "id": 4618}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { long int t , k , i ; scanf ( \"%ld\" , & t ) ; long int a [ t ] ; for ( i = 0 ; i < t ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; k = a [ 0 ] ; for ( i = 1 ; i < t ; i ++ ) { if ( k > a [ i ] ) k = a [ i ] ; } printf ( \"%ld\n\" , k * ( t - 1 ) ) ; } return 0 ; }", "label": 0, "id": 17914}
{"input": "int main ( ) { int A , B , lcm , gcd , i , T , min ; while ( T -- ) { scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) min = B ; else if ( A < B ) min = A ; for ( i = 1 ; i <= min ; i ++ ) { if ( ( A % i == 0 ) && ( B % i == 0 ) ) gcd = i ; } lcm = ( A * B ) / gcd ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 9379}
{"input": "int main ( ) { int a [ max ] [ max ] , n , j , i , t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } }", "label": 0, "id": 18746}
{"input": "int a [ max ] [ max ] ; int b [ max ] ; int main ( ) { int c , d , t = 0 , e , n , m , f , g , h , i ; scanf ( \"%d\" , & c ) ; for ( d = 1 ; d <= c ; d ++ ) { scanf ( \"\n%d\" , & e ) ; for ( m = 0 ; m < e ; m ++ ) { for ( n = 0 ; n <= m ; n ++ ) scanf ( \"%d\" , & a [ m ] [ n ] ) ; } for ( f = e - 1 ; f > 0 ; f -- ) { for ( g = 0 ; g < f ; g ++ ) { h = a [ f ] [ g ] + a [ f - 1 ] [ g ] ; i = a [ f ] [ g + 1 ] + a [ f - 1 ] [ g ] ; if ( h > i ) a [ f - 1 ] [ g ] = h ; else a [ f - 1 ] [ g ] = i ; } } b [ t ] = a [ 0 ] [ 0 ] ; t ++ ; } printf ( \"\n\" ) ; for ( h = 0 ; h < c ; h ++ ) { printf ( \"%d\\t\" , b [ h ] ) ; } }", "label": 1, "id": 5355}
{"input": "void inp ( int * n ) { * n = 0 ; int ch = getcx ( ) ; int sign = 1 ; while ( ch < '0' || ch > '9' ) { if ( ch == '-' ) sign = - 1 ; ch = getcx ( ) ; } while ( ch >= '0' && ch <= '9' ) ( * n ) = ( ( * n ) << 3 ) + ( ( * n ) << 1 ) + ch - '0' , ch = getcx ( ) ; ( * n ) = ( * n ) * sign ; } main ( ) { int testcases ; inp ( & testcases ) ; int i = 0 ; while ( testcases > 0 ) { int n ; inp ( & n ) ; int elem = ( n * ( n + 1 ) ) / 2 ; int * a = malloc ( sizeof ( int ) * elem ) ; int i ; for ( i = 0 ; i < elem ; i ++ ) inp ( a + i ) ; i = n * ( n - 1 ) / 2 - 1 ; int j = n - 1 ; int count = 0 ; for ( count = 1 ; i >= 0 ; i -- , count ++ ) { int temp1 = * ( a + i + j ) ; int temp2 = * ( a + i + j + 1 ) ; if ( * ( a + i ) + temp1 > * ( a + i ) + temp2 ) * ( a + i ) += temp1 ; else * ( a + i ) += temp2 ; if ( count == j ) { count = 0 ; j -- ; } } printf ( \"%d\n\" , * a ) ; testcases -- ; } }", "label": 0, "id": 8903}
{"input": "int a [ 100 ] [ 100 ] ; int n ; int readint ( ) { int n = 0 ; char c = getchar_unlocked ( ) ; while ( c >= '0' && c <= '9' ) { n = ( n * 10 ) + ( c - '0' ) ; c = getchar_unlocked ( ) ; } return n ; } main ( ) { int T , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 14423}
{"input": "int main ( ) { int t , n , x , y , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { s = 0 ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & y ) ; n -- ; while ( n -- ) { scanf ( \"%d\" , & x ) ; s += ( x > y ? y : x ) ; y = x ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 8574}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int p , n , i ; scanf ( \"%d\" , & n ) ; int min = 200000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & p ) ; if ( min > p ) min = p ; } long long int q ; q = min * ( n - 1 ) ; printf ( \"%lld\n\" , q ) ; } return 0 ; }", "label": 0, "id": 7602}
{"input": "int main ( void ) { long double t , n , arr [ 50000 ] , min = 100001 ; int i , j ; scanf ( \"%Lf\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%Lf\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%Lf\" , arr [ i ] ) ; if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( \"%.0Lf\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 6115}
{"input": "struct test { int a [ 50000 ] ; } ; int main ( ) { struct test t [ 10 ] ; int t1 , i , j , n [ 10 ] , sum ; scanf ( \"%d\" , & t1 ) ; for ( i = 0 ; i < t1 ; i ++ ) { scanf ( \"%d\" , & n [ i ] ) ; for ( j = 0 ; j < n [ i ] ; j ++ ) { scanf ( \"%d\" , & t [ i ] . a [ j ] ) ; } } for ( i = 0 ; i < t1 ; i ++ ) { sum = 0 ; for ( j = 0 ; j < n [ i ] - 1 ; j ++ ) { if ( t [ i ] . a [ j ] < t [ i ] . a [ j + 1 ] ) { sum = sum + t [ i ] . a [ j ] ; } else { sum = sum + t [ i ] . a [ j + 1 ] ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 22327}
{"input": "void main ( ) { int a [ 10 ] [ 10 ] ; int b , c , i , j , n ; printf ( \"Enter the no of rows\" ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( ( j != 0 ) && ( j != i ) ) { b = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; c = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; a [ i ] [ j ] = ( b > c ? b : c ) ; } else if ( j == 0 ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { a [ n - 1 ] [ i + 1 ] = ( ( a [ n - 1 ] [ i ] > a [ n - 1 ] [ i + 1 ] ) ? a [ n - 1 ] [ i ] : a [ n - 1 ] [ i + 1 ] ) ; } printf ( \"%d\" , a [ n - 1 ] [ n - 1 ] ) ; }", "label": 3, "id": 11076}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , j , ar [ 100 ] [ 100 ] , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) { scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; -- i ) { for ( j = 0 ; j < i ; ++ j ) { if ( ar [ i ] [ j ] < ar [ i ] [ j + 1 ] ) { ar [ i - 1 ] [ j ] += ar [ i ] [ j + 1 ] ; } else { ar [ i - 1 ] [ j ] += ar [ i ] [ j ] ; } } } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19970}
{"input": "long long int min ( long long int a , long long int b ) { if ( b >= a ) return a ; else return b ; } void main ( ) { int t , i ; long long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } long long int minimum = a [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) minimum = min ( a [ i ] , minimum ) ; printf ( \"%lld\n\" , ( n - 1 ) * minimum ) ; } }", "label": 0, "id": 10059}
{"input": "int max1 ( int a , int b ) { return ( a > b ? a : b ) ; } int scan ( ) { int t = 0 ; char c ; c = getchar_unlocked ( ) ; while ( c < '0' || c > '9' ) c = getchar_unlocked ( ) ; while ( c >= '0' && c <= '9' ) { t = ( t << 3 ) + ( t << 1 ) + c - '0' ; c = getchar_unlocked ( ) ; } return ( t ) ; } int main ( ) { int j , n , t , i , k ; int s [ 100 ] [ 100 ] = { 0 } , max , a [ 100 ] [ 100 ] = { 0 } ; t = scan ( ) ; while ( t -- ) { max = 0 ; i = 0 ; n = scan ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = scan ( ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; else if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else { s [ i ] [ j ] = a [ i ] [ j ] + max1 ( s [ i - 1 ] [ j - 1 ] , s [ i - 1 ] [ j ] ) ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s [ n - 1 ] [ i ] > max ) max = s [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 2517}
{"input": "int gcd ( int a , int b ) { int x ; if ( a > b ) { while ( a % b != 0 ) { x = a ; a = b ; b = x % a ; } return b ; } else return gcd ( b , a ) ; } int lcm ( int a , int b ) { int x , y ; x = gcd ( a , b ) ; y = ( a / x ) * ( b / x ) * x ; return y ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , x , y ; scanf ( \"%d %d\" , & a , & b ) ; x = gcd ( a , b ) ; y = lcm ( a , b ) ; printf ( \"%d %d\n\" , x , y ) ; } return 0 ; }", "label": 1, "id": 16926}
{"input": "int main ( ) { int n , a [ 100 ] [ 100 ] , i , j , min , s = 0 , t ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { for ( i = 2 ; i <= n ; i ++ ) { min = a [ i ] [ 1 ] ; for ( j = 1 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { min = a [ i ] [ j + 1 ] ; } j ++ ; } s = s + min ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 3, "id": 12510}
{"input": "int main ( ) { int i ; long int t , n1 , n2 , lcm , gcd , num1 , num2 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; if ( n1 < 0 ) n1 = n1 * ( - 1 ) ; if ( n2 < 0 ) n2 = n2 * ( - 1 ) ; num1 = n1 ; num2 = n2 ; gcd = lcm = 0 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } gcd = n1 ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 19033}
{"input": "int main ( ) { unsigned long long int t , a , b , x , y , gcd = 0 , lcm = 0 ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"\n%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 21218}
{"input": "int main ( void ) { int i , t , j ; unsigned long long int a , b , gcd [ 1000 ] , lcm [ 1000 ] , greater ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) greater = a ; else greater = b ; gcd [ i ] = 1 ; for ( j = 1 ; j < a / 2 ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { gcd [ i ] = j ; } } for ( j = greater ; j <= a * b ; j ++ ) { if ( j % a == 0 && j % b == 0 ) { lcm [ i ] = j ; j = ( a * b ) + 1 ; } } } for ( i = 0 ; i < t ; i ++ ) printf ( \"%lld %lld\n\" , gcd [ i ] , lcm [ i ] ) ; return 0 ; }", "label": 2, "id": 2017}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , a [ 100001 ] , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; long long int count = 0 , j = 1 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { j ++ ; } else { count += ( j * ( j + 1 ) ) / 2 ; j = 1 ; } } count += ( j * ( j + 1 ) ) / 2 ; printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 0, "id": 6525}
{"input": "int main ( ) { int i , j , k , n , nl , val [ 100 ] [ 100 ] , t ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & nl ) ; for ( j = 1 ; j <= nl ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) scanf ( \"%d\" , & val [ j ] [ k ] ) ; } for ( j = nl ; j > 1 ; j -- ) { for ( k = 1 ; k < j ; k ++ ) { t = val [ j ] [ k ] < val [ j ] [ k + 1 ] ; val [ j - 1 ] [ k ] = val [ j - 1 ] [ k ] + val [ j ] [ k + t ] ; } } printf ( \"%d\n\" , val [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 20447}
{"input": "int f = 0 ; int hight ( long int s ) { long int i ; for ( i = 1 ; ; i ++ ) { if ( i * ( i + 1 ) == 2 * s ) { f = 1 ; return i ; } if ( i * ( i + 1 ) > 2 * s ) { if ( 2 * s - ( i * ( i - 1 ) ) == 2 ) { f = 2 ; return i ; } else return i ; } } } long int max ( long int a , long int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int n , i , k ; long int ms = 0 ; while ( t -- ) { scanf ( \"%d\" , & n ) ; k = ( n * ( n + 1 ) ) / 2 ; long int a [ k + 1 ] , h , ms = 0 ; for ( i = 1 ; i <= k ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; long int sum [ n ] ; sum [ 1 ] = a [ 1 ] ; ms = sum [ 1 ] ; for ( i = 2 ; i <= k ; i ++ ) { f = 0 ; h = hight ( i ) ; if ( f == 0 ) { sum [ i ] = max ( a [ i ] + sum [ i - h ] , a [ i ] + sum [ i - h + 1 ] ) ; if ( sum [ i ] > ms ) ms = sum [ i ] ; } if ( f == 1 ) { sum [ i ] = a [ i ] + sum [ i - h ] ; if ( sum [ i ] > ms ) ms = sum [ i ] ; } if ( f == 2 ) { sum [ i ] = a [ i ] + sum [ i - h + 1 ] ; if ( sum [ i ] > ms ) ms = sum [ i ] ; } } printf ( \"%ld\n\" , ms ) ; } }", "label": 2, "id": 1749}
{"input": "long lcm ( long a , long b , long g ) { long l ; return a * b / g ; } long gcd ( long a , long b ) { long r , temp ; if ( a >= b ) { temp = a ; a = b ; b = temp ; } while ( a > 0 ) { r = b % a ; b = a ; a = r ; } return b ; } int main ( ) { int t , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long a , b ; scanf ( \"%ld%ld\" , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( a , b , g ) ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 46}
{"input": "long gcd ( long , long ) ; int main ( ) { int t ; long x , y , hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- && 0 < t <= 1000 ) { scanf ( \"%ld%ld\" , & hcf , & lcm ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%ld%ld\n\" , hcf , lcm ) ; } return 0 ; } long gcd ( long x , long y ) { if ( x == 0 ) { return y ; } while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 2, "id": 3101}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int c , n ; int i ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } long int min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } c = min * ( n - 1 ) ; printf ( \"%ld\n\" , c ) ; } return 0 ; }", "label": 1, "id": 10973}
{"input": "int main ( ) { int a , b , c , arr [ 100000 ] , sum , i , j , d ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d\" , & b ) ; scanf ( \"%d\" , & c ) ; sum = 0 ; d = c ; for ( i = 0 ; i < b - 1 ; i ++ ) { scanf ( \"%d\" , & c ) ; if ( c < d ) { d = c ; } } printf ( \"%d\n\" , d * ( b - 1 ) ) ; } return 0 ; }", "label": 0, "id": 24075}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , j ; for ( i = 0 ; i < t ; i ++ ) { int a , b ; int lcm , gcd ; scanf ( \"%d %d\" , & a , & b ) ; int mn = ( a > b ) ? b : a ; gcd = 1 ; for ( j = 1 ; j <= mn ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 2131}
{"input": "int a [ 105 ] [ 105 ] , b [ 105 ] [ 105 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int ans , n , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( b [ i - 1 ] [ j ] > b [ i - 1 ] [ j - 1 ] ) b [ i ] [ j ] = b [ i - 1 ] [ j ] + a [ i ] [ j ] ; else b [ i ] [ j ] = b [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } } for ( i = 1 ; i <= n ; i ++ ) { ans = b [ n ] [ i ] ; for ( j = 1 ; j <= n ; j ++ ) { if ( ans < b [ n ] [ j ] ) ans = b [ n ] [ j ] ; } } printf ( \"%d\n\" , ans ) ; } }", "label": 0, "id": 14241}
{"input": "int main ( ) { int testCases , n ; int matrix [ 101 ] [ 101 ] ; int i , j ; int max = 0 ; scanf ( \"%d\" , & testCases ) ; while ( testCases -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & matrix [ i ] [ j ] ) ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) matrix [ i ] [ j ] = MAX ( matrix [ i - 1 ] [ j ] , matrix [ i - 1 ] [ j - 1 ] ) + matrix [ i ] [ j ] ; matrix [ i ] [ j ] = matrix [ i - 1 ] [ j - 1 ] + matrix [ i ] [ j ] ; } max = matrix [ n - 1 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < matrix [ n - 1 ] [ i ] ) max = matrix [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 657}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int n , i ; scanf ( \"%d\" , & n ) ; long long int A [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & A [ i ] ) ; } int c = 0 , key , j ; for ( i = 0 ; i < n - 1 ; i ++ ) { key = A [ i ] ; for ( j = i + 1 ; j < n ; j ++ ) { if ( key <= A [ j ] ) { c ++ ; key = A [ j ] ; } else { break ; } } } printf ( \"%d\n\" , c + n ) ; } }", "label": 0, "id": 24597}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] = { 0 } , c [ 100 ] [ 100 ] = { 0 } , i , j , t ; int sum = 0 , n , k , max ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld\" , & n ) ; sum = 0 ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%ld\" , & a [ j ] [ k ] ) ; } } for ( j = 0 ; j < n ; j ++ ) { sum += a [ 0 ] [ j ] ; c [ 0 ] [ j ] = sum ; } sum = 0 ; for ( j = 0 ; j < n ; j ++ ) { sum += a [ j ] [ 0 ] ; c [ j ] [ 0 ] = sum ; } sum = a [ 0 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { for ( k = 1 ; k < j + 1 ; k ++ ) { if ( j == k ) { sum += a [ j ] [ j ] ; c [ j ] [ k ] = sum ; } if ( c [ j - 1 ] [ k ] > c [ j - 1 ] [ k - 1 ] ) { c [ j ] [ k ] = c [ j - 1 ] [ k ] + a [ j ] [ k ] ; } else c [ j ] [ k ] = c [ j - 1 ] [ k - 1 ] + a [ j ] [ k ] ; } } sum = c [ n - 1 ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( c [ n - 1 ] [ j ] > max ) max = c [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } }", "label": 2, "id": 5969}
{"input": "int max_value ( int a [ 100 ] [ 100 ] , int n , int i , int j ) { int temp , c , b ; if ( i == n - 1 ) return ( a [ i ] [ j ] ) ; else { c = max_value ( a , n , i + 1 , j ) ; b = max_value ( a , n , i + 1 , j + 1 ) ; temp = ( c >= b ) ? c : b ; return ( a [ i ] [ j ] + temp ) ; } } int main ( ) { int max , cases , temp ; int n , i , j , z ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & cases ) ; for ( z = 0 ; z < cases ; z ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } temp = max_value ( a , n , 0 , 0 ) ; printf ( \"%d\n\" , temp ) ; } return 0 ; }", "label": 2, "id": 9804}
{"input": "int main ( void ) { int tt ; scanf ( \"%d\" , & tt ) ; while ( tt -- ) { long int n , min = 100000l ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( long int i = 0l ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%ld\n\" , min * ( n - 1l ) ) ; } return 0 ; }", "label": 0, "id": 23525}
{"input": "int main ( ) { int n , count , i , a , j , t ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { t = 0 ; count = 0 ; scanf ( \"%d\" , & n ) ; if ( n < 3 ) count = n % 2 ; else { for ( j = ( n - 1 ) ; j > 0 ; j -- ) { if ( n % j == 0 ) { n -= j ; n -- ; j -- ; count ++ ; } } } if ( ( count % 2 ) == 0 ) printf ( \"ALICE\n\" ) ; else printf ( \"BOB\n\" ) ; } return 0 ; }", "label": 1, "id": 22324}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int N , A [ 10000 ] ; scanf ( \"%d\" , & N ) ; for ( int i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } int c = 0 ; for ( int startPoint = 0 ; startPoint < N ; startPoint ++ ) { for ( int grps = startPoint ; grps < N ; grps ++ ) { if ( A [ startPoint ] == A [ grps ] || ( A [ grps ] - A [ startPoint ] == 1 ) ) c ++ ; } } printf ( \"%d\" , c ) ; } return 0 ; }", "label": 3, "id": 5005}
{"input": "int main ( ) { int t , n , i , * * a , j , sum , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { max = 0 ; scanf ( \"%d\" , & n ) ; a = malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < n ; i ++ ) { sum = 0 ; for ( j = i ; j < n ; j ++ ) sum += a [ j ] [ i ] ; if ( max < sum ) max = sum ; } printf ( \"%d\n\" , max + 1 ) ; } }", "label": 1, "id": 7890}
{"input": "int main ( ) { int t , i , j , n ; int MAX = 1000 ; int a [ MAX ] [ MAX ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8634}
{"input": "void main ( ) { int test , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & test ) ; while ( test != 0 ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; test -- ; } }", "label": 1, "id": 8550}
{"input": "long gcd ( long a , long b ) { if ( a % b == 0 ) return b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } return gcd ( b , a % b ) ; } int main ( ) { int t ; long a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 24548}
{"input": "int sum ( int a [ ] , int c [ ] , int n , int i , int j ) ; int main ( ) { int t , i , j , n , a [ 5000 ] , c [ 5000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { for ( i = 0 ; i < 5000 ; i ++ ) c [ i ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ ( i * ( i + 1 ) / 2 ) + j ] ) ; printf ( \"%d\n\" , sum ( a , c , n , 1 , 0 ) ) ; } return 0 ; } int sum ( int a [ ] , int c [ ] , int n , int i , int j ) { int m , k ; if ( c [ ( i * ( i - 1 ) / 2 ) + j ] == 0 ) { if ( i == n ) return a [ ( i * ( i - 1 ) / 2 ) + j ] ; else { m = sum ( a , c , n , i + 1 , j + 1 ) ; k = sum ( a , c , n , i + 1 , j ) ; if ( m >= k ) c [ ( i * ( i - 1 ) / 2 ) + j ] = a [ ( i * ( i - 1 ) / 2 ) + j ] + m ; else c [ ( i * ( i - 1 ) / 2 ) + j ] = a [ ( i * ( i - 1 ) / 2 ) + j ] + k ; } } return c [ ( i * ( i - 1 ) / 2 ) + j ] ; }", "label": 1, "id": 24198}
{"input": "int main ( ) { int i , j , m , n , k ; int a [ n ] , b [ n ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; scanf ( \"%d\" , & b [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) k = a [ i ] ; k = b [ i ] ; for ( j = k ; j >= 1 ; j -- ) { if ( a [ i ] % j == 0 && b [ i ] % j == 0 ) { printf ( \"%d\" , j ) ; printf ( \" \" ) ; break ; } } for ( j = 1 ; j > 0 ; j ++ ) { if ( j % a [ i ] == 0 && j % b [ i ] == 0 ) { printf ( \"%d\n\" , j ) ; break ; } } } }", "label": 3, "id": 19752}
{"input": "int main ( ) { int l , n , i , t , j , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] ; int sum [ t ] ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( k = 0 ; k < t ; k ++ ) { sum [ k ] = 0 ; } int g = 1 ; for ( k = 0 ; k < t ; k ++ ) { j = t - g ; for ( l = t - 1 ; l >= 0 ; l -- ) { if ( j < 0 ) { j ++ ; } sum [ k ] = sum [ k ] + a [ l ] [ j ] ; j -- ; } g ++ ; } int largest = sum [ 0 ] ; for ( k = 0 ; k < t ; k ++ ) { if ( largest < sum [ k ] ) { largest = sum [ k ] ; } } printf ( \"%d\n\" , largest ) ; } return 0 ; }", "label": 1, "id": 13003}
{"input": "int main ( ) { long long T , t , a , b ; scanf ( \"%lld\" , & T ) ; t = T ; long long a1 [ T ] , a2 [ T ] ; while ( T -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; long long gc ; if ( a > b ) gc = b ; else gc = a ; while ( 1 ) { if ( a % gc == 0 && b % gc == 0 ) break ; else gc -- ; } a1 [ T ] = gc ; a2 [ T ] = a * b / gc ; } while ( t -- ) { printf ( \"%lld %lld\n\" , a1 [ t ] , a2 [ t ] ) ; } return 0 ; }", "label": 2, "id": 5102}
{"input": "int main ( ) { int cases , test , n , i , j , k ; scanf ( \"%d\" , & cases ) ; for ( test = 1 ; test <= cases ; test ++ ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( k = n - 1 ; k >= 1 ; k -- ) { for ( j = 1 ; j <= k ; j ++ ) { int sum1 = ( arr [ k ] [ j ] + arr [ k + 1 ] [ j ] ) , sum2 = ( arr [ k ] [ j ] + arr [ k + 1 ] [ j + 1 ] ) ; if ( sum1 > sum2 ) arr [ k ] [ j ] = sum1 ; else arr [ k ] [ j ] = sum2 ; } } printf ( \"%d\n\" , arr [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 2505}
{"input": "int main ( ) { int arr [ 100 ] [ 100 ] = { 0 } ; int test , rows ; scanf ( \"%d\n\" , & test ) ; while ( test -- ) { scanf ( \"%d\n\" , & rows ) ; int i , j , element ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { scanf ( \"%d\" , & element ) ; arr [ i ] [ j ] = element ; } } for ( i = ( rows - 1 ) ; i >= 0 ; i -- ) { for ( j = i ; j > 0 ; j -- ) { if ( arr [ i ] [ j ] >= arr [ i ] [ j - 1 ] ) { arr [ i - 1 ] [ j - 1 ] = arr [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; } else { arr [ i - 1 ] [ j - 1 ] = arr [ i - 1 ] [ j - 1 ] + arr [ i ] [ j - 1 ] ; } } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 1444}
{"input": "int main ( ) { int t , n , a [ 50000 ] , c , s , i , k , x , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; c = 0 ; s = 0 ; for ( x = 0 ; x < n ; x ++ ) { scanf ( \"%d\" , & a [ x ] ) ; c ++ ; } k = c ; while ( k >= 1 ) { for ( i = 0 ; i < k ; i ++ ) { c = 0 ; if ( a [ i ] != a [ i + 1 ] ) { if ( a [ i ] > a [ i + 1 ] ) { s = s + a [ i + 1 ] ; for ( j = i ; j < k - 1 ; j ++ ) { a [ j ] = a [ j + 1 ] ; c ++ ; } } else { s = s + a [ i ] ; for ( j = i + 1 ; j < k - 1 ; j ++ ) { a [ j ] = a [ j + 1 ] ; c ++ ; } } k = c ; } } } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 2, "id": 9166}
{"input": "int hcf ( int , int ) ; int main ( ) { int T , A , B , i , H ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; hcf ( A , B ) ; } return 0 ; } int hcf ( int x , int y ) { int j , hcf , temp , lcm ; if ( x < y ) { temp = x ; x = y ; y = temp ; } for ( j = 1 ; j <= y ; j ++ ) { if ( x % j == 0 && y % j == 0 ) { hcf = j ; } } lcm = ( x * y ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; return 0 ; }", "label": 1, "id": 684}
{"input": "struct arrays { int a [ 100 ] ; } ; int main ( ) { struct arrays b [ 100 ] ; int sum , n , i , j ; printf ( \"enter number of lines\" ) ; scanf ( \"%d\" , & n ) ; printf ( \"enter numbers in tringle\" ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & b [ i ] . a [ j ] ) ; } } j = 0 ; sum = b [ 0 ] . a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( b [ i ] . a [ j ] > b [ i ] . a [ j + 1 ] ) sum = sum + b [ i ] . a [ j ] ; else sum = sum + b [ i ] . a [ j + 1 ] ; j = j + 1 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { printf ( \"%d\\t\" , b [ i ] . a [ j ] ) ; } printf ( \"\n\" ) ; } printf ( \"sum= %d \n\" , sum ) ; return 0 ; }", "label": 3, "id": 23563}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , x , i ; scanf ( \"%d\" , & n ) ; int min ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & x ) ; if ( min > x ) min = x ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 20936}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 2576}
{"input": "int main ( int argc , char const * argv [ ] ) { int t , i , temp , min ; long long int n , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = INT_MAX ; cost = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & temp ) ; if ( temp < min ) min = temp ; if ( i >= 1 ) cost += min ; } printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 9239}
{"input": "typedef long int li ; li gcd ( li a , li b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } main ( ) { li t , a , b , c ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%ld %ld\n\" , c , ( a * b ) / c ) ; } }", "label": 0, "id": 4763}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int j = 0 ; j < t ; j ++ ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int min = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( \"%d\n\" , ( min * ( n - 1 ) ) ) ; } }", "label": 0, "id": 21922}
{"input": "int main ( ) { int sum [ 10 ] [ 10 ] , i , j , size , max = 0 , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & sum [ i ] [ j ] ) ; } printf ( \"\n\n\" ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) printf ( \"%d\\t\" , sum [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) sum [ i ] [ j ] = sum [ i ] [ j ] ; else if ( j == 0 ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - 1 ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - 1 ] [ j - 1 ] ; else { if ( sum [ i - 1 ] [ j - 1 ] > sum [ i - 1 ] [ j ] ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - 1 ] [ j - 1 ] ; else sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - 1 ] [ j ] ; } } } printf ( \"\n\n\n\" ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) printf ( \"%d\\t\" , sum [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( i = size - 1 , j = 0 ; j <= i ; j ++ ) { if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 4091}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int i , a , b , gcd = 1 , lcm ; scanf ( \"%lld%lld\" , & a , & b ) ; for ( i = 2 ; i < b ; i ++ ) { if ( a % i == 0 ) { if ( b % i == 0 ) { gcd = i ; } } } lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 25946}
{"input": "int max ; void recur ( int * * p , int r , int i , int j , int sum ) { if ( i == r - 1 ) { if ( sum > max ) max = sum ; return ; } recur ( p , r , i + 1 , j , sum + p [ i + 1 ] [ j ] ) ; if ( j <= i ) recur ( p , r , i + 1 , j + 1 , sum + p [ i + 1 ] [ j + 1 ] ) ; } int main ( ) { int t , r , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; int * * p ; p = ( int * ) ( calloc ( r , sizeof ( int ) ) ) ; for ( i = 0 ; i < r ; i ++ ) { p [ i ] = ( int * ) ( calloc ( i + 1 , sizeof ( int ) ) ) ; } for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & p [ i ] [ j ] ) ; } } int sum = p [ 0 ] [ 0 ] ; max = 0 ; recur ( p , r , 0 , 0 , sum ) ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 1774}
{"input": "main ( ) { long int A , B , gcd , lcm , rem , T , nr , dr ; scanf ( \"%ld\" , & T ) ; while ( T -- ) { scanf ( \"%ld%ld\" , & A , & B ) ; if ( A > B ) { nr = A ; dr = B ; } else { nr = B ; dr = A ; } while ( dr != 0 ) { rem = nr % dr ; nr = dr ; dr = rem ; } gcd = nr ; lcm = ( A * B ) / gcd ; printf ( \"%ld\\t\" , gcd ) ; printf ( \"%ld\n\" , lcm ) ; } return 0 ; }", "label": 0, "id": 15964}
{"input": "int table [ 100 ] [ 100 ] ; void initialize ( int A [ 100 ] [ 100 ] ) { int i , j ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { A [ i ] [ j ] = 0 ; } } } int maxpath ( int A [ 100 ] [ 100 ] , int i , int j , int n ) { int max , sum1 , sum2 , retval ; if ( ( i < n ) & ( j < n ) ) { if ( table [ i ] [ j ] != 0 ) { return table [ i ] [ j ] ; } else { sum1 = A [ i ] [ j ] + maxpath ( A , i + 1 , j , n ) ; sum2 = A [ i ] [ j ] + maxpath ( A , i + 1 , j + 1 , n ) ; retval = ( sum1 > sum2 ) ? sum1 : sum2 ; table [ i ] [ j ] = retval ; return retval ; } } else { return 0 ; } } void printmatrix ( int A [ ] [ 100 ] , int lines ) { int i , j ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { printf ( \"%d \" , A [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } } int main ( ) { int A [ 100 ] [ 100 ] ; int i = 0 , j , k , n , lines ; initialize ( A ) ; initialize ( table ) ; scanf ( \"%d\" , & n ) ; while ( i < n ) { scanf ( \"%d\" , & lines ) ; for ( j = 0 ; j < lines ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & A [ j ] [ k ] ) ; } } printf ( \"%d\n\" , maxpath ( A , 0 , 0 , lines ) ) ; initialize ( A ) ; initialize ( table ) ; i ++ ; } }", "label": 0, "id": 10647}
{"input": "void print ( int x , int y ) { long long lcm , hcf ; if ( x > y ) SWAP ( x , y ) ; for ( int a = x ; a >= 1 ; a -- ) { if ( y % a == 0 ) hcf = a ; } lcm = x * y / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y ; scanf ( \"%d %d\" , & x , & y ) ; print ( x , y ) ; } }", "label": 2, "id": 17293}
{"input": "int gcd ( int x , int y ) ; int main ( ) { int a , b , g , lcm ; printf ( \"enter the value of a and b \" ) ; scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; lcm = ( a * b ) / g ; printf ( \"gcd= %d\" , g ) ; printf ( \"\nlcm= %d\" , lcm ) ; return 0 ; } int gcd ( int x , int y ) { int r ; r = x % y ; if ( r == 0 ) return y ; else return gcd ( y , r ) ; }", "label": 1, "id": 5207}
{"input": "int find ( int a [ ] , int n ) { int min = 0 ; int i ; int j ; int m ; i = 0 ; while ( i < n ) { if ( min <= a [ i ] ) { min = a [ i ] ; j = i ; } i ++ ; } return j ; } void swap ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; } int main ( ) { int i ; int t ; int p ; int k ; int j ; int n ; int cost ; int a [ 10 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & p ) ; i = 0 ; cost = 0 ; while ( i < p ) { scanf ( \"%d\" , & a [ i ] ) ; i ++ ; } n = p ; while ( n > 0 ) { j = find ( a , n ) ; if ( j < ( n - 1 ) && a [ j - 1 ] < a [ j + 1 ] ) { cost = cost + a [ j - 1 ] ; swap ( & a [ j ] , & a [ n - 1 ] ) ; } else if ( j < ( n - 1 ) && a [ j - 1 ] > a [ j + 1 ] ) { cost = cost + a [ j + 1 ] ; swap ( & a [ j ] , & a [ n - 1 ] ) ; } else if ( j == ( n - 1 ) ) { cost = cost + a [ j - 1 ] ; } else if ( j == 0 ) { cost = cost + a [ j + 1 ] ; swap ( & a [ j ] , & a [ n - 1 ] ) ; } n -- ; } printf ( \"%d\" , cost ) ; t -- ; } return 0 ; }", "label": 3, "id": 10617}
{"input": "int main ( ) { int t , p , q , r1 , r2 , r3 , c , HCF , LCM ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & p , & q ) ; r2 = p ; r3 = q ; while ( r2 % r3 != 0 ) { r1 = r2 % r3 ; c = r3 ; r3 = r1 ; r2 = c ; } HCF = r3 ; LCM = p * q / HCF ; printf ( \"%d %d\" , HCF , LCM ) ; } }", "label": 1, "id": 17279}
{"input": "main ( ) { int T ; scanf ( \"%d \" , & T ) ; int i , N ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d \" , & N ) ; int arr [ N ] ; int j , k , count = 0 ; for ( j = 0 ; j < N - 1 ; j ++ ) { for ( k = j + 1 ; j < N ; j ++ ) { if ( arr [ j ] <= arr [ k ] ) continue ; else { count ++ ; break ; } } } printf ( \"%d\n\" , N + count ) ; } }", "label": 3, "id": 12832}
{"input": "int main ( ) { int i , j , n , t ; int a [ 102 ] [ 102 ] ; scanf ( \"%d\" , & t ) ; while ( n -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 8917}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , n , r , i , j , gr ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) gr = a [ i + 1 ] [ j ] ; else gr = a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = a [ i ] [ j ] + gr ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 11846}
{"input": "int main ( ) { int t , i , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( k = 0 ; k < n ; k ++ ) { for ( j = 0 ; j <= k ; j ++ ) { scanf ( \"%d\" , & a [ k ] [ j ] ) ; } } for ( k = n - 2 ; k >= 0 ; k -- ) { for ( j = 0 ; j <= k ; j ++ ) { if ( a [ k ] [ j ] + a [ k + 1 ] [ j ] > a [ k ] [ j ] + a [ k + 1 ] [ j + 1 ] ) { a [ k ] [ j ] += a [ k + 1 ] [ j ] ; } else { a [ k ] [ j ] += a [ k + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23926}
{"input": "int gcd ( int a , int b ) { int min = a < b ? a : b ; int max = a > b ? a : b ; if ( max % min == 0 ) { return min ; } else { return gcd ( max % min , min ) ; } } int main ( ) { int i , j , m , n , t , mn , mx , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & m , & n ) ; lcm = ( m * n ) / gcd ( m , n ) ; printf ( \"%d %d\n\" , gcd ( m , n ) , lcm ) ; } return 0 ; }", "label": 1, "id": 3436}
{"input": "int main ( void ) { int n , i , n1 , n2 , p , lcm ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; p = gcd ( n1 , n2 ) ; lcm = ( n1 * n2 ) / p ; printf ( \"%d %d\n\" , p , lcm ) ; } return 0 ; } int gcd ( int n , int m ) { if ( n == m || m == 0 ) return n ; else return gcd ( m , n % m ) ; }", "label": 1, "id": 8591}
{"input": "int num [ 100 ] [ 100 ] ; int r , r1 ; int a [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int ans ( int num [ 100 ] [ 100 ] , int i , int j ) { if ( a [ i ] [ j ] != 0 ) return a [ i ] [ j ] ; if ( i < 0 || j < 0 ) return 0 ; if ( i == 0 && j == 0 ) { a [ i ] [ j ] = num [ i ] [ j ] ; return a [ i ] [ j ] ; } else { a [ i ] [ j ] = ( num [ i ] [ j ] + max ( ans ( num , i - 1 , j ) , ans ( num , i - 1 , j - 1 ) ) ) ; return a [ i ] [ j ] ; } } void fastRead ( ) { int i = 0 , p = 0 , q = 0 ; char s [ 65535 ] ; char * string ; int bytesRead ; int nbytes = 100 ; string = ( char * ) malloc ( nbytes + 1 ) ; int u = 0 ; scanf ( \"%d\n\" , & r ) ; r1 = r ; while ( r ) { bytesRead = getline ( & string , & nbytes , stdin ) ; while ( string [ i ] != '\n' ) { if ( string [ i ] == ' ' ) { num [ p ] [ q ] = u ; u = 0 ; i ++ ; q ++ ; } else { u = u * 10 + ( string [ i ] - '0' ) ; i ++ ; } } num [ p ] [ q ] = u ; u = 0 ; p ++ ; r -- ; q = 0 ; i = 0 ; } } int main ( int argc , char * * argv ) { int n , i , j , count = 0 , se ; int an [ 100 ] ; scanf ( \"%d\n\" , & n ) ; while ( n ) { fastRead ( ) ; for ( i = 0 ; i <= 100 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = 0 ; i = 0 ; se = ans ( num , r1 - 1 , i ) ; for ( i = 0 ; i < r1 ; i ++ ) { if ( ans ( num , r1 - 1 , i ) > se ) se = ans ( num , r1 - 1 , i ) ; } an [ count ] = se ; count ++ ; n -- ; } for ( i = 0 ; i < count ; i ++ ) printf ( \"%d\n\" , an [ i ] ) ; return ( EXIT_SUCCESS ) ; }", "label": 3, "id": 536}
{"input": "int main ( ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22402}
{"input": "int main ( ) { int triangle [ 101 ] [ 101 ] , t , n , i , j , sum1 , sum2 , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; if ( i ) { if ( j == i ) sum2 = 0 ; else sum2 = triangle [ i ] [ j ] + triangle [ i - 1 ] [ j ] ; if ( j ) { sum1 = triangle [ i ] [ j ] + triangle [ i - 1 ] [ j - 1 ] ; } else sum1 = 0 ; triangle [ i ] [ j ] = sum1 > sum2 ? sum1 : sum2 ; } } } max = triangle [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) max = max < triangle [ n - 1 ] [ i ] ? triangle [ n - 1 ] [ i ] : max ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 12751}
{"input": "int main ( void ) { int tcs , m , i , j ; scanf ( \"%d\" , & tcs ) ; int mat [ 100 ] [ 100 ] ; while ( tcs > 0 ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) mat [ i ] [ j ] = - 1 ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , mat [ i ] [ j ] ) ; } int largest = - 1 ; int temp1 , temp2 = 0 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; mat [ i ] [ j ] != - 1 ; j ++ ) { if ( j == 0 ) temp1 = mat [ i + 1 ] [ j ] ; else temp1 = temp2 ; mat [ i + 1 ] [ j ] = mat [ i ] [ j ] + temp1 ; if ( mat [ i + 1 ] [ j ] > largest ) largest = mat [ i + 1 ] [ j ] ; temp2 = mat [ i + 1 ] [ j + 1 ] ; mat [ i + 1 ] [ j + 1 ] = mat [ i ] [ j ] + temp2 ; if ( mat [ i + 1 ] [ j + 1 ] > largest ) largest = mat [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\" , largest ) ; tcs -- ; } }", "label": 3, "id": 5892}
{"input": "static char _rbuf [ 8192 * 8 ] ; static char * _rend = 0 ; static char * _rpos = 0 ; static int _getchar ( ) { int n = read ( 0 , _rbuf , sizeof _rbuf ) ; if ( n <= 0 ) { printf ( \"EOF(%d)\n\" , n ) ; exit ( 1 ) ; } _rend = _rbuf + n ; _rpos = _rbuf + 1 ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < '0' ) { } int n = c - '0' ; while ( ( ( c = mygetchar ( ) ) ) >= '0' ) { n = n * 10 + c - '0' ; } return n ; } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - 1 ; while ( 1 ) { buf [ bn -- ] = '0' + ( n ) ; n = n / 10 ; if ( n == 0 ) break ; } while ( bn < BSIZE - 1 ) putchar ( buf [ ++ bn ] ) ; putchar ( '\n' ) ; } static int dump ( int a [ ] , int n ) { int i = 0 ; printf ( \"line-dump:\" ) ; while ( i < n ) printf ( \"%d \" , a [ i ++ ] ) ; printf ( \"\n\" ) ; } void tria ( int n ) { int a [ n ] ; int b [ n ] ; a [ 0 ] = 0 ; int * cur = b ; int * old = a ; int i = 0 ; while ( i < n ) { cur [ 0 ] = get_i ( ) + old [ 0 ] ; int j = 1 ; while ( j < i ) { cur [ j ] = get_i ( ) + max ( old [ j - 1 ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = get_i ( ) + old [ j - 1 ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } i ++ ; } int mx = 0 ; for ( i = 0 ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; put_i ( mx ) ; } int main ( int ac , char * * av ) { int n = get_i ( ) ; while ( n -- > 0 ) { tria ( get_i ( ) ) ; } return 0 ; }", "label": 1, "id": 5076}
{"input": "int main ( ) { int t , n , ar [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { if ( ar [ i ] [ j ] > ar [ i ] [ j + 1 ] ) ar [ i - 1 ] [ j ] += ar [ i ] [ j ] ; else ar [ i - 1 ] [ j ] += ar [ i ] [ j + 1 ] ; } printf ( \"sum : %d\n\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 20270}
{"input": "int main ( ) { int a , b , i , Gcd , Lcm , n ; scanf ( \"%d\" , & n ) ; while ( n ++ ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a || i <= b ; ++ i ) if ( b % i == 0 && a % i == 0 ) Gcd = i ; Lcm = ( a * b ) / Gcd ; printf ( \"Gcd=%d\n\" , Gcd ) ; printf ( \"Lcm=%d\" , Lcm ) ; return 0 ; } }", "label": 1, "id": 7450}
{"input": "int main ( ) { long int t , l , x , i ; long int ans = 1 ; int m , j , k , count = 1 , a [ 100 ] ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld\" , & l ) ; for ( m = 0 ; m < 100 ; m ++ ) a [ m ] = 0 ; for ( j = 1 ; j <= l ; j ++ ) { for ( k = 1 ; k <= count ; k ++ ) { scanf ( \"%ld\" , & x ) ; if ( a [ x ] == 0 ) a [ x ] = 1 ; else a [ x ] = 2 ; if ( a [ x ] == 1 ) ans += x ; } count ++ ; } printf ( \"%ld\n\" , ans - 2 ) ; ans = 1 ; count = 1 ; } return 0 ; }", "label": 1, "id": 9720}
{"input": "int main ( void ) { long long int t , i , j , k , n , min ; scanf ( \"%lld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } min = a [ 0 ] ; for ( k = 0 ; k < n ; k ++ ) { if ( a [ k ] < min ) min = a [ k ] ; } printf ( \"%lld \n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 1, "id": 3409}
{"input": "int c , n ; int data [ N ] [ N ] ; int cost [ N ] [ N ] ; int Max ( int a , int b ) { return a > b ? a : b ; } int main ( int argc , char * argv [ ] ) { scanf ( \"%d\" , & c ) ; while ( c -- ) { scanf ( \"%d\" , & n ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & data [ i ] [ j ] ) ; cost [ i ] [ j ] = data [ i ] [ j ] ; } } for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i + 1 ; j ++ ) cost [ i ] [ j ] += Max ( cost [ i + 1 ] [ j ] , cost [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , cost [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26060}
{"input": "int maxtriangle ( ) { int maximum , left , above , index = 0 , lines = 1 , line = 2 , input , max [ 200 ] = { 0 } ; scanf ( \"%d\" , & lines ) ; scanf ( \"%d\" , & max [ 0 ] ) ; maximum = max [ 0 ] ; while ( -- lines ) { scanf ( \"%d\" , & input ) ; maximum = left = max [ 0 ] ; max [ 0 ] += input ; for ( index = 1 ; index < line ; index ++ ) { scanf ( \"%d\" , & input ) ; above = max [ index ] ; max [ index ] = input + ( ( left > above ) ? left : above ) ; left = above ; if ( max [ index ] > maximum ) maximum = max [ index ] ; } ++ line ; } return maximum ; } int main ( int argc , char * * argv ) { int times ; scanf ( \"%d\" , & times ) ; while ( times -- ) { printf ( \"%d\n\" , maxtriangle ( ) ) ; } return 0 ; }", "label": 0, "id": 25128}
{"input": "int pwr ( int a , int b ) { int i , ans = 1 ; for ( i = b ; i ; i -- ) ans *= a ; return ans ; } int main ( ) { int a [ 100 ] [ 100 ] = { 0 } , i , j , n , c , sum [ 100 ] = { 0 } , k , b , m , t , max ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } c = pwr ( 2 , n - 1 ) ; for ( i = 1 ; i <= c ; i ++ ) { t = i ; sum [ i ] = a [ 0 ] [ 0 ] ; k = 0 ; j = 1 ; while ( j < n ) { if ( t == 0 ) b = 0 ; else { b = t % 2 ; } if ( b == 1 ) { k ++ ; sum [ i ] = sum [ i ] + a [ j ] [ k ] ; } else sum [ i ] = sum [ i ] + a [ j ] [ k ] ; t = t / 2 ; j ++ ; } } max = sum [ 1 ] ; for ( i = 2 ; i <= c ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\" , max ) ; return 0 ; }", "label": 3, "id": 13962}
{"input": "int main ( ) { int n , size , a [ 1000 ] [ 1000 ] , i , j , k , sum , val , p ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & size ) ; for ( j = 0 ; j < size ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; sum = a [ 0 ] [ 0 ] ; p = 0 ; for ( j = 1 ; j < size ; j ++ ) { for ( k = p ; k <= j ; k ++ ) { val = a [ j ] [ p ] ; if ( a [ j ] [ p + 1 ] > val ) { val = a [ j ] [ p + 1 ] ; p = p + 1 ; } sum = sum + val ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 24990}
{"input": "int main ( ) { int t ; long int n , i , j , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; if ( i >= 1 ) { if ( arr [ i ] >= arr [ i - 1 ] ) { cost = cost + arr [ i - 1 ] ; arr [ i ] = arr [ i - 1 ] ; } else { cost = cost + arr [ i ] ; } } } printf ( \"%ld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 13270}
{"input": "int gcd ( int a , int b ) { if ( b != 0 ) { gcd ( b , a % b ) ; } else return a ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = ( ( a * b ) / g ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 2767}
{"input": "int main ( ) { int tc , i , j , n ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 5364}
{"input": "int main ( ) { int n , a , b , t1 , t2 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { a = b = t1 = t2 = 0 ; scanf ( \"%d%d\" , & a , & b ) ; t1 = a ; t2 = b ; while ( a ) { b = b % a ; b ^= a ^= b ^= a ; } printf ( \"%d %d\" , b , t1 * t2 / b ) ; } return 0 ; }", "label": 1, "id": 20823}
{"input": "int main ( ) { int a , b , c , x , y , f , t ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d%d\" , & b , & c ) ; x = b ; y = c ; while ( y != 0 ) { t = y ; y = x % y ; x = t ; } f = ( b * c ) / x ; printf ( \"%d %d\n\" , x , f ) ; } return 0 ; }", "label": 1, "id": 16515}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , m , a , b ; scanf ( \"%ld\" , & n ) ; scanf ( \"%ld\" , & m ) ; a = gcd ( n , m ) ; printf ( \"%ld \" , a ) ; b = lcm ( n , m ) ; printf ( \"%ld\" , b ) ; printf ( \"\n\" ) ; } } int gcd ( long int n , long int m ) { if ( m == 0 ) return n ; else return gcd ( m , n % m ) ; } int lcm ( long int n , long int m ) { long int i ; if ( n >= m ) { long int c = n % m ; for ( i = n - c ; i <= n * m ; i = i + m ) { if ( i % n == 0 ) break ; } } if ( m > n ) { long int c = m % n ; for ( i = m - c ; i <= n * m ; i = i + n ) { if ( i % m == 0 ) break ; } } return i ; }", "label": 2, "id": 25065}
{"input": "int gcd ( int a , int b ) { while ( b ) b ^= a ^= b ^= a %= b ; return a ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int g = gcd ( a , b ) ; long long int l = ( long long int ) a * b / g ; printf ( \"%d %lld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 11901}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int aa [ n ] , i , total = 1000000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & aa [ i ] ) ; if ( total > aa [ i ] ) { total = aa [ i ] ; } } printf ( \"%d\n\" , total * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 16240}
{"input": "int max_value ( int a [ 100 ] [ 100 ] , int i , int j ) { int temp ; if ( i == 0 && j == 0 ) return ( a [ 0 ] [ 0 ] ) ; else if ( j < i && j - 1 >= 0 ) { temp = ( max_value ( a , i - 1 , j ) >= max_value ( a , i - 1 , j - 1 ) ) ? max_value ( a , i - 1 , j ) : max_value ( a , i - 1 , j - 1 ) ; return ( a [ i ] [ j ] + temp ) ; } else if ( i == j && i != 0 ) return ( a [ i ] [ j ] + max_value ( a , i - 1 , j - 1 ) ) ; else if ( j == 0 ) return ( a [ i ] [ j ] + max_value ( a , i - 1 , j ) ) ; } int main ( ) { int max , cases , b [ 100 ] ; int n , i , j , z ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & cases ) ; for ( z = 0 ; z < cases ; z ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) b [ j ] = max_value ( a , n - 1 , j ) ; max = b [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) max = ( max > b [ j ] ) ? max : b [ j ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 14428}
{"input": "int main ( ) { int t , a , b , i , j , lcm = 0 , hcf , max , k ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; for ( j = 1 ; j <= a || j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) hcf = j ; } if ( a > b ) max = a ; else max = b ; for ( k = max ; k <= a * b ; k ++ ) { lcm = 0 ; if ( max % a == 0 && max % b == 0 ) { lcm = max ; break ; } max ++ ; } printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 17780}
{"input": "int main ( ) { int t , n , i , arr [ 200000 ] , ans , temp , arr2 [ 200000 ] , j , l , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { ans = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; temp = - 1 ; j = 0 ; l = 0 ; r = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] >= arr [ i - 1 ] ) { r = i ; } else { if ( r != l ) { arr2 [ j ] = r - l + 1 ; j ++ ; } l = i ; r = i ; } } if ( r != l ) { arr2 [ j ] = r - l + 1 ; j ++ ; } for ( i = 0 ; i < j ; i ++ ) { ans += ( arr2 [ i ] * ( arr2 [ i ] - 1 ) ) / 2 ; } ans += n ; printf ( \"%d\n\" , ans ) ; } return ( 0 ) ; }", "label": 0, "id": 5190}
{"input": "void main ( ) { int T , N , i , j , maxSum ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; int Triangle [ N ] [ N ] , SumTri [ N ] [ N ] ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & Triangle [ i ] [ j ] ) ; SumTri [ i ] [ j ] = 0 ; } SumTri [ 0 ] [ 0 ] = Triangle [ 0 ] [ 0 ] ; if ( N > 1 ) { SumTri [ 1 ] [ 0 ] = SumTri [ 0 ] [ 0 ] + Triangle [ 1 ] [ 0 ] ; SumTri [ 1 ] [ 1 ] = SumTri [ 0 ] [ 0 ] + Triangle [ 1 ] [ 1 ] ; } for ( i = 1 ; i < N ; i ++ ) { SumTri [ i ] [ 0 ] = SumTri [ i - 1 ] [ 0 ] + Triangle [ i ] [ 0 ] ; } for ( i = 1 ; i < N ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { if ( j == i ) SumTri [ i ] [ j ] = SumTri [ i - 1 ] [ j - 1 ] + Triangle [ i ] [ j ] ; else if ( SumTri [ i - 1 ] [ j ] > SumTri [ i - 1 ] [ j - 1 ] ) SumTri [ i ] [ j ] = SumTri [ i - 1 ] [ j ] + Triangle [ i ] [ j ] ; else SumTri [ i ] [ j ] = SumTri [ i - 1 ] [ j - 1 ] + Triangle [ i ] [ j ] ; } maxSum = SumTri [ N - 1 ] [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) if ( SumTri [ N - 1 ] [ i ] > maxSum ) maxSum = SumTri [ N - 1 ] [ i ] ; printf ( \"%d\n\" , maxSum ) ; } }", "label": 0, "id": 21158}
{"input": "main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2931}
{"input": "int main ( ) { int i , n , m , a [ 100 ] [ 100 ] , j , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int max = 0 , diag [ 100 ] , col [ 100 ] , sum ; scanf ( \"%d\" , & m ) ; for ( j = 0 ; j < m ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; if ( j == k ) { if ( j == 0 ) { diag [ j ] = a [ j ] [ k ] ; } else diag [ j ] = diag [ j - 1 ] + a [ j ] [ k ] ; col [ j ] = 0 ; } else { col [ k ] += a [ j ] [ k ] ; } } } max = diag [ m - 1 ] ; int h ; for ( h = m - 2 ; h >= 0 ; h -- ) { sum = diag [ h ] + col [ h ] ; if ( sum > max ) max = sum ; } printf ( \"\n%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 5459}
{"input": "main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , min = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 14763}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int T , N , i , k , j ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = N - 1 ; i >= 0 ; i -- ) { for ( j = N - 1 ; j >= 0 ; j -- ) { k = ( a [ i ] [ j - 1 ] >= a [ i ] [ j ] ) ? a [ i ] [ j - 1 ] : a [ i ] [ j ] ; a [ i - 1 ] [ j - 1 ] += k ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; T -- ; } return 0 ; }", "label": 3, "id": 8743}
{"input": "int main ( void ) { int num_1 , num_2 , c , s , i , t , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & num_1 , & num_2 ) ; c = num_1 * num_2 ; while ( num_2 != 0 ) { s = num_1 % num_2 ; num_1 = num_2 ; num_2 = s ; } gcd = num_1 ; lcm = c / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 20962}
{"input": "int knownP [ 10000 ] = { 0 } ; int rtTrg [ MAXL ] [ MAXL ] ; int maxPath ( int level , int offset , int maxlevel ) { int sum1 , sum2 ; if ( ( knownP [ SPOT_LOCATION ] != UNKNOWN ) && ( ! NOMOREDOWN ) ) { return knownP [ SPOT_LOCATION ] ; } if ( NOMOREDOWN ) { return knownP [ SPOT_LOCATION ] = rtTrg [ level ] [ offset ] ; } else { sum1 = maxPath ( level + 1 , offset , maxlevel ) ; sum2 = maxPath ( level + 1 , offset + 1 , maxlevel ) ; knownP [ SPOT_LOCATION ] = ( ( sum1 > sum2 ) ? sum1 : sum2 ) + rtTrg [ level ] [ offset ] ; return knownP [ SPOT_LOCATION ] ; } return ; } void fastread_D ( int * base ) { char c = 0 ; while ( c < 33 ) { c = getchar_unlocked ( ) ; } * base = 0 ; while ( c > 33 ) { * base = * base * 10 + c - '0' ; c = getchar_unlocked ( ) ; } } int main ( ) { int i , j , cases ; int totalLevels = 0 ; fastread_D ( & cases ) ; while ( cases -- ) { memset ( rtTrg , 0 , sizeof ( rtTrg ) ) ; memset ( knownP , UNKNOWN , 10000 ) ; fastread_D ( & totalLevels ) ; for ( i = 0 ; i < totalLevels ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { fastread_D ( & rtTrg [ i ] [ j ] ) ; } } printf ( \"%d\n\" , maxPath ( 0 , 0 , totalLevels - 1 ) ) ; } return 0 ; }", "label": 1, "id": 12810}
{"input": "int main ( ) { int t , k ; long int a , b , i , x , y , c ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a < b ) for ( i = a ; i >= 1 ; i -- ) { x = a % i ; y = b % i ; if ( x == 0 && y == 0 ) { printf ( \"%ld \" , i ) ; break ; } } else for ( i = b ; i >= 1 ; i -- ) { x = a % i ; y = b % i ; if ( x == 0 && y == 0 ) { printf ( \"%ld \" , i ) ; break ; } } c = a * b / i ; printf ( \"%ld\n\" , c ) ; } return 0 ; }", "label": 2, "id": 999}
{"input": "int gcd ( int A , int B ) { if ( B == 0 ) return A ; else return gcd ( B , A % B ) ; } int main ( ) { int t , a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 4379}
{"input": "int main ( ) { int t ; int n ; int i ; long num ; long min ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { min = 100000 ; scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & num ) ; if ( min > num ) min = num ; printf ( \"%ld \" , min ) ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 26449}
{"input": "int exec ( int n ) { int A [ 10 ] , B = 0 , c = 0 , i , j ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & A [ j ] ) ; } B = A [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( B < A [ i ] ) { c = c + B ; } else { c = c + A [ i ] ; B = A [ i ] ; } } printf ( \"%d\" , c ) ; } int main ( void ) { int n , m , l ; scanf ( \"%d\n\" , & m ) ; for ( l = 0 ; l < m ; l ++ ) { scanf ( \"%d\n\" , & n ) ; exec ( n ) ; } return 0 ; }", "label": 3, "id": 19163}
{"input": "int main ( ) { int tc , m , n , i ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { m = INT_MAX ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( m > a [ i ] ) m = a [ i ] ; } printf ( \"%d\n\" , m * ( n - 1 ) ) ; } }", "label": 0, "id": 1293}
{"input": "int main ( ) { int a , t , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( n != m ) { if ( n > m ) n = n - m ; else m = m - n ; } printf ( \"%d\n%d\n\" , n , ( a * b ) / n ) ; } return 0 ; }", "label": 1, "id": 3063}
{"input": "int main ( ) { int T , c , i ; long int n ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%ld\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ 0 ] > a [ i + 1 ] ) { c = a [ 0 ] ; a [ 0 ] = a [ i + 1 ] ; a [ i + 1 ] = c ; } } printf ( \"%d\n\" , a [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 14872}
{"input": "int main ( ) { int i , j , t , n , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int x [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & x [ i ] ) ; } min = x [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( x [ i ] < min ) min = x [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 15091}
{"input": "int main ( void ) { long long int t , a , b , c , d , temp , gcd , lcm ; scanf ( \"%lld\" , & t ) ; int i , r ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; c = a ; d = b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } while ( 1 ) { r = a % b ; if ( r == 0 ) { gcd = b ; break ; } a = b ; b = r ; } lcm = ( c * d ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } }", "label": 0, "id": 7690}
{"input": "int main ( ) { int t , d ; long int a , b , a1 , b1 , hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; a1 = a ; b1 = b ; while ( b1 != 0 ) { d = b1 ; b1 = a1 % b1 ; b1 = d ; } hcf = a1 ; lcm = ( a * b ) / hcf ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 948}
{"input": "int a [ 100 ] [ 100 ] ; int b [ 100 ] [ 100 ] ; int max ( int s1 , int s2 ) { if ( s1 >= s2 ) return s1 ; else return s2 ; } int sum ( int i , int j , int n ) { int s1 , s2 , s ; if ( i >= n ) return 0 ; if ( b [ i ] [ j ] && b [ i ] [ j ] != - 1 ) return b [ i ] [ j ] ; s1 = sum ( i + 1 , j , n ) ; s2 = sum ( i + 1 , j + 1 , n ) ; s = a [ i ] [ j ] + max ( s1 , s2 ) ; if ( b [ i ] [ j ] == - 1 ) b [ i ] [ j ] = s ; return s ; } main ( ) { int t , n ; int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 2 ; i < n ; i ++ ) for ( j = 1 ; j < i ; j ++ ) b [ i ] [ j ] = - 1 ; printf ( \"%d\n\" , sum ( 0 , 0 , n ) ) ; } return 0 ; }", "label": 0, "id": 21827}
{"input": "int main ( ) { int t ; long int a , b , gcd , lcm , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = ( a < b ? a : b ) ; i > 0 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; break ; } } lcm = a * b / gcd ; printf ( \"%ld %ld\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 2805}
{"input": "int n ; int sum ( int a [ 100 ] [ 100 ] , int i , int j , int b [ 100 ] [ 100 ] ) { int s ; if ( i >= n ) return 0 ; if ( b [ i ] [ j ] != 0 ) return b [ i ] [ j ] ; int s1 = sum ( a , i + 1 , j , b ) ; int s2 = sum ( a , i + 1 , j + 1 , b ) ; if ( s1 > s2 ) { s = s1 + a [ i ] [ j ] ; } else { s = s2 + a [ i ] [ j ] ; } b [ i ] [ j ] = s ; return s ; } int main ( ) { int a [ 100 ] [ 100 ] , i , j , no , t , b [ 100 ] [ 100 ] ; scanf ( \"%d\n\" , & no ) ; for ( t = 0 ; t < no ; t ++ ) { scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d \" , & a [ i ] [ j ] ) ; } scanf ( \"\n\" ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { b [ i ] [ j ] = 0 ; } } int ans = sum ( a , 0 , 0 , b ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 9936}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19076}
{"input": "int main ( ) { int T , i = 0 , min , a [ 50000 ] , j , N , sum [ 10 ] ; scanf ( \"%d\" , & T ) ; if ( T <= 10 ) { while ( 1 ) { min = 100000 ; scanf ( \"%d\" , & N ) ; if ( N <= 50000 && N >= 2 ) { for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( a [ j ] < min ) { min = a [ j ] ; } } sum [ i ] = ( N - 1 ) * ( min ) ; } i ++ ; if ( i == T ) break ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%d\n\" , sum [ i ] ) ; } return 0 ; }", "label": 0, "id": 17229}
{"input": "int main ( ) { int n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j , c , maxi = 0 , temp1 = 0 , temp2 = 0 , k , l ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = 0 ; } } scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { j = 0 ; c = 0 ; while ( j <= i ) { if ( c == 0 ) { scanf ( \"%d\" , & temp1 ) ; scanf ( \"%d\" , & temp2 ) ; } else { temp1 = temp2 ; scanf ( \"%d\" , & temp2 ) ; } k = temp1 + a [ i ] [ j ] ; l = temp2 + a [ i ] [ j ] ; if ( k > a [ i + 1 ] [ j ] ) a [ i + 1 ] [ j ] = k ; if ( l > a [ i + 1 ] [ j + 1 ] ) a [ i + 1 ] [ j + 1 ] = l ; j ++ ; c ++ ; if ( i == n - 2 ) { if ( k > maxi ) maxi = k ; if ( l > maxi ) maxi = l ; } } } printf ( \"%d\n\" , maxi ) ; } return 0 ; }", "label": 0, "id": 7858}
{"input": "int a [ 1000 ] [ 1000 ] ; int main ( ) { int n ; scanf ( \"%d\" , & n ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { int max = a [ i ] [ 0 ] ; for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) max = a [ i ] [ j ] ; else if ( a [ i ] [ j + 1 ] > a [ i ] [ j ] ) max = a [ i ] [ j + 1 ] ; } sum += max ; } printf ( \"%d\" , sum ) ; return 0 ; }", "label": 1, "id": 22794}
{"input": "int main ( ) { long long int n , t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] , i , min = 999999 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 21561}
{"input": "int main ( ) { int i , j , k , l , m , n , arr [ 5050 ] ; scanf ( \"%d\" , & k ) ; for ( m = 0 ; m < k ; m ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ ( i * ( i + 1 ) / 2 ) + j ] ) ; } if ( n >= 2 ) { for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { arr [ ( i * ( i + 1 ) / 2 ) + j ] = arr [ ( i * ( i + 1 ) / 2 ) + j ] + max ( arr [ ( i + 1 ) * ( i + 2 ) / 2 + j ] , arr [ ( i + 1 ) * ( i + 2 ) / 2 + j + 1 ] ) ; } } } printf ( \"%d\n\" , arr [ 0 ] ) ; } exit ( 1 ) ; return 0 ; } int max ( int a , int b ) { if ( a < b ) return b ; else return a ; }", "label": 3, "id": 1985}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 101 ] [ 101 ] ; int len ; int i , j ; scanf ( \"%d\" , & len ) ; for ( i = len - 1 ; i > - 1 ; i -- ) { for ( j = 0 ; j < len - i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i < len ; i ++ ) { for ( j = 0 ; j < len - i ; j ++ ) { a [ i ] [ j ] += ( a [ i - 1 ] [ j ] + a [ i - 1 ] [ j + 1 ] + fabs ( a [ i - 1 ] [ j ] - a [ i - 1 ] [ j + 1 ] ) ) / 2 ; } } printf ( \"%d\n\" , a [ len - 1 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 12609}
{"input": "int main ( ) { int i , min , size , a [ 100 ] , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < size ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( size - 1 ) ) ; } return 0 ; }", "label": 3, "id": 20676}
{"input": "int main ( ) { int t , i , a , b , gcd , lcm , j , a1 , b1 ; long int r ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; a1 = a ; b1 = b ; while ( b1 != 0 ) { r = a1 % b1 ; a1 = b1 ; b1 = r ; } lcm = ( a * b ) / ( a1 ) ; printf ( \"%d %d\n\" , a1 , lcm ) ; } return 0 ; }", "label": 1, "id": 4574}
{"input": "int main ( ) { long long int t , x , sum , i , a [ 100000 ] , n ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } x = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] > x ) { sum = sum + x ; } else { sum = sum + a [ i ] ; x = a [ i ] ; } } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 13829}
{"input": "int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long n ; scanf ( \"%ld\" , & n ) ; long a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; long min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } long s = min * ( n - 1 ) ; printf ( \"%ld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 9161}
{"input": "int main ( ) { int t ; long int a , b , g , l , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; i = 1 ; j = 1 ; while ( i <= a && i <= b ) { if ( a % i == 0 && b % i == 0 ) g = i ; i ++ ; } printf ( \"%d\" , g ) ; while ( ( j * a ) % b != 0 ) j ++ ; printf ( \" %d\n\" , j * a ) ; } return 0 ; }", "label": 2, "id": 9298}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , k ; scanf ( \"%d%d\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%d %d\n\" , k , ( a * b ) / k ) ; } return 0 ; }", "label": 1, "id": 3245}
{"input": "int main ( ) { int n , size ; int triangle [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & size ) ; int i = 0 , j ; for ( i = 0 ; i < size ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; i ++ ; int max = 0 ; for ( i = size - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= ( size - i - 1 ) ; j ++ ) { int max_below ; max_below = triangle [ i + 1 ] [ j ] > triangle [ i + 1 ] [ j + 1 ] ? triangle [ i + 1 ] [ j ] : triangle [ i + 1 ] [ j + 1 ] ; triangle [ i ] [ j ] += max_below ; } printf ( \"%d\n\" , triangle [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 11542}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { int a , b , g , i ; int x , y ; scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } i = ( x * y ) / a ; printf ( \"%d\" , a ) ; printf ( \" \" ) ; printf ( \"%d\" , i ) ; T -- ; } return 0 ; }", "label": 1, "id": 23807}
{"input": "int main ( ) { int a , n , i = 0 , j ; int x [ 100 ] ; scanf ( \"%d\" , & a ) ; while ( a -- ) { i = 0 ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & x [ i ] ) ; j = x [ i ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & x [ i ] ) ; if ( x [ i ] < j ) j = x [ i ] ; } printf ( \"%d\n\" , j * ( n - 1 ) ) ; } }", "label": 3, "id": 18861}
{"input": "int c [ 100000 ] ; void counting_sort ( int a [ ] , int b [ ] , int n ) { int i ; for ( i = 0 ; i < 100000 ; i ++ ) { c [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { b [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { c [ a [ i ] - 1 ] ++ ; } for ( i = 1 ; i < 100000 ; i ++ ) { c [ i ] = c [ i ] + c [ i - 1 ] ; } for ( i = n - 1 ; i > - 1 ; i -- ) { b [ c [ a [ i ] - 1 ] - 1 ] = a [ i ] ; c [ a [ i ] - 1 ] -- ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int i , a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } counting_sort ( a , b , n ) ; printf ( \"\n%d\" , b [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 12436}
{"input": "int main ( ) { int t , n , i , current ; t = scan ( ) ; while ( t -- ) { int min = 999999 ; n = scan ( ) ; for ( i = 0 ; i < n ; i ++ ) { current = scan ( ) ; if ( current < min ) min = current ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; } int scan ( ) { int num = 0 , sign = 1 ; char c = '\\0' ; while ( c < '0' || c > '9' ) { c = getcx ( ) ; if ( c == '-' ) { sign = - 1 ; c = getcx ( ) ; break ; } } while ( c >= '0' && c <= '9' ) { num = num * 10 + c - '0' ; c = getcx ( ) ; } return num * sign ; }", "label": 0, "id": 8174}
{"input": "int main ( ) { long n , m , num , den , rem , lcm , gcd , i ; scanf ( \"%ld\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) { scanf ( \"%ld %ld\" , & n , & m ) ; rem = n * m ; while ( n != m ) { if ( n > m ) n = n - m ; if ( m > n ) m = m - n ; } gcd = n ; lcm = rem / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 16417}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t ) { int a , b , num1 , num2 , i , j ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { num1 = a ; num2 = b ; } else { num1 = b ; num2 = a ; } while ( num1 % num2 != 0 ) { i = num1 / num2 ; j = num1 % num2 ; num1 = num2 ; num2 = j ; } printf ( \"%d %d\n\" , num2 , ( a * b / num2 ) ) ; t -- ; } }", "label": 1, "id": 21289}
{"input": "int main ( ) { int t , k , i , j , n , p , q ; int a [ 105 ] [ 105 ] ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( p = 0 ; p < n ; p ++ ) { for ( q = 0 ; q <= p ; q ++ ) { scanf ( \"%d\" , & a [ p ] [ q ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 20895}
{"input": "main ( ) { int t , a , b , c , i , gcd , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; ++ i ) if ( a % i == 0 && b % i == 0 ) gcd = i ; printf ( \"%d  \" , gcd ) ; min = ( a > b ) ? a : b ; while ( 1 ) { if ( min % a == 0 && min % b == 0 ) { printf ( \"%d\n\" , min ) ; break ; } ++ min ; } } }", "label": 2, "id": 11168}
{"input": "void main ( ) { int n , a , b ; scanf ( \"%d\" , & n ) ; if ( n > 1 && n < 1000 ) while ( n > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; int n1 = a , n2 = b ; if ( a > 1 && a < 1000000 && b > 1 && b < 1000000 ) while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\" , a , ( n1 * n2 ) / a ) ; n -- ; } }", "label": 1, "id": 6236}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { arr [ i - 1 ] [ j ] = arr [ i - 1 ] [ j ] + max ( arr [ i ] [ j ] , arr [ i ] [ j + 1 ] ) ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16280}
{"input": "int main ( ) { int t , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; int b [ t ] , i , j , k , n , max ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 1 ; j <= n ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = n - 1 ; j > 0 ; j -- ) { for ( k = j ; k > 0 ; k -- ) { max = findMax ( a [ j + 1 ] [ k ] , a [ j + 1 ] [ k + 1 ] ) ; a [ j ] [ k ] = max + a [ j ] [ k ] ; } } b [ i ] = a [ 1 ] [ 1 ] ; } for ( i = 1 ; i <= t ; i ++ ) { printf ( \"%d\n\" , b [ i ] ) ; } return 0 ; } int findMax ( a , b ) { if ( a > b ) { return a ; } else { return b ; } }", "label": 3, "id": 14534}
{"input": "int main ( ) { int T = 0 , N , count , i , temp , j ; scanf ( \"%d\" , & T ) ; if ( T >= 1 && T <= 5 ) { while ( T -- ) { count = 0 ; scanf ( \"%d\" , & N ) ; temp = N ; if ( N >= 1 && N <= 100000 ) { long int a [ N ] ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( i > 0 ) { if ( a [ i - 1 ] < a [ i ] ) count ++ ; } } for ( i = 0 ; i < N - 1 ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { if ( a [ i ] == a [ j ] ) { temp -- ; break ; } } } } printf ( \"%d\n\" , count + temp ) ; } } return 0 ; }", "label": 2, "id": 4352}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 11786}
{"input": "int main ( ) { int t ; long long int a , b , r , m , c , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = 0 ; d = 0 ; scanf ( \"%lld%lld\" , a , b ) ; while ( b != 0 ) { r = a % b ; a = b ; b = r ; } c = a ; d = m / c ; printf ( \"%lld %lld\n\" , c , d ) ; } return 0 ; }", "label": 3, "id": 23927}
{"input": "int n , a [ 99 ] [ 99 ] , compare ; void recur ( int , int , int ) ; int main ( ) { int counter1 , counter2 , n1 , counter = 0 ; scanf ( \"%d\" , & n ) ; while ( counter < n ) { counter1 = 0 ; scanf ( \"%d\" , & n1 ) ; while ( counter1 < n1 ) { counter2 = 0 ; while ( counter2 <= counter1 ) { scanf ( \"%d\" , & a [ counter ] [ counter1 ] ) ; counter2 ++ ; } counter1 ++ ; } compare = 0 ; recur ( 0 , a [ 0 ] [ 0 ] , 1 ) ; printf ( \"%d\" , compare ) ; counter ++ ; } return 0 ; } void recur ( int rowele , int sum , int row ) { if ( row == n - 1 ) { if ( compare < sum ) compare = sum ; return ; } sum = sum + a [ row ] [ rowele ] ; recur ( rowele , sum , row + 1 ) ; sum = sum - a [ row ] [ rowele ] + a [ row ] [ rowele + 1 ] ; recur ( rowele + 1 , sum , row + 1 ) ; }", "label": 3, "id": 7040}
{"input": "int main ( ) { int n1 , n2 , i , gcd , t ; long long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"Enter two integers: \" ) ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( ( n1 % i == 0 ) && ( n2 % i == 0 ) ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \" %d  %lld\" , gcd , lcm ) ; return 0 ; } }", "label": 1, "id": 4162}
{"input": "int main ( ) { int i , j , n , a [ 100 ] [ 100 ] , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 2715}
{"input": "int main ( ) { int t , j , k , cost ; long long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } int min = a [ 0 ] ; for ( k = 0 ; k < n ; k ++ ) { if ( a [ k ] < min ) min = a [ k ] ; } cost = min * ( n - 1 ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 2696}
{"input": "int main ( ) { int t ; int n ; long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) printf ( \"\n>\" ) ; else if ( a < b ) printf ( \"\n<\" ) ; else printf ( \"\n=\" ) ; } }", "label": 1, "id": 21869}
{"input": "unsigned int array [ 1000 ] [ 100 ] [ 100 ] , sum [ 2 ] ; unsigned long MaxSum = 0 ; int newpath = 0 ; unsigned long getUnsignedInteger ( ) { char v_buffer [ 1 ] , Flag = 0 ; unsigned long integer = 0 ; while ( fread ( v_buffer , sizeof ( char ) , 1 , stdin ) ) { if ( Flag == 0 && ( v_buffer [ 0 ] == '\n' || v_buffer [ 0 ] == ' ' || v_buffer [ 0 ] == '\\t' ) ) { continue ; } if ( v_buffer [ 0 ] == '\n' || v_buffer [ 0 ] == ' ' || v_buffer [ 0 ] == '\\t' ) { break ; } else { Flag = 1 ; integer = ( integer * 10 ) + ( v_buffer [ 0 ] - '0' ) ; } } return integer ; } void sumFunc ( unsigned int Count , unsigned int Ci , unsigned int column , unsigned int NoOfLines , unsigned int previous , unsigned int path ) { if ( NoOfLines == 1 ) { sum [ 0 ] = previous ; return ; } if ( Ci <= ( NoOfLines - 1 ) ) { sum [ path ] = previous + array [ Count ] [ Ci ] [ column ] ; sumFunc ( Count , Ci + 1 , column , NoOfLines , sum [ path ] , path ) ; if ( Ci < ( NoOfLines ) ) { newpath ++ ; sum [ newpath ] = previous + array [ Count ] [ Ci ] [ column + 1 ] ; sumFunc ( Count , Ci + 1 , ( column + 1 ) , NoOfLines , sum [ newpath ] , newpath ) ; } if ( Ci == ( NoOfLines - 1 ) && newpath == 1 ) { if ( sum [ 0 ] > sum [ 1 ] ) { MaxSum = ( sum [ 0 ] > MaxSum ) ? sum [ 0 ] : MaxSum ; } else { MaxSum = ( sum [ 1 ] > MaxSum ) ? sum [ 1 ] : MaxSum ; } newpath = - 1 ; } } } int main ( ) { unsigned int i , j , k , noOfTestCases , lineCount [ 1000 ] ; noOfTestCases = getUnsignedInteger ( ) ; for ( k = 0 ; k < noOfTestCases ; ++ k ) { lineCount [ k ] = getUnsignedInteger ( ) ; for ( i = 0 ; i < lineCount [ k ] ; ++ i ) { for ( j = 0 ; j < ( i + 1 ) ; ++ j ) { array [ k ] [ i ] [ j ] = getUnsignedInteger ( ) ; } } } for ( k = 0 ; k < noOfTestCases ; ++ k ) { MaxSum = 0 ; newpath = 0 ; sumFunc ( k , 1 , 0 , lineCount [ k ] , array [ k ] [ 0 ] [ 0 ] , 0 ) ; printf ( \"%lu\n\" , MaxSum ) ; } return 0 ; }", "label": 2, "id": 22070}
{"input": "int arr [ MAX ] [ MAX ] ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int sum1 ( int n ) { int i , j ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } } return arr [ 0 ] [ 0 ] ; } int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } printf ( \"%d\n\" , sum1 ( n ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 8382}
{"input": "int main ( ) { long int t , a , i , min ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { min = 100 ; scanf ( \"%ld\" , & a ) ; long int ar [ a ] ; for ( i = 0 ; i < a ; i ++ ) { scanf ( \"%ld\" , & ar [ i ] ) ; if ( ar [ i ] < min ) min = ar [ i ] ; } printf ( \"%ld\n\" , min * ( a - 1 ) ) ; } }", "label": 0, "id": 20191}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a [ MAX ] , c ; int i , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } long int min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } c = min * ( n - 1 ) ; printf ( \"%ld\n\" , c ) ; } return 0 ; }", "label": 0, "id": 10589}
{"input": "int row = 0 ; int col = 0 ; int maximum = 0 ; void lvl ( long int a [ ] [ 100 ] , int n , int row , int col , int sum ) { if ( ( row < n ) && ( col < n ) ) { sum = sum + a [ row ] [ col ] ; if ( sum > maximum ) { maximum = sum ; } row ++ ; lvl ( a , n , row , col , sum ) ; col ++ ; lvl ( a , n , row , col , sum ) ; } return ; } int main ( ) { int T = 0 ; int a [ 100 ] [ 100 ] ; int num = 0 ; int i = 0 , j = 0 ; int sum = 0 ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; lvl ( a , num , row , col , sum ) ; printf ( \"%d\" , maximum ) ; T -- ; } return 0 ; }", "label": 3, "id": 3274}
{"input": "int main ( ) { int i , t ; printf ( \"\nEnter the no. of test cases\" ) ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { int sum ; int n , j , temp ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } temp = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < temp ) { temp = a [ j ] ; } } sum = temp * ( n - 1 ) ; printf ( \"\n%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 21302}
{"input": "int result ; void doJob ( short arr [ 100 ] [ 100 ] , int row , int col , int nor , int sum ) { if ( row == 0 && col > 0 ) { return ; } if ( row >= nor - 1 ) { if ( result < sum + arr [ row ] [ col ] ) { result = sum + arr [ row ] [ col ] ; } } else { doJob ( arr , row + 1 , col , nor , sum + arr [ row ] [ col ] ) ; doJob ( arr , row + 1 , col + 1 , nor , sum + arr [ row ] [ col ] ) ; } } main ( ) { int tc ; int i , j , k ; int nor ; short arr [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & tc ) ; for ( i = 0 ; i < tc ; i ++ ) { scanf ( \"%d\" , & nor ) ; for ( j = 0 ; j < nor ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } doJob ( arr , 0 , 0 , nor , 0 ) ; printf ( \"%d\n\" , result ) ; result = 0 ; } return 0 ; }", "label": 2, "id": 16459}
{"input": "int hcf ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a > b ) hcf ( a % b , b ) ; if ( b > a ) hcf ( a , b % a ) ; if ( a == b ) return b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i ; scanf ( \"%d%d\" , & a , & b ) ; i = hcf ( a , b ) ; printf ( \"%d %d\n\" , i , a * b / i ) ; } return 0 ; }", "label": 1, "id": 13012}
{"input": "int main ( ) { int t , n , i ; int a ; int smallest ; long total = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { total = 0 ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & smallest ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( a < smallest ) smallest = a ; total += smallest ; } printf ( \"%d\n\" , total ) ; } return 0 ; }", "label": 1, "id": 26182}
{"input": "int a [ 102 ] [ 102 ] ; int main ( ) { int n , row ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int i , j ; scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = row - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j <= ( i - 1 ) ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23384}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i , gcd = 1 ; scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; for ( i = 2 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd *= i ; } printf ( \"%d %d\n\" , gcd , a * b / gcd ) ; } return 0 ; }", "label": 1, "id": 12651}
{"input": "void main ( ) { long long min , n , i , t , a ; scanf ( \"%lld\n\" , & t ) ; while ( t -- ) { scanf ( \"%lld\n\" , & n ) ; i = 1 ; if ( n > 0 ) scanf ( \"%lld \" , & a ) ; min = a ; while ( i < n ) { scanf ( \"%lld \" , & a ) ; if ( min > a ) min = a ; i ++ ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 8969}
{"input": "main ( ) { int q1 , q2 ; int buffer [ MAX ] [ MAX ] , i , j , r [ MAX ] [ MAX ] = { 0 } , result [ MAX ] , t , k ; int n ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & buffer [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) r [ n - 1 ] [ i ] = buffer [ n - 1 ] [ i ] ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { q1 = r [ i + 1 ] [ j + 1 ] + buffer [ i ] [ j ] ; q2 = r [ i + 1 ] [ j ] + buffer [ i ] [ j ] ; if ( q1 < q2 ) q1 = q2 ; r [ i ] [ j ] = q1 ; } } result [ k ] = r [ 0 ] [ 0 ] ; } for ( k = 0 ; k < t ; k ++ ) { printf ( \"\n%d\" , result [ k ] ) ; } return 0 ; }", "label": 1, "id": 9665}
{"input": "int main ( ) { long long int a , b , i , f , r , n , g = 0 , l = 0 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { i = a ; f = b ; } else { i = b ; f = a ; } r = a % b ; while ( r != 0 ) { i = f ; f = r ; r = i % f ; } g = f ; l = ( a * b ) / g ; printf ( \"%lld %lld\" , g , l ) ; } }", "label": 1, "id": 22147}
{"input": "int k = 0 ; void trian ( int a [ ] [ 1000 ] , int n , int k ) { int i , j , max ; if ( k > n ) return ; { for ( i = 0 ; i < k ; i ++ ) { if ( ! i ) a [ k ] [ i ] += a [ k - 1 ] [ i ] ; else { max = ( a [ k - 1 ] [ i ] > a [ k - 1 ] [ i - 1 ] ) ? a [ k - 1 ] [ i ] : a [ k - 1 ] [ i - 1 ] ; a [ k ] [ i ] += max ; } } return trian ( a , n , k + 1 ) ; } } int main ( ) { int T , a [ 1000 ] [ 1000 ] , n , max , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; trian ( a , n , 2 ) ; max = 0 ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; printf ( \"%d\n\" , max + a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 4535}
{"input": "int main ( void ) { int x , y , n1 , n2 , result , lcm , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) { n1 = n1 - n2 ; } else { n2 = n2 - n1 ; } } lcm = ( x * y ) / n1 ; printf ( \"%d %d\n\" , n1 , lcm ) ; } }", "label": 1, "id": 8362}
{"input": "int main ( ) { int t , a , b , x , y , temp , i , lcm , gcd ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 16048}
{"input": "int main ( void ) { int i , T , a , b , temp , A , B , gcd [ 1000 ] ; long lcm [ 1000 ] ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; if ( A == 0 || B == 0 ) { gcd [ i ] = 0 ; lcm [ i ] = 0 ; } else { a = A , b = B ; while ( b != 0 ) { temp = a ; a = b ; b = temp % b ; } gcd [ i ] = a ; lcm [ i ] = A / gcd [ i ] * ( long ) B ; } printf ( \"%d %ld\n\" , gcd [ i ] , lcm [ i ] ) ; } return 0 ; }", "label": 0, "id": 21176}
{"input": "long long int gcd ( long long int a , long long int b ) { long long int hf ; hf = ( a > b ) ? a : b ; while ( hf > 0 ) { if ( a % hf == 0 && b % hf == 0 ) break ; -- hf ; } return hf ; } long long int lcm ( long long int a , long long int b ) { long long int lc ; lc = ( a > b ) ? a : b ; while ( 1 ) { if ( lc % a == 0 && lc % b == 0 ) break ; ++ lc ; } return lc ; } int main ( ) { long long int a , b , c = 0 , d = 0 , i ; int t ; scanf ( \"%d\" , & t ) ; int arr [ 100000 ] ; while ( c < t ) { scanf ( \"%lld %lld\" , & a , & b ) ; arr [ d ] = gcd ( a , b ) ; ++ d ; arr [ d ] = lcm ( a , b ) ; ++ d ; ++ c ; } for ( i = 0 ; i <= d - 2 ; ++ i ) { printf ( \"\n%d %d\" , arr [ i ] , arr [ i + 1 ] ) ; ++ i ; } return 0 ; }", "label": 2, "id": 18525}
{"input": "int main ( ) { int a , b , c , x , y , temp , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } c = a % b ; while ( c > 0 ) { a = b ; b = c ; c = a % b ; } printf ( \"%d %d\n\" , b , ( x * y ) / b ) ; } }", "label": 1, "id": 3616}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int trianglesum ( int n , int arr [ ] [ 100 ] , int i , int j ) { if ( i > n ) return 0 ; int a1 = trianglesum ( n , arr , i + 1 , j ) + arr [ i ] [ j ] ; int a2 = trianglesum ( n , arr , i + 1 , j + 1 ) + arr [ i ] [ j ] ; return max ( a1 , a2 ) ; } void inputarray ( int n , int arr [ ] [ 100 ] ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } int main ( ) { int arr [ 100 ] [ 100 ] , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; memset ( arr , 0 , sizeof ( arr [ 0 ] [ 0 ] ) * 100 * 100 ) ; inputarray ( n , arr ) ; printf ( \"%d\n\" , trianglesum ( n , arr , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 19643}
{"input": "long long int gcd ( long long int a , long long int b ) { long long int x , y , z ; if ( b > a ) { x = b ; y = a ; } else { x = a ; y = b ; } z = ( long long int ) x / y ; while ( ( x - ( z * y ) ) != 0 ) { long long int t ; t = y ; y = ( x - ( z * y ) ) ; x = t ; z = x / y ; } return y ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { long long int a , b , c , d ; scanf ( \"%lld%lld\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , c , ( b * a / c ) ) ; t -- ; } }", "label": 0, "id": 26876}
{"input": "int main ( ) { long long int T , A , B , a , b , rem , GCD , LCM ; scanf ( \"%lld\" , & T ) ; while ( T -- ) { scanf ( \"%lld%lld\" , & A , & B ) ; a = A ; b = B ; if ( B > A ) { rem = B % A ; if ( rem == 0 ) { GCD = A ; } else { while ( rem != 0 ) { B = A ; A = rem ; rem = B % A ; } GCD = A ; } } else if ( A > B ) { rem = A % B ; if ( rem == 0 ) { GCD = B ; } else { while ( rem != 0 ) { A = B ; B = rem ; rem = A % B ; } GCD = B ; } } else { GCD = A ; } LCM = ( a * b ) / GCD ; printf ( \"%lld %lld\n\" , GCD , LCM ) ; } return 0 ; }", "label": 0, "id": 15699}
{"input": "main ( ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] , min ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 1, "id": 9878}
{"input": "int max ( int , int ) ; int main ( ) { int * * a , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 0, "id": 2076}
{"input": "int mat [ 100 ] [ 100 ] , res [ 100 ] [ 100 ] ; void solve ( int row , int size ) { int i ; if ( row < size ) { for ( i = 0 ; i <= row ; i ++ ) { if ( i > 0 && i < row ) { res [ row ] [ i ] = ( res [ row - 1 ] [ i - 1 ] > res [ row - 1 ] [ i ] ) ? res [ row - 1 ] [ i - 1 ] : res [ row - 1 ] [ i ] ; res [ row ] [ i ] += mat [ row ] [ i ] ; } else if ( i == 0 ) { res [ row ] [ i ] = res [ row - 1 ] [ i ] + mat [ row ] [ i ] ; } else { res [ row ] [ i ] = res [ row - 1 ] [ i - 1 ] + mat [ row ] [ i ] ; } } solve ( row + 1 , size ) ; } } int main ( ) { int t , n , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } } res [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ; solve ( 1 , n ) ; max = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( res [ n - 1 ] [ i ] > max ) max = res [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 19020}
{"input": "int check_sum ( int , int , int ) ; int arr [ 100 ] [ 100 ] ; int main ( void ) { int i , j ; int t , a = 0 ; int nr ; int sumation = 0 ; int sum_r8 = 0 ; int sum_lft = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & nr ) ; for ( i = 0 ; i < nr ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; sumation = 0 ; for ( i = 0 , j = 0 ; i < nr ; i ++ ) { sumation += arr [ i ] [ j ] ; sum_r8 = check_sum ( i + 1 , j + 1 , ( nr - i - 1 ) ) ; sum_lft = check_sum ( i + 1 , j , ( nr - i - 1 ) ) ; if ( ! ( ( sum_lft > sum_r8 ) || ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ) ) j ++ ; } printf ( \"%d\" , sumation ) ; } return 0 ; } int check_sum ( int i , int j , int n ) { int sum = 0 ; while ( n -- ) { sum += arr [ i ] [ j ] ; i ++ ; } return sum ; }", "label": 1, "id": 22131}
{"input": "main ( ) { int test , n , i , j , ans [ 100000 ] ; unsigned long long int arr [ 100000 ] , totalans ; scanf ( \"%d\" , & test ) ; while ( test -- ) { totalans = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%llu\" , & arr [ i ] ) ; if ( i == 0 ) ans [ i ] = 1 ; else if ( arr [ i ] > arr [ i - 1 ] ) ans [ i ] = ans [ i - 1 ] + 1 ; else ans [ i ] = 1 ; totalans += ans [ i ] ; } printf ( \"%llu\n\" , totalans ) ; } }", "label": 0, "id": 19495}
{"input": "int main ( ) { int D [ 101 ] [ 101 ] , n , m , i , j , temp [ 101 ] [ 101 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { D [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { temp [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & D [ i ] [ j ] ) ; } } i = m - 1 ; int max ; for ( j = 0 ; j <= i ; j ++ ) temp [ i ] [ j ] = D [ i ] [ j ] ; for ( i = m - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { max = ( temp [ i + 1 ] [ j ] > temp [ i + 1 ] [ j + 1 ] ) ? temp [ i + 1 ] [ j ] : temp [ i + 1 ] [ j + 1 ] ; temp [ i ] [ j ] = D [ i ] [ j ] + max ; } } printf ( \"%d\n\" , temp [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24770}
{"input": "int SumOfTriangle ( int * * triangle , int rows , int x , int y , int sum ) ; int main ( void ) { int testcases , rows , * * triangle , * row , index , index2 , outer ; scanf ( \"%d\" , & testcases ) ; for ( outer = 0 ; outer < testcases ; outer ++ ) { scanf ( \"%d\" , & rows ) ; triangle = ( int * * ) malloc ( sizeof ( int * ) * rows ) ; for ( index = 0 ; index < rows ; index ++ ) { row = * ( triangle + index ) = ( int * ) malloc ( sizeof ( int ) * ( index + 1 ) ) ; for ( index2 = 0 ; index2 <= index ; index2 ++ ) { scanf ( \"%d\" , ( row + index2 ) ) ; } } printf ( \"\n%d\" , SumOfTriangle ( triangle , rows - 1 , 0 , 0 , 0 ) ) ; for ( index = 0 ; index < rows ; index ++ ) { free ( * ( triangle + index ) ) ; } free ( triangle ) ; } return 0 ; } int SumOfTriangle ( int * * triangle , int rows , int x , int y , int sum ) { int * row = * ( triangle + x ) ; int curval = * ( row + y ) , sum1 , sum2 ; if ( x == rows ) return curval + sum ; else { sum1 = SumOfTriangle ( triangle , rows , x + 1 , y , sum + curval ) ; sum2 = SumOfTriangle ( triangle , rows , x + 1 , y + 1 , sum + curval ) ; } return ( sum1 > sum2 ) ? sum1 : sum2 ; }", "label": 2, "id": 20135}
{"input": "int n , a [ 100 ] [ 100 ] ; int main ( ) { int T , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ? a [ i + 1 ] [ j + 1 ] : a [ i + 1 ] [ j ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11126}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , max , min , gcd , lcm , i ; scanf ( \"%d %d \" , & a , & b ) ; max = a > b ? a : b ; min = a < b ? a : b ; for ( i = min ; i > 0 ; i -- ) { if ( max % i == 0 && min % i == 0 ) { gcd = i ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 15031}
{"input": "int main ( ) { long long int t , g , a , b , i , min ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; for ( i = 1 ; i <= a , i <= b ; ++ i ) { if ( a % i == 0 && b % i == 0 ) g = i ; } printf ( \"%lld %lld\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 2, "id": 5722}
{"input": "int main ( void ) { int a , b , c , t ; float gcd , lcm ; printf ( \"Enter two numbers\" ) ; scanf ( \"%d %d\" , & a , & b ) ; c = a * b ; while ( b != 0 ) { t = a % b ; a = b ; b = t ; } gcd = a ; lcm = c / gcd ; printf ( \"GCD is %f\" , gcd ) ; printf ( \"LCM is %f\" , lcm ) ; return 0 ; }", "label": 1, "id": 11309}
{"input": "int multi ( int a , int b , int g ) { int ch [ 100 ] ; b *= g ; int i , k = 0 , temp , x , y , t , da ; for ( i = 0 ; i < 100 ; i ++ ) ch [ i ] = 0 ; while ( b > 0 ) { i = k ; x = b ; b /= 10 ; temp = 0 ; da = a ; while ( da > 0 ) { y = da ; da /= 10 ; t = x * y + temp ; ch [ i ++ ] += t ; temp = t / 10 + ch [ i - 1 ] / 10 ; if ( ch [ i - 1 ] > 9 ) ch [ i - 1 ] = ch [ i - 1 ] ; } k ++ ; } if ( temp != 0 ) { ch [ i ++ ] = temp ; } int j , lcm = 0 ; for ( j = i - 1 ; j >= 0 ; j -- ) lcm = 10 * lcm + ch [ j ] ; printf ( \"%d\" , lcm ) ; } int main ( ) { int t , i , j , m ; int x , y , a , b , min , max ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; a = x , b = y ; min = a < b ? a : b ; max = a > b ? a : b ; int gcd ; if ( min == 1 ) gcd = 1 ; else if ( max % min == 0 ) gcd = min ; else { for ( j = min / 2 ; ; j -- ) { if ( min % j == 0 && max % j == 0 ) { gcd = j ; break ; } } } a = x , b = y ; printf ( \"%d \" , gcd ) ; multi ( a / gcd , b / gcd , gcd ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 2970}
{"input": "void main ( ) { int t , i , j , n , c ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = t - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) c = arr [ i + 1 ] [ j ] ; else c = arr [ i + 1 ] [ j + 1 ] ; arr [ i ] [ j ] += c ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 19471}
{"input": "int main ( ) { int T , i , gcd , lcm ; scanf ( \"%d\" , & T ) ; printf ( \"\n\" ) ; for ( i = 0 ; i < T ; i ++ ) { int A , B , x , y , temp ; scanf ( \"%d\" , & A ) ; printf ( \" \" ) ; scanf ( \"%d\" , & B ) ; x = A ; y = B ; while ( y != 0 ) { temp = y ; y = x % y ; x = temp ; } gcd = x ; lcm = ( A * B ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 5220}
{"input": "int main ( ) { long t , n , j , k , s1 = 0 , s2 = 0 , i ; long a [ 100 ] [ 100 ] ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; s1 = s2 = 0 ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%ld\" , & a [ j ] [ k ] ) ; } for ( j = 0 ; j < n ; j ++ ) { s1 += a [ 0 ] [ j ] ; s2 += a [ j ] [ j ] ; } if ( s1 > s2 ) printf ( \"%ld\n\" , s1 ) ; else printf ( \"%ld\n\" , s2 ) ; } return 0 ; }", "label": 1, "id": 17015}
{"input": "int * arr , n ; int * save ; int findmax ( int index , int i ) { int temp , sum ; if ( i == n - 1 ) { save [ index ] = arr [ index ] ; return save [ index ] ; } else if ( save [ index ] != 0 ) return ( save [ index ] ) ; i ++ ; temp = findmax ( index + i , i ) ; sum = findmax ( index + i + 1 , i ) ; if ( temp >= sum ) { save [ index ] = temp + arr [ index ] ; return save [ index ] ; } else { save [ index ] = sum + arr [ index ] ; return sum + arr [ index ] ; } } int main ( ) { int index = 0 , i = 0 , j ; int y , t , * sum1 ; printf ( \"\nenter no.of trails \" ) ; scanf ( \"%d\" , & t ) ; sum1 = ( int * ) malloc ( t * sizeof ( int ) ) ; memset ( sum1 , 0 , sizeof ( sum1 ) ) ; for ( j = 0 ; j < t ; j ++ ) { printf ( \"\nenter no.of rows \" ) ; scanf ( \"%d\" , & n ) ; arr = ( int * ) malloc ( ( n * ( n + 1 ) ) / 2 * sizeof ( int ) ) ; save = ( int * ) malloc ( ( n * ( n + 1 ) ) / 2 * sizeof ( int ) ) ; for ( i = 0 ; i < ( n * ( n + 1 ) ) / 2 ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; sum1 [ j ] = findmax ( 0 , 0 ) ; free ( arr ) ; } for ( j = 0 ; j < t ; j ++ ) printf ( \"\n%d\" , sum1 [ j ] ) ; return 0 ; }", "label": 1, "id": 7038}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , t , t1 = 0 , n ; scanf ( \"%d\" , & t ) ; while ( t1 < t ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j + 1 ] >= a [ i + 1 ] [ j ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t1 ++ ; } return 0 ; }", "label": 0, "id": 1656}
{"input": "int main ( ) { int t , c ; long int n , i , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { c = 0 ; scanf ( \"%ld\" , & n ) ; long long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( j == k ) c ++ ; else if ( a [ j ] < a [ k + 1 ] && a [ k ] - a [ j ] == 1 ) c ++ ; } } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 2, "id": 6945}
{"input": "int main ( ) { int i , sum = 0 , n , t , max = 0 , k , j , temp ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( k = 1 ; k <= n ; k ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , & temp ) ; sum = sum + temp ; } if ( sum > max ) max = sum ; sum = 0 ; } printf ( \"%d\n\" , max ) ; max = 0 ; } return 0 ; }", "label": 1, "id": 1463}
{"input": "int R ; int maxpath ( int a [ R ] [ R ] , int r , int c ) { int p , q ; if ( r == R - 1 ) return a [ r ] [ c ] ; if ( r == R - 2 ) { p = a [ r + 1 ] [ c ] ; q = a [ r + 1 ] [ c + 1 ] ; } else { p = maxpath ( a , r + 1 , c ) ; q = maxpath ( a , r + 1 , c + 1 ) ; } if ( p > q ) return a [ r ] [ c ] + p ; else return a [ r ] [ c ] + q ; } int main ( ) { int N , n , r , c , m ; scanf ( \"%d\" , & N ) ; for ( n = 0 ; n < N ; n ++ ) { scanf ( \"%d\" , & R ) ; int a [ R ] [ R ] ; for ( r = 0 ; r < R ; r ++ ) for ( c = 0 ; c <= r ; c ++ ) scanf ( \"%d\" , & a [ r ] [ c ] ) ; m = maxpath ( a , 0 , 0 ) ; printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 2, "id": 17350}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , k ; scanf ( \"%d%d\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%d %d\n\" , k , ( a * b ) / k ) ; } return 0 ; }", "label": 1, "id": 5372}
{"input": "int main ( ) { int t , r , n , i , j , min = 1000005 ; scanf ( \"%d\" , & r ) ; while ( r -- ) { t = 0 ; scanf ( \"%d\" , & n ) ; if ( n < 2 ) continue ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 1, "id": 15865}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int q ; scanf ( \"%d\" , & q ) ; while ( q -- ) { int w ; scanf ( \"%d\" , & w ) ; int i , j ; int a [ w ] [ w ] ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 0 ; j < w ; j ++ ) { a [ i ] [ j ] = - 1 ; } } for ( i = 0 ; i < w ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j != 0 ) { a [ i ] [ j ] += max ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; } if ( j == 0 && i != 0 ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; } } } int s = a [ w - 1 ] [ 0 ] ; for ( i = 1 ; i < w ; i ++ ) if ( s < a [ w - 1 ] [ i ] ) s = a [ w - 1 ] [ i ] ; printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 0, "id": 17389}
{"input": "int main ( ) { long int n , a [ 50000 ] , b , c = 0 , i ; scanf ( \"%ld\" , & n ) ; while ( n != 0 ) { c = 0 ; scanf ( \"%ld\" , & b ) ; for ( i = 0 ; i < b ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < b ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) a [ i + 1 ] = a [ i ] ; c = c + a [ i + 1 ] ; a [ i ] = 0 ; } printf ( \"%ld\n\" , c ) ; n -- ; } return 0 ; }", "label": 1, "id": 7803}
{"input": "long long h ( long long a , long long b ) { while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; } int main ( ) { long long t , a , b , hcf , lcm ; scanf ( \"%lld\" , & t ) ; while ( t > 0 ) { t -- ; scanf ( \"%lld%lld\" , & a , & b ) ; hcf = h ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 7914}
{"input": "long long int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) { return 0 ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; } int main ( void ) { int t ; long long int a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 13118}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int min ( int a , int b ) { if ( a < b ) return a ; else return b ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , s = 0 , k = 0 , l = 0 ; scanf ( \"%d\" , & n ) ; int a [ 100000 ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > 0 ) { l = max ( a [ i ] , a [ i + 1 ] ) ; l = 0 ; k = min ( a [ i ] , a [ i + 1 ] ) ; s = s + k ; } } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 22742}
{"input": "int main ( ) { long long int t , i , p , n , m , max , l , k ; scanf ( \"%lli\" , & t ) ; k = 0 ; while ( k < t ) { k ++ ; scanf ( \"%lli %lli\" , & n , & m ) ; p = n * m ; if ( n > m ) max = n ; else max = m ; for ( i = 1 ; i < max ; i ++ ) { if ( n % i == 0 && m % i == 0 ) max = i ; } l = p / max ; printf ( \"%lli %lli \n\" , max , l ) ; } return 0 ; }", "label": 1, "id": 14837}
{"input": "int getGcd ( int a , int b ) { if ( b == 0 ) return a ; else return getGcd ( b , a % b ) ; } int main ( ) { int t , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y ; scanf ( \"%d %d\" , & x , & y ) ; int n1 = x ; int n2 = y ; gcd = getGcd ( x , y ) ; lcm = ( n1 * n2 ) / gcd ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 8590}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else gcd ( b , a % b ) ; } int main ( ) { int t , a , b ; printf ( \"Enter the number of testcases.\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"\n%d %d\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } }", "label": 1, "id": 7818}
{"input": "void main ( ) { int T , N , i , j , maxSum ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; int Triangle [ N ] [ N ] , SumTri [ N ] [ N ] ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & Triangle [ i ] [ j ] ) ; SumTri [ i ] [ j ] = 0 ; } SumTri [ 0 ] [ 0 ] = Triangle [ 0 ] [ 0 ] ; if ( N > 1 ) { SumTri [ 1 ] [ 0 ] = SumTri [ 0 ] [ 0 ] + Triangle [ 1 ] [ 0 ] ; SumTri [ 1 ] [ 1 ] = SumTri [ 0 ] [ 0 ] + Triangle [ 1 ] [ 1 ] ; } for ( i = 1 ; i < N ; i ++ ) SumTri [ i ] [ 0 ] = SumTri [ i - 1 ] [ 0 ] + Triangle [ i ] [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { if ( Triangle [ i - 1 ] [ j ] > Triangle [ i - 1 ] [ j - 1 ] ) SumTri [ i ] [ j ] = SumTri [ i - 1 ] [ j ] + Triangle [ i ] ; else SumTri [ i ] [ j ] = SumTri [ i - 1 ] [ j - 1 ] + Triangle [ i ] [ j ] ; } maxSum = SumTri [ N - 1 ] [ 0 ] ; for ( i = 1 ; i <= N ; i ++ ) if ( SumTri [ N - 1 ] [ i ] > maxSum ) maxSum = SumTri [ N - 1 ] [ i ] ; printf ( \"%d\n\" , maxSum ) ; } }", "label": 1, "id": 16637}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { n -- ; int m ; scanf ( \"%d\" , & m ) ; int a [ m + 1 ] [ m + 1 ] ; int k = m ; int i = 1 , j = 1 ; while ( k > 0 ) { k -- ; while ( j <= i ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; j ++ ; } i ++ ; j = 1 ; } k = m - 1 ; i = m - 1 ; j = 1 ; while ( k > 0 ) { k -- ; while ( j <= i ) { a [ i ] [ j ] = a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i ] [ j ] + a [ i + 1 ] [ j ] : a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; j ++ ; } i -- ; j = 1 ; } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 14167}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i ++ ) { for ( j = 0 ; j <= ( n - 2 ) ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 15140}
{"input": "int main ( ) { int a , b , c , x , y , e , f , t ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d%d\" , & b , & c ) ; x = b ; y = c ; while ( y != 0 ) { t = y ; y = x % y ; x = t ; } e = x ; f = ( b * c ) / e ; printf ( \"%d %d\n\" , e , f ) ; } return 0 ; }", "label": 1, "id": 3742}
{"input": "int main ( ) { int add [ 100 ] , i , j , lines , k , test , sum = 0 , n , large = 0 , cout = 0 , p [ 100 ] ; scanf ( \"%d\" , & test ) ; add [ 0 ] = 0 ; for ( i = 0 ; i < test ; i ++ ) { scanf ( \"%d\" , & lines ) ; for ( j = 0 ; j < lines ; j ++ ) { cout ++ ; for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & n ) ; sum = sum + n ; if ( sum > large ) { large = sum ; p [ i ] = cout ; } else if ( sum == large ) { large = sum ; p [ i ] = cout - 1 ; } } sum = 0 ; } } for ( i = 0 ; i < test ; i ++ ) { printf ( \"\n%d \" , p [ i ] + test + i ) ; } return 0 ; }", "label": 1, "id": 7953}
{"input": "int main ( ) { int t ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int j ; int minimum = 100000 ; for ( i = 0 ; i < n ; i ++ ) { if ( minimum > a [ i ] ) minimum = a [ i ] ; } printf ( \"%d\n\" , minimum * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 10108}
{"input": "int max ( int x , int y ) { return x > y ? x : y ; } long best ( int triangle [ ] [ MAXROWS ] , int i , int j , int rows ) { if ( i == rows - 1 ) return ( long ) triangle [ i ] [ j ] ; return ( long ) ( triangle [ i ] [ j ] + max ( best ( triangle , i + 1 , j , rows ) , best ( triangle , i + 1 , j + 1 , rows ) ) ) ; } int main ( ) { int t , n ; int triangle [ MAXROWS ] [ MAXROWS ] ; int i , j ; scanf ( \"%d \" , & t ) ; while ( t -- ) { scanf ( \"%d \" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d \" , & triangle [ i ] [ j ] ) ; } } printf ( \"%ld\n\" , best ( triangle , 0 , 0 , n ) ) ; } return 0 ; }", "label": 2, "id": 20409}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long a [ 60000 ] , z , i ; int count = 0 ; scanf ( \"%lld\" , & z ) ; for ( i = 0 ; i < z ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } long long min , ans ; for ( i = 0 ; i < z - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { min = a [ i ] ; a [ i + 1 ] = a [ i ] ; } else if ( a [ i ] > a [ i + 1 ] ) { min = a [ i + 1 ] ; } } ans = min * ( z - 1 ) ; printf ( \"%lld\" , ans ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 0, "id": 7404}
{"input": "int max , arr [ 100 ] [ 100 ] , arr2 [ 100 ] [ 100 ] , N , sum = 0 , ctr = 0 ; int main ( ) { int i , j , k , T , sumd , suma ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { max = 0 ; scanf ( \"%d\" , & N ) ; for ( j = 0 ; j < N ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } for ( j = 0 ; j < N ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { arr2 [ j ] [ k ] = 0 ; } } arr2 [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; for ( j = 0 ; j < N - 1 ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { sumd = arr2 [ j ] [ k ] + arr [ j + 1 ] [ k ] ; suma = arr2 [ j ] [ k ] + arr [ j + 1 ] [ k + 1 ] ; if ( sumd >= arr2 [ j + 1 ] [ k ] ) { arr2 [ j + 1 ] [ k ] = sumd ; } if ( suma >= arr2 [ j + 1 ] [ k + 1 ] ) { arr2 [ j + 1 ] [ k + 1 ] = suma ; } } } j = N - 1 ; for ( k = 0 ; k <= j ; k ++ ) { if ( max < arr2 [ j ] [ k ] ) { max = arr2 [ j ] [ k ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 4793}
{"input": "void gcdlcm ( int n1 , int n2 ) ; void gcdlcm ( n1 , n2 ) { int prod , lcm , gcd ; prod = n1 * n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) { n1 = n1 - n2 ; } if ( n2 > n1 ) { n2 = n2 - n1 ; } } gcd = n1 ; lcm = prod / gcd ; printf ( \"%d\" , lcm ) ; printf ( \"%d\" , gcd ) ; } int main ( ) { int n1 , n2 , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; gcdlcm ( n1 , n2 ) ; } return 0 ; }", "label": 1, "id": 21760}
{"input": "int l = 0 ; void rec ( int a [ ] [ 1001 ] , int sum [ ] , int n ) { if ( n == 1 ) { sum [ 1 ] = a [ 1 ] [ 1 ] ; return ; } int i ; for ( i = n ; i >= 1 ; i -- ) { sum [ i ] = ( sum [ i - 1 ] + a [ n ] [ i ] ) > ( sum [ i ] + a [ n ] [ i ] ) ? ( sum [ i - 1 ] + a [ n ] [ i ] ) : ( sum [ i ] + a [ n ] [ i ] ) ; if ( sum [ i ] > l ) l = sum [ i ] ; } } int main ( ) { int n , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { int a [ 1001 ] [ 1001 ] = { 0 } , sum [ 1001 ] = { 0 } , temp [ 1001 ] = { 0 } ; scanf ( \"%d\" , & n ) ; l = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; rec ( a , sum , i ) ; } printf ( \"%d\n\" , l ) ; } return 0 ; }", "label": 0, "id": 3853}
{"input": "int main ( ) { int t , n , s , p , i , j , a [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } p = 0 ; s = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = p ; j <= i ; j ++ ) { if ( j > 0 && ( j + 1 ) < n ) s += a [ i + 1 ] [ j - 1 ] > a [ i + 1 ] [ j ] ? ( a [ i + 1 ] [ j - 1 ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j - 1 ] : a [ i + 1 ] [ j + 1 ] ) : ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; else if ( j == 0 ) s += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; else if ( j > 0 && ( j + 1 ) > n ) s += a [ i + 1 ] [ j - 1 ] > a [ i + 1 ] [ j ] ? a [ i + 1 ] [ j - 1 ] : a [ i + 1 ] [ j ] ; } p = j ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 20720}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long int n1 , n2 , gcd , lcm , r , n , d ; scanf ( \"%ld %ld\" , & n1 , & n2 ) ; if ( n1 > n2 ) { n = n1 ; d = n2 ; } else { n = n2 ; d = n1 ; } r = n % d ; while ( r != 0 ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = n1 * n2 / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 17318}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int k , num1 , num2 , lcm ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; k = gcd ( num1 , num2 ) ; lcm = ( num1 * num2 ) / k ; printf ( \"%d %d\n\" , k , lcm ) ; } return 0 ; } int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; }", "label": 1, "id": 13191}
{"input": "int main ( ) { int test , i , a [ 100 ] [ 100 ] , j , k , n ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; for ( k = n - 1 ; k > 0 ; k -- ) for ( j = 0 ; j < k ; j ++ ) a [ k - 1 ] [ j ] += max ( a [ k ] [ j ] , a [ k ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 3805}
{"input": "int maxCal ( int * , int , int , int ) ; int sum_M [ 6000 ] = { 0 } ; int main ( ) { int a [ 6000 ] ; int n , i = 0 , row , j = 0 , tot = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & row ) ; tot = row * ( row + 1 ) / 2 ; for ( j = 0 ; j < tot ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } printf ( \"%d\n\" , maxCal ( a , row , 0 , 1 ) ) ; } return 0 ; } int maxCal ( int * a , int n , int in , int nl ) { int sum = 0 , sum1 = 0 , temp = 0 ; if ( nl == n ) return a [ in ] ; temp = in + nl ; nl = nl + 1 ; if ( sum_M [ in ] == 0 ) { sum1 = a [ in ] + maxCal ( a , n , temp , nl ) ; sum = a [ in ] + maxCal ( a , n , temp + 1 , nl ) ; if ( sum > sum1 ) { sum_M [ in ] = sum ; return sum ; } sum_M [ in ] = sum1 ; return sum1 ; } else { return sum_M [ in ] ; } }", "label": 1, "id": 1934}
{"input": "int a [ 1000 ] [ 2 ] ; int main ( ) { int t , j , x , y , lcm , i , temp ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) for ( j = 0 ; j < 2 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < t ; i ++ ) { x = a [ i ] [ 0 ] ; y = a [ i ] [ 1 ] ; while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } lcm = ( a [ i ] [ 0 ] / x ) * a [ i ] [ 1 ] ; printf ( \"%d %d\n\" , x , lcm ) ; } }", "label": 1, "id": 25868}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; int r [ t ] ; for ( i = 0 ; i < t ; i ++ ) { int a , n , j , k , sum = 0 , max ; scanf ( \"%d\" , & n ) ; for ( j = 1 ; j <= n ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a ) ; sum = sum + a ; } if ( sum > max ) max = sum ; sum = 0 ; } r [ i ] = max ; } int m ; for ( m = 0 ; m < t ; m ++ ) printf ( \"%d\n\" , r [ m ] ) ; return 0 ; }", "label": 1, "id": 4013}
{"input": "int main ( ) { int i , j , max , val , idx , N , NN , first , sum , tempidx ; scanf ( \"%d\" , & N ) ; while ( N -- ) { scanf ( \"%d\" , & NN ) ; sum = 0 ; scanf ( \"%d\" , & first ) ; sum += first ; idx = 0 ; for ( i = 1 ; i < NN ; i ++ ) { max = 0 ; for ( j = 0 ; j <= ( idx + 1 ) ; j ++ ) { scanf ( \"%d\" , & val ) ; if ( val > max && ( ( j == idx ) || ( j == idx + 1 ) ) ) { max = val ; tempidx = j ; } } idx = tempidx ; sum += max ; } printf ( \"\n%d\" , sum ) ; } return 0 ; }", "label": 1, "id": 25911}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; if ( b != 0 ) return gcd ( b , a % b ) ; } int main ( void ) { long int i , a , b , j , k ; int n ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; j = gcd ( a , b ) ; k = a * b / j ; printf ( \"%ld %ld\n\" , j , k ) ; } return 0 ; }", "label": 0, "id": 24888}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int a [ 100 ] [ 100 ] , t , n , i , j , ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; a [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] [ 0 ] ) ; a [ i ] [ 0 ] += a [ i - 1 ] [ 0 ] ; for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j ] += max ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) ; } a [ i ] [ i + 1 ] = 0 ; } ans = 0 ; for ( i = 0 ; i < n ; i ++ ) ans = max ( ans , a [ n - 1 ] [ i ] ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 26633}
{"input": "int arr [ 99 ] [ 99 ] , max ; void tri ( int , int , int , int ) ; int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; if ( 0 < t <= 1000 ) { while ( t -- ) { scanf ( \"%d\" , & n ) ; if ( 0 < n < 100 ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) do { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } while ( arr [ i ] [ j ] <= 0 && arr [ i ] [ j ] >= 99 ) ; } max = 0 ; tri ( n , 0 , 0 , 0 ) ; } } } return 0 ; } void tri ( int size , int row , int col , int sum ) { if ( row == size ) { if ( sum > max ) max = sum ; } else { sum += arr [ row ] [ col ] ; tri ( size , row + 1 , col , sum ) ; tri ( size , row + 1 , col + 1 , sum ) ; } if ( col == size ) printf ( \"\n%d\" , max ) ; }", "label": 2, "id": 20648}
{"input": "int main ( ) { int t , x , y , pr , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & x , & y ) ; pr = x * y ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } lcm = pr / x ; printf ( \"%d\\t%d\" , x , lcm ) ; } return 0 ; }", "label": 1, "id": 8930}
{"input": "int main ( ) { int c , a , b ; scanf ( \"%d\" , & c ) ; while ( c -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a > b ) return ( gcd ( a % b , b ) ) ; else return ( gcd ( a , b % a ) ) ; if ( a == b ) return ( b ) ; if ( a % b == 0 ) return b ; if ( b % a == 0 ) return a ; } int lcm ( int a , int b ) { return ( ( a * b ) / gcd ( a , b ) ) ; }", "label": 3, "id": 6589}
{"input": "int main ( ) { int n , a , i , t , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( i == 0 ) temp = a ; else { if ( a < temp ) temp = a ; } } printf ( \"%lld\n\" , temp * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 25604}
{"input": "int findgcd ( unsigned long long int , unsigned long long int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned long long int a , b , i , k ; scanf ( \"%llu %llu\" , & a , & b ) ; k = findgcd ( a , b ) ; i = ( a * b ) / k ; printf ( \"%llu %llu\" , k , i ) ; } } int findgcd ( unsigned long long int a , unsigned long long int b ) { if ( a > b ) { if ( a % b == 0 ) return b ; else return findgcd ( b , a % b ) ; } else { if ( b % a == 0 ) return a ; else return findgcd ( b % a , a ) ; } }", "label": 1, "id": 17084}
{"input": "int main ( ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] , ind = - 1 ; long long min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] <= min ) { min = arr [ i ] ; ind = i ; } } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 2705}
{"input": "int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%lld%lld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 12839}
{"input": "void main ( ) { int a [ 10 ] , i , j , num , size ; printf ( \"\n enter the size of an array\" ) ; scanf ( \"%d\" , & size ) ; printf ( \"\n enter the elements of the array\" ) ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } printf ( \"\n enter the element to be remove\" ) ; scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < size ; i ++ ) { if ( a [ i ] == num ) { size = size - 1 ; for ( j = i ; j < size ; j ++ ) { a [ j ] = a [ j + 1 ] ; } a [ j ] = '\\0' ; } } printf ( \"\n new array is\" ) ; for ( i = 0 ; i < size ; i ++ ) { printf ( \"%d\" , a [ i ] ) ; } }", "label": 1, "id": 10762}
{"input": "int path [ 100 ] [ 100 ] ; void calculate ( int n ) { int i , j ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( path [ i + 1 ] [ j ] > path [ i + 1 ] [ j + 1 ] ) path [ i ] [ j ] = path [ i ] [ j ] + path [ i + 1 ] [ j ] ; else path [ i ] [ j ] = path [ i ] [ j ] + path [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , path [ 0 ] [ 0 ] ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , j , k ; for ( i = 0 ; i < t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & ( path [ j ] [ k ] ) ) ; calculate ( n ) ; } return 0 ; }", "label": 0, "id": 26942}
{"input": "int main ( void ) { int t , n , a ; int i ; int f , s ; int ret ; int j ; scanf ( \" %d\" , & t ) ; while ( t -- ) { scanf ( \" %d\" , & n ) ; scanf ( \" %d\" , & f ) ; s = f ; ret = 1 ; j = 1 ; for ( i = 1 ; i < n ; i ++ ) { s = f ; scanf ( \" %d\" , & f ) ; if ( s <= f ) ++ j ; else j = 1 ; ret += j ; } printf ( \"%d\n\" , ret ) ; } return 0 ; }", "label": 0, "id": 8879}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , min ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } min = arr [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= min ) { min = arr [ i ] ; } } long long int ans = min * ( n - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 3611}
{"input": "int a [ 100 ] ; int b [ 100 ] ; int i ; int rec ( int , int , int , int ) ; int main ( ) { int t , j , k , max , elements , n ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d\" , & n ) ; a [ 0 ] = 0 ; elements = ( n * ( n + 1 ) ) / 2 ; for ( k = 1 ; k <= elements ; k ++ ) { scanf ( \"%d\" , & a [ k ] ) ; } rec ( 1 , 1 , a [ 1 ] , n - 1 ) ; max = a [ 1 ] ; for ( i = 2 ; i <= elements ; i ++ ) { if ( b [ i ] > max ) { max = b [ i ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; } int rec ( int no , int add , int value , int n ) { if ( add <= n ) { rec ( ( no + add ) , ( add + 1 ) , ( value + a [ no + add ] ) , n ) ; rec ( ( no + add + 1 ) , ( add + 1 ) , ( value + a [ no + add + 1 ] ) , n ) ; } else { b [ i ] = value ; i ++ ; } return 0 ; }", "label": 3, "id": 3040}
{"input": "int mat [ 100 ] [ 100 ] ; int main ( ) { int i , j , k , n , l ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & l ) ; for ( j = 0 ; j < l ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & mat [ j ] [ k ] ) ; } } for ( j = l - 1 ; j > 0 ; j -- ) { for ( k = 0 ; k < j ; k ++ ) { if ( mat [ j ] [ k ] < mat [ j ] [ k + 1 ] ) mat [ j - 1 ] [ k ] = mat [ j - 1 ] [ k ] + mat [ j ] [ k + 1 ] ; else mat [ j - 1 ] [ k ] = mat [ j - 1 ] [ k ] + mat [ j ] [ k ] ; } } printf ( \"%d\n\" , mat [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8396}
{"input": "int main ( ) { int T , i ; long long int min , N , A [ 50000 ] , n ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld\" , & N ) ; n = N ; min = 100001 ; while ( n -- ) { scanf ( \"%lld\" , & A [ i ] ) ; if ( A [ i ] < min ) min = A [ i ] ; i ++ ; } printf ( \"%lld\n\" , min * ( N - 1 ) ) ; } return 0 ; }", "label": 3, "id": 13874}
{"input": "int main ( ) { int arr [ 100 ] [ 100 ] , i , j , k , ii , kk , jj ; scanf ( \"%d\" , & ii ) ; for ( ; ii >= 1 ; ii -- ) { scanf ( \"%d\" , & jj ) ; for ( i = 0 ; i < jj ; i ++ ) { for ( kk = 0 ; kk <= i ; kk ++ ) scanf ( \"%d\" , & arr [ i ] [ kk ] ) ; } printf ( \"\n\" ) ; for ( i = kk ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + 1 ] ) k = arr [ i ] [ j + 1 ] ; else k = arr [ i ] [ j ] ; arr [ i - 1 ] [ j ] = arr [ i - 1 ] [ j ] + k ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } printf ( \"\n\" ) ; return 0 ; }", "label": 1, "id": 21932}
{"input": "int main ( ) { int t ; int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; long long int a [ n ] ; long long int min ; scanf ( \"%lli\" , & min ) ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"lli\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 1, "id": 3579}
{"input": "long long int input ( ) { char c = get ( ) ; long long int n = 0 ; while ( c < '0' || c > '9' ) c = get ( ) ; while ( c >= '0' && c <= '9' ) { n = ( n << 1 ) + ( n << 3 ) + ( c & 15 ) ; c = get ( ) ; } return n ; } int main ( void ) { long long int t , n , a , b , c , d ; t = input ( ) ; while ( t -- ) { d = 0 ; n = input ( ) ; c = n ; if ( n == 1 ) { a = input ( ) ; printf ( \"1\n\" ) ; } else { n -- ; a = input ( ) ; b = a ; while ( n -- ) { a = input ( ) ; if ( d ) { if ( b > a ) d = 0 ; } else { if ( b < a ) { d = 1 ; c ++ ; } } b = a ; } printf ( \"%lld\n\" , c ) ; } } return 0 ; }", "label": 1, "id": 23703}
{"input": "int gcd ( int a , int b ) { int x ; if ( a >= b ) x = b ; else x = a ; int i , g = 1 ; for ( i = 1 ; i <= x ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) g = i ; } return g ; } int lcm ( int a , int b ) { int x , y , z ; if ( a >= b ) x = b ; else x = a ; int i , g = 1 ; for ( i = 1 ; i <= x ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) g = g * i ; } return ( g * ( a / g ) * ( b / g ) ) ; } int main ( ) { int n , x , y ; scanf ( \"%d \" , & n ) ; int i , a , b ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 2, "id": 15912}
{"input": "int main ( ) { int a , b , c , d , f , g = 0 , h ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d\" , & b ) ; int e [ b ] ; for ( c = 0 ; c < b ; c ++ ) scanf ( \"%d\" , & e [ c ] ) ; for ( c = 0 ; c < b - 1 ; c ++ ) { d = 100000 ; for ( h = 0 ; h < b - c - 1 ; h ++ ) { if ( e [ c ] < d ) { d = e [ c ] ; f = c ; } } g = d * ( b - 1 ) ; } printf ( \"%d\n\" , g ) ; } return 0 ; }", "label": 2, "id": 24842}
{"input": "int main ( ) { int a , b , l , n , h ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( l = a > b ? a : b ; l <= a * b ; l = l + ( a > b ? a : b ) ) { if ( l % a == 0 && l % b == 0 ) break ; } for ( h = a < b ? a : b ; h >= 1 ; h -- ) { if ( a % h == 0 && b % h == 0 ) break ; } printf ( \"%d %d\n\" , h , l ) ; } return 0 ; }", "label": 2, "id": 4817}
{"input": "main ( ) { int t , a , b , prod , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"enter the 2 numbers :\n\" ) ; scanf ( \"%d%d\" , & a , & b ) ; prod = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } gcd = a ; lcm = prod / gcd ; printf ( \"\n gcd is:%d\" , gcd ) ; printf ( \"\n lcm is:%d\n\" , lcm ) ; } }", "label": 1, "id": 1708}
{"input": "int main ( ) { int i , j , maxPath , n , t ; int arr [ 100 ] [ 100 ] , path [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { maxPath = - 1 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; if ( i > 0 ) { if ( j == 0 ) path [ i ] [ j ] = path [ i - 1 ] [ j ] + arr [ i ] [ j ] ; else if ( j == i ) path [ i ] [ j ] = path [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; else { path [ i ] [ j ] = ( max ( path [ i - 1 ] [ j ] , path [ i - 1 ] [ j - 1 ] ) ) + arr [ i ] [ j ] ; } if ( maxPath < path [ i ] [ j ] ) maxPath = path [ i ] [ j ] ; } else { path [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; maxPath = path [ 0 ] [ 0 ] ; } } } printf ( \"%d\n\" , maxPath ) ; } return 0 ; }", "label": 0, "id": 23070}
{"input": "int GCD ( long int x , long int y ) { int temp ; if ( x < y ) { temp = x ; x = y ; y = temp ; } while ( x % y != 0 ) { temp = x % y ; x = y ; y = temp ; } return y ; } int main ( ) { long int t , x , y , a , b ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & x , & y ) ; a = GCD ( x , y ) ; b = x * y / a ; printf ( \"%ld %ld\n\" , a , b ) ; } }", "label": 0, "id": 16849}
{"input": "void main ( ) { int t , a , b , gcd , lcm , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%d %d\" , & a , & b ) ; if ( b % a == 0 ) gcd = a ; else if ( a % b == 0 ) gcd == b ; else { if ( a < b ) n = a ; else n = b ; for ( i = 1 ; i < n ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } }", "label": 1, "id": 4017}
{"input": "int main ( ) { int T , size , i , j , k , temp = 0 ; int arr [ ROW ] [ COL ] ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d\" , & size ) ; for ( j = 0 ; j < size ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } for ( j = 0 ; j < size ; j ++ ) { int sum = 0 ; for ( k = j ; k < size ; k ++ ) { sum = sum + arr [ k ] [ j ] ; } if ( temp < sum ) { temp = sum ; } } printf ( \"%d\n\" , temp + 1 ) ; temp = 0 ; } return 0 ; }", "label": 1, "id": 16605}
{"input": "int main ( ) { int t ; unsigned long int a , b , temp , lcm ; int r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; lcm = a * b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } r = a % b ; while ( r != 0 ) { a = b ; b = r ; r = a % b ; } printf ( \"%ld \" , b ) ; printf ( \"%ld\n\" , lcm / b ) ; } return 0 ; }", "label": 0, "id": 25404}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , num1 , hcf , lcm , i ; scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) num1 = b ; else num1 = a ; for ( i = 1 ; i < num1 ; i ++ ) { if ( a % i == 0 && b % i == 0 ) hcf = i ; } lcm = ( ( a * b ) / hcf ) ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 18084}
{"input": "int main ( ) { unsigned long long t , a , b , c , d , e , lcm , hcf ; scanf ( \"%llu\" , & t ) ; while ( t -- ) { scanf ( \"%llu %llu\" , & a , & b ) ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } c = a ; d = b ; e = 1 ; while ( e ) { e = a % b ; a = b ; b = e ; } hcf = a ; lcm = c / hcf * d ; printf ( \"%llu %llu\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 19451}
{"input": "int main ( ) { int test = 0 , i , j , t , array [ 101 ] [ 101 ] , R = 0 ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & R ) ; for ( i = 0 ; i < R ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & array [ i ] [ j ] ) ; for ( i = R - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { t = array [ i ] [ j ] < array [ i ] [ j + 1 ] ; array [ i - 1 ] [ j ] += array [ i ] [ j + t ] ; } printf ( \"%d\n\" , array [ 0 ] [ 0 ] ) ; } return ( 0 ) ; }", "label": 0, "id": 8960}
{"input": "main ( ) { int i , j , k , t , n , l , a [ 100 ] [ 100 ] ; int sum = 0 , gra , index ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & l ) ; for ( j = 0 ; j < l ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } k = 0 ; sum = a [ 0 ] [ 0 ] ; for ( j = 1 ; j < l ; j ++ ) { if ( k != 0 ) { gra = a [ j ] [ k - 1 ] ; for ( n = k ; n <= k + 1 ; n ++ ) { if ( a [ j ] [ n ] > gra ) { gra = a [ j ] [ n ] ; index = n ; } } if ( gra == a [ j ] [ k - 1 ] ) index = k - 1 ; sum = sum + gra ; k = index ; } else { if ( a [ j ] [ k ] > a [ j ] [ k + 1 ] ) gra = a [ j ] [ k ] ; else { gra = a [ j ] [ k + 1 ] ; index = k + 1 ; } sum = sum + gra ; k = index ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 22185}
{"input": "int main ( void ) { int t , i , a , b , p , q ; scanf ( \"%d\" , t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; p = ( a > b ) ? a : b ; while ( 1 ) { if ( p % a == 0 && p % b == 0 ) { break ; } ++ p ; } for ( i = 1 ; i <= a || i <= b ; ++ i ) { if ( a % i == 0 && b % i == 0 ) q = i ; } printf ( \"%d %d\" , q , p ) ; } return 0 ; }", "label": 3, "id": 11932}
{"input": "int gcd ( int a , int b ) ; void main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y , a , b ; scanf ( \"%d %d\" , & x , & y ) ; if ( x > y ) { a = x ; y = b ; } else { a = y ; b = x ; } long long lcm ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( \"\n %d %lld\" , gcd ( a , b ) , lcm ) ; } } int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 12807}
{"input": "int nums [ 105 ] [ 105 ] ; int dp [ 105 ] [ 105 ] ; int main ( ) { int n , t , i , j , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & nums [ i ] [ j ] ) ; dp [ 1 ] [ 1 ] = nums [ 1 ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { if ( j == 1 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + nums [ i ] [ j ] ; else if ( j == i ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + nums [ i ] [ j ] ; else dp [ i ] [ j ] = min ( ( dp [ i - 1 ] [ j ] + nums [ i ] [ j ] ) , ( dp [ i - 1 ] [ j - 1 ] + nums [ i ] [ j ] ) ) ; } int mini = dp [ n ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) mini = min ( mini , dp [ n ] [ i ] ) ; printf ( \"%d\n\" , mini ) ; } return 0 ; }", "label": 0, "id": 5986}
{"input": "int n , m ; int max [ 100 ] [ 100 ] = { 0 } ; int main ( ) { int test_cases ; int a [ 100 ] [ 100 ] ; int i , j , k ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\" , findmax ( a , 0 , 0 ) ) ; } return 0 ; } int findmax ( int ( * a ) [ 100 ] , int x , int y ) { int left , right ; int i = x , j = y ; if ( i == n - 1 ) return a [ i ] [ j ] ; else { if ( max [ i + 1 ] [ j ] == 0 ) { max [ i + 1 ] [ j ] = findmax ( a , i + 1 , j ) ; } if ( max [ i + 1 ] [ j + 1 ] == 0 ) { max [ i + 1 ] [ j + 1 ] = findmax ( a , i + 1 , j + 1 ) ; } left = a [ i ] [ j ] + max [ i + 1 ] [ j ] ; right = a [ i ] [ j ] + max [ i + 1 ] [ j + 1 ] ; if ( left > right ) return left ; else return right ; } }", "label": 1, "id": 18080}
{"input": "int arr [ 100 ] [ 100 ] ; int cache [ 100 ] [ 100 ] ; int solve ( int i , int j , int n ) { int t1 , t2 , t ; if ( i > n ) return 0 ; if ( cache [ i ] [ j ] != - 1 ) return cache [ i ] [ j ] ; t1 = solve ( i + 1 , j , n ) ; t2 = solve ( i + 1 , j + 1 , n ) ; t = ( t1 > t2 ? t1 : t2 ) + arr [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { cache [ i ] [ j ] = - 1 ; } } printf ( \"%d\n\" , solve ( 0 , 0 , t ) ) ; } return 0 ; }", "label": 0, "id": 21434}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned int a [ 100 ] , i , n , min = 10001 ; scanf ( \"%u\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%u\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%u\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 15350}
{"input": "int max ( int a , int b ) ; int main ( ) { int n , r ; int i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; int d [ r ] [ r ] ; for ( i = 0 ; i < r ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) scanf ( \"%d\" , & d [ i ] [ j ] ) ; for ( i = r - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; ++ j ) d [ i ] [ j ] += max ( d [ i + 1 ] [ j ] , d [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , d [ 0 ] [ 0 ] ) ; } return 0 ; } int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; }", "label": 0, "id": 22939}
{"input": "int findMax ( int arr [ ] , int n ) { int i , max , in ; max = arr [ 0 ] ; in = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; in = i ; } } return in ; } int main ( ) { int t , N , i , j , result , max , temp , m1 , m2 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & N ) ; result = 0 ; int arr [ N ] ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; } for ( j = 0 ; j < N - 1 ; j ++ ) { max = findMax ( arr , N ) ; if ( max == N - 1 ) { temp = max - 1 ; while ( temp >= 0 && arr [ temp ] == - 1 ) { temp -- ; } if ( temp >= 0 ) result += arr [ temp ] ; arr [ max ] = - 1 ; } else if ( max == 0 ) { temp = max + 1 ; while ( temp >= 0 && arr [ temp ] == - 1 ) { temp ++ ; } if ( temp < N ) result += arr [ temp ] ; arr [ max ] = - 1 ; } else { m1 = - 1 ; m2 = - 1 ; temp = max - 1 ; while ( temp >= 0 && arr [ temp ] == - 1 ) { temp -- ; } if ( temp >= 0 ) m1 = arr [ temp ] ; temp = max + 1 ; while ( temp < N && arr [ temp ] == - 1 ) { temp ++ ; } if ( temp < N ) m2 = arr [ temp ] ; if ( m1 != - 1 && m2 != - 1 ) { if ( m1 < m2 ) { result += m1 ; } else result += m2 ; } else if ( m1 == - 1 ) { result += m2 ; } else if ( m2 == - 1 ) { result += m1 ; } arr [ max ] = - 1 ; } } printf ( \"%d\n\" , result ) ; } return 0 ; }", "label": 2, "id": 13140}
{"input": "void main ( ) { int t , n , a , z [ 15 ] , s [ 15 ] , i = 0 , c = 0 , p , b ; scanf ( \"%d\" , & t ) ; for ( b = 1 ; b <= t ; b ++ ) { scanf ( \"%d\" , & n ) ; i = 0 ; c = 0 ; for ( a = 0 ; a < n ; a ++ ) { scanf ( \"%d\" , & z [ a ] ) ; s [ a ] = z [ a ] ; } for ( p = 0 ; p < n - i ; p ++ ) { if ( z [ p ] > z [ p + 1 ] ) { c = z [ p + 1 ] + c ; i = i + 1 ; for ( a = 0 ; a < p ; a ++ ) { s [ a ] = z [ a ] ; } for ( a = p + 1 ; a < n - i ; a ++ ) { s [ a ] = z [ a ] ; } } else { c = z [ p ] + c ; i = i + 1 ; for ( a = 0 ; a < p + 1 ; a ++ ) { s [ a ] = z [ a ] ; } for ( a = p + 2 ; a < n - i ; a ++ ) { s [ a ] = z [ a ] ; } } } printf ( \"%d\" , c ) ; } }", "label": 2, "id": 9143}
{"input": "int main ( ) { long long sum ; int t ; long n , a , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a ) ; min = a ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( a < min ) min = a ; } sum = min * ( n - 1 ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 13866}
{"input": "int gcd ( int a , int b , int x ) { int i , g = 1 ; for ( i = 1 ; i <= x ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) g = i ; } return g ; } int lcm ( int a , int b , int x ) { int y , z ; int i , g = 1 ; for ( i = 1 ; i <= x ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) g = g * i ; } return ( g * ( a / g ) * ( b / g ) ) ; } int main ( ) { int n , x ; scanf ( \"%d \" , & n ) ; int i , a , b ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a >= b ) x = b ; else x = a ; printf ( \"%d %d\n\" , gcd ( a , b , x ) , lcm ( a , b , x ) ) ; } return 0 ; }", "label": 2, "id": 9448}
{"input": "int main ( ) { int gcd , lcm , i , test_case , a , b ; scanf ( \"%d\" , & test_case ) ; while ( test_case -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; lcm = ( a * b ) / gcd ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 11080}
{"input": "int main ( void ) { int t , gcd , lcm ; scanf ( \"%i\" , & t ) ; for ( int z = 0 ; z < t ; z ++ ) { int a , b ; scanf ( \"%i%i\" , & a , & b ) ; if ( a > b ) { for ( int i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } } else { for ( int i = 1 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } } for ( int j = a ; j <= ( a * b ) ; j ++ ) { if ( j % a == 0 && j % b == 0 ) { lcm = j ; break ; } } printf ( \"%i %i\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 4829}
{"input": "int read ( ) { int _n = 0 ; char p = getchar_unlocked ( ) ; for ( ; p < 33 ; ) { p = getchar_unlocked ( ) ; } while ( p > 32 ) { _n = ( _n << 3 ) + ( _n << 1 ) + ( p - '0' ) ; p = getchar_unlocked ( ) ; } return _n ; } int main ( ) { int t , n ; int a [ 100 ] [ 100 ] ; t = read ( ) ; for ( ; t ; -- t ) { n = read ( ) ; int j , i , t1 , t2 ; for ( j = 0 ; j < n ; ++ j ) for ( i = 0 ; i <= j ; ++ i ) a [ j ] [ i ] = read ( ) ; for ( i = n - 1 ; i > 0 ; -- i ) for ( j = 0 ; j < i ; ++ j ) { t1 = a [ i ] [ j ] ; t2 = a [ i ] [ j + 1 ] ; if ( t1 < t2 ) a [ i - 1 ] [ j ] += t2 ; else a [ i - 1 ] [ j ] += t1 ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 10197}
{"input": "int main ( ) { int t , i , j ; long int a ; long int n , min = 100000 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a ) ; if ( a < min ) min = a ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; min = 100000 ; } return 0 ; }", "label": 0, "id": 14622}
{"input": "int A [ 100 ] [ 100 ] ; int solve ( int i , int j , int n ) { int t ; if ( i > n ) return 0 ; else { if ( solve ( i + 1 , j , n ) > solve ( i + 1 , j + 1 , n ) ) t = solve ( i + 1 , j , n ) + A [ i ] [ j ] ; else t = solve ( i + 1 , j + 1 , n ) + A [ i ] [ j ] ; return t ; } } int main ( ) { int l ; scanf ( \"%d\" , & l ) ; while ( l > 0 ) { int i , j , k , n , t ; scanf ( \"%d\" , & n ) ; k = 1 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; } k ++ ; } t = solve ( 0 , 0 , n ) ; printf ( \"%d\n\" , t ) ; l -- ; } }", "label": 2, "id": 15439}
{"input": "void main ( ) { int a , b , n , i , t = 0 , gcd , lcm ; scanf ( \"%d\" , & n ) ; while ( t < n ) { scanf ( \"%d%d\" , & a , & b ) ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } gcd = a ; lcm = ( a * b ) / gcd ; printf ( \"%d/t%d\" , gcd , lcm ) ; t ++ ; } }", "label": 1, "id": 9628}
{"input": "int main ( ) { int current [ 100 ] , prev [ 100 ] ; int i , j , k , count , line , max ; scanf ( \"%d\" , & count ) ; for ( i = 0 ; i < count ; ++ i ) { scanf ( \"%d\" , & line ) ; memset ( current , 0 , sizeof ( current ) ) ; memset ( prev , 0 , sizeof ( prev ) ) ; for ( j = 0 ; j < line ; ++ j ) { for ( k = 0 ; k <= j ; ++ k ) { scanf ( \"%d\" , & current [ k ] ) ; if ( k == 0 ) current [ k ] += prev [ k ] ; else if ( k == j ) current [ k ] += prev [ k - 1 ] ; else current [ k ] += ( prev [ k ] >= prev [ k - 1 ] ) ? prev [ k ] : prev [ k - 1 ] ; } memcpy ( prev , current , sizeof ( current ) ) ; } max = 0 ; for ( j = 0 ; j < line ; ++ j ) { if ( current [ j ] > max ) max = current [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 14938}
{"input": "int main ( ) { int t , i , j , n ; int a [ 10000 ] ; long long int count = 0 , p = 1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; p = 1 ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] > a [ i - 1 ] || a [ i ] == a [ i - 1 ] ) p ++ ; else { count += ( p * ( p + 1 ) ) / 2 - p ; p = 1 ; } } if ( i == n ) count += ( p * ( p + 1 ) ) / 2 - p ; count += n ; printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 3, "id": 9026}
{"input": "int main ( ) { long long a , b , min , x , remain , gcd , lcm , t ; scanf ( \"%d\" , & t ) ; for ( ; t > 0 ; t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { min = b ; x = a ; } else { min = a ; x = b ; } remain = x % min ; while ( remain ) { x = min ; min = remain ; remain = x % min ; } gcd = min ; lcm = ( a * b ) / ( gcd ) ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } }", "label": 0, "id": 10540}
{"input": "long long int fact ( long long int num ) { return num == 0 ? 1 : num * fact ( num - 1 ) ; } int is_array_non_decreasing ( long long int * array , int lb , int ub ) { while ( ++ lb <= ub ) if ( array [ lb ] < array [ lb - 1 ] ) return 0 ; return 1 ; } int main ( void ) { int t , n , i , j ; long long int cnt , * a ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; cnt = n ; a = ( long long int * ) malloc ( n * sizeof ( long long int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( is_array_non_decreasing ( a , i , j ) ) { cnt += fact ( j - i ) ; } } } printf ( \"%lld\n\" , cnt ) ; free ( a ) ; } return 0 ; }", "label": 2, "id": 12779}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , a , min = 100000 ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( min >= a ) { min = a ; } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 23914}
{"input": "int main ( ) { unsigned char triangleArray [ 5050 ] ; int testCases ; testCases = 1 ; scanf ( \"%d\" , & testCases ) ; int i ; int j ; int k ; for ( i = 0 ; i < testCases ; ++ i ) { int idx = 0 ; int rowCount ; rowCount = 100 ; scanf ( \"%d\" , & rowCount ) ; for ( j = 0 ; j < rowCount ; ++ j ) { for ( k = 0 ; k <= j ; ++ k ) { triangleArray [ idx ++ ] = rand ( ) % 100 ; scanf ( \"%d\" , & triangleArray [ idx ++ ] ) ; } } int lastRowIndex = idx - 1 ; for ( j = rowCount - 2 ; j >= 0 ; -- j ) { int currRowLength = j + 1 ; lastRowIndex = lastRowIndex - currRowLength - 1 ; int firstRowIndex = lastRowIndex - currRowLength + 1 ; for ( k = firstRowIndex ; k <= lastRowIndex ; ++ k ) { int max = 0 ; if ( triangleArray [ k + currRowLength ] > triangleArray [ k + currRowLength + 1 ] ) { max = triangleArray [ k + currRowLength ] ; } else { max = triangleArray [ k + currRowLength + 1 ] ; } triangleArray [ j ] += max ; } } printf ( \"%d\n\" , triangleArray [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 20446}
{"input": "int main ( ) { int A , B , T , i , j , gcd , lcm ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; for ( j = 1 ; j < A && j < B ; j ++ ) { if ( A % j == 0 && B % j == 0 ) gcd = j ; } lcm = ( A * B ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } }", "label": 1, "id": 4351}
{"input": "int getMax ( int a , int b ) { return ( a > b ) ? a : b ; } int getRowMax ( int a [ ARRAY_SIZE ] [ ARRAY_SIZE ] , int n ) { int RowMax , i ; for ( i = 1 ; i <= n ; i ++ ) { if ( a [ n ] [ i ] > RowMax ) RowMax = a [ n ] [ i ] ; } return RowMax ; } int main ( ) { int t , a , b , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int arr [ ARRAY_SIZE ] [ ARRAY_SIZE ] = { 0 } , n ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( j == 1 ) arr [ i ] [ j ] += arr [ i - 1 ] [ j ] ; else if ( j == i ) arr [ i ] [ j ] += arr [ i - 1 ] [ j - 1 ] ; else arr [ i ] [ j ] += getMax ( arr [ i - 1 ] [ j - 1 ] , arr [ i - 1 ] [ j ] ) ; } } printf ( \"%d\n\" , getRowMax ( arr , n ) ) ; } return 0 ; }", "label": 0, "id": 17251}
{"input": "int scan ( ) { int n = 0 ; char c = getchar_unlocked ( ) ; while ( ! ( '0' <= c && c <= '9' ) ) { c = getchar_unlocked ( ) ; } while ( '0' <= c && c <= '9' ) { n = ( n << 3 ) + ( n << 1 ) + c - '0' ; c = getchar_unlocked ( ) ; } return n ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int b [ 102 ] [ 102 ] = { 0 } ; int main ( ) { int m , n , i , j ; int a [ 102 ] [ 102 ] , d [ 102 ] [ 102 ] ; int t ; t = scan ( ) ; for ( i = 0 ; i < n ; i ++ ) { d [ 0 ] [ i ] = INF ; d [ i ] [ 0 ] = INF ; } d [ 1 ] [ 0 ] = 0 ; while ( t -- ) { n = scan ( ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { if ( j <= i ) a [ i ] [ j ] = scan ( ) ; else a [ i ] [ j ] = 0 ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { d [ i ] [ j ] = a [ i ] [ j ] + max ( d [ i - 1 ] [ j - 1 ] , d [ i - 1 ] [ j ] ) ; } } int max = d [ n ] [ 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { if ( max < d [ n ] [ i ] ) max = d [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 12808}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , j , min ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 26821}
{"input": "typedef long long int ll ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ 100001 ] = { - 1 } ; int i , j ; ll ans = 0 , x = 0 ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) { int flag = 1 ; for ( j = i ; j <= n && flag ; j ++ ) { if ( arr [ j ] <= arr [ j + 1 ] ) x ++ ; else { ans += ( x * ( x + 1 ) ) / 2 ; i = j ; x = 0 ; flag = 0 ; } } } printf ( \"%lld\n\" , ans + n ) ; } }", "label": 0, "id": 23423}
{"input": "int main ( ) { int i , t , a , b , g ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; int j = 1 ; while ( j <= a ) { if ( a % j == 0 && b % j == 0 ) g = j ; j ++ ; } printf ( \"%d %llu\n\" , g , ( a * b / g ) ) ; } }", "label": 2, "id": 4969}
{"input": "int hcf ( long long int n1 , long long int n2 ) ; int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { long long int n1 , n2 , x , y , z ; long int l ; scanf ( \"%lld %lld\" , & n1 , & n2 ) ; x = n1 ; y = n2 ; z = x * y ; int g = hcf ( n1 , n2 ) ; l = z / g ; printf ( \"%d %ld\n\" , g , l ) ; } return 0 ; } int hcf ( long long int n1 , long long int n2 ) { if ( n2 != 0 ) return hcf ( n2 , n1 % n2 ) ; else { return n1 ; } }", "label": 0, "id": 23542}
{"input": "void minimum ( int n ) { int i , a , k = 100001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( a < k ) { k = a ; } } k = k * ( n - 1 ) ; printf ( \"%d\n\" , k ) ; } int main ( void ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; minimum ( n ) ; } return 0 ; }", "label": 0, "id": 22153}
{"input": "int main ( ) { long long int a , b , i , t , n , j , e ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; if ( b < a ) { t = b ; b = a ; a = t ; } for ( j = a ; j >= 0 ; j -- ) { if ( a % j == 0 && b % j == 0 ) { printf ( \"%lld %lld\n\" , j , a * b / j ) ; break ; } } } }", "label": 2, "id": 26183}
{"input": "int main ( void ) { int p ; scanf ( \"%d\" , & p ) ; while ( p -- ) { int t , a , l , h , x , y , b ; scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } h = a ; l = ( x * y ) / h ; printf ( \"%d %d\n\" , h , l ) ; } return 0 ; }", "label": 1, "id": 17166}
{"input": "long long int c [ 1000001 ] ; long long int maxsum ( int a [ ] , int n , int i , int j ) { long long int k1 , k2 ; if ( i > n ) return 0 ; else if ( c [ i * ( i - 1 ) / 2 + j ] != 0 ) return c [ i * ( i - 1 ) / 2 + j ] ; else { k1 = maxsum ( a , n , i + 1 , j ) ; k2 = maxsum ( a , n , i + 1 , j + 1 ) ; if ( k1 > k2 ) { c [ i * ( i - 1 ) / 2 + j ] = k1 + a [ i * ( i - 1 ) / 2 + j ] ; return k1 + a [ i * ( i - 1 ) / 2 + j ] ; } else { c [ i * ( i - 1 ) / 2 + j ] = k2 + a [ i * ( i - 1 ) / 2 + j ] ; return k2 + a [ i * ( i - 1 ) / 2 + j ] ; } } } int main ( ) { int t , n , i , j , a [ 1000001 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n * ( n + 1 ) / 2 ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } long long int l = maxsum ( a , n , 1 , 1 ) ; printf ( \"%lld\n\" , l ) ; for ( i = 0 ; i <= n * ( n + 1 ) / 2 ; i ++ ) c [ i ] = 0 ; } return 0 ; }", "label": 0, "id": 7975}
{"input": "int main ( ) { long int t , n , i , min , c ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { c = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } c = ( n - 1 ) * min ; printf ( \"%d\n\" , c ) ; t -- ; } return 0 ; }", "label": 0, "id": 20824}
{"input": "int main ( ) { int i , n , j , k , a , s , t , b ; scanf ( \"%d\" , & n ) ; for ( b = 0 ; b < n ; b ++ ) { s = 0 ; scanf ( \"%d \n\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & k ) ; s = s + k ; } } a = s / 2 ; printf ( \"%d \n\" , a ) ; } return 0 ; }", "label": 1, "id": 11181}
{"input": "int main ( ) { int number_of_trials , i , j , k , a [ 100 ] [ 100 ] , number_of_rows ; scanf ( \"%d\" , & number_of_trials ) ; for ( i = 0 ; i < number_of_trials ; i ++ ) { scanf ( \"%d\" , & number_of_rows ) ; for ( j = 0 ; j < number_of_rows ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } for ( j = ( number_of_rows - 2 ) ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { if ( a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k ] ; else a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; for ( j = 0 ; j < 100 ; j ++ ) { for ( k = 0 ; k < 100 ; k ++ ) a [ j ] [ k ] = 0 ; } } return 0 ; }", "label": 0, "id": 19707}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int t , n , arr [ 101 ] [ 101 ] , i , j , k , sum [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = 0 ; i < n ; i ++ ) sum [ i ] = arr [ n - 1 ] [ i ] ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( k = 0 ; k <= i ; k ++ ) arr [ i ] [ k ] += max ( arr [ i + 1 ] [ k ] , arr [ i + 1 ] [ k + 1 ] ) ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25402}
{"input": "int main ( ) { int T ; long long int k , N ; scanf ( \"%d\n\" , & T ) ; while ( T -- ) { scanf ( \"%lli\n\" , & N ) ; long long int a [ N ] , j , M ; for ( j = 0 ; j < N ; j ++ ) scanf ( \"%lli\" , & a [ j ] ) ; M = N ; while ( -- N ) { if ( a [ N - 1 ] < a [ N ] ) M = M + 1 ; } printf ( \"%lli\n\" , M ) ; } return 0 ; }", "label": 1, "id": 17094}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a % b == 0 ) return b ; else return ( gcd ( b , a % b ) ) ; } int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int a , b , hcf , lcm ; scanf ( \"%lld%lld\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 16171}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , temp ; scanf ( \"%lld\" , & n ) ; long long int a [ 50001 ] , j , s1 = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) if ( a [ i ] < a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } for ( i = 0 ; i < n - 1 ; i ++ ) { s1 = s1 + a [ 0 ] ; } printf ( \"%d\n\" , s1 ) ; s1 = 0 ; } }", "label": 2, "id": 20385}
{"input": "int main ( ) { int t , n , p , ar [ 100 ] [ 100 ] , i , j ; long int sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & p ) ; if ( i == 0 ) ar [ i ] [ j ] = p ; else if ( j == 0 ) ar [ i ] [ j ] = ar [ i - 1 ] [ j ] + p ; else if ( j == i ) ar [ i ] [ j ] = ar [ i - 1 ] [ j - 1 ] + p ; else { if ( ar [ i - 1 ] [ j ] > ar [ i - 1 ] [ j - 1 ] ) ar [ i ] [ j ] = ar [ i - 1 ] [ j ] + p ; else ar [ i ] [ j ] = ar [ i - 1 ] [ j - 1 ] + p ; } } int max ; for ( max = ar [ n - 1 ] [ 0 ] , i = 0 ; i < n ; i ++ ) if ( max < ar [ n - 1 ] [ i ] ) max = ar [ n - 1 ] [ i ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 24184}
{"input": "int main ( ) { int t ; long long int n , a , b , k , i , g , l , s , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; a = 0 ; k = 0 ; m = 0 ; l = 0 ; s = 0 ; g = 1 ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%lld\" , & b ) ; if ( b >= a ) { k = k + 1 + m ; m ++ ; g = 1 ; l = k ; } else if ( b < a ) { s = k ; k = 1 ; m = 0 ; l = 0 ; s = s + g ; g ++ ; } a = b ; } printf ( \"\n%lld\" , s + l ) ; } return 0 ; }", "label": 1, "id": 221}
{"input": "int gcm ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int nt , a , b ; scanf ( \"%d\" , & nt ) ; while ( nt -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcm ( a , b ) , lcm ( a , b ) ) ; } return 0 ; } int gcm ( int x , int y ) { int i , g = 0 ; for ( i = 1 ; i <= ( x <= y ? x : y ) ; i ++ ) { if ( x % i == 0 && y % i == 0 ) g = i ; } return g ; } int lcm ( int x , int y ) { int i ; for ( i = ( x >= y ? x : y ) ; i <= x * y ; i ++ ) { if ( i % x == 0 && i % y == 0 ) return i ; } return 0 ; }", "label": 2, "id": 11122}
{"input": "int main ( ) { int n , i , a , b , x , y , j , p ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { x = b ; y = a ; } else { x = a ; y = b ; } for ( j = 0 ; j >= 0 ; j ++ ) { if ( y % x == 0 ) { printf ( \"%d %d\n\" , x , a * b / x ) ; break ; } else { p = y % x ; y = x ; x = p ; } } } return 0 ; }", "label": 1, "id": 15563}
{"input": "int gcd ( int a , int b ) { if ( a % b ) gcd ( b , a % b ) ; else return b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int g , a , b ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; printf ( \"%d %d\n\" , g , a * b / g ) ; } return 0 ; }", "label": 1, "id": 3682}
{"input": "int arr [ MAX ] [ MAX ] , r ; int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = r - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22463}
{"input": "int main ( ) { long int a , b , lcm , t , i , gcd ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; for ( i = 1 ; i <= b ; i ++ ) { if ( a * i % b == 0 ) { lcm = a * i ; break ; } } gcd = ( a * b ) / lcm ; printf ( \"%ld %ld\" , gcd , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 2, "id": 3394}
{"input": "int maxrows , maxcolumns , * * result1 , * * array1 ; int sumTriangles ( int rowpos , int colpos ) { int value1 , value2 ; if ( rowpos == maxrows || colpos == maxcolumns ) return array1 [ rowpos ] [ colpos ] ; if ( result1 [ rowpos + 1 ] [ colpos ] == - 1 ) { value1 = sumTriangles ( rowpos + 1 , colpos ) ; result1 [ rowpos + 1 ] [ colpos ] = value1 ; } else value1 = result1 [ rowpos + 1 ] [ colpos ] ; if ( result1 [ rowpos + 1 ] [ colpos + 1 ] == - 1 ) { value2 = sumTriangles ( rowpos + 1 , colpos + 1 ) ; result1 [ rowpos + 1 ] [ colpos + 1 ] = value2 ; } else value2 = result1 [ rowpos + 1 ] [ colpos + 1 ] ; if ( value1 > value2 ) return value1 + array1 [ rowpos ] [ colpos ] ; else return value2 + array1 [ rowpos ] [ colpos ] ; } int main ( ) { int noIter , i , j , k , nrows , ncolumns = 1 , * results ; scanf ( \"%d\" , & noIter ) ; results = ( int * ) malloc ( noIter * sizeof ( int ) ) ; for ( i = 0 ; i < noIter ; i ++ ) { scanf ( \"%d\" , & nrows ) ; array1 = ( int * * ) malloc ( nrows * sizeof ( int * ) ) ; result1 = ( int * * ) malloc ( nrows * sizeof ( int * ) ) ; ncolumns = 1 ; for ( j = 0 ; j < nrows ; j ++ ) { array1 [ j ] = ( int * ) malloc ( ncolumns * sizeof ( int ) ) ; result1 [ j ] = ( int * ) malloc ( ncolumns * sizeof ( int ) ) ; for ( k = 0 ; k < ncolumns ; k ++ ) { result1 [ j ] [ k ] = - 1 ; scanf ( \"%d\" , & array1 [ j ] [ k ] ) ; } ncolumns ++ ; } maxrows = nrows - 1 ; maxcolumns = nrows - 1 ; results [ i ] = sumTriangles ( 0 , 0 ) ; for ( j = 0 ; j < nrows ; j ++ ) { free ( array1 [ j ] ) ; free ( result1 [ j ] ) ; } free ( array1 ) ; free ( result1 ) ; } for ( i = 0 ; i < noIter ; i ++ ) { printf ( \"%d\n\" , results [ i ] ) ; } return 0 ; }", "label": 0, "id": 7144}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; for ( T = 1 ; T < 10 ; T -- ) { int N ; int A [ 5 ] ; int i , j ; scanf ( \"%d\" , & N ) ; scanf ( \"%d\" , & i ) ; for ( i = 0 ; i < N ; i ++ ) { printf ( \"%d\" , & A [ i ] ) ; } for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( A [ j + 1 ] == A [ j ] ) break ; else if ( A [ j + 1 ] > A [ j ] ) { printf ( \"%d\" , A [ j ] ) ; } } } } return 0 ; }", "label": 2, "id": 16949}
{"input": "int main ( ) { int t , i , n , a [ 50000 ] , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) ; scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { sum = sum + a [ i ] ; a [ i + 1 ] = a [ i ] ; } else sum = sum + a [ i ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 6533}
{"input": "int num_rows ; int cache [ 100 ] [ 100 ] = { 0 } ; int m [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int solve ( int i , int j ) { int t1 , t2 , total ; if ( i > num_rows - 1 ) { return 0 ; } else { if ( cache [ i ] [ j ] != 0 ) { total = cache [ i ] [ j ] ; } t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; total = max ( t1 , t2 ) + m [ i ] [ j ] ; cache [ i ] [ j ] = total ; } return total ; } int main ( void ) { int test , n , i , j , ans ; scanf ( \"%d\" , & test ) ; while ( test > 0 ) { scanf ( \"%d\" , & num_rows ) ; for ( i = 0 ; i < num_rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & m [ i ] [ j ] ) ; } } ans = solve ( 0 , 0 ) ; printf ( \"%d\n\" , ans ) ; test -- ; } return 0 ; }", "label": 2, "id": 22294}
{"input": "int getgcd ( int x , int y ) ; int main ( ) { int t ; scanf ( \"%d\" , t ) ; while ( t -- ) { long long int a , b , lcm , gcd ; scanf ( \"%lld %lld\" , & a , & b ) ; gcd = getgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\" , gcd , lcm ) ; } return 0 ; } int getgcd ( int x , int y ) { if ( y != 0 ) { getgcd ( y , x % y ) ; } else { return ( x ) ; } }", "label": 3, "id": 20421}
{"input": "int main ( ) { int GCD , LCM , a , b , x , y , r ; printf ( \"\nEnter two numbers : \" ) ; scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { r = a % b ; a = b ; b = r ; } GCD = a ; LCM = ( x * y ) / GCD ; printf ( \"\nThe greatest common multiple of %d and %d is = %d\" , x , y , GCD ) ; printf ( \"\nThe least common multiple of %d and %d is = %d\" , x , y , LCM ) ; return ( 0 ) ; }", "label": 1, "id": 24727}
{"input": "main ( ) { int gcd = 1 , lcm , i , j , k , n , a , b , z ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) z = b ; else z = a ; for ( j = 2 ; j <= z ; j ++ ) { if ( ( a % j ) == 0 && ( b % j ) == 0 ) { gcd = j ; } } for ( k = z ; k <= a * b ; k ++ ) { if ( ( k % a ) == 0 && ( k % b ) == 0 ) lcm = k ; } printf ( \"%d%d\" , gcd , lcm ) ; } }", "label": 2, "id": 16075}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n , temp ; int arr [ 1001 ] ; int cost = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < 2 ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( \"%d\n\" , arr [ 0 ] ) ; cost = abs ( cost + ( n - 1 ) * arr [ 0 ] ) ; printf ( \"%d\" , cost ) ; } return 0 ; }", "label": 3, "id": 3043}
{"input": "int gcd ( int a , int b ) { int x ; while ( b != 0 ) { x = a % b ; a = b ; b = x ; } return a ; } int lcm ( int x , int y , int z ) { int g = ( y * z ) / x ; } int main ( ) { int t , a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( g , a , b ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 13915}
{"input": "char rbuffer [ rbuffer_size ] ; int rfptr = rbuffer_size ; char wbuffer [ wbuffer_size ] ; int wfptr = 0 ; int readno ; void rd ( ) { rfptr = 0 ; readno = read ( 0 , rbuffer , rbuffer_size ) ; } int get_i ( ) { int sum = 0 ; char c ; int sign = 1 ; while ( 1 ) { if ( ( rfptr >= rbuffer_size ) || ( rfptr >= readno ) ) rd ( ) ; c = rbuffer [ rfptr ++ ] ; if ( c == '-' ) { sign = - 1 ; } else { if ( c == '\n' || c == ' ' ) return sum * sign ; else sum = sum * 10 + c - '0' ; } } } void wr ( ) { write ( 0 , wbuffer , wbuffer_size ) ; wfptr = 0 ; } void put_i ( int i ) { char ar [ 10 ] ; ar [ 0 ] = 0 ; int sign = 1 ; int index = - 1 ; if ( i == 0 ) { ar [ 0 ] = '0' ; index = 0 ; } else { if ( i < 0 ) { sign = - 1 ; i *= - 1 ; } while ( i != 0 ) { ar [ ++ index ] = i + '0' ; i /= 10 ; } } if ( sign == - 1 ) { if ( wfptr >= wbuffer_size ) wr ( ) ; wbuffer [ wfptr ++ ] = '-' ; } while ( index >= 0 ) { if ( wfptr >= wbuffer_size ) wr ( ) ; wbuffer [ wfptr ++ ] = ar [ index -- ] ; } } void put_i_c ( int i , char c ) { char ar [ 10 ] ; ar [ 0 ] = 0 ; int sign = 1 ; int index = - 1 ; if ( i == 0 ) { ar [ 0 ] = 0 ; index = 0 ; } else { if ( i < 0 ) { sign = - 1 ; i *= - 1 ; } while ( i != 0 ) { ar [ ++ index ] = i + '0' ; i /= 10 ; } } if ( sign == - 1 ) { if ( wfptr >= wbuffer_size ) wr ( ) ; wbuffer [ wfptr ++ ] = '-' ; } while ( index >= 0 ) { if ( wfptr >= wbuffer_size ) wr ( ) ; wbuffer [ wfptr ++ ] = ar [ index -- ] ; } if ( wfptr >= wbuffer_size ) wr ( ) ; wbuffer [ wfptr ++ ] = c ; } void writeRemaining ( ) { if ( wfptr > 0 ) write ( 0 , wbuffer , wfptr ) ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int t , n , i ; int * * p ; int k ; int tempval ; t = get_i ( ) ; while ( t -- > 0 ) { n = get_i ( ) ; p = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( k = 0 ; k <= i ; k ++ ) { p [ i ] [ k ] = get_i ( ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( k = 0 ; k <= i ; k ++ ) { p [ i ] [ k ] += max ( p [ i + 1 ] [ k ] , p [ i + 1 ] [ k + 1 ] ) ; } } put_i_c ( p [ 0 ] [ 0 ] , '\n' ) ; } writeRemaining ( ) ; }", "label": 3, "id": 22709}
{"input": "int main ( ) { int t , i , a , b , gcd , lcm , max , min , x , y ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { x = 0 ; y = 0 ; scanf ( \"%d%d\" , & a , & b ) ; if ( a <= b ) { min = a ; max = b ; } else { min = b ; max = a ; } while ( 1 ) { if ( a % min == 0 && b % min == 0 && x == 0 ) { gcd = min ; x = 1 ; } if ( x == 0 ) min -- ; if ( max % a == 0 && max % b == 0 && y == 0 ) { lcm = max ; y = 1 ; } max ++ ; if ( x == 1 && y == 1 ) { break ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 10238}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; if ( n >= 1 && n <= 10 ) { while ( n -- ) { int a ; scanf ( \"%d\" , & a ) ; int e [ a ] , i , c = 0 ; for ( i = 0 ; i < a ; i ++ ) scanf ( \"%d\" , & e [ i ] ) ; if ( a >= 2 && a <= 50000 ) { for ( i = 0 ; i < a - 1 ; i ++ ) { if ( e [ i ] > e [ i + 1 ] ) { c = c + e [ i + 1 ] ; } else if ( e [ i ] < e [ i + 1 ] ) c = c + e [ i ] ; } } printf ( \"\n%d\" , c ) ; } } return 0 ; }", "label": 1, "id": 3582}
{"input": "int main ( ) { int n , lines , i , j , x ; scanf ( \"%d\" , & n ) ; while ( -- n >= 0 ) { scanf ( \"%d\" , & lines ) ; int a [ lines ] [ lines ] ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = lines - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4381}
{"input": "int grcd ( int a , int b ) { int rem = a % b ; if ( rem == 0 ) return b ; else return grcd ( b , rem ) ; } int lrcm ( int a , int b ) { int i = 1 ; int p = 1 ; while ( p ) { if ( i % a == 0 && i % b == 0 ) p = 0 ; i ++ ; } return i - 1 ; } main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) gcd = grcd ( a , b ) ; else gcd = grcd ( b , a ) ; lcm = lrcm ( a , b ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 5876}
{"input": "int main ( ) { int row , i , j , kasus ; int angka [ 101 ] [ 100 ] ; scanf ( \"%d\" , & kasus ) ; while ( kasus -- ) { scanf ( \"%d\" , & row ) ; fflush ( stdin ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & angka [ i ] [ j ] ) ; } } fflush ( stdin ) ; for ( i = 1 ; i < row ; i ++ ) { for ( j = 0 ; j < row - i ; j ++ ) { if ( ( angka [ row - i ] [ j ] + angka [ row - i - 1 ] [ j ] ) > ( angka [ row - i ] [ j + 1 ] + angka [ row - i - 1 ] [ j ] ) ) { angka [ row - i - 1 ] [ j ] = angka [ row - i ] [ j ] + angka [ row - i - 1 ] [ j ] ; } else angka [ row - i - 1 ] [ j ] = angka [ row - i ] [ j + 1 ] + angka [ row - i - 1 ] [ j ] ; } } printf ( \"%d\n\" , angka [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 21665}
{"input": "int main ( ) { int t , n , a [ 50000 ] , r , i , small ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; small = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < small ) { small = a [ i ] ; } } r = small * ( n - 1 ) ; printf ( \"%d\n\" , r ) ; } return 0 ; }", "label": 0, "id": 10801}
{"input": "int sum ( int c ) { int k , m = 0 ; for ( k = 1 ; k <= c ; k ++ ) m += k ; return m ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n , j , c = 0 ; scanf ( \"%d\" , & n ) ; int t [ n ] ; int s = n ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & t [ j ] ) ; } for ( j = 0 ; j < n - 1 ; j ++ ) { if ( t [ j ] < t [ j + 1 ] ) { c ++ ; } else { s += sum ( c ) ; c = 0 ; } } s += sum ( c ) ; printf ( \"%d\n\" , s ) ; } }", "label": 0, "id": 9719}
{"input": "int main ( ) { int t , n1 , n2 , i , gcd = 0 , lcm , z , x , y ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { gcd = 0 ; scanf ( \"%d\" , & n1 ) ; scanf ( \"%d\" , & n2 ) ; if ( n1 > n2 ) { x = n1 ; y = n2 ; } else { x = n2 ; y = n1 ; } while ( gcd == 0 ) { z = x % y ; if ( z != 0 ) { x = y ; y = z ; } else { gcd = y ; } } lcm = n1 * n2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 13998}
{"input": "int Tri [ 5100 ] [ 5100 ] , RSum [ 5100 ] [ 5100 ] ; void rootSum ( int , int ) ; int levels = 4 , x = 1 , y = 1 ; int main ( ) { int Input [ 5100 ] ; int i , j , k = 0 , iter = 0 , size , t ; scanf ( \"%d\" , & t ) ; for ( iter = 1 ; iter <= t ; iter ++ ) { k = 0 ; scanf ( \"%d\" , & levels ) ; size = levels * ( levels + 1 ) / 2 ; for ( i = 0 ; i < size ; i ++ ) scanf ( \"%d\" , & Input [ i ] ) ; for ( i = 1 ; i <= levels ; i ++ ) { for ( j = i ; j >= 1 ; j -- ) { Tri [ j ] [ i - j + 1 ] = Input [ k ++ ] ; } } for ( i = levels ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { rootSum ( i - j + 1 , j ) ; } } printf ( \"%d\n\" , RSum [ 1 ] [ 1 ] ) ; } return 0 ; } void rootSum ( int j , int i ) { RSum [ j ] [ i ] = - 1 ; if ( j + i - 1 != levels ) { if ( RSum [ j ] [ i ] < RSum [ j + 1 ] [ i ] + Tri [ j ] [ i ] ) { RSum [ j ] [ i ] = RSum [ j + 1 ] [ i ] + Tri [ j ] [ i ] ; } if ( RSum [ j ] [ i ] < RSum [ j ] [ i + 1 ] + Tri [ j ] [ i ] ) { RSum [ j ] [ i ] = RSum [ j ] [ i + 1 ] + Tri [ j ] [ i ] ; } } else RSum [ j ] [ i ] = Tri [ j ] [ i ] ; }", "label": 0, "id": 8013}
{"input": "main ( ) { int i , j , k , m , n , p , q ; int a [ 200 ] [ 99 ] [ 99 ] ; printf ( \"Enter the number of test cases\" ) ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { printf ( \"Enter the no of levels\" ) ; scanf ( \"%d\" , & m ) ; for ( j = 1 ; j <= m ; j ++ ) { printf ( \"Enter the members\" ) ; for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] [ k ] ) ; } } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = m ; j > 1 ; j -- ) { for ( k = 1 ; k <= j ; k ++ ) { p = a [ i ] [ j ] [ k ] + a [ i ] [ j - 1 ] [ k ] ; q = a [ i ] [ j ] [ k + 1 ] + a [ i ] [ j - 1 ] [ k ] ; if ( p > q ) { a [ i ] [ j - 1 ] [ k ] = p ; } else { a [ i ] [ j - 1 ] [ k ] = q ; } } } } for ( i = 1 ; i <= n ; i ++ ) { printf ( \"%d\n\" , a [ i ] [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 8488}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int max , i , g , l , a , b ; scanf ( \"%ld%ld\" , & a , & b ) ; max = a < b ? a : b ; i = 1 ; while ( i < max ) { if ( a % i == 0 && b % i == 0 ) g = i ; i ++ ; } printf ( \"%d %d\n\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 2, "id": 8228}
{"input": "int main ( ) { long int t , a [ 100000 ] , n , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 1 ; i <= n - 1 ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%ld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 13580}
{"input": "int main ( ) { unsigned int noTest = 0 ; unsigned int inputArray [ 100 ] = { 0 } ; unsigned int computeArray [ 100 ] = { 0 } ; unsigned int largest = 0 , i = 0 , k = 0 , j = 0 , x = 0 , y = 0 , noRow = 0 ; unsigned int temp = 0 , temp1 = 0 ; scanf ( \"%d\" , & noTest ) ; while ( i < noTest ) { scanf ( \"%d\" , & noRow ) ; for ( j = 0 ; j < noRow ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & inputArray [ k ] ) ; } for ( k = 1 ; k <= j ; k ++ ) { if ( ( x = inputArray [ k ] + computeArray [ k - 1 ] ) > ( y = inputArray [ k ] + computeArray [ k ] ) ) { temp = x ; } else { temp = y ; } if ( k > 1 ) { computeArray [ k - 1 ] = temp1 ; } temp1 = temp ; temp = 0 ; } if ( k > 1 ) { computeArray [ k - 1 ] = temp1 ; temp1 = 0 ; } computeArray [ 0 ] = computeArray [ 0 ] + inputArray [ 0 ] ; } k = 0 ; largest = 0 ; while ( k < noRow ) { if ( computeArray [ k ] > largest ) { largest = computeArray [ k ] ; } computeArray [ k ] = 0 ; k ++ ; } printf ( \"%d\n\" , largest ) ; i ++ ; } }", "label": 0, "id": 7730}
{"input": "int main ( ) { int i , t , n ; int a , b , g , l ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\n\" , & a , & b ) ; if ( a > b ) n = b ; else n = a ; for ( i = n ; i >= 1 ; i -- ) if ( a % i == 0 && b % i == 0 ) { g = i ; break ; } l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 24897}
{"input": "int a [ 101 ] [ 101 ] ; int n = 0 ; int sum ( int i , int j ) { if ( i > n ) { return 0 ; } else { int t1 = sum ( i + 1 , j ) ; int t2 = sum ( i + 1 , j + 1 ) ; if ( t1 > t2 ) { return t1 + a [ i ] [ j ] ; } else { return t2 + a [ i ] [ j ] ; } } } int main ( ) { int i = 0 , j = 0 , no_t = 0 , k ; scanf ( \"%d\" , & no_t ) ; for ( k = 0 ; k < no_t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , sum ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 24628}
{"input": "int main ( ) { int i , j , T , N , curr , c , d ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= N ; i ++ ) { scanf ( \"%d\" , & N ) ; int a [ N ] [ N ] ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ N ] [ N ] ) ; } for ( i = N - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { curr = a [ i ] [ j ] ; c = a [ i + 1 ] [ j ] + curr ; d = a [ i + 1 ] [ j + 1 ] + curr ; curr = c >= d ? c : d ; a [ i ] [ j ] = curr ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 7977}
{"input": "int main ( void ) { int t , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = i ; j > 0 ; j -- ) { if ( a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] > a [ i ] [ j - 1 ] + a [ i - 1 ] [ j - 1 ] ) a [ i - 1 ] [ j - 1 ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; else a [ i - 1 ] [ j - 1 ] = a [ i ] [ j - 1 ] + a [ i - 1 ] [ j - 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22330}
{"input": "int main ( ) { int t , m , n , b , a , p , q ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & m , & n ) ; p = m ; q = n ; while ( m % n != 0 ) { a = m % n ; m = n ; n = a ; } b = ( p * q ) / a ; printf ( \"%d%d\n\" , a , b ) ; } return 0 ; }", "label": 1, "id": 23124}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- > 0 ) { int nlevel ; scanf ( \"%d\" , & nlevel ) ; { int arr [ nlevel ] [ nlevel ] ; int i , j ; int n = 0 ; while ( n < nlevel ) { for ( i = 0 ; i <= n ; ++ i ) scanf ( \"%d\" , & arr [ n ] [ i ] ) ; n ++ ; } for ( i = nlevel - 2 ; i >= 0 ; -- i ) for ( j = 0 ; j <= i ; ++ j ) arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } } return 0 ; }", "label": 0, "id": 717}
{"input": "int main ( ) { int n ; int a [ 1001 ] [ 1001 ] ; int row , i , j ; long long int sum = 0 , tempSum = 0 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & row ) ; for ( i = 1 ; i <= row ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= row ; i ++ ) { tempSum = a [ i ] [ 1 ] + a [ i + 1 ] [ 1 ] + a [ i + 1 ] [ 2 ] ; if ( sum < tempSum ) sum = tempSum ; } printf ( \"%lld\n\" , sum ) ; sum = 0 ; } return 0 ; }", "label": 1, "id": 22664}
{"input": "int tree [ 5050 ] ; int n ; int cal ( int n ) { return n * ( ( 1 + n ) / 2 ) ; } int find_sum ( int i , int j ) { int l , r , t ; t = cal ( i - 1 ) ; if ( t + j >= n || cal ( i ) >= n ) { return 0 ; } l = * ( tree + t + j ) + find_sum ( i + 1 , j ) ; r = * ( tree + t + j + 1 ) + find_sum ( i + 1 , j + 1 ) ; return l > r ? l : r ; } int main ( int argc , char const * argv [ ] ) { int i , j , T ; scanf ( \"%d\" , & T ) ; for ( j = 0 ; j < T ; ++ j ) { scanf ( \"%d\" , & n ) ; n = n * ( ( 1 + n ) / 2 ) ; for ( i = 0 ; i < n ; ++ i ) scanf ( \"%d\" , & tree [ i ] ) ; printf ( \"%d\n\" , find_sum ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 22831}
{"input": "int main ( ) { int t , n , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ min ] > a [ i ] ) min = i ; } printf ( \"%lld\n\" , ( long long ) a [ min ] * ( n - 1 ) ) ; } }", "label": 0, "id": 22469}
{"input": "short int table [ 100 ] [ 100 ] ; long int max_sum ; long int inter_sum ; int max_rows ; void a_thread_sum ( int parent_sum , int current_row , int current_column ) { int k ; inter_sum = parent_sum + table [ current_row ] [ current_column ] ; k = inter_sum ; if ( current_row < max_rows ) { a_thread_sum ( inter_sum , current_row + 1 , current_column ) ; a_thread_sum ( k , current_row + 1 , current_column + 1 ) ; } else if ( inter_sum > max_sum ) max_sum = inter_sum ; } int main ( ) { max_sum = 0 ; int max_rows_t = 3 ; int rounds ; int i = 0 , j = 0 , t = 0 , s = 0 ; scanf ( \"%d\" , & rounds ) ; long int max_sums [ 1000 ] ; while ( rounds -- ) { scanf ( \"%d\" , & max_rows_t ) ; max_rows = max_rows_t - 1 ; for ( s = 0 ; s < max_rows_t ; s ++ ) { for ( j = 0 ; j < s + 1 ; j ++ ) scanf ( \"%hd\" , & table [ s ] [ j ] ) ; } a_thread_sum ( 0 , 0 , 0 ) ; max_sums [ t ++ ] = max_sum ; max_sum = 0 ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%ld\n\" , max_sums [ i ] ) ; } return 0 ; }", "label": 2, "id": 23929}
{"input": "int main ( ) { int t ; long int n , i , j , k ; long long int a [ 00000 ] , count ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; count = 0 ; k = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; ) { k ++ ; count ++ ; for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) count ++ ; else { break ; } i ++ ; } i = k ; } printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 3, "id": 20779}
{"input": "int max ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int out [ 2 ] ; for ( int i = 0 ; i < t ; i ++ ) { int inp ; scanf ( \"%d\" , & inp ) ; int a [ inp ] [ inp ] ; for ( int j = 0 ; j < inp ; j ++ ) { for ( int k = 0 ; k < inp ; k ++ ) { if ( k <= j ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; else a [ k ] [ j ] = 0 ; } } for ( int j = inp - 2 ; j >= 0 ; j -- ) { for ( int k = 0 ; k < inp ; k ++ ) { int maximum = max ( a [ j + 1 ] [ k ] , a [ j + 1 ] [ k + 1 ] ) ; a [ j ] [ k ] += maximum ; } } out [ i ] = a [ 0 ] [ 0 ] ; } for ( int i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , out [ i ] ) ; return 1 ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 3, "id": 2102}
{"input": "int main ( ) { int arr [ 100 ] [ 100 ] ; int i , j , testcase , no_rows ; scanf ( \"%d\" , & testcase ) ; while ( testcase -- ) { scanf ( \"%d\" , & no_rows ) ; for ( i = 0 ; i < no_rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = no_rows - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( ( arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ) > ( arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ) ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 50}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; int arr2 [ n ] ; int i , j ; int min , mindex ; scanf ( \"%d\" , & arr [ 0 ] ) ; min = arr [ 0 ] ; arr2 [ 0 ] = 0 ; mindex = 0 ; for ( i = 1 ; i < n ; i ++ ) { arr2 [ i ] = 0 ; scanf ( \"%d\" , & arr [ i ] ) ; if ( min > arr [ i ] ) { min = arr [ i ] ; mindex = i ; } } printf ( \"%d\n\" , ( min * ( n - 1 ) ) ) ; } }", "label": 0, "id": 11719}
{"input": "int n , n1 , a [ 99 ] [ 99 ] , compare ; void recur ( int , int , int ) ; int main ( ) { int counter1 , counter2 , counter = 0 ; scanf ( \"%d\" , & n ) ; while ( counter < n ) { counter1 = 0 ; scanf ( \"%d\" , & n1 ) ; while ( counter1 < n1 ) { counter2 = 0 ; while ( counter2 <= counter1 ) { scanf ( \"%d\" , & a [ counter ] [ counter1 ] ) ; counter2 ++ ; } counter1 ++ ; } compare = 0 ; recur ( 0 , a [ 0 ] [ 0 ] , 1 ) ; printf ( \"%d\" , compare ) ; counter ++ ; } return 0 ; } void recur ( int rowele , int sum , int row ) { if ( row == n1 - 1 ) { if ( compare < sum ) compare = sum ; return ; } sum = sum + a [ row ] [ rowele ] ; recur ( rowele , sum , row + 1 ) ; sum = sum - a [ row ] [ rowele ] + a [ row ] [ rowele + 1 ] ; recur ( rowele + 1 , sum , row + 1 ) ; }", "label": 2, "id": 25066}
{"input": "int main ( ) { int T , A , a , B , b , x , y , i = 1 ; scanf ( \"%d\" , & T ) ; while ( i <= T ) { scanf ( \"%d %d\" , & A , & B ) ; a = A ; b = B ; while ( b != 0 ) { x = b ; b = a % b ; a = x ; } y = ( A * B ) / a ; printf ( \"%d %d\n\" , a , y ) ; i ++ ; } }", "label": 1, "id": 15769}
{"input": "int main ( ) { int t , a = 0 ; scanf ( \"%d\" , & t ) ; while ( a < t ) { long int n , b = 0 , sum = 0 , c = 0 ; scanf ( \"%ld\" , & n ) ; long int ar [ 100000 ] ; while ( b < n ) { scanf ( \"%ld\" , & ar [ b ] ) ; ++ b ; } while ( c < ( n - 1 ) ) { if ( ar [ c ] <= ar [ c + 1 ] ) { sum ++ ; if ( ar [ c ] == ar [ c + 1 ] ) { n -- ; } } ++ c ; } printf ( \"%ld\n\" , ( sum + n ) ) ; ++ a ; } return 0 ; }", "label": 1, "id": 9869}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , lcm , i , gcd ; scanf ( \"%d%d\" , & a , & b ) ; lcm = a * b ; for ( i = 1 ; i <= a && i <= b ; ++ i ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } printf ( \"%d \" , gcd ) ; printf ( \"%d \" , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 22783}
{"input": "int t [ 100 ] [ 100 ] ; int tri [ 100 ] ; int count ; int recurse ( int i , int r , int num , int j ) { int n ; if ( i == ( j + 1 ) ) { if ( num >= tri [ count ] ) { tri [ count ] = num ; return 0 ; } else return 0 ; } else { for ( n = 1 ; n <= i ; n ++ ) { if ( n == r ) { recurse ( i + 1 , n , num + t [ i ] [ n ] , j ) ; } if ( n == ( r + 1 ) ) { recurse ( i + 1 , n , num + t [ i ] [ n ] , j ) ; } } } return 0 ; } int main ( ) { unsigned int a , b , c , d , e , f ; count = 1 ; scanf ( \"%d\" , & a ) ; for ( b = 1 ; b <= a ; b ++ ) { scanf ( \"%d\" , & c ) ; if ( ( c > 0 ) && ( c < 100 ) ) { for ( d = 1 ; d <= c ; d ++ ) { for ( e = 1 ; e <= d ; e ++ ) { scanf ( \"%d\" , & f ) ; if ( ( f > 0 ) && ( f < 99 ) ) t [ d ] [ e ] = f ; } } f = t [ 1 ] [ 1 ] ; recurse ( 2 , 1 , f , c ) ; count ++ ; } } for ( b = 1 ; b <= a ; b ++ ) printf ( \"%d\n\" , tri [ b ] ) ; return 0 ; }", "label": 2, "id": 23044}
{"input": "int main ( ) { int t , n , i , j , d , a [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) { d = ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; a [ i ] [ j ] += d ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 26459}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , x , i ; scanf ( \"%d\" , & n ) ; int min ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & x ) ; if ( min > x ) min = x ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 6219}
{"input": "long find_lcm ( long l , long s ) ; int main ( void ) { int t ; long a , b , large , small , hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; lcm = find_lcm ( a , b ) ; hcf = ( a * b ) / lcm ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } return 0 ; } long find_lcm ( long l , long s ) { long i = 1 ; while ( ( l * i ) % s != 0 ) i ++ ; return ( l * i ) ; }", "label": 2, "id": 2519}
{"input": "void lowest ( int a , int b ) ; int main ( ) { int i , n , a , b ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a >= b ) lowest ( a , b ) ; else lowest ( b , a ) ; } return 0 ; } void lowest ( int p , int q ) { int j , lcm ; for ( j = p ; j > 0 ; j ++ ) { if ( j % p == 0 && j % q == 0 ) { lcm = j ; break ; } } printf ( \"%d %d\n\" , ( p * q ) / lcm , lcm ) ; }", "label": 2, "id": 3000}
{"input": "int main ( ) { long long int i , j , n , t , k , sum , min ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; long long int x [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & x [ j ] ) ; } min = x [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( x [ j ] < min ) { min = x [ j ] ; } } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 7568}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B ; scanf ( \"%d%d\" , & A , & B ) ; int ans = gcd ( A , B ) ; printf ( \"%d \" , ans ) ; if ( A > B ) { if ( A % B == 0 ) printf ( \"%d\n\" , A ) ; else printf ( \"%d\n\" , A * B ) ; } else { if ( B % A == 0 ) printf ( \"%d\n\" , B ) ; else printf ( \"%d\n\" , A * B ) ; } } }", "label": 1, "id": 25586}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int a , i , b , t , x ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\\t%d\" , & a , & b ) ; x = gcd ( a , b ) ; printf ( \"%d\\t\" , x ) ; printf ( \"%d\" , ( a * b ) / x ) ; } return 0 ; } int gcd ( int a , int b ) { int i , m ; if ( a > b ) { m = b ; } else { m = a ; } for ( i = m ; i > 0 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { return i ; } } }", "label": 1, "id": 13750}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 18803}
{"input": "int main ( ) { int i , a , b , t , n , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) n = b ; else n = a ; for ( i = n ; i >= 1 ; i -- ) if ( a % i == 0 && b % i == 0 ) { g = i ; break ; } l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 5369}
{"input": "int main ( ) { unsigned long long int j , a , b , max , min ; int i , n ; unsigned long long int p ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%I64d %I64d\" , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } for ( j = min ; j > 0 ; j = j - ( max - min ) ) { if ( a % j == 0 && b % j == 0 ) { p = ( a * b ) / j ; printf ( \"%I64d %I64d\n\" , j , p ) ; j = 0 ; } } } }", "label": 2, "id": 4933}
{"input": "int main ( void ) { int iTest , iItr , iValue , iArrLen ; long long int iMin = 9999999999999 ; fscanf ( stdin , \"%d\" , & iTest ) ; while ( iTest -- ) { fscanf ( stdin , \"%d\" , & iArrLen ) ; for ( iItr = 0 ; iItr < iArrLen ; iItr ++ ) { fscanf ( stdin , \"%d\" , & iValue ) ; if ( iMin > iValue ) iMin = iValue ; } fprintf ( stdout , \"%lld\n\" , iMin * ( iArrLen - 1 ) ) ; } return 0 ; }", "label": 1, "id": 4712}
{"input": "int gcd1 ( int a , int b ) ; int main ( ) { int lcm = 1 , gcd = 1 , a , b , q = 0 , pro = 0 , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; pro = a * b ; q = gcd1 ( a , b ) ; lcm = pro / q ; printf ( \"%d %d\n\" , q , lcm ) ; } return 0 ; } int gcd1 ( int a , int b ) { while ( a != b ) { if ( a > b ) a = a - b ; else if ( b > a ) b = b - a ; } return b ; }", "label": 1, "id": 19170}
{"input": "int A [ 1000 ] [ 4952 ] ; int max ( int , int , int , int ) ; int main ( ) { int n , i , j , k ; int T [ 1000 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & T [ i ] ) ; k = T [ i ] * ( T [ i ] + 1 ) / 2 ; for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( \"\n%d\" , max ( 0 , 0 , T [ i ] , i ) ) ; } return 0 ; } int max ( int i , int j , int T , int k ) { int sum1 = 0 , sum2 = 0 ; if ( i == T - 1 ) if ( A [ k ] [ i * ( i + 1 ) / 2 + j ] > A [ k ] [ 1 + i * ( i + 1 ) / 2 + j ] ) return A [ k ] [ i * ( i + 1 ) / 2 + j ] ; else return A [ k ] [ 1 + i * ( i + 1 ) / 2 + j ] ; sum1 = A [ k ] [ i * ( i + 1 ) / 2 + j ] + max ( i + 1 , j , T , k ) ; sum2 = A [ k ] [ i * ( i + 1 ) / 2 + j ] + max ( i + 1 , j + 1 , T , k ) ; if ( sum1 > sum2 ) { printf ( \"Sum1=%d\" , sum1 ) ; return sum1 ; } else { printf ( \"Sum1=%d\" , sum2 ) ; return sum2 ; } }", "label": 3, "id": 24219}
{"input": "int main ( ) { int t , n1 , n2 ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; int k1 = n1 ; int k2 = n2 ; while ( k1 != k2 ) { if ( k1 > k2 ) k1 -= k2 ; else k2 -= k1 ; } int k3 = ( n1 * n2 ) / k1 ; printf ( \"%d %d\n\" , k1 , k3 ) ; } return 0 ; }", "label": 1, "id": 4788}
{"input": "int main ( void ) { long a , b , i , n , hcf , lcm , j ; scanf ( \"%ld\" , & n ) ; while ( n -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; for ( i = 1 ; i < a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; } } for ( j = a ; j <= ( a * b ) ; j ++ ) { if ( j % a == 0 && j % b == 0 ) { lcm = j ; break ; } } printf ( \"%ld %ld\n\" , hcf , lcm ) ; } return ( 0 ) ; }", "label": 2, "id": 9700}
{"input": "void solve ( short int * a , short int n ) { short int i , j , i1 , j1 , i2 , j2 ; int max ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) { max = a [ i * n + j ] ; } else { if ( j == 0 ) { j1 = j2 = 0 ; i1 = i2 = i - 1 ; } else { j1 = j - 1 ; j2 = j ; i1 = i2 = i - 1 ; } if ( i == j && j != 0 ) { i1 = i2 = i - 1 ; j1 = j2 = i - 1 ; } if ( a [ i1 * n + j1 ] > a [ i2 * n + j2 ] ) a [ i * n + j ] = a [ i1 * n + j1 ] + a [ i * n + j ] ; else a [ i * n + j ] = a [ i2 * n + j2 ] + a [ i * n + j ] ; } if ( max < a [ i * n + j ] ) max = a [ i * n + j ] ; } } printf ( \"%d\n\" , max ) ; } int main ( ) { short int * a , n , rounds ; short int i , j , k ; scanf ( \"%d\" , & rounds ) ; for ( k = 0 ; k < rounds ; k ++ ) { scanf ( \"%d\" , & n ) ; a = ( short int * ) malloc ( n * n * sizeof ( short int ) ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i * n + j ] ) ; solve ( a , n ) ; } }", "label": 1, "id": 23769}
{"input": "long gcd ( long a , long b ) { while ( 1 ) { if ( a >= b ) { if ( a % b == 0 ) return b ; else a = a - b ; } else { if ( b % a == 0 ) return a ; else b = b - a ; } } } int main ( ) { int t ; long a , b , d ; long c ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; d = gcd ( a , b ) ; c = ( a * b ) / d ; printf ( \"%d \" , d ) ; printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 1, "id": 18457}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { int a , b , x , y , temp , g , l ; scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( b > 0 ) { temp = b ; b = a % b ; a = temp ; } g = a ; l = ( x * y ) / g ; printf ( \"%d %d \n\" , g , l ) ; n -= 1 ; } return 0 ; }", "label": 1, "id": 25237}
{"input": "int main ( ) { long int i , j , k , w , p = 0 , a [ 100001 ] ; int t , n = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { w = 0 ; p = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; if ( n > 1 ) { for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) w ++ ; else { w ++ ; p += ( w * ( w + 1 ) ) / 2 ; w = 0 ; } } } else { printf ( \"%d\n\" , n ) ; continue ; } printf ( \"%ld\n\" , p ) ; } }", "label": 1, "id": 4204}
{"input": "int hcf ( long long int a , long long int b ) { if ( a % b == 0 ) { return b ; } else { return hcf ( b , a % b ) ; } } int lcm ( long long int a , long long int b ) { unsigned long long int c ; if ( a % b == 0 ) { return a ; } else { c = a * b ; return c ; } } int main ( void ) { unsigned long long int a , b , c , d ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%llu %llu\" , & a , & b ) ; d = lcm ( a , b ) ; c = hcf ( a , b ) ; printf ( \"%llu \" , c ) ; printf ( \"%llu\n\" , d ) ; } return 0 ; }", "label": 1, "id": 6160}
{"input": "int main ( ) { long long int a [ 100 ] [ 100 ] = { 0 } ; int n , t , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { a [ i ] [ j ] = 0 ; } } } return 0 ; }", "label": 0, "id": 9705}
{"input": "long long int a [ 105 ] [ 105 ] = { 0 } ; int main ( void ) { int n , m ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%lld\" , & a [ i ] [ j ] ) ; for ( int i = m - 2 ; i >= 0 ; i -- ) for ( int j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; for ( int i = 0 ; i < 105 ; i ++ ) for ( int j = 0 ; j < 105 ; j ++ ) a [ i ] [ j ] = 0 ; } return 0 ; }", "label": 0, "id": 14298}
{"input": "int main ( ) { int j = 0 , n ; scanf ( \"%d\" , & n ) ; while ( j < n ) { long long int a [ 50000 ] , m , k ; scanf ( \"%lld\" , & m ) ; for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } k = a [ 0 ] ; { for ( int i = 0 ; i < m ; i ++ ) { if ( k > a [ i ] ) k = a [ i ] ; } } long long int d ; d = k * ( m - 1 ) ; printf ( \"%lld\n\" , d ) ; j ++ ; } return 0 ; }", "label": 0, "id": 16845}
{"input": "int main ( ) { int t , a , b , y ; long long int x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a , y = b ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } printf ( \"%lld   \" , x ) ; x = a , y = b ; while ( x != y ) { if ( x < y ) x = x + a ; else y = y + b ; } printf ( \"%lld\n\" , x ) ; } }", "label": 2, "id": 11075}
{"input": "void printMatrix ( long * * matrix , int n ) { printf ( \"\n\" ) ; int i = 0 ; int j = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( \"%lu \\t\" , matrix [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } } long getMaxPathSum ( long * * matrix , long n ) { int i = 0 ; int j = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { long leftAbove = ( ( i > 0 ) && ( j > 0 ) ) ? matrix [ i - 1 ] [ j - 1 ] : 0 ; long above = ( i > 0 ) ? matrix [ i - 1 ] [ j ] : 0 ; matrix [ i ] [ j ] += ( ( leftAbove >= above ) ? leftAbove : above ) ; } } long maxPath = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( matrix [ n - 1 ] [ j ] > maxPath ) { maxPath = matrix [ n - 1 ] [ j ] ; } } return maxPath ; } int main ( ) { long n = 0 ; long numberOfTestCases = 0 ; long i = 0 ; int j = 0 , k = 0 ; char line [ BUFFERSIZE ] ; const char dlm [ 2 ] = \" \" ; char * token ; scanf ( \"%lu\" , & numberOfTestCases ) ; for ( i = 1 ; i <= numberOfTestCases ; i ++ ) { scanf ( \"%lu\" , & n ) ; long * * matrix = malloc ( sizeof ( long ) * n ) ; if ( matrix ) { for ( j = 0 ; j < n ; j ++ ) { matrix [ j ] = malloc ( sizeof ( long ) * n ) ; } } for ( j = 0 ; j < n ; j ++ ) { scanf ( \" %[^\n]\" , line ) ; token = strtok ( line , dlm ) ; k = 0 ; while ( token != NULL ) { matrix [ j ] [ k ] = atoi ( token ) ; k ++ ; token = strtok ( NULL , dlm ) ; } while ( k < n ) { matrix [ j ] [ k ] = 0 ; k ++ ; } } long factorial = getMaxPathSum ( matrix , n ) ; printf ( \"%lu\" , factorial ) ; printf ( \"\n\" ) ; free ( matrix ) ; } return 0 ; }", "label": 3, "id": 4970}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int lcm ( int a , int b ) { return ( a * b / gcd ( a , b ) ) ; } int main ( ) { int t ; while ( t -- ) { int x , y , u , i ; scanf ( \"%d%d\" , & x , & y ) ; u = gcd ( x , y ) ; i = lcm ( x , y ) ; printf ( \"%d %d\n\" , u , i ) ; } return 0 ; }", "label": 1, "id": 11093}
{"input": "int hcf ( int b , int c ) ; int main ( ) { int t , a , b , c , d , e ; scanf ( \"%d\" , & t ) ; for ( a = 0 ; a < t ; a ++ ) { scanf ( \"%d %d\" , & b , & c ) ; d = hcf ( b , c ) ; e = ( b * c ) / d ; printf ( \"\n%d %d\n\" , d , e ) ; } return 0 ; } int hcf ( int b , int c ) { if ( b % c == 0 ) return c ; else return ( hcf ( c , b % c ) ) ; }", "label": 1, "id": 14281}
{"input": "int main ( ) { int t , n , s , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; s = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( s > a [ j ] ) s = a [ j ] ; } s *= n - 1 ; printf ( \"%d\" , s ) ; } return 0 ; }", "label": 1, "id": 10102}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a , b , p , q ; scanf ( \"%d%d\" , & a , & b ) ; p = a ; q = b ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } printf ( \"%d %d\n\" , a , p * q / a ) ; } return 0 ; }", "label": 1, "id": 20888}
{"input": "int main ( ) { int t ; long long int a , b , c , d ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { c = 1 ; scanf ( \"%lld %lld\" , & a , & b ) ; d = a * b ; while ( c != 0 ) { c = a % b ; a = b ; b = c ; } printf ( \"%lld %lld\n\" , a , ( d / a ) ) ; } return 0 ; }", "label": 0, "id": 301}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , a = 0 , m , b , j ; int arr [ 1000 ] ; scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; a = a + arr [ j ] ; } } b = a / 2 ; printf ( \"%d\n\" , b ) ; } }", "label": 1, "id": 10640}
{"input": "int maxi ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int cases , sz , i , j , grph [ 100 ] [ 100 ] , ans = 0 ; scanf ( \"%d\" , & cases ) ; while ( cases ) { scanf ( \"%d\" , & sz ) ; for ( j = 0 ; j < sz ; j ++ ) { for ( i = 0 ; i <= j ; i ++ ) { scanf ( \"%d\" , & grph [ i ] [ j ] ) ; } } for ( j = sz - 2 ; j >= 0 ; j -- ) { for ( i = j ; i >= 0 ; i -- ) { grph [ i ] [ j ] += maxi ( grph [ i + 1 ] [ j + 1 ] , grph [ i + 1 ] [ j ] ) ; } } printf ( \"%d\n\" , grph [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 9300}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } main ( ) { int n ; while ( n -- ) { int a , b , c ; scanf ( \"%d %d\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%d %d\n\" , c , ( a * b ) / c ) ; } }", "label": 2, "id": 12040}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int a [ 101 ] [ 101 ] , i , j , b [ 101 ] [ 101 ] , t , temp , n , maxi ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & b [ i ] [ j ] ) ; for ( i = 0 ; i <= n ; i ++ ) { a [ 0 ] [ i ] = 0 ; a [ i ] [ 0 ] = 0 ; } a [ 1 ] [ 1 ] = b [ 1 ] [ 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] = max ( a [ i - 1 ] [ j ] + b [ i ] [ j ] , a [ i - 1 ] [ j - 1 ] + b [ i ] [ j ] ) ; } } maxi = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( a [ n ] [ i ] > maxi ) maxi = a [ n ] [ i ] ; } printf ( \"%d\n\" , maxi ) ; } return 0 ; }", "label": 0, "id": 3215}
{"input": "long hcf ( long a , long b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; else if ( a > b ) return hcf ( a - b , b ) ; return hcf ( a , b - a ) ; } int main ( ) { int T ; long long A , B ; scanf ( \"%d\" , & T ) ; for ( int i = 0 ; i < T ; i ++ ) { scanf ( \"%lld %lld\" , & A , & B ) ; long long gcd = 0 , lcm = 0 ; gcd = hcf ( A , B ) ; lcm = ( A * B ) / gcd ; printf ( \"%lld %lld \n\" , gcd , lcm ) ; } }", "label": 0, "id": 6944}
{"input": "int main ( ) { long long int t , i , j , num_of_ele , n , ans ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & num_of_ele ) ; long long int arr [ num_of_ele ] ; for ( j = 0 ; j < num_of_ele ; j ++ ) { scanf ( \"%lld\" , & n ) ; arr [ j ] = n ; } long long int min_element = 0 ; for ( j = 0 ; j < num_of_ele ; j ++ ) { if ( arr [ j ] <= arr [ min_element ] ) min_element = j ; } ans = arr [ min_element ] * ( num_of_ele - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 10324}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%d %d\" , k , ( a * b ) / k ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; }", "label": 1, "id": 936}
{"input": "int main ( ) { int n , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int A [ n ] [ n ] , B [ n ] [ n ] , k , max = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; B [ i ] [ j ] = A [ i ] [ j ] ; } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { for ( k = j ; k <= j + 1 ; k ++ ) { if ( k < n ) { if ( B [ i + 1 ] [ k ] < A [ i + 1 ] [ k ] + B [ i ] [ j ] ) B [ i + 1 ] [ k ] = A [ i + 1 ] [ k ] + B [ i ] [ j ] ; } if ( max < B [ i + 1 ] [ k ] ) max = B [ i + 1 ] [ k ] ; } } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 17995}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; if ( T >= 0 && T <= 1000 ) while ( T -- ) { unsigned long long int A , B ; int H , L ; scanf ( \"%lld%lld\" , & A , & B ) ; if ( A >= 1 && A <= 1000000 && B >= 1 && B <= 1000000 ) { { for ( H = A < B ? A : B ; H >= 1 ; H -- ) if ( A % H == 0 && B % H == 0 ) break ; } { for ( L = A > B ? A : B ; L >= 1 ; L ++ ) if ( L % A == 0 && L % B == 0 ) break ; } printf ( \"--\" , H , L ) ; } } return 0 ; }", "label": 2, "id": 12558}
{"input": "void print_array ( int * * head , int nl ) ; int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int nl ; scanf ( \"%d\" , & nl ) ; int count = 0 ; int * * head = ( int * * ) malloc ( nl * sizeof ( int * ) ) ; int i = 0 ; for ( ; i < nl ; i ++ ) * ( head + i ) = ( int * ) malloc ( nl * sizeof ( int ) ) ; while ( count < nl ) { for ( i = 0 ; i <= count ; i ++ ) scanf ( \"%d\" , * ( head + count ) + i ) ; count ++ ; } printf ( \"%d\" , max ( head , 0 , 0 , nl ) ) ; } } void print_array ( int * * head , int nl ) { int i = 0 ; int j = 0 ; for ( ; i < nl ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) printf ( \"%d \" , * ( * ( head + i ) + j ) ) ; printf ( \"\n\" ) ; } } int max ( int * * head , int i , int j , int nl ) { if ( i < nl - 1 ) { int m ; if ( head [ i + 1 ] [ j ] > head [ i + 1 ] [ j + 1 ] ) m = max ( head , i + 1 , j , nl ) ; else m = max ( head , i + 1 , j + 1 , nl ) ; return ( m + head [ i ] [ j ] ) ; } else return head [ i ] [ j ] ; }", "label": 1, "id": 2083}
{"input": "int main ( ) { int i , j , k , a , op1 , op2 ; scanf ( \"%d\" , k ) ; while ( k -- ) { scanf ( \"%d\" , & a ) ; int p [ a + 1 ] [ a + 1 ] ; for ( i = 1 ; i <= a ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & p [ i ] [ j ] ) ; } } for ( i = a - 1 ; i > 0 ; i -- ) { op1 = 0 ; op2 = 0 ; for ( j = i ; j >= 0 ; j -- ) { op1 = p [ i + 1 ] [ j ] + p [ i ] [ j ] ; op2 = p [ i + 1 ] [ j + 1 ] + p [ i ] [ j ] ; if ( op1 >= op2 ) p [ i ] [ j ] = op1 ; else p [ i ] [ j ] = op2 ; } } printf ( \"%d\n\" , p [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 19425}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ 100 ] [ 100 ] ; while ( n > 0 ) { int i , j , size ; scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = size - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { int max = ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ; arr [ i ] [ j ] += max ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; n -- ; } return 0 ; }", "label": 0, "id": 24119}
{"input": "int main ( ) { int ans [ 100 ] , ans1 [ 100 ] , num , max , j = 0 , k , times , p ; int size , i ; for ( i = 0 ; i < 100 ; i ++ ) { ans [ i ] = 0 ; ans1 [ i ] = 0 ; } scanf ( \"%d\" , & times ) ; for ( p = 0 ; p < times ; p ++ ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < 100 ; i ++ ) { ans [ i ] = 0 ; ans1 [ i ] = 0 ; } max = 0 ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num ) ; if ( j == 0 ) { ans1 [ j ] = ans [ j ] + num ; } else if ( j == i ) { ans1 [ j ] = ans [ j - 1 ] + num ; } else if ( ans [ j ] > ans [ j - 1 ] ) { ans1 [ j ] = ans [ j ] + num ; } else { ans1 [ j ] = ans [ j - 1 ] + num ; } } for ( k = 0 ; k <= i ; k ++ ) { ans [ k ] = ans1 [ k ] ; } } for ( i = 0 ; i < size ; i ++ ) { if ( ans [ i ] > max ) max = ans [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 4435}
{"input": "int main ( ) { int d , n , i , a [ 100 ] [ 100 ] , j ; scanf ( \"%d\" , & d ) ; while ( d -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9194}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 14272}
{"input": "int main ( ) { long long int a [ 99999 ] ; int tc ; long long int i , n , num [ 99999 ] ; long int sum = 0 ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { sum = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = 1 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & num [ i ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { if ( num [ i ] <= num [ i + 1 ] ) a [ i ] += a [ i + 1 ] ; } for ( i = 0 ; i < n ; i ++ ) sum += a [ i ] ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 14839}
{"input": "int main ( int argc , char * argv [ ] ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , m ; int total = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } a [ n ] = 0 ; int mini = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { m = a [ i + 1 ] ; } else { m = a [ i ] ; a [ i + 1 ] = a [ i ] ; } total += m ; } printf ( \"%d\n\" , total ) ; } }", "label": 1, "id": 3027}
{"input": "void max ( ) ; int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { max ( ) ; n -- ; } return 0 ; } void max ( ) { int i , row , j , a [ 100 ] [ 100 ] , max1 , max2 ; scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = row - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { max1 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; max2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( max1 > max2 ) a [ i ] [ j ] = max1 ; else a [ i ] [ j ] = max2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; }", "label": 0, "id": 21897}
{"input": "int main ( ) { int n , gcd , lcm , a , b ; while ( n != 0 ) { scanf ( \"%d%d\" , & a , & b ) ; for ( int i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; n -- ; } return 0 ; }", "label": 2, "id": 14685}
{"input": "int m , n , a [ 100 ] [ 100 ] ; int main ( ) { int i , j , s , z = 0 , k , h , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { h = 0 , z = 0 ; scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } while ( z < m ) { s = a [ 0 ] [ 0 ] , i = 0 , j = 0 ; for ( k = 1 ; k <= m - 1 - z ; k ++ ) { s = s + a [ ++ i ] [ j ] ; } for ( k = 1 ; k <= z ; k ++ ) { s = s + a [ ++ i ] [ ++ j ] ; } if ( s > h ) h = s ; z ++ ; } printf ( \"%d\n\" , h ) ; } return 0 ; }", "label": 1, "id": 26978}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int i , j , k ; scanf ( \"%d\" , & k ) ; int a [ k ] [ k ] ; for ( i = 0 ; i < k ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d%d\" , & a [ i ] [ j ] ) ; } for ( i = k - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= 1 ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 10288}
{"input": "int n ; long int getCost ( long int arr [ ] ) { int j ; long int cost ; cost = 0 ; while ( n != 1 ) { if ( arr [ 0 ] > arr [ 1 ] ) { cost += arr [ 1 ] ; for ( j = 0 ; j < n - 1 ; j ++ ) { arr [ j ] = arr [ j + 1 ] ; } n -- ; } else if ( arr [ 0 ] < arr [ 1 ] ) { cost += arr [ 0 ] ; for ( j = 1 ; j <= n - 1 ; j ++ ) { arr [ j ] = arr [ j + 1 ] ; } n -- ; } } return cost ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; long int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; } long int answer = getCost ( arr ) ; printf ( \"%ld\n\" , answer ) ; } return 0 ; }", "label": 2, "id": 16387}
{"input": "int maxnum ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , a [ 110 ] [ 110 ] , max , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; a [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j ] = maxnum ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; } a [ i ] [ j + 1 ] = 0 ; } a [ n - 1 ] [ 0 ] = max ; for ( i = 0 ; i < n ; i ++ ) if ( a [ n - 1 ] [ i ] > max ) max = a [ n - 1 ] [ i ] ; printf ( \"%d\n\" , max ) ; max = 0 ; } return ( 0 ) ; }", "label": 0, "id": 3539}
{"input": "int n , i , j , k , l , T , n , a , b , c ; int main ( ) { scanf ( \"%d\" , & T ) ; long long unsigned int M [ T ] [ 2 ] ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; c = b ; if ( a % c != 0 || b % c != 0 ) { while ( a % c != 0 ) { c = a % c ; } while ( b % c != 0 ) { c = b % c ; } } M [ i ] [ 0 ] = c ; M [ i ] [ 1 ] = a * b / c ; } for ( l = 0 ; l < T ; l ++ ) { printf ( \"%llu %llu\n\" , M [ l ] [ 0 ] , M [ l ] [ 1 ] ) ; } }", "label": 1, "id": 5735}
{"input": "int main ( ) { int noOfLines , noOfTriangles , i , j , previousIndex = 0 , sum = 0 , max = 0 , count = 0 ; int * * base ; scanf ( \"%d\" , & noOfTriangles ) ; while ( noOfTriangles -- ) { sum = previousIndex = max = count = 0 ; scanf ( \"%d\" , & noOfLines ) ; base = ( int * * ) malloc ( sizeof ( int ) * noOfLines ) ; for ( i = 0 ; i < noOfLines ; i ++ ) { base [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; count = 0 ; for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & base [ i ] [ j ] ) ; if ( j == previousIndex && count < 1 ) { max = base [ i ] [ j ] ; count ++ ; } else if ( j == previousIndex + 1 && count < 2 ) { if ( max < base [ i ] [ j ] ) { max = base [ i ] [ j ] ; previousIndex = j ; } count ++ ; } } sum = sum + max ; } printf ( \"%d\n\" , sum ) ; for ( i = 0 ; i < noOfTriangles ; i ++ ) { free ( base [ i ] ) ; } free ( base ) ; } return 0 ; }", "label": 3, "id": 25478}
{"input": "char buffer [ 65535 ] , * buffer_cursor , * buffer_end ; int number [ 99000 ] ; static int a [ 101 ] , b [ 101 ] , * cur , * old ; int c ; void puti ( int n ) { char temp [ 50 ] ; int i = 49 , j ; while ( n > 0 ) { temp [ i -- ] = n + '0' ; n /= 10 ; } j = i + 1 ; while ( j < 50 ) { putchar ( temp [ j ++ ] ) ; } } int main ( ) { static int i , t , n , i_f , j_f ; int x , j = 0 , k ; int mx = 0 ; c = fread ( buffer , 1 , 65535 , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , 1 , 65535 , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } if ( ( * buffer_cursor ++ ) < '0' ) break ; t = t * 10 + buffer_cursor [ - 1 ] - '0' ; } while ( 1 ) ; for ( i_f = 0 ; i_f < t ; i_f ++ ) { do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , 1 , 65535 , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } if ( ( * buffer_cursor ++ ) < '0' ) break ; n = n * 10 + buffer_cursor [ - 1 ] - '0' ; } while ( 1 ) ; x = n * ( n + 1 ) / 2 ; for ( i = 0 ; i < x ; i ++ ) { do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , 1 , 65535 , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } if ( * ( buffer_cursor ++ ) < '0' ) break ; number [ i ] = number [ i ] * 10 + buffer_cursor [ - 1 ] - '0' ; } while ( 1 ) ; } cur = a ; old = b ; j_f = 0 ; for ( i = 0 ; i < n ; i ++ ) { cur [ 0 ] = number [ j_f ++ ] + old [ 0 ] ; j = 1 ; while ( j < i ) { cur [ j ] = number [ j_f ++ ] + max ( old [ j - 1 ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = number [ j_f ++ ] + old [ j - 1 ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } } mx = 0 ; for ( i = 0 ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; puti ( mx ) ; putchar ( '\n' ) ; for ( k = 0 ; k < 9900 ; k ++ ) number [ k ] = 0 ; for ( k = 0 ; k < 101 ; k ++ ) { a [ k ] = b [ k ] = 0 ; } n = 0 ; } return 0 ; }", "label": 1, "id": 20139}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d.\" , gcd , lcm ) ; return 0 ; }", "label": 1, "id": 4704}
{"input": "long long int a [ MAX ] [ MAX ] ; long long int sum_of_triangle ( int x , int y , int n ) { long long int sum1 = a [ x ] [ y ] ; long long int sum2 = a [ x ] [ y ] ; if ( x <= n ) { if ( x < n ) { sum1 += sum_of_triangle ( x + 1 , y , n ) ; sum2 += sum_of_triangle ( x + 1 , y + 1 , n ) ; if ( sum1 >= sum2 ) return sum1 ; else return sum2 ; } else { return a [ x ] [ y ] ; } } else { return 0 ; } } int main ( ) { int tsc ; scanf ( \"%d\" , & tsc ) ; int c = 1 ; int n ; int i = 0 ; int j = 0 ; long long int sum = 0 ; while ( c <= tsc ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } sum = sum_of_triangle ( 0 , 0 , n - 1 ) ; printf ( \"%lld\n\" , sum ) ; c ++ ; } return 0 ; }", "label": 2, "id": 8900}
{"input": "void gcd ( long long a , long long b ) ; void lcm ( long long a , long long b ) ; main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { long long a , b ; scanf ( \"%lld%lld\" , & a , & b ) ; gcd ( a , b ) ; lcm ( a , b ) ; } } void gcd ( long long a , long long b ) { long long c , i , z ; c = ( a >= b ) ? b : a ; for ( i = 1 ; i <= c ; i ++ ) { if ( a % i == 0 && b % i == 0 ) z = i ; } printf ( \"%lld \" , z ) ; } void lcm ( long long a , long long b ) { long long c , z ; c = ( a >= b ) ? a : b ; z = ( a <= b ) ? b : a ; while ( 1 ) { if ( c % a == 0 && c % b == 0 ) { z = c ; break ; } c = c + z ; } printf ( \"%lld\n\" , z ) ; }", "label": 2, "id": 6950}
{"input": "int maxCal ( int * , int , int , int ) ; int sum_M [ 6000 ] = { 0 } ; int main ( ) { int a [ 6000 ] ; int n , i = 0 , row , j = 0 , tot = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & row ) ; tot = row * ( row + 1 ) / 2 ; for ( j = 0 ; j < tot ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } printf ( \"%d\n\" , maxCal ( a , row , 0 , 1 ) ) ; } return 0 ; } int maxCal ( int * a , int n , int in , int nl ) { int sum = 0 , sum1 = 0 , temp = 0 ; if ( nl == n ) return a [ in ] ; temp = in + nl ; nl = nl + 1 ; if ( sum_M [ in ] == 0 ) { sum1 = a [ in ] + maxCal ( a , n , temp , nl ) ; sum = a [ in ] + maxCal ( a , n , temp + 1 , nl ) ; if ( sum > sum1 ) { sum_M [ in ] = sum ; return sum ; } sum_M [ in ] = sum1 ; return sum1 ; } else { return sum_M [ in ] ; } }", "label": 1, "id": 22380}
{"input": "int sum_n ( int n ) { return ( n * ( n + 1 ) / 2 ) ; } int row_num ( int index ) { int row = 0 ; while ( ( row * ( row + 1 ) / 2 ) <= index ) { row ++ ; } return row ; } void sumtrian ( int * a , int index , int sum , int n , int * answer ) { if ( row_num ( index ) <= n ) { sum = sum + a [ index ] ; if ( row_num ( index ) == n ) { if ( * answer < sum ) { * answer = sum ; } } sumtrian ( a , index + row_num ( index ) , sum , n , answer ) ; sumtrian ( a , index + row_num ( index ) + 1 , sum , n , answer ) ; } } int main ( ) { int m , i , * a , row , * sum , j , flag = 0 ; scanf ( \"%d\" , & m ) ; if ( m >= 0 && m <= 1000 ) { sum = ( int * ) malloc ( sizeof ( int ) * m ) ; for ( i = 0 ; i < m ; i ++ ) { sum [ i ] = 0 ; flag = 0 ; scanf ( \"%d\" , & row ) ; if ( row > 0 && row < 100 ) { a = ( int * ) malloc ( sizeof ( int ) * sum_n ( row ) ) ; for ( j = 0 ; j < sum_n ( row ) ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( a [ j ] <= 0 && a [ j ] > 99 ) { flag = 1 ; break ; } } if ( flag == 0 ) sumtrian ( a , 0 , 0 , row , & sum [ i ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { printf ( \"%d\n\" , sum [ i ] ) ; } } return 0 ; }", "label": 2, "id": 13331}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , n , l , k , max ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 1 ; i < l ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ? a [ i - 1 ] [ j ] : a [ i - 1 ] [ j - 1 ] ) ; } max = a [ l - 1 ] [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) max = a [ l - 1 ] [ i ] > max ? a [ l - 1 ] [ i ] : max ; printf ( \"%d\n\" , max ) ; for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) a [ i ] [ j ] = 0 ; } return 0 ; }", "label": 0, "id": 2520}
{"input": "int main ( ) { long int T , a [ 1000 ] , b [ 1000 ] , g , l , i , j , m ; scanf ( \"%ld\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld %ld\" , & a [ i ] , & b [ i ] ) ; } for ( i = 0 ; i < T ; i ++ ) { g = 0 , l = 0 , m = 0 ; if ( a [ i ] <= b [ i ] ) { m = a [ i ] ; } else { m = b [ i ] ; } for ( j = 1 ; j <= m ; j ++ ) { if ( a [ i ] % j == 0 && b [ i ] % j == 0 ) { g = j ; l = ( a [ i ] * b [ i ] ) / g ; } } printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 502}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 3124}
{"input": "main ( ) { int t , a , b , i , j , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a * b ; i ++ ) { if ( i % a == 0 && i % b == 0 ) { lcm = i ; break ; } } if ( a >= b ) { for ( j = 1 ; j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } } else { for ( j = 1 ; j <= a ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 4909}
{"input": "int main ( void ) { int T , add , x , y , i , gcd , lcm , a , b , t ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 11058}
{"input": "int k , * a [ 101 ] ; int fun ( int i , int j ) { int m , c , b ; if ( k == i + 1 ) return ( a [ i ] [ j ] ) ; m = a [ i ] [ j ] + ( ( c = fun ( i + 1 , j ) ) > ( b = fun ( i + 1 , j + 1 ) ) ? c : b ) ; return m ; } int main ( ) { int n , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < 101 ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; } while ( n ) { n -- ; scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; ; } } ; printf ( \"%d\n\" , fun ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 4830}
{"input": "static char input [ BUFFERSIZE ] ; static int array [ 5050 ] ; int main ( ) { int ret , i , cases = 0 , totLine = 0 , totcase ; int newLine = 0 , index = 0 , toRead , num = 0 , read = 0 ; int currLine , root , iterate = 0 , line , sumfirst , currNode , sum = 0 , sumMax = 0 , back , sums = 0 ; ret = fread ( input , sizeof ( char ) , BUFFERSIZE , stdin ) ; for ( i = 0 ; i < ret && input [ i ] >= '0' ; i ++ ) { cases = cases * 10 + ( input [ i ] - '0' ) ; } while ( input [ i ] < '0' ) i ++ ; totcase = cases ; while ( cases > 0 ) { totLine = read = 0 ; for ( ; i < ret && input [ i ] >= '0' ; i ++ ) { totLine = totLine * 10 + ( input [ i ] - '0' ) ; } toRead = ( ( totLine ) * ( totLine + 1 ) ) / 2 ; while ( input [ i ] < '0' ) i ++ ; while ( read < toRead ) { if ( i == BUFFERSIZE ) { ret = fread ( input , sizeof ( char ) , BUFFERSIZE , stdin ) ; i = 0 ; } else if ( input [ i ] >= '0' ) { num = num * 10 + ( input [ i ] - '0' ) ; i ++ ; } else { if ( input [ i - 1 ] >= '0' ) { array [ index ] = num ; num = 0 ; read ++ ; index ++ ; } i ++ ; } } currLine = 1 ; sumMax = 0 ; while ( currLine < totLine ) { root = ( currLine ) * ( currLine - 1 ) / 2 ; back = root ; sumfirst = sums ; while ( iterate <= ( totLine - currLine ) ) { line = currLine + iterate ; sumfirst = sumfirst + array [ root ] ; currNode = root + line ; sum = sumfirst ; while ( currNode < toRead ) { sum = sum + array [ currNode ] ; currNode = currNode + ++ line ; } if ( sumMax < sum ) { sumMax = sum ; } root = root + currLine + 1 + iterate ; iterate ++ ; } currLine ++ ; iterate = 0 ; sums = sums + back ; } printf ( \"%d\n\" , sumMax ) ; index = 0 ; cases -- ; } return 0 ; }", "label": 1, "id": 9254}
{"input": "int main ( ) { long int t , n1 , n2 , l , a , b ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; n1 = a , n2 = b ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } l = ( a * b ) / n1 ; printf ( \"%ld %ld\n\" , n1 , l ) ; } return 0 ; }", "label": 0, "id": 25890}
{"input": "void move ( int * * p , int x , int y , int sum ) ; int max , n ; main ( ) { int * * p , i , j , t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { max = - 1 ; scanf ( \"%d\" , & n ) ; p = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( j = 0 ; j < n ; j ++ ) * ( p + j ) = malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { p [ i ] [ j ] = - 1 ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & p [ i ] [ j ] ) ; } } move ( p , 0 , 0 , p [ 0 ] [ 0 ] ) ; printf ( \"%d\n\" , max ) ; for ( j = 0 ; j < n ; j ++ ) free ( p + j ) ; } return 0 ; } void move ( int * * p , int x , int y , int sum ) { int tmp ; tmp = sum ; if ( y < n - 1 ) { tmp = sum + p [ y + 1 ] [ x ] ; move ( p , x , y + 1 , tmp ) ; tmp = sum + p [ y + 1 ] [ x + 1 ] ; move ( p , x + 1 , y + 1 , tmp ) ; } if ( y == n - 1 ) { if ( sum > max ) max = sum ; } }", "label": 2, "id": 13095}
{"input": "int main ( ) { int t , n ; int i , j ; int a [ 5 ] [ 5 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 6218}
{"input": "int tri [ 1000 ] [ 1000 ] = { 0 } , arr [ 2002 ] [ 2002 ] = { 0 } ; int main ( ) { int t , n , i , j , key , k = 0 ; scanf ( \"%d\" , & t ) ; while ( t ) { for ( i = 0 ; i < 2002 ; i ++ ) { for ( j = 0 ; j < 2002 ; j ++ ) arr [ i ] [ j ] = 0 ; } scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & tri [ i ] [ j ] ) ; } arr [ 0 ] [ 0 ] = tri [ 0 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { k = 0 ; for ( j = 0 ; j <= 2 * i ; j ++ ) { arr [ i + 1 ] [ k ] = arr [ i ] [ j ] + tri [ i + 1 ] [ j ] ; k ++ ; arr [ i + 1 ] [ k ] = arr [ i ] [ j ] + tri [ i + 1 ] [ j + 1 ] ; k ++ ; } } key = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 2 * i ; j ++ ) { if ( arr [ i ] [ j ] > key ) { key = arr [ i ] [ j ] ; } } } printf ( \"%d\n\" , key ) ; t -- ; } return 0 ; }", "label": 2, "id": 2995}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; long a [ n ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } long dp [ n ] ; for ( i = 0 ; i < n ; i ++ ) dp [ i ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ i - 1 ] ) dp [ i ] = dp [ i - 1 ] + 1 ; } long sum = 0 ; for ( i = 0 ; i < n ; i ++ ) sum = sum + dp [ i ] ; printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 17125}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23934}
{"input": "int main ( void ) { long long int t , a , b , gcd , lcm ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; if ( a < b ) { gcd = a ; lcm = b ; } else { gcd = b ; lcm = a ; } while ( a % gcd != 0 || b % gcd != 0 ) gcd -- ; while ( lcm % a != 0 || lcm % b != 0 ) lcm ++ ; printf ( \"%lld\\t%lld\n\" , gcd , lcm ) ; } }", "label": 2, "id": 10623}
{"input": "void transfer ( int * , int * , int ) ; int main ( ) { int no , num [ 101 ] , temp [ 101 ] , i , j , test , max ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & no ) ; scanf ( \"%d\" , & num [ 0 ] ) ; max = num [ 0 ] ; for ( i = 1 ; i < no ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & temp [ j ] ) ; if ( j == 0 ) temp [ j ] += num [ j ] ; else if ( j == i ) temp [ j ] += num [ j - 1 ] ; else { if ( num [ j ] > num [ j - 1 ] ) temp [ j ] += num [ j ] ; else temp [ j ] += num [ j - 1 ] ; } if ( temp [ j ] > max ) max = temp [ j ] ; } transfer ( num , temp , j ) ; } printf ( \"%d\n\" , max ) ; } return 0 ; } void transfer ( int * a , int * b , int i ) { int j ; for ( j = 0 ; j < i ; j ++ ) a [ j ] = b [ j ] ; }", "label": 0, "id": 11117}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , min = 100000 ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( \"%lld\n\" , ( long long ) min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 20239}
{"input": "int sum ( int a [ 100 ] [ 100 ] , int i , int j ) ; int N ; int main ( ) { int T , i , j , k , a [ 100 ] [ 100 ] , result ; scanf ( \"%d\" , & T ) ; for ( k = 0 ; k < T ; k ++ ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } result = sum ( a , 0 , 0 ) ; printf ( \"%d\n\" , result ) ; } return 0 ; } int sum ( int a [ 100 ] [ 100 ] , int i , int j ) { int b [ 100 ] [ 100 ] = { { 0 } , { 0 } } ; int t ; if ( i > N ) { return 0 ; } if ( b [ i ] [ j ] != 0 ) { return b [ i ] [ j ] ; } t = MAX ( sum ( a , i + 1 , j ) , sum ( a , i + 1 , j + 1 ) ) + a [ i ] [ j ] ; b [ i ] [ j ] = t ; return t ; }", "label": 3, "id": 26398}
{"input": "int main ( ) { int test ; int k ; int last ; int last1 ; int n , i ; int j ; long max ; scanf ( \"%d\" , & test ) ; while ( test -- ) { long A [ 200 ] = { 0 } ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { last = 0 ; for ( j = 0 ; j <= i ; j ++ ) { last1 = A [ j ] ; scanf ( \"%d\" , & k ) ; if ( last > A [ j ] ) A [ j ] = last + k ; else A [ j ] = A [ j ] + k ; last = last1 ; } } max = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( max < A [ i ] ) max = A [ i ] ; } printf ( \"%ld\" , max ) ; } return 0 ; }", "label": 1, "id": 5897}
{"input": "struct arr { int a [ 40 ] ; } b [ 10 ] , c [ 10 ] ; int n , i , n1 , j , k , max , m ; void job ( ) ; int main ( ) { printf ( \" Enter the number of test cases : \" ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( \" Enter the number of lines :\" ) ; scanf ( \"%d\" , & n1 ) ; for ( j = 0 ; j < n1 ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & b [ j ] . a [ k ] ) ; } } job ( ) ; } } void job ( ) { c [ 0 ] . a [ 0 ] = b [ 0 ] . a [ 0 ] ; for ( j = 1 ; j < n1 ; j ++ ) { for ( k = 0 , m = 0 ; k < ( 2 * j ) ; k += 2 , m ++ ) { if ( j == 1 ) { c [ j ] . a [ k ] = b [ j ] . a [ k ] + b [ j - 1 ] . a [ k ] ; c [ j ] . a [ k + 1 ] = b [ j - 1 ] . a [ k ] + b [ j ] . a [ k + 1 ] ; } else { c [ j ] . a [ k ] = b [ j ] . a [ m ] + c [ j - 1 ] . a [ m ] ; c [ j ] . a [ k + 1 ] = b [ j ] . a [ m + 1 ] + c [ j - 1 ] . a [ m ] ; } } } max = c [ n1 - 1 ] . a [ 0 ] ; for ( k = 0 ; k < 2 * ( n1 - 1 ) ; k ++ ) { if ( c [ n1 - 1 ] . a [ k ] > max ) { max = c [ n1 - 1 ] . a [ k ] ; } } printf ( \" The max is :%d  \" , max ) ; }", "label": 3, "id": 17567}
{"input": "int main ( ) { int t ; long long int a , b , c , d , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; c = a , d = b ; while ( a != b ) { if ( a < b ) b = b - a ; else a = a - b ; } x = c * d / a ; printf ( \"%lld %lld\n\" , a , x ) ; } return 0 ; }", "label": 0, "id": 13128}
{"input": "int main ( ) { int a , b , T , i , GCD ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { for ( i = b ; i >= 1 ; i -- ) { if ( b % i == 0 && a % i == 0 ) { GCD = i ; break ; } } printf ( \"%d %d\n\" , GCD , ( a * b ) / GCD ) ; } else if ( b > a ) { for ( i = a ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { GCD = i ; break ; } } printf ( \"%d %d\n\" , GCD , ( a * b ) / GCD ) ; } } return 0 ; }", "label": 1, "id": 25970}
{"input": "int main ( void ) { int N , line ; scanf ( \"%d\" , & N ) ; while ( N -- ) { scanf ( \"%d\" , & line ) ; int * * input ; input = ( int * * ) malloc ( line * sizeof ( int * ) ) ; int j , i = 0 ; for ( ; i < line ; i ++ ) { input [ i ] = malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & input [ i ] [ j ] ) ; } int output [ line ] [ line ] ; for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j < line ; j ++ ) output [ i ] [ j ] = 0 ; } for ( j = 0 ; j < line ; j ++ ) output [ line - 1 ] [ j ] = input [ line - 1 ] [ j ] ; for ( i = line - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { int max ; if ( output [ i + 1 ] [ j + 1 ] > output [ i + 1 ] [ j ] ) max = output [ i + 1 ] [ j + 1 ] ; else max = output [ i + 1 ] [ j ] ; output [ i ] [ j ] = max + input [ i ] [ j ] ; } } printf ( \"%d\n\" , output [ 0 ] [ 0 ] ) ; for ( i = 0 ; i < line ; i ++ ) { free ( input [ i ] ) ; free ( output [ i ] ) ; } free ( input ) ; free ( output ) ; } }", "label": 3, "id": 14094}
{"input": "int max ( int p , int q ) { if ( p > q ) return p ; else return q ; } int main ( ) { int cases , i , j ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { int n ; scanf ( \"%d\" , & n ) ; int array [ 101 ] [ n + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) for ( j = 0 ; j <= n ; j ++ ) array [ i ] [ j ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & array [ i ] [ j ] ) ; if ( i != 0 ) array [ i ] [ j ] += max ( array [ i - 1 ] [ j ] , array [ i - 1 ] [ j - 1 ] ) ; } } int max = array [ n ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( max < array [ n ] [ i ] ) max = array [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 5381}
{"input": "int memo [ 105 ] [ 105 ] ; int path ( int no [ 105 ] [ 105 ] , int row , int col , int tot ) { if ( memo [ row ] [ col ] != - 1 ) return memo [ row ] [ col ] ; if ( row == tot - 1 ) { memo [ row ] [ col ] = no [ row ] [ col ] ; } else { memo [ row ] [ col ] = no [ row ] [ col ] + max ( path ( no , row + 1 , col , tot ) , path ( no , row + 1 , col + 1 , tot ) ) ; } return memo [ row ] [ col ] ; } int main ( ) { int n , i ; scanf ( \"%d\" , & n ) ; int ans [ n ] ; int no [ 105 ] [ 105 ] ; int k , j , lines ; for ( i = 0 ; i < n ; i ++ ) { memset ( memo , - 1 , sizeof ( memo ) ) ; scanf ( \"%d\" , & lines ) ; if ( lines <= 0 ) break ; for ( k = 0 ; k < lines ; k ++ ) { for ( j = 0 ; j <= k ; j ++ ) { scanf ( \"%d\" , & no [ k ] [ j ] ) ; } } ans [ i ] = path ( no , 0 , 0 , lines ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , ans [ i ] ) ; } return 0 ; }", "label": 0, "id": 24088}
{"input": "int main ( void ) { int t , n , i , k , l , j ; scanf ( \"%d\" , & t ) ; for ( l = 1 ; l <= t ; l ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { int sum1 = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; int sum2 = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; if ( sum1 > sum2 ) a [ i - 1 ] [ j ] = sum1 ; else a [ i - 1 ] [ j ] = sum2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 21948}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int t , gcd1 ; int A , B ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & A , & B ) ; gcd1 = gcd ( A , B ) ; printf ( \"%d %d\n\" , gcd1 , A * B / gcd1 ) ; } return 0 ; }", "label": 1, "id": 3573}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; long int min = 100000 ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 1903}
{"input": "int tabulate ( long int arr [ ] , int n ) { int l , i , j , tab [ n ] [ n ] ; for ( i = 1 ; i <= n ; i ++ ) { tab [ i ] [ i ] = 1 ; } for ( l = 2 ; l <= n ; l ++ ) { for ( i = 1 ; i <= n - l + 1 ; i ++ ) { j = l + i - 1 ; if ( j == ( i + 1 ) ) { if ( arr [ j ] >= arr [ i ] ) tab [ i ] [ j ] = 1 ; } else { if ( tab [ i ] [ j - 1 ] == 1 ) { if ( arr [ j ] >= arr [ j - 1 ] ) tab [ i ] [ j ] = 1 ; } } } } int c = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { if ( tab [ i ] [ j ] == 1 ) c ++ ; } } return c ; } int main ( ) { int no , t , n , i ; long int arr [ 100000 ] ; scanf ( \"%d\" , & t ) ; if ( t >= 1 && t <= 5 ) { while ( t >= 1 ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; } no = tabulate ( arr , n ) ; printf ( \"%d\n\" , no ) ; t -- ; } } return 0 ; }", "label": 3, "id": 6018}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , line , i , t , j ; char p ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & line ) ; for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = line - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) ? a [ i + 1 ] [ j + 1 ] : a [ i + 1 ] [ j ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26522}
{"input": "int main ( ) { int t , i , j , n ; long long int sum , p ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { p = 1 ; while ( j < n - 1 ) { if ( a [ j ] > a [ j + 1 ] ) { break ; } j ++ ; p ++ ; } sum += ( p * ( p - 1 ) ) / 2 + p ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 6755}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { call ( ) ; t -- ; } return 0 ; } call ( ) { int n , i , j ; long long int a [ 100005 ] , c = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 1 ; i < n + 1 ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; i = 1 ; while ( i < n + 1 ) { j = 0 ; while ( j < n - i ) { if ( a [ i + j ] <= a [ i + j + 1 ] ) j ++ ; else break ; } c += ( j + 1 ) * ( j + 2 ) / 2 ; i = i + j + 1 ; } printf ( \"%lld\n\" , c ) ; }", "label": 0, "id": 20428}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int count = 0 ; int l = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > l ) { l = a [ i ] ; } } if ( l != 7 ) count = 10 ; i = 0 ; j = n - 1 ; while ( i < j ) { if ( a [ i ] == a [ j ] ) { i ++ ; j -- ; } else { count = 10 ; break ; } } if ( count == 0 ) printf ( \"yes\n\" ) ; else printf ( \"no\n\" ) ; } return 0 ; }", "label": 2, "id": 24147}
{"input": "main ( ) { long int t ; scanf ( \"%ld\" , & t ) ; for ( long int i = 0 ; i < t ; i ++ ) { long int n ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( long int j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } long int min ; min = 0 ; for ( long int j = 1 ; j < n ; j ++ ) { if ( a [ min ] > a [ j ] ) min = j ; } a [ min ] = a [ min ] * ( n - 1 ) ; printf ( \"%ld\n\" , a [ min ] ) ; } }", "label": 0, "id": 2458}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; int gcd , lcm , a , b ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"\n%d %d\" , & a , & b ) ; for ( j = 1 ; j <= a ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } lcm = ( a * b ) / gcd ; printf ( \"\n%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 4917}
{"input": "int a [ 100 ] [ 100 ] ; int larger_sum ( int , int , int ) ; int main ( ) { int n , i , temp ; scanf ( \"%d\" , & n ) ; i = 0 ; while ( i < n ) { scanf ( \"%d\" , & temp ) ; int j = 1 ; while ( j <= temp ) { int k ; for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } j ++ ; } int sum = larger_sum ( 1 , 1 , temp ) ; printf ( \"%d\n\" , sum ) ; i ++ ; } } int larger_sum ( int j , int k , int temp ) { if ( j < temp ) { int below = larger_sum ( j + 1 , k , temp ) ; int right = larger_sum ( j + 1 , k + 1 , temp ) ; if ( below > right ) return ( below + a [ j ] [ k ] ) ; else return ( right + a [ j ] [ k ] ) ; } return ( a [ j ] [ k ] ) ; }", "label": 2, "id": 26724}
{"input": "struct mynodes { int value ; } ; struct mynodes m [ 100 ] [ 100 ] ; int main ( ) { int i , T , n , k , j , max ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { max = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & m [ j ] [ k ] . value ) ; } for ( j = ( n - 2 ) ; j >= 0 ; j -- ) { for ( k = j ; k >= 0 ; k -- ) { max = ( m [ j + 1 ] [ k ] . value > m [ j + 1 ] [ k + 1 ] . value ) ? m [ j + 1 ] [ k ] . value : m [ j + 1 ] [ k + 1 ] . value ; m [ j ] [ k ] . value += max ; } } printf ( \"\n%d\" , m [ 0 ] [ 0 ] . value ) ; } return 0 ; }", "label": 0, "id": 450}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; long long a [ n ] , c = 1 , s = 1 , q , f ; scanf ( \"%lld\" , & q ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( \"%lld\" , & f ) ; if ( f >= q ) { c ++ ; q = f ; } else { c = 1 ; q = f ; } s += c ; } printf ( \"%lld \n\" , s ) ; s = 1 ; c = 1 ; } return 0 ; }", "label": 1, "id": 7418}
{"input": "int fin ( ) { int x = 0 , c ; while ( ( c = getcx ) < '0' || c > '9' ) ; while ( c >= '0' && c <= '9' ) x = ( x << 3 ) + ( x << 1 ) + c - '0' , c = getcx ; return x ; } main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int a [ 100 ] [ 100 ] , n , i , j , c = 0 ; scanf ( \"%d\" , & n ) ; if ( n > 0 ) { a [ 0 ] [ 0 ] = fin ( ) ; for ( i = 1 ; i < n ; i ++ ) { a [ i ] [ 0 ] = fin ( ) + a [ i - 1 ] [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) a [ i ] [ j ] = fin ( ) + ( max ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) ) ; a [ i ] [ j ] = fin ( ) + a [ i - 1 ] [ j - 1 ] ; } for ( j = 0 ; j < n ; j ++ ) c = max ( c , a [ n - 1 ] [ j ] ) ; printf ( \"%d\n\" , c ) ; } else printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 0, "id": 4373}
{"input": "int main ( ) { int T , n , i , min ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 18396}
{"input": "int main ( void ) { int a [ 100 ] [ 100 ] ; int i , j , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = max ( a [ i ] [ j ] + a [ i + 1 ] [ j ] , a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24019}
{"input": "int main ( ) { int i , t , j , k , a , b , n , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { gcd = 0 ; lcm = 0 ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) n = b ; else n = a ; for ( j = 1 ; j <= n ; j ++ ) { if ( a % j == 0 && b % j == 0 && j > gcd ) gcd = j ; if ( k % a == 0 && k % b == 0 ) { lcm = k ; break ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 20380}
{"input": "int main ( ) { int v ; long long int i , z , a , c , b , o , m , n , d ; scanf ( \"%d\" , & v ) ; while ( v -- ) { scanf ( \"%lld %lld\" , & a , & c ) ; b = a ; d = c ; i = 2 ; o = 1 ; while ( 1 ) { abc : if ( a % i == 0 ) { a = a / i ; m = i ; } else { m = 1 ; } if ( c % i == 0 ) { c = c / i ; n = i ; } else { n = 1 ; } if ( m == n ) { o = o * m ; } if ( ( a % i != 0 && c % i != 0 ) && ( a != 1 || c != 1 ) ) { i ++ ; goto abc ; } if ( a == 1 || c == 1 ) break ; } z = ( b * d ) / o ; printf ( \"\n%lld %lld\n\" , o , z ) ; } return 0 ; }", "label": 2, "id": 17177}
{"input": "int gcd ( int a , int b ) { int i ; for ( i = a ; i > 0 ; i -- ) { if ( a % i == 0 && b % i == 0 ) break ; } return i ; } int main ( ) { int a , b , g , t ; scanf ( \"%d\" , & t ) ; g = ( a * b ) / gcd ( a , b ) ; while ( t > 0 ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , g ) ; -- t ; } return 0 ; }", "label": 3, "id": 16361}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { arr [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { int tarr [ i + 1 ] ; for ( j = 0 ; j <= i ; j ++ ) { int temp ; scanf ( \"%d\" , & temp ) ; tarr [ j ] = temp ; if ( j == 0 ) { tarr [ j ] += arr [ j ] ; } else { tarr [ j ] += ( arr [ j ] > arr [ j - 1 ] ) ? ( arr [ j ] ) : ( arr [ j - 1 ] ) ; } } for ( j = 0 ; j < i + 1 ; j ++ ) { arr [ j ] = tarr [ j ] ; } } int max = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 26406}
{"input": "long long int GCD ( long long int , long long int ) ; long long int LCM ( long long int , long long int ) ; void swapG ( long long int * , long long int * ) ; int main ( ) { long long int T , A , B , i ; long long int * ptra , * ptrb ; scanf ( \"%lld\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & A , & B ) ; ptra = & A ; ptrb = & B ; swapG ( ptra , ptrb ) ; printf ( \"%lld %lld\n\" , GCD ( A , B ) , ( A * B ) / GCD ( A , B ) ) ; } return 0 ; } long long int LCM ( long long int a , long long int b ) { long long int i , temp = 1 ; for ( i = 2 ; i <= a ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) && ( temp < i ) ) temp = i ; } if ( temp == 1 ) return a * b ; else return temp * LCM ( a / temp , b / temp ) ; } long long int GCD ( long long int a , long long int b ) { if ( b % a == 0 ) return a ; else return GCD ( b % a , a ) ; } void swapG ( long long int * A , long long int * B ) { long long int temp ; if ( * A > * B ) { temp = * A ; * A = * B ; * B = temp ; } }", "label": 0, "id": 2109}
{"input": "int main ( ) { int n1 , n2 , T , i , gcd , lcm , flag , least ; scanf ( \"%d\" , & T ) ; while ( T -- ) { flag = 0 ; gcd = 1 ; scanf ( \"%d%d\" , & n1 , & n2 ) ; if ( n1 == n2 ) { gcd = n1 ; } else { if ( n1 < n2 ) { least = n1 ; } else { least = n2 ; } i = least ; while ( i >= 1 && flag == 0 ) { if ( n1 % i == 0 && n2 % i == 0 ) { flag = 1 ; gcd = i ; } i -- ; } } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return ( 0 ) ; }", "label": 1, "id": 18205}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { int N ; scanf ( \"%d\" , & N ) ; int arr [ N ] ; int i , min = 100000 ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( \"%d\n\" , min * ( N - 1 ) ) ; T -- ; } return 0 ; }", "label": 0, "id": 20129}
{"input": "long long gcd ( long long a , long long b ) { if ( a > b ) { long long c = a % b ; if ( a % b != 0 ) { return gcd ( b , c ) ; } else if ( a % b == 0 ) { return b ; } } else if ( a == b ) { return a ; } else { long long c = b % a ; if ( b % a != 0 ) { return gcd ( a , c ) ; } else if ( b % a == 0 ) { return a ; } } } int main ( ) { int t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long long a , b ; scanf ( \"%lld %lld\" , & a , & b ) ; long long g = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , g , ( a * b ) / g ) ; } }", "label": 0, "id": 18658}
{"input": "int main ( ) { int n , t , i = 0 , j , k , a [ 10 ] [ 10 ] , sum ; scanf ( \"%d\" , & n ) ; while ( i < n ) { scanf ( \"%d\" , & t ) ; sum = 0 ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; sum = sum + a [ j ] [ k ] ; } } printf ( \"%d\n\" , sum / 2 ) ; i ++ ; } return 0 ; }", "label": 3, "id": 4597}
{"input": "void find_max_sum ( int t [ ] , int i , int l , int rows , int sum , int * m_sum ) ; int main ( ) { int triangle [ MAX ] ; int i , j , t ; int rows ; int t_len ; int max_sum = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & rows ) ; t_len = ( ( rows + 1 ) * rows ) / 2 ; for ( j = 0 ; j < t_len ; j ++ ) scanf ( \"%d\" , & triangle [ j ] ) ; find_max_sum ( triangle , 0 , 0 , rows , 0 , & max_sum ) ; printf ( \"%d\n\" , max_sum ) ; } } void find_max_sum ( int t [ ] , int i , int l , int rows , int sum , int * m_sum ) { if ( l == rows ) { if ( sum > * m_sum ) * m_sum = sum ; return ; } sum += t [ i ] ; find_max_sum ( t , LEFT ( i , l ) , l + 1 , rows , sum , m_sum ) ; find_max_sum ( t , RIGHT ( i , l ) , l + 1 , rows , sum , m_sum ) ; }", "label": 2, "id": 843}
{"input": "main ( ) { int t , i ; double a , b , h , l ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { h = 1 ; scanf ( \"%lf%lf\" , & a , & b ) ; for ( i = 1 ; i <= a ; i ++ ) if ( ( int ) a % i == 0 && ( int ) b % i == 0 ) h = i ; l = ( a * b ) / h ; printf ( \"%-20.0lf\n%-20.0lf\n\" , h , l ) ; t -- ; } }", "label": 2, "id": 1333}
{"input": "void main ( ) { int i , j , n , t , temp = 0 ; scanf ( \"%d\" , & t ) ; int b [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; temp = 0 ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) temp += a [ j + 1 ] ; else temp += a [ j ] ; } b [ i ] = temp ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"\\t %d\" , b [ i ] ) ; }", "label": 1, "id": 5379}
{"input": "int main ( ) { long long int T , N , i , min ; scanf ( \"%lld\" , & T ) ; while ( T -- ) { scanf ( \"%lld\" , & N ) ; long long int arr [ N ] ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; } min = arr [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( \"%lld\n\" , min * ( N - 1 ) ) ; } return 0 ; }", "label": 0, "id": 1645}
{"input": "int rec ( int n , int r , int c , int ( * arr ) [ n ] ) { if ( r >= n ) return 0 ; int t1 = rec ( n , r + 1 , c , arr ) ; int t2 = rec ( n , r + 1 , c + 1 , arr ) ; int t ; if ( t1 > t2 ) t = t1 + arr [ r ] [ c ] ; else if ( t1 < t2 ) t = t2 + arr [ r ] [ c ] ; else if ( t1 == t2 ) t = t1 + arr [ r ] [ c ] ; return t ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , r , c ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( r = 0 ; r < n ; ++ r ) { for ( c = 0 ; c <= r ; ++ c ) { scanf ( \"%d\" , & arr [ r ] [ c ] ) ; } } int ( * ptr ) [ n ] = arr ; int sum = rec ( n , 0 , 0 , ptr ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 225}
{"input": "main ( ) { int i , j , * a , b , count = 0 , t , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & b ) ; a = ( int * ) malloc ( b * sizeof ( int ) ) ; for ( i = 0 ; i < b ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { j = i + 1 ; l = 2 ; if ( j == b - 1 ) { count = count + l * l - l * ( l + 1 ) / 2 ; i = j ; } else { while ( j < b - 1 ) { if ( a [ j ] > a [ j + 1 ] ) { count = count + l * l - l * ( l + 1 ) / 2 ; i = j ; break ; } l ++ ; j ++ ; } } } } printf ( \"%d\n\" , count + b ) ; count = 0 ; } free ( a ) ; return 0 ; }", "label": 1, "id": 16622}
{"input": "long int GCD ( long int a , long int b ) { if ( a % b == 0 ) return b ; else return GCD ( b , a % b ) ; } int main ( void ) { int t ; long int a , b , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%ld%ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 12917}
{"input": "int main ( void ) { int n , i , sum = 0 , a , j , s ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & s ) ; for ( j = 0 ; j < ( s * ( s + 1 ) ) / 2 ; j ++ ) { scanf ( \"%d\" , & a ) ; sum += a ; } printf ( \"%d\" , sum ) ; sum = 0 ; } return 0 ; }", "label": 1, "id": 21647}
{"input": "int main ( ) { int t , i , j , temp , r ; long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] < a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } n = n - 1 ; r = n * a [ n ] ; printf ( \"%d\n\" , r ) ; } }", "label": 0, "id": 1667}
{"input": "int a [ 101 ] [ 101 ] , temp [ 101 ] [ 101 ] , result [ 1000 ] ; int calculate ( int row , int col ) ; int n , t , sum ; int main ( ) { int i , j , t_temp ; scanf ( \"%d\" , & t ) ; t_temp = t ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { temp [ i ] [ j ] = - 1 ; } } sum = calculate ( 0 , 0 ) ; result [ t + 1 ] = sum ; } printf ( \"\n\" ) ; for ( i = t_temp ; i > 0 ; i -- ) { printf ( \"%d\n\" , result [ i ] ) ; } return 0 ; } int calculate ( int row , int col ) { int path1 , path2 ; if ( row > n ) { return 0 ; } else if ( temp [ row ] [ col ] != - 1 ) { return temp [ row ] [ col ] ; } else { path1 = calculate ( row + 1 , col ) ; path2 = calculate ( row + 1 , col + 1 ) ; if ( path1 > path2 ) { sum = a [ row ] [ col ] + path1 ; } else { sum = a [ row ] [ col ] + path2 ; } temp [ row ] [ col ] = sum ; return sum ; } }", "label": 1, "id": 11536}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , min ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; if ( min > a [ j ] ) min = a [ j ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 16805}
{"input": "void GCD ( long , long ) ; void LCM ( long , long ) ; int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { long A , B ; scanf ( \"%ld %ld\" , & A , & B ) ; GCD ( A , B ) ; LCM ( A , B ) ; } } void GCD ( long x , long y ) { long H ; for ( H = x < y ? x : y ; H >= 1 ; H -- ) if ( x % H == 0 && y % H == 0 ) break ; printf ( \"%ld\n\" , H ) ; } void LCM ( long x , long y ) { long L ; for ( L = x > y ? x : y ; L <= x * y ; L ++ ) if ( L % x == 0 && L % y == 0 ) break ; printf ( \"%ld\n\" , L ) ; }", "label": 2, "id": 7415}
{"input": "int main ( ) { long long t , i , j ; scanf ( \"%lli\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long long n , k = 1 , r = 0 ; scanf ( \"%lli\n\" , & n ) ; long long * a = malloc ( sizeof ( long long ) * n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lli \" , & a [ j ] ) ; if ( j != 0 ) { if ( a [ j ] > a [ j - 1 ] ) k ++ ; else { r += k * ( k + 1 ) / 2 ; k = 1 ; } } } r += k * ( k + 1 ) / 2 ; printf ( \"%lli\n\" , r ) ; } }", "label": 0, "id": 26692}
{"input": "int main ( ) { int a , b , l , g , t , small ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; small = ( a < b ) ? a : b ; g = small ; while ( g > 1 ) { if ( ( a % g == 0 ) && ( b % g == 0 ) ) break ; g -- ; } l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 9148}
{"input": "int a [ 101 ] [ 101 ] ; int main ( ) { int t , n , m , j , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 786}
{"input": "int maxint ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int cases , i , rows , j , curr , max = 0 ; scanf ( \"%d\" , & cases ) ; while ( cases > 0 ) { int prevmax [ 101 ] = { 0 } , maxpath [ 101 ] = { 0 } ; scanf ( \"%d\" , & rows ) ; for ( i = 1 ; i <= rows ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & curr ) ; maxpath [ j ] = maxint ( prevmax [ j ] , prevmax [ j - 1 ] ) + curr ; } for ( j = 1 ; j <= i ; j ++ ) prevmax [ j ] = maxpath [ j ] ; } max = 0 ; for ( i = 1 ; i <= rows ; i ++ ) { if ( maxpath [ i ] > max ) max = maxpath [ i ] ; } printf ( \"%d\n\" , max ) ; cases -- ; } return 0 ; }", "label": 0, "id": 25494}
{"input": "int gcd ( int m , int n ) { if ( n == 0 ) return m ; else return gcd ( n , m % n ) ; } int lcm ( int m , int n ) { int max ; if ( m > n ) max = m ; else max = n ; while ( 1 ) { if ( max % m == 0 && max % n == 0 ) { return max ; break ; } ++ max ; } } int main ( ) { int t , a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( a , b ) ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 2, "id": 13983}
{"input": "int main ( ) { int t , n , i , j , k , x , p , z , sum ; int * a ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i <= t - 1 ; i ++ ) { scanf ( \"%d\" , & n ) ; a = malloc ( sizeof ( int ) * n ) ; for ( j = 0 ; j <= n - 1 ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( k = 0 ; k <= n - 1 ; k ++ ) { for ( x = 0 ; x <= n - 2 - k ; x ++ ) { if ( a [ x ] > a [ x + 1 ] ) { p = a [ x ] ; a [ x ] = a [ x + 1 ] ; a [ x + 1 ] = p ; } } } sum = 0 ; if ( n % 2 == 0 ) { for ( z = 0 ; z <= n - 2 ; z = z + 2 ) sum = sum + a [ 0 ] ; } else { for ( z = 0 ; z <= n - 1 ; z = z + 2 ) sum = sum + a [ 0 ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 14687}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int data [ n ] [ n ] ; int data2 [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & data [ i ] [ j ] ) ; data2 [ i ] [ j ] = data [ i ] [ j ] ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { data2 [ i ] [ j ] = data2 [ i ] [ j ] + ( data2 [ i + 1 ] [ j ] > data2 [ i + 1 ] [ j + 1 ] ? data2 [ i + 1 ] [ j ] : data2 [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , data2 [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9811}
{"input": "int main ( ) { int t , i , j ; int row , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = row - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 18448}
{"input": "main ( ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int A [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) if ( i >= j ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; else A [ i ] [ j ] = 0 ; } int sum = A [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = i - 1 ; j <= i ; j ++ ) sum = sum + A [ i ] [ j ] ; } printf ( \"%d\n\" , sum ) ; return 0 ; }", "label": 1, "id": 22224}
{"input": "long long int a [ 105 ] [ 105 ] = { 0 } ; int main ( ) { int n , m ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%lld\" , & a [ i ] [ j ] ) ; for ( int i = m - 2 ; i >= 0 ; i -- ) for ( int j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; for ( int i = 0 ; i < 105 ; i ++ ) for ( int j = 0 ; j < 105 ; j ++ ) a [ i ] [ j ] = 0 ; } return 0 ; }", "label": 0, "id": 25264}
{"input": "int main ( void ) { int T , a , b , i , gcd , lcm , num , den , rem ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { gcd = 0 ; lcm = 0 ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( \"%d%d \n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 12821}
{"input": "int main ( ) { int n , t , i , j , sum , arr [ 100 ] [ 100 ] , temp ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; if ( j == 1 && i > 1 ) arr [ i ] [ j ] += arr [ i - 1 ] [ j ] ; else { if ( arr [ i - 1 ] [ j ] > arr [ i - 1 ] [ j - 1 ] ) temp = arr [ i - 1 ] [ j ] ; else temp = arr [ i - 1 ] [ j - 1 ] ; arr [ i ] [ j ] += temp ; } } } sum = arr [ n ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) if ( arr [ n ] [ i ] > sum ) sum = arr [ n ] [ i ] ; printf ( \"%d\n\" , sum ) ; t -- ; } return 0 ; }", "label": 3, "id": 22747}
{"input": "void max ( ) ; int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { max ( ) ; n -- ; } return 0 ; } void max ( ) { int i , row , j , a [ 100 ] [ 100 ] , max1 , max2 ; scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = row - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { max1 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; max2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( max1 > max2 ) a [ i ] [ j ] = max1 ; else a [ i ] [ j ] = max2 ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; }", "label": 1, "id": 16681}
{"input": "int main ( ) { long t , i , j , n , a [ 102 ] [ 102 ] , maxm = - 1 ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( j - 1 >= 1 ) { if ( j == i ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += ( ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) ? a [ i - 1 ] [ j ] : a [ i - 1 ] [ j - 1 ] ) ; } else a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } } maxm = - 1 ; for ( j = 1 ; j <= n ; j ++ ) if ( maxm < a [ n ] [ j ] ) maxm = a [ n ] [ j ] ; printf ( \"%d\n\" , maxm ) ; } return 0 ; }", "label": 1, "id": 26020}
{"input": "typedef struct noeud { int id ; struct noeud * right , * left ; } noeud ; int main ( ) { noeud * tete ; int i , T , k , n , m , j , l ; scanf ( \"%d\" , & T ) ; for ( l = 0 ; l < T ; l ++ ) { scanf ( \"%d\" , & n ) ; if ( n == 1 ) { scanf ( \"%d\" , & m ) ; printf ( \"%d\" , m ) ; return 0 ; } else { int tab [ n ] [ n ] ; j = 0 ; while ( j < n ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & tab [ j ] [ k ] ) ; } j ++ ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( tab [ i ] [ j ] > tab [ i ] [ j + 1 ] ) { tab [ i - 1 ] [ j ] = tab [ i - 1 ] [ j ] + tab [ i ] [ j ] ; } else { tab [ i - 1 ] [ j ] = tab [ i - 1 ] [ j ] + tab [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , tab [ 0 ] [ 0 ] ) ; } } return 0 ; }", "label": 0, "id": 12154}
{"input": "int main ( ) { unsigned int i , j , a [ 100 ] [ 100 ] , sum = 0 , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( n == 1 ) printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; else if ( n == 2 ) printf ( \"%d\n\" , ( a [ 1 ] [ 0 ] > a [ 1 ] [ 1 ] ? a [ 0 ] [ 0 ] + a [ 1 ] [ 0 ] : a [ 0 ] [ 0 ] + a [ 1 ] [ 1 ] ) ) ; else { for ( i = n - 2 ; i > 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , ( a [ 1 ] [ 0 ] > a [ 1 ] [ 1 ] ? a [ 0 ] [ 0 ] + a [ 1 ] [ 0 ] : a [ 0 ] [ 0 ] + a [ 1 ] [ 1 ] ) ) ; } } return 0 ; }", "label": 0, "id": 4312}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%ld\" , & n ) ; long long int a [ n ] , i , min = 999999 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] <= min ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 14353}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 15884}
{"input": "int fixed = 100 ; int sum ( int tri [ ] [ fixed ] , int len ) { if ( len == 1 ) { return tri [ 0 ] [ 0 ] ; } int i , down , right ; for ( i = 0 ; i < len - 1 ; i ++ ) { down = tri [ len - 1 ] [ i ] + tri [ len - 2 ] [ i ] ; right = tri [ len - 1 ] [ i + 1 ] + tri [ len - 2 ] [ i ] ; if ( down > right ) { tri [ len - 2 ] [ i ] = down ; } else { tri [ len - 2 ] [ i ] = right ; } } sum ( tri , len - 1 ) ; } int main ( ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , value , high = 0 ; scanf ( \"%d\" , & n ) ; int tri [ n ] [ fixed ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & value ) ; tri [ i ] [ j ] = value ; } } high = sum ( tri , n ) ; printf ( \"%d\n\" , high ) ; } return 0 ; }", "label": 0, "id": 19740}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 15616}
{"input": "int main ( void ) { int t , a , b , c , j , i , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( int i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; if ( a > b ) c = a ; else c = b ; for ( j = 1 ; j <= a && j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { gcd = j ; } } printf ( \"%d \" , gcd ) ; lcm = ( a * b ) / gcd ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 2, "id": 25192}
{"input": "main ( ) { int t , i ; float a , b , h , l ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { h = 1 ; scanf ( \"%f%f\" , & a , & b ) ; for ( i = 1 ; i <= a ; i ++ ) if ( ( int ) a % i == 0 && ( int ) b % i == 0 ) h = i ; l = ( a * b ) / h ; printf ( \"%-20.0f\n%-20.0f\n\" , h , l ) ; t -- ; } }", "label": 2, "id": 1286}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned long n , len = 1 , count , ans = 0 ; unsigned long arr [ 1000 ] ; scanf ( \"%lu\" , & n ) ; for ( count = 0 ; count < n ; count ++ ) scanf ( \"%lu\" , & arr [ count ] ) ; for ( count = 0 ; count < n - 1 ; count ++ ) { if ( arr [ count + 1 ] >= arr [ count ] ) len ++ ; else { ans += ( len * ( len + 1 ) ) / 2 ; len = 1 ; } } ans += ( len * ( len + 1 ) ) / 2 ; printf ( \"%lu\n\" , ans ) ; } return 0 ; }", "label": 3, "id": 27007}
{"input": "int main ( void ) { int i , j , k , l = 0 , m = 0 , n , numrows , sum = 0 ; int a [ 10 ] [ 10 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & numrows ) ; for ( j = 0 ; j < numrows ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( k = 0 ; k < numrows ; k ++ ) { l = l + a [ k ] [ 0 ] ; } for ( k = 0 ; k < numrows ; k ++ ) { for ( j = 0 ; j < numrows ; j ++ ) { if ( j == k ) { m = m + a [ k ] [ j ] ; } } } sum = ( l > m ? l : m ) ; l = 0 ; m = 0 ; printf ( \"%d\n\" , sum ) ; sum = 0 ; } return 0 ; }", "label": 3, "id": 8624}
{"input": "int main ( ) { long long int A , B , m , i , T ; scanf ( \"%lld\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & A , & B ) ; if ( A > B ) m = B ; else m = A ; for ( i = m ; i >= 1 ; i -- ) { if ( A % i == 0 && B % i == 0 ) { printf ( \"%lld %lld\n\" , i , ( A * B ) / i ) ; break ; } } } return 0 ; }", "label": 2, "id": 11172}
{"input": "int main ( ) { int i = 0 , j , n , a , b , g , l , s ; scanf ( \"%d\" , & n ) ; if ( n > 1000 ) return ( 0 ) ; A : scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) s = a ; else s = b ; for ( j = 1 ; j <= s ; j ++ ) { if ( a % j == 0 && b % j == 0 ) l = j ; } g = ( a * b ) / l ; printf ( \"\n%d %d\" , l , g ) ; i ++ ; if ( i < n ) goto A ; return ( 0 ) ; }", "label": 1, "id": 24136}
{"input": "int main ( ) { int t ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int sum = 0 ; int m ; int i , j ; scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = m - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 17818}
{"input": "int main ( ) { int t ; long int n , i , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } temp = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < temp ) temp = a [ i ] ; } printf ( \"%ld\n\" , temp * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 12129}
{"input": "int main ( ) { int t , b , a , i , s , g , l , j ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; if ( a < b ) s = a ; else s = b ; for ( j = 1 ; j <= s ; j ++ ) { if ( a % i == 0 && b % i == 0 ) g = i ; } for ( j = s ; j < ( a * b ) ; j += s ) { if ( i % a == 0 && i % b == 0 ) { l = i ; break ; } } printf ( \"%d %d\" , g , l ) ; } return 0 ; }", "label": 1, "id": 1588}
{"input": "int findGcd ( int a , int b ) { if ( a < b ) { int t = a ; a = b ; b = t ; } if ( b == 0 ) return a ; else return findGcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int gcd = findGcd ( a , b ) ; printf ( \"%d %lld\n\" , gcd , ( ( long long int ) a * b ) / gcd ) ; } return 0 ; }", "label": 0, "id": 1263}
{"input": "int main ( ) { int t , i , j , a , b , g , l , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; m = a < b ? a : b ; for ( j = 1 ; j <= m ; j ++ ) { if ( ( a % j == 0 ) && ( b % j == 0 ) ) g = j ; } l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 6475}
{"input": "int fun ( int n , int a [ ] [ n ] , int i0 , int j0 ) { int i = 0 , j = 0 , s1 = 0 , s2 = 0 ; if ( i0 != n - 1 ) { s1 = a [ i0 ] [ j0 ] + fun ( n , a , i0 + 1 , j0 ) ; s2 = a [ i0 ] [ j0 ] + fun ( n , a , i0 + 1 , j0 + 1 ) ; if ( s1 > s2 ) return s1 ; else return s2 ; } else return ( a [ i0 ] [ j0 ] ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i = 0 , j = 0 , k = 1 , f = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , ans ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } ans = fun ( n , a , 0 , 0 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 2, "id": 1018}
{"input": "int max ( int a , int b ) { return ( ( a > b ) ? a : b ) ; } int s ( int dp [ ] [ 101 ] , int vis [ ] [ 101 ] , int i , int j , int a [ ] [ 101 ] , int n ) { if ( vis [ i ] [ j ] == 1 ) { return dp [ i ] [ j ] ; } if ( i == n - 1 || j == n - 1 ) { dp [ i ] [ j ] = a [ i ] [ j ] ; vis [ i ] [ j ] = 1 ; return a [ i ] [ j ] ; } dp [ i ] [ j ] = a [ i ] [ j ] + max ( s ( dp , vis , i + 1 , j , a , n ) , s ( dp , vis , i + 1 , j + 1 , a , n ) ) ; vis [ i ] [ j ] = 1 ; return dp [ i ] [ j ] ; } int main ( ) { int t ; int n ; int i ; int j ; int a [ 101 ] [ 101 ] ; int dp [ 101 ] [ 101 ] ; int vis [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; vis [ i ] [ j ] = 0 ; dp [ i ] [ j ] = 0 ; } } printf ( \"%d\n\" , s ( dp , vis , 0 , 0 , a , n ) ) ; } return 0 ; }", "label": 0, "id": 21096}
{"input": "int main ( ) { int numberOfTestCases , n ; scanf ( \"%d\" , & numberOfTestCases ) ; int j ; for ( j = 0 ; j < numberOfTestCases ; j ++ ) { int min = 100001 , number ; scanf ( \"%d\" , & n ) ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & number ) ; if ( number < min ) { min = number ; } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 8454}
{"input": "int main ( ) { int n , t , a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 5938}
{"input": "int cmpfunc ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int T , N , i ; int A [ 50000 ] ; scanf ( \"%d\" , & T ) ; while ( T ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%d\" , & A [ i ] ) ; qsort ( A , N , sizeof ( int ) , cmpfunc ) ; printf ( \"%d\n\" , ( A [ 0 ] * ( N - 1 ) ) ) ; T -- ; } return 0 ; }", "label": 0, "id": 133}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; else return ( b , a % b ) ; } int main ( ) { int t , c , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; c = gcd ( a , b ) ; d = ( a * b ) / c ; } printf ( \"%d %d\n\" , c , d ) ; return 0 ; }", "label": 1, "id": 6842}
{"input": "int triangle [ 100 ] [ 100 ] ; int lines , level , offset ; int indices [ 128 ] ; int sumtrian ( ) ; int bump ( ) ; int main ( ) { int testcases , i , j , k ; int sum , temp ; scanf ( \"%d\" , & testcases ) ; for ( i = 0 ; i < testcases ; i ++ ) { scanf ( \"%d\" , & lines ) ; for ( j = 0 ; j < lines ; j ++ ) { indices [ j ] = 0 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & triangle [ j ] [ k ] ) ; } } sum = 0 ; offset = 1 ; level = lines - 1 ; while ( 1 ) { temp = sumtrian ( ) ; sum = ( sum > temp ) ? sum : temp ; if ( bump ( ) ) break ; } printf ( \"%d\n\" , sum ) ; } return 0 ; } int sumtrian ( ) { int i , sum = 0 ; for ( i = 0 ; i < lines ; i ++ ) { sum += triangle [ i ] [ indices [ i ] ] ; } return sum ; } int bump ( ) { if ( level == 0 || offset > level ) { level = lines - 2 ; offset ++ ; indices [ lines - 1 ] = offset ; return offset == lines ; } else { indices [ level -- ] = offset ; return 0 ; } }", "label": 2, "id": 22812}
{"input": "int main ( void ) { int testcase , num , i , j , k ; int arr [ 102 ] , prev [ 102 ] , data , a , b ; prev [ 0 ] = 0 ; scanf ( \"%d\" , & testcase ) ; for ( i = 0 ; i < testcase ; i ++ ) { scanf ( \"%d\" , & num ) ; for ( j = 1 ; j <= num ; j ++ ) { for ( k = 1 ; k < j ; k ++ ) { scanf ( \"%d\" , & data ) ; a = data + prev [ k - 1 ] ; b = data + prev [ k ] ; if ( a < b ) arr [ k ] = b ; else arr [ k ] = a ; } scanf ( \"%d\" , & data ) ; arr [ k ] = data + prev [ k - 1 ] ; for ( k = 1 ; k <= j ; k ++ ) { prev [ k ] = arr [ k ] ; } } a = 0 ; for ( j = 1 ; j <= num ; j ++ ) { if ( a < arr [ j ] ) a = arr [ j ] ; } printf ( \"%d\n\" , a ) ; } return 0 ; }", "label": 0, "id": 25616}
{"input": "int main ( ) { int t , i , j , n , min ; scanf ( \"%d\" , & t ) ; int a [ 50002 ] ; long int out [ t ] ; for ( i = 0 ; i < t ; i ++ ) { min = 100000 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( a [ j ] < min ) min = a [ j ] ; } out [ i ] = ( long int ) min * ( long int ) ( n - 1 ) ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%ld\n\" , out [ i ] ) ; } return 0 ; }", "label": 0, "id": 22542}
{"input": "int main ( ) { int t , n , i , min ; int ch1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & ch1 ) ; if ( i == 1 ) { min = ch1 ; continue ; } if ( ch1 < min ) { min = ch1 ; } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 21565}
{"input": "int main ( void ) { int T , A , B , gcd , lcm , c ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%d%d\" , & A , & B ) ; c = A * B ; while ( A != B ) { if ( A > B ) A = A - B ; else B = B - A ; } gcd = B ; lcm = c / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; T -- ; } return 0 ; }", "label": 1, "id": 17472}
{"input": "int main ( ) { int t , n , a [ 10000 ] , i , j , count [ 5 ] ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { count [ j ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } count [ j ] = + n ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) count [ j ] ++ ; } } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , count [ i ] ) ; } return 0 ; }", "label": 3, "id": 565}
{"input": "void main ( ) { long long int num1 , num2 , gcd , lcm , remainder , numerator , denominator , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"Enter two numbers\n\" ) ; scanf ( \"%lld %lld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%lld %lld\" , gcd , lcm ) ; } }", "label": 1, "id": 13350}
{"input": "int main ( ) { int i , a , b , greater , test , GCD ; scanf ( \"%d\" , & test ) ; while ( test -- ) { printf ( \"\n Enter two integers a b:\" ) ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) greater = a ; else greater = b ; for ( i = 1 ; i <= greater ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) GCD = i ; } printf ( \"\n The GCD and LCM of %d and %d is %d  %ld\" , a , b , GCD , a * b / GCD ) ; } return 0 ; }", "label": 2, "id": 7250}
{"input": "int main ( ) { int n , i , j , k , q , t , l ; scanf ( \"%d\" , & t ) ; for ( l = 0 ; l < t ; l ++ ) { scanf ( \"%d\" , & n ) ; int s [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & s [ i ] [ j ] ) ; } } for ( k = n - 1 ; k >= 0 ; k -- ) { for ( q = 0 ; q <= k ; q ++ ) { if ( s [ k ] [ q ] > s [ k ] [ q + 1 ] ) s [ k - 1 ] [ q ] = s [ k - 1 ] [ q ] + s [ k ] [ q ] ; else s [ k - 1 ] [ q ] = s [ k - 1 ] [ q ] + s [ k ] [ q + 1 ] ; } } printf ( \"%d\n\" , s [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11603}
{"input": "int main ( ) { int a , b , pro , lcm , inp , i ; scanf ( \"%d\" , & inp ) ; for ( i = 0 ; i < inp ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; pro = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } lcm = pro / a ; printf ( \"%d\" , a ) ; printf ( \" %d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 16612}
{"input": "int sum ( int * * p , int ro , int co , int r , int s ) { if ( r == 1 ) return p [ ro ] [ co ] ; int lt , ri ; lt = sum ( p , ro + 1 , co , r - 1 , s ) ; ri = sum ( p , ro + 1 , co + 1 , r - 1 , s ) ; if ( ri > lt ) ( s ) = p [ ro ] [ co ] + ri ; else ( s ) = p [ ro ] [ co ] + lt ; return s ; } int main ( ) { int n , r , * * p , i , j , k , s ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & r ) ; p = ( int * * ) malloc ( r * sizeof ( int * ) ) ; s = 0 ; for ( j = 0 ; j < r ; j ++ ) { p [ j ] = ( int * ) malloc ( ( j + 1 ) * sizeof ( int ) ) ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & p [ j ] [ k ] ) ; } } s = sum ( p , 0 , 0 , r , s ) ; printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 2, "id": 9708}
{"input": "int main ( ) { int t , n , i , k , j , a [ 60000 ] , min = 1000000 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( a [ j ] < min ) min = a [ j ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 1, "id": 18156}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , a [ 1000 ] [ 1000 ] , i , j , maxsum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( int i = n - 1 ; i >= 1 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) a [ i - 1 ] [ j ] += max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; } maxsum = a [ 0 ] [ 0 ] ; printf ( \"%d\n\" , maxsum ) ; } return 0 ; }", "label": 0, "id": 840}
{"input": "int main ( ) { int t ; long n , i ; long a [ NUM ] , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; min = 100001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 14511}
{"input": "int hcf ( int a , int b ) { if ( a % b == 0 ) return b ; else return hcf ( b , a % b ) ; } int main ( ) { int t , d ; long int a , b , gcd ; long long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%li%li\" , & a , & b ) ; if ( a > b ) gcd = hcf ( a , b ) ; else gcd = hcf ( b , a ) ; lcm = ( ( a * b ) / gcd ) ; printf ( \"%li %lli\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 7363}
{"input": "int main ( ) { int a , b , i , hcf , lcm , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= ( a > b ? a : b ) ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; } } lcm = ( a * b ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 8120}
{"input": "int main ( ) { int tst ; long int num , i , j ; scanf ( \"%d\" , & tst ) ; while ( tst -- ) { long int count = 0 , x = 0 ; scanf ( \"%ld\" , & num ) ; long int arr [ num + 1 ] ; for ( i = 0 ; i < num ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; } arr [ num ] = 0 ; x = 1 ; for ( i = 1 ; i <= num ; i ++ ) { if ( arr [ i ] >= arr [ i - 1 ] ) { x ++ ; } else { count += ( x * ( x + 1 ) / 2 ) ; x = 1 ; } } printf ( \"%ld\n\" , count ) ; } }", "label": 0, "id": 21963}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { unsigned int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%u %u\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%u %u\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 15817}
{"input": "int main ( ) { int t , n , i , j ; int large ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = n - 1 ; i >= 1 ; -- i ) { for ( j = 0 ; j < i ; ++ j ) { if ( arr [ i ] [ j ] >= arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 18121}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , den , num , rem , t , i ; scanf ( \"%d\" , & t ) ; while ( t >= 0 ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { num = num1 ; den = num2 ; } else { num = num2 ; den = num1 ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 4356}
{"input": "int max_sum ( int p [ ] [ 101 ] , int n , int i , int j ) ; int max ( int a , int b ) ; int main ( ) { int n , t , i , j , k , sum , A [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; for ( k = 1 ; k <= t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; sum = max_sum ( A , n , 0 , 0 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; } int max_sum ( int p [ ] [ 101 ] , int n , int i , int j ) { if ( n == 1 ) return p [ i ] [ j ] ; else return ( p [ i ] [ j ] + max ( max_sum ( p , n - 1 , i + 1 , j ) , max_sum ( p , n - 1 , i + 1 , j + 1 ) ) ) ; } max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 2, "id": 22984}
{"input": "int main ( ) { int n , * * a , i , j , q , k ; scanf ( \"%d\" , & q ) ; for ( k = 0 ; k < q ; k ++ ) { scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else { if ( a [ i - 1 ] [ j ] >= a [ i - 1 ] [ j - 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; } } } for ( j = 0 ; j < ( n - 1 ) ; j ++ ) { if ( a [ n - 1 ] [ j ] > a [ n - 1 ] [ j + 1 ] ) a [ n - 1 ] [ j + 1 ] = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , a [ n - 1 ] [ n - 1 ] ) ; } }", "label": 0, "id": 123}
{"input": "int main ( ) { long long int a , b ; int n , i , c ; scanf ( \"%lld\" , & n ) ; while ( n -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { for ( i = 1 ; i <= a / 2 ; i ++ ) { if ( a % i == 0 && b % i == 0 ) c = i ; } } else { for ( i = 1 ; i <= b / 2 ; i ++ ) { if ( a % i == 0 && b % i == 0 ) c = i ; } } printf ( \"%d %d\n\" , c , ( a * b ) / c ) ; } return 0 ; }", "label": 2, "id": 1755}
{"input": "int input ( ) { int num ; do { scanf ( \"%d\" , & num ) ; } while ( ! ( num >= 0 && num <= 99 ) ) ; return num ; } int main ( ) { int n , n1 , t , i , j , a [ 100 ] [ 100 ] , out [ 1000 ] ; scanf ( \"%d\" , & n ) ; n1 = n ; for ( ; n > 0 ; n -- ) { t = input ( ) ; for ( i = 0 ; i < t ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = input ( ) ; for ( i = t - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; out [ n - 1 ] = a [ 0 ] [ 0 ] ; } for ( i = n1 - 1 ; i >= 0 ; i -- ) printf ( \"%d\n\" , out [ i ] ) ; }", "label": 1, "id": 439}
{"input": "int main ( ) { int a , b , c , n , d , lcm , gcd ; scanf ( \"%d%d\" , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\" , lcm , gcd ) ; return 0 ; } int GCD ( int x , int y ) { int z , d , n ; for ( z = 1 ; z <= n ; z ++ ) { if ( x % z == 0 && y % z == 0 ) { d = z ; } } return ( d ) ; } ;", "label": 1, "id": 7091}
{"input": "int n ; int main ( ) { int i , j , t , l ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { int a [ 1000 ] [ 1000 ] = { 0 } , cost [ 1000 ] [ 1000 ] = { 0 } , p ; scanf ( \"%d\" , & n ) ; l = 0 ; for ( p = 0 ; p < n ; p ++ ) { for ( j = 0 ; j <= p ; j ++ ) scanf ( \"%d\" , & a [ p ] [ j ] ) ; } n -- ; l = rec ( a , cost , 0 , 0 ) ; printf ( \"%d\n\" , l ) ; } return 0 ; } int rec ( int a [ ] [ 1000 ] , int cost [ ] [ 1000 ] , int i , int j ) { if ( i > n ) return 0 ; if ( cost [ i ] [ j ] != 0 ) return cost [ i ] [ j ] ; int p1 = rec ( a , cost , i + 1 , j ) ; int p2 = rec ( a , cost , i + 1 , j + 1 ) ; if ( p1 > p2 ) cost [ i ] [ j ] = a [ i ] [ j ] + p1 ; else cost [ i ] [ j ] = a [ i ] [ j ] + p2 ; return cost [ i ] [ j ] ; }", "label": 0, "id": 9784}
{"input": "int main ( ) { long long int t , i , n , a , m ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; m = 1000001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a ) ; if ( a < m ) m = a ; } printf ( \"%lld\n\" , ( n - 1 ) * m ) ; } return 0 ; }", "label": 0, "id": 17872}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int i , j , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } printf ( \"%d \n \" , & a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 16780}
{"input": "int main ( ) { register int i ; int test ; int n ; ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; scanf ( \"%d\" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; ++ i ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ 0 ] > a [ i ] ) a [ 0 ] = a [ i ] ; } printf ( \"%ld\n\" , ( n - 1 ) * a [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19440}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y , a , b , t , g , l ; scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } g = a ; l = x * y / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 11015}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , d , n , k ; scanf ( \"%d\" , & d ) ; int m [ NUM ( d ) ] ; for ( i = 1 ; i <= d * ( d + 1 ) / 2 ; i ++ ) scanf ( \"%d\" , & m [ i ] ) ; int sum = 0 ; while ( d ) { k = 0 ; for ( i = T ( d ) ; i <= NUM ( d ) ; i ++ ) { if ( m [ i ] > k ) k = m [ i ] ; } sum = sum + k ; d -- ; if ( d == 1 ) break ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 23589}
{"input": "main ( ) { int a [ 10 ] [ 100 ] [ 100 ] , n , i , j , testcase , k ; scanf ( \"%d\" , & testcase ) ; for ( k = 0 ; k < testcase ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ k ] [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ k ] [ i + 1 ] [ j ] > a [ k ] [ i + 1 ] [ j + 1 ] ) a [ k ] [ i ] [ j ] += a [ k ] [ i + 1 ] [ j ] ; else a [ k ] [ i ] [ j ] += a [ k ] [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ k ] [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 12367}
{"input": "int main ( ) { int i , t , m , num1 , num2 , k , z ; scanf ( \"%d\" , & i ) ; for ( m = 0 ; m < i ; m ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; for ( k = 1 ; k <= num1 || k <= num2 ; k ++ ) { if ( num1 % k == 0 && num2 % k == 0 ) z = k ; } t = num1 * num2 / z ; printf ( \"%d %d\n\" , z , t ) ; } return 0 ; }", "label": 2, "id": 16736}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , count = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) b [ i ] = b [ i - 1 ] + 1 ; } for ( i = 0 ; i < n ; i ++ ) { count = count + b [ i ] ; } printf ( \"%d\" , count ) ; } return 0 ; }", "label": 1, "id": 19357}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b , x , y ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { x = a ; y = b ; } else { x = b ; y = a ; } int r = x % y ; while ( r != 0 ) { x = y ; y = r ; r = x % y ; } printf ( \"%d %d\n\" , y , ( a * b ) / y ) ; } return 0 ; }", "label": 1, "id": 26405}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( ) { int t , n , i , j , a [ 101 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 828}
{"input": "main ( ) { int t , n1 , n2 , temp , GCD , LCM ; scanf ( \" %d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; LCM = n1 * n2 ; if ( n2 != 0 ) { temp = n1 % n2 ; n1 = n2 ; n2 = temp ; } } GCD = n1 ; LCM = LCM / GCD ; printf ( \"%d %d \n\" , GCD , LCM ) ; }", "label": 1, "id": 17820}
{"input": "void solve ( int a [ ] [ 100 ] , int r [ ] [ 100 ] , int n ) { if ( n == - 1 ) return ; int j ; for ( j = 0 ; j < n + 1 ; ++ j ) if ( a [ n ] [ j ] + r [ n + 1 ] [ j ] > a [ n ] [ j ] + r [ n + 1 ] [ j + 1 ] ) r [ n ] [ j ] = a [ n ] [ j ] + r [ n + 1 ] [ j ] ; else r [ n ] [ j ] = a [ n ] [ j ] + r [ n + 1 ] [ j + 1 ] ; solve ( a , r , n - 1 ) ; } int main ( ) { int t , i , n , j , a [ 100 ] [ 100 ] , p , r [ 100 ] [ 100 ] , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { p = 1 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; ++ j ) { for ( k = 0 ; k < p ; ++ k ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; ++ p ; } for ( j = 0 ; j < n ; ++ j ) r [ n - 1 ] [ j ] = a [ n - 1 ] [ j ] ; solve ( a , r , n - 2 ) ; printf ( \"%d\n\" , r [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 20497}
{"input": "int main ( ) { int T , a [ 100 ] [ 100 ] , i , j , sum1 , sum2 , number_rows ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & number_rows ) ; for ( i = 0 ; i < number_rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = number_rows - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { sum1 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; sum2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = ( sum1 > sum2 ) ? sum1 : sum2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9938}
{"input": "int main ( ) { int n , t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 17816}
{"input": "int main ( ) { int i , t , j , g , l , a , b , max ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) max = a ; else max = b ; for ( j = 1 ; j <= max ; j ++ ) if ( a % j == 0 && b % j == 0 ) g = j ; for ( j = max ; ; j ++ ) { if ( j % a == 0 && j % b == 0 ) { l = j ; break ; } } printf ( \"%d %d\n\" , g , l ) ; } }", "label": 2, "id": 9703}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , x , y , temp , gcd , lcm ; scanf ( \"%ld%ld\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 3384}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b [ 50000 ] , i ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) scanf ( \"%d\" , & b [ i ] ) ; int min = b [ 0 ] ; for ( i = 0 ; i < a ; i ++ ) { if ( b [ i ] < min ) min = b [ i ] ; } printf ( \"%d\n\" , min * ( a - 1 ) ) ; } return 0 ; }", "label": 0, "id": 20636}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; int x = gcd ( a , b ) ; printf ( \"%d\\t%lld\n\" , x , ( long long int ) a * b / x ) ; } } int gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; }", "label": 0, "id": 15422}
{"input": "int main ( ) { int test , i , j , num [ 101 ] [ 101 ] , n , max = 0 ; scanf ( \"%d\" , & test ) ; while ( test -- ) { max = 0 ; int num [ 101 ] [ 101 ] = { 0 } ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num [ i ] [ j ] ) ; if ( i != 0 ) { if ( j != 0 ) num [ i ] [ j ] = ( num [ i - 1 ] [ j ] + num [ i ] [ j ] ) >= ( num [ i - 1 ] [ j - 1 ] + num [ i ] [ j ] ) ? ( num [ i - 1 ] [ j ] + num [ i ] [ j ] ) : ( num [ i - 1 ] [ j - 1 ] + num [ i ] [ j ] ) ; else num [ i ] [ j ] = num [ i - 1 ] [ j ] + num [ i ] [ j ] ; } if ( i == n - 1 ) { if ( num [ i ] [ j ] > max ) max = num [ i ] [ j ] ; } } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 15421}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9122}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == b ) return a ; if ( a == 1 || b == 1 ) return 1 ; if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; long long int a , b , g , l ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; l = ( a * b ) / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 3216}
{"input": "int main ( ) { int a , b , c , m , n , i , t , j , k , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { scanf ( \"%d\" , & b ) ; for ( j = 0 ; j < b ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } if ( b - 2 >= 0 ) { for ( m = b - 2 ; m >= 0 ; m -- ) { for ( n = 0 ; n <= m ; n ++ ) { if ( arr [ m + 1 ] [ n ] > arr [ m + 1 ] [ n + 1 ] ) { arr [ m ] [ n ] = arr [ m ] [ n ] + arr [ m + 1 ] [ n ] ; } else { arr [ m ] [ n ] = arr [ m ] [ n ] + arr [ m + 1 ] [ n + 1 ] ; } } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } else { printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } } return 0 ; }", "label": 0, "id": 11785}
{"input": "int a [ 100 ] [ 100 ] ; int main ( void ) { int t , i , n , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( j = n - 2 ; j >= 0 ; j -- ) { for ( i = 0 ; i <= j ; i ++ ) { a [ j ] [ i ] += ( a [ j + 1 ] [ i ] > a [ j + 1 ] [ i + 1 ] ? a [ j + 1 ] [ i ] : a [ j + 1 ] [ i + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22974}
{"input": "int main ( ) { int a , b , i , t , x , y , z , lcm , gcd ; scanf ( \"%d\" , & t ) ; if ( t >= 1 && t <= 1000 ) for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a <= 1 || a > 1000000 && b <= 1 || b > 1000000 ) { return 0 ; } x = a ; y = b ; while ( a != 0 ) { z = a ; a = b % a ; b = z ; } gcd = b ; lcm = ( ( x * y ) / b ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 22612}
{"input": "typedef struct triangle_ { int elements [ 10000 ] ; int tam ; } triangle ; void sum_last_triangle ( triangle * t ) { int i , max , tindex , rindex ; tindex = t -> tam * ( t -> tam - 1 ) / 2 ; t -> tam -- ; rindex = t -> tam * ( t -> tam - 1 ) / 2 ; for ( i = 0 ; i < t -> tam ; i ++ ) { max = t -> elements [ i + tindex ] > t -> elements [ i + tindex + 1 ] ? t -> elements [ i + tindex ] : t -> elements [ i + tindex + 1 ] ; t -> elements [ i + rindex ] += max ; } } int max_sum_triangle ( triangle t ) { int result = 0 ; while ( t . tam >= 3 ) { sum_last_triangle ( & t ) ; } if ( t . tam == 2 ) { result = ( t . elements [ 1 ] > t . elements [ 2 ] ) ? t . elements [ 1 ] : t . elements [ 2 ] ; result += t . elements [ 0 ] ; } else if ( t . tam == 1 ) { result = t . elements [ 0 ] ; } return result ; } void test ( ) { int i , tam ; triangle t ; scanf ( \"%d\" , & t . tam ) ; tam = t . tam ; for ( i = 0 ; i < tam * ( tam + 1 ) / 2 ; i ++ ) { scanf ( \"%d\" , & t . elements [ i ] ) ; } printf ( \"%d\n\" , max_sum_triangle ( t ) ) ; } int main ( ) { int testcases , i ; scanf ( \"%d\" , & testcases ) ; for ( i = 0 ; i < testcases ; i ++ ) { test ( ) ; } return 0 ; }", "label": 0, "id": 10539}
{"input": "int main ( void ) { int a , b , c , s , i ; int t , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; c = a * b ; while ( b != 0 ) { s = a % b ; a = b ; b = s ; } gcd = a ; lcm = c / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 3219}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t , a , b , hcf = 0 , lcm ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d %d\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 19458}
{"input": "void main ( ) { int x , t , n , j ; scanf ( \"%d\" , & t ) ; for ( ; t > 0 ; t -- ) { scanf ( \"%d\" , & n ) ; int i , a [ n + 5 ] ; a [ 0 ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( j = 1 ; j < n ; ) { if ( a [ j ] > a [ j + 1 ] ) { a [ 0 ] = a [ 0 ] + a [ j + 1 ] ; j ++ ; } else { a [ 0 ] = a [ 0 ] + a [ j ] ; x = a [ j + 1 ] ; a [ j + 2 ] = a [ j + 1 ] ; j ++ ; } } printf ( \"%d\n\" , a [ 0 ] ) ; } }", "label": 1, "id": 25599}
{"input": "int size = 0 ; void compare_and_delete ( int arr [ ] , int index ) { int i = 0 ; if ( index == 0 ) { for ( i = index + 1 ; i < size && i + 1 <= size ; i ++ ) { arr [ i ] = arr [ i + 1 ] ; } } else if ( index == size - 1 ) { arr [ index - 1 ] = arr [ index ] ; } else { if ( arr [ index - 1 ] > arr [ index + 1 ] ) { for ( i = index ; i < size ; i ++ ) { arr [ i - 1 ] = arr [ i ] ; } } else { for ( i = index + 1 ; i < size && i + 1 <= size ; i ++ ) { arr [ i ] = arr [ i + 1 ] ; } } } -- size ; } void find_min_cost ( int arr [ ] ) { int minimum = arr [ 0 ] , i = 0 , index = 0 , sum = 0 ; if ( size == 1 ) { return ; } for ( i = 1 ; i < size ; i ++ ) { if ( minimum > arr [ i ] ) { minimum = arr [ i ] ; index = i ; } } printf ( \"Minimum: %d\nIndex:  %d\n\" , minimum , index ) ; while ( size > 1 ) { compare_and_delete ( arr , index ) ; sum = sum + minimum ; } printf ( \"\nSum: %d\" , sum ) ; } void input_array ( ) { int i = 0 ; printf ( \"\nEnter size of array: \" ) ; scanf ( \"%d\" , & size ) ; int arr [ size ] ; printf ( \"\nEnter elements: \" ) ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } find_min_cost ( arr ) ; } int main ( ) { int test_cases = 0 , i = 0 ; printf ( \"Enter total number of test cases: \" ) ; scanf ( \"%d\" , & test_cases ) ; for ( i = 0 ; i < test_cases ; i ++ ) { input_array ( ) ; } }", "label": 2, "id": 15974}
{"input": "int main ( ) { int yo ; int row ; int i , j ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & yo ) ; while ( yo -- ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } i -- ; while ( i ) { j = 0 ; while ( j < i ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; i ++ ; } i -- ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 18418}
{"input": "int main ( ) { int t , n , i , j , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; } } printf ( \"%d\" , arr [ 0 ] [ 0 ] ) ; return 0 ; }", "label": 1, "id": 7395}
{"input": "int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int mat [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , mat [ i ] [ j ] ) ; for ( i = n ; i > 1 ; i -- ) for ( j = 0 ; j < i - 1 ; j ++ ) { if ( mat [ i ] [ j ] > mat [ i ] [ j + 1 ] ) mat [ i - 1 ] [ j ] = mat [ i ] [ j ] + mat [ i - 1 ] [ j ] ; else mat [ i - 1 ] [ j ] = mat [ i ] [ j + 1 ] + mat [ i - 1 ] [ j ] ; } printf ( \"\n%d\" , mat [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 19583}
{"input": "int store [ size ] [ size ] ; int max ( int a [ size ] [ size ] , int n , int i , int j ) { if ( i == n ) return 0 ; if ( store [ i ] [ j ] == - 1 ) store [ i ] [ j ] = a [ i ] [ j ] + ( ( max ( a , n , i + 1 , j ) >= max ( a , n , i + 1 , j + 1 ) ) ? max ( a , n , i + 1 , j ) : max ( a , n , i + 1 , j + 1 ) ) ; return store [ i ] [ j ] ; } int main ( ) { int iterations = 0 , size_of_array = 0 , i , j , k ; scanf ( \"%d\" , & iterations ) ; for ( k = 0 ; k < iterations ; k ++ ) { scanf ( \"%d\" , & size_of_array ) ; int a [ size ] [ size ] ; for ( i = 0 ; i < size_of_array ; i ++ ) { for ( j = 0 ; j < size_of_array ; j ++ ) { store [ i ] [ j ] = - 1 ; } } for ( i = 0 ; i < size_of_array ; i ++ ) { for ( j = 0 ; j < size_of_array ; j ++ ) { if ( i >= j ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } } int sum = max ( a , size_of_array , 0 , 0 ) ; printf ( \"%d\n\" , sum ) ; } }", "label": 0, "id": 17744}
{"input": "int main ( ) { long long int i , t ; scanf ( \"%lld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { long long int sum ; long long int n , j , temp ; scanf ( \"%lld\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } temp = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < temp ) { temp = a [ j ] ; } } sum = temp * ( n - 1 ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 13857}
{"input": "int n ; int i , j , sum = 0 , largesum = 0 ; void go2 ( int a [ ] [ 99 ] , int ) ; int main ( ) { scanf ( \"%d\" , & n ) ; int a [ 99 ] [ 99 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } i = 0 ; j = 0 ; go2 ( a , 0 ) ; printf ( \"%d\" , largesum ) ; } void go2 ( int b [ ] [ 99 ] , int k ) { if ( i < n - 1 ) { sum = sum + b [ i ] [ j ] ; i ++ ; go2 ( b , 0 ) ; } if ( i == n - 1 ) { sum = sum + b [ i ] [ j ] ; if ( sum > largesum ) largesum = sum ; sum = sum - b [ i ] [ j ] ; if ( k == 0 ) i -- ; if ( k == 1 ) { i -- ; j -- ; } return ; } i ++ ; j ++ ; go2 ( b , 1 ) ; sum = sum - b [ i ] [ j ] ; if ( k == 0 ) i -- ; else { i -- ; j -- ; } }", "label": 3, "id": 3786}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , j ; int n , * array ; int s , count ; while ( t -- ) { scanf ( \"%d\" , & n ) ; array = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & array [ i ] ) ; } s = 0 ; count = 0 ; i = 0 ; j = 0 ; while ( i < n ) { count = 1 ; for ( j = i ; j < n - 1 ; j ++ ) { if ( array [ j + 1 ] >= array [ j ] ) { count ++ ; } else { break ; } } s = s + ( count * ( count + 1 ) / 2 ) ; i = j + 1 ; } printf ( \"%d\n\" , s ) ; } }", "label": 0, "id": 5566}
{"input": "int main ( ) { int n , i , j , k , t , mem = 0 ; int s [ 100 ] ; int mat [ 100 ] ; for ( i = 0 ; i < 100 ; i ++ ) { mat [ i ] = 0 ; s [ i ] = 0 ; } scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & mat [ k ] ) ; if ( mat [ mem + 1 ] > mat [ mem ] ) mem = mem + 1 ; s [ i ] += mat [ mem ] ; } } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , s [ i ] ) ; }", "label": 3, "id": 7876}
{"input": "int main ( ) { int t ; long int a [ 100000 ] , i , h , n , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { h = 0 ; scanf ( \"%ld\" , & n ) ; l = n ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { a [ i ] = 0 ; h += a [ i + 1 ] ; } else { h += a [ i ] ; a [ i + 1 ] = a [ i ] ; } l -- ; if ( l == 1 ) break ; } printf ( \"%ld\n\" , h ) ; } return 0 ; }", "label": 1, "id": 13516}
{"input": "int max ( int , int ) ; int t = 0 ; int s ; int main ( ) { int n , i , j , k ; scanf ( \"%d\" , & n ) ; int r [ n ] ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & s ) ; int a [ s ] [ s ] ; for ( i = 0 ; i < s ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; r [ k ] = solve ( a , 0 , 0 , s ) ; } for ( k = 0 ; k < n ; k ++ ) printf ( \"%d\n\" , r [ k ] ) ; return 0 ; } int solve ( int a [ s ] [ s ] , int i , int j , int s ) { int t1 , t2 ; if ( i == s ) return 0 ; t1 = solve ( a , i + 1 , j , s ) ; t2 = solve ( a , i + 1 , j + 1 , s ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; return t ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 2, "id": 12113}
{"input": "int main ( ) { long int t = 1 , a , b , x , gcd , lcm ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a < b ) { x = a ; } else x = b ; for ( ; x >= 1 ; x -- ) { if ( a % x == 0 && b % x == 0 ) { gcd = x ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 5820}
{"input": "int main ( ) { int test_cases ; long int n , * a , * b , smaller ; long long int sum ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%ld\" , & n ) ; a = ( long int * ) malloc ( n * sizeof ( long int ) ) ; for ( b = a ; b < ( a + n ) ; b ++ ) { scanf ( \"%ld\" , b ) ; if ( b == a ) smaller = * b ; else { if ( * b <= smaller ) smaller = * b ; } } sum = smaller * n - 1 ; printf ( \"%lld\n\" , sum ) ; free ( a ) ; } return ( 0 ) ; }", "label": 1, "id": 32}
{"input": "int main ( ) { int A , B , gcd , lcm , numerator , denominator , remainder ; A , B <= 1000000 ; printf ( \"enter two numbers:\" ) ; scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) { A = numerator ; B = denominator ; } else { A = denominator ; B = numerator ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( \"gcd of %d and %d= %d\" , gcd ) ; printf ( \"lcm of %d and %d =%d\" , lcm ) ; }", "label": 3, "id": 17135}
{"input": "int gcd ( int , int ) ; int gcd ( int a , int b ) { int temp = 0 ; while ( b ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { int test , a , b ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d%d\" , & a , & b ) ; int ans = gcd ( a , b ) ; printf ( \"%d %d\" , ans , ( a * b ) / ans ) ; } return 0 ; }", "label": 1, "id": 4430}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int num1 , num2 , gcd , lcm , numerator , denominator , remainder ; scanf ( \"%lld%lld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%lld%lld/n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 2426}
{"input": "void findmax ( char path [ ] [ 100 ] , int curr_row , int curr_col , int max_row , int curr_sum , int * maxpath ) { if ( curr_row > max_row ) { if ( * maxpath < curr_sum ) * maxpath = curr_sum ; return ; } curr_sum += ( int ) path [ curr_row - 1 ] [ curr_col - 1 ] - 48 ; findmax ( path , curr_row + 1 , curr_col , max_row , curr_sum , maxpath ) ; findmax ( path , curr_row + 1 , curr_col + 1 , max_row , curr_sum , maxpath ) ; } int main ( ) { char path [ 100 ] [ 100 ] ; int n ; scanf ( \"%d\" , & n ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { int row ; scanf ( \"%d\" , & row ) ; for ( j = 0 ; j < row ; j ++ ) scanf ( \" %[^\n]\" , & path [ j ] ) ; int maxpath = 0 ; findmax ( path , 1 , 1 , row , 0 , & maxpath ) ; printf ( \"%d\n\" , maxpath ) ; } return 0 ; }", "label": 2, "id": 12273}
{"input": "int main ( ) { int i , a , b , gcd , lcm ; int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) if ( a % i == 0 && b % i == 0 ) gcd = i ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 5442}
{"input": "int max ( int , int ) ; int main ( ) { int i , arr [ 110 ] [ 110 ] = { 0 } , j , k , l , sum [ 110 ] [ 110 ] = { 0 } , t ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & i ) ; for ( j = 0 ; j < i ; j ++ ) for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; sum [ j ] [ k ] = arr [ j ] [ k ] ; } sum [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) { sum [ j ] [ 0 ] = ( sum [ j ] [ 0 ] ) + ( sum [ j - 1 ] [ 0 ] ) ; } for ( j = 1 ; j < i ; j ++ ) for ( k = 1 ; k < j + 1 ; k ++ ) { sum [ j ] [ k ] = max ( sum [ j ] [ k ] + sum [ j - 1 ] [ k ] , sum [ j ] [ k ] + sum [ j - 1 ] [ k - 1 ] ) ; } l = sum [ i - 1 ] [ 0 ] ; for ( k = 0 ; k < i ; k ++ ) { if ( l < sum [ i - 1 ] [ k ] ) l = sum [ i - 1 ] [ k ] ; } printf ( \"%d\n\" , l ) ; } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 11878}
{"input": "long gcd ( int m , int n ) { if ( m < n ) return gcd ( n , m ) ; if ( m % n == 0 ) return n ; else return gcd ( n , m % n ) ; } int main ( ) { long a , b ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; printf ( \"%ld %lld\n\" , gcd ( a , b ) , ( a * b / gcd ( a , b ) ) ) ; } return 0 ; }", "label": 0, "id": 13425}
{"input": "int main ( ) { int a , b , rem = 1 , gcd , l , s , t ; scanf ( \"%d\" , & t ) ; while ( ! t -- ) { scanf ( \"mm\" , & a , & b ) ; l = a > b ? a : b ; s = a < b ? a : b ; while ( ! rem ) { rem = l % s ; if ( rem == 0 ) gcd = s ; l = s ; s = rem ; } printf ( \"%d\\t%d\n\" , gcd , ( a * b / gcd ) ) ; gcd = 1 ; rem = 1 ; } return 0 ; }", "label": 1, "id": 4416}
{"input": "int gcd ( int x , int y ) { int temp ; while ( y != 0 ) { temp = y ; y = x % y ; x = temp ; } return x ; } int main ( ) { int n , a , b ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; int x = a , y = b ; int num = gcd ( x , y ) ; long int lcm = ( a * b ) / num ; printf ( \"%d %ld\" , num , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 22125}
{"input": "int main ( ) { int q , w ; scanf ( \"%d\" , & w ) ; for ( q = 0 ; q < w ; q ++ ) { int n , i , j , A [ 1000 ] [ 1000 ] = { 0 } , x = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( A [ i ] [ j ] >= A [ i ] [ j + 1 ] ) { x = A [ i ] [ j ] ; } else x = A [ i ] [ j + 1 ] ; A [ i - 1 ] [ j ] = A [ i - 1 ] [ j ] + x ; } } printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11380}
{"input": "int main ( ) { int t ; for ( int i = 0 ; i < t ; ++ i ) { int a , small ; scanf ( \"%d\" , & a ) ; int ar [ 50000 ] ; for ( int j = 0 ; j < a ; ++ j ) scanf ( \"%d\" , & ar [ j ] ) ; small = ar [ 0 ] ; for ( int k = 1 ; k < a ; ++ k ) if ( ar [ k ] < small ) small = ar [ k ] ; printf ( \"%d\n\" , ( small * ( a - 1 ) ) ) ; } return 0 ; }", "label": 1, "id": 4614}
{"input": "int gcd ( int a , int b ) { int r ; if ( ( a == 0 ) && ( b == 0 ) ) return 0 ; if ( a < 0 ) a = - a ; if ( b < 0 ) b = - b ; if ( b == 0 ) return a ; while ( 1 ) { r = a % b ; if ( r == 0 ) return ( b ) ; a = b ; b = r ; } } int main ( ) { int T , i , g , l ; int x , y ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; g = gcd ( x , y ) ; l = ( x * y ) / g ; printf ( \"%d %d\" , g , l ) ; return ; } }", "label": 3, "id": 26092}
{"input": "int main ( ) { int t , n , i ; long long sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; long long dp [ n ] ; dp [ 0 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ i - 1 ] ) dp [ i ] = dp [ i - 1 ] + 1 ; else dp [ i ] = 1 ; } sum = 0 ; for ( i = 0 ; i < n ; i ++ ) sum += dp [ i ] ; printf ( \"%lld\n\" , sum ) ; } }", "label": 0, "id": 26216}
{"input": "int main ( ) { int gcd , lcm , n ; for ( int j = 1 ; j <= n ; j ++ ) { int n1 , n2 , i ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\n\" , lcm , gcd ) ; } return 0 ; }", "label": 1, "id": 12621}
{"input": "main ( ) { int t ; long int n , min , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } min = min * ( n - 1 ) ; printf ( \"%ld\n\" , min ) ; } }", "label": 0, "id": 3517}
{"input": "int main ( ) { int T , c , d ; long long int a , b ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%ll %ll\" , & a , & b ) ; if ( ( a % b == 0 ) || ( b % a == 0 ) ) { if ( a > b ) { c = a ; d = b ; } else { c = b ; d = a ; } } else { c = a * b ; d = 1 ; } printf ( \"lcm is %d\n\" , c ) ; printf ( \"gcd is %d\" , d ) ; } return 0 ; }", "label": 1, "id": 23061}
{"input": "int main ( ) { long long int n , j , arr [ 100000 ] , count , p , m ; int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; count = n ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & arr [ j ] ) ; } m = 1 ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( arr [ j ] <= arr [ j + 1 ] ) { m ++ ; } else { p = m * ( m - 1 ) / 2 ; count += p ; m = 1 ; } } p = m * ( m - 1 ) / 2 ; count += p ; printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 0, "id": 24531}
{"input": "int main ( ) { int T , i ; scanf ( \"%d\" , & T ) ; while ( T -- ) { long int a , b ; int gcd , lcm ; scanf ( \"%ld%ld\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; lcm = ( a * b ) / gcd ; } printf ( \"%d\" , gcd ) ; printf ( \"%d\" , lcm ) ; } return 0 ; }", "label": 2, "id": 26251}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , temp = 0 , j , sum = 0 , i ; scanf ( \"ll%d\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"ll%d\" , & a [ i ] ) ; } for ( i = 1 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n - i - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } } printf ( \"ll%d\" , sum += ( a [ 0 ] * ( n - 1 ) ) ) ; } }", "label": 3, "id": 9790}
{"input": "int a [ 100 ] [ 100 ] ; int sum ( int i , int j ) { if ( i == 0 && j == 0 ) return a [ i ] [ j ] ; else { if ( j == 0 ) return a [ i ] [ j ] + sum ( i - 1 , j ) ; else if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) return a [ i ] [ j ] + sum ( i - 1 , j - 1 ) ; else return a [ i ] [ j ] + sum ( i - 1 , j ) ; } } int main ( ) { int t , n ; int i , j , k , m , max = 0 , ma [ 100 ] ; ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; m = 0 ; max = 0 ; for ( i = 0 ; i < n ; i ++ ) { m = sum ( n - 1 , i ) ; if ( max < m ) max = m ; } ma [ k ] = max ; } for ( i = 0 ; i < k ; i ++ ) printf ( \"%d\n\" , ma [ i ] ) ; }", "label": 3, "id": 22725}
{"input": "int gcd ( int , int ) ; void main ( ) { int T , a , b ; scanf ( \"%d\" , & T ) ; int i ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = ( a * b ) / g ; printf ( \"%d %d\" , g , l ) ; } } int gcd ( int m , int n ) { if ( m == 0 ) { return n ; } else if ( n == 0 ) { return m ; } else { return gcd ( n - m , m ) ; } }", "label": 3, "id": 24499}
{"input": "int main ( ) { int t ; long n , c ; scanf ( \"%d\" , & t ) ; int i , j ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; int x [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & x [ j ] ) ; } long a = x [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a > x [ j ] ) a = x [ j ] ; } c = a * ( n - 1 ) ; printf ( \"%d\n\" , c ) ; } }", "label": 3, "id": 21658}
{"input": "int gcd ( int m , int n ) ; int lcm ( int m , int n ) ; int main ( ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , b [ n ] ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d %d\" , & a [ i ] , & b [ i ] ) ; int x [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { x [ j ] = gcd ( a [ j ] , b [ j ] ) ; } int y [ n ] ; for ( int k = 0 ; k < n ; k ++ ) { y [ k ] = lcm ( a [ k ] , b [ k ] ) ; } for ( int l = 0 ; l < n ; l ++ ) { printf ( \"%d %d\n\" , x [ l ] , y [ l ] ) ; } } int gcd ( int m , int n ) { int rem , tmp ; if ( m == n ) return m ; if ( m > n ) { rem = m % n ; if ( rem == 0 ) return n ; else { while ( rem > 0 ) { tmp = rem ; rem = n % rem ; n = tmp ; } return tmp ; } } if ( n > m ) { rem = n % m ; if ( rem == 0 ) return m ; else { while ( rem > 0 ) { tmp = rem ; rem = m % rem ; m = tmp ; } return m ; } } } int lcm ( int m , int n ) { return ( m * n ) / gcd ( m , n ) ; }", "label": 1, "id": 11178}
{"input": "int max ( a , b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; int a [ 101 ] [ 101 ] = { 0 } ; scanf ( \"%d\" , & n ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int sum = - 1 ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( j == 0 ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else a [ i ] [ j ] += max ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; } } for ( i = 0 ; i < n ; i ++ ) if ( sum < a [ n - 1 ] [ i ] ) sum = a [ n - 1 ] [ i ] ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 3954}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long r = 0 , l = 1 ; int n , p ; scanf ( \"%d%d\" , & n , & p ) ; for ( int i = 1 ; i < n ; ++ i ) { int x ; scanf ( \"%d\" , & x ) ; if ( x < p ) { r += l * ( l + 1 ) / 2 ; l = 1 ; } else ++ l ; p = x ; } r += l * ( l + 1 ) / 2 ; printf ( \"%lld\n\" , r ) ; } }", "label": 0, "id": 7240}
{"input": "int main ( ) { int t , n , i , s , a [ 50000 ] , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; s = 0 ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 , c = 0 ; i + 1 < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { s = s + a [ i + 1 ] ; c ++ ; } else { s = s + a [ i ] ; a [ i + 1 ] = a [ i ] ; c ++ ; } if ( c == n - 1 ) break ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 13238}
{"input": "struct myvar { int a ; int b ; } ; typedef struct myvar myvar ; int sumtobase ( myvar * * intpyr , int row , int col , int size ) { if ( intpyr [ row ] [ col ] . b != 0 ) return intpyr [ row ] [ col ] . b ; else { int way1 , way2 ; way1 = intpyr [ row ] [ col ] . a + sumtobase ( intpyr , row + 1 , col + 1 , size ) ; way2 = intpyr [ row ] [ col ] . a + sumtobase ( intpyr , row + 1 , col , size ) ; if ( way1 > way2 ) { intpyr [ row ] [ col ] . b = way1 ; return way1 ; } else { intpyr [ row ] [ col ] . b = way2 ; return way2 ; } } } int main ( ) { int itr ; int size ; myvar * * pyramid ; int * ans , i ; scanf ( \"%d\" , & itr ) ; ans = ( int * ) malloc ( itr * sizeof ( int ) ) ; for ( i = 0 ; i < itr ; i ++ ) { int j , k = 0 ; char temp ; scanf ( \"%d\" , & size ) ; pyramid = ( myvar * * ) malloc ( size * sizeof ( myvar * ) ) ; for ( j = 0 ; j < size ; j ++ ) { pyramid [ j ] = ( myvar * ) malloc ( ( j + 1 ) * sizeof ( myvar ) ) ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & pyramid [ j ] [ k ] . a ) ; pyramid [ j ] [ k ] . b = 0 ; } } for ( k = 0 ; k < size ; k ++ ) pyramid [ size - 1 ] [ k ] . b = pyramid [ size - 1 ] [ k ] . a ; ans [ i ] = sumtobase ( pyramid , 0 , 0 , size - 1 ) ; } for ( i = 0 ; i < itr ; i ++ ) printf ( \"%d\n\" , ans [ i ] ) ; return 0 ; }", "label": 3, "id": 8421}
{"input": "int sort ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } main ( ) { int t , n , i , ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { ans = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; qsort ( ( void * ) a , n , sizeof ( int ) , sort ) ; printf ( \"%d\n\" , ( n - 1 ) * a [ 0 ] ) ; } }", "label": 0, "id": 4584}
{"input": "int main ( ) { int t , i ; int long A [ 50000 ] , N , j , sum ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; ++ i ) { sum = 0 ; scanf ( \"%ld\" , & N ) ; for ( j = 1 ; j <= N ; j ++ ) scanf ( \"%ld\" , & A [ j ] ) ; for ( j = 1 ; j < N ; j ++ ) { if ( A [ j ] < A [ j + 1 ] ) sum += A [ j ] ; else sum += A [ j + 1 ] ; } printf ( \"\n%ld\" , sum ) ; } return 0 ; }", "label": 1, "id": 1096}
{"input": "int main ( ) { int t , n , i , j , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { a [ i - 1 ] [ j ] += max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11718}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] ; int num = 0 , k = 0 , m = 0 , i = 0 , j = 0 ; scanf ( \"%d\" , & num ) ; for ( m = 0 ; m < num ; m ++ ) { scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = k ; i > 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { int c = a [ i ] [ j ] ; int d = a [ i ] [ j + 1 ] ; if ( c > d ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + c ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + d ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 20265}
{"input": "int main ( ) { int temp , * maximum , t , j , i , lines , * * arr , * max1 , * max2 , counter = 0 ; scanf ( \"%d\" , & t ) ; maximum = ( int * ) malloc ( sizeof ( int ) * t ) ; for ( i = 0 ; i < t ; i ++ ) maximum [ i ] = 0 ; temp = t ; while ( t -- ) { scanf ( \"%d\" , & lines ) ; arr = ( int * * ) malloc ( sizeof ( int * ) * lines ) ; max1 = ( int * ) malloc ( sizeof ( int ) * lines ) ; max2 = ( int * ) malloc ( sizeof ( int ) * lines ) ; for ( i = 0 ; i < lines ; i ++ ) { max2 [ i ] = max1 [ i ] = 0 ; arr [ i ] = ( int * ) malloc ( sizeof ( int ) * lines ) ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) { max2 [ i ] = max1 [ i ] = arr [ i ] [ j ] ; continue ; } else if ( i == j ) { max2 [ j ] = arr [ i ] [ j ] + max1 [ j - 1 ] ; } else if ( j == 0 ) { max2 [ j ] = max1 [ j ] + arr [ i ] [ j ] ; } else { max2 [ j ] = arr [ i ] [ j ] + ( max1 [ j ] > max1 [ j - 1 ] ? max1 [ j ] : max1 [ j - 1 ] ) ; } } for ( j = 0 ; j < lines ; j ++ ) max1 [ j ] = max2 [ j ] ; } for ( i = 0 ; i < lines ; i ++ ) { if ( maximum [ counter ] < max2 [ i ] ) maximum [ counter ] = max2 [ i ] ; } counter ++ ; } for ( counter = 0 ; counter < temp ; counter ++ ) printf ( \"%d\n\" , maximum [ counter ] ) ; return 0 ; }", "label": 0, "id": 3045}
{"input": "int main ( ) { long int a , b , gcd , lcm ; int n , i , j ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a == 0 || b == 0 ) { lcm = 0 ; if ( a == 0 ) { gcd = b ; } else { gcd = a ; } } else { for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; lcm = ( a * b ) / gcd ; } } } printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 15448}
{"input": "int main ( ) { int N [ 100000 ] ; int T , n , i , j , l , flag , k = 0 ; scanf ( \"%d\" , & T ) ; for ( l = 0 ; l < T ; l ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & N [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { flag = 0 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( N [ i ] <= N [ j ] ) { flag = 1 ; } else { break ; } } if ( flag == 1 ) { k ++ ; } } printf ( \"%d\" , n + k ) ; k = 0 ; } return 0 ; }", "label": 1, "id": 1528}
{"input": "int max ( long int a , long int b ) { if ( a >= b ) return a ; else return b ; } int min ( long int a , long int b ) { if ( a >= b ) return b ; else return a ; } int gcd ( int a , int b ) { if ( a > b && a % b == 0 ) { return b ; } else if ( a < b && b % a == 0 ) { return a ; } else return gcd ( b , a % b ) ; } long int min_of_n ( long int len , long int arr [ ] ) { long int i = 0 , j = 1 ; long int minimum = min ( arr [ 0 ] , arr [ 1 ] ) ; if ( len % 2 == 0 ) { for ( ; i < len && j < len ; i += 2 , j += 2 ) { long int temp = ( min ( arr [ i ] , arr [ j ] ) ) ; if ( temp < minimum ) { minimum = temp ; } } } if ( len % 2 != 0 ) { for ( ; i < len && j < len ; i += 2 , j += 2 ) { long int temp = ( min ( arr [ i ] , arr [ j ] ) ) ; if ( temp < minimum ) { minimum = temp ; } minimum = min ( minimum , arr [ len - 1 ] ) ; } } return minimum * ( len - 1 ) ; } int main ( ) { int t ; long int a [ 50001 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%li\" , & n ) ; long int noneed = 0 ; for ( noneed = 0 ; noneed < n ; noneed ++ ) { scanf ( \"%li\" , & a [ noneed ] ) ; } printf ( \"%li\n\" , min_of_n ( n , a ) ) ; } return 0 ; }", "label": 0, "id": 10969}
{"input": "void main ( ) { int t , n , i , j , y ; int x [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & x [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( x [ i + 1 ] [ j ] > x [ i + 1 ] [ j + 1 ] ) y = x [ i + 1 ] [ j ] ; else y = x [ i + 1 ] [ j + 1 ] ; x [ i ] [ j ] += y ; } } printf ( \"%d\n\" , x [ 0 ] [ 0 ] ) ; t -- ; } }", "label": 0, "id": 26491}
{"input": "int main ( ) { int t , i ; long int a , b , rem , mul , c , d , lar , s ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { lar = a ; s = b ; } else { lar = b ; s = a ; } c = lar ; d = s ; rem = 1 ; while ( rem > 0 ) { rem = lar % s ; lar = s ; s = rem ; } long int l = 1 ; i = 1 ; while ( l ) { mul = c * i ; if ( mul % d == 0 ) break ; i ++ ; } printf ( \"%ld %ld\n\" , lar , mul ) ; } }", "label": 2, "id": 14028}
{"input": "int max ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i ; int a [ 99 ] [ 99 ] ; int b [ 99 ] [ 99 ] = { 0 } ; for ( i = 1 ; i <= t ; i ++ ) { int n ; int j , k ; int maximum = INT_MIN ; int flag = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { b [ j ] [ 0 ] = b [ j - 1 ] [ 0 ] + a [ j ] [ 0 ] ; } for ( j = 1 ; j < n ; j ++ ) { for ( k = 1 ; k < j + 1 ; k ++ ) { b [ j ] [ k ] = a [ j ] [ k ] + ( max ( b [ j - 1 ] [ k ] , b [ j - 1 ] [ k - 1 ] ) ) ; if ( j == n - 1 && b [ j ] [ k ] > maximum ) { maximum = b [ j ] [ k ] ; flag = 1 ; } } } if ( flag == 0 ) { printf ( \"%d\n\" , b [ 0 ] [ 0 ] ) ; } else { printf ( \"%d\n\" , maximum ) ; } } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; }", "label": 3, "id": 21185}
{"input": "int main ( void ) { int testcase ; unsigned long a , b ; scanf ( \"%d\" , & testcase ) ; while ( testcase -- ) { scanf ( \"%lu %lu\" , & a , & b ) ; printf ( \"1 %lu\n\" , ( a * b ) ) ; } return ( 0 ) ; }", "label": 1, "id": 24335}
{"input": "int main ( ) { long long t , n , i , c , sum ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; if ( n == 1 ) printf ( \"%d\n\" , 1 ) ; else { sum = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { c = 1 ; while ( a [ i ] <= a [ i + 1 ] && i < n - 1 ) { c ++ ; i ++ ; } sum += ( c * ( c + 1 ) ) / 2 ; } printf ( \"%lld\n\" , sum ) ; } } return 0 ; }", "label": 1, "id": 1098}
{"input": "int main ( ) { long long t ; int m ; scanf ( \"%lld\" , & t ) ; for ( m = 0 ; m < t ; m ++ ) { long long n , i , j , k ; scanf ( \"%lld\" , & n ) ; long long a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) { if ( a [ i ] [ j - 1 ] > a [ i ] [ j ] ) a [ i - 1 ] [ j - 1 ] += a [ i ] [ j - 1 ] ; else a [ i - 1 ] [ j - 1 ] += a [ i ] [ j ] ; } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 18670}
{"input": "int main ( void ) { int T , N , i , j ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & N ) ; long long int A [ N ] , s = 0 , min ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%lld\" , & A [ j ] ) ; } s = A [ 0 ] ; for ( j = 1 ; j < N ; j ++ ) { if ( s > A [ j ] ) { s = A [ j ] ; } } min = s * ( N - 1 ) ; printf ( \"%lld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 293}
{"input": "long findHCF ( long a , long b ) ; int main ( void ) { long a , b , hcf , t ; long long lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a == b ) printf ( \"%ld %ld\n\" , a , b ) ; else { hcf = findHCF ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%ld %lld\n\" , hcf , lcm ) ; } } return 0 ; } long findHCF ( long a , long b ) { if ( b == 0 ) return a ; return findHCF ( b , a % b ) ; }", "label": 0, "id": 6484}
{"input": "int mat [ MAX ] [ MAX ] ; int main ( ) { int tc , i , j , k , n ; scanf ( \"%d\" , & tc ) ; for ( k = 0 ; k < tc ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & mat [ i ] [ j ] ) ; if ( j < i + 1 ) scanf ( \"\n\" ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) mat [ i ] [ j ] += mat [ i + 1 ] [ j ] > mat [ i + 1 ] [ j + 1 ] ? mat [ i + 1 ] [ j ] : mat [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , mat [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 535}
{"input": "int main ( ) { int t ; unsigned long long a , b , temp , m , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; k = a ; m = b ; while ( a != 0 ) { temp = a ; a = b % a ; b = temp ; } printf ( \"%lld %lld\n\" , b , ( k * m ) / b ) ; } return 0 ; }", "label": 0, "id": 23699}
{"input": "int main ( ) { long int n1 , n2 , prod , gcd , lcm , t ; scanf ( \"%ld\n\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & n1 , & n2 ) ; prod = n1 * n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; if ( n2 > n1 ) n2 = n2 - n1 ; } gcd = n1 ; lcm = prod / gcd ; printf ( \"%ld  %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 23351}
{"input": "int main ( ) { int t ; long long int n , k , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & n , & k ) ; if ( k != 0 ) { r = n % k ; n = n / k ; } else { r = 0 ; } printf ( \"%lld %lld\n\" , n , r ) ; } return 0 ; }", "label": 1, "id": 24141}
{"input": "int main ( ) { int n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { long long int a , j , count = 1 , s = 0 , k ; scanf ( \"%lld\" , & a ) ; long long int b [ a ] ; for ( j = 0 ; j < a ; j ++ ) { scanf ( \"%lld\" , & b [ j ] ) ; } for ( j = 0 ; j < a - 1 ; j ++ ) { count = 1 ; if ( b [ j ] <= b [ j + 1 ] ) { count ++ ; for ( k = j + 1 ; k < a - 1 ; k ++ ) { if ( b [ k ] <= b [ k + 1 ] ) count ++ ; else break ; } s = s + ( ( ( count - 1 ) * count ) / 2 ) ; j = k - 1 ; } } printf ( \"%lld\n\" , ( s + a ) ) ; } return 0 ; }", "label": 0, "id": 11500}
{"input": "int compare ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , x , n , sum = 0 , val = - 1 , num , i , j , a [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) a [ i ] [ j ] += compare ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } }", "label": 3, "id": 26339}
{"input": "int input [ 100 ] [ 100 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i = 0 , j = 0 , n , count = 0 , x , a = 0 , b = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & input [ i ] [ j ] ) ; } } x = input [ 0 ] [ 0 ] ; do { if ( input [ a + 1 ] [ b ] > input [ a + 1 ] [ b + 1 ] ) { x = x + input [ a + 1 ] [ b ] ; a = a + 1 ; count ++ ; } else { x = x + input [ a + 1 ] [ b + 1 ] ; a = a + 1 ; b = b + 1 ; count ++ ; } } while ( count != n ) ; printf ( \"%d\n\" , x ) ; } return 0 ; }", "label": 3, "id": 1500}
{"input": "int main ( ) { int t , n , i , j , a [ 10 ] [ 10 ] , b [ 10 ] , sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\\t\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i ] [ j ] && a [ i + 1 ] [ j ] > a [ i ] [ j + 1 ] ) { sum = sum + a [ i ] [ j ] + a [ i + 1 ] [ j ] ; } else if ( a [ i + 1 ] [ j + 1 ] > a [ i ] [ j + 1 ] && a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) { sum = sum + a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } else if ( a [ i + 1 ] [ j + 1 ] > a [ i + 2 ] [ j ] && a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) { sum = sum + a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } else sum = sum + a [ i ] [ j ] ; } } printf ( \"%d\" , sum ) ; t -- ; } return 0 ; }", "label": 3, "id": 19098}
{"input": "int main ( ) { int t , sum , i , size ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & size ) ; int arr [ size ] ; sum = 0 ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } for ( i = 0 ; i < size - 1 ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { arr [ i + 1 ] = arr [ i ] ; sum = sum + arr [ i ] ; } else { sum = sum + arr [ i + 1 ] ; } } printf ( \"%d\n\" , sum ) ; } }", "label": 1, "id": 647}
{"input": "int main ( ) { unsigned int t , n , arr [ 50010 ] , i ; unsigned long long int cost = 0 ; scanf ( \"%u\" , & t ) ; while ( t -- ) { scanf ( \"%u\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%u\" , & arr [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { cost += arr [ i ] ; arr [ i + 1 ] = arr [ i ] ; } else { cost += arr [ i + 1 ] ; } } printf ( \"%llu\n\" , cost ) ; cost = 0 ; } return 0 ; }", "label": 1, "id": 4654}
{"input": "int main ( ) { long long int t , i , a , b , min , max , j , gcd , lcm ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; min = a < b ? a : b ; for ( j = 1 ; j <= min ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { gcd = j ; } } max = a > b ? a : b ; for ( j = max ; j <= a * b ; j ++ ) { if ( j % a == 0 && j % b == 0 ) { lcm = j ; break ; } } printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 575}
{"input": "int hcf ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( \"%d%d\" , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"\n%d %d\" , gcd , lcm ) ; } return 0 ; } int hcf ( int a , int b ) { int i , gcd ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( ( ( a % i ) == 0 ) && ( ( b % i ) == 0 ) ) gcd = i ; } return gcd ; }", "label": 1, "id": 800}
{"input": "int main ( ) { int i , j , t , a , b , gcd ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( b > a ) { a = a + b ; b = a - b ; a = a - b ; } gcd = 1 ; for ( j = 2 ; j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } printf ( \"%d %d\n\" , gcd , a * b / gcd ) ; } return 0 ; }", "label": 1, "id": 25918}
{"input": "int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; return 0 ; }", "label": 1, "id": 3141}
{"input": "int main ( ) { int T , N , i , A ; long long int min ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & A ) ; if ( i == 0 ) min = A ; else if ( A < min ) min = A ; } printf ( \"%lld\" , min * ( N - 1 ) ) ; } return 0 ; }", "label": 2, "id": 23795}
{"input": "int max ( int x , int y ) ; int main ( int argc , char * argv [ ] ) { int a [ 105 ] [ 105 ] , i , j , n , t , maximum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; a [ 0 ] [ 1 ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; } a [ i ] [ j + 1 ] = 0 ; } maximum = a [ n - 1 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ n - 1 ] [ i ] > maximum ) maximum = a [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , maximum ) ; } return 0 ; } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; }", "label": 1, "id": 5449}
{"input": "int main ( ) { int a , b , c , num , dem , lcm , t ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { num = a ; dem = b ; } else { dem = a ; num = b ; } c = num % dem ; while ( c != 0 ) { num = dem ; dem = c ; c = num % dem ; } printf ( \"%d \" , dem ) ; lcm = ( a * b ) / dem ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 2, "id": 19831}
{"input": "int main ( ) { int t , a , b , i , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 0 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; lcm = a * b / gcd ; } printf ( \"%d%d\" , gcd , lcm ) ; } return 0 ; }", "label": 3, "id": 23102}
{"input": "int main ( ) { unsigned short triangleArray [ 5050 ] ; int testCases ; testCases = 1 ; scanf ( \"%d\" , & testCases ) ; int i ; int j ; int k ; for ( i = 0 ; i < testCases ; ++ i ) { int idx = 0 ; int rowCount ; rowCount = 100 ; scanf ( \"%d\" , & rowCount ) ; for ( j = 0 ; j < rowCount ; ++ j ) { for ( k = 0 ; k <= j ; ++ k ) { triangleArray [ idx ++ ] = rand ( ) % 100 ; scanf ( \"%d\" , & triangleArray [ idx ++ ] ) ; } } int lastRowIndex = idx - 1 ; for ( j = rowCount - 2 ; j >= 0 ; -- j ) { int currRowLength = j + 1 ; lastRowIndex = lastRowIndex - currRowLength - 1 ; int firstRowIndex = lastRowIndex - currRowLength + 1 ; for ( k = firstRowIndex ; k <= lastRowIndex ; ++ k ) { int max = 0 ; if ( triangleArray [ k + currRowLength ] > triangleArray [ k + currRowLength + 1 ] ) { max = triangleArray [ k + currRowLength ] ; } else { max = triangleArray [ k + currRowLength + 1 ] ; } triangleArray [ k ] += max ; } } printf ( \"%d\n\" , triangleArray [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 12800}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] = { { 0 , 0 } } , sum , temp = 0 , i , j , flag ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 1 ; j <= ( i + 1 ) ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 1 ; j <= n ; j += 1 ) { temp = 0 ; flag = j ; for ( i = n - 1 ; i > 0 ; i -- ) { if ( a [ i ] [ flag ] > a [ i ] [ flag - 1 ] ) { temp += a [ i ] [ flag ] ; } else if ( a [ i ] [ flag ] == a [ i ] [ flag - 1 ] ) { if ( a [ i - 1 ] [ flag - 1 ] < a [ i - 1 ] [ flag ] || a [ i - 1 ] [ flag - 1 ] < a [ i - 1 ] [ flag ] ) { temp += a [ i ] [ flag ] ; } else { flag -- ; temp += a [ i ] [ flag ] ; } } else { flag -- ; temp += a [ i ] [ flag ] ; } } if ( sum < temp ) sum = temp ; } printf ( \"%d\n\" , ( sum + a [ 0 ] [ 1 ] ) ) ; } return 0 ; }", "label": 1, "id": 11089}
{"input": "int main ( ) { int t , i ; long int a , b , j , c , d ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%li %li\" , & a , & b ) ; c = a ; d = b ; while ( a != b ) { if ( a > b ) a = a - b ; else if ( b > a ) b = b - a ; } printf ( \"%li %li\n\" , a , ( c * d ) / a ) ; } return 0 ; }", "label": 0, "id": 13162}
{"input": "int main ( ) { long long int t , a , b , i ; long long int l , g ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & a ) ; scanf ( \"%lld\" , & b ) ; if ( a > b ) { for ( i = 1 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = i ; } } } else { for ( i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = i ; } } } l = ( a * b ) / g ; printf ( \"%lld %lld\n\" , g , l ) ; } }", "label": 2, "id": 13537}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int lines , sum = 0 , i ; scanf ( \"%d\" , & lines ) ; i = lines ; while ( i ) { sum += i ; i -- ; } int A [ sum + 1 ] ; i = sum ; while ( i >= 0 ) { A [ i ] = 0 ; i -- ; } i = sum ; while ( i ) { scanf ( \"%d\" , & A [ sum + 1 - i ] ) ; i -- ; } for ( i = sum ; i > 0 ; i -- ) { if ( i == sum - lines + 1 ) { sum = sum - lines ; lines -- ; continue ; } if ( A [ i ] > A [ i - 1 ] ) A [ i - lines ] += A [ i ] ; else A [ i - lines ] += A [ i - 1 ] ; } printf ( \"%d\n\" , A [ 1 ] ) ; } }", "label": 0, "id": 16291}
{"input": "int main ( ) { int i , t ; long long int a , b , temp ; unsigned long long int pro = 1 ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%lld %lld\" , & a , & b ) ; pro = a * b ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } printf ( \"%lld %lld\n\" , a , ( pro / a ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 13584}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 9758}
{"input": "long int gcd ( long int a , long int b ) { if ( b % a == 0 ) return a ; else return gcd ( b % a , a ) ; } int main ( ) { int T , i ; long int a , b , g ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%ld %ld\n\" , g , a * b / g ) ; } return 0 ; }", "label": 0, "id": 2784}
{"input": "int a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] ; int sum_in_tri ( int i , int j ) { if ( i >= 100 ) return 0 ; if ( b [ i ] [ j ] != - 1 ) { return b [ i ] [ j ] ; } else { int temp = a [ i ] [ j ] + sum_in_tri ( i + 1 , j ) ; int temp2 = a [ i ] [ j ] + sum_in_tri ( i + 1 , j + 1 ) ; int k = temp > temp2 ? temp : temp2 ; b [ i ] [ j ] = k ; return k ; } } int main ( ) { int n , k , i , j , ans ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { b [ i ] [ j ] = - 1 ; } } for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } ans = sum_in_tri ( 0 , 0 ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 23392}
{"input": "int a [ 5050 ] , n , l , i , j , k , upper , lower ; int main ( void ) { scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l * ( l + 1 ) / 2 ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = l * ( l - 1 ) / 2 - 1 ; i >= 0 ; i -- ) { for ( k = 0 ; k < l ; k ++ ) { if ( i >= k * ( k + 1 ) / 2 && i <= k * ( k + 3 ) / 2 ) { j = k + 1 ; break ; } } a [ i ] += max ( a [ i + j ] , a [ i + j + 1 ] ) ; } printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 24721}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , n , count = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { int j ; count ++ ; for ( j = i ; j < n - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) break ; count ++ ; } } printf ( \"%d\" , count ) ; } }", "label": 1, "id": 1339}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { int i , t ; long long int ab , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; ab = a * b ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , ab / gcd ( a , b ) ) ; } return 0 ; } long long int gcd ( long long int a , long long int b ) { if ( b % a == 0 ) return a ; else return gcd ( b % a , a ) ; }", "label": 0, "id": 15637}
{"input": "int main ( ) { int triangle [ 100 ] [ 100 ] , i , j , n , p , sum1 , sum2 , max , testcases , t = 0 ; scanf ( \"%d\" , & testcases ) ; while ( t < testcases ) { p = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= p ; j ++ ) scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; p ++ ; } p = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { triangle [ i + 1 ] [ 0 ] += triangle [ i ] [ 0 ] ; for ( j = 0 ; j < p ; j ++ ) { sum1 = triangle [ i ] [ j ] + triangle [ i + 1 ] [ j + 1 ] ; sum2 = triangle [ i ] [ j + 1 ] + triangle [ i + 1 ] [ j + 1 ] ; if ( sum1 > sum2 ) triangle [ i + 1 ] [ j + 1 ] = sum1 ; else triangle [ i + 1 ] [ j + 1 ] = sum2 ; } p ++ ; triangle [ i + 1 ] [ j + 1 ] += triangle [ i ] [ j ] ; } max = triangle [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( max < triangle [ n - 1 ] [ i ] ) max = triangle [ n - 1 ] [ i ] ; } printf ( \"%d\" , max ) ; t ++ ; } }", "label": 1, "id": 14134}
{"input": "int main ( ) { long long int n , a [ 200000 ] , sum , k = 0 , i , j , t ; scanf ( \"%lld\" , & t ) ; while ( t ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; k = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i ; j < n - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) break ; else k ++ ; } } sum = k + n ; printf ( \"%lld\n\" , sum ) ; t -- ; } }", "label": 0, "id": 6884}
{"input": "int main ( ) { int i , j , t , k = 0 , c = 0 ; scanf ( \"%d\" , & t ) ; int sum [ t ] ; while ( t != 0 ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < n - 1 ; j ++ ) { c = a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; a [ i - 1 ] [ j ] += c ; } } sum [ k ++ ] = a [ 0 ] [ 0 ] ; t -- ; } for ( i = 0 ; i < k ; i ++ ) printf ( \"%d\n\" , sum [ i ] ) ; return 0 ; }", "label": 0, "id": 16274}
{"input": "main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , min = 0 , a [ n ] ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 3, "id": 8429}
{"input": "int arr [ MAX ] [ MAX ] , dp [ MAX ] [ MAX ] ; int max ( int a , int b ) { return a > b ? a : b ; } int check ( int i , int j , int n ) { if ( i == n - 1 ) return arr [ i ] [ j ] ; if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ; int l = check ( i + 1 , j , n ) ; int r = check ( i + 1 , j + 1 , n ) ; dp [ i ] [ j ] = arr [ i ] [ j ] + max ( l , r ) ; return dp [ i ] [ j ] ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) dp [ i ] [ j ] = - 1 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } printf ( \"%d\n\" , check ( 0 , 0 , n ) ) ; } return 0 ; }", "label": 0, "id": 581}
{"input": "main ( ) { int largest , totalTestCases , rows , firstNum , x , i , j , num ; scanf ( \"%d\" , & totalTestCases ) ; int result [ 2 ] [ 101 ] ; for ( x = 0 ; x < totalTestCases ; x ++ ) { scanf ( \"%d\" , & rows ) ; ; largest = 0 ; scanf ( \"%d\" , & firstNum ) ; if ( rows > 1 ) { for ( i = 0 ; i < 2 ; i ++ ) { scanf ( \"%d\" , & ( result [ 0 ] [ i ] ) ) ; largest = ( largest > result [ 0 ] [ i ] ? largest : result [ 0 ] [ i ] ) ; } result [ 0 ] [ 2 ] = 0 ; } for ( i = 2 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { result [ 1 ] [ j ] = ( j > 0 ? ( result [ 0 ] [ j ] > result [ 0 ] [ j - 1 ] ? result [ 0 ] [ j ] : result [ 0 ] [ j - 1 ] ) : result [ 0 ] [ j ] ) ; scanf ( \"%d\" , & num ) ; result [ 1 ] [ j ] += num ; if ( i == rows - 1 ) { largest = ( largest > result [ 1 ] [ j ] ? largest : result [ 1 ] [ j ] ) ; } else if ( j > 1 ) { result [ 0 ] [ j - 2 ] = result [ 1 ] [ j - 2 ] ; } } result [ 0 ] [ i - 1 ] = result [ 1 ] [ i - 1 ] ; result [ 0 ] [ i ] = result [ 1 ] [ i ] ; result [ 0 ] [ i + 1 ] = 0 ; } printf ( \"%d\n\" , ( largest + firstNum ) ) ; } }", "label": 0, "id": 6782}
{"input": "int main ( ) { int i , t , j , n , a [ 50000 ] , min ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; j = 0 ; min = a [ j ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 21898}
{"input": "int main ( ) { int n , i , sum , k , a [ 100 ] [ 100 ] , m = 1 , l = 0 , j ; scanf ( \"%d\" , & k ) ; while ( m <= k ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = 0 ; for ( i = 0 ; i <= n - 1 ; i ++ ) for ( j = 0 ; j <= i - i ; j ++ ) { sum = sum + ( max ( a [ i ] [ j ] , a [ i ] [ l + 1 ] ) ) ; if ( a [ i ] [ j ] < a [ i ] [ l + 1 ] ) l ++ ; } printf ( \"%d\n\" , sum ) ; m ++ ; } return 0 ; }", "label": 3, "id": 9783}
{"input": "int main ( ) { int cases , i , j , size , * a , cost ; scanf ( \"%d\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { cost = 0 ; scanf ( \"%d\" , & size ) ; a = ( int * ) malloc ( sizeof ( int ) * size ) ; for ( j = 0 ; j < size ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = 1 ; j < size ; j ++ ) { if ( a [ j - 1 ] < a [ j ] ) { cost = cost + a [ j - 1 ] ; a [ j - 1 ] = a [ j - 1 ] + a [ j ] ; a [ j ] = a [ j - 1 ] - a [ j ] ; a [ j - 1 ] = a [ j - 1 ] - a [ j ] ; } else { cost = cost + a [ j ] ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 12284}
{"input": "long int fastInput ( ) { long int val = 0 ; char c = getchar_unlocked ( ) ; while ( c < '0' || c > '9' ) c = getchar_unlocked ( ) ; while ( c >= '0' && c <= '9' ) { val = ( val << 1 ) + ( val << 3 ) + ( c - '0' ) ; c = getchar_unlocked ( ) ; } return val ; } int main ( ) { long int t , n , v , s , tmp ; long long int ans ; t = fastInput ( ) ; while ( t -- ) { n = fastInput ( ) ; s = fastInput ( ) ; ; n -= 1 ; tmp = n ; while ( n -- ) { v = fastInput ( ) ; if ( v < s ) s = v ; } ans = tmp * s ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 21604}
{"input": "int main ( ) { int num1 , num2 , temp1 , temp2 , temp , GCD , LCM ; scanf ( \"%d%d\" , & num1 , & num2 ) ; temp1 = num1 ; temp2 = num2 ; while ( temp2 != 0 ) { temp = temp2 ; temp2 = temp1 % temp2 ; temp1 = temp ; } GCD = temp1 ; LCM = ( num1 + num2 ) / GCD ; printf ( \"%d\" , LCM ) ; printf ( \"%d\" , GCD ) ; return 0 ; }", "label": 1, "id": 1371}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 100 ] , l , c = 0 , i , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i == 0 ) { l = a [ i ] ; } else { if ( a [ i ] > l ) { c += l ; } else if ( a [ i ] < l ) { l = a [ i ] ; c += l ; } } } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 3, "id": 22889}
{"input": "void lg ( int , int , int ) ; int arr [ 99 ] [ 99 ] , n , max ; main ( ) { int i , j , k , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & arr [ j ] [ k ] ) ; max = 0 ; lg ( 0 , 0 , arr [ 0 ] [ 0 ] ) ; printf ( \"%d\n\" , max ) ; } return 0 ; } void lg ( int i , int j , int sum ) { if ( i == n - 1 ) { if ( sum > max ) { max = sum ; } return ; } lg ( i + 1 , j , sum + arr [ i + 1 ] [ j ] ) ; lg ( i + 1 , j + 1 , sum + arr [ i + 1 ] [ j + 1 ] ) ; }", "label": 2, "id": 26609}
{"input": "int main ( void ) { int t , n , i , count , k , num ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; count = n ; num = 1 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) num ++ ; else { count += ( num * ( num - 1 ) / 2 ) ; num = 1 ; } } count += ( num * ( num - 1 ) / 2 ) ; printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 0, "id": 13378}
{"input": "main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int j , k = 1 ; for ( j = 2 ; j <= ( a < b ? a : b ) ; j ++ ) { if ( a % j == 0 && b % j == 0 ) k = j ; } long long int c = ( a * b ) / k ; printf ( \"%d %d\n\" , k , c ) ; } }", "label": 2, "id": 24417}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , i , j , temp , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n - i - 1 ; j ++ ) if ( a [ j ] > a [ j + 1 ] ) SWAP ( a [ j ] , a [ j + 1 ] , temp ) ; sum = a [ 0 ] * ( n - 1 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 26049}
{"input": "int main ( ) { int N , n , i , j , y ; scanf ( \"%d\" , & N ) ; for ( y = 0 ; y < N ; y ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i >= j ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; else a [ i ] [ j ] = 0 ; } } int aa [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) if ( i < j ) aa [ i ] [ j ] = 0 ; } aa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) aa [ i ] [ 0 ] = aa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) { aa [ i ] [ j ] = ( aa [ i - 1 ] [ j ] > aa [ i - 1 ] [ j - 1 ] ? aa [ i - 1 ] [ j ] : aa [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; } } int k = aa [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( aa [ n - 1 ] [ i ] > k ) k = aa [ n - 1 ] [ i ] ; printf ( \"%d\n\" , k ) ; } return 0 ; }", "label": 0, "id": 9778}
{"input": "int main ( void ) { int t , n , i , j , c , sum = 0 , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = sum = 0 ; scanf ( \"%d\" , & n ) ; int a [ 1000 ] [ 1000 ] = { { 0 } } ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { max = 0 ; if ( i == 0 ) { sum += a [ i ] [ c ] ; continue ; } max = a [ i ] [ c ] ; if ( max <= a [ i ] [ c + 1 ] ) { max = a [ i ] [ c + 1 ] ; c += 1 ; } sum += max ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 1959}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 1 ; i < n ; i ++ ) a [ i ] [ 0 ] += a [ i - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 1 ; j < i + 1 ; j ++ ) { if ( i == j ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } int max = a [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( max < a [ n - 1 ] [ i ] ) max = a [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 16907}
{"input": "int main ( ) { unsigned int i = 0 , t , z , ref ; long unsigned int a [ 2 ] ; scanf ( \"%u\n\" , & t ) ; ref = t ; long unsigned int sum [ 10 ] ; while ( t > 0 ) { scanf ( \"%u\n\" , & z ) ; sum [ i ] = 0 ; scanf ( \"%lu\" , & a [ 0 ] ) ; while ( z > 1 ) { scanf ( \"%lu\" , & a [ 1 ] ) ; if ( a [ 0 ] > a [ 1 ] ) { sum [ i ] += a [ 1 ] ; a [ 0 ] = a [ 1 ] ; } else { sum [ i ] += a [ 0 ] ; } z -- ; } t -- ; i ++ ; } i = 0 ; while ( ref > 0 ) { printf ( \"%lu\n\" , sum [ i ] ) ; i ++ ; ref -- ; } return 0 ; }", "label": 1, "id": 1741}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j ; int x , a [ i ] [ j ] , p , q , m = 1 , l , o , y , s ; scanf ( \"%d\" , & x ) ; x = i ; x = j ; for ( p = 1 ; p <= m ; p ++ ) { for ( q = 1 ; q <= x ; q ++ ) { scanf ( \"%d\" , a [ p ] [ q ] ) ; m ++ ; } printf ( \"\n\" ) ; } y = a [ 1 ] [ 1 ] ; l = 2 ; o = 1 ; s = o + 1 ; for ( p = 1 ; p <= x ; p ++ ) { if ( a [ l ] [ o ] > a [ l ] [ s ] ) { y = y + a [ l ] [ o ] ; l ++ ; } else { y = y + a [ l ] [ s ] ; l ++ ; o ++ ; } } printf ( \"%d\n\" , y ) ; } return 0 ; }", "label": 3, "id": 10387}
{"input": "int main ( ) { int j , r , i , gcd , lcm ; scanf ( \"%d\" , & r ) ; for ( j = 0 ; j < r ; j ++ ) { int n1 , n2 ; scanf ( \"%d%d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 21934}
{"input": "int main ( ) { int t , i , n , j , m ; scanf ( \"%d\" , & t ) ; if ( t < 10 && t > 0 ) { for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; if ( n > 1 && n < 50000 ) { int a [ n ] ; m = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( a [ j ] < m ) m = a [ j ] ; } printf ( \"%d\n\" , ( n - 1 ) * m ) ; } else printf ( \"enter array of atleast 2 elements.\n\" ) ; } } else printf ( \"enter the test cases bw 1 to 10\n\" ) ; return 0 ; }", "label": 1, "id": 25207}
{"input": "int main ( ) { int l , n , t , k , count , temp = 0 , i , j ; scanf ( \"%d\" , & t ) ; for ( k = 1 ; k <= t ; k ++ ) { scanf ( \"%d \" , & n ) ; int a [ n ] ; for ( l = 0 ; l < n ; l ++ ) scanf ( \"%d\" , & a [ l ] ) ; count = n ; for ( i = 0 ; i <= n - 2 ; i ++ ) { temp = 0 ; for ( j = i ; j <= n - 1 ; j ++ ) { if ( a [ j ] <= a [ j + 1 ] ) { temp = 1 ; continue ; } else break ; } if ( temp == 1 ) count ++ ; } printf ( \"%d\" , count ) ; } return 0 ; }", "label": 1, "id": 20127}
{"input": "int main ( ) { int t , n , i , p = 50000 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int cost = 0 , xy = 0 , A [ n ] ; for ( i = 0 ; i < n ; ++ i ) scanf ( \"%d\" , & A [ i ] ) ; for ( i = 0 ; i < n ; ++ i ) { if ( xy > A [ i ] ) { xy = A [ i ] ; cost = cost + xy ; } else if ( i == 0 ) xy = A [ i ] ; else if ( xy < A [ i ] ) cost = cost + xy ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 6807}
{"input": "int main ( ) { long int t , a , i , j , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; long int ar [ a ] ; for ( i = 0 ; i < a ; i ++ ) scanf ( \"%d\" , & ar [ i ] ) ; for ( i = 0 ; i < a - 1 ; i ++ ) { for ( j = i + 1 ; j < a ; j ++ ) { if ( ar [ i ] > ar [ j ] ) { temp = ar [ i ] ; ar [ i ] = ar [ j ] ; ar [ j ] = temp ; } } } printf ( \"%d\n\" , ar [ 0 ] * ( a - 1 ) ) ; } }", "label": 2, "id": 1275}
{"input": "int main ( ) { long long int n , l , i , j , x [ 100 ] [ 100 ] ; scanf ( \"%lld\" , & n ) ; while ( n -- ) { scanf ( \"%lld\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & x [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } for ( i = l - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( x [ i + 1 ] [ j ] > x [ i + 1 ] [ j + 1 ] ) x [ i ] [ j ] = x [ i ] [ j ] + x [ i + 1 ] [ j ] ; else x [ i ] [ j ] = x [ i ] [ j ] + x [ i + 1 ] [ j + 1 ] ; } } printf ( \"%lld\" , x [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24987}
{"input": "int main ( ) { long int t , n , cost , i ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & arr [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { arr [ i + 1 ] = arr [ i ] ; cost += arr [ i ] ; } else { cost += arr [ i + 1 ] ; } } printf ( \"%ld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 25605}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , i , min = 100001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , ( n - 1 ) * min ) ; t -- ; } return 0 ; }", "label": 0, "id": 24988}
{"input": "long long gcd ( long long x , long long y ) ; int main ( void ) { long long t , a , b , m , n ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; m = a ; n = b ; while ( n != 0 ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%lld %lld\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 0, "id": 20991}
{"input": "void gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t , a , b , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; gcd ( a , b ) ; l = lcm ( a , b ) ; printf ( \"%d\n\" , ( a * b ) / l ) ; } return 0 ; } void gcd ( int a , int b ) { if ( b == 0 ) { printf ( \"%d \" , a ) ; return ; } if ( a < b ) { return ( gcd ( a , b % a ) ) ; } if ( a > b ) { return ( gcd ( b , a % b ) ) ; } } int lcm ( int a , int b ) { if ( a == b ) { return ( a ) ; } if ( a > b ) { return ( lcm ( b , a - b ) ) ; } if ( b > a ) { return ( lcm ( a , b - a ) ) ; } }", "label": 1, "id": 23444}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { long a , b , c = 1 , d , e ; scanf ( \"%li %li\" , & a , & b ) ; d = a ; e = b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } while ( c ) { c = a % b ; a = b ; b = c ; } printf ( \"%li %li\n\" , a , ( d * e ) / a ) ; } return 0 ; }", "label": 0, "id": 18537}
{"input": "int minMax ( int * array , int length ) { int i = 0 , swap = 0 ; for ( i = 0 ; i < length - 1 ; i ++ ) { if ( array [ i ] > array [ i + 1 ] ) { swap = array [ i ] ; array [ i ] = array [ i + 1 ] ; array [ i + 1 ] = swap ; } } return array [ length - 2 ] ; } int main ( ) { int t = 0 , number_of_inputs = 0 , i = 0 ; int * array ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & number_of_inputs ) ; array = ( int * ) malloc ( sizeof ( int ) * number_of_inputs ) ; for ( i = 0 ; i < number_of_inputs ; i ++ ) scanf ( \"%d\" , & array [ i ] ) ; printf ( \"%d\n\" , minMax ( array , number_of_inputs ) ) ; free ( array ) ; array = '\\0' ; number_of_inputs = 0 ; } return 0 ; }", "label": 1, "id": 2303}
{"input": "void selection_sort ( int , int * ) ; int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n , j , k , count = 0 ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] , temp [ n ] [ n ] ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } for ( k = n - 2 ; k >= 0 ; k -- ) { for ( j = 0 ; j <= k ; j ++ ) temp [ i ] [ j ] += max ( arr [ k + 1 ] [ j + 1 ] , arr [ k + 1 ] [ j ] ) ; } printf ( \"%d\n\" , temp [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 2012}
{"input": "int main ( ) { int t , i ; long a , b , temp , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%li%li\" , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } for ( j = a ; j >= 1 ; j -- ) { if ( a % j == 0 && b % j == 0 ) { printf ( \"%li %li\n\" , j , a * b / j ) ; break ; } } } return 0 ; }", "label": 2, "id": 5131}
{"input": "int main ( ) { int a , b , x , y , lcm , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; x = a ; y = b ; while ( a % b != 0 ) { n = a % b ; a = b ; b = n ; } lcm = ( x * y ) / b ; printf ( \"%d \" , b ) ; printf ( \"%d\n\" , lcm ) ; } }", "label": 1, "id": 18073}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm , t , j = 0 ; scanf ( \"%d\" , & t ) ; while ( j < t ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \" %d %d\n\" , gcd , lcm ) ; j ++ ; } return 0 ; }", "label": 1, "id": 10334}
{"input": "int main ( void ) { int t ; int i ; long int num , n , count , k , temp ; long long int sum = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { temp = 0 ; count = 0 ; sum = 0 ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%ld \" , & num ) ; if ( num >= temp ) { count ++ ; } else { sum = sum + ( count * ( count + 1 ) / 2 ) ; count = 1 ; } temp = num ; } sum = sum + ( count * ( count + 1 ) / 2 ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 548}
{"input": "long long int a [ 105 ] [ 105 ] = { 0 } ; int main ( ) { int n , m , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%lld\" , & a [ i ] [ j ] ) ; for ( i = m - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; for ( i = 0 ; i < 105 ; i ++ ) for ( j = 0 ; j < 105 ; j ++ ) a [ i ] [ j ] = 0 ; } return 0 ; }", "label": 0, "id": 4853}
{"input": "int gcd ( int m , int n ) ; int lcm ( int p , int q ) ; int main ( void ) { int T , x , y ; scanf ( \"%d\" , & T ) ; int i = 1 ; while ( i <= T ) { scanf ( \"%d%d\" , & x , & y ) ; printf ( \"%d %d\" , gcd ( x , y ) , lcm ( x , y ) ) ; i ++ ; } return 0 ; } int gcd ( int m , int n ) { int temp , rem ; if ( n > m ) { temp = n ; n = m ; m = temp ; } do { rem = m % n ; m = n ; n = rem ; } while ( rem != 0 ) ; return n ; } int lcm ( int p , int q ) { int i , temp ; if ( q > p ) { temp = p ; p = q ; q = temp ; } i = q ; while ( i % p != 0 ) { i = i + q ; } return i ; }", "label": 2, "id": 2213}
{"input": "void merge ( long int arr [ ] , long int l , long int m , long int r ) { long int i , j , k ; long int n1 = m - l + 1 ; long int n2 = r - m ; long int L [ n1 ] , R [ n2 ] ; for ( i = 0 ; i < n1 ; i ++ ) { L [ i ] = arr [ l + i ] ; } for ( j = 0 ; j < n2 ; j ++ ) { R [ j ] = arr [ m + 1 + j ] ; } i = 0 ; j = 0 ; k = l ; while ( i < n1 && j < n2 ) { if ( L [ i ] <= R [ j ] ) { arr [ k ] = L [ i ] ; i ++ ; } else { arr [ k ] = R [ j ] ; j ++ ; } k ++ ; } while ( i < n1 ) { arr [ k ] = L [ i ] ; i ++ ; k ++ ; } while ( j < n2 ) { arr [ k ] = R [ j ] ; j ++ ; k ++ ; } } void mergesort ( long int arr [ ] , long int l , long int r ) { if ( l < r ) { long int m = l + ( r - l ) / 2 ; mergesort ( arr , l , m ) ; mergesort ( arr , m + 1 , r ) ; merge ( arr , l , m , r ) ; } } int main ( void ) { long int t , n ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; long int a , i , j ; for ( a = 0 ; a < n ; a ++ ) { scanf ( \"%ld\" , & arr [ a ] ) ; } mergesort ( arr , 0 , n - 1 ) ; printf ( \"%ld\n\" , arr [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 3774}
{"input": "int main ( void ) { int t ; long long int num1 , num2 , gcd = 0 , lcm = 0 , remainder , numerator , denominator ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%lld\\t%lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 12070}
{"input": "int main ( ) { int t , i , j , a [ 100 ] , n , c ; int b [ 100 ] ; int p = 0 ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { p = 0 ; c = 0 ; scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) b [ i ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] < a [ i ] ) { b [ i ] = b [ i - 1 ] + 1 ; } } for ( i = 0 ; i < n ; i ++ ) p = p + b [ i ] ; printf ( \"\n%d\" , p ) ; } return 0 ; }", "label": 3, "id": 681}
{"input": "unsigned long int mat [ MAX ] [ MAX ] ; void empty ( ) { int i , j ; for ( i = 0 ; i < MAX ; i ++ ) for ( j = 0 ; j < MAX ; j ++ ) mat [ i ] [ j ] = 0 ; } int main ( ) { int c , t ; scanf ( \"%d\" , & t ) ; for ( c = 0 ; c < t ; c ++ ) { int i , j , r ; unsigned long int m ; scanf ( \"%d\" , & r ) ; empty ( ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%lu\" , & mat [ i ] [ j ] ) ; for ( i = 1 ; i < r ; i ++ ) { mat [ i ] [ 0 ] += mat [ i - 1 ] [ 0 ] ; for ( j = 1 ; j < r ; j ++ ) { mat [ i ] [ j ] += MAXIMUM ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j ] ) ; } } m = mat [ r - 1 ] [ 0 ] ; for ( j = 1 ; j < r ; j ++ ) { if ( mat [ r - 1 ] [ j ] > m ) m = mat [ r - 1 ] [ j ] ; } printf ( \"%lu\n\" , m ) ; } return 0 ; }", "label": 0, "id": 26877}
{"input": "int GCD ( long int x , long int y ) { int temp ; if ( x < y ) { temp = x ; x = y ; y = temp ; } while ( x % y != 0 ) { temp = x % y ; x = y ; y = temp ; } return y ; } int main ( ) { long int t , x , y , a , b ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & x , & y ) ; a = GCD ( x , y ) ; b = x * y / a ; printf ( \"%ld %ld\n\" , a , b ) ; } }", "label": 0, "id": 19676}
{"input": "int maxi ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; long int ar [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%ld\" , & ar [ i ] [ j ] ) ; } long int max = - 100 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) ar [ i ] [ j ] += ar [ i - 1 ] [ j ] ; else if ( i == j ) ar [ i ] [ j ] += ar [ i - 1 ] [ j - 1 ] ; else ar [ i ] [ j ] += maxi ( ar [ i - 1 ] [ j ] , ar [ i - 1 ] [ j - 1 ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ar [ n - 1 ] [ i ] > max ) max = ar [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 9707}
{"input": "void main ( ) { long int a [ 50000 ] ; long int c , i , n , cost = 0 , t ; scanf ( \"%ld\" , & t ) ; scanf ( \"%ld\" , & n ) ; c = n ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { c = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = c ; } cost = cost + a [ i + 1 ] ; } printf ( \"%ld\" , cost ) ; }", "label": 1, "id": 6401}
{"input": "main ( ) { int t , t1 , i , a , b , min , max ; scanf ( \"%d\" , & t ) ; int hcf [ t ] , lcm [ t ] ; for ( i = 0 ; i < t ; i ++ ) { printf ( \"\n\" ) ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } for ( ; ; ) { if ( max % min == 0 ) { hcf [ i ] = min ; break ; } t1 = min ; min = max % min ; max = t1 ; } lcm [ i ] = ( a * b ) / hcf [ i ] ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"\n\" ) ; printf ( \"%d %d\" , hcf [ i ] , lcm [ i ] ) ; } }", "label": 1, "id": 24293}
{"input": "main ( ) { int t , m , n , i , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & m , & n ) ; for ( i = 1 ; i <= m && i <= n ; i ++ ) { if ( ( m % i == 0 ) && ( n % i == 0 ) ) { gcd = i ; } } lcm = gcd * ( m / gcd ) * ( n / gcd ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 8321}
{"input": "int main ( ) { int T , N , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; int l [ N ] [ N ] ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & l [ i ] [ j ] ) ; } } for ( i = N - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( l [ i ] [ j ] > l [ i ] [ j + 1 ] ) { l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] + l [ i ] [ j ] ; } else { l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] + l [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , l [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11358}
{"input": "int main ( ) { long int t , n , a [ 100000 ] , i , small , c ; scanf ( \"%li\" , & t ) ; while ( t -- ) { scanf ( \"%li\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%li\" , & a [ i ] ) ; } small = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( small > a [ i ] ) small = a [ i ] ; } c = small * ( n - 1 ) ; printf ( \"%li\n\" , c ) ; } return 0 ; }", "label": 0, "id": 21625}
{"input": "int main ( ) { int t , n ; int i , j ; int arr [ 10 ] [ 10 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 345}
{"input": "int main ( void ) { int n , j , t , i1 = 0 , i2 = 0 , i , e1 = 1 , A [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { i1 = 0 ; i2 = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; } while ( t - 1 ) { i = 0 ; while ( i < t - 1 ) { A [ t - 2 ] [ i ] += ( A [ t - 1 ] [ i ] > A [ t - 1 ] [ i + 1 ] ) ? ( A [ t - 1 ] [ i ] ) : ( A [ t - 1 ] [ i + 1 ] ) ; i ++ ; } t -- ; } printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 780}
{"input": "int scanInt ( ) { register int retInt = 0 , d ; while ( ( d = getchar ( ) ) >= '0' ) { retInt = ( retInt << 3 ) + ( retInt << 1 ) + ( d - '0' ) ; } return retInt ; } struct node { unsigned int length ; unsigned int * a ; unsigned int * b ; } ; int main ( void ) { register unsigned int testcase = 0 , i = 0 , j = 0 , k = 0 ; unsigned int * ans ; testcase = scanInt ( ) ; if ( testcase <= 1000 ) { ans = ( int * ) malloc ( testcase * sizeof ( int ) ) ; for ( i = 0 ; i < testcase ; i ++ ) { struct node c ; c . a = NULL ; c . b = NULL ; c . length = scanInt ( ) ; if ( c . length <= 100 ) { for ( j = 0 ; j < c . length ; j ++ ) { c . a = ( int * ) malloc ( ( j + 1 ) * sizeof ( int ) ) ; for ( k = 0 ; k <= j ; k ++ ) { int temp = scanInt ( ) ; if ( temp >= 0 && temp <= 99 ) { if ( j == 0 ) c . a [ k ] = temp ; else { if ( k == 0 ) { c . a [ k ] = c . b [ k ] + temp ; } else { if ( j == k ) { c . a [ k ] = c . b [ k - 1 ] + temp ; } else { unsigned int total = temp ; unsigned int a1 = ( c . b [ k - 1 ] + total ) ; unsigned int a2 = ( c . b [ k ] + total ) ; c . a [ k ] = ( a1 < a2 ) ? a2 : a1 ; } } } } else exit ( 0 ) ; } c . b = c . a ; c . a = NULL ; } ans [ i ] = 0 ; j = c . length - 1 ; k = 0 ; while ( k < c . length ) { if ( ans [ i ] < c . b [ k ] ) ans [ i ] = c . b [ k ] ; k ++ ; } } else exit ( 0 ) ; } for ( i = 0 ; i < testcase ; i ++ ) { printf ( \"%d\n\" , ans [ i ] ) ; } } return 0 ; }", "label": 1, "id": 24855}
{"input": "int main ( ) { int a , b , r , gcd , lcm , temp ; scanf ( \"%d%d\" , & a , & b ) ; temp = b * a ; while ( r != 0 ) { r = b % a ; b = a ; a = r ; } gcd = b ; lcm = temp / gcd ; printf ( \"gcd=%d\nlcm=%d\" , gcd , lcm ) ; return 0 ; }", "label": 1, "id": 1792}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , j , k , c = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lld \" , & a [ j ] ) ; j = 0 ; while ( j < n ) { if ( a [ j ] > a [ j + 1 ] ) { c = c + a [ j + 1 ] ; for ( k = j ; k < n - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; n -- ; } else { c = c + a [ j ] ; for ( k = j + 1 ; k < n - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; n -- ; } j ++ ; } printf ( \"%lld\n\" , c ) ; } return 0 ; }", "label": 2, "id": 1975}
{"input": "int max ( int a , int b ) ; int main ( ) { int n ; int i , c , a , b , lcm , gcd ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a == b ) printf ( \"1 %d\n\" , a ) ; else { c = max ( a , b ) ; for ( i = 1 ; i <= c ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) gcd = i ; } a = a / gcd ; b = b / gcd ; lcm = a * b ; printf ( \"%d %d\n\" , gcd , lcm ) ; } } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 2, "id": 18230}
{"input": "void faread ( int * a ) { char c ; while ( c < 33 ) c = getchar ( ) ; * a = 0 ; while ( c > 33 ) { * a = * a * 10 + c - '0' ; c = getchar ( ) ; } } int main ( void ) { int i , t , j , n , m ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; faread ( & a [ 0 ] [ 0 ] ) ; a [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { faread ( & a [ i ] [ j ] ) ; a [ i ] [ j ] = max ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) + a [ i ] [ j ] ; } a [ i ] [ j ] = 0 ; } i = 0 ; for ( j = 0 ; j <= n - 1 ; j ++ ) i = max ( i , a [ n - 1 ] [ j ] ) ; printf ( \"%d\n\" , i ) ; } }", "label": 1, "id": 11908}
{"input": "int main ( ) { int a , i , j ; long long int c [ 50000 ] , b , min ; scanf ( \"%d\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%lld\" , & b ) ; for ( j = 0 ; j < b ; j ++ ) { scanf ( \"%lld\" , & c [ j ] ) ; } min = c [ 0 ] ; for ( j = 1 ; j < b ; j ++ ) { if ( c [ j ] < min ) min = c [ j ] ; } printf ( \"%lld\n\" , min * ( b - 1 ) ) ; } return 0 ; }", "label": 0, "id": 2033}
{"input": "int main ( ) { int T , N , i , j ; scanf ( \"%d\" , & T ) ; for ( j = 1 ; j <= T ; j ++ ) { scanf ( \"%d\" , & N ) ; int * a = malloc ( N * sizeof ( int ) ) , min ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i == 0 ) min = a [ 0 ] ; else if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , ( N - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 12203}
{"input": "void quick ( long int a [ ] , long int st , long int end ) { long int s = st , e = end , mid = a [ ( s + e ) / 2 ] , t ; while ( st <= end ) { while ( a [ st ] < mid ) st ++ ; while ( a [ end ] > mid ) end -- ; if ( st <= end ) { t = a [ st ] ; a [ st ] = a [ end ] ; a [ end ] = t ; st ++ ; end -- ; } } if ( s < end ) quick ( a , s , end ) ; if ( st < e ) quick ( a , st , e ) ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; long int st = 0 , end = n - 1 ; quick ( a , st , end ) ; long long int x = a [ 0 ] * ( n - 1 ) ; printf ( \"%lld\n\" , x ) ; } return 0 ; }", "label": 0, "id": 17838}
{"input": "int main ( ) { long T , N , countSubSet , stretch , prev , next ; scanf ( \"%ld\" , & T ) ; while ( T -- ) { scanf ( \"%ld\" , & N ) ; if ( N == 1 ) printf ( \"%ld\" , countSubSet ) ; else { countSubSet = 0 ; stretch = 1 ; scanf ( \"%ld\" , & prev ) ; N -- ; while ( N -- ) { scanf ( \"%ld\" , & next ) ; fflush ( stdin ) ; if ( prev < next ) { prev = next ; stretch ++ ; } else { prev = next ; if ( stretch == 1 ) countSubSet ++ ; else { countSubSet += ( stretch * ( stretch + 1 ) / 2 ) ; stretch = 1 ; } } } } printf ( \"%ld\" , countSubSet ) ; } return 0 ; }", "label": 1, "id": 6094}
{"input": "void main ( ) { char a ; int i ; for ( i = 0 ; i <= 255 ; i ++ ) { a = i ; printf ( \"%c %d\n\" , a , a ) ; } }", "label": 3, "id": 19410}
{"input": "int fun ( int a , int b ) { if ( b == 0 ) return a ; fun ( b , a % b ) ; } int fun1 ( int x , int y ) { return x * y ; } int main ( ) { int t , a , b , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d \" , fun ( a , b ) ) ; printf ( \"%d\n\" , fun1 ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 7163}
{"input": "int main ( ) { long int T ; scanf ( \"%ld\" , & T ) ; while ( T > 0 ) { long int a , b , g , i ; long int x , y ; scanf ( \"%ld%ld\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } i = ( x * y ) / a ; printf ( \"%ld\" , a ) ; printf ( \" \" ) ; printf ( \"%ld\" , i ) ; T -- ; printf ( \"\n\" ) ; } return 0 ; }", "label": 0, "id": 5647}
{"input": "int main ( ) { int a [ l_max ] [ l_max ] = { 0 } , max [ l_max ] = { 0 } ; int i , j , k , m , test , line , sum = 0 , sumMax = 0 ; scanf ( \"%d\" , & test ) ; for ( k = 0 ; k < test ; k ++ ) { scanf ( \"%d\" , & line ) ; if ( line < 0 || line > 99 ) return 0 ; for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] < 0 || a [ i ] [ j ] > 99 ) return 0 ; } } for ( m = 0 ; m < line ; m ++ ) { sum = 0 ; for ( i = m , j = m ; i < line ; i ++ ) { sum += a [ i ] [ j ] ; if ( sum > sumMax ) sumMax = sum ; } } max [ k ] = sumMax ; } for ( k = 0 ; k < test ; k ++ ) printf ( \"\n%d\" , max [ k ] ) ; return 0 ; }", "label": 1, "id": 20959}
{"input": "int solve ( int i , int j ) ; int arr [ 100 ] [ 100 ] , n ; int main ( ) { int i , j , k , x ; scanf ( \"%d \" , & x ) ; for ( k = 1 ; k <= x ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } printf ( \"%d\n\" , solve ( 0 , 0 ) ) ; } return 0 ; } int solve ( int i , int j ) { int cost1 , cost2 , cost , cache [ 100 ] [ 100 ] , visited [ 100 ] [ 100 ] = { 0 } ; if ( i > n ) return 0 ; if ( visited [ i ] [ j ] == 1 ) return cache [ i ] [ j ] ; cost1 = solve ( i + 1 , j ) ; cost2 = solve ( i + 1 , j + 1 ) ; if ( cost1 > cost2 ) cost = cost1 + arr [ i ] [ j ] ; else cost = cost2 + arr [ i ] [ j ] ; cache [ i ] [ j ] = cost ; visited [ i ] [ j ] = 1 ; return cost ; }", "label": 3, "id": 21472}
{"input": "int main ( ) { long int * p , * q ; unsigned long int * r , * s ; int i , n , j , k ; scanf ( \"%d\" , & n ) ; q = ( long int * ) malloc ( sizeof ( int ) * ( n + 1 ) ) ; p = ( long int * ) malloc ( sizeof ( int ) * ( n + 1 ) ) ; r = ( unsigned long int * ) malloc ( sizeof ( int ) * ( n + 1 ) ) ; s = ( unsigned long int * ) malloc ( sizeof ( int ) * ( n + 1 ) ) ; for ( i = 1 ; i <= ( n ) ; i ++ ) { scanf ( \"%ld %ld\" , & p [ i ] , & q [ i ] ) ; } k = 1 ; for ( i = 1 ; i <= n ; i ++ ) { if ( p [ i ] < q [ i ] ) { for ( j = p [ i ] ; j >= 1 ; ) { if ( ( p [ i ] % j == 0 ) && ( q [ i ] % j == 0 ) ) { s [ i ] = j ; break ; } k ++ ; j = p [ i ] ; j = j / k ; } } else { for ( j = q [ i ] ; j >= 1 ; ) { if ( ( p [ i ] % j == 0 ) && ( q [ i ] % j == 0 ) ) { s [ i ] = j ; break ; } k ++ ; j = q [ i ] ; j = j / k ; } } } k = 1 ; for ( i = 1 ; i <= n ; i ++ ) { if ( p [ i ] > q [ i ] ) { for ( j = p [ i ] ; j <= ( p [ i ] * q [ i ] ) ; ) { if ( ( j % p [ i ] == 0 ) && ( j % q [ i ] == 0 ) ) { r [ i ] = j ; break ; } k ++ ; j = p [ i ] ; j = j * k ; } } if ( p [ i ] <= q [ i ] ) { for ( j = q [ i ] ; j <= ( p [ i ] * q [ i ] ) ; ) { if ( ( j % p [ i ] == 0 ) && ( j % q [ i ] == 0 ) ) { r [ i ] = j ; break ; } k ++ ; j = q [ i ] ; j = j * k ; } } } for ( i = 1 ; i <= ( n ) ; i ++ ) { printf ( \"%lu %lu\n\" , s [ i ] , r [ i ] ) ; } return 0 ; }", "label": 2, "id": 14144}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int i , j ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int sum = 0 ; for ( j = 0 ; j < n ; j ++ ) { sum = sum + a [ j ] [ 0 ] ; } int max = sum ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = n - 1 ; j > i ; j -- ) { sum = sum + a [ j ] [ i + 1 ] - a [ j ] [ i ] ; if ( sum > max ) { max = sum ; } } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 13057}
{"input": "Merge_Sort ( int a [ ] , int p , int r ) { int q , i ; if ( p < r ) { q = ( p + r ) / 2 ; Merge_Sort ( a , p , q ) ; Merge_Sort ( a , q + 1 , r ) ; Merge ( a , p , q , r ) ; } } Merge ( int a [ ] , int p , int q , int r ) { int n1 , n2 , i , j , k , t1 , k1 ; n1 = q - p + 1 ; n2 = r - q ; int L [ n1 ] ; int R [ n2 ] ; for ( i = 1 ; i <= n1 ; i ++ ) L [ i ] = a [ p + i - 1 ] ; for ( j = 1 ; j <= n2 ; j ++ ) R [ j ] = a [ q + j ] ; i = 1 ; j = 1 ; for ( k = p ; k <= r ; k ++ ) { if ( L [ i ] <= R [ j ] ) { a [ k ] = L [ i ] ; i ++ ; if ( i > q ) { t1 = 1 ; break ; } } else { a [ k ] = R [ j ] ; j ++ ; if ( ( j + q ) > r ) { t1 = 0 ; break ; } } } if ( t1 == 1 ) { for ( k1 = k + 1 ; k1 <= r ; k1 ++ ) { a [ k1 ] = R [ j ] ; j ++ ; } } else { for ( k1 = k + 1 ; k1 <= r ; k1 ++ ) { a [ k1 ] = L [ i ] ; i ++ ; } } } int main ( void ) { int t , i ; int n ; long long int ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } Merge_Sort ( a , 0 , n ) ; ans = ( long long ) a [ 0 ] * ( long long ) ( n - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 8054}
{"input": "int tri [ 100 ] [ 100 ] , n ; void program ( ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) program ( ) ; return 0 ; } void program ( ) { int i , j , x ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & tri [ i ] [ j ] ) ; } } i = 0 ; j = 0 ; x = sum ( i , j ) ; printf ( \"%d\n\" , x ) ; } int sum ( int i , int j ) { int x ; if ( i == ( n - 1 ) ) return tri [ i ] [ j ] ; x = max ( sum ( i + 1 , j ) + tri [ i ] [ j ] , sum ( i + 1 , j + 1 ) + tri [ i ] [ j ] ) ; return x ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 2, "id": 20863}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , j , k , temp ; long long int m = 21345678097 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( a [ j ] < m ) { m = a [ j ] ; } } int cost = ( n - 1 ) * m ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 10066}
{"input": "int main ( ) { int t , a [ 60000 ] , min = 0 , i = 0 ; long long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 21945}
{"input": "int main ( ) { int t , i , a [ 1000 ] , n , sum = 0 , pos = 0 , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { for ( i = 0 ; i < ( n * ( n + 1 ) ) / 2 ; i ++ ) a [ i ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < ( n * ( n + 1 ) ) / 2 ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; sum = a [ 0 ] ; pos = 0 ; for ( j = 1 ; j < n ; j ++ ) { pos += j ; if ( a [ pos ] > a [ pos + 1 ] ) sum += a [ pos ] ; else sum += a [ ++ pos ] ; } printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 3, "id": 10214}
{"input": "int main ( void ) { long long int t , i , n , a [ 50000 ] , min ; scanf ( \"%lld\" , & t ) ; while ( t > 0 ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lid \" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 19509}
{"input": "int gcd ( int a , int b ) { int i , gcd ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { gcd = i ; } } return gcd ; } int lcm ( int a , int b ) { return ( a * b ) / ( gcd ( a , b ) ) ; } int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int temp ; if ( b > a ) { temp = a ; a = b ; b = temp ; } printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 2, "id": 14104}
{"input": "int tri [ 101 ] [ 101 ] = { { 0 } } ; int main ( ) { int t = 0 , max = 0 , sum , i = 0 , j = 0 , ind = 1 , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { n = 0 ; sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & tri [ i ] [ j ] ) ; } } max = tri [ n ] [ 1 ] ; for ( j = 2 ; j <= n ; j ++ ) { if ( max < tri [ n ] [ j ] ) { max = tri [ n ] [ j ] ; ind = j ; } } i = n - 1 ; j = ind ; sum = max ; for ( i = n - 1 ; i >= 1 ; i -- ) { if ( j - 1 != 0 ) { if ( tri [ i ] [ j ] > tri [ i ] [ j - 1 ] ) { sum += tri [ i ] [ j ] ; } if ( tri [ i ] [ j ] < tri [ i ] [ j - 1 ] ) { sum += tri [ i ] [ j - 1 ] ; j = j - 1 ; } } else if ( j == 1 ) sum += tri [ i ] [ j ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 9449}
{"input": "int main ( ) { long int i , j , t , n , k , m ; scanf ( \"%ld\" , & t ) ; if ( t < 1 || t > 10 ) return 0 ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } k = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < k ) { k = a [ i ] ; } } k *= n - 1 ; printf ( \"%ld\n\" , k ) ; } return 0 ; }", "label": 0, "id": 19566}
{"input": "int main ( void ) { int t ; long a , b , lcm = 0 , res = 0 ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%ld\\t%ld\n\" , & a , & b ) ; res = gcd ( a , b ) ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( \"%ld\\t%ld\n\" , res , lcm ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a == 0 || a == b ) { return b ; } else if ( b == 0 ) { return a ; } else { if ( a > b ) { return gcd ( a % b , b ) ; } else { return gcd ( a , b % a ) ; } } }", "label": 0, "id": 4993}
{"input": "int pow2 ( int a , int b ) { int p = 1 ; b ++ ; while ( -- b ) p *= a ; return p ; } int indx ( int a , int b ) { return ( a * ( a + 1 ) / 2 ) + b ; } int incr ( int arr [ ] , int len ) { int i = len + 1 ; while ( -- i ) { if ( arr [ i - 1 ] == 0 ) { arr [ i - 1 ] = 1 ; break ; } else arr [ i - 1 ] = 0 ; } return 0 ; } int main ( ) { int bin [ 101 ] , max ; int n , i , j , t , sum , max_sum = 0 ; scanf ( \"%d\" , & t ) ; t ++ ; while ( -- t ) { max_sum = 0 ; scanf ( \"%d\" , & n ) ; int arr [ n * ( n + 1 ) / 2 ] ; for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) scanf ( \"%d\" , arr + indx ( i , j ) ) ; max = pow2 ( 2 , n - 1 ) + 1 ; while ( -- max ) { sum = 0 ; for ( i = 0 , j = 0 ; i < n ; ++ i ) { sum += arr [ indx ( i , j ) ] ; if ( bin [ i ] ) j ++ ; } if ( sum > max_sum ) max_sum = sum ; incr ( bin , n - 1 ) ; } printf ( \"%d\n\" , max_sum ) ; } return 0 ; }", "label": 1, "id": 1087}
{"input": "int main ( void ) { int t , temp ; long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; int temp1 = a * b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } while ( b > 1 ) { temp = a % b ; a = b ; b = temp ; } printf ( \"%d %d\n\" , b , temp1 / b ) ; } return 0 ; }", "label": 3, "id": 11034}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { long long int n , i , b = - 1 , count = 0 , result = 0 , a ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a ) ; if ( a >= b ) count ++ ; else { result = result + count * ( count + 1 ) / 2 ; count = 1 ; } b = a ; } result = result + count * ( count + 1 ) / 2 ; printf ( \"%lld\" , result ) ; t -- ; } }", "label": 1, "id": 7274}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , n , arr [ 50000 ] , smallest = 100000 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < smallest ) smallest = arr [ i ] ; } printf ( \"%lld\n\" , ( long long int ) smallest * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 20336}
{"input": "int main ( ) { int n1 , n2 , i , gcd , t ; printf ( \"Enter two integers: \" ) ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } t = ( n1 > n2 ) ? n1 : n2 ; while ( 1 ) { if ( t % n1 == 0 && t % n2 == 0 ) { break ; } ++ t ; } return 0 ; printf ( \"%d %d\" , gcd , t ) ; return 0 ; }", "label": 1, "id": 23}
{"input": "int main ( void ) { long long t , count , i , j , a [ 100000 ] , n ; scanf ( \"%lld\" , & t ) ; while ( t -- != 0 ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; count = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] && a [ j ] >= a [ j - 1 ] ) { count ++ ; } else break ; } } printf ( \"%lld\n\" , count + n ) ; } return 0 ; }", "label": 0, "id": 6992}
{"input": "main ( ) { int t , n , a [ 100 ] [ 100 ] ; int i , j , temp1 , temp2 , temp3 ; char d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 1 ; i < n ; i ++ ) for ( j = i ; j < n ; j ++ ) a [ i ] [ j ] = 0 ; temp1 = 0 ; temp2 = 0 ; temp3 = 0 ; for ( i = ( n - 1 ) ; i > 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i - 1 ] [ j ] ) >= ( a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ) && ( j - 1 ) >= 0 ) temp3 = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else { temp2 = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; temp3 = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; d = 1 ; } if ( temp1 != 0 ) { if ( d == 1 ) { if ( temp1 >= temp2 ) a [ i - 1 ] [ j - 1 ] = temp1 ; else a [ i - 1 ] [ j - 1 ] = temp2 ; temp1 = temp3 ; temp2 = temp3 = 0 ; } else { a [ i - 1 ] [ j - 1 ] = temp1 ; temp1 = temp3 ; temp2 = temp3 = 0 ; } } else { temp1 = temp3 ; temp2 = temp3 = 0 ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return ( 0 ) ; }", "label": 1, "id": 6501}
{"input": "int main ( ) { int a [ 10 ] [ 10 ] , t , i , j , start = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i <= t - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } for ( i = 0 ; i <= 2 ; i ++ ) { for ( j = start ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] < a [ i + 1 ] [ j + 1 ] ) { a [ 0 ] [ 0 ] += a [ i + 1 ] [ j + 1 ] ; start = j + 1 ; break ; } else { a [ 0 ] [ 0 ] += a [ i + 1 ] [ j ] ; start = j ; break ; } } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; return 0 ; }", "label": 3, "id": 4792}
{"input": "int main ( ) { int T , N , j , i ; scanf ( \" %d\" , & T ) ; if ( T >= 1 && T <= 5 ) { for ( j = 0 ; j < T ; j ++ ) { scanf ( \" %d\" , & N ) ; int a [ N ] , sum = N , k ; for ( i = 0 ; i < N ; i ++ ) scanf ( \" %d\" , & a [ i ] ) ; for ( i = 0 ; i < N - 1 ; i ++ ) { for ( k = i + 1 ; k < N ; k ++ ) { if ( a [ k ] >= a [ k - 1 ] ) sum = sum + 1 ; else break ; } if ( i == 0 && k == N ) { sum = ( ( N * N ) + N ) / 2 ; break ; } } printf ( \"%d\n\" , sum ) ; } } }", "label": 0, "id": 26588}
{"input": "int main ( ) { int t , m , i , j , k , n , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j <= n ; j ++ ) { a [ j ] [ 0 ] = 0 ; } for ( j = 1 ; j <= n ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = 1 ; j <= n ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { a [ j ] [ k ] = max ( a [ j - 1 ] [ k - 1 ] + a [ j ] [ k ] , a [ j - 1 ] [ k ] + a [ j ] [ k ] ) ; } } m = 0 ; for ( k = 1 ; k <= n ; k ++ ) { if ( a [ n ] [ k ] > m ) m = a [ n ] [ k ] ; } printf ( \"%d\n\" , m ) ; } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 3, "id": 1462}
{"input": "long unsigned hcf ( long unsigned a , long unsigned b ) { if ( a % b == 0 ) return b ; hcf ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long unsigned a , b , h , l ; scanf ( \"%lu%lu\" , & a , & b ) ; h = hcf ( a , b ) ; l = a * b / h ; printf ( \"%lu %lu\n\" , h , l ) ; } return 0 ; }", "label": 0, "id": 6815}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; long int min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%ld\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 19627}
{"input": "int main ( ) { long long int t , n , i , j , sum = 0 , a [ 100 ] [ 100 ] ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = a [ 0 ] [ 0 ] ; j = 0 ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) a [ i - 1 ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 19189}
{"input": "int main ( void ) { int t , count = 0 , temp = 1 ; long int n ; int i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; count = n ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] > a [ i ] ) { if ( temp != 1 ) { count = count + ( ( ( temp * temp ) - temp ) / 2 ) ; temp = 1 ; } } else { temp ++ ; } } if ( temp != 1 && i == n - 1 ) count = count + ( ( ( temp * temp ) - temp ) / 2 ) ; printf ( \"%d\" , count ) ; } return 0 ; }", "label": 1, "id": 213}
{"input": "int main ( ) { int sum = 0 , T , n , i , k , temp , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j <= i - 1 ; j ++ ) a [ i - 1 ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 10183}
{"input": "void scanint ( int * x ) { register int c = gc ( ) ; * x = 0 ; for ( ; ( c < 48 || c > 57 ) ; c = gc ( ) ) ; for ( ; c > 47 && c < 58 ; c = gc ( ) ) { ( * x ) = ( ( * x ) << 1 ) + ( ( * x ) << 3 ) + c - 48 ; } } main ( ) { int n , d ; scanint ( & n ) ; while ( n -- ) { scanf ( \"%d\" , & d ) ; int i , j ; int data [ d ] [ d ] ; for ( i = 0 ; i < d ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanint ( & data [ i ] [ j ] ) ; } for ( i = d - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) data [ i ] [ j ] += max ( data [ i + 1 ] [ j + 1 ] , data [ i + 1 ] [ j ] ) ; } printf ( \"%d\n\" , data [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 3193}
{"input": "int main ( ) { int t ; int rem , a , b , num , den , lcm ; scanf ( \"%d\" , & t ) ; for ( ; t > 0 ; t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; for ( ; rem != 0 ; rem = num % den ) { num = den ; den = rem ; } lcm = a * b / den ; printf ( \"%d %d\n\" , den , lcm ) ; } return 0 ; }", "label": 1, "id": 397}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a > b ) return gcd ( a % b , b ) ; if ( b > a ) return gcd ( b % a , a ) ; if ( a == b ) return a ; } int main ( ) { int t , g , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%d %d\n\" , g , a * b / g ) ; } return 0 ; }", "label": 1, "id": 2370}
{"input": "int main ( ) { int n , i , t , j ; long long int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5965}
{"input": "long int gcd ( long int , long int ) ; long long int lcm ( long int , long int ) ; int main ( ) { int t , i ; long int a , b , x ; long long int y ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; x = gcd ( a , b ) ; y = lcm ( a , b ) ; printf ( \"\n%ld\\t%ld\n\" , x , y ) ; } return 0 ; } long int gcd ( long int a , long int b ) { if ( a == 0 || b == 0 ) { if ( b > 0 ) return ( b ) ; if ( a > 0 ) return ( a ) ; if ( a == b ) return ( 0 ) ; } else { while ( a > 0 && b > 0 ) { if ( a > b ) { if ( a % b == 0 ) return ( b ) ; else a = a - b ; } else { if ( b % a == 0 ) return ( a ) ; else b = b - a ; } } } } long long int lcm ( long int a , long int b ) { long long int l ; if ( a == 0 || b == 0 ) return ( 0 ) ; else { l = ( a * b ) / gcd ( a , b ) ; return ( l ) ; } }", "label": 0, "id": 7438}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return ( gcd ( b % a , a ) ) ; } int main ( void ) { int t ; long int a , b , lcm , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; g = gcd ( a , b ) ; lcm = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , lcm ) ; } return 0 ; }", "label": 0, "id": 3986}
{"input": "int main ( ) { int t , i , cost , n , a [ 100000 ] , j , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; j = 1 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; temp = a [ 0 ] ; while ( j < n ) { if ( temp < a [ j ] ) cost += temp ; else if ( a [ j ] < temp ) { temp = a [ j ] ; cost += temp ; } j ++ ; } printf ( \"%d\n\" , cost ) ; } }", "label": 1, "id": 23519}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , k , l , m , n , o , p ; scanf ( \"%d\" , & o ) ; while ( o != 0 ) { o -- ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] + a [ i + 1 ] [ j ] > a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) a [ i + 1 ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; else a [ i + 1 ] [ j + 1 ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ i ] [ j ] ) ; } return 0 ; }", "label": 3, "id": 14270}
{"input": "int main ( ) { int b , i , j , c ; scanf ( \"%d\" , & b ) ; while ( b -- ) { int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & c ) ; for ( i = 0 ; i < c ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = c - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } else { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 10839}
{"input": "int main ( ) { int i , j , n , t , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 0 ; i -- ) { for ( j = i ; j > 1 ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - 1 ] ? a [ i ] [ j ] : a [ i ] [ j - 1 ] ; a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + max ; } } printf ( \"%d\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 1, "id": 11999}
{"input": "void main ( ) { int T , i , A , B , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 21772}
{"input": "int main ( ) { int n , t , i , j , max , count ; int a [ 1000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { max = i ; for ( j = 0 ; j < n ; j ++ ) { if ( j > max ) max = j ; else count ++ ; } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 3, "id": 6872}
{"input": "int main ( int argc , char * argv [ ] ) { int * results ; int * sums = malloc ( MAX_SIZE * sizeof ( int ) ) ; int * prev_sums = malloc ( MAX_SIZE * sizeof ( int ) ) ; int round , rounds ; int line , width ; int i , tmp , max ; scanf ( \"%d\" , & rounds ) ; results = calloc ( rounds , sizeof ( int ) ) ; for ( round = 0 ; round < rounds ; ++ round ) { scanf ( \"%d\" , & width ) ; for ( i = 0 ; i < width ; ++ i ) sums [ i ] = prev_sums [ i ] = 0 ; for ( line = 0 ; line < width ; ++ line ) { for ( i = 0 ; i < ( line + 1 ) ; ++ i ) { scanf ( \"%d\" , & tmp ) ; if ( i == 0 ) { sums [ i ] = prev_sums [ i ] + tmp ; } else { sums [ i ] = ( prev_sums [ i ] > prev_sums [ i - 1 ] ) ? ( prev_sums [ i ] + tmp ) : ( prev_sums [ i - 1 ] + tmp ) ; } } for ( i = 0 ; i < ( line + 1 ) ; ++ i ) prev_sums [ i ] = sums [ i ] ; } for ( max = i = 0 ; i < line + 1 ; ++ i ) { if ( max < sums [ i ] ) { max = sums [ i ] ; } } printf ( \"%d\n\" , max ) ; } free ( prev_sums ) ; free ( sums ) ; free ( results ) ; return 0 ; }", "label": 0, "id": 10207}
{"input": "int main ( ) { int n , i , j , t ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; int ar [ t ] [ t ] ; for ( i = 0 ; i < t ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; for ( i = t - 1 ; i > 0 ; i -- ) for ( j = t - 2 ; j >= 0 ; j -- ) if ( ar [ i ] [ j ] > ar [ i ] [ j + 1 ] ) ar [ i - 1 ] [ j ] += ar [ i ] [ j ] ; else ar [ i - 1 ] [ j ] += ar [ i ] [ j + 1 ] ; printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11100}
{"input": "long long int max ( long long int a , long long int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { long long int a , b , n , t , i , j , k ; scanf ( \"%lld\" , & t ) ; long long int arr [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { arr [ i ] [ j ] = sum [ i ] [ j ] = 0 ; } } a = b = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= a ; j ++ ) { scanf ( \"%lld\" , & arr [ i ] [ j ] ) ; } a ++ ; } a = b = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = a ; j < n ; j ++ ) { if ( i == 0 && j == 0 ) { sum [ j ] [ i ] = arr [ j ] [ i ] ; } else if ( i == 0 ) { sum [ j ] [ i ] = sum [ j - 1 ] [ i ] + arr [ j ] [ i ] ; } else { sum [ j ] [ i ] = max ( sum [ j - 1 ] [ i ] + arr [ j ] [ i ] , sum [ j - 1 ] [ i - 1 ] + arr [ j ] [ i ] ) ; } } a ++ ; } k = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( sum [ n - 1 ] [ i ] > k ) k = sum [ n - 1 ] [ i ] ; } printf ( \"%lld\n\" , k ) ; } return 0 ; }", "label": 0, "id": 26190}
{"input": "int main ( ) { int T [ 100 ] [ 100 ] , t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & T [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { T [ i ] [ j ] += MAX ( T [ i + 1 ] [ j ] , T [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , T [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11490}
{"input": "int main ( ) { int n , nor , i , j , ar [ 100 ] [ 100 ] , r , c , rows ; scanf ( \"%d\" , & n ) ; if ( n <= 1000 ) { while ( n -- > 0 ) { scanf ( \"%d\" , & rows ) ; nor = rows ; if ( nor >= 1 && nor <= 100 ) { for ( i = 0 ; i < nor ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } r = rows - 2 ; while ( r >= 0 ) { c = 0 ; while ( c <= r ) { ar [ r ] [ c ] += ( ar [ r + 1 ] [ c ] > ar [ r + 1 ] [ c + 1 ] ? ar [ r + 1 ] [ c ] : ar [ r + 1 ] [ c + 1 ] ) ; c ++ ; } r -- ; } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } } return 0 ; }", "label": 0, "id": 19550}
{"input": "int main ( ) { int t , n , arr [ 100 ] [ 100 ] , j , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8572}
{"input": "int main ( ) { int j , t ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { int a , b ; scanf ( \"%d %d\n\" , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , a , ( n1 * n2 ) / a ) ; } return 0 ; }", "label": 1, "id": 18191}
{"input": "int c [ MAX ] [ MAX ] , memo [ MAX ] [ MAX ] ; int n ; int read_num ( ) { int n = 0 ; char c ; while ( 1 ) { c = GETCHAR ( ) ; if ( c == '\n' || c == ' ' ) break ; n = n * 10 + c - '0' ; } return n ; } int solve ( int i , int j ) { int t , t1 , t2 ; if ( i > n - 1 ) return 0 ; else if ( memo [ i ] [ j ] != - 1 ) return memo [ i ] [ j ] ; else { t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; if ( t1 > t2 ) t = t1 + c [ i ] [ j ] ; else t = t2 + c [ i ] [ j ] ; memo [ i ] [ j ] = t ; } return t ; } int main ( ) { int t , i , j ; t = read_num ( ) ; while ( t -- ) { n = read_num ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { c [ i ] [ j ] = read_num ( ) ; memo [ i ] [ j ] = - 1 ; } } printf ( \"%d\n\" , solve ( 0 , 0 ) ) ; } return 0 ; }", "label": 1, "id": 23207}
{"input": "int main ( ) { int T , n , min , a , l ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; min = 100000 ; l = n - 1 ; while ( n -- ) { scanf ( \"%d\" , & a ) ; if ( a < min ) min = a ; } printf ( \"%d\n\" , l * min ) ; } return 0 ; }", "label": 0, "id": 22755}
{"input": "int main ( ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; int A [ n ] , min = INT_MAX ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; if ( A [ i ] < min ) min = A [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 2832}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; long int gcd [ n ] , lcm [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { long int a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; for ( int j = 1 ; j <= a && j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { gcd [ i ] = j ; } else if ( a == b ) { gcd [ i ] = 1 ; break ; } } printf ( \"%ld %ld\n\" , gcd [ i ] , ( a * b ) / gcd [ i ] ) ; } }", "label": 2, "id": 6153}
{"input": "int main ( ) { int n , t , p ; scanf ( \"%d\" , & n ) ; for ( p = 0 ; p < n ; p ++ ) { scanf ( \"%d\" , & t ) ; long int a [ t ] ; long int min = 100000 ; int i ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < t ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%ld\n\" , min * ( t - 1 ) ) ; } return 0 ; }", "label": 1, "id": 12473}
{"input": "int n , N , a [ 100 ] [ 100 ] , i , j , k , sum [ 100 ] ; int max ( int x , int y ) { int z = ( x > y ) ? x : y ; return z ; } int solve ( int i , int j ) { if ( i > N ) return 0 ; else return max ( solve ( i + 1 , j ) , solve ( i + 1 , j + 1 ) ) + a [ i ] [ j ] ; } int main ( ) { for ( i = 0 ; i < 100 ; i ++ ) sum [ i ] = 0 ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum [ k ] = solve ( 0 , 0 ) ; } for ( k = 0 ; k < n ; k ++ ) printf ( \"%d\n\" , sum [ k ] ) ; return 0 ; }", "label": 2, "id": 11028}
{"input": "int main ( void ) { long int i , j , t , a , b , n , c = 0 ; scanf ( \"%li\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%li\" , & n ) ; c = 0 ; scanf ( \"%li\" , & a ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { scanf ( \"%li\" , & b ) ; if ( a > b ) { c += b ; a = b ; } else if ( b > a ) c += a ; } printf ( \"%li\n\" , c ) ; } return 0 ; }", "label": 1, "id": 17026}
{"input": "int main ( ) { int i , j , k , n , t ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] ; for ( k = 0 ; k < t ; k ++ ) { for ( i = 0 ; i <= k ; i ++ ) scanf ( \"%d\" , & a [ k ] [ i ] ) ; } for ( j = t - 1 ; j > 0 ; j -- ) { for ( k = 0 ; k < j ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + 1 ] ) a [ j - 1 ] [ k ] = a [ j - 1 ] [ k ] + a [ j ] [ k ] ; else a [ j - 1 ] [ k ] = a [ j - 1 ] [ k ] + a [ j ] [ k + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 5743}
{"input": "int gcd ( int , int ) ; main ( ) { int t , a , b , g ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%d %d\" , g , ( a * b ) / g ) ; t -- ; } return 0 ; } int gcd ( int x , int y ) { if ( x == 1 || y == 1 ) return 1 ; else if ( x == 0 || y == 0 ) return ( x == 0 ? y : x ) ; if ( x > y ) return gcd ( y , x % y ) ; else if ( x < y ) return ( x , y % x ) ; }", "label": 1, "id": 2093}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , i , a , b , rgcd , rlcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; rgcd = gcd ( a , b ) ; rlcm = ( a * b ) / rgcd ; printf ( \"%d %d\n\" , rgcd , rlcm ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; }", "label": 1, "id": 26065}
{"input": "main ( ) { int a [ 100 ] [ 100 ] , r , c , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( r = 0 ; r ++ < n ; ) for ( c = 0 ; c ++ <= r ; ) scanf ( \"%d\" , & a [ r ] [ c ] ) ; for ( r = n - 2 ; r -- >= 0 ; ) for ( c = 0 ; c ++ <= r ; ) a [ r ] [ c ] += a [ r + 1 ] [ c ] > a [ r + 1 ] [ c + 1 ] ? a [ r + 1 ] [ c ] : a [ r + 1 ] [ c + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 2665}
{"input": "int main ( ) { int i , j , t , n , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i + 1 ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23940}
{"input": "int main ( ) { int testcase ; scanf ( \"%d\" , & testcase ) ; while ( testcase -- ) { int arr [ 100 ] [ 100 ] , num , i , j ; scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = num - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] += arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return ( 0 ) ; }", "label": 0, "id": 10043}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int n1 , n2 , gcd , lcm , r , n , d ; scanf ( \"%d %d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { n = n1 ; d = n2 ; } else { n = n2 ; d = n1 ; } r = n % d ; while ( r != 0 ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = n1 * n2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 19215}
{"input": "int main ( ) { int T ; long int a [ 60000 ] , i , N , c ; long long int min ; scanf ( \"%d\" , & T ) ; while ( T -- ) { c = 0 ; scanf ( \"%ld\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%ld \" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } for ( i = 0 ; i < N ; i ++ ) { if ( a [ i ] > min ) c ++ ; } printf ( \"%lld\n\" , ( c * min ) ) ; } return 0 ; }", "label": 1, "id": 11873}
{"input": "int max ( int , int ) ; int solve ( int , int [ 100 ] [ 100 ] ) ; int main ( ) { int n , i , j , k , m , o , a , b , sum , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & m ) ; for ( j = 0 ; j < m ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & o ) ; arr [ j ] [ k ] = o ; } printf ( \"\n\" ) ; } sum = solve ( m , arr ) ; printf ( \"%d\" , sum ) ; } return 0 ; } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x , int arr [ 100 ] [ 100 ] ) { int l , m ; if ( x == 1 ) return arr [ 0 ] [ 0 ] ; for ( l = x - 2 ; l >= 0 ; l -- ) { for ( m = 0 ; m <= l ; m ++ ) arr [ l ] [ m ] += max ( arr [ l + 1 ] [ m ] , arr [ l + 1 ] [ m + 1 ] ) ; } return arr [ 0 ] [ 0 ] ; }", "label": 0, "id": 5811}
{"input": "int cmpfnc ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int t ; long n , count , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; qsort ( a , n , sizeof ( long ) , cmpfnc ) ; count = n ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] >= a [ i ] ) { count += 1 ; a [ j ] = 0 ; break ; } } } } printf ( \"%ld\n\" , count ) ; } return 0 ; }", "label": 1, "id": 1679}
{"input": "int main ( ) { int x , y , m , i , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & x , & y ) ; if ( x > y ) m = y ; else m = x ; for ( i = m ; i >= 1 ; i -- ) { if ( x % i == 0 && y % i == 0 ) { printf ( \"%d %d\n\" , i , ( x * y ) / i ) ; break ; } } } return 0 ; }", "label": 1, "id": 13201}
{"input": "unsigned int tri [ 100 ] [ 100 ] ; int main ( ) { unsigned int n , l , i , j , total ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { total = 0 ; scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & tri [ i ] [ j ] ) ; if ( j > 0 && i > 0 && j < i ) { tri [ i ] [ j ] += tri [ i - 1 ] [ j - 1 ] > tri [ i - 1 ] [ j ] ? tri [ i - 1 ] [ j - 1 ] : tri [ i - 1 ] [ j ] ; } else if ( j == 0 ) { tri [ i ] [ j ] += tri [ i - 1 ] [ 0 ] ; } else if ( j == i ) { tri [ i ] [ j ] += tri [ i - 1 ] [ j - 1 ] ; } } for ( i = 0 ; i < l ; i ++ ) { total = total > tri [ l - 1 ] [ i ] ? total : tri [ l - 1 ] [ i ] ; } printf ( \"%d\n\" , total ) ; n -- ; } return 0 ; }", "label": 3, "id": 18893}
{"input": "int num_rows ; int cache [ 100 ] [ 100 ] = { 0 } ; int m [ 100 ] [ 100 ] ; int max ( int a , int b ) { int ret_val ; if ( a > b ) { ret_val = a ; } else { ret_val = b ; } return ret_val ; } int solve ( int i , int j ) { int t1 , t2 , total ; if ( i > num_rows - 1 ) { total = 0 ; } else { if ( cache [ i ] [ j ] != 0 ) { total = cache [ i ] [ j ] ; } t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; total = max ( t1 , t2 ) + m [ i ] [ j ] ; cache [ i ] [ j ] = total ; } return total ; } int main ( void ) { int test , n , i , j , ans ; scanf ( \"%d\" , & test ) ; while ( test > 0 ) { scanf ( \"%d\" , & num_rows ) ; for ( i = 0 ; i < num_rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & m [ i ] [ j ] ) ; } } ans = solve ( 0 , 0 ) ; printf ( \"%d\n\" , ans ) ; test -- ; } return 0 ; }", "label": 2, "id": 24862}
{"input": "int main ( ) { int nTestCases ; long long nArrIntegers [ 50001 ] , nIntegerCount , nMinCost ; long long i , nSmallestInt = 1000000 ; scanf ( \"%d\" , & nTestCases ) ; while ( nTestCases != 0 ) { scanf ( \"%lld\" , & nIntegerCount ) ; PRINTD ( \"%lld Integers\n\" , nIntegerCount ) ; for ( i = 0 ; i < nIntegerCount ; i ++ ) { scanf ( \"%lld\" , & nArrIntegers [ i ] ) ; PRINTD ( \"%d is current Integer\n\" , nArrIntegers [ i ] ) ; if ( i == 0 ) nSmallestInt = nArrIntegers [ i ] ; else if ( nArrIntegers [ i ] < nSmallestInt ) { nSmallestInt = nArrIntegers [ i ] ; } } nMinCost = nSmallestInt * ( nIntegerCount - 1 ) ; printf ( \"%lld\n\" , nMinCost ) ; nTestCases -- ; } return 0 ; }", "label": 0, "id": 2561}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( \"%d\" , & n ) ; int vec1 [ n + 1 ] [ n + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) for ( j = 0 ; j <= n ; j ++ ) vec1 [ i ] [ j ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & vec1 [ i ] [ j ] ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( vec1 [ i - 1 ] [ j ] > vec1 [ i - 1 ] [ j - 1 ] ) { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j ] + vec1 [ i ] [ j ] ; } else { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j - 1 ] + vec1 [ i ] [ j ] ; } } } max = vec1 [ n ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( vec1 [ n ] [ i ] > max ) max = vec1 [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 2371}
{"input": "int main ( ) { int A , B , T , GCD , LCM ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; GCD = gcd ( A , B ) ; LCM = A * B / GCD ; printf ( \"%d %d\n\" , GCD , LCM ) ; } return 0 ; } int gcd ( int A , int B ) { if ( B == 0 ) return A ; else gcd ( B , A % B ) ; }", "label": 1, "id": 22108}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; int min = 1000000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%d\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 15509}
{"input": "int main ( ) { long a , b ; long temp , gcd ; long lcm , product ; scanf ( \"%ld%ld\" , & a , & b ) ; product = a * b ; while ( a > 0 ) { if ( a < b ) { temp = a ; a = b ; b = temp ; } a = a % b ; } gcd = b ; lcm = product / gcd ; printf ( \"%ld\\t%ld\" , gcd , lcm ) ; return 0 ; }", "label": 1, "id": 19878}
{"input": "static int a [ 100 ] [ 100 ] ; int main ( ) { int k , n , i , j ; scanf ( \"%d\" , & k ) ; while ( k -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) { if ( ( a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) > ( a [ i ] [ j ] + a [ i + 1 ] [ j ] ) ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9906}
{"input": "int main ( ) { long t , n , min , x , c , i ; scanf ( \"\" , & t ) ; while ( t > 0 ) { min = 1000000 ; scanf ( \"\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"\" , & x ) ; if ( x < min ) { min = x ; } } c = min * ( n - 1 ) ; printf ( \"\n\" , c ) ; t -- ; } return ( 0 ) ; }", "label": 2, "id": 16218}
{"input": "int solve ( int a [ ] [ 100 ] , int n , int i , int j ) ; int max ( int x , int y ) ; int main ( void ) { int a [ 100 ] [ 100 ] , i , j , t , n , res , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { res = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } res = solve ( a , n , 0 , 0 ) ; printf ( \"%d\n\" , res ) ; } return 0 ; } int solve ( int a [ ] [ 100 ] , int n , int i , int j ) { int cache [ 100 ] [ 100 ] , t1 , t2 , t ; if ( i > n ) return 0 ; else if ( cache [ i ] [ j ] && 1 ) return cache [ i ] [ j ] ; else { t1 = solve ( a , n , i + 1 , j ) ; t2 = solve ( a , n , i + 1 , j + 1 ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; }", "label": 3, "id": 17367}
{"input": "int maxima ( int a , int b ) ; void main ( ) { int k , arr [ 100 ] [ 100 ] = { 0 } , i , j , n ; scanf ( \"%d %d\" , & k , & n ) ; while ( k -- ) { for ( i = 0 ; i < n ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; -- i ) { for ( j = 0 ; j <= i ; ++ j ) { arr [ i ] [ j ] += maxima ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } } int maxima ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 1, "id": 15492}
{"input": "unsigned long long gcd ( unsigned long long a , unsigned long long b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { unsigned long long t , a , b , lcm , hcf ; scanf ( \"%llu\" , & t ) ; while ( t -- ) { scanf ( \"%llu %llu\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%llu %llu\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 3686}
{"input": "int sumtran ( int n , int triangle [ ] [ 100 ] , int rown , int coln ) ; int main ( ) { int t , i , j , k , n , sum , triangle [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & triangle [ j ] [ k ] ) ; } sum = sumtran ( n , triangle , 0 , 0 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; } int sumtran ( int n , int triangle [ ] [ 100 ] , int rown , int coln ) { int prev_sum ; if ( rown >= n ) return triangle [ rown ] [ coln ] ; if ( sumtran ( n , triangle , rown + 1 , coln ) > sumtran ( n , triangle , rown + 1 , coln + 1 ) ) prev_sum = sumtran ( n , triangle , rown + 1 , coln ) + triangle [ rown ] [ coln ] ; else prev_sum = sumtran ( n , triangle , rown + 1 , coln + 1 ) + triangle [ rown ] [ coln ] ; return prev_sum ; }", "label": 2, "id": 14808}
{"input": "int main ( ) { int tc , n , arr [ 100 ] [ 100 ] , sum , i , j ; scanf ( \"%d\" , & tc ) ; while ( tc ) { scanf ( \"%d\" , & n ) ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) printf ( \"%d \" , arr [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( i = 0 , j = 0 ; i < n ; i ++ ) { sum += MAX ( arr [ i ] [ j ] , arr [ i ] [ j + 1 ] ) ; } printf ( \"%d\" , sum ) ; tc -- ; } return 0 ; }", "label": 1, "id": 9639}
{"input": "int N , arr [ 100000 ] , count ; void func ( int j ) { int i ; if ( j == N - 1 ) return ; for ( i = j ; i < N ; ++ i ) { if ( arr [ i ] <= arr [ i + 1 ] ) continue ; else count += ( i - j + 1 ) * ( i - j ) / 2 ; break ; } func ( i + 1 ) ; } int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; ++ i ) scanf ( \"%d\" , & arr [ i ] ) ; func ( 0 ) ; printf ( \"%d\" , count + N ) ; } return 0 ; }", "label": 3, "id": 21779}
{"input": "main ( ) { long int i , j ; int t ; long long int size ; long long int * v ; long long int min , cost ; scanf ( \"%d\" , & t ) ; for ( j = 1 ; j <= t ; j ++ ) { scanf ( \"%lld\" , & size ) ; v = ( long long int * ) malloc ( size * sizeof ( long long int ) ) ; min = 1000000000 ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%ld\" , & v [ i ] ) ; if ( min > v [ i ] ) { min = v [ i ] ; } } cost = min * ( size - 1 ) ; printf ( \"%lld\n\" , cost ) ; } }", "label": 0, "id": 4001}
{"input": "int main ( ) { int t , i ; unsigned long long int gcd , lcm , a , b , small , big ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%llu\" , & a ) ; scanf ( \"%llu\" , & b ) ; if ( a > b ) { small = b ; big = a ; } else { small = a ; big = b ; } if ( a % small == 0 && b % small == 0 ) { gcd = small ; } else { gcd = ( small + 1 ) / 2 ; while ( a % gcd != 0 || b % gcd != 0 ) { gcd = gcd - 1 ; } } if ( gcd == small ) { lcm = big ; } else { lcm = ( a * b ) / gcd ; } printf ( \"%llu %llu\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 8143}
{"input": "recurse ( int a , int b ) { if ( b == 0 ) return a ; else return recurse ( b , a % b ) ; } int main ( ) { int gcd , lcm , a , b , n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = recurse ( a , b ) ; lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 25232}
{"input": "long int euclidGCD ( long int , long int ) ; long int euclidGCD ( long int a , long int b ) { long int min = ( a >= b ) ? b : a ; long int max = ( a <= b ) ? b : a ; while ( max % min != 0 ) { long int r = max % min ; max = min ; min = r ; } return min ; } void foutput ( long int n ) { if ( n == 0 ) { fputs ( \"0\" , stdout ) ; return ; } long int temp = n ; int count = 0 ; while ( temp != 0 ) { temp /= 10 ; ++ count ; } char * no = malloc ( sizeof ( char ) * count + 1 ) ; temp = n ; int temp2 = count ; no [ count ] = '\\0' ; while ( temp != 0 ) { no [ temp2 - 1 ] = temp % 10 + '0' ; temp /= 10 ; -- temp2 ; } fputs ( no , stdout ) ; free ( no ) ; no = NULL ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b ; scanf ( \"%d %d\" , & a , & b ) ; long int gcd = euclidGCD ( a , b ) ; long int lcm = ( a / gcd ) * b ; foutput ( gcd ) ; putchar ( ' ' ) ; foutput ( lcm ) ; putchar ( '\n' ) ; } return 0 ; }", "label": 0, "id": 15495}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int hcf = 0 ; if ( a > b ) hcf = gcd ( a , b ) ; else hcf = gcd ( b , a ) ; long long int lcm = ( a * b ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 22840}
{"input": "int gcd ( int n , int n1 ) { if ( n % n1 == 0 ) { return n1 ; } else { return gcd ( n1 , n % n1 ) ; } } int main ( ) { int t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { int n , n1 , l = 1 , g = 0 , i , rem = 0 ; scanf ( \"%d%d\" , & n , & n1 ) ; if ( n >= n1 ) { if ( n % n1 == 0 ) { l = n ; } else { l = n * n1 ; } } else { if ( n1 % n == 0 ) { l = n1 ; } else { l = n * n1 ; } } g = gcd ( n , n1 ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 22520}
{"input": "int main ( ) { long int a , b , t , n , i , j ; long long int c ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; a = 10000000 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & b ) ; if ( a > b ) a = b ; } c = ( a * ( n - 1 ) ) ; printf ( \"%lld\n\" , c ) ; } return 0 ; }", "label": 0, "id": 1009}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n ; scanf ( \"%d\" , & n ) ; int ar [ n ] ; int i , length = 1 , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & ar [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ , length ++ ) { if ( ar [ i ] > ar [ i + 1 ] ) { sum += ( ( length ) * ( length + 1 ) / 2 ) ; length = 0 ; } } sum += ( ( length ) * ( length + 1 ) ) / 2 ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 26437}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int z , a [ 100 ] , i ; int count = 0 ; scanf ( \"%d\" , & z ) ; for ( i = 0 ; i < z ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < z - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { count = count + a [ i ] ; a [ i + 1 ] = a [ i ] ; } else if ( a [ i ] > a [ i + 1 ] ) { count = count + a [ i + 1 ] ; } } printf ( \"%d\" , count ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 3, "id": 9401}
{"input": "int maxsum = 0 ; void calcsum ( short int * * arr , short int sum , int row , int col , int rows ) { if ( row < rows ) { sum = sum + arr [ row ] [ col ] ; if ( row == rows - 1 && sum > maxsum ) { maxsum = sum ; return ; } calcsum ( arr , sum , row + 1 , col , rows ) ; calcsum ( arr , sum , row + 1 , col + 1 , rows ) ; } } int main ( ) { int n , rows , i = 1 , j ; short int * arr [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 1 ; i <= rows ; i ++ ) { arr [ i - 1 ] = malloc ( sizeof ( short int ) * i ) ; for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%hd\" , & arr [ i - 1 ] [ j ] ) ; } } maxsum = 0 ; calcsum ( arr , 0 , 0 , 0 , rows ) ; printf ( \"%d\" , maxsum ) ; } return 0 ; }", "label": 2, "id": 6974}
{"input": "unsigned int triangle [ 100 ] [ 100 ] ; unsigned int triangleRows ; unsigned int highest ; int main ( void ) { unsigned int elements ; unsigned int number ; unsigned int i , j , k ; scanf ( \"%d\" , & elements ) ; for ( i = 0 ; i < elements ; i ++ ) { highest = 0 ; scanf ( \"%d\" , & triangleRows ) ; for ( j = 0 ; j < triangleRows ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & number ) ; if ( j > 0 ) triangle [ j ] [ k ] = number + max ( triangle [ j - 1 ] [ k - 1 ] , triangle [ j - 1 ] [ k ] ) ; else triangle [ j ] [ k ] = number ; } } for ( j = 0 ; j < triangleRows ; j ++ ) { if ( triangle [ triangleRows - 1 ] [ j ] > highest ) highest = triangle [ triangleRows - 1 ] [ j ] ; } printf ( \"%d\n\" , highest ) ; } return 0 ; }", "label": 3, "id": 25727}
{"input": "int a [ 100 ] [ 100 ] , sum = 0 , max = 0 , n ; void fun ( int i , int j ) { sum = sum + a [ i ] [ j ] ; if ( i == n - 1 ) { if ( max < sum ) max = sum ; sum = sum - a [ i ] [ j ] ; return ; } else { fun ( i + 1 , j ) ; fun ( i + 1 , j + 1 ) ; } sum = sum - a [ i ] [ j ] ; } main ( ) { int i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } fun ( 0 , 0 ) ; printf ( \"%d\n\" , max ) ; } }", "label": 2, "id": 14153}
{"input": "int sumtran ( ) ; int sumtran ( ) { int n , i , j , a , b ; scanf ( \"%d\" , & n ) ; int arr1 [ 100 ] [ 100 ] , arr2 [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr1 [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { arr2 [ n - 1 ] [ i ] = arr1 [ n - 1 ] [ i ] ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a = arr2 [ i + 1 ] [ j ] ; b = arr2 [ i + 1 ] [ j + 1 ] ; arr2 [ i ] [ j ] = arr1 [ i ] [ j ] + ( a > b ? a : b ) ; } } return arr2 [ 0 ] [ 0 ] ; } int main ( ) { int t , count ; scanf ( \"%d\" , & t ) ; count = 1 ; int ar [ 1500 ] ; while ( count <= t ) { ar [ count ] = sumtran ( ) ; count ++ ; } count = 1 ; while ( count <= t ) { printf ( \"%d\n\" , ar [ count ] ) ; count ++ ; } return 0 ; }", "label": 0, "id": 18075}
{"input": "main ( ) { int t , a , b , g , l , i , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"\n\" ) ; scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) if ( a % i == 0 && b % i == 0 ) g = i ; m = a > b ? a : b ; while ( 1 ) { if ( m % a == 0 && m % b == 0 ) { l = m ; break ; } m ++ ; } printf ( \"\n%d %d\" , g , l ) ; } }", "label": 2, "id": 9275}
{"input": "int main ( ) { int i , max = 0 , min = 0 , n , gc = 0 , lc = 0 ; scanf ( \"%d\n\" , & n ) ; int a [ n ] ; int b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\n\" , & a [ i ] , & b [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > b [ i ] ) max = a [ i ] ; else max = b [ i ] ; if ( max != a [ i ] ) min = a [ i ] ; else min = b [ i ] ; while ( 1 ) { if ( min % a [ i ] == 0 && min % b [ i ] == 0 ) { lc = min ; break ; } else min ++ ; } while ( 1 ) { if ( a [ i ] % max == 0 && b [ i ] % max == 0 ) { gc = max ; break ; } else max -- ; } max = 0 ; min = 0 ; printf ( \"%d %d\n\" , gc , lc ) ; } return 0 ; }", "label": 2, "id": 12371}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n ; long long int sum = 0 , k = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; int x = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] >= x ) { x = a [ i ] ; k ++ ; } else { x = a [ i ] ; sum += ( k * ( k + 1 ) ) / 2 ; k = 1 ; } } sum += ( k * ( k + 1 ) ) / 2 ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 11872}
{"input": "int main ( ) { int n ; long int a , b , t ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; t = a * b ; int c ; while ( a != 0 ) { c = a ; a = b % a ; b = c ; } printf ( \"%ld %ld\n\" , b , t / b ) ; } return 0 ; }", "label": 0, "id": 14824}
{"input": "int main ( ) { int t , i , j , x , y , p , g , l , k ; scanf ( \"%d\" , & t ) ; int a [ t ] , b [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a [ i ] , & b [ i ] ) ; } for ( j = 0 ; j < t ; j ++ ) { if ( a [ j ] > b [ j ] ) { x = b [ j ] ; y = a [ j ] ; } else { x = a [ j ] ; y = b [ j ] ; } p = 0 ; while ( p <= x ) { if ( a [ j ] % p == 0 && b [ j ] % p == 0 ) { g = p ; } p ++ ; } if ( y % x == 0 ) { l == y ; } else { k = 1 ; while ( y * k % x != 0 ) { l = y * ( k + 1 ) ; k ++ ; } } printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 3, "id": 21781}
{"input": "long hcf ( long a , long b ) ; long i , l , h ; int main ( ) { int t ; long a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( \"%ld\\t%ld\n\" , h , l ) ; } return 0 ; } long hcf ( long a , long b ) { long k = a < b ? a : b ; for ( i = k ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { h = i ; break ; } } return h ; }", "label": 2, "id": 5673}
{"input": "int main ( ) { int t , n , cost , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; while ( n > 1 ) { i = 0 ; if ( arr [ i ] > arr [ i + 1 ] ) { cost += arr [ i + 1 ] ; for ( j = i + 1 ; j < n - 1 ; j ++ ) arr [ j - 1 ] = arr [ j ] ; } else { cost += arr [ i ] ; for ( j = i + 1 ; j < n - 1 ; j ++ ) arr [ j ] = arr [ j + 1 ] ; } n -- ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 17217}
{"input": "int a [ 50000 ] ; int main ( ) { int n , t , i , a [ 50000 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int key ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; key = a [ 0 ] ; for ( i = 1 ; i < t ; i ++ ) { if ( key > a [ i ] ) key = a [ i ] ; } long long int k = key * ( t - 1 ) ; printf ( \"%lld\n\" , k ) ; } return 0 ; }", "label": 0, "id": 21491}
{"input": "void main ( ) { int min , n , i , t , a [ 50000 ] ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; i = 1 ; if ( n > 0 ) scanf ( \"%d\n\" , & a [ 0 ] ) ; min = a [ 0 ] ; while ( i < n ) { scanf ( \"%d \" , & a [ i ++ ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 1, "id": 6398}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 100 ] [ 100 ] , i , j , diff ; long long int sum = 0 , n ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { j = 0 ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum = a [ 0 ] [ 0 ] ; j = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { sum = sum + a [ i ] [ j ] ; } else if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) { sum = sum + a [ i ] [ j + 1 ] ; j ++ ; } } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 24257}
{"input": "int max ( int x , int y ) ; int main ( ) { int t , n , i , j , max_path ; int triangle [ 101 ] [ 101 ] ; int max_t [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i <= n ; i ++ ) for ( j = 0 ; j <= n ; j ++ ) { triangle [ i ] [ j ] = 0 ; max_t [ i ] [ j ] = 0 ; } max_path = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; max_t [ i ] [ j ] = max ( triangle [ i ] [ j ] + max_t [ i - 1 ] [ j ] , triangle [ i ] [ j ] + max_t [ i - 1 ] [ j - 1 ] ) ; if ( i == n ) { if ( max_path < max_t [ i ] [ j ] ) max_path = max_t [ i ] [ j ] ; } } } printf ( \"%d\n\" , max_path ) ; } return 0 ; } int max ( int x , int y ) { if ( x >= y ) return x ; else return y ; }", "label": 0, "id": 14194}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; if ( test >= 1 && test <= 5 ) { while ( test -- ) { long a [ 100001 ] = { 0 } ; int i , n = 0 , j , ans = 0 , k = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { k = i ; for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] >= a [ k ] ) { ans ++ ; k ++ ; } else break ; } } printf ( \"%d\n\" , ans + n ) ; } } return 0 ; }", "label": 0, "id": 18556}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; long long lcm = ( a * b ) / gcd ( a , b ) ; printf ( \"%d %lld\n\" , gcd ( a , b ) , lcm ) ; } }", "label": 1, "id": 23221}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t , a , b , c , d , ef ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%d %d\n\" , c , ( a * b ) / c ) ; } return 0 ; }", "label": 1, "id": 8498}
{"input": "main ( ) { int i , t , k , gcd ; long a , b , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { k = 1 ; scanf ( \"%ld\" , & a ) ; scanf ( \"%ld\" , & b ) ; if ( a % 2 != 0 || b % 2 != 0 ) k = 0 ; c = ( a < b ) ? a : b ; if ( a % c == 0 && b % c == 0 ) gcd = c ; else { if ( k == 0 ) { for ( i = c / 3 ; i >= 1 ; i = i - 2 ) if ( a % i == 0 && b % i == 0 ) gcd = i ; } if ( k == 1 ) { for ( i = c / 2 ; i >= 1 ; i -- ) if ( a % i == 0 && b % i == 0 ) gcd = i ; } } printf ( \"%d %ld\n\" , gcd , a * b / gcd ) ; } return 0 ; }", "label": 1, "id": 21964}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b , num , den , rem = 0 , gcd , lcm ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem > 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 25177}
{"input": "int a [ 100 ] [ 100 ] ; int i , j , n , nl ; int main ( ) { scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d\" , & nl ) ; for ( i = 0 ; i < nl ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = nl - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; n -- ; } }", "label": 1, "id": 23430}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , n ; int i , j , arr [ 100 ] [ 100 ] , dp [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) dp [ i ] [ j ] = 0 ; } int sol = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) + arr [ i ] [ j ] ; if ( i == n - 1 ) sol = max ( sol , dp [ i ] [ j ] ) ; } } printf ( \"%d\n\" , sol ) ; } return 0 ; }", "label": 1, "id": 18471}
{"input": "int main ( ) { int i , gcd , lcm , j , a , b , t ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) i = b ; else i = a ; while ( 1 ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; break ; } i -- ; } lcm = ( ( a * b ) / gcd ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 7528}
{"input": "void main ( ) { int t , a , b , c , ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d %d\" , & a , & b , & c ) ; if ( ( ( a > b ) && ( b > c ) ) || ( ( a < b ) && ( b < c ) ) ) ans = b ; else if ( ( ( a < b ) && ( a > c ) ) || ( ( a > b ) && ( a < c ) ) ) ans = a ; else ans = c ; printf ( \"%d\n\" , ans ) ; } return ; }", "label": 1, "id": 14998}
{"input": "int main ( ) { int A [ size ] , t , N , i , j , k , l , min , cost [ 11 ] ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & N ) ; for ( k = 0 ; k < N ; k ++ ) scanf ( \"%d\" , & A [ k ] ) ; min = A [ 0 ] ; for ( l = 1 ; l < N ; l ++ ) { if ( min >= A [ l ] ) min = A [ l ] ; } cost [ i ] = ( N - 1 ) * min ; } for ( i = 1 ; i <= t ; i ++ ) printf ( \"%d\n\" , cost [ i ] ) ; return 0 ; }", "label": 0, "id": 18227}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , a , ( n1 * n2 ) / a ) ; } return 0 ; }", "label": 1, "id": 3243}
{"input": "int n , a [ 100 ] [ 100 ] , x , y , p , minr = 0 ; int fun ( int i , int j , int sum ) { if ( i >= n || j > i ) { minr = minr > ( sum + a [ i ] [ j ] ) ? minr : ( sum + a [ i ] [ j ] ) ; return sum ; } sum += a [ i ] [ j ] ; x = fun ( i + 1 , j , sum ) ; j ++ ; y = fun ( i + 1 , j , sum ) ; return x > y ? x : y ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; fun ( 0 , 0 , 0 ) ; printf ( \"%d\n\" , minr ) ; } return 0 ; }", "label": 2, "id": 12417}
{"input": "int main ( ) { int n , size , min , i , x ; long int prod ; scanf ( \"%d\" , & n ) ; while ( n -- ) { prod = 0 ; while ( ( getchar ( ) ) != '\n' ) ; scanf ( \"%d\" , & size ) ; min = INT_MAX ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & x ) ; if ( x < min ) min = x ; } for ( i = 0 ; i < size - 1 ; i ++ ) { prod += min ; } printf ( \"%ld\n\" , prod ) ; } return 0 ; }", "label": 0, "id": 11068}
{"input": "int main ( ) { int t , a , b , hcf = 1 , lcm = 1 , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { hcf = 1 ; lcm = 1 ; scanf ( \"%d %d\" , & a , & b ) ; n = ( a > b ) ? a : b ; for ( int i = n ; i > 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { hcf *= i ; a /= i ; b /= i ; } } for ( int i = n ; i > 1 ; i -- ) { if ( a % i == 0 ) { lcm *= i ; a /= i ; } if ( b % i == 0 ) { lcm *= i ; b /= i ; } } lcm = lcm * hcf * a * b ; printf ( \"%d %d\n\" , hcf , lcm ) ; } }", "label": 2, "id": 12620}
{"input": "int gcd ( int a , int b ) { int hcf ; hcf = a % b ; if ( hcf == 0 ) { return b ; } return gcd ( b , hcf ) ; } int main ( void ) { int n , a , b , hcf , lcm ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 21213}
{"input": "void sum ( int ) ; int arr [ 101 ] [ 101 ] ; int main ( ) { int i = 0 , cases = 0 , c = 0 ; int j = 0 , lines = 0 ; int case_no [ 101 ] ; scanf ( \"%d\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%d\" , & lines ) ; for ( j = 0 ; j < lines ; j ++ ) { for ( c = 0 ; c <= j ; c ++ ) scanf ( \"%d\" , & arr [ j ] [ c ] ) ; } for ( j = lines - 1 ; j > 0 ; j -- ) sum ( j ) ; case_no [ i ] = arr [ 0 ] [ 0 ] ; } for ( i = 0 ; i < cases ; i ++ ) printf ( \"%d\" , case_no [ i ] ) ; } void sum ( int line ) { int i = 0 , sum = 0 ; for ( i = 0 ; i < line ; i ++ ) { sum = greater ( arr [ line ] [ i ] , arr [ line ] [ i + 1 ] ) ; arr [ line - 1 ] [ i ] += sum ; } }", "label": 3, "id": 5171}
{"input": "int main ( ) { long long int a , b , t , g , l , k , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { k = a ; a = b ; b = k ; } g = a ; k = b ; while ( b % a != 0 ) { r = b % a ; b = a ; a = r ; } g /= a ; l = g * k ; printf ( \"%d %d\n\" , a , l ) ; } return 0 ; }", "label": 1, "id": 7370}
{"input": "int arr [ 5050 ] , max = 0 , row = 0 ; int findsum ( int sum , int i , int j , int n ) { int sum1 , sum2 ; if ( i > row - 1 ) { if ( sum > max ) max = sum ; return ; } sum1 = sum + arr [ i + n + j ] ; sum2 = sum + arr [ i + n + j + 1 ] ; findsum ( sum1 , i + n , j , n + 1 ) ; findsum ( sum1 , i + n , j + 1 , n + 1 ) ; return 0 ; } int main ( void ) { int i , t = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < ( row * ( row + 1 ) / 2 ) ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; i = arr [ 0 ] ; findsum ( i , 0 , 0 , 1 ) ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 22585}
{"input": "int main ( ) { int rem , t , gcd ; long int mx , mn , n1 , n2 , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & n1 , & n2 ) ; if ( n1 > n2 ) { mx = n1 ; mn = n2 ; } else { mx = n2 ; mn = n1 ; } rem = mn ; while ( rem != 0 ) { mn = rem ; rem = mx % mn ; mx = mn ; } gcd = mn ; lcm = n1 * n2 / gcd ; printf ( \"%d %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 23787}
{"input": "int main ( ) { int i , A , B , g , l , T ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) g = B ; else g = A ; while ( B % g != 0 || A % g != 0 ) { g -- ; } printf ( \"%d\" , g ) ; if ( A > B ) l = A ; else l = B ; while ( l % A != 0 || l % B != 0 ) { l ++ ; } printf ( \"%d\" , l ) ; } return 0 ; }", "label": 2, "id": 15546}
{"input": "int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { int A , B ; scanf ( \"%d%d\" , & A , & B ) ; long P = A * B ; if ( B > A ) { A += B ; B = A - B ; A -= B ; } int r ; while ( B > 1 ) { r = A % B ; if ( r == 0 ) break ; A = B ; B = r ; } printf ( \"%d %ld\n\" , B , P / B ) ; T -- ; } return 0 ; }", "label": 1, "id": 7010}
{"input": "inline int getInt ( ) { char c ; int val = 0 ; while ( ! isdigit ( c = getchar_unlocked ( ) ) ) ; do { val = val * 10 + ( c - '0' ) ; } while ( isdigit ( c = getchar_unlocked ( ) ) ) ; return val ; } int getInt ( ) ; int main ( ) { int t = getInt ( ) ; long int result [ MAX ] ; int i ; for ( i = 0 ; i < t ; i ++ ) { int n = getInt ( ) ; int j , min = getInt ( ) ; for ( j = 1 ; j < n ; j ++ ) { int a = getInt ( ) ; if ( a < min ) min = a ; } result [ i ] = ( long long ) min * ( n - 1 ) ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%ld\n\" , result [ i ] ) ; return 0 ; }", "label": 0, "id": 20060}
{"input": "int swap ( int * a , int * b ) { int t = * a ; * a = * b ; * b = t ; } int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int N , j ; scanf ( \"%d\" , & N ) ; int a [ N ] , sum = 0 , i , k , l , p = N - 1 ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( j = 0 ; j < p ; j ++ ) { if ( a [ 0 ] <= a [ 1 ] ) { for ( k = 1 ; k < N - 1 ; k ++ ) { a [ k ] = a [ k + 1 ] ; } sum = sum + a [ 0 ] ; N -- ; } else if ( a [ 0 ] > a [ 1 ] ) { swap ( & a [ 0 ] , & a [ 1 ] ) ; for ( l = 1 ; l < N - 1 ; l ++ ) { a [ l ] = a [ l + 1 ] ; } sum = sum + a [ 0 ] ; N -- ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 6765}
{"input": "int a [ 100 ] [ 100 ] , re [ 100 ] [ 100 ] ; int max ; int n ; void sum ( int i , int j , int summ ) { if ( i == n ) { if ( summ > max ) max = summ ; return ; } int t ; t = a [ i ] [ j ] + summ ; if ( re [ i ] [ j ] < t ) { re [ i ] [ j ] = t ; sum ( i + 1 , j , t ) ; sum ( i + 1 , j + 1 , t ) ; } else return ; } int main ( ) { int t , i , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { for ( j = 0 ; j < 100 ; ++ j ) for ( k = 0 ; k < 100 ; ++ k ) re [ j ] [ k ] = - 1 ; scanf ( \"%d\" , & n ) ; max = 0 ; for ( j = 0 ; j < n ; ++ j ) { for ( k = 0 ; k <= j ; ++ k ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } sum ( 0 , 0 , 0 ) ; for ( j = 0 ; j < n ; ++ j ) { for ( k = 0 ; k <= j ; ++ k ) printf ( \"%d \" , re [ j ] [ k ] ) ; printf ( \"\n\" ) ; } printf ( \"%d\n\" , max ) ; } }", "label": 2, "id": 19455}
{"input": "int gcd ( int a , int b ) { while ( b != 0 ) { int temp = b ; b = a % b ; a = temp ; } return a ; } int lcm ( int a , int b ) { int l ; l = a * b / gcd ( a , b ) ; return l ; } int main ( void ) { int t , i , m , a , b , n ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; m = gcd ( a , b ) ; n = lcm ( a , b ) ; printf ( \"%d %d\n\" , m , n ) ; } return 0 ; }", "label": 1, "id": 6983}
{"input": "int main ( ) { int t ; long int s , a , b , p ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; s = a * b ; while ( b != 0 ) { p = b ; b = a % b ; a = p ; } printf ( \"%d %d\n\" , a , s / a ) ; } return 0 ; }", "label": 1, "id": 24099}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int i , j ; scanf ( \"%d\" , & j ) ; for ( i = 0 ; i < j ; i ++ ) { int x , y , m , n ; scanf ( \"%d %d\" , & x , & y ) ; m = gcd ( x , y ) ; n = lcm ( x , y ) ; printf ( \"%d %d\n\" , m , n ) ; } return 0 ; } int gcd ( int a , int b ) { if ( b % a == 0 ) return a ; else return gcd ( b % a , a ) ; } int lcm ( int a , int b ) { int k ; k = ( a * b ) / gcd ( a , b ) ; return ( k ) ; }", "label": 1, "id": 25983}
{"input": "main ( ) { int i , j , n , a [ 100 ] , count = 0 ; printf ( \"enter the size of array :\" ) ; scanf ( \"%d\" , & n ) ; printf ( \"\nenter the elements :\" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] = a [ j ] + 1 ) { count ++ ; } if ( a [ i ] = a [ j ] ) { count ++ ; } } } printf ( \"there are %d sub arrays .\" , count ) ; }", "label": 1, "id": 19008}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 26498}
{"input": "int main ( ) { int noOfLines , noOfTriangles , i , j , max = 0 ; int * * base ; scanf ( \"%d\" , & noOfTriangles ) ; while ( noOfTriangles -- ) { max = 0 ; scanf ( \"%d\" , & noOfLines ) ; base = ( int * * ) malloc ( sizeof ( int ) * noOfLines ) ; for ( i = 0 ; i < noOfLines ; i ++ ) { base [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & base [ i ] [ j ] ) ; if ( i > 0 ) { if ( j == 0 ) { base [ i ] [ j ] = base [ i ] [ j ] + base [ i - 1 ] [ j ] ; } else if ( i == j ) { base [ i ] [ j ] = base [ i ] [ j ] + base [ i - 1 ] [ j - 1 ] ; } else { base [ i ] [ j ] = base [ i - 1 ] [ j - 1 ] > base [ i - 1 ] [ j ] ? base [ i ] [ j ] + base [ i - 1 ] [ j - 1 ] : base [ i ] [ j ] + base [ i - 1 ] [ j ] ; } if ( i == noOfLines - 1 ) { max = base [ i ] [ j ] >= max ? base [ i ] [ j ] : max ; } } } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 26117}
{"input": "main ( ) { int a , b , c , d , e , f , g ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d%d\" , & b , & c ) ; if ( b > c ) e = b ; if ( c > b ) e = c ; for ( d = 1 ; d <= e ; d ++ ) { if ( b % d == 0 && c % d == 0 ) f = d ; } printf ( \"%d \" , f ) ; b = b / f ; c = c / f ; g = f * b * c ; printf ( \"%d\n\" , g ) ; } }", "label": 2, "id": 5084}
{"input": "int t , n , a [ 110 ] [ 110 ] , i , j , k , l , m , n , p , visited [ 100 ] [ 100 ] ; max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } if ( n == 1 ) printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; else { for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } p = a [ 1 ] [ 1 ] ; printf ( \"%d\n\" , p ) ; } } return 0 ; }", "label": 0, "id": 20321}
{"input": "int chkcount ( int n ) { return ( ( n ) * ( n + 1 ) ) / 2 ; } int main ( ) { int i , j , A [ mx ] , N , T , count , sum = 0 ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { count = 1 ; sum = 0 ; scanf ( \"%d\" , & N ) ; for ( j = 0 ; j < N ; j ++ ) scanf ( \"%d\" , & A [ j ] ) ; if ( N == 1 ) sum = 1 ; else if ( A [ N - 1 ] < A [ N - 2 ] ) sum = 1 ; for ( j = 0 ; j < N - 1 ; j ++ ) { count = 1 ; while ( A [ j ] <= A [ j + 1 ] ) { count ++ ; j ++ ; } sum += chkcount ( count ) ; } printf ( \"%d\n\" , sum ) ; } }", "label": 3, "id": 18082}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 23780}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int r , max = 0 ; scanf ( \"%d\" , & r ) ; int a [ r ] [ r ] ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { int sum = a [ i ] [ j ] ; if ( j + 1 <= i ) { sum = sum + a [ i ] [ j + 1 ] ; } for ( int k = i ; k < r - 1 ; k ++ ) { if ( k + 1 < r ) sum = sum + a [ k + 1 ] [ j ] ; } if ( max < sum ) max = sum ; } } printf ( \"%d\n\" , max ) ; } }", "label": 1, "id": 14782}
{"input": "int main ( void ) { int size , i , T , j , temp ; long long int cnt , a [ 100000 ] ; scanf ( \"%d\" , & T ) ; while ( T -- > 0 ) { scanf ( \"%d\" , & size ) ; cnt = size ; temp = 0 ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] >= a [ i - 1 ] && ( i - 1 ) >= 0 ) { temp ++ ; cnt = cnt + temp ; } else temp = 0 ; } printf ( \"%lld\n\" , cnt ) ; } return 0 ; }", "label": 0, "id": 24562}
{"input": "int main ( ) { int tc , i , a , b , x , y , temp ; scanf ( \"%d\" , & tc ) ; for ( i = 1 ; i <= tc ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( a % b != 0 ) { temp = a % b ; a = b ; b = temp ; } printf ( \"%d %d\n\" , b , ( x * y ) / b ) ; } return 0 ; }", "label": 1, "id": 9891}
{"input": "int main ( ) { int T ; long int A , B , x , y , t , GCD , LCM ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & A , & B ) ; x = A ; y = B ; while ( y != 0 ) { t = y ; y = x % y ; x = t ; } GCD = x ; LCM = ( A * B ) / GCD ; printf ( \"%ld %ld\n\" , GCD , LCM ) ; } return 0 ; }", "label": 0, "id": 12862}
{"input": "main ( ) { long long a , b , gcd , t , i , p , q ; long long lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & p , & q ) ; a = p ; b = q ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } lcm = ( p * q ) / a ; printf ( \"gcd=%lld lcm=%lld\n\" , a , lcm ) ; } }", "label": 1, "id": 7871}
{"input": "int main ( ) { int i , n , t ; unsigned long int a , b , r , s , c , hcf , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lu %lu\" , & a , & b ) ; r = a ; s = b ; while ( s != 0 ) { c = s ; s = r % s ; r = c ; } hcf = r ; lcm = ( a * b ) / hcf ; printf ( \"%lu %lu\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 8653}
{"input": "int * numbers ; int i , levels , x , values [ 1000 ] , j ; void calc ( ) { int k , l ; j = levels - 1 ; for ( ; j > 0 ; j -- ) { k = ( ( j * ( j + 1 ) ) / 2 ) ; for ( l = ( j * ( j - 1 ) ) / 2 ; l < k ; l ++ ) { numbers [ l ] = calcsum ( l ) ; } } values [ i ] = numbers [ 0 ] ; } int calcsum ( int index ) { int left = 0 ; int right = 0 ; left = numbers [ index ] + numbers [ index + j ] ; right = numbers [ index ] + numbers [ index + j + 1 ] ; if ( left > right ) return left ; else return right ; } int main ( ) { int n , d = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { values [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & levels ) ; x = ( levels * ( levels + 1 ) ) / 2 ; numbers = ( int * ) malloc ( x * sizeof ( int ) ) ; while ( d < x ) { scanf ( \"%d\" , & numbers [ d ] ) ; d ++ ; } if ( levels != 0 ) calc ( ) ; free ( numbers ) ; d = 0 ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , values [ i ] ) ; } return 0 ; }", "label": 0, "id": 24943}
{"input": "int main ( ) { int c , t , i , j , a [ 100 ] [ 100 ] = { { 0 , 0 } } , temp ; long max ; scanf ( \"%d\" , & c ) ; while ( c -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } max = a [ 0 ] [ 0 ] ; i = 1 , j = 0 ; while ( t -- ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { temp = a [ i ] [ j ] ; } else { temp = a [ i ] [ j ] ; j ++ ; } i ++ ; max = max + temp ; } printf ( \"%d\n\" , max ) ; } return 1 ; }", "label": 3, "id": 4133}
{"input": "int main ( ) { int a , b , H , L , n ; scanf ( \"%d\" , & n ) ; while ( n -- ) ; { scanf ( \"%d%d\" , & a , & b ) ; for ( H = a < b ? a : b ; H >= 1 ; H -- ) if ( b % H == 0 && a % H == 0 ) break ; printf ( \"%d \" , H ) ; for ( L = a > b ? a : b ; L <= a * b ; L ++ ) if ( L % a == 0 && L % b == 0 ) break ; printf ( \"%d\n\" , L ) ; } return 0 ; }", "label": 1, "id": 5121}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%d\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 12926}
{"input": "int hcf ( int , int ) ; int main ( ) { int a , b , t , h , l , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( \"%d %d\n\" , h , l ) ; } return 0 ; } int hcf ( int x , int y ) { if ( y == 0 ) return x ; else return hcf ( y , x % y ) ; }", "label": 1, "id": 13929}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int a [ 100 ] [ 100 ] , d [ 100 ] [ 100 ] ; int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; d [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { j = 0 ; d [ i ] [ j ] = a [ i ] [ j ] + d [ i - 1 ] [ j ] ; for ( j = 1 ; j < i ; j ++ ) d [ i ] [ j ] = a [ i ] [ j ] + max ( d [ i - 1 ] [ j ] , d [ i - 1 ] [ j - 1 ] ) ; d [ i ] [ i ] = a [ i ] [ i ] + d [ i - 1 ] [ i - 1 ] ; } j = d [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) j = max ( j , d [ n - 1 ] [ i ] ) ; printf ( \"%d\n\" , j ) ; } return 0 ; }", "label": 0, "id": 6578}
{"input": "int main ( ) { long int t , i , j ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long int n ; scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n - i - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { int temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } } printf ( \"%ld\n\" , a [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 17558}
{"input": "int max1 ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a [ 105 ] [ 105 ] , i , j , count , cases , max2 ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { scanf ( \"%d\" , & count ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; a [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i < count ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j ] = max1 ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; } a [ i ] [ j + 1 ] = 0 ; } max2 = a [ count - 1 ] [ 0 ] ; for ( i = 0 ; i < count ; i ++ ) { if ( a [ count - 1 ] [ i ] > max2 ) max2 = a [ count - 1 ] [ i ] ; } printf ( \"%d\n\" , max2 ) ; } return 0 ; }", "label": 1, "id": 20014}
{"input": "int main ( void ) { int n , t , i , j , a [ 1000 ] [ 1000 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23084}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return ( gcd ( b , a % b ) ) ; } main ( ) { int a , b , i , t , n ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\n%d\" , & a , & b ) ; n = gcd ( a , b ) ; printf ( \"%d %d\" , n , ( a * b ) / n ) ; } return ( 0 ) ; }", "label": 1, "id": 15735}
{"input": "typedef struct array { int data ; int max ; } array ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int right , down , ans , i , j ; array a [ n + 1 ] [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] . data ) ; } } i = n ; for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] . max = a [ i ] [ j ] . data ; for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { right = a [ i + 1 ] [ j + 1 ] . max + a [ i ] [ j ] . data ; down = a [ i + 1 ] [ j ] . max + a [ i ] [ j ] . data ; a [ i ] [ j ] . max = right >= down ? right : down ; } } ans = a [ 1 ] [ 0 ] . max ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 6393}
{"input": "long long int gcd ( int x , int y ) { if ( x % y == 0 ) return y ; else return gcd ( y , x % y ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; long long int g = gcd ( a , b ) ; int l = ( a * b ) / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 21196}
{"input": "main ( ) { int test , i , j , len , a [ 50008 ] , min = 1000000 , ans ; scanf ( \"%d\" , & test ) ; while ( test -- ) { min = 1000000 ; scanf ( \"%d\" , & len ) ; for ( i = 0 ; i < len ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } ans = min * ( len - 1 ) ; printf ( \"%d\n\" , ans ) ; } }", "label": 0, "id": 24426}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , t , n , i , j , k ; p ( t ) ; while ( t -- ) { p ( n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) p ( a [ i ] [ j ] ) ; k = n - 1 ; for ( i = n - 1 ; i > 0 ; i -- ) { k -- ; for ( j = k ; j >= 0 ; j -- ) a [ i - 1 ] [ j ] += x ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 10216}
{"input": "int fin ( ) { int x = 0 , c ; while ( ( c = getcx ) < '0' || c > '9' ) ; while ( c >= '0' && c <= '9' ) x = ( x << 3 ) + ( x << 1 ) + c - 48 , c = getcx ; return x ; } main ( ) { int T , n , c , a [ 200 ] [ 200 ] , b [ 200 ] , s = 0 , i , j , k ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n - 1 ; j ++ ) for ( i = 0 ; i < 2 * ( n - 1 ) ; ) { c = fin ( ) ; for ( k = 0 ; k < 2 * ( n - j - 1 ) ; k ++ , i ++ ) a [ i ] [ j ] = c ; } for ( k = 0 ; k < n ; k ++ ) b [ k ] = fin ( ) ; for ( k = 0 ; k <= n / 2 ; k ++ ) { a [ 2 * k ] [ j ] = b [ k ] ; if ( k > 0 ) a [ 2 * k - 1 ] [ j ] = b [ k ] ; } a [ 2 * k - 1 ] [ j ] = b [ k ] ; for ( ; k <= n ; k ++ ) { a [ 2 * k ] [ j ] = b [ k - 1 ] ; a [ 2 * k + 1 ] [ j ] = b [ k ] ; } c = 0 ; for ( i = 0 ; i < 2 * ( n - 1 ) ; i ++ , s = 0 ) { for ( j = 0 ; j < n ; j ++ ) s += a [ i ] [ j ] ; if ( s > c ) c = s ; } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 3, "id": 3899}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b , x , y , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & x , & y ) ; a = x , b = y ; while ( a != b ) { if ( a > b ) { a = a % b ; if ( a == 0 ) a = b ; } else { b = b % a ; if ( b == 0 ) b = a ; } } lcm = x * y / a ; printf ( \"%d %d\n\" , a , lcm ) ; } return 0 ; }", "label": 1, "id": 20874}
{"input": "main ( ) { int a , b , x ; scanf ( \"%d %d\" , & a , & b ) ; int hcf , lcm ; while ( b % a != 0 ) { x = a ; a = b % a ; b = x ; } hcf = a ; lcm = a * b / hcf ; printf ( \"%d %d \" , hcf , lcm ) ; }", "label": 1, "id": 19751}
{"input": "int gcdf ( int a , int b ) { int m ; if ( ( a % b ) != 0 ) { m = gcdf ( b , a % b ) ; } else { return b ; } return m ; } int main ( ) { int T , N1 , N2 , i , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & N1 , & N2 ) ; gcd = lcm = 0 ; gcd = gcdf ( N1 , N2 ) ; if ( gcd == 1 ) { lcm = N1 * N2 ; } else { lcm = gcd * ( N1 / gcd ) * ( N2 / gcd ) ; } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 858}
{"input": "int result ( int a , int b ) { int temp ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { int a , b , t , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = result ( a , b ) ; lcm = a * b ; lcm = lcm / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 16583}
{"input": "int main ( ) { int n , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16743}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int n , tot_n ; scanf ( \"%d\" , & n ) ; tot_n = n * ( n + 1 ) / 2 ; int tri [ tot_n ] ; for ( int j = 0 ; j < tot_n ; j ++ ) { scanf ( \"%d\" , & tri [ j ] ) ; } for ( int j = n - 1 ; j > 0 ; j ++ ) { int c = j * ( j - 1 ) / 2 ; for ( int k = c ; k < c + j ; k ++ ) { if ( tri [ k + j ] > tri [ k + j + 1 ] ) tri [ k ] += tri [ k + j ] ; else tri [ k ] += tri [ k + j + 1 ] ; } } printf ( \"%d\n\" , tri [ 0 ] ) ; printf ( \"%d\n\" , tri [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 14324}
{"input": "long long int max ( long long int a , long long int b ) { long long int x ; x = a > b ? a : b ; return x ; } int main ( ) { long long int t , n ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int a [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < n ; j ++ ) { a [ i - 1 ] [ j ] = max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) + a [ i - 1 ] [ j ] ; } } printf ( \"%lld\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 17677}
{"input": "int a [ 100 ] [ 100 ] ; int memsum [ 100 ] [ 100 ] ; int max ( int , int ) ; int sum ( int , int , int ) ; int main ( ) { int i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { memsum [ i ] [ j ] = - 1 ; scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , sum ( 0 , 0 , n ) ) ; } return 0 ; } int max ( int a , int b ) { int max = 0 ; if ( a > b ) max = a ; else max = b ; return max ; } int sum ( int r , int c , int num ) { int s = 0 ; if ( r == num ) return a [ r ] [ c ] ; s = a [ r ] [ c ] = a [ r ] [ c ] + max ( sum ( r + 1 , c , num ) , sum ( r + 1 , c + 1 , num ) ) ; return s ; }", "label": 2, "id": 12275}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x >= y ) return x ; else return y ; } int sum ( int n ) { int i , j ; if ( n == 1 ) return mat [ 0 ] [ 0 ] ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { mat [ i ] [ j ] = mat [ i ] [ j ] + max ( mat [ i + 1 ] [ j ] , mat [ i + 1 ] [ j + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , n , t ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } } printf ( \"%d\n\" , sum ( n ) ) ; -- t ; } return 0 ; }", "label": 0, "id": 4130}
{"input": "int main ( ) { int t , i , j , size , count ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & size ) ; int arr [ size ] ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } count = 0 ; i = 0 , j = 1 ; while ( 1 ) { if ( arr [ i ] <= arr [ j ] ) { count ++ ; } if ( j == size ) { break ; } i ++ ; j ++ ; } printf ( \"%d\n\" , count + size - 1 ) ; } return 0 ; }", "label": 1, "id": 1257}
{"input": "void scan ( unsigned long int * p , int n ) { int i ; int temp = ( n * ( n + 1 ) ) / 2 ; for ( i = 0 ; i < temp ; ++ i ) { scanf ( \"%d\" , p ) ; ++ p ; } } unsigned long int calculate ( unsigned long int * p , int n ) { int temp ; int temp1 ; int i , j ; for ( j = n ; j >= 2 ; -- j ) { temp = ( j * ( j - 1 ) ) / 2 ; temp1 = ( ( j - 1 ) * ( j - 2 ) ) / 2 ; for ( i = 0 ; i <= j - 2 ; ++ i ) { if ( * ( p + temp + i ) < * ( p + temp + i + 1 ) ) { * ( p + temp1 + i ) += * ( p + temp + i + 1 ) ; } else { * ( p + temp1 + i ) += * ( p + temp + i ) ; } } } return * p ; } unsigned long int execute ( unsigned long int * p , int n ) { scan ( p , n ) ; return calculate ( p , n ) ; } int main ( void ) { int t , n ; unsigned long int sum = 0 ; unsigned long int * p ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; p = ( int * ) calloc ( sizeof ( int ) , ( n * ( n + 1 ) ) / 2 ) ; sum = execute ( p , n ) ; printf ( \"%lu\n\" , sum ) ; free ( p ) ; } return 0 ; }", "label": 3, "id": 21339}
{"input": "int main ( ) { int n , c , g ; scanf ( \"%d\" , & n ) ; for ( int z = 0 ; z < n ; z ++ ) { int p , s = 0 ; scanf ( \"%d\" , & p ) ; int arr [ p ] ; for ( int i = 0 ; i < p ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & c ) ; if ( j == 0 ) g = c ; if ( g <= c ) { g = c ; } } arr [ i ] = g ; } for ( int y = 0 ; y < p ; y ++ ) { s = s + arr [ y ] ; } s -- ; printf ( \"%d\n\" , s ) ; } }", "label": 1, "id": 20100}
{"input": "int main ( ) { int t , i , l , temp , m , j , f , x , l1 , n1 , d , flag = 0 , c , n ; long int b , e , count ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { j = i ; while ( a [ i + 1 ] >= a [ i ] && i < n - 1 ) i ++ ; if ( i != j && i < n ) { e = i - j + 1 ; b = e * ( e - 1 ) ; count += b / 2 ; } } count += n ; printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 0, "id": 1648}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b , min , lcm , hcf , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; min = ( a > b ) ? a : b ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 6451}
{"input": "int main ( ) { long long int T , N , i , A , min ; scanf ( \"%lld\" , & T ) ; while ( T -- ) { min = 10000001 ; scanf ( \"%lld\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%lld\" , & A ) ; if ( A < min ) min = A ; } printf ( \"%lld\n\" , min * ( N - 1 ) ) ; } return 0 ; }", "label": 0, "id": 19143}
{"input": "int main ( ) { int t ; int a [ 50000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , N ; scanf ( \"%d\" , & n ) ; N = n ; while ( n -- ) { scanf ( \"%d\" , & a [ N - n ] ) ; } int min = a [ 1 ] ; int i ; for ( i = 2 ; i <= N ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( \"%d\n\" , min * ( N - 1 ) ) ; } return 0 ; }", "label": 0, "id": 5471}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , count = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { b [ i ] = 1 ; } for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) b [ i ] = b [ i - 1 ] + b [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { count = count + b [ i ] ; } printf ( \"%lld\" , count ) ; } return 0 ; }", "label": 1, "id": 13107}
{"input": "int main ( ) { int i , c = 1 , sum = 0 ; int a [ 1000 ] , n , t , j ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { c ++ ; } else { sum = sum + ( ( c * ( c + 1 ) ) / 2 ) ; c = 1 ; } } sum += c * ( c + 1 ) / 2 ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 10410}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; gcd ( b , a % b ) ; } void main ( ) { int a , b , g , l , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 17481}
{"input": "int max ( int , int ) ; int min ( int , int ) ; int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( void ) { int test_cases , a , b ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( max ( a , b ) , min ( a , b ) ) , lcm ( a , b ) ) ; } return 0 ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( max ( a , b ) , min ( a , b ) ) ; } int gcd ( int a , int b ) { if ( ! b ) { return a ; } return gcd ( b , a % b ) ; } int max ( int a , int b ) { return ( a > b ) ? a : b ; } int min ( int a , int b ) { return ( a < b ) ? a : b ; }", "label": 1, "id": 5128}
{"input": "int main ( ) { int x , a , b , c , z , i ; scanf ( \"%d\" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( b > a ) { c = a ; a = b ; b = c ; } z = a * b ; while ( a % b != 0 ) { c = b ; b = a % b ; a = c ; } printf ( \"%d %d\n\" , b , z / b ) ; } return 0 ; }", "label": 1, "id": 2178}
{"input": "int fastinput ( void ) { char c ; int input = 0 ; while ( ( c = getchar_unlocked ( ) ) < 33 ) ; while ( ( c = getchar_unlocked ( ) ) > 33 ) input = input * 10 + c - '0' ; return input ; } int main ( void ) { int a [ 100 ] [ 100 ] , i , j , n , t ; t = fastinput ( ) ; while ( t -- ) { n = fastinput ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = fastinput ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 175}
{"input": "int main ( ) { int t ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { long a , b , gcd ; int lcm , i ; scanf ( \"%ld\" , & a ) ; scanf ( \"%ld\" , & b ) ; for ( i = 1 ; i <= a && i <= b ; ++ i ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%ld %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 9165}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] ; return 0 ; }", "label": 1, "id": 5759}
{"input": "int main ( ) { int i , j , n , t ; long long int a [ 200 ] [ 200 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%lld\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9797}
{"input": "int main ( ) { long long a , b , t , i , c , gcd , lcm , r ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & a ) ; scanf ( \"%lld\" , & b ) ; r = a * b ; { if ( a == 0 ) gcd = a ; else if ( b == 0 ) gcd = b ; else { while ( b != 0 ) { c = b ; b = a % b ; a = c ; } } gcd = a ; } lcm = r / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 20568}
{"input": "int main ( ) { int t , p , a , b , r , l , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; p = a * b ; if ( a > b ) { l = a ; s = b ; } else { l = b ; s = a ; } while ( s ) { r = l % s ; l = s ; s = r ; } printf ( \"%d %d\n\" , l , p / l ) ; } return 0 ; }", "label": 1, "id": 19052}
{"input": "long findZeros ( long ) ; int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int n , i ; scanf ( \"%d\" , & n ) ; long A [ n ] , min = A [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; if ( A [ i ] < min ) min = A [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 24013}
{"input": "int main ( ) { int t ; long a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; long p = a * b ; gcd = a ; while ( a != b ) { if ( a > b ) { a = a - b ; } else if ( b > a ) b = b - a ; else if ( a == b ) ; gcd = a ; lcm = p / gcd ; } printf ( \"%ld %ld\n\" , gcd , lcm ) ; } }", "label": 0, "id": 20667}
{"input": "int main ( void ) { int t , a [ 100000000 ] , k ; long long int n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { k = 0 ; scanf ( \"%llu\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { k ++ ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( ( a [ i ] - a [ j ] == - 1 ) ) { k ++ ; } } } printf ( \"%d\n\" , k ) ; } return 0 ; }", "label": 3, "id": 13083}
{"input": "int main ( ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int * a = ( int * ) malloc ( n * sizeof ( int ) ) ; int sa = n , i , ctr = 0 ; scanf ( \"%d\" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; ++ i ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] >= a [ i - 1 ] ) { ctr ++ ; } else if ( ctr > 0 ) { ++ sa ; ctr = 0 ; } } if ( ctr > 0 ) ++ sa ; printf ( \"%d\n\" , sa ) ; } return 0 ; }", "label": 1, "id": 1917}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int Sum ( int arr [ 101 ] [ 101 ] , int n ) { int i , j , sum ; for ( i = 1 ; i < n ; i ++ ) arr [ i ] [ 0 ] += arr [ i - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) arr [ i ] [ i ] += arr [ i - 1 ] [ i - 1 ] ; for ( i = 2 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) arr [ i ] [ j ] += max ( arr [ i - 1 ] [ j ] , arr [ i - 1 ] [ j - 1 ] ) ; } sum = 0 ; for ( i = 0 ; i < n ; i ++ ) sum = max ( sum , arr [ n - 1 ] [ i ] ) ; return sum ; } int main ( ) { int i , j , test , n ; int arr [ 101 ] [ 101 ] ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } printf ( \"%d\n\" , Sum ( arr , n ) ) ; } return 0 ; }", "label": 0, "id": 14672}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%d\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 1061}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long a , b , GCD , LCM , rem , n , d ; scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } rem = n % d ; while ( rem != 0 ) { n = d ; d = rem ; rem = n % d ; } GCD = d ; LCM = a * b / GCD ; printf ( \"%ld %ld\n\" , GCD , LCM ) ; } }", "label": 0, "id": 26446}
{"input": "main ( ) { long int n , t , i , j ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] , count = 0 ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = i + 1 ; j <= n ; j ++ ) { if ( a [ i ] <= a [ j ] ) count ++ ; } } printf ( \"%ld\n\" , ( count * ( count + 1 ) ) / 2 ) ; } }", "label": 2, "id": 1600}
{"input": "int main ( ) { int i = 0 , t , n , a [ 50000 ] , b [ 50000 ] , s [ 10 ] , k , j ; scanf ( \" %d\" , & t ) ; while ( i ++ < t ) { scanf ( \" %d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \" %d\" , & a [ j ] ) ; b [ 0 ] = a [ 0 ] ; k = 0 ; s [ i ] = 0 ; for ( j = 1 ; j < n ; j ++ ) if ( a [ j ] <= b [ k ] ) { k ++ ; b [ k ] = a [ j ] ; s [ i ] += b [ k ] ; } else { k ++ ; b [ k ] = b [ k - 1 ] ; s [ i ] += b [ k ] ; } } i = 0 ; while ( i ++ < t ) printf ( \"%d\n\" , s [ i ] ) ; return 0 ; }", "label": 1, "id": 3296}
{"input": "int main ( ) { int n , i , j , k , s , t , a [ 1000 ] [ 1000 ] , tmp , ac ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { ac = 0 ; scanf ( \"%d\" , & s ) ; for ( j = 0 ; j < s ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & t ) ; a [ j ] [ k ] = t ; } if ( k == 0 && j == 0 ) { ac = a [ 0 ] [ 0 ] ; } for ( k = 1 ; k <= j ; k ++ ) { if ( a [ j ] [ k - 1 ] > a [ j ] [ k ] ) { tmp = a [ j ] [ k - 1 ] ; a [ j ] [ k - 1 ] = a [ j ] [ k ] ; a [ j ] [ k ] = tmp ; } if ( k == j ) { ac = ac + a [ k ] [ j ] ; } } } printf ( \"%d\" , ac ) ; } return 0 ; }", "label": 1, "id": 11427}
{"input": "int main ( void ) { long long a , b , ta , tb , tmp ; int t ; READ_INT ( t ) ; while ( t -- ) { READ_INT ( a ) ; READ_INT ( b ) ; for ( ta = a , tb = b ; tb != 0 ; ) tmp = tb , tb = ta % tb , ta = tmp ; WRITE_INT ( ta ) ; putchar_unlocked ( ' ' ) ; WRITE_INT ( ( int ) a * ( int ) b / ( int ) ta ) ; putchar_unlocked ( '\n' ) ; } return 0 ; }", "label": 1, "id": 893}
{"input": "main ( ) { long int T , i , c , count = 0 , j , k , a , b , d , L ; scanf ( \"%d\" , & T ) ; for ( d = 0 ; d < T ; d ++ ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { c = i ; count ++ ; } count = 0 ; } for ( L = 1 ; L < a * b ; L ++ ) { if ( L % a == 0 && L % b == 0 ) { break ; } } printf ( \"%ld %ld\n\" , c , L ) ; } }", "label": 2, "id": 2819}
{"input": "int main ( ) { int T , t , a [ 50000 ] , n , i , sum [ 10 ] ; scanf ( \"%d\" , & t ) ; T = t ; while ( t > 0 ) { sum [ t ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) sum [ t ] = sum [ t ] + a [ i + 1 ] ; else sum [ t ] = sum [ t ] + a [ i ] ; } t -- ; } for ( t = T ; t > 0 ; t -- ) printf ( \"%d\n\" , sum [ t ] ) ; return 0 ; }", "label": 1, "id": 25749}
{"input": "int a [ 50001 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , min ; scanf ( \"%d\" , & n ) ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i == 1 ) min = a [ 1 ] ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 6915}
{"input": "int main ( ) { unsigned short t , n ; scanf ( \"%hu\" , & t ) ; while ( t -- ) { unsigned short a [ 101 ] [ 101 ] = { 0 } ; scanf ( \"%hu\" , & n ) ; for ( unsigned short i = 1 ; i <= n ; i ++ ) { for ( unsigned short j = 1 ; j <= i ; j ++ ) scanf ( \"%hu\" , & a [ i ] [ j ] ) ; } for ( unsigned short i = n ; i >= 1 ; i -- ) { for ( unsigned short j = 1 ; j < n ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) ( a [ i - 1 ] [ j ] ) += ( a [ i ] [ j ] ) ; else ( a [ i - 1 ] [ j ] ) += ( a [ i ] [ j + 1 ] ) ; } } printf ( \"%hu\n\" , a [ 1 ] [ 1 ] ) ; a [ 1 ] [ 1 ] = 0 ; } return 0 ; }", "label": 0, "id": 9022}
{"input": "int main ( ) { int t , i , j , k ; scanf ( \"%d\" , & t ) ; long int a [ t ] , min [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; long int n [ a [ i ] ] ; for ( j = 0 ; j < a [ i ] ; j ++ ) { scanf ( \"%ld\" , & n [ j ] ) ; } min [ i ] = n [ 0 ] ; for ( j = 1 ; j < a [ i ] ; j ++ ) { if ( min [ i ] > n [ j ] ) min [ i ] = n [ j ] ; } } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%lld\n\" , min [ i ] * ( a [ i ] - 1 ) ) ; } return 0 ; }", "label": 0, "id": 23524}
{"input": "int main ( ) { int t ; double a , b , c , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lf%lf\" , & a , & b ) ; gcd = 1 ; lcm = 1 ; c = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } gcd = a ; lcm = c / gcd ; printf ( \"%f %f\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 9621}
{"input": "main ( ) { int t , n , i , j , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] < 0 || a [ i ] [ j ] > 99 ) return 0 ; } for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) a [ i - 1 ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 7569}
{"input": "int main ( ) { int t , i , a , b , h , j , l ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; for ( j = 1 ; j <= a || j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { h = j ; } } l = ( a * b ) / h ; printf ( \"%d %d\" , h , l ) ; } return 0 ; }", "label": 2, "id": 22723}
{"input": "void main ( ) { int n , i ; scanf ( \"%d\" , & n ) ; unsigned long long int a , b , gcd , lcm , rem , num , den ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%I64d %I64d\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * ( b / gcd ) ; printf ( \"%I64d %I64d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 22295}
{"input": "int main ( ) { int t , no , cost , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & no ) ; int array [ no ] ; for ( i = 0 ; i < no ; i ++ ) scanf ( \"%d\" , & array [ i ] ) ; for ( i = 1 ; i < no ; i ++ ) { if ( array [ i - 1 ] < array [ i ] ) cost = cost + array [ i - 1 ] ; if ( array [ i - 1 ] > array [ i ] ) cost = cost + array [ i ] ; if ( array [ i - 1 ] == array [ i ] ) cost = cost + array [ i ] ; } printf ( \"%d\" , cost ) ; printf ( \"\n\" ) ; } }", "label": 1, "id": 3140}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i <= t ; i ++ ) { long long int a , b ; scanf ( \"%lld%lld\" , & a , & b ) ; long long int min = ( a < b ) ? a : b ; long long int max = ( a > b ) ? a : b ; while ( max % min != 0 ) { long long int c = max % min ; max = min ; min = c ; } printf ( \"%lld \" , min ) ; while ( 1 ) { if ( max % a == 0 && max % b == 0 ) break ; else max ++ ; } printf ( \"%lld\n\" , max ) ; } }", "label": 2, "id": 4169}
{"input": "int main ( ) { int i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 18098}
{"input": "int main ( ) { long int t , n , a [ max ] , i , j , temp , k ; scanf ( \"%ld\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) for ( k = i + 1 ; k < n ; k ++ ) { if ( a [ i ] > a [ k ] ) { temp = a [ i ] ; a [ i ] = a [ k ] ; a [ k ] = temp ; } } printf ( \"%ld\n\" , ( n - 1 ) * a [ 0 ] ) ; } }", "label": 2, "id": 16489}
{"input": "int getMax ( int * m [ ] , int size ) ; int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { int i , j , k ; scanf ( \"%d\" , & i ) ; int * m [ i ] ; for ( j = 0 ; j < i ; j ++ ) m [ j ] = ( int * ) malloc ( i * sizeof ( int ) ) ; for ( j = 0 ; j < i ; j ++ ) for ( k = 0 ; k < i ; k ++ ) m [ j ] [ k ] = - 1 ; for ( j = 0 ; j < i ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & m [ j ] [ k ] ) ; } } printf ( \"%d\n\" , getMax ( m , i ) ) ; n -- ; } return 0 ; } int getMax ( int * m [ ] , int size ) { int s = size ; if ( s == 1 ) return m [ 0 ] [ 0 ] ; if ( s == 2 ) { int max = ( m [ 1 ] [ 0 ] > m [ 1 ] [ 1 ] ) ? m [ 1 ] [ 0 ] : m [ 1 ] [ 1 ] ; return m [ 0 ] [ 0 ] + max ; } int * m1 [ size - 1 ] ; int * m2 [ size - 1 ] ; int i , j ; for ( i = 0 ; i < size - 1 ; i ++ ) { m1 [ i ] = ( int * ) malloc ( ( size - 1 ) * sizeof ( int ) ) ; m2 [ i ] = ( int * ) malloc ( ( size - 1 ) * sizeof ( int ) ) ; } for ( i = 0 ; i < size - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { m1 [ i ] [ j ] = m [ i + 1 ] [ j ] ; m2 [ i ] [ j ] = m [ i + 1 ] [ j + 1 ] ; } } int s1 = getMax ( m1 , size - 1 ) ; int s2 = getMax ( m2 , size - 1 ) ; return ( m [ 0 ] [ 0 ] + ( ( s1 > s2 ) ? s1 : s2 ) ) ; }", "label": 2, "id": 17699}
{"input": "int main ( ) { long int n1 , n2 , gcd , lcm , rem , x , num , den ; scanf ( \"%ld\" , & x ) ; while ( x -- ) { scanf ( \"%ld %ld\" , & n1 , & n2 ) ; if ( n1 > n2 ) { num = n1 ; den = n2 ; } else { num = n2 ; den = n1 ; } while ( den != 0 ) { rem = num % den ; num = den ; den = rem ; } gcd = num ; lcm = ( n1 * n2 ) / gcd ; printf ( \"\n%ld %ld\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 15708}
{"input": "int main ( ) { int t , n , r , x , y , el [ 100 ] [ 100 ] , i , j , gr , * sum , * f ; scanf ( \"%d\" , & t ) ; sum = malloc ( sizeof ( int ) ) ; for ( n = 0 ; n < t ; n ++ ) { scanf ( \"%d\" , & r ) ; for ( x = 0 ; x < r ; x ++ ) { for ( y = 0 ; y <= x ; y ++ ) { scanf ( \"%d\" , & el [ x ] [ y ] ) ; } } for ( i = r - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { gr = ( ( el [ i + 1 ] [ j ] > el [ i + 1 ] [ j + 1 ] ) ? el [ i + 1 ] [ j ] : el [ i + 1 ] [ j + 1 ] ) ; el [ i ] [ j ] = el [ i ] [ j ] + gr ; } } * sum = el [ 0 ] [ 0 ] ; if ( n == 0 ) f = sum ; sum ++ ; } for ( n = 0 ; n < t ; n ++ ) { printf ( \"\n%d\" , * f ) ; f ++ ; } for ( n = 0 ; n < t ; n ++ ) free ( sum ) ; return 0 ; }", "label": 3, "id": 9147}
{"input": "int max ( int a , int b ) { int c = a - b ; int k = ( c >> 31 ) & 0x1 ; int max = a - k * c ; return max ; } int main ( int argc , char * argv [ ] ) { int numCases = 0 ; int triangleLen = 0 ; int i = 0 , j = 0 ; int maxNum = 0 ; int M [ 100 ] [ 100 ] ; scanf ( \"%d\" , & numCases ) ; while ( numCases -- ) { scanf ( \"%d\" , & triangleLen ) ; i = 0 ; while ( i < triangleLen ) { j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & M [ i ] [ j ] ) ; j ++ ; } i ++ ; } i = 1 ; while ( i < triangleLen ) { M [ i ] [ 0 ] += M [ i - 1 ] [ 0 ] ; M [ i ] [ i ] += M [ i - 1 ] [ i - 1 ] ; j = 1 ; while ( j < i ) { M [ i ] [ j ] += max ( M [ i - 1 ] [ j - 1 ] , M [ i - 1 ] [ j ] ) ; ++ j ; } ++ i ; } maxNum = M [ triangleLen - 1 ] [ 0 ] ; for ( i = 1 ; i < triangleLen ; i ++ ) { maxNum = max ( M [ triangleLen - 1 ] [ i ] , maxNum ) ; } printf ( \"%d\n\" , maxNum ) ; } }", "label": 0, "id": 25146}
{"input": "int main ( ) { int i = 0 , j = 0 , k , m , n = 0 , p , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & k ) ; while ( n < k ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } p = m - 1 ; while ( p >= 0 ) { j = 0 ; while ( j <= p ) { if ( a [ p ] [ j ] > a [ p ] [ j + 1 ] ) a [ p - 1 ] [ j ] = a [ p - 1 ] [ j ] + a [ p ] [ j ] ; else a [ p - 1 ] [ j ] = a [ p - 1 ] [ j ] + a [ p ] [ j + 1 ] ; j ++ ; } p -- ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; n ++ ; } return 0 ; }", "label": 0, "id": 11767}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return ( gcd ( a - b , b ) ) ; return ( gcd ( a , b - a ) ) ; } int lcm ( int a , int b ) { return ( ( a * b ) / gcd ( a , b ) ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int u , v ; scanf ( \"d d\" , & u , & v ) ; printf ( \"%d %d\n\" , gcd ( u , v ) , lcm ( u , v ) ) ; } return 0 ; }", "label": 3, "id": 4799}
{"input": "int n ; int tr [ 100 ] [ 100 ] ; int getmax ( int sum , int i , int j ) { if ( i > n - 1 ) return sum ; if ( i == n - 1 ) return sum + tr [ i ] [ j ] ; else { sum += tr [ i ] [ j ] ; int n1 , n2 ; n1 = getmax ( sum , i + 1 , j ) ; if ( j < i ) n2 = getmax ( sum , i + 1 , j + 1 ) ; else n2 = sum ; return n1 > n2 ? n1 : n2 ; } } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & tr [ i ] [ j ] ) ; printf ( \"%d\n\" , getmax ( 0 , 0 , 0 ) ) ; } }", "label": 2, "id": 22180}
{"input": "int main ( void ) { long long int t , a , b , gcd , t1 , t2 , swap ; long long int lcm ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { int mod = 1 ; scanf ( \"%lld%lld\" , & a , & b ) ; if ( a > b ) { t2 = a ; t1 = b ; } else { t2 = b ; t1 = a ; } while ( mod != 0 ) { mod = t2 % t1 ; swap = t1 ; t1 = mod ; t2 = swap ; } gcd = t2 ; lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 19953}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , x = 0 , l = 0 , m = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , r [ 2 * n - 2 ] , s [ 2 * n - 2 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } if ( n == 1 ) { printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; continue ; } i = 0 ; j = 0 ; r [ i ] = a [ 0 ] [ 0 ] ; while ( i < n - 1 ) { if ( x % 2 == 0 ) { l = 0 ; for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) s [ l ++ ] = r [ j ] + a [ i + 1 ] [ j ] ; else if ( s [ l - 2 ] < r [ j ] + a [ i + 1 ] [ j ] ) s [ l - 2 ] = r [ j ] + a [ i + 1 ] [ j ] ; s [ l ++ ] = r [ j ] + a [ i + 1 ] [ j + 1 ] ; } } else { m = 0 ; for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) r [ m ++ ] = s [ j ] + a [ i + 1 ] [ j ] ; else if ( r [ m - 2 ] < s [ j ] + a [ i + 1 ] [ j ] ) r [ m - 2 ] = s [ j ] + a [ i + 1 ] [ j ] ; r [ m ++ ] = s [ j ] + a [ i + 1 ] [ j + 1 ] ; } } i ++ ; x ++ ; } if ( x % 2 != 0 ) { m = s [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) { if ( s [ i ] > m ) m = s [ i ] ; } printf ( \"%d\n\" , m ) ; } else { l = r [ 0 ] ; for ( i = 1 ; i < m ; i ++ ) { if ( l < r [ i ] ) l = r [ i ] ; } printf ( \"%d\n\" , l ) ; } } return 0 ; }", "label": 1, "id": 7995}
{"input": "int main ( ) { int t , i , j , k , l , m , n , o , p , r [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & r [ i ] [ 0 ] ) ; for ( j = 0 ; j < i ; j ++ ) scanf ( \"%d\" , & r [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) if ( r [ i ] [ j ] > r [ i ] [ j + 1 ] ) r [ i - 1 ] [ j ] += r [ i ] [ j ] ; else r [ i - 1 ] [ j ] += r [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , r [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 26612}
{"input": "int sum ( int i , int j , int r , int n , int arr [ ] [ n ] ) { if ( r == n ) return arr [ i ] [ j ] ; int a = sum ( i + 1 , j , r + 1 , n , arr ) ; int b = sum ( i + 1 , j + 1 , r + 1 , n , arr ) ; if ( a > b ) return a + arr [ i ] [ j ] ; else return b + arr [ i ] [ j ] ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int r ; scanf ( \"%d\" , & r ) ; int arr [ r ] [ r ] , i , j ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } printf ( \"%d\n\" , sum ( 0 , 0 , 1 , r , arr ) ) ; } return 0 ; }", "label": 2, "id": 2118}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; return 0 ; }", "label": 1, "id": 24392}
{"input": "int main ( ) { int t , a [ 60000 ] , min = 0 , i = 0 ; long long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 9856}
{"input": "int main ( ) { int T , n , i , j , x , y , z , max = - 1 ; scanf ( \"%d\" , & T ) ; while ( T -- ) { max = - 1 ; int b [ 102 ] [ 102 ] = { 0 } ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & z ) ; x = b [ i - 1 ] [ j - 1 ] + z ; y = b [ i - 1 ] [ j ] + z ; b [ i ] [ j ] = x > y ? x : y ; } } for ( i = 1 ; i <= n ; i ++ ) if ( max < b [ n ] [ i ] ) max = b [ n ] [ i ] ; printf ( \"\n%d\" , max ) ; } return 0 ; }", "label": 0, "id": 17698}
{"input": "int main ( ) { int t , a , b , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = ( a < b ) ? a : b ; while ( gcd != 1 ) { if ( a % gcd == 0 && b % gcd == 0 ) break ; gcd -- ; } printf ( \"%d %d\n\" , gcd , a * b / gcd ) ; } return 0 ; }", "label": 1, "id": 19745}
{"input": "int main ( ) { long long n , a [ 10001 ] , i ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } long j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= a [ j ] ) j = i ; } printf ( \"%lld\n\" , ( n - 1 ) * a [ j ] ) ; } return 0 ; }", "label": 3, "id": 15651}
{"input": "int a [ 10000 ] ; int min ; int swap ( int min , int a [ ] ) ; int main ( ) { long int n , sum ; int t , i , min , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { min = a [ i ] ; sum = sum + a [ i ] ; temp = min ; min = a [ i + 1 ] ; a [ i + 1 ] = temp ; } else { min = a [ i + 1 ] ; sum = sum + a [ i + 1 ] ; } } printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 3, "id": 13822}
{"input": "int main ( ) { int a [ 1000 ] , t , n ; int i , j , count ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i + 1 ] >= a [ i ] ) count ++ ; } printf ( \"%d\n\" , n + count ) ; } return 0 ; }", "label": 3, "id": 7135}
{"input": "int main ( ) { int t , n , a [ 50000 ] , i , j , count = 0 , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \" %d\" , & a [ i ] ) ; } i = 0 ; while ( i < n ) { j = i + 1 ; if ( a [ j ] > a [ i ] ) { k = a [ j ] ; a [ j ] = a [ i ] ; a [ i ] = k ; } count = count + a [ j ] ; i ++ ; } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 1, "id": 11722}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 17105}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int temp [ t ] [ 2 ] ; int i , j ; for ( i = 0 ; i < t ; i ++ ) { int a , b , x , lcm , hcf ; scanf ( \"%d%d\" , & a , & b ) ; x = a < b ? a : b ; for ( j = x ; j >= 1 ; j -- ) { if ( a % j == 0 && b % j == 0 ) break ; } temp [ i ] [ 1 ] = j ; temp [ i ] [ 0 ] = ( a * b ) / temp [ i ] [ 1 ] ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d %d\n\" , temp [ i ] [ 1 ] , temp [ i ] [ 0 ] ) ; } }", "label": 2, "id": 8588}
{"input": "int main ( ) { int t , i , j , r , n , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & r ) ; for ( i = 1 ; i <= r ; i ++ ) { for ( j = 1 ; i <= i ; j ++ ) scanf ( \"%d\" , & n ) ; } if ( r == 1 ) { printf ( \"%d\n\" , sum ) ; return 0 ; } for ( i = 2 ; i <= r ; i ++ ) sum += i ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 17539}
{"input": "int min ( int a , int b ) { if ( a < b ) return a ; else return b ; } int main ( ) { int T , N , arr [ MAX ] , i , m = 0 ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; m = arr [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { if ( m > arr [ i ] ) { m = arr [ i ] ; } } printf ( \"%d\" , ( N - 1 ) * m ) ; memset ( arr , 0X0 , MAX ) ; } return 0 ; }", "label": 1, "id": 5565}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8357}
{"input": "int main ( ) { int nc , i , nr , j , k , lir , t , l , iol , iolf = 0 , s = 0 ; scanf ( \"%d\" , & nc ) ; for ( i = 0 ; i < nc ; i ++ ) { scanf ( \"%d\" , & nr ) ; for ( j = 0 , iolf = 0 , iol = 0 ; j < nr ; j ++ ) { lir = 0 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & t ) ; if ( ( t >= lir ) && ( ( k >= ( iolf - 1 ) ) && ( k <= iolf + 1 ) ) ) { lir = t ; iol = k ; } iolf = iol ; } s = s + lir ; } printf ( \"%d\" , s ) ; } return 0 ; }", "label": 1, "id": 4449}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 21679}
{"input": "long array [ 100 ] [ 100 ] ; long max ( int a , int b ) { return ( a > b ? a : b ) ; } long sum ( int i , int j , int n ) { if ( array [ i ] [ j ] == - 1 ) return 0 ; else if ( i >= n - 1 ) return array [ i ] [ j ] ; else { return ( max ( array [ i ] [ j ] + sum ( i + 1 , j , n ) , array [ i ] [ j ] + sum ( i + 1 , j + 1 , n ) ) ) ; } } long sum_control ( int n ) { return ( max ( array [ 0 ] [ 0 ] + sum ( 1 , 0 , n ) , array [ 0 ] [ - 0 ] + sum ( 1 , 1 , n ) ) ) ; } int main ( ) { int T , n , i , j , k ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%ld\" , & array [ j ] [ k ] ) ; } while ( k < n ) array [ j ] [ k ++ ] = - 1 ; } printf ( \"%ld\n\" , sum_control ( n ) ) ; } return 0 ; }", "label": 2, "id": 7927}
{"input": "int main ( ) { int n , i , l , j , k , arr [ 100 ] [ 100 ] , sum ; scanf ( \"%d\" , & n ) ; if ( n <= 1000 ) { for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & l ) ; if ( l > 0 && l < 100 ) { for ( j = 0 ; j < l ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } } sum = arr [ 0 ] [ 0 ] ; for ( j = 0 ; j < l ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { if ( arr [ j + 1 ] [ k ] >= arr [ j ] [ k ] ) sum = sum + arr [ j + 1 ] [ k ] ; else if ( arr [ j + 1 ] [ k + 1 ] > arr [ j ] [ k ] ) sum = sum + arr [ j + 1 ] [ k + 1 ] ; } } printf ( \"%d\n\" , sum ) ; } } return 0 ; }", "label": 1, "id": 4687}
{"input": "int max ( int p , int q ) { if ( p > q ) return p ; else return q ; } int main ( ) { int cases , i , j ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { int n ; scanf ( \"%d\" , & n ) ; int array [ 101 ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) array [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & array [ i ] [ j ] ) ; if ( i != 0 ) array [ i ] [ j ] += max ( array [ i - 1 ] [ j ] , array [ i - 1 ] [ j - 1 ] ) ; } } int max = array [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( max < array [ n - 1 ] [ i ] ) max = array [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 3749}
{"input": "int n ; int sum ( int m , int a [ m ] [ m ] ) { int i , j ; for ( i = m - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i - 1 ; j ++ ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; } } return a [ 0 ] [ 0 ] ; } main ( ) { scanf ( \"%d\" , & n ) ; int m , s [ n ] , i , j , k ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & m ) ; int a [ m ] [ m ] ; for ( j = 1 ; j <= m ; j ++ ) for ( i = 0 ; i < j ; i ++ ) scanf ( \"%d\" , & a [ j - 1 ] [ i ] ) ; s [ k ] = sum ( m , a ) ; } for ( k = 0 ; k < n ; k ++ ) printf ( \"%d\n\" , s [ k ] ) ; return 0 ; }", "label": 0, "id": 75}
{"input": "int main ( ) { int T , i ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { long long int x , y , a , b , l ; scanf ( \"%lld%lld\" , & x , & y ) ; int t ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } l = ( x * y ) / a ; printf ( \"%lld %lld\" , a , l ) ; } }", "label": 1, "id": 9019}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , s , i , p ; scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) s = a ; else s = b ; p = a * b ; for ( i = s ; i > 0 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { printf ( \"%d %d\n\" , i , p / i ) ; break ; } } } return 0 ; }", "label": 1, "id": 23323}
{"input": "int gcd ( int p , int q ) ; int lcm ( int p , int q ) ; int main ( ) { int a ; int p , q , r , s ; scanf ( \"%d\" , & a ) ; for ( int i = 0 ; i < a ; i ++ ) { scanf ( \"%d %d\" , & p , & q ) ; r = gcd ( p , q ) ; s = lcm ( p , q ) ; printf ( \"%d %d\n\" , r , s ) ; } } int gcd ( int p , int q ) { int s , t ; if ( q > p ) { t = p ; p = q ; q = p ; } while ( q != 0 ) { s = p % q ; p = q ; q = s ; } return p ; } int lcm ( int p , int q ) { int s ; s = p * q / ( gcd ( p , q ) ) ; return s ; }", "label": 1, "id": 3485}
{"input": "int main ( ) { int t , a , b , i , gcd ; long long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } for ( i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } }", "label": 1, "id": 26010}
{"input": "int gdc ( int a , int b ) { int i = 0 , z = 0 , k = 0 ; z = a > b ? b : a ; for ( i = 1 ; i <= z ; i ++ ) { if ( a % i == 0 && b % i == 0 ) k = i ; } return k ; } int main ( ) { int a = 0 , b = 0 , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gdc ( a , b ) , a * b / gdc ( a , b ) ) ; } return 0 ; }", "label": 2, "id": 18587}
{"input": "int GCD ( int m , int n ) { int z , i , o ; if ( m > n ) z = n ; else z = m ; for ( i = z ; i <= 1 ; i -- ) { if ( m % i == 0 && n % i == 0 ) break ; } return i ; } int main ( ) { int x , y , T , i , t , LCM ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; t = GCD ( x , y ) ; printf ( \"%d\" , t ) ; LCM = x * y / t ; printf ( \"%d\" , LCM ) ; } return 0 ; }", "label": 1, "id": 21171}
{"input": "int main ( ) { int n , i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int A [ n ] [ n ] , B [ n ] [ n ] , k , max = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; B [ i ] [ j ] = A [ i ] [ j ] ; } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { for ( k = j ; k <= j + 1 ; k ++ ) { if ( k < n ) { if ( B [ i + 1 ] [ k ] < A [ i + 1 ] [ k ] + B [ i ] [ j ] ) B [ i + 1 ] [ k ] = A [ i + 1 ] [ k ] + B [ i ] [ j ] ; } printf ( \"A[%d][%d] is %d and B[%d][%d] is %d and A[%d][%d]+B[%d][%d] is %d \" , i + 1 , k , A [ i + 1 ] [ k ] , i , j , B [ i ] [ j ] , i + 1 , k , i , j , A [ i + 1 ] [ k ] + B [ i ] [ j ] ) ; printf ( \"B[%d][%d]=%d \n\" , i + 1 , k , B [ i + 1 ] [ k ] ) ; if ( max < B [ i + 1 ] [ k ] ) max = B [ i + 1 ] [ k ] ; } } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 16146}
{"input": "int main ( ) { int t , n , i , k , l ; long int a [ 100000 ] , b [ 10000 ] ; scanf ( \"%d\" , & t ) ; while ( t ) { k = 0 ; l = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < ( n - 1 ) ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { l ++ ; } else { if ( l != 0 ) { k ++ ; } l = 0 ; } } k += n ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) continue ; for ( l = i + 1 ; l < n ; l ++ ) { if ( a [ i ] == a [ l ] ) { a [ l ] = 0 ; k -- ; } } } printf ( \"%d\" , k + 1 ) ; t -- ; } return 0 ; }", "label": 2, "id": 1132}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ 5000 ] , s = 0 ; int temp = n , i , j ; for ( i = 1 ; i <= temp ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ s ++ ] ) ; } int first = 0 , last = 0 , diff ; for ( i = 1 ; i < n - 1 ; i ++ ) { diff = i ; first = first + diff ; last = last + diff + 1 ; a [ first ] = a [ first - diff ] + a [ first ] ; for ( j = first + 1 ; j < last ; j ++ ) a [ j ] = MAX ( a [ j - diff ] + a [ j ] , a [ j - diff - 1 ] + a [ j ] ) ; a [ last ] = a [ last - diff - 1 ] + a [ last ] ; } int max = 0 ; diff = n - 1 ; first = first + diff ; last = last + diff + 1 ; max = a [ first ] = a [ first - diff ] + a [ first ] ; for ( j = first + 1 ; j < last ; j ++ ) { a [ j ] = MAX ( a [ j - diff ] + a [ j ] , a [ j - diff - 1 ] + a [ j ] ) ; if ( max < a [ j ] ) max = a [ j ] ; } a [ last ] = a [ last - diff - 1 ] + a [ last ] ; if ( max < a [ last ] ) max = a [ last ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 22879}
{"input": "int main ( ) { int t , row , a [ 100 ] [ 100 ] , i = 0 , j = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = row - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15586}
{"input": "int main ( ) { int t , a , b , i , flag , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i < a || i < b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { flag = i ; } } c = ( a * b ) / flag ; printf ( \"1 %d\n\" , c ) ; } }", "label": 2, "id": 10234}
{"input": "int main ( ) { int i , t , n , j , k , c , ans = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; j = 0 ; ans = 0 ; while ( j < n - 1 ) { c = 1 ; if ( a [ j ] <= a [ j + 1 ] ) { while ( ( a [ j ] <= a [ j + 1 ] ) && ( j < n - 1 ) ) { c ++ ; j ++ ; } ans += c * ( c - 1 ) / 2 ; } else j ++ ; } printf ( \"%d\" , ans + n ) ; } }", "label": 1, "id": 9716}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , i , j , n , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17381}
{"input": "int main ( ) { int t , a , b , lcm , hcf , temp ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) { temp = b ; b = a ; a = temp ; } if ( a % b == 0 ) { lcm = a ; hcf = b ; } else { hcf = 1 ; lcm = a * b ; } printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 20795}
{"input": "void main ( ) { int N , arr [ size ] ; int j , i , min , T , result [ 10 ] ; scanf ( \"%d\" , & T ) ; for ( j = 0 ; j < T ; j ++ ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; min = arr [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } result [ j ] = min * ( N - 1 ) ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%d\n\" , result [ i ] ) ; }", "label": 0, "id": 13616}
{"input": "int main ( ) { int T , N , A [ 100001 ] , idx , idx2 , count , done ; char * table = malloc ( sizeof ( char ) * 100001 * 100001 ) ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( idx = 1 ; idx <= N ; idx ++ ) { scanf ( \"%d\" , & A [ idx ] ) ; } for ( idx = 1 ; idx <= N ; idx ++ ) { for ( idx2 = 1 ; idx2 <= N ; idx2 ++ ) { table [ idx * N + idx2 ] = 0 ; } } count = 0 ; for ( idx = 1 ; idx <= N ; idx ++ ) { table [ idx * N + idx ] = 1 ; count ++ ; } for ( idx = 2 ; idx <= N ; idx ++ ) { for ( idx2 = idx + 1 ; idx2 <= N ; idx2 ++ ) { if ( A [ idx - 1 ] <= A [ idx ] ) { table [ idx * N + idx2 ] = 1 ; count ++ ; } else { idx ++ ; break ; } } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 2, "id": 23756}
{"input": "int a [ 100 ] [ 100 ] , sum = 0 ; long int cltr ( int r , int c , int n , int sum1 ) { if ( r == n - 1 ) { return ( sum1 + a [ r ] [ c ] ) ; } else { sum1 += a [ r ] [ c ] ; int b = cltr ( r + 1 , c , n , sum1 ) ; int d = cltr ( r + 1 , c + 1 , n , sum1 ) ; return ( ( b > d ) ? b : d ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t ) { t -- ; int n ; scanf ( \"%d\" , & n ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } long int s = cltr ( 0 , 0 , n , 0 ) ; printf ( \"%ld\n\" , s ) ; } return 0 ; }", "label": 2, "id": 7697}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( ) { int i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 101 ] = { 0 } , ans [ 101 ] = { 0 } ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; ans [ j ] += a [ j ] ; } for ( j = n + 1 ; j >= 2 ; j -- ) ans [ j ] = max ( ans [ j - 1 ] , ans [ j ] ) ; } int m = 0 ; for ( i = 1 ; i <= n ; i ++ ) m = max ( m , ans [ i ] ) ; printf ( \"%d\n\" , m ) ; } }", "label": 0, "id": 26659}
{"input": "int main ( ) { int i , T ; long long gcd , A , B , lcm , x , y , s ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%I64d%I64d \" , & A , & B ) ; if ( B > A ) { s = A ; A = B ; B = s ; } x = A , y = B ; while ( y != 0 ) { gcd = x % y ; x = y ; y = gcd ; } lcm = A / x * B ; printf ( \"%I64d %I64d\n\" , x , lcm ) ; } return 0 ; }", "label": 1, "id": 9222}
{"input": "int main ( ) { int t , n , i , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { s = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { s += a [ i + 1 ] ; } else s = s + a [ i ] ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 17051}
{"input": "int main ( ) { long t , n , i , j ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%ld\" , & a [ i ] [ j ] ) ; } } for ( i = t - 1 ; i > 0 ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } } printf ( \"%ld\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 14585}
{"input": "main ( ) { long int i , j , a , c , b , e , n ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; c = a > b ? b : a ; for ( j = 1 ; j <= c ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { e = j ; } } printf ( \"%ld %ld\n\" , e , a * b / e ) ; } }", "label": 2, "id": 3398}
{"input": "int read ( ) { char c ; int d ; d = 0 ; c = getchar_unlocked ( ) ; while ( 1 ) { if ( c == '\n' || c == ' ' ) break ; d = d * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return d ; } int main ( ) { int n , T , i , j ; T = read ( ) ; while ( T -- ) { int a [ 102 ] [ 102 ] ; int sum [ 102 ] [ 102 ] = { 0 } ; n = read ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = read ( ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 17733}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } int main ( void ) { int a , b , c , d ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { c = gcd ( a , b ) ; } else { c = gcd ( b , a ) ; } printf ( \"gcd %d\n\" , c ) ; d = ( a * b ) / c ; printf ( \"lcm %d\" , d ) ; return 0 ; }", "label": 1, "id": 6065}
{"input": "int main ( ) { int T , A , B , x , a , b ; scanf ( \"%d\" , T ) ; while ( T -- ) { scanf ( \"%d %d\" , & A , & B ) ; a = A ; b = B ; while ( B != 0 ) { x = B ; B = ( A % B ) ; A = x ; } printf ( \"%d %d\n\" , x , ( a * b ) / x ) ; } return 0 ; }", "label": 3, "id": 26267}
{"input": "long int gcd ( long int n1 , long int n2 ) { if ( n1 == 0 || n1 == n2 ) { printf ( \"%ld\" , n2 ) ; return n2 ; } else if ( n2 == 0 ) { printf ( \"%ld\" , n1 ) ; return n1 ; } else ( n1 > n2 ) ? gcd ( ( n1 - n2 ) , n2 ) : gcd ( n1 , ( n2 - n1 ) ) ; } int main ( ) { long int n1 , n2 , t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & n1 , & n2 ) ; printf ( \" %ld\n\" , ( n1 * n2 ) / gcd ( n1 , n2 ) ) ; } return 0 ; }", "label": 0, "id": 19002}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int min ( int a , int b ) { if ( a < b ) return a ; return b ; } int gcf ( int a , int b ) { if ( b == 0 ) return a ; return gcf ( b , a % b ) ; } int lcm ( int a , int b ) { return a * b / gcf ( max ( a , b ) , min ( a , b ) ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcf ( max ( a , b ) , min ( a , b ) ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 18145}
{"input": "int sum ( int a [ 100 ] [ 100 ] , int n , int i , int j ) { int l , r ; if ( i == n - 1 ) return a [ i ] [ j ] ; l = sum ( a , n , i + 1 , j ) ; r = sum ( a , n , i + 1 , j + 1 ) ; return ( a [ i ] [ j ] + max ( l , r ) ) ; } int main ( ) { int a [ 100 ] [ 100 ] , n , t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\n\" , sum ( a , n , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 25558}
{"input": "void main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , s = 0 , min = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 23984}
{"input": "int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int n ; scanf ( \"%lld\" , & n ) ; long long int A [ n ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & A [ i ] ) ; } long long int m = A [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( m > A [ i ] ) { m = A [ i ] ; } } long long int x ; x = m * ( n - 1 ) ; printf ( \"%lld\n\" , x ) ; } return 0 ; }", "label": 0, "id": 14827}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] = { { 0 } } ; int s [ 100 ] [ 100 ] = { { 0 } } ; int max = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 && i == 0 ) s [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( s [ i - 1 ] [ j ] > s [ i - 1 ] [ j - 1 ] ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; if ( max < s [ i ] [ j ] ) max = s [ i ] [ j ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 1976}
{"input": "int a [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int ans ( int a [ 100 ] [ 100 ] , int i , int j ) { if ( i < 0 || j < 0 ) return 0 ; if ( i == 0 && j == 0 ) return a [ i ] [ j ] ; else return ( a [ i ] [ j ] + max ( ans ( a , i - 1 , j ) , ans ( a , i - 1 , j - 1 ) ) ) ; } int main ( ) { int n , r , i , j , count = 0 , se ; int an [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } se = ans ( a , r - 1 , i ) ; for ( i = 0 ; i < r ; i ++ ) { if ( ans ( a , r - 1 , i ) > se ) se = ans ( a , r - 1 , i ) ; } an [ count ] = se ; count ++ ; n -- ; } for ( i = 0 ; i < count ; i ++ ) printf ( \"%d\n\" , an [ i ] ) ; return 0 ; }", "label": 2, "id": 14974}
{"input": "int gcd ( int x , int y ) { if ( x < y ) { return gcd ( y , x ) ; } int c ; while ( y ) { c = x % y ; x = y ; y = c ; } return x ; } int main ( ) { int t , i , k , s [ 1000 ] , r [ 1000 ] , x , y ; scanf ( \"%d\" , & t ) ; k = t ; while ( t ) { scanf ( \"%d %d\" , & x , & y ) ; int hcf = gcd ( x , y ) ; int lcm = ( x * y ) / hcf ; s [ t - 1 ] = hcf ; r [ t - 1 ] = lcm ; t -- ; } for ( i = k - 1 ; i >= 0 ; i -- ) { printf ( \"%d %d\n\" , s [ i ] , r [ i ] ) ; } }", "label": 1, "id": 790}
{"input": "int main ( ) { int t , a , b , r , gcd , lcm , numerator , denominator ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\n\" , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } r = numerator % denominator ; while ( r ) { numerator = denominator ; denominator = r ; r = numerator % denominator ; } gcd = denominator ; lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 1154}
{"input": "int main ( ) { long i = 1 , j = 1 , n , count , num , prev , pres ; printf ( \"enter the size  of array and value of k\n \" ) ; scanf ( \"%ld\" , & n ) ; scanf ( \"%ld\" , & num ) ; prev = num ; count = 0 ; while ( i < n ) { scanf ( \"%ld\" , & num ) ; if ( num > prev ) { prev = num ; j ++ ; i ++ ; } else { prev = num ; i ++ ; count = count + j * ( j + 1 ) / 2 ; j = 1 ; } } count = count + j * ( j + 1 ) / 2 ; printf ( \"%ld\" , count ) ; return 0 ; }", "label": 1, "id": 8489}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] ; int n , t , i , j , k ; static int max [ 10 ] ; scanf ( \"%d\" , & t ) ; k = t ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j ] ; if ( max [ t ] < a [ i - 1 ] [ j ] ) max [ t ] = a [ i - 1 ] [ j ] ; } } t -- ; } while ( k ) { printf ( \"%d\n\" , max [ k ] ) ; k -- ; } return 0 ; }", "label": 3, "id": 573}
{"input": "int main ( ) { int testcase , n , max ; register int i , j ; scanf ( \"%d\" , & testcase ) ; while ( testcase -- ) { max = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j < i + 1 ; ++ j ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 1 ; i <= n - 1 ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) { if ( j == 0 ) { a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } else if ( j == i + 1 ) { a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } else if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) { a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } else { a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } } max = a [ 0 ] [ 0 ] ; for ( j = 0 ; j < n ; ++ j ) { if ( max < a [ n - 1 ] [ j ] ) max = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 26431}
{"input": "int main ( ) { int t , n ; int i ; long long a [ 50001 ] , sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } sum = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ 0 ] > a [ i ] ) a [ 0 ] = a [ i ] ; sum = sum + a [ 0 ] ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 22778}
{"input": "int num [ 100 ] ; int main ( ) { int t , rows , k , j , i , t1 , t2 ; scanf ( \"%d\" , & t ) ; while ( t ) { int sum [ 100 ] = { 0 } ; scanf ( \"%d\" , & rows ) ; k = 1 ; while ( rows ) { j = 0 ; while ( j < k ) { scanf ( \"%d\" , & num [ j ] ) ; j ++ ; } i = j - 1 ; while ( i ) { t1 = sum [ i - 1 ] + num [ i ] ; t2 = sum [ i ] + num [ i ] ; if ( t1 > t2 ) sum [ i ] = t1 ; else sum [ i ] = t2 ; i -- ; } sum [ 0 ] = sum [ 0 ] + num [ 0 ] ; k ++ ; rows -- ; } int max = 0 ; for ( i = 0 ; i < k ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\n\" , max ) ; t -- ; } return 0 ; }", "label": 1, "id": 1699}
{"input": "int main ( ) { int t ; scanf ( \" %d\" , & t ) ; while ( t -- ) { long n , i , min , cost ; scanf ( \" %ld\" , & n ) ; int array [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \" %ld\" , array + i ) ; min = array [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( array [ i ] < min ) min = array [ i ] ; } cost = min * ( n - 1 ) ; printf ( \"%ld\n\" , cost ) ; } }", "label": 0, "id": 552}
{"input": "void call ( long ) ; long array [ 100000 ] ; long result [ 100000 ] ; long count = 0 ; int main ( ) { long i , t , inner , j ; scanf ( \"%lu\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lu\" , & inner ) ; for ( j = 0 ; j < inner ; j ++ ) { scanf ( \"%lu\" , & array [ j ] ) ; } call ( inner ) ; } for ( j = 0 ; j < count ; j ++ ) { printf ( \"%lu\n\" , result [ j ] ) ; } return 0 ; } void call ( long inner ) { long i , sum = 0 ; for ( i = 0 ; i < inner - 1 ; i ++ ) { if ( array [ i + 1 ] > array [ i ] ) { array [ i + 1 ] = array [ i ] ; sum = sum + array [ i + 1 ] ; } else { array [ i ] = array [ i + 1 ] ; sum = sum + array [ i ] ; } } result [ count ++ ] = sum ; }", "label": 1, "id": 26414}
{"input": "int main ( ) { int i , j ; int test , ar [ 100 ] [ 100 ] ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } } if ( n == 1 ) { printf ( \"%d\" , ar [ 0 ] [ 0 ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( ( ar [ i ] [ j ] + ar [ i + 1 ] [ j ] ) > ( ar [ i ] [ j ] + ar [ i + 1 ] [ j + 1 ] ) ) ar [ i ] [ j ] += ( ar [ i + 1 ] [ j ] ) ; else ar [ i ] [ j ] += ( ar [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 1245}
{"input": "int main ( ) { int a [ 400 ] ; int t , n , s , i ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; s = ( n * ( n + 1 ) ) / 2 ; for ( i = 0 ; i < s ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; s = ( a [ s - n ] + a [ s - n + 1 ] + a [ s - n + 1 - n ] ) ; printf ( \"%d\n\" , s ) ; t -- ; } return 0 ; }", "label": 3, "id": 21304}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , k ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4923}
{"input": "int a [ 102 ] [ 102 ] ; int rec ( int i , int j , int row ) { int temp , temp1 , max = 0 ; if ( i == row - 1 ) { return a [ i ] [ j ] ; } if ( i >= j ) { temp = rec ( i + 1 , j , row ) ; printf ( \"max=%d\n\" , temp ) ; temp1 = rec ( i + 1 , j + 1 , row ) ; printf ( \"max1=%d\n\" , temp1 ) ; if ( temp + a [ i ] [ j ] <= temp1 + a [ i ] [ j ] ) { max += temp1 + a [ i ] [ j ] ; } else { max += temp + a [ i ] [ j ] ; } return max ; } } int main ( ) { int n , row ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int i , j ; scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , rec ( 0 , 0 , row ) ) ; } return 0 ; }", "label": 2, "id": 2870}
{"input": "int main ( void ) { int n , i , t , j , k , min , sum , a [ 50 ] ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\n\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\\t\" , & a [ j ] ) ; } sum = 0 ; for ( k = 0 ; k < n - 1 ; k ++ ) { if ( a [ k ] < a [ k + 1 ] ) { min = a [ k ] ; } else { min = a [ k + 1 ] ; } sum = sum + min ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 22503}
{"input": "int main ( ) { long int N ; scanf ( \"%d\" , & N ) ; while ( N -- ) { int n1 , n2 , i , gcd , lcm ; scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 16002}
{"input": "long long gcd ( long long a , long long b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { long long t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long a , b , k ; scanf ( \"%lld%lld\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , k , ( a * b ) / k ) ; } return 0 ; }", "label": 0, "id": 10426}
{"input": "int nexMax ( int * * po , int row , int col , int max ) { int below , belowR ; if ( row == max ) { return po [ row - 1 ] [ col - 1 ] ; } below = nexMax ( po , row + 1 , col , max ) ; belowR = nexMax ( po , row + 1 , col + 1 , max ) ; return ( below > belowR ? ( po [ row - 1 ] [ col - 1 ] + below ) : ( po [ row - 1 ] [ col - 1 ] + belowR ) ) ; } int main ( ) { int * * po ; int i , j , amount , line ; scanf ( \"%d\" , & amount ) ; while ( amount -- ) { scanf ( \"%d\" , & line ) ; po = ( int * * ) malloc ( sizeof ( int * * ) * line ) ; for ( i = 0 ; i < line ; i ++ ) { po [ i ] = ( int * ) malloc ( sizeof ( int * ) * ( i + 1 ) ) ; } for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & po [ i ] [ j ] ) ; } } printf ( \"%d\n\" , nexMax ( po , 1 , 1 , line ) ) ; for ( i = 0 ; i < line ; i ++ ) { free ( po [ i ] ) ; } free ( po ) ; } return 0 ; }", "label": 2, "id": 22976}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , ar [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; ar [ 1 ] [ 0 ] += ar [ 0 ] [ 0 ] ; ar [ 1 ] [ 1 ] += ar [ 0 ] [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) ar [ i ] [ 0 ] += ar [ i - 1 ] [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) if ( ar [ i - 1 ] [ j - 1 ] > ar [ i - 1 ] [ j ] ) ar [ i ] [ j ] += ar [ i - 1 ] [ j - 1 ] ; else ar [ i ] [ j ] += ar [ i - 1 ] [ j ] ; int maxi = ar [ n - 1 ] [ 0 ] ; for ( i = 0 ; i <= i ; i ++ ) if ( ar [ n - 1 ] [ i ] > maxi ) maxi = ar [ n - 1 ] [ i ] ; printf ( \"%d\n\" , maxi ) ; } }", "label": 3, "id": 15347}
{"input": "int arr [ R ] [ C ] ; void reduce ( int , int ) ; int main ( ) { int count , t , n , row , col , i , j ; scanf ( \"%d\" , & t ) ; for ( count = 0 ; count < t ; ++ count ) { scanf ( \"%d\" , & n ) ; for ( row = 0 ; row < n ; ++ row ) { for ( col = 0 ; col <= row ; ++ col ) { scanf ( \"%d\" , & arr [ row ] [ col ] ) ; } } for ( i = row - 2 ; i >= 0 ; -- i ) { for ( j = 0 ; j <= i ; ++ j ) reduce ( i , j ) ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; } void reduce ( int r , int c ) { int temp1 , temp2 ; temp1 = arr [ r + 1 ] [ c ] ; temp2 = arr [ r + 1 ] [ c + 1 ] ; if ( temp1 > temp2 ) arr [ r ] [ c ] += temp1 ; else arr [ r ] [ c ] += temp2 ; }", "label": 0, "id": 25829}
{"input": "int arr [ 99 ] [ 99 ] ; void getTriangle ( int rows ) { int i , j ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } } int calculateLength ( int x , int y , int rows , int level ) { int left_len , right_len , max ; if ( level < rows ) { left_len = calculateLength ( x + 1 , y , rows , level + 1 ) ; right_len = calculateLength ( x + 1 , y + 1 , rows , level + 1 ) ; max = right_len ; if ( left_len > right_len ) { max = left_len ; } return ( arr [ x ] [ y ] + max ) ; } else { return arr [ x ] [ y ] ; } } int main ( ) { int nb_tests , rows , len ; scanf ( \"%d\" , & nb_tests ) ; while ( nb_tests ) { scanf ( \"%d\" , & rows ) ; getTriangle ( rows ) ; len = calculateLength ( 0 , 0 , rows , 1 ) ; printf ( \"\n%d\" , len ) ; nb_tests -- ; } return 0 ; }", "label": 2, "id": 5218}
{"input": "int main ( int argc , char * * argv ) { int cases , h , i , j , array [ 100 ] [ 100 ] , temp ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { scanf ( \"%d\" , & h ) ; for ( i = 0 ; i < h ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & temp ) ; if ( i > 0 ) { if ( j == 0 ) { array [ i ] [ j ] = array [ i - 1 ] [ j ] + temp ; } else { if ( ( array [ i - 1 ] [ j - 1 ] + temp ) > ( array [ i - 1 ] [ j ] + temp ) ) { array [ i ] [ j ] = array [ i - 1 ] [ j - 1 ] + temp ; } else { array [ i ] [ j ] = array [ i - 1 ] [ j ] + temp ; } } } else array [ i ] [ j ] = temp ; } } temp = 0 ; for ( i = 0 ; i < h ; i ++ ) { if ( array [ h - 1 ] [ i ] > temp ) { temp = array [ h - 1 ] [ i ] ; } } printf ( \"%d\n\" , temp ) ; } return ( 0 ) ; }", "label": 1, "id": 3552}
{"input": "int main ( ) { int j , num , t , temp , prev , curr ; long long count ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%d\" , & num ) ; for ( j = 0 ; j < num ; j ++ ) { if ( j == 0 ) scanf ( \"%d\" , & prev ) ; else { scanf ( \"%d\" , & curr ) ; if ( prev > curr ) count ++ ; else count += 2 ; prev = curr ; } } count ++ ; printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 1, "id": 16799}
{"input": "int main ( ) { int t ; long a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( b > a ) { b = b + a ; a = b - a ; b = b - a ; } while ( a % b != 0 ) { g = a % b ; a = b ; b = g ; } l = ( a * b ) / g ; printf ( \"%ld %ld \n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 20167}
{"input": "int main ( void ) { int t , a [ 100 ] [ 100 ] , n , i , k , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { k = i ; while ( k -- ) scanf ( \"%d\" , & a [ i - 1 ] [ i - k - 1 ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11274}
{"input": "int main ( ) { int T , A , B ; int i , a , b , rem ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; a = A ; b = B ; while ( b != 0 ) { rem = a % b ; a = b ; b = rem ; } printf ( \"%d %d\n\" , a , ( ( A * B ) / a ) ) ; } return 0 ; }", "label": 1, "id": 7540}
{"input": "int main ( void ) { int T , N ; int count , i ; int A [ 100000 ] ; scanf ( \"%d \" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%d\" , & A [ i ] ) ; count = 0 ; for ( i = 0 ; i < N - 1 ; i ++ ) { if ( A [ i ] <= A [ i + 1 ] ) count ++ ; } printf ( \"%d\n\" , count + N ) ; } return 0 ; }", "label": 1, "id": 7480}
{"input": "int main ( ) { int test ; long int n , i , a ; long int min ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a ) ; if ( a < min ) min = a ; } min = min * ( n - 1 ) ; printf ( \"%ld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 21069}
{"input": "typedef unsigned int input_number_t ; typedef unsigned int output_number_t ; static char s_aInputBuffer [ MAXIMUM_BUFFER_SIZE ] ; static char s_aOutputBuffer [ MAXIMUM_BUFFER_SIZE ] ; static char * s_pInputBufferLimit = s_aInputBuffer + sizeof ( s_aInputBuffer ) ; static const char * s_pOutputBufferLimit = s_aOutputBuffer + sizeof ( s_aOutputBuffer ) ; static char * s_pInputBufferIterator = s_aInputBuffer + sizeof ( s_aInputBuffer ) ; static char * s_pOutputBufferIterator = s_aOutputBuffer ; static inline input_number_t _readNumber ( void ) { input_number_t _result = 0 ; int _continue = 0 ; for ( ; ; ) { if ( s_pInputBufferIterator == s_pInputBufferLimit ) s_pInputBufferLimit = ( s_pInputBufferIterator = s_aInputBuffer ) + read ( 0 , s_aInputBuffer , sizeof ( s_aInputBuffer ) ) ; while ( s_pInputBufferIterator < s_pInputBufferLimit ) { if ( ( * s_pInputBufferIterator >= '0' ) && ( * s_pInputBufferIterator <= '9' ) ) { _result = ( 10 * _result ) + * s_pInputBufferIterator ++ - '0' ; ++ _continue ; } else if ( _continue ) return _result ; else * s_pInputBufferIterator ++ ; } } return _result ; } static inline void _flushOutput ( void ) { write ( 1 , s_aOutputBuffer , ( int ) ( s_pOutputBufferIterator - s_aOutputBuffer ) ) ; } static inline void _writeNumber ( output_number_t _n , char _d ) { static char _aNumber [ 20 ] ; int _i ; for ( _i = 0 ; _n ; ++ _i ) { _aNumber [ _i ] = _n % 10 ; _n /= 10 ; } if ( ( s_pOutputBufferIterator + ( _i + 1 ) ) >= s_pOutputBufferLimit ) { write ( 1 , s_aOutputBuffer , ( int ) ( s_pOutputBufferIterator - s_aOutputBuffer ) ) ; s_pOutputBufferIterator = s_aOutputBuffer ; } for ( -- _i ; _i >= 0 ; -- _i ) * s_pOutputBufferIterator ++ = _aNumber [ _i ] + '0' ; * s_pOutputBufferIterator ++ = _d ; } static unsigned int s_aArray [ 5050 ] ; static unsigned int * s_aRows [ ] = { s_aArray + 0 , s_aArray + 1 , s_aArray + 3 , s_aArray + 6 , s_aArray + 10 , s_aArray + 15 , s_aArray + 21 , s_aArray + 28 , s_aArray + 36 , s_aArray + 45 , s_aArray + 55 , s_aArray + 66 , s_aArray + 78 , s_aArray + 91 , s_aArray + 105 , s_aArray + 120 , s_aArray + 136 , s_aArray + 153 , s_aArray + 171 , s_aArray + 190 , s_aArray + 210 , s_aArray + 231 , s_aArray + 253 , s_aArray + 276 , s_aArray + 300 , s_aArray + 325 , s_aArray + 351 , s_aArray + 378 , s_aArray + 406 , s_aArray + 435 , s_aArray + 465 , s_aArray + 496 , s_aArray + 528 , s_aArray + 561 , s_aArray + 595 , s_aArray + 630 , s_aArray + 666 , s_aArray + 703 , s_aArray + 741 , s_aArray + 780 , s_aArray + 820 , s_aArray + 861 , s_aArray + 903 , s_aArray + 946 , s_aArray + 990 , s_aArray + 1035 , s_aArray + 1081 , s_aArray + 1128 , s_aArray + 1176 , s_aArray + 1225 , s_aArray + 1275 , s_aArray + 1326 , s_aArray + 1378 , s_aArray + 1431 , s_aArray + 1485 , s_aArray + 1540 , s_aArray + 1596 , s_aArray + 1653 , s_aArray + 1711 , s_aArray + 1770 , s_aArray + 1830 , s_aArray + 1891 , s_aArray + 1953 , s_aArray + 2016 , s_aArray + 2080 , s_aArray + 2145 , s_aArray + 2211 , s_aArray + 2278 , s_aArray + 2346 , s_aArray + 2415 , s_aArray + 2485 , s_aArray + 2556 , s_aArray + 2628 , s_aArray + 2701 , s_aArray + 2775 , s_aArray + 2850 , s_aArray + 2926 , s_aArray + 3003 , s_aArray + 3081 , s_aArray + 3160 , s_aArray + 3240 , s_aArray + 3321 , s_aArray + 3403 , s_aArray + 3486 , s_aArray + 3570 , s_aArray + 3655 , s_aArray + 3741 , s_aArray + 3828 , s_aArray + 3916 , s_aArray + 4005 , s_aArray + 4095 , s_aArray + 4186 , s_aArray + 4278 , s_aArray + 4371 , s_aArray + 4465 , s_aArray + 4560 , s_aArray + 4656 , s_aArray + 4753 , s_aArray + 4851 , s_aArray + 4950 } ; int main ( void ) { int _t = _readNumber ( ) ; int _n ; int _i1 ; int _i2 ; int _i3 ; int _i4 ; for ( _i1 = 0 ; _i1 < _t ; ++ _i1 ) { _n = _readNumber ( ) ; _i4 = 0 ; for ( _i2 = 0 ; _i2 < _n ; ++ _i2 ) { for ( _i3 = 0 ; _i3 <= _i2 ; ++ _i3 ) s_aArray [ _i4 ++ ] = _readNumber ( ) ; } if ( _i2 > 1 ) { for ( _i2 -= 2 ; _i2 >= 0 ; -- _i2 ) { for ( _i3 = 0 ; _i3 <= _i2 ; ++ _i3 ) s_aRows [ _i2 ] [ _i3 ] += ( ( s_aRows [ _i2 + 1 ] [ _i3 ] > s_aRows [ _i2 + 1 ] [ _i3 + 1 ] ) ? s_aRows [ _i2 + 1 ] [ _i3 ] : s_aRows [ _i2 + 1 ] [ _i3 + 1 ] ) ; } } _writeNumber ( * s_aArray , '\n' ) ; } _flushOutput ( ) ; return 0 ; }", "label": 0, "id": 21122}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i ; for ( i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int g , l ; if ( a > b ) { int D , d , temp ; D = a ; d = b ; while ( D % d != 0 ) { temp = d ; d = D % d ; D = temp ; } g = d ; } else { int D , d , temp ; D = b ; d = a ; while ( D % d != 0 ) { d = temp ; d = D % d ; D = temp ; } g = d ; } l = ( a * b ) / g ; printf ( \"%d %d \n\" , g , l ) ; } return 0 ; }", "label": 3, "id": 26447}
{"input": "int main ( ) { int t , i = 2 ; long int a , b , hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { t -- ; scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { lcm = a ; while ( lcm % b != 0 ) { lcm = a * i ; i ++ ; } } else { lcm = b ; while ( lcm % a != 0 ) { lcm = b * i ; i ++ ; } } hcf = a * b / lcm ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 18275}
{"input": "void swap ( int * a , int * b ) { int temp = * a ; * a = * b ; * b = temp ; } int main ( ) { int t , i , j , * a , n , sum = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] >= a [ j + 1 ] ) { sum = sum + a [ j + 1 ] ; } else { sum = sum + a [ j ] ; swap ( & a [ j ] , & a [ j + 1 ] ) ; } } printf ( \"%d\n\" , sum ) ; free ( a ) ; sum = 0 ; } return 0 ; }", "label": 1, "id": 2444}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n , max = 0 ; scanf ( \"%d\" , & n ) ; int a [ n + 1 ] [ n + 1 ] , d [ n + 1 ] [ n + 1 ] ; for ( i = 0 ; i <= n ; i ++ ) for ( j = 0 ; j <= n ; j ++ ) d [ i ] [ j ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] + d [ i - 1 ] [ j ] >= a [ i ] [ j ] + d [ i - 1 ] [ j - 1 ] ) d [ i ] [ j ] = a [ i ] [ j ] + d [ i - 1 ] [ j ] ; else d [ i ] [ j ] = a [ i ] [ j ] + d [ i - 1 ] [ j - 1 ] ; } } for ( j = 1 ; j <= n ; j ++ ) { if ( d [ n ] [ j ] > max ) max = d [ n ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 6365}
{"input": "main ( ) { int i , j , a , n , arr [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < ( n * ( n + 1 ) ) / 2 ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { a = ( ( ( n - i ) * ( n - i - 1 ) ) / 2 ) ; for ( j = 0 ; j < n - i ; j ++ ) arr [ a + j ] += ( arr [ a + n - i + j ] > arr [ a + n - i + 1 + j ] ? arr [ a + n - i + j ] : arr [ a + n - i + 1 + j ] ) ; } printf ( \"%d\" , arr [ 0 ] ) ; }", "label": 3, "id": 12916}
{"input": "int A [ 100 ] [ 100 ] ; int memo [ 100 ] [ 100 ] ; int sum ( int n , int i , int j ) { int s ; if ( i == n - 1 ) s = A [ i ] [ j ] ; else if ( memo [ i ] [ j ] >= 0 ) s = memo [ i ] [ j ] ; else { if ( sum ( n , i + 1 , j ) >= sum ( n , i + 1 , j + 1 ) ) s = sum ( n , i + 1 , j ) + A [ i ] [ j ] ; else s = sum ( n , i + 1 , j + 1 ) + A [ i ] [ j ] ; memo [ i ] [ j ] = s ; } return s ; } int main ( ) { int t , k , x , y , n ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( x = 0 ; x < n ; x ++ ) { for ( y = 0 ; y <= x ; y ++ ) { if ( x >= y ) scanf ( \"%d\" , & A [ x ] [ y ] ) ; } } int c , d ; for ( c = 0 ; c < n ; c ++ ) { for ( d = 0 ; d <= c ; d ++ ) { memo [ c ] [ d ] = - 1 ; } } printf ( \"%d\n\" , sum ( n , 0 , 0 ) ) ; } return 0 ; }", "label": 0, "id": 26891}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int get ( int arr [ ] [ 100 ] , int i , int j , int n ) { if ( j == n || i == n ) return arr [ i ] [ j ] ; return arr [ i ] [ j ] + max ( get ( arr , i + 1 , j , n ) , get ( arr , i + 1 , j + 1 , n ) ) ; } int main ( ) { int t , n , i , j ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } int x = get ( arr , 0 , 0 , n - 1 ) ; printf ( \"%d\n\" , x ) ; } return 0 ; }", "label": 2, "id": 16286}
{"input": "int main ( ) { int b [ 100 ] [ 100 ] , a [ 10000 ] , i , j , n , k = 1 , x [ 1000 ] , t , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { x [ i ] = 0 ; } for ( m = 0 ; m < t ; m ++ ) { scanf ( \"\n%d\" , & n ) ; for ( i = 0 ; i < 10000 ; i ++ ) { a [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"\n%d\" , & b [ i ] [ j ] ) ; } } a [ 1 ] = b [ 0 ] [ 0 ] ; a [ 2 ] = b [ 1 ] [ 0 ] + b [ 0 ] [ 0 ] ; a [ 3 ] = b [ 1 ] [ 1 ] + b [ 0 ] [ 0 ] ; a [ 4 ] = a [ 2 ] + b [ 2 ] [ 0 ] ; a [ 5 ] = a [ 2 ] + b [ 2 ] [ 1 ] ; a [ 6 ] = a [ 3 ] + b [ 2 ] [ 1 ] ; a [ 7 ] = a [ 3 ] + b [ 2 ] [ 2 ] ; k = 8 ; for ( i = 3 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { a [ k ] = b [ i ] [ j ] + a [ ( i - 1 ) * ( i - 1 ) - i + j + 3 ] ; ++ k ; a [ k ] = b [ i ] [ j + 1 ] + a [ ( i - 1 ) * ( i - 1 ) - i + j + 3 ] ; ++ k ; } } for ( i = 1 ; i < ( ( n * n ) ) ; i ++ ) { if ( x [ m ] < a [ i ] ) { x [ m ] = a [ i ] ; } } } i = 0 ; while ( i < t ) { printf ( \"\n%d\" , x [ i ] ) ; i ++ ; } return 0 ; }", "label": 1, "id": 9967}
{"input": "int main ( ) { int t , g , rem , nr , dr ; scanf ( \"%d\" , & t ) ; for ( g = 1 ; g <= t ; g ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; nr = a ; dr = b ; rem = nr % dr ; while ( rem != 0 ) { nr = dr ; dr = rem ; rem = nr % dr ; } printf ( \"%d %d\" , dr , a * b / dr ) ; } return 0 ; }", "label": 1, "id": 17811}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"Enter two numbers\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } }", "label": 1, "id": 8447}
{"input": "int main ( void ) { int T , A , B , gcd , lcm , c ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%d%d\" , & A , & B ) ; c = A * B ; while ( A != B ) { if ( A > B ) A = A - B ; else B = B - A ; } gcd = B ; lcm = c / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; T -- ; } return 0 ; }", "label": 1, "id": 14652}
{"input": "int gcd ( int , int ) ; main ( ) { int t , a , b , g ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"GCD : %d\\tLCM : %d\n\" , g , ( a * b ) / g ) ; t -- ; } return 0 ; } int gcd ( int x , int y ) { if ( x == 1 || y == 1 ) return 1 ; else if ( x == 0 || y == 0 ) return ( x == 0 ? y : x ) ; else return gcd ( y , x % y ) ; }", "label": 1, "id": 3277}
{"input": "int main ( ) { int cases ; int tri [ 100 ] [ 100 ] ; scanf ( \"%d\" , & cases ) ; int count , h , i , j ; for ( count = 0 ; count < cases ; count ++ ) { scanf ( \"%d\" , & h ) ; for ( i = 0 ; i < h ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & tri [ i ] [ j ] ) ; } } for ( i = h - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) tri [ i ] [ j ] += ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) ? tri [ i + 1 ] [ j ] : tri [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , tri [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 18644}
{"input": "int main ( void ) { int T , i ; long int A [ 1000 ] , B [ 1000 ] , C [ 1000 ] , D [ 1000 ] , gcd , lcm ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld %ld\" , & A [ i ] , & B [ i ] ) ; C [ i ] = A [ i ] ; D [ i ] = B [ i ] ; } for ( i = 0 ; i < T ; i ++ ) { while ( A [ i ] != 0 && B [ i ] != 0 ) { if ( A [ i ] > B [ i ] ) A [ i ] = A [ i ] % B [ i ] ; else B [ i ] = B [ i ] % A [ i ] ; } if ( A [ i ] == 0 ) gcd = B [ i ] ; else gcd = A [ i ] ; lcm = ( C [ i ] * D [ i ] ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 16323}
{"input": "int main ( ) { int t , line , i , j , k , max , l ; scanf ( \"%d\" , & t ) ; int out [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & line ) ; int in [ line ] [ line ] , det [ line ] [ line ] ; max = 0 ; for ( j = 0 ; j < line ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & in [ j ] [ k ] ) ; if ( j == 0 ) { det [ j ] [ k ] = in [ j ] [ k ] ; } else { if ( k - 1 == - 1 ) { det [ j ] [ k ] = det [ j - 1 ] [ k ] + in [ j ] [ k ] ; } else if ( k != j ) { if ( det [ j - 1 ] [ k - 1 ] + in [ j ] [ k ] < det [ j - 1 ] [ k ] + in [ j ] [ k ] ) { det [ j ] [ k ] = det [ j - 1 ] [ k ] + in [ j ] [ k ] ; } else { det [ j ] [ k ] = det [ j - 1 ] [ k - 1 ] + in [ j ] [ k ] ; } } else { det [ j ] [ k ] = det [ j - 1 ] [ k - 1 ] + in [ j ] [ k ] ; } } } } for ( j = 0 ; j < line ; j ++ ) { if ( max < det [ line - 1 ] [ j ] ) { max = det [ line - 1 ] [ j ] ; } } out [ i ] = max ; } for ( i = 0 ; i < t ; i ++ ) { if ( i != t - 1 ) { printf ( \"%d\n\" , out [ i ] ) ; } else { printf ( \"%d\" , out [ i ] ) ; } } }", "label": 0, "id": 9225}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 1 ; j < i ; j ++ ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 23236}
{"input": "int main ( ) { int gcd , lcm , t , a , b ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d%d\" , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d \\t %d \n\" , gcd , lcm ) ; t -- ; } return 0 ; } int hcf ( int p , int q ) { if ( p % q == 0 || p == 0 ) return q ; else if ( q == 0 ) return p ; else return hcf ( q , p % q ) ; }", "label": 1, "id": 7791}
{"input": "int main ( ) { int a [ 150 ] [ 150 ] , i , j , sum , n , t ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum = a [ 0 ] [ 0 ] ; j = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { sum = sum + a [ i ] [ j ] ; } else { sum = sum + a [ i ] [ j + 1 ] ; j ++ ; } } printf ( \"\n%d\" , sum ) ; t -- ; } return 0 ; }", "label": 1, "id": 16077}
{"input": "int main ( ) { int t , i ; long a , b , s , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; s = a < b ? a : b ; for ( i = 1 ; i <= s ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 23868}
{"input": "int row , a [ 100 ] [ 100 ] ; int l ( int n , int m ) { int tlsum , trsum ; row == n ? 0 : ( ( tlsum = l ( n + 1 , m ) ) > ( trsum = l ( n + 1 , m + 1 ) ) ? tlsum : trsum ) ; } int main ( ) { int t , i , m , n , sum ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & row ) ; for ( n = 0 ; n < row ; n ++ ) { for ( m = 0 ; m <= n ; m ++ ) { scanf ( \"%d\" , ( * ( a + n ) + m ) ) ; } } sum = l ( 0 , 0 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 13563}
{"input": "int main ( void ) { int n , i ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { long a , b ; scanf ( \"%li %li\" , & a , & b ) ; long x = a , y = b ; while ( b != 0 ) { long temp = b ; b = a % b ; a = temp ; } long lcm = ( x * y ) / a ; printf ( \"%li %li\n\" , a , lcm ) ; } }", "label": 0, "id": 23627}
{"input": "int main ( ) { int * * a ; int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; for ( i = 0 ; i < n ; i ++ ) free ( a [ i ] ) ; free ( a ) ; } return 0 ; }", "label": 0, "id": 8370}
{"input": "int fgcd ( int , int ) ; int main ( ) { int i , lcm , gcd , t ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { int num1 , num2 ; scanf ( \"%d %d\" , & num1 , & num2 ) ; gcd = fgcd ( ( num1 > num2 ? num1 : num2 ) , ( num2 < num1 ? num2 : num1 ) ) ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; } int fgcd ( a , b ) { if ( a % b == 0 ) return b ; else return ( fgcd ( b , a % b ) ) ; }", "label": 1, "id": 3121}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long unsigned n ; scanf ( \"%lu\" , & n ) ; int a [ n ] ; for ( long unsigned i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int l = a [ 0 ] ; for ( long unsigned i = 1 ; i < n ; i ++ ) if ( a [ i ] < l ) l = a [ i ] ; printf ( \"%lu\n\" , ( long unsigned ) l * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 16577}
{"input": "int main ( ) { int T , A , B ; int i = 0 , t = 0 , product = 0 , GCD = 0 , LCM = 0 ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; product = A * B ; if ( B > A ) { A = A + B ; B = A - B ; A = A - B ; } while ( ( A % B ) != 0 ) { t = A % B ; A = B ; B = t ; } GCD = B ; LCM = product / GCD ; printf ( \"%d %d \n\" , GCD , LCM ) ; } return 0 ; }", "label": 1, "id": 10567}
{"input": "int main ( ) { int t , * a , * * * b , i , j , k , z = 0 , s = 0 , p ; scanf ( \"%d\" , & t ) ; a = malloc ( sizeof ( int ) * t ) ; b = malloc ( sizeof ( int ) * t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; b [ i ] = malloc ( sizeof ( int ) * a [ i ] ) ; for ( j = 0 ; j < a [ i ] ; j ++ ) { b [ i ] [ j ] = malloc ( sizeof ( int ) * ( j + 1 ) ) ; for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & b [ i ] [ j ] [ k ] ) ; } } for ( i = 0 ; i < t ; i ++ ) { for ( j = a [ i ] - 2 ; j >= 0 ; j -- ) for ( k = 0 ; k <= j ; k ++ ) { int temp ; temp = b [ i ] [ j ] [ k ] ; z = b [ i ] [ j + 1 ] [ k ] > b [ i ] [ j + 1 ] [ k + 1 ] ? b [ i ] [ j + 1 ] [ k ] : b [ i ] [ j + 1 ] [ k + 1 ] ; b [ i ] [ j ] [ k ] = z + temp ; } printf ( \"%d\n\" , b [ i ] [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 4067}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { int N ; scanf ( \"%d\" , & N ) ; int arr [ N ] ; int i ; long long int min = 100000 ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( \"%lld\n\" , min * ( N - 1 ) ) ; T -- ; } return 0 ; }", "label": 0, "id": 19747}
{"input": "long long gcd ( long long a , long long b ) { long long temp , r , q ; if ( a > b ) { temp = a ; a = b ; b = temp ; } r = b % a ; if ( r == 0 ) { return a ; } else { return gcd ( r , a ) ; } } int main ( ) { long long a , b , c , d , t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; c = gcd ( a , b ) ; d = ( a * b ) / c ; printf ( \" %lld %lld\n\" , c , d ) ; } return ( 0 ) ; }", "label": 1, "id": 4258}
{"input": "int main ( ) { int t = 0 , n = 0 , i = 0 , j = 0 , smallest , k ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( j == 0 ) smallest = a [ j ] ; else if ( a [ j ] < smallest ) smallest = a [ j ] ; } k = smallest * ( n - 1 ) ; printf ( \"%d\" , k ) ; } return 0 ; }", "label": 1, "id": 1422}
{"input": "int main ( ) { int t , a , b , G , L , min ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a < b ) min = a ; else min = b ; int i ; for ( i = 1 ; i <= min ; i ++ ) { if ( a % i == 0 && b % i == 0 ) G = i ; } L = ( a * b ) / G ; printf ( \"%d%d\n\" , G , L ) ; t -- ; } return 0 ; }", "label": 1, "id": 452}
{"input": "int main ( ) { int a , b , i , hcf , lcm , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; } if ( i % a == 0 && i % b == 0 ) { lcm = i ; break ; } } printf ( \"%d %d\n\" , hcf , lcm ) ; } }", "label": 2, "id": 4737}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; int a , small , n , z ; while ( t -- ) { small = 100000000 ; scanf ( \"%d\" , & n ) ; z = n ; while ( n -- ) { scanf ( \"%d\" , & a ) ; if ( a < small ) small = a ; } small = small * ( z - 1 ) ; printf ( \"%d\n\" , small ) ; } return 0 ; }", "label": 0, "id": 210}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , i ; long long min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min >= a [ i ] ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 17578}
{"input": "int main ( ) { int i , j , n , t , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = i ; j > 1 ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - 1 ] ? a [ i ] [ j ] : a [ i ] [ j - 1 ] ; a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + max ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 23125}
{"input": "main ( ) { int i , j , m , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; m = 1 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } m ++ ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < m - 1 ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; } m -- ; } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15361}
{"input": "int main ( ) { int num1 , num2 , cases , n1 , n2 ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; n1 = num1 ; n2 = num2 ; while ( n1 != n2 ) { if ( n1 > n2 ) { n1 -= n2 ; } else { n2 -= n1 ; } } printf ( \"%d \" , n1 ) ; printf ( \"%d\n\" , ( num1 * num2 ) / n1 ) ; } }", "label": 1, "id": 9437}
{"input": "int main ( ) { int cases , rows , factor , factor2 ; int row [ 2 ] [ 100 ] ; register int i , j , k ; for ( j = 0 ; j < 100 ; j ++ ) row [ 0 ] [ j ] = row [ 1 ] [ j ] = 0 ; scanf ( \"%d\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 0 ; j < rows ; j ++ ) { factor = j % 2 ; factor2 = ( j + 1 ) % 2 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & row [ factor ] [ k ] ) ; if ( k == 0 ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else if ( k < ( j - 1 ) ) row [ factor ] [ k ] += row [ factor2 ] [ k - 1 ] ; else { if ( row [ factor2 ] [ k ] > row [ factor2 ] [ k - 1 ] ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else row [ factor ] [ k ] += row [ factor2 ] [ k - 1 ] ; } } } factor = ( rows + 1 ) % 2 ; factor2 = 0 ; for ( k = 0 ; k < rows ; k ++ ) if ( row [ factor ] [ k ] > factor2 ) factor2 = row [ factor ] [ k ] ; printf ( \"\n%d\" , factor2 ) ; for ( j = 0 ; j < rows ; j ++ ) row [ 1 ] [ j ] = row [ 0 ] [ j ] = 0 ; } return 0 ; }", "label": 1, "id": 25709}
{"input": "int main ( ) { int t , a , b , x , y , p , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; x = a , y = b ; while ( b != 0 ) { if ( a > b ) { p = a % b ; a = b ; b = p ; } } l = ( x * y ) / a ; printf ( \"%d %d\n\" , a , l ) ; } }", "label": 2, "id": 23126}
{"input": "int maxCal ( int * , int , int , int ) ; int main ( ) { int a [ 100 ] ; int n , i = 0 , row , j = 0 , tot = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & row ) ; tot = row * ( row + 1 ) / 2 ; for ( j = 0 ; j < tot ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } printf ( \"%d\" , maxCal ( a , row , 0 , 1 ) ) ; } return 0 ; } int maxCal ( int * a , int n , int in , int nl ) { int sum = 0 , sum1 = 0 ; if ( nl == n ) return a [ in ] ; sum1 = a [ in ] + maxCal ( a , n , in + nl , nl + 1 ) ; sum = a [ in ] + maxCal ( a , n , in + nl + 1 , nl + 1 ) ; if ( sum > sum1 ) return sum ; return sum1 ; }", "label": 3, "id": 13626}
{"input": "int main ( ) { int i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8606}
{"input": "int main ( ) { long int n , a [ 100000 ] , i , j , T , temp ; scanf ( \"%ld\" , & T ) ; for ( ; T > 0 ; T -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } if ( n == 1 ) printf ( \"%ld\n\" , a [ 0 ] ) ; else printf ( \"%ld\n\" , a [ n - 2 ] ) ; } return 0 ; }", "label": 2, "id": 7398}
{"input": "int main ( ) { int t , i ; long int l , gcd , lcm , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { gcd = 1 ; scanf ( \"%ld%ld\" , & a , & b ) ; l = a < b ? a : b ; for ( i = 1 ; i <= l ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return ( 0 ) ; }", "label": 2, "id": 6138}
{"input": "int main ( ) { int i , j , n , t , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = i ; j > 1 ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - 1 ] ? a [ i ] [ j ] : a [ i ] [ j - 1 ] ; a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + max ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 12735}
{"input": "void main ( ) { int arr [ 100 ] [ 100 ] , i , k , j , t , n ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 23100}
{"input": "int scan_f ( int * location ) { register int digit ; register int result = 0 ; while ( ( digit = getchar ( ) ) >= '0' ) { result = ( result << 3 ) + ( result << 1 ) + digit - '0' ; } * location = result ; return 0 ; } int row , a [ 100 ] [ 100 ] ; int l ( int n , int m ) { int tlsum , trsum ; row == n ? 0 : ( ( tlsum = l ( n + 1 , m ) ) > ( trsum = l ( n + 1 , m + 1 ) ) ? tlsum : trsum ) ; } int main ( ) { int t , i , m , n , sum ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scan_f ( & row ) ; for ( n = 0 ; n < row ; n ++ ) { for ( m = 0 ; m <= n ; m ++ ) { scan_f ( ( * ( a + n ) + m ) ) ; } } sum = l ( 0 , 0 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 18375}
{"input": "int i , j , n , t [ 100 ] [ 100 ] = { } ; int max ( int x , int y ) { return x > y ? x : y ; } int find ( int i , int j ) { if ( i >= n ) { return 0 ; } else { return max ( find ( i + 1 , j ) , find ( i + 1 , j + 1 ) ) + t [ i ] [ j ] ; } } int main ( ) { int c , k ; scanf ( \"%d\" , & c ) ; for ( k = 0 ; k < c ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & t [ i ] [ j ] ) ; } printf ( \"%d\n\" , find ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 15090}
{"input": "unsigned int gcd ( unsigned long int m , unsigned long int n ) { unsigned int r ; if ( ! m || ! n ) return ( 0 ) ; for ( r = m % n ; r ; m = n , n = r , r = m % n ) ; return ( n ) ; } int main ( ) { long int t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { unsigned long int a , b ; scanf ( \"%lu%lu\" , & a , & b ) ; unsigned int gcd1 = gcd ( a , b ) ; unsigned long int lcm = a * b / gcd1 ; printf ( \"%u %lu\n\" , gcd1 , lcm ) ; } return 0 ; }", "label": 0, "id": 12546}
{"input": "int main ( ) { unsigned short int tests ; unsigned int a , b , looper , max , min ; scanf ( \"%hu\" , & tests ) ; while ( tests -- ) { scanf ( \"%u %u\" , & a , & b ) ; max = ( a > b ? a : b ) ; min = ( a < b ? a : b ) ; for ( looper = min ; looper >= 1 ; -- looper ) { if ( ( ( a % looper ) == 0 ) && ( ( b % looper ) == 0 ) ) { printf ( \"%u\" , looper ) ; break ; } } for ( looper = max ; looper <= a * b ; ++ looper ) { if ( ( ( looper % a ) == 0 ) && ( ( looper % b ) == 0 ) ) { printf ( \" %u\" , looper ) ; break ; } } printf ( \"\n\" ) ; } return 0 ; }", "label": 2, "id": 7386}
{"input": "int main ( void ) { int i , t , n , a [ 50000 ] ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; int m , c = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ 0 ] ) { m = a [ i ] ; a [ i ] = a [ 0 ] ; a [ 0 ] = m ; } } c = a [ 0 ] * ( n - 1 ) ; printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 0, "id": 21594}
{"input": "int main ( ) { int t , n , i , cost = 0 ; long long int a [ 50009 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { cost = cost + a [ i ] ; a [ i + 1 ] = a [ i ] ; } else { cost = cost + a [ i + 1 ] ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 11753}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int g = gcd ( a , b ) ; long int l = ( long int ) ( a * b ) / g ; printf ( \"%d %ld\n\" , g , l ) ; } return 0 ; } int gcd ( int n , int m ) { if ( m > n ) { int t = m ; m = n ; n = t ; } if ( m == 0 ) return n ; else { return gcd ( m , n % m ) ; } }", "label": 1, "id": 18090}
{"input": "int main ( ) { int a [ 3 ] , b [ 3 ] , x [ 3 ] , y [ 3 ] , i ; for ( i = 0 ; i < 3 ; i ++ ) { scanf ( \"%d%d\" , & a [ i ] , & b [ i ] ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < 3 ; i ++ ) { x [ i ] = a [ i ] ; y [ i ] = b [ i ] ; while ( a [ i ] != b [ i ] ) { if ( a [ i ] > b [ i ] ) a [ i ] -= b [ i ] ; else b [ i ] -= a [ i ] ; } printf ( \"%d\" , a [ i ] ) ; printf ( \" \" ) ; printf ( \"%d\" , x [ i ] * y [ i ] / a [ i ] ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 8404}
{"input": "int main ( ) { unsigned int T , p ; T = p = 0 ; scanf ( \"%u\" , & T ) ; for ( p = 0 ; p < T ; p ++ ) { unsigned long int N , i , j , op ; N = i = j = op = 0 ; scanf ( \"%lu\" , & N ) ; unsigned long int A [ N ] ; memset ( A , 0 , sizeof ( A ) ) ; i = 0 ; op = N ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%lu\" , & A [ i ] ) ; } i = 0 ; for ( i = 0 ; i < N ; i ++ ) { for ( j = i + 1 ; j < N && ( A [ j ] >= A [ j - 1 ] ) ; j ++ , op ++ ) { } } printf ( \"%lu\n\" , op ) ; } return 0 ; }", "label": 0, "id": 24511}
{"input": "int gcd ( int a , int b ) { int t ; int gcd ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; return gcd ; } int main ( ) { int t , i ; for ( i = 0 ; i < t ; i ++ ) { int n1 , n2 , k ; scanf ( \"%d%d\" , & n1 , & n2 ) ; k = gcd ( n1 , n2 ) ; printf ( \"%d %d\n\" , k , ( n1 * n2 ) / k ) ; } return 0 ; }", "label": 1, "id": 14510}
{"input": "int main ( ) { long int n1 , n2 , x , y , lcm , t , i , gcd ; scanf ( \"%li\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%li%li\" , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n2 > n1 ) n2 = n2 - n1 ; else n1 = n1 - n2 ; } gcd = n2 ; lcm = ( x * y ) / gcd ; printf ( \"%li\\t%li\n\" , gcd , lcm ) ; } }", "label": 0, "id": 11423}
{"input": "int main ( ) { int n ; long int sm = 1000000 , big , a [ 50000 ] , pos , i , co , l ; scanf ( \"%d\" , & n ) ; while ( n -- ) { co = 0 ; scanf ( \"%ld\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < l ; i ++ ) { if ( sm > a [ i ] ) sm = a [ i ] ; pos = i ; } while ( l != 1 ) { if ( pos == 0 ) { big = 1 ; co += a [ 1 ] ; } else if ( pos == l - 1 ) { big = pos - 1 ; co += a [ pos - 1 ] ; } else if ( a [ pos - 1 ] > a [ pos + 1 ] ) { big = pos - 1 ; co += a [ pos - 1 ] ; } else { big = pos + 1 ; co += a [ pos + 1 ] ; } for ( i = big ; i < n - 1 ; i ++ ) a [ i ] = a [ i + 1 ] ; l -- ; } printf ( \"%ld\n\" , co ) ; } return 0 ; }", "label": 1, "id": 14140}
{"input": "int main ( ) { int t ; long long int i , n , a [ 100000 ] , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long min , i = 0 ; while ( i < n ) scanf ( \"%lld\" , & a [ i ++ ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 10360}
{"input": "main ( ) { int test , i , row , j , k , sum = 0 ; long long max ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { scanf ( \"%d\" , & row ) ; int a [ row ] [ row ] ; for ( j = 0 ; j < row ; j ++ ) for ( k = 0 ; k < row ; k ++ ) a [ j ] [ k ] = 0 ; for ( j = 0 ; j < row ; j ++ ) for ( k = 0 ; k < row ; k ++ ) { if ( k > j ) break ; scanf ( \"%d\" , & a [ j ] [ k ] ) ; } long long b [ row * row - row + 2 ] [ 5 ] ; for ( k = 0 ; k < row * row - row + 2 ; k ++ ) b [ k ] [ 4 ] = - 1 ; b [ 1 ] [ 0 ] = a [ 0 ] [ 0 ] ; b [ 1 ] [ 1 ] = 0 ; b [ 1 ] [ 2 ] = 0 ; b [ 1 ] [ 3 ] = a [ 0 ] [ 0 ] ; b [ 1 ] [ 4 ] = 1 ; max = b [ 1 ] [ 3 ] ; for ( j = 1 ; j < row * row - row + 2 ; j ++ ) { if ( b [ j ] [ 4 ] > 0 ) { if ( b [ j ] [ 1 ] < row - 1 ) { b [ j * 2 ] [ 0 ] = a [ b [ j ] [ 1 ] + 1 ] [ b [ j ] [ 2 ] ] ; b [ j * 2 ] [ 1 ] = b [ j ] [ 1 ] + 1 ; b [ j * 2 ] [ 2 ] = b [ j ] [ 2 ] ; b [ j * 2 ] [ 3 ] = b [ j * 2 ] [ 0 ] + b [ j ] [ 3 ] ; if ( b [ j * 2 ] [ 3 ] > max ) max = b [ j * 2 ] [ 3 ] ; b [ j * 2 ] [ 4 ] = 1 ; if ( b [ j ] [ 2 ] < row - 1 ) { b [ j * 2 + 1 ] [ 0 ] = a [ b [ j ] [ 1 ] + 1 ] [ b [ j ] [ 2 ] + 1 ] ; b [ j * 2 + 1 ] [ 1 ] = b [ j ] [ 1 ] + 1 ; b [ j * 2 + 1 ] [ 2 ] = b [ j ] [ 2 ] + 1 ; b [ j * 2 + 1 ] [ 3 ] = b [ j * 2 + 1 ] [ 0 ] + b [ j ] [ 3 ] ; if ( b [ j * 2 + 1 ] [ 3 ] > max ) max = b [ j * 2 + 1 ] [ 3 ] ; b [ j * 2 + 1 ] [ 4 ] = 1 ; } } } } printf ( \"%lld\n\" , max ) ; } return 0 ; }", "label": 3, "id": 10342}
{"input": "int GCD ( int a , int b ) { if ( a == 0 || b == 0 ) { return 0 ; } if ( a == b ) { return a ; } if ( a > b ) { return GCD ( a - b , b ) ; } return GCD ( a , b - a ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int gcd = GCD ( a , b ) ; int lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 20152}
{"input": "int main ( ) { int lines , num [ 2 ] , early , i , max , j ; int T , count , sum , waste ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & lines ) ; for ( i = 0 , max = 0 , early = 0 ; i < lines ; i ++ ) { num [ 0 ] = 0 ; num [ 1 ] = 0 ; for ( j = 0 , count = 0 , sum = 0 ; j <= i ; j ++ ) { if ( count < 2 ) { scanf ( \"%d\" , & num [ j ] ) ; count ++ ; } else scanf ( \"%d\" , & waste ) ; } if ( ! early ) sum += early ; else sum += early + num [ 0 ] + num [ 1 ] ; early = num [ 0 ] ; if ( sum > max ) max = sum ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 17834}
{"input": "int main ( ) { int a , b , c , d , t , gcd , r , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { c = a ; d = b ; } else { c = b ; d = a ; } while ( 1 ) { if ( c % d == 0 ) { gcd = d ; break ; } else { r = c ; c = d ; d = r % c ; } } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 7266}
{"input": "int main ( ) { long long int t , lcm = 0 , gcd = 0 , a , b ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; long long int i ; if ( a > b ) i = b ; else i = a ; long long int d = i ; for ( ; i > 0 ; i = i / d ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 22197}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int mat [ 128 ] [ 128 ] ; int i , j , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { mat [ i ] [ j ] += max ( mat [ i + 1 ] [ j ] , mat [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , mat [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 1764}
{"input": "int a [ 50000 ] ; int main ( ) { int t , i , n , j , s , b ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; s = 0 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } b = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( b < a [ j ] ) { s = s + b ; } else { b = a [ j ] ; s = s + b ; } } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 14426}
{"input": "int main ( ) { long int a , b , x , c , d , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { c = a ; d = b ; x = d ; } else { c = b ; d = a ; x = d ; } while ( x > 0 ) { d = x ; x = c % d ; c = d ; } printf ( \"%ld %ld \n\" , d , a * b / d ) ; } return 0 ; }", "label": 0, "id": 24537}
{"input": "main ( ) { int i , j , n , a , b , k , sum ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { sum = 0 ; scanf ( \"%d\" , & a ) ; for ( j = 0 ; j < a ; j ++ ) { for ( k = j ; k < a ; k ++ ) { scanf ( \"%d\" , & b ) ; sum = sum + b ; } } printf ( \"%d \n\" , sum ) ; } }", "label": 1, "id": 25738}
{"input": "int main ( ) { long long int a , b , t , g , l , k , r ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { k = a ; a = b ; b = k ; } g = a ; k = b ; while ( b % a != 0 ) { r = b % a ; b = a ; a = r ; } g /= a ; l = g * k ; printf ( \"%lld %lld\n\" , a , l ) ; } return 0 ; }", "label": 0, "id": 16460}
{"input": "int main ( ) { long int i , j , k , l , n , sum , t ; int arr [ 100000 ] , arr1 [ 100000 ] ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & k ) ; sum = 0 ; for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%ld\" , & arr [ j ] ) ; } while ( k > 1 ) { if ( arr [ 0 ] > arr [ 1 ] ) { arr1 [ 0 ] = arr [ 1 ] ; sum = sum + arr [ 1 ] ; } else { arr1 [ 0 ] = arr [ 0 ] ; sum = sum + arr [ 0 ] ; } for ( l = 1 ; l < k - 1 ; l ++ ) { arr1 [ l ] = arr [ l + 1 ] ; } for ( t = 0 ; t < k - 1 ; t ++ ) { arr [ t ] = arr1 [ t ] ; } k = k - 1 ; } printf ( \"%ld\n\" , sum ) ; } }", "label": 2, "id": 13686}
{"input": "int k , a [ 101 ] [ 101 ] ; int fun ( int i , int j ) { int m , c , b ; if ( k == i ) return ( a [ i ] [ j ] ) ; m = a [ i ] [ j ] + ( ( c = fun ( i + 1 , j ) ) > ( b = fun ( i + 1 , j + 1 ) ) ? c : b ) ; return m ; } int main ( ) { int n , i , j ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { n -- ; scanf ( \"%d\" , & k ) ; if ( k == 0 ) return 0 ; for ( i = 1 ; i <= k ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; ; } } ; printf ( \"%d\n\" , fun ( 1 , 1 ) ) ; } return 0 ; }", "label": 2, "id": 24749}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long long int n , j , min ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lld\" , & a [ j ] ) ; min = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) if ( min > a [ j ] ) min = a [ j ] ; printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 497}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } void disp_array ( int * A , int len ) { int i = 0 ; while ( i < len ) { printf ( \"%d\\t\" , A [ i ] ) ; i ++ ; } printf ( \"\n\" ) ; return ; } static char _rbuf [ 8192 * 8 ] ; static char * _rend = 0 ; static char * _rpos = 0 ; static int _getchar ( ) { int n = read ( 0 , _rbuf , sizeof _rbuf ) ; if ( n <= 0 ) { printf ( \"EOF(%d)\n\" , n ) ; exit ( 1 ) ; } _rend = _rbuf + n ; _rpos = _rbuf + 1 ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( c = mygetchar ( ) ) < '0' ) { } int n = c - '0' ; while ( ( c = mygetchar ( ) ) >= '0' ) { n = n * 10 + ( c - '0' ) ; } return n ; } static int put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - 1 ; while ( 1 ) { buf [ bn -- ] = '0' + ( n ) ; n = n / 10 ; if ( n == 0 ) break ; } while ( bn < BSIZE - 1 ) putchar ( buf [ ++ bn ] ) ; putchar ( '\n' ) ; } void sumTrain ( int rows ) { int a [ rows ] ; int b [ rows ] ; int * curr ; int * old ; old = a ; curr = b ; a [ 0 ] = 0 ; b [ 0 ] = 0 ; int i = 0 ; int n , j ; while ( i < rows ) { j = 1 ; n = get_i ( ) ; curr [ 0 ] = old [ 0 ] + n ; if ( i ) { while ( j < i ) { n = get_i ( ) ; curr [ j ] = n + max ( old [ j ] , old [ j - 1 ] ) ; j ++ ; } n = get_i ( ) ; curr [ j ] = old [ j - 1 ] + n ; } if ( old == a ) { curr = a ; old = b ; } else { old = a ; curr = b ; } i ++ ; } int mx = 0 ; for ( i = 0 ; i < rows ; i ++ ) { if ( old [ i ] > mx ) { mx = old [ i ] ; } } put_i ( mx ) ; } int main ( ) { int n , rows , c ; n = get_i ( ) ; while ( n > 0 ) { rows = get_i ( ) ; sumTrain ( rows ) ; n -- ; rows = 0 ; } return 0 ; }", "label": 1, "id": 1206}
{"input": "void recursion ( int , int , int ) ; int arr [ 100 ] [ 100 ] ; int sum , n ; int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; recursion ( 0 , 0 , arr [ 0 ] [ 0 ] ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; } void recursion ( int pos1 , int pos2 , int s ) { int temp ; if ( pos1 == n - 1 ) { if ( s > sum ) { sum = s ; } return ; } pos1 ++ ; temp = s + arr [ pos1 ] [ pos2 ] ; recursion ( pos1 , pos2 , temp ) ; pos2 ++ ; temp = s + arr [ pos1 ] [ pos2 ] ; recursion ( pos1 , pos2 , temp ) ; }", "label": 2, "id": 17270}
{"input": "int main ( ) { int N , T ; long long int A , B ; long long int count , tempC ; int flag ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; count = N ; tempC = 1 ; flag = 0 ; if ( N > 1 ) { scanf ( \"%lld %lld\" , & A , & B ) ; N -- ; N -- ; if ( B > A ) { tempC ++ ; } while ( N -- ) { A = B ; scanf ( \"%lld\" , & B ) ; if ( B > A ) { tempC ++ ; flag = 0 ; } else { count = count + ( tempC * ( tempC - 1 ) / 2 ) ; tempC = 1 ; flag = 1 ; } } if ( flag == 0 ) { count = count + ( tempC * ( tempC - 1 ) / 2 ) ; } } else { scanf ( \"%lld\" , & A ) ; } printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 0, "id": 16864}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int a , b ; scanf ( \"%lld%lld\" , & a , & b ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return 0 ; }", "label": 0, "id": 8585}
{"input": "long gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } long lcm ( int a , int b ) { return ( a * b ) / ( gcd ( a , b ) ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long a , b ; scanf ( \"%ld%ld\" , & a , & b ) ; printf ( \"%ld %ld\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 5617}
{"input": "int main ( ) { int a , b , t , x , y , i , temp ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } printf ( \"%d %d\n\" , a , ( ( x * y ) / a ) ) ; } return 0 ; }", "label": 1, "id": 10143}
{"input": "int main ( ) { int n , i , r , sum , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { sum = 0 ; scanf ( \"%d\" , & r ) ; int Ar [ r ] ; for ( j = 0 ; j < r ; j ++ ) { scanf ( \"%d\" , & Ar [ j ] ) ; } if ( r == 1 ) { printf ( \"%d\n\" , Ar [ 0 ] ) ; } else { while ( r > 1 ) { if ( Ar [ 0 ] > Ar [ 1 ] ) { sum += Ar [ 1 ] ; for ( j = 0 ; j < r ; j ++ ) { Ar [ j ] = Ar [ j + 1 ] ; } r -- ; } else { sum += Ar [ 0 ] ; for ( j = 1 ; j < r ; j ++ ) { Ar [ j ] = Ar [ j + 1 ] ; } r -- ; } } printf ( \"%d\n\" , sum ) ; } } return 0 ; }", "label": 2, "id": 1351}
{"input": "int sub_count ( int total ) { int ans = 0 , total_ans = 0 , l , i ; for ( l = 2 ; l < total + 1 ; l ++ ) { for ( i = 0 ; i < total ; i ++ ) { if ( i + l < total + 1 ) ans ++ ; } } return ans ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int arr [ 1000 ] , size , x , i ; scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & x ) ; arr [ i ] = x ; } i = 0 ; int j , cnt = 0 , result = 0 , temp_ans ; while ( 1 ) { cnt = 1 ; for ( j = i ; j < size ; j ++ ) { if ( arr [ j ] < arr [ j + 1 ] ) cnt ++ ; else break ; } temp_ans = sub_count ( cnt ) ; result = result + temp_ans ; i = j + 1 ; if ( j == size - 1 ) break ; } printf ( \"%d\n\" , result + size ) ; } return 0 ; }", "label": 3, "id": 1543}
{"input": "int gcd ( int a , int b ) ; int lcm ( int a , int b ) ; int main ( ) { int n , i , a , b , c , d ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; c = gcd ( a , b ) ; d = lcm ( a , b ) ; printf ( \"%d %d\n\" , c , d ) ; } return 0 ; } int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } int lcm ( int a , int b ) { int c ; c = ( a * b ) / ( gcd ( a , b ) ) ; return c ; }", "label": 1, "id": 23583}
{"input": "int GCD ( int a , int b ) { if ( b == 0 ) return a ; return GCD ( b , a % b ) ; } int main ( ) { int t ; int x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & x ) ; scanf ( \"%d\" , & y ) ; printf ( \"%d \" , GCD ( x , y ) ) ; printf ( \"%d\" , x * y / GCD ( x , y ) ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 10607}
{"input": "int main ( ) { int testcases , noOfLines , i , j , maxisum ; int data [ 100 ] [ 100 ] ; scanf ( \"%d\" , & testcases ) ; while ( testcases != 0 ) { scanf ( \"%d\" , & noOfLines ) ; for ( i = 0 ; i < noOfLines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & data [ i ] [ j ] ) ; } } for ( i = noOfLines - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { data [ i ] [ j ] = ( ( data [ i ] [ j ] + data [ i + 1 ] [ j ] ) > ( data [ i ] [ j ] + data [ i + 1 ] [ j + 1 ] ) ) ? ( data [ i ] [ j ] + data [ i + 1 ] [ j ] ) : ( data [ i ] [ j ] + data [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\" , data [ 0 ] [ 0 ] ) ; testcases -- ; } return 0 ; }", "label": 1, "id": 6090}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= n - 2 ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 18199}
{"input": "int main ( ) { int z ; scanf ( \"%d\" , & z ) ; while ( z -- ) { int i , j , n , sum ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; int z = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 6013}
{"input": "int gcd ( int a , int b ) { while ( b > 0 ) { int r = a % b ; a = b ; b = r ; } return a ; } int lcm ( int a , int b , int g ) { return a * b / g ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) { int tmp = a ; a = b ; b = tmp ; } int g = gcd ( a , b ) ; int l = lcm ( a , b , g ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 7998}
{"input": "int GCD ( long , long ) ; void LCM ( long , long ) ; int main ( ) { long T ; scanf ( \"%ld\" , & T ) ; while ( T -- ) { long A , B ; scanf ( \"%ld %ld\" , & A , & B ) ; printf ( \"%ld \" , GCD ( A , B ) ) ; LCM ( A , B ) ; } } int GCD ( long a , long b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return GCD ( a - b , b ) ; return GCD ( a , b - a ) ; } void LCM ( long x , long y ) { long L ; for ( L = x > y ? x : y ; L <= x * y ; L ++ ) if ( L % x == 0 && L % y == 0 ) break ; printf ( \"%ld\n\" , L ) ; }", "label": 2, "id": 19675}
{"input": "int main ( ) { int no , i ; int x , y ; int gcd , lcm ; scanf ( \"%d\" , & no ) ; for ( i = 0 ; i < no ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; lcm = x * y ; gcd = x / x ; printf ( \" %d %d \n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 567}
{"input": "int main ( ) { int t , n , arr [ 50001 ] , i , minvalue ; long long int cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; minvalue = 1000001 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < minvalue ) { minvalue = arr [ i ] ; } } cost = ( n - 1 ) * minvalue ; printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 8122}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , r , i , t , l ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; r = gcd ( a , b ) ; l = ( a * b ) / gcd ( a , b ) ; printf ( \"%d %d\n\" , r , l ) ; } return 0 ; } int gcd ( int x , int y ) { int rem ; rem = x % y ; if ( rem == 0 ) return y ; else return ( gcd ( y , rem ) ) ; }", "label": 1, "id": 17474}
{"input": "int main ( ) { int T , i , N , sum ; scanf ( \"%d\" , & T ) ; while ( T -- ) { sum = 0 ; scanf ( \"%d\" , & N ) ; int arr [ N ] ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } for ( i = 0 ; i < N - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) sum += arr [ i + 1 ] ; else { sum += arr [ i ] ; arr [ i + 1 ] = 0 ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 13109}
{"input": "int main ( ) { int num1 , num2 , min , i , t ; printf ( \"Enter the number of testcases\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"\nEnter the two numbers\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; min = ( num1 > num2 ) ? num2 : num1 ; for ( i = min ; i >= 1 ; i -- ) { if ( num1 % i == 0 && num2 % i == 0 ) { printf ( \"\nHCF %d  And LCM %d\" , i , ( num1 * num2 ) / i ) ; break ; } } } return 0 ; }", "label": 1, "id": 2550}
{"input": "int main ( ) { int loopEnd , trial , size , n ; unsigned long total ; unsigned int current , min ; scanf ( \"%d\" , & loopEnd ) ; for ( trial = 0 ; trial < loopEnd ; trial ++ ) { min = 100000 ; scanf ( \"%d\" , & size ) ; n = size ; scanf ( \"%du\" , & min ) ; while ( n > 1 ) { scanf ( \"%du\" , & current ) ; if ( current < min ) { min = current ; } n -- ; } total = min * ( size - 1 ) ; printf ( \"%lu\n\" , total ) ; } return 0 ; }", "label": 0, "id": 11927}
{"input": "int fmaxsum ( ) ; int mx ( ) ; int main ( ) { int t , r , i , m , j ; int a [ 100 ] [ 100 ] = { 3 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; m = fmaxsum ( a , 0 , 0 , r ) ; printf ( \"%d\n\" , m ) ; } return 0 ; } int fmaxsum ( int a [ 100 ] [ 100 ] , int i , int j , int r ) { if ( i == r ) return mx ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; return a [ i ] [ j ] + mx ( fmaxsum ( a , i + 1 , j , r ) , fmaxsum ( a , i + 1 , j + 1 , r ) ) ; } int mx ( int x , int y ) { if ( x > y ) return x ; return y ; }", "label": 2, "id": 23533}
{"input": "void main ( ) { long int t , i , a , b , numerator , denominator , remainder , lcm , gcd ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } while ( denominator != 0 ) { remainder = denominator ; denominator = numerator % denominator ; numerator = remainder ; } printf ( \"%ld %ld\n\" , numerator , ( ( a * b ) / numerator ) ) ; } }", "label": 0, "id": 24021}
{"input": "int main ( void ) { int t , c , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d%d\" , & a , & b , & c ) ; if ( a == b && a == c && b == c ) { printf ( \"0\" ) ; } if ( a == b && c > a ) printf ( \"%d\" , a ) ; if ( b == c && a > b ) printf ( \"%d\" , b ) ; if ( a == c && b > a ) printf ( \"%d\" , a ) ; if ( a == b && c < a ) printf ( \"%d\" , c ) ; if ( b == c && a < b ) printf ( \"%d\" , a ) ; if ( a == c && b < a ) printf ( \"%d\" , b ) ; if ( a > b && a < c || a > c && a < b ) printf ( \"%d\n\" , a ) ; if ( b > a && b < c || b < a && b > c ) printf ( \"%d\n\" , b ) ; if ( c > a && c < b || c < a && c > b ) printf ( \"%d\" , & c ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 7732}
{"input": "int m [ 100 ] [ 100 ] ; int max ( int x , int y ) { return x > y ? x : y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return m [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { m [ k ] [ l ] += max ( m [ k + 1 ] [ l ] , m [ k + 1 ] [ l + 1 ] ) ; } } return m [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; m [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 6966}
{"input": "main ( t , n , i , j ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26084}
{"input": "int main ( ) { int tc , m , n , i ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { m = INT_MAX ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( m > a [ i ] ) m = a [ i ] ; } printf ( \"%d\" , m * ( n - 1 ) ) ; } }", "label": 1, "id": 9989}
{"input": "int main ( void ) { int grt , n , m , k , i , j ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d\" , & m ) ; int a [ m ] [ m ] ; int b [ m + 1 ] [ 2 * m ] ; for ( i = 0 ; i < m + 1 ; i ++ ) { for ( j = 0 ; j < 2 * m ; j ++ ) { if ( i <= m - 1 && j <= m - 1 ) a [ i ] [ j ] = 0 ; b [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < m - 1 ; i ++ ) { k = 0 ; for ( j = 0 ; j <= i ; j ++ ) { b [ i + 1 ] [ k ++ ] = b [ i ] [ j ] + a [ i + 1 ] [ j ] ; b [ i + 1 ] [ k ++ ] = b [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } grt = b [ m - 1 ] [ 0 ] ; for ( j = 0 ; j < 2 * m ; j ++ ) { if ( grt < b [ m - 1 ] [ j ] ) { grt = b [ m - 1 ] [ j ] ; } } printf ( \"%d\n\" , grt ) ; n -- ; } return 0 ; }", "label": 1, "id": 6779}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , ans , ans1 ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { ans = a % b ; if ( ans == 0 ) { printf ( \"\n%d %d\" , ans , a ) ; } else printf ( \"\n1 %d\" , a * b ) ; } else { ans = b % a ; if ( ans == 0 ) printf ( \"\n%d %d\" , ans , b ) ; else printf ( \"\n1 %d\" , a * b ) ; } } return 0 ; }", "label": 1, "id": 2424}
{"input": "int main ( ) { int tc = 0 ; int nl = 0 ; int i , j , l ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { l = 0 ; scanf ( \"%d\" , & nl ) ; scanf ( \"%d\" , & arr [ 0 ] [ 0 ] ) ; arr [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i < nl ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += max ( arr [ i - 1 ] [ j - 1 ] , arr [ i - 1 ] [ j ] ) ; } arr [ i ] [ j ] = 0 ; } for ( i = 0 ; i < nl ; i ++ ) { if ( arr [ nl - 1 ] [ i ] > l ) { l = arr [ nl - 1 ] [ i ] ; } } printf ( \"%d\n\" , l ) ; } return 0 ; }", "label": 1, "id": 14403}
{"input": "int main ( ) { int T , A , B , i , j , LCM , GCD ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%d%d\" , & A , & B ) ; for ( i = A * B , j = 1 ; i > 1 ; j < A * B , i -- , j ++ ) { if ( i % A == 0 && i % B == 0 ) LCM = i ; if ( A % j == 0 && B % j == 0 ) GCD = j ; } printf ( \"%d %d\n\" , GCD , LCM ) ; T -- ; } return 0 ; }", "label": 2, "id": 21979}
{"input": "typedef long long int ll ; int main ( ) { ll a , b , t , i , min , h , l , j ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; min = a < b ? a : b ; for ( j = min ; j >= 1 ; j -- ) { if ( a % j == 0 && b % j == 0 ) { h = j ; break ; } } l = ( a * b ) / h ; printf ( \"%lld %lld\n\" , h , l ) ; } }", "label": 2, "id": 9971}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; printf ( \"%ld\" , gcd ( a , b ) ) ; printf ( \" \" ) ; printf ( \"%ld\" , lcm ( a , b ) ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 0, "id": 1711}
{"input": "int main ( ) { int test ; int a , b , c , d ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = a ; d = b ; while ( a != b ) { if ( a < b ) b = b - a ; else a = a - b ; } printf ( \"%d %d\n\" , a , ( c * d ) / a ) ; } return 0 ; }", "label": 1, "id": 26254}
{"input": "int main ( ) { int min , a [ 100000 ] , i , j , n , temp , t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 - i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } } min = a [ 0 ] * ( n - 1 ) ; printf ( \"%d\n\" , min ) ; } }", "label": 2, "id": 17450}
{"input": "void main ( ) { int a [ 100 ] , i , t , n , j , k , min , minp , cost [ 10 ] , rem , l ; for ( i = 0 ; i < 100 ; i ++ ) a [ i ] = '\\0' ; for ( i = 0 ; i < 10 ; i ++ ) cost [ i ] = '\\0' ; entert : scanf ( \"%d\" , & t ) ; if ( ! ( t >= 1 && t <= 10 ) ) { goto entert ; } for ( i = 0 ; i < t ; i ++ ) { entern : scanf ( \"%d\" , & n ) ; if ( ! ( n >= 2 && n <= 100 ) ) { goto entern ; } for ( j = 0 ; j < n ; j ++ ) { entera : scanf ( \"%d\" , & a [ j ] ) ; if ( ! ( a [ j ] >= 1 ) ) { goto entera ; } } for ( l = 1 ; l < n ; l ++ ) { min = a [ 0 ] ; minp = 0 ; for ( k = 1 ; k < n - l + 1 ; k ++ ) if ( a [ k ] < min ) { min = a [ k ] ; minp = k ; } if ( a [ minp + 1 ] < a [ minp - 1 ] ) rem = minp - 1 ; else rem = minp + 1 ; cost [ i ] = cost [ i ] + min ; for ( k = rem ; k < n ; k ++ ) a [ k ] = a [ k + 1 ] ; } a [ 0 ] = '\\0' ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d \n\" , cost [ i ] ) ; }", "label": 1, "id": 531}
{"input": "int gcd ( int x , int y ) { while ( ( x > 0 ) && ( y > 0 ) && ( x != y ) ) { if ( x > y ) x = x - y ; else y = y - x ; } return x ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int g = gcd ( a , b ) ; printf ( \"%d %d\n\" , g , a * b / g ) ; } return 0 ; }", "label": 1, "id": 15660}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int maxarr ( int a [ ] , int n ) { int i , max = 0 ; ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) max = a [ i ] ; } return max ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 2 ; i < n ; i ++ ) { j = 0 ; a [ i ] [ j ] += a [ i - 1 ] [ j ] ; for ( j = 1 ; j < i ; j ++ ) { a [ i ] [ j ] += max ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) ; } j = i ; a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } printf ( \"%d\n\" , maxarr ( a [ n - 1 ] , n ) + a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16593}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t , test_cases ; scanf ( \"%d\" , & test_cases ) ; for ( t = 0 ; t < test_cases ; t ++ ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int g = gcd ( a , b ) ; printf ( \"%d %d\n\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 1, "id": 3883}
{"input": "int main ( ) { int a [ 100 ] ; long int i , j , k , min , t , n ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } min = a [ 0 ] ; for ( k = 0 ; k < n ; k ++ ) { if ( a [ k ] < min ) min = a [ k ] ; } } return 0 ; }", "label": 3, "id": 12723}
{"input": "int main ( ) { int t , n , min = 0 , i , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } if ( n == 2 ) sum = min ; else sum = ( n - 1 ) * min ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 1696}
{"input": "int main ( ) { int test , n , * a , k , i , j , count = 0 ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } count = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i ; j < n - 1 ; j ++ ) { if ( a [ j ] <= a [ j + 1 ] ) { count ++ ; } } } printf ( \"%d\n\" , count + n ) ; } return 0 ; }", "label": 2, "id": 14459}
{"input": "int main ( ) { int i , j , a [ 100 ] [ 100 ] , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = i ; j > 0 ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j - 1 ] ) { a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } else { a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j - 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19461}
{"input": "int main ( ) { int i , j , T , n , a , b , cost = 0 ; scanf ( \"%d\n\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d\" , & n ) ; cost = 0 ; scanf ( \"%d\" , & a ) ; for ( j = 2 ; j <= n ; j ++ ) { scanf ( \"%d\" , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } cost += a ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 19349}
{"input": "int main ( ) { int t , i , j , res [ 10 ] , k = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , sum = 0 ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } i = 0 ; j = 0 ; while ( i < n ) { int m = j + 1 ; if ( a [ i ] [ j ] >= a [ i ] [ m ] ) { sum = sum + a [ i ] [ j ] ; i ++ ; } else { sum = sum + a [ i ] [ m ] ; j ++ ; i ++ ; } } res [ k ++ ] = sum ; } for ( i = 0 ; i < k ; i ++ ) { printf ( \"%d\" , res [ i ] ) ; printf ( \"\n\" ) ; } getchar ( ) ; return 0 ; }", "label": 1, "id": 25846}
{"input": "int main ( ) { int arr [ 99 ] [ 99 ] , i , j , max = 0 , sum = 0 , k = 0 , t , n ; scanf ( \"%d\" , & t ) ; if ( k < t ) { k ++ ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , arr [ i ] [ j ] ) ; if ( arr [ i ] [ j ] >= max ) max = arr [ i ] [ j ] ; } sum = sum + max ; max = 0 ; } printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 3, "id": 1956}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , small , big , i , hcf , lcm ; scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) { big = a ; small = b ; } else { small = a ; big = b ; } for ( i = small ; i >= 1 ; i -- ) { if ( ( ( a % i ) == 0 ) && ( ( b % i ) == 0 ) ) { hcf = i ; break ; } } for ( i = big ; i <= ( a * b ) ; i ++ ) { if ( ( ( i % a ) == 0 ) && ( ( i % b ) == 0 ) ) { lcm = i ; break ; } } printf ( \"%ld %ld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 23770}
{"input": "int main ( ) { int a , b , x , y ; scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } printf ( \"%d\" , a ) ; printf ( \" \" ) ; printf ( \"%d\" , x * y / a ) ; return 0 ; }", "label": 1, "id": 13354}
{"input": "int main ( ) { int yo ; int row , col ; int i , j ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & yo ) ; while ( yo -- ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } row -- ; row -- ; for ( ; row != 0 ; row -- ) { for ( col = 0 ; col < row ; col ++ ) { if ( arr [ row ] [ col ] > arr [ row ] [ col + 1 ] ) arr [ row - 1 ] [ col ] += arr [ row ] [ col ] ; else arr [ row - 1 ] [ col ] += arr [ row ] [ col + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 6465}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int n ; for ( int j = 0 ; j < t ; j ++ ) { scanf ( \"%d\" , & n ) ; int ar [ n ] ; int min = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & ar [ i ] ) ; if ( min > ar [ i ] ) { min = ar [ i ] ; } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 24434}
{"input": "int main ( ) { int n , row , i , curr ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int j ; scanf ( \"%d\" , & row ) ; int a [ row ] [ row ] ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < row ; j ++ ) { a [ i ] [ j ] = 0 ; } } j = 1 ; for ( i = 0 ; i < row ; i ++ ) { int k = 0 ; curr = j ; while ( j -- ) { scanf ( \"%d\" , & a [ i ] [ k ] ) ; k ++ ; } j = curr + 1 ; } int col ; int sum = a [ 0 ] [ 0 ] ; j = 0 ; for ( i = 1 ; i < row ; i ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) { col = j ; sum += a [ i ] [ col ] ; } else { col = j + 1 ; sum += a [ i ] [ col ] ; } j = col ; } int sum1 = a [ row - 1 ] [ 0 ] ; j = 0 ; for ( i = row - 2 ; i >= 0 ; i -- ) { if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) { if ( j > i ) { sum1 += a [ i ] [ j - 1 ] ; col = j - 1 ; } else { col = j ; sum1 += a [ i ] [ col ] ; } } else { if ( j + 1 > i ) { sum1 += a [ i ] [ j ] ; col = j ; } else { col = j + 1 ; sum1 += a [ i ] [ col ] ; } } j = col ; } if ( sum > sum1 ) printf ( \"%d\n\" , sum ) ; else printf ( \"%d\n\" , sum1 ) ; } return 0 ; }", "label": 1, "id": 3396}
{"input": "int main ( ) { int a , b , x , y , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( a != 0 && b != 0 ) { if ( a > b ) a = a - b ; else b = b - a ; } if ( a != 0 ) printf ( \"%d %d\n\" , a , ( x * y ) / a ) ; else printf ( \"%d %d\n\" , b , ( x * y ) / b ) ; } return 0 ; }", "label": 1, "id": 13757}
{"input": "int main ( ) { int T , i , N , sum ; scanf ( \"%d\" , & T ) ; while ( T -- ) { sum = 0 ; scanf ( \"%d\" , & N ) ; int arr [ N ] ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } for ( i = 0 ; i < N - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) sum += arr [ i + 1 ] ; else { sum += arr [ i ] ; arr [ i + 1 ] = 0 ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 5798}
{"input": "int maxval ; void setmax ( int ) ; int getmax ( short int , short int ) ; int main ( ) { short int arr [ 100 ] [ 100 ] , element , maxarr [ 100 ] [ 100 ] ; int tc , gmax = 0 , smax = 0 ; unsigned short int i = 0 , j = 0 , no = 0 ; scanf ( \"%d\" , & tc ) ; if ( tc < 100 ) { while ( tc ) { maxval = 0 , gmax = 0 , smax = 0 ; memset ( arr , 0 , sizeof ( arr [ 0 ] [ 0 ] ) + 10000 ) ; memset ( maxarr , 0 , sizeof ( maxarr [ 0 ] [ 0 ] ) + 10000 ) ; scanf ( \"%hd\" , & no ) ; for ( i = 0 ; i < no ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%hd\" , & element ) ; arr [ i ] [ j ] = element ; if ( i == 0 ) { maxarr [ i ] [ j ] = gmax + arr [ i ] [ j ] ; continue ; } else { gmax = getmax ( maxarr [ i - 1 ] [ j - 1 ] , maxarr [ i - 1 ] [ j ] ) ; maxarr [ i ] [ j ] = gmax + arr [ i ] [ j ] ; setmax ( maxarr [ i ] [ j ] ) ; } } } printf ( \"\n%d\n\" , maxval ) ; tc -- ; } } return 0 ; } int getmax ( short int x , short int y ) { int maxi = 0 ; if ( x > y ) maxi = x ; else maxi = y ; return maxi ; } void setmax ( int x ) { if ( x > maxval ) maxval = x ; }", "label": 1, "id": 4903}
{"input": "int a [ 100 ] [ 10000 ] , num [ 100 ] ; int main ( ) { int t , count = 1 , index = 1 , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; while ( n -- ) { for ( i = 1 ; i <= count ; i ++ ) { scanf ( \"%d\" , & num [ i ] ) ; } for ( i = 1 ; i <= count ; i ++ ) { if ( i > 1 ) a [ count ] [ index ++ ] = num [ i ] + a [ count - 1 ] [ i - 1 ] ; a [ count ] [ index ++ ] = num [ i ] + a [ count - 1 ] [ i ] ; } count ++ ; index = 1 ; } int max = a [ count - 1 ] [ 1 ] ; for ( i = 1 ; i <= 2 * count ; i ++ ) { if ( max <= a [ count - 1 ] [ i ] ) max = a [ count - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; count = 1 ; } return 0 ; }", "label": 1, "id": 23107}
{"input": "int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; else if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; else if ( b > a ) return gcd ( a , b - a ) ; } int lcm ( long a , long b ) { int k ; k = gcd ( a , b ) ; return ( a * b ) / k ; } int main ( ) { int a , b , c , d , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"dd\" , & a , & b ) ; c = gcd ( a , b ) ; d = lcm ( a , b ) ; printf ( \"%d %d\" , c , d ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 3, "id": 15580}
{"input": "int main ( ) { int t ; int a , b , c , gcd , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( b ) { c = b ; b = a % c ; a = c ; } gcd = a ; printf ( \"%d %d\n\" , gcd , ( x * y ) / gcd ) ; } return 0 ; }", "label": 1, "id": 15452}
{"input": "int max ( int [ ] , int ) ; int main ( ) { int a [ 100 ] , b [ 200 ] , j , k , sum , t , n , m = 0 , i ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { sum = 0 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ k ] ) ; sum = sum + a [ k ] ; b [ m ++ ] = sum ; } } max ( b , m ) ; } return ( 0 ) ; } int max ( int b [ ] , int m ) { int i , j , k = b [ 0 ] ; for ( i = 0 ; i < m ; i ++ ) { if ( k < b [ i ] ) k = b [ i ] ; } printf ( \"\n%d\" , k ) ; }", "label": 3, "id": 4108}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t ) { int n ; scanf ( \"%d\" , & n ) ; int i , j , a [ 105 ] [ 105 ] ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 11880}
{"input": "int getLargestSum ( ) ; int main ( ) { int i = 0 ; char ctc [ 8 ] = { 0 } ; int testcases = 0 ; int lsum = 0 ; fgets ( ctc , sizeof ( ctc ) , stdin ) ; testcases = atoi ( ctc ) ; for ( i = 0 ; i < testcases ; i ++ ) { lsum = getLargestSum ( ) ; printf ( \"%d\n\" , lsum ) ; } return 0 ; } int getLargestSum ( ) { int i , j ; int rowcount = 0 ; char cinput [ 512 ] = { 0 } ; char * ptok = 0 ; int tdata [ 2 ] [ MAX_ROWS ] ; int * prvrow = tdata [ 0 ] ; int * currow = tdata [ 1 ] ; int * tmprow = 0 ; int max ; fgets ( cinput , sizeof ( cinput ) , stdin ) ; rowcount = atoi ( cinput ) ; if ( rowcount < 1 ) { return 0 ; } fgets ( cinput , sizeof ( cinput ) , stdin ) ; currow [ 0 ] = atoi ( cinput ) ; if ( 1 == rowcount ) { return currow [ 0 ] ; } for ( i = 1 ; i < rowcount ; i ++ ) { tmprow = currow ; currow = prvrow ; prvrow = tmprow ; fgets ( cinput , sizeof ( cinput ) , stdin ) ; ptok = strtok ( cinput , \" \" ) ; for ( j = 0 ; j <= i ; j ++ ) { currow [ j ] = atoi ( ptok ) ; ptok = strtok ( NULL , \" \" ) ; } currow [ 0 ] += prvrow [ 0 ] ; for ( j = 1 ; j <= i ; j ++ ) { if ( j == i ) { currow [ j ] += prvrow [ j - 1 ] ; } else if ( prvrow [ j ] > prvrow [ j - 1 ] ) { currow [ j ] += prvrow [ j ] ; } else { currow [ j ] += prvrow [ j - 1 ] ; } } } max = 0 ; for ( j = 0 ; j < rowcount ; j ++ ) { if ( max < currow [ j ] ) { max = currow [ j ] ; } } return max ; }", "label": 0, "id": 23842}
{"input": "int R ; int * * a ; long int findmax ( int , int ) ; int main ( ) { int t , i , j ; long int ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & R ) ; a = ( int * * ) malloc ( sizeof ( int * ) * R ) ; for ( i = 0 ; i < R ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * R ) ; } for ( i = 0 ; i < R ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } ans = a [ 0 ] [ 0 ] + findmax ( 1 , 0 ) ; printf ( \"%ld\n\" , ans ) ; } return 0 ; } long int findmax ( int r , int c ) { if ( r == R - 1 ) { if ( c == R - 1 ) return a [ r ] [ c ] ; else if ( a [ r ] [ c ] > a [ r ] [ c + 1 ] ) return a [ r ] [ c ] ; else return a [ r ] [ c + 1 ] ; } long int x , y ; x = a [ r ] [ c ] + findmax ( r + 1 , c ) ; y = a [ r ] [ c + 1 ] + findmax ( r + 1 , c + 1 ) ; if ( x > y ) return x ; else return y ; }", "label": 2, "id": 20488}
{"input": "int main ( void ) { int t , m , i , j , k , h = 0 , r , l ; scanf ( \"%d\" , & t ) ; long int n ; for ( i = 0 ; i < t ; i ++ ) { m = 0 ; n = 0 ; scanf ( \"%ld\" , & n ) ; long int ar [ n ] ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%ld\" , & ar [ k ] ) ; } for ( j = 1 ; j < n ; j ++ ) { if ( ar [ j - 1 ] < ar [ j ] ) m ++ ; } if ( n == 1 ) printf ( \"%d\" , n ) ; else { for ( r = 0 ; r < n ; r ++ ) { for ( l = r + 1 ; l < n ; l ++ ) { if ( ar [ r ] == ar [ l ] ) h ++ ; } } printf ( \"\n%d\n\" , m + n - h ) ; } } return 0 ; }", "label": 2, "id": 1456}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 50000 ] ; int n , i ; long min = 1000000 , res ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } res = min * ( n - 1 ) ; printf ( \"%ld\n\" , res ) ; } return 0 ; }", "label": 0, "id": 25713}
{"input": "int max1 ( int a , int b ) { return ( a > b ? a : b ) ; } int max2 ( int a [ ] , int b ) { int max = a [ 0 ] , i ; for ( i = 1 ; i <= b ; i ++ ) { if ( a [ i ] > max ) max = a [ i ] ; } return max ; } int main ( ) { int i , j , k , l , m , n , cases , lines , a [ 5 ] [ 5 ] ; scanf ( \"%d\" , & cases ) ; int sum [ cases - 1 ] ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%d\" , & lines ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; a [ 0 ] [ 1 ] = 0 ; for ( j = 1 ; j < lines ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; if ( k != 0 ) a [ j ] [ k ] = max1 ( a [ j - 1 ] [ k ] , a [ j - 1 ] [ k - 1 ] ) + a [ j ] [ k ] ; else a [ j ] [ k ] = a [ j - 1 ] [ k ] + a [ j ] [ k ] ; } } sum [ i ] = max2 ( a [ j - 1 ] , j - 1 ) ; } for ( i = 0 ; i < cases ; i ++ ) printf ( \"%d \n\" , sum [ i ] ) ; }", "label": 3, "id": 13794}
{"input": "int main ( ) { int t , n , i , min , a [ 500005 ] ; long long store ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } store = min * ( n - 1 ) ; printf ( \"%lld\n\" , store ) ; } return 0 ; }", "label": 0, "id": 26356}
{"input": "int main ( ) { int num , den , a , b , rem , n , gcd , lcm ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( num * den ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 18428}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , c , l = 1 , i , n , j , s ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & s ) ; l = 1 ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j < l ; j ++ ) scanf ( \"%d\" , & a ) ; scanf ( \"%d %d\" , & a , & b ) ; l = ( a > b ? j : j + 1 ) ; c = ( a > b ? a : b ) ; s = s + c ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 4648}
{"input": "int main ( ) { int max ; int lcm , gcd ; int i , j ; int T , A , B ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; max = ( A > B ) ? A : B ; while ( 1 ) { if ( max % A == 0 && max % B == 0 ) { lcm = max ; break ; } ++ max ; } gcd = ( A * B ) / lcm ; printf ( \"%d %d\" , gcd , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 2, "id": 1503}
{"input": "int main ( ) { int t , k , i , j ; int rows , z [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) for ( j = 0 ; j < 1 + i ; j ++ ) scanf ( \"%d\" , & z [ i ] [ j ] ) ; for ( i = rows - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j < 1 + i ; j ++ ) z [ i ] [ j ] = z [ i ] [ j ] + ( ( z [ i + 1 ] [ j ] > z [ i + 1 ] [ j + 1 ] ) ? z [ i + 1 ] [ j ] : z [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , z [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9987}
{"input": "int * p , * a ; int * * q , * * b ; int n ; int solve ( int i , int j ) { int t1 , t2 , t ; if ( i >= n ) return 0 ; else if ( * ( * ( b + i ) + j ) != - 1 ) return * ( * ( b + i ) + j ) ; else { t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; t = ( * ( * ( q + i ) + j ) ) + ( max ( t1 , t2 ) ) ; * ( * ( b + i ) + j ) = t ; return t ; } } int main ( ) { int t , i , j , k , res ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; p = ( int * ) malloc ( n * n * sizeof ( int ) ) ; q = ( int * * ) malloc ( n * sizeof ( int * ) ) ; a = ( int * ) malloc ( n * n * sizeof ( int ) ) ; b = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( j = 0 ; j < n ; j ++ ) { * ( q + j ) = ( p + ( n * j ) ) ; * ( b + j ) = ( a + ( n * j ) ) ; } for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , ( * ( q + j ) + k ) ) ; * ( * ( b + j ) + k ) = - 1 ; } } res = solve ( 0 , 0 ) ; printf ( \"%d\n\" , res ) ; } return 0 ; }", "label": 0, "id": 1879}
{"input": "int main ( ) { int noOfTri = 0 ; int i = 0 ; short int noArray [ MAX_SIZE ] [ MAX_SIZE ] ; scanf ( \"%d\" , & noOfTri ) ; bzero ( noArray , sizeof ( * * noArray ) ) ; for ( i = 0 ; i < noOfTri ; i ++ ) { int noOfRows = 0 ; int noOfColumns = 1 ; int j , k ; scanf ( \"%d\" , & noOfRows ) ; for ( j = 0 ; j < noOfRows ; j ++ ) { for ( k = 0 ; k < noOfColumns ; k ++ ) { scanf ( \"%d\" , & noArray [ j ] [ k ] ) ; } noOfColumns ++ ; } noOfColumns -- ; for ( j = noOfRows - 2 ; j > - 1 ; j -- ) { for ( k = 0 ; k < noOfColumns ; k ++ ) { int sum1 = noArray [ j ] [ k ] + noArray [ j + 1 ] [ k ] ; int sum2 = noArray [ j ] [ k ] + noArray [ j + 1 ] [ k + 1 ] ; if ( sum1 > sum2 ) noArray [ j ] [ k ] = sum1 ; else noArray [ j ] [ k ] = sum2 ; } noOfColumns -- ; } printf ( \"%d\n\" , noArray [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16525}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int n1 , t ; scanf ( \"%d\" , & n1 ) ; for ( t = 0 ; t < n1 ; t ++ ) { int n , i = 0 , j ; scanf ( \"%d\" , & n ) ; for ( ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\n\" , s ( 0 , 0 , n ) ) ; } return 0 ; } int s ( int i , int j , int n ) { int t1 , t2 ; if ( i >= n ) return 0 ; t1 = s ( i + 1 , j , n ) ; t2 = s ( i + 1 , j + 1 , n ) ; return t1 > t2 ? t1 : t2 + a [ i ] [ j ] ; }", "label": 2, "id": 3514}
{"input": "main ( ) { int a , b , c , i , j , d , e , f ; scanf ( \"%d\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%d %d\" , & b , & c ) ; e = b * c ; if ( b > c ) { d = 1 ; while ( d != 0 ) { d = b % c ; b = c ; c = d ; } f = e / b ; printf ( \"%d %d\n\" , b , f ) ; } if ( b < c ) { d = 1 ; while ( d != 0 ) { d = c % b ; c = b ; b = d ; } f = e / c ; printf ( \"%d %d\n\" , c , f ) ; } if ( b == c ) printf ( \"%d %d\n\" , b , b ) ; } return 0 ; }", "label": 1, "id": 5650}
{"input": "int getint ( ) { char n = 0 , c ; do { c = getchar_unlocked ( ) ; } while ( ( c < '0' || c > '9' ) && c != EOF ) ; if ( c == EOF ) { return 0 ; } do { n = ( n << 3 ) + ( n << 1 ) + c - '0' ; } while ( ( c = getchar_unlocked ( ) ) >= '0' && c <= '9' ) ; return n ; } int main ( void ) { int t , n , i , j , arr [ 100 ] [ 100 ] ; t = getint ( ) ; while ( t -- ) { n = getint ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = getint ( ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 21732}
{"input": "typedef struct node { int row , col ; int sum ; } node ; node Q [ MAX ] ; int tr [ MAX ] [ MAX ] ; int front , rear , testi = 0 ; int ans [ TEST ] ; int scan_f ( int * location ) { register int digit ; register int result = 0 ; while ( ( digit = getchar ( ) ) >= '0' ) result = ( result << 3 ) + ( result << 1 ) + digit - '0' ; * location = result ; return 0 ; } void enqueue ( node t ) { if ( front == ( rear + 1 ) % MAX ) { printf ( \"Queue is Full\n\" ) ; return ; } if ( rear == - 1 && front == - 1 ) { Q [ ++ rear ] = t ; front ++ ; } else { rear = ( rear + 1 ) % MAX ; Q [ rear ] = t ; } } node dequeue ( ) { node q ; if ( rear == front == - 1 ) { printf ( \"Queue is Empty\n\" ) ; return ; } if ( front == rear ) { q = Q [ front ] ; front = rear = - 1 ; } else { q = Q [ front ] ; front = ( front + 1 ) % MAX ; } return q ; } int main ( ) { int i , j , k ; int test , n , max ; node A , B ; scan_f ( & test ) ; while ( test -- ) { scan_f ( & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scan_f ( & tr [ i ] [ j ] ) ; front = - 1 ; rear = - 1 ; A . row = 2 ; A . col = 1 ; A . sum = tr [ 1 ] [ 1 ] + tr [ 2 ] [ 1 ] ; enqueue ( A ) ; A . row = 2 ; A . col = 2 ; A . sum = tr [ 1 ] [ 1 ] + tr [ 2 ] [ 2 ] ; enqueue ( A ) ; while ( 1 ) { A = dequeue ( ) ; if ( A . row == n ) { enqueue ( A ) ; break ; } B = A ; A . row += 1 ; A . sum += tr [ A . row ] [ A . col ] ; enqueue ( A ) ; B . row += 1 ; B . col += 1 ; B . sum += tr [ B . row ] [ B . col ] ; enqueue ( B ) ; } max = - 1 ; while ( front != - 1 ) { A = dequeue ( ) ; if ( A . sum > max ) max = A . sum ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 16678}
{"input": "int hcf ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( \"%d%d\" , & a , & b ) ; gcd = hcf ( a , b ) ; if ( gcd != 0 ) lcm = ( a * b ) / gcd ; else lcm = 0 ; printf ( \"\n%d\\t%d\" , gcd , lcm ) ; } return 0 ; } int hcf ( int a , int b ) { int i , gcd ; if ( a == 0 || b == 0 ) return 0 ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a == b ) return a ; else if ( ( ( a % i ) == 0 ) && ( ( b % i ) == 0 ) ) gcd = i ; } return gcd ; }", "label": 1, "id": 27036}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int test , a , b , g , l ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a < b ) { int temp = a ; a = b ; b = temp ; } if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 6133}
{"input": "int main ( ) { int t , n ; long int a [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int i = 0 ; while ( i < n ) { scanf ( \"%ld\" , & a [ i ] ) ; i ++ ; } int k = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) k ++ ; } if ( n == 1 ) printf ( \"\n1\" ) ; else printf ( \"\n%d\" , ( k + n ) ) ; } }", "label": 3, "id": 2864}
{"input": "int main ( ) { int a , b , c , d , k , i ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { scanf ( \"%d%d\" , & b , & c ) ; k = b * c ; while ( b % c != 0 ) { d = b % c ; b = c ; c = d ; } printf ( \"%d %d\n\" , d , k / d ) ; } return 0 ; }", "label": 1, "id": 19978}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , n , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 14923}
{"input": "long int a [ 10000 ] ; void sort ( long int a [ ] , long int n ) { long int i , j ; long int temp ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n - i - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } } } long int reduce ( long int a [ ] , long int n ) { long int c = 0 , i ; for ( i = 0 ; i < n ; i ++ ) { c += a [ 0 ] ; } return c ; } int main ( ) { int t ; long int n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } sort ( a , n ) ; printf ( \"%ld \n\" , reduce ( a , n ) ) ; } return 0 ; }", "label": 3, "id": 12954}
{"input": "int main ( void ) { int n , a , b , c , d ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; if ( a == 0 ) c = b ; else if ( b == 0 ) c = a ; if ( a > b ) d = b ; else d = a ; int i ; for ( i = 1 ; i <= d ; i ++ ) { if ( a % i == 0 && b % i == 0 ) c = i ; } printf ( \"%d %d\n\" , c , ( a * b ) / c ) ; n -- ; } return 0 ; }", "label": 2, "id": 22790}
{"input": "main ( ) { int t , i , n , a [ 1000 ] [ 1000 ] , j , k , sum ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } sum = 1 ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { if ( k == 0 ) { sum = sum + a [ j ] [ k ] ; } } } printf ( \"%d\n\" , sum ) ; } }", "label": 1, "id": 14659}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , b , c , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( b = n - 1 ; b > 0 ; b -- ) { for ( c = b - 1 ; c >= 0 ; c -- ) { if ( a [ b ] [ c ] > a [ b ] [ c + 1 ] ) a [ b - 1 ] [ c ] += a [ b ] [ c ] ; else a [ b - 1 ] [ c ] += a [ b ] [ c ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 21315}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( \"%d\" , & n ) ; int vec1 [ n ] [ n ] ; int vec2 [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & vec1 [ i ] [ j ] ) ; vec2 [ 0 ] [ 0 ] = vec1 [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { vec2 [ i ] [ 0 ] = vec1 [ i ] [ 0 ] + vec2 [ i - 1 ] [ 0 ] ; } for ( i = 1 ; i < n ; i ++ ) { vec2 [ i ] [ i ] = vec1 [ i ] [ i ] + vec2 [ i - 1 ] [ i - 1 ] ; } for ( i = 2 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { if ( vec2 [ i - 1 ] [ j ] > vec2 [ i - 1 ] [ j - 1 ] ) { vec2 [ i ] [ j ] = vec2 [ i - 1 ] [ j ] + vec1 [ i ] [ j ] ; } else { vec2 [ i ] [ j ] = vec2 [ i - 1 ] [ j - 1 ] + vec1 [ i ] [ j ] ; } } } max = vec2 [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( vec2 [ n - 1 ] [ i ] > max ) max = vec2 [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 13817}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , k ; scanf ( \"%d%d\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%d %d\n\" , k , ( ( a / k ) * b ) ) ; } return 0 ; }", "label": 1, "id": 3738}
{"input": "int main ( ) { int t , n1 , n2 , j , i , gcd ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; j = 2 ; gcd = 1 ; while ( j <= n1 && j <= n2 ) { if ( n1 % j == 0 && n2 % j == 0 ) { gcd = gcd * j ; n1 /= j ; n2 /= j ; continue ; } if ( j > 2 ) j += 2 ; if ( j == 2 ) j ++ ; } printf ( \"%d %d\n\" , gcd , gcd * n1 * n2 ) ; } return 0 ; }", "label": 1, "id": 23398}
{"input": "int main ( ) { int a , b , lcm = 0 , d , t ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d %d\" , & a , & b ) ; d = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } lcm = d / a ; printf ( \"%d %d\n\" , a , lcm ) ; -- t ; } return 0 ; }", "label": 1, "id": 23998}
{"input": "main ( ) { int a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] , i , j , d , f , c , l , max ; scanf ( \"%d\" , & c ) ; for ( i = 1 ; i <= c ; i ++ ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , a [ i ] [ j ] ) ; } } for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 && i == 0 ) b [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == 0 ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j ] ; else if ( j == i ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j - 1 ] ; else { d = a [ i ] [ j ] + b [ i - 1 ] [ j ] ; f = a [ i ] [ j ] + b [ i - 1 ] [ j - 1 ] ; if ( d >= f ) b [ i ] [ j ] = d ; else b [ i ] [ j ] = f ; } } } max = b [ l - 1 ] [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) { if ( b [ l - 1 ] [ i ] > max ) max = b [ l - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } }", "label": 3, "id": 11292}
{"input": "int gcd ( int a , int b ) { int c ; if ( a < b ) { c = a ; a = b ; b = c ; } if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int T ; int i ; int x ; int y ; int A , B ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d%d\" , & A , & B ) ; x = gcd ( A , B ) ; y = ( A * B ) / x ; printf ( \"%d %d\n\" , x , y ) ; } return 0 ; }", "label": 1, "id": 19598}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , r = 0 , l = 0 ; scanf ( \"%d\" , & n ) ; long int a [ n ] ; int b [ 1000000 ] = { 0 } ; scanf ( \"%ld\" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] > a [ i - 1 ] ) b [ l ] ++ ; else l ++ ; } r = n ; for ( i = 0 ; i <= l ; i ++ ) { if ( b [ i ] > 0 ) r = r + ( b [ i ] * ( b [ i ] + 1 ) ) / 2 ; } printf ( \"%d\n\" , r ) ; } return 0 ; }", "label": 1, "id": 2897}
{"input": "int main ( ) { int T , a , b , t ; int a_ , b_ ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a >= b ) { a_ = a ; b_ = b ; } else { a_ = b ; b_ = a ; } while ( b_ != 0 ) { t = a_ % b_ ; a_ = b_ ; b_ = t ; } printf ( \"%d %lld\n\" , a_ , ( long ) a * ( long ) b / a_ ) ; } return 0 ; }", "label": 0, "id": 6081}
{"input": "int main ( ) { int t , i ; long long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; int g = 1 ; long long int l = 1 ; if ( a > 0 && b > 0 ) { if ( a > b ) { for ( i = 2 ; i <= ( b / 2 ) ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g = g * i ; } } else { for ( i = 2 ; i <= ( a / 2 ) ; i ++ ) { if ( a % i == 0 && b % i == 0 ) g = g * i ; } } l = ( ( a * b ) / g ) ; printf ( \"%d %lld\n\" , g , l ) ; } else printf ( \"0 0\n\" ) ; } return 0 ; }", "label": 2, "id": 3912}
{"input": "int arr [ 100 ] [ 100 ] ; int main ( ) { int i , j , t , n , x , s , k , l ; printf ( \"Enter t\n\" ) ; scanf ( \"%f\" , & t ) ; while ( t -- ) { printf ( \"Enter n\n\" ) ; scanf ( \"%d\" , & n ) ; if ( n > 0 && n < 100 ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & x ) ; arr [ i ] [ j ] = x ; } } s = arr [ 0 ] [ 0 ] ; l = 0 ; for ( k = 1 ; i < n ; i ++ ) { if ( arr [ k ] [ l ] > arr [ k ] [ l + 1 ] ) { x = l ; } else x = l + 1 ; s += arr [ k ] [ l ] ; l = x ; } printf ( \"%d\n\" , s ) ; } } return 0 ; }", "label": 2, "id": 7225}
{"input": "int main ( ) { int test , k , m ; int i , j , siz_arr ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i <= test - 1 ; i ++ ) { int count = 0 ; scanf ( \"%d\" , & siz_arr ) ; int arr [ siz_arr ] ; for ( j = 0 ; j <= siz_arr - 1 ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; } if ( siz_arr != 1 ) { for ( k = 0 ; k <= siz_arr - 1 ; k ++ ) { m = k ; while ( arr [ m ] <= arr [ m + 1 ] ) { count = count + 1 ; m ++ ; } } printf ( \"%d\n\" , siz_arr + count ) ; } else { int num = 1 ; printf ( \"%d\n\" , num ) ; } } }", "label": 0, "id": 26319}
{"input": "int main ( ) { int n , i , a , j , temp1 , temp2 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & a ) ; int t [ a ] [ a ] ; for ( i = 0 ; i < a ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & t [ i ] [ j ] ) ; for ( i = a - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < a ; j ++ ) { if ( ( ( t [ i - 1 ] [ j ] ) + ( t [ i ] [ j ] ) > ( t [ i - 1 ] [ j ] ) + ( t [ i ] [ j + 1 ] ) ) ) t [ i - 1 ] [ j ] = ( t [ i - 1 ] [ j ] ) + ( t [ i ] [ j ] ) ; else t [ i - 1 ] [ j ] = ( t [ i - 1 ] [ j ] ) + ( t [ i ] [ j + 1 ] ) ; } printf ( \"%d\n\" , t [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5078}
{"input": "int k ( int i , int j ) ; int a [ 101 ] [ 101 ] ; int main ( ) { int t , i , j , n , max , s ; scanf ( \"%d\" , & t ) ; while ( t ) { max = - 1 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = - 1 ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 0 ; j < n ; j ++ ) { s = k ( n - 1 , j ) ; if ( s > max ) max = s ; } printf ( \"%d\n\" , max ) ; t -- ; } return 0 ; } int k ( int i , int j ) { int s1 , s2 ; if ( i == 0 ) return a [ i ] [ j ] ; if ( a [ i - 1 ] [ j ] == - 1 ) return a [ i ] [ j ] + k ( i - 1 , j - 1 ) ; if ( j == 0 ) return a [ i ] [ j ] + k ( i - 1 , j ) ; s1 = k ( i - 1 , j ) ; s2 = k ( i - 1 , j - 1 ) ; return ( a [ i ] [ j ] + ( s1 > s2 ? s1 : s2 ) ) ; }", "label": 2, "id": 3460}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; int min = 100000 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 18091}
{"input": "int main ( ) { int n , t , i , j , k , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } for ( j = n - 1 ; j > 0 ; j -- ) { for ( k = 0 ; k <= j - 1 ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + 1 ] ) a [ j - 1 ] [ k ] += a [ j ] [ k ] ; else a [ j - 1 ] [ k ] += a [ j ] [ k + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 1971}
{"input": "int main ( ) { int gcd , A , B , x , y , s , t ; long long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & A , & B ) ; if ( B > A ) { s = A ; A = B ; B = s ; } x = A , y = B , gcd = 0 , lcm = 0 ; while ( y != 0 ) { gcd = x % y ; x = y ; y = gcd ; } lcm = ( A * B ) / x ; printf ( \"%d %lld\n\" , x , lcm ) ; } return 0 ; }", "label": 1, "id": 11170}
{"input": "int long gcd ( int , int ) ; int main ( ) { int long t , i , a , b ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; printf ( \"%ld %ld\n\" , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return 0 ; } int long gcd ( int x , int y ) { int rem ; rem = x % y ; if ( rem == 0 ) return y ; else return ( gcd ( y , rem ) ) ; }", "label": 0, "id": 18745}
{"input": "int main ( ) { int a , b , m , x , gcd , d , lcm , i , T ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; d = a * b ; if ( a == 0 ) gcd = a ; else if ( b == 0 ) gcd = b ; else { while ( b != 0 ) { m = b ; b = a % b ; a = m ; } gcd = a ; } lcm = d / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 16162}
{"input": "int newsum [ 102 ] ; int sum [ 102 ] ; void newline ( int * a , int i , int n ) { int numbers = i + 1 ; int j ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } newsum [ 0 ] = sum [ 0 ] + a [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) { if ( sum [ j - 1 ] > sum [ j ] ) newsum [ j ] = sum [ j - 1 ] + a [ j ] ; else newsum [ j ] = sum [ j ] + a [ j ] ; } newsum [ i ] = sum [ i - 1 ] + a [ i ] ; for ( j = 0 ; j <= i ; j ++ ) { sum [ j ] = newsum [ j ] ; } return ; } int main ( ) { int i , j , n , t ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; scanf ( \"%d\" , & a [ 0 ] ) ; sum [ 0 ] = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) sum [ i ] = 0 ; for ( i = 1 ; i < n ; i ++ ) { newline ( a , i , n ) ; } int max = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( sum [ i ] > max ) { max = sum [ i ] ; } } printf ( \"%d\n\" , max ) ; t -- ; } return 0 ; }", "label": 0, "id": 562}
{"input": "int main ( void ) { int arr [ 100 ] ; int i , n , t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } long long int small = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < small ) small = arr [ i ] ; } small = small * ( n - 1 ) ; printf ( \"%lld\n\" , small ) ; t -- ; } return 0 ; }", "label": 3, "id": 4838}
{"input": "int arr [ 1001 ] [ 1001 ] ; int ans [ 1001 ] [ 1001 ] = { 0 } ; int BFS ( int arr [ 1001 ] [ 1001 ] , int N ) { ans [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; int i , j ; for ( i = 1 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j < i ) { ans [ i ] [ j ] = arr [ i ] [ j ] + ans [ i - 1 ] [ j ] ; } if ( j > 0 ) { ans [ i ] [ j ] = max ( ans [ i ] [ j ] , ( arr [ i ] [ j ] + ans [ i - 1 ] [ j - 1 ] ) ) ; } } } int max = 0 ; for ( i = 0 ; i < N ; i ++ ) { max = max < ans [ N - 1 ] [ i ] ? ans [ N - 1 ] [ i ] : max ; } return max ; } int main ( ) { int T , tc , N ; scanf ( \"%d\" , & T ) ; for ( tc = 0 ; tc < T ; tc ++ ) { scanf ( \"%d\" , & N ) ; int i , j = 0 ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; ans [ i ] [ j ] = 0 ; } } int a = BFS ( arr , N ) ; printf ( \"%d\n\" , a ) ; } return 0 ; }", "label": 0, "id": 19445}
{"input": "int main ( ) { int t ; long int m , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] , count = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n && j != i ; j ++ ) { if ( ( a [ i ] - a [ j ] ) == 1 ) count ++ ; } } m = n + count ; printf ( \"%ld\n\" , m ) ; } }", "label": 2, "id": 21251}
{"input": "int main ( ) { int T , a , b , m , x , y , i ; int gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = ( a > b ? b : a ) ; gcd = 1 ; x = a ; y = b ; for ( i = m ; i > 0 ; i -- ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { gcd = i ; break ; } } lcm = x * y / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 1232}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( \"%d\" , & n ) ; int vec1 [ n + 1 ] [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & vec1 [ i ] [ j ] ) ; for ( i = 2 ; i <= n ; i ++ ) { vec1 [ i ] [ 1 ] = vec1 [ i ] [ 1 ] + vec1 [ i - 1 ] [ 1 ] ; vec1 [ i ] [ i ] = vec1 [ i ] [ i ] + vec1 [ i - 1 ] [ i - 1 ] ; } for ( i = 3 ; i <= n ; i ++ ) { for ( j = 2 ; j < i ; j ++ ) { if ( vec1 [ i - 1 ] [ j ] > vec1 [ i - 1 ] [ j - 1 ] ) { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j ] + vec1 [ i ] [ j ] ; } else { vec1 [ i ] [ j ] = vec1 [ i - 1 ] [ j - 1 ] + vec1 [ i ] [ j ] ; } } } max = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( vec1 [ n ] [ i ] > max ) max = vec1 [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 1182}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( \"Enter two numbers\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"GCD of %d and %d = %d\n\" , num1 , num2 , gcd ) ; printf ( \"LCM of %d and %d = %d\n\" , num1 , num2 , lcm ) ; }", "label": 1, "id": 2553}
{"input": "void below ( int , int , int ) ; void right ( int , int , int ) ; int a [ 101 ] [ 101 ] , t = 1 , ans [ 10000 ] , rows ; main ( ) { int i , j , test_case , k , r , max = 0 ; scanf ( \"%d\" , & test_case ) ; for ( i = 1 ; i <= test_case ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 1 ; j <= rows ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } below ( 1 , 1 , 1 ) ; right ( 1 , 1 , 1 ) ; for ( r = 1 ; ans [ r ] != '\\0' ; r ++ ) { if ( ans [ r ] > max ) max = ans [ r ] ; } printf ( \"%d\" , max ) ; } exit ( 0 ) ; } void below ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + 1 ; } else { i = i + 1 ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } } void right ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + 1 ; } else { i = i + 1 ; j = j + 1 ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } }", "label": 3, "id": 17701}
{"input": "long long int a [ 105 ] [ 105 ] = { 0 } ; int main ( ) { int n , m ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; int i , j ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } int k , l ; for ( k = m - 2 ; k >= 0 ; k -- ) { for ( l = i ; l >= 0 ; l -- ) { if ( a [ k + 1 ] [ l + 1 ] > a [ k + 1 ] [ l ] ) a [ k ] [ l ] += a [ k + 1 ] [ l + 1 ] ; else a [ k ] [ l ] += a [ k + 1 ] [ l ] ; } } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; int o , p ; for ( o = 0 ; o < 105 ; o ++ ) { for ( p = 0 ; p < 105 ; p ++ ) { a [ o ] [ p ] = 0 ; } } } return 0 ; }", "label": 0, "id": 20031}
{"input": "int main ( ) { int t , n , s ; int i = 0 , j = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; long int a [ 100 ] [ 100 ] , l ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & s ) ; if ( j == 0 ) { if ( i - 1 >= 0 ) a [ i ] [ j ] = a [ i - 1 ] [ j ] + s ; else a [ i ] [ j ] = s ; } else if ( i > 0 && i == j ) a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] + s ; else a [ i ] [ j ] = ( ( s + a [ i - 1 ] [ j - 1 ] ) > ( s + a [ i - 1 ] [ j ] ) ) ? s + a [ i - 1 ] [ j - 1 ] : s + a [ i - 1 ] [ j ] ; } } l = a [ i - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) if ( a [ i - 1 ] [ j ] > l ) l = a [ i - 1 ] [ j ] ; printf ( \"%ld\n\" , l ) ; } return 0 ; }", "label": 0, "id": 18200}
{"input": "long long gcd ( long long a , long long b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { long long t , a , b ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , ( ( a * b ) / gcd ( a , b ) ) ) ; } return 0 ; }", "label": 0, "id": 23324}
{"input": "int main ( ) { int x , i , T , GCD ; long long LCM ; long A , B ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%ld %ld\" , & A , & B ) ; if ( A > B ) { x = B ; } else { x = A ; } for ( i = 1 ; i <= x ; ++ i ) { if ( A % i == 0 && B % i == 0 ) { GCD = i ; } } LCM = ( A * B ) / GCD ; printf ( \"%ld %lld\n\" , GCD , LCM ) ; } return 0 ; }", "label": 2, "id": 5400}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { int lines , i , largest , j ; int array [ 100 ] [ 100 ] ; scanf ( \"%d\" , & lines ) ; scanf ( \"%d\" , & array [ 1 ] [ 1 ] ) ; for ( i = 2 ; i <= lines ; i ++ ) { scanf ( \"%d\" , & array [ i ] [ 1 ] ) ; array [ i ] [ 1 ] += array [ i - 1 ] [ 1 ] ; for ( j = 2 ; j < i ; j ++ ) { scanf ( \"%d\" , & array [ i ] [ j ] ) ; array [ i ] [ j ] = ( array [ i - 1 ] [ j - 1 ] > array [ i - 1 ] [ j ] ) ? ( array [ i ] [ j ] + array [ i - 1 ] [ j - 1 ] ) : ( array [ i ] [ j ] + array [ i - 1 ] [ j ] ) ; } scanf ( \"%d\" , & array [ i ] [ i ] ) ; array [ i ] [ i ] = array [ i - 1 ] [ i - 1 ] ; } largest = - 1 ; for ( i = 1 ; i < lines ; i ++ ) { if ( array [ lines ] [ i ] > largest ) largest = array [ lines ] [ i ] ; } printf ( \"%d\n\" , largest ) ; n -- ; } return 0 ; }", "label": 3, "id": 4759}
{"input": "int gcd ( int x , int a , int b ) ; long long int lcm ( int a , int b ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , x ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) x = b ; else x = a ; int g ; g = gcd ( x , a , b ) ; long long int l ; l = lcm ( a , b ) ; printf ( \"%d %lld\n\" , g , l ) ; } return 0 ; } int gcd ( int x , int a , int b ) { int g ; for ( int i = x ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { g = i ; break ; } } return g ; } long long int lcm ( int a , int b ) { int x ; if ( a > b ) x = a ; else x = b ; long long int l = 0 , h ; for ( long long int i = x ; i <= ( a * b ) ; i = x * l ) { if ( i % a == 0 && i % b == 0 ) { h = i ; break ; } l = l + 1 ; } return h ; }", "label": 1, "id": 11369}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , min , p , i ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } p = min * ( n - 1 ) ; printf ( \"%lld\n\" , p ) ; } return 0 ; }", "label": 0, "id": 17157}
{"input": "int main ( ) { int t , n , i , j , sum , ans , k , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; min = 100000 ; ans = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) { min = a [ i ] ; ans = i ; } } j = 0 ; if ( ( ans != i ) || ( ans != ( i + 1 ) ) ) { for ( k = 1 ; k < n ; k ++ ) { if ( a [ k ] > a [ j ] ) sum += a [ j ] ; else { sum += a [ k ] ; j = k ; } } } else { for ( i = 0 ; i < n - 1 ; i ++ ) sum += min ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 11565}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( \"Enter the numbers:\" ) ; scanf ( \"%d,%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"gcd of %d and %d=%d\n\" , num1 , num2 , gcd ) ; printf ( \"lcm of %d and %d=%d\n\" , num1 , num2 , lcm ) ; }", "label": 1, "id": 10873}
{"input": "int main ( ) { int testcases , count = 1 , i ; int a , b , p , lcm , t ; scanf ( \"%d\" , & testcases ) ; while ( count <= testcases ) { scanf ( \"%d %d\" , & a , & b ) ; p = a * b ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } lcm = p / a ; printf ( \"%d %d\" , a , lcm ) ; count ++ ; } return 0 ; }", "label": 1, "id": 4680}
{"input": "int main ( ) { int t , n , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } min = min * ( n - 1 ) ; printf ( \"%d\n\" , min ) ; } return 0 ; }", "label": 0, "id": 7684}
{"input": "long gcd ( long , long ) ; int main ( ) { long x , y , hcf , lcm ; printf ( \"enter two int\n\" ) ; scanf ( \"%d%d\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d%d%d\" , x , y , hcf ) ; printf ( \"%d%d%d\" , x , y , lcm ) ; return 0 ; } long gcd ( long x , long y ) { if ( x == 0 ) { return y ; } while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 1, "id": 11023}
{"input": "main ( ) { int i , j , a [ 1000 ] [ 1000 ] , b [ 100 ] , max , sum = 0 , n ; int T , k ; scanf ( \"%d\" , & T ) ; for ( k = 0 ; k < T ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { max = a [ i ] [ 0 ] ; for ( j = 1 ; j <= i ; j ++ ) { if ( max < a [ i ] [ j ] ) max = a [ i ] [ j ] ; } sum = sum + max ; } b [ k ] = sum ; sum = 0 ; } for ( i = 0 ; i < T ; i ++ ) { b [ i ] = b [ i ] - a [ 1 ] [ 1 ] ; printf ( \"%d\n\" , b [ i ] ) ; } }", "label": 1, "id": 13336}
{"input": "long long int gcd ( long long int a , long long int b ) ; long long int lcm ( long long int a , long long int b ) ; int main ( ) { int t , i ; long long int a , b , c , d ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\n\" , & a , & b ) ; c = gcd ( a , b ) ; d = lcm ( a , b ) ; printf ( \"%lld %lld\n\" , c , d ) ; } return 0 ; } long long int gcd ( long long int a , long long int b ) { while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } return a ; } long long int lcm ( long long int a , long long int b ) { long long int m , n ; m = a ; n = b ; while ( m != n ) { if ( m < n ) { m = m + a ; } else { n = n + b ; } } return m ; }", "label": 2, "id": 26111}
{"input": "static int a [ 101 ] [ 101 ] ; int main ( ) { int t , r , q , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; q = a [ 0 ] [ 0 ] ; i = 0 ; j = 0 ; while ( ( i ++ ) <= r ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) { j ++ ; q += a [ i ] [ j ] ; } else { q += a [ i ] [ j ] ; } } printf ( \"%d\n\" , q ) ; } return 0 ; }", "label": 3, "id": 11379}
{"input": "long int ar [ 100 ] [ 100 ] ; long int f [ 100 ] [ 100 ] ; long int v [ 100 ] [ 100 ] ; long int n ; long int max ( long int a , long int b ) { return ( a > b ? a : b ) ; } long int sum ( int i , int j ) { long int t1 , t2 , t3 ; if ( i > n ) return 0 ; if ( f [ i ] [ j ] ) return v [ i ] [ j ] ; t1 = sum ( i + 1 , j ) ; t2 = sum ( i + 1 , j + 1 ) ; t3 = max ( t1 , t2 ) + ar [ i ] [ j ] ; v [ i ] [ j ] = t3 ; f [ i ] [ j ] = 1 ; return t3 ; } int main ( void ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 && j < n ; j ++ ) { scanf ( \"%d\" , & ar [ i ] [ j ] ) ; f [ i ] [ j ] = 0 ; } } v [ 0 ] [ 0 ] = ar [ 0 ] [ 0 ] ; printf ( \"%ld\n\" , sum ( 0 , 0 ) ) ; } return 0 ; }", "label": 1, "id": 21003}
{"input": "int main ( ) { int j , n , q [ 100 ] , a [ 100 ] , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & q [ i ] ) ; ; j = 1 ; while ( q [ i ] != 0 ) { j *= q [ i ] ; q [ i ] -- ; } a [ i ] = j ; } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , a [ i ] ) ; return 0 ; }", "label": 3, "id": 915}
{"input": "int main ( ) { int t ; long long int x , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 100000 ] = { '0' } ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & x ) ; a [ x ] ++ ; } for ( i = 1 ; i < 100000 ; i ++ ) { if ( a [ i ] != 0 ) { x = i * ( n - 1 ) ; break ; } } printf ( \"%lld\n\" , x ) ; } return 0 ; }", "label": 0, "id": 14718}
{"input": "int main ( ) { int tc , T ; scanf ( \"%d\" , & T ) ; for ( tc = 0 ; tc < T ; tc ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , a , ( n1 * n2 ) / a ) ; } return 0 ; }", "label": 1, "id": 22166}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n , i , min , sum = 0 , a [ 100000 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i == 0 ) { min = a [ i ] ; } if ( min > a [ i ] ) { min = a [ i ] ; } } sum = min * ( n - 1 ) ; printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 1, "id": 26991}
{"input": "int main ( ) { long unsigned int t , i , A , B , LCM , n , r ; scanf ( \"%lu\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lu%lu\" , & A , & B ) ; n = A * B ; while ( B != 0 ) { r = A % B ; A = B ; B = r ; } printf ( \"%lu \" , A ) ; LCM = n / A ; printf ( \"%lu\n\" , LCM ) ; } return 0 ; }", "label": 0, "id": 504}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return ( gcd ( b , a % b ) ) ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int min ( int a , int b ) { if ( a < b ) return a ; return b ; } int main ( ) { int a , b , c , d , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & c , & d ) ; a = max ( c , d ) ; b = min ( c , d ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , ( ( a * b ) / gcd ( a , b ) ) ) ; } return 0 ; }", "label": 1, "id": 22764}
{"input": "int main ( ) { int i , j , k , t , n , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } for ( j = n - 2 ; j >= 0 ; j -- ) { for ( k = j ; k >= 0 ; k -- ) { if ( arr [ j + 1 ] [ k + 1 ] > arr [ j + 1 ] [ k ] ) { arr [ j ] [ k ] += arr [ j + 1 ] [ k + 1 ] ; } else { arr [ j ] [ k ] += arr [ j + 1 ] [ k ] ; } } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17247}
{"input": "int n , t , i , j , a [ 100 ] [ 100 ] ; int main ( ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\" , add ( ) ) ; } return 0 ; } int add ( ) { for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } return a [ 0 ] [ 0 ] ; }", "label": 1, "id": 2840}
{"input": "int main ( ) { int test_cases ; long int n , b , i , j ; long long int count ; scanf ( \"%d\" , & test_cases ) ; while ( test_cases -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; count = n ; for ( i = 0 ; i < n - 1 ; i ++ ) { b = 0 ; j = i + 1 ; while ( a [ j ] >= a [ j - 1 ] ) { b ++ ; j ++ ; if ( j == n ) break ; } if ( b > 0 ) count += b ; } printf ( \"%lld\n\" , count ) ; } return ( 0 ) ; }", "label": 0, "id": 4591}
{"input": "int main ( ) { int t , i , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , max = 0 ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; for ( j = n - 2 ; j >= 0 ; j -- ) for ( k = 0 ; k <= j ; k ++ ) if ( ( a [ j ] [ k ] + a [ j + 1 ] [ k ] ) > ( a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ) ) a [ j ] [ k ] += a [ j + 1 ] [ k ] ; else a [ j ] [ k ] += a [ j + 1 ] [ k + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2636}
{"input": "int main ( void ) { int n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { long int a , b , lcm , p , q ; scanf ( \"%ld %ld\" , & a , & b ) ; p = a ; q = b ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } lcm = ( p * q ) / a ; printf ( \"%ld %ld\n\" , a , lcm ) ; } return 0 ; }", "label": 0, "id": 26678}
{"input": "int main ( void ) { int I , N ; scanf ( \"%d\" , & N ) ; int lineCount ; int * line ; int * paths ; int L ; int maxpath ; int i ; for ( I = 0 ; I < N ; I ++ ) { scanf ( \"%d\" , & lineCount ) ; line = ( int * ) malloc ( lineCount * sizeof ( int ) ) ; paths = ( int * ) malloc ( lineCount * sizeof ( int ) ) ; scanf ( \"%d\" , & paths [ 0 ] ) ; if ( lineCount == 1 ) { printf ( \"%d\n\" , paths [ 0 ] ) ; return 0 ; } for ( L = 2 ; L <= lineCount ; L ++ ) { for ( i = 0 ; i < L ; i ++ ) { scanf ( \"%d\" , & line [ i ] ) ; } paths [ L - 1 ] = paths [ L - 2 ] + line [ L - 1 ] ; maxpath = paths [ L - 1 ] ; for ( i = L - 2 ; i > 0 ; i -- ) { if ( paths [ i ] > paths [ i - 1 ] ) paths [ i ] = paths [ i ] + line [ i ] ; else paths [ i ] = paths [ i - 1 ] + line [ i ] ; if ( paths [ i ] > maxpath ) maxpath = paths [ i ] ; } paths [ 0 ] += line [ 0 ] ; } printf ( \"%d\n\" , maxpath ) ; } return 0 ; }", "label": 0, "id": 18674}
{"input": "int gcd ( int a , int b ) { int t ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } return a ; } int main ( ) { int t , a , b , c , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; c = gcd ( a , b ) ; d = a * b ; printf ( \"%d %d\n\" , c , d ) ; } return 0 ; }", "label": 1, "id": 22987}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; long long int hcf , lcm ; hcf = gcd ( a , b ) ; lcm = a * ( b / hcf ) ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 254}
{"input": "int main ( ) { int testcase ; scanf ( \"%d\" , & testcase ) ; while ( testcase -- ) { long int a , b ; int i , gcd , lcm ; scanf ( \"%ld %ld\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; } } lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 968}
{"input": "int main ( ) { int T ; long long int a , b , temp , x , y ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; x = a ; y = b ; while ( y > 0 ) { temp = y ; y = ( x % temp ) ; x = temp ; } printf ( \"%lld\\t%lld\n\" , x , ( a * b ) / x ) ; } return 0 ; }", "label": 0, "id": 14076}
{"input": "long int GCD ( long int a , long int b ) { long int divisor , D , aux ; divisor = a > b ? b : a ; D = a > b ? a : b ; while ( 1 ) { if ( ( aux = D % divisor ) == 0 ) { return divisor ; } else { D = divisor ; divisor = aux ; } } } int main ( ) { long int x , y , i , j , lcm ; int T ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld%ld\" , & x , & y ) ; j = GCD ( x , y ) ; lcm = x * y / j ; printf ( \"%ld %ld\n\" , j , lcm ) ; } return 0 ; }", "label": 0, "id": 14221}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( void ) { long int a , b , c , lcm ; int t ; while ( t ) { scanf ( \"%ld %ld\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%ld\" , c ) ; lcm = ( a * b ) / c ; printf ( \"\\t%ld\n\" , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 21926}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , g ; scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { int temp = a ; a = b ; b = temp ; } g = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , g , ( a * b ) / g ) ; } return 0 ; } long long int gcd ( long long int a , long long int b ) { long long int temp = a ; a = b % a ; if ( a == 0 ) return temp ; else return gcd ( a , temp ) ; }", "label": 0, "id": 12646}
{"input": "int gcd ( long int a , long int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t , g ; long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%ld %ld\n\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 0, "id": 13666}
{"input": "int main ( ) { int n , t , a [ 100 ] [ 100 ] , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j + 1 ] = 0 ; } for ( i = 1 ; i < n ; i ++ ) a [ i ] [ 0 ] += a [ i - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += a [ i - 1 ] [ j ] ; max = a [ n - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) if ( a [ n - 1 ] [ j ] > max ) max = a [ n - 1 ] [ j ] ; printf ( \"%d\" , max ) ; } return 0 ; }", "label": 1, "id": 18678}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int no , n , ans , tm [ 110 ] [ 110 ] = { 0 } , i , j ; scanf ( \"%d\" , & no ) ; no ++ ; while ( no -- ) { ans = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & tm [ i ] [ j ] ) ; if ( j != 0 && i != 0 ) tm [ i ] [ j ] = tm [ i ] [ j ] + max ( tm [ i - 1 ] [ j ] , tm [ i - 1 ] [ j - 1 ] ) ; if ( j == 0 && i != 0 ) tm [ i ] [ j ] = tm [ i ] [ j ] + tm [ i - 1 ] [ j ] ; if ( i == ( n - 1 ) ) { if ( tm [ i ] [ j ] >= ans ) ans = tm [ i ] [ j ] ; } } } printf ( \"%d\n\" , ans ) ; for ( i = 0 ; i < 110 ; i ++ ) { for ( j = 0 ; j < 110 ; j ++ ) tm [ i ] [ j ] = 0 ; } } return 0 ; }", "label": 1, "id": 429}
{"input": "void arr ( long int * a , long int n ) { long int i , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( * ( a + i ) > * ( a + ( i + 1 ) ) ) sum = sum + * ( a + i ) ; else sum = sum + * ( a + ( i + 1 ) ) ; } printf ( \"%ld\" , sum ) ; } int main ( ) { long int a [ 50000 ] , n , j ; int t , i ; scanf ( \"%d\" , & t ) ; scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , ( a + i ) ) ; } arr ( a , n ) ; return 0 ; }", "label": 1, "id": 21374}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; int s [ n ] [ n ] ; int max = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 0 && i == 0 ) s [ i ] [ j ] = a [ i ] [ j ] ; else { if ( j == i ) s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else { if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else { if ( s [ i - 1 ] [ j ] > s [ i - 1 ] [ j - 1 ] ) { s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } } } if ( max < s [ i ] [ j ] ) max = s [ i ] [ j ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 21399}
{"input": "int main ( ) { int n , m , sum = 0 , i , j , * b , k = 0 , temp1 = 0 , temp2 = 0 , l = 0 ; scanf ( \"%d\" , & n ) ; int ar [ 100 ] [ 100 ] ; for ( ; n > 0 ; n -- ) { scanf ( \"%d\" , & m ) ; b = calloc ( m , sizeof ( int ) ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } for ( i = 0 ; i < m ; i ++ ) { sum += ar [ i ] [ 0 ] ; l += ar [ i ] [ i ] ; } temp1 = temp2 = sum ; for ( j = m - 1 ; j > k ; ) { if ( b [ j ] == b [ j - 1 ] ) { temp1 = temp1 - ar [ j ] [ b [ j ] ] + ar [ j ] [ 1 + b [ j ] ] ; b [ j ] ++ ; if ( sum < temp1 ) sum = temp1 ; j = m - 1 ; } if ( b [ j ] == j ) { k ++ ; j = m - 1 ; } if ( ( b [ j ] - 1 ) == b [ j - 1 ] ) j -- ; } for ( j = m - 1 ; j > k ; j -- ) { if ( b [ j ] == b [ j - 1 ] ) { temp1 = temp1 - ar [ j ] [ b [ j ] ] + ar [ j ] [ 1 + b [ j ] ] ; b [ j ] ++ ; if ( sum < temp2 ) sum = temp2 ; } if ( b [ j ] == j ) { k ++ ; j = m - 1 ; } } if ( sum < l ) sum = l ; printf ( \"%d\n\" , sum ) ; sum = temp1 = temp2 = l = 0 ; } return 0 ; }", "label": 1, "id": 16214}
{"input": "int main ( ) { int arr [ 50020 ] , i , t , num , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( i == 0 ) min = arr [ i ] ; else { if ( arr [ i ] < min ) min = arr [ i ] ; } } printf ( \"%d\n\" , ( num - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 10025}
{"input": "int main ( ) { int numOfTriangles = 0 , numOfLines , i , j , a , max = 0 ; scanf ( \"%d\" , & numOfTriangles ) ; while ( numOfTriangles > 0 ) { scanf ( \"%d\" , & numOfLines ) ; int * * base = ( int * * ) malloc ( numOfLines * sizeof ( int * ) ) ; for ( i = 0 ; i < numOfLines ; i ++ ) { base [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & a ) ; if ( i == 0 ) base [ i ] [ j ] = a ; else if ( j == 0 ) base [ i ] [ j ] = a + base [ i - 1 ] [ j ] ; else if ( j == i ) base [ i ] [ j ] = a + base [ i - 1 ] [ j - 1 ] ; else { base [ i ] [ j ] = base [ i - 1 ] [ j ] > base [ i - 1 ] [ j - 1 ] ? a + base [ i - 1 ] [ j ] : a + base [ i - 1 ] [ j - 1 ] ; } j ++ ; } } max = 0 ; for ( j = 0 ; j < numOfLines ; j ++ ) { if ( max < base [ numOfLines - 1 ] [ j ] ) max = base [ numOfLines - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; free ( base ) ; numOfTriangles -- ; } return 0 ; }", "label": 0, "id": 22686}
{"input": "typedef struct node_type { int val ; int level ; } node ; int sum_it ( node a [ ] , int n , int num ) { int retval , child , val , max ; child = num + a [ num ] . level ; if ( child + 1 < n ) { max = sum_it ( a , n , child ) ; val = sum_it ( a , n , child + 1 ) ; if ( max < val ) { max = val ; } retval = a [ num ] . val + max ; } else { retval = a [ num ] . val ; } return retval ; } int main ( ) { int t , n , num , count , j , i ; node * a ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; num = n * ( n + 1 ) / 2 ; a = ( node * ) malloc ( sizeof ( node ) * num ) ; count = 0 ; j = 1 ; for ( i = 0 ; i < num ; i ++ ) { scanf ( \"%d\" , & a [ i ] . val ) ; count ++ ; if ( count > j ) { j ++ ; count = 1 ; } a [ i ] . level = j ; } printf ( \"%d\n\" , sum_it ( a , num , 0 ) ) ; } return 0 ; }", "label": 2, "id": 7907}
{"input": "int main ( ) { int T ; int A , B , lcm ; int numerator , denominator , remainder , gcd ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & A , & B ) ; lcm = A * B ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 9067}
{"input": "unsigned long long int g ( unsigned long long int big , unsigned long long int small ) { if ( big % small == 0 ) { return small ; } else return g ( small , big % small ) ; } int main ( ) { int t , i ; unsigned long long int gcd , lcm , a , b , small , big ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%llu\" , & a ) ; scanf ( \"%llu\" , & b ) ; if ( a > b ) { small = b ; big = a ; } else { small = a ; big = b ; } gcd = g ( big , small ) ; if ( gcd == small ) { lcm = big ; } else { lcm = ( a * b ) / gcd ; } printf ( \"%llu %llu\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 26082}
{"input": "int main ( ) { long n , i , h , l ; scanf ( \"%ld\" , & n ) ; int a [ 2 ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld %ld\" , & a [ 0 ] [ i ] , & a [ 1 ] [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( h = a [ 0 ] [ i ] < a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; h >= 1 ; h -- ) { if ( a [ 0 ] [ i ] % h == 0 && a [ 1 ] [ i ] % h == 0 ) break ; } printf ( \"%ld \" , h ) ; for ( l = a [ 0 ] [ i ] > a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; l <= a [ 0 ] [ i ] * a [ 1 ] [ i ] ; l += ( a [ 0 ] [ i ] > a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ) ) if ( l % a [ 0 ] [ i ] == 0 && l % a [ 1 ] [ i ] == 0 ) break ; printf ( \"%ld\n\" , l ) ; } return 0 ; }", "label": 2, "id": 14284}
{"input": "int main ( ) { int t , a , b , gcd , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( ( a != 0 ) || ( b != 0 ) ) { a = a % b ; if ( a == 0 ) { gcd = b ; break ; } b = b % a ; if ( b == 0 ) { gcd = a ; break ; } } printf ( \"%d%d\n\" , gcd , m * n / gcd ) ; } return 0 ; }", "label": 1, "id": 19477}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int min = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( \"%d\n\" , ( min * ( n - 1 ) ) ) ; } }", "label": 0, "id": 26039}
{"input": "void main ( ) { int p [ 10 ] , q [ 10 ] , gcd [ 10 ] , a , b ; int lcm [ 10 ] , i , n ; printf ( \"enter the number of test cases \n\" ) ; scanf ( \"%d\" , & n ) ; if ( ! ( n >= 1 && n <= 1000 ) ) printf ( \"error!\" ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( \"Enter the 2 numbers:\n\" ) ; scanf ( \"%d\n%d\" , & p [ i ] , & q [ i ] ) ; if ( ! ( ( p [ i ] >= 1 && p [ i ] <= 1000000 ) && ( q [ i ] >= 1 && q [ i ] <= 1000000 ) ) ) printf ( \"error!\" ) ; } for ( i = 0 ; i < n ; i ++ ) { a = p [ i ] ; b = q [ i ] ; if ( p [ i ] == 0 ) gcd [ i ] = q [ i ] ; else if ( q [ i ] == 0 ) gcd [ i ] = p [ i ] ; else { while ( q [ i ] != 0 ) { if ( p [ i ] > q [ i ] ) p [ i ] = p [ i ] - q [ i ] ; else q [ i ] = q [ i ] - p [ i ] ; gcd [ i ] = p [ i ] ; } } lcm [ i ] = ( a * b ) / gcd [ i ] ; } for ( i = 0 ; i < n ; i ++ ) printf ( \"%d  %d \n\" , gcd [ i ] , lcm [ i ] ) ; }", "label": 3, "id": 23657}
{"input": "int main ( ) { long t , n , min , x , c , i ; scanf ( \"%ld\" , & t ) ; while ( t > 0 ) { min = 1000000 ; scanf ( \"%ld\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld\" , & x ) ; if ( x < min ) { min = x ; } } c = min * ( n - 1 ) ; printf ( \"%ld\n\" , c ) ; t -- ; } return ( 0 ) ; }", "label": 0, "id": 13611}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int a [ 100 ] [ 100 ] ; int compute ( int i , int j , int r ) { if ( r == 0 ) return 0 ; return max ( a [ i ] [ j ] + compute ( i + 1 , j , r - 1 ) , a [ i ] [ j ] + compute ( i + 1 , j + 1 , r - 1 ) ) ; } int main ( ) { int n , r , i , j ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"%d\n\" , compute ( 0 , 0 , r ) ) ; n -- ; } }", "label": 2, "id": 12490}
{"input": "int gcd ( int a , int b ) { int count = 0 ; if ( a > b ) count ++ ; return count ; if ( b > a ) count ++ ; return count ; } int main ( ) { int t , ans , multi ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; ans = gcd ( a , b ) ; multi = a * b ; printf ( \"%d %d\n\" , ans , multi ) ; } }", "label": 1, "id": 2061}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- > 0 ) { int nlevel ; scanf ( \"%d\" , & nlevel ) ; int arr [ nlevel ] [ nlevel ] ; int i , j ; int n = 0 ; while ( n < nlevel ) { for ( i = 0 ; i <= n ; ++ i ) scanf ( \"%d\" , & arr [ n ] [ i ] ) ; n ++ ; } for ( i = nlevel - 2 ; i >= 0 ; -- i ) for ( j = 0 ; j <= i ; ++ j ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22946}
{"input": "int main ( ) { int t ; scanf ( \"%d\n\" , & t ) ; while ( t > 0 ) { int i , n ; scanf ( \"%d\" , & n ) ; int ar [ n ] ; int max = ar [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & ar [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( max > ar [ i ] ) max = ar [ i ] ; } printf ( \"%d\n\" , max * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 4651}
{"input": "int max ( int x , int y ) { if ( x >= y ) return x ; else return y ; } int sum ( int r ) { int a [ r ] [ r ] , s [ r ] [ r ] , d ; int i , j ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j < r ; j ++ ) { a [ i ] [ j ] = 0 ; s [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) if ( ( a [ i ] [ j ] > 0 ) && ( a [ i ] [ j ] < 99 ) ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) s [ i ] [ j ] = a [ i ] [ j ] + ( s [ i - 1 ] [ j ] ) ; else s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - 1 ] [ j ] , s [ i - 1 ] [ j - 1 ] ) ; } } d = s [ r - 1 ] [ 0 ] ; for ( j = 1 ; j < r ; j ++ ) { if ( s [ r - 1 ] [ j ] > d ) d = s [ r - 1 ] [ j ] ; } return d ; } void main ( ) { int t , r ; printf ( \"enter the no of test cases\" ) ; scanf ( \"%d\" , & t ) ; if ( ( t > 0 ) && ( t < 1000 ) ) { while ( t -- ) { printf ( \"\nenter the no of rows\" ) ; if ( ( r > 0 ) && ( r < 100 ) ) scanf ( \"%d\" , & r ) ; printf ( \"%d\" , sum ( r ) ) ; } } }", "label": 1, "id": 5662}
{"input": "int main ( ) { long int T , N , a [ 500000 ] , temp , i , j , k ; scanf ( \"%ld\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld\" , & N ) ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } for ( j = 0 ; j < N ; j ++ ) { for ( k = 0 ; k < N - 1 ; k ++ ) { if ( a [ k ] > a [ k + 1 ] ) { temp = a [ k ] ; a [ k ] = a [ k + 1 ] ; a [ k + 1 ] = temp ; } } } printf ( \"%ld\n\" , a [ 0 ] * ( N - 1 ) ) ; } return 0 ; }", "label": 2, "id": 3974}
{"input": "int main ( ) { int t , a [ 50000 ] , n , i , s , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; c = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; while ( n != 1 ) { if ( a [ 0 ] >= a [ 1 ] ) { s = 0 ; c = c + a [ 1 ] ; } else { s = 1 ; c = c + a [ 0 ] ; } for ( i = s ; i < n ; i ++ ) a [ i ] = a [ i + 1 ] ; n = n - 1 ; } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 2, "id": 24881}
{"input": "int main ( ) { int a , b ; scanf ( \"%d\" , & a ) ; for ( b = 1 ; b <= a ; b ++ ) { int n1 , n2 , gcd , lcm , rem , num , dem ; scanf ( \"%d\\t\\t%d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { num = n1 ; dem = n2 ; } else { num = n2 ; dem = n1 ; } rem = num % dem ; while ( rem != 0 ) { num = dem ; dem = rem ; rem = num % dem ; } gcd = dem ; lcm = n1 * n2 / gcd ; printf ( \"%d\\t\\t%d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 5762}
{"input": "long long int gcd ( long long int , long long int ) ; long long int gcd ( long long int a , long long int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a <= b ) return gcd ( a , b % a ) ; if ( a > b ) return gcd ( b , a % b ) ; } int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { long long int A , B ; scanf ( \"%lld %lld\" , & A , & B ) ; long long int y ; y = gcd ( A , B ) ; long long int lcm = ( A * B ) / y ; printf ( \"%lld %lld\n\" , y , lcm ) ; } }", "label": 0, "id": 4168}
{"input": "int main ( ) { int i , j , n , t ; int s [ 100 ] [ 100 ] ; int sum = 0 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & s [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } for ( i = 1 ; i <= t ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { sum = sum + s [ i ] [ j ] ; } } printf ( \"%d\n\" , sum ) ; } }", "label": 3, "id": 4111}
{"input": "int in ( ) { char ch = gc ( ) ; register int i = 0 ; while ( ch < '0' || ch > '9' ) ch = gc ( ) ; while ( ! ( ch < '0' || ch > '9' ) ) { i = ( i << 3 ) + ( i << 1 ) + ch - '0' ; ch = gc ( ) ; } return ( i ) ; } int main ( ) { int a , b , lcm , gcd ; int t = in ( ) ; long l ; while ( t -- ) { lcm = a = in ( ) ; gcd = b = in ( ) ; while ( gcd != 0 && lcm != 0 ) { if ( lcm > gcd ) lcm = lcm % gcd ; else gcd = gcd % lcm ; } if ( ! gcd ) gcd = lcm ; l = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , l ) ; } }", "label": 1, "id": 14432}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; while ( n -- ) { int rows , i , j ; scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = rows - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { int max = a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = a [ i ] [ j ] + max ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2077}
{"input": "main ( ) { int n , m , a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = m - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) a [ i - 1 ] [ j ] += ( ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; n -- ; } }", "label": 0, "id": 4279}
{"input": "int main ( void ) { int t , a , j , b , i = 1 ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d%d\" , & a , & b ) ; while ( 1 ) { if ( a % i == 0 && b % i == 0 ) break ; i ++ ; } printf ( \"%d %d\n\" , i , ( a * b ) / i ) ; } return 0 ; }", "label": 1, "id": 2986}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( \"Enter two numbers\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"GCD of %d and %d = %d \n\" , num1 , num2 , gcd ) ; printf ( \"LCM of %d and %d = %d \n\" , num1 , num2 , lcm ) ; }", "label": 1, "id": 14274}
{"input": "int arraysum ( int array [ ] [ 99 ] , int i , int j , int n ) ; int memoSum [ 100 ] [ 100 ] ; main ( ) { int t = 0 ; scanf ( \"%d\" , & t ) ; int total = 0 ; while ( t > 0 ) { int n = 0 ; scanf ( \"%d\" , & n ) ; int i = 0 , j = 0 ; int array [ n ] [ 99 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { memoSum [ i ] [ j ] = - 1 ; scanf ( \"%d\" , & array [ i ] [ j ] ) ; } } total = arraysum ( array , 0 , 0 , n ) ; printf ( \"%d\n\" , total ) ; t -- ; } } int arraysum ( int array [ ] [ 99 ] , int i , int j , int n ) { int sum1 = 0 , sum2 = 0 ; if ( i < n ) { if ( memoSum [ i ] [ j ] == - 1 ) { sum1 = arraysum ( array , i + 1 , j , n ) ; sum2 = arraysum ( array , i + 1 , j + 1 , n ) ; if ( sum1 > sum2 ) memoSum [ i ] [ j ] = sum1 + array [ i ] [ j ] ; else memoSum [ i ] [ j ] = sum2 + array [ i ] [ j ] ; } return memoSum [ i ] [ j ] ; } return 0 ; }", "label": 0, "id": 11470}
{"input": "int max ( int a , int b ) { return ( ( a > b ) ? a : b ) ; } int s ( int dp [ ] [ 101 ] , int vis [ ] [ 101 ] , int i , int j , int a [ ] [ 101 ] , int n ) { if ( vis [ i ] [ j ] == 1 ) { return dp [ i ] [ j ] ; } if ( i == n - 1 || j == n - 1 ) { dp [ i ] [ j ] = a [ i ] [ j ] ; vis [ i ] [ j ] = 1 ; return a [ i ] [ j ] ; } dp [ i ] [ j ] = a [ i ] [ j ] + max ( s ( dp , vis , i + 1 , j , a , n ) , s ( dp , vis , i + 1 , j + 1 , a , n ) ) ; vis [ i ] [ j ] = 1 ; return dp [ i ] [ j ] ; } int main ( ) { int t ; int n ; int i ; int j ; int a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int dp [ 101 ] [ 101 ] ; int vis [ 101 ] [ 101 ] = { } ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , s ( dp , vis , 0 , 0 , a , n ) ) ; } return 0 ; }", "label": 0, "id": 8224}
{"input": "int t , i , j , nums [ 99 ] [ 99 ] , line , sum ; int main ( void ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & line ) ; for ( i = 0 ; i < line ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & nums [ i ] [ j ] ) ; for ( i = line - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) if ( nums [ i + 1 ] [ j ] >= nums [ i + 1 ] [ j + 1 ] ) { nums [ i ] [ j ] = nums [ i ] [ j ] + nums [ i + 1 ] [ j ] ; } else { nums [ i ] [ j ] = nums [ i ] [ j ] + nums [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , nums [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 14079}
{"input": "long long dope ( int tri [ ] [ 100 ] , int x , int y , int weed [ ] [ 100 ] ) { if ( weed [ x ] [ y ] != 0 ) return weed [ x ] [ y ] ; if ( x == 0 ) return weed [ x ] [ y ] = tri [ x ] [ y ] ; if ( y == 0 ) return weed [ x ] [ y ] = tri [ x ] [ y ] + dope ( tri , x - 1 , y , weed ) ; int p , q , r ; r = ( tri [ x - 1 ] [ y ] > tri [ x - 1 ] [ y - 1 ] ) ? 1 : 2 ; if ( r == 1 ) { p = x - 1 ; q = y ; } if ( r == 2 ) { p = x - 1 ; q = y - 1 ; } return weed [ 100 ] [ 100 ] = tri [ x ] [ y ] + dope ( tri , p , q , weed ) ; } long long maxsum ( int n , int tri [ ] [ 100 ] ) { int i ; int weed [ 100 ] [ 100 ] = { 0 } ; long long max = 0 , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum = dope ( tri , n - 1 , i , weed ) ; if ( sum > max ) max = sum ; } return max ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int tri [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) tri [ i ] [ j ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & tri [ i ] [ j ] ) ; printf ( \"%lld\n\" , maxsum ( n , tri ) ) ; } }", "label": 1, "id": 4115}
{"input": "int a [ 100 ] [ 100 ] , s [ 100 ] [ 100 ] ; int sum ( int ) ; int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\" , sum ( n ) ) ; printf ( \"\n\" ) ; t -- ; } return 0 ; } int sum ( int n ) { int k = 0 , i , j = 0 , m = - 1 ; s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 , k = j ; j <= i + 1 ; j ++ ) { s [ i + 1 ] [ j ] = s [ i ] [ k ] + a [ i + 1 ] [ j ] ; } } for ( i = 0 ; i < n ; i ++ ) { if ( s [ n - 1 ] [ i ] > m ) m = s [ n - 1 ] [ i ] ; } return m ; }", "label": 1, "id": 1237}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , m , a , b ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & m ) ; a = gcd ( n , m ) ; printf ( \"%d \" , a ) ; b = lcm ( n , m ) ; printf ( \"%d\" , b ) ; printf ( \"\n\" ) ; } } int gcd ( int n , int m ) { if ( m == 0 ) return n ; else return gcd ( m , n % m ) ; } int lcm ( int n , int m ) { int i ; if ( n >= m ) { int c = n % m ; for ( i = n - c ; i <= n * m ; i = i + m ) { if ( i % n == 0 ) break ; } } if ( m > n ) { int c = m % n ; for ( i = m - c ; i <= n * m ; i = i + n ) { if ( i % m == 0 ) break ; } } return i ; }", "label": 1, "id": 10682}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { long int t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long int a , b , g , l ; scanf ( \"%ld%ld\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 13196}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t ; long long int a , b , min = 0 , max = 0 , hcf = 0 , lcm = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- != 0 ) { scanf ( \"%lld%lld\" , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { ; max = b ; } hcf = gcd ( min , max ) ; lcm = ( a * b / hcf ) ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; } long int gcd ( long int a , long int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 23405}
{"input": "int main ( ) { int n , t , i , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 22807}
{"input": "int main ( int argc , char const * argv [ ] ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int h ; scanf ( \"%d\" , & h ) ; int numOfElements ; numOfElements = h * ( h + 1 ) / 2 ; int arr [ CONST ] ; int colsums [ 100 ] ; int i = 0 ; for ( ; i < numOfElements ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } int j = 0 , sum = 0 ; for ( i = 0 ; i < h ; i ++ ) { int k , max ; max = arr [ j ] ; for ( k = j ; k < j + i ; k ++ ) { if ( arr [ k ] > max ) max = arr [ k ] ; } sum += max ; j += ( i + 1 ) ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 12202}
{"input": "int maximum ( int a , int b ) ; int main ( void ) { int i , j , k , r , m [ 100 ] [ 100 ] , max ; int n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { max = 0 ; scanf ( \"%d\" , & r ) ; for ( j = 0 ; j < r ; j ++ ) ; for ( k = 0 ; k <= j ; k ++ ) m [ j ] [ k ] = 0 ; for ( j = 0 ; j < r ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & m [ j ] [ k ] ) ; if ( j > 0 ) { if ( k != j && k > 0 ) m [ j ] [ k ] += maximum ( m [ j - 1 ] [ k - 1 ] , m [ j - 1 ] [ k ] ) ; else if ( k != j ) m [ j ] [ k ] += m [ j - 1 ] [ k ] ; else m [ j ] [ k ] += m [ j - 1 ] [ k - 1 ] ; } } for ( j = 0 ; j < r ; j ++ ) if ( m [ r - 1 ] [ j ] > max ) max = m [ r - 1 ] [ j ] ; printf ( \"%d\n\" , max ) ; } return 0 ; } int maximum ( int a , int b ) { if ( a > b ) return a ; return b ; }", "label": 3, "id": 17054}
{"input": "int arr [ 20 ] [ 20 ] , res [ 20 ] [ 20 ] , len ; int foo ( int i , int j ) { int sum1 = 0 , sum2 = 0 , sum = 0 ; if ( i >= len ) { return 0 ; } if ( res [ i ] [ j ] != - 1 ) { return res [ i ] [ j ] ; } sum1 = sum1 + foo ( i + 1 , j ) ; sum2 += foo ( i + 1 , j + 1 ) ; sum = ( sum1 > sum2 ? sum1 + arr [ i ] [ j ] : sum2 + arr [ i ] [ j ] ) ; res [ i ] [ j ] = sum ; return sum ; } int main ( ) { int i , j , tcase ; scanf ( \"%d\" , & tcase ) ; while ( tcase ) { int sum = 0 ; scanf ( \"%d\" , & len ) ; for ( i = 0 ; i < 20 ; i ++ ) for ( j = 0 ; j < 20 ; j ++ ) res [ i ] [ j ] = - 1 ; for ( i = 0 ; i < len ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; sum = foo ( 0 , 0 ) ; printf ( \"%d\n\" , sum ) ; tcase -- ; } }", "label": 3, "id": 360}
{"input": "int main ( void ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n , j , k ; scanf ( \"%d\" , & n ) ; long long a [ n ] , c = 0 ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lld\" , & a [ j ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { int l = 0 ; for ( k = j + 1 ; k < n ; k ++ ) { if ( a [ k ] - a [ j + l ] >= 0 ) { c ++ ; l ++ ; } else break ; } } printf ( \"%lld \n\" , c + n ) ; } return 0 ; }", "label": 1, "id": 15151}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int scan ( ) { int n = 0 ; int ch = getchar_unlocked ( ) ; while ( ch < '0' || ch > '9' ) ch = getchar_unlocked ( ) ; while ( ch >= '0' && ch <= '9' ) { n = ( n * 10 ) + ch - '0' ; ch = getchar_unlocked ( ) ; } return n ; } main ( ) { int maxa , i , j , t , n , a [ 101 ] [ 101 ] , s [ 101 ] [ 101 ] ; t = scan ( ) ; while ( t -- ) { for ( i = 0 ; i < 101 ; i ++ ) { s [ i ] [ 0 ] = 0 ; } for ( i = 0 ; i < 101 ; i ++ ) { s [ 0 ] [ i ] = 0 ; } n = scan ( ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] = scan ( ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - 1 ] [ j - 1 ] , s [ i - 1 ] [ j ] ) ; } } maxa = s [ n ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( s [ n ] [ i ] > maxa ) maxa = s [ n ] [ i ] ; } printf ( \"%d\n\" , maxa ) ; } return 0 ; }", "label": 1, "id": 21994}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int n , rows ; int r [ n ] ; scanf ( \"%d \" , & n ) ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d \" , & rows ) ; int t [ rows ] [ 100 ] ; int j , k ; for ( j = 0 ; j < rows ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & t [ j ] [ k ] ) ; } } for ( j = rows - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { int c = max ( t [ j + 1 ] [ k ] , t [ j + 1 ] [ k + 1 ] ) ; t [ j ] [ k ] = t [ j ] [ k ] + c ; } } r [ i ] = t [ 0 ] [ 0 ] ; } int l ; for ( l = 0 ; l < n ; l ++ ) printf ( \"%d \n\" , r [ l ] ) ; return 0 ; }", "label": 3, "id": 13598}
{"input": "int main ( ) { int arr [ 101 ] [ 101 ] ; int arr2 [ 101 ] [ 101 ] ; int temp = 0 , input , x , i = 0 , j = 0 ; scanf ( \"%d\" , & input ) ; while ( input != 0 ) { temp = 0 ; scanf ( \"%d\" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = 0 ; arr2 [ i ] [ j ] = 0 ; scanf ( \"%d\" , & arr [ i ] [ j ] ) ; arr2 [ i ] [ j ] = arr [ i ] [ j ] ; } } for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] < ( arr2 [ i + 1 ] [ j ] + arr [ i ] [ j ] ) ) arr [ i + 1 ] [ j ] = arr2 [ i + 1 ] [ j ] + arr [ i ] [ j ] ; if ( arr [ i + 1 ] [ j + 1 ] < ( arr2 [ i + 1 ] [ j + 1 ] + arr [ i ] [ j ] ) ) arr [ i + 1 ] [ j + 1 ] = arr2 [ i + 1 ] [ j + 1 ] + arr [ i ] [ j ] ; if ( temp < arr [ i + 1 ] [ j ] ) temp = arr [ i + 1 ] [ j ] ; } } printf ( \"%d\n\" , temp ) ; input -- ; } return 0 ; }", "label": 1, "id": 23101}
{"input": "void main ( ) { long long int t , i , j , gcd = 1 , lcm , k , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & i , & j ) ; x = ( i > j ) ? j : i ; while ( x > 1 ) { if ( ( i % x == 0 ) && ( j % x == 0 ) ) break ; x -- ; } gcd = x ; lcm = i * j / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 7626}
{"input": "long long a [ 100000 ] ; int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int n ; scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } long long min = 100000 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 1735}
{"input": "int a [ 100 ] [ 100 ] ; int solve ( int , int , int ) ; int main ( ) { int i , j , n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } int ans = solve ( 0 , 0 , n ) ; printf ( \"%d\" , ans ) ; } return 0 ; } int solve ( int i , int j , int n ) { int t , t1 , t2 ; if ( i > n ) return 0 ; t1 = solve ( i + 1 , j , n ) ; t2 = solve ( i + 1 , j + 1 , n ) ; t = a [ i ] [ j ] + ( t1 > t2 ? t1 : t2 ) ; return t ; }", "label": 2, "id": 24103}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int m , n , m1 , n1 , r ; scanf ( \"%d%d\" , & m , & n ) ; m1 = m ; n1 = n ; while ( n != 0 ) { r = m % n ; m = n ; n = r ; } printf ( \"%d %d\n\" , m , ( ( m1 * n1 ) / m ) ) ; } return 0 ; }", "label": 1, "id": 3483}
{"input": "int main ( ) { int t ; int n , j ; int count = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; count = 0 ; int a [ n ] , i ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) count = count + 1 ; } printf ( \"%d\n\" , count + n ) ; count = 0 ; } }", "label": 1, "id": 23700}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , n , m ; scanf ( \"%d%d\" , & a , & b ) ; n = a ; m = b ; while ( n != m ) { if ( n > m ) n -= m ; else m -= n ; } printf ( \"%d %d\n\" , n , a * b / n ) ; } return 0 ; }", "label": 1, "id": 10504}
{"input": "int main ( ) { int i , j , k , sum = 0 , maxsum = 0 , l , n , t ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { maxsum = 0 ; scanf ( \"%d\" , & n ) ; int array [ n ] [ n ] ; for ( j = 0 ; j < n ; j ++ ) { sum = 0 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , array [ j ] [ k ] ) ; sum = sum + array [ j ] [ k ] ; } if ( sum > maxsum ) maxsum = sum ; } printf ( \"%d\" , maxsum ) ; } return 0 ; }", "label": 3, "id": 12938}
{"input": "int findpathsum ( int triangle [ ] [ 101 ] , int i , int j ) { int val1 , val2 ; if ( triangle [ i ] [ j ] == - 1 ) return 0 ; val1 = findpathsum ( triangle , i + 1 , j ) ; val2 = findpathsum ( triangle , i + 1 , j + 1 ) ; if ( val1 > val2 ) return triangle [ i ] [ j ] + val1 ; else return triangle [ i ] [ j ] + val2 ; } int main ( ) { int nt , nr ; int i , j , k ; int triangle [ 101 ] [ 101 ] ; int sol [ 1000 ] , sol_i ; sol_i = 0 ; scanf ( \"%d\" , & nt ) ; for ( i = 0 ; i < nt ; i ++ ) { scanf ( \"%d\" , & nr ) ; for ( j = 0 ; j < nr ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & triangle [ j ] [ k ] ) ; } for ( k = 0 ; k <= j ; k ++ ) triangle [ j ] [ k ] = - 1 ; sol [ sol_i ++ ] = findpathsum ( triangle , 0 , 0 ) ; } for ( i = 0 ; i < sol_i ; i ++ ) printf ( \"%d\n\" , sol [ i ] ) ; return 0 ; }", "label": 2, "id": 9855}
{"input": "int arr [ 100100 ] [ 100 ] , indArr [ 1005 ] , resSum [ 100 ] ; int init ( ) { long int i = 0 ; int j = 0 ; for ( ; i < 100100 ; i ++ ) { for ( ; j < 100 ; j ++ ) arr [ i ] [ j ] = - 1 ; } for ( i = 0 ; i < 1005 ; i ++ ) indArr [ i ] = - 1 ; for ( i = 0 ; i < 200 ; i ++ ) resSum [ i ] = 0 ; indArr [ 0 ] = 0 ; } long int findMax ( long int index , long int rowC ) { long int indexM = 0 , i = 0 ; for ( ; i <= rowC ; i ++ ) { if ( arr [ index ] [ i ] > arr [ index ] [ indexM ] ) indexM = i ; } return indexM ; } long int findMax2 ( long int index , long int rowC ) { if ( rowC == 0 ) return rowC ; else if ( arr [ index ] [ rowC ] == - 1 ) return rowC - 1 ; else { if ( arr [ index ] [ rowC ] > arr [ index ] [ rowC - 1 ] ) return rowC ; else return rowC - 1 ; } } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } void findTempSum ( long int startI , long int rowC ) { long int j = startI , i = 0 ; for ( ; i < rowC - 1 ; i ++ ) { resSum [ i ] = max ( ( resSum [ i ] + arr [ startI - 1 ] [ i ] ) , ( resSum [ i + 1 ] + arr [ startI - 1 ] [ i ] ) ) ; } } void SumMaxLength ( long int startI , long int rowC ) { long int sumMax = 0 , j = 0 , indexM = 0 , i = 0 ; for ( ; i < rowC ; i ++ ) { resSum [ i ] = arr [ startI + rowC - 1 ] [ i ] ; } for ( ; j < rowC - 1 ; j ++ ) { findTempSum ( startI + rowC - j - 1 , rowC - j ) ; } printf ( \"%ld\n\" , resSum [ 0 ] ) ; } int main ( ) { int cnt = 0 , len = 0 , val , j = 0 , indarr = 0 ; long int i = 0 ; scanf ( \"%d\" , & cnt ) ; indArr [ indarr ++ ] = 0 ; while ( cnt -- ) { scanf ( \"%d\" , & val ) ; indArr [ indarr ] = indArr [ indarr - 1 ] + val ; len = 1 ; while ( val -- ) { for ( j = 0 ; j < len ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; i ++ ; len ++ ; } SumMaxLength ( indArr [ indarr - 1 ] , indArr [ indarr ] - indArr [ indarr - 1 ] ) ; indarr ++ ; } return 0 ; }", "label": 0, "id": 16705}
{"input": "int main ( ) { int t , a , b , lcm , hcf , temp ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) { temp = b ; b = a ; a = temp ; } if ( a % b == 0 ) { lcm = a ; hcf = b ; } else { hcf = 1 ; lcm = a * b ; } printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 17238}
{"input": "int main ( ) { int t , a ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; int arr [ a ] , min ; for ( int i = 0 ; i < a ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( ! i || arr [ i ] < min ) min = arr [ i ] ; } printf ( \"%lld\n\" , ( long long int ) ( a - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 23504}
{"input": "int main ( ) { int t , min , i , j , n , arr [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; min = 0 ; for ( j = 1 ; j < n ; j ++ ) { if ( arr [ min ] > arr [ j ] ) min = j ; } printf ( \"%d\n\" , ( n - 1 ) * arr [ min ] ) ; } return 0 ; }", "label": 0, "id": 21332}
{"input": "int main ( void ) { int n , l , i , j , a [ 99 ] [ 99 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & l ) ; for ( i = 1 ; i <= l ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } if ( l == 1 ) printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; else { for ( i = l - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } } return 0 ; }", "label": 3, "id": 3947}
{"input": "int solve ( int i , int j , int n , int a [ n ] [ n ] ) { if ( i > ( n - 1 ) ) return 0 ; int t1 = solve ( i + 1 , j , n , a ) ; int t2 = solve ( i + 1 , j + 1 , n , a ) ; int t = ( t1 > t2 ? t1 : t2 ) + a [ i ] [ j ] ; return t ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\n\" , solve ( 0 , 0 , n , a ) ) ; } return 0 ; }", "label": 2, "id": 24550}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int max = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < max ) max = a [ i ] ; } printf ( \"%d\n\" , max * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 26221}
{"input": "int main ( ) { int k = 0 , t = 0 , j = 0 , line = 0 , tot = 0 , s1 = 0 , s2 = 0 , s = sizeof ( int ) , count = 0 , n = 0 , i = 0 , * a = NULL , * max = NULL ; scanf ( \"%d\" , & t ) ; while ( ++ j <= t ) { scanf ( \"%d\" , & n ) ; tot = ( n * ( n + 1 ) ) / 2 ; a = ( int * ) malloc ( s * tot ) ; max = ( int * ) malloc ( s * tot ) ; if ( max == NULL || a == NULL ) { printf ( \"Error\" ) ; exit ( - 1 ) ; } for ( i = 0 ; i < tot ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } i = tot - 1 ; line = n ; for ( ; i >= 0 ; i -- ) { if ( line == n ) { max [ i ] = a [ i ] ; } else { s1 = a [ i ] + max [ i + line ] ; s2 = a [ i ] + max [ i + 1 + line ] ; if ( s1 >= s2 ) { max [ i ] = s1 ; } else max [ i ] = s2 ; } count ++ ; if ( count == line ) { count = 0 ; line -- ; } free ( a ) ; free ( max ) ; count = 0 ; } for ( k = 0 ; k < tot ; k ++ ) printf ( \"\n\nk:%d     %d\n\n\" , k , a [ k ] ) ; printf ( \"Max array\n\" ) ; for ( k = 0 ; k < tot ; k ++ ) printf ( \"\n\nk:%d %d\n\n\" , k , max [ k ] ) ; } return 1 ; }", "label": 3, "id": 6175}
{"input": "long GCD ( long a , long b ) { long r = a % b ; while ( r > 0 ) { a = b ; b = r ; r = a % b ; } return b ; } int main ( void ) { int T ; long a , b , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- > 0 ) { scanf ( \"%ld\" , & a ) ; scanf ( \"%ld\" , & b ) ; gcd = GCD ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 13289}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , hcf ; scanf ( \"%d  %d\" , & a , & b ) ; hcf = gcd ( a , b ) ; printf ( \"%d %d\n\" , hcf , ( a * b / hcf ) ) ; } return 0 ; } int gcd ( int p , int q ) { if ( p == 0 ) return q ; else return gcd ( q % p , p ) ; }", "label": 1, "id": 3317}
{"input": "int a [ 100 ] [ 100 ] , n ; int main ( ) { char c [ 10 ] ; int i , j , t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( j = 0 ; j < n + 1 ; j ++ ) a [ n ] [ j ] = 0 ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; else a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } } c [ k ] = a [ 0 ] [ 0 ] ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"\n%d\" , c [ i ] ) ; return ( 0 ) ; }", "label": 3, "id": 20333}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int n ; scanf ( \"%d\" , & n ) ; int i , j ; long long int s [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%lld\" , & s [ i ] [ j ] ) ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j > 0 ; j -- ) { if ( s [ i ] [ j ] > s [ i ] [ j - 1 ] ) s [ i - 1 ] [ j - 1 ] += s [ i ] [ j ] ; else s [ i - 1 ] [ j - 1 ] += s [ i ] [ j - 1 ] ; } } printf ( \"%lld\n\" , s [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 1, "id": 21393}
{"input": "int main ( ) { int input , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & input ) ; for ( int i = 0 ; i < input ; i ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 18276}
{"input": "int main ( ) { int t ; long int a , b , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) { i = a ; a = b ; b = i ; } for ( i = a ; i > 0 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { printf ( \"%ld %ld\n\" , i , ( a * b ) / i ) ; break ; } } } return 0 ; }", "label": 2, "id": 7533}
{"input": "int main ( ) { int n1 , n2 , minMultiple ; int gcd ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( int i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } printf ( \"%d \" , gcd ) ; minMultiple = ( n1 > n2 ) ? n1 : n2 ; while ( 1 ) { if ( minMultiple % n1 == 0 && minMultiple % n2 == 0 ) { printf ( \"%d\n\" , minMultiple ) ; break ; } ++ minMultiple ; } } return 0 ; }", "label": 2, "id": 21027}
{"input": "int main ( void ) { int i , k , length , m , n , T , N , A [ 100000 ] ; int sum = 0 ; printf ( \"enter the no of test cases:\n\" ) ; scanf ( \"%d\" , & T ) ; printf ( \"enter the size of array:\n\" ) ; scanf ( \"%d\" , & N ) ; printf ( \"enter the array elements:\n\" ) ; for ( i = 1 ; i <= T ; i ++ ) { for ( k = 0 ; k < N ; k ++ ) scanf ( \"%d\" , & A [ k ] ) ; for ( m = 0 ; m < N ; m ++ ) { if ( A [ m ] > A [ m + 1 ] ) A [ m ] = A [ m + 1 ] ; } length = sizeof ( A ) / sizeof ( int ) ; for ( n = 0 ; n < length ; n ++ ) sum += A [ n ] ; } return sum ; }", "label": 3, "id": 916}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 9979}
{"input": "int memo [ 105 ] [ 105 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int computedp ( int a [ 105 ] [ 105 ] , int n , int row , int col ) { if ( row == n - 1 ) return a [ row ] [ col ] ; if ( memo [ row ] [ col ] != - 1 ) return memo [ row ] [ col ] ; memo [ row ] [ col ] = max ( a [ row ] [ col ] + computedp ( a , n , row + 1 , col ) , a [ row ] [ col ] + computedp ( a , n , row + 1 , col + 1 ) ) ; return memo [ row ] [ col ] ; } int main ( ) { int a [ 105 ] [ 105 ] , n , i , j , k , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { memset ( memo , - 1 , sizeof ( memo ) ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , computedp ( a , n , 0 , 0 ) ) ; } return 0 ; }", "label": 0, "id": 309}
{"input": "int striangle ( int arr [ 100 ] [ 100 ] , int i , int j , int n ) ; int arr [ 100 ] [ 100 ] ; int main ( ) { int t , n , sum , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; sum = striangle ( arr , 0 , 0 , n ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; } int striangle ( int arr [ 100 ] [ 100 ] , int i , int j , int n ) { int max1 , max2 ; if ( i == n - 1 ) return arr [ i ] [ j ] ; max1 = striangle ( arr , i + 1 , j , n ) ; max2 = striangle ( arr , i + 1 , j + 1 , n ) ; if ( max1 > max2 ) return arr [ i ] [ j ] + max1 ; else return arr [ i ] [ j ] + max2 ; }", "label": 2, "id": 3428}
{"input": "void main ( ) { int t , n , a , z [ 50000 ] , s [ 50000 ] , i = 0 , c = 0 , p , b ; scanf ( \"%d\" , & t ) ; for ( b = 1 ; b <= t ; b ++ ) { scanf ( \"%d\" , & n ) ; i = 0 ; c = 0 ; for ( a = 0 ; a < n ; a ++ ) { scanf ( \"%d\" , & z [ a ] ) ; s [ a ] = z [ a ] ; } for ( p = 0 ; p < n - i ; p ++ ) { if ( z [ p ] > z [ p + 1 ] ) { c = z [ p + 1 ] + c ; i = i + 1 ; for ( a = 0 ; a < p ; a ++ ) { s [ a ] = z [ a ] ; } for ( a = p + 1 ; a < n - i ; a ++ ) { s [ a ] = z [ a ] ; } } else { c = z [ p ] + c ; i = i + 1 ; for ( a = 0 ; a < p + 1 ; a ++ ) { s [ a ] = z [ a ] ; } for ( a = p + 2 ; a < n - i ; a ++ ) { s [ a ] = z [ a ] ; } } } printf ( \"%d\" , c ) ; } }", "label": 2, "id": 14124}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , r , t , s = 0 , i , j , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < r ; ) for ( j = 0 ; j <= i ; ) { s += a [ i ] [ j ] ; if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) i ++ ; else { i ++ ; j ++ ; } } } }", "label": 3, "id": 555}
{"input": "int a [ 101 ] [ 101 ] , t = 1 , ans [ 10000 ] , rows ; void below ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + 1 ; } else { i = i + 1 ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } } void right ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + 1 ; } else { i = i + 1 ; j = j + 1 ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } } int main ( ) { int i , j , test_case , k , r , max = 0 ; scanf ( \"%d\" , & test_case ) ; for ( i = 1 ; i <= test_case ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 1 ; j <= rows ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } below ( 1 , 1 , 1 ) ; right ( 1 , 1 , 1 ) ; for ( r = 1 ; ans [ r ] != '\\0' ; r ++ ) { if ( ans [ r ] > max ) max = ans [ r ] ; } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 3, "id": 2343}
{"input": "void sum ( int * s , int * temp , int a [ 100 ] [ 100 ] , int r , int c , int n ) { int k , p = n - 1 , l ; for ( k = c ; ( k >= c - 1 && k >= 0 ) && r >= 0 ; ) { l = 0 ; if ( k <= r ) { * s += a [ r ] [ k ] ; sum ( s , temp , a , r - 1 , k , n ) ; l ++ ; } if ( r == p ) break ; if ( ! l ) k -- ; else * s -= a [ r ] [ k -- ] ; } if ( r < 0 && ( * temp <= * s ) ) * temp = * s ; } int main ( ) { int t , n , s , temp = 0 , i , j , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { s = 0 ; sum ( & s , & temp , a , n - 1 , i , n ) ; } printf ( \"%d\n\" , temp ) ; } return ( 0 ) ; }", "label": 2, "id": 23082}
{"input": "int arr [ R ] [ C ] ; void reduce ( int , int ) ; int main ( ) { int count , t , n , row , col , i , j ; scanf ( \"%d\" , & t ) ; for ( count = 0 ; count < t ; ++ count ) { scanf ( \"%d\" , & n ) ; for ( row = 0 ; row < n ; ++ row ) { for ( col = 0 ; col <= row ; ++ col ) { scanf ( \"%d\" , & arr [ row ] [ col ] ) ; } } for ( i = row - 2 ; i >= 0 ; -- i ) { for ( j = 0 ; j <= i ; ++ j ) reduce ( i , j ) ; } printf ( \"%d\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; } void reduce ( int r , int c ) { int temp1 , temp2 ; temp1 = arr [ r + 1 ] [ c ] ; temp2 = arr [ r + 1 ] [ c + 1 ] ; if ( temp1 > temp2 ) arr [ r ] [ c ] += temp1 ; else arr [ r ] [ c ] += temp2 ; }", "label": 1, "id": 18464}
{"input": "int sum [ 128 ] [ 128 ] ; int array [ 128 ] [ 128 ] ; int main ( ) { int k , test , i , j , temp , n ; scanf ( \"%d\" , & test ) ; for ( k = 1 ; k <= test ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & array [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { temp = INT_MIN ; if ( ( i - 1 ) >= 1 ) { if ( ( j - 1 ) >= 1 ) temp = sum [ i - 1 ] [ j - 1 ] + array [ i ] [ j ] ; if ( ( temp < ( sum [ i - 1 ] [ j ] + array [ i ] [ j ] ) ) ) temp = sum [ i - 1 ] [ j ] + array [ i ] [ j ] ; sum [ i ] [ j ] = temp ; } else sum [ i ] [ j ] = array [ i ] [ j ] ; } } temp = sum [ n ] [ 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { if ( temp < sum [ n ] [ i ] ) temp = sum [ n ] [ i ] ; } printf ( \"%d\n\" , temp ) ; } return 0 ; }", "label": 0, "id": 10010}
{"input": "int * * triangle ; int H ; int getMax ( int i , int k ) { if ( i == H - 1 ) { return triangle [ i ] [ k ] ; } else { int max = 0 , left , right ; left = getMax ( i + 1 , k ) ; right = getMax ( i + 1 , k + 1 ) ; max = left > right ? left : right ; return triangle [ i ] [ k ] + max ; } } int main ( ) { int T , i , j ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & H ) ; triangle = ( int * * ) malloc ( sizeof ( int * ) * H ) ; for ( i = 0 ; i < H ; i ++ ) triangle [ i ] = ( int * ) malloc ( sizeof ( int ) * H ) ; for ( i = 0 ; i < H ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; printf ( \"%d\n\" , getMax ( 0 , 0 ) ) ; } }", "label": 2, "id": 16524}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( void ) { long long int t , G , L ; scanf ( \"%lld\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long long int a , b ; scanf ( \"%lld %lld\" , & a , & b ) ; G = gcd ( a , b ) ; L = ( a * b ) / G ; printf ( \"%lld  %lld\n\" , G , L ) ; } return 0 ; }", "label": 0, "id": 18894}
{"input": "int main ( ) { int testCases , sizeArrayN , arrayNum [ 50000 ] , i , j ; scanf ( \"%d\" , & testCases ) ; for ( i = 0 ; i < testCases ; i ++ ) { scanf ( \"%d\" , & sizeArrayN ) ; int min = 100001 ; for ( j = 0 ; j < sizeArrayN ; j ++ ) { scanf ( \"%d\" , & arrayNum [ j ] ) ; if ( arrayNum [ j ] < min ) min = arrayNum [ j ] ; } int price = ( sizeArrayN - 1 ) * min ; printf ( \"%d\n\" , price ) ; } return 0 ; }", "label": 0, "id": 2858}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2010}
{"input": "int main ( ) { int t , n , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a [ 5000 ] = { 0 } ; scanf ( \"%d\" , & n ) ; int j ; for ( j = 0 ; j < ( n * ( n + 1 ) ) / 2 ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; while ( n != 1 ) { n -- ; int k ; for ( k = ( ( n - 1 ) * n ) / 2 ; k < ( n * ( n + 1 ) ) / 2 ; k ++ ) { if ( a [ k ] + a [ k + n ] < a [ k ] + a [ k + n + 1 ] ) a [ k ] = a [ k ] + a [ k + n + 1 ] ; else a [ k ] = a [ k ] + a [ k + n ] ; } } printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 1451}
{"input": "int main ( ) { long long int testCase , i ; scanf ( \"%lld\" , & testCase ) ; for ( i = 0 ; i < testCase ; i ++ ) { long long int num , arr [ 100001 ] , j ; scanf ( \"%lld\" , & num ) ; long long int count = num ; for ( j = 0 ; j < num ; j ++ ) { scanf ( \"%lld\" , & arr [ j ] ) ; } for ( j = 0 ; j < num ; j ++ ) { if ( arr [ j + 1 ] > arr [ j ] ) { count ++ ; } } printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 1, "id": 18959}
{"input": "int main ( ) { int t , n , i , j , count , l = 0 ; int a [ 10 ^ 9 ] ; scanf ( \"%d\" , & t ) ; while ( t >= 1 && t <= 5 ) { count = 0 , n = 0 ; scanf ( \"%d\" , & n ) ; if ( n >= 1 && n <= 1000 ) { for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { count ++ ; i = j ; } else break ; } } l = count + n ; printf ( \"%d\n\" , l ) ; t -- ; } return 0 ; }", "label": 3, "id": 22818}
{"input": "int main ( ) { int i , j , k , t , a [ 100 ] , b [ 100 ] , n , sum = 0 , m , max ; printf ( \"enter the no. of test cases\" ) ; scanf ( \"%d\" , & t ) ; m = 0 ; while ( m < t ) { printf ( \"enter no.of rows\" ) ; scanf ( \"%d\" , & n ) ; printf ( \"enter the numbers\n\" ) ; for ( i = 0 ; i < ( n * ( n + 1 ) ) / 2 ; i ++ ) scanf ( \"%d\" , & b [ i ] ) ; k = 0 ; j = 0 ; for ( i = 0 ; i < ( n - 1 ) ; i ++ ) { sum = b [ k ] + b [ k + j + 1 ] + b [ k + j + 2 ] ; a [ i ] = sum ; k = k + j + 1 ; j ++ ; } max = a [ 0 ] ; for ( j = 1 ; j < ( n - 1 ) ; j ++ ) { if ( max < a [ j ] ) max = a [ j ] ; } printf ( \"the largest sum=%d\n\" , max ) ; m ++ ; } return 0 ; }", "label": 3, "id": 11882}
{"input": "int sumtran ( int n , int triangle [ ] [ 100 ] , int rown , int coln , int store [ ] [ 100 ] ) ; int main ( ) { int t , i , j , k , n , sum , triangle [ 100 ] [ 100 ] = { 0 } , store [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & triangle [ j ] [ k ] ) ; } sum = sumtran ( n , triangle , 0 , 0 , store ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; } int sumtran ( int n , int triangle [ ] [ 100 ] , int rown , int coln , int store [ ] [ 100 ] ) { if ( store [ rown ] [ coln ] != 0 ) return store [ rown ] [ coln ] ; int prev_sum ; if ( rown >= n ) return triangle [ rown ] [ coln ] ; if ( sumtran ( n , triangle , rown + 1 , coln , store ) > sumtran ( n , triangle , rown + 1 , coln + 1 , store ) ) prev_sum = sumtran ( n , triangle , rown + 1 , coln , store ) + triangle [ rown ] [ coln ] ; else prev_sum = sumtran ( n , triangle , rown + 1 , coln + 1 , store ) + triangle [ rown ] [ coln ] ; store [ rown ] [ coln ] = prev_sum ; return prev_sum ; }", "label": 1, "id": 24643}
{"input": "int main ( ) { long long int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { long long int x , y , z , l , p = 0 ; scanf ( \"%lld\" , & x ) ; long long int a [ 100005 ] ; for ( i = 0 ; i < x ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 0 ; i < x ; i ++ ) { for ( j = i ; j < x ; j ++ ) { p ++ ; if ( a [ j ] > a [ j + 1 ] ) { break ; } } } printf ( \"%lld\n\" , p ) ; t -- ; } }", "label": 0, "id": 19633}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long a , b , n1 , n2 ; scanf ( \"%ld%ld\" , & a , & b ) ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%ld %ld\n\" , a , ( n1 * n2 ) / a ) ; } return 0 ; }", "label": 0, "id": 13355}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] = { { 0 } } ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25968}
{"input": "int main ( ) { int i , j , t , n , max , a [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; sum [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; max = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 0 ) sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else if ( sum [ i - 1 ] [ j ] > sum [ i - 1 ] [ j - 1 ] ) sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + a [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 1203}
{"input": "int ma ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int i , j , n , t , ar [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } sum [ 0 ] [ 0 ] = ar [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { sum [ i ] [ i ] = sum [ i - 1 ] [ i - 1 ] + ar [ i ] [ i ] ; sum [ i ] [ 0 ] = sum [ i - 1 ] [ 0 ] + ar [ i ] [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) { sum [ i ] [ j ] = ma ( sum [ i - 1 ] [ i - 1 ] , sum [ i - 1 ] [ i - 2 ] ) + ar [ i ] [ j ] ; } } int l = 0 ; for ( i = 0 ; i < n ; i ++ ) { l = ma ( l , sum [ n - 1 ] [ i ] ) ; } } return 0 ; }", "label": 1, "id": 7693}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; return gcd ( b , a % b ) ; } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int x , y , l = 0 , g = 0 ; scanf ( \"%d %d\" , & x , & y ) ; if ( x > y ) g = gcd ( x , y ) ; else g = gcd ( y , x ) ; l = ( x * y ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 4191}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , sum = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 1 ; i < n ; i ++ ) { if ( a [ sum ] > a [ i ] ) a [ sum ] = a [ i ] ; } a [ sum ] = a [ sum ] * ( n - 1 ) ; printf ( \"%lld\n\" , a [ sum ] ) ; } return 0 ; }", "label": 0, "id": 7121}
{"input": "int main ( ) { long long int t , n , val , i , temp ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { val = 10000000 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & temp ) ; if ( val > temp ) val = temp ; } printf ( \"%lld\n\" , val * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 15818}
{"input": "int main ( ) { int a , b , t , c , i , n , j , d , p , q , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a >= b ) { p = a ; q = b ; } else { p = b ; q = a ; } c = 1 ; for ( i = 2 ; i <= p ; i ++ ) { if ( a == 1 && b == 1 ) break ; d = 0 ; for ( j = 2 ; j <= i / 2 ; j ++ ) { if ( i % j == 0 ) d = 1 ; } if ( d == 0 ) { while ( a % i == 0 || b % i == 0 ) { if ( a % i == 0 ) a = a / i ; if ( b % i == 0 ) b = b / i ; c = c * i ; } } if ( a >= b ) p = a ; else p = b ; } r = q ; while ( r > 0 ) { q = r ; r = p % q ; p = q ; } printf ( \"%d %d\n\" , q , c ) ; } return 0 ; }", "label": 2, "id": 7166}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int i ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ 0 ] > a [ i ] ) a [ 0 ] = a [ i ] ; } printf ( \"%lld\n\" , a [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 21123}
{"input": "void quicksort ( long int [ ] , long int , long int ) ; int main ( void ) { int T ; long long int size , min , i , temp ; scanf ( \"%d\" , & T ) ; while ( T -- > 0 ) { scanf ( \"%lld%lld\" , & size , & min ) ; for ( i = 1 ; i < size ; i ++ ) { scanf ( \"%lld\" , & temp ) ; if ( temp < min ) min = temp ; } min = ( size - 1 ) * min ; printf ( \"%lld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 22044}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , d , r , gcd , lcm , a , b ; scanf ( \"%d%d\" , & n , & d ) ; a = n ; b = d ; while ( d != 0 ) { r = n % d ; if ( r == 0 ) { gcd = d ; printf ( \"%d \" , gcd ) ; } n = d ; d = r ; } lcm = ( a * b ) / ( gcd ) ; printf ( \"%d\n\" , lcm ) ; } }", "label": 1, "id": 18168}
{"input": "int main ( void ) { int i , t , n1 , n2 , c , k , m ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { c = 1 ; scanf ( \"%d\" , & n1 ) ; scanf ( \"%d\" , & n2 ) ; if ( n1 > n2 ) { k = n2 ; } else { k = n1 ; } for ( i = 2 ; i <= k ; i ++ ) { if ( n1 % i == 0 && n2 % i == 0 ) { c = i ; } } m = ( n1 * n2 ) / c ; printf ( \"%d %d\n\" , c , m ) ; t -- ; } return 0 ; }", "label": 1, "id": 6837}
{"input": "int fastInput ( ) { int val = 0 ; char c = getchar_unlocked ( ) ; while ( c < 33 ) c = getchar_unlocked ( ) ; while ( c > 33 ) val = ( val << 1 ) + ( val << 3 ) + ( c - '0' ) , c = getchar_unlocked ( ) ; return val ; } int main ( void ) { int i , t , n , min , temp ; t = fastInput ( ) ; while ( t -- ) { n = fastInput ( ) ; min = fastInput ( ) ; for ( i = 1 ; i < n ; i ++ ) { temp = fastInput ( ) ; if ( temp < min ) min = temp ; } long long int ans = ( long long int ) min * ( long long int ) ( n - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 26357}
{"input": "int mat [ 100 ] [ 100 ] ; int maximum ( int a , int b ) { return a > b ? a : b ; } main ( ) { int testcase , n , i , sum = 0 , max = 0 , j , k ; scanf ( \"%d\" , & testcase ) ; for ( i = 0 ; i < testcase ; i ++ ) { sum = 0 ; max = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( k <= j ) scanf ( \"%d\" , & mat [ j ] [ k ] ) ; else mat [ j ] [ k ] = 0 ; if ( j > 0 && k > 0 ) { mat [ j ] [ k ] = maximum ( mat [ j - 1 ] [ k ] , mat [ j - 1 ] [ k - 1 ] ) + mat [ j ] [ k ] ; } else if ( j > 0 ) { mat [ j ] [ k ] = mat [ j ] [ k ] + mat [ j - 1 ] [ k ] ; } if ( max < mat [ j ] [ k ] ) max = mat [ j ] [ k ] ; } } printf ( \"%d\" , max ) ; } }", "label": 1, "id": 18533}
{"input": "void main ( ) { int t , a , b , i , gcd = 0 , lcm = 0 , d = 0 , D = 0 , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a < b ) { d = a ; D = b ; } else { d = b ; D = a ; } while ( D % d > 0 ) { r = D % d ; D = d ; d = r ; } gcd = d ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 13184}
{"input": "main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int n , i , j , max = 0 ; scanf ( \"%d\n\" , & n ) ; char str [ 1000 ] ; int a [ 101 ] = { 0 } ; int b [ 101 ] = { 0 } ; int * old = b , * new = a ; for ( i = 0 ; i < n ; i ++ ) { gets ( str ) ; char * curpos = str ; for ( j = 0 ; j <= i ; j ++ ) { int k , max1 = 0 , max2 = 0 ; sscanf ( curpos , \"%d\" , & k ) ; curpos += ( k / 10 + 2 ) ; new [ j ] = k ; max1 = ( i - 1 >= j ) ? old [ j ] : 0 ; max2 = ( j > 0 ) ? old [ j - 1 ] : 0 ; new [ j ] += ( max1 > max2 ? max1 : max2 ) ; max = ( new [ j ] > max ? new [ j ] : max ) ; } int * temp = old ; old = new ; new = temp ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 17442}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , b = 10000000 ; scanf ( \"%lld\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b ) b = a [ i ] ; } printf ( \"%lld\n\" , b * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 18410}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , l = 1 , g = 1 ; int i ; scanf ( \"%lld%lld\" , & a , & b ) ; if ( a > b ) { for ( i = 2 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = g * i ; l = l * i ; a = a / i ; b = b / i ; } } l = l * a * b ; printf ( \"%lld\n%lld\n\" , g , l ) ; } else { for ( i = 2 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { g = g * i ; l = l * i ; a = a / i ; b = b / i ; } } l = l * a * b ; printf ( \"%lld\n%lld\n\" , g , l ) ; } } return 0 ; }", "label": 2, "id": 26594}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; long long int a [ n ] , min = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 1119}
{"input": "int lcm ( int a , int b ) { int temp = a ; while ( 1 ) { if ( temp % b == 0 && temp % a == 0 ) { break ; } temp ++ ; } return temp ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y , i , g = 0 , z = 0 ; scanf ( \"%d%d\" , & x , & y ) ; for ( int i = 1 ; i <= x && i <= y ; i ++ ) { if ( x % i == 0 && y % i == 0 ) { g = i ; } } if ( x > y ) { z = lcm ( x , y ) ; } else { z = lcm ( y , x ) ; } printf ( \"%d %d\n\" , g , z ) ; } }", "label": 2, "id": 9256}
{"input": "int main ( ) { int t , gcd , a , b , x , y ; int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 10879}
{"input": "int main ( ) { int t , r , i , j , y ; scanf ( \"%d\" , & t ) ; y = t ; int a [ t ] , m [ 100 ] [ 100 ] ; while ( t -- != 0 ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \" %d\" , & m [ i ] [ j ] ) ; } for ( i = r - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( m [ i + 1 ] [ j ] > m [ i + 1 ] [ j + 1 ] ) m [ i ] [ j ] += m [ i + 1 ] [ j ] ; else m [ i ] [ j ] += m [ i + 1 ] [ j + 1 ] ; } } a [ t ] = m [ 0 ] [ 0 ] ; } for ( i = y - 1 ; i >= 0 ; i -- ) printf ( \"%d\n\" , a [ i ] ) ; return 0 ; }", "label": 0, "id": 24558}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int c , d , a , b , t ; scanf ( \"%d %d\" , & c , & d ) ; if ( c > d ) { b = c ; a = d ; } else { b = d ; a = c ; } while ( a > 0 ) { t = a ; a = b % a ; b = t ; } printf ( \"%d %d\n\" , t , c * d / t ) ; } }", "label": 1, "id": 12168}
{"input": "int main ( ) { int i , j , n , m , a [ 100 ] [ 100 ] , b , c ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = m - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; if ( j == 0 ) m -- ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 21751}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else gcd ( b , a % b ) ; } int main ( void ) { long int a ; int t , i , g , c , b , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%d\" , & a , & b ) ; if ( a < b ) { c = a ; a = b ; b = c ; } g = gcd ( a , b ) ; j = 1 ; c = a ; while ( a % b != 0 ) { a = c * j ; j ++ ; } printf ( \"%d %ld\n\" , g , a ) ; } return 0 ; }", "label": 2, "id": 14884}
{"input": "int main ( ) { int t , a [ 5 ] , i = 0 , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , b [ 1000 ] , k , count = 0 , l , big ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) scanf ( \"%d\" , & b [ k ] ) ; for ( k = 0 ; k < n ; k ++ ) { count ++ ; big = b [ k ] ; for ( l = k + 1 ; l < n ; l ++ ) { if ( b [ l ] >= big ) { big = b [ l ] ; count ++ ; } } } a [ i ] = count ; i ++ ; } for ( j = 0 ; j < i ; j ++ ) printf ( \"%d\n\" , a [ j ] ) ; return 0 ; }", "label": 3, "id": 20072}
{"input": "int hff ( int , int ) ; int main ( ) { int t ; long int a , b , hcf , lcf ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; hcf = hff ( a , b ) ; printf ( \"%ld %ld\" , hcf , ( a * b / hcf ) ) ; return 0 ; } } hff ( int a , int b ) { if ( b == 0 ) return a ; else return hff ( b , a % b ) ; }", "label": 1, "id": 20492}
{"input": "int main ( ) { int t , i , j , k , l , m , n , o , p , r [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & r [ i ] [ 0 ] ) ; for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & r [ i ] [ j ] ) ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) if ( r [ i ] [ j ] > r [ i ] [ j + 1 ] ) r [ i - 1 ] [ j ] += r [ i ] [ j ] ; else r [ i - 1 ] [ j ] += r [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , r [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 8432}
{"input": "static char _rbuf [ 8192 * 8 ] ; static char * _rend = 0 ; static char * _rpos = 0 ; static int _getchar ( ) { int n = read ( 0 , _rbuf , sizeof _rbuf ) ; if ( n <= 0 ) { printf ( \"EOF(%d)\n\" , n ) ; exit ( 1 ) ; } _rend = _rbuf + n ; _rpos = _rbuf + 1 ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < '0' ) { } int n = c - '0' ; while ( ( ( c = mygetchar ( ) ) ) >= '0' ) { n = n * 10 + c - '0' ; } return n ; } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - 1 ; while ( 1 ) { buf [ bn -- ] = '0' + ( n ) ; n = n / 10 ; if ( n == 0 ) break ; } while ( bn < BSIZE - 1 ) putchar ( buf [ ++ bn ] ) ; putchar ( '\n' ) ; } static int dump ( int a [ ] , int n ) { int i = 0 ; printf ( \"line-dump:\" ) ; while ( i < n ) printf ( \"%d \" , a [ i ++ ] ) ; printf ( \"\n\" ) ; } void tria ( int n ) { int a [ n ] ; int b [ n ] ; a [ 0 ] = 0 ; int * cur = b ; int * old = a ; int i = 0 ; while ( i < n ) { cur [ 0 ] = get_i ( ) + old [ 0 ] ; int j = 1 ; while ( j < i ) { cur [ j ] = get_i ( ) + max ( old [ j - 1 ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = get_i ( ) + old [ j - 1 ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } i ++ ; } int mx = 0 ; for ( i = 0 ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; put_i ( mx ) ; } int main ( int ac , char * * av ) { int n = get_i ( ) ; while ( n -- > 0 ) { tria ( get_i ( ) ) ; } return 0 ; }", "label": 1, "id": 13908}
{"input": "int output , arr [ 5050 ] ; int main ( ) { int testcase , test , total_row , i , start , end ; scanf ( \"%d\" , & testcase ) ; end = - 1 ; for ( test = 1 ; test <= testcase ; test ++ ) { scanf ( \"%d\" , & total_row ) ; start = end + 1 ; end = start + total_row * ( total_row + 1 ) / 2 - 1 ; for ( i = start ; i <= end ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; output = arr [ start ] ; total ( total_row , 1 , start ) ; printf ( \"%d\n\" , output ) ; } return ( 0 ) ; } int total ( int total_row , int row , int index ) { if ( row == total_row ) return ; int below , row_end ; below = row + index ; row_end = ( row * ( row + 1 ) % 2 ) - 1 ; if ( below - 1 == row_end ) index = maxof2 ( below , below + 1 ) ; else index = maxof3 ( below - 1 , below , below + 1 ) ; output += arr [ index ] ; total ( total_row , row + 1 , index ) ; } int maxof2 ( int a , int b ) { if ( arr [ a ] > arr [ b ] ) return ( a ) ; else return ( b ) ; } int maxof3 ( int a , int b , int c ) { int d = maxof2 ( a , b ) ; return ( maxof2 ( d , c ) ) ; }", "label": 3, "id": 20405}
{"input": "int main ( ) { int t , n , i , j , c ; long long int a [ 50005 ] , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { s = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } i = 0 ; j = 1 ; while ( i <= n ) { if ( a [ i ] > a [ j ] ) { s = s + a [ j ] ; if ( j > i ) i = i + 2 ; else i ++ ; } else if ( a [ j ] > a [ i ] ) { s = s + a [ i ] ; c = i ; if ( j > i ) { i = i + 2 ; } else i ++ ; j = c ; } } printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 2, "id": 9550}
{"input": "void main ( ) { int t , i , n , a [ 50000 ] , smallest , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } smallest = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < smallest ) smallest = a [ i ] ; } sum = smallest * ( n - 1 ) ; printf ( \"%d\n\" , sum ) ; } }", "label": 0, "id": 4078}
{"input": "int main ( ) { int T , i ; long long int A , B ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { long long int g , l ; scanf ( \"%lld %lld\" , & A , & B ) ; g = GCD ( A , B ) ; l = ( A * B ) / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; } int GCD ( long long int a , long long int b ) { if ( b == 0 ) { return a ; } else { return GCD ( b , a % b ) ; } }", "label": 0, "id": 13367}
{"input": "int gdc ( int a , int b ) { int i , g ; for ( i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 ) { if ( b % i == 0 ) { g = i ; } } } return ( g ) ; } int lcm ( int a , int b ) { int x = 1 , i ; for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { if ( b % i == 0 ) { a = a / i ; b = b / i ; x = x * i ; } } } return ( a * b * x ) ; } int main ( ) { unsigned int s ; scanf ( \"%d\" , & s ) ; while ( s -- ) { int a , b , l , g ; scanf ( \"%d%d\" , & a , & b ) ; l = lcm ( a , b ) ; g = gdc ( a , b ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 24701}
{"input": "int main ( ) { int t , i , n , * a , j , x ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { x = 0 ; scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( j = 0 ; j < n ; ++ j ) scanf ( \"%d\" , a + j ) ; for ( j = 0 ; j < n - 1 ; ++ j ) { if ( * ( a + j ) < * ( a + j + 1 ) ) { while ( * ( a + j ) < * ( a + j + 1 ) && j < n - 1 ) ++ j ; ++ x ; } } printf ( \"%d\n\" , n + x ) ; } }", "label": 1, "id": 13087}
{"input": "void main ( ) { long long int i , j , n , a [ 50001 ] , s [ 5001 ] ; int t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { s [ i ] = 0 ; scanf ( \"11%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"11%d\" , & a [ j ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] < a [ j + 1 ] ) a [ j + 1 ] = a [ j ] ; s [ i ] = s [ i ] + a [ j + 1 ] ; } } for ( i = 0 ; i < t ; i ++ ) printf ( \"11%d\n\" , s [ i ] ) ; return 0 ; }", "label": 1, "id": 12698}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , i , n , a ; scanf ( \"%d\" , & a ) ; scanf ( \"%d%d\" , & num1 , & num2 ) ; while ( a > 0 ) { if ( num1 > num2 ) n = num2 ; else n = num1 ; for ( i = 1 ; i <= n ; i ++ ) { if ( ( num1 % i == 0 ) && ( num2 % i == 0 ) ) gcd = i ; } lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; a -- ; } return 0 ; }", "label": 1, "id": 18332}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b , GCD , LCM , rem , n , d ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } rem = n % d ; while ( rem != 0 ) { n = d ; d = rem ; rem = n % d ; } GCD = d ; LCM = a * b / GCD ; printf ( \"%d %d\n\" , GCD , LCM ) ; } }", "label": 1, "id": 5508}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , a , min , i ; scanf ( \"%lld\" , & n ) ; min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a ) ; if ( a < min ) min = a ; } long long int score ; score = min * ( n - 1 ) ; printf ( \"%lld\" , score ) ; } return 0 ; }", "label": 1, "id": 12874}
{"input": "int main ( ) { int t , a , b , i , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; int max = ( a > b ) ? a : b ; while ( 1 ) { if ( max % a == 0 && max % b == 0 ) { gcd = max ; break ; } ++ max ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , lcm , gcd ) ; } return 0 ; }", "label": 2, "id": 22138}
{"input": "main ( ) { int gcd , t , a , b , i , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = a * b / gcd ; printf ( \"%d\n\" , gcd ) ; printf ( \"%d\" , lcm ) ; } }", "label": 1, "id": 18404}
{"input": "int m , i , j , k , l , n , * p , * q , s , b [ 9999 ] ; int z ( int a , int b ) { return a > b ? a : b ; } void assert2 ( int b ) { if ( ! b ) while ( 1 ) { } } void f ( ) { p ++ , i ++ , k ++ ; if ( k == j ) { k = 0 ; j ++ ; p -- ; } assert2 ( i < 9999 ) ; assert2 ( p - b < 9999 ) ; q = p - 1 ; assert2 ( q - b < 9999 ) ; } int main ( ) { scanf ( \"%d\" , & m ) ; while ( m -- ) { scanf ( \"%d\" , & n ) ; for ( i = k = l = 0 , j = 1 , p = b ; i < ( n * n + n ) / 2 ; f ( ) ) { scanf ( \"%d\" , & s ) ; l = z ( l , ( b [ i ] = s + ( ( 0 < i ) ? ( ( 0 < k ) ? ( ( k < j - 1 ) ? z ( * p , * q ) : * q ) : * p ) : 0 ) ) ) ; } printf ( \"%d\n\" , l ) ; } }", "label": 0, "id": 22031}
{"input": "int main ( ) { int i , j , t , a , b , n , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; n = ( a < b ? a : b ) ; printf ( \"%d\n\" , n ) ; if ( a % n == 0 && b % n == 0 ) gcd = n ; else { for ( i = n - 1 ; a % i != 0 || b % i != 0 ; i -- ) { } gcd = i ; } lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 3572}
{"input": "int findmaxtriangle ( int n ) ; int a [ 100 ] [ 100 ] ; int main ( void ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } int max = findmaxtriangle ( n ) ; printf ( \"%d\n\" , max ) ; } return 0 ; } int findmaxtriangle ( int n ) { int dp [ n ] [ n ] , i , j , max ; dp [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - 1 ] [ j ] ; else { if ( dp [ i - 1 ] [ j - 1 ] > dp [ i - 1 ] [ j ] ) dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - 1 ] [ j ] ; } } } max = dp [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( max < dp [ n - 1 ] [ i ] ) max = dp [ n - 1 ] [ i ] ; return max ; }", "label": 1, "id": 15308}
{"input": "int gc ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n1 , n2 , gcd , i , n , m ; long long int lcm ; scanf ( \"%d %d\" , & n1 , & n2 ) ; n = n1 ; m = n2 ; gcd = gc ( n1 , n2 ) ; lcm = ( n * m ) / gcd ; printf ( \"%d %lld\n\" , gcd , lcm ) ; } return 0 ; } int gc ( int n1 , int n2 ) { if ( n2 == 0 ) return n1 ; else return gc ( n2 , n1 % n2 ) ; }", "label": 1, "id": 2793}
{"input": "main ( ) { int t , a , b , g , l , i , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"\n%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) if ( a % i == 0 && b % i == 0 ) g = i ; m = a > b ? a : b ; while ( 1 ) { if ( m % a == 0 && m % b == 0 ) { l = m ; break ; } m ++ ; } printf ( \"\n%d %d\" , g , l ) ; } }", "label": 2, "id": 735}
{"input": "int main ( ) { int t , n , i , j , sum = 0 , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = a [ 0 ] [ 0 ] ; j = 0 ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) a [ i - 1 ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 12529}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int s = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < s ) { s = a [ i ] ; } } printf ( \"%d\n\" , s * ( n - 1 ) ) ; } }", "label": 0, "id": 19209}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int min = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 16947}
{"input": "int arr [ 100 ] [ 100 ] ; void sum_triangle ( ) { int i , j , row , ele ; scanf ( \"%d\" , & row ) ; arr [ 0 ] [ 1 ] = 0 ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ele ) ; if ( i == 0 ) arr [ i ] [ j ] = ele ; else { if ( j == 0 ) arr [ i ] [ j ] = ele + arr [ i - 1 ] [ j ] ; else { if ( arr [ i - 1 ] [ j - 1 ] + ele > arr [ i - 1 ] [ j ] + ele ) arr [ i ] [ j ] = arr [ i - 1 ] [ j - 1 ] + ele ; else arr [ i ] [ j ] = arr [ i - 1 ] [ j ] + ele ; } } } } int max = 0 ; for ( i = 0 ; i <= row - 1 ; i ++ ) { if ( arr [ row - 1 ] [ i ] > max ) max = arr [ row - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; t ++ ) { sum_triangle ( ) ; } return 0 ; }", "label": 2, "id": 11692}
{"input": "int gcd ( int a , int b ) { int t ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } return a ; } int main ( ) { int n , i ; scanf ( \"%d\" , & n ) ; int a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; scanf ( \"%d\" , & b [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d %d\n\" , gcd ( a [ i ] , b [ i ] ) , ( a [ i ] * b [ i ] ) / gcd ( a [ i ] , b [ i ] ) ) ; } }", "label": 1, "id": 6355}
{"input": "getSumInArray ( int * array , int row , int col , int maxRows ) { if ( maxRows == 1 ) { return * array ; } else if ( row == maxRows - 1 || col == maxRows - 1 ) { return * ( array + row * MAXSIZE + col ) ; } int directPathSum = * ( array + row * MAXSIZE + col ) + getSumInArray ( array , row + 1 , col , maxRows ) ; int rightPathSum = * ( array + row * MAXSIZE + col ) + getSumInArray ( array , row + 1 , col + 1 , maxRows ) ; if ( directPathSum > rightPathSum ) { return directPathSum ; } else { return rightPathSum ; } } int getMaxSumInTriangle ( int * array , int maxRows ) { return getSumInArray ( array , 0 , 0 , maxRows ) ; } int main ( void ) { int testcases , numberOfRowsInTriangle , tmp , rowNumber , element , colNumber , i , j ; int array [ MAXSIZE ] [ MAXSIZE ] ; while ( scanf ( \"%d\" , & testcases ) > 0 ) { while ( testcases > 0 ) { scanf ( \"%d\" , & numberOfRowsInTriangle ) ; rowNumber = 1 ; while ( rowNumber <= numberOfRowsInTriangle ) { tmp = rowNumber ; colNumber = 0 ; while ( tmp > 0 ) { scanf ( \"%d\" , & element ) ; array [ rowNumber - 1 ] [ colNumber ++ ] = element ; tmp -- ; } rowNumber ++ ; } printf ( \"%d\n\" , getMaxSumInTriangle ( array , numberOfRowsInTriangle ) ) ; testcases -- ; } } return EXIT_SUCCESS ; }", "label": 2, "id": 13134}
{"input": "int gcd ( int , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , gcd_res , lcm_res ; scanf ( \"%lld%lld\" , & a , & b ) ; gcd_res = gcd ( a , b ) ; lcm_res = ( a * b ) / gcd_res ; printf ( \"%lld %lld\n\" , gcd_res , lcm_res ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; }", "label": 0, "id": 23090}
{"input": "unsigned long int t , a , b ; unsigned long int GCD ( ) { while ( a != b ) ( a > b ) ? ( a = a - b ) : ( b = b - a ) ; return a ; } int main ( ) { scanf ( \"%u\" , & t ) ; while ( t -- ) { scanf ( \"%lu %lu\" , & a , & b ) ; printf ( \"%lu %lu\n\" , a , ( a * b ) / GCD ( ) ) ; } return 0 ; }", "label": 0, "id": 11201}
{"input": "int main ( ) { int inp [ 5051 ] ; int T , i , j , N , a , b ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 1 ; i <= N * ( N + 1 ) / 2 ; i ++ ) scanf ( \"%d\" , & ( inp [ i ] ) ) ; for ( i = N - 1 ; i >= 1 ; i -- ) { a = ( i - 1 ) * i / 2 ; b = ( i + 1 ) * i / 2 ; for ( j = 1 ; j <= i ; j ++ ) inp [ a + j ] += inp [ b + j ] > inp [ b + j + 1 ] ? inp [ b + j ] : inp [ b + j + 1 ] ; } printf ( \"%d\n\" , inp [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 7550}
{"input": "int arr [ 100 ] [ 100 ] ; int cache [ 100 ] [ 100 ] ; int cachevisited [ 100 ] [ 100 ] ; int solve ( int i , int j ) ; int x , t ; int main ( ) { int i , j , result , n ; scanf ( \"%d\" , & n ) ; while ( n ) { scanf ( \"%d\" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { cache [ i ] [ j ] = 0 ; cachevisited [ i ] [ j ] = 0 ; } } result = solve ( 0 , 0 ) ; printf ( \"\n%d\" , result ) ; n -- ; } return 0 ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int solve ( int i , int j ) { int t1 , t2 ; if ( i >= x ) { return 0 ; } if ( cachevisited [ i ] [ j ] == 1 ) { return cache [ i ] [ j ] ; } else { t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; t = max ( t1 , t2 ) + arr [ i ] [ j ] ; cachevisited [ i ] [ j ] = 1 ; cache [ i ] [ j ] = t ; return t ; } }", "label": 0, "id": 26034}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d\" , g ) ; printf ( \"\\t\" ) ; printf ( \"%d\n\" , l ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 4856}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( void ) { int n1 , n2 , i , lcm ; scanf ( \"%d %d\" , & n1 , & n2 ) ; if ( n1 > n2 ) i = gcd ( n1 , n2 ) ; else i = gcd ( n2 , n1 ) ; printf ( \"%d\n\" , i ) ; lcm = ( n1 * n2 ) / i ; printf ( \"%d\" , lcm ) ; return 0 ; }", "label": 1, "id": 16701}
{"input": "main ( ) { int T , a , i , j , k , l , temp ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & a ) ; int arr [ a ] ; for ( j = 0 ; j < a ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; } for ( k = 0 ; k < a - 1 ; k ++ ) { for ( l = k + 1 ; l < a ; l ++ ) { if ( arr [ k ] > arr [ l ] ) { temp = arr [ k ] ; arr [ k ] = arr [ l ] ; arr [ l ] = temp ; } } } printf ( \"%d\n\" , arr [ a - 2 ] ) ; } }", "label": 2, "id": 25024}
{"input": "int main ( ) { long int t , A , j , B , i , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & A , & B ) ; i = ( A > B ? B : A ) ; j = A + B - i ; while ( r > 0 ) { i = r ; r = j % i ; j = i ; } printf ( \"%ld %ld\n\" , i , A * B / i ) ; } return 0 ; }", "label": 1, "id": 21540}
{"input": "int main ( ) { int n , m , k , i , j , row , col , max = 0 ; int * * mat ; scanf ( \"%d\" , & m ) ; for ( k = 0 ; k < m ; k ++ ) { scanf ( \"%d\" , & n ) ; row = n ; mat = ( int * * ) malloc ( sizeof ( int * ) * row ) ; for ( i = 0 ; i < row ; i ++ ) { mat [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } } for ( i = 1 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { mat [ i ] [ j ] += mat [ i - 1 ] [ j ] ; continue ; } if ( i == j ) mat [ i ] [ j ] += mat [ i - 1 ] [ j - 1 ] ; else if ( mat [ i - 1 ] [ j - 1 ] > mat [ i - 1 ] [ j ] ) { mat [ i ] [ j ] += mat [ i - 1 ] [ j - 1 ] ; } else mat [ i ] [ j ] += mat [ i - 1 ] [ j ] ; } } for ( i = 0 ; i < row ; i ++ ) { if ( mat [ row - 1 ] [ i ] > max ) max = mat [ row - 1 ] [ i ] ; } printf ( \"%d\" , max ) ; } }", "label": 1, "id": 21672}
{"input": "int main ( ) { int m , j , i , h , n , t , a [ 2000000 ] , b [ 100 ] [ 100 ] , x [ 1000 ] = { 0 } , k = 1 ; scanf ( \"%d\" , & t ) ; for ( m = 0 ; m < t ; m ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & b [ i ] [ j ] ) ; } } if ( n == 1 ) { a [ 0 ] = 0 ; k = 1 ; a [ 1 ] = b [ 0 ] [ 0 ] ; x [ m ] = a [ 1 ] ; } else { a [ 0 ] = 0 ; a [ 1 ] = b [ 0 ] [ 0 ] ; a [ 2 ] = b [ 0 ] [ 0 ] + b [ 1 ] [ 0 ] ; a [ 3 ] = b [ 0 ] [ 0 ] + b [ 1 ] [ 1 ] ; k = 4 ; if ( a [ 2 ] > a [ 3 ] ) { x [ m ] = a [ 2 ] ; } else { x [ m ] = a [ 3 ] ; } } for ( i = 2 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { a [ k ] = b [ i ] [ j ] + a [ k - ( i - 1 ) * ( i - 2 ) - 2 ] ; ++ k ; } else if ( j == i ) { a [ k ] = b [ i ] [ j ] + a [ k - ( i * ( j - 1 ) + ( i - 1 ) * ( i - j ) + 2 ) ] ; ++ k ; } else { for ( h = 1 ; h <= i ; h ++ ) { if ( j = 1 ) { a [ k ] = b [ i ] [ j ] + a [ k - ( ( i - 1 ) * ( i - 2 ) + 3 ) + h ] ; ++ k ; } else { a [ k ] = b [ i ] [ j ] + a [ k - ( i * ( j - 1 ) + 2 + ( i - 1 ) * ( j - 1 ) ) + h ] ; ++ k ; } } } } } for ( i = 0 ; i < k ; i ++ ) { if ( x [ m ] < a [ i ] ) { x [ m ] = a [ i ] ; } } } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , x [ i ] ) ; } return 0 ; }", "label": 3, "id": 20299}
{"input": "int maxim ( int , int ) ; int main ( ) { int n , nn , i , j , max ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & nn ) ; int a [ 102 ] [ 102 ] ; a [ 0 ] [ 0 ] = 0 ; a [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i <= nn ; i ++ ) { max = 0 ; a [ i ] [ 0 ] = 0 ; a [ i ] [ i + 1 ] = 0 ; for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j ] = a [ i ] [ j ] + maxim ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } } printf ( \"%d\n\" , max ) ; n -- ; } return 0 ; } int maxim ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 18856}
{"input": "int main ( ) { int a [ 100 ] , n , s , t , max , h , i , pos , g ; scanf ( \"%d\" , & t ) ; while ( t ) { s = 0 ; h = 1 ; pos = 0 ; scanf ( \"%d\" , & n ) ; while ( n ) { max = 0 ; for ( i = 0 ; i < h ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( ( i == pos ) ) { max = a [ i ] ; pos = i ; } else if ( ( a [ i ] > max ) && ( i == g + 1 ) ) { max = a [ i ] ; pos = i ; } } g = pos ; h ++ ; n -- ; s += max ; } printf ( \"%d\n\" , s ) ; t -- ; } return 0 ; }", "label": 1, "id": 12333}
{"input": "int main ( ) { int t , i , j , k , n , l , sum , sum1 , sum2 , arr [ 99 ] [ 99 ] ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } sum = arr [ 0 ] [ 0 ] ; l = 0 ; if ( n > 1 ) { for ( i = 0 ; i < n - 1 ; i ++ ) { j = l ; sum1 = 0 ; sum2 = 0 ; for ( k = i + 1 ; k < n ; k ++ ) { sum1 = sum1 + arr [ k ] [ j ] ; sum2 = sum2 + arr [ k ] [ j + 1 ] ; } if ( sum1 > sum2 ) { sum = sum + arr [ i + 1 ] [ j ] ; l = j ; } else { sum = sum + arr [ i + 1 ] [ j + 1 ] ; l = j + 1 ; } } } printf ( \"%d\n\" , sum ) ; t = t - 1 ; } return ( 0 ) ; }", "label": 3, "id": 22555}
{"input": "int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int a , b , x ; scanf ( \"%d %d\" , & a , & b ) ; for ( x = 1 ; x <= a && x <= b ; x ++ ) { if ( a % x == 0 && b % x == 0 ) printf ( \"%d %d\n\" , x , ( a * b ) / x ) ; } } return 0 ; }", "label": 1, "id": 10772}
{"input": "int gcd ( int A , int B ) ; int main ( ) { int T , A , B , X ; long Y ; scanf ( \"%ld\" , & T ) ; while ( T -- ) { scanf ( \"%ld%ld\" , & A , & B ) ; X = gcd ( A , B ) ; Y = ( A * B ) / X ; printf ( \"%d %ld\n\" , X , Y ) ; } return 0 ; } int gcd ( int A , int B ) { if ( B == 0 ) return ( A ) ; else return gcd ( B , ( A % B ) ) ; }", "label": 1, "id": 10891}
{"input": "int ans [ 10 ] , k = 0 ; void gcdd ( int x , int y ) { int i , m ; if ( x > y ) m = y ; else m = x ; for ( i = m ; i >= 1 ; i -- ) { if ( x % i == 0 && y % i == 0 ) { break ; } } ans [ k ] = i ; k ++ ; return ; } void lcm ( int x , int y ) { int max = 0 ; max = ( x > y ) ? x : y ; while ( 1 ) { if ( max % x == 0 && max % y == 0 ) { break ; } ++ max ; } ans [ k ] = max ; k ++ ; return ; } int main ( ) { int n , i , a , b ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= 3 ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; gcdd ( a , b ) ; lcm ( a , b ) ; } for ( i = 0 ; i < k ; i ++ ) { printf ( \"%d \" , ans [ i ] ) ; if ( i == 1 ) printf ( \"\n\" ) ; if ( i == 3 ) printf ( \"\n\" ) ; if ( i == 5 ) printf ( \"\n\" ) ; } }", "label": 2, "id": 12433}
{"input": "int main ( ) { int a , b , lcm = 0 , d , t ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d %d\" , & a , & b ) ; d = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } lcm = d / a ; printf ( \"%d %d\n\" , a , lcm ) ; -- t ; } return 0 ; }", "label": 1, "id": 13447}
{"input": "int main ( ) { int test_case , i , lines , row , col , digits [ 100 ] [ 100 ] ; scanf ( \"%d\" , & test_case ) ; for ( i = 1 ; i <= test_case ; i ++ ) { scanf ( \"%d\" , & lines ) ; for ( row = 1 ; row <= lines ; row ++ ) { for ( col = 1 ; col <= row ; col ++ ) { scanf ( \"%d\" , & digits [ row ] [ col ] ) ; } } for ( row = lines - 1 ; row >= 1 ; row -- ) { for ( col = 1 ; col <= row ; col ++ ) { if ( digits [ row ] [ col ] + digits [ row + 1 ] [ col ] > digits [ row ] [ col ] + digits [ row + 1 ] [ col + 1 ] ) { digits [ row ] [ col ] += digits [ row + 1 ] [ col ] ; } else { digits [ row ] [ col ] += digits [ row + 1 ] [ col + 1 ] ; } } } printf ( \"%d\" , digits [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 7028}
{"input": "int main ( ) { int t , n , line , tri [ 101 ] [ 101 ] , tri2 [ 101 ] [ 101 ] , i , j , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; line = 1 ; for ( i = 0 ; i < 101 ; i ++ ) for ( j = 0 ; j < 101 ; j ++ ) tri2 [ i ] [ j ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & tri [ i ] [ j ] ) ; for ( i = n - 1 ; i > - 1 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( j > 0 ) { a = tri [ i - 1 ] [ j - 1 ] + tri [ i ] [ j ] ; b = tri [ i - 1 ] [ j ] + tri [ i ] [ j ] ; if ( a > b ) { if ( tri2 [ i - 1 ] [ j - 1 ] < a ) tri2 [ i - 1 ] [ j - 1 ] = a ; } else { if ( tri2 [ i - 1 ] [ j ] < b ) tri2 [ i - 1 ] [ j ] = b ; } } else tri2 [ i - 1 ] [ j ] = tri [ i - 1 ] [ j ] + tri [ i ] [ j ] ; } for ( j = 0 ; j < i + 1 ; j ++ ) tri [ i - 1 ] [ j ] = tri2 [ i - 1 ] [ j ] ; } printf ( \"%d\n\" , tri2 [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 11480}
{"input": "int main ( ) { int t , n , ar [ 102 ] = { 0 } , i , p = 0 , u , g , no , j ; for ( scanf ( \"%d\" , & t ) ; t -- && scanf ( \"%d\" , & n ) ; printf ( \"%d\n\" , g ) ) { for ( i = 1 , g = 0 ; i <= n ; i ++ , p = 0 ) { for ( j = 1 ; j <= i ; j ++ , p = u ) { scanf ( \"%d\" , & no ) ; u = ar [ j ] ; if ( no + u > no + p ) { ar [ j ] = no + u ; } else { ar [ j ] = no + p ; } if ( ar [ j ] > g ) { g = ar [ j ] ; } } } for ( i = 0 ; i <= n ; i ++ , ar [ i ] = 0 ) { } } return 0 ; }", "label": 0, "id": 25995}
{"input": "int gcd ( int a , int b ) { int temp ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { int t ; long long G , L , a , b ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; G = gcd ( a , b ) ; L = ( a * b ) / G ; printf ( \"%lld %lld\n\" , G , L ) ; } return 0 ; }", "label": 0, "id": 2154}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%d \" , g ) ; l = ( a * b ) / g ; printf ( \"%d\n\" , l ) ; t -- ; } return ( 0 ) ; } int gcd ( int x , int y ) { int z , i ; z = 1 ; if ( x > y ) { for ( i = 2 ; i <= y ; i ++ ) { if ( x % i == 0 && y % i == 0 ) { z = z * i ; } } } else { for ( i = 2 ; i <= x ; i ++ ) { if ( x % i == 0 && y % i == 0 ) { z = z * i ; } } } return ( z ) ; }", "label": 1, "id": 15982}
{"input": "void fun ( int i , int j , int temp ) ; int a [ 100 ] [ 100 ] , s , lines ; int main ( ) { int i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & lines ) ; for ( i = 1 ; i <= lines ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) scanf ( \"%d\" , & a [ i - 1 ] [ j ] ) ; } for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } } s = a [ lines - 1 ] [ 0 ] ; for ( j = 0 ; j < lines ; j ++ ) { if ( a [ lines - 1 ] [ j ] > s ) s = a [ lines - 1 ] [ j ] ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 9559}
{"input": "int main ( ) { int t , n , i , j , col ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { col = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 1 ; j <= n - 1 ; j ++ ) { if ( a [ n - 1 ] [ col ] < a [ n - 1 ] [ j ] ) { col = j ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { if ( col != ( i + 1 ) && col != 0 ) { if ( a [ i ] [ col ] > a [ i ] [ col - 1 ] ) { a [ i ] [ col ] += a [ i + 1 ] [ col ] ; } else { a [ i ] [ col - 1 ] += a [ i + 1 ] [ col ] ; col = col - 1 ; } } else if ( col != ( i + 1 ) && col == 0 ) { a [ i ] [ col ] += a [ i + 1 ] [ col ] ; } else { a [ i ] [ col - 1 ] += a [ i + 1 ] [ col ] ; col = col - 1 ; } } printf ( \"%d\n\" , a [ 0 ] [ col ] ) ; } return 0 ; }", "label": 1, "id": 18956}
{"input": "int main ( ) { long int T ; int i ; scanf ( \"%ld\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { long int A , B ; long int j = 0 , t = 0 , max = 0 ; scanf ( \"%ld%ld\" , & A , & B ) ; if ( A > B ) { if ( A % B != 0 ) { for ( j = B - 1 ; j > 0 ; -- j ) { if ( ( A % j == 0 ) && ( B % j == 0 ) ) { t = 1 ; break ; } } } else printf ( \"%ld\" , B ) ; } if ( B > A ) { if ( B % A != 0 ) { for ( j = A - 1 ; j > 0 ; -- j ) { if ( ( A % j == 0 ) && ( B % j == 0 ) ) { t = 1 ; break ; } } } else printf ( \"%ld\" , A ) ; } if ( A == B ) printf ( \"%ld\" , A ) ; max = ( A > B ) ? A : B ; while ( 1 ) { if ( max % A == 0 && max % B == 0 ) { break ; } ++ max ; } if ( t ) printf ( \"%ld\" , j ) ; printf ( \" %ld\n\" , max ) ; } return 0 ; }", "label": 2, "id": 18840}
{"input": "int sumCompare = 0 ; void addNodes ( int * arry , int node , int totalNodes , int sum ) { if ( node >= totalNodes ) { if ( sum > sumCompare ) { sumCompare = sum ; } return ; } sum = sum + arry [ node ] ; addNodes ( arry , ( 2 * node + 1 ) , totalNodes , sum ) ; addNodes ( arry , ( 2 * node + 2 ) , totalNodes , sum ) ; return ; } int main ( ) { int testCase , rowNum , totalNodes , * valueAry ; int i ; scanf ( \"%d\" , & testCase ) ; while ( testCase -- ) { scanf ( \"%d\" , & rowNum ) ; totalNodes = ( rowNum * ( rowNum + 1 ) ) / 2 ; valueAry = ( int * ) malloc ( totalNodes * sizeof ( int ) ) ; for ( i = 0 ; i < totalNodes ; i ++ ) { scanf ( \"%d\" , & valueAry [ i ] ) ; } addNodes ( valueAry , 0 , totalNodes , 0 ) ; printf ( \"%d\n\" , sumCompare ) ; sumCompare = 0 ; free ( valueAry ) ; } return 0 ; }", "label": 1, "id": 22242}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j < i + 1 ; j ++ ) { if ( a [ i + 1 ] [ j ] < a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 26550}
{"input": "long long int gcd ( int a , int b ) { if ( b == 0 || a == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } main ( ) { int t , a , b ; long long int gcd1 , lcm1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; gcd1 = gcd ( a , b ) ; lcm1 = lcm ( a , b ) ; printf ( \"%lld%lld\n\" , gcd1 , lcm1 ) ; } }", "label": 1, "id": 25412}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int dp [ n ] ; for ( i = 0 ; i < n ; i ++ ) dp [ i ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ i - 1 ] ) dp [ i ] = dp [ i - 1 ] + 1 ; } int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) sum = sum + dp [ i ] ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 11833}
{"input": "main ( ) { int t , a , b , p , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; p = a * b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } lcm = p / a ; printf ( \"%d %d\n\" , a , lcm ) ; } }", "label": 1, "id": 12994}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int T , i ; long long int N , min , a , cost ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld\" , & N ) ; scanf ( \"%lld\" , & a ) ; min = a ; for ( i = 1 ; i < N ; i ++ ) { scanf ( \"%lld\" , & a ) ; if ( a < min ) min = a ; } cost = ( min * ( N - 1 ) ) ; printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 13076}
{"input": "int main ( ) { int t , c , n , i , a [ 10000 ] , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; c = n ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = i ; j < n - 1 ; j ++ ) if ( a [ j ] <= a [ j + 1 ] ) c ++ ; else break ; printf ( \"%d\n\" , c ) ; } }", "label": 3, "id": 13845}
{"input": "int main ( ) { int cases , rows , factor , factor2 ; int row [ 2 ] [ 100 ] ; register int i , j , k ; for ( j = 0 ; j < 100 ; j ++ ) row [ 0 ] [ j ] = row [ 1 ] [ j ] = 0 ; scanf ( \"%d\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 0 ; j < rows ; j ++ ) { factor = j % 2 ; factor2 = ( j + 1 ) % 2 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & row [ factor ] [ k ] ) ; if ( k == 0 ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else if ( k == ( j - 1 ) ) row [ factor ] [ k ] += row [ factor2 ] [ k - 1 ] ; else { if ( row [ factor2 ] [ k ] > row [ factor2 ] [ k - 1 ] ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else row [ factor ] [ k ] += row [ factor2 ] [ k - 1 ] ; } } } factor = ( rows + 1 ) % 2 ; factor2 = 0 ; for ( k = 0 ; k < rows ; k ++ ) if ( row [ factor ] [ k ] > factor2 ) factor2 = row [ factor ] [ k ] ; printf ( \"\n%d\" , factor2 ) ; for ( j = 0 ; j < rows ; j ++ ) row [ 1 ] [ j ] = row [ 0 ] [ j ] = 0 ; } return 0 ; }", "label": 1, "id": 676}
{"input": "int main ( ) { int t , a , b , temp , t1 , x , y , lcm , i ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( a % b != 0 ) { t1 = b ; b = a % b ; a = t1 ; } lcm = ( x * y ) / b ; printf ( \"%d %d\n\" , b , lcm ) ; } }", "label": 1, "id": 26675}
{"input": "int main ( ) { int t , n ; int i , j , k ; int sum , sum_max ; int * a ; int * b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int num = ( ( n * ( n + 1 ) ) / 2 ) ; a = ( int * ) malloc ( num * sizeof ( int ) ) ; for ( j = 0 ; j < num ; j ++ ) { scanf ( \"%d\" , a + j ) ; } b = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = 0 ; j < n ; j ++ ) * ( b + j ) = 0 ; sum_max = 0 ; while ( * b == 0 ) { int offset = 0 ; int prev_rows = 0 ; sum = 0 ; for ( j = 0 ; j < n ; j ++ ) { sum += * ( a + * ( b + j ) + offset + prev_rows ) ; offset += * ( b + j ) ; prev_rows += j + 1 ; } if ( sum > sum_max ) { sum_max = sum ; } for ( j = n - 1 ; j >= 0 ; j -- ) { if ( * ( b + j ) == 1 ) { * ( b + j ) = 0 ; } else { * ( b + j ) = 1 ; break ; } } } printf ( \"%d\n\" , sum_max ) ; } }", "label": 2, "id": 1796}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%d\n\" , solve ( x ) ) ; } return 0 ; }", "label": 0, "id": 26964}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , n , l ; scanf ( \"%lld%lld\" , & a , & b ) ; n = hcf ( a , b ) ; l = ( a * b ) / n ; printf ( \"%lld%lld\n\" , n , n ) ; } return 0 ; } int hcf ( int p , int q ) { if ( p == q ) return p ; else if ( p > q ) return hcf ( p - q , q ) ; else return hcf ( p , q - p ) ; }", "label": 1, "id": 5557}
{"input": "int main ( ) { int t ; long int a , b , gcd , lcm , i , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%li %li\" , & a , & b ) ; if ( a > b ) { x = a ; y = b ; } else { x = b ; y = a ; } for ( i = 1 ; i <= y ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { gcd = i ; } } for ( i = x ; i <= a * b ; i += x ) { if ( i % y == 0 ) { lcm = i ; break ; } } printf ( \"\n%li %li\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 10271}
{"input": "void find_sum ( int arr [ ] [ 100 ] , int n ) { int i ; if ( n == 0 ) return ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ n ] [ i ] > arr [ n ] [ i + 1 ] ) arr [ n - 1 ] [ i ] += arr [ n ] [ i ] ; else arr [ n - 1 ] [ i ] += arr [ n ] [ i + 1 ] ; } find_sum ( arr , n - 1 ) ; } int main ( ) { int t , n , arr [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( j = 0 ; j <= n ; j ++ ) arr [ n ] [ j ] = 0 ; find_sum ( arr , n ) ; printf ( \"%d\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 20532}
{"input": "int main ( ) { int t , i , dividend , divisor , remainder ; scanf ( \"%d\" , & t ) ; int a [ t ] , b [ t ] , gcd [ t ] , lcm [ t ] ; for ( i = 0 ; i < t ; i ++ ) scanf ( \"%d %d\" , & a [ i ] , & b [ i ] ) ; for ( i = 0 ; i < t ; i ++ ) { dividend = ( a [ i ] >= b [ i ] ) ? a [ i ] : b [ i ] ; divisor = ( a [ i ] <= b [ i ] ) ? a [ i ] : b [ i ] ; while ( divisor != 0 ) { remainder = dividend % divisor ; dividend = divisor ; divisor = remainder ; } gcd [ i ] = dividend ; lcm [ i ] = ( a [ i ] * b [ i ] ) / gcd [ i ] ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d %d\n\" , gcd [ i ] , lcm [ i ] ) ; return 0 ; }", "label": 1, "id": 17977}
{"input": "int main ( ) { int i , t , min ; long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; min = 1000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 880}
{"input": "void main ( ) { int t , c , i , j , k ; long int n ; long long int a [ 10000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; c = n ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { j = k ; while ( j <= n ) { if ( a [ j ] < a [ j + 1 ] ) { c ++ ; j ++ ; } else break ; } } printf ( \"%d\" , c ) ; } }", "label": 3, "id": 6251}
{"input": "int main ( ) { int T , N , i = 0 , j = 0 , array [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & array [ i ] [ j ] ) ; i = N - 2 ; for ( i ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { array [ i ] [ j ] = array [ i ] [ j ] + ( array [ i + 1 ] [ j ] > array [ i + 1 ] [ j + 1 ] ? array [ i + 1 ] [ j ] : array [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , array [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23556}
{"input": "int main ( ) { int testcase , n , max ; register int i , j ; scanf ( \"%d\" , & testcase ) ; while ( testcase -- ) { max = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j < i + 1 ; ++ j ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 1 ; i <= n - 1 ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) { if ( j == 0 ) { a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } else if ( j == i + 1 ) { a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } else if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) { a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } else { a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } } max = a [ 0 ] [ 0 ] ; for ( j = 0 ; j < n ; ++ j ) { if ( max < a [ n - 1 ] [ j ] ) max = a [ n - 1 ] [ j ] ; } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 1, "id": 24884}
{"input": "int max ( int ele1 , int ele2 ) { if ( ele1 > ele2 ) return ele1 ; else return ele2 ; } int main ( ) { int i , nor , not , a [ 100 ] [ 100 ] , sum , n , j ; scanf ( \"%d\" , & not ) ; for ( n = 0 ; n < not ; n ++ ) { scanf ( \"%d\" , & nor ) ; for ( i = 0 ; i < nor ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = nor - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } } }", "label": 1, "id": 24867}
{"input": "int main ( ) { int t , n , a [ 105 ] [ 105 ] , i , j , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int c [ 105 ] , res ; c [ 0 ] = 1 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < c [ i ] ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; c [ i + 1 ] = c [ i ] + 1 ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { x = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; y = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( x > y ) { a [ i ] [ j ] = x ; } else { a [ i ] [ j ] = y ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 19899}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n ; long long int s = 0 , i , a , d ; scanf ( \"%lld\" , & n ) ; scanf ( \"%lld\" , & d ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a ) ; if ( a < d ) d = a ; } s = d * ( n - 1 ) ; printf ( \"%lld\n\" , s ) ; } return 0 ; }", "label": 0, "id": 26076}
{"input": "int main ( int argc , const char * argv [ ] ) { int maxNumberOfTestCases = 0 , maxnumberOfLines = 0 , numberOfColumns = 0 , k = 0 , numberOfRows = 0 ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & maxNumberOfTestCases ) ; for ( k = 0 ; k < maxNumberOfTestCases ; k ++ ) { scanf ( \"%d\n\" , & maxnumberOfLines ) ; for ( numberOfRows = 0 ; numberOfRows < maxnumberOfLines ; numberOfRows ++ ) { for ( numberOfColumns = 0 ; numberOfColumns <= numberOfRows ; numberOfColumns ++ ) { scanf ( \"%d\" , & a [ numberOfRows ] [ numberOfColumns ] ) ; } } } while ( numberOfRows -- > 0 ) { for ( numberOfColumns = 0 ; numberOfColumns < numberOfRows ; numberOfColumns ++ ) { a [ numberOfRows - 1 ] [ numberOfColumns ] = a [ numberOfRows - 1 ] [ numberOfColumns ] + a [ numberOfRows ] [ numberOfColumns ] > a [ numberOfRows - 1 ] [ numberOfColumns ] + a [ numberOfRows ] [ numberOfColumns + 1 ] ? a [ numberOfRows - 1 ] [ numberOfColumns ] + a [ numberOfRows ] [ numberOfColumns ] : a [ numberOfRows - 1 ] [ numberOfColumns ] + a [ numberOfRows ] [ numberOfColumns + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; return 0 ; }", "label": 1, "id": 20693}
{"input": "int main ( ) { int t , n , l , a [ 5051 ] , i , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; d = n * ( 1 + n ) / 2 ; for ( i = 0 ; i < d ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; l = n ; for ( i = d - 1 ; i > 0 ; i -- ) { if ( i == ( ( l - 1 ) * l ) / 2 ) { l -- ; continue ; } if ( a [ i ] > a [ i - 1 ] ) a [ i - l ] += a [ i ] ; else a [ i - l ] += a [ i - 1 ] ; } printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24618}
{"input": "int main ( ) { int t , n , a [ 1000 ] , i , j , k , sum = 0 , l , u = 0 , m = 2 , y = 2 ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\n\" , & n ) ; for ( j = 0 ; j < ( n * ( n + 1 ) / 2 ) ; j ++ ) { scanf ( \"%d\\t\" , & a [ j ] ) ; } j = 0 ; while ( j < ( n * ( n + 1 ) / 2 ) ) { sum += a [ j ] ; j += y ; y ++ ; } printf ( \"%d\n\" , sum ) ; y = 2 ; sum = 0 ; } return ( 0 ) ; }", "label": 3, "id": 23175}
{"input": "int main ( ) { int t , n , i , j ; int a [ 102 ] [ 102 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4484}
{"input": "void sum ( int ( * arr ) [ 99 ] , int line ) ; int main ( ) { int arr [ 99 ] [ 99 ] = { 0 } ; int ans [ 1000 ] ; int line = 0 , loop = 0 , ch , i , j , p = 0 ; while ( ( ch = getchar ( ) ) != '\n' ) loop = loop * 10 + ( int ) ch - 48 ; while ( loop ) { i = 0 ; while ( ( ch = getchar ( ) ) != '\n' ) line = line * 10 + ( int ) ch - 48 ; while ( line ) { j = 0 ; while ( ( ch = getchar ( ) ) != '\n' ) { if ( ch != ' ' ) arr [ i ] [ j ] = arr [ i ] [ j ] * 10 + ( int ) ch - 48 ; else j ++ ; } i ++ ; line -- ; } sum ( arr , i - 2 ) ; ans [ p ++ ] = arr [ 0 ] [ 0 ] ; loop -- ; } i = 0 ; while ( i < p ) printf ( \"%d\n\" , ans [ i ++ ] ) ; return 0 ; } void sum ( int ( * arr ) [ 99 ] , int line ) { if ( line < 0 ) return ; int j = 0 ; while ( j <= line ) { ( arr [ line + 1 ] [ j ] > arr [ line + 1 ] [ j + 1 ] ) ? ( arr [ line ] [ j ] += arr [ line + 1 ] [ j ] ) : ( arr [ line ] [ j ] += arr [ line + 1 ] [ j + 1 ] ) ; j ++ ; } sum ( arr , -- line ) ; }", "label": 3, "id": 10687}
{"input": "int main ( ) { int test , n , a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 24365}
{"input": "int main ( ) { int t , n , i , l , sum ; scanf ( \"%d\" , & t ) ; getchar ( ) ; while ( t ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & i ) ; l = i ; n -- ; sum = 0 ; while ( n ) { scanf ( \"%d\" , & i ) ; if ( i < l ) l = i ; sum ++ ; n -- ; } printf ( \"%d\n\" , sum * l ) ; t -- ; } return 0 ; }", "label": 0, "id": 4011}
{"input": "int call ( int a [ 100 ] [ 100 ] , int i , int j , int n , int sum ) { int p1 , p2 , p ; if ( i < n ) { p1 = call ( a , i + 1 , j , n , sum + a [ i ] [ j ] ) ; p2 = call ( a , i + 1 , j + 1 , n , sum + a [ i ] [ j ] ) ; } else { p1 = sum ; p2 = sum ; } if ( p1 > p2 ) { p = p1 ; } else { p = p2 ; } return p ; } main ( ) { int a [ 100 ] [ 100 ] , i , j , p , n , t , t1 = 0 ; scanf ( \"%d\" , & t ) ; while ( t1 < t ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } p = call ( a , 0 , 0 , n , 0 ) ; printf ( \"%d\n\" , p ) ; t1 ++ ; } return 0 ; }", "label": 2, "id": 6362}
{"input": "int main ( ) { int i , T ; long int y , A , B , Z ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld %ld\" , & A , & B ) ; Z = A * B ; if ( A >= B ) { while ( B != 0 ) { y = A % B ; A = B ; B = y ; } printf ( \"%ld\" , A ) ; Z = Z / A ; } else { while ( A != 0 ) { y = B % A ; B = A ; A = y ; } printf ( \"%ld\" , B ) ; Z = Z / B ; } printf ( \" %ld\n\" , Z ) ; } return 0 ; }", "label": 0, "id": 588}
{"input": "int main ( ) { unsigned int i , j , k ; unsigned int n , nl ; unsigned int max = 0 ; char delta = 0 ; int result [ 100 ] = { 0 } ; int numbers [ 100 ] = { 0 } ; scanf ( \"%u\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%u\" , & nl ) ; memset ( result , 0 , sizeof ( result ) ) ; memset ( numbers , 0 , sizeof ( numbers ) ) ; for ( j = 1 ; j <= nl ; j ++ ) { delta = 0 ; for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%u\" , & numbers [ k - 1 ] ) ; numbers [ k - 1 ] += result [ k - 1 - delta ] ; delta ++ ; delta %= 2 ; } memcpy ( result , numbers , sizeof ( result ) ) ; } for ( j = 1 ; j <= nl ; j ++ ) { if ( result [ j - 1 ] > max ) max = result [ j - 1 ] ; } printf ( \"%u\" , max ) ; } return 0 ; }", "label": 1, "id": 7744}
{"input": "int main ( ) { int t , u ; scanf ( \"%d\" , & t ) ; if ( t <= 1000 ) { for ( u = 1 ; u <= t ; u ++ ) { int n , i , j , k ; scanf ( \"%d\" , & n ) ; if ( n > 0 && n < 100 ) { int arr [ n ] [ n ] ; int sum = 0 ; int m = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d \" , & arr [ i ] [ j ] ) ; } for ( k = 0 ; k <= i ; k ++ ) { if ( arr [ i ] [ k ] > m ) ; m = arr [ i ] [ k ] ; } sum = sum + m ; m = 0 ; } printf ( \"%d\n\" , sum ) ; } return 0 ; } } }", "label": 1, "id": 18150}
{"input": "int main ( ) { int aa [ 100 ] [ 100 ] ; int i , j , n , k ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , aa [ i ] [ j ] ) ; for ( i = k - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j < k - 1 ; j ++ ) if ( aa [ i ] [ j ] < aa [ i ] [ j + 1 ] ) aa [ i - 1 ] [ j ] = aa [ i ] [ j + 1 ] + aa [ i - 1 ] [ j ] ; else aa [ i - 1 ] [ j ] = aa [ i ] [ j ] + aa [ i - 1 ] [ j ] ; printf ( \"%d\" , & aa [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 1125}
{"input": "int main ( ) { int m , n , x , result , lcm ; scanf ( \"%d\" , & x ) ; for ( int i = 1 ; i <= x ; i ++ ) { scanf ( \"%d %d\" , & m , & n ) ; result = hcf ( m , n ) ; printf ( \"%d \" , result ) ; lcm = m * n / result ; printf ( \"%d\n\" , lcm ) ; } return 0 ; } int hcf ( int a , int b ) { while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; }", "label": 1, "id": 22562}
{"input": "int main ( void ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; scanf ( \"%d\" , & a [ 0 ] ) ; int min = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 7663}
{"input": "main ( ) { int q1 , q2 ; int buffer [ MAX ] [ MAX ] , i , j , r [ MAX ] [ MAX ] = { 0 } , result [ MAX ] , t , k ; int n ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & buffer [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) r [ n - 1 ] [ i ] = buffer [ n - 1 ] [ i ] ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { q1 = r [ i + 1 ] [ j + 1 ] + buffer [ i ] [ j ] ; q2 = r [ i + 1 ] [ j ] + buffer [ i ] [ j ] ; if ( q1 < q2 ) q1 = q2 ; r [ i ] [ j ] = q1 ; } } result [ k ] = r [ 0 ] [ 0 ] ; } for ( k = 0 ; k < t ; k ++ ) { printf ( \"\n%d\" , result [ k ] ) ; } return 0 ; }", "label": 0, "id": 26913}
{"input": "int main ( ) { int t , p , i , j , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & p ) ; for ( i = 0 ; i < p ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = p - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17161}
{"input": "int main ( ) { long t , i , min , k , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long a [ 50000 ] ; scanf ( \"%ld\" , & i ) ; scanf ( \"%ld\" , & a [ 0 ] ) ; min = a [ 0 ] ; k = i ; i -- ; while ( i -- ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } sum = min * ( k - 1 ) ; printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 6333}
{"input": "int gcd ( int x , int y ) { if ( x < y ) { return gcd ( y , x ) ; } int c ; while ( y ) { c = x % y ; x = y ; y = c ; } return x ; } int main ( ) { int t , i , k , s [ 1000 ] , r [ 1000 ] , x , y ; scanf ( \"%d\" , & t ) ; k = t ; while ( t ) { scanf ( \"%d %d\" , & x , & y ) ; int hcf = gcd ( x , y ) ; int lcm = ( x * y ) / hcf ; s [ t - 1 ] = hcf ; r [ t - 1 ] = lcm ; t -- ; } for ( i = k - 1 ; i >= 0 ; i -- ) { printf ( \"%d %d\n\" , s [ i ] , r [ i ] ) ; } }", "label": 1, "id": 5646}
{"input": "int main ( ) { int t , a , b , p = 0 , max = 0 , hcf , lcm , i ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; p = a * b ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } hcf = a ; lcm = p / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 2893}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; long long int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int k = ( n - i - 1 ) ; for ( int j = 0 ; j < ( n - k ) ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4671}
{"input": "int main ( ) { int t , n , i , j , k , a [ 50 ] [ 50 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i <= t - 1 ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j <= n - 1 ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; for ( j = n - 1 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) if ( a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ) a [ j ] [ k ] = a [ j + 1 ] [ k ] + a [ j ] [ k ] ; else a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ; } printf ( \"\n%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 7898}
{"input": "int main ( void ) { int i , j , t , n , c = 0 ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { t -- ; c = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , b [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ i ] [ j ] = 0 ; } } b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) b [ i ] [ j ] = b [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) b [ i ] [ j ] = b [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else b [ i ] [ j ] = b [ i - 1 ] [ j - 1 ] >= b [ i - 1 ] [ j ] ? ( a [ i ] [ j ] + b [ i - 1 ] [ j - 1 ] ) : ( a [ i ] [ j ] + b [ i - 1 ] [ j ] ) ; } } j = n - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( b [ j ] [ i ] > c ) c = b [ j ] [ i ] ; } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 0, "id": 6771}
{"input": "int main ( ) { int t , a [ 99 ] [ 99 ] , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 1709}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; gcd ( b , a % b ) ; } void main ( ) { int a , b , g , l , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 5862}
{"input": "int main ( void ) { long long int t , a , b , i , p , q , j ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int k = 1 ; scanf ( \"%lld %lld\" , & a , & b ) ; for ( i = 1 ; i <= 1000000 ; i ++ ) { if ( a % i == 0 && b % i == 0 ) k = k * i ; } p = a / k ; q = b / k ; j = ( p * q ) * k ; printf ( \"%lld %lld\n\" , k , j ) ; } return 0 ; }", "label": 2, "id": 13742}
{"input": "int main ( ) { int s , t , a , b , p ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; s = a * b ; while ( b != 0 ) { p = b ; b = a % b ; a = p ; } printf ( \"%d %d\n\" , a , s / a ) ; } return 0 ; }", "label": 1, "id": 12844}
{"input": "long long int getgcd ( long long int a , long long int b ) { if ( a == 0 ) return b ; return getgcd ( b % a , a ) ; } int main ( ) { long int t , i ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long long int a , b , gcd ; scanf ( \"%lld %lld\" , & a , & b ) ; long long int lcm ; gcd = getgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\" , gcd , lcm ) ; printf ( \"\n\" ) ; } }", "label": 0, "id": 24805}
{"input": "int main ( ) { int t ; int n ; long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) printf ( \">\" ) ; else if ( a < b ) printf ( \"<\" ) ; else printf ( \"=\" ) ; } }", "label": 1, "id": 9652}
{"input": "int main ( ) { int i , j ; long int t , n ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & a [ j ] ) ; int small = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < small ) small = a [ j ] ; } printf ( \"%ld\" , small * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 19596}
{"input": "int function ( int x , int i , int j , int n ) ; int a [ 100 ] [ 100 ] ; int main ( ) { int testcases , i , l ; for ( i = 0 ; i < 100 ; i ++ ) { for ( l = 0 ; l < 100 ; l ++ ) { a [ i ] [ l ] = - 1 ; } } scanf ( \"%d\" , & testcases ) ; for ( i = 0 ; i < testcases ; i ++ ) { int n , sum , j , k ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < 100 ; j ++ ) { for ( k = 0 ; k < 100 ; k ++ ) { a [ j ] [ k ] = - 1 ; } } for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } sum = function ( a [ 0 ] [ 0 ] , 0 , 0 , n ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; } int function ( int x , int i , int j , int n ) { int s1 , s2 ; if ( i + 1 == n ) { return a [ i ] [ j ] ; } else { s1 = x + function ( a [ i + 1 ] [ j ] , i + 1 , j , n ) ; s2 = x + function ( a [ i + 1 ] [ j + 1 ] , i + 1 , j + 1 , n ) ; if ( s1 >= s2 ) { return s1 ; } else { return s2 ; } } }", "label": 2, "id": 18878}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int i = 0 , j = 0 ; int n = 0 ; int rows = 0 ; int num = 0 ; int k = 0 ; int maxSum = 0 ; int matrix [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { maxSum = 0 ; scanf ( \"%d\" , & rows ) ; for ( j = 0 ; j < rows - 1 ; j ++ ) { matrix [ j ] [ j + 1 ] = 0 ; } if ( rows != 0 ) { scanf ( \"%d\" , & num ) ; maxSum = num ; matrix [ 0 ] [ 0 ] = num ; } for ( j = 1 ; j < rows ; j ++ ) { scanf ( \"%d\" , & num ) ; matrix [ j ] [ 0 ] = matrix [ j - 1 ] [ 0 ] + num ; for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & num ) ; matrix [ j ] [ k ] = max ( matrix [ j - 1 ] [ k ] + num , matrix [ j - 1 ] [ k - 1 ] + num ) ; maxSum = matrix [ j ] [ k ] > maxSum ? matrix [ j ] [ k ] : maxSum ; } } printf ( \"%d\n\" , maxSum ) ; } return 0 ; }", "label": 0, "id": 26261}
{"input": "int main ( ) { int t , k ; scanf ( \"%d\" , & t ) ; int s [ t ] ; for ( k = 1 ; k <= t ; k ++ ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } int sum = a [ 0 ] [ 0 ] , sumbottom = 0 , sumright = 0 , val = 0 ; for ( i = 0 ; i < ( n - 1 ) ; i ++ ) { sumbottom = 0 ; sumright = 0 ; for ( j = i + 1 ; j < n ; j ++ ) { sumbottom += a [ j ] [ val ] ; ( val <= j ) ? ( sumright += a [ j ] [ val + 1 ] ) : ( sumright = 0 ) ; } if ( sumright > sumbottom ) { sum += a [ i + 1 ] [ val + 1 ] ; val += 1 ; } else sum += a [ i + 1 ] [ val ] ; } s [ k ] = sum ; } for ( k = 1 ; k <= t ; k ++ ) { printf ( \"%d\n\" , s [ k ] ) ; } return 0 ; }", "label": 1, "id": 24391}
{"input": "long gcdca ( long a , long b ) { a = abs ( a ) ; b = abs ( b ) ; return ( b == 0 ) ? a : gcdca ( b , a % b ) ; } int main ( ) { long t , a , b , i , gcd , lcm ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { lcm = 0 ; gcd = 0 ; scanf ( \"%ld%ld\" , & a , & b ) ; gcd = gcdca ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } }", "label": 0, "id": 22181}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; int gcd , lcm , a , b ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"\n%d %d\" , & a , & b ) ; for ( j = 1 ; j <= a ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } lcm = ( a * b ) / gcd ; printf ( \"\n%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 7499}
{"input": "int main ( ) { short int T , i , j , k ; unsigned int N , M ; scanf ( \"%d\n\" , & T ) ; if ( T >= 1 && T <= 5 ) { while ( T -- ) { scanf ( \"%d\n\" , N ) ; if ( N > 0 ) { int a [ N ] ; for ( j = 0 ; j < N ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; i = 1 , M = 0 ; while ( N -- ) { if ( a [ i ] < a [ i + 1 ] ) M = M + 1 ; else i ++ ; } M = M + N ; printf ( \"%d\n\" , M ) ; } } } return 0 ; }", "label": 3, "id": 23197}
{"input": "int gcd ( int a , int b ) { int ans ; if ( a < b ) ans = gcd ( b , a ) ; else if ( b == 0 ) ans = b ; else gcd ( b , a % b ) ; return ans ; } int main ( ) { int a , b , n , g , l ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / gcd ( a , b ) ; printf ( \"%d %d\" , g , l ) ; } return 0 ; }", "label": 3, "id": 20427}
{"input": "int main ( ) { int t , x ; int a [ 110 ] [ 110 ] , s [ 110 ] [ 110 ] , i , j , n , k , l , b [ 110 ] ; scanf ( \"%d\" , & t ) ; for ( x = 0 ; x < t ; x ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { { for ( j = 0 ; j <= i ; j ++ ) s [ i ] [ j ] = a [ i ] [ j ] ; } } for ( k = n - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { if ( s [ k + 1 ] [ l ] >= s [ k + 1 ] [ l + 1 ] ) { s [ k ] [ l ] = s [ k + 1 ] [ l ] + s [ k ] [ l ] ; } else if ( s [ k + 1 ] [ l ] <= s [ k + 1 ] [ l + 1 ] ) { s [ k ] [ l ] = s [ k + 1 ] [ l + 1 ] + s [ k ] [ l ] ; } } } b [ x ] = s [ 0 ] [ 0 ] ; } for ( x = 0 ; x < t ; x ++ ) { printf ( \"%d\n\" , b [ x ] ) ; } return 0 ; }", "label": 1, "id": 19516}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b ; long long int ans ; scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { ans = a % b ; if ( ans == 0 ) { printf ( \"%lld %lld\n\" , ans , a ) ; } else printf ( \"1 %lld\n\" , a * b ) ; } else { ans = b % a ; if ( ans == 0 ) printf ( \"%lld %lld\n\" , ans , b ) ; else printf ( \"1 %lld\n\" , a * b ) ; } } return 0 ; }", "label": 1, "id": 3112}
{"input": "long long int GCD ( long long int a , long long int b ) { if ( b == 0 ) return a ; else return GCD ( b , a % b ) ; } int main ( ) { int cases ; scanf ( \"%d\" , & cases ) ; while ( cases > 0 ) { long long int A , B ; scanf ( \"%lld%lld\" , & A , & B ) ; long long int gcd = GCD ( A , B ) ; long long int lcm = ( A * B ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; cases -- ; } return 0 ; }", "label": 0, "id": 22175}
{"input": "int main ( ) { int t , n , i , j , k , arr [ 100 ] [ 100 ] , sum , large ; sum = 0 ; large = 0 ; scanf ( \"%d\" , & t ) ; for ( k = 1 ; k <= t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = 0 ; i < n - 1 ; i ++ ) { sum = arr [ i ] [ 0 ] + arr [ i + 1 ] [ 0 ] + arr [ i + 1 ] [ 1 ] ; if ( sum > large ) large = sum ; } printf ( \"%d\" , large ) ; } return 0 ; }", "label": 1, "id": 22214}
{"input": "int main ( ) { long long int n , x , t , a ; int i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"11%d\" , & x ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"11%d\" , & a ) ; if ( a < x ) a = x ; } printf ( \"d\" , a * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 26801}
{"input": "int main ( ) { int i , k , j , n , ln , row [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & ln ) ; for ( i = 0 ; i < ln ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & row [ i ] [ j ] ) ; } } for ( i = ln - 1 ; i >= 0 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( row [ i ] [ j ] >= row [ i ] [ j + 1 ] ) row [ i - 1 ] [ j ] = row [ i - 1 ] [ j ] + row [ i ] [ j ] ; else row [ i - 1 ] [ j ] = row [ i - 1 ] [ j ] + row [ i ] [ j + 1 ] ; } } printf ( \"%d\" , row [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 10784}
{"input": "int main ( ) { int i , j , sum , k , arr [ 100 ] [ 100 ] , n , max = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; j ++ ; } if ( j > i ) { while ( j < n ) { arr [ i ] [ j ] = - 1 ; j ++ ; } } } sum = arr [ 0 ] [ 0 ] ; j = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( sum + arr [ i + 1 ] [ j ] > sum + arr [ i + 1 ] [ j + 1 ] ) { sum = sum + arr [ i + 1 ] [ j ] ; } else { sum = sum + arr [ i + 1 ] [ j + 1 ] ; j = j + 1 ; } } sum = arr [ 0 ] [ 0 ] ; j = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( sum + arr [ i + 1 ] [ j ] > sum + arr [ i + 1 ] [ j + 1 ] ) { sum = sum + arr [ i + 1 ] [ j ] ; } else { sum = sum + arr [ i + 1 ] [ j + 1 ] ; j = j + 1 ; } } printf ( \"%d\" , sum ) ; }", "label": 3, "id": 2818}
{"input": "long long int hcf ( long long int n1 , long long int n2 ) ; int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { long long int n1 , n2 , x , y , z , l ; scanf ( \"%lld %lld\" , & n1 , & n2 ) ; x = n1 ; y = n2 ; z = x * y ; long long int g = hcf ( n1 , n2 ) ; l = z / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; } long long int hcf ( long long int n1 , long long int n2 ) { if ( n2 != 0 ) return hcf ( n2 , n1 % n2 ) ; else { return n1 ; } }", "label": 0, "id": 7895}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2609}
{"input": "int main ( ) { int t , n , i , j , val , k , sum ; printf ( \"Enter the no. of test cases:\n\" ) ; scanf ( \"%d\" , & t ) ; int arr [ 50000 ] [ 10 ] = { { 0 , 0 , 0 } , { 0 , 0 , 0 } , { 0 , 0 , 0 } , { 0 , 0 , 0 } , { 0 , 0 , 0 } , { 0 , 0 , 0 } , { 0 , 0 , 0 } , { 0 , 0 , 0 } , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; for ( i = 0 ; i < t ; i ++ ) { printf ( \"Enter the no. of elements in the array(atmost 50000 elements):\n\" ) ; scanf ( \"%d\" , & n ) ; printf ( \"Enter the elements(1 to 100000):\n\" ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = 0 ; i < t ; i ++ ) { sum = 0 ; for ( j = 0 ; ; j ++ ) { if ( arr [ i ] [ j ] == '*' ) ; else { val = arr [ i ] [ j ] ; for ( k = j + 1 ; k < 50000 ; k ++ ) { if ( arr [ i ] [ k ] == 0 ) goto label ; else { if ( arr [ i ] [ k ] == '*' ) ; else { if ( arr [ i ] [ k ] > arr [ i ] [ j ] ) { arr [ i ] [ k ] = '*' ; sum = sum + arr [ i ] [ j ] ; } else { arr [ i ] [ j ] = '*' ; sum = sum + arr [ i ] [ k ] ; } break ; } } } j = - 1 ; } } label : printf ( \"%d\n\" , sum ) ; } }", "label": 2, "id": 13603}
{"input": "int nzd ( int a , int b ) { if ( a == 0 ) return b ; while ( b != 0 ) if ( a > b ) a = a - b ; else b = b - a ; return a ; } int main ( ) { int n , i , j , k , br1 , br2 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & br1 , & br2 ) ; printf ( \"%d \" , nzd ( br1 , br2 ) ) ; printf ( \"%d\n\" , br1 * br2 / nzd ( br1 , br2 ) ) ; } return 0 ; }", "label": 1, "id": 19672}
{"input": "int main ( ) { int t , i , rem , a , sum ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; sum = 0 ; while ( a > 0 ) { rem = a ; sum = sum + rem ; a = a / 10 ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 17591}
{"input": "int main ( ) { int tc , T ; scanf ( \"%d\" , & T ) ; for ( tc = 0 ; tc < T ; tc ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , a , ( n1 * n2 ) / a ) ; } return 0 ; }", "label": 1, "id": 25651}
{"input": "int hc ( int , int ) ; int main ( void ) { int t , a , b , i , hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; hcf = hc ( a , b ) ; lcm = ( ( a * b ) / hcf ) ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; } int hc ( int a , int b ) { if ( b == 0 ) return a ; hc ( b , a % b ) ; }", "label": 1, "id": 12198}
{"input": "int main ( ) { int a , i , b , j , c , d , sum1 , sum2 = 0 , k ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { sum1 = 0 ; scanf ( \"%d\" , & b ) ; for ( j = 1 ; j <= b ; j ++ ) { for ( d = 0 ; d < j ; d ++ ) { scanf ( \"%d\" , & c ) ; sum1 += c ; } if ( sum2 > sum1 ) k = j ; sum2 = sum1 ; } if ( i == 0 ) printf ( \"%d\" , ( j + 1 ) ) ; else printf ( \"%d\" , ( j + 2 + b ) ) ; } return 0 ; }", "label": 1, "id": 21640}
{"input": "int max_func ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; int dp [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } dp [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) dp [ i ] [ i ] = dp [ i - 1 ] [ i - 1 ] + a [ i ] [ i ] ; for ( i = 2 ; i < n ; i ++ ) for ( j = 1 ; j < i ; j ++ ) dp [ i ] [ j ] = a [ i ] [ j ] + max_func ( dp [ i - 1 ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; int max = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( max < dp [ n - 1 ] [ i ] ) max = dp [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 7494}
{"input": "int main ( ) { int t , n , * * a , * * b ; int max , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; b = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; b [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ i ] [ j ] = a [ i ] [ j ] ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( ( i && j ) && j < i ) b [ i ] [ j ] += ( b [ i - 1 ] [ j - 1 ] > b [ i - 1 ] [ j ] ) ? b [ i - 1 ] [ j - 1 ] : b [ i - 1 ] [ j ] ; else if ( i && j == i ) b [ i ] [ j ] += b [ i - 1 ] [ j - 1 ] ; else if ( j == 0 && i != j ) b [ i ] [ j ] += b [ i - 1 ] [ j ] ; } } max = b [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( b [ n - 1 ] [ i ] > max ) max = b [ n - 1 ] [ i ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 19411}
{"input": "int main ( ) { int x ; int n , i , j , r ; scanf ( \"%d\" , & x ) ; while ( x -- ) { int arr [ 100 ] [ 100 ] = { 0 } , max = 0 ; scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & n ) ; { if ( i == 0 && j == 0 ) arr [ i ] [ j ] = n ; else if ( j == 0 ) arr [ i ] [ j ] = arr [ i - 1 ] [ j ] + n ; else if ( i == j ) arr [ i ] [ j ] = arr [ i - 1 ] [ j - 1 ] + n ; else arr [ i ] [ j ] = arr [ i - 1 ] [ j - 1 ] > arr [ i - 1 ] [ j ] ? arr [ i - 1 ] [ j - 1 ] + n : arr [ i - 1 ] [ j ] + n ; } if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 15195}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] = { 0 } , i , j , k , l , m , n , t ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( l = t ; l >= 0 ; l -- ) { for ( m = 0 ; m <= l - 1 ; m ++ ) { if ( a [ l ] [ m ] > a [ l ] [ m + 1 ] ) { a [ l - 1 ] [ m ] = a [ l - 1 ] [ m ] + a [ l ] [ m ] ; } else { a [ l - 1 ] [ m ] = a [ l - 1 ] [ m ] + a [ l ] [ m + 1 ] ; } } } printf ( \"%d\" , a [ l - 1 ] [ m ] ) ; } return 0 ; }", "label": 1, "id": 26144}
{"input": "void out ( long int a , long int b , long int x ) { long int i ; long long int y , g = 1 ; for ( i = 1 ; i <= x ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) g = i ; } printf ( \"%lld \" , g ) ; g = 1 ; for ( i = 1 ; i <= x ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) g = g * i ; } y = ( g * ( a / g ) * ( b / g ) ) ; printf ( \"%lld\" , y ) ; } int main ( ) { long int n , x ; scanf ( \"%ld \" , & n ) ; long int i , a , b ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a >= b ) x = b ; else x = a ; out ( a , b , x ) ; } return 0 ; }", "label": 2, "id": 22065}
{"input": "int main ( ) { int ar [ 100 ] [ 100 ] , i , t , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i >= j ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < n - 1 ; j ++ ) if ( ar [ i ] [ j ] > ar [ i ] [ j + 1 ] ) ar [ i - 1 ] [ j ] += ar [ i ] [ j ] ; else ar [ i - 1 ] [ j ] += ar [ i ] [ j + 1 ] ; } printf ( \"%d\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 24741}
{"input": "int com ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } qsort ( a , n , sizeof ( int ) , com ) ; printf ( \"%d\n\" , a [ 0 ] * ( n - 1 ) ) ; } }", "label": 0, "id": 16748}
{"input": "long long int gcd ( long int , long int ) ; int main ( ) { long long int a , t , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; } long long int gcd ( long int a , long int b ) { if ( a == b ) { return a ; } else if ( a > b ) { return ( gcd ( ( a - b ) , b ) ) ; } else { return ( gcd ( a , ( b - a ) ) ) ; } }", "label": 1, "id": 3525}
{"input": "int main ( ) { long long int a , b , c , i , j , d , t ; scanf ( \"%lld\" , & a ) ; while ( a -- ) { scanf ( \"%lld\" , & b ) ; d = 100000 ; t = b ; while ( t -- ) { scanf ( \"%lld\" , & c ) ; if ( c < d ) { d = c ; } } printf ( \"%lld\n\" , d * ( b - 1 ) ) ; } return 0 ; }", "label": 0, "id": 311}
{"input": "int main ( void ) { int t , n1 , n2 , lcm , n ; scanf ( \"%lld \n\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\n\" , & n1 , & n2 ) ; n = lcm = 0 ; n = gcd ( n1 , n2 ) ; lcm = ( n1 * n2 ) / n ; printf ( \"%d %d\n\" , n , lcm ) ; } return 0 ; } int gcd ( int a , int b ) { int g ; if ( a % b == 0 ) return b ; else g = gcd ( b , a % b ) ; return g ; }", "label": 1, "id": 26139}
{"input": "int main ( ) { long long int a ; scanf ( \"%lld\" , & a ) ; for ( long long int i = 0 ; i < a ; i ++ ) { long long int b ; scanf ( \"%lld\" , & b ) ; long long int c [ b ] ; for ( long long int i = 0 ; i < b ; i ++ ) { scanf ( \"%lld\" , & c [ i ] ) ; } long long int min = c [ 0 ] ; for ( long long int i = 0 ; i < b ; i ++ ) { if ( min > c [ i ] ) { min = c [ i ] ; } } printf ( \"%lld\n\" , ( ( b - 1 ) * min ) ) ; } return 0 ; }", "label": 0, "id": 3194}
{"input": "int main ( ) { int t , a , b , c = 5 , lcm , k , j , hcf ; scanf ( \"%d\" , & t ) ; scanf ( \"\n%d %d\" , & a , & b ) ; k = a ; j = b ; if ( a >= b ) { while ( 1 ) { c = ( a % b ) ; a = b ; b = c ; hcf = b ; if ( c == 0 ) { lcm = ( k * j ) / hcf ; printf ( \"\n%d %d\" , hcf , lcm ) ; break ; } } } if ( b > a ) { while ( 1 ) { c = ( b % a ) ; b = a ; a = c ; hcf = a ; if ( c == 0 ) { lcm = ( k * j ) / hcf ; printf ( \"\n%d %d\" , hcf , lcm ) ; break ; } } } }", "label": 3, "id": 20201}
{"input": "int trian [ MAX ] [ MAX ] ; int dp [ MAX ] [ MAX ] ; int find_max ( int row , int col , int height ) { if ( height == row ) return 0 ; else if ( dp [ row ] [ col ] != - 1 ) return dp [ row ] [ col ] ; else { int present = trian [ row ] [ col ] ; int bel = find_max ( row + 1 , col , height ) ; int right = find_max ( row + 1 , col + 1 , height ) ; if ( bel > right ) { dp [ row ] [ col ] = bel + present ; return ( bel + present ) ; } else { dp [ row ] [ col ] = right + present ; return ( right + present ) ; } } } int main ( ) { int cases ; scanf ( \"%d\" , & cases ) ; int i ; for ( i = 0 ; i < cases ; i ++ ) { int l , m ; for ( l = 0 ; l < MAX ; l ++ ) for ( m = 0 ; m < MAX ; m ++ ) dp [ l ] [ m ] = - 1 ; int height ; scanf ( \"%d\" , & height ) ; int j , k ; for ( j = 0 ; j < height ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & ( trian [ j ] [ k ] ) ) ; printf ( \"%d\n\" , find_max ( 0 , 0 , height ) ) ; } return 0 ; }", "label": 0, "id": 10034}
{"input": "int main ( ) { int i , T ; long long int y , A , B ; long long int Z ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%llu %llu\" , & A , & B ) ; Z = A * B ; if ( A >= B ) { while ( B != 0 ) { y = A % B ; A = B ; B = y ; } printf ( \"%llu\" , A ) ; } else { while ( A != 0 ) { y = B % A ; B = A ; A = y ; } printf ( \"%llu\" , B ) ; } printf ( \" %llu\n\" , Z ) ; } return 0 ; }", "label": 1, "id": 24659}
{"input": "int a [ maxn ] ; int main ( ) { int n , m , k ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; scanf ( \"%d%d\" , & a [ 0 ] , & a [ 1 ] ) ; int t1 = a [ 0 ] > a [ 1 ] ? a [ 0 ] : a [ 1 ] ; int t2 = a [ 0 ] < a [ 1 ] ? a [ 0 ] : a [ 1 ] ; for ( int i = 2 ; i < m ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] >= t2 && a [ i ] <= t1 ) { t2 = a [ i ] ; } if ( a [ i ] > t1 ) { t2 = t1 ; t1 = a [ i ] ; } } printf ( \"%d\n\" , t2 ) ; } }", "label": 3, "id": 22233}
{"input": "int main ( ) { int t , a , b , m , n , r , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; m = a ; n = b ; while ( m % n != 0 ) { r = m % n ; m = n ; n = r ; } printf ( \" %d %d\n\" , n , a * b / n ) ; } return 0 ; }", "label": 1, "id": 5090}
{"input": "void main ( ) { long long int t , n ; int i , b , minimum ; long long int a [ 50000 ] ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } minimum = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < minimum ) { minimum = a [ i ] ; } } b = minimum * ( n - 1 ) ; printf ( \"%d\n\" , b ) ; } }", "label": 0, "id": 4261}
{"input": "int main ( ) { int t , n1 , n2 , r = 0 ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; int r = n1 , s = n2 ; if ( n1 < n2 ) { int t = n1 ; n1 = n2 ; n2 = t ; } else { r = n1 % n2 ; while ( r != 0 ) { n1 = n2 ; n2 = r ; r = n1 % n2 ; } } printf ( \"%d %d\" , n2 , ( r * s ) / n2 ) ; } return 0 ; }", "label": 1, "id": 16975}
{"input": "int cache [ 100 ] [ 100 ] , a [ 100 ] [ 100 ] , n ; int solve ( int i , int j ) { int t1 , t2 , t , max ; if ( i >= n ) return ( 0 ) ; if ( cache [ i ] [ j ] != - 1 ) return cache [ i ] [ j ] ; t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; if ( t1 >= t2 ) max = t1 ; else max = t2 ; t = max + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int tst , i , j ; scanf ( \"%d\" , & tst ) ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) cache [ i ] [ j ] = - 1 ; a [ i ] [ j ] = 0 ; } while ( tst -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } printf ( \"%d\" , solve ( 0 , 0 ) ) ; } return ( 0 ) ; }", "label": 1, "id": 23804}
{"input": "int A [ 20000 ] ; int main ( void ) { int T ; int r ; int v ; int count = 0 ; int max = 0 ; int i ; int x ; int z ; int n = 0 ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; A [ 0 ] = 0 ; max = 0 ; x = 1 ; i = 1 ; while ( x < n + 1 ) { for ( z = 0 ; z < x ; z ++ ) { scanf ( \"%d\" , & v ) ; A [ i ] += v ; if ( A [ i + x ] < A [ i ] ) { A [ i + x ] = A [ i ] ; } if ( A [ i + x + 1 ] < A [ i ] ) { A [ i + x + 1 ] = A [ i ] ; } i ++ ; } x ++ ; } for ( x = 1 ; x < i + 1 ; x ++ ) if ( max < A [ x ] ) max = A [ x ] ; printf ( \"%d\n\" , max ) ; for ( x = 0 ; x < 20000 ; x ++ ) A [ x ] = 0 ; } return 0 ; }", "label": 0, "id": 16250}
{"input": "static int maxval ; void setmax ( int ) ; int getmax ( short int , short int ) ; int main ( ) { short int arr [ 100 ] [ 100 ] , element , maxarr [ 100 ] [ 100 ] ; int tc , gmax = 0 , smax = 0 ; unsigned short int i = 0 , j = 0 , no = 0 ; scanf ( \"%d\" , & tc ) ; while ( tc ) { maxval = 0 , gmax = 0 , smax = 0 ; memset ( arr , 0 , sizeof ( arr [ 0 ] [ 0 ] ) + 10000 ) ; memset ( maxarr , 0 , sizeof ( maxarr [ 0 ] [ 0 ] ) + 10000 ) ; scanf ( \"%hd\" , & no ) ; for ( i = 0 ; i < no ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%hd\" , & element ) ; arr [ i ] [ j ] = element ; if ( i == 0 ) { maxarr [ i ] [ j ] = gmax + arr [ i ] [ j ] ; } else { gmax = getmax ( maxarr [ i - 1 ] [ j - 1 ] , maxarr [ i - 1 ] [ j ] ) ; maxarr [ i ] [ j ] = gmax + arr [ i ] [ j ] ; } setmax ( maxarr [ i ] [ j ] ) ; } } printf ( \"%d\n\" , maxval ) ; tc -- ; } return 0 ; } int getmax ( short int x , short int y ) { int maxi = 0 ; if ( x > y ) maxi = x ; else maxi = y ; return maxi ; } void setmax ( int x ) { if ( x > maxval ) maxval = x ; }", "label": 1, "id": 22862}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int ar [ 101 ] [ 101 ] , n , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( ar [ i + 1 ] [ j ] > ar [ i + 1 ] [ j + 1 ] ) ar [ i ] [ j ] = ar [ i ] [ j ] + ar [ i + 1 ] [ j ] ; else ar [ i ] [ j ] = ar [ i ] [ j ] + ar [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } return ( 0 ) ; }", "label": 0, "id": 14314}
{"input": "int main ( void ) { int t , i , j , k , size , l , m , q ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & size ) ; int a [ size ] ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int min = 0 , sum ; for ( i = 0 ; i < size - 1 ; i ++ ) { if ( a [ 0 ] > a [ 1 ] ) { min = min + a [ 1 ] ; for ( l = 0 ; l < size - 1 ; l ++ ) a [ l ] = a [ l + 1 ] ; } else { min = min + a [ 0 ] ; for ( m = 1 ; m < size - 1 ; m ++ ) a [ m ] = a [ m + 1 ] ; } } printf ( \"%d\n\" , min ) ; } return 0 ; }", "label": 2, "id": 11665}
{"input": "long int n , mat [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] , visit [ 100 ] [ 100 ] ; long int maxs ( a , b ) { return ( a > b ? a : b ) ; } long int dp ( long int i , long int j ) { if ( i < 0 || j > i || j < 0 ) return 0 ; if ( ! visit [ i ] [ j ] ) { if ( i == 0 && j == 0 ) return mat [ 0 ] [ 0 ] ; else { sum [ i ] [ j ] = mat [ i ] [ j ] + maxs ( dp ( i - 1 , j ) , dp ( i - 1 , j - 1 ) ) ; visit [ i ] [ j ] = 1 ; return sum [ i ] [ j ] ; } } return sum [ i ] [ j ] ; } int main ( ) { long int t , x , l , k , i , y ; long int max , r ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; x = n ; for ( i = 0 ; i < n ; i ++ ) for ( k = 0 ; k < n ; k ++ ) visit [ i ] [ k ] = 0 ; i = 1 ; k = 0 ; while ( x -- ) { y = i ; l = 0 ; while ( y -- ) { scanf ( \"%ld\" , & mat [ k ] [ l ] ) ; l ++ ; } i ++ ; k ++ ; } sum [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ; max = dp ( n - 1 , 0 ) ; for ( x = 1 ; x < n ; x ++ ) { r = dp ( n - 1 , x ) ; if ( max < r ) max = r ; } printf ( \"%ld\n\" , max ) ; } return 0 ; }", "label": 0, "id": 13520}
{"input": "int main ( ) { int t , i , a , b , hcf , lcm ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { i = 1 ; scanf ( \"%d %d\" , & a , & b ) ; while ( i <= a && i <= b ) { if ( a % i == 0 && b % i == 0 ) hcf = i ; i ++ ; } lcm = a * b / hcf ; printf ( \"%d %d\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 16819}
{"input": "long int gcd ( long int a , long int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int t ; long int a , b , hcf ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; hcf = gcd ( a , b ) ; printf ( \"%ld %ld\n\" , hcf , hcf / ( a * b ) ) ; } return 0 ; }", "label": 1, "id": 15641}
{"input": "int main ( void ) { int t , a , b , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int k = 1 ; scanf ( \"%d %d\" , & a , & b ) ; for ( i = a ; i > 0 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { a = a / i ; b = b / i ; k = k * i ; } } j = ( a * b ) * k ; printf ( \"%d %d\n\" , k , j ) ; } return 0 ; }", "label": 2, "id": 11570}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int j , t , a , b , temp , c ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; ++ j ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } c = gcd ( a , b ) ; printf ( \"%d %d\n\" , c , ( a * b ) / c ) ; } return 0 ; }", "label": 1, "id": 11275}
{"input": "main ( ) { long n1 , n2 , t , temp , GCD , LCM ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & n1 , & n2 ) ; LCM = n1 * n2 * 1.0 ; while ( n2 != 0 ) { temp = n1 % n2 ; n1 = n2 ; n2 = temp ; } GCD = n1 ; LCM /= GCD ; printf ( \"%ld %ld\n\" , GCD , LCM ) ; } }", "label": 0, "id": 9608}
{"input": "int gcd ( int n1 , int n2 ) { if ( n1 % n2 ) return gcd ( n2 , n1 % n2 ) ; else return n2 ; } int lcm ( int n1 , int n2 ) { return n1 * n2 / gcd ( n1 , n2 ) ; } void main ( ) { int t , n1 , n2 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n1 ) ; scanf ( \"%d\" , & n2 ) ; printf ( \"%d %d\" , gcd ( n1 > n2 ? n1 : n2 , n1 < n2 ? n1 : n2 ) , lcm ( n1 > n2 ? n1 : n2 , n1 < n2 ? n1 : n2 ) ) ; } }", "label": 1, "id": 13450}
{"input": "long long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { long int t , a , b ; long long int l , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 11715}
{"input": "int main ( ) { int t , n , i , j , max , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { c = max + a [ i ] [ j ] ; if ( i == 0 ) max = a [ 0 ] [ 0 ] ; else if ( max < c ) max = c ; } } printf ( \"%d\n\" , max / 2 ) ; } }", "label": 1, "id": 12463}
{"input": "int main ( ) { int test_case ; int n , count , sum , i ; scanf ( \"%d\" , & test_case ) ; while ( test_case -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; count = 1 ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - 1 ] ) { count ++ ; } else { sum = sum + ( count * ( count + 1 ) / 2 ) ; count = 1 ; } } sum = sum + ( count * ( count + 1 ) / 2 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 27046}
{"input": "int main ( ) { int t , i , n , j , k ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = n - 1 ; j > 0 ; j -- ) { for ( k = 0 ; k < n - 1 ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + 1 ] ) { a [ j - 1 ] [ k ] = a [ j - 1 ] [ k ] + a [ j ] [ k ] ; } else a [ j - 1 ] [ k ] = a [ j - 1 ] [ k ] + a [ j ] [ k + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 10729}
{"input": "int Calculate ( long long int * , long long int ) ; int main ( ) { long long int a [ 100021 ] ; long long int i , t , n , j , count ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%lld\" , & a [ j ] ) ; count = Calculate ( a , n ) ; printf ( \"%lld\n\" , count ) ; } return 0 ; } int Calculate ( long long int * a , long long int n ) { int i , count = 0 , sum = 0 , temp = 0 , j , b [ 100021 ] ; b [ temp ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { temp ++ ; b [ temp ] = i ; } } temp = temp + 1 ; b [ temp ] = i - 1 ; for ( i = 1 ; i <= temp ; i ++ ) { sum = b [ i ] - b [ i - 1 ] ; count += ( sum * ( sum + 1 ) ) / 2 ; } return count ; }", "label": 0, "id": 4961}
{"input": "int n ; int main ( ) { int i , j , k , sum [ 100 ] = { 0 } , t , temp ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { temp = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( temp > a [ i ] [ j ] ) a [ i ] [ j ] = temp ; } } sum [ k ] = a [ 0 ] [ 0 ] ; } for ( k = 0 ; k < t ; k ++ ) printf ( \"%d\n\" , sum [ k ] ) ; return 0 ; }", "label": 1, "id": 19364}
{"input": "int main ( ) { int T ; long long int i , k , N , M ; scanf ( \"%d\n\" , & T ) ; while ( T -- ) { scanf ( \"%lli\n\" , & N ) ; int a [ N ] , j ; for ( j = 0 ; j < N ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; M = N ; for ( i = 0 ; i < N - 2 ; i -- ) { if ( a [ i ] > a [ i + 1 ] ) M = M + 1 ; } printf ( \"%lli\n\" , M ) ; } return 0 ; }", "label": 3, "id": 17331}
{"input": "int GCD ( int n1 , int n2 ) { while ( n1 != n2 ) { if ( n1 == 0 || n2 == 0 ) return 0 ; if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } return n1 ; } int main ( ) { int gcd , lcm , t , n1 , n2 ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n1 ) ; scanf ( \"%d\" , & n2 ) ; gcd = GCD ( n1 , n2 ) ; lcm = n1 * n2 / gcd ; printf ( \"%d\" , gcd ) ; printf ( \" %d\n\" , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 8837}
{"input": "int main ( ) { int i , j , t , c , count ; long int a [ 100000 ] , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 , c = 0 ; scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { if ( j == 0 ) scanf ( \"%ld\" , & a [ j ] ) ; else { scanf ( \"%ld\" , & a [ j ] ) ; if ( a [ j ] >= a [ j - 1 ] ) { c ++ ; continue ; } if ( c ) count ++ ; c = 0 ; } } if ( c ) count ++ ; printf ( \"%ld\n\" , count + n ) ; } return 0 ; }", "label": 1, "id": 24194}
{"input": "int arr [ SIZE ] [ SIZE ] ; void doMagic ( int n ) ; int getMaxOfArray ( int size ) ; int getMaxOf ( int a , int b ) ; int valueOf ( int a , int b ) ; void printArray ( int size ) ; int main ( ) { int t = 0 ; scanf ( \"%d\" , & t ) ; int num_of_row = 0 ; int outer = 0 ; int inner = 0 ; while ( t -- ) { scanf ( \"%d\" , & num_of_row ) ; memset ( arr , 0 , sizeof ( arr ) ) ; for ( outer = 0 ; outer < num_of_row ; outer ++ ) { for ( inner = 0 ; inner <= outer ; inner ++ ) { scanf ( \"%d\" , & arr [ outer ] [ inner ] ) ; } } doMagic ( num_of_row ) ; } return 0 ; } void doMagic ( int n ) { int row = 0 ; int col = 0 ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col <= row ; col ++ ) { arr [ row ] [ col ] = getMaxOf ( ( arr [ row ] [ col ] + valueOf ( row - 1 , col ) ) , ( arr [ row ] [ col ] + valueOf ( row - 1 , col - 1 ) ) ) ; } } int maxPathValue = getMaxOfArray ( n ) ; printf ( \"%d\n\" , maxPathValue ) ; } void printArray ( int size ) { int row = 0 ; int col = 0 ; for ( row = 0 ; row < size ; row ++ ) { for ( col = 0 ; col <= row ; col ++ ) { printf ( \"%d \" , arr [ row ] [ col ] ) ; } printf ( \"\n\" ) ; } printf ( \"\n\" ) ; } int getMaxOfArray ( int size ) { int i = 0 ; int temp = arr [ size - 1 ] [ 0 ] ; for ( i = 1 ; i < size ; i ++ ) { if ( temp < arr [ size - 1 ] [ i ] ) { temp = arr [ size - 1 ] [ i ] ; } } return temp ; } int getMaxOf ( int a , int b ) { return ( a > b ? a : b ) ; } int valueOf ( int a , int b ) { if ( ( a < 0 ) || ( b < 0 ) ) { return 0 ; } else { return arr [ a ] [ b ] ; } }", "label": 0, "id": 21272}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int arr [ n ] , j ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & arr [ j ] ) ; int min = arr [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( min > arr [ j ] ) min = arr [ j ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 25446}
{"input": "int findSum ( int matrix [ 500 ] [ 500 ] , int x , int y , int dim ) ; int max ( int a , int b ) ; void initialize ( int lines ) ; int findSum ( int matrix [ 500 ] [ 500 ] , int x , int y , int dim ) { if ( y + 1 >= dim || x + 1 >= dim ) return matrix [ x ] [ y ] ; return matrix [ x ] [ y ] + max ( findSum ( matrix , x + 1 , y , dim ) , findSum ( matrix , x + 1 , y + 1 , dim ) ) ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; } void initialize ( int lines ) { int matrix [ 500 ] [ 500 ] ; int i = 0 ; int a = 0 ; int val = 0 ; for ( ; i < lines ; i ++ ) { for ( ; a < lines ; a ++ ) { if ( a > i ) matrix [ i ] [ a ] = 0 ; else { scanf ( \"%d\" , & matrix [ i ] [ a ] ) ; if ( matrix [ i ] [ a ] > 99 || matrix [ i ] [ a ] < 0 ) return ; } } a = 0 ; } val = findSum ( matrix , 0 , 0 , lines ) ; printf ( \"%d\" , val ) ; } int main ( ) { int cases = 0 ; int lines = 0 ; int i = 0 ; scanf ( \"%d\" , & cases ) ; if ( lines < 0 || lines > 100 ) { return - 1 ; } for ( ; i < cases ; i ++ ) { scanf ( \"%d\" , & lines ) ; initialize ( lines ) ; } return 0 ; }", "label": 2, "id": 13044}
{"input": "int main ( ) { int t ; long a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; long p = a * b ; gcd = a ; while ( a != b ) { if ( a > b ) { a = a - b ; } else if ( b > a ) b = b - a ; else if ( a == b ) ; gcd = a ; lcm = p / gcd ; } printf ( \"%ld %ld\n\" , gcd , lcm ) ; } }", "label": 0, "id": 11071}
{"input": "int main ( ) { int t , n , a , z [ 50000 ] , s [ 50000 ] , i = 0 , c = 0 , p , b ; scanf ( \"%d\" , & t ) ; for ( b = 1 ; b <= t ; b ++ ) { scanf ( \"%d\" , & n ) ; i = 0 ; c = 0 ; for ( a = 0 ; a < n ; a ++ ) { scanf ( \"%d\" , & z [ a ] ) ; s [ a ] = z [ a ] ; } for ( p = 0 ; p < n - i ; p ++ ) { if ( s [ p ] > s [ p + 1 ] ) { c = s [ p + 1 ] + c ; i = i + 1 ; for ( a = 0 ; a < p ; a ++ ) { s [ a ] = z [ a ] ; } for ( a = p + 1 ; a < n - i ; a ++ ) { s [ a ] = z [ a ] ; } } else { c = s [ p ] + c ; i = i + 1 ; for ( a = 0 ; a < p + 1 ; a ++ ) { s [ a ] = z [ a ] ; } for ( a = p + 2 ; a < n - i ; a ++ ) { s [ a ] = z [ a ] ; } } } printf ( \"%d\" , c ) ; } return 0 ; }", "label": 2, "id": 24923}
{"input": "int main ( ) { int a , b , x , c , d , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = a ; d = b ; x = d ; while ( x > 0 ) { d = x ; x = c % d ; c = d ; } printf ( \"%d %d\n\" , d , a * b / d ) ; } return 0 ; }", "label": 1, "id": 7233}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , j , k = 0 , m = 0 , d , b = 0 ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( j = 0 ; j < n ; j ++ ) { if ( j != n - 1 && a [ j + 1 ] - a [ j ] >= 0 ) k ++ ; else if ( a [ j ] - a [ j - 1 ] >= 0 && j > 0 ) { d = k - b ; m = m + ( d * ( d + 1 ) ) / 2 ; b = k ; } else continue ; } printf ( \"%lld\n\" , m + n ) ; } return 0 ; }", "label": 0, "id": 25267}
{"input": "int sum ( int a [ 100 ] [ 100 ] , int n , int j , int k ) { int b , c ; if ( j == n ) return a [ j ] [ k ] ; else { b = a [ j ] [ k ] + sum ( a , n , j + 1 , k ) ; c = a [ j ] [ k ] + sum ( a , n , j + 1 , k + 1 ) ; } return ( b > c ? b : c ) ; } int main ( ) { int t , n , i , j , k , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } printf ( \"%d\n\" , sum ( a , n , 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 2335}
{"input": "int main ( ) { int a , b , g , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%d %d\n\" , g , a * b / g ) ; } return 0 ; } int gcd ( int x , int y ) { if ( y == 0 ) return x ; else return gcd ( y , x % y ) ; }", "label": 1, "id": 26930}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { unsigned long int a , b , lcm , d , hcf ; int i ; scanf ( \"%ld\" , & a ) ; scanf ( \"%ld\" , & b ) ; d = ( a > b ) ? b : a ; for ( i = 1 ; i <= d ; i ++ ) { if ( a % i == 0 && b % i == 0 ) hcf = i ; } lcm = ( a * b ) / hcf ; printf ( \"%ld\\t%ld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 26483}
{"input": "int main ( void ) { int t , a , b , gc , lcm ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; gc = gcd ( a , b ) ; lcm = ( a * b ) / gc ; printf ( \"%d %d\n\" , gc , lcm ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; }", "label": 1, "id": 21527}
{"input": "int main ( ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , sum ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } sum = a [ 0 ] [ 0 ] ; j = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) sum += a [ i + 1 ] [ j ] ; else { sum += a [ i + 1 ] [ j + 1 ] ; j ++ ; } } printf ( \"%d\" , sum ) ; return 0 ; }", "label": 1, "id": 3402}
{"input": "int main ( ) { int T , a , b ; scanf ( \"%d\" , & T ) ; for ( int i = 0 ; i < T ; ++ i ) { scanf ( \" %d %d\" , & a , & b ) ; int min1 = a > b ? a : b ; while ( 1 ) { if ( min1 % a == 0 && min1 % b == 0 ) break ; else min1 += a ; } printf ( \"%d %d\n\" , ( a * b ) / min1 , min1 ) ; } return 0 ; }", "label": 2, "id": 8310}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int N ; scanf ( \"%d\" , & N ) ; int min = INT_MAX , n = N ; while ( N -- ) { int x ; scanf ( \"%d\" , & x ) ; if ( min > x ) min = x ; } printf ( \"%ld\n\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 18237}
{"input": "int trian [ 105 ] [ 105 ] ; void triang ( ) { int rows ; int i , j ; scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & trian [ i ] [ j ] ) ; i = rows - 2 ; while ( i + 1 ) { j = i ; while ( j + 1 ) { trian [ i ] [ j ] += ( trian [ i + 1 ] [ j ] > trian [ i + 1 ] [ j + 1 ] ? trian [ i + 1 ] [ j ] : trian [ i + 1 ] [ j + 1 ] ) ; j -- ; } i -- ; } printf ( \"%d\n\" , trian [ 0 ] [ 0 ] ) ; } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { triang ( ) ; } return 0 ; }", "label": 0, "id": 26408}
{"input": "int main ( ) { int i , j , k , l , m , n , p , arr [ 250 ] ; scanf ( \"%d\" , & k ) ; for ( m = 0 ; m < k ; m ++ ) { l = 0 ; for ( i = 0 ; i < 250 ; i ++ ) arr [ i ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & p ) ; arr [ ( i * ( i + 1 ) / 2 ) + j ] = arr [ ( i * ( i + 1 ) / 2 ) + j ] + p ; } arr [ ( ( i + 2 ) * ( i + 1 ) / 2 ) ] = arr [ ( i * ( i + 1 ) / 2 ) ] ; arr [ ( ( i + 2 ) * ( i + 1 ) / 2 ) + i + 1 ] = arr [ ( i * ( i + 1 ) / 2 ) + i ] ; if ( i > 0 ) { for ( j = 1 ; j <= i ; j ++ ) arr [ ( ( i + 2 ) * ( i + 1 ) / 2 ) + j ] = max ( arr [ ( i * ( i + 1 ) / 2 ) + j ] , arr [ ( i * ( i + 1 ) / 2 ) + j - 1 ] ) ; } } for ( i = ( ( n * ( n - 1 ) ) / 2 ) ; i < ( ( n * ( n - 1 ) ) / 2 ) + n ; i ++ ) { if ( l < arr [ i ] ) l = arr [ i ] ; } printf ( \"%d\n\" , l ) ; } exit ( 1 ) ; return 0 ; } int max ( int a , int b ) { if ( a < b ) return b ; else return a ; }", "label": 3, "id": 11288}
{"input": "int main ( void ) { int t , n1 , n2 , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n1 ) ; scanf ( \"%d\" , & n2 ) ; if ( n1 > n2 ) { lcm = n1 ; gcd = n2 ; } else { lcm = n2 ; gcd = n1 ; } while ( gcd > 1 ) { if ( gcd % n1 == 0 && gcd % n2 == 0 ) { break ; } gcd ++ ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\" , lcm , gcd ) ; } return 0 ; }", "label": 2, "id": 26646}
{"input": "int main ( ) { int maxm , i , j , n , a [ 100 ] [ 100 ] , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { maxm = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 1 , j = 0 ; i < n ; i ++ ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; for ( j = 0 , i = n - 1 ; j < n ; j ++ ) { if ( a [ i ] [ j ] > maxm ) maxm = a [ i ] [ j ] ; } printf ( \"\n%d\" , maxm ) ; } return 0 ; }", "label": 0, "id": 6835}
{"input": "int main ( ) { int t , i , j , a [ 1000 ] , b [ 1000 ] , g [ 1000 ] , l [ 1000 ] , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a [ i ] , & b [ i ] ) ; m = a [ i ] < b [ i ] ? a [ i ] : b [ i ] ; for ( j = 1 ; j <= m ; j ++ ) { if ( ( a [ i ] % j == 0 ) && ( b [ i ] % j == 0 ) ) g [ i ] = j ; } l [ i ] = ( a [ i ] * b [ i ] ) / g [ i ] ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d %d\n\" , g [ i ] , l [ i ] ) ; }", "label": 2, "id": 23655}
{"input": "int main ( ) { int matrix [ 101 ] [ 101 ] ; int index [ 1 ] [ 2 ] ; int t , i , j ; int sum1 , sum2 ; char ch ; scanf ( \"%d\" , & t ) ; int n ; int sum ; sum = 0 ; sum1 = 0 ; sum2 = 0 ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & matrix [ i ] [ j ] ) ; } } sum = sum + matrix [ 1 ] [ 1 ] ; index [ 1 ] [ 1 ] = 1 ; index [ 1 ] [ 2 ] = 1 ; for ( i = 2 ; i <= n ; i ++ ) { sum1 = 0 ; sum2 = 0 ; if ( i != n ) { for ( j = i ; j <= n ; j ++ ) { sum1 = sum1 + matrix [ j ] [ index [ 1 ] [ 2 ] ] ; sum2 = sum2 + matrix [ j ] [ index [ 1 ] [ 2 ] + j - i + 1 ] ; } if ( sum1 > sum2 ) { index [ 1 ] [ 1 ] = index [ 1 ] [ 1 ] + 1 ; index [ 1 ] [ 2 ] = index [ 1 ] [ 2 ] ; } else { index [ 1 ] [ 1 ] = index [ 1 ] [ 1 ] + 1 ; index [ 1 ] [ 2 ] = index [ 1 ] [ 2 ] + 1 ; } } if ( i == n ) { if ( matrix [ index [ 1 ] [ 1 ] + 1 ] [ index [ 1 ] [ 2 ] ] > matrix [ index [ 1 ] [ 1 ] + 1 ] [ index [ 1 ] [ 2 ] + 1 ] ) { index [ 1 ] [ 1 ] = index [ 1 ] [ 1 ] + 1 ; index [ 1 ] [ 2 ] = index [ 1 ] [ 2 ] ; } else { index [ 1 ] [ 1 ] = index [ 1 ] [ 1 ] + 1 ; index [ 1 ] [ 2 ] = index [ 1 ] [ 2 ] + 1 ; } } sum = sum + matrix [ index [ 1 ] [ 1 ] ] [ index [ 1 ] [ 2 ] ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 19662}
{"input": "int main ( ) { int num , den , rem , gcd , lcm , t ; long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { rem = 0 ; scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) num = a , den = b ; else den = a , num = b ; if ( den != 0 ) rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 3298}
{"input": "int main ( ) { int a , b , n , max , min , i ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } i = min ; while ( max % i != 0 || min % i != 0 ) { i -- ; } printf ( \"%d %d\n\" , i , ( a * b ) / i ) ; } }", "label": 1, "id": 23388}
{"input": "main ( ) { long int a [ 100000 ] , min , t , s , i ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & s ) ; for ( i = 0 ; i < s ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } min = a [ 1 ] ; for ( i = 0 ; i < t ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( \"%ld\n\" , min * ( s - 1 ) ) ; } return 0 ; }", "label": 1, "id": 2614}
{"input": "int main ( ) { int i , j , n , t , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = i ; j >= 2 ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - 1 ] ? a [ i ] [ j ] : a [ i ] [ j - 1 ] ; a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + max ; } } printf ( \"%d\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 1, "id": 21763}
{"input": "int main ( ) { long int cases , i , j , size ; long long int * a ; scanf ( \"%ld\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%ld\" , & size ) ; a = ( long long int * ) malloc ( sizeof ( long long int ) * size ) ; for ( j = 0 ; j < size ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } size = 2 * size - 1 ; printf ( \"%ld\n\" , size ) ; } return 0 ; }", "label": 1, "id": 8315}
{"input": "long long int fun ( long long int , long long int ) ; int main ( ) { int n , i ; long long int l , h , a , b ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; h = fun ( a , b ) ; l = ( a * b ) / h ; printf ( \"%lld %lld\n\" , h , l ) ; } return 0 ; } long long int fun ( long long int a , long long int b ) { if ( b == 0 ) return a ; else return fun ( b , a % b ) ; }", "label": 0, "id": 322}
{"input": "int main ( ) { int n , i , e , count ; int a [ 50 ] ; int dp [ 50 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { count = 0 ; scanf ( \"%d\" , & e ) ; for ( int i = 0 ; i < e ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } dp [ 0 ] = 1 ; for ( int i = 1 ; i < e ; i ++ ) { if ( a [ i ] >= a [ i - 1 ] ) { dp [ i ] = 1 + dp [ i - 1 ] ; } else { dp [ i ] = 1 ; } } for ( int i = 0 ; i < e ; i ++ ) { count += dp [ i ] ; } printf ( \"%d\n\" , count ) ; } }", "label": 3, "id": 5676}
{"input": "int n , t , i , j , a [ 100 ] [ 100 ] ; int main ( ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } add ( ) ; } return 0 ; } void add ( ) { for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; }", "label": 1, "id": 12773}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int gcd_val ; gcd_val = gcd ( a , b ) ; printf ( \"%d %d\n\" , gcd_val , ( ( a * b ) / gcd_val ) ) ; } } int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; }", "label": 1, "id": 15121}
{"input": "int main ( ) { int i , j ; scanf ( \"%d\" , & j ) ; for ( i = 0 ; i < j ; i ++ ) { int x , y , m , n ; scanf ( \"%d %d\" , & x , & y ) ; m = gcd ( x , y ) ; n = lcm ( x , y ) ; printf ( \"%d %d\n\" , m , n ) ; } return 0 ; } int gcd ( int a , int b ) { if ( b % a == 0 ) return a ; else return gcd ( b % a , a ) ; } int lcm ( int a , int b ) { int k ; k = ( a * b ) / gcd ( a , b ) ; return ( k ) ; }", "label": 1, "id": 4694}
{"input": "int main ( ) { int i , j , n , t , c = 0 , a [ 100 ] [ 100 ] , b = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & t ) ; a [ i ] [ j ] = t ; } } for ( i = 1 ; i <= n - 1 ; i ++ ) { c = a [ i ] [ 1 ] + a [ i + 1 ] [ 1 ] + a [ i + 1 ] [ 2 ] ; if ( b < c ) { b = c ; } } printf ( \"%d\" , b ) ; return 0 ; }", "label": 3, "id": 1447}
{"input": "int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; else if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } int main ( ) { int t , a , b , lol ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; lol = gcd ( a , b ) ; printf ( \"%d %d\n\" , lol , ( a * b ) / lol ) ; } return 0 ; }", "label": 1, "id": 16709}
{"input": "int main ( ) { int t ; long int n , sum , a , b , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; sum = 0 ; a = n ; while ( n ) { c = n ; sum = sum * 10 + c ; n = n / 10 ; } b = sum ; printf ( \"%d\n\" , a + b ) ; } return 0 ; }", "label": 1, "id": 22858}
{"input": "main ( ) { int m , n , a , b , t , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } l = m * n / a ; printf ( \"%d %d\" , b , l ) ; } }", "label": 1, "id": 3387}
{"input": "int main ( void ) { int sum [ LIMIT ] ; int i , j , l , max , n , prev_sum , tmp , x ; scanf ( \"%d\" , & n ) ; while ( n -- > 0 ) { scanf ( \"%d\" , & l ) ; if ( l < 1 || l > LIMIT ) continue ; for ( * sum = 0 , i = 1 ; i <= l ; i ++ ) { scanf ( \"%d\" , & x ) ; prev_sum = * sum ; max = * sum += x ; for ( j = 1 ; j < i - 1 ; j ++ ) { scanf ( \"%d\" , & x ) ; if ( prev_sum < * ( sum + j ) ) { prev_sum = * ( sum + j ) ; * ( sum + j ) += x ; } else { tmp = * ( sum + j ) ; * ( sum + j ) = prev_sum + x ; prev_sum = tmp ; } if ( max < * ( sum + j ) ) max = * ( sum + j ) ; } if ( j < i ) { scanf ( \"%d\" , & x ) ; * ( sum + j ) = prev_sum + x ; if ( max < * ( sum + j ) ) max = * ( sum + j ) ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 4186}
{"input": "int main ( ) { int n1 , n2 , lcm , gcd ; printf ( \"Enter two numbers\n\" ) ; scanf ( \"%d\" , & n1 , & n2 ) ; if ( n1 < n2 ) { gcd = n1 ; lcm = n2 ; } else { lcm = n1 ; gcd = n2 ; } while ( n1 % gcd != 0 || n2 % gcd != 0 ) { gcd -- ; } while ( lcm % n1 != 0 || lcm % n2 != 0 ) { lcm ++ ; } printf ( \"LCM=%d and GCD=%d\" , lcm , gcd ) ; return 0 ; }", "label": 3, "id": 3963}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , b , i , j , t , c , y , p = 0 , sum = 0 , dum = 0 , g ; scanf ( \"%d\" , & t ) ; for ( y = 0 ; y < t ; y ++ ) { sum = 0 , dum = 0 ; scanf ( \"%d\" , & b ) ; for ( i = 0 ; i < b ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 1 ; i < b ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { if ( a [ i ] [ p ] < a [ i ] [ p + 1 ] ) { sum = sum + a [ i ] [ p + 1 ] ; p ++ ; goto pp ; } else { sum = sum + a [ i ] [ p ] ; goto pp ; } } pp : g = 1 ; } for ( i = 1 ; i < b ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { if ( a [ i ] [ p ] > a [ i ] [ p + 1 ] ) { dum = dum + a [ i ] [ p ] ; goto dd ; } else { dum = dum + a [ i ] [ p + 1 ] ; p ++ ; goto dd ; } } dd : g = 0 ; } if ( sum >= dum ) printf ( \"%d\" , sum + a [ 0 ] [ 0 ] ) ; else printf ( \"%d\" , dum + a [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 14869}
{"input": "int main ( ) { int t ; long int a , b ; long long int g ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%li %li\" , & a , & b ) ; if ( a > b ) { g = b ; while ( a % g != 0 ) { g = a % g ; } printf ( \"%lli %lli\n\" , g , ( a * b ) / g ) ; } else if ( a < b ) { g = a ; while ( b % g != 0 ) { g = b % g ; } printf ( \"%lli %lli\n\" , g , ( a * b ) / g ) ; } else if ( a = b ) { printf ( \"%li %li\n\" , a , b ) ; } t -- ; } return 0 ; }", "label": 1, "id": 19976}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return ( gcd ( b , a % b ) ) ; } int main ( ) { int a , b , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\n%d\" , & a , & b ) ; n = gcd ( a , b ) ; printf ( \"%d %d\" , n , ( a * b ) / n ) ; } return ( 0 ) ; }", "label": 1, "id": 17248}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j ; int t , n ; long sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } sum = a [ 0 ] [ 0 ] ; i = 0 , j = 0 ; while ( i < n ) { if ( j + 1 <= i ) { if ( a [ i + 1 ] [ j ] >= a [ i ] [ j + 1 ] ) { sum += ( a [ i + 1 ] [ j ] ) ; i = i + 1 ; } else { sum += ( a [ i ] [ j + 1 ] ) ; j = j + 1 ; } } else { sum += ( a [ i + 1 ] [ j ] ) ; i = i + 1 ; } } printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 23949}
{"input": "void fastread ( int * a ) { char c = 0 ; while ( c < 33 ) { c = getchar_unlocked ( ) ; } * a = 0 ; while ( c > 33 ) { * a = * a * 10 + c - '0' ; c = getchar_unlocked ( ) ; } } int main ( ) { int test , i , j , n , max ; fastread ( & test ) ; int a [ 100 ] [ 100 ] = { - 1 } ; while ( test -- ) { fastread ( & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { fastread ( & a [ i ] [ j ] ) ; } } a [ 1 ] [ 0 ] = a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] ; a [ 1 ] [ 1 ] = a [ 1 ] [ 1 ] + a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( j != 0 && a [ i ] [ j - 1 ] < a [ i ] [ j ] ) { a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] - a [ i ] [ j - 1 ] + a [ i ] [ j ] ; a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } if ( j != 0 && a [ i ] [ j - 1 ] > a [ i ] [ j ] ) { a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } if ( j == 0 ) { a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } } } max = a [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ n - 1 ] [ i ] > max ) { max = a [ n - 1 ] [ i ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 23554}
{"input": "int main ( ) { long a , b , i , t , n , j , e = 0 ; scanf ( \"%u\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%u%u\" , & a , & b ) ; if ( b < a ) { t = b ; b = a ; a = t ; } for ( j = 1 ; j <= a ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { e = j > e ? j : e ; } } printf ( \"%u %u\n\" , e , a * b / e ) ; } e = 0 ; }", "label": 2, "id": 16731}
{"input": "int maxim ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int * * arr , t , n , i , k , j ; scanf ( \" %d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \" %d\" , & n ) ; arr = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) { arr [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \" %d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + maxim ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; free ( arr ) ; } return 0 ; }", "label": 0, "id": 17871}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int num1 , num2 , a , b ; scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { a = num1 ; b = num2 ; } else { a = num2 ; b = num1 ; } int rem = a % b ; while ( rem != 0 ) { a = b ; b = rem ; rem = a % b ; } int gcd = b ; int lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 10075}
{"input": "int maxi ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( ) { int n , t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = maxi ( a [ i ] [ j ] + a [ i + 1 ] [ j ] , a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 11521}
{"input": "int main ( ) { int ara1 [ 2000 ] , ara2 [ 2000 ] , i , n , rem , j , prod ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < 2 * n ; i = i + 2 ) { if ( n > 1000 ) { break ; } scanf ( \"%d %d\" , & ara1 [ i ] , & ara1 [ i + 1 ] ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { if ( ara1 [ i ] > 1000000 || ara1 [ i + 1 ] > 1000000 ) { break ; } prod = ara1 [ i ] * ara1 [ i + 1 ] ; if ( ara1 [ i ] == 0 || ara1 [ i + 1 ] == 0 ) { break ; } else if ( ara1 [ i + 1 ] % ara1 [ i ] == 0 ) { ara2 [ i ] = ara1 [ i ] ; } else { for ( j = 0 ; ; j ++ ) { rem = ara1 [ i + 1 ] % ara1 [ i ] ; ara1 [ i + 1 ] = ara1 [ i ] ; ara1 [ i ] = rem ; if ( ara1 [ i + 1 ] % ara1 [ i ] == 0 ) { ara2 [ i ] = ara1 [ i ] ; break ; } } } ara2 [ i + 1 ] = prod / ara2 [ i ] ; printf ( \"%d %d\n\" , ara2 [ i ] , ara2 [ i + 1 ] ) ; } return 0 ; }", "label": 1, "id": 27008}
{"input": "int fun ( int [ ] [ 100 ] , int , int , int , int s [ ] ) ; main ( ) { int max , t , ans , ar [ 100 ] [ 100 ] = { 0 } , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } ans = ar [ 0 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { for ( i = 0 ; i <= j ; i ++ ) { max = ar [ j ] [ i ] + ar [ j - 1 ] [ i ] ; if ( i == 0 ) { max = ar [ j ] [ i ] + ar [ j - 1 ] [ 0 ] ; } else if ( j == i ) { max = ar [ j ] [ i ] + ar [ j - 1 ] [ i - 1 ] ; } else if ( ar [ j - 1 ] [ i - 1 ] > ar [ j - 1 ] [ i ] ) max = ar [ j ] [ i ] + ar [ j - 1 ] [ i - 1 ] ; ar [ j ] [ i ] = max ; if ( j == n - 1 && ans < max ) ans = max ; } } printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 16150}
{"input": "int main ( void ) { int testCases ; scanf ( \"%d\" , & testCases ) ; while ( testCases -- ) { int num1 , num2 ; scanf ( \"%d%d\" , & num1 , & num2 ) ; int gcd = 1 , i ; for ( i = 2 ; i < num1 || i < num2 ; i ++ ) { if ( num1 % i == 0 && num2 % i == 0 ) gcd = i ; } int lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 11618}
{"input": "int arr [ 100 ] [ 100 ] = { 0 } ; void sum_triangle ( ) { int i , j , row , ele ; scanf ( \"%d\" , & row ) ; ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ele ) ; if ( i == 0 ) arr [ i ] [ j ] = ele ; else { if ( j == 0 ) arr [ i ] [ j ] = ele + arr [ i - 1 ] [ j ] ; else { if ( arr [ i - 1 ] [ j - 1 ] + ele > arr [ i - 1 ] [ j ] + ele ) arr [ i ] [ j ] = arr [ i - 1 ] [ j - 1 ] + ele ; else arr [ i ] [ j ] = arr [ i - 1 ] [ j ] + ele ; } } } } int max = 0 ; for ( i = 0 ; i <= row - 1 ; i ++ ) { if ( arr [ row - 1 ] [ i ] > max ) max = arr [ row - 1 ] [ i ] ; } printf ( \"%d\" , max ) ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; t ++ ) { sum_triangle ( ) ; } return 0 ; }", "label": 2, "id": 23575}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , count = 0 , j , k , x ; scanf ( \"%d\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = j ; k < n - 1 ; k ++ ) { if ( a [ k ] <= a [ k + 1 ] ) { count ++ ; } else break ; } } printf ( \"%d\n\" , ( count + n ) ) ; } return 0 ; }", "label": 0, "id": 832}
{"input": "long gcd ( long x , long y ) { if ( y == 0 ) { return x ; } else { return gcd ( y , x % y ) ; } } int main ( ) { int t ; long a , b , hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 22016}
{"input": "int main ( ) { int a , b , d , e , f , g , h , i , j ; scanf ( \"%d\" , & a ) ; for ( h = 0 ; h < a ; h ++ ) { scanf ( \"%d\" , & b ) ; int c [ 100 ] [ 100 ] = { 0 } ; for ( i = 0 ; i < b ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & c [ i ] [ j ] ) ; } for ( i = b - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( c [ i + 1 ] [ j ] > c [ i + 1 ] [ j + 1 ] ) c [ i ] [ j ] += c [ i + 1 ] [ j ] ; else c [ i ] [ j ] += c [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , c [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 21553}
{"input": "main ( ) { long int A , B , gcd , lcm , rem , T , nr , dr ; scanf ( \"%ld\" , & T ) ; while ( T -- ) { scanf ( \"%ld%ld\" , & A , & B ) ; if ( A > B ) { nr = A ; dr = B ; } else { nr = B ; dr = A ; } while ( dr != 0 ) { rem = nr % dr ; nr = dr ; dr = rem ; } gcd = nr ; lcm = ( A * B ) / gcd ; printf ( \"%ld\\t\" , gcd ) ; printf ( \"%ld\n\" , lcm ) ; } return 0 ; }", "label": 0, "id": 15477}
{"input": "int main ( ) { long int a , b , c , x , k , I , z , d , e ; scanf ( \"%ld\" , & k ) ; for ( I = 0 ; I < k ; I ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; d = a ; e = b ; x = b ; c = a % b ; while ( c >= 0 ) { if ( a % b == 0 ) { printf ( \"%ld\\t\" , b ) ; break ; } else { c = a % b ; a = b ; b = c ; } } while ( x > 0 ) { if ( ( e % x ) == 0 && ( d % x ) == 0 ) { z = e * d * x ; printf ( \"%ld\" , z ) ; break ; } else x -- ; } } return 0 ; }", "label": 2, "id": 26023}
{"input": "int main ( ) { int t , n , i , j , max = 0 , a , b , c , d , arr [ 99 ] [ 99 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; max = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; if ( arr [ i ] [ j ] > max ) { max = arr [ i ] [ j ] ; a = i - 1 ; c = i + 1 ; b = d = j ; } } } for ( ; a >= 0 ; a -- ) { if ( b == 0 ) max = max + arr [ a ] [ 0 ] ; else if ( a + 1 == b ) { max = max + arr [ a ] [ b - 1 ] ; b -- ; } else { if ( arr [ a ] [ b ] > arr [ a ] [ b - 1 ] ) max = max + arr [ a ] [ b ] ; else { max = arr [ a ] [ b - 1 ] + max ; b -- ; } } } for ( ; c < n ; c ++ ) { if ( arr [ c ] [ d ] > arr [ c ] [ d + 1 ] ) max = max + arr [ c ] [ d ] ; else { max = max + arr [ c ] [ d + 1 ] ; d ++ ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 24060}
{"input": "int main ( int argc , char * argv [ ] ) { int t , a [ 1000000 ] , i , min ; long n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; ++ i ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\" , ( min * ( n - 1 ) ) ) ; } return 0 ; }", "label": 1, "id": 12187}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i ; for ( i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int mul = ( a * b ) ; int r = a % b ; while ( r != 0 ) { a = b ; b = r ; r = a % b ; } printf ( \"%d %d\n\" , b , ( mul ) / b ) ; } }", "label": 1, "id": 24714}
{"input": "void lcm ( int a , int b ) { int i = a , j = b ; while ( 1 ) { if ( a == b ) break ; else if ( b > a ) a += i ; b += j ; } printf ( \"%d\n\" , a ) ; } void hcf ( int a , int b ) { int t = 0 ; while ( 1 ) { if ( a % b == 0 ) break ; else { t = a ; a = b ; b = t % a ; } } printf ( \"%d \" , b ) ; } int main ( ) { int a , b ; int n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; a > b ? hcf ( a , b ) : hcf ( b , a ) ; a > b ? lcm ( a , b ) : lcm ( b , a ) ; } return 0 ; }", "label": 2, "id": 15981}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { int i , t ; long long int ab , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; ab = a * b ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , ab / gcd ( a , b ) ) ; } return 0 ; } long long int gcd ( long long int a , long long int b ) { if ( b % a == 0 ) return a ; else return gcd ( b % a , a ) ; }", "label": 0, "id": 15177}
{"input": "int main ( void ) { int t ; long a , b , lcm = 0 , result = 0 ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\n\" , & a , & b ) ; result = gcd ( a , b ) ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( \"%ld %ld\n\" , result , lcm ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a == 0 || a == b ) { return b ; } else if ( b == 0 ) { return a ; } else { if ( a > b ) { return gcd ( a % b , b ) ; } else { return gcd ( a , b % a ) ; } } }", "label": 0, "id": 26963}
{"input": "int main ( void ) { int t , i , j , arr [ 100 ] [ 100 ] = { 0 } , size ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = size - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 3236}
{"input": "int retMax ( int , int , int ) ; int a [ 100 ] [ 100 ] ; int main ( ) { int ntestcases ; int sum , currptr , lvl , ht , i , j , k , n1 , n2 , p ; scanf ( \"%d\" , & ntestcases ) ; for ( i = 0 ; i < ntestcases ; i ++ ) { scanf ( \"%d\" , & ht ) ; sum = 0 ; currptr = 0 ; n1 = 0 ; n2 = 0 ; for ( j = 0 ; j < ht ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } sum = retMax ( 0 , 0 , ht ) ; } printf ( \"%d\n\" , sum ) ; } } inline int retMax ( int currptr , int lvl , int ht ) { int n , n1 , n2 ; if ( lvl == ht ) { n1 = a [ lvl ] [ currptr ] ; n2 = a [ lvl ] [ currptr + 1 ] ; return n1 > n2 ? n1 : n2 ; } else { n1 = retMax ( currptr , lvl + 1 , ht ) ; n2 = retMax ( currptr + 1 , lvl + 1 , ht ) ; n = a [ lvl ] [ currptr ] ; return ( n + ( n1 > n2 ? n1 : n2 ) ) ; } }", "label": 2, "id": 20290}
{"input": "int b [ 10 ] [ 10 ] , x = 0 , check [ 1000 ] ; int triangle ( ) ; void checker ( int , int , int , int ) ; void main ( ) { int max [ 1000 ] , i = 0 , n ; scanf ( \"%d\" , & n ) ; while ( i < n ) { max [ i ] = triangle ( ) ; i ++ ; } i = 0 ; while ( i < n ) { printf ( \"\n%d\" , max [ i ] ) ; i ++ ; } } int triangle ( ) { int n , i , j , gr8 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & b [ i ] [ j ] ) ; } } i = 0 , j = 0 ; checker ( 0 , i , j , n ) ; gr8 = 0 ; while ( i < x ) { if ( check [ i ] > gr8 ) { gr8 = check [ i ] ; } i ++ ; } x = 0 ; return gr8 ; } void checker ( int sum , int i , int j , int n ) { sum = sum + b [ i ] [ j ] ; if ( i == n - 1 ) { check [ x ++ ] = sum ; } if ( ( i < n - 1 ) && ( j < n - 1 ) ) { checker ( sum , i + 1 , j , n ) ; checker ( sum , i + 1 , j + 1 , n ) ; } }", "label": 3, "id": 9303}
{"input": "int mat [ 100 ] [ 100 ] ; int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l < k ; l ++ ) { if ( mat [ k + 1 ] [ l ] > mat [ k + 1 ] [ l + 1 ] ) mat [ k ] [ l ] += mat [ k + 1 ] [ l ] ; else mat [ k ] [ l ] += mat [ k + 1 ] [ l + 1 ] ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 13138}
{"input": "int main ( ) { int num , tricnt , sumnummain = 0 , sumnumcur , i , j , curnum ; scanf ( \"%d\" , & num ) ; while ( num -- ) { scanf ( \"%d\" , & tricnt ) ; for ( i = 1 ; i <= tricnt ; i ++ ) { sumnumcur = 0 ; for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & curnum ) ; sumnumcur += curnum ; } if ( sumnummain < sumnumcur ) sumnummain = sumnumcur ; } printf ( \"%d\n\" , sumnummain ) ; } return 0 ; }", "label": 1, "id": 16207}
{"input": "int main ( ) { int t , i ; long n , a [ 5000 ] , j , count , k , l , result [ 5 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { scanf ( \"%li\" , & n ) ; for ( j = 0 ; j < n ; ++ j ) { scanf ( \"%li\" , & a [ j ] ) ; count = 0 ; for ( k = 0 ; k < n ; ++ k ) { for ( l = k ; l < n ; ++ l ) { if ( a [ k ] < a [ l ] ) { } else { count += 1 ; } } } } result [ i ] = count ; } for ( i = 0 ; i < t ; ++ i ) { printf ( \"%li\n\" , result [ i ] ) ; } return 0 ; }", "label": 3, "id": 11070}
{"input": "int main ( ) { int i , T , A [ 100000 ] , s , S ; long int N , j ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld\" , & N ) ; for ( j = 0 ; j < N ; j ++ ) scanf ( \"%d\" , & A [ j ] ) ; s = A [ 0 ] ; for ( j = 0 ; j < N ; j ++ ) { if ( A [ j ] < s ) s = A [ j ] ; S = s * ( N - 1 ) ; } printf ( \"%d\n\" , S ) ; } return 0 ; }", "label": 0, "id": 12676}
{"input": "int main ( ) { long long int T , a , b , m , n , temp ; scanf ( \"%lld\" , & T ) ; while ( T -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; m = a ; n = b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( a % b != 0 ) { temp = a ; a = b ; b = temp % b ; } printf ( \"%lld %lld\n\" , b , ( m * n ) / b ) ; } return 0 ; }", "label": 0, "id": 9671}
{"input": "int main ( ) { int c = 0 , n , r , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; int a [ r ] [ r ] ; printf ( \"\n\" ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j < r ; j ++ ) { if ( i >= j ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } c , printf ( \"\n\" ) ; } c = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < r ; i ++ ) { if ( a [ i + 1 ] [ i ] > a [ i + 1 ] [ i + 1 ] ) c = c + a [ i + 1 ] [ i ] ; else c = c + a [ i + 1 ] [ i + 1 ] ; } printf ( \"\n%d\" , c ) ; } return 0 ; }", "label": 1, "id": 23121}
{"input": "int gcd ( int x , int y ) { int i , q = 1 ; for ( i = x ; i >= 1 ; i -- ) { if ( x % i == 0 && y % i == 0 ) { q = i ; break ; } } return q ; } int main ( void ) { int t , i , j , n , temp = 0 ; int p , l , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- != 0 ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) { p = gcd ( a , b ) ; } else { p = gcd ( b , a ) ; } l = ( a * b ) / p ; printf ( \"%d %d\n\" , p , l ) ; } return 0 ; }", "label": 1, "id": 20258}
{"input": "int main ( ) { int a , b , c , x , y , e , f , t ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d%d\" , & b , & c ) ; x = b ; y = c ; while ( y != 0 ) { t = y ; y = x % y ; x = t ; } e = x ; f = ( b * c ) / e ; printf ( \"%d %d\n\" , e , f ) ; } return 0 ; }", "label": 1, "id": 18971}
{"input": "int readInt ( ) { int read = 0 ; char c ; do { c = getchar ( ) ; } while ( c <= 47 && c >= 58 ) ; while ( c > 47 && c < 58 ) { read = ( read << 1 ) + ( read << 3 ) + c - 48 ; c = getchar ( ) ; } return read ; } int max ( int a , int b ) { return a > b ? a : b ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; int b [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( i == n - 1 ) b [ i ] [ j ] = a [ i ] [ j ] ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) printf ( \"%d\" , a [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) printf ( \"%d\" , b [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { b [ i ] [ j ] = max ( a [ i ] [ j ] + b [ i + 1 ] [ j ] , a [ i ] [ j ] + b [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d \" , b [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } printf ( \"%d\n\" , b [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 3747}
{"input": "int main ( ) { int n , t , a , b , j ; long long int y ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { for ( j = 1 ; j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) t = j ; } y = a * b / t ; printf ( \"%d %lld\n\" , t , y ) ; } if ( a < b ) { for ( j = 1 ; j <= a ; j ++ ) { if ( a % j == 0 && b % j == 0 ) t = j ; } y = a * b / t ; printf ( \"%d %lld\n\" , t , y ) ; } if ( a == b ) printf ( \"%d %d\n\" , a , b ) ; n -- ; } }", "label": 1, "id": 15666}
{"input": "int main ( ) { int t , a [ 10 ] [ 10 ] , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; } else { a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 5079}
{"input": "int main ( ) { int t , i , n , a [ 100 ] , min ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"/n %d\" , min * ( n - 1 ) ) ; t -- ; } return 0 ; }", "label": 3, "id": 12161}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , n , i , j , k ; scanf ( \"%d\" , & k ) ; while ( k -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5873}
{"input": "int main ( ) { int n1 , n2 ; scanf ( \"%d%d\" , & n1 , & n2 ) ; int t1 = n1 , t2 = n2 ; if ( n1 < n2 ) { int t = n1 ; n1 = n2 ; n2 = t ; } int r = n1 % n2 ; while ( r != 0 ) { n1 = n2 ; n2 = r ; r = n1 % n2 ; } printf ( \"%d %d\n\" , n2 , ( t1 * t2 ) / n2 ) ; return 0 ; }", "label": 1, "id": 10418}
{"input": "int largest ( int a , int b ) ; int rows , z [ 101 ] [ 101 ] , cache [ 101 ] [ 101 ] ; int main ( ) { int t , k , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { memset ( cache , - 1 , sizeof ( cache [ 0 ] [ 0 ] ) * 100 * 100 ) ; scanf ( \"%d\" , & rows ) ; for ( k = 1 , i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , & z [ i ] [ j ] ) ; } k ++ ; } printf ( \"%d\n\" , largest ( 0 , 0 ) ) ; } return 0 ; } int largest ( int a , int b ) { int l , m ; if ( cache [ a ] [ b ] != - 1 ) return ( cache [ a ] [ b ] ) ; else if ( a == rows || b > a ) { cache [ a ] [ b ] = z [ a ] [ b ] ; return ( z [ a ] [ b ] ) ; } else { l = largest ( a + 1 , b ) ; m = largest ( a + 1 , b + 1 ) ; if ( l > m ) { cache [ a ] [ b ] = z [ a ] [ b ] + l ; return ( cache [ a ] [ b ] ) ; } else { cache [ a ] [ b ] = z [ a ] [ b ] + m ; return ( cache [ a ] [ b ] ) ; } } }", "label": 1, "id": 23414}
{"input": "int main ( ) { int test , arr [ 100 ] [ 100 ] , row , sum = 0 , i , j ; scanf ( \"%d\" , & test ) ; while ( test ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = row - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } sum = arr [ 0 ] [ 0 ] ; printf ( \"%d\n\" , sum ) ; test -- ; } return 0 ; }", "label": 0, "id": 976}
{"input": "main ( ) { int a [ 9 ] [ 9 ] = { 0 } , i = 0 , j = 0 , n = 0 , k = 0 , p = 0 , h = 0 ; scanf ( \"%d\" , & k ) ; for ( p = 0 ; p < k ; p ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { a [ i + 1 ] [ j ] += a [ i ] [ j ] ; if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) { a [ i + 1 ] [ j + 1 ] += a [ i ] [ j ] ; } } else { if ( a [ i ] [ j ] >= a [ i ] [ j - 1 ] ) { a [ i + 1 ] [ j ] += a [ i ] [ j ] ; } if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) { a [ i + 1 ] [ j + 1 ] += a [ i ] [ j ] ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > h ) { h = a [ i ] [ j ] ; } } } printf ( \"%d\n\" , h ) ; } return 0 ; }", "label": 3, "id": 3590}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 25216}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { int n , i , count = 0 ; scanf ( \"%d\" , & n ) ; long long arr [ 100001 ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & arr [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] <= arr [ i + 1 ] ) count ++ ; } count = count + n ; printf ( \"%d\n\" , count ) ; t -- ; } }", "label": 1, "id": 24310}
{"input": "int main ( void ) { int t , a , b , l , h ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; h = a < b ? a : b ; while ( h -- ) { if ( a % h == 0 && b % h == 0 ) { printf ( \"%d \" , h ) ; break ; } } l = a * b / h ; printf ( \"%d\n\" , l ) ; } return 0 ; }", "label": 1, "id": 20413}
{"input": "int main ( void ) { int T ; long N ; long A [ 50000 ] ; long cost [ 10 ] ; int i , j ; scanf ( \"%d\" , & T ) ; i = 0 ; while ( i < T ) { cost [ i ] = 0 ; scanf ( \"%li\" , & N ) ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%li\" , & A [ j ] ) ; } while ( N > 1 ) { if ( A [ 0 ] > A [ 1 ] ) { cost [ i ] = cost [ i ] + A [ 1 ] ; A [ 0 ] = A [ 1 ] ; A [ 1 ] = A [ 2 ] ; } else { A [ 1 ] = A [ 2 ] ; cost [ i ] = cost [ i ] + A [ 0 ] ; } N -- ; } i ++ ; } for ( i = 0 ; i < T ; i ++ ) { printf ( \"%li\n\" , cost [ i ] ) ; } return 0 ; }", "label": 1, "id": 15746}
{"input": "int n_of_rows , n_elements ; int * elements ; int greatest , pop_row , pop_column ; char pr , pc ; int r , c , sum , backtrace , n_of_bt ; char * ch ; void init ( ) ; void push ( int , int ) ; void pop ( ) ; void getrows ( ) ; void traverse ( ) ; typedef struct stack { int top ; char * row ; char * column ; } st ; st s ; int main ( ) { int n_of_cases , n_of_rows , index ; greatest = - 1 ; ch = ( char * ) malloc ( 1 ) ; scanf ( \"%d\" , & n_of_cases ) ; for ( index = 0 ; index < n_of_cases ; index ++ ) { getrows ( ) ; traverse ( ) ; printf ( \"%d\n\" , greatest ) ; free ( s . row ) ; free ( s . column ) ; free ( elements ) ; } return 0 ; } void getrows ( ) { int i ; scanf ( \"%d\" , & n_of_rows ) ; n_elements = 0 ; s . row = ( char * ) malloc ( n_of_rows ) ; s . column = ( char * ) malloc ( n_of_rows ) ; for ( i = 1 ; i <= n_of_rows ; i ++ ) n_elements += i ; elements = ( int * ) malloc ( n_elements * sizeof ( int ) ) ; for ( i = 0 ; i < n_elements ; i ++ ) scanf ( \"%d\" , & elements [ i ] ) ; } int get_element ( int i , int j ) { int k , index ; k = 0 ; for ( index = 1 ; index <= i ; index ++ ) k += index ; k += j ; return elements [ k ] ; } void init ( ) { s . top = - 1 ; } void push ( int r , int c ) { s . top += 1 ; sprintf ( ch , \"%d\" , r ) ; s . row [ s . top ] = ch [ 0 ] ; sprintf ( ch , \"%d\" , c ) ; s . column [ s . top ] = ch [ 0 ] ; } void pop ( ) { pr = s . row [ s . top ] ; pc = s . column [ s . top ] ; pop_row = ( int ) pr - ( int ) '0' ; pop_column = ( int ) pc - ( int ) '0' ; s . top -- ; } void traverse ( ) { r = c = sum = 0 ; while ( r < n_of_rows ) { sum += get_element ( r , c ) ; push ( r , c ) ; r ++ ; } if ( sum > greatest ) greatest = sum ; backtrace = 1 ; while ( backtrace < n_of_rows ) { for ( n_of_bt = 1 ; n_of_bt <= backtrace ; n_of_bt ++ ) { pop ( ) ; r = pop_row ; c = pop_column ; sum -= get_element ( r , c ) ; } pop ( ) ; r = pop_row ; c = pop_column ; push ( r , c ) ; r ++ ; c ++ ; while ( r < n_of_rows ) { sum += get_element ( r , c ) ; push ( r , c ) ; r ++ ; } if ( sum > greatest ) greatest = sum ; backtrace ++ ; } }", "label": 3, "id": 22871}
{"input": "int main ( ) { int test , i , n , c , l ; long long int a [ 100000 ] ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; c = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < c ) c = a [ i ] ; } l = ( n - 1 ) * c ; printf ( \"%d\n\" , l ) ; } return 0 ; }", "label": 0, "id": 18232}
{"input": "int main ( ) { int i , n , j , sum = 0 , t ; int a [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 1 ; j <= n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } j = 1 ; while ( j != n ) { if ( a [ j ] > a [ j + 1 ] ) { sum = sum + a [ j + 1 ] ; } else { a [ j + 1 ] = a [ j ] ; sum = sum + a [ j + 1 ] ; } j ++ ; } printf ( \"%d\n\" , sum ) ; sum = 0 ; } return 0 ; }", "label": 3, "id": 15008}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int num1 , num2 , gcd , lcm , rem , num , den ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { num = num1 ; den = num2 ; } else { num = num2 ; den = num1 ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 4864}
{"input": "int u , v [ 100 ] [ 100 ] , cache [ 100 ] [ 100 ] ; int solve ( int i , int j ) { if ( i > u ) return 0 ; if ( cache [ i ] [ j ] > 0 ) return cache [ i ] [ j ] ; int t1 = solve ( i + 1 , j ) ; int t2 = solve ( i + 1 , j + 1 ) ; int t = ( ( t1 ) > ( t2 ) ? ( t1 ) : ( t2 ) ) + v [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int n , i , j , w ; scanf ( \"%d\" , & n ) ; w = n ; int sum [ 1000 ] ; int k = 0 ; while ( n -- ) { scanf ( \"%d\" , & u ) ; for ( i = 0 ; i < u ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & v [ i ] [ j ] ) ; } for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) cache [ i ] [ j ] = 0 ; sum [ k ] += solve ( 0 , 0 ) ; k ++ ; } i = 0 ; while ( i < w ) { printf ( \"%d\n\" , sum [ i ] ) ; i ++ ; } return 0 ; }", "label": 1, "id": 4620}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int A , B , GCD , LCM , i , x , y , L , M ; scanf ( \"%d %d\" , & A , & B ) ; if ( A >= B ) { for ( i = A ; i <= A * B ; i ++ ) { x = i % A ; y = i % B ; if ( ( x == 0 ) && ( y == 0 ) ) { LCM = i ; break ; } } } else { for ( i = B ; i <= A * B ; i ++ ) { L = i % A ; M = i % B ; if ( ( L == 0 ) && ( M == 0 ) ) { LCM = i ; break ; } } } GCD = ( A * B ) / LCM ; printf ( \"%d%d\n\" , GCD , LCM ) ; } return 0 ; }", "label": 2, "id": 23976}
{"input": "int main ( ) { int matrix [ 101 ] [ 101 ] ; int index [ 1 ] [ 2 ] ; int t , i , j ; int sum1 , sum2 ; char ch ; scanf ( \"%d\" , & t ) ; int n ; int sum ; sum = 0 ; sum1 = 0 ; sum2 = 0 ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & matrix [ i ] [ j ] ) ; } } sum = sum + matrix [ 1 ] [ 1 ] ; index [ 1 ] [ 1 ] = 1 ; index [ 1 ] [ 2 ] = 1 ; for ( i = 2 ; i <= n ; i ++ ) { sum1 = 0 ; sum2 = 0 ; if ( i != n ) { for ( j = i ; j <= n ; j ++ ) { sum1 = sum1 + matrix [ j ] [ index [ 1 ] [ 2 ] ] ; sum2 = sum2 + matrix [ j ] [ index [ 1 ] [ 2 ] + j - i + 1 ] ; } if ( sum1 > sum2 ) { index [ 1 ] [ 1 ] = index [ 1 ] [ 1 ] + 1 ; index [ 1 ] [ 2 ] = index [ 1 ] [ 2 ] ; } else { index [ 1 ] [ 1 ] = index [ 1 ] [ 1 ] + 1 ; index [ 1 ] [ 2 ] = index [ 1 ] [ 2 ] + 1 ; } } if ( i == n ) { if ( matrix [ index [ 1 ] [ 1 ] + 1 ] [ index [ 1 ] [ 2 ] ] > matrix [ index [ 1 ] [ 1 ] + 1 ] [ index [ 1 ] [ 2 ] + 1 ] ) { index [ 1 ] [ 1 ] = index [ 1 ] [ 1 ] + 1 ; index [ 1 ] [ 2 ] = index [ 1 ] [ 2 ] ; } else { index [ 1 ] [ 1 ] = index [ 1 ] [ 1 ] + 1 ; index [ 1 ] [ 2 ] = index [ 1 ] [ 2 ] + 1 ; } } sum = sum + matrix [ index [ 1 ] [ 1 ] ] [ index [ 1 ] [ 2 ] ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 17632}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int r , i , j ; scanf ( \"%d\" , & r ) ; int arr [ r ] [ r ] ; for ( i = 0 ; i <= r - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] = 0 ; } for ( i = 0 ; i <= r - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = r - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j <= i - 1 ; j ++ ) { if ( arr [ i ] [ j + 1 ] > arr [ i ] [ j ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; } } printf ( \"%d\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 18372}
{"input": "int main ( void ) { int t ; long a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; int gcd ; long nmrt , dmrt , rem , lcm ; if ( a > b ) { nmrt = a ; dmrt = b ; } else { nmrt = b ; dmrt = a ; } rem = nmrt % dmrt ; while ( rem != 0 ) { nmrt = dmrt ; dmrt = rem ; rem = nmrt % dmrt ; } gcd = dmrt ; lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 3014}
{"input": "int main ( ) { int t , n , a [ 100000 ] , i , j , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } s = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { s = s + a [ j + 1 ] ; } else { s = s + a [ j ] ; a [ j + 1 ] = a [ j ] ; } } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 4884}
{"input": "int main ( ) { int t , n , i , j , ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; ++ i ) scanf ( \"%d\" , & arr [ i ] ) ; ans = 0 ; for ( i = n - 1 ; i >= 0 ; -- i ) { ans ++ ; j = i - 1 ; while ( arr [ j ] <= arr [ j + 1 ] ) { ans ++ ; j -- ; } } printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 3034}
{"input": "int main ( ) { char input [ 102400 ] ; int i , num_cases , curr_case ; fgets ( input , sizeof ( input ) , stdin ) ; while ( sscanf ( input , \"%d\" , & num_cases ) != 1 ) printf ( \"Please enter right value\" ) ; for ( i = 0 ; i < num_cases ; i ++ ) { fgets ( input , sizeof ( input ) , stdin ) ; sscanf ( input , \"%d\" , & curr_case ) ; if ( curr_case % 2 != 0 ) curr_case -- ; printf ( \"%d\n\" , curr_case ) ; } return 0 ; }", "label": 1, "id": 21630}
{"input": "int ret_max ( int a , int b ) { if ( a > b ) return a ; else if ( a == b ) return a ; else return b ; } int main ( ) { int t , n , i , j , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \" \" ) ; scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( i != 0 && j == 0 ) a [ i ] [ 0 ] += a [ i - 1 ] [ 0 ] ; else if ( i == j ) { if ( i != 0 ) a [ i ] [ i ] += a [ i - 1 ] [ i - 1 ] ; } else a [ i ] [ j ] += ret_max ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) ; } } m = a [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( m < a [ n - 1 ] [ i ] ) m = a [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , m ) ; } }", "label": 0, "id": 18192}
{"input": "int main ( ) { long int l , c , j , a , b , max , min ; int i , n ; unsigned long long int p ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } l = max ; for ( j = 0 ; j < l ; j ++ ) { if ( max % min == 0 ) { p = ( a * b ) / min ; printf ( \"%ld %I64d\n\" , min , p ) ; break ; } c = max % min ; max = min ; min = c ; } } }", "label": 1, "id": 22313}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int a [ 1000 ] , b [ 1000 ] ; int main ( ) { int t , i , x , y ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a [ i ] , & b [ i ] ) ; } for ( i = 0 ; i < t ; i ++ ) { x = gcd ( a [ i ] , b [ i ] ) ; y = lcm ( a [ i ] , b [ i ] ) ; printf ( \"%d %d\" , x , y ) ; printf ( \"\n\" ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { static int tmp = 1 ; if ( tmp % a == 0 && tmp % b == 0 ) return tmp ; tmp ++ ; lcm ( a , b ) ; return tmp ; }", "label": 3, "id": 24556}
{"input": "int main ( ) { int t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { long long int n , m , a , b , l ; scanf ( \"%llu%llu\" , & a , & b ) ; n = a ; m = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } l = ( m * n ) / a ; printf ( \"%llu %llu\n\" , a , l ) ; } return 0 ; }", "label": 0, "id": 5144}
{"input": "long long int euclideanGcd ( long long int a , long long int b ) { if ( b == 0 ) { return a ; } a = a % b ; return euclideanGcd ( b , a ) ; } int main ( ) { int test , i ; long long int a , b , l , g ; scanf ( \"%lld\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; g = euclideanGcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 19432}
{"input": "int main ( void ) { int t , a , b , c , j , i , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; for ( j = 1 ; j <= a && j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { gcd = j ; } } printf ( \"%d \" , gcd ) ; lcm = ( a * b ) / gcd ; printf ( \"%d\n\" , lcm ) ; t -- ; } return 0 ; }", "label": 2, "id": 952}
{"input": "int main ( ) { int test , n , a [ 101 ] [ 101 ] , b [ 101 ] [ 101 ] , i , j , k ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( j = n - 1 ; j > 0 ; j ++ ) { for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ j ] [ i ] > a [ j ] [ i + 1 ] ) a [ j - 1 ] [ i ] = a [ j - 1 ] [ i ] + a [ j ] [ i ] ; else a [ j - 1 ] [ i ] = a [ j - 1 ] [ i ] + a [ j ] [ i + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 2512}
{"input": "typedef long long int ll ; typedef int ll ; inline ll read_int ( ) { ll n = 0 , a = 1 ; char c = GC ( ) ; while ( c < 48 || c > 57 ) { if ( c == '-' ) { a = - 1 ; } c = GC ( ) ; } while ( c > 47 && c < 58 ) { n = ( n << 3 ) + ( n << 1 ) + c - '0' ; c = GC ( ) ; } return a * n ; } inline void fastwrite ( ll a ) { if ( a < 0 ) { a = - a ; PC ( '-' ) ; } char snum [ 40 ] ; ll i = 0 ; do { snum [ i ++ ] = a + 48 ; a = a / 10 ; } while ( a != 0 ) ; i = i - 1 ; while ( i >= 0 ) PC ( snum [ i -- ] ) ; } long long gcd ( long a , long b ) { long long t ; while ( b ) { t = a % b ; a = b ; b = t ; } return a ; } int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int a , b ; scanf ( \"%lld %lld\" , & a , & b ) ; long long int g = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 0, "id": 17518}
{"input": "int main ( void ) { long int t , n , i , j , p ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { p = 200000 ; scanf ( \"%ld\" , & n ) ; int * ptr ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , ( ptr + j ) ) ; if ( * ( ptr + j ) < p ) p = * ( ptr + j ) ; } printf ( \"%ld\n\" , p * ( n - 1 ) ) ; free ( ptr ) ; } return 0 ; }", "label": 0, "id": 23816}
{"input": "int gcd ( int , int ) ; int main ( void ) { int a , b , m , i , n ; scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; n = gcd ( a , b ) ; printf ( \"%d %d\n\" , n , ( a * b ) / n ) ; } return 0 ; } gcd ( int a , int b ) { if ( b == 0 ) return a ; gcd ( b , a % b ) ; }", "label": 1, "id": 12197}
{"input": "int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int t , i ; long a , b , g ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%ld %ld\n\" , g , ( a * b ) / g ) ; } }", "label": 0, "id": 6900}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , r , t , s = 0 , i , j , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 , j = 0 ; i < r ; ) { s += a [ i ] [ j ] ; if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) i ++ ; else { i ++ ; j ++ ; } } printf ( \"%d\" , s ) ; } return 0 ; }", "label": 1, "id": 19865}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n ; int a [ 200 ] [ 200 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 3559}
{"input": "int main ( ) { int A , B , x , i , n , HCF , LCM ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { x = B ; } else { x = A ; } for ( i = 1 ; i <= x ; ++ i ) { if ( A % i == 0 && B % i == 0 ) { HCF = i ; } } printf ( \"%d \" , HCF ) ; LCM = A * B / HCF ; printf ( \"%d\" , LCM ) ; } return 0 ; }", "label": 1, "id": 19136}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; int i = 0 , min = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 15569}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned long long n , len = 1 , count , ans = 0 ; scanf ( \"%llu\" , & n ) ; unsigned long arr [ n ] ; for ( count = 0 ; count < n ; count ++ ) scanf ( \"%lu\" , & arr [ count ] ) ; for ( count = 0 ; count < n - 1 ; count ++ ) { if ( arr [ count + 1 ] >= arr [ count ] ) len ++ ; else { ans += ( len * ( len + 1 ) ) / 2 ; len = 1 ; } } ans += ( len * ( len + 1 ) ) / 2 ; printf ( \"%llu\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 10597}
{"input": "int main ( ) { int n , * arr , i , j , l , k ; int sum , next ; scanf ( \"%d\" , & n ) ; l = n * ( n + 1 ) * 0.5 ; arr = malloc ( l * sizeof ( int ) ) ; for ( i = 0 ; i < l ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; i = 0 ; k = i ; sum = arr [ 0 ] ; while ( k < n ) { if ( arr [ i + k ] < arr [ i + k + 1 ] ) { next = arr [ i + k + 1 ] ; i = i + k + 1 ; } else { next = arr [ i + k ] ; i = i + k ; } sum = sum + next ; k ++ ; } printf ( \"%d\" , sum ) ; return 0 ; }", "label": 1, "id": 651}
{"input": "int n_of_rows , n_elements ; int * elements ; int greatest , pop_row , pop_column ; int r , c , sum , backtrace , n_of_bt ; void init ( ) ; void push ( int , int ) ; void pop ( ) ; void getrows ( ) ; void traverse ( ) ; typedef struct stack { int top ; int row [ 100 ] ; int column [ 100 ] ; } st ; st s ; int main ( ) { int n_of_cases , n_of_rows , index ; greatest = - 1 ; scanf ( \"%d\" , & n_of_cases ) ; for ( index = 0 ; index < n_of_cases ; index ++ ) { getrows ( ) ; traverse ( ) ; printf ( \"%d\n\" , greatest ) ; } return 0 ; } void getrows ( ) { int i ; scanf ( \"%d\" , & n_of_rows ) ; n_elements = 0 ; for ( i = 1 ; i <= n_of_rows ; i ++ ) n_elements += i ; elements = ( int * ) malloc ( n_elements * sizeof ( int ) ) ; for ( i = 0 ; i < n_elements ; i ++ ) scanf ( \"%d\" , & elements [ i ] ) ; } int get_element ( int i , int j ) { int k , index ; k = 0 ; for ( index = 1 ; index <= i ; index ++ ) k += index ; k += j ; return elements [ k ] ; } void init ( ) { s . top = - 1 ; } void push ( int r , int c ) { s . top += 1 ; s . row [ s . top ] = r ; s . column [ s . top ] = c ; } void pop ( ) { pop_row = s . row [ s . top ] ; pop_column = s . column [ s . top ] ; s . top -- ; } void traverse ( ) { r = c = sum = 0 ; while ( r < n_of_rows ) { sum += get_element ( r , c ) ; push ( r , c ) ; r ++ ; } if ( sum > greatest ) greatest = sum ; backtrace = 1 ; while ( backtrace < n_of_rows ) { for ( n_of_bt = 1 ; n_of_bt <= backtrace ; n_of_bt ++ ) { pop ( ) ; r = pop_row ; c = pop_column ; sum -= get_element ( r , c ) ; } pop ( ) ; r = pop_row ; c = pop_column ; push ( r , c ) ; r ++ ; c ++ ; while ( r < n_of_rows ) { sum += get_element ( r , c ) ; push ( r , c ) ; r ++ ; } if ( sum > greatest ) greatest = sum ; backtrace ++ ; } }", "label": 3, "id": 26552}
{"input": "int main ( ) { int n , j , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int size ; scanf ( \"%d\" , & size ) ; int ar [ size ] , t , x = 0 ; for ( j = 0 ; j < size ; j ++ ) { scanf ( \" %d\" , & ar [ j ] ) ; if ( j == 0 ) { t = ar [ j ] ; } if ( j > 0 ) { if ( ar [ j ] < t ) { t = ar [ j ] ; x = x + 1 ; } } } int count = 0 ; for ( j = 0 ; j < size ; j ++ ) { if ( j != x ) { count = count + ar [ x ] ; } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 1, "id": 96}
{"input": "int main ( ) { unsigned long int i , j , t , n , k , sum , min ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a [ 50000 ] ; sum = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( k = 0 ; k < n ; k ++ ) { if ( min > a [ k ] ) min = a [ k ] ; } sum = min * ( n - 1 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 17444}
{"input": "int main ( ) { int t , j , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n ; int i ; long count = 0 ; scanf ( \"%lld\" , & n ) ; long long int ar [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & ar [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { int k = i ; for ( l = i + 1 ; l <= j ; l ++ ) { if ( k < l && ar [ k ] < ar [ l ] ) { k ++ ; continue ; } } if ( k == j ) count ++ ; } } long long int total = count + n ; printf ( \"%lld\n\" , total ) ; } }", "label": 2, "id": 10580}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , n , l , g ; scanf ( \"%d\n\" , & n ) ; while ( n > 0 ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; printf ( \"%d\n\" , g ) ; l = a * b / g ; printf ( \"\n%d\" , l ) ; n -- ; } return 0 ; } int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 8909}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , x , y , b ; scanf ( \"%d %d\" , & x , & y ) ; b = gcd ( x , y ) ; a = ( x * y ) / b ; printf ( \"%d %d\n\" , b , a ) ; } return 0 ; }", "label": 1, "id": 19793}
{"input": "int maxab ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int r , m , c , i , j ; int s [ 100 ] [ 101 ] ; scanf ( \"%d\" , & c ) ; while ( c -- ) { scanf ( \"%d\" , & r ) ; scanf ( \"%d\" , & s [ 0 ] [ 1 ] ) ; for ( i = 1 ; i < r ; i ++ ) { s [ i - 1 ] [ 0 ] = 0 ; s [ i - 1 ] [ i + 1 ] = 0 ; for ( j = 1 ; j <= i + 1 ; j ++ ) { scanf ( \"%d\" , & s [ i ] [ j ] ) ; s [ i ] [ j ] += maxab ( s [ i - 1 ] [ j - 1 ] , s [ i - 1 ] [ j ] ) ; } } m = s [ r - 1 ] [ 1 ] ; for ( i = 2 ; i <= r ; i ++ ) { if ( s [ r - 1 ] [ i ] > m ) m = s [ r - 1 ] [ i ] ; } printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 0, "id": 6666}
{"input": "int main ( ) { int a , b , c , lcm , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = gcd ( a , b ) ; lcm = ( a * b ) / c ; printf ( \"%d\n\" , lcm ) ; } return 0 ; } int gcd ( int a , int b ) { int Swap , c = 1 , i ; if ( b < a ) { Swap = a ; a = b ; b = Swap ; } for ( i = 1 ; i < a / 2 ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { c = i ; } } printf ( \"%d \" , c ) ; return c ; }", "label": 1, "id": 23822}
{"input": "int main ( void ) { int t , a , b , gcd , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) max = a ; else max = b ; while ( 1 ) { if ( max % a == 0 && max % b == 0 ) { gcd = max ; break ; } max ++ ; } printf ( \"%d %d\n\" , ( ( a * b ) / gcd ) , gcd ) ; } return 0 ; }", "label": 2, "id": 11269}
{"input": "int main ( ) { long int t , n , min = 0 , i , pres , next ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 0 ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & pres ) ; while ( n - 1 > 0 ) { scanf ( \"%d\" , & next ) ; n -- ; if ( pres > next ) { pres = next ; } min = min + pres ; } printf ( \"%d\" , min ) ; } return 0 ; }", "label": 1, "id": 22864}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int x = gcd ( a , b ) ; int m = a * b ; printf ( \"%d %d\n\" , x , m ) ; } return 0 ; }", "label": 1, "id": 15154}
{"input": "void main ( ) { int t , l , i , j ; scanf ( \"%d\" , & t ) ; scanf ( \"%d\" , & l ) ; int arr [ l - 1 ] [ l - 1 ] ; while ( t -- ) { for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = l - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 17341}
{"input": "int maxi ( int a , int b ) ; int sum_calc ( int n , int a [ 100 ] [ 100 ] , int x , int y ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , n , j , k ; int a [ 100 ] [ 100 ] ; int x ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } x = sum_calc ( n , a , 0 , 0 ) ; printf ( \"%d\n\" , x ) ; } return 0 ; } int maxi ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int sum_calc ( int n , int a [ 100 ] [ 100 ] , int x , int y ) { int count = 0 ; if ( x == n - 1 ) { return a [ x ] [ y ] ; } else { count = a [ x ] [ y ] + maxi ( sum_calc ( n , a , x + 1 , y ) , sum_calc ( n , a , x + 1 , y + 1 ) ) ; return count ; } }", "label": 2, "id": 9201}
{"input": "int main ( ) { long long int a , b , c , d , e , f ; long long int k , i ; scanf ( \"%lld\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( b > a ) { c = b ; d = a ; } else { c = a ; d = b ; } e = c % d ; while ( e > 0 ) { c = d ; d = e ; e = c % d ; } printf ( \"%lld %lld\" , d , ( a * b ) / d ) ; } return 0 ; }", "label": 1, "id": 20805}
{"input": "int main ( ) { int t , n , i , cost , min = INT_MAX ; long int a [ 50007 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 22631}
{"input": "int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; int min ; int n ; scanf ( \"%d\" , & n ) ; int ptr [ 1000000 ] ; for ( j = 0 ; j < t ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & ptr [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { min = ptr [ 0 ] ; if ( ptr [ i ] < min ) min = ptr [ i ] ; } printf ( \"%d\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 1, "id": 2057}
{"input": "int main ( ) { int num1 , num2 , remainder , numerator , denominator , t , i ; scanf ( \"%d\" , & t ) ; if ( t >= 1 && t <= 1000 ) { int gcd [ t ] , lcm [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd [ i ] = denominator ; lcm [ i ] = num1 * num2 / gcd [ i ] ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d %d\n\" , gcd [ i ] , lcm [ i ] ) ; } } return 0 ; }", "label": 1, "id": 15525}
{"input": "int main ( ) { int t , i ; long a , b , u , v , x , lcm , gcd ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; u = a ; v = b ; while ( 1 ) { x = a % b ; a = b ; b = x ; if ( x == 0 ) { gcd = a ; break ; } } lcm = ( u * v ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 17787}
{"input": "int main ( ) { int T , N [ 5 ] , i , j , a [ 1000 ] , max , c [ 5 ] , k ; scanf ( \"%d\" , & T ) ; for ( k = 0 ; k < T ; k ++ ) { c [ k ] = 0 ; scanf ( \"%d\" , & N [ k ] ) ; for ( j = 0 ; j < N [ k ] ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; for ( i = 0 ; i < N [ k ] ; i ++ ) { max = a [ i ] ; for ( j = i ; j < N [ k ] ; j ++ ) { if ( a [ j ] >= max ) { c [ k ] ++ ; max = a [ j ] ; } else if ( a [ j ] > max ) break ; } } } for ( k = 0 ; k < T ; k ++ ) printf ( \"%d\" , c [ k ] ) ; return 0 ; }", "label": 3, "id": 15774}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , j , min ; scanf ( \"%lld\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 8676}
{"input": "int main ( ) { int t , n1 , n2 , i , gcd = 0 , lcm , z , x , y ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { gcd = 0 ; scanf ( \"%d\" , & n1 ) ; scanf ( \"%d\" , & n2 ) ; if ( n1 > n2 ) { x = n1 ; y = n2 ; } else { x = n2 ; y = n1 ; } while ( gcd == 0 ) { z = x % y ; if ( z != 0 ) { x = y ; y = z ; } else { gcd = y ; } } lcm = n1 * n2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 2379}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long signed int n ; scanf ( \"%li\" , & n ) ; long signed int a [ n ] ; int i , t ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%li\" , & a [ i ] ) ; t = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < t ) t = a [ i ] ; } t = t * ( n - 1 ) ; printf ( \"%d\n\" , t ) ; } return 0 ; }", "label": 0, "id": 12822}
{"input": "int main ( ) { int A [ 200 ] [ 200 ] , t , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( A [ i ] [ j ] > A [ i ] [ j + 1 ] ) A [ i - 1 ] [ j ] = A [ i - 1 ] [ j ] + A [ i ] [ j ] ; else A [ i - 1 ] [ j ] = A [ i - 1 ] [ j ] + A [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , A [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 3606}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , c ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { c = a [ i ] [ j ] ; if ( ( c + a [ i + 1 ] [ j ] ) > ( c + a [ i + 1 ] [ j + 1 ] ) ) a [ i ] [ j ] = c + a [ i + 1 ] [ j ] ; else a [ i ] [ j ] = c + a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25870}
{"input": "int p [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int c [ 100 ] [ 100 ] , i , j , k , q [ 100 ] [ 102 ] , t , u ; int maxindex , maxn , val , temp ; scanf ( \"%d\" , & t ) ; int n [ t ] , res [ t ] ; u = 0 ; while ( u < t ) { scanf ( \"%d\" , & n [ u ] ) ; temp = n [ u ] ; for ( i = 1 ; i <= n [ u ] ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & c [ i ] [ j ] ) ; } } q [ 1 ] [ 1 ] = c [ 1 ] [ 1 ] ; for ( i = 2 ; i <= n [ u ] ; i ++ ) { q [ 1 ] [ i ] = 0 ; } for ( j = 1 ; j <= n [ u ] ; j ++ ) { q [ j ] [ 0 ] = 0 ; q [ j ] [ temp + 1 ] = 0 ; } for ( i = 2 ; i <= n [ u ] ; i ++ ) { for ( j = 1 ; j <= n [ u ] ; j ++ ) { k = max ( q [ i - 1 ] [ j ] , q [ i - 1 ] [ j - 1 ] ) ; q [ i ] [ j ] = k + c [ i ] [ j ] ; } } maxindex = 1 ; maxn = q [ temp ] [ 1 ] ; for ( i = 2 ; i <= n [ u ] ; i ++ ) { if ( q [ temp ] [ i ] > maxn ) { maxn = q [ temp ] [ i ] ; maxindex = i ; res [ u ] = q [ temp ] [ i ] ; } } u ++ ; } for ( i = 0 ; i < u ; i ++ ) { printf ( \"\n%d\" , res [ i ] ) ; } return 0 ; }", "label": 3, "id": 2312}
{"input": "int main ( ) { long long i , j , a [ 49999 ] , n , x , sum , min ; int t ; scanf ( \"%d\" , & t ) ; for ( x = 0 ; x < t ; x ++ ) { sum = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min < a [ i ] ) { sum += min ; } else { min = a [ i ] ; sum += min ; } } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 1387}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int i , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int n , j , k ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] , sum [ n ] [ n ] ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) sum [ j ] [ k ] = 0 ; } for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } sum [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) sum [ j ] [ 0 ] = sum [ j - 1 ] [ 0 ] + arr [ j ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) sum [ j ] [ k ] = max ( sum [ j - 1 ] [ k - 1 ] , sum [ j - 1 ] [ k ] ) + arr [ j ] [ k ] ; } int max = sum [ n - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( sum [ n - 1 ] [ j ] > max ) max = sum [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 23441}
{"input": "int main ( ) { int i , j , k , n , t , count ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int x [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & x [ j ] ) ; } count = 0 ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= n - j - 1 ; k ++ ) { if ( x [ j + k ] <= x [ j + k + 1 ] ) { count ++ ; } else { k ++ ; continue ; } } } printf ( \"%d\n\" , count ) ; } }", "label": 2, "id": 21117}
{"input": "int solve ( int arr [ 100 ] [ 100 ] , int n ) ; int arr [ 100 ] [ 100 ] = { 0 } ; int main ( ) { int n , k , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } k = solve ( arr , n ) ; printf ( \"%d\" , k ) ; return 0 ; } int solve ( int arr [ 100 ] [ 100 ] , int n ) { int i , j ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] = arr [ i + 1 ] [ j ] + arr [ i ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ; } } return ( arr [ 0 ] [ 0 ] ) ; }", "label": 3, "id": 5271}
{"input": "int main ( ) { int t , n1 , n2 , i , j , k , temp ; scanf ( \"%d\" , & t ) ; int g [ t ] , l [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; if ( n1 == n2 ) { g [ i ] = n1 ; l [ i ] = n1 ; continue ; } if ( n1 < n2 ) { temp = n1 ; n1 = n2 ; n2 = temp ; } for ( j = 1 ; j <= n1 ; j ++ ) { if ( n1 % j == 0 && n2 % j == 0 ) g [ i ] = j ; l [ i ] = n1 * n2 / g [ i ] ; } } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d %d\n\" , g [ i ] , l [ i ] ) ; return 0 ; }", "label": 2, "id": 25151}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int a [ 50000 ] ; int n ; int small ; for ( int i = 0 ; i < t ; i ++ ) { small = 100000 ; scanf ( \"%d\" , & n ) ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; if ( a [ j ] < small ) small = a [ j ] ; } printf ( \"%d\n\" , small * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 16006}
{"input": "int main ( ) { int i , T ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { int A , B , H , L ; scanf ( \"%d%d\" , & A , & B ) ; { for ( H = A < B ? A : B ; H >= 1 ; H -- ) if ( A % H == 0 && B % H == 0 ) break ; } { for ( L = A > B ? A : B ; L >= 1 ; L ++ ) if ( L % A == 0 && L % B == 0 ) break ; } printf ( \"- -\n\" , H , L ) ; } return 0 ; }", "label": 2, "id": 17944}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , x , y , gcd , lcm , c ; scanf ( \"%lld %lld\" , & a , & b ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 9739}
{"input": "int main ( ) { int a , b , t , i , j , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; for ( j = 1 ; j <= a , j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) { gcd = j ; } } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 3953}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , min = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 1, "id": 26377}
{"input": "int n , k , j , i , t , sm , a , b ; int funct ( int ar [ 100 ] [ 100 ] , int n ) { int s [ 100 ] [ 100 ] = { 0 } ; for ( a = n - 1 ; a >= 0 ; a -- ) { for ( b = 0 ; b <= a ; b ++ ) { s [ a ] [ b ] = ar [ a ] [ b ] + max ( s [ a + 1 ] [ b ] , s [ a + 1 ] [ b + 1 ] ) ; } } return s [ 0 ] [ 0 ] ; } int main ( ) { scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { int ar [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } sm = funct ( ar , n ) ; printf ( \"%d\n\" , sm ) ; } return 0 ; }", "label": 1, "id": 25951}
{"input": "int maxim ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + maxim ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 9590}
{"input": "int main ( ) { int t , n , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ min ] > a [ i ] ) min = i ; } printf ( \"%lld\n\" , ( long long ) a [ min ] * ( n - 1 ) ) ; } }", "label": 0, "id": 17235}
{"input": "short t , n , a [ 100 ] [ 100 ] , i , j , b , c ; int main ( ) { scanf ( \"%h\" , & t ) ; while ( t -- ) { scanf ( \"%h\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%h\" , & a [ i ] [ j ] ) ; } for ( c = n - 2 ; c >= 0 ; c -- ) { for ( b = i ; b >= 0 ; b -- ) if ( a [ c + 1 ] [ b ] >= a [ c + 1 ] [ b + 1 ] ) a [ c ] [ b ] += a [ c + 1 ] [ b ] ; else a [ c ] [ b ] += a [ c + 1 ] [ b + 1 ] ; } printf ( \"%h\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 1, "id": 5739}
{"input": "int main ( void ) { int darab ; int sorok ; int i , j , k , m , n , z , w ; char aktsor [ 300 ] ; char * aktdata ; int beszamok [ 99 ] = { 0 } ; int osszegek [ 99 ] = { 0 } ; int atmossz [ 99 ] = { 0 } ; int max ; gets ( aktsor ) ; aktdata = strtok ( aktsor , \" \" ) ; darab = atoi ( aktdata ) ; for ( i = 1 ; i <= darab ; i ++ ) { gets ( aktsor ) ; aktdata = strtok ( aktsor , \" \" ) ; sorok = atoi ( aktdata ) ; max = 0 ; for ( j = 1 ; j <= sorok ; j ++ ) { gets ( aktsor ) ; aktdata = strtok ( aktsor , \" \" ) ; for ( k = 0 ; k < j ; k ++ ) { beszamok [ k ] = atoi ( aktdata ) ; aktdata = strtok ( NULL , \" \" ) ; } atmossz [ 0 ] = beszamok [ 0 ] + osszegek [ 0 ] ; for ( m = 1 ; m < j ; m ++ ) { if ( osszegek [ m ] <= osszegek [ m - 1 ] ) { atmossz [ m ] = beszamok [ m ] + osszegek [ m - 1 ] ; } else { atmossz [ m ] = beszamok [ m ] + osszegek [ m ] ; } } for ( n = 0 ; n < 99 ; n ++ ) { osszegek [ n ] = atmossz [ n ] ; } } for ( z = 0 ; z < 99 ; z ++ ) { if ( osszegek [ z ] > max ) { max = osszegek [ z ] ; } } printf ( \"%d\n\" , max ) ; for ( w = 0 ; w < 99 ; w ++ ) { beszamok [ w ] = 0 ; osszegek [ w ] = 0 ; atmossz [ w ] = 0 ; } } return 0 ; }", "label": 0, "id": 15160}
{"input": "int main ( ) { int t , n , x , y , el [ 100 ] [ 100 ] , i , j , gr , sum [ 100 ] ; unsigned int r ; scanf ( \"%d\" , & t ) ; for ( n = 0 ; n < t ; n ++ ) { scanf ( \"%d\" , & r ) ; for ( x = 0 ; x < r ; x ++ ) { for ( y = 0 ; y <= x ; y ++ ) { scanf ( \"%d\" , & el [ x ] [ y ] ) ; } } for ( i = r - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { gr = ( ( el [ i + 1 ] [ j ] > el [ i + 1 ] [ j + 1 ] ) ? el [ i + 1 ] [ j ] : el [ i + 1 ] [ j + 1 ] ) ; el [ i ] [ j ] = el [ i ] [ j ] + gr ; } } sum [ n ] = el [ 0 ] [ 0 ] ; } for ( n = 0 ; n < t ; n ++ ) { printf ( \"%d\n\" , sum [ n ] ) ; } return 0 ; }", "label": 1, "id": 19857}
{"input": "main ( ) { int t , m , i , j , a [ m ] , e ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & m ) ; for ( j = 0 ; j < m ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = 0 ; j < m - 1 ; j ++ ) { if ( a [ j ] < a [ j + 1 ] ) { a [ j + 1 ] = a [ j ] ; } else { a [ j ] = a [ j + 1 ] ; } } printf ( \"%d\n\" , a [ j ] * ( m - 1 ) ) ; } return 0 ; }", "label": 3, "id": 15788}
{"input": "int main ( ) { long long t ; scanf ( \"%lld\" , & t ) ; int l , i , j , k ; for ( l = 0 ; l < t ; l ++ ) { long long a [ 100 ] [ 100 ] ; int n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } for ( i = ( n - 2 ) ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 5433}
{"input": "int main ( ) { int A , B , c , i , T ; scanf ( \"%d\" , & T ) ; scanf ( \"%d%d\" , & A , & B ) ; for ( i = 2 ; i <= A ; i ++ ) { if ( A % i == 0 && B % i == 0 ) { c = i ; } } i = ( A * B ) / c ; printf ( \"%d %d\" , c , i ) ; }", "label": 1, "id": 14905}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 3549}
{"input": "int fun ( ) { int i = 0 ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; while ( c > 33 ) { i = i * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return i ; } int main ( ) { int tc , nor , arr [ SIZE ] [ SIZE ] , j , i ; tc = fun ( ) ; while ( tc -- ) { nor = fun ( ) ; for ( i = 0 ; i < nor ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] = fun ( ) ; for ( i = nor - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) arr [ i ] [ j ] += ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23543}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + 1 ] [ j ] ) > ( a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 6363}
{"input": "int main ( ) { long long int t , i , a , b , gcd , lcm , x , y ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & x , & y ) ; a = x ; b = y ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } printf ( \"%lld %lld\n\" , a , x * y / a ) ; } return 0 ; }", "label": 0, "id": 21678}
{"input": "int main ( ) { int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a , i ; long long int min ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( i == 0 ) min = a ; else if ( a < min ) min = a ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 5014}
{"input": "int gcd ( int num1 , int num2 ) { if ( num1 % num2 == 0 ) return num2 ; else return gcd ( num2 , num1 % num2 ) ; } int main ( ) { int a , b , c , hcf , lcm ; scanf ( \"%d\" , & a ) ; for ( int i = 0 ; i < a ; i ++ ) { scanf ( \"%d%d\" , & b , & c ) ; hcf = gcd ( b , c ) ; lcm = ( b * c ) / hcf ; printf ( \"\n%d %d\" , hcf , lcm ) ; } return 0 ; }", "label": 1, "id": 4280}
{"input": "int main ( ) { int t , a [ 100000 ] , n , i , small ; int cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; small = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < small ) small = a [ i ] ; } cost = small * ( n - 1 ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 23206}
{"input": "void main ( ) { int T , a , b , i , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = ( a > b ? b : a ) ; i >= 1 ; i -- ) { if ( a % i == 0 ) if ( b % i == 0 ) { gcd = i ; break ; } } for ( i = 1 ; i <= ( a * b ) ; i ++ ) { if ( i % a == 0 ) if ( i % b == 0 ) { lcm = i ; break ; } } printf ( \"%d %d\" , gcd , lcm ) ; T -- ; } }", "label": 2, "id": 13673}
{"input": "int main ( ) { int t , n , i , j , c , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i <= n - 1 ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) for ( j = i + 1 ; j <= n - 1 ; j ++ ) if ( a [ i ] > a [ j ] ) c ++ ; for ( i = 0 ; i <= n - 1 ; i ++ ) for ( j = 0 ; j <= n - 1 ; j ++ ) if ( i == j ) c ++ ; printf ( \"\n%d\" , c ) ; } return 0 ; }", "label": 2, "id": 25704}
{"input": "int arr [ 101 ] [ 101 ] , visited [ 101 ] [ 101 ] ; int recurse ( int i , int j , int n ) { if ( visited [ i ] [ j ] ) return arr [ i ] [ j ] ; if ( i == n - 1 ) return arr [ i ] [ j ] ; int temp = max ( recurse ( i + 1 , j , n ) , recurse ( i + 1 , j + 1 , n ) ) ; arr [ i ] [ j ] += temp ; ; visited [ i ] [ j ] = 1 ; return arr [ i ] [ j ] ; } void solve ( ) { int n , i , j , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { visited [ i ] [ j ] = 0 ; scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } printf ( \"%d\n\" , recurse ( 0 , 0 , n ) ) ; } int main ( ) { int test , i ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) solve ( ) ; return 0 ; }", "label": 0, "id": 9220}
{"input": "int main ( ) { int t , n , x , sub_arrays , m , z ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; sub_arrays = 0 , m = 1 ; scanf ( \"%d\" , & z ) ; while ( -- n ) { scanf ( \"%d\" , & x ) ; if ( z < x ) m ++ ; else sub_arrays += ( m * ( m + 1 ) ) / 2 , m = 1 ; z = x ; } sub_arrays += ( m * ( m + 1 ) ) / 2 ; printf ( \"%d\n\" , sub_arrays ) ; } return 0 ; }", "label": 0, "id": 22881}
{"input": "int main ( ) { int cases , N , i ; scanf ( \"%d\" , & cases ) ; while ( cases > 0 ) { scanf ( \"%d\" , & N ) ; int arr [ N ] ; int min = 1000000 ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } long long int res = min * ( N - 1 ) ; printf ( \"%lld\n\" , res ) ; cases -- ; } return 0 ; }", "label": 0, "id": 6848}
{"input": "int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , min , max , rem ; scanf ( \"%ld%ld\" , & a , & b ) ; min = a < b ? a : b ; max = a > b ? a : b ; while ( min != 0 ) { rem = max % min ; max = min ; min = rem ; } printf ( \"%ld \" , max ) ; printf ( \"%ld\n\" , a * b / max ) ; } return 0 ; }", "label": 0, "id": 16196}
{"input": "int main ( ) { int a , b , r , j , tt , t , test , hcf = 1 ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d %d\" , & a , & b ) ; tt = a * b ; if ( b > a ) { test = a ; a = b ; b = test ; } r = a % b ; while ( r != 0 ) { a = b ; b = r ; r = a % b ; } hcf = b ; printf ( \"%d %d\" , hcf , tt / hcf ) ; } return 0 ; }", "label": 1, "id": 19395}
{"input": "int findMaxPath ( int grid [ 100 ] [ 100 ] , int , int , int ans [ 100 ] [ 100 ] ) ; int main ( ) { int notc , k ; int grid [ 100 ] [ 100 ] , ans [ 100 ] [ 100 ] ; scanf ( \"%d\" , & notc ) ; while ( notc -- ) { int nol , i , j ; scanf ( \"%d\" , & nol ) ; for ( i = 0 ; i < nol ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & grid [ i ] [ j ] ) ; } } printf ( \"%d\n\" , findMaxPath ( grid , nol , 1 , ans ) ) ; } return 0 ; } int max ( int a , int b ) { return ( ( a > b ) ? a : b ) ; } int findMaxPath ( int grid [ 100 ] [ 100 ] , int nol , int i , int ans [ 100 ] [ 100 ] ) { if ( nol == 1 ) { ans [ 0 ] [ 0 ] = grid [ 0 ] [ 0 ] ; return grid [ 0 ] [ 0 ] ; } else { int j ; int maxPrev = 0 , maxNow = 0 ; for ( j = 0 ; j < i ; j ++ ) { int temp1 , temp2 ; if ( j == 0 ) { ans [ 1 ] [ j ] = findMaxPath ( ( grid [ 1 ] + j ) , nol - 1 , i + 1 , ( ans [ 1 ] + j ) ) ; } ans [ 1 ] [ j + 1 ] = findMaxPath ( ( grid [ 1 ] + 1 + j ) , nol - 1 , i + 1 , ( ans [ 1 ] + 1 + j ) ) ; temp1 = grid [ 0 ] [ j ] + ans [ 1 ] [ j ] ; temp2 = grid [ 0 ] [ j ] + ans [ 1 ] [ j + 1 ] ; maxPrev = maxNow ; maxNow = max ( temp1 , temp2 ) ; maxNow = max ( maxPrev , maxNow ) ; } return maxNow ; } }", "label": 2, "id": 687}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int main ( void ) { int hcf , lcm ; int T ; int A , B ; scanf ( \"%d\" , & T ) ; while ( T -- > 0 ) { scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; hcf = gcd ( A , B ) ; printf ( \"%d %d\n\" , hcf , A * B / hcf ) ; } return 0 ; }", "label": 1, "id": 5152}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int process ( int mat [ ] [ 101 ] , int n ) { int i ; int j ; int x ; int y ; int m ; if ( n == 1 ) return mat [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { x = 0 ; y = 0 ; if ( i - 1 >= 0 && j - 1 >= 0 && mat [ i - 1 ] [ j - 1 ] != - 1 ) { x = mat [ i - 1 ] [ j - 1 ] ; } if ( mat [ i - 1 ] [ j ] != - 1 ) { y = mat [ i - 1 ] [ j ] ; } if ( x != - 1 && y != - 1 ) { mat [ i ] [ j ] += max ( x , y ) ; } } } m = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ n - 1 ] [ j ] > m ) { m = mat [ n - 1 ] [ j ] ; } } return m ; } int main ( ) { int t ; int n ; int i ; int j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int mat [ 101 ] [ 101 ] ; int sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { mat [ i ] [ j ] = - 1 ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } } sum = process ( mat , n ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 5833}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , j ; for ( i = 0 ; i < t ; i ++ ) { long long int a , b ; long long int lcm , gcd ; scanf ( \"%lld %lld\" , & a , & b ) ; long long int mn = ( a > b ) ? b : a ; gcd = 1 ; for ( j = 1 ; j <= mn ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } lcm = a / gcd * b ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } }", "label": 2, "id": 1112}
{"input": "int main ( ) { long n , i , h , l ; scanf ( \"%ld\" , & n ) ; int a [ 2 ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld %ld\" , & a [ 0 ] [ i ] , & a [ 1 ] [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( h = a [ 0 ] [ i ] < a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; h >= 1 ; h -- ) { if ( a [ 0 ] [ i ] % h == 0 && a [ 1 ] [ i ] % h == 0 ) break ; } printf ( \"%ld \" , h ) ; for ( l = a [ 0 ] [ i ] > a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ; l <= a [ 0 ] [ i ] * a [ 1 ] [ i ] ; l += ( a [ 0 ] [ i ] > a [ 1 ] [ i ] ? a [ 0 ] [ i ] : a [ 1 ] [ i ] ) ) if ( l % a [ 0 ] [ i ] == 0 && l % a [ 1 ] [ i ] == 0 ) break ; printf ( \"%ld\n\" , l ) ; } return 0 ; }", "label": 2, "id": 22699}
{"input": "int main ( void ) { int t = 0 , n = 0 , a [ MAX ] , i = 0 ; long long min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 0 ; scanf ( \"%d\" , & n ) ; if ( n <= 1 ) { break ; } else { for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n - 1 ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } } min *= ( n - 1 ) ; printf ( \"%lld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 1109}
{"input": "int main ( void ) { int t , a [ 1000 ] , b [ 10003 ] , small , big , i , hcf , lcm , k ; scanf ( \"%d\" , & t ) ; if ( t >= 0 && t <= 1000 ) { for ( k = 1 ; k <= t ; k ++ ) { scanf ( \"%d%d\" , & a [ k ] , & b [ k ] ) ; } for ( k = 1 ; k <= t ; k ++ ) { if ( a [ k ] >= 0 && a [ k ] <= 1000000 && b [ k ] >= 0 && b [ k ] <= 1000000 ) { big = ( a [ k ] > b [ k ] ) ? a [ k ] : b [ k ] ; small = ( a [ k ] < b [ k ] ) ? a [ k ] : b [ k ] ; for ( i = 1 ; i <= small ; i ++ ) { if ( a [ k ] % i == 0 && b [ k ] % i == 0 ) hcf = i ; } for ( i = big ; ; i ++ ) { if ( i % a [ k ] == 0 && i % b [ k ] == 0 ) { lcm = i ; break ; } } printf ( \"%d %d\n\" , hcf , lcm ) ; } } } return 0 ; }", "label": 2, "id": 2982}
{"input": "int main ( void ) { int t , i ; long int a , j ; long int n , min = 100000 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a ) ; if ( a < min ) min = a ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; min = 100000 ; } return 0 ; }", "label": 0, "id": 13359}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a < b ) { long long int temp = a ; a = b ; b = temp ; } if ( ( a % b ) == 0 ) return b ; else return ( gcd ( b , a % b ) ) ; } long long int lcm ( long long int a , long long int b ) { long long int k ; long long int h = gcd ( a , b ) ; k = a * b ; return ( k / h ) ; } int main ( ) { long long int t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int a , b ; scanf ( \"%lld%lld\" , & a , & b ) ; printf ( \"%lld %lld\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 0, "id": 510}
{"input": "int main ( ) { int testcases , count = 1 , i ; int a , b , p , lcm , t ; scanf ( \"%d\" , & testcases ) ; while ( count <= testcases ) { scanf ( \"%d %d\" , & a , & b ) ; p = a * b ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } lcm = p / a ; printf ( \"%d %d\n\" , a , lcm ) ; count ++ ; } return 0 ; }", "label": 1, "id": 5073}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j ; int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5941}
{"input": "long long int a [ 105 ] [ 105 ] = { 0 } ; int main ( ) { int n , m ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%lld\" , & a [ i ] [ j ] ) ; for ( int i = m - 2 ; i >= 0 ; i -- ) for ( int j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; for ( int i = 0 ; i < 105 ; i ++ ) for ( int j = 0 ; j < 105 ; j ++ ) a [ i ] [ j ] = 0 ; } return 0 ; }", "label": 0, "id": 21762}
{"input": "int max ( int * a , int n ) { int i , m ; m = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > m ) m = a [ i ] ; } return m ; } int main ( void ) { int a [ 100000 ] , i , j , k , n , m , ad , s ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { s = 0 ; scanf ( \"%d\" , & m ) ; scanf ( \"%d\" , & ad ) ; for ( i = 1 ; i < m ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; k = max ( a , j ) ; s += k ; } printf ( \"%d\" , s ) ; } return 0 ; }", "label": 2, "id": 6664}
{"input": "int main ( void ) { int a , large , i , j , sum , t , l , k , b ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { sum = 0 ; large = 0 ; scanf ( \"%d\" , & k ) ; for ( l = 1 ; l <= k ; l ++ ) { scanf ( \"%d\" , & a ) ; for ( j = 1 ; j <= l - 1 ; j ++ ) { scanf ( \"%d\" , & b ) ; if ( a > b ) large = a ; else if ( b > a ) { large = b ; a = b ; } else large = a ; } sum += large ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 14948}
{"input": "void mul ( int ) ; void factorial ( int ) ; int length = 0 ; int a [ 100000 ] , fact [ 100000 ] ; int main ( ) { int num , i , t , j ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { scanf ( \"%d\n\" , & num ) ; fact [ 0 ] = 1 ; mul ( num ) ; for ( i = length ; i >= 0 ; i -- ) { printf ( \"%d\" , fact [ i ] ) ; fact [ i ] = 0 ; } printf ( \"\n\" ) ; length = 0 ; } return 0 ; } void mul ( int num ) { int i ; for ( i = 2 ; i <= num ; i ++ ) factorial ( i ) ; } void factorial ( int f ) { long i , r = 0 ; for ( i = 0 ; i <= length ; i ++ ) a [ i ] = fact [ i ] ; for ( i = 0 ; i <= length ; i ++ ) { fact [ i ] = ( ( a [ i ] * f ) + r ) ; r = ( ( a [ i ] * f ) + r ) / 10 ; } if ( r != 0 ) { while ( r != 0 ) { fact [ i ] = r ; r = r / 10 ; i ++ ; } } length = i - 1 ; }", "label": 1, "id": 23550}
{"input": "int getMaxIndex ( int * a , int lb , int ub ) { int max = a [ lb ] , maxIndex = lb ; while ( ++ lb <= ub ) { if ( max < a [ lb ] ) { max = a [ lb ] ; maxIndex = lb ; } } return maxIndex ; } int main ( void ) { int t , n , i , lb , ub , cost , maxIndex , sIndex , s2Index , * a ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; lb = 0 ; ub = n - 1 ; cost = 0 ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { maxIndex = getMaxIndex ( a , lb , ub ) ; if ( maxIndex == lb ) { lb ++ ; sIndex = maxIndex + 1 ; while ( sIndex < n - 1 && a [ sIndex ] == 0 ) sIndex ++ ; } else if ( maxIndex == ub ) { ub ++ ; sIndex = maxIndex - 1 ; while ( sIndex > 0 && a [ sIndex ] == 0 ) sIndex -- ; } else { sIndex = maxIndex + 1 ; while ( sIndex < n - 1 && a [ sIndex ] == 0 ) sIndex ++ ; s2Index = maxIndex - 1 ; while ( sIndex > 0 && a [ sIndex ] == 0 ) sIndex -- ; if ( a [ sIndex ] > a [ s2Index ] ) sIndex = s2Index ; } printf ( \"*[%d, %d]\n\" , a [ sIndex ] , a [ maxIndex ] ) ; a [ maxIndex ] = 0 ; cost += a [ sIndex ] ; } printf ( \"%d\n\" , cost ) ; free ( a ) ; } return 0 ; }", "label": 2, "id": 3725}
{"input": "long int ar [ 50001 ] ; main ( ) { long int j , i , t , n , sum = 0 ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { i = 0 ; scanf ( \"%ld\" , & n ) ; while ( i < n && scanf ( \"%ld\" , & ar [ i ++ ] ) == 1 ) ; sum = ar [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( ar [ i ] < ar [ i - 1 ] ) sum = ar [ i ] ; } j = sum ; n -= 2 ; while ( n -- ) sum = sum + j ; printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 17283}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; scanf ( \"%d\" , & n ) ; long int a [ n ] , c = 0 ; int b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; b [ i ] = 1 ; } for ( i = n - 2 ; i >= 0 ; i -- ) { if ( a [ i ] <= a [ i + 1 ] ) { b [ i ] = b [ i ] + b [ i + 1 ] ; } } for ( i = 0 ; i < n ; i ++ ) { c = c + b [ i ] ; } printf ( \"%ld\n\" , c ) ; } return 0 ; }", "label": 0, "id": 10068}
{"input": "int main ( void ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { unsigned n ; scanf ( \"%u\" , & n ) ; int a [ n ] , j , k = 0 , small ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; small = a [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ j ] < small ) { small = a [ j ] ; k = j ; } } printf ( \"%u\n\" , small * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 6497}
{"input": "int multi ( int a , int b , int g ) { int ch [ 100 ] ; b *= g ; int i , k = 0 , temp , x , y , t , da ; for ( i = 0 ; i < 100 ; i ++ ) ch [ i ] = 0 ; while ( b > 0 ) { i = k ; x = b ; b /= 10 ; temp = 0 ; da = a ; while ( da > 0 ) { y = da ; da /= 10 ; t = x * y + temp ; ch [ i ++ ] += t ; temp = t / 10 + ch [ i - 1 ] / 10 ; if ( ch [ i - 1 ] > 9 ) ch [ i - 1 ] = ch [ i - 1 ] ; } k ++ ; } if ( temp != 0 ) { ch [ i ++ ] = temp ; } int j ; for ( j = i - 1 ; j >= 0 ; j -- ) printf ( \"%d\" , ch [ j ] ) ; } int main ( ) { int t , i , j , m ; int x , y , a , b , min , max ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; a = x , b = y ; min = a < b ? a : b ; max = a > b ? a : b ; int gcd ; if ( min == 1 ) gcd = 1 ; else if ( max % min == 0 ) gcd = min ; else { for ( j = min / 2 ; ; j -- ) { if ( min % j == 0 && max % j == 0 ) { gcd = j ; break ; } } } a = x , b = y ; printf ( \"%d \" , gcd ) ; multi ( a / gcd , b / gcd , gcd ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 22040}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a [ 100001 ] , n , i , j , count = 0 , x = 0 , c = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; ++ i ) { c ++ ; if ( a [ i ] > a [ i + 1 ] && c > 1 ) { count ++ ; c = 1 ; } } if ( c > 1 ) count ++ ; printf ( \"%ld\n\" , n + count ) ; } return 0 ; }", "label": 1, "id": 15083}
{"input": "int main ( ) { int i , j , a , t ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = a - 2 ; i > 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { arr [ i ] [ j ] += max ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 17148}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return 1 ; else return gcd ( b , a % b ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { t -- ; int a , b ; scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 5847}
{"input": "int main ( ) { int t , n , i , count = 0 , ic = 0 ; long long int a [ 1000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; ic = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( i > 0 ) { if ( a [ i ] > a [ i - 1 ] ) { ic ++ ; } else { if ( ic ) { count ++ ; ic = 0 ; } } } } if ( ic ) count ++ ; count = count + n ; printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 3, "id": 4465}
{"input": "long long gcd ( long long a , long long b ) { long long c ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } while ( a % b != 0 ) { c = b ; b = a % b ; a = c ; } return b ; } int main ( ) { long long x , y , a , b ; int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; y = a * b / x ; printf ( \"%lld %lld\n\" , x , y ) ; } return 0 ; }", "label": 1, "id": 23988}
{"input": "long arry [ 100 ] [ 100 ] ; long lineNo ; long getMax ( long cRow , long cCol ) { long row = 0 , col = 0 , sum1 , sum2 ; if ( cRow == lineNo - 2 ) { if ( arry [ cRow + 1 ] [ cCol ] > arry [ cRow + 1 ] [ cCol + 1 ] ) { return arry [ cRow ] [ cCol ] + arry [ cRow + 1 ] [ cCol ] ; } else { return arry [ cRow ] [ cCol ] + arry [ cRow + 1 ] [ cCol + 1 ] ; } } sum1 = getMax ( cRow + 1 , cCol ) ; sum2 = getMax ( cRow + 1 , cCol + 1 ) ; if ( sum1 > sum2 ) return sum1 + arry [ cRow ] [ cCol ] ; else return sum2 + arry [ cRow ] [ cCol ] ; } int main ( ) { long caseNum = 0 , i , row , col ; scanf ( \"%ld\" , & caseNum ) ; for ( i = 0 ; i < caseNum ; i ++ ) { scanf ( \"%ld\" , & lineNo ) ; for ( row = 0 ; row < lineNo ; row ++ ) { for ( col = 0 ; col <= row ; col ++ ) scanf ( \"%ld\" , & arry [ row ] [ col ] ) ; } printf ( \"%ld\n\" , getMax ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 13459}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int m , i , j ; scanf ( \"%d\" , & m ) ; int a [ m ] [ m ] ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = ( m - 2 ) ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4679}
{"input": "int pair ( int c ) { return ( c * ( c + 1 ) ) / 2 ; } int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] , c = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 , j = i + 1 ; i < n && j < n ; j ++ ) { if ( a [ j - 1 ] <= a [ j ] ) continue ; else { c += pair ( j - i ) ; i = j ; } } c += pair ( j - i ) ; printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 0, "id": 25526}
{"input": "int gcd ( int a , int b ) { int temp ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { int a , b , t , G , L ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; G = gcd ( a , b ) ; L = ( a * b ) / G ; printf ( \"%d %d\" , G , L ) ; } return 0 ; }", "label": 1, "id": 4913}
{"input": "int main ( ) { int t ; long int n , sum , a , b , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; sum = 0 ; a = n ; while ( n ) { c = n ; sum = sum * 10 + c ; n = n / 10 ; } b = sum ; printf ( \"%d\n\" , a + b ) ; } return 0 ; }", "label": 1, "id": 5487}
{"input": "int gcd ( long int , long int ) ; int main ( ) { int n , i , g , l ; long int x , y ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld%ld\" , & x , & y ) ; g = gcd ( x , y ) ; l = ( ( x * y ) / g ) ; printf ( \"%d %d\" , g , l ) ; } return 0 ; } int gcd ( long int m , long int n ) { if ( n == 0 ) return m ; else return gcd ( n , m % n ) ; }", "label": 1, "id": 9711}
{"input": "main ( ) { int t , i , j , k = 1 , flag = 0 ; long long int count = 0 , ans ; long int n ; long long int a [ 100001 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } count = 0 ; i = 0 ; while ( i < n - 1 ) { if ( a [ i ] > a [ i + 1 ] ) i ++ ; else { j = i ; k = 0 ; while ( j < n - 1 ) { if ( a [ j ] <= a [ j + 1 ] ) { count ++ ; j ++ ; k ++ ; } else break ; } flag = k ; while ( k -- ) { count = count + k ; } i = i + flag ; } } ans = count + n ; printf ( \"%lld\" , ans ) ; } }", "label": 1, "id": 16152}
{"input": "int main ( ) { long long int ans , t , n , i , m , min ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long int a [ n ] ; scanf ( \"%lld\" , & a [ 1 ] ) ; min = a [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } ans = min * ( n - 1 ) ; printf ( \"\n%lld\" , ans ) ; } return 0 ; }", "label": 1, "id": 8434}
{"input": "int main ( ) { int t , i , j , n ; long long int a , p , s = 100000 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; long long int num [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & num [ j ] ) ; a = num [ j ] ; if ( a < s ) { s = a ; } } p = ( n - 1 ) * s ; printf ( \"%d\n\" , p ) ; } return 0 ; }", "label": 1, "id": 17607}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 23170}
{"input": "unsigned long long int hcf ( unsigned long long int x , unsigned long long int y ) { unsigned long long int rem ; rem = x % y ; if ( rem == 0 ) return y ; else return ( hcf ( y , rem ) ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned long long int x , y , gcd ; scanf ( \"%llu %llu\" , & x , & y ) ; if ( x > y ) gcd = hcf ( x , y ) ; else gcd = hcf ( y , x ) ; printf ( \"%llu %llu\n\" , gcd , ( x / gcd ) * y ) ; } return 0 ; }", "label": 0, "id": 3545}
{"input": "int max1 ( int a , int b ) { return ( a > b ? a : b ) ; } int scan ( ) { int t = 0 ; char c ; c = getchar_unlocked ( ) ; while ( c < '0' || c > '9' ) c = getchar_unlocked ( ) ; while ( c >= '0' && c <= '9' ) { t = ( t << 3 ) + ( t << 1 ) + c - '0' ; c = getchar_unlocked ( ) ; } return ( t ) ; } int main ( ) { int j , n , t , i , k ; int s [ 100 ] [ 100 ] = { 0 } , max , a [ 100 ] [ 100 ] = { 0 } ; t = scan ( ) ; while ( t -- ) { max = 0 ; i = 0 ; n = scan ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = scan ( ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; else if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else { s [ i ] [ j ] = a [ i ] [ j ] + max1 ( s [ i - 1 ] [ j - 1 ] , s [ i - 1 ] [ j ] ) ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s [ n - 1 ] [ i ] > max ) max = s [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 6105}
{"input": "int hcf ( int , int ) ; int main ( ) { int t , a , b , lcm , gcd , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\\t%d\" , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d\\t%d\" , gcd , lcm ) ; } return 0 ; } int hcf ( int a , int b ) { while ( a != b ) { if ( a > b ) { return hcf ( a - b , b ) ; } else { return hcf ( a , b - a ) ; } } return a ; }", "label": 1, "id": 4906}
{"input": "long gcd ( long , long ) ; int main ( ) { long x , y , lcm ; int i , T , hcf ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld %ld\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%ld %c %ld\" , hcf , 32 , lcm ) ; } return 0 ; } long gcd ( long x , long y ) { if ( x == 0 ) { return y ; } while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 1, "id": 21885}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , t , lcm , x , y ; scanf ( \"%d%d\" , & a , & b ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( a * b ) / gcd ; printf ( \"%d%d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 2825}
{"input": "int main ( ) { int t = 0 , n , i , j , a [ 100 ] [ 100 ] = { 0 } , testcase , b [ 1000 ] ; char y ; scanf ( \"%d\" , & testcase ) ; while ( testcase -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } a [ 0 ] [ 0 ] = a [ 0 ] [ 1 ] = a [ 1 ] [ 0 ] = 0 ; for ( i = 0 ; i <= n ; i ++ ) a [ i ] [ 0 ] ; b [ 1 ] = a [ 1 ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) { b [ j ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; a [ i ] [ j ] = b [ j ] ; } else { b [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; a [ i ] [ j ] = b [ j ] ; } } } for ( i = 1 ; i <= n ; i ++ ) { if ( t < b [ i ] ) t = b [ i ] ; } printf ( \"%d\n\" , t ) ; t = 0 ; } return 0 ; }", "label": 3, "id": 189}
{"input": "int main ( ) { long long int T = 0 , a , b , c = 1 ; scanf ( \"%lld\" , & T ) ; while ( T -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; printf ( \"%lld %lld\n\" , c , a * b ) ; } return 0 ; }", "label": 1, "id": 17119}
{"input": "int main ( ) { int t , n , i , k , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } k = 1 ; for ( i = 2 ; i <= n ; i ++ ) { if ( a [ i ] <= a [ k ] ) k = i ; } s = a [ k ] * ( n - 1 ) ; printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 0, "id": 18689}
{"input": "int main ( ) { int i , test , j , gcd , x , temp ; long long int a , b , lcm ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; x = a * b ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x ) / gcd ; printf ( \"%d %d \n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 7201}
{"input": "int main ( void ) { int t , n , i , inner , outer , temp , cost ; char array [ 100001 ] ; scanf ( \" %d\" , & t ) ; while ( t -- ) { scanf ( \" %d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \" %d\" , & array [ i ] ) ; } for ( outer = 0 ; outer < n - 1 ; outer ++ ) { for ( inner = outer ; inner < n ; inner ++ ) { if ( array [ inner ] < array [ outer ] ) { temp = array [ inner ] ; array [ inner ] = array [ outer ] ; array [ outer ] = temp ; } } } int counter = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( array [ i ] > array [ 0 ] ) counter ++ ; } cost = ( counter ) * ( array [ 0 ] ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 21368}
{"input": "int n , max = 0 ; void trian ( int a [ ] [ n ] , int len , int x , int sum ) { sum = sum + a [ len ] [ x ] ; if ( len == n - 1 ) { if ( max < sum ) { max = sum ; } } else { trian ( a , len + 1 , x , sum ) ; trian ( a , len + 1 , x + 1 , sum ) ; } } void main ( ) { int i , k , t , h = 0 ; scanf ( \"%d\" , & k ) ; int c [ k ] ; while ( k ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; t = 0 ; while ( t < n ) { for ( i = 0 ; i <= t ; i ++ ) { scanf ( \"%d\" , & a [ t ] [ i ] ) ; } t ++ ; } max = 0 ; trian ( a , 0 , 0 , 0 ) ; c [ h ] = max ; h ++ ; k -- ; } for ( i = 0 ; i < h ; i ++ ) { if ( i == h - 1 ) printf ( \"%d\" , c [ i ] ) ; else printf ( \"%d\n\" , c [ i ] ) ; } }", "label": 2, "id": 3316}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int f = 1 ; while ( f <= t ) { int k ; scanf ( \"%d\" , & k ) ; int a [ k ] ; int i ; for ( i = 0 ; i < ( k - 1 ) ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int cost , greater ; for ( i = 0 ; i < k ; i ++ ) { if ( i != ( k - 2 ) ) { if ( a [ i ] < a [ i + 1 ] ) greater = a [ i ] ; else greater = a [ i + 1 ] ; } else { if ( a [ i ] < a [ i + 1 ] ) { greater = a [ i ] ; cost = a [ i - 1 ] ; } else { greater = a [ i + 1 ] ; cost = a [ i - 1 ] ; } } } printf ( \"%d\" , cost ) ; f ++ ; } return 0 ; }", "label": 1, "id": 17489}
{"input": "int m [ 101 ] [ 101 ] ; int main ( ) { int n , t , i , j , k , lines ; scanf ( \"%d\n\" , & n ) ; for ( t = 0 ; t < n ; t ++ ) { scanf ( \"%d\n\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) for ( k = 0 ; k <= i ; k ++ ) scanf ( \"%d\" , & m [ i ] [ k ] ) ; for ( i = lines - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) m [ i ] [ j ] += m [ i + 1 ] [ j ] > m [ i + 1 ] [ j + 1 ] ? m [ i + 1 ] [ j ] : m [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , m [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24274}
{"input": "int main ( ) { int t , a [ 2 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a [ 0 ] , & a [ 1 ] ) ; int hcf , i , grt ; if ( a [ 0 ] > a [ 1 ] ) grt = a [ 0 ] ; else grt = a [ 1 ] ; for ( i = 1 ; i <= grt ; i ++ ) { if ( a [ 0 ] % i == 0 && a [ 1 ] % i == 0 ) { hcf = i ; } } printf ( \"%d %d\n\" , hcf , ( a [ 0 ] * a [ 1 ] ) / hcf ) ; } return 0 ; }", "label": 2, "id": 3198}
{"input": "int main ( void ) { int T ; scanf ( \"%d\" , & T ) ; int N ; while ( T -- ) { scanf ( \"%d\" , & N ) ; int i , arr [ 50000 ] ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\\t\" , & arr [ i ] ) ; } int cost = 0 , j ; int min = arr [ 0 ] ; for ( j = 0 ; j < N ; j ++ ) { if ( min > arr [ j + 1 ] ) { min = arr [ j + 1 ] ; cost = cost + arr [ j + 1 ] ; N = N - 1 ; } else { cost = cost + min ; N = N - 1 ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 11924}
{"input": "int main ( ) { int i , j , t , q ; unsigned long int a , b , x , z , hcf , lcm ; hcf = 1 ; lcm = 1 ; scanf ( \"%d\" , & t ) ; for ( q = 0 ; q < t ; q ++ ) { scanf ( \"%lu%lu\" , & a , & b ) ; x = a ; z = b ; if ( a == 0 ) { hcf = b ; } else if ( b == 0 ) { hcf = a ; } else { if ( a > b ) { for ( i = 2 ; i <= b ; i ++ ) { for ( j = 1 ; a % i == 0 && b % i == 0 ; j ++ ) { hcf = hcf * i ; a = a / i ; b = b / i ; } } } else { for ( i = 2 ; i <= a ; i ++ ) { for ( j = 1 ; a % i == 0 && b % i == 0 ; j ++ ) { hcf = hcf * i ; a = a / i ; b = b / i ; } } } } lcm = ( x * z ) / hcf ; printf ( \"%lu %lu\n\" , hcf , lcm ) ; } return 0 ; }", "label": 3, "id": 23876}
{"input": "int l ( int , int ) ; int h ( int , int , int ) ; int main ( ) { int a , b , t , lcm , hcf ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; lcm = l ( a , b ) ; hcf = h ( a , b , lcm ) ; printf ( \"%d %d\n\" , hcf , lcm ) ; } return 0 ; } int l ( int a , int b ) { int lcm ; if ( a > b ) lcm = a ; else lcm = b ; while ( 1 ) { if ( lcm % a == 0 && lcm % b == 0 ) break ; else lcm ++ ; } return lcm ; } int h ( int a , int b , int lcm ) { int hcf ; hcf = a * b / lcm ; return hcf ; }", "label": 2, "id": 7966}
{"input": "int main ( ) { int n , a , b , numerator , denominator , gcd , lcm , remainder ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( a * b ) / gcd ; printf ( \"%d     %d\n\" , gcd , lcm ) ; gcd = 0 ; lcm = 0 ; } return 0 ; }", "label": 1, "id": 5378}
{"input": "int gcd ( int x , int y ) { if ( x % y == 0 ) return y ; else return gcd ( y , x % y ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 7664}
{"input": "int main ( ) { int a ; scanf ( \"%d\" , & a ) ; int count = 0 ; for ( int i = 0 ; i < a ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int lenlist [ 100 ] ; for ( int j = 0 ; j < n + 1 ; j ++ ) { count = 0 ; for ( int k = 0 ; k < j ; k ++ ) { int var ; scanf ( \"%d\" , & var ) ; lenlist [ k ] += var ; } } count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( lenlist [ j ] > count ) { count = lenlist [ j ] ; } } for ( int j = 0 ; j < n ; j ++ ) { lenlist [ j ] = 0 ; } printf ( \"%d\" , count + 1 ) ; count = 0 ; } return 0 ; }", "label": 1, "id": 8563}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) arr [ i ] [ j ] += ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16123}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , x , y , t ; scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } int gcd , lcm ; gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 15304}
{"input": "int main ( ) { int t , n , i , j , k = 0 , a [ 100000 ] ; long long ans ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { if ( j == 0 ) ans = 1 ; else { if ( a [ j ] < a [ j - 1 ] ) k = j ; ans += ( 1 + j - k ) ; } } printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 9963}
{"input": "struct tree { struct tree * l ; struct tree * r ; int value ; int level ; struct tree * right ; } ; int trav ( struct tree * node , int sum , int max , int final ) { sum += node -> value ; if ( node -> level != final ) { max = trav ( node -> l , sum , max , final ) ; max = trav ( node -> r , sum , max , final ) ; return max ; } else { if ( sum > max ) return sum ; else return max ; } } int main ( void ) { int t ; int nol ; int i ; struct tree * head ; int j ; int k ; int tempval ; struct tree * node ; int haselement = 0 ; struct tree * upperhead ; struct tree * upperheadc ; int max = 0 ; int sum = 0 ; struct tree * temp2 ; struct tree * lastnode ; char dump ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & nol ) ; haselement = 0 ; max = 0 ; sum = 0 ; for ( j = 1 ; j <= nol ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & tempval ) ; if ( haselement == 0 ) { head = ( struct tree * ) malloc ( sizeof ( struct tree ) ) ; head -> value = tempval ; head -> l = head -> r = head -> right = null ; head -> level = j ; upperheadc = head ; haselement = 1 ; } else { node = ( struct tree * ) ( malloc ( sizeof ( struct tree ) ) ) ; node -> value = tempval ; node -> l = node -> r = node -> right = null ; node -> level = j ; if ( k == 1 ) { upperheadc = node ; lastnode = node ; } else { lastnode -> right = node ; lastnode = node ; } while ( upperhead != null ) { if ( ( upperhead -> l ) == null ) { upperhead -> l = node ; break ; } else if ( ( upperhead -> r ) == null ) { upperhead -> r = node ; upperhead = upperhead -> right ; } } } } upperhead = upperheadc ; } printf ( \"%d\n\" , trav ( head , sum , max , nol ) ) ; } }", "label": 2, "id": 11661}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; long int a , b ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; long int t1 = a , t2 = b ; while ( b != 0 ) { int r = a % b ; a = b ; b = r ; } printf ( \"%ld \" , a ) ; t1 = t1 * t2 / a ; printf ( \"%ld\n\" , t1 ) ; } return 0 ; }", "label": 0, "id": 18672}
{"input": "int array [ 100 ] [ 100 ] , memoization [ 100 ] [ 100 ] ; int length ; int path ( int row , int column ) { if ( row == length - 1 || column == length - 1 ) { return array [ row ] [ column ] ; } if ( path ( row + 1 , column ) > path ( row + 1 , column + 1 ) ) { if ( memoization [ row ] [ column ] == - 1 ) memoization [ row ] [ column ] = path ( row + 1 , column ) + array [ row ] [ column ] ; return memoization [ row ] [ column ] ; } else { if ( memoization [ row ] [ column ] == - 1 ) memoization [ row ] [ column ] = path ( row + 1 , column + 1 ) + array [ row ] [ column ] ; return memoization [ row ] [ column ] ; } } int main ( void ) { int i , j , t , r ; scanf ( \"%d\" , & t ) ; for ( r = 0 ; r < t ; r ++ ) { scanf ( \"%d\" , & length ) ; for ( i = 1 ; i <= length ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { memoization [ i - 1 ] [ j - 1 ] = - 1 ; } } for ( i = 1 ; i <= length ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & array [ i - 1 ] [ j - 1 ] ) ; } } printf ( \"%d\n\" , path ( 0 , 0 ) ) ; for ( i = 1 ; i <= length ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { array [ i - 1 ] [ j - 1 ] = 0 ; memoization [ i - 1 ] [ j - 1 ] = - 1 ; } } } return 0 ; }", "label": 2, "id": 1358}
{"input": "int main ( void ) { int test ; long long int a , b , i ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; long long int hcf ; for ( i = min ( a , b ) ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; break ; } } long long int lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; }", "label": 2, "id": 9432}
{"input": "int main ( ) { int triangle [ 1000 ] [ 1000 ] , t , n , i , j , sum1 , sum2 , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & triangle [ i ] [ j ] ) ; if ( i ) { if ( j == i ) sum2 = 0 ; else sum2 = triangle [ i ] [ j ] + triangle [ i - 1 ] [ j ] ; if ( j ) { sum1 = triangle [ i ] [ j ] + triangle [ i - 1 ] [ j - 1 ] ; } else sum1 = 0 ; triangle [ i ] [ j ] = sum1 > sum2 ? sum1 : sum2 ; } } } max = triangle [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) max = max < triangle [ n - 1 ] [ i ] ? triangle [ n - 1 ] [ i ] : max ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 5598}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] ; int n , i , j , p , t , k , max ; scanf ( \"%d\" , & t ) ; for ( k = 1 ; k <= t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) printf ( \"%d\\t\" , a [ i ] [ j ] ) ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( j > 0 && ( j != i ) ) a [ i ] [ j ] = max ( ( a [ i - 1 ] [ j ] ) , ( a [ i - 1 ] [ j - 1 ] ) ) + a [ i ] [ j ] ; else if ( j == i ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } max = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( ( a [ n - 1 ] [ j ] ) > max ) max = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return ( 0 ) ; }", "label": 1, "id": 6650}
{"input": "void print ( int x , int y ) { long long lcm , hcf ; if ( x > y ) SWAP ( x , y ) ; for ( int a = x ; a >= 1 ; a -- ) { if ( y % a == 0 ) { hcf = a ; break ; } } lcm = x * y / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y ; scanf ( \"%d %d\" , & x , & y ) ; print ( x , y ) ; } }", "label": 1, "id": 13417}
{"input": "int main ( ) { int i , arr [ 101 ] , n , j = 0 , sum = 0 , k , flag = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; k <= i ; k ++ ) { scanf ( \"%d\" , & arr [ k ] ) ; } if ( flag == 1 ) { j = ( arr [ j ] > arr [ j + 1 ] ? ( ( arr [ j ] > arr [ j + 2 ] ? j : j + 2 ) ) : ( ( arr [ j + 1 ] > arr [ j + 2 ] ) ? j + 1 : j + 2 ) ) ; sum = sum + arr [ j ] ; } else { if ( i == 0 ) { sum = sum + arr [ j ] ; } else if ( arr [ j + 1 ] > arr [ j ] ) { j ++ ; sum = sum + arr [ j ] ; flag = 0 ; } else if ( arr [ j + 1 ] < arr [ j ] ) { sum = sum + arr [ j ] ; flag = 0 ; } else { sum = sum + arr [ j ] ; flag = 1 ; } } } printf ( \"%d\" , sum ) ; return 0 ; }", "label": 3, "id": 21730}
{"input": "int num [ 100 ] [ 100 ] ; int l ; int max ; void find ( int i , int j , int sum ) { sum = sum + num [ i ] [ j ] ; if ( i == l ) { if ( sum >= max ) max = sum ; return ; } find ( i + 1 , j + 1 , sum ) ; find ( i + 1 , j , sum ) ; return ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & l ) ; for ( i = 1 ; i <= l ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & num [ i ] [ j ] ) ; max = 0 ; find ( 1 , 1 , 0 ) ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 19369}
{"input": "long gcd ( long , long ) ; int main ( ) { int T , i , hcf ; long x , y , lcm ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld%ld\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %ld\n\" , hcf , lcm ) ; } return 0 ; } long gcd ( long x , long y ) { if ( x == 0 ) { return y ; } while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 0, "id": 2863}
{"input": "int n , i , j , k , l , T , n , a , b , c ; int main ( ) { scanf ( \"%d\" , & T ) ; int M [ T ] [ 2 ] ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; c = b ; while ( a % c != 0 || b % c != 0 ) { if ( a % c != 0 ) { c = a % c ; } else { c = b % c ; } } M [ i ] [ 0 ] = c ; M [ i ] [ 1 ] = a * b / c ; } for ( l = 0 ; l < T ; l ++ ) { printf ( \"%d %d\n\" , M [ l ] [ 0 ] , M [ l ] [ 1 ] ) ; } }", "label": 1, "id": 14569}
{"input": "int main ( ) { int t , row , i , j , k , l , max , count = 0 , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , t ) ; while ( t -- ) { scanf ( \"%d\" , row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , arr [ i ] [ j ] ) ; } } count = count + arr [ 0 ] [ 0 ] ; for ( i = 1 ; i < row ; i ++ ) { max = arr [ i ] [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > max ) max = arr [ i ] [ j ] ; } count = count + max ; } printf ( \"%d\" , count ) ; } return 0 ; }", "label": 3, "id": 17536}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int t , i , n , j , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & i , & j ) ; n = ( i > j ) ? gcd ( i , j ) : gcd ( j , i ) ; printf ( \"%d %d\n\" , n , ( i / n ) * j ) ; } return 0 ; }", "label": 1, "id": 17385}
{"input": "int main ( ) { int a [ 4 ] ; int t , n , s , i ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; s = ( n * ( n + 1 ) ) / 2 ; for ( i = 0 ; i < s ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; s = a [ s - n ] + a [ s - n + 1 ] + a [ s - n + 1 - n ] ; printf ( \"%d\n\" , s ) ; t -- ; } return 0 ; }", "label": 3, "id": 9105}
{"input": "main ( ) { int a , b , num1 , num2 , l , T , rem ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; a = num1 ; b = num2 ; while ( b != 0 ) { rem = a % b ; a = b ; b = rem ; } l = ( num1 * num2 ) / a ; printf ( \"%d %d\n\" , a , l ) ; } }", "label": 1, "id": 8685}
{"input": "int main ( ) { int numOfLines ; int triHeight ; int triangles [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & numOfLines ) ; while ( numOfLines > 0 ) { scanf ( \"%d\" , & triHeight ) ; int i = 0 ; int j ; while ( i < triHeight ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & triangles [ i ] [ j ] ) ; } i ++ ; } triHeight -= 2 ; while ( triHeight >= 0 ) { for ( j = 0 ; j <= triHeight ; j ++ ) { int currentNumber = triangles [ triHeight ] [ j ] ; int leftBelow = triangles [ triHeight + 1 ] [ j ] + currentNumber ; int rightBelow = triangles [ triHeight + 1 ] [ j + 1 ] + currentNumber ; triangles [ triHeight ] [ j ] = leftBelow > rightBelow ? leftBelow : rightBelow ; } triHeight -- ; } printf ( \"%d\" , triangles [ 0 ] [ 0 ] ) ; numOfLines -- ; } return 0 ; }", "label": 1, "id": 9314}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } void main ( ) { int arr [ 100 ] [ 100 ] , i , k , j , t , n ; n = fastread ( ) ; for ( k = 0 ; k < n ; k ++ ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 8317}
{"input": "int range , r ; int A [ 5050 ] ; int max_path ( ) ; int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & r ) ; range = cal ( r ) ; for ( i = 0 ; i < range ; ++ i ) scanf ( \"%d\" , ( A + i ) ) ; printf ( \"\n%d\" , max_path ( ) ) ; } return 0 ; } int max_path ( ) { int i = 1 , j = 0 , k = 1 , delta = 1 , max , pos ; while ( i < r ) { j = 0 ; A [ k ] += A [ k - delta ] ; ++ j ; ++ k ; while ( j < i ) { pos = k - delta ; if ( A [ pos ] > A [ pos - 1 ] ) max = pos ; else max = pos - 1 ; A [ k ] += A [ max ] ; ++ k ; ++ j ; } A [ k ] += A [ k - delta - 1 ] ; ++ k ; ++ delta ; ++ i ; } -- i ; k = cal ( i ) ; max = A [ k ] ; for ( ; k < range ; ++ k ) { if ( A [ k ] > max ) max = A [ k ] ; } return max ; }", "label": 0, "id": 26351}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , d , g , l ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { d = a ; a = b ; b = d ; } g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; } int gcd ( int a , int b ) { int c = 1 ; while ( c > 0 ) { c = b % a ; b = a ; a = c ; } return b ; }", "label": 1, "id": 23811}
{"input": "int main ( void ) { int t , n ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { int i , min , cost , n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } if ( a [ 0 ] < a [ 1 ] ) min = a [ 0 ] ; else min = a [ 1 ] ; cost = min ; for ( i = 2 ; i < n ; i ++ ) { if ( min < a [ i ] ) { cost = cost + min ; } else { min = a [ i ] ; cost = cost + min ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 11629}
{"input": "int main ( ) { int t , n , b , r , a [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { b = 0 ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & r ) ; b += r ; } a [ i ] = b ; } int max = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 1, "id": 12249}
{"input": "int main ( int argc , char const * argv [ ] ) { int t ; scanf ( \"%d\" , & t ) ; long int sum ; long int min ; int n ; long int k ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%ld\" , & k ) ; min = k ; sum = k ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%ld\" , & k ) ; if ( min > k ) min = k ; sum += k ; } printf ( \"%ld\n\" , sum - min ) ; } return 0 ; }", "label": 1, "id": 15369}
{"input": "int main ( ) { int t , c , n , i , j ; long long int a [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; c = n ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = i ; j < n - 1 ; j ++ ) if ( a [ j ] <= a [ j + 1 ] ) c ++ ; else break ; printf ( \"%d\n\" , c ) ; } }", "label": 0, "id": 2978}
{"input": "int main ( int argc , char * argv [ ] ) { int t , i , j , x , n , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , s [ n ] [ n ] , valid [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; valid [ i ] [ j ] = 1 ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { x = 0 ; if ( i > 0 && j > 0 ) x = s [ i - 1 ] [ j - 1 ] ; if ( i > 0 && x < s [ i - 1 ] [ j ] && valid [ i - 1 ] [ j ] == 1 ) x = s [ i - 1 ] [ j ] ; s [ i ] [ j ] = a [ i ] [ j ] + x ; } } max = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( s [ i ] [ j ] > max ) max = s [ i ] [ j ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 18939}
{"input": "int main ( ) { int t , a , b , lcm , gcd ; scanf ( \"%i\" , & t ) ; while ( t -- ) { scanf ( \"%i%i\" , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } lcm = b ; while ( lcm % a != 0 ) lcm += b ; gcd = a ; while ( b % gcd != 0 || a % gcd != 0 ) gcd -- ; printf ( \"%i %i\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 11893}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T ) { T -- ; int n , i , j ; scanf ( \"%d\" , & n ) ; int * input [ n ] , ans [ 100 ] , sum ; for ( i = 0 ; i < 100 ; i ++ ) ans [ i ] = 0 ; for ( i = 0 ; i < n ; i ++ ) input [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & input [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { if ( input [ i + 1 ] [ j ] > input [ i + 1 ] [ j + 1 ] ) sum = input [ i + 1 ] [ j ] ; else sum = input [ i + 1 ] [ j + 1 ] ; input [ i ] [ j ] = input [ i ] [ j ] + sum ; } } printf ( \"%d\n\" , input [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9464}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == 0 ) { return a ; } else if ( a == 0 ) { return b ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 1 ; i <= t ; i ++ ) { long long int a , b ; scanf ( \"%lld%lld\" , & a , & b ) ; long long int r = gcd ( a , b ) ; long long int lcm = ( a * b ) / r ; printf ( \"%lld %lld\n\" , r , lcm ) ; } }", "label": 0, "id": 20281}
{"input": "void f ( int a [ ] [ 3 ] ) { static int i ; int j = 0 ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } i ++ ; } int main ( ) { int n = 0 ; int i = 0 ; int alw ; int j = 0 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { alw = 0 ; scanf ( \"%d\" , & alw ) ; int a [ alw ] [ alw ] ; for ( i = 0 ; i < alw ; i ++ ) { for ( j = 0 ; j < alw ; j ++ ) { a [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < alw ; i ++ ) { f ( a ) ; } i = 0 ; for ( i = alw - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { a [ i - 1 ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + 1 ] ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 6909}
{"input": "long long int GCD ( long long int a , long long int b ) { if ( b == 0 ) return a ; else GCD ( b , a % b ) ; } int main ( ) { long long int a , c , d , l ; scanf ( \"%lld\" , & a ) ; while ( a -- ) { scanf ( \"%lld%lld\" , & c , & d ) ; l = GCD ( c , d ) ; a = ( c * d ) / ( GCD ( c , d ) ) ; printf ( \"%lld %lld\n\" , l , a ) ; } return 0 ; }", "label": 2, "id": 2120}
{"input": "int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a , j , b , lcm = 0 , gcd = 1 ; scanf ( \"%d %d\" , & a , & b ) ; int x = a ; if ( b < a ) { x = b ; } for ( j = 1 ; j < x ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 20118}
{"input": "int main ( ) { int i = 0 , j = 0 , t , b , l = 0 , n = 0 , m , a [ 99 ] ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d\" , & m ) ; if ( m > 100 ) { break ; } for ( j = 0 ; j < m ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = m - 1 , b = 0 ; j > 0 ; j -- ) { for ( l = 0 ; a [ j ] != 0 ; ) { n = a [ j ] ; a [ j ] = a [ j ] / 10 ; if ( l < n ) { l = n ; } } b = b + l ; } printf ( \"%d\" , b ) ; } return 0 ; }", "label": 1, "id": 14364}
{"input": "int main ( ) { int n , i , j , k , s , a [ 100 ] [ 100 ] , tmp , ac ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { ac = 0 ; scanf ( \"%d\" , & s ) ; for ( j = 0 ; j < s ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } if ( k == 0 && j == 0 ) { ac = a [ 0 ] [ 0 ] ; } for ( k = 1 ; k <= j ; k ++ ) { if ( a [ j ] [ k - 1 ] > a [ j ] [ k ] ) { tmp = a [ j ] [ k - 1 ] ; a [ j ] [ k - 1 ] = a [ j ] [ k ] ; a [ j ] [ k ] = tmp ; } if ( k == j ) { ac = ac + a [ j ] [ k ] ; } } } printf ( \"%d \n\" , ac ) ; } return 0 ; }", "label": 1, "id": 18119}
{"input": "int main ( ) { long long n , i , num1 , num2 , gcd , lcm , rem , large , small ; scanf ( \"%I64d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%I64d %I64d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { large = num1 ; small = num2 ; } else { large = num2 ; small = num1 ; } rem = large % small ; while ( rem != 0 ) { large = small ; small = rem ; rem = large % small ; } gcd = small ; lcm = num1 * num2 / gcd ; printf ( \"%I64d \" , gcd ) ; printf ( \"%I64d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 21797}
{"input": "long long int a [ 200 ] [ 200 ] ; long long int f ( int i , int j ) { long long int max ; if ( a [ i ] [ j ] == - 1 ) return 0 ; else { max = a [ i ] [ j ] + MAX ( f ( i + 1 , j ) , f ( i + 1 , j + 1 ) ) ; } return max ; } int main ( ) { long long int i , ii , j , k , l ; scanf ( \"%lld\" , & i ) ; while ( i -- ) { scanf ( \"%lld\" , & k ) ; for ( j = 0 ; j < k ; j ++ ) { for ( l = 0 ; l <= j ; l ++ ) scanf ( \"%lld\" , & a [ j ] [ l ] ) ; } for ( ii = 0 ; ii < l + 1 ; ii ++ ) a [ j ] [ ii ] = - 1 ; printf ( \"%lld\n\" , f ( 0 , 0 ) ) ; } return 0 ; }", "label": 2, "id": 9717}
{"input": "int main ( ) { int t ; long int n , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100002 ; scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 21058}
{"input": "int main ( ) { int t , n , j , k , x ; scanf ( \"%d\" , & t ) ; long int a [ t ] ; int i ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; long int b [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & b [ j ] ) ; for ( j = 0 ; j < 1 ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { if ( b [ k ] < b [ j ] ) { x = b [ k ] ; b [ k ] = b [ j ] ; b [ j ] = x ; } } } a [ i ] = ( n - 1 ) * x ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%ld\n\" , a [ i ] ) ; return 0 ; }", "label": 0, "id": 17763}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; long long out [ t ] ; for ( int i = 0 ; i < t ; i ++ ) { int inp ; scanf ( \"%d\" , & inp ) ; long long a [ inp ] [ inp ] ; for ( int j = 0 ; j < inp ; j ++ ) { for ( int k = 0 ; k <= j ; k ++ ) { scanf ( \"%lld\" , & a [ j ] [ k ] ) ; } } for ( int j = inp - 2 ; j >= 0 ; j -- ) { for ( int k = 0 ; k < inp ; k ++ ) { a [ j ] [ k ] += ( a [ j + 1 ] [ k ] > a [ j + 1 ] [ k + 1 ] ) ? a [ j + 1 ] [ k ] : a [ j + 1 ] [ k + 1 ] ; } } out [ i ] = a [ 0 ] [ 0 ] ; } for ( int i = 0 ; i < t ; i ++ ) printf ( \"%lld\n\" , out [ i ] ) ; return 1 ; }", "label": 3, "id": 12890}
{"input": "int main ( ) { int n , a , b , i , j , min , max , gcd , t , lcm ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { min = a ; max = b ; } for ( j = min ; j > 0 ; j -- ) { if ( max % j == 0 ) gcd = j ; else continue ; } for ( j = min ; j <= max ; j ++ ) { t = min * j ; if ( t % min == 0 && t % max == 0 ) lcm = t ; else continue ; } printf ( \"%d\n%d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 17764}
{"input": "int main ( ) { int t , n , i , j , a [ 100 ] [ 100 ] , c [ 100 ] [ 100 ] , m [ 1000 ] , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } c [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) c [ i ] [ j ] = c [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( j == i ) c [ i ] [ j ] = c [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else c [ i ] [ j ] = a [ i ] [ j ] + ( ( c [ i - 1 ] [ j ] > c [ i - 1 ] [ j - 1 ] ) ? c [ i - 1 ] [ j ] : c [ i - 1 ] [ j - 1 ] ) ; } } m [ k ] = c [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) m [ k ] = ( ( m [ k ] > c [ n - 1 ] [ i ] ) ? m [ k ] : c [ n - 1 ] [ i ] ) ; printf ( \"%d\n\" , m [ k ] ) ; } return 0 ; }", "label": 0, "id": 23235}
{"input": "int main ( ) { long int i , j , n , sub , t , fact , k ; long int a [ 100001 ] ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { sub = 0 ; fact = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; i = 0 ; while ( i < n - 1 ) { j = i ; while ( j < n - 1 && a [ j ] <= a [ j + 1 ] ) j += 1 ; for ( k = 1 ; k <= ( j - i ) ; k ++ ) { fact = fact + k ; } sub = sub + fact ; fact = 0 ; i = j + 1 ; } sub += n ; printf ( \"%ld\n\" , sub ) ; } return 0 ; }", "label": 0, "id": 1633}
{"input": "char a [ 105 ] ; int main ( ) { short int n ; char b , i ; long s ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d\" , & b ) ; while ( b -- ) { if ( b > 0 ) { scanf ( \"%d\" , & a [ i ] ) ; i ++ ; } else { fflush ( stdin ) ; a [ i ] = - 2 ; scanf ( \"%d%d\" , & a [ i + 1 ] , & a [ i + 2 ] ) ; } } a [ i + 3 ] = - 1 ; i = 0 , s = 0 ; while ( a [ i ] != - 1 ) { if ( a [ i ] != - 2 ) s = s + a [ i ] ; else { if ( a [ i + 1 ] > a [ i + 2 ] ) s = s + a [ i + 1 ] ; else s = s + a [ i + 2 ] ; i += 2 ; } i ++ ; } printf ( \"%ld\" , s ) ; n -- ; } return 0 ; }", "label": 3, "id": 20666}
{"input": "int main ( ) { int i , j , n , t , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = i ; j > 1 ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - 1 ] ? a [ i ] [ j ] : a [ i ] [ j - 1 ] ; a [ i - 1 ] [ j - 1 ] = a [ i - 1 ] [ j - 1 ] + max ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 20480}
{"input": "int main ( ) { long long int lines , no , i , j , n , sum = 0 ; scanf ( \"%lld\" , & n ) ; while ( n -- ) { scanf ( \"%lld\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%lld\" , & no ) ; sum = sum + no ; } } printf ( \"%lld\n\" , sum / 2 ) ; } return 0 ; }", "label": 1, "id": 4825}
{"input": "int A [ 1000 ] [ 1000 ] , length , sum [ 1000 ] [ 1000 ] ; main ( ) { int N , i , n1 , j , k ; scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & n1 ) ; for ( j = 1 ; j <= n1 ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { scanf ( \"%d\" , & A [ j - 1 ] [ k ] ) ; } } length = n1 ; for ( k = 0 ; k < n1 ; k ++ ) sum [ n1 - 1 ] [ k ] = A [ n1 - 1 ] [ k ] ; for ( j = n1 - 1 ; j >= 0 ; j -- ) { for ( k = 0 ; k < j + 1 ; k ++ ) { if ( sum [ j + 1 ] [ k ] > sum [ j + 1 ] [ k + 1 ] ) sum [ j ] [ k ] = A [ j ] [ k ] + sum [ j + 1 ] [ k ] ; else sum [ j ] [ k ] = A [ j ] [ k ] + sum [ j + 1 ] [ k + 1 ] ; } } printf ( \"%d\n\" , sum [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 26873}
{"input": "int main ( ) { int t , i , j , n , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 16582}
{"input": "int arr [ 100 ] [ 100 ] ; void sum ( int * p , int length1 , int * q , int a ) ; int main ( ) { int i , j , k , m , n ; scanf ( \"%d\" , & k ) ; while ( k -- ) { scanf ( \"%d\" , & j ) ; for ( i = 0 ; i < j ; i ++ ) { for ( m = 0 ; m <= i ; m ++ ) { scanf ( \"%d\" , & arr [ i ] [ m ] ) ; } } sum ( arr [ j - 2 ] , j - 1 , arr [ j - 1 ] , j - 2 ) ; printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; } void sum ( int * p , int length1 , int * q , int a ) { int i = 0 , sum1 , sum2 ; for ( i = 0 ; i < length1 ; i ++ ) { sum1 = p [ i ] + q [ i ] ; sum2 = p [ i ] + q [ i + 1 ] ; if ( sum1 >= sum2 ) { p [ i ] = sum1 ; } else { p [ i ] = sum2 ; } } if ( a == 0 ) { return ; } else { q = p ; a = a - 1 ; p = arr [ a ] ; length1 = length1 - 1 ; sum ( p , length1 , q , a ) ; } }", "label": 0, "id": 7787}
{"input": "int gcd ( int a , int b ) { if ( b != 0 ) return gcd ( b , a % b ) ; else return a ; } int main ( ) { int a , b , i , j , g , l , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; j = gcd ( a , b ) ; l = ( a * b ) / j ; printf ( \"%d %d\n\" , j , l ) ; } return 0 ; }", "label": 1, "id": 25003}
{"input": "int n ; int sum ( int a [ 100 ] [ 100 ] , int i , int j , int b [ 100 ] [ 100 ] ) { int s ; if ( i > n ) return 0 ; if ( b [ i ] [ j ] != 0 ) return b [ i ] [ j ] ; int s1 = sum ( a , i + 1 , j , b ) ; int s2 = sum ( a , i + 1 , j + 1 , b ) ; if ( s1 > s2 ) { s = s1 + a [ i ] [ j ] ; } else { s = s2 + a [ i ] [ j ] ; } b [ i ] [ j ] = s ; return s ; } int main ( ) { int a [ 100 ] [ 100 ] , i , j , no , t , b [ 100 ] [ 100 ] ; scanf ( \"%d\n\" , & no ) ; for ( t = 0 ; t < no ; t ++ ) { scanf ( \"%d\n\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d \" , & a [ i ] [ j ] ) ; } scanf ( \"\n\" ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { b [ i ] [ j ] = 0 ; } } int ans = sum ( a , 0 , 0 , b ) ; printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 19265}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , a [ 100000 ] , b [ 100000 ] ; scanf ( \"%d\" , & n ) ; int i , j , k , count = 0 ; b [ 0 ] = 1 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] <= a [ i ] ) b [ i ] = b [ i - 1 ] + 1 ; else b [ i ] = 1 ; } long long int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum += b [ i ] ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 13777}
{"input": "main ( ) { int t , tc ; long long int a , b , hcf , lcm ; scanf ( \"%d\" , & t ) ; for ( tc = 1 ; tc <= t ; tc ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = a * b / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } return 0 ; } int gcd ( long long int x , long long int y ) { if ( y == 0 ) return x ; else if ( x % y == 0 ) return y ; else return gcd ( y , x % y ) ; }", "label": 0, "id": 3179}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int num1 , num2 , i , min , max , gcd , lcm , temp ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { min = num2 ; max = num1 ; } while ( min != 0 ) { temp = min ; min = max % temp ; max = temp ; } lcm = num1 * num2 / max ; printf ( \"%d %d\n\" , max , lcm ) ; } return 0 ; }", "label": 1, "id": 22229}
{"input": "void merge ( int arr [ ] , int low , int mid , int high ) { int i , m , k , l , temp [ 100 ] ; l = low ; i = low ; m = mid + 1 ; while ( ( l <= mid ) && ( m <= high ) ) { if ( arr [ l ] <= arr [ m ] ) { temp [ i ] = arr [ l ] ; l ++ ; } else { temp [ i ] = arr [ m ] ; m ++ ; } i ++ ; } if ( l > mid ) { for ( k = m ; k <= high ; k ++ ) { temp [ i ] = arr [ k ] ; i ++ ; } } else { for ( k = l ; k <= mid ; k ++ ) { temp [ i ] = arr [ k ] ; i ++ ; } } for ( k = low ; k <= high ; k ++ ) { arr [ k ] = temp [ k ] ; } } void merge_sort ( int a [ ] , int l , int h ) { int mid ; if ( l < h ) { mid = ( l + h ) / 2 ; merge_sort ( a , l , mid ) ; merge_sort ( a , mid + 1 , h ) ; merge ( a , l , mid , h ) ; } } int main ( ) { int a [ 100 ] , n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } if ( n > 1 ) merge_sort ( a , 0 , n - 1 ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , a [ i ] ) ; } return 0 ; }", "label": 3, "id": 23742}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; printf ( \"\n\" ) ; } }", "label": 2, "id": 26129}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] , i , j , m = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j > 0 && i > 1 ) { a [ i ] [ j ] = ( ( a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ) > ( a [ i ] [ j ] + a [ i - 1 ] [ j ] ) ) ? ( a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ) : ( a [ i ] [ j ] + a [ i - 1 ] [ j ] ) ; } if ( i == ( n - 1 ) ) { if ( m < a [ i ] [ j ] ) m = a [ i ] [ j ] ; } } if ( i > 0 ) { a [ i ] [ 0 ] = a [ i ] [ 0 ] + a [ i - 1 ] [ 0 ] ; a [ i ] [ i ] = a [ i ] [ i ] + a [ i - 1 ] [ i - 1 ] ; } } printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 1, "id": 3461}
{"input": "int fun1 ( ) { int i , j , size ; int * * array ; int result = 0 ; scanf ( \"%d\" , & size ) ; array = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( i = 0 ; i < size ; i ++ ) { array [ i ] = ( int * ) malloc ( size * sizeof ( int ) ) ; } for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d \" , & array [ i ] [ j ] ) ; } for ( i = ( size - 2 ) ; i > - 1 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( array [ i + 1 ] [ j ] > array [ i + 1 ] [ j + 1 ] ) array [ i ] [ j ] += array [ i + 1 ] [ j ] ; else array [ i ] [ j ] += array [ i + 1 ] [ j + 1 ] ; } } return array [ 0 ] [ 0 ] ; } int main ( ) { int test , result ; scanf ( \"%d\" , & test ) ; while ( test ) { result = fun1 ( ) ; printf ( \"%d\n\" , result ) ; test -- ; } return 0 ; }", "label": 0, "id": 2575}
{"input": "int main ( void ) { int tc , sum = 0 , c = 0 , num , a [ 100 ] , j , i ; scanf ( \"%d\" , & tc ) ; while ( tc > 0 ) { scanf ( \"%d\" , & num ) ; for ( i = 1 ; i <= num ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; if ( i == 1 ) sum = sum + a [ 0 ] ; else { if ( a [ c ] < a [ c + 1 ] ) c = c + 1 ; sum = sum + a [ c ] ; } } printf ( \"\n%d\" , sum ) ; tc -- ; sum = 0 ; c = 0 ; } return 0 ; }", "label": 1, "id": 1584}
{"input": "int main ( ) { int ara [ 50000 ] , i , j , a , t , min , c ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( a < 2 || a > 50000 ) break ; else { for ( j = 0 ; j < a ; j ++ ) { scanf ( \"%d\" , & ara [ j ] ) ; } min = ara [ 0 ] ; for ( j = 0 ; j < a ; j ++ ) { if ( ara [ j ] <= min ) c = ara [ j ] ; } printf ( \"%d\n\" , c * a - c ) ; } } }", "label": 1, "id": 16964}
{"input": "int getLargestSum ( ) ; int main ( ) { int i = 0 ; char ctc [ 8 ] = { 0 } ; int testcases = 0 ; int lsum = 0 ; fgets ( ctc , sizeof ( ctc ) , stdin ) ; testcases = atoi ( ctc ) ; for ( i = 0 ; i < testcases ; i ++ ) { lsum = getLargestSum ( ) ; printf ( \"%d\n\" , lsum ) ; } return 0 ; } int getLargestSum ( ) { int i , j ; int rowcount = 0 ; char cinput [ 512 ] = { 0 } ; char * ptok = 0 ; int tdata [ 2 ] [ MAX_ROWS ] ; int * prvrow = tdata [ 0 ] ; int * currow = tdata [ 1 ] ; int * tmprow = 0 ; int max ; fgets ( cinput , sizeof ( cinput ) , stdin ) ; rowcount = atoi ( cinput ) ; if ( rowcount < 1 ) { return 0 ; } fgets ( cinput , sizeof ( cinput ) , stdin ) ; currow [ 0 ] = atoi ( cinput ) ; if ( 1 == rowcount ) { return currow [ 0 ] ; } for ( i = 1 ; i < rowcount ; i ++ ) { tmprow = currow ; currow = prvrow ; prvrow = tmprow ; fgets ( cinput , sizeof ( cinput ) , stdin ) ; ptok = strtok ( cinput , \" \" ) ; for ( j = 0 ; j <= i ; j ++ ) { currow [ j ] = atoi ( ptok ) ; ptok = strtok ( NULL , \" \" ) ; } currow [ 0 ] += prvrow [ 0 ] ; for ( j = 1 ; j <= i ; j ++ ) { if ( j == i ) { currow [ j ] += prvrow [ j - 1 ] ; } else if ( prvrow [ j ] > prvrow [ j - 1 ] ) { currow [ j ] += prvrow [ j ] ; } else { currow [ j ] += prvrow [ j - 1 ] ; } } } max = 0 ; for ( j = 0 ; j < rowcount ; j ++ ) { if ( max < currow [ j ] ) { max = currow [ j ] ; } } return max ; }", "label": 0, "id": 19822}
{"input": "int main ( ) { int t ; int i , j ; int curr , bel , belrt ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int level ; scanf ( \"%d\" , & level ) ; int arr [ level ] [ level ] ; for ( i = 0 ; i < level ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = level - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { curr = arr [ i ] [ j ] ; bel = arr [ i + 1 ] [ j ] + curr ; belrt = arr [ i + 1 ] [ j + 1 ] + curr ; curr = bel >= belrt ? bel : belrt ; arr [ i ] [ j ] = curr ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 172}
{"input": "void main ( ) { int t , i , j , n , temp , a [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } } printf ( \"%d\n\" , a [ 0 ] ) ; } }", "label": 3, "id": 26918}
{"input": "int GCD ( long int x , long int y ) { if ( x == 0 || y == 0 ) return 0 ; else if ( x == y ) return x ; else { long int z = x % y ; if ( z == 0 ) return ( y ) ; else return ( GCD ( y , z ) ) ; } } int LCM ( long int x , long int y ) { long int temp = GCD ( x , y ) ; long int z = ( x * y ) / temp ; return ( z ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; long int gcd = GCD ( a , b ) ; long int lcm = LCM ( a , b ) ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 250}
{"input": "int main ( void ) { int a , b , i , c , d , k ; scanf ( \"%d\" , & d ) ; for ( k = 1 ; k <= d ; k ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; c = a ; c = min ( a , b ) ; for ( i = c ; i >= 1 ; i -- ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { printf ( \"\n %d\" , i ) ; printf ( \" %d \" , ( b * a ) / i ) ; break ; } } } return 0 ; }", "label": 1, "id": 20561}
{"input": "int main ( ) { int n , i = 0 , j = 0 , max1 = 0 , max2 = 0 , max , t ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; int A [ 100 ] [ 100 ] ; int m [ 100 ] [ 100 ] ; scanf ( \"%d\" , & A [ 0 ] [ 0 ] ) ; m [ 0 ] [ 0 ] = A [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; m [ i ] [ 0 ] = m [ i - 1 ] [ 0 ] + A [ i ] [ 0 ] ; } max = m [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( i == j ) m [ i ] [ j ] = m [ i - 1 ] [ j - 1 ] + A [ i ] [ j ] ; else { max1 = m [ i - 1 ] [ j ] + A [ i ] [ j ] ; max2 = m [ i - 1 ] [ j - 1 ] + A [ i ] [ j ] ; if ( max1 > max2 ) m [ i ] [ j ] = max1 ; else m [ i ] [ j ] = max2 ; if ( max < m [ i ] [ j ] ) max = m [ i ] [ j ] ; } } } printf ( \"%d\" , max ) ; t -- ; } return 0 ; }", "label": 1, "id": 26232}
{"input": "int main ( ) { int t ; long long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; long long int c = a , d = b ; int r = a % b ; while ( r != 0 ) { a = b ; b = r ; r = a % b ; } long long int mul = c / b ; printf ( \"%lld %lld\n\" , b , ( mul ) * d ) ; } }", "label": 0, "id": 7318}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n , l = 0 ; scanf ( \"%d\" , & n ) ; int a [ n + 1 ] [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 1 ; j <= i ; j ++ ) { l = ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? 1 : 2 ; switch ( l ) { case 1 : a [ i ] [ j ] += a [ i + 1 ] [ j ] ; break ; case 2 : a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; break ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 16993}
{"input": "int main ( void ) { int T = 0 , i = 0 , j = 0 ; int a = 0 , b = 0 , n = 0 , count = 1 ; long long int ans = 0 ; scanf ( \"%d\" , & T ) ; for ( j = 0 ; j < T ; j ++ ) { count = 1 ; a = 0 ; b = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { scanf ( \"%d\" , & a ) ; count = 1 ; ans += count ; } else { scanf ( \"%d\" , & b ) ; if ( a <= b ) { count ++ ; } else { count = 1 ; } ans += count ; a = b ; } } printf ( \"%lld\" , ans ) ; ans = 0 ; } }", "label": 1, "id": 7078}
{"input": "int main ( ) { int t ; long long a , b , smaller , bigger , small , big , rem , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%llu %llu\" , & a , & b ) ; if ( a < b ) { smaller = a ; bigger = b ; } else { smaller = b ; bigger = a ; } big = bigger ; small = smaller ; rem = big % small ; if ( rem == 0 ) { printf ( \"%llu \" , small ) ; gcd = small ; } else { while ( rem != 0 ) { rem = big % small ; big = small ; small = rem ; } printf ( \"%llu \" , big ) ; gcd = big ; } lcm = ( long int ) ( a * b ) / gcd ; printf ( \"%llu\n\" , lcm ) ; t -- ; } return 0 ; }", "label": 0, "id": 24626}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; for ( ; t > 0 ; t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23696}
{"input": "int main ( ) { long a [ 100000 ] , n , i , j , k , min , b , sum , m ; scanf ( \"%ld\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld\" , & m ) ; sum = 0 ; for ( j = 0 ; j < m ; j ++ ) { scanf ( \"%ld\" , & b ) ; a [ j ] = b ; } for ( k = 0 ; k <= ( m - 2 ) ; k ++ ) { if ( a [ k ] < a [ k + 1 ] ) { min = a [ k ] ; sum = sum + min ; } else { min = a [ k + 1 ] ; sum = sum + min ; } } printf ( \"%ld\" , sum ) ; } return 0 ; }", "label": 1, "id": 9263}
{"input": "int main ( ) { int n , i , j , k , lines , temp ; scanf ( \"%d\" , & n ) ; int Ans [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & lines ) ; int * * Arr = ( int * * ) malloc ( sizeof ( int * ) * lines ) ; for ( j = 0 ; j < lines ; j ++ ) { * ( Arr + j ) = ( int * ) malloc ( sizeof ( int ) * ( j + 1 ) ) ; } for ( j = 0 ; j < lines ; j ++ ) { for ( k = 0 ; k < ( j + 1 ) ; k ++ ) { scanf ( \"%d\" , ( * ( Arr + j ) + k ) ) ; } } for ( j = lines - 1 ; j > 0 ; j -- ) { for ( k = 0 ; k < j ; k ++ ) { if ( ( * ( * ( Arr + j ) + k ) ) < ( * ( * ( Arr + j ) + k + 1 ) ) ) temp = ( * ( * ( Arr + j ) + k + 1 ) ) ; else temp = ( * ( * ( Arr + j ) + k ) ) ; ( * ( * ( Arr + j - 1 ) + k ) ) += temp ; } } Ans [ i ] = * * Arr ; free ( Arr ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , Ans [ i ] ) ; } }", "label": 0, "id": 393}
{"input": "int main ( ) { int i , j , a [ 102 ] [ 102 ] , max = 0 , t , k , r ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { a [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ j ] [ i ] ) ; } } for ( i = 1 ; i < 15 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) a [ j ] [ i ] += a [ j ] [ i - 1 ] ; else if ( j == i ) a [ j ] [ i ] += a [ j - 1 ] [ i - 1 ] ; else if ( a [ j ] [ i - 1 ] < a [ j - 1 ] [ i - 1 ] ) a [ j ] [ i ] += a [ j - 1 ] [ i - 1 ] ; else a [ j ] [ i ] += a [ j ] [ i - 1 ] ; } } for ( i = 0 ; i < 15 ; i ++ ) { if ( a [ i ] [ 14 ] > max ) max = a [ i ] [ 14 ] ; } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 1, "id": 13982}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; long long int ans , min ; scanf ( \"%d\" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( i == 0 ) min = a [ i ] ; if ( min > a [ i ] ) min = a [ i ] ; } ans = min * ( n - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 19876}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( \"%d\" , & n ) ; int vec1 [ n ] [ n ] ; int vec2 [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & vec1 [ i ] [ j ] ) ; vec2 [ 0 ] [ 0 ] = vec1 [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { vec2 [ i ] [ 0 ] = vec1 [ i ] [ 0 ] + vec2 [ i - 1 ] [ 0 ] ; vec2 [ i ] [ i ] = vec1 [ i ] [ i ] + vec2 [ i - 1 ] [ i - 1 ] ; } for ( i = 2 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { if ( vec2 [ i - 1 ] [ j ] > vec2 [ i - 1 ] [ j - 1 ] ) { vec2 [ i ] [ j ] = vec2 [ i - 1 ] [ j ] + vec1 [ i ] [ j ] ; } else { vec2 [ i ] [ j ] = vec2 [ i - 1 ] [ j - 1 ] + vec1 [ i ] [ j ] ; } } } max = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( vec2 [ n - 1 ] [ i ] > max ) max = vec2 [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 9087}
{"input": "int main ( ) { int test , row , i , k , j ; scanf ( \"%d\" , & test ) ; for ( i = 1 ; i <= test ; i ++ ) { scanf ( \"%d\" , & row ) ; int a [ row ] [ row ] ; for ( k = 1 ; k <= row ; k ++ ) { for ( j = 1 ; j <= k ; j ++ ) { scanf ( \"%d\" , & a [ k ] [ j ] ) ; } } for ( i = row ; i >= 1 ; i -- ) { for ( j = 1 ; j < row ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 6816}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , sum ; scanf ( \"%d\" , & n ) ; sum = 0 ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { sum = sum + a [ i ] ; a [ i + 1 ] = a [ i ] ; } else sum = sum + a [ i + 1 ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 9367}
{"input": "int main ( ) { int t , i , n , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] , p = 1 ; long long int count = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ j ] >= a [ j - 1 ] ) { p ++ ; } else { count += p * ( p + 1 ) / 2 ; p = 1 ; } } count += p * ( p + 1 ) / 2 ; printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 0, "id": 11670}
{"input": "long gcd ( long a , long b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , la , lb ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long a , b ; scanf ( \"%ld%ld\" , & a , & b ) ; long g = gcd ( a , b ) ; printf ( \"%ld %ld\n\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 0, "id": 22191}
{"input": "int main ( void ) { int t ; if ( t >= 1 || t <= 1000 ) scanf ( \"%d\" , & t ) ; while ( t -- ) { long a , b , i , lcm , gcd ; if ( a >= 1 || a <= 1000000 ) { if ( b >= 1 || b <= 1000000 ) { scanf ( \"%ld %ld\" , & a , & b ) ; } } lcm = a * b * 1.0 ; for ( i = 1 ; i <= a && i <= b ; ++ i ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 3479}
{"input": "int main ( ) { int t , n , i , j , sum , tl ; long int * a ; scanf ( \"%d\" , & tl ) ; while ( tl -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; a = ( long int * ) malloc ( sizeof ( long int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { t = i ; for ( j = t + 1 ; j < n ; j ++ ) { if ( a [ j ] > a [ t ] ) { sum ++ ; t = j ; } else break ; } } free ( a ) ; printf ( \"%ld\n\" , sum + n ) ; } return 0 ; }", "label": 0, "id": 26151}
{"input": "int gcd ( int a , int b ) ; int lcm ( int x , int y ) ; int main ( ) { int tc , a , b , gc , lc ; scanf ( \"%d\" , & tc ) ; while ( tc != 0 ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { gc = gcd ( a , b ) ; lc = lcm ( a , b ) ; } else { gc = gcd ( b , a ) ; lc = lcm ( b , a ) ; } printf ( \"%d %d\n\" , gc , lc ) ; tc -- ; } return 0 ; } gcd ( int a , int b ) { if ( a == 0 ) return b ; else gcd ( b % a , a ) ; } int lcm ( int x , int y ) { static int temp = 1 ; if ( temp % y == 0 && temp % x == 0 ) return temp ; temp ++ ; lcm ( x , y ) ; return temp ; }", "label": 3, "id": 23180}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , i , GCD , LCM ; scanf ( \"%ld %ld\" , & a , & b ) ; for ( i = 1 ; i < 1000000 ; i ++ ) if ( a % i == 0 && b % i == 0 ) GCD = i ; LCM = a * b / i ; printf ( \"%ld %ld\" , GCD , LCM ) ; } return 0 ; }", "label": 2, "id": 10675}
{"input": "int gcd ( int a , int b ) { int k , z ; while ( a % b ) { z = b ; b = a % b ; a = z ; } return b ; } int lcm ( int a , int b ) { return a * b / gcd ( a , b ) ; } int main ( void ) { int i , t , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 2438}
{"input": "int main ( ) { long long int t , n , m ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long int i , j , temp ; scanf ( \"%lld%lld\" , & n , & m ) ; i = n ; j = m ; while ( j ) { temp = j ; j = i % j ; i = temp ; } printf ( \"%lld %lld\n\" , i , n * m / i ) ; } return 0 ; }", "label": 0, "id": 934}
{"input": "int main ( ) { int n , i , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & n ) ; int a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } a [ i ] = denominator ; b [ i ] = num1 * num2 / a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d %d\n\" , a [ i ] , b [ i ] ) ; } return 0 ; }", "label": 1, "id": 4460}
{"input": "void call ( long ) ; long array [ 1000 ] ; long result [ 1000 ] ; long count = 0 ; int main ( ) { long i , t , inner , j ; scanf ( \"%lu\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lu\" , & inner ) ; for ( j = 0 ; j < inner ; j ++ ) { scanf ( \"%lu\" , & array [ j ] ) ; } call ( inner ) ; } for ( j = 0 ; j < count ; j ++ ) { printf ( \"%lu\n\" , result [ j ] ) ; } return 0 ; } void call ( long inner ) { long i , sum = 0 ; for ( i = 0 ; i < inner - 1 ; i ++ ) { if ( array [ i ] < array [ i + 1 ] ) { array [ i + 1 ] = array [ i ] ; } sum = sum + array [ i + 1 ] ; } result [ count ++ ] = sum ; }", "label": 3, "id": 14456}
{"input": "int main ( ) { int i , k , j , n , ln , a [ 101 ] [ 101 ] = { 0 } , big ; scanf ( \"%d\" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & ln ) ; scanf ( \"%d\" , & a [ 0 ] [ 1 ] ) ; for ( i = 1 ; i < ln ; i ++ ) { for ( j = 1 ; j <= i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; } } big = 0 ; for ( i = 1 ; i <= ln ; i ++ ) { if ( big < a [ ln - 1 ] [ i ] ) big = a [ ln - 1 ] [ i ] ; } printf ( \"%d\" , big ) ; } return 0 ; }", "label": 1, "id": 7397}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long a , b , temp , n1 , n2 , gcd = 1 ; scanf ( \"%lld%lld\" , & n1 , & n2 ) ; a = n1 ; b = n2 ; while ( 1 ) { if ( a % b == 0 ) { gcd = b ; break ; } temp = b ; b = a % b ; a = temp ; } printf ( \"%lld %lld\n\" , gcd , ( n1 * n2 ) / gcd ) ; } return 0 ; }", "label": 0, "id": 660}
{"input": "int main ( void ) { int t , i , j , h , max = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & h ) ; int a [ h ] [ h ] , s [ h ] [ h ] ; for ( i = 0 ; i < h ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < h ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - 1 ] [ j ] ; } else if ( i == j ) { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - 1 ] [ j - 1 ] ; } else if ( s [ i - 1 ] [ j - 1 ] > s [ i - 1 ] [ j ] ) { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - 1 ] [ j - 1 ] ; } else if ( s [ i - 1 ] [ j - 1 ] < s [ i - 1 ] [ j ] ) { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - 1 ] [ j ] ; } } } max = s [ h - 1 ] [ 0 ] ; for ( i = 0 ; i < h ; i ++ ) { if ( max < s [ h - 1 ] [ i ] ) max = s [ h - 1 ] [ i ] ; } printf ( \"%d \n\" , max ) ; } return 0 ; }", "label": 1, "id": 6867}
{"input": "int main ( void ) { int t , x , y , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & x ) ; scanf ( \"%d\" , & y ) ; for ( int i = 1 ; i <= x && i <= y ; i ++ ) { if ( x % i == 0 && y % i == 0 ) gcd = i ; } lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 6511}
{"input": "int main ( ) { int t , n , i , j , a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] , M = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= n ; j ++ ) { b [ i ] [ j ] = 0 ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] + b [ i - 1 ] [ j ] >= a [ i ] [ j ] + b [ i - 1 ] [ j - 1 ] ) { b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j ] ; } else b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j - 1 ] ; } } for ( i = 1 ; i <= n ; i ++ ) { if ( b [ n ] [ i ] > M ) M = b [ n ] [ i ] ; } printf ( \"%d\n\" , M ) ; } return 0 ; }", "label": 3, "id": 337}
{"input": "int main ( ) { long long int i , j , n , k , m , t ; long long int gcd , lcm , max , min ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & m , & n ) ; min = m > n ? n : m ; max = m > n ? m : n ; for ( j = 1 ; j <= min ; j ++ ) { if ( m % j == 0 && n % j == 0 ) { gcd = j ; } } for ( k = min ; ; k ++ ) { if ( k % m == 0 && k % n == 0 ) { lcm = k ; break ; } } printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 7635}
{"input": "int main ( ) { int n , x , y , i , j ; int a [ 100 ] [ 100 ] ; printf ( \"Enter the no of rows\" ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { x = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; y = a [ i ] [ j ] + a [ i = 1 ] [ j + 1 ] ; if ( x > y ) a [ i ] [ j ] = x ; else a [ i ] [ j ] = y ; } } printf ( \"%d\" , a [ i ] [ j ] ) ; return 0 ; }", "label": 3, "id": 6720}
{"input": "int main ( ) { int a , b , i , hcf , lcm , n ; scanf ( \"%d\" , & n ) ; scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a || i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; } } lcm = ( a * b ) / hcf ; printf ( \"%d %d\" , hcf , lcm ) ; return 0 ; }", "label": 1, "id": 25563}
{"input": "int main ( ) { int t , i , n ; int a [ n ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } int res = min * ( n - 1 ) ; printf ( \"%d\n\" , res ) ; } return 0 ; }", "label": 3, "id": 11387}
{"input": "int main ( ) { int a [ 20 ] , n , k , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; i = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { for ( k = i ; k < n - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; i -- ; } else { for ( k = i + 1 ; k < n - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; i -- ; } n -- ; } printf ( \"%d\" , a [ 0 ] ) ; return 0 ; }", "label": 1, "id": 7538}
{"input": "int getgcd ( int x , int y ) ; int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( \"%d %d\" , & a , & b ) ; gcd = getgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; printf ( \"\n\" ) ; } return 0 ; } int getgcd ( int x , int y ) { if ( y != 0 ) { getgcd ( y , x % y ) ; } else { return ( x ) ; } }", "label": 1, "id": 16664}
{"input": "int main ( void ) { int t , c ; scanf ( \"%d\" , & t ) ; for ( c = 0 ; c < t ; c ++ ) { long long int n , i , amin = 100005 , sum = 0 ; long long int arr [ 50000 ] ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < amin ) amin = arr [ i ] ; } sum = amin * ( n - 1 ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 22353}
{"input": "unsigned int a [ 100 ] [ 100 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i = 0 , j = 0 , c1 , c2 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { c1 = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; c2 = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; if ( c1 > c2 ) { a [ i - 1 ] [ j ] = c1 ; } else { a [ i - 1 ] [ j ] = c2 ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 6329}
{"input": "int main ( ) { int t , m , n , h ; long l ; h = 1 ; t = 0 ; m = 0 ; n = 0 ; l = 0 ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\n\" , & m , & n ) ; for ( int i = 1 ; i <= m ; i ++ ) { if ( m % i == 0 && n % i == 0 ) h = h * i ; } l = ( m * n ) / h ; printf ( \"%d %ld\n\" , h , l ) ; h = 1 ; l = 0 ; } return 0 ; }", "label": 2, "id": 18980}
{"input": "int gcd_lcm ( int x , int y ) { int a = x % y ; if ( a == 0 ) return y ; gcd_lcm ( y , a ) ; } int main ( ) { int t , swap , i , x , y , c , s ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & x , & y ) ; if ( y > x ) { swap = x ; x = y ; y = swap ; } if ( x == 0 ) { c = ( x * y ) / y ; printf ( \"1%d %d\n\" , y , c ) ; } else if ( y == 0 ) { c = ( x * y ) / x ; printf ( \"%d %d\n\" , x , c ) ; } else if ( x > 0 && y > 0 ) { if ( x % y == 0 ) { c = ( x * y ) / y ; printf ( \"%d %d\n\" , y , c ) ; } else { s = gcd_lcm ( x , y ) ; c = ( x * y ) / s ; printf ( \"%d %d\n\" , s , c ) ; } } } return 0 ; }", "label": 1, "id": 23526}
{"input": "int cost ( int n ) ; int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T >= 1 && T <= 10 ) { int n ; scanf ( \"%d\" , & n ) ; printf ( \"%d\n\" , cost ( n ) ) ; T -- ; } return 0 ; } int cost ( int n ) { int a [ n ] , top = 0 , i , delele , sum = 0 , b = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; if ( n == 1 ) return a [ 0 ] ; do { delele = a [ b ] > a [ b + 1 ] ? a [ b ] : a [ b + 1 ] ; if ( delele == a [ b ] ) { sum = sum + a [ b + 1 ] ; top ++ ; } else { sum = sum + a [ b ] ; a [ b ] = a [ b ] + a [ b + 1 ] ; a [ b + 1 ] = a [ b ] - a [ b + 1 ] ; a [ b ] = a [ b ] - a [ b + 1 ] ; top ++ ; } b ++ ; } while ( top != n - 1 ) ; return sum ; }", "label": 1, "id": 17303}
{"input": "int main ( void ) { int t ; long unsigned int a , b , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lu %lu\" , & a , & b ) ; i = a * b ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } printf ( \"%lu %lu\n\" , a , i / a ) ; } return 0 ; }", "label": 0, "id": 5787}
{"input": "main ( ) { static int a [ 101 ] [ 101 ] ; int t , n , m , * p , * c , i , j ; S ( t ) ; while ( t -- ) { S ( n ) ; m = 0 ; p = a [ 0 ] ; for ( i = 1 ; i <= n ; i ++ ) { c = a [ i ] ; for ( j = 1 ; j <= i ; j ++ ) { S ( c [ j ] ) ; c [ j ] += p [ j ] > p [ j - 1 ] ? p [ j ] : p [ j - 1 ] ; m = m > c [ j ] ? m : c [ j ] ; } p = c ; } printf ( \"%d\n\" , m ) ; } }", "label": 0, "id": 14613}
{"input": "int tri ( int num [ ] , int i ) ; int main ( ) { int n , r , num [ size ] , i , j , max = 0 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { max = 0 ; scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num [ j ] ) ; } if ( i == 0 ) continue ; else max = max + tri ( num , i ) ; } printf ( \"%d\n\" , max ) ; } return 0 ; } int tri ( int num [ size ] , int i ) { int k , max ; max = num [ 0 ] ; for ( k = 0 ; k <= i ; k ++ ) { if ( max <= num [ k ] ) max = num [ k ] ; } return max ; }", "label": 1, "id": 10890}
{"input": "static char _rbuf [ NBYTES ] ; static char * _rend = NULL ; static char * _rpos = NULL ; static int _getchar ( ) { int n = read ( 0 , _rbuf , sizeof ( _rbuf ) ) ; if ( n <= 0 ) { printf ( \"EOF(%d)\n\" , n ) ; exit ( 1 ) ; } _rend = _rbuf + n ; _rpos = _rbuf + 1 ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( c = mygetchar ( ) ) < '0' ) { ; } int n = c - '0' ; while ( ( c = mygetchar ( ) ) >= '0' ) { n = 10 * n + c - '0' ; } return n ; } static void put_i ( int n ) { int bp = BUFSZ - 1 ; char buf [ BUFSZ ] ; while ( n > 0 ) { buf [ bp -- ] = n + '0' ; n /= 10 ; } while ( bp < BUFSZ - 1 ) putchar ( buf [ ++ bp ] ) ; putchar ( '\n' ) ; } void doit ( int n ) { int a [ n ] ; int b [ n ] ; a [ 0 ] = 0 ; int * cur = b ; int * old = a ; int i = 0 ; while ( i < n ) { cur [ 0 ] = get_i ( ) + old [ 0 ] ; int j = 1 ; while ( j < i ) { cur [ j ] = get_i ( ) + max ( old [ j - 1 ] , old [ j ] ) ; ++ j ; } if ( i ) cur [ j ] = get_i ( ) + old [ j - 1 ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } ++ i ; } int mx , j ; mx = 0 ; for ( j = 0 ; j < n ; ++ j ) { mx = max ( mx , old [ j ] ) ; } put_i ( mx ) ; } int main ( ) { int n = get_i ( ) ; while ( n -- ) { doit ( get_i ( ) ) ; } exit ( 0 ) ; }", "label": 1, "id": 14095}
{"input": "int main ( ) { long int t , a , b , x , y , tem , gcd , lcm ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > 0 && b > 0 ) { x = a ; y = b ; while ( y != 0 ) { tem = y ; y = x % y ; x = tem ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } } return 0 ; }", "label": 0, "id": 7205}
{"input": "int arr [ 100 ] ; int main ( ) { int t , i , n , l = 0 , j , k , a [ 100 ] [ 100 ] , c = 0 , max ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { l = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; c ++ ; } } for ( j = 0 ; j < n ; j ++ ) { arr [ l ++ ] = a [ j ] [ 0 ] + a [ j + 1 ] [ 0 ] + a [ j + 1 ] [ 0 + 1 ] ; } max = arr [ 0 ] ; for ( k = 0 ; k < c ; k ++ ) { if ( arr [ k ] > max ) max = arr [ k ] ; } printf ( \"\n%d\" , max ) ; } return 0 ; }", "label": 3, "id": 8282}
{"input": "int main ( void ) { int t , n , i , count ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; scanf ( \"%d\" , & n ) ; long int a [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } for ( i = 1 ; i <= n ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] || a [ i ] == a [ i + 1 ] ) { count ++ ; } } count = count + n ; printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 1, "id": 1439}
{"input": "int main ( void ) { int i , x , j , T , y , A , B , k ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { printf ( \"\n\" ) ; scanf ( \"%d %d\" , & A , & B ) ; x = A * B ; y = A > B ? B : A ; for ( k = y ; k >= 1 ; k -- ) { if ( A % k == 0 && B % k == 0 ) { printf ( \"\n%d \" , k ) ; break ; } } for ( j = 1 ; j <= y ; j ++ ) { if ( A % j == 0 && B % j == 0 ) x = x / j ; } printf ( \"%d\" , x ) ; } return 0 ; }", "label": 2, "id": 26100}
{"input": "int main ( ) { int t , a [ 100 ] ; int n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int d ; d = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( d > a [ i ] ) { d = a [ i ] ; } } printf ( \"%d\n\" , d * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 8238}
{"input": "int main ( ) { int noOfLines , noOfTriangles , i , j , previousIndex = 0 , sum = 0 , max = 0 , count = 0 ; int * * base ; scanf ( \"%d\" , & noOfTriangles ) ; while ( noOfTriangles -- ) { sum = previousIndex = max = count = 0 ; scanf ( \"%d\" , & noOfLines ) ; base = ( int * * ) malloc ( sizeof ( int ) * noOfLines ) ; for ( i = 0 ; i < noOfLines ; i ++ ) { base [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; count = 0 ; for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & base [ i ] [ j ] ) ; if ( j == previousIndex && count < 1 ) { max = base [ i ] [ j ] ; count ++ ; } else if ( j == previousIndex + 1 && count < 2 ) { if ( max <= base [ i ] [ j ] ) { max = base [ i ] [ j ] ; previousIndex = j ; } count ++ ; } } sum = sum + max ; } printf ( \"\n%d\" , sum ) ; } return 0 ; }", "label": 1, "id": 24403}
{"input": "int main ( void ) { long long int i , j , t , gcd , lcm , a , b ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; gcd = 1 ; for ( j = 1 ; j <= a && b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } lcm = a * b / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 11462}
{"input": "int main ( void ) { long int a , b , x , y ; int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; x = a , y = b ; while ( x != y ) { if ( x > y ) x -= y ; else y -= x ; } printf ( \"%d %d\n\" , x , ( a * b / x ) ) ; } return 0 ; }", "label": 1, "id": 12041}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 16204}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int i , hcf ; for ( i = b ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { hcf = i ; break ; } } long long int lcm = ( a * b ) / hcf ; printf ( \"%d %lld\" , hcf , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 2, "id": 4897}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 50000 ] , min ; long cost = 0 , N , i ; scanf ( \"%ld\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < N ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) min = a [ i + 1 ] ; else min = a [ i ] ; a [ i + 1 ] = min ; cost += min ; } printf ( \"%ld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 20650}
{"input": "int main ( ) { int t ; int a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; int p = a * b ; gcd = a ; while ( a != b ) { if ( a > b ) { a = a - b ; } else if ( b > a ) b = b - a ; else if ( a == b ) ; gcd = a ; lcm = p / gcd ; } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 10376}
{"input": "int main ( void ) { long int a = 10000000 , b , c ; int t , n , i , j ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & b ) ; if ( a > b ) a = b ; } long int c ; c = a * ( n - 1 ) ; printf ( \"%ld\n\" , c ) ; } return 0 ; }", "label": 2, "id": 11581}
{"input": "int main ( ) { int n , k , a [ 100 ] [ 100 ] , x , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = k - 1 ; i > 0 ; i -- ) { if ( i < ( k - 1 ) ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j + 1 ] > a [ i ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; } } if ( k > 2 ) { if ( a [ 1 ] [ 0 ] > a [ 1 ] [ 1 ] ) a [ 0 ] [ 0 ] += a [ 1 ] [ 0 ] ; else a [ 0 ] [ 0 ] += a [ 1 ] [ 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26510}
{"input": "int gcd ( long long int a , long long int b ) { long long int rem = a % b ; if ( rem == 0 ) return b ; return gcd ( b , rem ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b ; scanf ( \"%lld%lld\" , & a , & b ) ; long long int lcm = a * b / gcd ( a , b ) ; printf ( \"%d %lld\n\" , gcd ( a , b ) , lcm ) ; } return 0 ; }", "label": 0, "id": 20397}
{"input": "int main ( void ) { int n , k , i , j , s1 , s2 , t ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = i ; j > 0 ; j -- ) { s1 = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; s2 = a [ i ] [ j - 1 ] + a [ i - 1 ] [ j - 1 ] ; if ( s1 > s2 ) a [ i - 1 ] [ j - 1 ] = s1 ; else a [ i - 1 ] [ j - 1 ] = s2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 4248}
{"input": "int main ( ) { long a , b , hcf , lcm , n , x , y ; int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld%ld\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { n = b ; b = a % b ; a = n ; } hcf = a ; lcm = ( x * y ) / hcf ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; t -- ; } return 0 ; }", "label": 0, "id": 6262}
{"input": "int main ( ) { int T , i , n1 , n2 , num , den , rem ; scanf ( \"%d\" , & T ) ; int arr [ T ] [ 2 ] ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { num = n1 ; den = n2 ; } else { num = n2 ; den = n1 ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } arr [ i ] [ 0 ] = den ; arr [ i ] [ 1 ] = n1 * n2 / den ; } for ( i = 0 ; i < T ; i ++ ) { printf ( \"%d %d\n\" , arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) ; } }", "label": 1, "id": 8236}
{"input": "int GCD ( int q , int w ) { int i , c = 1 , s ; if ( q > w ) s = w ; else s = q ; for ( i = 1 ; i <= s ; i ++ ) { if ( ( q % i == 0 ) && ( w % i == 0 ) ) { if ( i == s ) { c = s ; break ; } else { c = i ; continue ; } } } return c ; } int main ( ) { long long int i , j , g , gcd , lcm , x , y , n ; scanf ( \"%lli\" , & n ) ; long long int a [ n ] [ 2 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < 2 ; j ++ ) scanf ( \"%lli\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { lcm = 1 ; x = a [ i ] [ 0 ] ; y = a [ i ] [ 1 ] ; g = GCD ( x , y ) ; gcd = g ; while ( gcd > 1 ) { x = x / gcd ; y = y / gcd ; lcm = lcm * gcd ; gcd = GCD ( x , y ) ; } if ( g == 1 ) lcm = x * y ; else lcm = lcm * x * y ; printf ( \"%lli %lli\n\" , g , lcm ) ; } return 0 ; }", "label": 0, "id": 16113}
{"input": "int result = 0 ; int a [ 100 ] [ 100 ] ; int max ( int p , int q ) { return ( p <= q ) ? q : p ; } int func ( int i , int j , int l ) { if ( i == j ) { if ( i == ( l - 1 ) ) { return a [ i ] [ j ] ; } else { return a [ i ] [ j ] + func ( i + 1 , j , l ) ; } } else if ( i == ( l - 1 ) ) { return a [ i ] [ j ] + func ( i , j + 1 , l ) ; } return a [ i ] [ j ] + max ( func ( i + 1 , j , l ) , func ( i , j + 1 , l ) ) ; } int main ( ) { int i , j , l ; int N ; scanf ( \"%d\" , & N ) ; while ( N -- ) { result = 0 ; scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } result = a [ 0 ] [ 0 ] + func ( 1 , 0 , l ) ; printf ( \"%d\n\" , result - 4 ) ; } return 0 ; }", "label": 2, "id": 9310}
{"input": "int main ( ) { long t , n , min , x , c , i ; scanf ( \"\" , & t ) ; while ( t > 0 ) { min = 1000000 ; scanf ( \"\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"\" , & x ) ; if ( x < min ) { min = x ; } } c = min * ( n - 1 ) ; printf ( \"\n\" , c ) ; t -- ; } return ( 0 ) ; }", "label": 2, "id": 2436}
{"input": "int main ( ) { int a , b , i = 0 , j = 0 , gcd , lcm , n , k ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i < a && i < b ; i ++ ) { if ( a % i == 0 && b % i == 0 && ( a > 0 && b > 0 ) ) { gcd = i ; lcm = ( a * b ) / gcd ; } else { lcm = 0 ; if ( a == 0 ) { gcd = b ; } else { gcd = a ; } } } printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 17493}
{"input": "int A [ size ] , B [ size ] ; int main ( ) { int T , N , K , i , sum , j , count ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%d\" , & A [ i ] ) ; count = N ; for ( i = 0 ; i < N ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { if ( A [ j ] > A [ j - 1 ] ) count ++ ; else break ; } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 0, "id": 10529}
{"input": "typedef struct triangle { int n_rows ; int * * content ; } Triangle ; int max ( int , int ) ; void inicializar ( Triangle * ) ; Triangle subTriangle ( Triangle , int , int ) ; int max_path ( Triangle ) ; void borrar ( Triangle * ) ; int max ( int a , int b ) { if ( b > a ) return b ; else return a ; } void inicializar ( Triangle * T ) { int i ; int j ; scanf ( \"%d\" , & ( T -> n_rows ) ) ; T -> content = ( int * * ) malloc ( T -> n_rows * sizeof ( int * ) ) ; for ( i = 0 ; i < T -> n_rows ; i ++ ) { T -> content [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ( T -> content [ i ] [ j ] ) ) ; } } } Triangle subTriangle ( Triangle T , int x , int y ) { Triangle subT ; subT . n_rows = T . n_rows - 1 ; subT . content = ( int * * ) malloc ( subT . n_rows * sizeof ( int ) ) ; int i ; int j ; for ( i = 0 ; i < subT . n_rows ; i ++ ) { subT . content [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) { subT . content [ i ] [ j ] = T . content [ x + i ] [ y + j ] ; } } return subT ; } int max_path ( Triangle T ) { if ( T . n_rows == 1 ) { return T . content [ 0 ] [ 0 ] ; } else { Triangle T1 = subTriangle ( T , 1 , 0 ) ; Triangle T2 = subTriangle ( T , 1 , 1 ) ; int result = T . content [ 0 ] [ 0 ] + max ( max_path ( T1 ) , max_path ( T2 ) ) ; borrar ( & T1 ) ; borrar ( & T2 ) ; return result ; } } void borrar ( Triangle * T ) { int i ; for ( i = 0 ; i < T -> n_rows ; i ++ ) { free ( T -> content [ i ] ) ; } free ( T -> content ) ; } int main ( ) { int n ; int i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { Triangle T ; inicializar ( & T ) ; printf ( \"%d\n\" , max_path ( T ) ) ; borrar ( & T ) ; } return 0 ; }", "label": 3, "id": 9150}
{"input": "int a [ 100 ] [ 100 ] , n ; int func ( int i , int j ) { if ( i == n - 1 ) { return ( a [ i ] [ j ] ) ; } else { if ( a [ i ] [ j ] + func ( i + 1 , j ) >= a [ i ] [ j ] + func ( i + 1 , j + 1 ) ) { return ( a [ i ] [ j ] + func ( i + 1 , j ) ) ; } else { return ( a [ i ] [ j ] + func ( i + 1 , j + 1 ) ) ; } } } int main ( ) { int t , i , j , k , ans ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } ans = func ( 0 , 0 ) ; printf ( \"%d\n\" , ans ) ; } return ( 0 ) ; }", "label": 2, "id": 16084}
{"input": "int main ( ) { int j , gcd , lcm , a , b , i , T ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; for ( j = 1 ; j <= a && j <= b ; j ++ ) { if ( a % j == 0 && b % j == 0 ) gcd = j ; } lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 23725}
{"input": "int main ( ) { int t , n , a [ 10000 ] , i , j , k ; int flag = 0 ; int temp ; scanf ( \"%d\" , & t ) ; if ( t > 5 ) exit ( 0 ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { temp = a [ j ] ; for ( k = j ; k < n ; k ++ ) { if ( temp <= a [ k ] ) { flag ++ ; temp = a [ k ] ; } else break ; } } printf ( \"%d\" , flag ) ; } return 0 ; }", "label": 3, "id": 15107}
{"input": "main ( ) { int t , a , b , min , high , low , i , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a < b ) { min = a ; max = b ; } else { min = b ; max = a ; } for ( i = 1 ; i <= min ; i ++ ) { if ( a % i == 0 && b % i == 0 ) high = i ; } for ( i = a * b ; i >= max ; i -- ) { if ( i % a == 0 && i % b == 0 ) low = i ; } printf ( \"%d %d\n\" , high , low ) ; } return 0 ; }", "label": 2, "id": 16456}
{"input": "int main ( ) { int t , a = 0 ; scanf ( \"%d\" , & t ) ; while ( a < t ) { long int n , b = 0 , sum = 0 , c = 0 ; scanf ( \"%ld\" , & n ) ; long int ar [ 100000 ] ; while ( b < n ) { scanf ( \"%ld\" , & ar [ b ] ) ; ++ b ; } while ( c < ( n - 1 ) ) { if ( ar [ c ] <= ar [ c + 1 ] ) { sum ++ ; } ++ c ; } printf ( \"%ld\n\" , ( sum + n ) ) ; ++ a ; } return 0 ; }", "label": 1, "id": 19490}
{"input": "int maxLen ( int * mem , int t , int i , int j ) { int lenD = mem [ i * t + j ] ; int lenR = mem [ i * t + j ] ; if ( i < t - 1 ) { lenD += maxLen ( mem , t , i + 1 , j ) ; lenR += maxLen ( mem , t , i + 1 , j + 1 ) ; } return ( lenR > lenD ? lenR : lenD ) ; } int main ( ) { int n , t ; int i , j ; int * mem ; int len = 0 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; mem = ( int * ) malloc ( sizeof ( int ) * t * t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , mem + i * t + j ) ; } } printf ( \"%d\n\" , maxLen ( mem , t , 0 , 0 ) ) ; free ( mem ) ; } return 0 ; }", "label": 2, "id": 24162}
{"input": "int main ( ) { long long t , a , b , c , d , i , e , lcm , hcf ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } c = a ; d = b ; i = 1 ; e = c ; while ( ( e % d ) != 0 ) { e = c * ++ i ; } lcm = e ; e = 1 ; while ( e ) { e = a % b ; a = b ; b = e ; } hcf = a ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; } }", "label": 2, "id": 17208}
{"input": "int subarray ( int A [ ] , int p ) { int i = 0 , j , count , sum = 0 , size = p ; while ( i < p ) { j = i ; count = 1 ; while ( j < size - 1 ) { if ( A [ j ] <= A [ j + 1 ] ) { j ++ ; count = 2 ; } else break ; } sum = sum + count ; i ++ ; } return sum ; } int main ( ) { int n , i , p , j ; scanf ( \"%d\" , & n ) ; printf ( \"\n\" ) ; int b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & p ) ; int a [ p ] ; for ( j = 0 ; j < p ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } b [ i ] = subarray ( a , p ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , b [ i ] ) ; } }", "label": 1, "id": 14741}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int * a , i , min = 1000000 ; long long ans , n ; scanf ( \"%d\" , & n ) ; a = ( int * ) malloc ( ( sizeof ( int ) ) * n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } free ( a ) ; ans = min * ( n - 1 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 22781}
{"input": "int main ( void ) { int nt , a , b , i , j ; scanf ( \"%d\" , & nt ) ; while ( nt -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= ( a > b ? a : b ) / 2 ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { break ; } } for ( j = ( a > b ? a : b ) ; j <= a * b ; j ++ ) { if ( j % a == 0 && j % b == 0 ) { break ; } } printf ( \"%d %d\n\" , i , j ) ; } return 0 ; }", "label": 2, "id": 15393}
{"input": "int main ( ) { int t , i ; long long int min = 9999 , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; if ( n < 1 ) { return 0 ; } int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = 9999 ; if ( n == 2 ) { if ( a [ 0 ] > a [ 1 ] ) { cost = a [ 0 ] ; } else { cost = a [ 1 ] ; } } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } cost = min * ( n - 1 ) ; printf ( \"%lld\" , cost ) ; } }", "label": 1, "id": 4543}
{"input": "int main ( ) { long long int a ; scanf ( \"%lld\" , & a ) ; for ( long long int i = 0 ; i < a ; i ++ ) { long long int b ; scanf ( \"%lld\" , & b ) ; long long int c [ b ] ; for ( long long int i = 0 ; i < b ; i ++ ) { scanf ( \"%lld\" , & c [ i ] ) ; } long long int min = c [ 0 ] ; for ( long long int i = 0 ; i < b ; i ++ ) { if ( min > c [ i ] ) { min = c [ i ] ; } } printf ( \"%lld\n\" , ( ( b - 1 ) * min ) ) ; } return 0 ; }", "label": 0, "id": 18528}
{"input": "int main ( ) { int n , i , t , a [ 50000 ] , cost = 0 , tmp , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { cost += a [ i ] ; for ( j = i + 1 ; j < n ; j ++ ) { a [ j ] = a [ j + 1 ] ; } n -- ; i -- ; } else { cost += a [ i + 1 ] ; for ( j = i ; j < n ; j ++ ) { a [ j ] = a [ j + 1 ] ; } n -- ; i -- ; } } printf ( \"%d\n\" , cost ) ; cost = 0 ; } return 0 ; }", "label": 2, "id": 18492}
{"input": "int main ( ) { int t , a , b , x , y , r , lcm = 0 , gcd = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; x = a ; y = b ; while ( a != 0 ) { r = b % a ; b = a ; a = r ; } gcd = b ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 5593}
{"input": "int main ( int argc , char * * argv ) { int a [ 100 ] [ 100 ] , t , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 5259}
{"input": "int main ( ) { int T , i , n ; int a [ 10001 ] , m ; scanf ( \"%d\" , & T ) ; while ( T -- ) { m = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ m ] ) m = i ; } printf ( \"%d\n\" , a [ m ] * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 13528}
{"input": "int main ( ) { int sml , i , A [ 100 ] , T , N ; scanf ( \"%d\" , & N ) ; while ( T -- != 0 ) { scanf ( \"%d\" , & N ) ; for ( i = 1 ; i <= N ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; sml = sml > A [ i ] ? A [ i ] : sml ; } printf ( \"%d\n\" , sml * ( N - 1 ) ) ; } }", "label": 3, "id": 26256}
{"input": "int main ( ) { long int t , a , b , i , lcm , gcd ; scanf ( \"%ld\" , & t ) ; while ( t -- > 0 ) { gcd = lcm = 0 ; scanf ( \"%ld%ld\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 9646}
{"input": "int main ( ) { int n ; scanf ( \"%d\n\" , & n ) ; while ( n -- ) { int t , i , j , min = 100001 ; int A [ 50000 ] ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } for ( i = 0 ; i < t ; i ++ ) { if ( A [ i ] < min ) min = A [ i ] ; } printf ( \"%d\n\" , min * ( t - 1 ) ) ; } return 0 ; }", "label": 0, "id": 17455}
{"input": "int main ( ) { int t ; long long int a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; long long int c = a , d = b ; int r = a % b ; while ( r != 0 ) { a = b ; b = r ; r = a % b ; } long long int mul = c / b ; printf ( \"%lld %lld\n\" , b , ( mul ) * d ) ; } }", "label": 0, "id": 5294}
{"input": "void sum ( int ( * arr ) [ 99 ] , int line ) ; void main ( ) { int arr [ 99 ] [ 99 ] = { 0 } ; int ans [ 1000 ] ; int line = 0 , loop = 0 , ch , i , j , p = 0 ; while ( ( ch = getchar ( ) ) != '\n' ) loop = loop * 10 + ( int ) ch - 48 ; while ( loop ) { i = 0 ; while ( ( ch = getchar ( ) ) != '\n' ) line = line * 10 + ( int ) ch - 48 ; while ( line ) { j = 0 ; while ( ( ch = getchar ( ) ) != '\n' ) { if ( ch != ' ' ) arr [ i ] [ j ] = arr [ i ] [ j ] * 10 + ( int ) ch - 48 ; else j ++ ; } i ++ ; line -- ; } sum ( arr , i - 2 ) ; ans [ p ++ ] = arr [ 0 ] [ 0 ] ; loop -- ; } i = 0 ; while ( i < p ) printf ( \"%d\n\" , ans [ i ++ ] ) ; } void sum ( int ( * arr ) [ 99 ] , int line ) { if ( line < 0 ) return ; int j = 0 ; while ( j <= line ) { ( arr [ line + 1 ] [ j ] > arr [ line + 1 ] [ j + 1 ] ) ? ( arr [ line ] [ j ] += arr [ line + 1 ] [ j ] ) : ( arr [ line ] [ j ] += arr [ line + 1 ] [ j + 1 ] ) ; j ++ ; } sum ( arr , -- line ) ; }", "label": 3, "id": 24625}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int findmax ( void * a , int i , int j , int size ) { if ( i > size || j > size ) return 0 ; else return ( * ( ( ( int * ) a ) + ( size * i ) + j ) + max ( findmax ( a , i + 1 , j , size ) , findmax ( a , i + 1 , j + 1 , size ) ) ) ; } int main ( ) { int i = 0 , j = 0 ; int testcases = 0 ; int lineno = 0 ; int pathsum = 0 ; scanf ( \"%d\" , & testcases ) ; while ( testcases >= 1 ) { scanf ( \"%d\" , & lineno ) ; int a [ lineno ] [ lineno ] ; for ( i = 1 ; i <= lineno ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { * ( * ( a + i ) + j ) = 0 ; } } for ( i = 1 ; i <= lineno ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , ( * ( a + i ) + j ) ) ; } } pathsum = findmax ( a , 1 , 1 , lineno ) ; printf ( \"%d\n\" , pathsum ) ; testcases -- ; } return 1 ; }", "label": 3, "id": 3679}
{"input": "void main ( ) { int t ; int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d\n\" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } }", "label": 1, "id": 14308}
{"input": "int main ( ) { int t , num , a [ 101 ] [ 101 ] , test , i , j , max , profit [ 101 ] [ 101 ] , maxp ; scanf ( \"%d\" , & t ) ; for ( test = 1 ; test <= t ; test ++ ) { max = - 1 ; scanf ( \"%d\" , & num ) ; for ( i = 1 ; i <= num ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } profit [ 1 ] [ 1 ] = a [ 1 ] [ 1 ] ; for ( i = 2 ; i <= num ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( j == 1 ) maxp = profit [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( j == i ) maxp = profit [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else { if ( profit [ i - 1 ] [ j ] + a [ i ] [ j ] >= profit [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ) maxp = profit [ i - 1 ] [ j ] + a [ i ] [ j ] ; else maxp = profit [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } profit [ i ] [ j ] = maxp ; } } for ( i = 1 ; i <= num ; i ++ ) { if ( profit [ num ] [ i ] > max ) max = profit [ num ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 15507}
{"input": "int main ( ) { long long int t , a , b , gcd , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( ( a != 0 ) || ( b != 0 ) ) { a = a % b ; if ( a == 0 ) { gcd = b ; break ; } b = b % a ; if ( b == 0 ) { gcd = a ; break ; } } printf ( \"%d %d\n\" , gcd , m * n / gcd ) ; } return 0 ; }", "label": 1, "id": 22846}
{"input": "int gcd ( long long a , long long b ) { if ( a == 0 ) return b ; else if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; long long g , l , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\n\" , & a , & b ) ; long long x = gcd ( a , b ) ; long long lcm = ( a * b ) / x ; printf ( \"%lld %lld\n\" , x , lcm ) ; } return 0 ; }", "label": 0, "id": 18853}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long n ; scanf ( \"%l\" , & n ) ; int a [ n ] , i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } int sum = 0 , p = a [ 0 ] ; for ( i = 0 ; i < ( n - 1 ) ; i ++ ) { if ( p < a [ i + 1 ] ) { sum = sum + p ; } else { p = a [ i + 1 ] ; sum = sum + p ; } } printf ( \"%d\n\" , sum ) ; } }", "label": 3, "id": 9930}
{"input": "void main ( ) { int i , j , n , t , a [ 50000 ] , min = 5001 ; scanf ( \"%d\" , & t ) ; for ( j = 1 ; j <= t ; j ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 1, "id": 6205}
{"input": "int cmp ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { register int i ; int test ; int n , sum ; scanf ( \"%d\" , & test ) ; while ( test -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; qsort ( a , n , 4 , cmp ) ; if ( n == 2 ) sum = a [ 0 ] ; else if ( n == 1 ) sum = 0 ; else { for ( i = 1 ; i < n - 1 ; i ++ ) sum += a [ i ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 17349}
{"input": "int a [ 100 ] [ 100 ] = { 0 } , n , c [ 100 ] [ 100 ] = { 0 } , z ; int cache [ 100 ] [ 100 ] = { 0 } ; int main ( void ) { int i , j , p ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; z = n - 1 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; c [ i ] [ j ] = 0 ; } p = solve ( 0 , 0 ) ; printf ( \"%d\n\" , p ) ; } return 0 ; } int solve ( int i , int j ) { int t1 , t2 , t ; if ( i > z ) return 0 ; if ( c [ i ] [ j ] == 1 ) { return cache [ i ] [ j ] ; } t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; if ( t1 > t2 ) { t = a [ i ] [ j ] + t1 ; cache [ i ] [ j ] = t ; c [ i ] [ j ] = 1 ; } else { t = a [ i ] [ j ] + t2 ; cache [ i ] [ j ] = t ; c [ i ] [ j ] = 1 ; } return t ; }", "label": 0, "id": 23364}
{"input": "int main ( ) { int t ; long a , b , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; long p = a * b ; gcd = a ; while ( a != b ) { if ( a > b ) { a = a - b ; } else if ( b > a ) b = b - a ; else if ( a == b ) ; gcd = a ; lcm = p / gcd ; } printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 19286}
{"input": "int main ( ) { unsigned char triangleArray [ 5050 ] ; int testCases ; scanf ( \"%d\" , & testCases ) ; int i ; int j ; int k ; for ( i = 0 ; i < testCases ; ++ i ) { int idx = 0 ; int rowCount ; scanf ( \"%d\" , & rowCount ) ; for ( j = 0 ; j < rowCount ; ++ j ) { for ( k = 0 ; k <= j ; ++ k ) { scanf ( \"%d\" , & triangleArray [ idx ++ ] ) ; } } int lastRowIndex = idx - 1 ; for ( i = rowCount - 2 ; i >= 0 ; -- i ) { int currRowLength = i + 1 ; lastRowIndex = lastRowIndex - currRowLength - 1 ; int firstRowIndex = lastRowIndex - currRowLength + 1 ; for ( j = firstRowIndex ; j <= lastRowIndex ; ++ j ) { int max = 0 ; if ( triangleArray [ j + currRowLength ] > triangleArray [ j + currRowLength + 1 ] ) { max = triangleArray [ j + currRowLength ] ; } else { max = triangleArray [ j + currRowLength + 1 ] ; } triangleArray [ j ] += max ; } } printf ( \"%d \n\" , triangleArray [ 0 ] ) ; } return 0 ; }", "label": 2, "id": 4386}
{"input": "int main ( ) { int n , lcm , gcd , numerator , denominator , i , num1 , num2 , remainder ; scanf ( \"%d\" , & n ) ; printf ( \"\n\" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 10385}
{"input": "int main ( ) { int m , r , tc , a , b , hcf ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a * b ; while ( b > 0 ) { r = a % b ; a = b ; b = r ; } hcf = m / a ; printf ( \"%d %d\n\" , a , hcf ) ; } return 0 ; }", "label": 1, "id": 1311}
{"input": "int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int x , y , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & x , & y ) ; printf ( \"%d %d\n\" , gcd ( x , y ) , lcm ( x , y ) ) ; } return 0 ; }", "label": 1, "id": 16170}
{"input": "int find_path ( int a [ ] [ 100 ] , int p , int q , int n , int div [ ] [ 100 ] ) { int val1 , val2 ; if ( p > n ) return ( 0 ) ; if ( div [ p ] [ q ] != 0 ) return ( div [ p ] [ q ] ) ; val1 = find_path ( a , p + 1 , q , n , div ) ; div [ p + 1 ] [ q ] = 1 ; val2 = find_path ( a , p + 1 , q + 1 , n , div ) ; div [ p + 1 ] [ q + 1 ] = 1 ; if ( val1 > a [ p ] [ q ] ) { return ( a [ p ] [ q ] + val1 ) ; div [ p ] [ q ] = a [ p ] [ q ] + val1 ; } else { return ( a [ p ] [ q ] + val2 ) ; div [ p ] [ q ] = a [ p ] [ q ] + val2 ; } } int main ( ) { int i = 0 , j = 0 , k , num , rowmax , val , count , m = 0 ; int tri [ 100 ] [ 100 ] , div [ 100 ] [ 100 ] ; int result [ 1000 ] ; scanf ( \"%d\" , & num ) ; while ( m < num ) { for ( k = 0 ; k < 100 ; k ++ ) { for ( count = 0 ; count < 100 ; count ++ ) { div [ k ] [ count ] = 0 ; } } scanf ( \"%d\" , & rowmax ) ; for ( k = 0 ; k < rowmax ; k ++ ) { for ( count = 0 ; count <= k ; count ++ ) { scanf ( \"%d\" , & tri [ k ] [ count ] ) ; } } val = find_path ( tri , i , j , k , div ) ; result [ m ] = val ; m ++ ; } for ( k = 0 ; k < num ; k ++ ) { printf ( \"%d\n\" , result [ k ] ) ; } return ( 0 ) ; }", "label": 3, "id": 17469}
{"input": "int main ( ) { int i , j , n , t , s , sum , arr [ 99 ] [ 99 ] ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } s = 0 ; if ( n == 1 ) { s = arr [ 0 ] [ 0 ] ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { sum = arr [ i ] [ j ] + arr [ i - 1 ] [ j ] + arr [ i ] [ j + 1 ] ; if ( sum > s ) { s = sum ; } } } printf ( \"%d\n\" , s ) ; t = t - 1 ; } return ( 0 ) ; }", "label": 3, "id": 2587}
{"input": "int Maximum ( int , int ) ; int SumsInATriangle ( int a [ ] [ 105 ] , int ) ; int main ( ) { int i , j , k , T , n , ans ; int a [ 105 ] [ 105 ] ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } ans = SumsInATriangle ( a , n ) ; printf ( \"%d\n\" , ans ) ; } return ( 0 ) ; } int SumsInATriangle ( int a [ ] [ 105 ] , int n ) { int i , j ; if ( n == 1 ) return ( a [ 0 ] [ 0 ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += Maximum ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } return ( a [ 0 ] [ 0 ] ) ; } int Maximum ( int p , int q ) { return ( p > q ? p : q ) ; }", "label": 0, "id": 4263}
{"input": "int main ( ) { int i , t , r = 1 , p , n , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; ++ i ) { scanf ( \"%d%d\" , & a , & b ) ; p = a * b ; if ( a > b ) { n = a ; a = b ; b = n ; } if ( a != 0 && b != 0 ) { while ( ! ( b == 0 ) ) { n = a ; a = b ; b = n % b ; } printf ( \"%d %d\n\" , a , p / a ) ; } else printf ( \"0 0\" ) ; } return 0 ; }", "label": 1, "id": 5147}
{"input": "int main ( ) { int t , i , n , a [ 1000 ] , j ; char s [ 4 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; scanf ( \"%s\" , s ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } if ( n == 1 && a [ 0 ] % 2 == 0 && ( ! strcmp ( s , \"Dee\" ) ) ) printf ( \"Dee\n\" ) ; else printf ( \"Dum\n\" ) ; } return 0 ; }", "label": 3, "id": 20384}
{"input": "int arr [ 100 ] [ 100 ] ; int arr_dy [ 100 ] [ 100 ] ; int max ( int a , int b ) { return a > b ? a : b ; } int max_sum ( int lines ) { int i , j ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( i - 1 < 0 ) { arr_dy [ i ] [ j ] = arr [ i ] [ j ] ; } else if ( j - 1 < 0 ) { arr_dy [ i ] [ j ] = arr_dy [ i - 1 ] [ j ] + arr [ i ] [ j ] ; } else if ( j == i ) { arr_dy [ i ] [ j ] = arr_dy [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; } else arr_dy [ i ] [ j ] = arr [ i ] [ j ] + max ( arr_dy [ i - 1 ] [ j - 1 ] , arr_dy [ i - 1 ] [ j ] ) ; } } int max = - 1 ; for ( i = 0 ; i < lines ; i ++ ) { if ( max < arr_dy [ lines - 1 ] [ i ] ) max = arr_dy [ lines - 1 ] [ i ] ; } return max ; } int main ( ) { int tot , cur , i , j ; scanf ( \"%d\" , & tot ) ; while ( tot > 0 ) { int line ; scanf ( \"%d\" , & line ) ; for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } printf ( \"%d\n\" , max_sum ( line ) ) ; tot -- ; } return 0 ; }", "label": 0, "id": 15558}
{"input": "int main ( ) { int gcd ( int , int ) ; int x , y , t , l , g , b , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & x , & y ) ; if ( x > y ) { b = x ; s = y ; } else { b = y ; s = x ; } g = gcd ( b , s ) ; l = ( x * y ) / g ; printf ( \"%d %d\" , g , l ) ; } return 0 ; } int gcd ( int b , int s ) { if ( b % s == 0 ) return s ; else return ( gcd ( s , b % s ) ) ; }", "label": 1, "id": 9592}
{"input": "int main ( ) { int t , a , b , i , gcd , min , n1 , n2 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , a , ( ( n1 * n2 ) / a ) ) ; } return 0 ; }", "label": 1, "id": 13936}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int tc , n , i , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int s [ n ] [ n ] ; s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i - 1 >= j && j >= 1 ) s [ i ] [ j ] = max ( s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] , s [ i - 1 ] [ j ] + a [ i ] [ j ] ) ; if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; if ( i == j ) s [ i ] [ j ] = s [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } } int l = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( s [ n - 1 ] [ i ] > l ) l = s [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , l ) ; } return 0 ; }", "label": 0, "id": 3608}
{"input": "void print ( int a [ z ] [ z ] ) { int i , j ; for ( i = 0 ; i < z ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) printf ( \"%d \" , a [ i ] [ j ] ) ; printf ( \"\n\" ) ; } } int main ( ) { int i = 0 , j , k , n , t , max = - 1 ; int a [ z ] [ z ] ; for ( i = 0 ; i < z ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) a [ i ] [ j ] = - 1 ; } scanf ( \"%d\" , & n ) ; while ( i < n ) { j = 0 ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k < z ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = 0 ; j < t - 1 ; j ++ ) { for ( k = 0 ; k < z ; k ++ ) { if ( a [ j ] [ k ] == - 1 ) break ; if ( ( a [ j ] [ k ] + a [ j + 1 ] [ k ] ) > ( a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ) ) max = a [ j ] [ k ] + a [ j + 1 ] [ k ] ; else max = a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ; } } printf ( \"%d\n\" , max ) ; i ++ ; } return 0 ; }", "label": 3, "id": 9761}
{"input": "int main ( ) { int test , i , j , no , t ; scanf ( \"%d\" , & test ) ; int a [ 100 ] [ 100 ] = { 0 } ; for ( t = 0 ; t < test ; t ++ ) { scanf ( \"%d\" , & no ) ; for ( i = 0 ; i < no ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = no - 1 ; i >= 0 ; i -- ) { for ( j = no - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j - 1 ] ) a [ i - 1 ] [ j - 1 ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j - 1 ] += a [ i ] [ j - 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 4330}
{"input": "int main ( ) { long long a , b , min ; int t , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( ; t > 0 ; t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { min = b ; } else { min = a ; } for ( ; min >= 1 ; min -- ) { if ( a % min == 0 && b % min == 0 ) { gcd = min ; break ; } } lcm = ( a * b ) / ( gcd ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 9636}
{"input": "int main ( ) { int t , i , j , count , n ; int ar [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & ar [ i ] ) ; } count = 0 ; for ( i = 0 ; i < n ; i ++ ) { count ++ ; for ( j = i + 1 ; j < n ; j ++ ) { if ( ar [ j ] >= ar [ j - 1 ] ) { count ++ ; } else { break ; } } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 0, "id": 766}
{"input": "int max ( int p , int i , int a [ 100 ] [ 100 ] ) { int j , max1 = a [ i ] [ p ] ; if ( a [ i ] [ p ] < a [ i ] [ p + 1 ] ) max1 = a [ i ] [ p + 1 ] ; return max1 ; } int pos ( int p , int i , int a [ 100 ] [ 100 ] ) { int j , max1 = p ; if ( a [ i ] [ p ] < a [ i ] [ p + 1 ] ) max1 = p + 1 ; return max1 ; } int main ( ) { long int t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } int q , p = 0 , s1 , s2 , s3 , s4 ; s1 = a [ 1 ] [ 0 ] + a [ 2 ] [ 0 ] ; s2 = a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] ; s3 = a [ 1 ] [ 1 ] + a [ 2 ] [ 1 ] ; s4 = a [ 1 ] [ 1 ] + a [ 2 ] [ 2 ] ; if ( s2 > s1 ) { s1 = s2 ; p = 1 ; } if ( s3 > s1 ) { s1 = s3 ; p = 1 ; } if ( s4 > s1 ) { s1 = s4 ; p = 2 ; } int sum = s1 + a [ 0 ] [ 0 ] ; for ( i = 3 ; i < n ; i ++ ) { q = max ( p , i , a ) ; p = pos ( p , i , a ) ; sum += q ; } printf ( \"%d\n\" , sum ) ; } }", "label": 1, "id": 6841}
{"input": "void func ( ) { int size ; int i ; int j ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = size - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } int main ( ) { int testcases , i ; scanf ( \"%d\" , & testcases ) ; for ( i = 0 ; i < testcases ; i ++ ) func ( ) ; }", "label": 1, "id": 12710}
{"input": "int main ( ) { int T , i , j , n , max ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ) max = arr [ i ] [ j ] ; else max = arr [ i ] [ j + 1 ] ; arr [ i - 1 ] [ j ] += max ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 4094}
{"input": "int min ( int , int ) ; int main ( ) { int i , a [ 100000 ] , t , p , j , sum = 0 ; long n , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { p = min ( a [ i ] , a [ i + 1 ] ) ; a [ i + 1 ] = p ; sum += p ; } printf ( \"%d\n\" , sum ) ; } return 0 ; } int min ( int a , int b ) { if ( a > b ) return b ; else return a ; }", "label": 1, "id": 23919}
{"input": "int gcd ( int a , int b ) { int n ; if ( a > b ) n = b ; else n = a ; while ( ( ( a % n ) != 0 ) || ( ( b % n ) != 0 ) ) { n = n - 1 ; } return ( n ) ; } int lcd ( int a , int b ) { int n ; if ( a > b ) n = a ; else n = b ; while ( ( ( n % a ) != 0 ) || ( ( n % b ) != 0 ) ) { n = n + 1 ; } return ( n ) ; } main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { int x , y ; scanf ( \"%d %d\" , & x , & y ) ; printf ( \"%d %d \n\" , gcd ( x , y ) , lcd ( x , y ) ) ; } }", "label": 2, "id": 11552}
{"input": "int calcsum ( int * * arr , int * * cache , int row , int col , int rows ) { int t1 , t2 , temp ; if ( row == rows ) return 0 ; else { if ( cache [ row ] [ col ] != - 1 ) { return cache [ row ] [ col ] ; } else { t1 = calcsum ( arr , cache , row + 1 , col , rows ) ; t2 = calcsum ( arr , cache , row + 1 , col + 1 , rows ) ; temp = ( t1 > t2 ) ? t1 : t2 ; temp += arr [ row ] [ col ] ; cache [ row ] [ col ] = temp ; return temp ; } } } int main ( ) { int n , rows , i = 1 , j ; int * arr [ 100 ] ; int * cache [ 100 ] ; int sum ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 1 ; i <= rows ; i ++ ) { arr [ i - 1 ] = malloc ( sizeof ( int ) * i ) ; cache [ i - 1 ] = malloc ( sizeof ( int ) * i ) ; for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & arr [ i - 1 ] [ j ] ) ; cache [ i - 1 ] [ j ] = - 1 ; } } sum = calcsum ( arr , cache , 0 , 0 , rows ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 1715}
{"input": "long gcd ( long a , long b ) ; int main ( ) { int a , b , t , d , store ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; d = gcd ( a , b ) ; store = ( a * b ) / d ; printf ( \"%ld %ld\n\" , d , store ) ; } return 0 ; } long gcd ( long a , long b ) { int rem ; rem = b % a ; if ( rem == 0 ) return a ; else gcd ( rem , a ) ; }", "label": 1, "id": 214}
{"input": "int main ( ) { long n , m , num , den , rem , lcm , gcd , i ; scanf ( \"%ld\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) { scanf ( \"%ld %ld\" , & n , & m ) ; rem = n * m ; while ( n != m ) { if ( n > m ) n = n - m ; if ( m > n ) m = m - n ; } gcd = n ; lcm = rem / gcd ; printf ( \"%ld %ld\" , gcd , lcm ) ; } }", "label": 1, "id": 23774}
{"input": "int main ( void ) { int a [ 100 ] [ 100 ] , t , n , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t ) { max = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 || i == 1 ) max += a [ i ] [ 0 ] ; else if ( a [ i ] [ 0 ] > a [ i ] [ 1 ] ) max = max + a [ i ] [ 0 ] ; else max = max + a [ i ] [ 1 ] ; } t -- ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 9692}
{"input": "int gsum ( int * , int i , int j , int n ) ; int main ( ) { int n , * arr , i = 0 , num , j , n1 , sum ; scanf ( \"%d\" , & n1 ) ; while ( i < n1 ) { scanf ( \"%d\" , & n ) ; n = ( n * ( n + 1 ) / 2 ) ; arr = ( int * ) malloc ( sizeof ( int ) * n ) ; j = 0 ; while ( j < n ) { scanf ( \"%d\" , & num ) ; arr [ j ] = num ; j ++ ; } sum = gsum ( arr , 0 , 1 , n ) ; printf ( \"%d\n\" , sum ) ; free ( arr ) ; i ++ ; } return 0 ; } int gsum ( int * b , int i , int j , int n ) { int n1 , n2 , k ; if ( i >= n ) return 0 ; n1 = b [ i ] + gsum ( b , i + j , j + 1 , n ) ; n2 = b [ i ] + gsum ( b , i + j + 1 , j + 1 , n ) ; if ( n1 > n2 ) return n1 ; else return n2 ; }", "label": 2, "id": 12442}
{"input": "int main ( ) { int t , s , n , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { s = 0 ; scanf ( \"%d\" , & n ) ; int * a = ( int * ) malloc ( n * sizeof ( int ) ) ; scanf ( \"%lld\" , & a [ 0 ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } s = ( n - 1 ) * min ; printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 0, "id": 16840}
{"input": "int a [ 50001 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , min = 100001 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 18452}
{"input": "int max ( int a , int b ) { return ( ( a > b ) ? a : b ) ; } int main ( ) { int n , r , sum , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { sum = i = j = 0 ; scanf ( \"%d\" , & r ) ; int arr [ 100 ] [ 100 ] = { 0 } ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = 1 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) arr [ i ] [ j ] += arr [ i - 1 ] [ j ] ; else if ( j == i ) arr [ i ] [ j ] += arr [ i - 1 ] [ j - 1 ] ; else arr [ i ] [ j ] += max ( arr [ i - 1 ] [ j ] , arr [ i - 1 ] [ j - 1 ] ) ; if ( sum < arr [ i ] [ j ] ) sum = arr [ i ] [ j ] ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 7016}
{"input": "int a [ 101 ] [ 101 ] , i , k ; int sum ( int a [ i ] [ k ] , int m ) { int i , k , j = 0 , c = i , d = k , l ; l = a [ c ] [ k ] ; for ( i ; i < m ; i ++ ) { j += a [ i ] [ k ] ; } for ( k ; k < m ; k ++ ) { l += a [ c + 1 ] [ k + 1 ] ; } if ( l > j ) { return a [ c + 1 ] [ d + 1 ] ; } else if ( j > l ) { return a [ c ] [ k + 1 ] ; } } int main ( void ) { int cas , line , i , j , k , l ; scanf ( \"%d\" , & cas ) ; for ( i = 0 ; i < cas ; i ++ ) { scanf ( \"%d\" , & line ) ; for ( j = 0 ; j < line ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { printf ( \"%c\" , '*' ) ; } printf ( \"\n\" ) ; } } for ( ; ; ) ; return 0 ; }", "label": 2, "id": 24449}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int main ( ) { long int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; long int k = gcd ( a , b ) ; long int z = ( a * b ) / k ; printf ( \"%ld %ld\n\" , k , z ) ; } return 0 ; }", "label": 0, "id": 5904}
{"input": "int main ( ) { int a , b , t , gcd , lcm , max , min , rem = 1 ; scanf ( \" %d\" , & t ) ; while ( t -- ) { scanf ( \" %d\" , & a ) ; scanf ( \" %d\" , & b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } rem = 1 ; while ( rem != 0 ) { rem = max % min ; if ( rem == 0 ) { gcd = min ; break ; } else { max = min ; min = rem ; } } max = a ; min = b ; max /= gcd ; min /= gcd ; lcm = max * min * gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 21764}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; int a [ n ] [ n ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ( a [ i ] [ j ] ) ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"\n%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 5138}
{"input": "int main ( ) { int t , n , x , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; x = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { x = x + a [ i + 1 ] ; } if ( a [ i ] < a [ i + 1 ] ) { x = x + a [ i ] ; a [ i + 1 ] = a [ i ] ; } } printf ( \"%d\n\" , x ) ; } }", "label": 1, "id": 13872}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , d ; scanf ( \"%lld%lld\" , & a , & b ) ; d = gcd ( b , a ) ; printf ( \"%lld %lld\n\" , d , ( a * b ) / d ) ; } return 0 ; }", "label": 0, "id": 13569}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; return y ; } int main ( int argc , char * argv [ ] ) { int numCases = 0 ; int triangleLen = 0 ; int i = 0 , j = 0 ; int maxNum = 0 ; int M [ 100 ] [ 100 ] ; scanf ( \"%d\" , & numCases ) ; while ( numCases -- ) { scanf ( \"%d\" , & triangleLen ) ; i = 0 ; while ( i < triangleLen ) { int tmp = 0 ; j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & tmp ) ; M [ i ] [ j ] = tmp ; j ++ ; } i ++ ; } i = 1 ; while ( i < triangleLen ) { M [ i ] [ 0 ] += M [ i - 1 ] [ 0 ] ; M [ i ] [ i ] += M [ i - 1 ] [ i - 1 ] ; j = 1 ; while ( j < i ) { M [ i ] [ j ] += max ( M [ i - 1 ] [ j - 1 ] , M [ i - 1 ] [ j ] ) ; ++ j ; } ++ i ; } maxNum = M [ triangleLen - 1 ] [ 0 ] ; for ( i = 1 ; i < triangleLen ; i ++ ) { maxNum = max ( M [ triangleLen - 1 ] [ i ] , maxNum ) ; } printf ( \"%d\n\" , maxNum ) ; } }", "label": 0, "id": 24680}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , b [ 205 ] , i , j , test = 0 , n = 0 ; long int ans ; for ( i = 0 ; i < 205 ; i ++ ) b [ i ] = 0 ; scanf ( \"%d\" , & test ) ; while ( test != 0 ) { scanf ( \"%d\" , & n ) ; while ( n != 0 ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } if ( a [ i ] [ 0 ] > a [ i ] [ 1 ] ) b [ i ] = a [ i ] [ 0 ] ; else b [ i ] = a [ i ] [ 1 ] ; ans += b [ i ] ; } printf ( \"%ld\" , ans ) ; printf ( \"\n\" ) ; } } return 0 ; }", "label": 2, "id": 24968}
{"input": "int main ( ) { int a , n , b , rem , numb , denom ; scanf ( \"%d\" , & n ) ; while ( n != 0 ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { numb = a ; denom = b ; } else { numb = b ; denom = a ; } rem = numb % denom ; while ( rem != 0 ) { numb = denom ; denom = rem ; rem = numb % denom ; } printf ( \"%d \" , denom ) ; printf ( \"%d \n\" , ( ( a * b ) / denom ) ) ; n -- ; } return 0 ; }", "label": 1, "id": 24704}
{"input": "int main ( ) { int t , a , b , c , k , l ; long long g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; k = a ; l = b ; if ( a > b ) { c = a ; a = b ; b = c ; } while ( a != 0 ) { c = b % a ; b = a ; a = c ; } g = ( k * l ) / b ; printf ( \"%d %lld\n\" , b , g ) ; } return 0 ; }", "label": 1, "id": 21518}
{"input": "int main ( ) { int n , i , j , sum = 0 , suma = 0 , re = 0 , esum = 0 , t ; scanf ( \"%d\" , & t ) ; if ( t > 1000 ) return 0 ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( ! ( 0 < a [ i ] [ j ] && a [ i ] [ j ] < 99 ) ) return 0 ; } esum = esum + a [ 0 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( i == j ) { suma = suma + a [ i ] [ j ] ; continue ; } if ( i == n - 1 && j == 0 ) esum = esum + a [ i ] [ j ] ; if ( j == 0 || i == n - 1 ) sum = sum + a [ i ] [ j ] ; } esum = esum + a [ i - 1 ] [ j - 1 ] ; sum = sum + esum ; re = sum - suma ; printf ( \"\nresult=%d\n\" , re ) ; esum = sum = suma = re = 0 ; } return 0 ; }", "label": 1, "id": 17249}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a , m = 0 , t = 0 ; while ( n -- ) { scanf ( \"%d\" , & a ) ; if ( t < a ) m = m + t ; else if ( t > a ) m = m + a ; t = a ; } printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 1, "id": 2964}
{"input": "int main ( ) { int t , i , j , max , k , n , a [ 100 ] [ 100 ] , M [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } M [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { if ( j == k ) M [ j ] [ k ] = M [ j - 1 ] [ k - 1 ] + a [ j ] [ k ] ; else if ( k == 0 ) M [ j ] [ k ] = M [ j - 1 ] [ k ] + a [ j ] [ k ] ; else { if ( ( M [ j - 1 ] [ k ] + a [ j ] [ k ] ) > ( M [ j - 1 ] [ k - 1 ] + a [ j ] [ k ] ) ) M [ j ] [ k ] = M [ j - 1 ] [ k ] + a [ j ] [ k ] ; else M [ j ] [ k ] = M [ j - 1 ] [ k - 1 ] + a [ j ] [ k ] ; } } } max = M [ n - 1 ] [ 0 ] ; for ( k = 1 ; k < n ; k ++ ) { if ( max < M [ n - 1 ] [ k ] ) max = M [ n - 1 ] [ k ] ; } printf ( \"%d\n\" , max ) ; } }", "label": 0, "id": 23835}
{"input": "int trian [ MAX ] [ MAX ] ; int find_max ( int row , int col , int height ) { if ( height == row ) return 0 ; else { int present = trian [ row ] [ col ] ; int bel = find_max ( row + 1 , col , height ) ; int right = find_max ( row + 1 , col + 1 , height ) ; if ( bel > right ) return ( bel + present ) ; else return ( right + present ) ; } } int main ( ) { int cases ; scanf ( \"%d\" , & cases ) ; int i ; for ( i = 0 ; i < cases ; i ++ ) { int height ; scanf ( \"%d\" , & height ) ; int j , k ; for ( j = 0 ; j < height ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & ( trian [ j ] [ k ] ) ) ; printf ( \"%d\n\" , find_max ( 0 , 0 , height ) ) ; } return 0 ; }", "label": 2, "id": 14086}
{"input": "int main ( ) { int a , b , c , x , y , temp , T ; scanf ( \"%d\" , & T ) ; while ( T -- ) ; { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } c = a % b ; while ( c > 0 ) { a = b ; b = c ; c = a % b ; } printf ( \"%d %d\" , b , ( x * y ) / b ) ; } }", "label": 1, "id": 21972}
{"input": "int main ( ) { long long t , a , b , gcd , lcm , min ; scanf ( \"%d\" , & t ) ; for ( ; t > 0 ; t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( a > b ) { min = b ; } else { min = a ; } for ( ; min >= 1 ; min -- ) { if ( a % min == 0 && b % min == 0 ) { gcd = min ; break ; } } lcm = ( a * b ) / ( gcd ) ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } }", "label": 2, "id": 17513}
{"input": "int main ( ) { long int cost ; int t , i , j , n , temp ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; long int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & arr [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n && arr [ j ] > arr [ j + 1 ] ) { temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } } cost = arr [ 0 ] * ( n - 1 ) ; printf ( \"%ld\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 24720}
{"input": "long long int gcd ( long long int a , int b ) ; int main ( void ) { long long int t , a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%lld %lld\n\" , g , l ) ; } return 0 ; } long long int gcd ( long long int a , int b ) { if ( a == 0 || b == 0 ) { return 0 ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; }", "label": 0, "id": 22375}
{"input": "int main ( void ) { int t , m = 0 , i , j , n ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int ar [ j ] ; for ( j = 1 ; j < n ; j ++ ) { if ( ar [ j - 1 ] < ar [ j ] ) m ++ ; } printf ( \"%d\" , m + n ) ; } return 0 ; }", "label": 3, "id": 5536}
{"input": "int main ( ) { int t , i , j , c = 0 ; long int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = 0 ; scanf ( \"%d\" , & n ) ; long int a [ n ] ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { if ( a [ i ] <= a [ j ] && a [ j ] < a [ j + 1 ] ) c ++ ; } } printf ( \"%d\" , c ) ; } return 0 ; }", "label": 3, "id": 16631}
{"input": "int main ( ) { int t , n , i , a [ 50001 ] , min ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { min = 100005 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , ( min * ( n - 1 ) ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 22980}
{"input": "int main ( ) { int t , x , count ; scanf ( \"%d\" , & t ) ; x = t ; for ( count = 1 ; count <= t ; count ++ ) { int i , j , k , no , sum = 0 , temp , x ; scanf ( \"%d\" , & i ) ; for ( j = 1 ; j <= i ; j ++ ) { temp = 0 ; for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & no ) ; temp = temp + no ; } if ( sum < temp ) sum = temp ; } if ( count % 2 == 0 ) printf ( \"%d\n\" , sum + count ) ; else printf ( \"%d\n\" , sum - count ) ; } return 0 ; }", "label": 1, "id": 18904}
{"input": "int n ; long int func ( int row , int col , int arr [ ] [ n ] , long int cache [ ] [ n ] ) { long int val1 , val2 , choose , temp ; if ( row >= n ) return 0 ; if ( cache [ row ] [ col ] != 0 ) return cache [ row ] [ col ] ; val1 = func ( row + 1 , col , arr , cache ) ; val2 = func ( row + 1 , col + 1 , arr , cache ) ; choose = ( ( val1 > val2 ) ? val1 : val2 ) ; temp = arr [ row ] [ col ] + choose ; cache [ row ] [ col ] = temp ; return temp ; } int main ( ) { int t , i , j ; long int ans ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; long int cache [ 101 ] [ 101 ] = { 0 } ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; ans = func ( 0 , 0 , arr , cache ) ; printf ( \"%ld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 4074}
{"input": "long int gcd ( long int a , long int b ) { if ( b != 0 ) return gcd ( b , a % b ) ; else return a ; } long long int lcm ( int a , int b ) { return ( ( a * b ) / gcd ( a , b ) ) ; } int main ( ) { int n , i ; long long int a [ 1000 ] , b [ 1000 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld%ld\" , & a [ i ] , & b [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%ld %lld\n\" , gcd ( a [ i ] , b [ i ] ) , lcm ( a [ i ] , b [ i ] ) ) ; } return 0 ; }", "label": 1, "id": 2606}
{"input": "int arr [ 100 ] [ 100 ] , n , i , j ; int main ( ) { int sum = 0 , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } j = 0 ; i = 0 ; sum = sum + arr [ i ] [ j ] ; while ( i < n ) { if ( arr [ i + 1 ] [ j ] >= arr [ i + 1 ] [ j + 1 ] ) sum = sum + arr [ i + 1 ] [ j ] ; else { sum = sum + arr [ i + 1 ] [ j + 1 ] ; j = j + 1 ; } i ++ ; } printf ( \"\n%d\" , sum ) ; } return 0 ; }", "label": 1, "id": 217}
{"input": "int main ( ) { int n , k , l , i , j , a [ 100 ] [ 100 ] , max , ans [ 100 ] ; scanf ( \"%d\" , & k ) ; for ( l = 0 ; l < k ; l ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) a [ i + 1 ] [ j ] += a [ i ] [ j ] ; if ( j == i ) a [ i + 1 ] [ j + 1 ] += a [ i ] [ j ] ; if ( j < i ) a [ i + 1 ] [ j + 1 ] += ( ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ) ; } } max = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( max < a [ n - 1 ] [ i ] ) max = a [ n - 1 ] [ i ] ; } ans [ l ] = max ; } for ( i = 0 ; i < k ; i ++ ) printf ( \"\n%d\" , ans [ i ] ) ; printf ( \"\n\" ) ; return 0 ; }", "label": 1, "id": 21849}
{"input": "main ( ) { int n , i , j , k , m ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] , s [ n ] ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & m ) ; for ( j = 1 ; j <= m ; j ++ ) for ( i = 0 ; i < j ; i ++ ) scanf ( \"%d\" , & a [ j - 1 ] [ i ] ) ; s [ k ] = sum ( a , m ) ; } for ( k = 0 ; k < n ; k ++ ) printf ( \"%d\n\" , s [ k ] ) ; return 0 ; } int sum ( int a [ 100 ] [ 100 ] , int n ) { int i , j ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } return a [ 0 ] [ 0 ] ; }", "label": 3, "id": 7562}
{"input": "main ( ) { int t , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 13254}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 15970}
{"input": "int max ( int a , int b ) { if ( a > b ) { return a ; } else return b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int arra [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arra [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { arra [ i - 1 ] [ j ] = arra [ i - 1 ] [ j ] + max ( arra [ i ] [ j ] , arra [ i ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arra [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 13855}
{"input": "int main ( ) { int A , a , B , b , r , t = 0 , i , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; a = A ; b = B ; r = 1 ; while ( r != 0 ) { r = a % b ; a = b ; b = r ; } gcd = a ; lcm = gcd * ( A / gcd ) * ( B / gcd ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 871}
{"input": "int main ( void ) { int a , b , c , d , lcm , gcd , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; d = a * b ; for ( c = 1 ; c <= d ; c ++ ) { if ( ( c % a == 0 ) && ( c % b == 0 ) ) { lcm = c ; break ; } } gcd = lcm / d ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 10765}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , maxi , a [ 1000 ] [ 1000 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } if ( n == 1 ) printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; else { for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) if ( j == 0 ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; } else if ( j == i ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; } else a [ i ] [ j ] = max ( a [ i ] [ j ] + a [ i - 1 ] [ j ] , a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ) ; maxi = a [ n - 1 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) if ( a [ n - 1 ] [ i ] >= maxi ) maxi = a [ n - 1 ] [ i ] ; printf ( \"%d\n\" , maxi ) ; } } return 0 ; }", "label": 0, "id": 17568}
{"input": "int main ( ) { int t , a , b , rem , den , num , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; num = 0 , den = 0 , rem = 0 , gcd = 0 , lcm = 0 ; } return 0 ; }", "label": 1, "id": 612}
{"input": "int main ( ) { int s , t , n , temp , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { s = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; s += temp ; } else s += a [ i + 1 ] ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 22389}
{"input": "int main ( ) { int t ; long long int n , i , cnt , a , b , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { r = 1 , cnt = 1 ; scanf ( \"%lld\" , & n ) ; scanf ( \"%lld\" , & a ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & b ) ; if ( b > a ) cnt = cnt + 1 ; else cnt = 1 ; r = r + cnt ; a = b ; } printf ( \"%lld\n\" , r ) ; } return 0 ; }", "label": 0, "id": 14632}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b , num , den , rem , lcm , gcd ; scanf ( \"%ld%ld\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } if ( b > a ) { num = b ; den = a ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } }", "label": 0, "id": 24001}
{"input": "int main ( ) { int T , N , A [ 20 ] , i , j , small , sum = 0 ; scanf ( \"%d\" , & T ) ; for ( j = 1 ; j <= T ; j ++ ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } small = A [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) { if ( A [ i ] < small ) small = A [ i ] ; } for ( i = 0 ; i < N - 1 ; i ++ ) { sum = sum + small ; } printf ( \"\n%d\" , sum ) ; } return 0 ; }", "label": 3, "id": 22073}
{"input": "int main ( ) { int test_cases , num_rows , temp , i , j ; scanf ( \"%d\" , & test_cases ) ; for ( i = 0 ; i < test_cases ; i ++ ) { scanf ( \"%d\" , & num_rows ) ; int list [ num_rows * ( num_rows + 1 ) / 2 ] ; for ( j = 0 ; j < num_rows * ( num_rows + 1 ) / 2 ; j ++ ) { scanf ( \"%d\" , & temp ) ; list [ j ] = temp ; } max_path ( list , num_rows ) ; } return 0 ; } void max_path ( int list [ ] , int rows ) { int i , j ; for ( i = rows - 1 ; i > 0 ; i -- ) { for ( j = i * ( i + 1 ) / 2 ; j > i * ( i - 1 ) / 2 ; j -- ) { if ( list [ j - 1 + i ] > list [ j - 1 + i + 1 ] ) list [ j - 1 ] = list [ j - 1 ] + list [ j - 1 + i ] ; else list [ j - 1 ] = list [ j - 1 ] + list [ j - 1 + i + 1 ] ; } } printf ( \"%d\n\" , list [ 0 ] ) ; }", "label": 0, "id": 22048}
{"input": "int GCD ( int A , int B ) { int reminder ; if ( B > A ) { int temp ; temp = A ; A = B ; B = temp ; } while ( B ) { reminder = A % B ; A = B ; B = reminder ; } return A ; } int LCM ( int A , int B ) { return ( A * B ) / GCD ( A , B ) ; } int main ( void ) { int T , A , B ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d%d\" , & A , & B ) ; printf ( \"%d %d\n\" , GCD ( A , B ) , LCM ( A , B ) ) ; } return 0 ; }", "label": 1, "id": 14992}
{"input": "int main ( ) { long int n , a [ 50001 ] ; int t , i , cost ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; cost = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { cost += a [ i + 1 ] ; } if ( a [ i ] < a [ i + 1 ] ) { cost += a [ i ] ; a [ i + 1 ] = a [ i ] ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 25217}
{"input": "int main ( ) { int t , i , min = 0 , n ; int a [ 500000 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i == 0 ) min = a [ i ] ; else { if ( a [ i ] < min ) { min = a [ i ] ; } } } printf ( \"%d\n\" , min * ( n - 1 ) ) ; t -- ; min = 0 ; } return 0 ; }", "label": 0, "id": 10132}
{"input": "int max ( int a , int b ) ; int main ( void ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int x , j , k ; scanf ( \"%d\" , & x ) ; int angka [ x ] [ x + 1 ] ; for ( j = 0 ; j < x ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & angka [ j ] [ k ] ) ; } } for ( j = x - 1 ; j > 0 ; j -- ) { for ( k = 0 ; k < j ; k ++ ) { angka [ j - 1 ] [ k ] += max ( angka [ j ] [ k ] , angka [ j ] [ k + 1 ] ) ; } } printf ( \"%d\n\" , angka [ 0 ] [ 0 ] ) ; } } int max ( int a , int b ) { if ( b > a ) return b ; return a ; }", "label": 0, "id": 26006}
{"input": "int main ( ) { int nodes [ 5000 ] ; int results [ 1005 ] ; int i , j , k , temp ; char line [ 500 ] ; int testcases ; int maxlevel ; scanf ( \"%d\" , & testcases ) ; int testcases1 = testcases ; while ( testcases1 > 0 ) { scanf ( \"%d\" , & maxlevel ) ; getchar ( ) ; j = 0 , temp = 0 ; for ( k = 0 ; k < maxlevel ; k ++ ) { gets ( line ) ; for ( i = 0 ; i < strlen ( line ) + 1 ; i ++ ) { if ( line [ i ] != ' ' && line [ i ] != 0 ) { temp = ( temp * 10 ) + ( line [ i ] - 48 ) ; } else { nodes [ j ] = temp ; temp = 0 ; j ++ ; } } } j = ( ( maxlevel * ( maxlevel - 1 ) ) / 2 ) - 1 ; for ( i = 1 ; i < maxlevel ; i ++ ) { for ( k = 0 ; k < ( maxlevel - i ) ; k ++ ) { nodes [ j ] += nodes [ j + maxlevel - i ] >= nodes [ j + maxlevel - i + 1 ] ? nodes [ j + maxlevel - i ] : nodes [ j + maxlevel - i + 1 ] ; j -- ; } } results [ testcases1 ] = nodes [ 0 ] ; testcases1 -- ; } while ( testcases > 0 ) { printf ( \"%d\n\" , results [ testcases ] ) ; testcases -- ; } return 0 ; }", "label": 1, "id": 162}
{"input": "int gcd ( int n , int m ) { if ( n % m != 0 ) return gcd ( m , n % m ) ; else return m ; } int main ( ) { int t , n , m , x ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & n , & m ) ; if ( n < m ) { n = n + m ; m = n - m ; n = n - m ; } x = gcd ( n , m ) ; printf ( \"%d %d\n\" , x , n * m / x ) ; } return 0 ; }", "label": 1, "id": 8252}
{"input": "int scan ( ) { char ch = get ( ) ; int n = 0 ; while ( ch < '0' || ch > '9' ) ch = get ( ) ; while ( ch <= '9' && ch >= '0' ) { n = ( n << 3 ) + ( n << 1 ) + ch - '0' ; ch = get ( ) ; } return n ; } int main ( ) { int T , N , i ; T = scan ( ) ; while ( T -- ) { N = scan ( ) ; int array [ N ] , count = 1 , res = 0 ; for ( i = 0 ; i < N ; i ++ ) array [ i ] = scan ( ) ; if ( N == 1 ) printf ( \"%d\n\" , count ) ; else { for ( i = 1 ; i < N ; i ++ ) { if ( array [ i ] > array [ i - 1 ] ) count ++ ; else { res += count * ( count + 1 ) / 2 ; count = 1 ; } } res += count * ( count + 1 ) / 2 ; printf ( \"%d\n\" , res ) ; } } return 0 ; }", "label": 0, "id": 22198}
{"input": "int main ( ) { long long int i , j , a , b , k , l , m , n , o , c [ 1000 ] , d [ 1000 ] ; scanf ( \"%lld\" , & i ) ; for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; l = 0 ; if ( a < b ) k = a ; else k = b ; for ( m = 2 ; m <= k ; m ++ ) { if ( ( a % m == 0 ) && ( b % m == 0 ) ) l = 1 ; n = m ; } if ( l == 0 ) n = 1 ; c [ j ] = n ; if ( a > b ) k = a ; else k = b ; for ( m = k ; m <= a * b ; m ++ ) { if ( ( m % a == 0 ) && ( m % b == 0 ) ) { o = m ; break ; } } d [ j ] = o ; } for ( j = 0 ; j < i ; j ++ ) { printf ( \"%lld %lld\" , c [ j ] , d [ j ] ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 2, "id": 12818}
{"input": "int main ( ) { int l , n , i , j , p ; int a [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & l ) ; for ( p = 1 ; p <= l ; p ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22222}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } if ( a == 0 ) { return b ; } if ( a % b == 0 ) { return b ; } else { return gcd ( b , a % b ) ; } } int lcm ( int a , int b ) { int s = gcd ( a , b ) ; int p = ( a * b ) / s ; return p ; } int main ( void ) { int t , a , b ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 11950}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int ar [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) ar [ i - 1 ] [ j ] += ar [ i ] [ j ] > ar [ i ] [ j + 1 ] ? ar [ i ] [ j ] : ar [ i ] [ j + 1 ] ; printf ( \"%d\" , ar [ 0 ] [ 0 ] ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 0, "id": 16303}
{"input": "int countmax = 0 ; void pathfind ( int * head , int n , int count ) { if ( n == 0 ) { if ( count > countmax ) countmax = count ; count = 0 ; return ; } count = count + * head ; pathfind ( head + 100 , n - 1 , count ) ; pathfind ( head + 101 , n - 1 , count ) ; } int main ( ) { int t , n , m , i , j , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; m = t ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } pathfind ( & arr [ 0 ] [ 0 ] , m , 0 ) ; printf ( \"%d\n\" , countmax ) ; countmax = 0 ; } return 0 ; }", "label": 2, "id": 10153}
{"input": "long int minimum ( int a , int b ) ; long int larger ( int a , int b ) ; int n , arr [ 100 ] [ 100 ] ; int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } printf ( \"%ld\n\" , minimum ( 0 , 0 ) ) ; } return 0 ; } long int minimum ( int a , int b ) { if ( a == n - 1 ) return arr [ a ] [ b ] ; long int c = arr [ a ] [ b ] + larger ( minimum ( a + 1 , b + 1 ) , minimum ( a + 1 , b ) ) ; return c ; } long int larger ( int a , int b ) { long int c = a > b ? a : b ; return c ; }", "label": 2, "id": 20136}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int s ; scanf ( \"%d\" , & s ) ; int a [ s ] ; for ( int i = 1 ; i <= s ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( int i = 1 ; i <= s ; i ++ ) { for ( int j = i + 1 ; j <= s ; j ++ ) { if ( a [ i ] > a [ j ] ) { int t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } } } if ( s == 1 ) printf ( \"%d\n\" , a [ 1 ] ) ; else { int a1 = a [ 1 ] ; int sum = 0 , b ; for ( int i = 2 ; i <= s ; i ++ ) { b = a [ i ] ; if ( a1 > b ) { sum = sum + b ; a1 = b ; } else sum = sum + a1 ; } printf ( \"%d\n\" , sum ) ; } } return 0 ; }", "label": 2, "id": 17657}
{"input": "int main ( void ) { int t , n , i , j , cost ; long a [ 20 ] ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { cost = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i + 1 ] > a [ i ] ) { cost += a [ i ] ; a [ i + 1 ] = a [ i ] ; } else cost += a [ i + 1 ] ; } printf ( \"%d\" , cost ) ; } return 0 ; }", "label": 3, "id": 8958}
{"input": "void gcdlcm ( ) ; int main ( ) { gcdlcm ( ) ; return 0 ; } void gcdlcm ( ) { int T ; long A , B , i , min , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%ld%ld\" , & A , & B ) ; min = ( A < B ) ? A : B ; for ( i = 1 ; i <= min ; i ++ ) { if ( A % i == 0 && B % i == 0 ) { gcd = i ; } } lcm = ( A * B ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } }", "label": 2, "id": 15374}
{"input": "int main ( ) { int t , max , i , j ; int a [ 100 ] [ 100 ] ; for ( scanf ( \"%d\" , & t ) ; t -- ; ) { scanf ( \"%d\" , & max ) ; for ( i = 0 ; i < max ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = max - 1 ; i > 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; printf ( \"%d\n\" , * * a ) ; } return 0 ; }", "label": 0, "id": 1607}
{"input": "int main ( ) { int t , n , a [ n ] , min , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 19515}
{"input": "int a [ 105 ] [ 105 ] = { 0 } ; rec ( int i ) { int j ; for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } if ( i > 0 ) rec ( -- i ) ; } int main ( ) { int n , i , j , m ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; rec ( m - 2 ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; for ( i = 0 ; i < 105 ; i ++ ) for ( j = 0 ; j < 105 ; j ++ ) a [ i ] [ j ] = 0 ; } return 0 ; }", "label": 0, "id": 2734}
{"input": "void main ( ) { int cases , n , i , j , t , ans ; i = j = 0 ; t = 1 ; long temp1 , temp2 ; scanf ( \"%d\" , & cases ) ; for ( ; i < cases ; i ++ ) { scanf ( \"%d\" , & n ) ; ans = 0 ; t = 1 ; scanf ( \"%li\" , & temp1 ) ; for ( ; j < n - 1 ; j ++ ) { scanf ( \"%li\" , & temp2 ) ; if ( temp1 <= temp2 ) t ++ ; else { ans += t * ( t + 1 ) / 2 ; t = 1 ; } temp1 = temp2 ; } ans += t * ( t + 1 ) / 2 ; printf ( \"%d\n\" , ans ) ; } }", "label": 2, "id": 9897}
{"input": "int main ( ) { long long int t , n , arr [ 50000 ] , i , min = 999999 ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; if ( arr [ i ] <= min ) { min = arr [ i ] ; } } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 6827}
{"input": "int main ( ) { int T ; int x , y , a , b , t , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 17706}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b ; scanf ( \"%lld %lld\" , & a , & b ) ; long long int nu ; long long int de ; long long int rem , gcd , lcm ; if ( a > b ) { nu = a ; de = b ; } if ( a < b ) { nu = b ; de = a ; } rem = nu % de ; while ( rem != 0 ) { nu = de ; de = rem ; rem = nu % de ; } gcd = de ; lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 23274}
{"input": "int main ( ) { int T , i ; long int * A , * M , N , j , k , S , L ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%lu\" , & N ) ; if ( N == 1 ) printf ( \"1\n\" ) ; else { M = malloc ( sizeof ( long int ) * N ) ; A = malloc ( sizeof ( long int ) * N ) ; for ( j = 0 ; j < N ; j ++ ) { * ( M + j ) = 1 ; scanf ( \"%lu\" , ( A + j ) ) ; } j = 0 ; k = 0 ; S = 0 ; while ( j < ( N - 1 ) ) { while ( k < ( N - 1 ) && ( * ( A + k + 1 ) ) >= ( * ( A + k ) ) ) { k ++ ; ( * ( M + j ) ) ++ ; } L = * ( M + j ) ; S = S + ( ( L * ( L + 1 ) ) / 2 ) ; j = k ; j ++ ; k ++ ; if ( j == ( N - 1 ) ) S = S + 1 ; } printf ( \"%lu\n\" , S ) ; free ( A ) ; free ( M ) ; } } return 0 ; }", "label": 0, "id": 4660}
{"input": "int main ( ) { long int i , n , t , x = 0 ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( i == 0 ) x = a [ i ] ; else if ( x > a [ i ] ) { x = a [ i ] ; } } printf ( \"\n%ld\n\" , x * ( n - 1 ) ) ; } return 0 ; }", "label": 1, "id": 22816}
{"input": "int main ( ) { int i , j , n , t , k , sum ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int x [ n ] ; sum = 0 ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & x [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { if ( x [ k ] < x [ j ] ) { int temp = x [ j ] ; x [ j ] = x [ k ] ; x [ k ] = temp ; } } } printf ( \"%d\" , x [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 2966}
{"input": "int main ( ) { long long i , j , t , a , b , x ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( b >= a ) { int j = 2 ; x = b ; while ( x % a != 0 ) { x = b * j ; j ++ ; } printf ( \"%d\n %d\n\" , x , ( a * b ) / x ) ; } if ( a > b ) { int j = 2 ; x = a ; while ( x % b != 0 ) { x = a * j ; j ++ ; } printf ( \"%d\n %d\n\" , x , ( a * b ) / x ) ; } } return 0 ; }", "label": 2, "id": 9978}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , b [ 205 ] , i , j , test = 0 , n = 0 ; long int ans ; for ( i = 0 ; i < 205 ; i ++ ) b [ i ] = 0 ; scanf ( \"%d\" , & test ) ; while ( test != 0 ) { scanf ( \"%d\" , & n ) ; while ( n -- ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } if ( a [ i ] [ 0 ] > a [ i ] [ 1 ] ) b [ i ] = a [ i ] [ 0 ] ; else b [ i ] = a [ i ] [ 1 ] ; ans += b [ i ] ; n -- ; } printf ( \"%ld\" , ans ) ; printf ( \"\n\" ) ; } test -- ; } return 0 ; }", "label": 1, "id": 10262}
{"input": "int main ( ) { int t , i , j , val , count ; scanf ( \"%d\" , & t ) ; int n ; while ( t -- ) { count = 0 ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { val = arr [ i ] ; for ( j = i ; j < n ; j ++ ) { if ( val <= arr [ j ] ) { count ++ ; val = arr [ j ] ; } else break ; } } printf ( \"%d\n\" , count ) ; } }", "label": 0, "id": 21990}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\n\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n , j ; scanf ( \"%d\n\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; printf ( \"\n\" ) ; int k = 0 , s = 0 ; while ( k < ( n - 1 ) ) { if ( a [ k ] < a [ k + 1 ] ) { a [ k + 1 ] = a [ k ] ; s = s + a [ k ] ; } else s = s + a [ k + 1 ] ; k ++ ; } printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 1, "id": 17355}
{"input": "int main ( void ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n , j ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } int min = a [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( \"%d\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 1266}
{"input": "int main ( int argc , char * argv [ ] ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { t -- ; int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( j = n - 2 ; j >= 0 ; j -- ) for ( i = 0 ; i <= j ; i ++ ) { a [ j ] [ i ] = a [ j ] [ i ] + ( ( a [ j + 1 ] [ i ] > a [ j + 1 ] [ i + 1 ] ) ? ( a [ j + 1 ] [ i ] ) : ( a [ j + 1 ] [ i + 1 ] ) ) ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5595}
{"input": "int cmpfnc ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int t , n , * a ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i ; scanf ( \"%d\" , & n ) ; a = malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; qsort ( a , n , sizeof ( int ) , cmpfnc ) ; printf ( \"%d\n\" , a [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 6300}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , result = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 6399}
{"input": "int main ( ) { int n , i , j ; unsigned int k , min ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%u\" , & k ) ; unsigned int a [ k ] ; for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%u\" , & a [ j ] ) ; } min = a [ 0 ] ; for ( j = 0 ; j < k ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( \"%u\n\" , ( k - 1 ) * min ) ; } }", "label": 0, "id": 18061}
{"input": "int main ( ) { int n , l , t , i , j , m , sum = 0 , sum1 = 0 , sum2 = 0 , col = 0 , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & l ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { if ( j <= i ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; else a [ i ] [ j ] = 0 ; } } sum = a [ 1 ] [ 1 ] ; col = 1 ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { t = i ; while ( t <= n ) { sum1 += a [ i ] [ col ] ; sum2 += a [ i ] [ col + 1 ] ; t ++ ; } } if ( sum1 >= sum2 ) { m = col ; } else { m = col + 1 ; } sum += a [ i ] [ m ] ; } printf ( \"%d\n\" , sum ) ; n -- ; } return 0 ; }", "label": 3, "id": 21617}
{"input": "int main ( ) { int t , i , j , n , next , prev ; unsigned int ans ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int A [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & A [ j ] ) ; prev = 0 ; next = 1 , ans = 0 ; while ( next < n ) { if ( A [ prev ] > A [ next ] ) { ans += A [ next ] ; prev = next ; next ++ ; } else if ( A [ prev ] < A [ next ] ) { ans += A [ prev ] ; next ++ ; } } printf ( \"%u\n\" , ans ) ; } return 0 ; }", "label": 2, "id": 18330}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , b [ 200 ] [ 200 ] , i , j , k , n , max , N ; scanf ( \"%d\" , & N ) ; while ( N -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { k = 0 ; for ( j = 0 ; j <= i ; j ++ ) { b [ i ] [ k ++ ] = b [ i - 1 ] [ j ] + a [ i ] [ j ] ; b [ i ] [ k ++ ] = b [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } max = b [ n - 1 ] [ 0 ] ; for ( j = 0 ; b [ n - 1 ] [ j ] != 0 ; j ++ ) { if ( max < b [ n - 1 ] [ j ] ) max = b [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 17495}
{"input": "int mat [ 100 ] [ 100 ] ; int maximum ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int testcase , n , i , sum = 0 , max = 0 , j , k ; scanf ( \"%d\" , & testcase ) ; for ( i = 0 ; i < testcase ; i ++ ) { sum = 0 ; max = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( k <= j ) scanf ( \"%d\" , & mat [ j ] [ k ] ) ; else mat [ j ] [ k ] = 0 ; if ( j > 0 && k > 0 ) { mat [ j ] [ k ] = maximum ( mat [ j - 1 ] [ k ] , mat [ j - 1 ] [ k - 1 ] ) + mat [ j ] [ k ] ; } else if ( j > 0 ) { mat [ j ] [ k ] = mat [ j ] [ k ] + mat [ j - 1 ] [ k ] ; } if ( max < mat [ j ] [ k ] ) max = mat [ j ] [ k ] ; } } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 1, "id": 8015}
{"input": "int tree [ 99 ] [ 99 ] ; int maxsum ( int i , int j ) { int sum1 , sum2 , funcsum1 , funcsum2 ; if ( tree [ i + 2 ] [ j ] == '\\0' ) { sum1 = ( tree [ i + 1 ] [ j ] >= tree [ i + 1 ] [ j + 1 ] ) ? ( tree [ i ] [ j ] + tree [ i + 1 ] [ j ] ) : ( tree [ i ] [ j ] + tree [ i + 1 ] [ j + 1 ] ) ; sum2 = ( tree [ i + 1 ] [ j + 1 ] >= tree [ i + 1 ] [ j + 2 ] ) ? ( tree [ i ] [ j ] + tree [ i + 1 ] [ j + 1 ] ) : ( tree [ i ] [ j ] + tree [ i + 1 ] [ j + 2 ] ) ; return ( sum1 >= sum2 ) ? sum1 : sum2 ; } else { return ( tree [ i ] [ j ] + maxsum ( i + 1 , j ) ) >= ( tree [ i ] [ j ] + maxsum ( i + 1 , j + 1 ) ) ? ( tree [ i ] [ j ] + maxsum ( i + 1 , j ) ) : ( tree [ i ] [ j ] + maxsum ( i + 1 , j + 1 ) ) ; } } int main ( ) { int line , i , j , cases , time ; scanf ( \"%d\" , & cases ) ; { for ( time = 1 ; time <= cases ; time ++ ) { scanf ( \"%d\" , & line ) ; for ( i = 0 ; i < line ; i ++ ) { for ( j = 0 ; j < line ; j ++ ) { if ( j <= i ) { scanf ( \"%d\" , & tree [ i ] [ j ] ) ; } else tree [ i ] [ j ] = 0 ; } } tree [ 0 ] [ 1 ] = 0 ; printf ( \"%d\" , maxsum ( 0 , 0 ) ) ; } } return 0 ; }", "label": 2, "id": 125}
{"input": "int main ( ) { int a , i , b , j , k , o = 1 , l , count ; scanf ( \"%d\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { count = 0 ; scanf ( \"%d\" , & b ) ; int c [ b + 1 ] ; for ( j = 1 ; j <= b ; j ++ ) { scanf ( \"%d\" , & c [ j ] ) ; } count = count + b - 1 ; for ( j = 1 ; j <= b ; j ++ ) { for ( k = j ; k <= b ; k ++ ) { for ( l = j ; l < k ; l ++ ) { o = 1 ; if ( c [ l ] > c [ l + 1 ] ) { o = 0 ; break ; } } if ( o == 1 ) { count ++ ; o = 1 ; } } } printf ( \"%d\n\" , count ) ; } return 0 ; }", "label": 2, "id": 25382}
{"input": "int main ( void ) { long int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( \"enter two numbers:\" ) ; scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) { A = numerator ; B = denominator ; } else { A = denominator ; B = numerator ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( \"gcd of %d and %d= %d\" , gcd ) ; printf ( \"lcm of %d and %d =%d\" , lcm ) ; return 0 ; }", "label": 3, "id": 4984}
{"input": "int main ( ) { long t , a , b , m , n , temp , gcd , lcm ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; m = a ; n = b ; while ( n != 0 ) { temp = n ; n = m % n ; m = temp ; } gcd = m ; lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 9000}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long n ; scanf ( \"%lld\" , & n ) ; long long i , arr [ n ] , min = 10000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; if ( min > arr [ i ] ) { min = arr [ i ] ; } } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return ( 0 ) ; }", "label": 0, "id": 18593}
{"input": "int solve ( int a [ 100 ] [ 100 ] , int , int , int ) ; int cache [ 100 ] [ 100 ] ; int main ( ) { int i , j , n , t ; int num [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) cache [ i ] [ j ] = - 1 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & num [ i ] [ j ] ) ; printf ( \"%d\n\" , solve ( num , n , 0 , 0 ) ) ; } return 0 ; } int solve ( int a [ 100 ] [ 100 ] , int n , int i , int j ) { int t , t1 , t2 , temp ; if ( i >= n ) return 0 ; if ( cache [ i ] [ j ] >= 0 ) return cache [ i ] [ j ] ; t1 = solve ( a , n , i + 1 , j ) ; t2 = solve ( a , n , i + 1 , j + 1 ) ; temp = ( t1 > t2 ? t1 : t2 ) ; t = temp + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; }", "label": 0, "id": 21591}
{"input": "int main ( ) { int i , n , x , size , count ; scanf ( \"%d\" , & n ) ; for ( x = 0 ; x < n ; x ++ ) { count = 0 ; scanf ( \"%d\" , & size ) ; long arr [ size ] ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; } for ( i = 0 ; i < size - 1 ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) count ++ ; } printf ( \"%d\" , size + count ) ; } return 0 ; }", "label": 1, "id": 26455}
{"input": "int main ( void ) { int i , t , n1 , n2 , c , k , m ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { c = 1 ; scanf ( \"%d\" , & n1 ) ; scanf ( \"%d\" , & n2 ) ; if ( n1 > n2 ) { k = n2 ; } else { k = n1 ; } for ( i = 2 ; i <= k ; i ++ ) { if ( n1 % i == 0 && n2 % i == 0 ) { c = i ; } } m = ( n1 / c ) * ( n2 / c ) ; printf ( \"%d %d\n\" , c , c * m ) ; t -- ; } return 0 ; }", "label": 1, "id": 18693}
{"input": "int main ( ) { int i , j , k , t , a , n , arr [ 100 ] ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < ( n * ( n + 1 ) ) / 2 ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 1 ; i < n ; i ++ ) { a = ( ( ( n - i ) * ( n - i - 1 ) ) / 2 ) ; for ( j = 0 ; j < n - i ; j ++ ) arr [ a + j ] += ( arr [ a + n - i + j ] > arr [ a + n - i + 1 + j ] ? arr [ a + n - i + j ] : arr [ a + n - i + 1 + j ] ) ; } printf ( \"%d\n\" , arr [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 21107}
{"input": "int main ( ) { int t , n , i , j , a [ 50 ] [ 50 ] , s1 , s2 ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < n - 1 ; j ++ ) { s1 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; s2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 2 ] ; if ( s1 > s2 ) a [ i ] [ j ] = s1 ; else a [ i ] [ j ] = s2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 3, "id": 11297}
{"input": "struct newArray { int value ; int weight ; } ; int max ( int a , int b ) { return a > b ? a : b ; } int max_array ( int * b , int n ) { int i , x = b [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( x < b [ i ] ) { x = b [ i ] ; } } return x ; } int main ( ) { int n , i , j , k ; scanf ( \"%d\" , & n ) ; int A [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; struct newArray B [ A [ i ] ] [ A [ i ] ] ; int C [ A [ i ] ] ; for ( j = 0 ; j < A [ i ] ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & B [ j ] [ k ] . value ) ; if ( j == 0 && k == 0 ) { B [ j ] [ k ] . weight = B [ j ] [ k ] . value ; } else if ( k == 0 ) { B [ j ] [ k ] . weight = B [ j - 1 ] [ k ] . weight + B [ j ] [ k ] . value ; } else if ( j == k ) { B [ j ] [ k ] . weight = B [ j - 1 ] [ k - 1 ] . weight + B [ j ] [ k ] . value ; } else { B [ j ] [ k ] . weight = max ( B [ j - 1 ] [ k ] . weight , B [ j - 1 ] [ k - 1 ] . weight ) + B [ j ] [ k ] . value ; } C [ k ] = B [ j ] [ k ] . weight ; } } A [ i ] = max_array ( C , A [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( \"%d\n\" , A [ i ] ) ; } return 0 ; }", "label": 0, "id": 18297}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 20279}
{"input": "long long gcd ( long long a , long long b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { long long t ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { long long a , b , k ; scanf ( \"%lld%lld\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , k , ( a * b ) / k ) ; } return 0 ; }", "label": 0, "id": 24841}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; long int a ; long int b ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld %ld\n\" , & a , & b ) ; long int gcd ; long long int lcm ; for ( int i = 1 ; i <= a && i <= b ; i ++ ) if ( a % i == 0 && b % i == 0 ) { gcd = i ; } lcm = a * b / gcd ; printf ( \"%lld %ld\n\" , lcm , gcd ) ; } return 0 ; }", "label": 2, "id": 14098}
{"input": "int main ( void ) { int n , i , t , j , k , p , q ; int x [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & t ) ; for ( j = 1 ; j <= t ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & x [ j ] [ k ] ) ; } } for ( p = t - 1 ; p >= 1 ; p -- ) { for ( q = 1 ; q <= p ; q ++ ) { x [ p ] [ q ] = x [ p ] [ q ] + ( x [ p + 1 ] [ q ] > x [ p + 1 ] [ q + 1 ] ? x [ p + 1 ] [ q ] : x [ p + 1 ] [ q + 1 ] ) ; } } printf ( \"%d\n\" , x [ 1 ] [ 1 ] ) ; } }", "label": 3, "id": 24070}
{"input": "main ( ) { int test , n , i , sum ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; int ans [ n ] ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } ans [ 0 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] < a [ i ] ) ans [ i ] = ans [ i - 1 ] + 1 ; else ans [ i ] = 1 ; sum += ans [ i ] ; } printf ( \"%d\n\" , sum + 1 ) ; } }", "label": 0, "id": 26471}
{"input": "int main ( ) { long int t , a , i , min , ar [ 50000 ] ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { min = 100000 ; scanf ( \"%ld\" , & a ) ; for ( i = 0 ; i < a ; i ++ ) { scanf ( \"%ld\" , & ar [ i ] ) ; if ( ar [ i ] < min ) min = ar [ i ] ; } printf ( \"%ld\n\" , min * ( a - 1 ) ) ; } }", "label": 0, "id": 4692}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , a , b , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%d %d\n\" , c , ( a * b ) / c ) ; } return 0 ; }", "label": 1, "id": 25691}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , n ; long long int sum = 0 , k = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; int x = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] >= x ) { x = a [ i ] ; k ++ ; } else { x = a [ i ] ; sum += ( k * ( k + 1 ) ) / 2 ; k = 1 ; } } sum += ( k * ( k + 1 ) ) / 2 ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 10226}
{"input": "int main ( ) { int A [ 1000 ] , i , j , k , T ; int N ; scanf ( \"%d\" , & T ) ; while ( T ) { scanf ( \"%d\" , & N ) ; for ( i = 1 ; i <= N ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } k = A [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { if ( A [ i ] < k ) { k = A [ i ] ; } } k *= N - 1 ; printf ( \"%d\n\" , k ) ; T -- ; } }", "label": 3, "id": 4403}
{"input": "int max ( int a , int b ) { return a >= b ? a : b ; } int a [ 100 ] [ 100 ] ; int main ( void ) { int t , n , i , j , k , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; sum = - 1 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( n == 1 ) { printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; continue ; } if ( a [ 0 ] [ 0 ] > sum ) sum = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { a [ i ] [ 0 ] += a [ i - 1 ] [ 0 ] ; if ( a [ i ] [ 0 ] > sum ) sum = a [ i ] [ 0 ] ; } a [ 1 ] [ 1 ] = a [ 1 ] [ 1 ] + a [ 0 ] [ 0 ] ; if ( a [ 1 ] [ 1 ] > sum ) sum = a [ 1 ] [ 1 ] ; for ( i = 2 ; i < n ; i ++ ) { for ( j = 1 ; j < i + 1 ; j ++ ) { if ( i == j ) a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else a [ i ] [ j ] = max ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; if ( a [ i ] [ j ] > sum ) sum = a [ i ] [ j ] ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 7794}
{"input": "int main ( ) { int a [ 10000 ] [ 10000 ] , i , j , n , max , x , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; max = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { x = a [ i ] [ j ] + a [ i + 1 ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( x > max ) max = x ; } } printf ( \"%d\n\" , max ) ; } }", "label": 3, "id": 2053}
{"input": "int main ( ) { int t , i , j , k , a , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; int arr [ a ] [ a ] ; for ( j = 0 ; j < a ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } } int ar [ a ] ; for ( i = 0 ; i < a ; i ++ ) { for ( i = 0 ; i < a ; i ++ ) { ar [ i ] = ar [ i ] + arr [ j ] [ i ] ; } } m = ar [ 0 ] ; for ( i = 0 ; i < a ; i ++ ) { if ( ar [ i ] > m ) { m = ar [ i ] ; } } printf ( \"%d \n\" , m ) ; } return 0 ; }", "label": 2, "id": 6982}
{"input": "int main ( void ) { int test ; long long int n , i , a [ 50000 ] ; scanf ( \"%d\" , & test ) ; long int min ; long long int ans ; while ( test -- ) { scanf ( \"%lld\" , & n ) ; scanf ( \"%lld\" , & a [ 0 ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } ans = ( n - 1 ) * min ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 4495}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int a , b , x , y , t , gcd , lcm ; scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { t = y ; y = x % y ; x = t ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 3415}
{"input": "struct myvar { int a ; int b ; } ; typedef struct myvar myvar ; int sumtobase ( myvar * * intpyr , int row , int col , int size ) { if ( intpyr [ row ] [ col ] . b != 0 ) return intpyr [ row ] [ col ] . b ; else { int way1 , way2 ; way1 = intpyr [ row ] [ col ] . a + sumtobase ( intpyr , row + 1 , col + 1 , size ) ; way2 = intpyr [ row ] [ col ] . a + sumtobase ( intpyr , row + 1 , col , size ) ; if ( way1 > way2 ) { intpyr [ row ] [ col ] . b = way1 ; return way1 ; } else { intpyr [ row ] [ col ] . b = way2 ; return way2 ; } } } int main ( ) { int itr ; int size ; myvar * * pyramid ; int * ans , i ; scanf ( \"%d\" , & itr ) ; ans = ( int * ) malloc ( itr * sizeof ( int ) ) ; for ( i = 0 ; i < itr ; i ++ ) { int j , k = 0 ; char temp ; scanf ( \"%d\" , & size ) ; pyramid = ( myvar * * ) malloc ( size * sizeof ( myvar * ) ) ; for ( j = 0 ; j < size ; j ++ ) { pyramid [ j ] = ( myvar * ) malloc ( ( j + 1 ) * sizeof ( myvar ) ) ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & pyramid [ j ] [ k ] . a ) ; pyramid [ j ] [ k ] . b = 0 ; } } for ( k = 0 ; k < size ; k ++ ) pyramid [ size - 1 ] [ k ] . b = pyramid [ size - 1 ] [ k ] . a ; ans [ i ] = sumtobase ( pyramid , 0 , 0 , size - 1 ) ; } for ( i = 0 ; i < itr ; i ++ ) printf ( \"%d\n\" , ans [ i ] ) ; return 0 ; }", "label": 3, "id": 9859}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; do { int n , max ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; max = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( max > a [ i ] ) { max = a [ i ] ; } } long long int sum = max * ( n - 1 ) ; t = t - 1 ; printf ( \"%lld\n\" , sum ) ; } while ( t > 0 ) ; return 0 ; }", "label": 0, "id": 9354}
{"input": "int main ( ) { long int t , n , i , ar [ 50001 ] , min ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & ar [ i ] ) ; min = ar [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( ar [ i ] < min ) min = ar [ i ] ; } printf ( \"%ld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 22726}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 21382}
{"input": "int pos ( int a , int b ) { return ( ( a * ( a + 1 ) ) / 2 ) + b ; } int main ( ) { int number_oflines , number , number1 , i , po , a , b ; scanf ( \"%d\" , & number_oflines ) ; while ( number_oflines -- ) { i = 0 ; scanf ( \"%d\" , & number ) ; number1 = ( number * ( number + 1 ) ) / 2 ; int arr [ number1 ] ; while ( i < number1 ) { scanf ( \"%d\" , arr + i ) ; ++ i ; } while ( -- number ) { i = 0 ; while ( i < number ) { po = pos ( number - 1 , i ) ; a = arr [ po + number ] ; b = arr [ po + number + 1 ] ; arr [ po ] += ( a >= b ? a : b ) ; ++ i ; } } printf ( \"%d\n\" , arr [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7183}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int a [ 101 ] [ 101 ] ; int max_sum ( int n ) { int i , j , k ; int temp = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( j == 0 ) { a [ i + 1 ] [ j ] += a [ i ] [ j ] ; } a [ i + 1 ] [ j + 1 ] = max ( ( a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ) , ( a [ i + 1 ] [ j + 1 ] + a [ i ] [ j + 1 ] ) ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( a [ n - 1 ] [ i ] >= temp ) { temp = a [ n - 1 ] [ i ] ; } } printf ( \"%d\n\" , temp ) ; } int main ( ) { int t , n , i , j , k ; int temp = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } max_sum ( n ) ; } return 0 ; }", "label": 0, "id": 15686}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n1 , n2 , n = 0 , d = 0 , gcd = 0 , lcm = 0 , r = 0 ; scanf ( \"%d%d\" , & n1 , & n2 ) ; if ( n1 > n2 ) { n = n1 ; d = n2 ; } else { n = n2 ; d = n1 ; } r = n1 % n2 ; while ( r != 0 ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 9120}
{"input": "int a [ 1000 ] [ 1000 ] , n , m [ 100 ] [ 100 ] ; int solve ( int p , int q ) { int t1 , t2 , t ; if ( p > n ) return 0 ; if ( m [ p ] [ q ] != - 1 ) return m [ p ] [ q ] ; t1 = solve ( p + 1 , q ) ; t2 = solve ( p + 1 , q + 1 ) ; if ( t1 > t2 ) t = t1 + a [ p ] [ q ] ; else t = t2 + a [ p ] [ q ] ; m [ p ] [ q ] = t ; return t ; } int main ( ) { int t , i , j , k , c ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) m [ j ] [ k ] = - 1 ; } for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } c = solve ( 0 , 0 ) ; printf ( \"%d\n\" , c ) ; } }", "label": 0, "id": 16110}
{"input": "int main ( ) { int t ; float q , p , price ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%f%f\" , & q , & p ) ; price = q * p ; if ( q >= 1000 ) { price *= 0.9 ; } printf ( \"%.6f\n\" , price ) ; } return 0 ; }", "label": 1, "id": 20441}
{"input": "int gcd ( int a , int b ) { while ( b % a != 0 ) { int r = b % a ; b = a ; a = r ; } return a ; } int lcm ( int a , int b ) { int f ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } for ( int i = b ; i <= a * b ; i = i + b ) if ( i % a == 0 && i % b == 0 ) f = i ; return f ; } main ( ) { int a , b , t , lcd [ 1000 ] [ 2 ] ; scanf ( \"%d\" , & t ) ; for ( int i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; lcd [ i ] [ 0 ] = gcd ( a , b ) ; lcd [ i ] [ 1 ] = lcm ( a , b ) ; } for ( int i = 1 ; i <= t ; i ++ ) printf ( \"%d %d\n\" , lcd [ i ] [ 0 ] , lcd [ i ] [ 1 ] ) ; }", "label": 1, "id": 13512}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%dn\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 7226}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d%d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 15516}
{"input": "int main ( void ) { long long int t , i ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long long int a , b , x1 , x2 , lcm ; scanf ( \"%lld%lld\" , & x1 , & x2 ) ; a = x1 ; b = x2 ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } lcm = ( x1 * x2 ) / a ; printf ( \"%lld %lld\n\" , a , lcm ) ; } return 0 ; }", "label": 0, "id": 23050}
{"input": "int eculid ( int , int ) ; int main ( void ) { int t , a , b , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\n\" , & a , & b ) ; gcd = ( a > b ) ? euclid ( a , b ) : euclid ( b , a ) ; lcm = a * b / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; } int euclid ( int a , int b ) { if ( a == 0 ) return b ; else if ( b == 0 ) return a ; else return euclid ( b , a % b ) ; }", "label": 1, "id": 8207}
{"input": "int gcd ( int m , int n ) { if ( m < n ) { if ( m == 0 ) return n ; else return ( gcd ( m , n % m ) ) ; } else { if ( n == 0 ) return m ; else return ( gcd ( n , m % n ) ) ; } } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; int a , b , r , l ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; r = gcd ( a , b ) ; l = ( a * b ) / r ; printf ( \"%d %d\n\" , r , l ) ; } return 0 ; }", "label": 1, "id": 14935}
{"input": "int arr_max ( int arr [ ] , int len ) { int i , max = arr [ 0 ] ; for ( i = 0 ; i < len ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } return max ; } int main ( ) { int A [ 99 ] [ 99 ] , n , rows , sum , i , j ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { sum = 0 ; scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; } for ( i = 1 ; i < rows ; i ++ ) sum += arr_max ( A [ i ] , i + 1 ) ; printf ( \"%d\n\" , sum ) ; n -- ; } return 0 ; }", "label": 3, "id": 14453}
{"input": "void main ( ) { int t , n , a [ 50000 ] , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; printf ( \"%d\n\" , ( n - 1 ) * min ) ; } }", "label": 0, "id": 11304}
{"input": "int main ( ) { int val [ 105 ] [ 105 ] , a [ 105 ] [ 105 ] , max , i , j , t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } val [ 0 ] [ 0 ] = 0 ; val [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( j == 1 ) val [ i ] [ j ] = val [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( j == n ) val [ i ] [ j ] = val [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else { if ( val [ i - 1 ] [ j ] > val [ i - 1 ] [ j - 1 ] ) val [ i ] [ j ] = val [ i - 1 ] [ j ] + a [ i ] [ j ] ; else val [ i ] [ j ] = val [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } } } max = - 1 ; for ( i = 1 ; i <= n ; i ++ ) if ( val [ n ] [ i ] > max ) max = val [ n ] [ i ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 22630}
{"input": "int main ( ) { int T , tri , ele , sum , i , j , k ; scanf ( \"%d\" , & T ) ; int sum1 [ T ] ; for ( i = 0 ; i < T ; i ++ ) { sum = 0 ; scanf ( \"%d\" , & tri ) ; for ( j = 0 ; j < tri ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & ele ) ; sum = sum + ele ; } } sum1 [ i ] = sum ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%d\n\" , sum1 [ i ] ) ; return 0 ; }", "label": 1, "id": 14661}
{"input": "int main ( ) { int i , j , r , n , x , y ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; int a [ r ] [ r ] ; for ( i = 1 ; i <= r ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = r ; i >= 1 ; i -- ) for ( j = 1 ; j <= i ; j ++ ) { x = a [ i ] [ j ] ; y = a [ i ] [ j + 1 ] ; a [ i - 1 ] [ j ] += ( ( x >= y ) ? x : y ) ; } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 2661}
{"input": "int gcd_ab ( long int , long int ) ; int main ( ) { int t , i , gcd ; long int lcm , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; gcd = gcd_ab ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } } int gcd_ab ( long int a , long int b ) { if ( b == 0 ) return a ; else return gcd_ab ( b , a % b ) ; }", "label": 1, "id": 1348}
{"input": "int main ( ) { int n , lcm , gcd , numerator , denominator , i , num1 , num2 , remainder ; scanf ( \"%d\" , & n ) ; printf ( \"\n\" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 23805}
{"input": "int main ( ) { int t , a , b , gcd , lcm , remainder , numerator , denominator ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = a * b / gcd ; printf ( \"%d\\t%d\\t\" , gcd , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 20498}
{"input": "int main ( ) { int a , b , c , d ; printf ( \"\n enter a,b,c,values\" ) ; scanf ( \"%d%d%d\" , & a , & b , & c ) ; if ( a < b ) { if ( a < c ) printf ( \"\n a is minimum\" ) ; else printf ( \"\n c is minimum\" ) ; } else { if ( b < c ) printf ( \"\n b is minimum\" ) ; else printf ( \"\n c is minimum\" ) ; } }", "label": 1, "id": 6463}
{"input": "int main ( void ) { int T ; long int a , b , gcd , lcm ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int min ; scanf ( \"%ld %ld\" , & a , & b ) ; min = a < b ? a : b ; while ( min -- ) { if ( a % min == 0 && b % min == 0 ) break ; } gcd = min ; lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 11197}
{"input": "main ( ) { int m , i , j , n , p ; long s [ 100 ] [ 100 ] ; scanf ( \"%d\" , & m ) ; while ( m -- ) { printf ( \"\n\" ) ; scanf ( \"%d\" , & n ) ; printf ( \"\n\" ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%ld\" , & s [ i ] [ j ] ) ; for ( i = s - 1 ; i >= 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { p = s [ i ] [ j ] < s [ i ] [ j + 1 ] ? 1 : 0 ; s [ i - 1 ] [ j ] = s [ i ] [ j ] + s [ i - 1 ] [ j ] ; } printf ( \"\n%d\" , s [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 9085}
{"input": "int main ( void ) { int t , i , j , nums [ 99 ] [ 99 ] , line , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & line ) ; for ( i = 0 ; i < line ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & nums [ i ] [ j ] ) ; for ( i = line - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) if ( nums [ i + 1 ] [ j ] >= nums [ i + 1 ] [ j + 1 ] ) { nums [ i ] [ j ] = nums [ i ] [ j ] + nums [ i + 1 ] [ j ] ; } else { nums [ i ] [ j ] = nums [ i ] [ j ] + nums [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\" , nums [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 20301}
{"input": "main ( ) { int T , A , B , X , Y , GCD , rem , LCM ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & A , & B ) ; X = A ; Y = B ; while ( B != 0 ) { rem = A % B ; A = B ; B = rem ; } GCD = A ; LCM = ( X * Y ) / GCD ; printf ( \"\n %d %d\" , GCD , LCM ) ; } }", "label": 1, "id": 22033}
{"input": "int main ( void ) { int t , n , count = 0 , temp = 1 ; int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 1 ; i < n ; i ++ ) { if ( a [ i - 1 ] >= a [ i ] ) { count += ( temp * ( temp + 1 ) ) / 2 ; temp = 1 ; } else { temp ++ ; } } printf ( \"%d\" , count ) ; } return 0 ; }", "label": 1, "id": 8534}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , i , c , gcd , lcm ; scanf ( \"%lld%lld\" , & a , & b ) ; if ( a >= b ) c = b ; else c = a ; for ( i = 1 ; i <= c ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( \"%lld\" , gcd ) ; printf ( \" \" ) ; printf ( \"%lld\" , lcm ) ; printf ( \"\n\" ) ; } }", "label": 2, "id": 22501}
{"input": "int maxi ( int n1 , int n2 ) { if ( n1 >= n2 ) return n1 ; else return n2 ; } int main ( ) { int t , n , i , j ; int ans [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ans [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { ans [ i ] [ j ] = ans [ i ] [ j ] + maxi ( ans [ i + 1 ] [ j ] , ans [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , ans [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22376}
{"input": "long int gcd ( ) ; long int lcm ( ) ; int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { long int a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; printf ( \"%ld %ld\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } return 0 ; } long int gcd ( long int a , long int b ) { long int tmp ; if ( a < b ) { tmp = a ; a = b ; b = tmp ; } while ( a % b != 0 ) { long int xx = a % b ; a = b ; b = xx ; } return b ; } long int lcm ( long int a , long int b ) { long int c = gcd ( a , b ) ; return a * b / c ; }", "label": 0, "id": 15875}
{"input": "int main ( ) { int n , i , j , in [ 100 ] [ 100 ] , a [ 100 ] [ 100 ] = { 0 } , max , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] = 0 ; in [ i ] [ j ] = 0 ; } max = 0 ; } scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } a [ 1 ] [ 1 ] = in [ 1 ] [ 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { a [ i + 1 ] [ j ] = ( ( a [ i ] [ j ] + in [ i + 1 ] [ j ] ) > a [ i + 1 ] [ j ] ) ? ( a [ i ] [ j ] + in [ i + 1 ] [ j ] ) : a [ i + 1 ] [ j ] ; a [ i + 1 ] [ j + 1 ] = ( ( a [ i ] [ j ] + in [ i + 1 ] [ j + 1 ] ) > a [ i + 1 ] [ j + 1 ] ) ? ( a [ i ] [ j ] + in [ i + 1 ] [ j + 1 ] ) : a [ i + 1 ] [ j + 1 ] ; } } for ( i = 1 ; i <= n ; i ++ ) { if ( a [ n ] [ i ] > max ) max = a [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 14768}
{"input": "int maximum ( int b , int c ) ; int main ( ) { unsigned int i , j , a [ 101 ] [ 101 ] ; unsigned int n ; int k ; int t ; unsigned int max [ 101 ] [ 101 ] , max_value ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; if ( n >= 0 && n <= 99 ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } max [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( j == 0 ) { max [ i ] [ j ] = a [ i ] [ j ] + max [ i - 1 ] [ j ] ; } else if ( j == i ) { max [ i ] [ j ] = a [ i ] [ j ] + max [ i - 1 ] [ j - 1 ] ; } else { max [ i ] [ j ] = a [ i ] [ j ] + maximum ( max [ i - 1 ] [ j ] , max [ i - 1 ] [ j - 1 ] ) ; } } } int l_r = n - 1 ; max_value = a [ l_r ] [ 0 ] ; for ( k = 1 ; k < n ; k ++ ) { if ( max [ l_r ] [ k ] > max_value ) { max_value = max [ l_r ] [ k ] ; } } printf ( \"%d\" , max_value ) ; } } return 0 ; } int maximum ( int b , int c ) { if ( b > c ) { return b ; } else { return c ; } }", "label": 1, "id": 1957}
{"input": "int main ( ) { int t , n , c , i , j , jump = 0 ; scanf ( \"%d\" , & t ) ; for ( c = 1 ; c <= t ; c ++ ) { scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } for ( j = 0 ; j <= n - 1 ; ) { for ( i = 0 ; i <= n - 1 ; ) { if ( arr [ j ] - arr [ i ] == 1 || arr [ j ] - arr [ i ] == - 1 ) { if ( arr [ j ] - arr [ i ] == 1 ) printf ( \"%d\" , arr [ i ] ) ; else printf ( \"%d\" , arr [ j ] ) ; jump = 1 ; break ; } else { i ++ ; } } if ( jump == 1 ) break ; else j ++ ; } } return 0 ; }", "label": 1, "id": 20496}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n , j , k , x , max ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = 1 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { if ( k == 0 ) { a [ j ] [ k ] = a [ j ] [ k ] + a [ j - 1 ] [ k ] ; } else if ( k == j ) { a [ j ] [ k ] = a [ j ] [ k ] + a [ j - 1 ] [ k - 1 ] ; } else { if ( a [ j ] [ k ] + a [ j - 1 ] [ k ] > a [ j ] [ k ] + a [ j - 1 ] [ k - 1 ] ) { a [ j ] [ k ] = a [ j ] [ k ] + a [ j - 1 ] [ k ] ; } else { a [ j ] [ k ] = a [ j ] [ k ] + a [ j - 1 ] [ k - 1 ] ; } } } } max = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( max < a [ n - 1 ] [ j ] ) { max = a [ n - 1 ] [ j ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 26421}
{"input": "int sumrecur ( int * a , int row , int pos ) ; int n ; int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ ( n * ( n + 1 ) ) / 2 ] ; for ( i = 0 ; i < n * ( n + 1 ) / 2 ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } printf ( \"%d\" , sumrecur ( a , 0 , 0 ) ) ; } return 0 ; } int sumrecur ( int * a , int row , int pos ) { int one , two ; if ( row == n - 1 ) return ( a [ pos ] ) ; else { one = sumrecur ( a , row + 1 , pos + row + 1 ) ; two = sumrecur ( a , row + 1 , pos + row + 2 ) ; return ( a [ pos ] + ( ( one > two ) ? one : two ) ) ; } }", "label": 2, "id": 24661}
{"input": "int main ( ) { int t , n , i , p , c ; long arr [ 50001 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; p = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { c = arr [ i ] ; arr [ i ] = arr [ i + 1 ] ; arr [ i + 1 ] = c ; } p += arr [ i + 1 ] ; } printf ( \"%d\n\" , p ) ; } return 0 ; }", "label": 1, "id": 14643}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int arr [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] += arr [ i ] [ j + 1 ] ; else arr [ i - 1 ] [ j ] += arr [ i ] [ j ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 23521}
{"input": "int max_sum ( int i , int j ) ; int A [ 100 ] [ 100 ] , path [ 100 ] [ 100 ] , n ; int main ( ) { int t , i , j , k , sum ; scanf ( \"%d\" , & t ) ; for ( k = 1 ; k <= t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & A [ i ] [ j ] ) ; path [ i ] [ j ] = - 1 ; } sum = max_sum ( 0 , 0 ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; } int max_sum ( int i , int j ) { if ( i + 1 == n ) { return A [ i ] [ j ] ; } else if ( path [ i ] [ j ] != - 1 ) return path [ i ] [ j ] ; else { int t1 = max_sum ( i + 1 , j ) ; int t2 = max_sum ( i + 1 , j + 1 ) ; path [ i ] [ j ] = t1 > t2 ? ( A [ i ] [ j ] + t1 ) : ( A [ i ] [ j ] + t2 ) ; return path [ i ] [ j ] ; } }", "label": 0, "id": 8259}
{"input": "main ( ) { int a [ size ] [ size ] ; int i , j , sum = 0 , T , n , p ; scanf ( \"%d\" , & T ) ; while ( T -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( j = 0 ; j < n ; j ++ ) if ( a [ n - 1 ] [ j ] > sum ) { sum = a [ n - 1 ] [ j ] ; p = j ; } i = n - 2 ; j = p ; while ( i != ( - 1 ) ) { if ( ( a [ i ] [ j ] < a [ i ] [ j - 1 ] ) && ( j >= 0 ) ) { sum += a [ i ] [ j - 1 ] ; j -- ; } else sum += a [ i ] [ j ] ; i -- ; } printf ( \"%d\n\" , sum ) ; } }", "label": 1, "id": 11240}
{"input": "int main ( ) { int i , n , t ; unsigned long int a , b , r , s , c , hcf , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lu %lu\" , & a , & b ) ; r = a ; s = b ; while ( s != 0 ) { c = s ; s = r % s ; r = c ; } hcf = r ; lcm = ( a * b ) / hcf ; printf ( \"%lu %lu\n\" , hcf , lcm ) ; } return 0 ; }", "label": 0, "id": 17931}
{"input": "int main ( ) { int t , a , b , i , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; } } printf ( \"%d %d\n\" , gcd , ( a * b ) / gcd ) ; } return 0 ; }", "label": 1, "id": 21024}
{"input": "long long int gcd ( long long int a , long long int b ) { long long int x , y ; if ( a > b ) { x = a ; y = b ; } else { x = b ; y = a ; } if ( y == 0 ) return x ; else gcd ( y , x % y ) ; } int main ( ) { long long int i , k , a , b , t ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%d\\t%lld\n\" , k , ( a * b ) / k ) ; } return 0 ; }", "label": 0, "id": 17343}
{"input": "int main ( ) { int A , B , c , i , j , T ; scanf ( \"%d\" , & T ) ; for ( j = 0 ; j < T ; j ++ ) { scanf ( \"%d%d\" , & A , & B ) ; for ( i = 1 ; i <= A ; i ++ ) { if ( A % i == 0 && B % i == 0 ) { c = i ; } } i = ( A * B ) / c ; printf ( \"%d %d\" , c , i ) ; } return ( 0 ) ; }", "label": 2, "id": 21243}
{"input": "int main ( ) { int t ; long n , m , lcm , i , minMultiple ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & n , & m ) ; for ( i = 1 ; i <= n && i <= m ; ++ i ) { if ( n % i == 0 && m % i == 0 ) { printf ( \"%ld %ld\n\" , i , m * n / i ) ; break ; } } } return 0 ; }", "label": 1, "id": 14492}
{"input": "int main ( ) { int t , n , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , j , temp ; scanf ( \"%d%d\" , & n , & m ) ; i = n ; j = m ; while ( j ) { temp = j ; j = i % j ; i = temp ; } printf ( \"%d %d\n\" , i , n * m / i ) ; } return 0 ; }", "label": 1, "id": 13959}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int i , j , g , l ; long int * p , * q ; scanf ( \"%d\" , & i ) ; p = ( long int * ) malloc ( i * sizeof ( int ) ) ; q = ( long int * ) malloc ( i * sizeof ( int ) ) ; for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d %d\" , & p [ j ] , & q [ j ] ) ; } for ( j = 0 ; j < i ; j ++ ) { g = gcd ( p [ j ] , q [ j ] ) ; l = lcm ( p [ j ] , q [ j ] ) ; printf ( \"%d  %d\n\" , g , l ) ; } } int gcd ( int a , int b ) { if ( a > b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } else { { if ( a == 0 ) return b ; else return gcd ( a , b % a ) ; } } } int lcm ( int a , int b ) { return ( ( a * b ) / gcd ( a , b ) ) ; }", "label": 1, "id": 5311}
{"input": "struct node { int val , sum ; } ; int main ( void ) { int i , t , n , j , max , k ; struct node * * arr ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; arr = ( struct node * * ) calloc ( sizeof ( struct node * ) , n ) ; for ( j = 0 ; j < n ; j ++ ) { arr [ j ] = ( struct node * ) calloc ( sizeof ( struct node ) , n ) ; } for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] . val ) ; if ( j == 0 ) arr [ j ] [ k ] . sum = arr [ j ] [ k ] . val ; else { if ( k != 0 ) arr [ j ] [ k ] . sum = ( arr [ j - 1 ] [ k ] . sum > arr [ j - 1 ] [ k - 1 ] . sum ) ? arr [ j - 1 ] [ k ] . sum + arr [ j ] [ k ] . val : arr [ j - 1 ] [ k - 1 ] . sum + arr [ j ] [ k ] . val ; else if ( k == 0 ) arr [ j ] [ k ] . sum = arr [ j - 1 ] [ k ] . sum + arr [ j ] [ k ] . val ; } } } max = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( max < arr [ n - 1 ] [ j ] . sum ) max = arr [ n - 1 ] [ j ] . sum ; } for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) printf ( \"%d->%d  \" , arr [ j ] [ k ] . val , arr [ j ] [ k ] . sum ) ; printf ( \"\n\" ) ; } printf ( \"\n%d\" , max ) ; } return 0 ; }", "label": 2, "id": 16367}
{"input": "int no ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int triangle ( int * * A , int i , int j ) { if ( i == no - 1 ) return A [ i ] [ j ] ; return max ( triangle ( A , i + 1 , j ) , triangle ( A , i + 1 , j + 1 ) ) ; } int main ( ) { int testcases ; int * * A ; int itr ; int k ; int i ; int j = 1 ; int max ; A = ( int * * ) malloc ( 100 * sizeof ( int * ) ) ; for ( itr = 0 ; itr < 100 ; itr ++ ) A [ itr ] = ( int * ) malloc ( 100 * sizeof ( int ) ) ; scanf ( \"%d\" , & testcases ) ; for ( itr = 0 ; itr < testcases ; itr ++ ) { j = 1 ; scanf ( \"%d\" , & no ) ; for ( i = 0 ; i < no ; i ++ ) { for ( k = 0 ; k < j ; k ++ ) scanf ( \"%d\" , & ( A [ i ] [ k ] ) ) ; j ++ ; } max = triangle ( A , 0 , 0 ) ; printf ( \"%d\n\" , max ) ; } for ( i = 0 ; i < 100 ; i ++ ) free ( A [ i ] ) ; free ( A ) ; return 0 ; }", "label": 2, "id": 2046}
{"input": "int main ( ) { long long int t , i , p , max , l , j ; scanf ( \"%d\" , & t ) ; int a [ t ] , b [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & a [ i ] , & b [ i ] ) ; } for ( i = 0 ; i < t ; i ++ ) { p = 0 ; p = a [ i ] * b [ i ] ; if ( a [ i ] > b [ i ] ) max = a [ i ] ; else max = b [ i ] ; for ( j = 1 ; j < max ; j ++ ) { if ( a [ i ] % j == 0 && b [ i ] % j == 0 ) max = j ; } l = p / max ; printf ( \"%lld %lld \n\" , max , l ) ; } return 0 ; }", "label": 1, "id": 20020}
{"input": "int main ( ) { int a , b , l , g , t , small ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; small = ( a < b ) ? a : b ; g = small ; while ( g > 1 ) { if ( ( a % g == 0 ) && ( b % g == 0 ) ) break ; g -- ; } l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 16735}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x [ 30 ] , i , j = 0 , y [ 30 ] , k , l = 0 , a1 , b1 , a , b ; long long a2 , b2 ; scanf ( \"%d%d\" , & a , & b ) ; a2 = a ; b2 = b ; a1 = a ; b1 = b ; for ( i = 2 ; i <= 1000000 ; i ++ ) { if ( a1 % i == 0 ) { x [ j ] = i ; a1 = a1 / i ; i -- ; j ++ ; } if ( a1 == 1 ) break ; } for ( k = 2 ; k <= 1000000 ; k ++ ) { if ( b1 % k == 0 ) { y [ l ] = k ; b1 = b1 / k ; k -- ; l ++ ; } if ( b1 == 1 ) break ; } int m , n ; long long r = 1 ; for ( m = 0 ; m < j ; m ++ ) { for ( n = 0 ; n < l ; n ++ ) { if ( x [ m ] == y [ n ] ) { r = r * x [ m ] ; y [ n ] == 0 ; break ; } } } long long g ; g = a2 * b2 ; g = g / r ; printf ( \"%lld %lld\n\" , r , g ) ; } return 0 ; }", "label": 1, "id": 12402}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n1 , n2 , rem , lcm ; scanf ( \"%d%d\" , & n1 , & n2 ) ; lcm = n1 * n2 ; if ( n1 > n2 ) { if ( n1 % n2 == 0 ) { lcm = n1 ; } else { lcm = n1 * n2 ; } rem = n1 % n2 ; while ( rem != 0 ) { n1 = n2 ; n2 = rem ; rem = n1 % n2 ; } } else { if ( n2 % n1 == 0 ) { lcm = n2 ; } else { lcm = n1 * n2 ; } rem = n2 % n1 ; while ( rem != 0 ) { n2 = n1 ; n1 = rem ; rem = n2 % n1 ; } } printf ( \"%d  %d\n\" , n2 , lcm ) ; } return 0 ; }", "label": 1, "id": 24609}
{"input": "int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int k , min ; min = a < b ? a : b ; for ( int i = 1 ; i <= min ; i ++ ) { if ( a % i == 0 && b % i == 0 ) k = i ; } printf ( \"%d %d\n\" , k , ( a * b ) / k ) ; } return 0 ; }", "label": 1, "id": 9931}
{"input": "void largest_sum ( int * , int ) ; int main ( ) { int t , n , * m , s ; int i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; s = ( n * ( n + 1 ) ) / 2 ; m = ( int * ) malloc ( sizeof ( int ) * s + 1 ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( \"%d\" , m + i ) ; largest_sum ( m , n ) ; printf ( \"%d\n\" , m [ 0 ] ) ; free ( m ) ; } return 0 ; } void largest_sum ( int * m , int n ) { int cstart , cend , cpre_s , cpre_e ; int l = n - 1 ; while ( l != 0 ) { cstart = ( l * ( l + 1 ) ) / 2 ; cend = cstart + l ; cpre_s = ( l * ( l - 1 ) ) / 2 ; cpre_e = cpre_s + l - 1 ; while ( cstart < cend ) { m [ cpre_s ] = m [ cstart ] > m [ cstart + 1 ] ? m [ cstart ] : m [ cstart + 1 ] ; cstart ++ ; cpre_s ++ ; } l -- ; } }", "label": 3, "id": 7134}
{"input": "int main ( ) { long int x , y , a , b , gcd , lcm ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & x , & y ) ; a = x ; b = y ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } gcd = a ; a = x ; b = y ; while ( a != b ) { if ( a < b ) a = a + x ; else b = b + y ; } lcm = a ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 813}
{"input": "int max ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int t , n , a [ 101 ] [ 101 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int ma = - 1 ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( i == j ) a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else if ( i == 1 ) a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i ] [ j ] = max ( a [ i - 1 ] [ j - 1 ] , a [ i - 1 ] [ j ] ) + a [ i ] [ j ] ; if ( a [ i ] [ j ] > ma ) ma = a [ i ] [ j ] ; } } printf ( \"%d\n\" , ma ) ; } return 0 ; }", "label": 1, "id": 4554}
{"input": "int divisor ( int , int , int ) ; int divisor1 ( int , int , int ) ; int main ( ) { int a , b , t , r , a1 , b1 , least , high , result , result2 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a < b ) { least = a ; high = b ; } else { least = b ; high = a ; } result = divisor ( least , a , b ) ; result2 = divisor1 ( high , a1 , b1 ) ; printf ( \"%d %d\n\" , result , result2 ) ; return 0 ; } } int divisor ( int size , int a1 , int b1 ) { int r , i ; for ( i = 1 ; i <= size ; i ++ ) { if ( ( a1 % i == 0 ) && ( b1 % i == 0 ) ) r = i ; else break ; } return r ; } int divisor1 ( int size , int a1 , int b1 ) { int r = 1 , i ; for ( i = 1 ; i <= size ; i ++ ) { while ( 1 ) { if ( ( a1 % i == 0 ) && ( b1 % i == 0 ) ) { r = r * i ; a1 = a1 / i ; b1 = b1 / i ; } else break ; } } return r ; }", "label": 2, "id": 11721}
{"input": "int main ( ) { long long a , b , t , i , c , gcd , lcm ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld %lld\" , & a , & b ) ; while ( b != 0 ) c = b ; b = a % b ; a = c ; lcm = ( a * b ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 12580}
{"input": "int matrix [ 100 ] [ 100 ] ; int find_sum ( int , int , int ) ; int main ( ) { int count ; int lines ; int i , j ; scanf ( \"%d\" , & count ) ; while ( count > 0 ) { i = 0 ; scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & matrix [ i ] [ j ] ) ; } } count -- ; } return 0 ; } int find_sum ( int lines , int i , int j ) { int sum = 0 ; int max_sum = 0 ; if ( i < lines && j <= i ) { max_sum = find_sum ( lines , i + 1 , j ) ; sum = find_sum ( lines , i + 1 , j + 1 ) ; if ( max_sum < sum ) max_sum = sum ; max_sum += matrix [ i ] [ j ] ; } return max_sum ; }", "label": 1, "id": 26846}
{"input": "char _str [ 10 ] ; int main ( void ) { long long count , sum ; int a , b , n , t ; READ_INT ( t ) ; while ( t -- ) { READ_INT ( n ) ; READ_INT ( a ) ; for ( count = 1 , sum = 0 , n -- ; n > 0 ; n -- ) { READ_INT ( b ) ; if ( b >= a ) count ++ ; else { sum += ( count * ( count + 1 ) >> 1 ) ; count = 1 ; } a = b ; } sum += ( count * ( count + 1 ) >> 1 ) ; WRITE_INT ( sum ) ; putchar_unlocked ( '\n' ) ; } return 0 ; }", "label": 0, "id": 20966}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , min = 100001 ; scanf ( \"%d\" , & n ) ; int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 23781}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int i , t , x , y , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; x = gcd ( a , b ) ; y = lcm ( a , b ) ; printf ( \"%d %d\n\" , x , y ) ; } return 0 ; }", "label": 1, "id": 23186}
{"input": "int maxSum ( int a [ 99 ] [ 99 ] , int i , int j ) { int t1 , t2 ; t1 = i > 0 ? a [ i - 1 ] [ j ] : 0 ; t2 = i > 0 && j > 0 ? a [ i - 1 ] [ j - 1 ] : 0 ; return t1 > t2 ? t1 : t2 ; } int main ( ) { int a [ 99 ] [ 99 ] ; int num ; scanf ( \"%d\" , & num ) ; while ( num -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; if ( n == 0 ) { printf ( \"%d\n\" , n ) ; continue ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j ] += maxSum ( a , i , j ) ; } } int max = - 1 ; for ( i = 0 ; i < n ; i ++ ) if ( a [ n - 1 ] [ i ] > max ) max = a [ n - 1 ] [ i ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 3, "id": 5268}
{"input": "long long int g ( long long int a , long long int b ) { long long int r = a % b ; if ( r == 0 ) return b ; else return g ( b , r ) ; } int main ( ) { long long int n , t , i , k , j , b , b1 , b2 , gcd , lcm ; scanf ( \"%lld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld%lld\" , & n , & k ) ; gcd = g ( n , k ) ; lcm = n * k / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 21499}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int a , b , i ; scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { printf ( \"%d %d\n\" , i , a * b ) ; } } } return 0 ; }", "label": 1, "id": 18584}
{"input": "int main ( ) { int t , n , i , j , a [ 110 ] [ 110 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 00 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ ( i + 1 ) ] [ j ] >= a [ ( i + 1 ) ] [ ( j + 1 ) ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ ( i + 1 ) ] [ j ] ; else a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 2760}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { long int n , i , b = - 1 , count = 0 , result = 0 , a ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a ) ; if ( a >= b ) count ++ ; else { result = result + count * ( count + 1 ) / 2 ; count = 1 ; } b = a ; } result = result + count * ( count + 1 ) / 2 ; printf ( \"%ld\" , result ) ; t -- ; } }", "label": 1, "id": 3727}
{"input": "int main ( void ) { int t , a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else b = b - a ; } printf ( \"%d %d\n\" , a , m * n / a ) ; } return 0 ; }", "label": 1, "id": 18669}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 13587}
{"input": "int main ( ) { long long int a [ 100 ] [ 100 ] ; long long int i , j , r , n ; scanf ( \"%lld\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%lld\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } for ( i = r - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } else a [ i - 1 ] [ j ] += a [ i ] [ j ] ; } } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 2, "id": 13941}
{"input": "int main ( ) { long int A [ 50001 ] , t , n , i ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { long int min = 9999999 , p = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & A [ i ] ) ; if ( min >= A [ i ] ) { min = A [ i ] ; } } p += ( min * ( n - 1 ) ) ; printf ( \"%ld\n\" , p ) ; } return 0 ; }", "label": 0, "id": 22854}
{"input": "main ( ) { int a [ 100 ] [ 100 ] , num , i , j , count ; scanf ( \"%d\" , & count ) ; while ( count -- ) { scanf ( \"%d\" , & num ) ; for ( i = 0 ; i < num ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; i -- ; for ( ; i >= 0 ; i -- ) for ( j = 0 ; j < i + 1 ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 25556}
{"input": "int main ( ) { int t , i , j , n ; int a [ 10000 ] ; long long int count = 0 , p = 1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { count = 0 ; p = 1 ; scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] > a [ i - 1 ] || a [ i ] == a [ i - 1 ] ) p ++ ; else { count += ( p * ( p + 1 ) ) / 2 - p ; p = 1 ; } } if ( i == n ) count += ( p * ( p + 1 ) ) / 2 - p ; count += n ; printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 3, "id": 17836}
{"input": "int a [ 105 ] [ 105 ] , t , n ; int main ( ) { int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + 1 ] [ j + 1 ] , a [ i + 1 ] [ j ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 682}
{"input": "int main ( void ) { int a , b , c , i , m , hcf , gcd ; scanf ( \"%d\" , & a ) ; while ( a != 0 ) { scanf ( \"%d%d\" , & b , & c ) ; if ( b > c ) m = b ; if ( c > b ) m = c ; if ( b <= 0 || c <= 0 ) printf ( \"not\n\" ) ; for ( i = 2 ; i <= m ; i ++ ) { if ( b % i == 0 && a % i == 0 ) gcd = i ; else gcd = 1 ; } hcf = ( b * c ) / gcd ; printf ( \"%d %d \n\" , gcd , hcf ) ; a -- ; } return 0 ; }", "label": 2, "id": 12447}
{"input": "int main ( void ) { long long int t , a , b , i , n , hcf = 1 , lcm = 1 ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; n = ( a < b ) ? a : b ; for ( i = 1 ; i <= n ; i ++ ) if ( a % i == 0 && b % i == 0 ) hcf = i ; lcm = ( a * b ) / hcf ; printf ( \"%lld %lld\n\" , hcf , lcm ) ; hcf = 1 ; } return 0 ; }", "label": 2, "id": 9754}
{"input": "int main ( ) { int t , a , b , i , min , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) min = b ; else min = a ; int gcd = 1 ; for ( i = min ; i > 0 ; i -- ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { gcd = i ; break ; } } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 13562}
{"input": "int main ( ) { int n , t , i , j , num , tmp1 ; int a [ 101 ] [ 101 ] , tot [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { tot [ i ] [ i ] = 0 ; for ( j = 1 ; j <= i ; j ++ ) { if ( ( i - 1 ) != 0 ) { tot [ i ] [ j ] = tot [ i - 1 ] [ j ] + a [ i ] [ j ] ; tmp1 = tot [ i ] [ j ] ; if ( ( j - 1 ) != 0 ) { tot [ i ] [ j ] = tot [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; if ( tmp1 > tot [ i ] [ j ] ) { tot [ i ] [ j ] = tmp1 ; } } } } } i = tot [ n ] [ 1 ] ; for ( j = 2 ; j <= n ; j ++ ) { if ( tot [ n ] [ j ] > i ) { i = tot [ n ] [ j ] ; } } printf ( \"%d\n\" , i + a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 2, "id": 12146}
{"input": "int main ( ) { long long int a , b , c , l , s , r ; scanf ( \"%lli\" , & a ) ; for ( long long int i = 1 ; i <= a ; i ++ ) { scanf ( \"%lli %lli\" , & b , & c ) ; if ( b > c ) { l = b ; s = c ; } else { l = c ; s = b ; } while ( l != 0 ) { r = l % s ; s = l ; l = r ; } printf ( \"%lli %lli\n\" , s , ( b * c ) / s ) ; } }", "label": 1, "id": 16267}
{"input": "int main ( ) { unsigned int i , j , n , t , * a , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100001 ; scanf ( \"%u\" , & n ) ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%u\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%u\n\" , ( n - 1 ) * min ) ; } }", "label": 0, "id": 22112}
{"input": "int main ( ) { int t , i , min , a , b , x , y , j , m ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; a = x , b = y ; min = a < b ? a : b ; int gcd = 1 ; if ( min == 1 ) gcd = 1 ; else { int pi , pj , pk = 0 , psize ; int p [ min ] ; for ( pi = 2 ; pi <= min ; pi ++ ) { int prime = 1 ; for ( pj = 2 ; pj <= pi / 2 ; pj ++ ) { if ( pi % pj == 0 ) { prime = 0 ; break ; } } if ( prime == 1 ) p [ pk ++ ] = pi ; psize = pk ; } int k = 0 ; while ( a > p [ k ] ) { if ( a % p [ k ] != 0 || b % p [ k ] != 0 ) { k ++ ; if ( k == psize ) break ; } else { gcd *= p [ k ] ; a /= p [ k ] ; b /= p [ k ] ; } } } a = x , b = y ; int max = a > b ? a : b ; long long int lcm = 1 ; if ( max % min == 0 ) lcm = max ; else { for ( j = 2 ; ; j ++ ) { m = j * min ; if ( m % max == 0 ) { lcm = m ; break ; } } } printf ( \"%d %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 23148}
{"input": "int arr [ 100 ] [ 100 ] ; int sum [ 100 ] [ 100 ] ; int max , maxsum ; int flush ( int test ) { int i , j ; for ( i = 0 ; i < test ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { sum [ i ] [ j ] = 0 ; arr [ i ] [ j ] = 0 ; } } } sumtri ( int test ) { int i , j ; for ( i = 1 ; i < test ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( ( sum [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ) > ( sum [ i - 1 ] [ j ] + arr [ i ] [ j ] ) ) sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + arr [ i ] [ j ] ; } } for ( j = 0 ; j < test ; j ++ ) if ( sum [ test - 1 ] [ j ] > max ) max = sum [ test - 1 ] [ j ] ; return max ; } int main ( ) { int k , test , i , j ; scanf ( \"%d\" , & k ) ; while ( k ) { scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } sum [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; if ( i >= 1 ) sum [ i ] [ 0 ] = sum [ i - 1 ] [ 0 ] + arr [ i ] [ 0 ] ; } maxsum = sumtri ( test ) ; printf ( \"%d\" , maxsum ) ; flush ( test ) ; k -- ; } }", "label": 1, "id": 11041}
{"input": "int main ( ) { int i = 0 , j = 0 , k , m , n = 0 , p , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & k ) ; while ( n < k ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } p = m - 1 ; while ( p > 0 ) { j = 0 ; while ( j <= p ) { if ( a [ p ] [ j ] > a [ p ] [ j + 1 ] ) a [ p - 1 ] [ j ] = a [ p - 1 ] [ j ] + a [ p ] [ j ] ; else a [ p - 1 ] [ j ] = a [ p - 1 ] [ j ] + a [ p ] [ j + 1 ] ; j ++ ; } p -- ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; n ++ ; } return 0 ; }", "label": 0, "id": 1486}
{"input": "int main ( ) { int t ; long int i , min , a , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( a < min ) min = a ; } min = min * ( n - 1 ) ; printf ( \"%d\n\" , min ) ; } return 0 ; }", "label": 0, "id": 17289}
{"input": "int main ( ) { int t , k , n , i , j , a [ 50 ] [ 50 ] ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n ; i >= 1 ; i -- ) { for ( j = 1 ; j < n ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } } printf ( \"%d \n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 14908}
{"input": "int main ( ) { int i , j , k , test ; scanf ( \"%d\" , & test ) ; int n , l , max , sum , arr [ test ] ; if ( test <= 1000 ) { for ( i = 0 ; i < test ; i ++ ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { max = 0 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & l ) ; if ( max < l ) { max = l ; } } if ( j != 0 ) sum = sum + max ; } arr [ i ] = sum ; } for ( i = 0 ; i < test ; i ++ ) printf ( \"%d\n\" , arr [ i ] ) ; } return 0 ; }", "label": 1, "id": 13912}
{"input": "long int gcd ( long int a , long int b ) { long int r = a % b ; if ( r == 0 ) return b ; else return gcd ( b , r ) ; } long int lcm ( long int a , long int b ) { long int r = ( a * b ) / gcd ( a , b ) ; return r ; } int main ( void ) { long int t , a , b ; scanf ( \"%ld\" , & t ) ; for ( long int i = 0 ; i < t ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = lcm ( a , b ) ; printf ( \"%ld\" , g ) ; printf ( \"%  ld\n\" , l ) ; } return 0 ; }", "label": 0, "id": 10571}
{"input": "int main ( ) { int nt , i , j , k , rows , maxVal ; scanf ( \"%d\" , & nt ) ; for ( k = 0 ; k < nt ; k ++ ) { int points [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] ; scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & points [ i ] [ j ] ) ; } } sum [ 0 ] [ 0 ] = points [ 0 ] [ 0 ] ; for ( i = 1 ; i < rows ; i ++ ) { sum [ i ] [ 0 ] = sum [ i - 1 ] [ 0 ] + points [ i ] [ 0 ] ; for ( j = 1 ; j < i + 1 ; j ++ ) { sum [ i ] [ j ] = max ( sum [ i - 1 ] [ j ] , sum [ i - 1 ] [ j - 1 ] ) + points [ i ] [ j ] ; } } maxVal = sum [ rows - 1 ] [ 0 ] ; for ( i = 1 ; i < rows ; i ++ ) { if ( maxVal < sum [ rows - 1 ] [ i ] ) maxVal = sum [ rows - 1 ] [ i ] ; } printf ( \"%d\n\" , maxVal ) ; } return 0 ; }", "label": 1, "id": 22400}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , sum = 0 , i ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) sum += a [ i ] ; if ( a [ i ] > a [ i + 1 ] ) sum += a [ i + 1 ] ; n -= 1 ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 22395}
{"input": "void main ( ) { int i , j , n , t , a [ 50001 ] , min = 5001 ; scanf ( \"%d\" , & t ) ; for ( j = 1 ; j <= t ; j ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 1, "id": 18666}
{"input": "long long a [ 100000 ] ; int main ( ) { long long n , i , j , m , sum , max , k , index ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & m ) ; for ( j = 0 ; j < m ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } max = a [ 0 ] , index = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( a [ k ] < max ) { max = a [ k ] ; index = k ; } } sum = ( ( m - 1 ) * a [ index ] ) ; printf ( \"%lld\n\" , sum ) ; } }", "label": 0, "id": 25319}
{"input": "int small ( int * x , long s , long e ) { if ( ( e - s ) == 1 ) { if ( * ( x + s ) < * ( x + e ) ) return * ( x + s ) ; else return * ( x + e ) ; } else if ( s == e ) return * ( x + e ) ; else { int mid = ( s + e ) / 2 ; int p = small ( x , s , mid ) ; int q = small ( x , mid + 1 , e ) ; if ( p < q ) return p ; else return q ; } } int main ( void ) { long int t , n , i , j , p ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld\" , & n ) ; int * ptr ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , ( ptr + j ) ) ; } p = small ( ptr , 0 , n - 1 ) ; printf ( \"%ld\n\" , p * ( n - 1 ) ) ; free ( ptr ) ; } return 0 ; }", "label": 0, "id": 8518}
{"input": "int main ( ) { int j , t ; scanf ( \"%d\" , & t ) ; for ( j = 0 ; j < t ; j ++ ) { int n1 , n2 ; scanf ( \"%d %d\" , & n1 , & n2 ) ; int a , b ; a = n1 ; b = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } printf ( \"%d %ld\" , n1 , ( a * b ) / n1 ) ; } return 0 ; }", "label": 1, "id": 25987}
{"input": "int MAX ( int a , int b ) { if ( a >= b ) return a ; else return b ; } void SUMTRIAN ( int mat [ 100 ] [ 100 ] , int n ) { int i , j ; int sum [ 100 ] [ 100 ] ; sum [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ; for ( i = 1 , j = 0 ; i < n ; i ++ ) sum [ i ] [ j ] = mat [ i ] [ j ] + sum [ i - 1 ] [ j ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { sum [ i ] [ j ] = MAX ( sum [ i - 1 ] [ j ] , sum [ i - 1 ] [ j - 1 ] ) + mat [ i ] [ j ] ; } } int ans = 0 ; for ( i = n - 1 , j = 0 ; j < n ; j ++ ) { ans = MAX ( sum [ i ] [ j ] , ans ) ; } printf ( \"%d\n\" , ans ) ; } int main ( ) { int t , n , mat [ 100 ] [ 100 ] ; int i , j ; scanf ( \"%d\" , & t ) ; int k ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & mat [ i ] [ j ] ) ; SUMTRIAN ( mat , n ) ; } return 0 ; }", "label": 1, "id": 16878}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int arr1 [ 100 ] [ 100 ] , arr2 [ 100 ] [ 100 ] ; int tc , n , x , i , largest , j ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & n ) ; x = 0 ; while ( x < n ) { for ( i = 0 ; i <= x ; i ++ ) scanf ( \"%d\" , & arr1 [ x ] [ i ] ) ; x += 1 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) { arr2 [ i ] [ j ] = arr1 [ i ] [ j ] ; continue ; } if ( j != 0 && j != i ) arr2 [ i ] [ j ] = arr1 [ i ] [ j ] + max ( arr2 [ i - 1 ] [ j ] , arr2 [ i - 1 ] [ j - 1 ] ) ; if ( j == 0 && i != 0 ) arr2 [ i ] [ j ] = arr1 [ i ] [ j ] + arr2 [ i - 1 ] [ j ] ; if ( j == i ) arr2 [ i ] [ j ] = arr1 [ i ] [ j ] + arr2 [ i - 1 ] [ j - 1 ] ; } } largest = arr2 [ n - 1 ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) largest = max ( largest , arr2 [ n - 1 ] [ i ] ) ; printf ( \"%d\n\" , largest ) ; } return 0 ; }", "label": 0, "id": 23230}
{"input": "int main ( ) { int n1 , n2 , t , i , r , l , p ; scanf ( \"%d\" , & t ) ; int gcd [ t ] , lcm [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; if ( n1 < n2 ) { l = n1 ; n1 = n2 ; n2 = l ; } p = n1 * n2 ; while ( n2 != 0 ) { r = n1 % n2 ; n1 = n2 ; n2 = r ; } gcd [ i ] = n1 ; lcm [ i ] = p / gcd [ i ] ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d %d\n\" , gcd [ i ] , lcm [ i ] ) ; return 0 ; }", "label": 1, "id": 1123}
{"input": "int main ( ) { int t ; int long a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; int i , z = 0 ; if ( a > b ) { if ( a % b == 0 ) { printf ( \"%d \" , b ) ; printf ( \"%d\n\" , a ) ; } else if ( a % b != 0 ) { for ( i = 1 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { if ( i > z ) { z = i ; } } } printf ( \"%d \" , z ) ; printf ( \"%d\n\" , a * b / z ) ; } } if ( b > a ) { if ( b % a == 0 ) { printf ( \"%d \" , a ) ; printf ( \"%d\n\" , b ) ; } if ( b % a != 0 ) { for ( i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { if ( i > z ) { z = i ; } } } printf ( \"%d \" , z ) ; printf ( \"%d\n\" , a * b / z ) ; } } } }", "label": 2, "id": 22116}
{"input": "int main ( ) { int n , i , j , p , q , t ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; int a [ t ] [ t ] , b [ t ] [ t ] , sum = 0 ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; sum = sum + a [ i ] [ j ] ; } } printf ( \"%d\" , sum / 2 ) ; } return 0 ; }", "label": 1, "id": 15351}
{"input": "int cmpfunc ( const void * a , const void * b ) { return * ( long long unsigned int * ) a - * ( long long unsigned int * ) b ; } int main ( ) { long long unsigned int n , a [ 100000 ] , t , c , l , i , j , p = 0 ; ; scanf ( \"%llu\" , & t ) ; while ( t -- ) { c = 0 ; p = 0 ; l = 0 ; scanf ( \"%llu\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%llu\" , & a [ i ] ) ; if ( n == 1 ) c = 1 ; else { for ( i = 0 ; i < n - 1 ; i ++ ) { l = i ; while ( a [ l ] == a [ l + 1 ] ) { l ++ ; } if ( l == n - 1 ) break ; while ( a [ l + 1 ] > a [ l ] ) { c ++ ; l ++ ; if ( l == n - 1 ) break ; } } qsort ( a , n , sizeof ( long long unsigned int ) , cmpfunc ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { p = 0 ; l = i ; while ( a [ l ] == a [ l + 1 ] ) { p = 1 ; l ++ ; } if ( l == i || l - i == 1 ) c ++ ; else c += l - i - 1 ; if ( p == 0 && i == n - 2 ) { c ++ ; break ; } } } printf ( \"%llu\n\" , c ) ; } return 0 ; }", "label": 0, "id": 23209}
{"input": "int main ( ) { int t , i , cost ; long long int a , b , c , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%lld\" , & n ) ; scanf ( \"%lld\" , & a ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%lld\" , & b ) ; a = a < b ? a : b ; } c = a * ( n - 1 ) ; printf ( \"%lld\n\" , c ) ; } return 0 ; }", "label": 0, "id": 16401}
{"input": "int result ( long int a , long int b ) { long int temp ; while ( b != 0 ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { long int a , b , t , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; gcd = result ( a , b ) ; lcm = a * b ; lcm = lcm / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 8290}
{"input": "int main ( ) { int t , a , b , h , l , i ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( \"%d %d\n\" , h , l ) ; } return 0 ; } int hcf ( int a , int b ) { int gcd , i ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; } } return gcd ; }", "label": 2, "id": 6214}
{"input": "int a [ 101 ] [ 101 ] ; int main ( ) { int i , j , n , max , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; ++ i ) for ( j = 1 ; j <= i ; ++ j ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 2 ; i <= n ; ++ i ) for ( j = 1 ; j <= i ; ++ j ) { if ( a [ i - 1 ] [ j - 1 ] > a [ i - 1 ] [ j ] ) { a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } else { a [ i ] [ j ] += a [ i - 1 ] [ j ] ; } } max = a [ n ] [ 1 ] ; for ( i = 2 ; i <= n ; ++ i ) { if ( a [ n ] [ i ] > max ) max = a [ n ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 5748}
{"input": "int main ( void ) { int i , n , j , k , test , matrix [ 50000 ] , smallest ; scanf ( \"%d\" , & test ) ; for ( i = 1 ; i <= test ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & matrix [ j ] ) ; } smallest = matrix [ 0 ] ; for ( k = 0 ; k < n ; k ++ ) { if ( matrix [ k ] < smallest ) { smallest = matrix [ k ] ; } } printf ( \"%d\n\" , ( smallest * ( n - 1 ) ) ) ; } return 0 ; }", "label": 0, "id": 18591}
{"input": "int main ( ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int row ; int array [ 102 ] [ 102 ] ; while ( n -- ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , array [ i ] [ j ] ) ; } for ( i = row - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( array [ i + 1 ] [ j ] > array [ i + 1 ] [ j + 1 ] ) array [ i ] [ j ] += array [ i + 1 ] [ j ] ; else array [ i ] [ j ] += array [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , array [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 10799}
{"input": "void calculate ( ) ; int mylog ( int num ) ; int main ( int argc , char * argv [ ] ) { int triangleCount ; scanf ( \"%d\" , & triangleCount ) ; while ( triangleCount > 0 ) { calculate ( ) ; triangleCount -- ; } return EXIT_SUCCESS ; } void calculate ( ) { int lineCount , lineNum , sumLen , i , max , size ; scanf ( \"%d\" , & lineCount ) ; int line [ lineCount ] ; int sum [ 200 ] ; if ( lineCount > 5 ) lineCount = 0 ; lineNum = 0 ; sumLen = 0 ; max = 0 ; while ( lineCount > 0 ) { int i ; lineNum ++ ; for ( i = 0 ; i < lineNum ; i ++ ) scanf ( \"%d\" , & line [ i ] ) ; if ( lineNum == 1 ) { sum [ 0 ] = line [ 0 ] ; sumLen = 1 ; } else { for ( i = sumLen ; i > 0 ; i -- ) { int lineC = mylog ( i ) ; sum [ ( 2 * i ) - 1 ] = sum [ i - 1 ] + line [ lineC + 1 ] ; sum [ ( 2 * i ) - 2 ] = sum [ i - 1 ] + line [ lineC ] ; } sumLen *= 2 ; } lineCount -- ; } for ( i = 0 ; i < sumLen ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( \"%d\n\" , max ) ; } int mylog ( int num ) { int count = 0 ; while ( num > 0 ) { num = num / 2 ; count ++ ; } return count - 1 ; }", "label": 1, "id": 937}
{"input": "void main ( ) { int test , num1 , num2 , lcm , gcd , i = 0 ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; for ( i = 1 ; i <= num1 / 2 && i <= num2 / 2 ; ++ i ) { if ( num1 % i == 0 && num2 % i == 0 ) gcd = i ; } lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } }", "label": 1, "id": 9244}
{"input": "int main ( int argc , char const * argv [ ] ) { long array [ 101 ] [ 101 ] ; int i , k , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & array [ i ] [ j ] ) ; } } for ( i = k - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < k + 1 ; j ++ ) { if ( array [ i ] [ j ] > array [ i ] [ j + 1 ] ) array [ i - 1 ] [ j ] += array [ i ] [ j ] ; else array [ i - 1 ] [ j ] += array [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , array [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 8878}
{"input": "int main ( ) { int a , b , t , divisor , dividend , rem = 10 , hcf , i , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { printf ( \"Enter two nos:\" ) ; scanf ( \"%d%d\" , & a , & b ) ; if ( b > a ) { dividend = b ; divisor = a ; } else { divisor = b ; dividend = a ; } while ( rem != 0 ) { rem = dividend % divisor ; if ( rem == 0 ) { hcf = divisor ; lcm = a * b / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; break ; } else { dividend = divisor ; divisor = rem ; } } rem = 10 ; } }", "label": 1, "id": 9768}
{"input": "int great ( int a , int b ) { int r ; if ( b == 0 ) return a ; else return great ( b , a % b ) ; } int main ( ) { int n , a , b ; long int gcd , lcm ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; gcd = great ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 10783}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] = { { 0 , 0 } } , sum , temp = 0 , i , j , flag ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 1 ; j <= ( i + 1 ) ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = 1 ; j <= n ; j += 1 ) { temp = 0 ; flag = j ; for ( i = n - 1 ; i > 0 ; i -- ) { if ( a [ i ] [ flag ] >= a [ i ] [ flag - 1 ] ) { temp += a [ i ] [ flag ] ; } else { flag -- ; temp += a [ i ] [ flag ] ; } } if ( sum < temp ) sum = temp ; } printf ( \"%d\n\" , ( sum + a [ 0 ] [ 1 ] ) ) ; } return 0 ; }", "label": 1, "id": 18819}
{"input": "long int gcd ( long int x , long int y ) ; long int gcd ( long int x , long int y ) { long int i ; for ( i = ( x < y ? x : y ) ; ( ( x % i ) != 0 || ( y % i ) != 0 ) ; i -- ) ; return i ; } int main ( ) { int t ; long int a ; long int b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; printf ( \"%ld %ld\n\" , gcd ( a , b ) , ( ( a * b ) / gcd ( a , b ) ) ) ; } return 0 ; }", "label": 2, "id": 14260}
{"input": "long long unsigned int Gcd ( int a , int b ) { if ( a == 0 ) return b ; else return Gcd ( b % a , a ) ; } int main ( ) { long long unsigned int t , a , b , g ; scanf ( \"%llu\n\" , & t ) ; while ( t -- ) { scanf ( \"%llu %llu\n\" , & a , & b ) ; g = Gcd ( a , b ) ; printf ( \"%llu %llu\n\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 0, "id": 13590}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return gcd ( b , a % b ) ; } main ( ) { int t , a , b , min = 0 , max = 0 , hcf = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- != 0 ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } hcf = gcd ( min , max ) ; printf ( \"%d %d\" , hcf , ( a * b / hcf ) ) ; } }", "label": 1, "id": 19332}
{"input": "int main ( ) { long long int t , n , k = 0 , x = 0 , i , j , a [ 10 ^ 9 ] , r = 0 ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { r = 0 ; x = 0 ; scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { r = 0 ; for ( j = i + 1 ; j < n - 1 ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { if ( a [ k ] > a [ k + 1 ] ) { r = 1 ; break ; } else x ++ ; } if ( r == 1 ) break ; } } printf ( \"%lld\n\" , x + n ) ; } return 0 ; }", "label": 3, "id": 15282}
{"input": "int gcd ( int a , int b ) { if ( a > b ) { if ( a % b == 0 ) return b ; else gcd ( b , a % b ) ; } else { if ( b % a == 0 ) return a ; else gcd ( a , b % a ) ; } } void main ( ) { unsigned int t , a , b , g ; unsigned long long l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%u%u\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"%u %llu\n\" , g , ( long long ) a * b / g ) ; } ; }", "label": 0, "id": 22284}
{"input": "void compute_table ( int * t , int * a , int n ) { int s1 , s2 , i , j ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == n - 1 ) t [ ( int ) ( ( i + 1 ) * ( i ) * 0.5 ) + j ] = a [ ( int ) ( ( i + 1 ) * ( i ) * 0.5 ) + j ] ; else { s1 = t [ ( int ) ( ( i + 2 ) * ( i + 1 ) * 0.5 ) + j ] ; s2 = t [ ( int ) ( ( i + 1 ) * ( i + 2 ) * 0.5 ) + j + 1 ] ; t [ ( int ) ( ( i + 1 ) * ( i ) * 0.5 ) + j ] = a [ ( int ) ( ( i + 1 ) * ( i ) * 0.5 ) + j ] + ( s1 > s2 ? s1 : s2 ) ; } } } return ; } int main ( ) { int t , l ; int n , i , j , * sol , * sums , n1 ; int * a ; scanf ( \"%d\" , & t ) ; l = t ; sol = ( int * ) malloc ( t * sizeof ( int * ) ) ; for ( t = 0 ; t < l ; t ++ ) { scanf ( \"%d\" , & n1 ) ; n = ( int ) n1 * ( n1 + 1 ) * 0.5 ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; sums = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } compute_table ( sums , a , n1 ) ; sol [ t ] = sums [ 0 ] ; free ( a ) ; free ( sums ) ; } for ( i = 0 ; i < l ; i ++ ) printf ( \"%d\n\" , sol [ i ] ) ; }", "label": 0, "id": 16826}
{"input": "int main ( ) { int l , a , b , t , g ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { g = b ; while ( a % g != 0 ) { g -- ; } printf ( \"%d %d\n\" , g , ( a * b ) / g ) ; } else if ( a , b ) { g = a ; while ( b % g != 0 ) { g -- ; } printf ( \"%d %d\n\" , g , ( a * b ) / g ) ; } else { printf ( \"%d %d\n\" , a , b ) ; } t -- ; } return 0 ; }", "label": 1, "id": 1235}
{"input": "int hcf ( int A , int B ) ; int lcm ( int A , int B , int C ) ; int T ; int A , B ; void main ( ) { int e , f , i ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & A , & B ) ; e = hcf ( A , B ) ; f = lcm ( A , B , e ) ; printf ( \"%d %d\n\" , e , f ) ; } } int hcf ( int a , int b ) { int cf = 0 , i ; for ( i = 2 ; i <= ( b ) ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { cf = i ; } } if ( cf == 0 ) { cf = 1 ; return cf ; } else { return cf ; } } int lcm ( int a , int b , int c ) { int lcm ; lcm = ( a * b ) / ( c ) ; return lcm ; }", "label": 2, "id": 2015}
{"input": "int main ( ) { int T , a [ 50000 ] , N , j , i ; long int cost ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\n\" , & N ) ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } cost = 0 ; for ( j = 0 ; j < N - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) continue ; else if ( a [ j ] < a [ j + 1 ] ) { a [ j + 1 ] = a [ j ] ; } cost += a [ j + 1 ] ; } printf ( \"%ld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 12438}
{"input": "int main ( ) { int t ; long int n , x = 0 , sum = 0 , i , a [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"ld\" , & n ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) x = a [ i + 1 ] ; else x = a [ i ] ; sum = sum + x ; } printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 12099}
{"input": "int main ( ) { int t , n , i , j , a [ 100 ] [ 100 ] , sum1 , sum2 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { sum1 = ( a [ i ] [ j ] + a [ i + 1 ] [ j ] ) ; sum2 = ( a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ; if ( sum1 > sum2 ) a [ i ] [ j ] = sum1 ; else a [ i ] [ j ] = sum2 ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 12987}
{"input": "int main ( ) { int n , i , t , j , k , sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & t ) ; int x [ t ] [ t ] ; for ( j = 1 ; j <= t ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & x [ j ] [ k ] ) ; if ( j >= 2 && k == 2 ) { if ( sum <= ( x [ j - 1 ] [ 2 - 1 ] + x [ j ] [ 2 - 1 ] + x [ j ] [ 2 ] ) ) sum = x [ j - 1 ] [ 2 - 1 ] + x [ j ] [ 2 - 1 ] + x [ j ] [ 2 ] ; } } } printf ( \"%d \n\" , sum ) ; } return 0 ; }", "label": 1, "id": 26178}
{"input": "int main ( ) { int * * arr ; int n , size , i , j , res ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & size ) ; arr = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( i = 0 ; i < size ; i ++ ) { arr [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , arr [ i ] + j ) ; } } for ( i = size - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] += ( ( arr [ i + 1 ] [ j + 1 ] > arr [ i + 1 ] [ j ] ) ? arr [ i + 1 ] [ j + 1 ] : arr [ i + 1 ] [ j ] ) ; ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; free ( arr ) ; } return 0 ; }", "label": 0, "id": 8284}
{"input": "void second ( ) { long int size , i , j , p , count = 0 ; scanf ( \"%ld\" , & size ) ; long long int prime [ size ] ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%lld\" , & prime [ i ] ) ; } for ( i = 0 ; i < size ; i ++ ) { p = i ; count ++ ; for ( j = i + 1 ; j < size ; j ++ ) { if ( prime [ j ] >= prime [ p ] ) { count ++ ; p = j ; } else { break ; } } } printf ( \"%ld\" , count ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { second ( ) ; printf ( \"\n\" ) ; } }", "label": 0, "id": 23931}
{"input": "int main ( ) { int cases ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { int n ; scanf ( \"%d\" , & n ) ; long int a [ n ] [ n ] , i , j , max ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%ld\" , & a [ i ] [ j ] ) ; } } if ( n == 1 ) { printf ( \"%ld\n\" , a [ 0 ] [ 0 ] ) ; } else if ( n == 2 ) { if ( a [ 1 ] [ 0 ] > a [ 1 ] [ 1 ] ) printf ( \"%ld\n\" , a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] ) ; else printf ( \"%ld\n\" , a [ 0 ] [ 0 ] + a [ 1 ] [ 1 ] ) ; } else { for ( i = 1 , j = 0 ; i < n ; i ++ ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; for ( i = 1 , j = 1 ; i < n ; j ++ , i ++ ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; for ( i = 2 ; i < n ; i ++ ) { for ( j = 1 ; j <= i - 1 ; j ++ ) { if ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; } } max = a [ n - 1 ] [ 0 ] ; for ( i = n - 1 , j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } printf ( \"%ld\n\" , max ) ; } } return 0 ; }", "label": 0, "id": 51}
{"input": "int HCF ( int a , int b ) { if ( a % b == 0 ) return b ; else HCF ( b , a % b ) ; } int LCM ( int a , int b ) { return ( a * b ) / HCF ( a , b ) ; } int main ( ) { int T , N , i , x , y ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; printf ( \"%d %d\n\" , HCF ( x , y ) , LCM ( x , y ) ) ; } }", "label": 1, "id": 13815}
{"input": "int a [ 50000 ] ; int main ( ) { long long int n , t , i , a [ 50000 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int key ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; key = a [ 0 ] ; for ( i = 1 ; i < t ; i ++ ) { if ( key > a [ i ] ) key = a [ i ] ; } long long int k = key * ( t - 1 ) ; printf ( \"%lld\n\" , k ) ; } return 0 ; }", "label": 0, "id": 5386}
{"input": "int main ( ) { int t , a [ 50 ] [ 50 ] , i , n , j , s1 = 0 , s2 = 0 ; scanf ( \"%d\" , & t ) ; while ( t ) { s1 = s2 = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 1 ) s1 += a [ i ] [ j ] ; if ( i == j ) s2 += a [ i ] [ j ] ; } printf ( \"\n\" ) ; } if ( s1 > s2 ) printf ( \"%d\n\" , s1 ) ; else printf ( \"%d\n\" , s2 ) ; t -- ; } return 0 ; }", "label": 3, "id": 25122}
{"input": "int main ( ) { int i , t , n , m , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int count = 0 , min ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } count = min * ( n - 1 ) ; printf ( \"%d\n\" , count ) ; } }", "label": 0, "id": 25958}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int a , b , t , val , val1 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; val = gcd ( a , b ) ; val1 = lcm ( a , b ) ; printf ( \"%d %d\" , val , val1 ) ; } return 0 ; }", "label": 1, "id": 16899}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm , T , temp ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d \" , gcd ) ; printf ( \"%d \" , lcm ) ; } return 0 ; }", "label": 1, "id": 22211}
{"input": "int max ( int , int ) ; int main ( ) { int a [ 100 ] [ 100 ] , n , t ; int i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9588}
{"input": "int gcd ( int a , int b ) { int g ; while ( a > 0 ) { g = b % a ; b = a ; a = g ; } return b ; } int main ( ) { int t , a , b ; long double g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a / g ) * b ; printf ( \"%.0LF %.0LF\n\" , g , l ) ; } return 0 ; }", "label": 0, "id": 20616}
{"input": "void findAnswer ( int n ) ; int ans [ 1000 ] ; int main ( ) { int n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) findAnswer ( i ) ; for ( i = 0 ; i < n ; i ++ ) printf ( \"%d\n\" , ans [ i ] ) ; return 0 ; } void findAnswer ( int n ) { int r , i , j , k ; int s [ 100 ] [ 100 ] , p [ 100 ] [ 100 ] ; scanf ( \"%d\" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & s [ i ] [ j ] ) ; } for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { p [ i ] [ j ] = s [ i ] [ j ] ; if ( i - 1 >= 0 ) { if ( j == 0 ) { p [ i ] [ j ] = p [ i ] [ j ] + p [ i - 1 ] [ j ] ; } else { int max = p [ i - 1 ] [ j - 1 ] > p [ i - 1 ] [ j ] ? p [ i - 1 ] [ j - 1 ] : p [ i - 1 ] [ j ] ; p [ i ] [ j ] = p [ i ] [ j ] + max ; } } } } int at = 0 ; for ( i = 0 ; i < r ; i ++ ) at = at > p [ r - 1 ] [ i ] ? at : p [ r - 1 ] [ i ] ; ans [ n ] = at ; }", "label": 1, "id": 16498}
{"input": "int main ( ) { long int t , A , j , B , i , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & A , & B ) ; i = ( A > B ? B : A ) ; j = A + B - i ; while ( r > 0 ) { i = r ; r = j % i ; j = i ; } printf ( \"%ld %ld\n\" , i , ( A * B ) / i ) ; } return 0 ; }", "label": 1, "id": 20865}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , hcf , lcm ; long int a , b , c ; scanf ( \"%ld %ld\" , & a , & b ) ; c = ( a < b ) ? a : b ; for ( i = 1 ; i <= c ; i ++ ) { if ( a % i == 0 && b % i == 0 ) hcf = i ; } printf ( \" %d \n\" , hcf ) ; lcm = ( a * b ) / hcf ; printf ( \" %d\n\" , lcm ) ; } return 0 ; }", "label": 2, "id": 2490}
{"input": "int hcf ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a > b ) return hcf ( a % b , b ) ; if ( b > a ) return hcf ( b % a , a ) ; if ( a == b ) return a ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i ; scanf ( \"%d%d\" , & a , & b ) ; i = hcf ( a , b ) ; printf ( \"%d %d\n\" , i , a * b / i ) ; } return 0 ; }", "label": 1, "id": 24301}
{"input": "int getint ( ) { char temp [ 5 ] , c ; int tmp = 0 , i , j ; c = getchar ( ) ; while ( c != 32 && c != '\n' && c != '\\r' ) { tmp = tmp * 10 + c - '0' ; c = getchar ( ) ; } return tmp ; } int main ( ) { int N , n , i , j ; int cnt ; char temp [ 5 ] , c ; scanf ( \"%d\" , & N ) ; while ( N -- ) { int * * arr , mxsum [ 100 ] ; scanf ( \"%d\" , & n ) ; arr = ( int * * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { arr [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; } c = getchar ( ) ; for ( i = 0 ; i < n ; i ++ ) { cnt = 0 ; j = 0 ; while ( j <= i ) { arr [ i ] [ j ] = getint ( ) ; j ++ ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { int a ; a = ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ; arr [ i ] [ j ] = arr [ i ] [ j ] + a ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; for ( i = 0 ; i < n ; i ++ ) { free ( arr [ i ] ) ; } free ( arr ) ; } }", "label": 3, "id": 16373}
{"input": "int main ( ) { int i , k , t , gcd ; long a , b , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; for ( k = 1 ; k <= a && k <= b ; ++ k ) { if ( a % k == 0 && b % k == 0 ) gcd = k ; } lcm = ( a * b ) / gcd ; printf ( \"%d %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 22460}
{"input": "int main ( ) { int t ; long A , B , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"l%d l%d\" , & A , & B ) ; x = A ; y = B ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } printf ( \"%ld %ld\" , x , ( A * B ) / x ) ; } }", "label": 2, "id": 14978}
{"input": "int main ( ) { int t , n , l , a [ 101 ] , i , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; d = n * ( 1 + n ) / 2 ; for ( i = 0 ; i < d ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; l = n ; for ( i = d - 1 ; i > 0 ; i -- ) { if ( i == ( ( l - 1 ) * l ) / 2 ) { l -- ; continue ; } if ( a [ i ] > a [ i - 1 ] ) a [ i - l ] += a [ i ] ; else a [ i - l ] += a [ i - 1 ] ; } printf ( \"%d\n\" , a [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 18393}
{"input": "int gcd ( int a , int b ) ; int main ( ) { long int n , a , b , c , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = gcd ( a , b ) ; printf ( \"%d %d\n\" , c , a * b / c ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; }", "label": 1, "id": 4393}
{"input": "int main ( ) { long int N , A [ 10000 ] , i , j , t , T , k = 0 , m ; scanf ( \"%ld\" , & T ) ; for ( t = 0 ; t < T ; t ++ ) { scanf ( \"%ld\" , & N ) ; m = N ; for ( i = 0 ; i < N ; i ++ ) { scanf ( \"%ld\" , & A [ i ] ) ; } for ( i = 0 ; i < ( N - 1 ) ; i ++ ) { for ( j = i ; j < ( N - 1 ) ; ) { if ( A [ j ] < A [ j + 1 ] ) { j ++ ; k ++ ; } else { if ( A [ j ] == A [ j + 1 ] ) { j ++ ; k ++ ; m = m - 2 ; } else { if ( A [ j ] > A [ j + 1 ] ) { break ; } } } } } printf ( \"%d\n\" , ( k + m ) ) ; k = 0 ; } return 0 ; }", "label": 3, "id": 17457}
{"input": "int arr [ 100 ] [ 100 ] = { 0 } ; void sum_triangle ( ) { int i , j , row , ele ; scanf ( \"%d\" , & row ) ; ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & ele ) ; if ( i == 0 ) arr [ i ] [ j ] = ele ; else { if ( j == 0 ) arr [ i ] [ j ] = ele + arr [ i - 1 ] [ j ] ; else { if ( arr [ i - 1 ] [ j - 1 ] + ele > arr [ i - 1 ] [ j ] + ele ) arr [ i ] [ j ] = arr [ i - 1 ] [ j - 1 ] + ele ; else arr [ i ] [ j ] = arr [ i - 1 ] [ j ] + ele ; } } } } int max = 0 ; for ( i = 0 ; i <= row - 1 ; i ++ ) { if ( arr [ row - 1 ] [ i ] > max ) max = arr [ row - 1 ] [ i ] ; } printf ( \"%d\" , max ) ; } int max ( int i , int j ) { if ( i > j ) return i ; else return j ; } int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; t ++ ) { sum_triangle ( ) ; } return 0 ; }", "label": 2, "id": 21396}
{"input": "void main ( ) { int a [ 10 ] , n , i , j , count , t , m , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( m = 0 ; m < n ; m ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; else break ; } printf ( \"\n%d\n\" , n + count ) ; count = 0 ; } }", "label": 3, "id": 4420}
{"input": "int main ( void ) { long int test ; scanf ( \"%ld\" , & test ) ; while ( test -- ) { long int i , n , min , a [ 50001 ] , ans ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( i == 0 ) min = a [ 0 ] ; if ( a [ i ] < min ) min = a [ i ] ; } ans = min * ( n - 1 ) ; printf ( \"%ld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 14218}
{"input": "int main ( ) { int T , N , j , i ; scanf ( \" %d\" , & T ) ; if ( T >= 1 && T <= 5 ) { for ( j = 0 ; j < T ; j ++ ) { scanf ( \" %d\" , & N ) ; int a [ N ] , sum = N , k ; for ( i = 0 ; i < N ; i ++ ) scanf ( \" %d\" , & a [ i ] ) ; for ( i = 0 ; i < N - 1 ; i ++ ) { for ( k = i + 1 ; k < N ; k ++ ) { if ( a [ k ] >= a [ k - 1 ] ) sum = sum + 1 ; else break ; } if ( i == 0 && k == N ) { sum = ( ( N * N ) + N ) / 2 ; break ; } } printf ( \"%d\n\" , sum ) ; } } }", "label": 0, "id": 11972}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a [ 100 ] [ 100 ] , i , j , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; } } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = 0 ; } } return 0 ; }", "label": 1, "id": 126}
{"input": "int gcd ( int x , int y ) ; int main ( ) { int a , b , g , lcm , t ; printf ( \"total number of test cases\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"enter the value of a and b \" ) ; scanf ( \"%d%d\" , & a , & b ) ; g = gcd ( a , b ) ; lcm = ( a * b ) / g ; printf ( \"gcd= %d\" , g ) ; printf ( \"\nlcm= %d\" , lcm ) ; } return 0 ; } int gcd ( int x , int y ) { int r ; r = x % y ; if ( r == 0 ) return y ; else return gcd ( y , r ) ; }", "label": 1, "id": 25076}
{"input": "int main ( ) { int t ; long int l , a , b , n , p , q ; scanf ( \"%d\" , & t ) ; while ( t -- ) { n = 2 ; p = 1 ; scanf ( \"%ld%ld\" , & a , & b ) ; while ( n < a && n < b ) { while ( a % n == 0 && b % n == 0 ) { p = p * n ; a = a / n ; b = b / n ; } n ++ ; } q = a * b ; q = q / p ; printf ( \"%ld %ld\n\" , p , q ) ; } return 0 ; }", "label": 2, "id": 3095}
{"input": "int main ( ) { int T , n , a [ 50000 ] , s , sum , i ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; sum = 0 ; if ( a [ 0 ] < a [ 1 ] ) s = a [ 0 ] ; else s = a [ 1 ] ; sum = sum + s ; for ( i = 2 ; i < n ; i ++ ) { if ( s > a [ i ] ) s = a [ i ] ; sum = sum + s ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 18513}
{"input": "long int gcd ( int , int ) ; int main ( ) { long int a , b , lcm , k , t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; k = gcd ( a , b ) ; lcm = ( a * b ) / k ; printf ( \"%ld %ld\" , k , lcm ) ; } } long int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } }", "label": 1, "id": 18025}
{"input": "long solve ( long * a , int i , int n , long * dp ) { if ( i >= n - 1 ) return 1 ; if ( a [ i ] > a [ i + 1 ] ) return dp [ i ] = 1 + solve ( a , i + 1 , n , dp ) ; else return dp [ i ] = 2 * solve ( a , i + 1 , n , dp ) ; } int main ( void ) { int t , i , n ; scanf ( \"%d\" , & t ) ; long a [ max ] , ans ; while ( t -- ) { long dp [ max ] = { 0 } ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; ans = solve ( a , 0 , n , dp ) ; printf ( \"%ld\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 703}
{"input": "int p [ 100 ] [ 100 ] ; int a [ 100 ] [ 100 ] ; int n ; int solve ( int i , int j ) { int t1 , t2 , t ; if ( i >= n ) return 0 ; else if ( a [ i ] [ j ] != - 1 ) return a [ i ] [ j ] ; else { t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; t = ( p [ i ] [ j ] ) + ( max ( t1 , t2 ) ) ; a [ i ] [ j ] = t ; return t ; } } int main ( ) { int t , i , j , k , res ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & p [ j ] [ k ] ) ; a [ j ] [ k ] = - 1 ; } } res = solve ( 0 , 0 ) ; printf ( \"%d\n\" , res ) ; } return 0 ; }", "label": 0, "id": 19080}
{"input": "int n , i , j , k , l , T , n , a , b , c ; int main ( ) { scanf ( \"%d\" , & T ) ; long long unsigned int M [ T ] [ 2 ] ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; c = b ; while ( a % c != 0 || b % c != 0 ) { while ( a % c != 0 ) { c = a % c ; } while ( b % c != 0 ) { c = b % c ; } } M [ i ] [ 0 ] = c ; M [ i ] [ 1 ] = a * b / c ; } for ( l = 0 ; l < T ; l ++ ) { printf ( \"\n%llu %llu\" , M [ l ] [ 0 ] , M [ l ] [ 1 ] ) ; } }", "label": 1, "id": 18687}
{"input": "int main ( ) { int tc ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { int a , b , c ; scanf ( \"%d %d\" , & a , & b ) ; c = a * b ; while ( a != 0 ) { int temp = a ; a = b % a ; b = temp ; } printf ( \"%d %d\n\" , b , c / b ) ; } }", "label": 1, "id": 5409}
{"input": "int main ( ) { int t , n , i , j ; int a [ MAX ] [ MAX ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) if ( ( a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ) > ( a [ i ] [ j - 1 ] + a [ i - 1 ] [ j - 1 ] ) ) a [ i - 1 ] [ j - 1 ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; else a [ i - 1 ] [ j - 1 ] = a [ i ] [ j - 1 ] + a [ i - 1 ] [ j - 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 12920}
{"input": "int main ( ) { int n , t , i = 0 , min = 0 ; long int cost = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; i = 1 ; while ( i <= n - 1 ) { if ( min > a [ i ] ) { min = a [ i ] ; cost += min ; i ++ ; } else { cost += min ; i ++ ; } } printf ( \"%ld\n\" , cost ) ; cost = 0 ; } return 0 ; }", "label": 1, "id": 10285}
{"input": "int f ; void gcd ( int a , int b , int c , int d ) { int i , k , p ; k = c ; for ( i = 1 ; i <= k ; i ++ ) { p = c % i ; if ( p == 0 ) { if ( d % i == 0 ) { f = i ; } } } printf ( \"%d\\t\" , f ) ; } void lcm ( int a , int b ) { int g ; g = a * b / f ; printf ( \"%d\n\" , g ) ; } int main ( void ) { int t , a , b , c , d ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; if ( a > b ) { c = b ; d = a ; } else { c = a ; d = b ; } gcd ( a , b , c , d ) ; lcm ( a , b ) ; } return 0 ; }", "label": 1, "id": 8331}
{"input": "long long signed int * * a ; long long signed int max ( long long signed int a , long long signed int b ) { if ( a > b ) return a ; else return b ; } void print ( long long signed int n ) { long long signed int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) printf ( \"%llu  \" , a [ i ] [ j ] ) ; printf ( \"\n\" ) ; } } long long signed int f ( long long signed int m1 ) { static long long signed int count = 0 ; count ++ ; long long unsigned int i , j , m ; for ( i = 0 ; i < m1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] + a [ i ] [ j ] ; } if ( j + 1 <= i ) { m = max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + m ; } if ( j == i ) { a [ i + 1 ] [ j + 1 ] = a [ i + 1 ] [ j + 1 ] + a [ i ] [ j ] ; } } } } void input ( long long signed int n ) { a = ( long long signed int * * ) malloc ( n * ( sizeof ( long long signed int ) ) ) ; long long signed int i , j ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( long long signed int * ) malloc ( ( i + 1 ) * sizeof ( long long signed int ) ) ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%llu\" , & a [ i ] [ j ] ) ; } } int main ( ) { long long signed int t , n , i ; scanf ( \"%llu\" , & t ) ; while ( t -- ) { scanf ( \"%llu\" , & n ) ; input ( n ) ; long long signed int k = f ( n - 1 ) ; for ( i = 0 ; i < n - 1 ; i ++ ) free ( a [ i ] ) ; k = a [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( k < a [ n - 1 ] [ i ] ) k = a [ n - 1 ] [ i ] ; } printf ( \"%llu\n\" , k ) ; free ( a [ n - 1 ] ) ; free ( a ) ; } }", "label": 0, "id": 7342}
{"input": "int arr [ 101 ] [ 101 ] ; int sum [ 101 ] [ 101 ] ; int main ( ) { int test , n , i , j , max , temp ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; if ( i == 0 ) sum [ i ] [ j ] = arr [ i ] [ j ] ; if ( j == 0 && i > 0 ) sum [ i ] [ j ] = arr [ i ] [ j ] + sum [ i - 1 ] [ j ] ; } } max = sum [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( sum [ i - 1 ] [ j ] > sum [ i - 1 ] [ j - 1 ] ) sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + arr [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; if ( sum [ i ] [ j ] > max ) max = sum [ i ] [ j ] ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 13609}
{"input": "int main ( ) { long int i , j , T , n , cost = 0 ; long int a [ 20 ] ; scanf ( \"%ld\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { cost = 0 ; scanf ( \"%ld\" , & n ) ; if ( n <= 50000 ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] < a [ j + 1 ] ) { cost = cost + a [ j ] ; } if ( a [ j + 1 ] < a [ j ] ) { cost = cost + a [ j + 1 ] ; } } printf ( \"%ld\" , cost ) ; printf ( \"\n\" ) ; } } }", "label": 3, "id": 19546}
{"input": "int main ( void ) { int t ; int a , b , m , n , k , i , h ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; if ( a > b ) k = b ; else k = a ; for ( i = 2 ; i <= k ; i ++ ) { if ( m % i == 0 && n % i == 0 ) { h = i ; break ; } } } printf ( \"%d %d\n\" , h , ( a * b ) / h ) ; return 0 ; }", "label": 1, "id": 6592}
{"input": "int main ( ) { int t , m , n , i , gcd = 1 , lcm ; scanf ( \"%d\n\" , & t ) ; while ( t > 0 ) { scanf ( \"%d %d\n\" , & m , & n ) ; for ( i = n ; i > 0 ; i -- ) { if ( ( m % i == 0 ) && ( n % i == 0 ) ) { gcd = i ; break ; } } lcm = ( m * n ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; t -- ; } return 0 ; }", "label": 2, "id": 9116}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long int a , b , f , na , nb , r ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { f = a ; a = b ; b = f ; } na = a ; nb = b ; r = nb % na ; while ( r > 0 ) { nb = na ; na = r ; r = nb % na ; } printf ( \"%ld %ld\n\" , na , ( a * b / na ) ) ; } return 0 ; }", "label": 0, "id": 12274}
{"input": "int gcd ( int a , int b ) ; int main ( void ) { int t , a , b ; int gc ; scanf ( \" %d\" , & t ) ; while ( t -- > 0 ) { scanf ( \" %d %d\" , & a , & b ) ; gc = gcd ( a , b ) ; printf ( \"%d %d\n\" , gc , a * b / gc ) ; } return 0 ; } int gcd ( int a , int b ) { int r ; while ( a % b != 0 ) { r = a % b ; a = b ; b = r ; } return b ; }", "label": 1, "id": 2034}
{"input": "int HCF ( int a , int b ) { if ( b == 0 ) return a ; return HCF ( b , a % b ) ; } int main ( int argc , const char * argv [ ] ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int m , n , a ; scanf ( \"%d %d\" , & m , & n ) ; a = HCF ( m , n ) ; printf ( \"%d %d\n\" , a , ( m * n ) / a ) ; } return 0 ; }", "label": 1, "id": 8395}
{"input": "int findpath ( int a [ 100 ] [ 100 ] , int i , int j , int lines ) { int c , b , current , weight ; weight = 0 ; if ( i > lines ) { return 0 ; } current = a [ i ] [ j ] ; c = findpath ( a , i + 1 , j , lines ) ; b = findpath ( a , i + 1 , j + 1 , lines ) ; if ( c > b ) weight = ( weight + current + c ) ; else weight = ( weight + current + b ) ; return weight ; } int main ( ) { int i , j , k , res ; int a [ 100 ] [ 100 ] ; int input , lines ; scanf ( \"%d\" , & input ) ; for ( k = 0 ; k < input ; k ++ ) { scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = 0 ; scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } res = findpath ( a , 0 , 0 , lines ) ; printf ( \"%d\n\" , res ) ; } i = 0 ; j = 0 ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { } } return 0 ; }", "label": 2, "id": 1427}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; while ( n -- ) { int rows , i , j ; scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = rows - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { int max = a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = a [ i ] [ j ] + max ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 26759}
{"input": "int gcd ( long a , long b ) { int z ; while ( a % b ) { z = b ; b = a % b ; a = z ; } return b ; } int lcm ( long a , long b ) { return a * b / gcd ( a , b ) ; } int main ( void ) { int i , t ; long a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) printf ( \"%ld %ld\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; else printf ( \"%ld %ld\n\" , gcd ( b , a ) , lcm ( b , a ) ) ; } return 0 ; }", "label": 1, "id": 17201}
{"input": "int main ( void ) { int n , i , j , t , sum = 0 ; scanf ( \"%d\" , & t ) ; int a [ 100 ] [ 100 ] ; while ( t ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) sum = a [ i ] [ j ] ; else sum = a [ i ] [ j + 1 ] ; a [ i - 1 ] [ j ] += sum ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 3, "id": 9843}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b ; scanf ( \"%lld%lld\" , & a , & b ) ; long long int result = gcd ( a , b ) ; printf ( \"%lld %lld\n\" , result , ( a * b ) / result ) ; } return 0 ; } long long int gcd ( long long int a , long long int b ) { if ( b == 0 ) return a ; else { int c = a % b ; gcd ( b , c ) ; } }", "label": 0, "id": 17115}
{"input": "int main ( ) { int m , n , i , j , k , max , arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { max = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; if ( j != 0 ) { if ( k != 0 && k != j ) { if ( arr [ j - 1 ] [ k ] > arr [ j - 1 ] [ k - 1 ] ) arr [ j ] [ k ] = arr [ j ] [ k ] + arr [ j - 1 ] [ k ] ; else arr [ j ] [ k ] = arr [ j ] [ k ] + arr [ j - 1 ] [ k - 1 ] ; } else if ( k == 0 ) arr [ j ] [ k ] = arr [ j ] [ k ] + arr [ j - 1 ] [ k ] ; else arr [ j ] [ k ] = arr [ j ] [ k ] + arr [ j - 1 ] [ k - 1 ] ; } else max = arr [ j ] [ k ] ; if ( arr [ j ] [ k ] > max ) max = arr [ j ] [ k ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 11974}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int T , n , i , j ; int arr [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & T ) ; if ( T > 1000 ) return ; while ( T -- ) { scanf ( \"%d\" , & n ) ; if ( n < 1 || n >= 100 ) return ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; if ( arr [ i ] [ j ] < 0 || arr [ i ] [ j ] > 99 ) return ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] = max ( ( arr [ i ] [ j ] + arr [ i + 1 ] [ j ] ) , ( arr [ i ] [ j ] + arr [ i + 1 ] [ j + 1 ] ) ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 3, "id": 6320}
{"input": "int main ( ) { int t , a , b , g , i , l , x , y ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) x = a ; else x = b ; for ( i = y ; i >= 1 ; i -- ) { if ( x % i == 0 && y % i == 0 ) g = i ; } l = ( a * b ) / g ; printf ( \"\n%d\\t%d\" , g , l ) ; t -- ; } }", "label": 2, "id": 23450}
{"input": "int n , max = 0 , large = 0 ; void largesum ( int k , int pos , int A [ ] , int sum ) { if ( k == n ) { sum = sum + A [ pos ] ; large = sum ; if ( large > max ) max = large ; } else { sum = sum + A [ pos ] ; largesum ( k + 1 , pos + k , A , sum ) ; largesum ( k + 1 , pos + k + 1 , A , sum ) ; } } int main ( void ) { int A [ 5050 ] , i , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int z ; z = ( n * ( n + 1 ) ) / 2 ; for ( i = 0 ; i < z ; i ++ ) scanf ( \"%d\" , & A [ i ] ) ; largesum ( 1 , 0 , A , 0 ) ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 2, "id": 9870}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int c = 0 , i , j , k ; long long int n ; scanf ( \"%lld\" , & n ) ; float a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%f\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { int p = 0 ; for ( k = i ; k < j ; k ++ ) { if ( a [ k ] > a [ j ] ) { p = 1 ; break ; } } if ( p == 0 ) c ++ ; if ( p == 1 ) break ; } } printf ( \"%d\n\" , c + n ) ; } return 0 ; }", "label": 0, "id": 20022}
{"input": "typedef long long int ll ; int main ( ) { ll a , b , t , i , c , d , k , l ; scanf ( \"%lld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; c = a > b ? a : b ; d = a < b ? a : b ; while ( c % d != 0 ) { k = d ; d = c % d ; c = k ; } l = ( a * b ) / d ; printf ( \"%lld\n%lld\n\" , d , l ) ; } }", "label": 1, "id": 22800}
{"input": "int main ( ) { int t , x , y , pr , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & x , & y ) ; pr = x * y ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } lcm = pr / x ; printf ( \"%d\\t%d\" , x , lcm ) ; } return 0 ; }", "label": 1, "id": 24336}
{"input": "int main ( void ) { int t , n , i , k , p = 0 ; long int arr [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; k = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] <= arr [ i + 1 ] ) { if ( i == ( n - 2 ) ) { k ++ ; } continue ; p = 0 ; } else { if ( p == 0 ) { k ++ ; p ++ ; } } } printf ( \"%d\" , k + n ) ; } return 0 ; }", "label": 1, "id": 11077}
{"input": "int gcd ( long int a , long int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long a , b ; scanf ( \"%d%d\" , & a , & b ) ; int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( \"%d %ld\n\" , g , l ) ; } }", "label": 0, "id": 10625}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; long long int n ; long long int a [ 110000 ] ; int i ; long long int j , s ; long long int k ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } j = 0 ; s = 1 ; k = 0 ; while ( j != n ) { if ( a [ j ] <= a [ j + 1 ] ) { j ++ ; s ++ ; } else { j = j + 1 ; k = k + s * ( s + 1 ) / 2 ; s = 1 ; } } printf ( \"%lld\n\" , k ) ; } return 0 ; }", "label": 0, "id": 12911}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , lcm , i , gcd ; scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; ++ i ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } printf ( \"%d \" , gcd ) ; lcm = ( a > b ) ? a : b ; while ( 1 ) { if ( lcm % a == 0 && lcm % b == 0 ) { printf ( \"%d \" , lcm ) ; break ; } ++ lcm ; } printf ( \"\n\" ) ; } return 0 ; }", "label": 2, "id": 15960}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , i , min = 100000000000 ; scanf ( \"%ld\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; printf ( \"%ld\n\" , ( min * ( n - 1 ) ) ) ; } }", "label": 0, "id": 25425}
{"input": "int main ( ) { int t , i ; long long a , b , j , temp , flag ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; if ( a > b ) { for ( j = 1 ; j <= b ; j ++ ) { if ( ( a % j == 0 ) && ( b % j == 0 ) ) flag = j ; } } else { for ( j = 1 ; j <= a ; j ++ ) { if ( ( a % j == 0 ) && ( b % j == 0 ) ) flag = j ; } } printf ( \"%lld \" , flag ) ; temp = a / flag ; printf ( \"%lld\" , ( temp * b ) ) ; } return 0 ; }", "label": 2, "id": 7422}
{"input": "int main ( void ) { int t , n , a [ 100000 ] , i , ctr [ 100000 ] , j = 0 ; scanf ( \"%d\" , & t ) ; int x = t ; while ( t -- ) { ctr [ j ] = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( i != 0 ) { if ( a [ i ] > a [ i - 1 ] ) ctr [ j ] = ctr [ j ] + 1 ; } } ctr [ j ] = ctr [ j ] + n ; j = j + 1 ; } for ( i = 0 ; i < x ; i ++ ) printf ( \"%d\n\" , ctr [ i ] ) ; return 0 ; }", "label": 1, "id": 11225}
{"input": "int main ( ) { int t , l [ 1000 ] , g [ 1000 ] , j , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int a , b , max , lcm = 1 ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) max = a ; else max = b ; for ( j = max ; ; j = j + max ) { if ( j % a == 0 && j % b == 0 ) { l [ i ] = j ; break ; } } g [ i ] = ( a * b ) / l [ i ] ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d %d\" , g [ i ] , l [ i ] ) ; printf ( \"\n\" ) ; } }", "label": 2, "id": 10919}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , k = 0 , j ; scanf ( \"%d\" , & n ) ; int l = ( n * ( n + 1 ) / 2 ) ; int a [ l ] ; for ( i = 0 ; i < l ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; long sum = a [ 0 ] ; i = 1 ; if ( n > 1 ) do { j = ( i * ( i + 1 ) / 2 ) ; if ( a [ j + k ] >= a [ j + k + 1 ] ) { printf ( \"I'm in if\n\" ) ; sum = sum + a [ j + k ] ; } else { printf ( \"I'm in else\n\" ) ; sum = sum + a [ j + k + 1 ] ; k ++ ; } i ++ ; } while ( i < n ) ; printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 3195}
{"input": "int LCM ( int a , int b ) { if ( a % b == 0 ) return a ; else if ( b % a == 0 ) return b ; else return a * b ; } int GCD ( int a , int b ) { while ( b > 0 ) { int temp ; temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { int T , A , B , i , result [ 2000 ] ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; ++ i ) { scanf ( \"%d %d\" , & A , & B ) ; result [ 2 * i ] = GCD ( A , B ) ; result [ ( 2 * i ) + 1 ] = LCM ( A , B ) ; } for ( i = 0 ; i < T ; ++ i ) { printf ( \"%d %d \n\" , result [ 2 * i ] , result [ ( 2 * i ) + 1 ] ) ; } return 0 ; }", "label": 1, "id": 21277}
{"input": "int fastread ( ) { int input ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; input = 0 ; while ( c > 33 ) { input = input * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 19714}
{"input": "int main ( ) { int cf , cf2 , n , i = 0 , * p , x , count = 0 , ch ; scanf ( \"%d\" , & ch ) ; while ( ch != 0 ) { scanf ( \"%d\" , & n ) ; p = ( int * ) malloc ( n * sizeof ( int ) ) ; while ( i != n ) { scanf ( \"%d\" , & p [ i ] ) ; i ++ ; } cf = n - 1 ; while ( cf != 0 ) { x = 0 ; while ( x < ( n - cf ) ) { i = x ; cf2 = 0 ; while ( i <= ( cf + x - 1 ) ) { if ( p [ i ] <= p [ i + 1 ] ) cf2 ++ ; i ++ ; } if ( cf == cf2 ) count ++ ; x ++ ; } cf -- ; } printf ( \"\n%d\" , ( count + n ) ) ; ch -- ; } return 0 ; }", "label": 2, "id": 17445}
{"input": "int arr [ 101 ] [ 101 ] ; int solve ( int i , int j , int n , int cache [ ] [ 101 ] ) { if ( i > n ) return 0 ; if ( ( cache [ i ] [ j ] ) > 0 ) return cache [ i ] [ j ] ; int t1 = solve ( i + 1 , j , n , cache ) ; int t2 = solve ( i + 1 , j + 1 , n , cache ) ; if ( t1 > t2 ) { cache [ i ] [ j ] = ( arr [ i ] [ j ] + t1 ) ; return ( arr [ i ] [ j ] + t1 ) ; } else { cache [ i ] [ j ] = ( arr [ i ] [ j ] + t1 ) ; return ( arr [ i ] [ j ] + t2 ) ; } } int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int cache [ 101 ] [ 101 ] = { 0 } ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } printf ( \"%d\n\" , solve ( 1 , 1 , n , cache ) ) ; } return 0 ; }", "label": 1, "id": 2144}
{"input": "void swap ( int * , int * ) ; main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; int g ; g = gcd ( a , b ) ; printf ( \"%d %d\n\" , g , ( a * b ) / g ) ; } } int gcd ( int a , int b ) { if ( b > a ) swap ( & a , & b ) ; if ( a % b == 0 ) return b ; else gcd ( b , a % b ) ; } void swap ( int * a , int * b ) { int t ; t = * a ; * a = * b ; * b = t ; }", "label": 1, "id": 2984}
{"input": "long long int subArrCount = 0 ; int arr [ 100000 ] ; int main ( void ) { unsigned int totalTest , testLoop , arrSize , arrLoop ; unsigned int i , temp ; scanf ( \"%d\" , & totalTest ) ; for ( testLoop = 0 ; testLoop < totalTest ; testLoop ++ ) { scanf ( \"%d\" , & arrSize ) ; for ( i = 0 ; i < arrSize ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; temp = arrSize - 1 ; for ( arrLoop = 0 ; arrLoop < temp ; arrLoop ++ ) { subArrCount ++ ; for ( i = arrLoop ; i < arrSize ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { subArrCount ++ ; } else break ; } } printf ( \"%d\n\" , subArrCount ++ ) ; subArrCount = 0 ; } return ( 0 ) ; }", "label": 1, "id": 10713}
{"input": "long int gcd ( long int a , long int b ) { while ( a != b ) { if ( a > b ) return ( gcd ( a - b , b ) ) ; else return ( gcd ( a , b - a ) ) ; } return a ; } int main ( ) { int t ; long int lcm , a , b , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld%ld\" , & a , & b ) ; max = gcd ( a , b ) ; lcm = ( a * b ) / max ; printf ( \"%ld %ld\n\" , max , lcm ) ; } }", "label": 0, "id": 19895}
{"input": "int main ( ) { int temp1 , temp2 , num1 , num2 , gcd , lcm , rem ; printf ( \"enter the two values\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; temp1 = num1 ; temp2 = num2 ; while ( num2 != 0 ) { rem = num1 / num2 ; num1 = num2 ; num2 = rem ; } gcd = num1 ; lcm = ( temp1 * temp2 ) / gcd ; printf ( \"gcd of %d and %d=%d\n\" , temp1 , temp2 , gcd ) ; printf ( \"lcmof %d and %d=%d\n\" , temp1 , temp2 , lcm ) ; return 0 ; }", "label": 1, "id": 26827}
{"input": "int array [ 100 ] [ 100 ] , memoization [ 100 ] [ 100 ] ; int length ; int path ( int row , int column ) { if ( row == length - 1 || column == length - 1 ) { return array [ row ] [ column ] ; } if ( path ( row + 1 , column ) > path ( row + 1 , column + 1 ) ) { if ( memoization [ row ] [ column ] == - 1 ) memoization [ row ] [ column ] = path ( row + 1 , column ) + array [ row ] [ column ] ; return memoization [ row ] [ column ] ; } else { if ( memoization [ row ] [ column ] == - 1 ) memoization [ row ] [ column ] = path ( row + 1 , column + 1 ) + array [ row ] [ column ] ; return memoization [ row ] [ column ] ; } } int main ( void ) { int i , j , t , r ; scanf ( \"%d\" , & t ) ; for ( r = 0 ; r < t ; r ++ ) { scanf ( \"%d\" , & length ) ; for ( i = 1 ; i <= length ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { memoization [ i - 1 ] [ j - 1 ] = - 1 ; } } for ( i = 1 ; i <= length ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & array [ i - 1 ] [ j - 1 ] ) ; } } printf ( \"%d\n\" , path ( 0 , 0 ) ) ; for ( i = 1 ; i <= length ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { array [ i - 1 ] [ j - 1 ] = 0 ; memoization [ i - 1 ] [ j - 1 ] = - 1 ; } } } return 0 ; }", "label": 2, "id": 13955}
{"input": "void initialize ( int lines ) ; int findSum ( int matrix [ 100 ] [ 100 ] , int lines ) ; int max ( int a , int b ) ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int findSum ( int matrix [ 100 ] [ 100 ] , int lines ) { int i = 0 ; while ( lines > 1 ) { for ( i = 0 ; i <= lines - 2 ; i ++ ) { matrix [ lines - 2 ] [ i ] = matrix [ lines - 2 ] [ i ] + max ( matrix [ lines - 1 ] [ i ] , matrix [ lines - 1 ] [ i + 1 ] ) ; } lines -- ; } return matrix [ lines ] [ lines ] ; } void initialize ( int lines ) { int matrix [ 100 ] [ 100 ] ; int i = 0 ; int a = 0 ; int val = 0 ; for ( ; i < lines ; i ++ ) { for ( ; a < lines ; a ++ ) { if ( a > i ) matrix [ i ] [ a ] = 0 ; else { scanf ( \"%d\" , & matrix [ i ] [ a ] ) ; if ( matrix [ i ] [ a ] > 99 || matrix [ i ] [ a ] < 0 ) return ; } } a = 0 ; } val = findSum ( matrix , lines ) ; printf ( \"%d\" , val ) ; } int main ( ) { int cases = 0 ; int lines = 0 ; int i = 0 ; scanf ( \"%d\" , & cases ) ; if ( lines < 0 || lines > 100 ) { return - 1 ; } for ( ; i < cases ; i ++ ) { scanf ( \"%d\" , & lines ) ; initialize ( lines ) ; } return 0 ; }", "label": 1, "id": 6588}
{"input": "int main ( void ) { int i , j , t , n , max , a [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; sum [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; max = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 0 ) sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else if ( sum [ i - 1 ] [ j ] > sum [ i - 1 ] [ j - 1 ] ) sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + a [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 11504}
{"input": "main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9883}
{"input": "main ( ) { static int a [ 100 ] [ 100 ] ; int i , j , n , t , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ j ] [ i ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = i ; j >= 0 ; j -- ) a [ j ] [ i ] += ( a [ j ] [ i + 1 ] > a [ j + 1 ] [ i + 1 ] ? a [ j ] [ i + 1 ] : a [ j + 1 ] [ i + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9261}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int A , B , GCD , store1 , store2 ; scanf ( \"%lld %lld\" , & A , & B ) ; store1 = ( A >= B ) ? B : A ; store2 = ( A >= B ) ? A : B ; if ( store1 > store2 / 2 ) { store1 = store1 / 2 ; } for ( i = store1 ; i > 0 ; i -= 2 ) { if ( A % i == 0 && B % i == 0 ) { printf ( \"%lld \" , i ) ; GCD = i ; break ; } } printf ( \"%lld\n\" , ( A * B ) / GCD ) ; } }", "label": 1, "id": 15481}
{"input": "int main ( void ) { long int a , b , rem , i , n , p , q ; scanf ( \"%ld\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; p = a ; q = b ; while ( a % b != 0 ) { rem = a % b ; a = b ; b = rem ; } printf ( \"%ld %ld\n\" , b , ( p * q ) / b ) ; } return 0 ; }", "label": 0, "id": 2151}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int i , ip , j , n , k , a ; int arr [ 100 ] [ 100 ] ; scanf ( \"%d\" , & ip ) ; for ( k = 0 ; k < ip ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { a = max ( arr [ i ] [ j ] , arr [ i ] [ j + 1 ] ) ; i -- ; arr [ i ] [ j ] = a + arr [ i ] [ j ] ; i ++ ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5656}
{"input": "int mat [ 101 ] [ 101 ] , rows ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int sumtrian ( int i , int j ) { if ( i > rows ) return 0 ; return mat [ i ] [ j ] + max ( sumtrian ( i + 1 , j ) , sumtrian ( i + 1 , j + 1 ) ) ; } int main ( ) { int count , i , j , result ; scanf ( \"%d\" , & count ) ; while ( count -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } } result = sumtrian ( 0 , 0 ) ; printf ( \"%d\n\" , result ) ; } return 0 ; }", "label": 2, "id": 14670}
{"input": "int f = 0 ; int max ( int a , int b ) { if ( a > b ) return a ; else { f = 1 ; return b ; } } int main ( ) { int i , t , n , j , sum , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } j = 0 ; sum = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { sum = sum + max ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; if ( f == 1 ) j ++ ; } printf ( \"%d\" , sum ) ; } return 0 ; }", "label": 1, "id": 12682}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , k ; scanf ( \"%d%d\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%d %d\n\" , k , ( a * b ) / k ) ; } return 0 ; }", "label": 1, "id": 3612}
{"input": "int n_of_rows , n_elements ; char * elements ; int greatest , pop_row , pop_column ; char pr , pc ; int r , c , sum , backtrace , n_of_bt ; char * ch , * another_ch ; void init ( ) ; void push ( int , int ) ; void pop ( ) ; void getrows ( ) ; void traverse ( ) ; typedef struct stack { int top ; char * row ; char * column ; } st ; st s ; int main ( ) { int n_of_cases , n_of_rows , index ; greatest = - 1 ; ch = ( char * ) malloc ( 1 ) ; another_ch = ( char * ) malloc ( 1 ) ; scanf ( \"%d\" , & n_of_cases ) ; for ( index = 0 ; index < n_of_cases ; index ++ ) { getrows ( ) ; traverse ( ) ; printf ( \"%d\n\" , greatest ) ; free ( s . row ) ; free ( s . column ) ; free ( elements ) ; } return 0 ; } void getrows ( ) { int i , n ; scanf ( \"%d\" , & n_of_rows ) ; n_elements = 0 ; s . row = ( char * ) malloc ( n_of_rows ) ; s . column = ( char * ) malloc ( n_of_rows ) ; for ( i = 1 ; i <= n_of_rows ; i ++ ) n_elements += i ; elements = ( char * ) malloc ( n_elements ) ; for ( i = 0 ; i < n_elements ; i ++ ) { scanf ( \"%d\" , & n ) ; sprintf ( another_ch , \"%d\" , n ) ; elements [ i ] = another_ch [ 0 ] ; } } int get_element ( int i , int j ) { int k , index ; k = 0 ; for ( index = 1 ; index <= i ; index ++ ) k += index ; k += j ; return ( ( int ) elements [ k ] - ( int ) '0' ) ; } void init ( ) { s . top = - 1 ; } void push ( int r , int c ) { s . top += 1 ; sprintf ( ch , \"%d\" , r ) ; s . row [ s . top ] = ch [ 0 ] ; sprintf ( ch , \"%d\" , c ) ; s . column [ s . top ] = ch [ 0 ] ; } void pop ( ) { pr = s . row [ s . top ] ; pc = s . column [ s . top ] ; pop_row = ( int ) pr - ( int ) '0' ; pop_column = ( int ) pc - ( int ) '0' ; s . top -- ; } void traverse ( ) { r = c = sum = 0 ; while ( r < n_of_rows ) { sum += get_element ( r , c ) ; push ( r , c ) ; r ++ ; } if ( sum > greatest ) greatest = sum ; backtrace = 1 ; while ( backtrace < n_of_rows ) { for ( n_of_bt = 1 ; n_of_bt <= backtrace ; n_of_bt ++ ) { pop ( ) ; r = pop_row ; c = pop_column ; sum -= get_element ( r , c ) ; } pop ( ) ; r = pop_row ; c = pop_column ; push ( r , c ) ; r ++ ; c ++ ; while ( r < n_of_rows ) { sum += get_element ( r , c ) ; push ( r , c ) ; r ++ ; } if ( sum > greatest ) greatest = sum ; backtrace ++ ; } }", "label": 3, "id": 3724}
{"input": "int main ( ) { int i , n , min , cost , k ; long long int b ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & b ) ; int a [ b ] ; for ( k = 0 ; k < b ; k ++ ) { scanf ( \"%d\" , & a [ k ] ) ; min = a [ 0 ] ; if ( min > a [ k ] ) { min = a [ k ] ; } } cost = min * ( n - 1 ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 21551}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; else if ( a == 0 ) return b ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return a * b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a ; int b ; scanf ( \"%d%d\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = lcm ( a , b ) ; printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 3120}
{"input": "int t , n , i , j ; int main ( ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ 105 ] [ 105 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) ( a [ i ] [ j ] + a [ i - 1 ] [ j ] ) >= ( a [ i ] [ j + 1 ] + a [ i - 1 ] [ j ] ) ? ( a [ i - 1 ] [ j ] = ( a [ i ] [ j ] + a [ i - 1 ] [ j ] ) ) : ( a [ i - 1 ] [ j ] = ( a [ i ] [ j + 1 ] + a [ i - 1 ] [ j ] ) ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17298}
{"input": "int a [ 100 ] [ 100 ] ; int temp [ 100 ] ; int recursion ( int j ) { int rval , k ; if ( j == 0 ) { rval = a [ 0 ] [ 0 ] + temp [ 0 ] ; } else { for ( k = 0 ; k <= j ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] + temp [ k ] ; } for ( k = 0 ; k < j ; k ++ ) { temp [ k ] = a [ j ] [ k ] > a [ j ] [ k + 1 ] ? a [ j ] [ k ] : a [ j ] [ k + 1 ] ; } rval = recursion ( j - 1 ) ; } return rval ; } int main ( ) { int t , n ; int i , j , k ; int v , maxsum ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < 100 ; j ++ ) temp [ j ] = 0 ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & v ) ; a [ j ] [ k ] = v ; } } maxsum = recursion ( j - 1 ) ; printf ( \"%d \n\" , maxsum ) ; } return 0 ; }", "label": 0, "id": 18617}
{"input": "int main ( ) { int i , j , k , ns , nl , a [ 100 ] [ 100 ] , t ; scanf ( \"%d\" , & ns ) ; while ( ns -- ) { scanf ( \"%d\" , & nl ) ; for ( j = 1 ; j <= nl ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) scanf ( \"%d\" , & a [ j ] [ k ] ) ; } printf ( \"\n\" ) ; for ( j = nl ; j > 1 ; j -- ) { for ( k = 1 ; k < j ; k ++ ) { if ( a [ j ] [ k ] < a [ j ] [ k + 1 ] ) t = 1 ; else t = 0 ; a [ j - 1 ] [ k ] = a [ j - 1 ] [ k ] + a [ j ] [ k + t ] ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 10748}
{"input": "int main ( ) { int i , j , k , t , n , a [ 10 ] , n1 , n2 , summa ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; k = n * ( n + 1 ) / 2 ; for ( i = 1 ; i <= k ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = n ; i > 0 ; i -- ) { k = 1 ; j = i * ( i + 1 ) / 2 ; for ( j ; k < i ; j -- , k ++ ) a [ j - i ] += max ( a [ j ] , a [ j - 1 ] ) ; } printf ( \"%d\n\" , a [ 1 ] ) ; } return 0 ; }", "label": 3, "id": 25390}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long int n ; scanf ( \"%ld\" , & n ) ; long int arr [ n ] , j ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & arr [ j ] ) ; long int min = arr [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( min > arr [ j ] ) min = arr [ j ] ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 2843}
{"input": "main ( ) { int t , g , l , a , b , n , m , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; n = a > b ? b : a ; m = a > b ? a : b ; j = n ; while ( 1 ) { if ( m % j == 0 && n % j == 0 ) { g = j ; l = m * n / g ; break ; } j -- ; } printf ( \"%d %d\n\" , g , l ) ; } }", "label": 1, "id": 13832}
{"input": "int main ( ) { long t , n , min , x , c , i ; scanf ( \"\" , & t ) ; while ( t > 0 ) { min = 1000000 ; scanf ( \"\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"\" , & x ) ; if ( x < min ) { min = x ; } } c = min * ( n - 1 ) ; printf ( \"\n\" , c ) ; t -- ; } return ( 0 ) ; }", "label": 2, "id": 16954}
{"input": "long int gcd ( long int a , long int b ) { if ( b == 0 ) return 1 ; return ( gcd ( b , a % b ) ) ; } int main ( ) { int t ; long int a , b , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( \"%ld %ld\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 17465}
{"input": "int main ( ) { int t , i , j ; long n , * a , min , * result ; scanf ( \"%d\" , & t ) ; result = ( long * ) malloc ( sizeof ( long ) * t ) ; for ( i = 1 ; i <= t && i <= 10 ; i ++ ) { scanf ( \"%ld\" , & n ) ; a = ( long * ) malloc ( sizeof ( long ) * n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & a [ j ] ) ; for ( j = 0 , min = a [ 0 ] ; j < n ; j ++ , n -- ) if ( min > a [ j ] && min > a [ n - 1 ] ) if ( a [ j ] < a [ n - 1 ] ) min = a [ j ] ; else min = a [ n - 1 ] ; result [ i - 1 ] = min ; } for ( i = 0 ; i < t && i < 10 ; i ++ ) printf ( \"%ld\n\" , result [ i ] ) ; return ( 0 ) ; }", "label": 1, "id": 3311}
{"input": "main ( ) { int n , i , j , k , m ; scanf ( \"%d\" , & n ) ; int a [ 100 ] [ 100 ] , s [ n ] ; for ( k = 0 ; k < n ; k ++ ) { scanf ( \"%d\" , & m ) ; for ( j = 1 ; j <= m ; j ++ ) for ( i = 0 ; i < j ; i ++ ) scanf ( \"%d\" , & a [ j - 1 ] [ i ] ) ; s [ k ] = a [ 0 ] [ 0 ] ; for ( i = 1 , j = 0 ; i < m ; i ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) { s [ k ] += a [ i ] [ j ] ; } else { s [ k ] += a [ i ] [ j + 1 ] ; j ++ ; } } } for ( k = 0 ; k < n ; k ++ ) printf ( \"%d\n\" , s [ k ] ) ; return 0 ; }", "label": 1, "id": 5865}
{"input": "int scan ( ) { int t = 0 ; char c ; c = getchar_unlocked ( ) ; while ( c < '0' || c > '9' ) c = getchar_unlocked ( ) ; while ( c >= '0' && c <= '9' ) { t = ( t << 3 ) + ( t << 1 ) + c - '0' ; c = getchar_unlocked ( ) ; } return ( t ) ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int a [ 100 ] [ 100 ] = { 0 } , s [ 100 ] [ 100 ] = { 0 } , i , j , k = 0 , t , n ; t = scan ( ) ; while ( t -- > 0 ) { n = scan ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = scan ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) s [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; else if ( j == 0 ) s [ i ] [ j ] = s [ i - 1 ] [ j ] + a [ i ] [ j ] ; else s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - 1 ] [ j ] , s [ i - 1 ] [ j - 1 ] ) ; } for ( i = 0 ; i < n ; i ++ ) if ( s [ n - 1 ] [ i ] > k ) k = s [ n - 1 ] [ i ] ; printf ( \"%d\n\" , k ) ; } return 0 ; }", "label": 1, "id": 23580}
{"input": "long cache [ 10000 ] ; int read_int ( ) { char c = gc ( ) ; while ( c < '0' || c > '9' ) c = gc ( ) ; int ret = 0 ; while ( c >= '0' && c <= '9' ) { ret = 10 * ret + c - '0' ; c = gc ( ) ; } return ret ; } int solve ( int i , int j , int n , int a [ ] [ n ] ) { long t1 , t2 , t , temp ; temp = i * j ; if ( i > n - 1 ) return 0 ; else if ( cache [ temp ] != 0 ) return ( cache [ i * j ] ) ; t1 = solve ( i + 1 , j , n , a ) ; t2 = solve ( i + 1 , j + 1 , n , a ) ; if ( t1 >= t2 ) t = t1 + a [ i ] [ j ] ; else t = t2 + a [ i ] [ j ] ; cache [ temp ] = t ; return t ; } int main ( ) { int t , n , i , j ; long res ; t = read_int ( ) ; while ( t != 0 ) { n = read_int ( ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < 10000 ; i ++ ) cache [ i ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = read_int ( ) ; } } res = solve ( 0 , 0 , n , a ) ; printf ( \"%ld\n\" , res ) ; t -- ; } return 0 ; }", "label": 1, "id": 6312}
{"input": "int main ( ) { int t , a , sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & a ) ; int b [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { scanf ( \"%d\" , & b [ i ] ) ; } for ( int i = 0 ; i < a - 1 ; i ++ ) { if ( b [ i ] > b [ i + 1 ] ) { b [ i ] = 0 ; sum = sum + b [ i + 1 ] ; } else if ( b [ i + 1 ] > b [ i ] ) { b [ i + 1 ] = b [ i ] ; sum = sum + b [ i ] ; b [ i ] = 0 ; } } printf ( \"%d\n\" , sum ) ; } }", "label": 1, "id": 15174}
{"input": "int cash [ 105 ] [ 105 ] ; int rec [ 105 ] [ 2 ] ; int ri = 0 ; int sumx ( int mat [ 105 ] [ 105 ] , int i , int j , int lines ) { int n = 0 , a = 0 , b = 0 ; if ( cash [ i ] [ j ] != 0 ) { return cash [ i ] [ j ] ; } else if ( i == lines - 2 ) { n = ( mat [ i + 1 ] [ j ] > mat [ i + 1 ] [ j + 1 ] ) ? mat [ i + 1 ] [ j ] : mat [ i + 1 ] [ j + 1 ] ; cash [ i ] [ j ] = n + mat [ i ] [ j ] ; rec [ ri ] [ 0 ] = i ; rec [ ri ++ ] [ 1 ] = j ; return n + mat [ i ] [ j ] ; } else { a = sumx ( mat , i + 1 , j , lines ) ; b = sumx ( mat , i + 1 , j + 1 , lines ) ; n = ( a > b ) ? a : b ; cash [ i ] [ j ] = n + mat [ i ] [ j ] ; rec [ ri ] [ 0 ] = i ; rec [ ri ++ ] [ 1 ] = j ; return n + mat [ i ] [ j ] ; } } int main ( ) { int i = 0 , k = 0 ; int lines = 0 , n = 0 ; int r = 0 ; int tc = 0 ; int mat [ 105 ] [ 105 ] ; scanf ( \"%d\" , & tc ) ; while ( tc -- ) { scanf ( \"%d\" , & lines ) ; for ( i = 0 ; i < 105 ; i ++ ) { for ( k = 0 ; k < 105 ; k ++ ) { cash [ i ] [ k ] = 0 ; } } i = 0 ; k = 0 ; while ( i < lines ) { while ( k <= i ) { scanf ( \"%d\" , & mat [ i ] [ k ] ) ; k ++ ; } k = 0 ; i ++ ; } if ( lines == 1 ) { r = mat [ 0 ] [ 0 ] ; } else { r = sumx ( mat , 0 , 0 , lines ) ; } i = 0 ; while ( i < ri ) { cash [ ( rec [ i ] [ 0 ] ) ] [ ( rec [ i ] [ 1 ] ) ] = 0 ; rec [ i ] [ 0 ] = 0 ; rec [ i ] [ 1 ] = 0 ; i ++ ; } ri = 0 ; printf ( \"%d\n\" , r ) ; } return 0 ; }", "label": 3, "id": 23261}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , m , i , j , l , g ; scanf ( \"%d %d\" , & n , & m ) ; if ( n < m ) { j = n ; } else { j = m ; } for ( i = j ; i > 0 ; i -- ) { if ( n % i == 0 && m % i == 0 ) { g = i ; break ; } } printf ( \"%d %d\n\" , g , n * m / g ) ; } return 0 ; }", "label": 1, "id": 8951}
{"input": "int main ( ) { int t , n , j = 0 , min ; scanf ( \"%d\" , & t ) ; do { scanf ( \"%d\" , & n ) ; int a [ n ] ; min = 1000000 ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; j ++ ; } while ( j < t ) ; }", "label": 0, "id": 20653}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t && t <= 5 ) { int n , max = 0 , temp = 0 ; scanf ( \"%d\" , & n ) ; if ( n > 0 && n <= 1000 ) { int ar [ n ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & ar [ i ] ) ; if ( ar [ i ] > 100000 * 10000 ) i -- ; } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( ar [ i + 1 ] - ar [ i ] > 0 ) temp ++ ; else temp = 0 ; if ( temp == 1 ) max += temp ; } printf ( \"%d\n\" , n + max ) ; } t -- ; } return 0 ; }", "label": 1, "id": 7432}
{"input": "int max ( int , int ) ; int inp ( ) { int i = 0 ; char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; while ( c > 33 ) { i = i * 10 + c - '0' ; c = getchar_unlocked ( ) ; } return i ; } int main ( ) { int * * a , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = inp ( ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 0, "id": 7471}
{"input": "unsigned long int Cache [ MAX ] [ MAX ] ; int Visited [ MAX ] [ MAX ] , Matrix [ MAX ] [ MAX ] ; unsigned long int Solve ( int i , int j , int n ) { unsigned long int t = 0 , t1 = 0 , t2 = 0 , max = 0 ; if ( i > n ) return 0 ; if ( Visited [ i - 1 ] [ j - 1 ] == 1 ) return ( Cache [ i - 1 ] [ j - 1 ] ) ; t1 = Solve ( i + 1 , j , n ) ; t2 = Solve ( i + 1 , j + 1 , n ) ; if ( t1 > t2 ) max = t1 ; else max = t2 ; t = max + Matrix [ i - 1 ] [ j - 1 ] ; Cache [ i - 1 ] [ j - 1 ] = t ; Visited [ i - 1 ] [ j - 1 ] = 1 ; return ( t ) ; } void Clear ( int n ) { int i = 0 , j = 0 ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) { Visited [ i - 1 ] [ j - 1 ] = 0 ; Cache [ i - 1 ] [ j - 1 ] = 0 ; } return ; } int main ( ) { unsigned long int Max_cost = 0 ; int Test_cases = 0 , Max_lines = 0 , Row = 0 , Column = 0 ; scanf ( \"%d\" , & Test_cases ) ; Clear ( MAX ) ; while ( Test_cases > 0 ) { scanf ( \"%d\" , & Max_lines ) ; for ( Row = 1 ; Row <= Max_lines ; Row ++ ) for ( Column = 1 ; Column <= Row ; Column ++ ) scanf ( \"%d\" , & Matrix [ Row - 1 ] [ Column - 1 ] ) ; Max_cost = Solve ( 1 , 1 , Max_lines ) ; printf ( \"%lu\n\" , Max_cost ) ; Clear ( Max_lines ) ; Test_cases -- ; } return 0 ; }", "label": 0, "id": 9334}
{"input": "int t ; long n , a [ 50005 ] , i ; long long min ; main ( ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( i == 0 ) min = a [ i ] ; else if ( min > a [ i ] ) min = a [ i ] ; } min *= ( n - 1 ) ; printf ( \"%lld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 2001}
{"input": "int max ( int a , int b ) { return ( a > b ? a : b ) ; } int sum ( int i , int j , int n , int c [ ] [ n ] , int a [ ] [ n ] ) { if ( i == n - 1 ) { a [ i ] [ j ] = c [ i ] [ j ] ; return a [ i ] [ j ] ; } if ( a [ i + 1 ] [ j ] == - 1 ) a [ i + 1 ] [ j ] = sum ( i + 1 , j , n , c , a ) ; if ( a [ i + 1 ] [ j + 1 ] == - 1 ) a [ i + 1 ] [ j + 1 ] = sum ( i + 1 , j + 1 , n , c , a ) ; a [ i ] [ j ] = ( c [ i ] [ j ] + max ( a [ i + 1 ] [ j ] , a [ i + 1 ] [ j + 1 ] ) ) ; return a [ i ] [ j ] ; } int main ( ) { int t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t ) { scanf ( \"%d\" , & n ) ; int c [ n ] [ n ] ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & c [ i ] [ j ] ) ; a [ i ] [ j ] = - 1 ; } for ( j = i + 1 ; j < n ; j ++ ) { c [ i ] [ j ] = 0 ; a [ i ] [ j ] = - 1 ; } } printf ( \"%d\n\" , sum ( 0 , 0 , n , c , a ) ) ; t -- ; } return 0 ; }", "label": 0, "id": 13215}
{"input": "int st [ 102 ] [ 102 ] ; int flag [ 102 ] [ 102 ] ; int as [ 102 ] [ 102 ] ; int n ; int compute ( int a , int b ) { int x , y , l ; if ( a > n ) return 0 ; if ( flag [ a ] [ b ] ) return st [ a ] [ b ] ; x = compute ( a + 1 , b ) ; y = compute ( a + 1 , b + 1 ) ; l = x > y ? x : y ; l += as [ a ] [ b ] ; flag [ a ] [ b ] = 1 ; st [ a ] [ b ] = l ; return l ; } int main ( ) { int t , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { flag [ i ] [ j ] = 0 ; scanf ( \"%d\" , & as [ i ] [ j ] ) ; } } printf ( \"%d\n\" , compute ( 1 , 1 ) ) ; } }", "label": 0, "id": 5611}
{"input": "int main ( ) { int test , i , a , b , x , y , t , gcd , lcm ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d  %d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 5317}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , c , p , j , n , b , i , t ; scanf ( \"%d\" , & t ) ; for ( p = 0 ; p < t ; p ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( b < a ) { c = a ; a = b ; b = c ; } int flag = 0 ; for ( i = 1 ; i <= b ; i ++ ) { n = a * i ; for ( j = 1 ; j <= a ; j ++ ) { if ( flag == 1 ) { break ; } if ( b * j == n ) { flag = 1 ; } } if ( flag == 1 ) { break ; } } printf ( \"\n%d  %d\" , n , gcd ( a , b ) ) ; } return 0 ; } int gcd ( int a , int b ) { int k ; k = b % a ; if ( k == 0 ) { return a ; } else { a = k ; b = a ; return ( gcd ( a , b ) ) ; } }", "label": 2, "id": 1729}
{"input": "int a [ 100 ] [ 100 ] , n ; int tri ( int , int ) ; int max ( int , int ) ; void main ( ) { int i , j , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; printf ( \"%d\n\" , tri ( 0 , 0 ) ) ; } } int tri ( int i , int j ) { if ( i == n - 1 || j == n - 1 ) return a [ i ] [ j ] ; return a [ i ] [ j ] + max ( tri ( i + 1 , j ) , tri ( i + 1 , j + 1 ) ) ; } int max ( int x , int y ) { return x > y ? x : y ; }", "label": 2, "id": 6534}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , r , nr , t , dr ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { nr = num1 ; dr = num2 ; } else { nr = num2 ; dr = num1 ; } r = nr % dr ; while ( r != 0 ) { nr = dr ; dr = r ; r = nr % dr ; } gcd = dr ; lcm = num1 * num2 / gcd ; printf ( \"%d \" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 10127}
{"input": "int main ( ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int arr [ n ] , ind = - 1 ; long min = 100000 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < min ) { min = arr [ i ] ; ind = i ; } } printf ( \"%ld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 22244}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , t , n , i , j , k ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( j = n - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k < ( j + 1 ) ; k ++ ) { if ( a [ j + 1 ] [ k ] <= a [ j + 1 ] [ k + 1 ] ) { a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k + 1 ] ; } else { a [ j ] [ k ] = a [ j ] [ k ] + a [ j + 1 ] [ k ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 10751}
{"input": "int a [ 101 ] [ 101 ] , t = 1 , ans [ 10000 ] , rows ; int main ( void ) { int i , j , test_case , k , r , max = 0 ; scanf ( \"%d\" , & test_case ) ; for ( i = 1 ; i <= test_case ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 1 ; j <= rows ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } below ( 1 , 1 , 1 ) ; right ( 1 , 1 , 1 ) ; for ( r = 1 ; ans [ r ] != '\\0' ; r ++ ) { if ( ans [ r ] > max ) max = ans [ r ] ; } printf ( \"%d\" , max ) ; } return 0 ; } void below ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + 1 ; } else { i = i + 1 ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } } void right ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + 1 ; } else { i = i + 1 ; j = j + 1 ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } }", "label": 3, "id": 13655}
{"input": "int main ( ) { long int a , b , i , t , x , y , z , lcm , gcd ; scanf ( \"%ld\" , & t ) ; if ( t >= 1 && t <= 1000 ) for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( ( a <= 1 || a > 1000000 ) && ( b <= 1 || b > 1000000 ) ) { return 0 ; } x = a ; y = b ; while ( a != 0 ) { z = a ; a = b % a ; b = z ; } gcd = b ; lcm = ( ( x * y ) / b ) ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 5893}
{"input": "int main ( ) { int n , t , i , j ; int a [ 102 ] [ 102 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < t ; i ++ ) ; { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , a [ i ] [ j ] ) ; } } for ( i = t - 2 ; i >= 0 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 4669}
{"input": "int max ( int p , int q ) { if ( p > q ) return p ; else return q ; } int main ( ) { int cases , i , j ; scanf ( \"%d\" , & cases ) ; while ( cases -- ) { int n ; scanf ( \"%d\" , & n ) ; int array [ 100 ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) array [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & array [ i ] [ j ] ) ; if ( i != 0 ) array [ i ] [ j ] += max ( array [ i - 1 ] [ j ] , array [ i - 1 ] [ j - 1 ] ) ; } } int max = array [ n - 1 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( max < array [ n - 1 ] [ i ] ) max = array [ n - 1 ] [ i ] ; } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 11686}
{"input": "int main ( ) { int a , t , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; while ( n != m ) { if ( n > m ) n = n - m ; else m = m - n ; } printf ( \"%d\n%d\n\" , n , ( a * b ) / n ) ; } return 0 ; }", "label": 1, "id": 3081}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; gcd ( b , a % b ) ; } int main ( ) { int a , b , t , g ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; g = gcd ( a , b ) ; printf ( \"\n%d %d\" , g , ( a * b / g ) ) ; } return 0 ; }", "label": 1, "id": 2546}
{"input": "int main ( ) { int N , T ; long int A , B ; long int count , tempC ; int flag ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; count = N ; tempC = 1 ; flag = 0 ; if ( N > 1 ) { scanf ( \"%ld %ld\" , & A , & B ) ; N -- ; N -- ; if ( B > A ) { tempC ++ ; } while ( N -- ) { A = B ; scanf ( \"%ld\" , & B ) ; if ( B > A ) { tempC ++ ; } else { count = count + ( tempC - 1 ) ; tempC = 1 ; } } } else { scanf ( \"%ld\" , & A ) ; } printf ( \"%ld\n\" , count ) ; } return 0 ; }", "label": 1, "id": 3482}
{"input": "int main ( ) { int a , b , c , d , t , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; c = a ; d = b ; while ( 1 ) { if ( a == b ) { printf ( \"%d \" , a ) ; break ; } else if ( a > b ) a = a - b ; else b = b - a ; } if ( c > d ) lcm = c ; else lcm = d ; while ( 1 ) { if ( lcm % c == 0 && lcm % d == 0 ) { printf ( \"%d\n\" , lcm ) ; break ; } else lcm = lcm + 1 ; } } }", "label": 2, "id": 24650}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int m ; scanf ( \"%d\" , & m ) ; int d , i , tmp ; scanf ( \"%d\" , & tmp ) ; for ( i = 1 ; i < m ; i ++ ) { scanf ( \"%d\" , & d ) ; if ( tmp > d ) tmp = d ; } printf ( \"%d\n\" , tmp * ( m - 1 ) ) ; } return 0 ; }", "label": 0, "id": 5946}
{"input": "int dis ( int a , int b ) { if ( a - b > 0 ) { return a - b ; } else { return b - a ; } } int main ( ) { int t , i , n , j , a , k , b , m , c ; char arr [ 50000 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { a = 0 ; b = 0 ; c = 0 ; scanf ( \"%d\" , & n ) ; m = n ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; } for ( j = 0 ; j < m - 1 ; j ++ ) { a = 0 ; b = 0 ; for ( k = 0 ; k < n - 1 ; k ++ ) { if ( ( arr [ k ] != 'a' ) && ( arr [ k + 1 ] != 'a' ) ) { if ( a < dis ( arr [ k ] , arr [ k + 1 ] ) ) { a = dis ( arr [ k ] , arr [ k + 1 ] ) ; b = k ; } } } if ( arr [ b ] > arr [ b + 1 ] ) { c = c + arr [ b + 1 ] ; for ( k = b ; k < n - 1 ; k ++ ) { arr [ k ] = arr [ k + 1 ] ; } n -- ; } else { c = c + arr [ b ] ; for ( k = b + 1 ; k < n - 1 ; k ++ ) { arr [ k ] = arr [ k + 1 ] ; } n -- ; } } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 2, "id": 14543}
{"input": "int main ( void ) { long long int n , A [ 100001 ] , i ; int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } long long int k = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( A [ i ] <= A [ k ] ) k = i ; } printf ( \"%lld\n\" , ( n - 1 ) * A [ k ] ) ; } return 0 ; }", "label": 0, "id": 8012}
{"input": "int main ( ) { long int i , j , n , t ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long int count = 0 , len = 1 ; scanf ( \"%ld\" , & n ) ; long long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & a [ j ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j + 1 ] >= a [ j ] ) len ++ ; else { count = count + ( len * ( len - 1 ) ) / 2 ; len = 1 ; } } if ( len > 1 ) count = count + ( len * ( len - 1 ) ) / 2 ; printf ( \"%ld\" , n + count ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 0, "id": 24319}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , i ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 8630}
{"input": "int main ( ) { int t , i , j , temp , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int sum ; long int n ; scanf ( \"%ld\" , & n ) ; long int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%ld\" , & arr [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) { temp = arr [ j + 1 ] ; arr [ j + 1 ] = arr [ j ] ; arr [ j ] = temp ; } } } sum = arr [ 0 ] * ( n - 1 ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 25551}
{"input": "int main ( ) { int T , i , j ; unsigned long long int N ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%llu\" , & N ) ; unsigned long long int p , * a , min ; min = 99999 ; p = 0 ; a = ( unsigned long long int * ) malloc ( N * sizeof ( unsigned long long int ) ) ; for ( j = 0 ; j < N ; j ++ ) { scanf ( \"%llu\" , & a [ j ] ) ; if ( a [ j ] < min ) min = a [ j ] ; } { p = min * ( N - 1 ) ; printf ( \"%llu\n\" , p ) ; } } return 0 ; }", "label": 0, "id": 18844}
{"input": "int main ( ) { int cases , rows , factor , factor2 ; int row [ 2 ] [ 100 ] ; register int i , j , k ; for ( j = 0 ; j < 100 ; j ++ ) row [ 0 ] [ j ] = row [ 1 ] [ j ] = 0 ; scanf ( \"%d\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 0 ; j < rows ; j ++ ) { factor = j % 2 ; factor2 = ( j + 1 ) % 2 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & row [ factor ] [ k ] ) ; if ( k == 0 ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else if ( k == ( j - 1 ) ) row [ factor ] [ k ] += row [ factor2 ] [ k - 1 ] ; else { if ( row [ factor2 ] [ k ] > row [ factor2 ] [ k - 1 ] ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else row [ factor ] [ k ] += row [ factor2 ] [ k - 1 ] ; } } } factor = ( rows + 1 ) % 2 ; factor2 = 0 ; for ( k = 0 ; k < rows ; k ++ ) if ( row [ factor ] [ k ] > factor2 ) factor2 = row [ factor ] [ k ] ; printf ( \"%d\n\" , factor2 ) ; for ( j = 0 ; j < rows ; j ++ ) row [ 1 ] [ j ] = row [ 0 ] [ j ] = 0 ; } return 0 ; }", "label": 1, "id": 8910}
{"input": "int main ( ) { unsigned int s , m , n , i , j , k , k1 , ans ; scanf ( \"%d\" , & m ) ; for ( s = 0 ; s < m ; s ++ ) { scanf ( \"%d\" , & n ) ; unsigned int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & k ) ; if ( i == 0 && j == 0 ) { a [ i ] [ j ] = k ; ans = k ; k1 = k ; } else { if ( i != j ) a [ i ] [ j ] = a [ i - 1 ] [ j > 0 ? j - 1 : j ] >= a [ i - 1 ] [ j ] ? ( a [ i - 1 ] [ j > 0 ? j - 1 : j ] + k ) : ( a [ i - 1 ] [ j ] + k ) ; else a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] + k ; k1 = a [ i ] [ j ] ; if ( k1 > ans ) ans = k1 ; } } printf ( \"%d\" , ans ) ; } return 0 ; }", "label": 1, "id": 2422}
{"input": "int main ( ) { int t , n , i ; long long int min , a [ 50000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a [ 0 ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( \"%d\n\" , ( n - 1 ) * min ) ; } }", "label": 1, "id": 16253}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int N ; scanf ( \"%d\" , & N ) ; int A [ N ] , i , min ; long int c ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%d\" , & A [ i ] ) ; min = A [ 0 ] ; for ( i = 0 ; i < N ; i ++ ) { if ( min > A [ i ] ) min = A [ i ] ; } c = min * ( N - 1 ) ; printf ( \"%ld\n\" , c ) ; } return 0 ; }", "label": 0, "id": 9348}
{"input": "int main ( ) { long int a , b , x , c , d , t ; scanf ( \"%ld\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { c = a ; d = b ; x = d ; } else { c = b ; d = a ; x = d ; } while ( x > 0 ) { d = x ; x = c % d ; c = d ; } printf ( \"%ld %ld \n\" , d , a * b / d ) ; } return 0 ; }", "label": 0, "id": 18918}
{"input": "int main ( ) { int t , a , b , max , min , g , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } g = gcd ( max , min ) ; l = ( a * b ) / g ; printf ( \"%d %d\" , g , l ) ; printf ( \"\n\" ) ; } } int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else gcd ( b , a % b ) ; }", "label": 1, "id": 23540}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int tri [ n ] [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & tri [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] = tri [ i ] [ j ] + tri [ i + 1 ] [ j ] ; else tri [ i ] [ j ] = tri [ i ] [ j ] + tri [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , tri [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 14521}
{"input": "int main ( void ) { int t , n , a , b , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & b ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( a < b ) b = a ; } n -- ; printf ( \"%d\n\" , b * n ) ; } return 0 ; }", "label": 0, "id": 17674}
{"input": "int main ( ) { int t , k , i ; long m , x , y , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long l ; scanf ( \"%ld%ld\" , & x , & y ) ; l = x * y ; if ( x < y ) m = y ; else m = x ; for ( i = m ; i >= 1 ; i -- ) if ( x % i == 0 && y % i == 0 ) gcd = i ; printf ( \"%ld %ld\n\" , gcd , l / gcd ) ; } return 0 ; }", "label": 2, "id": 24408}
{"input": "int main ( ) { int t ; int n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; int min ; scanf ( \"%d\" , & min ) ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 21717}
{"input": "int main ( ) { int n , a [ 100 ] [ 100 ] , i , j , q , k ; scanf ( \"%d\" , & q ) ; for ( k = 0 ; k < q ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else { if ( a [ i - 1 ] [ j ] >= a [ i - 1 ] [ j - 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; } } } for ( j = 0 ; j < ( n - 1 ) ; j ++ ) { if ( a [ n - 1 ] [ j ] > a [ n - 1 ] [ j + 1 ] ) a [ n - 1 ] [ j + 1 ] = a [ n - 1 ] [ j ] ; } printf ( \"%d\" , a [ n - 1 ] [ n - 1 ] ) ; } }", "label": 1, "id": 25274}
{"input": "int main ( ) { long int a , b , c , d , e , gcd , lcm ; int f , g ; scanf ( \"%d\" , & g ) ; for ( f = 1 ; f <= g ; f ++ ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a > b ) { c = a ; d = b ; } else { c = b ; d = a ; } e = c % d ; while ( e != 0 ) { c = d ; d = e ; e = c % d ; } gcd = d ; lcm = a * b / gcd ; printf ( \"%d\n\" , gcd ) ; printf ( \"%d\n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 9249}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int n1 ; scanf ( \"%d\" , & n1 ) ; int b [ n1 ] ; int count = 0 ; int j = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { scanf ( \"%d\" , & b [ i ] ) ; while ( j < n ) { if ( b [ i ] == a [ j ] ) { count ++ ; j ++ ; break ; } j ++ ; } } if ( count == n1 ) printf ( \"Yes\n\" ) ; else printf ( \"No\n\" ) ; } return 0 ; }", "label": 2, "id": 21245}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm , T , i ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 26125}
{"input": "int main ( ) { int cases , arr [ 100 ] [ 100 ] , ans = 0 , i , j , k , rows ; scanf ( \"%d\" , & cases ) ; for ( i = 0 ; i < cases ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 0 ; j < rows ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } for ( k = 0 ; k <= j && j != 0 ; k ++ ) { if ( k == 0 ) { arr [ j ] [ k ] = arr [ j ] [ k ] + arr [ j - 1 ] [ k ] ; } else if ( k == ( j ) ) { arr [ j ] [ k ] = arr [ j ] [ k ] + arr [ j - 1 ] [ k - 1 ] ; } else { if ( ( arr [ j - 1 ] [ k - 1 ] ) > ( arr [ j - 1 ] [ k ] ) ) { arr [ j ] [ k ] = arr [ j - 1 ] [ k - 1 ] + arr [ j ] [ k ] ; } else { arr [ j ] [ k ] = arr [ j - 1 ] [ k ] + arr [ j ] [ k ] ; } } } } for ( j = 0 ; j < rows ; j ++ ) { if ( arr [ rows - 1 ] [ j ] > ans ) { ans = arr [ rows - 1 ] [ j ] ; } } printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 15076}
{"input": "int main ( ) { int a , b , gcd , n , m , c , T , A , B ; scanf ( \"%d\" , & T ) ; while ( T ) { scanf ( \"%d %d\" , & A , & B ) ; m = A ; c = B ; while ( B != 0 ) { gcd = A % B ; A = B ; B = gcd ; } n = ( m * c ) / A ; printf ( \"%d %d\n\" , A , n ) ; T -- ; } }", "label": 1, "id": 3593}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int min ( int a , int b ) { if ( a < b ) return a ; return b ; } int lcm ( int a , int b ) { int m = max ( a , b ) ; int k = 2 ; while ( m % min ( a , b ) != 0 ) { m /= ( k - 1 ) ; m = m * k ; k ++ ; } return m ; } int gcf ( int a , int b ) { int i ; for ( i = min ( a , b ) ; i > 0 ; i -- ) { if ( min ( a , b ) % i != 0 ) continue ; if ( max ( a , b ) % i == 0 ) return i ; } return i ; } int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcf ( a , b ) , lcm ( a , b ) ) ; } return 0 ; }", "label": 2, "id": 1739}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } main ( ) { int n , m , t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & n , & m ) ; int k = gcd ( n , m ) ; int lcm = ( n * m ) / k ; printf ( \"%d %d\n\" , k , lcm ) ; } }", "label": 1, "id": 19540}
{"input": "int main ( ) { int t , i , a , b , rem , a1 , b1 ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; a1 = a ; b1 = b ; rem = a % b ; while ( rem > 0 ) { a = b ; b = rem ; rem = a % b ; } printf ( \"%d %d\n\" , b , ( a1 * b1 ) / b ) ; } return 0 ; }", "label": 1, "id": 20571}
{"input": "int gcd ( int x , int y ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return 0 ; } int gcd ( int x , int y ) { while ( x != y ) { if ( x > y ) x -= y ; else y -= x ; } return x ; }", "label": 1, "id": 14723}
{"input": "main ( ) { long a [ 101 ] [ 101 ] , n , r , i , j , k ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; for ( i = 1 ; i <= r ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = r - 1 ; i >= 1 ; i -- ) for ( j = 1 ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? a [ i + 1 ] [ j ] : a [ i + 1 ] [ j + 1 ] ; } printf ( \"%d\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 1, "id": 7713}
{"input": "int main ( ) { int t ; long a [ 5 ] [ 1000 ] , n [ 5 ] , count [ 5 ] , i , j , l , k , b [ 1000 ] , sum [ 5 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n [ i ] ) ; for ( j = 0 ; j < n [ i ] ; j ++ ) { scanf ( \"%li\" , & a [ i ] [ j ] ) ; b [ 0 ] = 1 ; if ( a [ i ] [ j ] >= a [ i ] [ j - 1 ] && j >= 1 ) { b [ j ] = b [ j - 1 ] + 1 ; } else { b [ j ] = 1 ; } } sum [ i ] = 0 ; for ( l = 0 ; l < n [ i ] ; l ++ ) { sum [ i ] = sum [ i ] + b [ l ] ; } } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%li\n\" , sum [ i ] ) ; } return 0 ; }", "label": 3, "id": 5269}
{"input": "int main ( ) { int n , m , d , i , t , k , j , c , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int k = 0 ; scanf ( \"%d %d\" , & n , & m ) ; a = n ; b = m ; c = n - m ; d = c ; if ( c == 0 ) { printf ( \"%d %d\n\" , n , n ) ; } while ( c != 0 ) { if ( n > m ) { c = n - m ; if ( c > m ) { n = c ; c = n - m ; } else if ( c <= m ) { n = m ; m = c ; c = n - m ; } } else if ( n < m ) { c = m - n ; if ( c > n ) { m = c ; c = n - m ; } else if ( c <= n ) { m = n ; n = c ; c = m - n ; } } } if ( d != 0 ) printf ( \"%d %d\n\" , n , ( ( a * b ) / n ) ) ; } }", "label": 1, "id": 9609}
{"input": "int gcd ( int m , int n ) { if ( m % n == 0 ) { return n ; } else { return gcd ( n , m % n ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int m , n , c , d ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & m , & n ) ; c = gcd ( m , n ) ; d = ( m * n ) / c ; printf ( \"%d %d\n\" , c , d ) ; } }", "label": 1, "id": 24712}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , sum = 0 , k , tmp , b [ 100 ] , m , * c , T , N , count ; for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < 100 ; i ++ ) b [ i ] = 0 ; scanf ( \"%d\" , & T ) ; c = ( int * ) malloc ( T * sizeof ( int ) ) ; for ( m = 0 ; m < T ; m ++ ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } int l ; for ( i = N - 1 ; i > 0 ; i -- ) { k = i - 1 ; for ( j = 0 ; ( j + 1 ) < ( i + 1 ) ; j ++ ) { if ( ( a [ k ] [ j ] + a [ i ] [ j ] ) > ( a [ k ] [ j ] + a [ i ] [ j + 1 ] ) ) b [ j ] = a [ k ] [ j ] + a [ i ] [ j ] ; else b [ j ] = a [ k ] [ j ] + a [ i ] [ j + 1 ] ; } l = 0 ; while ( b [ l ] != 0 ) { a [ i - 1 ] [ l ] = b [ l ] ; l ++ ; } } c [ m ] = a [ 0 ] [ 0 ] ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%d\n\" , c [ i ] ) ; return 0 ; }", "label": 0, "id": 22162}
{"input": "int main ( ) { int t = 0 , n = 0 , i = 0 , j = 0 , min = 0 , element = 0 ; while ( 1 ) { scanf ( \"%d\" , & t ) ; if ( ! ( t >= 1 && t <= 10 ) ) { printf ( \"\nConstraint: 1<=T<=10. Again Plz\" ) ; continue ; } break ; } int R [ t ] ; for ( i = 0 ; i < t ; i ++ ) { while ( 1 ) { scanf ( \"\n%d\" , & n ) ; if ( ! ( n >= 2 && n <= 50000 ) ) { printf ( \"\nConstraint: 2<=N<=50000. Again Plz\" ) ; continue ; } break ; } for ( j = 0 ; j < n ; j ++ ) { while ( 1 ) { scanf ( \"%d\" , & element ) ; if ( ! ( element >= 1 && element <= 100000 ) ) { printf ( \"\nConstraint: 1<=A<=100000. Again Plz\" ) ; continue ; } break ; } if ( j != 0 ) { if ( element < min ) { min = element ; } } else { min = element ; } } R [ t ] = min * ( n - 1 ) ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%d\n\" , R [ i ] ) ; } return 0 ; }", "label": 1, "id": 5784}
{"input": "int knownP [ 10000 ] = { 0 } ; int rtTrg [ MAXL ] [ MAXL ] ; int maxPath ( int level , int offset , int maxlevel ) { int sum1 , sum2 ; if ( ( knownP [ SPOT_LOCATION ] != UNKNOWN ) && ( ! NOMOREDOWN ) ) { return knownP [ SPOT_LOCATION ] ; } if ( NOMOREDOWN ) { return knownP [ SPOT_LOCATION ] = rtTrg [ level ] [ offset ] ; } else { sum1 = maxPath ( level + 1 , offset , maxlevel ) ; sum2 = maxPath ( level + 1 , offset + 1 , maxlevel ) ; knownP [ SPOT_LOCATION ] = ( ( sum1 > sum2 ) ? sum1 : sum2 ) + rtTrg [ level ] [ offset ] ; return knownP [ SPOT_LOCATION ] ; } return ; } void fastread_D ( int * base ) { char c = 0 ; while ( c < 33 ) { c = getchar_unlocked ( ) ; } * base = 0 ; while ( c > 33 ) { * base = * base * 10 + c - '0' ; c = getchar_unlocked ( ) ; } } int main ( ) { int i , j , cases ; int totalLevels = 0 ; fastread_D ( & cases ) ; while ( cases -- ) { memset ( rtTrg , 0 , sizeof ( rtTrg ) ) ; memset ( knownP , UNKNOWN , sizeof ( knownP ) ) ; fastread_D ( & totalLevels ) ; for ( i = 0 ; i < totalLevels ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { fastread_D ( & rtTrg [ i ] [ j ] ) ; } } printf ( \"%d\n\" , maxPath ( 0 , 0 , totalLevels - 1 ) ) ; } return 0 ; }", "label": 0, "id": 15771}
{"input": "int GCD ( int a , int b ) { int rem = a % b ; if ( rem == 0 ) return b ; else return GCD ( b , rem ) ; } int main ( ) { int t , n1 , n2 , i , gcd , lcm ; scanf ( \"%d\" , & t ) ; while ( t >= 1 ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; gcd = GCD ( n2 , n1 ) ; lcm = gcd * ( n1 / gcd ) * ( n2 / gcd ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; t -- ; } return 0 ; }", "label": 1, "id": 3464}
{"input": "int a [ 100 ] [ 100 ] ; int ans [ 100 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int h = 0 ; while ( h < t ) { int n ; scanf ( \"%d\" , & n ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } int sum = a [ 0 ] [ 0 ] ; j = 0 ; for ( i = 0 ; i < n ; i ++ ) { int max ; for ( ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { max = a [ i + 1 ] [ j ] ; sum += max ; break ; } else if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) { max = a [ i + 1 ] [ j + 1 ] ; sum += max ; break ; } } } ans [ h ] = sum ; h ++ ; } for ( h = 0 ; h < t ; h ++ ) printf ( \"%d\n\" , ans [ h ] ) ; return 0 ; }", "label": 3, "id": 20981}
{"input": "long int find_gcd ( long int A , long int B ) { if ( A == 0 ) return B ; else if ( B == 0 ) return A ; else return find_gcd ( B , A % B ) ; } long int find_LCM ( long int A , long int B , long int GCD ) { return ( A * B ) / GCD ; } int main ( ) { int T , i ; long int A , B , gcd , lcm ; scanf ( \"%d\" , & T ) ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%ld%ld\" , & A , & B ) ; gcd = find_gcd ( A , B ) ; lcm = find_LCM ( A , B , gcd ) ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 5423}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , i , x , a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; x = gcd ( a , b ) ; printf ( \"%d %d\" , x , ( a * b ) / x ) ; printf ( \"\n\" ) ; } return 0 ; } int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; return gcd ( b , a % b ) ; }", "label": 1, "id": 22013}
{"input": "int dis ( int a , int b ) { if ( a - b > 0 ) { return a - b ; } else { return b - a ; } } int main ( ) { int t , i , n , j , a , k , b , m , c ; char arr [ 50000 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { a = 0 ; b = 0 ; c = 0 ; scanf ( \"%d\" , & n ) ; m = n ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; } for ( j = 0 ; j < m - 1 ; j ++ ) { a = 0 ; b = 0 ; for ( k = 0 ; k < n - 1 ; k ++ ) { if ( ( arr [ k ] != 'a' ) && ( arr [ k + 1 ] != 'a' ) ) { if ( a < dis ( arr [ k ] , arr [ k + 1 ] ) ) { a = dis ( arr [ k ] , arr [ k + 1 ] ) ; b = k ; } } } if ( arr [ b ] > arr [ b + 1 ] ) { c = c + arr [ b + 1 ] ; for ( k = b ; k < n - 1 ; k ++ ) { arr [ k ] = arr [ k + 1 ] ; } n -- ; } else { c = c + arr [ b ] ; for ( k = b + 1 ; k < n - 1 ; k ++ ) { arr [ k ] = arr [ k + 1 ] ; } n -- ; } } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 2, "id": 10926}
{"input": "void main ( ) { long int t , i , j , n , a [ 100 ] [ 100 ] , temp ; long int sum = 0 , max , k , loc [ 100 ] , loc1 [ 100 ] , var = 0 , var1 = 0 ; int calc [ 100 ] ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( \"%ld\" , & a [ j ] [ k ] ) ; } } j = n - 1 ; max = a [ j ] [ 0 ] ; for ( k = 0 ; k < j + 1 ; k ++ ) { if ( a [ j ] [ k ] > max ) { max = a [ j ] [ k ] ; } } for ( k = 0 ; k < j + 1 ; k ++ ) { if ( max == a [ j ] [ k ] ) { loc1 [ var ] = k ; var ++ ; } } sum += max ; while ( j != 0 ) { var1 = 0 ; k = 0 ; j -- ; while ( k < var ) { temp = loc1 [ k ++ ] ; if ( temp == 0 ) { calc [ var1 ] = a [ j ] [ 0 ] ; loc [ var1 ++ ] = 0 ; } else if ( temp == n - 1 ) { calc [ var1 ] = a [ j ] [ n - 2 ] ; loc [ var1 ++ ] = n - 2 ; } else { if ( a [ j ] [ temp ] > a [ j ] [ temp - 1 ] ) { calc [ var1 ] = a [ j ] [ temp ] ; loc [ var1 ++ ] = temp ; } else if ( a [ j ] [ temp ] < a [ j ] [ temp - 1 ] ) { calc [ var1 ] = a [ j ] [ temp - 1 ] ; loc [ var1 ++ ] = temp - 1 ; } else { calc [ var1 ] = a [ j ] [ temp - 1 ] ; loc [ var1 ++ ] = temp - 1 ; calc [ var1 ] = a [ j ] [ temp ] ; calc [ var1 ++ ] = temp ; } } } max = calc [ 0 ] ; for ( k = 0 ; k < var1 ; k ++ ) { if ( calc [ k ] > max ) { max = calc [ k ] ; } } var = 0 ; for ( k = 0 ; k < var1 ; k ++ ) { if ( max == calc [ k ] ) { loc1 [ var ] = loc [ k ] ; var ++ ; } } sum += max ; } printf ( \"%ld\" , sum ) ; sum = 0 ; } }", "label": 1, "id": 22133}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , n , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 4818}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , t , n , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { a [ i - 1 ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) ? a [ i ] [ j ] : a [ i ] [ j + 1 ] ; } } printf ( \"%d \n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24309}
{"input": "void solv ( void ) ; int main ( ) { int i , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) solv ( ) ; return 0 ; } void solv ( ) { int i , j , h , max = 0 ; int tri [ 101 ] = { 0 } ; scanf ( \"%d\" , & h ) ; for ( i = 0 ; i < h ; i ++ ) { int new_tri [ 101 ] = { 0 } ; for ( j = 1 ; j < i + 2 ; j ++ ) { scanf ( \"%d\" , new_tri + j ) ; new_tri [ j ] += tri [ j - 1 ] < tri [ j ] ? tri [ j ] : tri [ j - 1 ] ; } for ( j = 1 ; j < i + 2 ; j ++ ) tri [ j ] = new_tri [ j ] ; } for ( i = 1 ; i <= h ; i ++ ) max = max < tri [ i ] ? tri [ i ] : max ; printf ( \"%d\n\" , max ) ; }", "label": 0, "id": 10283}
{"input": "int main ( ) { int test , num , i , j , k ; int val [ 100 ] [ 100 ] ; scanf ( \"%d\" , & test ) ; for ( i = 0 ; i < test ; i ++ ) { scanf ( \"%d\" , & num ) ; for ( j = 0 ; j < num ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & val [ j ] [ k ] ) ; } for ( j = num - 1 ; j > 0 ; j -- ) { for ( k = num - 1 ; k > 0 ; k -- ) { if ( ( val [ j ] [ k ] + val [ j - 1 ] [ k - 1 ] ) > ( val [ j ] [ k - 1 ] + val [ j - 1 ] [ k - 1 ] ) ) val [ j - 1 ] [ k - 1 ] = val [ j ] [ k ] + val [ j - 1 ] [ k - 1 ] ; else val [ j - 1 ] [ k - 1 ] = val [ j ] [ k - 1 ] + val [ j - 1 ] [ k - 1 ] ; } } printf ( \"%d\n\" , val [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 24382}
{"input": "int main ( ) { int t ; long long int out [ 11 ] , i , n , j , min ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { min = 100001 ; scanf ( \"%lld\" , & n ) ; int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & arr [ j ] ) ; if ( arr [ j ] < min ) { min = arr [ j ] ; } } out [ i ] = ( long long int ) min * ( n - 1 ) ; } for ( i = 0 ; i < t ; i ++ ) { printf ( \"%lld\n\" , out [ i ] ) ; } }", "label": 0, "id": 19274}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { int n ; scanf ( \"%d\" , & n ) ; int j ; int arr [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & arr [ j ] ) ; int min = arr [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( min > arr [ j ] ) min = arr [ j ] ; } printf ( \"%d\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 6413}
{"input": "int small ( int * x , long s , long e ) { if ( ( e - s ) == 1 ) { if ( * ( x + s ) < * ( x + e ) ) return * ( x + s ) ; else return * ( x + e ) ; } else if ( s == e ) return * ( x + e ) ; else { int mid = ( s + e ) / 2 ; int p = small ( x , s , mid ) ; int q = small ( x , mid + 1 , e ) ; if ( p < q ) return p ; else return q ; } } int main ( void ) { long int t , n , i , j , p ; scanf ( \"%ld\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%ld\" , & n ) ; int * ptr ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , ( ptr + j ) ) ; } p = small ( ptr , 0 , n - 1 ) ; printf ( \"%ld\n\" , p * ( n - 1 ) ) ; free ( ptr ) ; } return 0 ; }", "label": 0, "id": 23094}
{"input": "int sum ( int * * a , int i , int n ) { int j , sum1 , sum2 ; if ( i < n - 2 ) { sum ( a , i + 1 , n ) ; } for ( j = 0 ; j <= i && ( i + 1 ) < n && ( j + 1 ) < n ; j ++ ) { sum1 = * ( * ( a + i ) + j ) + * ( * ( a + i + 1 ) + j ) ; sum2 = * ( * ( a + i ) + j ) + * ( * ( a + i + 1 ) + j + 1 ) ; if ( sum1 >= sum2 ) * ( * ( a + i ) + j ) = sum1 ; else * ( * ( a + i ) + j ) = sum2 ; } return 0 ; } int main ( ) { int t , n , i , j ; int * * a ; a = ( int * * ) malloc ( sizeof ( int * ) * 100 ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { * ( a + i ) = ( int * ) malloc ( sizeof ( int ) * 100 ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , * ( a + i ) + j ) ; } } sum ( a , 0 , n ) ; printf ( \"%d\n\" , * ( * ( a + 0 ) + 0 ) ) ; } return 0 ; }", "label": 0, "id": 14313}
{"input": "int main ( ) { int t ; long n ; int i ; long long a [ 50001 ] , sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } sum = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ 0 ] >= a [ i ] ) a [ 0 ] = a [ i ] ; sum = sum + a [ 0 ] ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 16036}
{"input": "int main ( void ) { int n , a [ 100 ] [ 100 ] , cache [ 100 ] [ 100 ] ; int t , i , j , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) cache [ i ] [ j ] = a [ i ] [ j ] + cache [ i - 1 ] [ j ] ; else { if ( i == 0 && j == 0 ) cache [ i ] [ j ] = a [ i ] [ j ] ; else { max = cache [ i - 1 ] [ j ] > cache [ i - 1 ] [ j - 1 ] ? cache [ i - 1 ] [ j ] : cache [ i - 1 ] [ j - 1 ] ; cache [ i ] [ j ] = a [ i ] [ j ] + max ; } } } max = 0 ; for ( i = 0 ; i < n ; i ++ ) if ( cache [ n - 1 ] [ i ] > max ) max = cache [ n - 1 ] [ i ] ; printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 12836}
{"input": "int main ( void ) { int t , i , L , H ; scanf ( \"%d\" , & t ) ; int AB [ t ] [ 2 ] ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d %d\" , & AB [ i ] [ 1 ] , & AB [ i ] [ 2 ] ) ; } for ( i = 1 ; i <= t ; i ++ ) { H = ( AB [ i ] [ 1 ] < AB [ i ] [ 2 ] ) ? AB [ i ] [ 1 ] : AB [ i ] [ 2 ] ; while ( 1 ) { if ( AB [ i ] [ 1 ] % H == 0 && AB [ i ] [ 2 ] % H == 0 ) { printf ( \"%d %d\n\" , H , ( AB [ i ] [ 1 ] * AB [ i ] [ 2 ] ) / H ) ; break ; } else H -- ; } } return 0 ; }", "label": 1, "id": 26164}
{"input": "int main ( ) { int test , a [ 50000 ] , cost , min , i , n ; scanf ( \"%d\" , & test ) ; while ( test -- ) { cost = 0 ; min = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } cost = min * ( n - 1 ) ; printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 6119}
{"input": "int main ( ) { int testcases , n , i , j , a [ n ] ; scanf ( \"%d\" , & testcases ) ; for ( i = 1 ; i <= testcases ; i ++ ) { long int sum = 0 ; int x = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; sum = sum + a [ j ] ; if ( x < a [ j ] ) x = a [ j ] ; } printf ( \"%ld\n\" , sum - x ) ; } return ( 0 ) ; }", "label": 3, "id": 2842}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int A [ 500010 ] , a , ans = 100000000 , i ; scanf ( \"%lld\" , & a ) ; for ( i = 1 ; i <= a ; i ++ ) { scanf ( \"%lld\" , & A [ i ] ) ; if ( ans > A [ i ] ) ans = A [ i ] ; } printf ( \"%lld\n\" , ans * ( a - 1 ) ) ; } return 0 ; }", "label": 0, "id": 8580}
{"input": "int triangle [ 100 ] [ 100 ] ; int levels ; int computed [ 100 ] [ 100 ] ; int main ( ) { int tests ; scanf ( \"%d\" , & tests ) ; while ( tests -- > 0 ) { scanf ( \"%d\" , & levels ) ; int y , x , value ; for ( y = 0 ; y < levels ; y += 1 ) { for ( x = 0 ; x < 1 + y ; x += 1 ) { scanf ( \"%d\" , & value ) ; triangle [ y ] [ x ] = value ; computed [ y ] [ x ] = - 1 ; } } printf ( \"%d \n\" , bestSum ( 0 , 0 ) ) ; } return 0 ; } int bestSum ( int y , int x ) { if ( y == levels ) return 0 ; if ( computed [ y ] [ x ] == - 1 ) { int a = bestSum ( y + 1 , x ) ; int b = bestSum ( y + 1 , x + 1 ) ; computed [ y ] [ x ] = a > b ? a : b ; computed [ y ] [ x ] += triangle [ y ] [ x ] ; } return computed [ y ] [ x ] ; }", "label": 0, "id": 4639}
{"input": "int main ( ) { int t , i ; long long int a , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld%lld\" , & a , & b ) ; int temp ; long long int x = a , y = b ; while ( b ) { temp = a % b ; a = b ; b = temp ; } printf ( \"\ngcd=%d\" , a ) ; printf ( \"\nlcm=%d\" , ( x * y / a ) ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 21634}
{"input": "int gcde ( int , int ) ; int main ( ) { int t , a , b , gcd ; long int lcm ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; gcd = gcde ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %ld\n \" , gcd , lcm ) ; } return 0 ; } int gcde ( int a , int b ) { int c ; if ( a < b ) { c = a ; a = b ; b = c ; } if ( b == 1 ) return 1 ; while ( a % b != 0 ) { c = a % b ; a = b ; b = c ; } return b ; }", "label": 1, "id": 950}
{"input": "int n , t , i , j , a [ 100 ] [ 100 ] ; int main ( ) { scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } add ( ) ; } return 0 ; } void add ( ) { for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\" , a [ 0 ] [ 0 ] ) ; }", "label": 1, "id": 21519}
{"input": "int main ( ) { int T , i , a , b , num , den , rem ; scanf ( \"%d\" , & T ) ; int GCD [ T ] ; int LCM [ T ] ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = a ; den = b ; } rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } GCD [ i ] = den ; LCM [ i ] = a * b / den ; } for ( i = 0 ; i < T ; i ++ ) { printf ( \"%d %d\n\" , GCD [ i ] , LCM [ i ] ) ; } }", "label": 1, "id": 600}
{"input": "int main ( ) { int t = 0 ; scanf ( \"%d\" , & t ) ; fflush ( stdin ) ; while ( t -- ) { char n [ 10 ] , row [ 200 ] ; int no_of_rows = 0 , i = 0 , largest = 0 , k = 0 , sum = 0 ; fgets ( n , 10 , stdin ) ; sscanf ( n , \"%d\" , & no_of_rows ) ; while ( no_of_rows -- ) { fgets ( row , 200 , stdin ) ; largest = 0 ; if ( strlen ( row ) == 2 ) continue ; for ( i = 0 ; i <= strlen ( row ) - 2 ; i ++ ) { if ( row [ i ] != ' ' || row [ i ] != '\\0' ) { k = row [ i ] - '0' ; if ( k > largest ) largest = k ; } } sum += largest ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 6163}
{"input": "int main ( void ) { int i , j , k , t , m , a [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & j ) ; for ( k = 0 ; k < j ; k ++ ) { for ( m = 0 ; m < k + 1 ; m ++ ) { scanf ( \"%d\" , & a [ k ] [ m ] ) ; } } for ( k = j - 2 ; k >= 0 ; k -- ) for ( m = 0 ; m < j + 1 ; m ++ ) { if ( a [ k + 1 ] [ m ] > a [ k + 1 ] [ m + 1 ] ) a [ k ] [ m ] = a [ k ] [ m ] + a [ k + 1 ] [ m ] ; else a [ k ] [ m ] = a [ k ] [ m ] + a [ k + 1 ] [ m + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 15249}
{"input": "int main ( ) { unsigned int T ; scanf ( \"%u\" , & T ) ; unsigned int * N = ( unsigned int * ) malloc ( T * sizeof ( unsigned int * ) ) ; unsigned int * * A ; A = ( unsigned int * * ) malloc ( T * sizeof ( unsigned int * ) ) ; unsigned int i , j , min , sum ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%u\" , & N [ i ] ) ; * ( A + i ) = ( unsigned int * ) malloc ( N [ i ] * sizeof ( unsigned int ) ) ; for ( j = 0 ; j < N [ i ] ; j ++ ) { scanf ( \"%u\" , * ( A + i ) + j ) ; } } for ( i = 0 ; i < T ; i ++ ) { min = * ( * ( A + i ) + 0 ) ; sum = 0 ; for ( j = 1 ; j < N [ i ] ; j ++ ) { if ( * ( * ( A + i ) + j ) < min ) { min = * ( * ( A + i ) + j ) ; } sum += min ; } printf ( \"%u\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 764}
{"input": "int main ( ) { int t ; long int n , i , j , k = 0 ; long long int a [ 00000 ] , count = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; count = 0 ; k = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( i = 0 ; i < n ; ) { k ++ ; count ++ ; for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) count ++ ; else { break ; } i ++ ; } i = k ; } printf ( \"%lld\n\" , count ) ; } return 0 ; }", "label": 3, "id": 23624}
{"input": "int gcd ( int j , int k ) { if ( k == 0 ) { return j ; } else { return ( gcd ( k , j % k ) ) ; } } int max ( int x , int y ) { int max ; max = x ; if ( x < y ) { max = y ; } return max ; } int lcm ( int l , int m ) { int result = 1 , k , i ; while ( ( l % 2 == 0 ) || ( m % 2 ) == 0 ) { result = result * 2 ; if ( l % 2 == 0 ) { l /= 2 ; } if ( m % 2 == 0 ) { m /= 2 ; } } k = ( max ( l , m ) ) ; for ( i = 3 ; i <= k ; i = i + 2 ) { while ( ( l % i == 0 ) || ( m % i ) == 0 ) { result = result * i ; if ( l % i == 0 ) { l /= i ; } if ( m % i == 0 ) { m /= i ; } k = ( max ( l , m ) ) ; } } return result ; } int main ( ) { int a , b , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 18017}
{"input": "int gcd ( int x , int y ) { if ( y > x ) { y = y + x ; x = y - x ; y = y - x ; } if ( ! ( x % y ) ) { return y ; } else { gcd ( y , x % y ) ; } } int main ( ) { int tst , i , j ; scanf ( \"%d\" , & tst ) ; for ( i = 0 ; i < tst ; i ++ ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; long int hcf = gcd ( a , b ) ; long int lcm = a * ( b / hcf ) ; printf ( \"%ld %ld\n\" , hcf , lcm ) ; } }", "label": 0, "id": 14223}
{"input": "int main ( void ) { int mat [ 105 ] [ 105 ] , i , n , j , sum [ 105 ] = { 0 } , max = 0 , t ; scanf ( \"%d\" , t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) mat [ i ] [ j ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) sum [ i ] = 0 ; max = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & mat [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { sum [ j ] = sum [ j ] + mat [ i ] [ j ] ; } } for ( i = 1 ; i <= n ; i ++ ) if ( sum [ i ] > max ) max = sum [ i ] ; printf ( \"%d \" , max + 1 ) ; } return 0 ; }", "label": 3, "id": 8965}
{"input": "int main ( void ) { int n ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int r ; scanf ( \"%d\" , & r ) ; int * arr [ r ] ; int i ; for ( i = 0 ; i < r ; i ++ ) arr [ i ] = ( int * ) malloc ( r * sizeof ( int ) ) ; for ( i = 0 ; i < r ; i ++ ) { int j ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = r - 2 ; i >= 0 ; i -- ) { int j ; for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 26981}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a [ 50000 ] ; int n , i ; double min = 1000000 , cost ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } cost = min * ( n - 1 ) ; printf ( \"%Ld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 2985}
{"input": "main ( ) { int t , n , tmax = 1 , max = 0 , i ; s ( t ) ; while ( t -- ) { s ( n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) s ( a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) tmax ++ ; else { max = max + ( tmax ) * ( tmax + 1 ) / 2 ; tmax = 1 ; } } max = max + ( tmax ) * ( tmax + 1 ) / 2 ; tmax = 1 ; printf ( \"%d\n\" , max ) ; max = 0 ; } }", "label": 0, "id": 24129}
{"input": "int main ( ) { int t , n , i , j , x , max = 0 , sum = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & x ) ; while ( j == i ) { if ( x > max ) max = x ; } } sum = sum + max ; } printf ( \"%d\n\" , sum ) ; } }", "label": 2, "id": 24829}
{"input": "int main ( ) { int a , b , c , x , y , t ; printf ( \"Enter the number of testcases:\n\" ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { printf ( \"Enter two integers:\n\" ) ; scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( b != 0 ) { c = a % b ; a = b ; b = c ; } printf ( \"%d %d\n\" , a , ( x * y ) / a ) ; } return 0 ; }", "label": 1, "id": 16951}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int a [ t ] , b [ t ] , g [ t ] , l [ t ] , p , x , y ; for ( int i = 0 ; i < t ; i ++ ) { p = 0 ; scanf ( \"%d\" , & a [ i ] ) ; scanf ( \"%d\" , & b [ i ] ) ; p = a [ i ] * b [ i ] ; if ( a [ i ] < b [ i ] ) { x = a [ i ] ; y = b [ i ] ; } else { x = b [ i ] ; y = a [ i ] ; } for ( int j = x ; j <= y ; j ++ ) if ( ( a [ i ] % j ) == 0 && ( b [ i ] % j ) == 0 ) g [ i ] = j ; l [ i ] = p / g [ i ] ; } for ( int i = 0 ; i < t ; i ++ ) { printf ( \"%d %d\n\" , g [ i ] , l [ i ] ) ; } return 0 ; }", "label": 3, "id": 17625}
{"input": "int main ( ) { int test , i , j , num [ 100 ] [ 100 ] = { 0 } , n , max = 0 ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & num [ i ] [ j ] ) ; if ( i != 0 ) { if ( j != 0 ) num [ i ] [ j ] = ( num [ i - 1 ] [ j ] + num [ i ] [ j ] ) > ( num [ i - 1 ] [ j - 1 ] + num [ i ] [ j ] ) ? ( num [ i - 1 ] [ j ] + num [ i ] [ j ] ) : ( num [ i - 1 ] [ j - 1 ] + num [ i ] [ j ] ) ; else num [ i ] [ j ] = num [ i - 1 ] [ j ] + num [ i ] [ j ] ; } if ( i == n - 1 ) { if ( num [ i ] [ j ] > max ) max = num [ i ] [ j ] ; } } } printf ( \"%d\" , max ) ; } return 0 ; }", "label": 1, "id": 7522}
{"input": "main ( ) { int t , n , i , j , k , sum = 0 , q = 0 ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) scanf ( \"%d\" , & a [ j ] ) ; while ( n != 1 ) { n -- ; if ( a [ q ] >= a [ q + 1 ] ) { sum += a [ q + 1 ] ; for ( k = q ; k < n - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; } else { sum += a [ q ] ; for ( k = q + 1 ; k < n - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; } } printf ( \"%d\n\" , sum ) ; sum = 0 ; q = 0 ; } }", "label": 2, "id": 11952}
{"input": "int main ( ) { int sml , i , A [ 10000 ] , T , N ; scanf ( \"%d\" , & N ) ; do { scanf ( \"%d\" , & N ) ; for ( i = 1 ; i <= N ; i ++ ) scanf ( \"%d\" , & A [ i ] ) ; sml = A [ 1 ] ; for ( i = 1 ; i <= N ; i ++ ) sml = sml > A [ i ] ? A [ i ] : sml ; printf ( \"%d\n\" , sml * ( N - 1 ) ) ; T -- ; } while ( T != 0 ) ; }", "label": 3, "id": 16137}
{"input": "int gcd ( int a , int b ) { int r ; if ( a == 0 ) return b ; r = b % a ; b = a ; a = r ; return gcd ( a , b ) ; } int main ( ) { int t ; int a , b ; long ans1 , ans2 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; ans1 = gcd ( a , b ) ; ans2 = ( a * b ) / ans1 ; printf ( \"%ld %ld\" , ans1 , ans2 ) ; } }", "label": 1, "id": 21996}
{"input": "int main ( ) { int t , i , j , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 20859}
{"input": "void bigsum ( int * * , int , int , int ) ; unsigned int currentsum = 0 , totalsum = 0 ; int main ( void ) { int t , * * arr , trilen , x , y , z ; scanf ( \"%d\" , & t ) ; for ( x = 0 ; x < t ; x ++ ) { scanf ( \"%d\" , & trilen ) ; arr = ( int * * ) malloc ( trilen * sizeof ( int * * ) ) ; for ( y = 0 ; y < trilen ; y ++ ) { arr [ y ] = ( int * ) malloc ( ( y + 1 ) * sizeof ( int * ) ) ; } for ( y = 0 ; y < trilen ; y ++ ) { for ( z = 0 ; z <= y ; z ++ ) { scanf ( \"%d\" , & arr [ y ] [ z ] ) ; } } bigsum ( arr , 0 , 0 , trilen ) ; printf ( \"%u\n\" , totalsum ) ; for ( y = 0 ; y < trilen ; y ++ ) { free ( arr [ y ] ) ; } free ( arr ) ; totalsum = currentsum = 0 ; } return 0 ; } void bigsum ( int * * arr , int x , int y , int trilen ) { if ( x < trilen ) { currentsum += arr [ x ] [ y ] ; bigsum ( arr , x + 1 , y , trilen ) ; bigsum ( arr , x + 1 , y + 1 , trilen ) ; currentsum -= arr [ x ] [ y ] ; } else { if ( totalsum < currentsum ) { totalsum = currentsum ; } printf ( \"currentsum = %d totalsum = %d\n\" , currentsum , totalsum ) ; } }", "label": 2, "id": 2563}
{"input": "void sub ( int [ ] , int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int i , n , j ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } sub ( a , n ) ; } return 0 ; } void sub ( int a [ ] , int n ) { int i , j , c = 0 , count = 0 , m , z ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { for ( m = i ; m < j ; m ++ ) { if ( a [ m ] < a [ m + 1 ] ) { c ++ ; z = 1 ; } if ( z != 1 ) break ; } if ( ( i + c ) == j ) { count ++ ; } c = 0 ; } } printf ( \"%d\n\" , count ) ; }", "label": 2, "id": 6216}
{"input": "int main ( ) { int T ; long long int A , B , HCF , LCM ; long long int temp ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%lld %lld\" , & A , & B ) ; long long int M = A * B ; while ( B != 0 ) { temp = B ; B = A % B ; A = temp ; } printf ( \"%lld %lld\n\" , A , M ) ; } return 0 ; }", "label": 1, "id": 2590}
{"input": "int main ( ) { int t , m , x , i , n , j , k , temp , l , a [ 50000 ] ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( m = n ; m > 0 ; m -- ) { for ( k = 0 ; k < n - 1 ; k ++ ) { temp = 0 ; if ( a [ k ] > a [ k + 1 ] ) { temp = a [ k + 1 ] ; a [ k + 1 ] = a [ k ] ; a [ k ] = temp ; } } } printf ( \"%d\n\" , a [ 0 ] * ( n - 1 ) ) ; } return 0 ; }", "label": 2, "id": 4740}
{"input": "int main ( ) { int i , j , min = 0 , d [ 100 ] , x , n ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & x ) ; min = d [ 0 ] ; for ( j = 0 ; j < x ; j ++ ) { scanf ( \"%d\" , & d [ j ] ) ; } for ( j = 0 ; j < x ; j ++ ) if ( d [ j ] < min ) min = d [ j ] ; printf ( \"%d\n\" , min * ( x - 1 ) ) ; } return 0 ; }", "label": 3, "id": 5579}
{"input": "int solve ( int , int ) ; int max ( int , int ) ; int cache ( int , int ) ; int rows , arr [ 100 ] [ 100 ] , values [ 100 ] [ 100 ] ; int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i , j , k , maximum ; for ( i = 1 ; i <= test ; i ++ ) { scanf ( \"%d\" , & rows ) ; for ( j = 0 ; j < rows ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( \"%d\" , & arr [ j ] [ k ] ) ; } maximum = solve ( 0 , 0 ) ; printf ( \"%d\n\" , maximum ) ; maximum = 0 ; } return 0 ; } int solve ( int i , int j ) { int t1 , t2 , t ; if ( i > rows ) { return 0 ; } else if ( cache ( i , j ) ) { return values [ i ] [ j ] ; } else { t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; t = arr [ i ] [ j ] + max ( t1 , t2 ) ; values [ i ] [ j ] = t ; return t ; } } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int cache ( int i , int j ) { if ( values [ i ] [ j ] >= 0 && values [ i ] [ j ] <= 99 ) return 1 ; else return 0 ; }", "label": 1, "id": 7195}
{"input": "int main ( ) { int t , n , i , j ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d\n\" , & n ) ; int a [ n ] [ n ] ; int r , c , k = 1 ; for ( i = 0 ; i < k && k < n ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } printf ( \"\n\" ) ; } long int sum = a [ 0 ] [ 0 ] ; k = 0 , r = 0 , c = 0 ; while ( k != ( n - 1 ) ) { if ( a [ r + 1 ] [ c ] > a [ r + 1 ] [ c + 1 ] ) { sum += a [ r + 1 ] [ c ] ; r = r + 1 ; } else { sum += a [ r + 1 ] [ c + 1 ] ; r = r + 1 ; c = c + 1 ; } k ++ ; } printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 4439}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else ( gcd ( b , a % b ) ) ; } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n ) { n -- ; int a , b ; scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return 0 ; }", "label": 1, "id": 1895}
{"input": "int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; int x = a , y = b , r ; while ( y != 0 ) { r = x % y ; x = y ; y = r ; } printf ( \"%d %d\n\" , x , a * b / x ) ; } return 0 ; }", "label": 1, "id": 6505}
{"input": "int main ( ) { int a ; scanf ( \"%d\" , & a ) ; while ( a -- ) { long long unsigned int p , sum = 0 ; scanf ( \"%llu\" , & p ) ; long long unsigned int s [ p ] , z ; scanf ( \"%llu\" , & s [ 0 ] ) ; z = s [ 0 ] ; for ( int i = 1 ; i < p ; i ++ ) { scanf ( \"%llu\" , & s [ i ] ) ; if ( z > s [ i ] ) { sum += s [ i ] ; z = s [ i ] ; } if ( s [ i ] > z ) { sum += z ; } } printf ( \"%llu\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 10800}
{"input": "int main ( ) { int i , j , l = 0 , n , r , p = 1 , c , t [ 101 ] , a [ 101 ] = { 0 } , sum [ 101 ] = { 0 } ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & r ) ; for ( i = 1 , c = 0 ; i <= r ; i ++ ) { c += i ; if ( i != r ) { p *= 2 ; a [ i ] = i - 1 ; } } for ( i = 1 ; i <= c ; i ++ ) scanf ( \"%d\" , & t [ i ] ) ; for ( i = 1 ; i <= p ; i ++ ) { sum [ i ] = t [ 1 ] ; for ( j = 1 , c = 1 ; j <= r - 1 ; j ++ ) { c += a [ j ] + 1 ; sum [ i ] += t [ c ] ; if ( l < sum [ i ] ) l = sum [ i ] ; } j -- ; while ( a [ j ] == j ) j -- ; a [ j ++ ] ++ ; while ( j <= r - 1 ) a [ j ++ ] -- ; } printf ( \"%d\n\" , l ) ; } return 0 ; }", "label": 3, "id": 19524}
{"input": "int main ( ) { int t ; long int n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int c = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) c ++ ; } printf ( \"%d\n\" , ( c + n ) ) ; } }", "label": 1, "id": 3537}
{"input": "main ( ) { long z , i , t , a [ 50000 ] , n , small , k ; scanf ( \"%ld\" , & t ) ; for ( int j = 0 ; j < t ; j ++ ) { k = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } small = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < small ) { small = a [ i ] ; } } z = small * ( n - 1 ) ; printf ( \"%ld\" , z ) ; printf ( \"\n\" ) ; } }", "label": 0, "id": 15459}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { int a , b , k ; scanf ( \"%d%d\" , & a , & b ) ; k = gcd ( a , b ) ; printf ( \"%d %d\n\" , k , ( a * b ) / k ) ; t -- ; } return 0 ; }", "label": 1, "id": 78}
{"input": "int gcd ( int a , int b ) { if ( b != 0 ) return gcd ( b , a % b ) ; else return a ; } int main ( ) { int a , b , i , j , g , l , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; j = gcd ( a , b ) ; l = ( a * b ) / j ; printf ( \"%d %d\n\" , j , l ) ; } return 0 ; }", "label": 1, "id": 21469}
{"input": "long gcd ( long , long ) ; int main ( ) { int T , i , hcf ; long x , y , lcm ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld%ld\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %ld\n\" , hcf , lcm ) ; } return 0 ; } long gcd ( long x , long y ) { if ( x == 0 ) { return y ; } while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 0, "id": 9171}
{"input": "int main ( ) { int i , t , n ; long long int a , b , g , l ; scanf ( \"%d\n\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\n\" , & a , & b ) ; if ( a > b ) n = b ; else n = a ; for ( i = n ; i >= 1 ; i -- ) if ( a % i == 0 && b % i == 0 ) { g = i ; break ; } l = a * b / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 2, "id": 24337}
{"input": "int main ( ) { long int i , j , n , t ; scanf ( \"%ld\" , & t ) ; scanf ( \"%ld\" , & n ) ; long int a [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%ld\" , & a [ i ] [ j ] ) ; } } while ( t -- ) { for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } printf ( \"%\nld\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 6076}
{"input": "int main ( ) { int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( \"enter two numbers:\" ) ; scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( \"gcd of %d and %d= %d\" , A , B , gcd ) ; printf ( \"lcm of %d and %d =%d\" , A , B , lcm ) ; return 0 ; }", "label": 1, "id": 21086}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , i , j , t , n , max ; scanf ( \"%d\" , & t ) ; getchar ( ) ; while ( t -- ) { max = 0 ; printf ( \"\n\" ) ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { if ( j > i ) a [ i ] [ j ] = 0 ; else scanf ( \"%d\" , & a [ i ] [ j ] ) ; } a [ 1 ] [ 0 ] += a [ 0 ] [ 0 ] ; a [ 1 ] [ 1 ] += a [ 0 ] [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) a [ i ] [ 0 ] += a [ i - 1 ] [ 0 ] ; for ( i = 2 ; i < n ; i ++ ) for ( j = 1 ; j < n ; j ++ ) { if ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) a [ i ] [ j ] += a [ i - 1 ] [ j ] ; else a [ i ] [ j ] += a [ i - 1 ] [ j - 1 ] ; } for ( j = 0 ; j < n ; j ++ ) { if ( a [ n - 1 ] [ j ] > max ) max = a [ n - 1 ] [ j ] ; } printf ( \"\n%d\n\" , max ) ; } return 0 ; }", "label": 0, "id": 14591}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long a , b , i ; scanf ( \"%lld %lld\" , & a , & b ) ; for ( i = ( a > b ? b : a ) ; i >= 1 ; i -- ) { if ( a % i == 0 && b % i == 0 ) { printf ( \"%lld \" , i ) ; break ; } } for ( i = ( a < b ? b : a ) ; i >= 1 ; i ++ ) { if ( i % a == 0 && i % b == 0 ) { printf ( \"%lld\n\" , i ) ; break ; } } } }", "label": 2, "id": 11065}
{"input": "int row = 1 , i = 1 , sum = 0 , n , rows = 1 , max = 0 ; int sumt ( int * a , int row , int i ) { if ( row == rows ) { sum += a [ i ] ; if ( sum > max ) { max = sum ; } return 0 ; } else { sum += a [ i ] + sumt ( a , row + 1 , row + i ) ; sum -= a [ row + i ] ; sum += a [ i ] + sumt ( a , row + 1 , row + i + 1 ) ; return 0 ; } return 0 ; } int main ( ) { int j = 1 , * a , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; rows = n ; n = ( ( ( rows + 1 ) * ( rows ) ) / 2 ) + 1 ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = 1 ; j <= n - 1 ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } sumt ( a , row , i ) ; printf ( \"%d\n\" , max ) ; sum = 0 ; max = 0 ; } return 0 ; }", "label": 2, "id": 17078}
{"input": "int main ( ) { int t , n , i , sum ; scanf ( \"%d\" , & t ) ; while ( t -- > 0 ) { scanf ( \"%d\" , & n ) ; int a [ n ] ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] >= a [ i + 1 ] ) { sum = sum + a [ i + 1 ] ; } else { sum = sum + a [ i ] ; a [ i + 1 ] = a [ i ] ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 20727}
{"input": "int main ( void ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; int cnt = 0 ; while ( n > 1 ) { if ( a [ 0 ] < a [ 1 ] ) { cnt += a [ 0 ] ; for ( int k = 1 ; k < n ; k ++ ) { a [ k ] = a [ k + 1 ] ; } } else { cnt += a [ 1 ] ; for ( int k = 0 ; k < n ; k ++ ) a [ k ] = a [ k + 1 ] ; } n -- ; } printf ( \"%d\n\" , cnt ) ; } return 0 ; }", "label": 2, "id": 14033}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\n\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 21358}
{"input": "main ( ) { int t , n , a [ 50000 ] , i , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { c = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) a [ i + 1 ] = a [ i ] ; c = c + a [ i + 1 ] ; } printf ( \"%d\n\" , c ) ; } return 0 ; }", "label": 1, "id": 10844}
{"input": "int a [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int solve ( int i , int j , int n ) { int t1 , t2 , t ; if ( i >= n ) return 0 ; t1 = solve ( i + 1 , j , n ) ; t2 = solve ( i + 1 , j + 1 , n ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; return t ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , sum , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum = solve ( 0 , 0 , n ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 21163}
{"input": "int main ( ) { int i , j , k , n , sum , a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ 0 ] [ 1 ] ) ; for ( j = 0 ; j < a [ 0 ] [ 1 ] ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = ( a [ 0 ] [ 1 ] - 1 ) ; j >= 0 ; j -- ) { for ( k = 0 ; k < j ; k ++ ) { if ( a [ j ] [ k ] < a [ j ] [ k + 1 ] ) { a [ j - 1 ] [ k ] += a [ j ] [ k + 1 ] ; } else { a [ j - 1 ] [ k ] += a [ j ] [ k ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22062}
{"input": "int main ( ) { int T ; long int A , B , LCM , temp ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%ld %ld\" , & A , & B ) ; LCM = A * B ; while ( B != 1 ) { if ( A < B ) { temp = A ; A = B ; B = temp ; } temp = A % B ; if ( ! temp ) break ; else { A = B ; B = temp ; } } printf ( \"%ld %ld\n\" , B , LCM / B ) ; } return 0 ; }", "label": 0, "id": 3667}
{"input": "void mergesort ( int arr [ ] , int l , int h ) ; int main ( ) { int A [ 99 ] [ 99 ] , n , rows , sum , i , j ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { sum = 0 ; scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & A [ i ] [ j ] ) ; } printf ( \"The 2-D array constructed is:\n\" ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j < rows ; j ++ ) printf ( \"%d \" , A [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < rows ; i ++ ) mergesort ( A [ i ] , 0 , i ) ; printf ( \"The 2-D array after sorting is:\n\" ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j < rows ; j ++ ) printf ( \"%d \" , A [ i ] [ j ] ) ; printf ( \"\n\" ) ; } for ( i = 0 ; i < rows ; i ++ ) sum += A [ i ] [ i ] ; printf ( \"%d\n\" , sum - A [ 0 ] [ 0 ] ) ; n -- ; } return 0 ; } void mergesort ( int arr [ ] , int l , int h ) { int i = 0 ; int length = h - l + 1 ; int pivot = 0 ; int merge1 = 0 ; int merge2 = 0 ; int temp [ 100 ] ; if ( l == h ) return ; pivot = ( l + h ) / 2 ; mergesort ( arr , l , pivot ) ; mergesort ( arr , pivot + 1 , h ) ; for ( i = 0 ; i < length ; i ++ ) { temp [ i ] = arr [ l + i ] ; } merge1 = 0 ; merge2 = pivot - l + 1 ; for ( i = 0 ; i < length ; i ++ ) { if ( merge2 <= h - l ) { if ( merge1 <= pivot - l ) { if ( temp [ merge1 ] > temp [ merge2 ] ) { arr [ i + l ] = temp [ merge2 ++ ] ; } else { arr [ i + l ] = temp [ merge1 ++ ] ; } } else { arr [ i + l ] = temp [ merge2 ++ ] ; } } else { arr [ i + l ] = temp [ merge1 ++ ] ; } } }", "label": 2, "id": 3503}
{"input": "int main ( ) { int t ; int n , l , s , sum = 0 ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d %d\" , & l , & s ) ; n -= 2 ; while ( n -- ) { if ( s > l ) l = ( s + l ) - ( s = l ) ; scanf ( \"%d\" , & l ) ; sum += s ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 2, "id": 3450}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned long long int a , b , gcd , lcm , temp ; scanf ( \"%lld %lld\" , & a , & b ) ; gcd = a , temp = b ; while ( gcd != temp ) { if ( gcd > temp ) { gcd = gcd - temp ; } else temp = temp - gcd ; } printf ( \"%lld %lld\n\" , gcd , ( ( a * b ) / gcd ) ) ; } return 0 ; }", "label": 0, "id": 23983}
{"input": "int main ( ) { int n , ans , i , j , testcase , arr [ 100 ] [ 100 ] , rows ; scanf ( \"%d\" , & testcase ) ; while ( testcase -- ) { scanf ( \"%d\" , & rows ) ; for ( i = 1 ; i <= rows ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } ans = 0 ; for ( i = 2 ; i <= rows ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( j > 1 && arr [ i - 1 ] [ j - 1 ] > arr [ i - 1 ] [ j ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - 1 ] [ j - 1 ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - 1 ] [ j ] ; if ( i == rows && ans < arr [ i ] [ j ] ) ans = arr [ i ] [ j ] ; } } printf ( \"%d\n\" , ans ) ; } return 0 ; }", "label": 3, "id": 24935}
{"input": "int a [ MAX ] [ MAX ] , n ; int large ( int r ) { if ( r == 1 ) return a [ 1 ] [ 1 ] ; int i , j , k ; for ( i = r ; i > 1 ; i -- ) a [ r - 1 ] [ i - 1 ] = ( a [ r ] [ i ] > a [ r ] [ i - 1 ] ? ( a [ r ] [ i ] + a [ r - 1 ] [ i - 1 ] ) : ( a [ r ] [ i - 1 ] + a [ r - 1 ] [ i - 1 ] ) ) ; return large ( r - 1 ) ; } int main ( ) { int t , i , j , l ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } l = large ( n ) ; printf ( \"%d\n\" , l ) ; } return 0 ; }", "label": 0, "id": 18484}
{"input": "int main ( ) { int a [ 101 ] [ 101 ] ; int t , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int i = 0 , j = 0 , max ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 0 ) max = a [ i - 1 ] [ j ] ; else if ( i != j ) { max = a [ i - 1 ] [ j ] ; if ( max < a [ i - 1 ] [ j - 1 ] ) max = a [ i - 1 ] [ j - 1 ] ; } else { max = a [ i - 1 ] [ j - 1 ] ; } a [ i ] [ j ] = a [ i ] [ j ] + max ; } } max = a [ n - 1 ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( max < a [ n - 1 ] [ j ] ) max = a [ n - 1 ] [ j ] ; } printf ( \"%d\n\" , max ) ; } }", "label": 0, "id": 8181}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int n , i , c = 1 , sum = 0 , j = 0 ; scanf ( \"%lld\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; if ( n > 1 ) { for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] <= a [ i + 1 ] ) { c ++ ; continue ; } else { sum = sum + ( ( c * ( c - 1 ) ) / 2 ) ; c = 1 ; continue ; } } sum = sum + ( ( c * ( c - 1 ) ) / 2 ) ; } printf ( \"%lld\n\" , sum + n ) ; } }", "label": 0, "id": 3684}
{"input": "int main ( ) { int nt , i , j , k , rows , max ; scanf ( \"%d\" , & nt ) ; int points [ 100 ] [ 100 ] , sum [ 100 ] [ 100 ] ; int x ; for ( k = 0 ; k < nt ; k ++ ) { scanf ( \"%d\" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & points [ i ] [ j ] ) ; if ( j == 0 ) { if ( i == 0 ) x = 0 ; else x = sum [ i - 1 ] [ j ] ; } else { if ( sum [ i - 1 ] [ j ] > sum [ i - 1 ] [ j - 1 ] ) x = sum [ i - 1 ] [ j ] ; else x = sum [ i - 1 ] [ j - 1 ] ; } sum [ i ] [ j ] = x + points [ i ] [ j ] ; } } max = sum [ rows - 1 ] [ 0 ] ; for ( j = 1 ; j < rows ; j ++ ) { if ( max < sum [ rows - 1 ] [ j ] ) max = sum [ rows - 1 ] [ j ] ; } printf ( \"%\" , max ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { points [ i ] [ j ] = 0 ; sum [ i ] [ j ] = 0 ; } } } return 0 ; }", "label": 1, "id": 22320}
{"input": "int main ( ) { int x , y , a , b , t , gcd , lcm , i , j ; scanf ( \"%d\" , & i ) ; for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = x * y / gcd ; printf ( \"gcd of %d %d=%d\n\" , x , y , gcd ) ; printf ( \"lcm of %d %d=%d\n\" , x , y , lcm ) ; } return 0 ; }", "label": 1, "id": 587}
{"input": "int main ( void ) { int n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( int i = n - 1 ; i > 0 ; i -- ) for ( int j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) a [ i - 1 ] [ j ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j ] += a [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 18995}
{"input": "int main ( ) { int test ; scanf ( \"%d\" , & test ) ; int i ; int ans [ test ] ; for ( i = 0 ; i < test ; i ++ ) { ans [ i ] = 0 ; int n ; scanf ( \"%d\" , & n ) ; long a [ n ] ; int j ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%ld\" , & a [ j ] ) ; } for ( j = 0 ; j < n ; j ++ ) { int k ; int count = 1 ; for ( k = j ; k < n - 1 ; k ++ ) { if ( a [ k ] < a [ k + 1 ] ) { count ++ ; } else { j = k ; break ; } } ans [ i ] = ans [ i ] + count * ( count + 1 ) / 2 ; if ( k == n - 1 ) { break ; } } } for ( i = 0 ; i < test ; i ++ ) { printf ( \"\n%d\" , ans [ i ] ) ; } return 0 ; }", "label": 1, "id": 4269}
{"input": "int main ( ) { int a [ 100 ] [ 100 ] , n , i , j , k ; scanf ( \"%d\" , & k ) ; while ( k -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 13190}
{"input": "int main ( ) { int sum = 0 , n , i , j , t ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } if ( n == 1 ) printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; else { for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] >= a [ i ] [ j + 1 ] ) { sum = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; } else { sum = a [ i ] [ j + 1 ] + a [ i - 1 ] [ j ] ; } a [ i - 1 ] [ j ] = sum ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } t -- ; } return 0 ; }", "label": 0, "id": 13363}
{"input": "int main ( ) { int n , i , j , test , a [ 100 ] [ 100 ] , x1 , x2 ; scanf ( \"%d\" , & test ) ; while ( test -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { x1 = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; x2 = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; if ( x1 > x2 ) a [ i ] [ j ] = x1 ; else a [ i ] [ j ] = x2 ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 16378}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , x , y , r , gcd , lcm ; scanf ( \"%ld%ld\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { r = x % y ; x = y ; y = r ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%ld\\t%ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 18087}
{"input": "int getcolumn ( int n ) { int c = 0 , i ; for ( i = 1 ; i <= n ; i ++ ) c += i ; return c ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { unsigned int n , i ; scanf ( \"%d\" , & n ) ; unsigned int a [ n ] [ getcolumn ( n ) ] , j = 0 ; for ( i = 0 ; i < n ; i ++ ) { j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; j ++ ; } } unsigned int max = 0 ; for ( i = 0 ; i < n ; i ++ ) { int sum ; for ( j = i + 1 ; j < n ; j ++ ) { sum = a [ i ] [ 0 ] + a [ j ] [ 0 ] + a [ j ] [ 1 ] ; max = ( sum > max ) ? sum : max ; } } printf ( \"%d\n\" , max ) ; } return 0 ; }", "label": 1, "id": 15301}
{"input": "int main ( ) { int t , n , arr [ 50000 ] , min , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100000 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & arr [ i ] ) ; if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( \"%lld\n\" , ( long long ) min * ( long long ) ( n - 1 ) ) ; } return 0 ; }", "label": 0, "id": 23492}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int n , first = 0 , next = 1 , count = 0 ; scanf ( \"%ld\" , & n ) ; long long int a [ n ] ; long int i , j ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { first = i ; next = i + 1 ; count ++ ; if ( next > n - 1 ) break ; while ( a [ first ] < a [ next ] ) { first = next ; next ++ ; count ++ ; if ( next > n - 1 ) { break ; } } } printf ( \"%ld\n\" , count ) ; } return 0 ; }", "label": 0, "id": 16247}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = max ( a [ i ] [ j ] + a [ i + 1 ] [ j ] , a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ) ; printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 11046}
{"input": "int gcd ( int x , int y ) { if ( x == 0 ) return y ; else return gcd ( y % x , y ) ; } int main ( ) { int n , a , b , i ; scanf ( \"%d\" , & n ) ; int f [ n ] , g [ n ] ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; f [ i ] = gcd ( a , b ) ; g [ i ] = ( a * b ) / f [ i ] ; } for ( i = 1 ; i <= n ; i ++ ) { printf ( \"%d %d\n\" , f [ i ] , g [ i ] ) ; } }", "label": 1, "id": 4567}
{"input": "int GCD ( int a , int b ) { int r = a % b ; if ( r == 0 ) return b ; else return GCD ( b , r ) ; } int main ( ) { int n , t , i , k , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & n , & k ) ; gcd = GCD ( k , n ) ; lcm = ( n * k ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 4925}
{"input": "void main ( ) { int n , T , p , a , b , x , y ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { p = y ; y = x % y ; x = p ; } printf ( \"%d %d\n\" , x , a * b / x ) ; } }", "label": 1, "id": 604}
{"input": "unsigned int triangle_sums ( unsigned int num_lines ) { static unsigned int ar [ 100 ] = { 0 } ; unsigned int i , col , cur , tmp ; unsigned int max = 0 ; for ( i = 0 ; i < num_lines ; i ++ ) { for ( col = 0 ; col < i ; col ++ ) { scanf ( \"%u\" , & cur ) ; ar [ col ] += cur ; if ( col != 0 && ar [ col - 1 ] > ar [ col ] ) { ar [ col ] = ar [ col - 1 ] ; } if ( ar [ col ] > max ) { max = ar [ col ] ; } } ar [ col ] = ar [ col - 1 ] ; } return max ; } int main ( ) { unsigned int num_test_cases ; unsigned int num_tri_lines ; if ( scanf ( \"%u\" , & num_test_cases ) != 1 ) { return 1 ; } for ( ; num_test_cases > 0 ; num_test_cases -- ) { if ( scanf ( \"%u\" , & num_tri_lines ) != 1 ) { return 1 ; } printf ( \"%u\n\" , triangle_sums ( num_tri_lines ) ) ; } return 0 ; }", "label": 3, "id": 10735}
{"input": "int main ( ) { int a [ 100 ] , t , i , s ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int m = 0 ; scanf ( \"%d\" , & s ) ; for ( i = 0 ; i < s ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 0 ; i < s - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { m = m + a [ i + 1 ] ; } else { m = m + a [ i ] ; } } printf ( \"%d\n\" , m ) ; } return 0 ; }", "label": 3, "id": 23585}
{"input": "int main ( ) { int t , n , a [ 100 ] [ 100 ] , i , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = n - 2 ; j >= 0 ; j -- ) { for ( k = 0 ; k <= j ; k ++ ) { if ( a [ j + 1 ] [ k + 1 ] > a [ j + 1 ] [ k ] ) { a [ j ] [ k ] += a [ j + 1 ] [ k + 1 ] ; } else a [ j ] [ k ] += a [ j + 1 ] [ k ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 17186}
{"input": "int a [ 101 ] [ 101 ] ; int main ( ) { int t , i = 1 , n , j , k , m ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int sum = 0 ; m = 0 ; scanf ( \"%d\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < i ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } a [ j ] [ k ] = - 1 ; i ++ ; if ( j == 0 ) { sum += a [ j ] [ m ] ; } else { if ( a [ m + 1 ] > a [ m ] ) { sum += a [ j ] [ ++ m ] ; } else { sum += a [ j ] [ ++ m ] ; } } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 2709}
{"input": "int main ( ) { int t , k , l ; int i = 0 , j = 0 , a = 0 ; scanf ( \"%d\" , & t ) ; for ( i ; i < t ; i ++ ) { int arr [ 100 ] [ 100 ] = { 0 , } ; int flag = 1 ; int max [ 100 ] = { 0 , } ; scanf ( \"%d\" , & k ) ; for ( j = 0 ; j < k ; j ++ ) { for ( a = 0 ; a < k - ( k - j - 1 ) ; a ++ ) { scanf ( \"%d\" , & arr [ j ] [ a ] ) ; } } for ( j = 0 ; j < k ; j ++ ) { a = 0 ; if ( flag ) { max [ j ] = arr [ 0 ] [ 0 ] ; flag = 0 ; } else max [ j ] = arr [ 0 ] [ 0 ] + arr [ j ] [ 0 ] + arr [ j ] [ a ] ; a ++ ; } int maxx = 0 ; for ( j = 0 ; j < k ; j ++ ) { if ( maxx < max [ j ] ) maxx = max [ j ] ; } printf ( \"%d\n\" , maxx ) ; } return 0 ; }", "label": 1, "id": 17682}
{"input": "int main ( ) { int t , temp , A [ 100 ] , i , n , min ; scanf ( \"%d\" , & t ) ; temp = t ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & A [ i ] ) ; } t = temp ; while ( t -- ) { min = A [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( min > A [ i ] ) min = A [ i ] ; } printf ( \"%d\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 13568}
{"input": "int n , i , j , k , l , T , e ; int main ( ) { scanf ( \"%d\" , & T ) ; int M [ T ] ; for ( i = 0 ; i < T ; i ++ ) { scanf ( \"%d\" , & n ) ; int N [ ( n * ( n + 1 ) ) / 2 ] ; for ( l = 0 ; l < ( n * ( n + 1 ) ) / 2 ; l ++ ) { N [ l ] = 0 ; } for ( j = 0 ; j < ( n * ( n + 1 ) ) / 2 ; j ++ ) { scanf ( \"%d\" , & e ) ; N [ j ] = e ; } M [ i ] = N [ ( ( n - 2 ) * ( n - 1 ) ) / 2 ] + N [ ( ( n - 1 ) * ( n ) ) / 2 ] + N [ ( ( n - 1 ) * ( n ) ) / 2 + 1 ] ; } for ( k = 0 ; k < T ; k ++ ) { printf ( \"%d\n\" , M [ k ] ) ; } }", "label": 1, "id": 13865}
{"input": "int main ( ) { int t , n1 , n2 , GCD = 1 , LCM , i , j , k ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; for ( j = 2 ; j <= n1 ; j ++ ) { if ( n1 % j == 0 && n2 % j == 0 ) { GCD = j ; continue ; } } printf ( \"%d \" , GCD ) ; for ( k = n1 || n2 ; k > n1 || n2 ; k ++ ) { if ( k % n1 == 0 && k % n2 == 0 ) { LCM = k ; break ; } else { LCM = n1 * n2 ; } } printf ( \"%d\n\" , LCM ) ; } return 0 ; }", "label": 2, "id": 8696}
{"input": "int main ( ) { long long int A [ size ] , B [ size ] , i , N , pos , sum ; int T , count ; scanf ( \"%d\" , & T ) ; while ( T -- ) { sum = 0 ; pos = 1 ; scanf ( \"%lld\" , & N ) ; if ( N >= 2 ) { for ( i = 0 ; i < N ; i ++ ) scanf ( \"%lld\" , & A [ i ] ) ; i = 0 ; while ( pos < N ) { if ( A [ i ] > A [ pos ] ) { sum += A [ pos ] ; i = pos ; pos ++ ; } else { sum += A [ i ] ; pos ++ ; } } printf ( \"%lld\n\" , sum ) ; } } return 0 ; }", "label": 3, "id": 454}
{"input": "int minn ( int a , int b ) { return a < b ? a : b ; } int main ( int argc , char const * argv [ ] ) { int t , i , n , min , tmp , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 , sum = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & tmp ) ; if ( i == 0 ) min = tmp ; else { min = minn ( tmp , min ) ; sum += min ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 15258}
{"input": "int main ( ) { int t , n , i , s , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { s = 0 ; scanf ( \"%d\" , & j ) ; for ( i = 0 ; i < n * ( n + 1 ) / 2 ; ++ i ) s += j ; printf ( \"%d\n\" , s ) ; } return 0 ; }", "label": 2, "id": 3989}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j , k , l , sum = 0 , max = 0 , c ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } i = n - 1 ; for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i ] [ j ] >= max ) { max = a [ i ] [ j ] ; k = j ; if ( i == k ) c = 1 ; } } sum = sum + a [ i ] [ k ] ; for ( i = i - 1 ; i >= 0 ; i -- ) { if ( k != 0 && c != 1 ) { if ( a [ i ] [ k ] <= a [ i ] [ k - 1 ] ) { k = k - 1 ; } } else { if ( k == 0 ) k = 0 ; else k = k - 1 ; } sum = sum + a [ i ] [ k ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 14441}
{"input": "int a [ 105 ] [ 105 ] , b [ 105 ] [ 105 ] ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int ans , n , i , j ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( b [ i - 1 ] [ j ] > b [ i - 1 ] [ j - 1 ] ) b [ i ] [ j ] = b [ i - 1 ] [ j ] + a [ i ] [ j ] ; else b [ i ] [ j ] = b [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } } for ( i = 1 ; i <= n ; i ++ ) { ans = b [ n ] [ i ] ; for ( j = 1 ; j <= n ; j ++ ) { if ( ans < b [ n ] [ j ] ) ans = b [ n ] [ j ] ; } } printf ( \"%d\n\" , ans ) ; } }", "label": 0, "id": 24764}
{"input": "int main ( ) { int t , n , arr [ 10000 ] , cost , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { arr [ i + 1 ] = arr [ i ] ; cost += arr [ i ] ; } else { cost += arr [ i + 1 ] ; } } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 3, "id": 18248}
{"input": "int main ( ) { int t , n , i , a , b , temp , ctr ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; scanf ( \"%d\" , & a ) ; ctr = temp = 1 ; for ( i = 1 ; i < n ; i ++ ) { scanf ( \"%d\" , & b ) ; if ( b >= a ) { temp ++ ; } else { temp = 1 ; } ctr += temp ; a = b ; } printf ( \"%d\n\" , ctr ) ; } return 0 ; }", "label": 0, "id": 20656}
{"input": "int main ( ) { int a , b , c , n1 , n2 ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d %d\" , & b , & c ) ; n1 = b ; n2 = c ; while ( b != c ) { if ( b > c ) { b -= c ; } else { c -= b ; } } printf ( \"%d %d\" , b , ( n1 * n2 ) / b ) ; } return 0 ; }", "label": 1, "id": 25670}
{"input": "int lcmnum ( int x , int y ) { long long int z ; z = ( x < y ) ? x : y ; for ( int j = 2 ; j <= z ; j ++ ) { if ( x % j == 0 && y % j == 0 ) { return z ; break ; } } return x * y ; } int main ( ) { long long int t , m , k ; scanf ( \"%lld\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ) ; m = lcmnum ( a , b ) ; k = a * b / m ; printf ( \"%lld %lld\n\" , k , m ) ; } }", "label": 1, "id": 23979}
{"input": "int arr [ 101 ] [ 101 ] , sum_Array [ 101 ] [ 101 ] , n ; int max ( a , b ) { return ( ( a > b ) ? a : b ) ; } int sum ( int i , int j ) { if ( i == n ) { return arr [ i ] [ j ] ; } else if ( sum_Array [ i ] [ j ] != 0 ) return sum_Array [ i ] [ j ] ; int below , right ; below = sum ( i + 1 , j ) ; if ( j <= i ) right = sum ( i + 1 , j + 1 ) ; sum_Array [ i ] [ j ] = max ( below + arr [ i ] [ j ] , right + arr [ i ] [ j ] ) ; return sum_Array [ i ] [ j ] ; } int main ( ) { int tc , T ; scanf ( \"%d\" , & T ) ; for ( tc = 0 ; tc < T ; tc ++ ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) sum_Array [ i ] [ j ] = - 1 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } printf ( \"%d\n\" , sum ( 0 , 0 ) ) ; } return 0 ; }", "label": 1, "id": 25086}
{"input": "int max1 ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a [ 105 ] [ 105 ] , i , j , count , cases , max2 , k ; scanf ( \"%d\" , & cases ) ; for ( k = 0 ; k < cases ; k ++ ) { scanf ( \"%d\" , & count ) ; scanf ( \"%d\" , & a [ 0 ] [ 0 ] ) ; a [ 0 ] [ 1 ] = 0 ; for ( i = 1 ; i < count ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; a [ i ] [ j ] = max1 ( a [ i - 1 ] [ j ] , a [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; } a [ i ] [ j + 1 ] = 0 ; } max2 = a [ count - 1 ] [ 0 ] ; for ( i = 0 ; i < count ; i ++ ) { if ( a [ count - 1 ] [ i ] > max2 ) max2 = a [ count - 1 ] [ i ] ; } printf ( \"%d\n\" , max2 ) ; } return 0 ; }", "label": 1, "id": 15173}
{"input": "void main ( ) { int t , a , b , gcd = 0 , lcm = 0 ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = 1 ; lcm = a * b ; printf ( \"\n%d %d\" , gcd , lcm ) ; } }", "label": 1, "id": 11637}
{"input": "void main ( ) { int t , c , i , j , k ; long n ; long long int a [ 10000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; c = n ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ] ) ; for ( k = 0 ; k < n - 1 ; k ++ ) { j = k ; while ( j <= n ) { if ( a [ j ] < a [ j + 1 ] ) { c ++ ; j ++ ; } else break ; } } printf ( \"%d\" , c ) ; } }", "label": 3, "id": 25682}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i ; long long cost ; scanf ( \"%d\" , & n ) ; long min , a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & a [ i ] ) ; min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } cost = min * ( n - 1 ) ; printf ( \"%lld\n\" , cost ) ; } return 0 ; }", "label": 0, "id": 8520}
{"input": "int main ( void ) { int t , a , b , i , lcm , gcd , num , deno , rem ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) { num = a ; deno = b ; } else { num = b ; deno = a ; } rem = num % deno ; while ( rem != 0 ) { num = deno ; deno = rem ; rem = num % deno ; } gcd = deno ; lcm = ( a * b ) / gcd ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } }", "label": 1, "id": 5351}
{"input": "int main ( ) { int x , n , i , j ; int a [ 110 ] [ 110 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & x ) ; for ( i = 1 ; i <= x ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = x - 1 ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] >= a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 1 ] [ 1 ] ) ; } return 0 ; }", "label": 0, "id": 5262}
{"input": "int main ( void ) { long long int t , n , min = 99999 , sum = 0 ; scanf ( \"%lld\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { sum = 0 ; min = 99999 ; scanf ( \"%lld\" , & n ) ; int a [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } sum = min * ( n - 1 ) ; printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 21012}
{"input": "void main ( ) { int n , a , b , c , s ; scanf ( \"%d\" , & n ) ; while ( n -- ) { s = 0 ; scanf ( \"%d\" , & a ) ; scanf ( \" %d\" , & b ) ; a -- ; while ( a -- ) { scanf ( \" %d\" , & c ) ; if ( c < b ) s = s + c ; else s = s + b ; b = c ; } printf ( \"%d\n\" , s ) ; } }", "label": 1, "id": 23252}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == 0 || b == 0 ) { return 0 ; } if ( a == b ) { return b ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; } int main ( ) { long long int test ; scanf ( \"%lld\" , & test ) ; while ( test -- > 0 ) { long long int n , a ; scanf ( \"%lld %lld\" , & n , & a ) ; long long int gc = gcd ( n , a ) ; printf ( \"%lld \" , gc ) ; printf ( \"%lld\n\" , ( n * a ) / gc ) ; } }", "label": 0, "id": 21860}
{"input": "long max ( long , long ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; int out [ t ] ; for ( int i = 0 ; i < t ; i ++ ) { long inp ; scanf ( \"%ld\" , & inp ) ; long a [ inp ] [ inp ] ; for ( int j = 0 ; j < inp ; j ++ ) { for ( int k = 0 ; k < inp ; k ++ ) { if ( k <= j ) scanf ( \"%ld\" , & a [ j ] [ k ] ) ; else a [ k ] [ j ] = 0 ; } } for ( long j = inp - 2 ; j >= 0 ; j -- ) { for ( long k = 0 ; k < inp ; k ++ ) { long maximum = max ( a [ j + 1 ] [ k ] , a [ j + 1 ] [ k + 1 ] ) ; a [ j ] [ k ] += maximum ; } } out [ i ] = a [ 0 ] [ 0 ] ; } for ( int i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , out [ i ] ) ; return 1 ; } long max ( long a , long b ) { return a > b ? a : b ; }", "label": 3, "id": 6739}
{"input": "int main ( ) { int t , i , j , r , n , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & r ) ; for ( i = 1 ; i <= r ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) scanf ( \"%d\" , & n ) ; } if ( r == 1 ) { printf ( \"%d\n\" , sum ) ; return 0 ; } for ( i = 2 ; i <= r ; i ++ ) sum += i ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 8084}
{"input": "int main ( ) { long long int l = 0 ; int g ; int t , a , b , r = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; l = a * b ; while ( b != 0 ) { r = a % b ; a = b ; b = r ; } printf ( \"%d %lld\n\" , a , l ) ; } return 0 ; }", "label": 1, "id": 12624}
{"input": "int main ( ) { int n , i , j ; int lines ; int max , max1 = 0 ; int arr [ 100 ] [ 100 ] ; int res [ 1000 ] ; int cnt = 0 ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & lines ) ; max = 0 ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; max1 = 0 ; if ( ( i > 0 ) && ( j > 0 ) ) { max1 = arr [ i - 1 ] [ j ] ; if ( arr [ i - 1 ] [ j - 1 ] > arr [ i - 1 ] [ j ] ) { max1 = arr [ i - 1 ] [ j - 1 ] ; } } arr [ i ] [ j ] += max1 ; if ( i == lines - 1 ) { if ( arr [ i ] [ j ] > max ) { max = arr [ i ] [ j ] ; } } } } n -- ; res [ cnt ++ ] = max ; } for ( i = 0 ; i < cnt ; i ++ ) { printf ( \"%d\n\" , res [ i ] ) ; } }", "label": 1, "id": 164}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b , x , y , t ; scanf ( \"%lld %lld\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } long long int gcd , lcm ; gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%lld %lld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 0, "id": 1272}
{"input": "int main ( void ) { long int a , b , hcf , min , temp , max ; int t , i , j ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; min = a >= b ? b : a ; max = a >= b ? a : b ; while ( 1 ) { if ( max % min == 0 ) { hcf = min ; break ; } else { temp = min ; min = max % min ; max = temp ; } } printf ( \"%ld\" , hcf ) ; printf ( \"% ld\n\" , ( ( a * b ) / hcf ) ) ; } return 0 ; }", "label": 0, "id": 28}
{"input": "int main ( ) { int l , n , i , j , p ; int a [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & l ) ; for ( p = 1 ; p <= l ; p ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 9100}
{"input": "int main ( ) { int t , i , j , z , a [ 100 ] [ 100 ] , x , k , sum [ 100 ] , l = 0 , s = 0 , big = 0 ; scanf ( \"%d\" , & t ) ; for ( z = 0 ; z < t ; z ++ ) { scanf ( \"%d\" , & x ) ; for ( j = 0 ; j < x ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( i = 0 ; i < x ; i ++ ) { s = 0 ; for ( j = i ; j < x ; j ++ ) { s = s + a [ j ] [ i ] ; } sum [ l ++ ] = s ; } s = 0 ; for ( i = 0 ; i < x ; i ++ ) { s = s + a [ i ] [ i ] ; } sum [ l ++ ] = s ; for ( i = 0 ; i < l ; i ++ ) { if ( sum [ i ] > big ) { big = sum [ i ] ; } } printf ( \"%d\" , big ) ; } return 0 ; }", "label": 3, "id": 17962}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b ; scanf ( \"%ld%ld\" , & a , & b ) ; int p = a > b ? gcd ( a , b ) : gcd ( b , a ) ; printf ( \"%ld %ld\n\" , p , ( a / p ) * b ) ; } return 0 ; } long int gcd ( long int a , long int b ) { if ( a % b == 0 ) return b ; else gcd ( b , a % b ) ; }", "label": 1, "id": 18120}
{"input": "int main ( ) { int t , n , i , j , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { min = 100001 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & j ) ; if ( j < min ) min = j ; } printf ( \"%d\n\" , min * n - min ) ; } }", "label": 0, "id": 446}
{"input": "int main ( ) { int res = 0 , temp = 0 , t ; scanf ( \"%d\" , & t ) ; if ( t >= 0 && t <= 1000 ) while ( t -- ) { int a [ 2 ] ; scanf ( \"%d\" , & a [ 0 ] ) ; scanf ( \"%d\" , & a [ 1 ] ) ; res = a [ 0 ] ; temp = a [ 1 ] ; while ( a [ 0 ] != a [ 1 ] ) { if ( a [ 0 ] > a [ 1 ] ) a [ 0 ] -= a [ 1 ] ; else a [ 1 ] -= a [ 0 ] ; } int gcd = a [ 1 ] ; int lcm = ( res * temp ) / ( gcd ) ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 18560}
{"input": "int a [ 100 ] [ 100 ] , max [ 1000 ] , l , i , t ; void sum ( int r , int c , int s ) { int x ; x = s + a [ r ] [ c ] ; if ( r == l - 1 ) { if ( x > max [ i ] ) max [ i ] = x ; } else { sum ( r + 1 , c , x ) ; sum ( r + 1 , c + 1 , x ) ; } } int main ( ) { int j , b ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { max [ i ] = 0 ; scanf ( \"%d\" , & l ) ; for ( j = 0 ; j < l ; j ++ ) { for ( b = 0 ; b <= j ; b ++ ) scanf ( \"%d\" , & a [ j ] [ b ] ) ; } sum ( 0 , 0 , 0 ) ; } for ( i = 0 ; i < t ; i ++ ) printf ( \"%d\n\" , max [ i ] ) ; return 0 ; }", "label": 2, "id": 8644}
{"input": "int main ( ) { int n , m , i , j , a [ 100 ] [ 100 ] , sumr = 0 , sumc = 0 ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; if ( j == 0 ) { sumr = sumr + a [ i ] [ j ] ; } if ( i == j ) { sumc = sumc + a [ i ] [ j ] ; } } } if ( sumr > sumc ) { printf ( \"%d\" , sumr ) ; } else { printf ( \"%d\" , sumc ) ; } sumr = 0 ; sumc = 0 ; } return 0 ; }", "label": 1, "id": 19111}
{"input": "int main ( ) { int i , T ; long long gcd , A , B , lcm , x , y , s ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%I64d%I64d \" , & A , & B ) ; if ( B > A ) { s = A ; A = B ; B = s ; } x = A , y = B ; while ( y != 0 ) { gcd = x % y ; x = y ; y = gcd ; } lcm = A / x * B ; printf ( \"%I64d %I64d\n\" , x , lcm ) ; } return 0 ; }", "label": 1, "id": 9740}
{"input": "int main ( ) { int t , i , j , l ; long long int a [ 105 ] [ 105 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%lld\" , & a [ i ] [ j ] ) ; } } for ( i = l - 2 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { if ( a [ i + 1 ] [ j + 1 ] > a [ i + 1 ] [ j ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } else a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } } printf ( \"%lld\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7772}
{"input": "int maxfrom ( int i , int j , int a [ ] [ 100 ] , int n , int mf [ ] [ 100 ] ) { if ( i == n - 1 ) mf [ i ] [ j ] = a [ i ] [ j ] ; else { int m , p , max ; m = maxfrom ( i + 1 , j , a , n , mf ) ; p = maxfrom ( i + 1 , j + 1 , a , n , mf ) ; max = ( m > p ) ? m : p ; mf [ i ] [ j ] = a [ i ] [ j ] + max ; } return mf [ i ] [ j ] ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n , i , j , a [ 100 ] [ 100 ] , maxsum , mf [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i < j ) a [ i ] [ j ] = 0 ; else scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } maxsum = maxfrom ( 0 , 0 , a , n , mf ) ; printf ( \"%d\n\" , maxsum ) ; } return 0 ; }", "label": 2, "id": 5785}
{"input": "int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; else return ( gcd ( b , a % b ) ) ; } int main ( ) { int n ; scanf ( \"%d\" , & n ) ; while ( n ) { n -- ; int a , b ; scanf ( \"%d %d\" , & a , & b ) ; printf ( \"%d %d\n\" , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return ( 0 ) ; }", "label": 1, "id": 799}
{"input": "int main ( ) { int a , test ; scanf ( \"%d \" , & test ) ; for ( a = 0 ; a < test ; a ++ ) { int k , t1 , t2 , c = 2 , s = 0 , l = 2 , i = 2 , sum , n ; scanf ( \"%d %d\" , & n , & t1 ) ; sum = t1 ; while ( c <= n * ( n + 1 ) / 2 ) { scanf ( \"%d %d\" , & t1 , & t2 ) ; c += 2 ; if ( t1 >= t2 ) { sum += t1 ; s = l - 2 ; } else { sum += t2 ; s = l - 1 ; } for ( k = 0 ; k < s ; k ++ ) { scanf ( \"%d\" , & t1 ) ; c ++ ; } if ( c >= i * ( i + 1 ) / 2 ) i ++ ; l = i ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 14461}
{"input": "int main ( ) { int n , t , k ; long sum , i , j , p ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { long min ; scanf ( \"%ld\" , & p ) ; long a [ p ] ; for ( i = 0 ; i < p ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < p ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( \"%ld\n\" , min * ( p - 1 ) ) ; } return 0 ; }", "label": 0, "id": 15124}
{"input": "int main ( void ) { int t , i , a , b , hcf , temp , p1 , p2 ; double lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; p1 = a ; p2 = b ; while ( a % b != 0 ) { temp = b ; b = a % b ; a = temp ; if ( a % b == 0 ) hcf = b ; } lcm = ( p1 * p2 ) / hcf ; printf ( \"%d %d\n\" , hcf , ( int ) lcm ) ; } return ( 0 ) ; }", "label": 1, "id": 5157}
{"input": "int main ( ) { int t , n , row , i , use ; long int sum , * ptr1 , * ptr2 ; long long int use1 , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; i = 0 ; row = 1 ; while ( row <= n ) { long int arr [ row ] ; for ( i = i ; i < row ; i ++ ) { scanf ( \"%ld\" , & arr [ i ] ) ; } if ( row == 1 ) { ptr1 = ( long int * ) malloc ( sizeof ( long int ) * row ) ; * ( ptr1 ) = arr [ 0 ] ; } if ( row > 1 ) { use = row - 1 ; use1 = 1 ; for ( j = 1 ; j <= use ; j ++ ) use1 *= 2 ; ptr2 = ( long int * ) malloc ( sizeof ( long int ) * use1 ) ; for ( i = 0 ; i < use1 ; i ++ ) { if ( i == 0 ) { * ( ptr2 + i ) = arr [ i ] + * ptr1 ; ptr1 ++ ; } else if ( i == ( use1 - 1 ) ) { * ( ptr2 + i ) = arr [ i ] + * ( ptr1 - 1 ) ; } else { * ( ptr2 + i ) = arr [ i ] + * ptr1 ; i ++ ; * ( ptr2 + i ) = arr [ i - 1 ] + * ( ptr1 - 1 ) ; ptr1 ++ ; } } ptr1 = ptr2 ; } row ++ ; i = 0 ; } sum = 0 ; i = 0 ; while ( i < use1 ) { if ( * ptr1 > sum ) sum = * ptr1 ; ptr1 ++ ; i ++ ; } printf ( \"%ld\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 23340}
{"input": "int main ( ) { int a , b , m , g , l ; scanf ( \"%d%d\" , & a , & b ) ; m = a * b ; if ( a == 0 && b == 0 ) printf ( \"gcd=0\nlcm=0\" ) ; else if ( a == 0 && b != 0 ) printf ( \"gcd=%d\nlcm=0\" , b ) ; else if ( a != 0 && b == 0 ) { printf ( \"gcd=%d\nlcm=0\" , a ) ; } else if ( a != 0 && b != 0 ) { while ( a != b ) { if ( a > b ) { a -= b ; } if ( b > a ) { b -= a ; } } printf ( \"gcd=%d\n\" , a ) ; printf ( \"lcm=%d\" , m / a ) ; } return 0 ; }", "label": 1, "id": 4048}
{"input": "int gcd ( int a , int b ) { if ( a == 0 ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { int a , b ; scanf ( \"%d %d\" , & a , & b ) ; int lcm , hcf ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%d %d\n\" , hcf , lcm ) ; } }", "label": 1, "id": 23830}
{"input": "main ( ) { int gcd , t , i ; long int a , b , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld %ld\" , & a , & b ) ; if ( a < b ) { for ( i = 1 ; i <= a ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; } } } if ( b < a ) { for ( i = 1 ; i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { gcd = i ; } } } lcm = ( a * b ) / gcd ; printf ( \"%d %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 10599}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int k , gcd , lcm , a , b ; scanf ( \"%d%d\" , & a , & b ) ; for ( k = 1 ; k <= a && k <= b ; ++ k ) { if ( a % k == 0 && b % k == 0 ) gcd = k ; } lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 5186}
{"input": "int main ( ) { int a , b , c , arr [ 100000 ] , sum , i , j , d ; scanf ( \"%d\" , & a ) ; while ( a -- ) { scanf ( \"%d\" , & b ) ; scanf ( \"%d\" , & c ) ; sum = 0 ; d = c ; for ( i = 0 ; i < b ; i ++ ) { scanf ( \"%d\" , & c ) ; if ( c < d ) { d = c ; } } printf ( \"%d\n\" , d * ( b - 1 ) ) ; } return 0 ; }", "label": 1, "id": 1443}
{"input": "int f ( int i , int j , int x ) ; int a [ 99 ] [ 99 ] [ 99 ] , n , no ; int main ( ) { int k , i , j , u , v ; scanf ( \"%d\" , & no ) ; if ( no > 1000 | no < 1 ) exit ( 1 ) ; v = 0 ; while ( v < no ) { scanf ( \"%d\" , & n ) ; if ( n > 99 | n < 1 ) { exit ( 1 ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ v ] [ i ] [ j ] ) ; if ( a [ v ] [ i ] [ j ] >= 99 | a [ v ] [ i ] [ j ] < 1 ) exit ( 1 ) ; } } v ++ ; } u = 0 ; while ( u < no ) { k = f ( 0 , 0 , u ) ; printf ( \"%d\n\" , k ) ; u ++ ; } return 0 ; } int f ( int i , int j , int z ) { int k1 , k2 , k ; if ( i != n - 1 ) { k1 = a [ z ] [ i ] [ j ] + f ( i + 1 , j , z ) ; k2 = a [ z ] [ i ] [ j ] + f ( i + 1 , j + 1 , z ) ; if ( k1 > k2 ) return k1 ; else return k2 ; } else { return ( a [ z ] [ i ] [ j ] ) ; } }", "label": 3, "id": 2592}
{"input": "int gcd ( int x , int y ) { if ( y != 0 ) gcd ( y , x % y ) ; else { return x ; } } int main ( void ) { int no_of_times ; int a , b ; scanf ( \"%d\" , & no_of_times ) ; for ( int i = 0 ; i < no_of_times ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; int g = gcd ( a , b ) ; int l = ( a * b ) / g ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 17650}
{"input": "int main ( ) { int t ; int gcm ( long long int , long long int ) ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int c , x , y , a , b , d ; scanf ( \"%lld\" , & x ) ; scanf ( \"%lld\" , & y ) ; if ( x > y ) { a = x ; b = y ; } else if ( x < y ) { a = y ; b = x ; } c = gcm ( a , b ) ; d = ( x * y ) / c ; printf ( \"%lld %lld\n\" , c , d ) ; } return 0 ; } int gcm ( long long int p , long long int q ) { long long int c ; c = p % q ; p = q ; q = c ; if ( q != 0 ) gcm ( p , q ) ; else return p ; }", "label": 0, "id": 20445}
{"input": "int gcd ( int m , int n ) { if ( n == 0 ) return m ; if ( m > n ) return gcd ( n , m % n ) ; } int main ( ) { int s , m , n , c ; scanf ( \"%d\" , & s ) ; while ( s -- ) { scanf ( \"%d\" , & m ) ; scanf ( \"%d\" , & n ) ; c = gcd ( m , n ) ; printf ( \"%d %d\" , c , ( m * n ) / c ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 10763}
{"input": "int main ( ) { long long t , i , r , small , n ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld\" , & n ) ; long long int arr [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & arr [ i ] ) ; small = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( small > arr [ i ] ) { small = arr [ i ] ; } } r = small * ( n - 1 ) ; printf ( \"%lld\n\" , r ) ; } return 0 ; }", "label": 0, "id": 4721}
{"input": "void scanPositiveInt ( int * input ) { char c = fgetc_unlocked ( stdin ) ; int a = 0 ; while ( c < '0' || c > '9' ) c = fgetc_unlocked ( stdin ) ; while ( c >= '0' && c <= '9' ) { a = a * 10 + c - '0' ; c = fgetc_unlocked ( stdin ) ; } * input = a ; } int maximum ( int x , int y ) { return ( x > y ) ? x : y ; } int main ( ) { int numTestCases , num , arr [ 101 ] [ 101 ] , i , j ; scanPositiveInt ( & numTestCases ) ; while ( numTestCases -- ) { scanPositiveInt ( & num ) ; for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanPositiveInt ( & arr [ i ] [ j ] ) ; } } for ( i = num - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { arr [ i ] [ j ] += maximum ( arr [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22720}
{"input": "int main ( ) { int t , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int n , j , k , cnt = 0 ; scanf ( \"%d\" , & n ) ; long long int a [ n ] ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%lld\" , & a [ j ] ) ; } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = j ; k < n - 1 ; k ++ ) { if ( a [ k ] <= a [ k + 1 ] ) cnt ++ ; else break ; } } printf ( \"%d\n\" , cnt + n ) ; } }", "label": 0, "id": 4447}
{"input": "int main ( ) { long long int t , g , a , b , i , min ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld %lld\" , & a , & b ) ; if ( b < a ) min = b ; else min = a ; for ( i = 1 ; i <= min ; ++ i ) { if ( a % i == 0 && b % i == 0 ) g = i ; } printf ( \"%lld %lld\" , g , ( a * b ) / g ) ; } return 0 ; }", "label": 2, "id": 22113}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a % b == 0 ) { return b ; } return gcd ( b , a % b ) ; } int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long long int a , b ; scanf ( \"%lld%lld\" , & a , & b ) ; long long int g = gcd ( a , b ) ; long long int lcm = ( a * b ) / g ; printf ( \"%lld %lld\n\" , g , lcm ) ; } return 0 ; }", "label": 0, "id": 9260}
{"input": "int main ( ) { long int T , top1 , top2 , count , i , n , arr [ 100000 ] ; scanf ( \"%ld\" , & T ) ; while ( T -- ) { count = 0 ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & arr [ i ] ) ; top1 = n - 1 ; top2 = n - 2 ; while ( top1 != - 1 ) { if ( top2 < 0 ) { top1 -- ; top2 = top1 - 1 ; continue ; } else if ( arr [ top1 ] >= arr [ top2 ] ) { count ++ ; top2 -- ; } else if ( arr [ top1 ] < arr [ top2 ] ) { top1 -- ; top2 = top1 - 1 ; } } printf ( \"%ld\n\" , count + n ) ; } return 0 ; }", "label": 1, "id": 11962}
{"input": "int main ( int argc , char * * argv ) { int n , array [ 102 ] [ 102 ] , row , i , j , q = 0 ; ; scanf ( \"%d\" , & n ) ; while ( q < n ) { scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & array [ i ] [ j ] ) ; for ( i = row - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( array [ i + 1 ] [ j ] > array [ i + 1 ] [ j + 1 ] ) array [ i ] [ j ] += array [ i + 1 ] [ j ] ; else array [ i ] [ j ] += array [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , array [ 0 ] [ 0 ] ) ; ++ q ; } return 0 ; }", "label": 0, "id": 13560}
{"input": "int main ( void ) { int a , c ; scanf ( \"%d\" , & a ) ; int s [ a ] ; for ( c = 0 ; c < a ; c ++ ) { int i , j , b ; scanf ( \"%d\" , & b ) ; int arr [ b ] [ b ] ; for ( i = 0 ; i < b ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } for ( i = b - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + 1 ] ) arr [ i - 1 ] [ j ] = arr [ i - 1 ] [ j ] + arr [ i ] [ j ] ; else arr [ i - 1 ] [ j ] = arr [ i - 1 ] [ j ] + arr [ i ] [ j + 1 ] ; } } s [ c ] = arr [ 0 ] [ 0 ] ; } for ( c = 0 ; c < a ; c ++ ) printf ( \"%d\n\" , s [ c ] ) ; }", "label": 0, "id": 18553}
{"input": "int main ( ) { int t , k ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { int n , i , j ; scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) { int x ; if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) x = a [ i + 1 ] [ j ] ; else x = a [ i + 1 ] [ j + 1 ] ; a [ i ] [ j ] = a [ i ] [ j ] + x ; } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 13314}
{"input": "int main ( void ) { int t , n , a [ 1000 ] [ 1000 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t ) { t -- ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) { a [ i ] [ j ] += a [ i + 1 ] [ j ] ; } else { a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25124}
{"input": "int main ( ) { int T , N , i , n , k , a [ 100 ] [ 100 ] , j ; scanf ( \"%d\" , & T ) ; while ( T > 0 ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = N - 1 ; i >= 0 ; i -- ) { for ( j = N - 1 ; j >= 0 ; j -- ) { k = ( a [ i ] [ j - 1 ] >= a [ i ] [ j ] ) ? a [ i ] [ j - 1 ] : a [ i ] [ j ] ; a [ i - 1 ] [ j - 1 ] += k ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; T -- ; } return 0 ; }", "label": 3, "id": 2909}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { long long int t , r , i , k , tri [ 1001 ] [ 1001 ] , j , sum ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%lld\" , & r ) ; for ( k = 0 ; k < r ; k ++ ) { for ( j = 0 ; j <= k ; j ++ ) { scanf ( \"%lld\" , & tri [ k ] [ j ] ) ; } } for ( k = 1 ; k < r ; k ++ ) { for ( j = 0 ; j <= k ; j ++ ) { if ( j == 0 ) { tri [ k ] [ j ] = tri [ k ] [ j ] + tri [ k - 1 ] [ j ] ; } else if ( j == i ) { tri [ k ] [ j ] = tri [ k ] [ j ] + tri [ k - 1 ] [ j - 1 ] ; } else { tri [ k ] [ j ] = tri [ k ] [ j ] + max ( tri [ k - 1 ] [ j ] , tri [ k - 1 ] [ j - 1 ] ) ; } } } sum = 0 ; for ( j = 0 ; j < r ; j ++ ) { if ( tri [ r - 1 ] [ j ] > sum ) sum = tri [ r - 1 ] [ j ] ; } printf ( \"%lld\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 15372}
{"input": "main ( ) { int t ; long int n , i , min ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%ld\" , & n ) ; long int ar [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%ld\" , & ar [ i ] ) ; min = ar [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > ar [ i ] ) min = ar [ i ] ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 25826}
{"input": "int main ( ) { int test , i , j , no , t ; scanf ( \"%d\" , & test ) ; for ( t = 0 ; t < test ; t ++ ) { int a [ 101 ] [ 101 ] = { 0 } ; scanf ( \"%d\" , & no ) ; for ( i = 0 ; i < no ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; for ( i = no - 1 ; i >= 0 ; i -- ) { for ( j = no - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j - 1 ] ) a [ i - 1 ] [ j - 1 ] += a [ i ] [ j ] ; else a [ i - 1 ] [ j - 1 ] += a [ i ] [ j - 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 3, "id": 5959}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( \"%d %d\n\" , m , ( a * b ) / m ) ; } return 0 ; }", "label": 1, "id": 22901}
{"input": "int sum ( int a [ 100 ] [ 100 ] , int i , int j , int N , int b [ 100 ] [ 100 ] ) { int t , t1 , t2 ; if ( i > N ) { return 0 ; } if ( b [ i ] [ j ] != 0 ) { return b [ i ] [ j ] ; } t1 = sum ( a , i + 1 , j , N , b ) ; t2 = sum ( a , i + 1 , j + 1 , N , b ) ; if ( t1 > t2 ) { t = t1 + a [ i ] [ j ] ; } else { t = t2 + a [ i ] [ j ] ; } b [ i ] [ j ] = t ; return t ; } int main ( ) { int T , N , i , j , k , a [ 100 ] [ 100 ] , result ; scanf ( \"%d\" , & T ) ; for ( k = 0 ; k < T ; k ++ ) { scanf ( \"%d\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } int b [ 100 ] [ 100 ] = { { 0 } , { 0 } } ; result = sum ( a , 0 , 0 , N , b ) ; printf ( \"%d\n\" , result ) ; } return 0 ; }", "label": 1, "id": 650}
{"input": "int main ( ) { int n , t , i , j ; int a [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { j = 0 ; while ( j <= i ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; j ++ ; } } for ( i = t ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + ( a [ i ] [ j ] < a [ i ] [ j + 1 ] ? a [ i ] [ j + 1 ] : a [ i ] [ j ] ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 701}
{"input": "void main ( ) { int a [ 20 ] , i , k , l , n , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( k = 0 ; k < n ; k ++ ) scanf ( \"%d\" , & a [ i ] ) ; for ( k = 0 ; k < n ; k ++ ) { if ( a [ i ] < a [ i + 1 ] ) { for ( l = k + 1 ; l < n - 1 ; l ++ ) a [ l ] = a [ l + 1 ] ; n -- ; } else { for ( l = k ; l < n - 1 ; l ++ ) a [ l ] = a [ l + 1 ] ; n -- ; } } t -- ; } printf ( \"%d\" , a [ 0 ] ) ; }", "label": 1, "id": 25743}
{"input": "int mat [ 100 ] [ 100 ] ; int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%d\n\" , solve ( x ) ) ; } return 0 ; } int max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int solve ( int x ) { int k , l ; if ( x == 1 ) { return mat [ 0 ] [ 0 ] ; } for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] = max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; }", "label": 1, "id": 8711}
{"input": "int gcd ( int x , int y ) { int p , q , temp ; p = x ; q = y ; while ( q != 0 ) { temp = q ; q = p % q ; p = temp ; } return p ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long int x , y ; long int LCM ; scanf ( \"%ld %ld\" , & x , & y ) ; long int k ; k = gcd ( x , y ) ; LCM = ( x * y ) / k ; printf ( \"%ld \" , k ) ; printf ( \"%ld\n\" , LCM ) ; } return 0 ; }", "label": 0, "id": 21608}
{"input": "int main ( ) { int t , a , b , g = 0 , l , p , r ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; if ( a == b ) g = a ; else if ( a < b ) { p = b ; b = a ; a = p ; } while ( ( a % b ) == 0 ) { r = a % b ; a = r ; r = b ; } g = b ; l = ( a * b ) / g ; printf ( \"%d\" , g ) ; printf ( \" %d\n\" , l ) ; g = 0 , l = 0 ; } return 0 ; }", "label": 1, "id": 9530}
{"input": "int main ( ) { int i , no , sum , t , n ; int k , max , pmax ; scanf ( \"%d\" , & t ) ; while ( t -- ) { max = 0 ; pmax = 0 ; scanf ( \"%d\" , & n ) ; k = 1 ; while ( k <= n ) { sum = 0 ; for ( i = 1 ; i <= k ; i ++ ) { scanf ( \"%d\" , & no ) ; sum = sum + no ; } pmax = sum ; if ( pmax > max ) max = pmax ; k ++ ; } printf ( \"%d\" , max ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 2640}
{"input": "long gcd ( long , long ) ; int main ( ) { int T , i , hcf ; long x , y , lcm ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { scanf ( \"%ld%ld\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %ld\n\" , hcf , lcm ) ; } return 0 ; } long gcd ( long x , long y ) { if ( x == 0 ) { return y ; } while ( y != 0 ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 0, "id": 26354}
{"input": "int main ( ) { int x , i , t , l , j , k = 1 , sum = 0 ; scanf ( \"%d\" , & l ) ; for ( t = 1 ; t <= l ; t ++ ) { sum = 0 ; k = 1 ; scanf ( \"%d\" , & x ) ; int a [ x ] [ x ] ; for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } k ++ ; } for ( i = 0 ; i < x ; i ++ ) { sum += a [ i ] [ i ] ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 5371}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int a , b , i ; scanf ( \"%d %d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) { printf ( \"%d %d\n\" , i , a * b ) ; } } } return 0 ; }", "label": 1, "id": 25800}
{"input": "int main ( ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; unsigned long int A [ n ] , min = 50001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & A [ i ] ) ; if ( A [ i ] < min ) min = A [ i ] ; } long long int ans = min * ( n - 1 ) ; printf ( \"%ld\n\" , ans ) ; t -- ; } return 0 ; }", "label": 0, "id": 7567}
{"input": "int main ( ) { long int a , b , x , y , t , gcd , lcm , n , i ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld%ld\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%ld\\t\" , gcd ) ; printf ( \"%ld\n\" , lcm ) ; } return 0 ; }", "label": 0, "id": 5469}
{"input": "int main ( void ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; scanf ( \"%d\" , & n ) ; int a [ n ] , m = 1000000 ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] < m ) m = a [ i ] ; } printf ( \"%d\n\" , m * ( n - 2 + 1 ) ) ; } return 0 ; }", "label": 0, "id": 4938}
{"input": "int n , k , sum [ 1000 ] [ 1000 ] = { 0 } , ar [ 1000 ] [ 1000 ] , j , i , t ; int funct ( int ar [ 1000 ] [ 1000 ] , int k , int l , int n ) { int a , b ; for ( a = n - 1 ; a >= 0 ; a -- ) { for ( b = 0 ; b < n ; b ++ ) sum [ a ] [ b ] = ar [ a ] [ b ] + max ( sum [ a + 1 ] [ b ] , sum [ a + 1 ] [ b + 1 ] ) ; } return sum [ 0 ] [ 0 ] ; } int main ( ) { int sum ; scanf ( \"%d\" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; } sum = funct ( ar , 0 , 0 , n ) ; printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 0, "id": 4536}
{"input": "int main ( void ) { long long int t , i ; scanf ( \"%lld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { long long int a , b , x1 , x2 , lcm ; scanf ( \"%lld%lld\" , & x1 , & x2 ) ; a = x1 ; b = x2 ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } lcm = ( x1 * x2 ) / a ; printf ( \"%lld %lld\n\" , a , lcm ) ; } return 0 ; }", "label": 0, "id": 15218}
{"input": "int main ( ) { long int num1 , num2 , n , totalNumbers ; int i , j , a , b ; long int big ; long int smallest1 , smallest2 ; scanf ( \"%li\" , & num1 ) ; for ( i = 0 ; i < num1 ; i ++ ) { scanf ( \"%li\" , & num2 ) ; totalNumbers = num2 * ( num2 + 1 ) / 2 ; long int n [ totalNumbers ] ; for ( j = 0 ; j < totalNumbers ; j ++ ) { scanf ( \"%li\" , & n [ j ] ) ; } for ( a = num2 - 1 ; a > 0 ; a -- ) { for ( b = 0 ; b < a ; b ++ ) { big = n [ ( a - 1 ) * a / 2 + b ] + n [ a * ( a + 1 ) / 2 + b ] ; if ( big < n [ ( a - 1 ) * a / 2 + b ] + n [ a * ( a + 1 ) / 2 + 1 + b ] ) big = n [ ( a - 1 ) * a / 2 + b ] + n [ a * ( a + 1 ) / 2 + 1 + b ] ; n [ ( a - 1 ) * a / 2 + b ] = big ; printf ( \"\n\" ) ; } } printf ( \"%li\n\" , n [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 25037}
{"input": "int main ( ) { long int t , n , cost , val1 , val2 , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { cost = 0 ; scanf ( \"%ld\" , & n ) ; scanf ( \"%ld\" , & val1 ) ; for ( i = 1 ; i < n ; i ++ ) { if ( val1 > val2 ) { cost += val2 ; scanf ( \"%ld\" , & val1 ) ; } else { cost += val1 ; scanf ( \"%ld\" , & val2 ) ; } } printf ( \"%ld\n\" , cost ) ; } return 0 ; }", "label": 1, "id": 20233}
{"input": "int main ( void ) { int tcs , m , i , j ; scanf ( \"%d\" , & tcs ) ; int mat [ 100 ] [ 100 ] ; while ( tcs > 0 ) { scanf ( \"%d\" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) mat [ i ] [ j ] = - 1 ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , mat [ i ] [ j ] ) ; } int largest = - 1 ; int temp1 , temp2 = 0 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; mat [ i ] [ j ] != - 1 ; j ++ ) { if ( j == 0 ) temp1 = mat [ i + 1 ] [ j ] ; else temp1 = temp2 ; mat [ i + 1 ] [ j ] = mat [ i ] [ j ] + temp1 ; if ( mat [ i + 1 ] [ j ] > largest ) largest = mat [ i + 1 ] [ j ] ; temp2 = mat [ i + 1 ] [ j + 1 ] ; mat [ i + 1 ] [ j + 1 ] = mat [ i ] [ j ] + temp2 ; if ( mat [ i + 1 ] [ j + 1 ] > largest ) largest = mat [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\" , largest ) ; tcs -- ; } return 0 ; }", "label": 3, "id": 24217}
{"input": "int small ( int , int ) ; int main ( ) { int t , n , i , sum ; int a [ 100000 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; } for ( i = 1 ; i <= n - 1 ; i ++ ) { sum = sum + small ( a [ i - 1 ] , a [ i ] ) ; } printf ( \"%d\n\" , sum ) ; } return 0 ; } int small ( int a , int b ) { if ( a < b ) return a ; else return b ; }", "label": 1, "id": 8344}
{"input": "int main ( ) { int a , b , n , t , l , i ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; l = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b -= a ; } printf ( \"%d %d\n\" , a , l / a ) ; } return 0 ; }", "label": 1, "id": 11681}
{"input": "int n ; int findMaxOf ( int array [ ] ) { int max = 0 ; int i = 0 ; for ( i = 0 ; i < n ; i += 1 ) { if ( max < array [ i ] ) { max = array [ i ] ; } } return max ; } int main ( ) { int testcases = 0 ; scanf ( \"%d\" , & testcases ) ; int testcase = 0 ; for ( ; testcase < testcases ; testcase += 1 ) { scanf ( \"%d\" , & n ) ; int array [ n ] [ n ] ; int i = 0 , j = 0 ; for ( i = 0 ; i < n ; i += 1 ) { for ( j = 0 ; j < n ; j += 1 ) { array [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < n ; i += 1 ) { for ( j = 0 ; j <= i ; j += 1 ) { scanf ( \"%d\" , & array [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i += 1 ) { if ( i == 0 ) { continue ; } for ( j = 0 ; j <= i ; j += 1 ) { if ( j == 0 ) { array [ i ] [ j ] += array [ i - 1 ] [ j ] ; } else { array [ i ] [ j ] += ( array [ i - 1 ] [ j ] > array [ i - 1 ] [ j - 1 ] ? array [ i - 1 ] [ j ] : array [ i - 1 ] [ j - 1 ] ) ; } } } printf ( \"%d\n\" , findMaxOf ( array [ n - 1 ] ) ) ; } return 0 ; }", "label": 0, "id": 6861}
{"input": "int main ( ) { int n = 0 , counter = 0 , i = 0 , j = 0 , * * a = 0 ; scanf ( \"%d\" , & n ) ; for ( counter = 0 ; counter < n ; counter ++ ) { int size = 0 , max = 0 , sum = 0 , p = 0 ; scanf ( \"%d\" , & size ) ; a = ( int * * ) calloc ( size , sizeof ( int * ) ) ; for ( i = 0 ; i < size ; i ++ ) { a [ i ] = ( int * ) calloc ( size , sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } while ( p < size ) { int tmp = p ; sum = 0 ; for ( i = size - 1 ; i >= 0 ; i -- ) { sum += a [ i ] [ tmp ] ; if ( tmp > 0 ) tmp -- ; } if ( sum > max ) max = sum ; p ++ ; } printf ( \"%d\n\" , max ) ; for ( i = 0 ; i < size ; i ++ ) free ( a [ i ] ) ; free ( a ) ; a = 0 ; } return 0 ; }", "label": 1, "id": 13100}
{"input": "int main ( ) { int n , a , lines , i , j , tri [ 100 ] [ 100 ] ; scanf ( \"%d\" , & n ) ; for ( a = 1 ; a <= n ; a ++ ) { scanf ( \"%d\" , lines ) ; for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , tri [ i ] [ j ] ) ; } for ( i = lines - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( tri [ i ] [ j ] > tri [ i ] [ j + 1 ] ) tri [ i - 1 ] [ j ] += tri [ i ] [ j ] ; else tri [ i - 1 ] [ j ] += tri [ i ] [ j + 1 ] ; } } printf ( \"%d\n\" , tri [ 0 ] [ 0 ] ) ; } return ( 0 ) ; }", "label": 3, "id": 21574}
{"input": "int main ( ) { unsigned int totalCount ; scanf ( \"%d\" , & totalCount ) ; int storage [ 100 ] [ 100 ] ; int count ; int lines ; int currentLine ; int currentNumber ; int j , k ; int tempA , tempB ; int result ; for ( count = 0 ; count < totalCount ; count ++ ) { for ( j = 0 ; j < 100 ; j ++ ) for ( k = 0 ; k < 100 ; k ++ ) storage [ j ] [ k ] = 0 ; scanf ( \"%d\" , & lines ) ; currentLine = 1 ; for ( currentLine = 1 ; currentLine <= lines ; currentLine ++ ) { for ( j = 1 ; j <= currentLine ; j ++ ) { scanf ( \"%d\" , & currentNumber ) ; storage [ currentLine - 1 ] [ j - 1 ] = currentNumber ; } } for ( currentLine = 1 ; currentLine < lines ; currentLine ++ ) { for ( j = 0 ; j <= currentLine ; j ++ ) { if ( j == 0 ) storage [ currentLine ] [ j ] = storage [ currentLine - 1 ] [ j ] + storage [ currentLine ] [ j ] ; else { tempA = storage [ currentLine - 1 ] [ j - 1 ] + storage [ currentLine ] [ j ] ; tempB = storage [ currentLine - 1 ] [ j ] + storage [ currentLine ] [ j ] ; storage [ currentLine ] [ j ] = ( tempA > tempB ) ? tempA : tempB ; } } } result = 0 ; for ( j = 0 ; j < lines ; j ++ ) { if ( storage [ lines - 1 ] [ j ] > result ) result = storage [ lines - 1 ] [ j ] ; } printf ( \"%d\n\" , result ) ; } return 0 ; }", "label": 0, "id": 11622}
{"input": "int GCD ( int a , int b ) ; int main ( int argc , char const * argv [ ] ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( \"%d%d\" , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; } int GCD ( int a , int b ) { if ( a == 0 ) { return b ; } return GCD ( b % a , a ) ; }", "label": 1, "id": 25197}
{"input": "int main ( ) { int t ; int row , i , j , one , two ; int max ; scanf ( \"%d\" , & t ) ; int ans [ t ] ; int c = 0 ; while ( t > 0 ) { max = - 12345 ; scanf ( \"%d\" , & row ) ; int * a [ row ] , * b [ row ] ; for ( i = 0 ; i < row ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; b [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; } for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } if ( row == 1 ) { b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; max = b [ 0 ] [ 0 ] ; } else if ( row == 2 ) { b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; b [ 1 ] [ 0 ] = a [ 1 ] [ 0 ] + b [ 0 ] [ 0 ] ; b [ 1 ] [ 1 ] = a [ 1 ] [ 1 ] + b [ 0 ] [ 0 ] ; max = ( b [ 1 ] [ 0 ] > b [ 1 ] [ 1 ] ) ? b [ 1 ] [ 0 ] : b [ 1 ] [ 1 ] ; } else { b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; b [ 1 ] [ 0 ] = a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] ; b [ 1 ] [ 1 ] = a [ 1 ] [ 1 ] + a [ 0 ] [ 0 ] ; for ( i = 2 ; i < row ; i ++ ) { b [ i ] [ 0 ] = a [ i ] [ 0 ] + b [ i - 1 ] [ 0 ] ; for ( j = 1 ; j < i ; j ++ ) { one = b [ i - 1 ] [ j ] + a [ i ] [ j ] ; two = b [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; b [ i ] [ j ] = ( one > two ) ? one : two ; } b [ i ] [ i ] = a [ i ] [ i ] + b [ i - 1 ] [ i - 1 ] ; } } if ( row > 2 ) { for ( j = 0 ; j < row ; j ++ ) { if ( b [ row - 1 ] [ j ] > max ) max = b [ row - 1 ] [ j ] ; } } ans [ c ++ ] = max ; t -- ; } for ( i = 0 ; i < c ; i ++ ) printf ( \"%d\n\" , ans [ i ] ) ; return 0 ; }", "label": 0, "id": 13212}
{"input": "int main ( ) { int t , a , b , x , y , tmp , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & x , & y ) ; a = x ; b = y ; while ( b != 0 ) { tmp = b ; b = a % b ; a = tmp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 26429}
{"input": "int main ( ) { int t , i , s , j , k , r ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { int cost = 0 ; scanf ( \"%d\" , & s ) ; int a [ s ] ; for ( j = 0 ; j < s ; j ++ ) { scanf ( \"%d\" , & a [ j ] ) ; } for ( j = 0 ; j < s ; j ++ ) { r = 0 ; if ( a [ r ] > a [ r + 1 ] ) { for ( k = 0 ; k < s ; k ++ ) { a [ k ] = a [ k + 1 ] ; } cost = cost + a [ 0 ] ; } else { for ( k = 1 ; k < s ; k ++ ) { a [ k ] = a [ k + 1 ] ; } cost = cost + a [ 0 ] ; } s -- ; } printf ( \"%d\n\" , cost ) ; } return 0 ; }", "label": 2, "id": 10341}
{"input": "int main ( ) { int t , a , b , i , j , gcd , small , large , rem , digit , mul , diff , num ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & a ) ; scanf ( \"%d\" , & b ) ; if ( a > b ) { small = b ; large = a ; } else { small = a ; large = b ; } for ( j = 1 ; j <= small ; j ++ ) { if ( small % j == 0 && large % j == 0 ) { gcd = j ; } } j = 1 ; diff = large % small ; while ( diff % small != 0 ) { j ++ ; diff = ( large % small ) * j ; } char st1 [ 14 ] ; mul = j ; j = 0 ; num = large ; while ( num != 0 ) { st1 [ j ] = num + 48 ; num = num / 10 ; j ++ ; } st1 [ j ] = '\\0' ; digit = 0 ; for ( j = 0 ; st1 [ j ] != '\\0' ; j ++ ) { digit = ( st1 [ j ] - 48 ) * mul + digit ; rem = digit ; digit = digit / 10 ; st1 [ j ] = rem + 48 ; if ( st1 [ j + 1 ] == '\\0' && digit != 0 ) { st1 [ j + 1 ] = '0' ; st1 [ j + 2 ] = '\\0' ; } } printf ( \"%d\" , gcd ) ; for ( j = strlen ( st1 ) ; j >= 0 ; j -- ) { printf ( \"%c\" , st1 [ j ] ) ; } printf ( \"\n\" ) ; } return 0 ; }", "label": 2, "id": 17038}
{"input": "int main ( ) { int m , n1 , n2 , gcd , lcm , k , l , temp ; scanf ( \"%d\" , & m ) ; while ( m -- > 0 ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; k = n1 ; l = n2 ; while ( n1 % n2 != 0 ) { temp = n2 ; n2 = n1 % n2 ; n1 = temp ; } gcd = n2 ; lcm = k * l / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; gcd = 0 ; lcm = 0 ; } return 0 ; }", "label": 1, "id": 23691}
{"input": "int main ( void ) { int n1 , n2 , a [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & n1 ) ; while ( n1 -- ) { scanf ( \"%d\" , & n2 ) ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & a [ i ] [ j ] ) ; } for ( j = n2 - 2 ; j >= 0 ; j -- ) for ( i = 0 ; i <= j ; i ++ ) { a [ j ] [ i ] += ( a [ j + 1 ] [ i ] > a [ j + 1 ] [ i + 1 ] ? a [ j + 1 ] [ i ] : a [ j + 1 ] [ i + 1 ] ) ; } printf ( \"\n%d\" , a [ 0 ] [ 0 ] ) ; } return ( 0 ) ; }", "label": 0, "id": 4957}
{"input": "int main ( ) { int T [ 100 ] [ 100 ] ; int t , n , k = 0 , ans [ 1000 ] , i , j , m , l , max ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; j = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & T [ i ] [ j ] ) ; } } for ( l = 0 ; l < n ; i ++ ) { for ( m = 0 ; m <= i ; m ++ ) { if ( l - 1 >= 0 && m - 1 >= 0 && m < l ) T [ l ] [ m ] = MAX ( T [ l ] [ m ] + T [ l - 1 ] [ m - 1 ] , T [ l ] [ m ] + T [ l - 1 ] [ m ] ) ; else if ( m == l ) T [ l ] [ m ] += T [ l - 1 ] [ m - 1 ] ; else T [ l ] [ m ] += T [ l - 1 ] [ m ] ; } } max = - 1 ; m = n - 1 ; for ( l = 0 ; l < n ; j ++ ) { if ( T [ m ] [ l ] > max ) max = T [ m ] [ l ] ; } ans [ k ++ ] = max ; } printf ( \"\n\n\n\" ) ; for ( i = 0 ; i < k ; i ++ ) printf ( \"%d\n\" , ans [ i ] ) ; return 0 ; }", "label": 3, "id": 24445}
{"input": "int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B ; scanf ( \"%d%d\" , & A , & B ) ; int ans = gcd ( A , B ) ; printf ( \"%d \" , ans ) ; if ( ans != 0 ) printf ( \"%d\n\" , ( A * B ) / ans ) ; } }", "label": 1, "id": 20944}
{"input": "int main ( ) { int t , no , min , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & no ) ; int array [ no ] ; min = 0 ; for ( i = 0 ; i < no ; i ++ ) { scanf ( \"%d\" , & array [ i ] ) ; if ( min > array [ i ] ) min = array [ i ] ; } printf ( \"%d\" , min * ( no - 1 ) ) ; printf ( \"\n\" ) ; } }", "label": 1, "id": 2411}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int i , a , b , p , q , r ; scanf ( \"%d %d\" , & a , & b ) ; r = a * b ; if ( b > a ) { p = a ; a = b ; b = p ; } for ( i = 0 ; b != 0 ; i ++ ) { q = b ; b = a % b ; a = q ; } printf ( \"%d %d\n\" , a , r / a ) ; } return 0 ; }", "label": 1, "id": 11541}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int a , b , i , s , gcd , lcm ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) s = a ; else s = b ; for ( i = 1 ; i <= s ; i ++ ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) { gcd = i ; } } printf ( \"%d\" , gcd ) ; lcm = ( a * b ) / gcd ; printf ( \"%d\" , lcm ) ; } return 0 ; }", "label": 2, "id": 4935}
{"input": "int main ( ) { int num , den , rem , a , b , gcd , lcm , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { rem = 0 ; scanf ( \"%d%d\" , & a , & b ) ; if ( a > b ) num = a , den = b ; else den = a , num = b ; rem = num % den ; while ( rem != 0 ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( a * b ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 1565}
{"input": "int main ( ) { int t , i , n , j , arr [ 101 ] [ 101 ] ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) arr [ i ] [ j ] += arr [ i + 1 ] [ j ] ; else arr [ i ] [ j ] += arr [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , arr [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 3304}
{"input": "int main ( ) { int t , n , ar [ 100 ] [ 100 ] , i , j ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( \"%d\" , & ar [ i ] [ j ] ) ; for ( i = n - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < i ; j ++ ) { if ( ar [ i ] [ j ] > ar [ i ] [ j + 1 ] ) ar [ i - 1 ] [ j ] += ar [ i ] [ j ] ; else ar [ i - 1 ] [ j ] += ar [ i ] [ j + 1 ] ; } printf ( \"%d\n\" , ar [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 22413}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; for ( int i = 0 ; i < t ; i ++ ) { long int a , b , c , d , e , f , g ; scanf ( \"%ld%ld\" , & a , & b ) ; c = a ; d = b ; while ( d != 0 ) { e = d ; d = c % d ; c = e ; } f = c ; g = ( a * b ) / f ; printf ( \"%ld %ld\n\" , f , g ) ; } return 0 ; }", "label": 0, "id": 18681}
{"input": "int main ( ) { int i , t , j , k , a , b , n , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { gcd = 0 ; lcm = 0 ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) n = b ; else n = a ; for ( j = 1 ; j <= n ; j ++ ) { if ( a % j == 0 && b % j == 0 && j > gcd ) gcd = j ; } for ( k = 1 ; ; k ++ ) { if ( k % a == 0 && k % b == 0 ) { lcm = k ; break ; } } printf ( \"%d %d\n\" , gcd , lcm ) ; } }", "label": 2, "id": 5242}
{"input": "int main ( ) { int i , n1 , n2 , h , l , t ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == 0 && n2 % i == 0 ) h = i ; } l = ( n1 * n2 ) / h ; printf ( \"%d  %d\" , h , l ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 15240}
{"input": "int main ( ) { int n , t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) a [ i ] [ j ] += a [ i + 1 ] [ j ] ; else a [ i ] [ j ] += a [ i + 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } }", "label": 0, "id": 5858}
{"input": "int main ( ) { int n1 , n2 , i , m , g , c ; scanf ( \"%d\" , & c ) ; while ( c > 0 ) { scanf ( \"%d %d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == 0 && n2 % i == 0 ) g = i ; } m = ( n1 > n2 ) ? n1 : n2 ; while ( 1 ) { if ( m % n1 == 0 && m % n2 == 0 ) { break ; } ++ m ; } printf ( \"%d %d\n\" , g , m ) ; c -- ; } return 0 ; }", "label": 2, "id": 25038}
{"input": "int GCD ( long int x , long int y ) { if ( x == 0 || y == 0 ) return 0 ; else if ( x == y ) return x ; else { long int z = x % y ; if ( z == 0 ) return ( y ) ; else return ( GCD ( y , z ) ) ; } } int LCM ( long int x , long int y ) { long int temp = GCD ( x , y ) ; long int z = ( x * y ) / temp ; return ( z ) ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long int a , b ; scanf ( \"%ld %ld\" , & a , & b ) ; long int gcd = GCD ( a , b ) ; long int lcm = LCM ( a , b ) ; printf ( \"%ld %ld\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 21622}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { long n , a , temp [ 100000 ] = { 0 } , min = INT_MAX ; scanf ( \"%ld\" , & n ) ; for ( long i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a ) ; temp [ a ] ++ ; if ( min > a ) min = a ; } printf ( \"%ld\n\" , min * ( n - 1 ) ) ; } }", "label": 0, "id": 13111}
{"input": "int a [ 100 ] [ 100 ] ; int main ( ) { int n , r , i , j , k ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & r ) ; for ( j = 0 ; j < r ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( \"%d\" , & a [ j ] [ k ] ) ; } } for ( j = r - 2 ; j >= 0 ; j -- ) { for ( k = j ; k >= 0 ; k -- ) { a [ j ] [ k ] += ( a [ j + 1 ] [ k + 1 ] > a [ j + 1 ] [ k ] ) ? a [ j + 1 ] [ k + 1 ] : a [ j + 1 ] [ k ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 5156}
{"input": "int arr [ 100 ] [ 100 ] , N ; int sumx [ 100 ] ; unsigned long long sum ( ) { int i , j , sum1 , sum2 ; for ( i = 0 ; i < N ; i ++ ) { sumx [ i ] = arr [ N - 1 ] [ i ] ; } for ( i = N - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { sum1 = arr [ i ] [ j ] + sumx [ j ] ; sum2 = arr [ i ] [ j ] + sumx [ j + 1 ] ; if ( sum1 > sum2 ) sumx [ j ] = sum1 ; else sumx [ j ] = sum2 ; } } return sumx [ 0 ] ; } int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; int i , j ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & arr [ i ] [ j ] ) ; } } unsigned long long x = sum ( ) ; printf ( \"%llu\n\" , x ) ; } return 0 ; }", "label": 0, "id": 2232}
{"input": "int max ( int b [ ] , int a ) ; int main ( ) { int i , j , k , mx , l , n , b [ 100 ] , r , count = 0 ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & r ) ; if ( r > 0 && r < 100 ) { for ( j = 1 ; j <= r ; j ++ ) { printf ( \"line %d\n\" , j ) ; k = j ; for ( l = 0 ; l < k ; l ++ ) { scanf ( \"%d\" , & b [ l ] ) ; } if ( k == 1 ) continue ; mx = max ( b , l ) ; count = count + mx ; } printf ( \"count= %d\" , count ) ; count = 0 ; } } return 0 ; } int max ( int b [ ] , int a ) { int mx ; int i ; mx = b [ 0 ] ; for ( i = 0 ; i < a ; i ++ ) { if ( mx < b [ i ] ) mx = b [ i ] ; } return mx ; }", "label": 1, "id": 10672}
{"input": "int count ( int [ 100000 ] , int ) ; int fact ( int ) ; int main ( ) { int a [ 100000 ] ; int size ; int t , i , c ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & size ) ; for ( i = 0 ; i < size ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; c = count ( a , size ) ; printf ( \"%d\" , c ) ; } return 0 ; } int count ( int a [ 100000 ] , int n ) { int i , count = 1 , sum = 0 ; if ( n == 1 ) return 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i + 1 ] > a [ i ] ) { count ++ ; } else if ( count == 1 ) { sum = sum + 1 ; count = 1 ; } else { sum = sum + ( fact ( count ) / ( 2 * fact ( count - 2 ) ) ) + n ; count = 1 ; } } return sum ; } int fact ( int n ) { int i = 1 ; while ( n != 0 ) { i = i * n ; n -- ; } return i ; }", "label": 1, "id": 4455}
{"input": "int main ( void ) { int test ; scanf ( \"%d\" , & test ) ; while ( test -- ) { long int i , n , min , a [ 500001 ] , ans ; scanf ( \"%ld\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%ld\" , & a [ i ] ) ; if ( i == 0 ) min = a [ 0 ] ; if ( a [ i ] < min ) min = a [ i ] ; } ans = min * ( n - 1 ) ; printf ( \"%ld\n\" , ans ) ; } return 0 ; }", "label": 0, "id": 21022}
{"input": "int maxsum , arr [ 99 ] [ 99 ] , row ; void fsum ( int i , int j , int sum ) { sum += arr [ i ] [ j ] ; if ( i + 1 == row ) { if ( sum > maxsum ) maxsum = sum ; } else { fsum ( i + 1 , j , sum ) ; fsum ( i + 1 , j + 1 , sum ) ; } } int main ( void ) { int n , i , j ; scanf ( \"%d\" , & n ) ; while ( n -- ) { maxsum = 0 ; scanf ( \"%d\" , & row ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( \"%d\" , & arr [ i ] [ j ] ) ; fsum ( 0 , 0 , 0 ) ; printf ( \"%d\n\" , maxsum ) ; } return 0 ; }", "label": 2, "id": 17292}
{"input": "int gcd ( int a , int b ) { if ( b % a == 0 ) return ( a ) ; else return ( gcd ( b % a , a ) ) ; } int main ( ) { int a , b , t , hcf , lcm ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( \"%d %d\" , hcf , lcm ) ; printf ( \"\n\" ) ; } return 0 ; }", "label": 1, "id": 6101}
{"input": "int main ( void ) { long int i , t , a , b , j , max , s , gcd ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld%ld\" , & a , & b ) ; max = ( a > b ) ? a : b ; while ( 1 ) { if ( max % a == 0 && max % b == 0 ) { break ; } ++ max ; } gcd = ( a * b ) / max ; printf ( \"%ld %ld\n\" , gcd , max ) ; } return 0 ; }", "label": 2, "id": 12978}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int m [ 100 ] ; int i , d , n , k ; scanf ( \"%d\" , & d ) ; for ( i = 1 ; i <= d * ( d + 1 ) / 2 ; i ++ ) scanf ( \"%d\" , & m [ i ] ) ; int sum = 0 ; while ( d ) { k = 0 ; for ( i = ( ( d * d - d + 2 ) / 2 ) ; i <= ( d * ( d + 1 ) / 2 ) ; i ++ ) { if ( m [ i ] > k ) k = m [ i ] ; } sum = sum + k ; d -- ; if ( d == 1 ) break ; } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 3, "id": 21721}
{"input": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { long long int i , n , a [ 10 ] , min = 0 ; scanf ( \"%lld\" , & n ) ; a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & a [ i ] ) ; } min = a [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%lld\n\" , min * ( n - 1 ) ) ; } return 0 ; }", "label": 3, "id": 14159}
{"input": "int main ( ) { int n , a , b , i , gcd , lcm ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d%d\" , & a , & b ) ; for ( i = 1 ; i <= a && i <= b ; i ++ ) { if ( a % i == 0 && b % i == 0 ) gcd = i ; } lcm = ( int ) ( a * b ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 4512}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j ; int temp1 , temp2 ; int * * a ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%d\" , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { temp1 = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; temp2 = a [ i ] [ j + 1 ] + a [ i - 1 ] [ j ] ; a [ i - 1 ] [ j ] = max ( temp1 , temp2 ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; t -- ; } return 0 ; }", "label": 0, "id": 399}
{"input": "int min ( int * A , int size ) ; void scan ( int * A , int size ) ; int main ( ) { int i , T , N , * A ; long long int m ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d\" , & N ) ; A = ( int * ) malloc ( N * sizeof ( int ) ) ; scan ( A , N ) ; m = min ( A , N ) ; m *= N - 1 ; printf ( \"%d\n\" , m ) ; free ( A ) ; } return 0 ; } int min ( int * A , int size ) { int i , min = A [ 0 ] ; for ( i = 1 ; i < size ; i ++ ) { if ( min > A [ i ] ) { min = A [ i ] ; } } return min ; } void scan ( int * A , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) { scanf ( \"%d\" , A + i ) ; } }", "label": 0, "id": 10015}
{"input": "int main ( ) { int t , n , i , k , sum ; scanf ( \"%d\" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; scanf ( \"%d\" , & a [ 0 ] ) ; i = 1 ; k = a [ 0 ] ; while ( i < n ) { scanf ( \"%d\" , & a [ i ] ) ; if ( a [ i ] > k ) { sum = sum + k ; i ++ ; } else { sum = sum + a [ i ] ; k = a [ i ] ; i ++ ; } } printf ( \"%d\n\" , sum ) ; } return 0 ; }", "label": 1, "id": 3927}
{"input": "int gcd_ab ( int , int ) ; int main ( ) { int a , b , t , i ; int gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d%d\" , & a , & b ) ; gcd = gcd_ab ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( \"%d\\t%d\n\" , gcd , lcm ) ; } } int gcd_ab ( int a , int b ) { if ( b == 0 ) return a ; else return gcd_ab ( b , a % b ) ; }", "label": 1, "id": 13167}
{"input": "int main ( ) { long int i , l , m , n , max , t , a [ 110 ] [ 110 ] ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( l = 1 ; l <= n ; l ++ ) { for ( m = 1 ; m <= l ; m ++ ) { a [ l ] [ m ] = 0 ; } } for ( l = 1 ; l <= n ; l ++ ) { for ( m = 1 ; m <= l ; m ++ ) { scanf ( \"%ld\" , & a [ l ] [ m ] ) ; } } for ( l = 1 ; l <= n ; l ++ ) { for ( m = 1 ; m <= l ; m ++ ) { if ( a [ l - 1 ] [ m ] > a [ l - 1 ] [ m - 1 ] ) { a [ l ] [ m ] = a [ l ] [ m ] + a [ l - 1 ] [ m ] ; } else a [ l ] [ m ] = a [ l ] [ m ] + a [ l - 1 ] [ m - 1 ] ; } } max = a [ n ] [ 1 ] ; for ( l = 1 ; l <= m ; l ++ ) { if ( max < a [ n ] [ l ] ) { max = a [ n ] [ l ] ; } } printf ( \"%ld\n\" , max ) ; } return 0 ; }", "label": 0, "id": 21151}
{"input": "int main ( ) { int t , n , i , j , s , s1 , k , a [ 100 ] [ 100 ] = { 0 } ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { s = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; s1 = a [ i ] [ j + 1 ] + a [ i - 1 ] [ j ] ; if ( s >= s1 ) { a [ i - 1 ] [ j ] = s ; } else { a [ i - 1 ] [ j ] = s1 ; } } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 6819}
{"input": "int main ( ) { int t , n , i , j ; int a [ 100 ] [ 100 ] ; int sum [ 100 ] [ 100 ] ; scanf ( \"%d\" , & t ) ; scanf ( \"%d\" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } sum [ 1 ] [ 1 ] = a [ 1 ] [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( j == 1 ) { sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else { if ( sum [ i - 1 ] [ j ] >= sum [ i - 1 ] [ j - 1 ] ) sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + a [ i ] [ j ] ; else { sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; } } } } int sum1 = 0 ; for ( i = n ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { if ( sum1 < sum [ i ] [ j ] ) { sum1 = sum [ i ] [ j ] ; } } } printf ( \"%d\" , sum1 ) ; return 0 ; }", "label": 3, "id": 3303}
{"input": "int main ( void ) { long long int arr [ 50001 ] , i , test , n , min ; scanf ( \"%lld\" , & test ) ; while ( test -- ) { scanf ( \"%lld\" , & n ) ; min = 999999999 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & arr [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( min > arr [ i ] ) { min = arr [ i ] ; } } printf ( \"%lld\n\" , ( n - 1 ) * min ) ; } return 0 ; }", "label": 0, "id": 7454}
{"input": "int main ( ) { int i = 0 , j = 0 , n = 0 , t = 0 ; int a [ MAX ] [ MAX ] ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = t - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + 1 ] [ j ] > a [ i + 1 ] [ j + 1 ] ) ? ( a [ i + 1 ] [ j ] ) : ( a [ i + 1 ] [ j + 1 ] ) ) ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 0, "id": 7662}
{"input": "int arr [ 100001 ] ; int main ( ) { long int i , j , k , n , t , a ; scanf ( \"%ld\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%ld\" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( \"%d\" , & arr [ j ] ) ; } a = arr [ 0 ] ; for ( k = 1 ; k < n ; k ++ ) { if ( a > arr [ k ] ) { a = arr [ k ] ; } } printf ( \"%d\n\" , ( ( n - 1 ) * a ) ) ; } }", "label": 0, "id": 18361}
{"input": "int GCD ( int a , int b ) ; int main ( void ) { int T ; int lcm , gcd ; int a , b ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = ( ( long long ) ( a * b ) ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; } int GCD ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) return GCD ( a - b , b ) ; else return GCD ( b - a , a ) ; }", "label": 1, "id": 10149}
{"input": "int mat [ 100 ] [ 100 ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == 1 ) return mat [ 0 ] [ 0 ] ; for ( k = x - 2 ; k >= 0 ; k -- ) { for ( l = 0 ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + 1 ] [ l ] , mat [ k + 1 ] [ l + 1 ] ) ; } } return mat [ 0 ] [ 0 ] ; } int main ( ) { int i , j , k , l , w ; scanf ( \"%d\" , & j ) ; int x ; for ( i = 0 ; i < j ; i ++ ) { scanf ( \"%d\" , & x ) ; for ( k = 0 ; k < x ; k ++ ) { for ( l = 0 ; l < k + 1 ; l ++ ) { scanf ( \"%d\" , & w ) ; mat [ k ] [ l ] = w ; } } printf ( \"%d\" , solve ( x ) ) ; } return 0 ; }", "label": 1, "id": 23600}
{"input": "int gcd ( int x , int y ) { if ( x == y ) return x ; if ( x > y ) return gcd ( x - y , y ) ; return gcd ( x , y - x ) ; } int lcm ( int x , int y ) { return ( ( x * y ) / gcd ( x , y ) ) ; } int main ( ) { int t , i , j , g , l , n ; scanf ( \"%d\" , & t ) ; n = t ; int a [ n ] [ 2 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 2 ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { g = gcd ( a [ i ] [ 0 ] , a [ i ] [ 1 ] ) ; l = lcm ( a [ i ] [ 0 ] , a [ i ] [ 1 ] ) ; printf ( \"%d %d\n\" , g , l ) ; } return 0 ; }", "label": 1, "id": 19758}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int r , i , j ; scanf ( \"%d\" , & r ) ; int a [ r ] [ r ] ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { scanf ( \"%d\" , & a [ i ] [ j ] ) ; } } for ( i = r - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + 1 ] ) { a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j ] ; } else a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + a [ i - 1 ] [ j + 1 ] ; } } printf ( \"%d\n\" , a [ 0 ] [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 1373}
{"input": "int hcf ( int a , int b ) { if ( a % b == 0 ) return b ; else return hcf ( b , a % b ) ; } int main ( ) { int t , d , lcm ; long int a , b , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%li%li\" , & a , & b ) ; if ( a > b ) gcd = hcf ( a , b ) ; else gcd = hcf ( b , a ) ; lcm = ( ( a * b ) / gcd ) ; printf ( \"%li %lli\n\" , gcd , lcm ) ; } return 0 ; }", "label": 1, "id": 20293}
{"input": "int main ( ) { int n1 , n2 , i , j , n , gcd , lcm ; scanf ( \"%d\" , & n ) ; for ( j = 1 ; j <= n ; j ++ ) { scanf ( \"%d%d\" , & n1 , & n2 ) ; for ( i = 1 ; i <= n1 && i <= n2 ; ++ i ) if ( n1 % i == 0 && n2 % i == 0 ) gcd = i ; lcm = ( n1 * n2 ) / gcd ; printf ( \"%d %d\n\" , gcd , lcm ) ; } return 0 ; }", "label": 2, "id": 22697}
{"input": "int main ( ) { int v ; long long int i , z , a , c , b , o , m , n , d ; int flag = 0 , fl = 0 ; scanf ( \"%d\" , & v ) ; while ( v -- ) { scanf ( \"%lld %lld\" , & a , & c ) ; b = a ; d = c ; i = 2 ; o = 1 ; while ( 1 ) { abc : flag = 0 , fl = 0 ; if ( a % i == 0 ) { a = a / i ; m = i ; flag = 1 ; } else { m = 1 ; } if ( c % i == 0 ) { c = c / i ; n = i ; fl = 1 ; } else { n = 1 ; } if ( m == n ) { o = o * m ; } if ( ( a % i != 0 && c % i != 0 ) && ( a != 1 || c != 1 ) ) { i ++ ; goto abc ; } if ( a == 1 || c == 1 ) break ; } i = 2 ; z = 1 ; while ( 1 ) { cde : flag = 0 , fl = 0 ; if ( b % i == 0 ) { b = b / i ; m = i ; flag = 1 ; } else { m = 1 ; } if ( d % i == 0 ) { d = d / i ; n = i ; fl = 1 ; } else { n = 1 ; } if ( m == n ) { z = z * m ; } else if ( fl == 1 ) { z = z * n ; } else if ( flag = 1 ) { z = z * m ; } if ( ( b % i != 0 && d % i != 0 ) && ( b != 1 || d != 1 ) ) { i ++ ; goto cde ; } if ( n == 1 && m == 1 ) break ; } printf ( \"\n%lld %lld\n\" , o , z ) ; } return 0 ; }", "label": 2, "id": 21535}
{"input": "int main ( ) { int t , a , b , x , y , z , lcm , gcd ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; x = a ; y = b ; while ( y != 0 ) { z = y ; y = x % y ; x = z ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( \"%d \n\" , gcd ) ; printf ( \"%d \n\" , lcm ) ; } return 0 ; }", "label": 1, "id": 14074}
{"input": "int main ( ) { long int N , arr [ size ] , min ; int j , i , T , result [ 10 ] ; scanf ( \"%d\" , & T ) ; for ( j = 0 ; j < T ; j ++ ) { scanf ( \"%ld\" , & N ) ; for ( i = 0 ; i < N ; i ++ ) scanf ( \"%ld\" , & arr [ i ] ) ; min = arr [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } result [ j ] = min * ( N - 1 ) ; } for ( i = 0 ; i < T ; i ++ ) printf ( \"%d\n\" , result [ i ] ) ; return 0 ; }", "label": 0, "id": 26666}
{"input": "int main ( ) { int n , i , t , a ; long int min = 1000000000 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a ) ; if ( min > a ) min = a ; } min *= ( n - 1 ) ; printf ( \"%ld\n\" , min ) ; } return 0 ; }", "label": 0, "id": 1330}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; int g = gcd ( a , b ) ; int p ; p = ( a * b ) / g ; printf ( \"%d %d\" , g , p ) ; printf ( \"\n\" ) ; } return 0 ; } int gcd ( int a , int b ) { int r ; while ( b != 0 ) { r = a % b ; a = b ; b = r ; } return a ; }", "label": 1, "id": 10704}
{"input": "int main ( ) { int t , a , b , p , q , lcm , gcd , r , i ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; p = a ; q = b ; while ( b != 0 ) { r = a % b ; a = b ; b = r ; } gcd = a ; lcm = ( p * q ) / gcd ; printf ( \"lcm=%d gcd=%d\" , lcm , gcd ) ; } }", "label": 1, "id": 16694}
{"input": "int largestSum ( int i , int j , int n , int * * numbers , int * * sums ) { if ( sums [ i ] [ j ] != 0 ) { return sums [ i ] [ j ] ; } if ( i == n - 1 ) { sums [ i ] [ j ] = numbers [ i ] [ j ] ; return sums [ i ] [ j ] ; } int temp1 = largestSum ( i + 1 , j , n , numbers , sums ) ; int temp2 = largestSum ( i + 1 , j + 1 , n , numbers , sums ) ; if ( temp1 > temp2 ) { sums [ i ] [ j ] = numbers [ i ] [ j ] + temp1 ; } else { sums [ i ] [ j ] = numbers [ i ] [ j ] + temp2 ; } return sums [ i ] [ j ] ; } int main ( void ) { int * * numbers ; int * * sums ; int i , j ; numbers = ( int * * ) malloc ( 100 * sizeof ( int * ) ) ; sums = ( int * * ) malloc ( 100 * sizeof ( int * ) ) ; for ( i = 0 ; i < 100 ; ++ i ) { numbers [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; sums [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; } int T ; scanf ( \"%d\" , & T ) ; int t ; for ( t = 0 ; t < T ; t ++ ) { int noOfLines ; scanf ( \"%d\" , & noOfLines ) ; for ( i = 0 ; i < noOfLines ; ++ i ) { int temp ; for ( j = 0 ; j < i + 1 ; ++ j ) { sums [ i ] [ j ] = 0 ; scanf ( \"%d\" , & temp ) ; numbers [ i ] [ j ] = temp ; } } int answer = largestSum ( 0 , 0 , noOfLines , numbers , sums ) ; printf ( \"%d \n\" , answer ) ; } free ( sums ) ; free ( numbers ) ; }", "label": 0, "id": 20687}
{"input": "int a [ 50000 ] ; int main ( ) { int n , t , i ; scanf ( \"%d\" , & n ) ; while ( n -- ) { int key ; scanf ( \"%d\" , & t ) ; i = 0 ; int j ; while ( i < t ) { scanf ( \"%d\" , & j ) ; if ( j != 0 ) { a [ i ] = j ; i ++ ; } } key = a [ 0 ] ; for ( i = 1 ; i < t ; i ++ ) { if ( a [ i ] < key ) key = a [ i ] ; } long long int k ; k = key * ( t - 1 ) ; printf ( \"%lld\n\" , k ) ; } return 0 ; }", "label": 0, "id": 8748}
{"input": "int main ( ) { short t ; long flag , n , a [ 100000 ] , l1 , l2 ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { flag = 1 ; scanf ( \"%ld\" , & n ) ; for ( l1 = 0 ; l1 < n ; l1 ++ ) scanf ( \"%ld\" , & a [ l1 ] ) ; for ( l2 = 0 ; l2 < n - 1 ; l2 ++ ) { flag ++ ; if ( a [ l2 + 1 ] >= a [ l2 ] ) flag ++ ; } printf ( \"%ld\n\" , flag ) ; t -- ; } return 0 ; }", "label": 1, "id": 10251}
{"input": "int main ( ) { int t , n , i , j , sum , m , k ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { sum = 0 ; scanf ( \"%d\" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; while ( n != 1 ) { j = 0 ; if ( a [ j ] >= a [ j + 1 ] ) { sum += a [ j + 1 ] ; for ( m = j ; m < n - 1 ; m ++ ) a [ m ] = a [ m + 1 ] ; } else { sum += a [ j ] ; for ( m = j + 1 ; m < n - 1 ; m ++ ) a [ m ] = a [ m + 1 ] ; } n -- ; } printf ( \"\n%d\" , sum ) ; t -- ; } return 0 ; }", "label": 2, "id": 21492}
{"input": "int gcd ( int m , int n ) { int c ; while ( n > 0 ) { c = m % n ; m = n ; n = c ; } printf ( \"%d\" , n ) ; return m ; } int main ( ) { int a , b ; int num ; int m , n ; int result = 0 , lcm ; scanf ( \"%d\" , & num ) ; while ( num > 0 ) { scanf ( \"%d%d\" , & a , & b ) ; m = a ; n = b ; if ( m > n ) { result = gcd ( m , n ) ; } else { result = gcd ( n , m ) ; } lcm = ( a * b ) / result ; printf ( \"%d  %d\n\" , result , lcm ) ; num -- ; } return 0 ; }", "label": 1, "id": 7060}
{"input": "int maxint ( int a , int b ) { if ( a > b ) { return a ; } else return b ; } int main ( ) { int t , n , i , j , a [ 100 ] [ 100 ] , max , maxsum ; scanf ( \"%d\" , & t ) ; while ( t != 0 ) { scanf ( \"%d\" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) scanf ( \"%d \n \" , & a [ i ] [ j ] ) ; } for ( int i = n - 1 ; i >= 1 ; i -- ) { for ( int j = 0 ; j < i ; j ++ ) { max = maxint ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] + max ; } } int maxsum = a [ 0 ] [ 0 ] ; printf ( \"%d is the max sum of traingle \" , maxsum ) ; t -- ; } return 0 ; }", "label": 1, "id": 13534}
{"input": "int main ( ) { int n , i , a , b , c , d ; scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d %d\" , & a , & b ) ; c = a ; d = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( \"%d %d\n\" , b , c * d / b ) ; } return 0 ; }", "label": 1, "id": 9781}
{"input": "main ( ) { int t , n , i ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; int a [ n ] , min ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ] ) ; min = a [ 0 ] ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( \"%d\" , min * ( n - 1 ) ) ; } }", "label": 1, "id": 25018}
{"input": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int n ; int min = 1000000 ; scanf ( \"%d\" , & n ) ; int A [ n ] ; int i , j , res ; for ( i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & A [ i ] ) ; } for ( j = 0 ; j < n ; j ++ ) { if ( A [ j ] <= min ) { min = A [ j ] ; } } res = min * ( n - 1 ) ; printf ( \"%d\n\" , res ) ; } return 0 ; }", "label": 0, "id": 12024}
{"input": "int main ( ) { int t , n , no , i , j , k , a ; scanf ( \"%d\" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( \"%d\" , & n ) ; no = n * ( n + 1 ) / 2 ; int arr [ no ] ; for ( j = 0 ; j < no ; j ++ ) scanf ( \"%d\" , & arr [ j ] ) ; for ( j = n - 1 ; j > 0 ; j -- ) { a = ( j * ( j + 1 ) / 2 ) - j ; k = j ; for ( k = 0 ; k < j ; k ++ ) { if ( ( arr [ a + k ] + arr [ a + j + k + 1 ] ) > ( arr [ a + k ] + arr [ a + j + k ] ) ) arr [ a + k ] = arr [ a + k ] + arr [ a + j + k + 1 ] ; else arr [ a + k ] = arr [ a + k ] + arr [ a + j + k ] ; } } printf ( \"%d\" , arr [ 0 ] ) ; } return 0 ; }", "label": 1, "id": 333}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { long long int t , a , b , min , max , lcm , hcf ; scanf ( \"%lld\" , & t ) ; while ( t -- ) { scanf ( \"%lld%lld\" , & a , & b ) ; max = ( a > b ) ? a : b ; min = ( a < b ) ? a : b ; hcf = gcd ( max , min ) ; lcm = ( a * b ) / hcf ; printf ( \"%lld%lld\n\" , hcf , lcm ) ; } return 0 ; } long long int gcd ( long long int a , long long int b ) { if ( a % b == 0 ) { return b ; } else { return gcd ( b , a % b ) ; } }", "label": 1, "id": 18605}
{"input": "void shell_sort ( int arr [ ] , int length ) ; int main ( ) { int a [ 100000 ] , t , n , i , s ; scanf ( \"%d\" , & t ) ; if ( t >= 1 && t <= 10 ) { while ( t -- ) { s = 0 ; scanf ( \"%d\" , & n ) ; if ( n >= 1 && n <= 50000 ) { for ( i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & a [ i ] ) ; shell_sort ( a , n ) ; for ( i = 0 ; i < n - 1 ; i ++ ) s += a [ 0 ] ; printf ( \"%d\n\" , s ) ; } } } return 0 ; } void shell_sort ( int arr [ ] , int length ) { int i , gap , j , key ; for ( gap = ( length / 2 ) ; gap > 0 ; gap /= 2 ) { for ( i = gap ; i <= length - 1 ; i ++ ) { key = arr [ i ] ; for ( j = i ; j >= gap && arr [ j - gap ] > key ; j -= gap ) arr [ j ] = arr [ j - gap ] ; arr [ j ] = key ; } } }", "label": 2, "id": 10875}
{"input": "void func ( int a , int b ) ; void maxmin ( int a , int b , int c ) ; void merge ( int a , int b ) ; int s = 0 , c = 0 , row ; int b [ 505000 ] ; int a [ 5050 ] ; int main ( ) { int n , t , flag ; scanf ( \"%d\" , & n ) ; while ( n > 0 ) { scanf ( \"%d\" , & row ) ; t = ( row * ( row + 1 ) ) / 2 ; for ( flag = 1 ; flag <= t ; flag ++ ) scanf ( \"%d\" , & a [ flag ] ) ; for ( ; flag < 5050 ; flag ++ ) a [ flag ] = - 999 ; func ( 1 , 1 ) ; int yu , x ; yu = 1 , x = c ; merge ( yu , x ) ; printf ( \"%d\" , b [ x ] ) ; n -- ; } return 0 ; } void func ( int i , int r ) { s += a [ i ] ; if ( a [ i + r ] != - 999 ) { func ( ( i + r ) , ( r + 1 ) ) ; func ( ( i + r + 1 ) , ( r + 1 ) ) ; } if ( r == row ) { c ++ ; b [ c ] = s ; } s = s - a [ i ] ; } void maxmin ( int p , int q , int r ) { int temp = 0 ; if ( b [ p ] > b [ q + 1 ] ) { temp = b [ p ] ; b [ p ] = b [ q + 1 ] ; b [ q + 1 ] = temp ; } if ( b [ q ] > b [ r ] ) { temp = b [ q ] ; b [ q ] = b [ r ] ; b [ r ] = temp ; } } void merge ( int p , int r ) { int q ; if ( p < r ) { q = ( p + r ) / 2 ; merge ( p , q ) ; merge ( q + 1 , r ) ; maxmin ( p , q , r ) ; } }", "label": 3, "id": 12615}
{"input": "int matrix [ 100 ] [ 100 ] , cache [ 100 ] [ 100 ] , n ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } long long int solve ( int i , int j ) { long long int t1 , t2 , t ; if ( i == n ) { return 0 ; } if ( cache [ i ] [ j ] < 99999 ) { return cache [ i ] [ j ] ; } t1 = solve ( i + 1 , j ) ; t2 = solve ( i + 1 , j + 1 ) ; t = max ( t1 , t2 ) + matrix [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int test , i , j , t ; long long int ans ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { cache [ i ] [ j ] = 99999 ; } } scanf ( \"%d\" , & test ) ; for ( t = 0 ; t < test ; t ++ ) { scanf ( \"%d\" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( \"%d\" , & matrix [ i ] [ j ] ) ; } } ans = solve ( 0 , 0 ) ; printf ( \"%lld\n\" , ans ) ; } return 0 ; }", "label": 1, "id": 11853}
