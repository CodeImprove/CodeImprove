{"input": "int lcm ( int a , int b ) { int max = ( a > b ) ? a : b ; while ( <int> ) { if ( max % a == <int> && max % b == <int> ) { return max ; } max ++ ; } } int gcd ( int a , int b ) { int t ; int max = ( a > b ) ? a : b ; while ( <int> ) { if ( max % a == <int> && max % b == <int> ) { t = ( a * b ) / max ; return t ; } max ++ ; } } int main ( ) { int x , i ; scanf ( <str> , & x ) ; int g [ x ] , h [ x ] , t = <int> ; while ( x -- ) { int a , b ; scanf ( <str> , & a , & b ) ; g [ t ] = lcm ( a , b ) ; h [ t ] = gcd ( a , b ) ; t ++ ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , h [ i ] , g [ i ] ) ; return <int> ; }", "label": 2, "id": 0}
{"input": "int main ( void ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i == <int> ) { } else { if ( j == <int> ) { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } else { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } } } } int m ; m = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j ] > m ) m = a [ n - <int> ] [ j ] ; } printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 1}
{"input": "void find_sum ( int arr [ ] [ <int> ] , int n ) { int i ; if ( n == <int> ) return ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ n ] [ i ] > arr [ n ] [ i + <int> ] ) arr [ n - <int> ] [ i ] += arr [ n ] [ i ] ; else arr [ n - <int> ] [ i ] += arr [ n ] [ i + <int> ] ; } find_sum ( arr , n - <int> ) ; } int main ( ) { int t , n , arr [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( j = <int> ; j <= n ; j ++ ) arr [ n ] [ j ] = <int> ; find_sum ( arr , n ) ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2}
{"input": "int main ( ) { int i , j , n , c , t , ans ; int A [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { ans = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & A [ j ] ) ; } j = <int> ; c = <int> ; while ( j < n ) { if ( A [ j ] < A [ j + <int> ] ) { c ++ ; } else { ans = ans + ( c * ( c - <int> ) / <int> ) ; c = <int> ; } j ++ ; } printf ( <str> , ans + n ) ; } return <int> ; }", "label": 0, "id": 3}
{"input": "int n = <int> ; int main ( void ) { int t , i , test ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & t ) ; n = t * ( t + <int> ) / <int> ; int arr [ <int> ] = { <int> } ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; printf ( <str> , fun ( arr , <int> ) + arr [ <int> ] ) ; } return <int> ; } int fun ( int arr [ ] , int k ) { if ( <int> * k > n ) return <int> ; else return max ( arr [ <int> * k ] + fun ( arr , <int> * k ) , arr [ <int> * k + <int> ] + fun ( arr , <int> * k + <int> ) ) ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 1, "id": 4}
{"input": "int main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned long long int n , i , sum = <int> , k ; scanf ( <str> , & n ) ; scanf ( <str> , & k ) ; for ( i = <int> ; i <= n ; i ++ ) { unsigned long long int a [ n ] , j , max = - <int> ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( max < a [ j ] ) max = a [ j ] ; } sum += max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int N ; while ( T -- ) { scanf ( <str> , & N ) ; int i , arr [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int cost = <int> , j ; for ( j = <int> ; j < N ; j ++ ) { if ( arr [ i ] > arr [ i + <int> ] ) { cost = cost + arr [ i + <int> ] ; } else { cost = cost + arr [ i ] ; } } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 6}
{"input": "main ( ) { int t , i , size , min , j ; scanf ( <str> , & t ) ; int a [ t ] ; for ( i = <int> ; i < t ; i ++ ) { int size , arr ; scanf ( <str> , & size ) ; scanf ( <str> , & arr ) ; min = arr ; for ( j = <int> ; j < size ; j ++ ) { scanf ( <str> , & arr ) ; if ( min > arr ) min = arr ; } a [ i ] = min * ( size - <int> ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , a [ i ] ) ; } }", "label": 1, "id": 7}
{"input": "int n , a [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] ; int <unk> ( int i , int j ) { if ( i < <int> ) return <int> ; if ( cache [ i ] [ j ] != - <int> ) return cache [ i ] [ j ] ; int path1 = <int> ; if ( j != <int> ) path1 = <unk> ( i - <int> , j - <int> ) ; int path2 = <unk> ( i - <int> , j ) ; int max = ( path1 > path2 ? path1 : path2 ) ; cache [ i ] [ j ] = a [ i ] [ j ] + max ; return a [ i ] [ j ] + max ; } int main ( void ) { int t , i , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; k = <int> ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) cache [ i ] [ j ] = - <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { j = <unk> ( n - <int> , i ) ; if ( k < j ) k = j ; } printf ( <str> , k ) ; } return <int> ; }", "label": 0, "id": 8}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int lower_triangle [ <int> ] [ <int> ] ; int no_of_rows , i , j , max_value = <int> ; int tests ; scanf ( <str> , & tests ) ; while ( tests -- ) { scanf ( <str> , & no_of_rows ) ; for ( i = <int> ; i < no_of_rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & lower_triangle [ i ] [ j ] ) ; } for ( i = <int> ; i < no_of_rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { lower_triangle [ i ] [ j ] = lower_triangle [ i ] [ j ] + lower_triangle [ i - <int> ] [ j ] ; } else { lower_triangle [ i ] [ j ] = lower_triangle [ i ] [ j ] + max ( lower_triangle [ i - <int> ] [ j ] , lower_triangle [ i - <int> ] [ j - <int> ] ) ; } } } for ( j = <int> ; j < no_of_rows ; j ++ ) { if ( lower_triangle [ no_of_rows - <int> ] [ j ] > max_value ) max_value = lower_triangle [ no_of_rows - <int> ] [ j ] ; } printf ( <str> , max_value ) ; } return <int> ; }", "label": 1, "id": 9}
{"input": "int main ( ) { int t , i , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int len , array [ <int> ] , ans = <int> ; int j ; scanf ( <str> , & len ) ; for ( j = <int> ; j < len ; j ++ ) scanf ( <str> , & array [ j ] ) ; for ( j = <int> ; j < len - <int> ; j ++ ) { if ( array [ j ] > array [ j + <int> ] ) { ans += array [ j + <int> ] ; for ( k = j ; k < len - <int> ; k ++ ) array [ k ] = array [ k + <int> ] ; } else { ans += array [ j ] ; for ( k = j + <int> ; k < len - <int> ; k ++ ) array [ k ] = array [ k + <int> ] ; } j -- ; len -- ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 10}
{"input": "int rem [ <int> ] [ <int> ] ; int sum ( int a [ ] [ <int> ] , int i , int j , int n ) { int sum1 ; int sum2 ; int ans ; if ( i >= n ) return <int> ; if ( rem [ i + <int> ] [ j ] >= <int> ) { sum1 = a [ i ] [ j ] + rem [ i + <int> ] [ j ] ; } else sum1 = a [ i ] [ j ] + sum ( a , i + <int> , j , n ) ; if ( rem [ i + <int> ] [ j + <int> ] >= <int> ) { sum2 = a [ i ] [ j ] + rem [ i + <int> ] [ j + <int> ] ; } else sum2 = a [ i ] [ j ] + sum ( a , i + <int> , j + <int> , n ) ; ans = ( sum1 > sum2 ) ? sum1 : sum2 ; rem [ i ] [ j ] = ans ; return ans ; } int main ( ) { int n ; int i ; int j ; int a [ <int> ] [ <int> ] ; int t ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) rem [ i ] [ j ] = - <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> , sum ( a , <int> , <int> , n ) ) ; } return <int> ; }", "label": 0, "id": 11}
{"input": "int main ( ) { int a , i ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { int b , c , j , gcd , lcm ; scanf ( <str> , & b , & c ) ; for ( j = <int> ; j < b || j < c ; j ++ ) { if ( b % j == <int> && c % j == <int> ) gcd = j ; } lcm = c * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 12}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int size ; scanf ( <str> , & size ) ; int i , j ; int arr [ size ] [ size ] ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = size - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { if ( arr [ i + <int> ] [ j + <int> ] > arr [ i + <int> ] [ j ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 13}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , i , j , n , T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 14}
{"input": "int main ( ) { int t , i , j , n ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 15}
{"input": "int arraysum ( int array [ ] [ <int> ] , int i , int j , int n ) ; main ( ) { int t = <int> ; scanf ( <str> , & t ) ; int total = <int> ; while ( t > <int> ) { int n = <int> ; scanf ( <str> , & n ) ; int i = <int> , j = <int> ; int array [ n ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; } total = arraysum ( array , <int> , <int> , n ) ; printf ( <str> , total ) ; t -- ; } } int arraysum ( int array [ ] [ <int> ] , int i , int j , int n ) { int sum1 = <int> , sum2 = <int> ; if ( i == n - <int> || j == n - <int> ) return array [ i ] [ j ] ; else { sum1 = array [ i ] [ j ] + arraysum ( array , i + <int> , j , n ) ; sum2 = array [ i ] [ j ] + arraysum ( array , i + <int> , j + <int> , n ) ; if ( sum1 > sum2 ) return sum1 ; else return sum2 ; } }", "label": 2, "id": 16}
{"input": "int small ( unsigned int temp [ ] , int t ) { int i , j , k ; k = temp [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { if ( k > temp [ i ] && temp [ i ] != <int> ) { k = temp [ i ] ; } } return k ; } void re ( unsigned int temp [ ] , int t ) { int i , j , k ; for ( i = <int> ; i < t ; i ++ ) { k = temp [ i ] ; for ( j = i + <int> ; j < t ; j ++ ) { if ( k == temp [ j ] ) { temp [ j ] = <int> ; } } } } int main ( ) { unsigned int n , s , temp [ <int> ] ; int i , j , k , t ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & t ) ; t = ( t * t + t ) / <int> ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & temp [ j ] ) ; } re ( temp , t ) ; k = small ( temp , t ) ; int sum = <int> ; for ( j = <int> ; j < t ; j ++ ) { sum = sum + temp [ j ] ; } sum = sum - k ; printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 17}
{"input": "int main ( ) { int n1 , n2 , prod , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & n1 , & n2 ) ; prod = n1 * n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; if ( n2 > n1 ) n2 = n2 - n1 ; } gcd = n1 ; lcm = prod / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return ( <int> ) ; }", "label": 1, "id": 18}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , T ; scanf ( <str> , & T ) ; for ( t = <int> ; t < T ; t ++ ) { int N ; scanf ( <str> , & N ) ; long long int A [ N ] [ N ] ; int i , j ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } long long int sum [ <int> ] [ <int> ] = { <int> } ; sum [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { sum [ i ] [ <int> ] = A [ i ] [ <int> ] + sum [ i - <int> ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { sum [ i ] [ j ] = max ( sum [ i - <int> ] [ j ] , sum [ i - <int> ] [ j - <int> ] ) + A [ i ] [ j ] ; } } long long int max = sum [ N - <int> ] [ <int> ] ; for ( i = <int> ; i < N - <int> ; i ++ ) { if ( sum [ N - <int> ] [ i ] > max ) max = sum [ N - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 19}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( <str> ) ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , num1 , num2 , gcd ) ; printf ( <str> , num1 , num2 , lcm ) ; return <int> ; }", "label": 1, "id": 20}
{"input": "int main ( ) { int * * o , max ; int t , r , x , i , j , s ; scanf ( <str> , & t ) ; while ( t -- ) { max = - <int> ; scanf ( <str> , & r ) ; o = ( int * * ) malloc ( ( r + <int> ) * sizeof ( int * ) ) ; for ( i = <int> ; i <= r ; i ++ ) { s = ( r + <int> ) * sizeof ( int ) ; o [ i ] = ( int * ) malloc ( s ) ; memset ( o [ i ] , <int> , s ) ; } for ( i = <int> ; i <= r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & x ) ; o [ i ] [ j ] = x + ( o [ i - <int> ] [ j - <int> ] > o [ i - <int> ] [ j ] ? o [ i - <int> ] [ j - <int> ] : o [ i - <int> ] [ j ] ) ; } } for ( j = <int> ; j <= r ; j ++ ) { if ( o [ r ] [ j ] > max ) max = o [ r ] [ j ] ; } for ( i = <int> ; i <= r ; i ++ ) free ( o [ i ] ) ; free ( o ) ; printf ( <str> , max ) ; } }", "label": 0, "id": 21}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] = { <int> } ; int n ; scanf ( <str> , & n ) ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int dp [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { dp [ i ] [ j ] = <int> ; } } dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; if ( n == <int> ) { printf ( <str> , a [ <int> ] [ <int> ] ) ; } else { for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { dp [ i ] [ j ] = max ( dp [ i ] [ j ] , a [ i ] [ j ] + dp [ i - <int> ] [ j ] ) ; dp [ n ] [ n ] = max ( dp [ n ] [ n ] , dp [ i ] [ j ] ) ; if ( j >= <int> ) { dp [ i ] [ j ] = max ( dp [ i ] [ j ] , a [ i ] [ j ] + dp [ i - <int> ] [ j - <int> ] ) ; dp [ n ] [ n ] = max ( dp [ n ] [ n ] , dp [ i ] [ j ] ) ; } } } printf ( <str> , dp [ n ] [ n ] ) ; } } }", "label": 0, "id": 22}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int size , * arr , min , i ; scanf ( <str> , & size ) ; arr = ( int * ) calloc ( size , sizeof ( int ) ) ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < size ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( <str> , min * ( long long int ) ( size - <int> ) ) ; } return <int> ; }", "label": 0, "id": 23}
{"input": "int main ( ) { long long int test , i , n , a [ <int> ] [ <int> ] , j , k ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k ] ; else if ( a [ j + <int> ] [ k ] <= a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k + <int> ] ; else a [ j ] [ k ] += a [ j + <int> ] [ k ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 24}
{"input": "int a [ <int> ] ; int b [ <int> ] ; int main ( ) { int n , r , i , j , max ; scanf ( <str> , & n ) ; while ( n -- ) { for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = <int> ; b [ i ] = <int> ; } scanf ( <str> , & r ) ; for ( i = <int> ; i <= r ; i ++ ) { if ( i % <int> ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & b [ j ] ) ; if ( j ) b [ j ] += ( ( a [ j ] > a [ j - <int> ] ) ? a [ j ] : a [ j - <int> ] ) ; else b [ j ] += a [ j ] ; } } else for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j ) a [ j ] += ( ( b [ j ] > b [ j - <int> ] ) ? b [ j ] : b [ j - <int> ] ) ; else a [ j ] += b [ j ] ; } } if ( ! ( r % <int> ) ) { max = a [ <int> ] ; while ( ( r -- ) - <int> ) { if ( a [ r - <int> ] > max ) max = a [ r - <int> ] ; } } else { max = b [ <int> ] ; while ( ( r -- ) - <int> ) { if ( b [ r - <int> ] > max ) max = b [ r - <int> ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 25}
{"input": "int main ( ) { int t , count = <int> , i ; unsigned long int a , b , gcd , lcm , min , max , p ; scanf ( <str> , & t ) ; while ( count <= t ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { min = a ; max = b ; } else { min = b ; max = a ; } while ( min != <int> ) { p = min ; min = max % min ; max = p ; } gcd = max ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; count ++ ; } return <int> ; }", "label": 1, "id": 26}
{"input": "long int lcm ( long int * a ) ; long int gcd ( long int * a ) ; int main ( ) { long int w , i , j , k , t , y , z , x ; long int a [ <int> ] ; scanf ( <str> , & w ) ; long int g [ w ] , l [ w ] ; for ( j = <int> ; j < w ; j ++ ) { for ( i = <int> ; i < <int> ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } g [ j ] = gcd ( a ) ; l [ j ] = a [ <int> ] * a [ <int> ] / g [ j ] ; } for ( j = <int> ; j < w ; j ++ ) { printf ( <str> , g [ j ] , l [ j ] ) ; } return ( <int> ) ; } long int gcd ( long int * a ) { long int i , t , y , z ; if ( ( a [ <int> ] % a [ <int> ] == <int> ) || ( a [ <int> ] % a [ <int> ] == <int> ) ) { if ( a [ <int> ] > a [ <int> ] ) { z = a [ <int> ] ; } else { z = a [ <int> ] ; } } else if ( a [ <int> ] < a [ <int> ] ) { for ( i = <int> ; i <= a [ <int> ] ; i ++ ) { t = a [ <int> ] % i ; y = a [ <int> ] % i ; if ( ( t == <int> ) && ( y == <int> ) ) { z = i ; } } } else if ( a [ <int> ] > a [ <int> ] ) { for ( i = <int> ; i <= a [ <int> ] ; i ++ ) { t = a [ <int> ] % i ; y = a [ <int> ] % i ; if ( ( t == <int> ) && ( y == <int> ) ) { z = i ; } } } else { z = a [ <int> ] ; } return ( z ) ; }", "label": 2, "id": 27}
{"input": "int main ( ) { int t , max [ <int> ] , i , j , a [ <int> ] [ <int> ] , temp1 , temp2 , max1 , n , temp3 ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) max [ i ] = <int> ; max1 = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { temp3 = max [ <int> ] ; max [ <int> ] += a [ i ] [ <int> ] ; } else { temp1 = temp3 + a [ i ] [ j ] ; temp3 = max [ j ] ; temp2 = temp3 + a [ i ] [ j ] ; if ( temp1 > temp2 ) max [ j ] = temp1 ; else max [ j ] = temp2 ; } } } for ( i = <int> ; i < n ; i ++ ) if ( max1 < max [ i ] ) max1 = max [ i ] ; printf ( <str> , max1 ) ; } return <int> ; }", "label": 0, "id": 28}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , i , j , test ; scanf ( <str> , & test ) ; while ( test > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i ] [ j + <int> ] > a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ? a [ i ] [ j ] + a [ i ] [ j + <int> ] : a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } test -- ; return <int> ; }", "label": 2, "id": 29}
{"input": "int n ; long int func ( int row , int col , int arr [ ] [ n ] ) { long int val1 , val2 , choose , temp ; if ( row >= n ) return <int> ; val1 = func ( row + <int> , col , arr ) ; val2 = func ( row + <int> , col + <int> , arr ) ; choose = ( ( val1 > val2 ) ? val1 : val2 ) ; temp = arr [ row ] [ col ] + choose ; return temp ; } int main ( ) { int t , i , j ; long int ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; ans = func ( <int> , <int> , arr ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 30}
{"input": "long gcd ( int a , int b ) ; int main ( ) { int t ; long n1 , n2 , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; g = gcd ( n1 , n2 ) ; printf ( <str> , g , ( n1 * n2 / g ) ) ; } return <int> ; } long gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 0, "id": 31}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , ar [ n ] , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ar [ i ] ) ; int min = ar [ <int> ] , ans ; for ( i = <int> ; i < n ; i ++ ) { if ( ar [ i ] < min ) min = ar [ i ] ; } ans = ( n - <int> ) * min ; printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 32}
{"input": "int main ( ) { int i , j , t , n , inp [ <int> ] [ <int> ] , dp [ <int> ] [ <int> ] , result ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & inp [ i ] [ j ] ) ; } dp [ <int> ] [ <int> ] = inp [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) dp [ i ] [ j ] = dp [ i - <int> ] [ j ] + inp [ i ] [ j ] ; else if ( j == i ) dp [ i ] [ j ] = dp [ i - <int> ] [ j - <int> ] + inp [ i ] [ j ] ; else dp [ i ] [ j ] = max ( dp [ i - <int> ] [ j - <int> ] , dp [ i - <int> ] [ j ] ) + inp [ i ] [ j ] ; } } result = dp [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( dp [ n - <int> ] [ i ] > result ) result = dp [ n - <int> ] [ i ] ; } printf ( <str> , result ) ; } }", "label": 0, "id": 33}
{"input": "int gcd ( int x , int y ) { if ( x == <int> ) return y ; else return gcd ( y % x , x ) ; } int lcm ( int x , int y ) { if ( x % y == <int> && x >= y ) return x ; else if ( x % y == <int> && x < y ) return y ; else return x * y ; } int main ( ) { int i , n , a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 34}
{"input": "int main ( ) { long long t , n , i , x , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; if ( x < min ) min = x ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 35}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , x , y , gcd , lcm , c ; scanf ( <str> , & a , & b ) ; a = x ; b = y ; while ( b != <int> ) { c = b ; b = a % b ; a = c ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 3, "id": 36}
{"input": "int main ( ) { long long int a [ <int> ] [ <int> ] , t , i , s1 , s2 , n , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { s1 = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; s2 = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; if ( s1 > s2 ) a [ i - <int> ] [ j ] = s1 ; else a [ i - <int> ] [ j ] = s2 ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 37}
{"input": "int main ( ) { int t ; long int a , b , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } else { for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 38}
{"input": "int findmax ( int i , int j ) ; int mat [ <int> ] [ <int> ] , n , r ; int main ( ) { int n , i , j , k , hsum ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & mat [ j ] [ k ] ) ; } } int max = findmax ( <int> , <int> ) ; printf ( <str> , max ) ; } return <int> ; } int findmax ( int i , int j ) { if ( i > r ) return <int> ; int mleft = findmax ( i + <int> , j ) ; int mright = findmax ( i + <int> , j + <int> ) ; int t ; if ( mleft > mright ) { t = mat [ i ] [ j ] + mleft ; } else t = mat [ i ] [ j ] + mright ; return t ; }", "label": 2, "id": 39}
{"input": "int main ( ) { int answers [ <int> ] ; int num_cases , n , triangle [ <int> ] [ <int> ] , i , j , temp , idx = <int> , copy ; scanf ( <str> , & num_cases ) ; copy = num_cases ; while ( copy -- > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangle [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { temp = triangle [ i ] [ j ] + triangle [ i + <int> ] [ j ] ; if ( temp < triangle [ i ] [ j ] + triangle [ i + <int> ] [ j + <int> ] ) temp = triangle [ i ] [ j ] + triangle [ i + <int> ] [ j + <int> ] ; triangle [ i ] [ j ] = temp ; } } answers [ idx ++ ] = triangle [ <int> ] [ <int> ] ; } for ( i = <int> ; i < num_cases ; i ++ ) { printf ( <str> , answers [ i ] ) ; } return <int> ; }", "label": 0, "id": 40}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; int ans ; scanf ( <str> , & a , & b ) ; if ( a != <int> && b != <int> ) { if ( a > b ) { ans = a % b ; if ( ans == <int> ) { printf ( <str> , b , a ) ; } else printf ( <str> , a * b ) ; } else if ( a == b ) { printf ( <str> , a , a ) ; } else { ans = b % a ; if ( ans == <int> ) printf ( <str> , a , b ) ; else printf ( <str> , a * b ) ; } } else { printf ( <str> ) ; } } return <int> ; }", "label": 1, "id": 41}
{"input": "int main ( ) { int t , num1 , num2 , cost = <int> , i , num , j , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { cost = <int> ; scanf ( <str> , & num ) ; if ( num > <int> ) scanf ( <str> , & num1 ) ; for ( j = <int> ; j < num - <int> ; j ++ ) { scanf ( <str> , & num2 ) ; temp = ( num1 < num2 ) ? num1 : num2 ; printf ( <str> , temp ) ; cost += temp ; printf ( <str> , cost ) ; num1 = num2 ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 42}
{"input": "int main ( ) { int n , i , j , k , a [ <int> ] [ <int> ] ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 43}
{"input": "int k , * a [ <int> ] ; int max ( int p , int q ) { if ( p > q ) return p ; return q ; } int fun ( int i , int j ) { int m ; if ( k == i + <int> ) return ( a [ i ] [ j ] ) ; m = a [ i ] [ j ] + max ( ( fun ( i + <int> , j ) ) , ( fun ( i + <int> , j + <int> ) ) ) ; return m ; } int main ( ) { int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } while ( n ) { n -- ; scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; ; } } ; printf ( <str> , fun ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 44}
{"input": "void transfer ( int * , int * , int ) ; void swap ( int * a , int * b ) ; int main ( ) { int no , num [ <int> ] , temp [ <int> ] , i , j , test ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & no ) ; scanf ( <str> , & num [ <int> ] ) ; for ( i = <int> ; i < no ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp [ j ] ) ; if ( j == <int> ) temp [ j ] += num [ j ] ; else if ( j == i ) temp [ j ] += num [ j - <int> ] ; else { if ( num [ j ] > num [ j - <int> ] ) temp [ j ] += num [ j ] ; else temp [ j ] += num [ j - <int> ] ; } } transfer ( num , temp , j ) ; } for ( i = <int> ; i < no ; i ++ ) for ( j = i + <int> ; j < no ; j ++ ) if ( num [ i ] < num [ j ] ) swap ( & num [ i ] , & num [ j ] ) ; printf ( <str> , num [ <int> ] ) ; } return <int> ; } void transfer ( int * a , int * b , int i ) { int j ; for ( j = <int> ; j < i ; j ++ ) a [ j ] = b [ j ] ; } void swap ( int * a , int * b ) { * a = * a + * b ; * b = * a - * b ; * a = * a - * b ; }", "label": 0, "id": 45}
{"input": "int main ( ) { int n , t , a , b , j , y ; t = <int> ; scanf ( <str> , & n ) ; while ( n > <int> ) { t = <int> ; scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( j = <int> ; j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { if ( j > t ) t = j ; } } y = a * b / t ; printf ( <str> , t , y ) ; } if ( a < b ) { for ( j = <int> ; j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { if ( j > t ) t = j ; } } y = a * b / t ; printf ( <str> , t , y ) ; } if ( a == b ) printf ( <str> , a , b ) ; n -- ; } }", "label": 1, "id": 46}
{"input": "int main ( ) { int a , b ; int temp , gcd ; long lcm , product ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; product = a * b ; while ( a > <int> ) { if ( a < b ) { temp = a ; a = b ; b = temp ; } a = a % b ; } gcd = b ; lcm = product / gcd ; printf ( <str> ) ; printf ( <str> , gcd , lcm ) ; return <int> ; }", "label": 1, "id": 47}
{"input": "int main ( ) { int t , i , small , N ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & N ) ; int A [ N ] ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } small = A [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( small > A [ i ] ) small = A [ i ] ; } printf ( <str> , ( N - <int> ) * small ) ; } return <int> ; }", "label": 0, "id": 48}
{"input": "void maxsum ( int [ <int> ] [ <int> ] , int , int , int , int , int * ) ; int main ( ) { int i = <int> , n , arr [ <int> ] [ <int> ] , j , k , l , row , col , sum , max = <int> , arr1 [ <int> ] ; int * p ; p = & max ; scanf ( <str> , & n ) ; while ( i < n ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } row = <int> ; col = <int> ; sum = <int> ; maxsum ( arr , row , col , l , sum , p ) ; arr1 [ i ] = * p ; i ++ ; } for ( l = <int> ; l < i ; l ++ ) printf ( <str> , arr1 [ l ] ) ; return <int> ; } void maxsum ( int arr [ <int> ] [ <int> ] , int row , int col , int l , int sum , int * p ) { int b , a = <int> ; if ( col == l ) { return ; } if ( row == l - <int> ) { b = sum + arr [ row ] [ col ] ; if ( b >= ( * p ) ) { * p = b ; } sum = sum - arr [ row ] [ col ] ; return ; } sum = sum + arr [ row ] [ col ] ; maxsum ( arr , row + <int> , col , l , sum , p ) ; maxsum ( arr , row + <int> , col + <int> , l , sum , p ) ; return ; }", "label": 2, "id": 49}
{"input": "int main ( void ) { int T , n , i , j ; long long m , B [ <int> ] , sum ; scanf ( <str> , & T ) ; while ( T -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & m ) ; if ( ( j == <int> ) && ( i != n - <int> ) ) sum += m ; else if ( ( i == n - <int> ) && ( j == <int> ) ) B [ <int> ] = m ; else if ( ( i == n - <int> ) && ( j == <int> ) ) B [ <int> ] = m ; } } if ( B [ <int> ] > B [ <int> ] ) sum += B [ <int> ] ; else sum += B [ <int> ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 50}
{"input": "long int gcd ( long int a , long int b ) ; main ( ) { long int a , b , d , l , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; d = gcd ( a , b ) ; l = ( a * b ) / d ; printf ( <str> , d , l ) ; } return <int> ; } long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 1, "id": 51}
{"input": "int main ( ) { int t , i , min , a , b , x , y , j , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x , b = y ; min = a < b ? a : b ; int gcd = <int> ; if ( min == <int> ) gcd = <int> ; else { long int pi , pj ; int pk = <int> , psize ; long int p [ min ] ; for ( pi = <int> ; pi <= min ; pi ++ ) { int prime = <int> ; for ( pj = <int> ; pj <= pi / <int> ; pj ++ ) { if ( pi % pj == <int> ) { prime = <int> ; break ; } } if ( prime == <int> ) p [ pk ++ ] = pi ; psize = pk ; } int k = <int> ; while ( a > p [ k ] && b > p [ k ] ) { if ( a % p [ k ] != <int> || b % p [ k ] != <int> ) { k ++ ; if ( k == psize ) break ; } else { gcd *= p [ k ] ; a /= p [ k ] ; b /= p [ k ] ; } } } long long int lcm ; a = x , b = y ; lcm = gcd * ( a / gcd ) * ( b / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 52}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , c = <int> , i , min ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } for ( i = <int> ; i < n - <int> ; i ++ ) c = c * min ; printf ( <str> , c ) ; } }", "label": 1, "id": 53}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , sum = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] && i + <int> < n ) { sum = sum + a [ i ] ; a [ i + <int> ] = sum ; } else if ( a [ i + <int> ] < a [ i ] && i + <int> < n ) { sum = sum + a [ i + <int> ] ; a [ i + <int> ] = sum ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 54}
{"input": "long long find ( long long int a [ ] , long long int n ) { long long int min ; long long int i ; min = a [ <int> ] ; i = <int> ; while ( i < n ) { if ( min >= a [ i ] ) { min = a [ i ] ; } i ++ ; } return min ; } int main ( ) { long long int i ; long long int t ; long long int p ; long long int j ; long long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & p ) ; i = <int> ; while ( i < p ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } j = find ( a , p ) ; j = j * ( p - <int> ) ; printf ( <str> , j ) ; t -- ; } return <int> ; }", "label": 3, "id": 55}
{"input": "int main ( ) { int n , r , a [ <int> ] [ <int> ] , t [ <int> ] , temp , i , j , t1 , t2 ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { t [ i ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } t [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { temp = t [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { t1 = t [ j ] + a [ i ] [ j ] ; t2 = temp + a [ i ] [ j ] ; temp = t [ j ] ; t [ j ] = t1 > t2 ? t1 : t2 ; } t [ <int> ] += a [ i ] [ <int> ] ; } temp = t [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) if ( temp < t [ i ] ) temp = t [ i ] ; printf ( <str> , temp ) ; } return <int> ; }", "label": 0, "id": 56}
{"input": "int main ( ) { int b [ <int> ] [ <int> ] , a [ <int> ] , i , j , n , k = <int> , x [ <int> ] = { <int> } , t , m , n1 , n2 ; a [ <int> ] = <int> ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } a [ <int> ] = b [ <int> ] [ <int> ] ; a [ <int> ] = b [ <int> ] [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = b [ <int> ] [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { n1 = ( ( i - <int> ) * ( i - <int> ) ) - i + j + <int> ; a [ k ] = b [ i ] [ j ] + a [ n1 ] ; ++ k ; n2 = ( ( i - <int> ) * ( i - <int> ) ) - i + j + <int> ; a [ k ] = b [ i ] [ j + <int> ] + a [ n2 ] ; ++ k ; } } for ( i = <int> ; i < n * n - n + <int> ; i ++ ) { if ( x [ m ] < a [ i ] ) { x [ m ] = a [ i ] ; } } } i = <int> ; while ( i < t ) { printf ( <str> , x [ i ] ) ; i ++ ; } return <int> ; }", "label": 1, "id": 57}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int x , i , j ; while ( t -- ) { scanf ( <str> , & x ) ; int a [ x ] [ x ] ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = x - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 58}
{"input": "int arr [ <int> ] ; int main ( ) { int i , t , n , sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { sum = <int> ; int arr [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] > arr [ i + <int> ] ) { sum = sum + arr [ i + <int> ] ; } else { sum = sum + arr [ i ] ; t = arr [ i ] ; arr [ i ] = arr [ i + <int> ] ; arr [ i + <int> ] = t ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 59}
{"input": "long gcdca ( long a , long b ) { a = abs ( a ) ; b = abs ( b ) ; return ( b == <int> ) ? a : gcdca ( b , a % b ) ; } int main ( ) { long t , a , b , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { lcm = <int> ; gcd = <int> ; scanf ( <str> , & a , & b ) ; gcd = gcdca ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 60}
{"input": "int a [ <int> ] ; int main ( ) { int t , i , s , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { int k = <int> , max = <int> ; scanf ( <str> , & s ) ; for ( i = <int> ; i < ( ( s * ( s + <int> ) ) / <int> ) ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < s ; i ++ ) { j = <int> ; for ( ; j <= i ; k ++ ) { if ( i > <int> ) { if ( j == <int> || ( j == <int> && i == <int> ) ) { a [ k ] += a [ ( ( ( i - <int> ) * i ) / <int> ) ] ; } else if ( j != i ) { a [ k ] += max ( a [ k - i ] , a [ ( k - i ) - <int> ] ) ; } else a [ k ] += a [ ( k - i ) - <int> ] ; } if ( ( i == s - <int> ) && max < a [ k ] ) { max = a [ k ] ; } j ++ ; } } k = <int> ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 61}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t ) { int n ; scanf ( <str> , & n ) ; int min = <int> ; for ( int i = <int> ; i < n ; i ++ ) { int k ; scanf ( <str> , & k ) ; if ( min > k ) min = k ; } int res = min * ( n - <int> ) ; printf ( <str> , res ) ; t -- ; } return <int> ; }", "label": 0, "id": 62}
{"input": "int gcd_euclid ( int a , int b ) { if ( b == <int> ) return a ; if ( a >= b && b > <int> ) return gcd_euclid ( b , a % b ) ; return <int> ; } int main ( void ) { int t , a , b , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = gcd_euclid ( a , b ) ; printf ( <str> , gcd , ( a * b ) / gcd ) ; } return <int> ; }", "label": 3, "id": 63}
{"input": "int findGCD ( int number1 , int number2 ) { if ( number2 == <int> ) { return number1 ; } return findGCD ( number2 , number1 % number2 ) ; } int main ( ) { int t , i , j , a , b , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = findGCD ( a , b ) ; l = ( int ) a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 64}
{"input": "int gcd ( int a , int b ) { int temp ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( void ) { int t ; int a , b , g , l ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 1, "id": 65}
{"input": "int main ( void ) { int t ; long long i , n , arr [ <int> ] , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( min > arr [ i ] ) min = arr [ i ] ; printf ( <str> , ( n - <int> ) * min ) ; } }", "label": 0, "id": 66}
{"input": "int main ( ) { int a , b , x , c , y , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { c = y ; y = x % y ; x = c ; } printf ( <str> , x ) ; printf ( <str> , ( a * b ) / x ) ; } }", "label": 1, "id": 67}
{"input": "int main ( ) { int t , n , arr [ <int> ] , i ; long long int cost = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] ) { cost += arr [ i ] ; arr [ i + <int> ] = arr [ i ] ; } else { cost += arr [ i + <int> ] ; } } printf ( <str> , cost ) ; cost = <int> ; } return <int> ; }", "label": 1, "id": 68}
{"input": "int main ( ) { int A , B , r , t , L , num , den ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & A , & B ) ; num = A ; den = B ; r = num % den ; while ( r != <int> ) { num = den ; den = r ; r = num % den ; } L = ( A * B ) / den ; printf ( <str> , den , L ) ; } return <int> ; }", "label": 1, "id": 69}
{"input": "int main ( ) { int testcase ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { int a [ <int> ] , i , n , j , k , ans ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int min = a [ <int> ] , max = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min >= a [ i ] ) min = a [ i ] ; } ans = ( n - <int> ) * min ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 70}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long n , temp , now ; long long sum = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & temp ) ; n -- ; while ( n -- ) { scanf ( <str> , & now ) ; if ( temp <= now ) sum += temp ; else { sum += now ; temp = now ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 71}
{"input": "int main ( ) { int t , x , y , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { x = a [ i ] [ j ] ; y = a [ i ] [ j + <int> ] ; a [ i - <int> ] [ j ] += ( ( x >= y ) ? x : y ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 72}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , sum = <int> ; for ( int i = <int> ; i < n ; ++ i ) scanf ( <str> , & a [ i ] ) ; for ( int i = <int> ; i < n - <int> ; ++ i ) { if ( a [ i ] > a [ i + <int> ] && a [ i ] != <int> ) { a [ i ] = <int> ; sum = sum + a [ i + <int> ] ; } if ( a [ i ] < a [ i + <int> ] && a [ i ] != <int> ) { int temp = a [ i ] ; a [ i ] = a [ i + <int> ] ; a [ i + <int> ] = temp ; a [ i ] = <int> ; sum = sum + a [ i + <int> ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 73}
{"input": "int gcd ( int x , int y ) { if ( x == y ) return x ; else if ( x > y ) return gcd ( x - y , y ) ; else return gcd ( x , y - x ) ; } int lcm ( int x , int y ) { int max = ( x > y ) ? x : y ; do { if ( max % x == <int> && max % y == <int> ) { return max ; } else ++ max ; } while ( <int> ) ; } void main ( ) { int a , b , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 2, "id": 74}
{"input": "int GCD ( int , int ) ; int LCM ( int , int ) ; main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int x , y , w , u ; scanf ( <str> , & x , & y ) ; w = GCD ( x , y ) ; u = LCM ( x , y ) ; printf ( <str> , w , u ) ; } } int GCD ( int a , int b ) { if ( a == <int> && b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return GCD ( a - b , b ) ; return GCD ( a , b - a ) ; } int LCM ( int a , int b ) { int z ; z = ( ( a * b ) / GCD ( a , b ) ) ; return ( z ) ; }", "label": 1, "id": 75}
{"input": "int main ( void ) { int t , a , b , i , lcm , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) break ; } lcm = i ; gcd = ( a * b ) / lcm ; printf ( <str> , gcd , lcm ) ; printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 76}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int x , y , gcd ; scanf ( <str> , & x , & y ) ; for ( int i = <int> ; i <= x && i <= y ; ++ i ) { if ( x % i == <int> && y % i == <int> ) { gcd = i ; } } printf ( <str> , gcd , ( x * y ) / gcd ) ; } return <int> ; }", "label": 2, "id": 77}
{"input": "int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; long int n , p ; long long int arr [ <int> ] , a ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } a = arr [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a > arr [ j ] ) { a = arr [ j ] ; } } printf ( <str> , a * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 78}
{"input": "int gcd ( int a , int b ) { if ( a != b ) { if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } return a ; } int main ( ) { int t , i , a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int h = gcd ( a , b ) ; int l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 1, "id": 79}
{"input": "int maxi ( int a , int b ) { return ( ( a > b ) ? a : b ) ; } int main ( ) { int * op ; int a [ <int> ] [ <int> ] ; int x , n , r , i , j , k , p , sum , max = <int> ; scanf ( <str> , & n ) ; op = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( x = <int> ; x < n ; x ++ ) { max = <int> ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( j = <int> ; j < r - <int> ; j ++ ) { if ( a [ r - <int> ] [ j ] > a [ r - <int> ] [ j + <int> ] ) { sum = a [ r - <int> ] [ j ] ; } else { sum = a [ r - <int> ] [ j + <int> ] ; j ++ ; } k = r - <int> ; p = j ; while ( k > <int> ) { if ( p <= k && p - <int> >= <int> ) { sum += maxi ( a [ k ] [ p ] , a [ k ] [ p - <int> ] ) ; p -- ; } else if ( p <= k ) sum += a [ k ] [ p ] ; else { sum += a [ k ] [ p - <int> ] ; p -- ; } k -- ; } sum += a [ <int> ] [ <int> ] ; if ( sum > max ) max = sum ; } op [ x ] = max ; } for ( x = <int> ; x < n ; x ++ ) printf ( <str> , op [ x ] ) ; return <int> ; }", "label": 1, "id": 80}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> ) return b ; else return gcd ( a - b , b ) ; } int main ( ) { int t , i ; unsigned long long int a , b , c , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) c = gcd ( a , b ) ; else c = gcd ( b , a ) ; d = ( a * b ) / c ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 3, "id": 81}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , x ; scanf ( <str> , & a , & b ) ; int y = a ; int z = b ; int temp ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } x = ( y * z ) / a ; printf ( <str> , a , x ) ; } }", "label": 1, "id": 82}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > - <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 83}
{"input": "int main ( ) { int t , i , j , x , min , p , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & x ) ; if ( j == <int> ) min = x ; else if ( min > x ) min = x ; } p = min * ( n - <int> ) ; printf ( <str> , p ) ; } return <int> ; }", "label": 0, "id": 84}
{"input": "int main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 1, "id": 85}
{"input": "int sum ( int n ) { int arr [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } } return arr [ <int> ] [ <int> ] ; } int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T ) { T -- ; int n ; scanf ( <str> , & n ) ; printf ( <str> , sum ( n ) ) ; } }", "label": 0, "id": 86}
{"input": "int main ( ) { int i , j , k , t , m , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( m = n - <int> ; m > <int> ; m -- ) { for ( k = <int> ; k < m ; k ++ ) { if ( a [ m ] [ k ] > a [ m ] [ k + <int> ] ) a [ m - <int> ] [ k ] += a [ m ] [ k ] ; else a [ m - <int> ] [ k ] += a [ m ] [ k + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 87}
{"input": "int main ( ) { int t , i , a [ <int> ] ; long long int n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; else if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 88}
{"input": "int main ( ) { long long t , i , r , small , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( small > arr [ i ] ) { small = arr [ i ] ; } } r = small * ( n - <int> ) ; printf ( <str> , r ) ; } return <int> ; }", "label": 1, "id": 89}
{"input": "int main ( ) { int n , t , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ( a [ i ] [ j ] ) ) ; } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 90}
{"input": "int main ( ) { int t , a , b , n1 , n2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; n1 = a ; n2 = b ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } printf ( <str> , n1 , ( a * b ) / n1 ) ; } return <int> ; }", "label": 1, "id": 91}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int * arr ; arr = malloc ( sizeof ( int ) * n ) ; int i , j , count = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i + <int> ] >= arr [ i ] ) count ++ ; } printf ( <str> , n + count ) ; } }", "label": 2, "id": 92}
{"input": "int main ( ) { int t = <int> , c = <int> ; scanf ( <str> , & t ) ; for ( c = <int> ; c < t ; c ++ ) { int a = <int> , b = <int> , max = <int> , min = <int> , hcf = <int> , lcm = <int> , i = <int> ; scanf ( <str> , & a , & b ) ; max = MAX ( a , b ) ; min = MIN ( a , b ) ; for ( i = <int> ; i > <int> ; i ++ ) { if ( ( ( a % i ) == <int> ) && ( ( b % i ) == <int> ) ) { hcf = i ; } if ( ( i % a ) == <int> && ( i % b ) == <int> ) { lcm = i ; break ; } } printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 93}
{"input": "int main ( ) { long long t , n , a [ <int> ] , i , j , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long b [ <int> ] ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; b [ i ] = <int> ; } for ( i = <int> ; i < n - <int> ; i ++ ) { j = i + <int> ; if ( a [ i ] <= a [ j ] ) b [ j ] = b [ i ] + <int> ; sum += b [ j ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 94}
{"input": "int main ( void ) { int a [ N ] , t , n ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; int m = a [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( m > a [ i ] ) { m = a [ i ] ; } } printf ( <str> , m * ( n - <int> ) ) ; t -- ; } return <int> ; }", "label": 0, "id": 95}
{"input": "int sumtobase ( int * * intpyr , int row , int col , int size ) { if ( row == size ) return intpyr [ row ] [ col ] ; else { int way1 , way2 ; way1 = intpyr [ row ] [ col ] + sumtobase ( intpyr , row + <int> , col + <int> , size ) ; way2 = intpyr [ row ] [ col ] + sumtobase ( intpyr , row + <int> , col , size ) ; if ( way1 > way2 ) return way1 ; else return way2 ; } } int main ( ) { int itr ; int size ; int * * pyramid ; int * ans , i ; scanf ( <str> , & itr ) ; ans = ( int * ) malloc ( itr * sizeof ( int ) ) ; for ( i = <int> ; i < itr ; i ++ ) { int j , k = <int> ; char temp ; scanf ( <str> , & size ) ; pyramid = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( j = <int> ; j < size ; j ++ ) { pyramid [ j ] = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) pyramid [ j ] [ k ] = <int> ; k = - <int> ; fflush ( stdin ) ; while ( ( temp = getchar ( ) ) != <char> ) { if ( ( temp >= <char> ) && ( temp <= <char> ) ) { if ( k < <int> ) k = <int> ; pyramid [ j ] [ k ] = <int> * pyramid [ j ] [ k ] + ( temp - <char> ) ; } else if ( temp == <char> ) { if ( k >= <int> ) k ++ ; } } } ans [ i ] = sumtobase ( pyramid , <int> , <int> , size - <int> ) ; } for ( i = <int> ; i < itr ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 2, "id": 96}
{"input": "int main ( ) { int max_sum [ <int> ] [ <int> ] ; int flag_a = <int> ; int flag_b = <int> ; int result [ <int> ] ; int input , temp ; int total_cases , total_inputs ; int i , row , column , j , k ; scanf ( <str> , & total_cases ) ; for ( k = <int> ; k < <int> ; k ++ ) { result [ k ] = <int> ; } for ( i = <int> ; i < total_cases ; i ++ ) { for ( k = <int> ; k < <int> ; k ++ ) { max_sum [ <int> ] [ k ] = <int> ; max_sum [ <int> ] [ k ] = <int> ; } scanf ( <str> , & total_inputs ) ; for ( row = <int> ; row <= total_inputs ; row ++ ) { for ( column = <int> ; column < row ; column ++ ) { scanf ( <str> , & input ) ; if ( column != <int> ) { if ( max_sum [ flag_a ] [ column ] > max_sum [ flag_a ] [ column - <int> ] ) max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column ] ; else max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column - <int> ] ; } if ( column == <int> ) max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column ] ; } temp = flag_a ; flag_a = flag_b ; flag_b = temp ; } int max = <int> ; for ( j = <int> ; j < total_inputs ; j ++ ) { if ( max_sum [ flag_a ] [ j ] > max ) max = max_sum [ flag_a ] [ j ] ; } result [ i ] = max ; } for ( i = <int> ; i < total_cases ; i ++ ) { printf ( <str> , result [ i ] ) ; } return <int> ; }", "label": 3, "id": 97}
{"input": "int main ( ) { long int t , n ; long int arr [ <int> ] , min , s = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ n - <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( arr [ j ] < min ) min = arr [ j ] ; } s = min * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 98}
{"input": "int main ( ) { int n , row , new , i , j , k ; int t , l , max ; int num [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & row ) ; max = <int> ; for ( k = <int> ; k <= row ; k ++ ) { for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & new ) ; t = l = <int> ; if ( j < k - <int> ) t = num [ j ] ; if ( j > <int> ) l = num [ j - <int> ] ; t = t + new ; l = l + new ; if ( t > l ) num [ j ] = t ; else num [ j ] = l ; } } for ( j = <int> ; j < row ; j ++ ) if ( num [ j ] > max ) max = num [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 99}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 1, "id": 100}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int n1 , i , j , k = <int> , sum = <int> , s1 = <int> , max = <int> ; scanf ( <str> , & n1 ) ; int * * a = ( int * * ) malloc ( n1 * sizeof ( int * ) ) ; for ( i = <int> ; i <= n1 ; i ++ ) { a [ i ] = ( int * ) malloc ( i * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n1 - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } free ( a [ i + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 101}
{"input": "long long int GCD ( long long int a , long long int b ) { if ( b == <int> ) { return a ; } else { GCD ( b , a % b ) ; } } int main ( ) { long long int a , c , d , l ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & c , & d ) ; l = GCD ( c , d ) ; a = ( c * d ) / ( GCD ( c , d ) ) ; printf ( <str> , l , a ) ; } return <int> ; }", "label": 2, "id": 102}
{"input": "void main ( ) { int x , t , n , j ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; int i , a [ n + <int> ] ; a [ <int> ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( j = <int> ; j < n ; ) { if ( a [ j ] > a [ j + <int> ] ) { a [ <int> ] = a [ <int> ] + a [ j + <int> ] ; j ++ ; } else if ( a [ j ] < a [ j + <int> ] ) { a [ <int> ] = a [ <int> ] + a [ j ] ; x = a [ j + <int> ] ; a [ j + <int> ] = a [ j + <int> ] ; j ++ ; } } printf ( <str> , a [ <int> ] ) ; } }", "label": 2, "id": 103}
{"input": "int sum ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , r , p [ <int> ] [ <int> ] , i , j , k , s ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & p [ j ] [ k ] ) ; } } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { p [ i ] [ j ] += sum ( p [ i + <int> ] [ j ] , p [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 104}
{"input": "int main ( void ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int cnt = <int> ; while ( n > <int> ) { if ( a [ <int> ] < a [ <int> ] ) { cnt += a [ <int> ] ; if ( n > <int> ) a [ <int> ] = a [ <int> ] ; for ( int k = <int> ; k < n ; k ++ ) { a [ k ] = a [ k + <int> ] ; } } else if ( a [ <int> ] >= a [ <int> ] ) { cnt += a [ <int> ] ; for ( int k = <int> ; k < n ; k ++ ) a [ k ] = a [ k + <int> ] ; } n -- ; } printf ( <str> , cnt ) ; } return <int> ; }", "label": 2, "id": 105}
{"input": "int main ( ) { int t ; long long int i , j , k , n , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; c = n ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { int flag = <int> ; for ( k = i ; k < j ; k ++ ) { if ( a [ k ] > a [ k + <int> ] ) { flag = <int> ; break ; } } if ( flag == <int> ) c ++ ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 106}
{"input": "int main ( ) { int t , n ; int i , j , k ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] += arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] += arr [ i ] [ j + <int> ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 2, "id": 107}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned long n , count , min , ans ; scanf ( <str> , & n ) ; unsigned long arr [ n ] ; for ( count = <int> ; count < n ; count ++ ) scanf ( <str> , & arr [ count ] ) ; min = arr [ <int> ] ; for ( count = <int> ; count < n ; count ++ ) if ( arr [ count ] < min ) min = arr [ count ] ; ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 108}
{"input": "int a [ <int> ] [ <int> ] , b [ <int> ] , i , j , o , k = <int> ; void porn ( int , int , int ) ; int main ( ) { int t , z , * c , x = <int> ; scanf ( <str> , & t ) ; c = ( int * ) malloc ( t * sizeof ( int ) ) ; for ( z = <int> ; z < t ; z ++ ) { scanf ( <str> , & o ) ; for ( i = <int> ; i <= o ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ i - <int> ] [ j ] ) ; } } i = <int> ; j = <int> ; porn ( a [ <int> ] [ <int> ] , i , j ) ; c [ x ] = b [ <int> ] ; for ( i = <int> ; i < k ; i ++ ) { if ( c [ x ] < b [ i ] ) c [ x ] = b [ i ] ; else continue ; } x ++ ; } for ( z = <int> ; z < t ; z ++ ) printf ( <str> , c [ z ] ) ; return <int> ; } void porn ( int s , int i , int j ) { if ( o > ( i + <int> ) && i >= j ) { porn ( s + a [ i + <int> ] [ j ] , i + <int> , j ) ; porn ( s + a [ i + <int> ] [ j + <int> ] , i + <int> , j + <int> ) ; } else { b [ k ] = s ; k ++ ; } }", "label": 3, "id": 109}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int x = gcd ( a , b ) ; int m = a * b ; printf ( <str> , x , m ) ; } return <int> ; }", "label": 1, "id": 110}
{"input": "int gcd ( int a , int b ) { int divident = a >= b ? a : b ; int divisor = a <= b ? a : b ; while ( divisor != <int> ) { int remainder = divident % divisor ; divident = divisor ; divisor = remainder ; } return divident ; } int main ( ) { int a , y , lcm , A , B , i ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; y = gcd ( A , B ) ; lcm = ( A * B ) / y ; printf ( <str> , y , lcm ) ; } return <int> ; }", "label": 1, "id": 111}
{"input": "int main ( ) { int test , n , num , sum [ <int> ] = { <int> } , prev [ <int> ] = { <int> } , temp ; int max , k , i , j , l = <int> , tc , ans [ <int> ] = { <int> } ; scanf ( <str> , & test ) ; tc = test ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num ) ; temp = prev [ j ] + num ; if ( temp > sum [ j ] ) sum [ j ] = temp ; if ( j > <int> ) { temp = prev [ j - <int> ] + num ; if ( temp > sum [ j ] ) sum [ j ] = temp ; } } for ( k = <int> ; k <= i ; k ++ ) { prev [ k ] = sum [ k ] ; } } max = sum [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( max < sum [ k ] ) max = sum [ k ] ; } ans [ l ++ ] = max ; for ( k = <int> ; k < n ; k ++ ) { prev [ k ] = <int> ; sum [ k ] = <int> ; } } l = <int> ; while ( tc -- ) { printf ( <str> , ans [ l ++ ] ) ; } return <int> ; }", "label": 0, "id": 112}
{"input": "int main ( ) { int n , t , * * a , * b , i , j , k , sum , max ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; a = ( int * * ) calloc ( n , sizeof ( int * ) ) ; b = ( int * ) calloc ( n , sizeof ( int ) ) ; for ( j = <int> ; j < n ; j ++ ) { a [ j ] = ( int * ) calloc ( n , sizeof ( int ) ) ; } for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } b [ <int> ] = a [ <int> ] [ <int> ] ; for ( j = <int> ; j < n - <int> ; j ++ ) { for ( k = j ; k >= <int> ; k -- ) { sum = b [ k ] + a [ j + <int> ] [ k + <int> ] ; if ( sum > b [ k + <int> ] ) { b [ k + <int> ] = sum ; } sum = b [ k ] + a [ j + <int> ] [ k ] ; if ( sum > b [ k ] ) { b [ k ] = sum ; } } } max = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( max < b [ j ] ) { max = b [ j ] ; } } free ( a ) ; free ( b ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 113}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t ) { long long int i , n ; scanf ( <str> , & n ) ; long long int arr [ n ] , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } long long int result ; result = min * ( n - <int> ) ; printf ( <str> , result ) ; t -- ; } return <int> ; }", "label": 0, "id": 114}
{"input": "int a [ MAXN ] [ MAXN ] ; int read_int ( void ) { int t = <int> , ch ; while ( ( ch = getchar ( ) ) == <char> || ! isdigit ( ch ) ) ; do t = t * <int> + ( ch - <char> ) , ch = getchar ( ) ; while ( isdigit ( ch ) ) ; return t ; } void solve ( void ) { int n = read_int ( ) , r , c , t ; for ( r = <int> ; r < n ; ++ r ) for ( c = <int> ; c <= r ; ++ c ) t = a [ r ] [ c ] = read_int ( ) ; for ( r = <int> ; r < n ; ++ r ) { a [ r ] [ <int> ] += a [ r - <int> ] [ <int> ] ; for ( c = <int> ; c < r ; ++ c ) a [ r ] [ c ] += max_mcr ( a [ r - <int> ] [ c ] , a [ r - <int> ] [ c - <int> ] ) ; a [ r ] [ c ] += a [ r - <int> ] [ c - <int> ] ; } t = a [ n - <int> ] [ <int> ] ; for ( c = <int> ; c < n ; ++ c ) t = max_mcr ( t , a [ n - <int> ] [ c ] ) ; printf ( <str> , t ) ; } int main ( int argc , char * argv [ ] ) { int t = read_int ( ) ; for ( ; t ; -- t ) solve ( ) ; return <int> ; }", "label": 0, "id": 115}
{"input": "int a [ <int> ] [ <int> ] ; int dp [ <int> ] [ <int> ] , n ; int max ( int a , int b ) { return a > b ? a : b ; } int rec ( int N , int K ) { if ( N >= n ) return <int> ; if ( dp [ N ] [ K ] != - <int> ) return dp [ N ] [ K ] ; return ( dp [ N ] [ K ] = max ( a [ N ] [ K ] + rec ( N + <int> , K ) , a [ N ] [ K ] + rec ( N + <int> , K + <int> ) ) ) ; } int main ( ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { int k = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; dp [ i ] [ j ] = - <int> ; } k ++ ; } printf ( <str> , rec ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 116}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , min , i , j ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return ( <int> ) ; }", "label": 0, "id": 117}
{"input": "int main ( ) { int t ; unsigned int a , b , i , j ; unsigned int ans1 = <int> , ans2 = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { for ( i = a ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { ans1 = i ; break ; } } } else { for ( i = b ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { ans1 = i ; break ; } } } for ( i = <int> ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) { ans2 = i ; break ; } } printf ( <str> , ans1 , ans2 ) ; t -- ; } return <int> ; }", "label": 2, "id": 118}
{"input": "int max ( int q , int r ) ; int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int n , p , k ; scanf ( <str> , & n ) ; int a [ n ] [ n ] , m [ n ] , b [ n ] , big ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( k = <int> ; k < i ; k ++ ) b [ k ] = m [ k ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) m [ <int> ] = a [ i ] [ j ] ; else { if ( j == <int> ) m [ j ] = b [ j ] + a [ i ] [ j ] ; else if ( j == i ) m [ j ] = b [ j - <int> ] + a [ i ] [ j ] ; else m [ j ] = max ( b [ j ] , b [ j - <int> ] ) + a [ i ] [ j ] ; } } } big = m [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( m [ i ] > big ) big = m [ i ] ; } printf ( <str> , big ) ; } } int max ( int q , int r ) { if ( q > r ) return q ; else return r ; }", "label": 0, "id": 119}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t , i , k , l ; scanf ( <str> , & t ) ; int a [ t ] , b [ t ] ; if ( t >= <int> && t <= <int> ) { for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { k = gcd ( a [ i ] , b [ i ] ) ; l = lcm ( a [ i ] , b [ i ] ) ; printf ( <str> , k , l ) ; } } return <int> ; } int gcd ( int a , int b ) { int c , d ; c = a < b ? a : b ; d = a > b ? a : b ; if ( d % c == <int> ) return c ; else return gcd ( c , d % c ) ; } int lcm ( int a , int b ) { int i , c ; c = a > b ? a : b ; for ( i = c ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) break ; } return i ; }", "label": 2, "id": 120}
{"input": "long int gcd ( long int a , long int b ) { while ( a != b ) { if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } return a ; } int main ( ) { long int n , m , z , ans [ <int> ] ; int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n , & m ) ; ans [ i * <int> ] = gcd ( n , m ) ; ans [ i * <int> + <int> ] = m * n / gcd ( n , m ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , ans [ i * <int> ] , ans [ i * <int> + <int> ] ) ; } return <int> ; }", "label": 0, "id": 121}
{"input": "unsigned long int gcd ( unsigned long int , unsigned long int ) ; unsigned long long int lcm ( unsigned long int , unsigned long int ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; unsigned long int a , b , temp ; unsigned long int hcf ; unsigned long long int <unk> ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } hcf = gcd ( a , b ) ; printf ( <str> , hcf , a * b / hcf ) ; } return <int> ; } unsigned long int gcd ( unsigned long int a , unsigned long int b ) { if ( a == <int> ) return b ; else { return gcd ( b % a , a ) ; } }", "label": 0, "id": 122}
{"input": "int gcd ( int a , int b ) { if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 123}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; int sum , max = <int> , count = <int> ; for ( int i = <int> ; i < n ; i ++ ) { max = <int> ; for ( int j = i ; j < n ; j ++ ) { sum = arr [ i ] + arr [ j ] ; if ( sum > max ) { max = sum ; count ++ ; } } } printf ( <str> , count ) ; } return <int> ; }", "label": 2, "id": 124}
{"input": "int * p [ <int> ] ; int trisum ( int n ) { int sum = <int> , i , key1 = <int> , <unk> = <int> ; if ( n == <int> ) { sum = p [ <int> ] [ <int> ] ; return sum ; } else if ( n > <int> ) { for ( i = <int> ; i <= n - <int> ; i ++ ) { key1 = p [ n - <int> ] [ i ] + p [ n ] [ i ] ; <unk> = p [ n - <int> ] [ i ] + p [ n ] [ i + <int> ] ; if ( key1 > <unk> ) { p [ n - <int> ] [ i ] = key1 ; } else p [ n - <int> ] [ i ] = <unk> ; } return trisum ( n - <int> ) ; } } int main ( ) { int t , n , i , j , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { p [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & p [ i ] [ j ] ) ; } sum = trisum ( n ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 125}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 126}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int t , a , b , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 1, "id": 127}
{"input": "int <unk> ( int a [ <int> ] [ <int> ] , int n ) { int i ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ n ] [ i + <int> ] > a [ n ] [ i ] ) a [ n ] [ i ] = a [ n ] [ i + <int> ] ; } } main ( ) { int t , n , j , i , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { <unk> ( a , i ) ; for ( j = <int> ; j < i ; j ++ ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 128}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , ans , ans1 ; scanf ( <str> , & a , & b ) ; if ( a > b ) { ans = a % b ; if ( ans == <int> ) { printf ( <str> , ans , a ) ; } else printf ( <str> , a * b ) ; } else { ans = b % a ; if ( ans == <int> ) printf ( <str> , ans , b ) ; else printf ( <str> , a * b ) ; } } return <int> ; }", "label": 1, "id": 129}
{"input": "int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int i = <int> , p = <int> , l = <int> ; while ( ! ( i > a || i > b ) ) { while ( a % i == <int> && b % i == <int> ) { a /= i ; b /= i ; l *= i ; p *= i ; } i ++ ; } l *= a * b ; printf ( <str> , p , l ) ; } return <int> ; }", "label": 1, "id": 130}
{"input": "typedef long long int ll ; ll gcd ( ll , ll ) ; int main ( ) { ll a , b , t , i , min , max , h , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; max = a > b ? a : b ; min = a < b ? a : b ; h = gcd ( max , min ) ; l = ( a * b ) / h ; printf ( <str> , h , l ) ; } } ll gcd ( ll a , ll b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; }", "label": 0, "id": 131}
{"input": "int sum ( int * p , int maxrow , int rownum , int col , int sum ) ; main ( ) { int testcases , i ; scanf ( <str> , & testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) { int maxrow , * p , j ; scanf ( <str> , & maxrow ) ; int size = ( maxrow * ( maxrow + <int> ) ) / <int> ; p = ( int * ) malloc ( size * sizeof ( int ) ) ; for ( j = <int> ; j < size ; j ++ ) { scanf ( <str> , p + j ) ; } printf ( <str> , sum ( p , maxrow , <int> , <int> , <int> ) ) ; } } int sum ( int * p , int maxrow , int rownum , int col , int sum1 ) { if ( rownum < maxrow ) { int max , i , <unk> , sindex = sum ; <unk> = sindex + rownum ; max = <int> ; for ( i = col ; i <= <unk> ; i ++ ) { int k = sum ( p , maxrow , rownum + <int> , i , sum1 + rownum + <int> ) ; if ( k > max ) { max = k + p [ i ] ; } } return max ; } else { return <int> ; } }", "label": 2, "id": 132}
{"input": "int nextElement ( int i , int l , int n , int * a ) { if ( l != ( n - <int> ) ) { int sum1 = a [ i ] + nextElement ( i + l + <int> , l + <int> , n , a ) ; int sum2 = a [ i ] + nextElement ( i + l + <int> , l + <int> , n , a ) ; return max ( sum1 , sum2 ) ; } else { return a [ i ] ; } } int max ( int sum1 , int sum2 ) { if ( sum1 > sum2 ) return sum1 ; else return sum2 ; } int main ( ) { unsigned int n ; scanf ( <str> , & n ) ; unsigned int len = ( ( n * ( n + <int> ) ) / <int> ) ; unsigned int a [ len ] , i = <int> , l = <int> , sum [ n ] ; while ( i < len ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } i = <int> ; l = <int> ; unsigned val = nextElement ( i , l , n , a ) ; printf ( <str> , val ) ; return <int> ; }", "label": 2, "id": 133}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n = <int> , i = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } int cost = <int> ; cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } }", "label": 0, "id": 134}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int out [ <int> ] , z = <int> ; int i , j , n , k = <int> , p , q ; scanf ( <str> , & n ) ; if ( n <= <int> ) { while ( k < n ) { scanf ( <str> , & j ) ; if ( j < <int> ) { for ( p = <int> ; p < j ; p ++ ) { for ( q = <int> ; q <= p ; q ++ ) { scanf ( <str> , & a [ p ] [ q ] ) ; } } } for ( p = j - <int> ; p >= <int> ; p -- ) { for ( q = <int> ; q <= p ; q ++ ) { if ( a [ p + <int> ] [ q ] > a [ p + <int> ] [ q + <int> ] ) { a [ p ] [ q ] = a [ p + <int> ] [ q ] + a [ p ] [ q ] ; } else { a [ p ] [ q ] = a [ p ] [ q ] + a [ p + <int> ] [ q + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; k ++ ; } } return <int> ; }", "label": 1, "id": 135}
{"input": "int arr [ <int> ] ; int main ( ) { int j , i , t , n , min , l , k , sum ; scanf ( <str> , & t ) ; for ( l = <int> ; l <= t ; l ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > arr [ i ] ) { min = arr [ i ] ; } } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 136}
{"input": "unsigned long rec_func ( int , int ) ; int mat [ <int> ] [ <int> ] , no_of_lines ; int main ( ) { int i , j , k , t , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & no_of_lines ) ; for ( j = <int> ; j < no_of_lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & n ) ; mat [ j ] [ k ] = n ; } } printf ( <str> , rec_func ( <int> , <int> ) ) ; } return <int> ; } unsigned long rec_func ( int i , int j ) { unsigned long sum1 , sum2 ; if ( i < no_of_lines && j < no_of_lines ) { sum1 = rec_func ( i + <int> , j ) ; sum2 = rec_func ( i + <int> , j + <int> ) ; if ( sum1 > sum2 ) return sum1 + mat [ i ] [ j ] ; else return sum2 + mat [ i ] [ j ] ; } else return <int> ; }", "label": 2, "id": 137}
{"input": "int main ( ) { int i , j , t , n , k , p , q , r , s , temp , temp1 ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( r = <int> ; r < n ; r ++ ) for ( s = <int> ; s <= r ; s ++ ) { scanf ( <str> , & a [ r ] [ s ] ) ; } for ( p = ( n - <int> ) ; p >= <int> ; p -- ) for ( q = <int> ; q <= p ; q ++ ) { temp = a [ p ] [ q ] + a [ p + <int> ] [ q ] ; temp1 = a [ p ] [ q ] + a [ p + <int> ] [ q + <int> ] ; if ( temp > temp1 ) a [ p ] [ q ] = temp ; else a [ p ] [ q ] = temp1 ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 138}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int n , min ; scanf ( <str> , & n ) ; min = INT_MAX ; int j ; int * a = ( int * ) malloc ( n * sizeof ( n ) ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( min > a [ j ] ) min = a [ j ] ; } unsigned long long x = min * ( n - <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 139}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] = { <int> } ; int i , j , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else b [ i ] [ j ] = ( b [ i - <int> ] [ j - <int> ] > b [ i - <int> ] [ j ] ) ? ( b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ) : ( b [ i - <int> ] [ j ] + a [ i ] [ j ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) if ( b [ n - <int> ] [ j ] > b [ n - <int> ] [ j ++ ] ) b [ n - <int> ] [ j ++ ] = b [ n - <int> ] [ j ] ; printf ( <str> , b [ n - <int> ] [ n - <int> ] ) ; } return <int> ; }", "label": 1, "id": 140}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long a , b , n1 , n2 ; scanf ( <str> , & a , & b ) ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 0, "id": 141}
{"input": "int main ( ) { int t ; sf ( t ) ; while ( t -- ) { int n , i , j , k , flag1 = <int> , flag2 = <int> , count = <int> ; sf ( n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) sf ( a [ i ] ) ; count += n ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) { count ++ ; } else break ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 142}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int j , t , a , b , temp , c ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; ++ j ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } c = gcd ( a , b ) ; printf ( <str> , c , ( a * b ) / c ) ; } return <int> ; }", "label": 1, "id": 143}
{"input": "int main ( ) { int i , n , min , num ; printf ( <str> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; scanf ( <str> , & min ) ; for ( i = <int> ; i <= n ; i ++ ) { printf ( <str> , i ) ; scanf ( <str> , & num ) ; if ( min > num ) { min = num ; } } printf ( <str> , min ) ; return <int> ; }", "label": 1, "id": 144}
{"input": "unsigned long long int lcm ( unsigned long long int * a ) ; unsigned long long int gcd ( unsigned long long int * a ) ; unsigned long long int min ( unsigned long long int * a ) ; int main ( ) { unsigned long long int w , i , j , k , t , y , z , x ; unsigned long long int a [ <int> ] ; scanf ( <str> , & w ) ; unsigned long long int g [ w ] , l [ w ] ; for ( j = <int> ; j < w ; j ++ ) { for ( i = <int> ; i < <int> ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } g [ j ] = gcd ( a ) ; l [ j ] = lcm ( a ) ; } for ( j = <int> ; j < w ; j ++ ) { printf ( <str> , g [ j ] , l [ j ] ) ; } return ( <int> ) ; } unsigned long long int lcm ( unsigned long long int * a ) { unsigned long long int i , z , t , y ; if ( a [ <int> ] < a [ <int> ] ) { for ( i = a [ <int> ] ; i <= a [ <int> ] * a [ <int> ] ; i ++ ) { t = i % a [ <int> ] ; y = i % a [ <int> ] ; if ( ( t == <int> ) && ( y == <int> ) ) { z = i ; break ; } } } else { for ( i = a [ <int> ] ; i <= a [ <int> ] * a [ <int> ] ; i ++ ) { t = i % a [ <int> ] ; y = i % a [ <int> ] ; if ( ( t == <int> ) && ( y == <int> ) ) { z = i ; break ; } } } return ( z ) ; } unsigned long long int gcd ( unsigned long long int * a ) { unsigned long long int i , t , y , z ; for ( i = <int> ; i <= min ( a ) ; i ++ ) { t = a [ <int> ] % i ; y = a [ <int> ] % i ; if ( ( t == <int> ) && ( y == <int> ) ) { z = i ; } } return ( z ) ; } unsigned long long int min ( unsigned long long int * a ) { unsigned long long int i ; unsigned long long int min = a [ <int> ] ; for ( i = <int> ; i < <int> ; i ++ ) { if ( a [ i ] < min ) { a [ i ] = min ; } } return ( min ) ; }", "label": 2, "id": 145}
{"input": "int main ( ) { int i , j , k , n , r , a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] , max ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( ( j == <int> ) && ( k == <int> ) ) s [ j ] [ k ] = a [ j ] [ k ] ; else if ( k == <int> ) s [ j ] [ k ] = a [ j ] [ k ] + s [ j - <int> ] [ k ] ; else if ( k == j ) s [ j ] [ k ] = a [ j ] [ k ] + s [ j - <int> ] [ k - <int> ] ; else { max = s [ j - <int> ] [ k ] > s [ j - <int> ] [ k - <int> ] ? s [ j - <int> ] [ k ] : s [ j - <int> ] [ k - <int> ] ; s [ j ] [ k ] = a [ j ] [ k ] + max ; } } } max = <int> ; for ( j = <int> ; j < r ; j ++ ) if ( s [ r - <int> ] [ j ] > max ) max = s [ r - <int> ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 146}
{"input": "int main ( ) { int t ; long int a , b , gcd , lcm , num , den , rem ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = rem ; lcm = a * b / gcd ; printf ( <str> , lcm , gcd ) ; } return <int> ; }", "label": 3, "id": 147}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; int i ; int size = <int> ; int array [ <int> ] ; int j ; int count ; int nd ; int ans [ n ] ; int a = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & size ) ; for ( j = <int> ; j < size ; j ++ ) { scanf ( <str> , & array [ j ] ) ; } count = <int> ; nd = <int> ; for ( j = <int> ; j < size ; j ++ ) { if ( j == size - <int> ) { if ( array [ size - <int> ] >= array [ size - <int> ] ) { nd += ( count * ( count + <int> ) ) / <int> ; } else nd += <int> ; } else { if ( array [ j + <int> ] >= array [ j ] ) count ++ ; else { nd += ( count * ( count + <int> ) ) / <int> ; count = <int> ; } } } ans [ a ] = nd ; a ++ ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return <int> ; }", "label": 3, "id": 148}
{"input": "int read_int ( ) { char c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; int ret = <int> ; while ( c >= <char> && c <= <char> ) { ret = <int> * ret + c - <int> ; c = gc ( ) ; } return ret ; } int main ( ) { int t ; t = read_int ( ) ; while ( t -- ) { int n ; n = read_int ( ) ; int a , i ; long long int min ; for ( i = <int> ; i < n ; i ++ ) { a = read_int ( ) ; if ( i == <int> ) { min = a ; } else if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 149}
{"input": "int * p [ <int> ] , n ; int fun ( int x , int cnt ) { if ( cnt == n ) return <int> ; return max ( ( p [ cnt ] [ x ] + fun ( x , cnt + <int> ) ) , ( p [ cnt ] [ x ] + fun ( x + <int> , cnt + <int> ) ) ) ; } main ( ) { int t , i , j , k , num ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { scanf ( <str> , & num ) ; p [ i ] [ j ] = num ; } } printf ( <str> , fun ( <int> , <int> ) ) ; } }", "label": 2, "id": 150}
{"input": "int gcd ( int a , int b ) { int t ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } return a ; } int main ( ) { int t ; int a ; int b ; int GCD ; long long int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; GCD = gcd ( a , b ) ; lcm = ( a * b ) / GCD ; printf ( <str> , GCD , lcm ) ; } return <int> ; }", "label": 1, "id": 151}
{"input": "int gcd ( int a , int b ) { if ( a % b != <int> ) return gcd ( b , a % b ) ; return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int m , n , g , l ; scanf ( <str> , & m , & n ) ; if ( m > n ) g = gcd ( m , n ) ; else g = gcd ( n , m ) ; l = m * n / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 152}
{"input": "int main ( ) { int test_case , size , i ; int temp , min , result ; scanf ( <str> , & test_case ) ; while ( test_case -- ) { scanf ( <str> , & size ) ; scanf ( <str> , & min ) ; for ( i = <int> ; i < size - <int> ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < min ) { min = temp ; } } result = min * ( size - <int> ) ; printf ( <str> , result ) ; } return <int> ; }", "label": 0, "id": 153}
{"input": "void main ( ) { int t , a , b , gcd , lcm ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd = <int> ; lcm = a * b ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 154}
{"input": "int main ( void ) { int cases , counter ; scanf ( <str> , & cases ) ; for ( counter = <int> ; counter < cases ; counter ++ ) { int lines , inner , outer , input , <unk> = <int> , <unk> = <int> ; scanf ( <str> , & lines ) ; for ( outer = <int> ; outer < lines ; outer ++ ) { for ( inner = <int> ; inner <= outer ; inner ++ ) { scanf ( <str> , & input ) ; if ( inner == <int> ) <unk> += input ; if ( inner == outer ) <unk> += input ; } } printf ( <str> , ( <unk> > <unk> ) ? <unk> : <unk> ) ; } return <int> ; }", "label": 1, "id": 155}
{"input": "long int gcd ( long long int x , long long int y ) { long long int temp ; while ( y % x != <int> ) { temp = x ; x = y % x ; y = temp ; } return x ; } int main ( ) { long long int x , y , l , g , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; g = gcd ( x , y ) ; l = x * y / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 156}
{"input": "int arr [ <int> ] [ <int> ] ; int main ( ) { int i , j , k , row , col , test ; scanf ( <str> , & test ) ; for ( k = <int> ; k < test ; k ++ ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = row - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 157}
{"input": "int main ( ) { long long int T , N , m ; scanf ( <str> , & T ) ; for ( int j = <int> ; j <= T ; j ++ ) { int c = <int> ; scanf ( <str> , & N ) ; int * a = ( int * ) malloc ( N * sizeof ( int ) ) ; for ( int i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) m = a [ i ] ; else if ( a [ i ] < m ) m = a [ i ] ; } printf ( <str> , m * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 158}
{"input": "int gcd ( int x , int y ) { if ( y > x ) { y = y + x ; x = y - x ; y = y - x ; } if ( ! ( x % y ) ) { return y ; } else { gcd ( y , x % y ) ; } } int main ( ) { int tst , i , j ; scanf ( <str> , & tst ) ; for ( i = <int> ; i < tst ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; long int hcf = gcd ( a , b ) ; long int lcm = a * ( b / hcf ) ; printf ( <str> , hcf , lcm ) ; } }", "label": 0, "id": 159}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , sum = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] , b [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; b [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) b [ i ] = b [ i - <int> ] + <int> ; else b [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) sum = sum + b [ i ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 160}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j , max1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int dp [ <int> ] [ <int> ] = { <int> } ; dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) dp [ i ] [ j ] = dp [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( j == i ) dp [ i ] [ j ] = dp [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else dp [ i ] [ j ] = max ( dp [ i - <int> ] [ j - <int> ] , dp [ i - <int> ] [ j ] ) + a [ i ] [ j ] ; } } max1 = dp [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( dp [ n - <int> ] [ i ] > max1 ) max1 = dp [ n - <int> ] [ i ] ; printf ( <str> , max1 ) ; } return <int> ; }", "label": 0, "id": 161}
{"input": "int main ( ) { int a , b , t , i , hcf , lcm , x , y , k ; scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; if ( b < a ) { t = b ; b = a ; a = t ; } while ( a > <int> ) { t = a ; a = b % a ; b = t ; } hcf = b ; lcm = ( x * y ) / b ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 162}
{"input": "void merge ( long long int , long long int , long long int ) ; void mergesort ( long long int , long long int ) ; long long int a [ <int> ] ; int main ( void ) { long long int n , t , sum , i ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; mergesort ( <int> , n - <int> ) ; printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; } void mergesort ( long long int start , long long int end ) { long long int mid ; if ( start < end ) { mid = ( start + end - <int> ) / <int> ; mergesort ( start , mid ) ; mergesort ( mid + <int> , end ) ; merge ( start , mid , end ) ; } } void merge ( long long int start , long long int mid , long long int end ) { long long int l [ <int> ] , r [ <int> ] , n1 , n2 , i , j , k ; n1 = mid - start + <int> ; n2 = end - mid ; for ( i = <int> ; i < n1 ; i ++ ) l [ i ] = a [ start + i ] ; for ( i = <int> ; i < n2 ; i ++ ) r [ i ] = a [ i + mid + <int> ] ; i = j = <int> ; k = start ; while ( i < n1 && j < n2 ) { if ( l [ i ] < r [ j ] ) { a [ k ] = l [ i ] ; i ++ ; } else { a [ k ] = r [ j ] ; j ++ ; } k ++ ; } while ( i < n1 ) { a [ k ] = l [ i ] ; i ++ ; k ++ ; } while ( j < n2 ) { a [ k ] = r [ j ] ; j ++ ; k ++ ; } }", "label": 0, "id": 163}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , min , i , x ; scanf ( <str> , & n , & min ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; if ( x < min ) min = x ; } printf ( <str> , ( n - <int> ) * ( long long ) min ) ; } return <int> ; }", "label": 0, "id": 164}
{"input": "int maxCal ( int * , int , int , int ) ; int sum_M [ <int> ] = { <int> } ; int main ( ) { int a [ <int> ] ; int n , i = <int> , row , j = <int> , tot = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & row ) ; tot = row * ( row + <int> ) / <int> ; for ( j = <int> ; j < tot ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } printf ( <str> , maxCal ( a , row , <int> , <int> ) ) ; } return <int> ; } int maxCal ( int * a , int n , int in , int nl ) { int sum = <int> , sum1 = <int> , temp = <int> ; if ( nl == n - <int> ) return a [ in ] ; temp = in + nl ; nl = nl + <int> ; if ( sum_M [ in ] == <int> ) { sum1 = a [ in ] + maxCal ( a , n , temp , nl ) ; sum = a [ in ] + maxCal ( a , n , temp + <int> , nl ) ; if ( sum > sum1 ) { sum_M [ in ] = sum ; return sum ; } sum_M [ in ] = sum1 ; return sum1 ; } else { return sum_M [ in ] ; } }", "label": 3, "id": 165}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int i , t , x , y , a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = gcd ( a , b ) ; y = lcm ( a , b ) ; printf ( <str> , x , y ) ; } return <int> ; }", "label": 1, "id": 166}
{"input": "int main ( ) { int t ; int a , b , l , g , r ; scanf ( <str> , & t ) ; while ( t -- ) { r = - <int> ; scanf ( <str> , & a , & b ) ; g = a > b ? a : b ; l = a < b ? a : b ; while ( r != <int> ) { r = g % l ; g = l ; l = r ; } printf ( <str> , g ) ; printf ( <str> , ( a / g ) * b ) ; } return <int> ; }", "label": 1, "id": 167}
{"input": "int main ( ) { int t , a , b , gcd , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( <int> ) { a = a % b ; if ( a == <int> ) { gcd = b ; break ; } b = b % a ; if ( b == <int> ) { gcd = a ; break ; } } printf ( <str> , gcd , ( m * n ) / gcd ) ; } return <int> ; }", "label": 1, "id": 168}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 169}
{"input": "int main ( ) { int t , a , b , s , x , y , l , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { s = b ; b = a % b ; a = s ; } g = a ; l = ( x * y ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 170}
{"input": "int max ( int c , int b ) { return c > b ? c : b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , ar [ <int> ] [ <int> ] , maxi ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) ar [ i ] [ j ] += ( ar [ i + <int> ] [ j ] > ar [ i + <int> ] [ j + <int> ] ? ar [ i + <int> ] [ j ] : ar [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , ar [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 171}
{"input": "int arr [ <int> ] [ <int> ] ; int main ( ) { int t , n , i , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; else if ( j == i ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; else { arr [ i ] [ j ] += arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ; } } } for ( i = <int> , max = <int> ; i < n ; i ++ ) max = max > arr [ n - <int> ] [ i ] ? max : arr [ n - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 172}
{"input": "int gcd ( int a , int b ) { int rem = b % a ; if ( rem == <int> ) return a ; else return gcd ( rem , a ) ; } void main ( ) { int n , i , r [ <int> ] , lcm [ <int> ] , a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) r [ i ] = gcd ( a , b ) ; else r [ i ] = gcd ( b , a ) ; lcm [ i ] = ( a * b ) / r [ i ] ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , lcm [ i ] , r [ i ] ) ; }", "label": 3, "id": 173}
{"input": "int main ( ) { unsigned long n , i , x , y , a , b , t ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x , & y ) ; if ( x > y ) { a = x ; b = y ; } else { a = y ; b = x ; } while ( b != <int> ) { t = b ; b = a % b ; a = t ; } printf ( <str> , a , ( x * y ) / a ) ; } return <int> ; }", "label": 0, "id": 174}
{"input": "int <unk> [ <int> ] [ <int> ] , elements , maxy ; void solve ( int i , int j , int sum ) { if ( i + <int> == elements ) { if ( sum > maxy ) { maxy = sum ; } return ; } solve ( i + <int> , j , sum + <unk> [ i + <int> ] [ j ] ) ; solve ( i + <int> , j + <int> , sum + <unk> [ i + <int> ] [ j + <int> ] ) ; } int main ( ) { int testcases ; scanf ( <str> , & testcases ) ; int i , j , k ; for ( i = <int> ; i < testcases ; i ++ ) { scanf ( <str> , & elements ) ; for ( j = <int> ; j < elements ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & <unk> [ j ] [ k ] ) ; maxy = <int> ; solve ( <int> , <int> , <unk> [ <int> ] [ <int> ] ) ; printf ( <str> , maxy ) ; } return <int> ; }", "label": 2, "id": 175}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int x , x1 , y1 , y , j , lcm ; scanf ( <str> , & x , & y ) ; x1 = x ; y1 = y ; while ( x != y ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } lcm = ( x1 * y1 ) / x ; printf ( <str> , x , lcm ) ; } return <int> ; }", "label": 1, "id": 176}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , min ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = min + a [ i ] ; a [ i ] = min - a [ i ] ; min = min - a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 177}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int min ( int x , int y ) { if ( x < y ) return x ; else return y ; } int main ( void ) { int i , t , a , b , x , y , gcd , lcm , m , r ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a , y = b ; a = max ( a , b ) ; m = min ( a , b ) ; r = a % b ; while ( a % b ) { a = m , b = r ; if ( a % b == <int> ) gcd = b ; else r = a % b ; m = min ( a , b ) ; } lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 178}
{"input": "int main ( ) { int aa [ <int> ] [ <int> ] ; int i , j , n , d ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & d ) ; for ( i = <int> ; i < d ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , aa [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < n - <int> ; j ++ ) if ( aa [ i ] [ j ] < aa [ i ] [ j + <int> ] ) aa [ i - <int> ] [ j ] = aa [ i ] [ j + <int> ] + aa [ i - <int> ] [ j ] ; else aa [ i - <int> ] [ j ] = aa [ i ] [ j ] + aa [ i - <int> ] [ j ] ; printf ( <str> , & aa [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 179}
{"input": "int rows = <int> ; int sum [ <int> ] ; int max ; int a [ <int> ] [ <int> ] ; void maximumsumbinarytree ( int line , int col ) { if ( line != rows ) { if ( line != <int> ) { * ( sum + line ) = * ( sum + line - <int> ) + * ( * ( a + line ) + col ) ; } else { * sum = * * a ; } maximumsumbinarytree ( line + <int> , col + <int> ) ; maximumsumbinarytree ( line + <int> , col ) ; } else { if ( sum [ line - <int> ] > max ) { max = sum [ line - <int> ] ; } } } int main ( ) { int test , i , j ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & rows ) ; max = <int> ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , ( * ( a + i ) + j ) ) ; } maximumsumbinarytree ( <int> , <int> ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 180}
{"input": "int main ( ) { int t , i , m , n , j , gcd , a ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m , & n ) ; for ( j = <int> ; j <= m && j <= n ; j ++ ) { if ( m % j == <int> && n % j == <int> ) { gcd = j ; } } a = m > n ? m : n ; while ( <int> ) { if ( a % m == <int> && a % n == <int> ) { break ; } a ++ ; } printf ( <str> , gcd , a ) ; } return <int> ; }", "label": 2, "id": 181}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 0, "id": 182}
{"input": "int main ( ) { int k , i , t , n , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ i - <int> ] [ j ] ) ; } } return <int> ; }", "label": 1, "id": 183}
{"input": "int main ( int argc , char * argv [ ] ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; long int mini = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( mini > a [ j ] ) mini = a [ j ] ; } long long int cost ; cost = mini * ( n - <int> ) ; printf ( <str> , cost ) ; } }", "label": 1, "id": 184}
{"input": "int main ( ) { int t , n , i , j , sum , ans ; scanf ( <str> , & t ) ; if ( t > <int> ) exit ( <int> ) ; while ( t -- > <int> ) { sum = <int> ; ans = <int> ; scanf ( <str> , & n ) ; if ( n > <int> ) exit ( <int> ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] ) ; sum = sum + arr [ i ] ; ans = sum / <int> ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 185}
{"input": "int main ( int argc , char * argv [ ] ) { int t , i , j , n , max , temp ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } i = n - <int> ; while ( i > <int> ) { if ( a [ i ] > a [ i - <int> ] ) { max = max + a [ i - <int> ] ; a [ i ] = - <int> ; i -- ; } else if ( a [ i ] < a [ i - <int> ] ) { max = max + a [ i ] ; temp = a [ i ] ; a [ i ] = a [ i - <int> ] ; a [ i - <int> ] = temp ; i -- ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 186}
{"input": "int main ( ) { int T , N , i , temp1 , temp2 , j , max ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & N ) ; int A [ N + <int> ] [ N + <int> ] , S [ N + <int> ] [ N + <int> ] ; for ( i = <int> , max = <int> ; i <= N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } if ( i == <int> ) { S [ i ] [ <int> ] = A [ i ] [ <int> ] ; if ( S [ i ] [ <int> ] > max ) max = S [ i ] [ <int> ] ; } else { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { S [ i ] [ j ] = S [ i - <int> ] [ j ] + A [ i ] [ j ] ; } else if ( j == i ) { S [ i ] [ j ] = S [ i - <int> ] [ j - <int> ] + A [ i ] [ j ] ; } else { temp1 = S [ i - <int> ] [ j ] + A [ i ] [ j ] ; temp2 = S [ i - <int> ] [ j - <int> ] + A [ i ] [ j ] ; if ( temp1 > temp2 ) S [ i ] [ j ] = temp1 ; else S [ i ] [ j ] = temp2 ; } if ( S [ i ] [ j ] > max ) max = S [ i ] [ j ] ; } } } printf ( <str> , max ) ; T -- ; } return <int> ; }", "label": 0, "id": 187}
{"input": "int a [ <int> ] [ <int> ] ; int max = - <int> ; int read_int ( ) { char c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; int ret = <int> ; while ( c >= <char> && c <= <char> ) { ret = <int> * ret + c - <int> ; c = gc ( ) ; } return ret ; } void calculate ( int i , int j , int n , int sum ) { int newSum ; if ( ( i >= <int> && i <= n - <int> ) && ( j >= <int> && j <= i ) ) { newSum = sum + a [ i ] [ j ] ; if ( newSum > max ) max = newSum ; calculate ( i + <int> , j , n , newSum ) ; calculate ( i + <int> , j + <int> , n , newSum ) ; } } int main ( void ) { int t , n , i , j ; t = read_int ( ) ; while ( t -- ) { n = read_int ( ) ; max = - <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = read_int ( ) ; } } calculate ( <int> , <int> , n , <int> ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 188}
{"input": "int main ( ) { int row , test , col , number , array [ <int> ] [ <int> ] ; scanf ( <str> , & test , & number ) ; while ( test -- ) { for ( row = <int> ; row < number ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { scanf ( <str> , & array [ row ] [ col ] ) ; } } for ( row = number - <int> ; row >= <int> ; row -- ) { for ( col = <int> ; col < row ; col ++ ) { if ( array [ row ] [ col ] < array [ row ] [ col + <int> ] ) array [ row - <int> ] [ col ] = array [ row - <int> ] [ col ] + array [ row ] [ col + <int> ] ; else array [ row - <int> ] [ col ] = array [ row - <int> ] [ col ] + array [ row ] [ col ] ; } } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 189}
{"input": "int main ( ) { int * p , * q ; int * r , * s ; int i , n , j , k ; scanf ( <str> , & n ) ; q = ( int * ) malloc ( sizeof ( int ) * ( n + <int> ) ) ; p = ( int * ) malloc ( sizeof ( int ) * ( n + <int> ) ) ; r = ( int * ) malloc ( sizeof ( int ) * ( n + <int> ) ) ; s = ( int * ) malloc ( sizeof ( int ) * ( n + <int> ) ) ; for ( i = <int> ; i <= ( n ) ; i ++ ) { scanf ( <str> , & p [ i ] , & q [ i ] ) ; } k = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( p [ i ] < q [ i ] ) { for ( j = p [ i ] ; j >= <int> ; ) { if ( ( p [ i ] % j == <int> ) && ( q [ i ] % j == <int> ) ) { s [ i ] = j ; break ; } k ++ ; j = p [ i ] ; j = j / k ; } } else { for ( j = q [ i ] ; j >= <int> ; ) { if ( ( p [ i ] % j == <int> ) && ( q [ i ] % j == <int> ) ) { s [ i ] = j ; break ; } k ++ ; j = q [ i ] ; j = j / k ; } } } k = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( p [ i ] > q [ i ] ) { for ( j = p [ i ] ; j <= ( p [ i ] * q [ i ] ) ; ) { if ( ( j % p [ i ] == <int> ) && ( j % q [ i ] == <int> ) ) { r [ i ] = j ; break ; } k ++ ; j = p [ i ] ; j = j * k ; } } if ( p [ i ] <= q [ i ] ) { for ( j = q [ i ] ; j <= ( p [ i ] * q [ i ] ) ; ) { if ( ( j % p [ i ] == <int> ) && ( j % q [ i ] == <int> ) ) { r [ i ] = j ; break ; } k ++ ; j = q [ i ] ; j = j * k ; } } } for ( i = <int> ; i <= ( n ) ; i ++ ) { printf ( <str> , s [ i ] , r [ i ] ) ; } return <int> ; }", "label": 1, "id": 190}
{"input": "int arrcost ( int [ ] , int ) ; int main ( ) { int n , i , j , a [ <int> ] , cost = <int> , temp ; printf ( <str> ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , i + <int> ) ; scanf ( <str> , & a [ i ] ) ; } while ( n != <int> ) { for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { cost += a [ i ] ; temp = a [ i + <int> ] ; a [ i + <int> ] = a [ n - <int> ] ; a [ n - <int> ] = temp ; } else { cost += a [ i + <int> ] ; temp = a [ i ] ; a [ i ] = a [ n - <int> ] ; a [ n - <int> ] = temp ; } n = n - <int> ; } } temp = a [ <int> ] ; printf ( <str> , temp ) ; }", "label": 1, "id": 191}
{"input": "int main ( ) { long long int i , r , a , b , gcd , lcm , temp ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; a = abs ( a ) ; b = abs ( b ) ; if ( a == <int> || b == <int> ) lcm = <int> ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; r = a * b ; lcm = r / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 192}
{"input": "int main ( ) { long t , i , n1 , n2 , min , min1 , j , count = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { count = <int> ; scanf ( <str> , & n1 , & n2 ) ; min = ( n1 > n2 ) ? n1 : n2 ; min1 = min ; for ( j = <int> ; j <= ( n1 / <int> ) && j <= ( n2 / <int> ) ; j ++ ) { if ( n1 % j == <int> && n2 % j == <int> ) { count ++ ; } } if ( count == <int> ) printf ( <str> , <int> ) ; else printf ( <str> , j - <int> ) ; if ( n1 % n2 == <int> ) printf ( <str> , n1 ) ; else if ( n2 % n1 == <int> ) printf ( <str> , n2 ) ; else { while ( <int> ) { if ( min % n1 == <int> && min % n2 == <int> ) { printf ( <str> , min ) ; break ; } min = min1 + min ; } } } return <int> ; }", "label": 2, "id": 193}
{"input": "int main ( ) { int cas , lines , i , j , k = <int> , arr [ <int> ] , b [ <int> ] , sum , l , max , flag , temp ; scanf ( <str> , & cas ) ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < cas ; i ++ ) { for ( j = <int> ; j <= lines ; j ++ ) { flag = <int> ; sum = <int> ; for ( k = <int> ; k < j ; k ++ ) { scanf ( <str> , & arr [ k ] ) ; printf ( <str> ) ; if ( flag == j ) printf ( <str> ) ; flag ++ ; sum = sum + arr [ k ] ; } b [ j ] = sum ; printf ( <str> , sum ) ; } for ( j = <int> ; j <= lines ; j ++ ) { printf ( <str> , b [ j ] ) ; printf ( <str> ) ; } printf ( <str> ) ; max = b [ <int> ] ; for ( l = <int> ; l <= lines ; l ++ ) { if ( b [ l ] > max ) { temp = b [ l ] ; b [ l ] = max ; max = temp ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 194}
{"input": "int main ( ) { int t , a , b , gcd , lcm , min ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; } else { min = a ; } for ( ; min >= <int> ; min -- ) { if ( a % min == <int> && b % min == <int> ) { gcd = min ; break ; } } printf ( <str> , gcd ) ; lcm = ( a * b ) / ( gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 195}
{"input": "int fun ( ) { int i = <int> ; char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) { i = i * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return i ; } int main ( ) { int tc , nor , arr [ SIZE ] [ SIZE ] , j , i ; tc = fun ( ) ; while ( tc -- ) { nor = fun ( ) ; for ( i = <int> ; i < nor ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = fun ( ) ; for ( i = nor - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) arr [ i ] [ j ] += ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 196}
{"input": "int a [ <int> ] [ <int> ] ; int scan ( ) { int n = <int> ; char c ; c = getchar_unlocked ( ) ; while ( ( c >= <char> ) && ( c <= <char> ) ) { n = ( n << <int> ) + ( n << <int> ) + c - <char> ; c = getchar_unlocked ( ) ; } return n ; } int max ( int x , int y ) { int ret = ( x > y ) ? x : y ; return ret ; } int main ( ) { int n , i , j , k ; int lines ; n = scan ( ) ; for ( i = <int> ; i < n ; i ++ ) { lines = scan ( ) ; for ( j = <int> ; j <= lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { a [ j ] [ k ] = scan ( ) ; } } for ( j = lines - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { a [ j ] [ k ] += max ( a [ j + <int> ] [ k ] , a [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return ( <int> ) ; }", "label": 1, "id": 197}
{"input": "int main ( ) { int t ; long long int a , b , c , d , r , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a ; d = b ; while ( a % b != <int> ) { r = a % b ; a = b ; b = r ; } g = b ; l = ( c * d ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 198}
{"input": "long gcd ( long a , long b ) { if ( a % b == <int> ) return b ; gcd ( b , a % b ) ; } int main ( void ) { long T , LCM [ <int> ] , GCD [ <int> ] , i , a , b ; do { scanf ( <str> , & T ) ; } while ( T > <int> && T < <int> ) ; for ( i = <int> ; i < T ; i ++ ) { do { scanf ( <str> , & a , & b ) ; } while ( a < <int> && a > <int> && b < <int> && b > <int> ) ; GCD [ i ] = gcd ( a , b ) ; LCM [ i ] = ( a * b ) / GCD [ i ] ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , GCD [ i ] , LCM [ i ] ) ; return <int> ; }", "label": 0, "id": 199}
{"input": "long int gcd ( long int a , long int b ) { if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 0, "id": 200}
{"input": "int main ( ) { int n , i , l , j , k , arr [ <int> ] [ <int> ] , sum ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } sum = arr [ <int> ] [ <int> ] ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( arr [ j + <int> ] [ k ] >= arr [ j ] [ k ] ) sum = sum + arr [ j + <int> ] [ k ] ; else if ( arr [ j + <int> ] [ k + <int> ] > arr [ j ] [ k ] ) sum = sum + arr [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 201}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- > <int> ) { int nlevel ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & nlevel ) ; int mx = <int> ; int n = <int> ; int prev , next ; prev = <int> ; next = <int> ; while ( n < nlevel ) { int i ; int tmp ; for ( i = <int> ; i <= n ; ++ i ) { int num ; scanf ( <str> , & num ) ; if ( i == <int> && n == <int> ) arr [ next ] [ i ] = num ; else if ( i == <int> ) arr [ next ] [ i ] = arr [ prev ] [ i ] + num ; else if ( i == n ) arr [ next ] [ i ] = arr [ prev ] [ i - <int> ] + num ; else arr [ next ] [ i ] = max ( arr [ prev ] [ i ] + num , arr [ prev ] [ i - <int> ] + num ) ; } tmp = prev ; prev = next ; next = tmp ; n ++ ; } for ( n = <int> ; n < nlevel ; ++ n ) if ( arr [ prev ] [ n ] > mx ) mx = arr [ prev ] [ n ] ; printf ( <str> , mx ) ; } return <int> ; }", "label": 0, "id": 202}
{"input": "int main ( ) { int a , b , c , i , j ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b ) ; int a [ b ] ; for ( c = <int> ; c < b ; c ++ ) { scanf ( <str> , & a [ c ] ) ; } long min = a [ <int> ] ; for ( j = <int> ; j < b ; j ++ ) { if ( min >= a [ j ] ) { min = a [ j ] ; } } min = ( long ) min * ( b - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 203}
{"input": "int gcd ( long int a , long int b ) { int min , i , max ; if ( a < b ) { min = a ; max = b ; } else { min = b ; max = a ; } for ( i = min ; i > <int> ; i -- ) { if ( min % i == <int> && max % i == <int> ) { return i ; } } } int lcm ( long int a , long int b ) { long int min , i , max , temp ; if ( a < b ) { min = a ; max = b ; } else { min = b ; max = a ; } for ( i = <int> ; i <= <int> ; i ++ ) { temp = max * i ; if ( temp % min == <int> ) { return temp ; } } } int main ( ) { long int a , b , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 204}
{"input": "int main ( ) { int n , a , b , i , j , min , max , gcd , t , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { min = a ; max = b ; } if ( min == <int> ) gcd = max ; else { for ( j = min ; j > <int> ; j -- ) { if ( max % j == <int> ) gcd = j ; else continue ; } } lcm = max * min / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 205}
{"input": "int main ( ) { int t , b , a , i , g , j ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) g = j ; } printf ( <str> , g , ( a * b ) / g ) ; t -- ; } return <int> ; }", "label": 2, "id": 206}
{"input": "int main ( ) { int T , i , j , p ; long long int N , a [ <int> ] ; scanf ( <str> , & T ) ; while ( T -- ) { int s = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < N ; i ++ ) { j = i + <int> ; { if ( a [ i ] > a [ j ] && j < N ) { s = s + a [ j ] ; } else if ( a [ j ] > a [ i ] && j < N ) { s = s + a [ i ] ; p = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = p ; } } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 207}
{"input": "void main ( ) { int n , n1 , q [ <int> ] [ <int> ] , ans [ <int> ] , cnt , j , r , c ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & n1 ) ; for ( r = <int> ; r < n1 ; r ++ ) { for ( c = <int> ; c <= r ; c ++ ) { scanf ( <str> , & q [ r ] [ c ] ) ; if ( r > <int> ) { if ( r == c ) { q [ r ] [ c ] = q [ r ] [ c ] + q [ r - <int> ] [ c - <int> ] ; } else if ( c > <int> ) { if ( q [ r - <int> ] [ c ] > q [ r - <int> ] [ c - <int> ] ) { q [ r ] [ c ] = q [ r ] [ c ] + q [ r - <int> ] [ c ] ; } else { q [ r ] [ c ] = q [ r ] [ c ] + q [ r - <int> ] [ c - <int> ] ; } } else { q [ r ] [ c ] = q [ r ] [ c ] + q [ r - <int> ] [ c ] ; } if ( cnt < q [ r ] [ c ] ) { cnt = q [ r ] [ c ] ; } } else { cnt = q [ r ] [ c ] ; } } ans [ j ] = cnt ; } } for ( j = <int> ; j < n ; j ++ ) { printf ( <str> , ans [ j ] ) ; } }", "label": 1, "id": 208}
{"input": "long gcd ( long a , long b ) { if ( ! ( b % a ) ) { return a ; } return gcd ( ( b % a ) , a ) ; } int main ( ) { long A , B , T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; printf ( <str> , gcd ( A , B ) , ( A * B ) / gcd ( A , B ) ) ; } return <int> ; }", "label": 0, "id": 209}
{"input": "int main ( ) { int i , n , x , y , a , b , gcd , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b ) { gcd = b ; b = a % b ; } lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 210}
{"input": "struct <unk> { int id ; char name [ <int> ] ; int age ; struct <unk> * next ; } ; typedef struct <unk> node ; node * h [ <int> ] , * p , * q ; int main ( ) { int total , i , id , index , <unk> , del ; for ( i = <int> ; i < <int> ; i ++ ) h [ i ] = NULL ; scanf ( <str> , & total ) ; for ( i = <int> ; i < total ; i ++ ) { scanf ( <str> , & id ) ; index = id % <int> ; if ( h [ index ] == NULL ) { h [ index ] = ( node * ) malloc ( sizeof ( node ) ) ; p = h [ index ] ; p -> id = id ; scanf ( <str> , p -> name , & p -> age ) ; p -> next = NULL ; } else { node * new = ( node * ) malloc ( sizeof ( node ) ) ; p = h [ index ] ; new -> id = id ; scanf ( <str> , new -> name , & new -> age ) ; if ( p -> id <= new -> id ) { h [ index ] = new ; new -> next = p ; } else { while ( p != NULL ) { q = p ; p = p -> next ; if ( p -> id <= new -> id ) { q -> next = new ; new -> next = p ; break ; } } if ( p == NULL ) { q -> next = new ; new -> next = NULL ; } } } } scanf ( <str> , & <unk> , & del ) ; for ( i = <int> ; i < <int> ; i ++ ) { p = h [ i ] ; printf ( <str> ) ; printf ( <str> , i ) ; if ( p == NULL ) { printf ( <str> ) ; continue ; } else { while ( p != NULL ) { printf ( <str> , p -> id , p -> name , p -> age ) ; p = p -> next ; } printf ( <str> ) ; } } printf ( <str> ) ; index = <unk> % <int> ; p = h [ index ] ; printf ( <str> ) ; printf ( <str> , index ) ; while ( p != NULL ) { printf ( <str> , p -> id , p -> name , p -> age ) ; p = p -> next ; } printf ( <str> ) ; printf ( <str> ) ; index = del % <int> ; p = h [ index ] ; printf ( <str> , index ) ; while ( p != NULL ) { if ( p -> id == del ) { p = p -> next ; continue ; } printf ( <str> , p -> id , p -> name , p -> age ) ; p = p -> next ; } printf ( <str> ) ; return <int> ; }", "label": 3, "id": 211}
{"input": "int main ( ) { int t ; long long n , i , a , min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) { min = a ; } } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 212}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int hcf = gcd ( a , b ) ; printf ( <str> , hcf , ( a * b ) / hcf ) ; } return <int> ; }", "label": 0, "id": 213}
{"input": "int main ( ) { int i , j , t , a , b , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { for ( j = <int> ; j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; } } } else if ( b < a ) { for ( j = <int> ; j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; } } } printf ( <str> , gcd , ( a * b / gcd ) ) ; } return <int> ; }", "label": 1, "id": 214}
{"input": "int f1 ( int a [ ] [ <int> ] , int i , int j ) { int n_i , n_j ; if ( i == - <int> || j == - <int> ) { return ( <int> ) ; } else if ( j == <int> ) { return ( a [ i ] [ j ] + f1 ( a , i - <int> , j ) ) ; } else { n_i = i - <int> ; if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) { n_j = j - <int> ; } else { n_j = j ; } return ( a [ i ] [ j ] + f1 ( a , n_i , n_j ) ) ; } } void m ( int a [ ] [ <int> ] , int l ) { int i , j ; for ( i = <int> ; i <= l - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = <int> ; } } } int main ( ) { int a [ <int> ] [ <int> ] ; int i , j , max = - <int> ; int i1 = <int> ; int l ; int t ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & l ) ; for ( i = <int> ; i <= l - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= l - <int> ; i ++ ) { if ( a [ l - <int> ] [ i ] > max ) { max = a [ l - <int> ] [ i ] ; i1 = i ; } } max = f1 ( a , l - <int> , i1 ) ; printf ( <str> , max ) ; max = <int> ; m ( a , l ) ; t -- ; } return <int> ; }", "label": 1, "id": 215}
{"input": "unsigned long GCD ( unsigned long a , unsigned long b ) { unsigned long i = ( a < b ) ? a : b ; for ( i ; i >= <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) return i ; } unsigned long LCM ( unsigned long a , unsigned long b , unsigned long gcd ) { return ( a * b / gcd ) ; } void main ( void ) { unsigned long a , b , lcm , gcd ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = LCM ( a , b , gcd ) ; printf ( <str> , gcd , lcm ) ; }", "label": 1, "id": 216}
{"input": "long int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } long int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { long int a , b , x , y ; scanf ( <str> , & x , & y ) ; printf ( <str> , gcd ( x , y ) , lcm ( x , y ) ) ; t -- ; } }", "label": 1, "id": 217}
{"input": "int i , j ; int maximum ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , a [ MAX ] [ MAX ] , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int dp [ MAX ] [ MAX ] = { <int> } ; dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { dp [ i ] [ j ] = maximum ( dp [ i - <int> ] [ j ] , dp [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } } int sum = dp [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( sum < dp [ n ] [ i ] ) sum = dp [ n ] [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 218}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } void <unk> ( ) { int t , lines , i , j = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { int arr [ <int> ] [ <int> ] ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = lines - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { arr [ i - <int> ] [ j ] += max ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } } int main ( ) { <unk> ( ) ; return <int> ; }", "label": 0, "id": 219}
{"input": "int main ( void ) { long long count , sum = <int> ; int t , n ; register int a , b ; READ_INT ( t ) ; while ( t -- ) { READ_INT ( n ) ; READ_INT ( a ) ; count = <int> ; sum = <int> ; for ( n -- ; n > <int> ; n -- ) { READ_INT ( b ) ; if ( b >= a ) { count ++ ; } else { sum += ( count * ( count + <int> ) >> <int> ) ; count = <int> ; } a = b ; } sum += ( count * ( count + <int> ) >> <int> ) ; WRITE_INT ( sum ) ; putchar ( <char> ) ; } return <int> ; }", "label": 1, "id": 220}
{"input": "main ( ) { int n , t , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 221}
{"input": "int main ( ) { int t , n , i , j , num , sum1 , sum2 , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum1 = <int> ; sum2 = <int> ; scanf ( <str> , & n ) ; if ( n == <int> ) printf ( <str> , <int> ) ; else if ( n == <int> ) { scanf ( <str> , & num ) ; printf ( <str> , num ) ; } else { for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & num ) ; if ( k == <int> ) sum1 += num ; if ( k == j ) sum2 += num ; } } if ( sum1 > sum2 ) printf ( <str> , sum1 ) ; else printf ( <str> , sum2 ) ; } } return <int> ; }", "label": 1, "id": 222}
{"input": "int k , a [ <int> ] ; void delet ( int ) ; int main ( ) { static int cost [ <int> ] ; int n , i , m , t ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; k = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ <int> ] < a [ <int> ] ) { cost [ m ] = cost [ m ] + a [ <int> ] ; delet ( a [ <int> ] ) ; } else { cost [ m ] = cost [ m ] + a [ <int> ] ; delet ( a [ <int> ] ) ; } } } for ( m = <int> ; m < t ; m ++ ) printf ( <str> , cost [ m ] ) ; } void delet ( int b ) { int i ; if ( b == a [ <int> ] ) { for ( i = <int> ; i < k - <int> ; i ++ ) a [ i ] = a [ i + <int> ] ; } else { for ( i = <int> ; i < k - <int> ; i ++ ) a [ i ] = a [ i + <int> ] ; } }", "label": 2, "id": 223}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n1 , n2 , n3 , tmp , l , x1 , x2 ; scanf ( <str> , & n1 , & n2 ) ; x1 = n1 ; x2 = n2 ; if ( n1 > n2 ) { tmp = n1 ; n1 = n2 ; n2 = tmp ; } while ( n2 % n1 != <int> ) { n3 = n1 ; n1 = n2 % n1 ; n2 = n3 ; } l = ( x1 * x2 ) / n1 ; printf ( <str> , n1 , l ) ; } return <int> ; }", "label": 0, "id": 224}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] ; int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 225}
{"input": "long int lcm ( long int , long int ) ; int main ( void ) { long int t , a , b , g , k = <int> , l ; scanf ( <str> , & t ) ; while ( t > k ) { l = <int> ; g = <int> ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; k ++ ; } return <int> ; } int gcd ( long int a , long int b ) { long int c ; while ( a != <int> ) { c = a ; a = b % a ; b = c ; } return b ; }", "label": 0, "id": 226}
{"input": "int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } return a ; } int main ( void ) { int n , i , p , q ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p , & q ) ; printf ( <str> , gcd ( p , q ) , p * q / gcd ( p , q ) ) ; } return <int> ; }", "label": 1, "id": 227}
{"input": "int gcd ( long long int a , long long int b ) ; int main ( ) { long long int t , a , b , hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } int gcd ( long long int a , long long int b ) { long long int dividend = a >= b ? a : b ; long long int divisor = a <= b ? a : b ; while ( divisor != <int> ) { int remainder = dividend % divisor ; dividend = divisor ; divisor = remainder ; } return dividend ; }", "label": 0, "id": 228}
{"input": "int n , tria [ <int> ] [ <int> ] = { <int> } ; int calc ( int i , int j ) { if ( i == n || j == n ) { return <int> ; } else { int m = max ( calc ( i + <int> , j ) , calc ( i + <int> , j + <int> ) ) ; int sum = tria [ i ] [ j ] + m ; return sum ; } } int main ( ) { int t , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tria [ i ] [ j ] ) ; printf ( <str> , calc ( <int> , <int> ) ) ; } }", "label": 2, "id": 229}
{"input": "int main ( ) { long long int a , b , x , y , t , gcd , lcm , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 0, "id": 230}
{"input": "int main ( ) { int n , i , j , x ; long long a [ <int> ] ; long long b [ <int> ] ; long long gcd [ <int> ] ; long long lcm [ <int> ] ; long long c [ <int> ] ; long long d [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; c [ i ] = a [ i ] ; d [ i ] = b [ i ] ; if ( a [ i ] == <int> ) { gcd [ i ] = b [ i ] ; lcm [ i ] = ( a [ i ] * b [ i ] ) / gcd [ i ] ; } else if ( b [ i ] == <int> ) { gcd [ i ] = a [ i ] ; lcm [ i ] = ( a [ i ] * b [ i ] ) / gcd [ i ] ; } else { while ( b [ i ] != <int> ) { x = b [ i ] ; b [ i ] = a [ i ] % b [ i ] ; a [ i ] = x ; } gcd [ i ] = a [ i ] ; lcm [ i ] = ( c [ i ] * d [ i ] ) / gcd [ i ] ; } } for ( j = <int> ; j < n ; j ++ ) { printf ( <str> , gcd [ j ] , lcm [ j ] ) ; } return <int> ; }", "label": 0, "id": 231}
{"input": "int T , N ; int arr [ <int> ] [ <int> ] ; int max ( int t1 , int t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; } int solve ( int i , int j ) { int t , t1 , t2 ; if ( i >= N ) return <int> ; t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + arr [ i ] [ j ] ; return t ; } int main ( void ) { int i , j ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; printf ( <str> , solve ( <int> , <int> ) ) ; T -- ; } return <int> ; }", "label": 2, "id": 232}
{"input": "void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int r , i , j ; scanf ( <str> , & r ) ; int arr [ r ] [ r ] ; for ( i = <int> ; i <= r - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = <int> ; } for ( i = <int> ; i <= r - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( arr [ i ] [ j + <int> ] > arr [ i ] [ j ] ) arr [ i - <int> ] [ j ] += arr [ i ] [ j + <int> ] ; else arr [ i - <int> ] [ j ] += arr [ i ] [ j ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 233}
{"input": "unsigned int tri [ <int> ] [ <int> ] [ <int> ] ; unsigned int val [ <int> ] [ <int> ] ; unsigned int row [ <int> ] ; unsigned int no_case ; unsigned int getvalue ( int cas ) { int i , j ; unsigned int gr = <int> ; val [ <int> ] [ <int> ] = tri [ cas ] [ <int> ] [ <int> ] ; val [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < row [ cas ] ; i ++ ) { val [ i ] [ <int> ] = val [ i - <int> ] [ <int> ] + tri [ cas ] [ i ] [ <int> ] ; } for ( i = <int> ; i < row [ cas ] ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( val [ i - <int> ] [ j - <int> ] < val [ i - <int> ] [ j ] ) val [ i ] [ j ] = val [ i - <int> ] [ j ] + tri [ cas ] [ i ] [ j ] ; else val [ i ] [ j ] = val [ i - <int> ] [ j - <int> ] + tri [ cas ] [ i ] [ j ] ; } if ( j < row [ cas ] ) val [ i ] [ j ] = <int> ; } for ( i = <int> ; i < row [ cas ] ; i ++ ) { if ( gr < val [ row [ cas ] - <int> ] [ i ] ) gr = val [ row [ cas ] - <int> ] [ i ] ; } return gr ; } int main ( ) { int i , j , k ; scanf ( <str> , & no_case ) ; for ( i = <int> ; i < no_case ; i ++ ) { scanf ( <str> , & row [ i ] ) ; for ( j = <int> ; j < row [ i ] ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & tri [ i ] [ j ] [ k ] ) ; } } } for ( i = <int> ; i < no_case ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { for ( k = <int> ; k < <int> ; k ++ ) { val [ j ] [ k ] = <int> ; } } printf ( <str> , getvalue ( i ) ) ; } return <int> ; }", "label": 0, "id": 234}
{"input": "int a [ <int> ] [ <int> ] ; int cache [ <int> ] [ <int> ] ; int sum ( int n , int i , int j ) { if ( i + <int> < n && j + <int> < n ) { if ( cache [ i + <int> ] [ j ] == <int> ) { sum ( n , i + <int> , j ) ; cache [ i + <int> ] [ j ] = <int> ; } if ( cache [ i + <int> ] [ j + <int> ] == <int> ) { sum ( n , i + <int> , j + <int> ) ; cache [ i + <int> ] [ j + <int> ] = <int> ; } if ( cache [ i ] [ j ] == <int> ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; return a [ i ] [ j ] ; } } else return <int> ; } int main ( ) { int i , j , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; cache [ i ] [ j ] = <int> ; } } printf ( <str> , sum ( n , <int> , <int> ) ) ; } return <int> ; }", "label": 1, "id": 235}
{"input": "int main ( ) { int i , j , t , n , a [ <int> ] [ <int> ] ; int x , y , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , a [ i ] [ j ] ) ; } } for ( int i = n - <int> ; i <= <int> ; i -- ) { for ( j = i ; j <= <int> ; j -- ) { x = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; y = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; if ( x > y ) a [ i ] [ j ] = x ; else a [ i ] [ j ] = y ; } } printf ( <str> , a [ i ] [ j ] ) ; } return <int> ; }", "label": 1, "id": 236}
{"input": "int main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 1, "id": 237}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 238}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; if ( a == b ) return a ; if ( a > b ) return ( gcd ( a - b , b ) ) ; return ( gcd ( a , b - a ) ) ; } long long int lcm ( long long int a , long long int b ) { return ( ( a * b ) / gcd ( a , b ) ) ; } int main ( ) { int t ; long long int g , l ; long long int A , B ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & A , & B ) ; g = gcd ( A , B ) ; l = lcm ( A , B ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 239}
{"input": "int Tri [ <int> ] [ <int> ] , RSum [ <int> ] [ <int> ] ; void rootSum ( int , int ) ; int levels = <int> , x = <int> , y = <int> ; int readint ( ) { int cc = getchar ( ) ; for ( ; cc < <char> || cc > <char> ; ) cc = getchar ( ) ; int ret = <int> ; for ( ; cc >= <char> && cc <= <char> ; ) { ret = ret * <int> + cc - <char> ; cc = getchar ( ) ; } return ret ; } int main ( ) { int Input [ <int> ] ; int i , j , k = <int> , iter = <int> , size , t ; t = readint ( ) ; for ( iter = <int> ; iter <= t ; iter ++ ) { k = <int> ; levels = readint ( ) ; size = levels * ( levels + <int> ) / <int> ; for ( i = <int> ; i < size ; i ++ ) Input [ i ] = readint ( ) ; for ( i = <int> ; i <= levels ; i ++ ) { for ( j = i ; j >= <int> ; j -- ) { Tri [ j ] [ i - j + <int> ] = Input [ k ++ ] ; } } for ( i = levels ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { rootSum ( i - j + <int> , j ) ; } } printf ( <str> , RSum [ <int> ] [ <int> ] ) ; } return <int> ; } void rootSum ( int j , int i ) { RSum [ j ] [ i ] = - <int> ; if ( j + i - <int> != levels ) { if ( RSum [ j ] [ i ] < RSum [ j + <int> ] [ i ] + Tri [ j ] [ i ] ) { RSum [ j ] [ i ] = RSum [ j + <int> ] [ i ] + Tri [ j ] [ i ] ; } if ( RSum [ j ] [ i ] < RSum [ j ] [ i + <int> ] + Tri [ j ] [ i ] ) { RSum [ j ] [ i ] = RSum [ j ] [ i + <int> ] + Tri [ j ] [ i ] ; } } else RSum [ j ] [ i ] = Tri [ j ] [ i ] ; }", "label": 0, "id": 240}
{"input": "int main ( ) { int test_cases , t ; int * arr , size ; int prev ; int i , sum ; scanf ( <str> , & test_cases ) ; for ( t = <int> ; t < test_cases ; t ++ ) { sum = <int> ; scanf ( <str> , & size ) ; arr = ( int * ) calloc ( size , sizeof ( int ) ) ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } prev = arr [ <int> ] ; for ( i = <int> ; i < size ; i ++ ) { if ( arr [ i ] <= prev ) { sum += arr [ i ] ; prev = arr [ i ] ; } else { sum += prev ; } } printf ( <str> , sum ) ; free ( arr ) ; } return <int> ; }", "label": 1, "id": 241}
{"input": "int scanInt ( ) { register int retInt = <int> , d ; while ( ( d = getchar ( ) ) >= <char> ) { retInt = ( retInt << <int> ) + ( retInt << <int> ) + ( d - <char> ) ; } return retInt ; } struct node { unsigned int length ; unsigned int * a ; unsigned int * b ; } ; int main ( void ) { register unsigned int testcase = <int> , i = <int> , j = <int> , k = <int> ; unsigned int * ans ; testcase = scanInt ( ) ; if ( testcase <= <int> ) { ans = ( int * ) malloc ( testcase * sizeof ( int ) ) ; for ( i = <int> ; i < testcase ; i ++ ) { struct node c ; c <fp> a = NULL ; c <fp> b = NULL ; c <fp> length = scanInt ( ) ; if ( c <fp> length < <int> ) { for ( j = <int> ; j < c <fp> length ; j ++ ) { c <fp> a = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) { int temp = scanInt ( ) ; if ( temp > <int> && temp < <int> ) { if ( j == <int> ) c <fp> a [ k ] = temp ; else { if ( k == <int> ) { c <fp> a [ k ] = c <fp> b [ k ] + temp ; } else { if ( j == k ) { c <fp> a [ k ] = c <fp> b [ k - <int> ] + temp ; } else { unsigned int total = temp ; unsigned int a1 = ( c <fp> b [ k - <int> ] + total ) ; unsigned int a2 = ( c <fp> b [ k ] + total ) ; c <fp> a [ k ] = ( a1 < a2 ) ? a2 : a1 ; } } } } else exit ( <int> ) ; } c <fp> b = c <fp> a ; c <fp> a = NULL ; } ans [ i ] = <int> ; j = c <fp> length - <int> ; k = <int> ; while ( k < c <fp> length ) { if ( ans [ i ] < c <fp> b [ k ] ) ans [ i ] = c <fp> b [ k ] ; k ++ ; } } else exit ( <int> ) ; } for ( i = <int> ; i < testcase ; i ++ ) { printf ( <str> , ans [ i ] ) ; } } return <int> ; }", "label": 1, "id": 242}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , n , i , j , b [ <int> ] , c = <int> , sum , s , lar , k ; scanf ( <str> , & t ) ; while ( t ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = <int> ; j < n ; j ++ ) { for ( i = j ; i < n ; i ++ ) { sum = sum + a [ i ] [ j ] ; } b [ c ] = sum ; c ++ ; sum = <int> ; } for ( k = <int> ; k < n ; k ++ ) { for ( j = <int> ; j < n ; j ++ ) { s = j ; for ( i = j ; i < n ; i ++ ) { if ( ( i == ( j + k ) ) && ( ( n - j ) != <int> ) ) s = j ++ ; sum = sum + a [ i ] [ s ] ; } b [ c ] = sum ; c ++ ; sum = <int> ; } } lar = b [ <int> ] ; for ( i = <int> ; i < c ; i ++ ) { if ( b [ i ] > lar ) lar = b [ i ] ; } printf ( <str> , lar ) ; t -- ; } return <int> ; }", "label": 3, "id": 243}
{"input": "int main ( ) { int t , gcd , a , b , x , y ; long lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 244}
{"input": "long <unk> ( long sum , int * a , int i , int j , int n ) { long sum1 = <int> , sum2 = <int> ; if ( i >= n ) { return sum ; } sum += a [ i * n + j ] ; sum1 = <unk> ( sum , a , ( i + <int> ) , j , n ) ; sum2 = <unk> ( sum , a , ( i + <int> ) , ( j + <int> ) , n ) ; if ( sum1 > sum2 ) { return sum1 ; } else { return sum2 ; } } int main ( void ) { int test_cases ; int n , i , j ; scanf ( <str> , & test_cases ) ; while ( test_cases -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; long sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = <unk> ( sum , a , <int> , <int> , n ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 245}
{"input": "int n , i , j , k , l , T , n ; long long unsigned int a , b , c ; int main ( ) { scanf ( <str> , & T ) ; long long unsigned int M [ T ] [ <int> ] ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a , & b ) ; c = b ; while ( a % c != <int> || b % c != <int> ) { while ( a % c != <int> ) { c = a % c ; } while ( b % c != <int> ) { c = b % c ; } } M [ i ] [ <int> ] = c ; M [ i ] [ <int> ] = ( a * b ) / c ; } for ( l = <int> ; l < T ; l ++ ) { printf ( <str> , M [ l ] [ <int> ] , M [ l ] [ <int> ] ) ; } }", "label": 0, "id": 246}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm , t , z ; scanf ( <str> , & t ) ; for ( z = <int> ; z < t ; z ++ ) { scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } printf ( <str> , n1 , lcm ) ; } return <int> ; }", "label": 1, "id": 247}
{"input": "int main ( ) { int t , n , sum , i , j , b , c , t1 , t2 , test ; scanf ( <str> , & t ) ; while ( t ) { sum = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( j = <int> ; j < n ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) scanf ( <str> , & a [ j ] [ i ] ) ; } i = n - <int> ; for ( j = <int> ; j < n ; j ++ ) { test = a [ i ] [ j ] ; c = i ; b = j ; while ( c > <int> ) { if ( b == <int> ) test += a [ c - <int> ] [ b ] ; else { t1 = a [ c - <int> ] [ b ] ; t2 = a [ c - <int> ] [ b - <int> ] ; test += ( t1 > t2 ) ? t1 : t2 ; if ( t2 > t1 ) b -- ; } c -- ; } sum = ( test > sum ) ? test : sum ; } printf ( <str> , sum ) ; t -- ; } return <int> ; }", "label": 1, "id": 248}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; int rem , numerator , denominator , gcd , lcm ; for ( int i = <int> ; i < n ; i ++ ) { long int a , b ; scanf ( <str> , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } rem = numerator % denominator ; while ( rem != <int> ) { numerator = denominator ; denominator = rem ; rem = numerator % denominator ; } gcd = denominator ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 249}
{"input": "int fun ( int arr [ ] [ <int> ] , int n , int i , int j ) { int k , l , m , o , p , sum = arr [ i ] [ j ] , max = sum ; if ( i < n - <int> ) { sum = sum + fun ( arr , n , i + <int> , j ) ; if ( sum > max ) max = sum ; sum = arr [ i ] [ j ] ; sum = sum + fun ( arr , n , i + <int> , j + <int> ) ; if ( sum > max ) max = sum ; } return max ; } int main ( ) { int i , j , k , l , n , m , o , p , t ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( o = <int> ; o < t ; o ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } k = fun ( arr , n , <int> , <int> ) ; printf ( <str> , k ) ; } }", "label": 2, "id": 250}
{"input": "main ( ) { int i , t = <int> , a [ <int> ] , n , k , p [ <int> ] , j ; scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < t ) t = a [ j ] ; } p [ i ] = t * ( n - <int> ) ; t = - <int> ; } for ( i = <int> ; i < k ; i ++ ) printf ( <str> , p [ i ] ) ; }", "label": 1, "id": 251}
{"input": "int main ( ) { int n = <int> ; int i = <int> ; int j = <int> ; int k ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i + <int> ; j ++ ) { if ( i > <int> && j > <int> && j != i ) { a [ i ] [ j ] += ( a [ i - <int> ] [ j ] >= a [ i - <int> ] [ j - <int> ] ) ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ; } else if ( i != <int> ) { if ( j == <int> ) { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } else if ( j == i ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } int max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ n - <int> ] [ i ] ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 252}
{"input": "main ( ) { unsigned long int A , B , num , den , rem , i , t ; scanf ( <str> , & t ) ; unsigned long int ans [ t ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { num = A ; den = B ; } else { num = B ; den = A ; } rem = A % B ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } ans [ i ] [ <int> ] = den ; ans [ i ] [ <int> ] = ( A * B ) / ans [ i ] [ <int> ] ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , ans [ i ] [ <int> ] , ans [ i ] [ <int> ] ) ; }", "label": 1, "id": 253}
{"input": "void main ( ) { int n , i , t , arr [ <int> ] ; long long int min = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( min > arr [ i ] ) min = arr [ i ] ; printf ( <str> , ( n - <int> ) * min ) ; } }", "label": 1, "id": 254}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 255}
{"input": "int main ( ) { int T , A , B , i , c , D , a ; D = <int> ; scanf ( <str> , & T ) ; for ( a = <int> ; a < T ; a ++ ) { scanf ( <str> , & A , & B ) ; } for ( a = <int> ; a < T ; a ++ ) { for ( i = <int> ; i < A && i < B ; i ++ ) { if ( A % i == <int> && B % i == <int> ) { c = i ; printf ( <str> , D , c ) ; } } } return <int> ; }", "label": 1, "id": 256}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; int gcd [ n ] , lcm [ n ] , a , b ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd [ i ] = j ; } lcm [ i ] = ( a * b ) / gcd [ i ] ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } return <int> ; }", "label": 2, "id": 257}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , arr [ <int> ] , i , j , count = <int> , old_res , flag = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { flag = <int> ; for ( j = i ; j <= n ; j ++ ) { if ( i == j ) { count = count + <int> ; old_res = arr [ i ] ; } else { if ( arr [ j ] > old_res ) { old_res = arr [ j ] ; } else { flag = <int> ; break ; } } } if ( flag == <int> && i != n ) count = count + <int> ; } printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 258}
{"input": "int main ( ) { int t , small , n , i , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } small = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( small > a [ i ] ) { small = a [ i ] ; } } printf ( <str> , small * ( n - <int> ) ) ; } }", "label": 3, "id": 259}
{"input": "int main ( ) { int i , j , T , n , a , b , cost = <int> ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; cost = <int> ; for ( j = <int> ; j <= n ; j ++ ) { scanf ( <str> , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } cost += a ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 260}
{"input": "int main ( ) { long int t , a , b , i ; long int l , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { g = i ; } } } else { for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { g = i ; } } } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 2, "id": 261}
{"input": "int gcd ( int n , int n1 ) { if ( n % n1 == <int> ) { return n1 ; } else { return gcd ( n1 , n % n1 ) ; } } int main ( ) { int t , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { int n , n1 , l = <int> , g = <int> , i , rem = <int> ; scanf ( <str> , & n , & n1 ) ; l = n * n1 ; g = gcd ( n , n1 ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 262}
{"input": "int n = <int> ; int * * a = NULL ; unsigned long int max ( int i , int j , unsigned long int count ) { unsigned long int count1 = <int> , count2 = <int> ; if ( i == n ) { return count ; } else { count1 = max ( i + <int> , j , count + a [ i ] [ j ] ) ; count2 = max ( i + <int> , j + <int> , count + a [ i ] [ j ] ) ; if ( count1 > count2 ) return count1 ; else return count2 ; } } int main ( ) { int i = <int> , j = <int> , t = <int> ; scanf ( <str> , & t ) ; while ( t -- != <int> ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; while ( i < n ) { a [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; i ++ ; } i = <int> ; while ( i < n ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; j ++ ; } i ++ ; } printf ( <str> , max ( <int> , <int> , <int> ) ) ; free ( a ) ; } return <int> ; }", "label": 2, "id": 263}
{"input": "int main ( void ) { int t , i , a , b , x , y , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a , y = b ; while ( x != y ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } g = x ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 264}
{"input": "void main ( ) { int k , i , j , s ; int a [ <int> ] [ <int> ] ; int sum [ <int> ] ; scanf ( <str> , & k ) ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; } for ( i = <int> ; i < <int> ; i ++ ) { sum [ i ] = <int> ; } while ( i < k ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , a [ i ] [ j ] ) ; sum [ i ] = maxi ( ( sum [ i ] + a [ i ] [ i ] ) , ( sum [ i ] + a [ i ] [ i + <int> ] ) ) ; } } i ++ ; int max = sum [ <int> ] ; for ( i = <int> ; i < s ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( max ) ; } } int maxi ( int x , int y ) { if ( x > y ) return x ; else return y ; }", "label": 3, "id": 265}
{"input": "int max ( int x , int y ) { return x >= y ? x : y ; } int main ( ) { int t ; int curr [ MAX ] = { <int> } ; int next [ MAX ] ; int n ; int i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & next [ j ] ) ; for ( j = i ; j >= <int> ; j -- ) curr [ j ] = next [ j ] + max ( curr [ j ] , curr [ j - <int> ] ) ; curr [ <int> ] += next [ <int> ] ; } c = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( curr [ c ] < curr [ i ] ) c = i ; printf ( <str> , curr [ c ] ) ; } return <int> ; }", "label": 1, "id": 266}
{"input": "int main ( ) { int row , n ; scanf ( <str> , & row ) ; while ( row > <int> ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { arr [ i - <int> ] [ j ] += arr [ i ] [ j ] >= arr [ i ] [ j + <int> ] ? arr [ i ] [ j ] : arr [ i ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; row -- ; } system ( <str> ) ; return <int> ; }", "label": 1, "id": 267}
{"input": "int main ( ) { int n , t , arr [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { int min , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 268}
{"input": "int idx [ <int> ] [ <int> ] ; int tp ( int d , int l , int p , long sum ) ; int pop ( int d ) ; int global_sum = <int> ; int main ( ) { int tc ; scanf ( <str> , & tc ) ; int i = <int> ; while ( i < tc ) { int depth ; scanf ( <str> , & depth ) ; pop ( depth ) ; tp ( depth , <int> , <int> , <int> ) ; printf ( <str> , global_sum ) ; global_sum = <int> ; i ++ ; } return <int> ; } int tp ( int d , int l , int p , long sum ) { if ( l == d ) { sum += idx [ l - <int> ] [ p - <int> ] ; if ( sum > global_sum ) { global_sum = sum ; } return <int> ; } else { sum += idx [ l - <int> ] [ p - <int> ] ; tp ( d , l + <int> , p , sum ) ; tp ( d , l + <int> , p + <int> , sum ) ; } return - <int> ; } int pop ( int d ) { int i = <int> , j = <int> ; while ( i < d ) { while ( j <= i ) { scanf ( <str> , & idx [ i ] [ j ] ) ; j ++ ; } ; j = <int> ; i ++ ; } ; return <int> ; }", "label": 2, "id": 269}
{"input": "int main ( ) { int t , a , b , m , gcd , i , lcm ; scanf ( <str> , & m ) ; for ( t = <int> ; t <= m ; t ++ ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i < a && i < b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; lcm = ( a * b ) / gcd ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 270}
{"input": "int main ( void ) { int a , t , n , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { int min = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 271}
{"input": "int scan ( ) { int t = <int> ; char c ; c = getchar_unlocked ( ) ; while ( c < <char> || c > <char> ) c = getchar_unlocked ( ) ; while ( c >= <char> && c <= <char> ) { t = ( t << <int> ) + ( t << <int> ) + c - <char> ; c = getchar_unlocked ( ) ; } return ( t ) ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int a [ <int> ] [ <int> ] = { <int> } , s [ <int> ] [ <int> ] = { <int> } , i , j , k , t , n ; t = scan ( ) ; while ( t -- ) { k = <int> ; n = scan ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = scan ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; else if ( j == <int> ) s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; else s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - <int> ] [ j ] , s [ i - <int> ] [ j - <int> ] ) ; } for ( i = <int> ; i < n ; i ++ ) if ( s [ n - <int> ] [ i ] > k ) k = s [ n - <int> ] [ i ] ; printf ( <str> , k ) ; } return <int> ; }", "label": 0, "id": 272}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int n , i , a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return <int> ; } int gcd ( int a , int b ) { int i , min , gcd ; if ( a >= b ) { min = b ; } else { min = a ; } for ( i = min ; i > <int> ; i -- ) { if ( ( a % i ) == <int> && ( b % i ) == <int> ) { gcd = i ; break ; } } return gcd ; }", "label": 2, "id": 273}
{"input": "int max ( int x , int y ) { return ( x >= y ) ? x : y ; } int main ( ) { int a , t , n , i , j ; int s [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( a = <int> ; a < t ; a ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & s [ i ] [ j ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < i - <int> ; j ++ ) { s [ i - <int> ] [ j ] += max ( s [ i ] [ j ] , s [ i ] [ j + <int> ] ) ; } } printf ( <str> , s [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 274}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int max , ar [ <int> ] [ <int> ] = { <int> } , i , j , n , s [ <int> ] [ <int> ] = { <int> } ; int ans = - <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } s [ <int> ] [ <int> ] = ar [ <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) { max = ar [ j ] [ i ] + s [ j - <int> ] [ i ] ; if ( i == <int> ) { max = ar [ j ] [ i ] + s [ j - <int> ] [ <int> ] ; } else if ( j == i ) { max = ar [ j ] [ i ] + s [ j - <int> ] [ i - <int> ] ; } else if ( s [ j - <int> ] [ i - <int> ] > s [ j - <int> ] [ i ] ) max = ar [ j ] [ i ] + s [ j - <int> ] [ i - <int> ] ; s [ j ] [ i ] = max ; if ( j == n - <int> && ans < max ) ans = max ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 275}
{"input": "int main ( void ) { int a , b , c , d , e , f , i , j ; int sum = <int> ; int x [ <int> ] [ <int> ] ; scanf ( <str> , & a ) ; printf ( <str> ) ; while ( a -- ) { scanf ( <str> , & c ) ; for ( i = <int> ; i < c ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & x [ i ] [ j ] ) ; } } } for ( i = a - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { x [ i ] [ j ] += ( ( x [ i + <int> ] [ j ] > x [ i + <int> ] [ j + <int> ] ) ? x [ i + <int> ] [ j ] : x [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , x [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 1, "id": 276}
{"input": "int main ( ) { int i , j , no , sum , t , n ; int k , max , pmax ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; pmax = <int> ; scanf ( <str> , & n ) ; k = <int> ; while ( k <= n ) { sum = <int> ; for ( i = <int> ; i <= k ; i ++ ) { scanf ( <str> , & no ) ; sum = sum + no ; } pmax = sum ; if ( pmax > max ) max = pmax ; k ++ ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 277}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; long long int n ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; long long int min = a [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 278}
{"input": "int main ( ) { long long int t , n , i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] == a [ i ] + <int> || a [ j ] == a [ i ] - <int> ) { if ( a [ j ] > a [ i ] ) { c = a [ i ] ; break ; } else { c = a [ j ] ; break ; } } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 279}
{"input": "int main ( void ) { int i , j , t ; long long int n , min ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; long long int arr [ n ] ; for ( j = <int> , min = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( min > arr [ j ] ) min = arr [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 280}
{"input": "int main ( ) { int t , n , i , j , sum , * a , tl ; scanf ( <str> , & tl ) ; while ( tl -- ) { sum = <int> ; scanf ( <str> , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { t = i ; for ( j = t + <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ t ] ) { sum ++ ; t = j ; } else break ; } } free ( a ) ; printf ( <str> , sum + n ) ; } return <int> ; }", "label": 0, "id": 281}
{"input": "main ( ) { long long int i , j , t , k , count , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; long long int c [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & c [ j ] ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = j ; k < n ; k ++ ) { if ( c [ j ] >= c [ k ] ) count ++ ; } printf ( <str> , count ) ; } }", "label": 2, "id": 282}
{"input": "int main ( ) { int rows , test_cases , i , j , k , c , t , a [ <int> ] [ <int> ] , d [ <int> ] ; scanf ( <str> , & test_cases ) ; for ( i = <int> ; i <= test_cases ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } d [ <int> ] = a [ <int> ] [ <int> ] ; c = <int> ; for ( j = <int> ; j < rows ; j ++ ) { d [ j ] = d [ j - <int> ] + ( ( a [ j ] [ c ] > a [ j ] [ c + <int> ] ) ? a [ j ] [ c ] : a [ j ] [ c + <int> ] ) ; c = ( a [ j ] [ c ] > a [ j ] [ c + <int> ] ) ? c : ( c + <int> ) ; } printf ( <str> , d [ rows - <int> ] ) ; } return <int> ; }", "label": 1, "id": 283}
{"input": "long int max ( long int a , long int b ) { if ( a > b ) return a ; return b ; } long int min ( long int a , long int b ) { if ( a < b ) return a ; return b ; } long int gcf ( long int a , long int b ) { if ( b == <int> ) return a ; return gcf ( b , a % b ) ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcf ( max ( a , b ) , min ( a , b ) ) ; } int main ( ) { int t ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcf ( max ( a , b ) , min ( a , b ) ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 284}
{"input": "int pop1 ( ) ; int pop2 ( ) ; int pop3 ( ) ; void push ( int , int , int ) ; int stack1 [ MAX ] ; int stack2 [ MAX ] , stack3 [ MAX ] ; int top1 = - <int> , top2 = - <int> , top3 = - <int> ; int main ( ) { int t , r , i , j , m , n , s , a [ <int> ] [ <int> ] , x = <int> , sum [ <int> ] , max ; scanf ( <str> , & t ) ; while ( t -- ) { x = <int> ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> ) ; } push ( <int> , <int> , <int> ) ; while ( top1 != - <int> && top2 != - <int> && top3 != - <int> ) { m = pop2 ( ) ; n = pop3 ( ) ; s = pop1 ( ) ; s = s + a [ m ] [ n ] ; for ( i = m ; i < r - <int> ; i ++ ) { push ( s , m + <int> , n + <int> ) ; s = s + a [ m + <int> ] [ n ] ; m = m + <int> ; } sum [ x ++ ] = s ; } max = sum [ <int> ] ; for ( i = <int> ; i < x ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( <str> , max ) ; } return <int> ; } void push ( int sum , int k , int l ) { top1 ++ ; stack1 [ top1 ] = sum ; top2 ++ ; stack2 [ top2 ] = k ; top3 ++ ; stack3 [ top3 ] = l ; } int pop1 ( ) { return ( stack1 [ top1 -- ] ) ; } int pop2 ( ) { return ( stack2 [ top2 -- ] ) ; } int pop3 ( ) { return ( stack3 [ top3 -- ] ) ; }", "label": 3, "id": 285}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , num1 , hcf , lcm , i ; scanf ( <str> , & a , & b ) ; num1 = a < b ? a : b ; for ( i = <int> ; i < num1 ; i ++ ) if ( a % i == <int> && b % i == <int> ) hcf = i ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 286}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , lcm , gc ; scanf ( <str> , & a , & b ) ; gc = gcd ( a , b ) ; lcm = ( a * b ) / gc ; printf ( <str> , gc , lcm ) ; } return <int> ; }", "label": 0, "id": 287}
{"input": "int main ( void ) { int n , i , k , j ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { int x , z , sum = <int> ; scanf ( <str> , & x ) ; int a [ x ] [ x ] ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j < x ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } z = <int> ; for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > z ) { z = a [ i ] [ j ] ; } } sum = sum + z ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 288}
{"input": "int gcdf ( int m , int n ) { if ( m == <int> || n == <int> ) return <int> ; int rem = m % n ; if ( rem == <int> ) return n ; return gcdf ( n , rem ) ; } int main ( void ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = gcdf ( a , b ) ; long long int lcm = ( long long int ) ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 289}
{"input": "long int gcd ( long int a , long int b ) { if ( b == <int> ) { return a ; } gcd ( b , a % b ) ; } int main ( void ) { long int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { long int a , b ; scanf ( <str> , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; t -- ; } }", "label": 0, "id": 290}
{"input": "int main ( ) { int t , j , k , l , m , r , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; l = r - <int> ; while ( l >= <int> ) { m = <int> ; while ( m <= l ) { a [ l ] [ m ] += ( a [ l + <int> ] [ m ] > a [ l + <int> ] [ m + <int> ] ? a [ l + <int> ] [ m ] : a [ l + <int> ] [ m + <int> ] ) ; m ++ ; } l -- ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 291}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , g , l , min , max ; scanf ( <str> , a , b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } while ( min != <int> ) { g = min ; min = max % min ; max = g ; } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 3, "id": 292}
{"input": "int gcd ( int x , int y ) { int t , a = x , b = y ; while ( b != <int> ) { t = a % b ; a = b ; b = t ; } return a ; } int main ( ) { int t , a , b , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 293}
{"input": "int main ( int argc , char * argv [ ] ) { int t , j , max ; int n , i , a , b , c , index , no_need ; int sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; max = b = c = a = no_need = i = j = index = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { if ( i == <int> ) { scanf ( <str> , & a ) ; max = a ; index = <int> ; } else { for ( j = <int> ; j < index ; j ++ ) scanf ( <str> , & no_need ) ; scanf ( <str> , & b , & c ) ; if ( b > c ) max = b ; else { max = c ; index ++ ; } for ( j = index + <int> ; j < i ; j ++ ) scanf ( <str> , & no_need ) ; } sum += max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 294}
{"input": "int main ( ) { long int t , i , x , j ; scanf ( <str> , & t ) ; for ( j = <int> ; j <= t ; j ++ ) { long int n , m = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( m > a [ i ] ) m = a [ i ] ; } x = m * ( n - <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 295}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , g , min , max , t ; long long int l ; scanf ( <str> , a , b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } while ( min ) { g = min ; min = max % min ; max = g ; } t = max ; l = ( a * b ) / t ; printf ( <str> , t , l ) ; } return <int> ; }", "label": 3, "id": 296}
{"input": "int main ( ) { int t , a , b , g , l , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= ( a * b ) ; i ++ ) { if ( i % a == <int> && i % b == <int> ) break ; } l = i ; for ( i = a * b ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) break ; } g = i ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 297}
{"input": "int main ( ) { int rows , i , j , max , arr [ <int> ] [ <int> ] , t , b [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i <= rows ; i ++ ) { for ( j = <int> ; j <= rows ; j ++ ) { arr [ i ] [ j ] = <int> ; } } for ( i = <int> ; i <= rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( j = <int> ; j <= rows ; j ++ ) { b [ rows ] [ j ] = arr [ rows ] [ j ] ; } for ( i = rows - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= rows ; j ++ ) { if ( b [ i + <int> ] [ j ] > b [ i + <int> ] [ j + <int> ] ) { b [ i ] [ j ] = b [ i + <int> ] [ j ] + arr [ i ] [ j ] ; } else { b [ i ] [ j ] = b [ i + <int> ] [ j + <int> ] + arr [ i ] [ j ] ; } } } max = b [ <int> ] [ <int> ] ; for ( i = <int> ; i <= rows ; i ++ ) { if ( max < b [ <int> ] [ i ] ) max = b [ <int> ] [ i ] ; } printf ( <str> , max ) ; if ( t != <int> ) printf ( <str> ) ; } }", "label": 3, "id": 298}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , temp , l ; scanf ( <str> , & a , & b ) ; int lcm = a * b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } while ( a % b != <int> ) { temp = b ; b = a % b ; a = temp ; } temp = b ; lcm = lcm / temp ; printf ( <str> , temp , ( int ) lcm ) ; } return <int> ; }", "label": 1, "id": 299}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 300}
{"input": "int main ( ) { long int t , a , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & a ) ; long int ar [ a ] ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; if ( ar [ i ] < min ) min = ar [ i ] ; } printf ( <str> , min * ( a - <int> ) ) ; } }", "label": 0, "id": 301}
{"input": "int main ( ) { int i , j , k , m , n , t ; scanf ( <str> , & n ) ; for ( m = <int> ; m < n ; m ++ ) { scanf ( <str> , & t ) ; int a [ t ] [ t ] ; for ( k = <int> ; k < t ; k ++ ) { for ( i = <int> ; i <= k ; i ++ ) scanf ( <str> , & a [ k ] [ i ] ) ; } for ( j = t - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k < j ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + <int> ] ) a [ j - <int> ] [ k ] = a [ j - <int> ] [ k ] + a [ j ] [ k ] ; else a [ j - <int> ] [ k ] = a [ j - <int> ] [ k ] + a [ j ] [ k + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 302}
{"input": "void main ( ) { int t , n , a [ <int> ] , i ; long long int min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; printf ( <str> , ( n - <int> ) * min ) ; } }", "label": 0, "id": 303}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , small , cnt , lcm = <int> ; long gcd ; scanf ( <str> , & a , & b ) ; if ( a > b ) small = b ; else small = a ; for ( cnt = small ; cnt >= <int> ; cnt -- ) { if ( a % cnt == <int> && b % cnt == <int> ) lcm = cnt ; } gcd = ( a * b ) / lcm ; printf ( <str> , lcm , gcd ) ; } }", "label": 1, "id": 304}
{"input": "int n , a [ <int> ] [ <int> ] ; int maxx ( int a , int b ) { return ( a > b ) ? ( a ) : ( b ) ; } int function ( int i , int j ) { if ( i == n - <int> ) return a [ i ] [ j ] ; return ( a [ i ] [ j ] + maxx ( function ( i + <int> , j ) , function ( i + <int> , j + <int> ) ) ) ; } int main ( ) { int T , i , j ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> , function ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 305}
{"input": "static char _rbuf [ <int> * <int> ] ; static char * _rend = <int> ; static char * _rpos = <int> ; static int _getchar ( ) { int n = read ( <int> , _rbuf , sizeof _rbuf ) ; if ( n <= <int> ) { printf ( <str> , n ) ; exit ( <int> ) ; } _rend = _rbuf + n ; _rpos = _rbuf + <int> ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < <char> ) { } int n = c - <char> ; while ( ( ( c = mygetchar ( ) ) ) >= <char> ) { n = n * <int> + c - <char> ; } return n ; } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - <int> ; while ( <int> ) { buf [ bn -- ] = <char> + ( n ) ; n = n / <int> ; if ( n == <int> ) break ; } while ( bn < BSIZE - <int> ) putchar ( buf [ ++ bn ] ) ; putchar ( <char> ) ; } static int dump ( int a [ ] , int n ) { int i = <int> ; printf ( <str> ) ; while ( i < n ) printf ( <str> , a [ i ++ ] ) ; printf ( <str> ) ; } void tria ( int n ) { int a [ n ] ; int b [ n ] ; a [ <int> ] = <int> ; int * cur = b ; int * old = a ; int i = <int> ; while ( i < n ) { cur [ <int> ] = get_i ( ) + old [ <int> ] ; int j = <int> ; while ( j < i ) { cur [ j ] = get_i ( ) + max ( old [ j - <int> ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = get_i ( ) + old [ j - <int> ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } i ++ ; } int mx = <int> ; for ( i = <int> ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; put_i ( mx ) ; } int main ( int ac , char * * av ) { int n = get_i ( ) ; while ( n -- > <int> ) { tria ( get_i ( ) ) ; } return <int> ; }", "label": 1, "id": 306}
{"input": "int main ( ) { int testCase ; scanf ( <str> , & testCase ) ; int span [ <int> ] [ <int> ] ; while ( testCase -- ) { int n ; scanf ( <str> , & n ) ; int i ; int j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & span [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( span [ i + <int> ] [ j ] > span [ i + <int> ] [ j + <int> ] ) span [ i ] [ j ] = span [ i ] [ j ] + span [ i + <int> ] [ j ] ; else span [ i ] [ j ] = span [ i ] [ j ] + span [ i + <int> ] [ j + <int> ] ; } printf ( <str> , span [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 307}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) { return b ; } else { return gcd ( b % a , a ) ; } } unsigned long long int lcm ( unsigned long long int a , unsigned long long int b ) { long int g ; g = gcd ( a , b ) ; if ( g == <int> ) { return a * b ; } else { return g * lcm ( a / g , b / g ) ; } } int main ( void ) { unsigned long long int T , A , B , i , g , l ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; g = gcd ( A , B ) ; l = lcm ( A , B ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 308}
{"input": "int b [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int main ( ) { int i , j , t , k , n , r , temp , temp1 = <int> ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; r = n * ( n + <int> ) / <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = <int> ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { temp = b [ i ] [ j ] ; b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; if ( temp >= b [ i ] [ j ] ) b [ i ] [ j ] = temp ; b [ i ] [ j + <int> ] = a [ i ] [ j + <int> ] + b [ i - <int> ] [ j ] ; } } temp1 = b [ n - <int> ] [ <int> ] ; for ( j = <int> ; j <= n ; j ++ ) { if ( b [ n - <int> ] [ j ] > temp1 ) temp1 = b [ n - <int> ] [ j ] ; } printf ( <str> , temp1 ) ; } return <int> ; }", "label": 0, "id": 309}
{"input": "long long gcd ( long long a , long long b ) { long long c ; if ( a == <int> ) return b ; else return ( gcd ( b % a , a ) ) ; return b ; } int main ( ) { long long x , y , a , b ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; x = gcd ( a , b ) ; y = a * b / x ; printf ( <str> , x , y ) ; } return <int> ; }", "label": 0, "id": 310}
{"input": "int main ( ) { int t , i , j , n , next , prev , min ; long long int ans ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int A [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & A [ j ] ) ; min = A [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( min > A [ j ] ) min = A [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 311}
{"input": "int main ( ) { int rows , test_cases , max , i , j , k , c , t , a [ <int> ] [ <int> ] , d [ <int> ] [ <int> ] ; scanf ( <str> , & test_cases ) ; for ( k = <int> ; k <= test_cases ; k ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) { scanf ( <str> , & a [ j ] [ i ] ) ; } } max = <int> ; d [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) { d [ i ] [ <int> ] = d [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { d [ i ] [ j ] = a [ i ] [ j ] + ( ( d [ i - <int> ] [ j ] > d [ i - <int> ] [ j - <int> ] ) ? d [ i - <int> ] [ j ] : d [ i - <int> ] [ j - <int> ] ) ; } d [ i ] [ i ] = a [ i ] [ i ] + d [ i - <int> ] [ i - <int> ] ; } for ( i = <int> ; i < rows ; i ++ ) { if ( d [ rows - <int> ] [ i ] > max ) max = d [ rows - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 312}
{"input": "int a [ <int> ] = { <int> } ; int main ( ) { int n , t , i ; scanf ( <str> , & n ) ; while ( n -- ) { int key ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) scanf ( <str> , & a [ i ] ) ; key = a [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { if ( key > a [ i ] ) key = a [ i ] ; } printf ( <str> , key * ( t - <int> ) ) ; } return <int> ; }", "label": 0, "id": 313}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , i , j , ans ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } ans = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { ans ++ ; } } } printf ( <str> , ans + n ) ; } return <int> ; }", "label": 2, "id": 314}
{"input": "int main ( void ) { int t , a , b , n , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( n = <int> ; n <= a && n <= b ; ++ n ) { if ( a % n == <int> && b % n == <int> ) gcd = n ; } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 315}
{"input": "int main ( ) { int a , b , x , t , gcd , lcm , product , i , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; product = a * b ; if ( a == <int> ) gcd = a ; else if ( b == <int> ) gcd = b ; else { while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; } lcm = product / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 316}
{"input": "long long unsigned int read_int ( ) { long long unsigned int s = <int> ; char c ; while ( ( c = getchar_unlocked ( ) ) != <char> && c != <char> ) s = s * <int> + ( c - <char> ) ; return s ; } void write_int ( long long unsigned int n ) { char c [ <int> ] = { <char> } ; int j , i = <int> ; while ( n ) { c [ i ++ ] = n ; n = n / <int> ; } for ( j = i - <int> ; j >= <int> ; j -- ) putchar_unlocked ( c [ j ] + <char> ) ; } long long unsigned int sum ( long long unsigned int a [ <int> ] , int i , int j , long long unsigned int n ) { int m = i * ( i - <int> ) / <int> + j ; long long unsigned int max = - <int> , k , v1 , v2 ; if ( i == n - <int> ) if ( a [ m + i ] > a [ m + i + <int> ] ) return a [ m ] + a [ m + i ] ; else return a [ m ] + a [ m + i + <int> ] ; v1 = a [ m ] + sum ( a , i + <int> , j , n ) ; v2 = a [ m ] + sum ( a , i + <int> , j + <int> , n ) ; if ( v1 > v2 ) return v1 ; else return v2 ; } int main ( void ) { long long unsigned int t , n , a [ <int> ] ; int i ; t = read_int ( ) ; while ( t -- ) { n = read_int ( ) ; for ( i = <int> ; i <= n * ( n + <int> ) / <int> ; i ++ ) a [ i ] = read_int ( ) ; write_int ( sum ( a , <int> , <int> , n ) ) ; printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 317}
{"input": "void main ( ) { int a , b , gcd , lcm , rem , n , d ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } rem = n % d ; while ( rem != <int> ) { n = d ; d = rem ; rem = n % d ; } gcd = d ; lcm = a * b / gcd ; printf ( <str> , a , b , gcd ) ; printf ( <str> , a , b , lcm ) ; }", "label": 1, "id": 318}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( int i = n - <int> ; i > <int> ; i -- ) { for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 319}
{"input": "int main ( ) { int num , n , i , j , k , a [ <int> ] [ <int> ] , sum = <int> , pos = <int> , s = <int> ; scanf ( <str> , & num ) ; for ( k = <int> ; k < num ; k ++ ) { sum = <int> ; pos = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { s = <int> ; for ( j = pos - <int> ; j <= ( pos + <int> ) ; j ++ ) { if ( j >= <int> ) { if ( s < a [ i ] [ j ] ) s = a [ i ] [ j ] ; } sum += s ; } } scanf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 320}
{"input": "int main ( void ) { long int arr [ <int> ] , n , min = <int> , i , j ; int t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( arr [ j ] < min ) min = arr [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 321}
{"input": "int main ( ) { int t , i , j , n , sum ; int a [ MAX ] [ MAX ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 322}
{"input": "int main ( ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { long long int c , j , k , x , y ; scanf ( <str> , & x ) ; long long int a [ x ] ; for ( j = <int> ; j < x ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } int count = <int> ; if ( x > <int> ) { for ( j = <int> ; j < x ; j ++ ) { for ( k = <int> ; k < x ; k ++ ) { if ( a [ j ] != a [ k ] && a [ j ] < a [ k ] ) { count = count + <int> ; } } } } else { count = count + <int> ; } printf ( <str> , count ) ; } return <int> ; }", "label": 2, "id": 323}
{"input": "struct <unk> { int id ; char name [ <int> ] ; int age ; struct <unk> * next ; } ; typedef struct <unk> node ; node * h [ <int> ] , * p , * q ; int main ( ) { int total , i , id , index , <unk> , del ; for ( i = <int> ; i < <int> ; i ++ ) h [ i ] = NULL ; scanf ( <str> , & total ) ; for ( i = <int> ; i < total ; i ++ ) { scanf ( <str> , & id ) ; index = id % <int> ; if ( h [ index ] == NULL ) { h [ index ] = ( node * ) malloc ( sizeof ( node ) ) ; p = h [ index ] ; p -> id = id ; scanf ( <str> , p -> name , & p -> age ) ; p -> next = NULL ; } else { node * new = ( node * ) malloc ( sizeof ( node ) ) ; p = h [ index ] ; new -> id = id ; scanf ( <str> , new -> name , & new -> age ) ; if ( p -> id <= new -> id ) { h [ index ] = new ; new -> next = p ; } else { while ( p != NULL ) { q = p ; p = p -> next ; if ( p -> id <= new -> id ) { q -> next = new ; new -> next = p ; break ; } } if ( p == NULL ) { q -> next = new ; new -> next = NULL ; } } } } scanf ( <str> , & <unk> , & del ) ; for ( i = <int> ; i < <int> ; i ++ ) { p = h [ i ] ; printf ( <str> ) ; printf ( <str> , i ) ; if ( p == NULL ) { printf ( <str> ) ; continue ; } else { while ( p != NULL ) { printf ( <str> , p -> id , p -> name , p -> age ) ; p = p -> next ; } printf ( <str> ) ; } } printf ( <str> ) ; index = <unk> % <int> ; p = h [ index ] ; printf ( <str> ) ; printf ( <str> , index ) ; while ( p != NULL ) { printf ( <str> , p -> id , p -> name , p -> age ) ; p = p -> next ; } printf ( <str> ) ; printf ( <str> ) ; index = del % <int> ; p = h [ index ] ; printf ( <str> , index ) ; while ( p != NULL ) { if ( p -> id == del ) { p = p -> next ; continue ; } printf ( <str> , p -> id , p -> name , p -> age ) ; p = p -> next ; } printf ( <str> ) ; return <int> ; }", "label": 1, "id": 324}
{"input": "int gcd ( int , int ) ; int main ( void ) { int t , n1 , n2 , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; g = gcd ( n1 , n2 ) ; printf ( <str> , g , n1 * n2 / g ) ; } return <int> ; } int gcd ( int n1 , int n2 ) { if ( n2 == <int> ) return n1 ; else return gcd ( n2 , ( n1 % n2 ) ) ; }", "label": 1, "id": 325}
{"input": "int main ( ) { int n , size , i , min , min_cost = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & size ) ; int a [ size ] ; for ( i = <int> ; i < size ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = <int> ; for ( i = <int> ; i < size ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } min_cost = min * ( size - <int> ) ; printf ( <str> , min_cost ) ; } return <int> ; }", "label": 1, "id": 326}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int compute ( int i , int j , int r ) { if ( r == <int> ) return <int> ; if ( b [ i + <int> ] [ j ] == <int> ) b [ i + <int> ] [ j ] = compute ( i + <int> , j , r - <int> ) ; if ( b [ i + <int> ] [ j + <int> ] == <int> ) b [ i + <int> ] [ j + <int> ] = compute ( i + <int> , j + <int> , r - <int> ) ; return max ( a [ i ] [ j ] + b [ i + <int> ] [ j ] , a [ i ] [ j ] + b [ i + <int> ] [ j + <int> ] ) ; } int main ( ) { int n , r , i , j ; scanf ( <str> , & n ) ; while ( n != <int> ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { b [ i ] [ j ] = <int> ; b [ i + <int> ] [ j + <int> ] = <int> ; scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> , compute ( <int> , <int> , r ) ) ; n -- ; } }", "label": 1, "id": 327}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; else if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; else if ( b > a ) return gcd ( b - a , a ) ; } int main ( ) { int t , a , b , hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 328}
{"input": "long sumd ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) ; long sumr ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) ; int main ( ) { int arr [ <int> ] [ <int> ] ; int i , j , tc , go , row , k ; long sumrt = <int> , sumdn , sum ; scanf ( <str> , & tc ) ; for ( go = <int> ; go <= tc ; go ++ ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } sum = arr [ <int> ] [ <int> ] ; sumrt = sumr ( sum , row , <int> , <int> , arr ) ; sumdn = sumd ( sum , row , <int> , <int> , arr ) ; if ( sumrt > sumdn ) printf ( <str> , sumrt ) ; else printf ( <str> , sumdn ) ; } return <int> ; } long sumd ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) { long sumdn , sumrt ; s = s + arr [ i + <int> ] [ j ] ; if ( i < n - <int> ) { sumdn = sumd ( s , n , i + <int> , j , arr ) ; sumrt = sumr ( s , n , i + <int> , j + <int> , arr ) ; if ( sumrt > sumdn ) return sumrt ; else return sumdn ; } return s ; } long sumr ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) { long sumdn , sumrt ; s = s + arr [ i + <int> ] [ j + <int> ] ; if ( i < n - <int> ) { sumdn = sumd ( s , n , i + <int> , j , arr ) ; sumrt = sumr ( s , n , i + <int> , j + <int> , arr ) ; if ( sumrt > sumdn ) return sumrt ; else return sumdn ; } return s ; }", "label": 2, "id": 329}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n ) ; int k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } k ++ ; } k = <int> ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= k ; j ++ ) { if ( j == <int> && i != <int> ) { b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; } else if ( j == i && i != <int> ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; else if ( i != <int> ) b [ i ] [ j ] = max ( b [ i - <int> ] [ j ] , b [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } k ++ ; } int ans = b [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( ans < b [ n - <int> ] [ i ] ) ans = b [ n - <int> ] [ i ] ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 330}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long long int l , j , a , b , cnt = <int> ; scanf ( <str> , & a , & b ) ; l = a * b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } printf ( <str> , a , l / a ) ; } return <int> ; }", "label": 0, "id": 331}
{"input": "int a [ <int> ] [ <int> ] ; int max_sum = <int> ; int recur ( int i , int j , int r ) { if ( i == r ) return a [ i ] [ j ] ; else { int s , s1 , s2 ; s1 = a [ i ] [ j ] + recur ( i + <int> , j , r ) ; s2 = a [ i ] [ j ] + recur ( i + <int> , j + <int> , r ) ; if ( s1 > s2 ) s = s1 ; else s = s2 ; return s ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i , j , m ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; m = recur ( <int> , <int> , n - <int> ) ; printf ( <str> , m ) ; } return <int> ; }", "label": 2, "id": 332}
{"input": "int result [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int maxpath ( int i , int j , int n ) { if ( i > n ) return <int> ; if ( result [ i ] [ j ] != <int> ) return result [ i ] [ j ] ; int t1 , t2 , t ; t1 = maxpath ( i + <int> , j , n ) ; t2 = maxpath ( i + <int> , j + <int> , n ) ; t = t1 > t2 ? t1 : t2 ; t = t + a [ i ] [ j ] ; result [ i ] [ j ] = t ; return t ; } static inline int scan ( ) { int i , j , rows ; printf ( <str> ) ; scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; memset ( result , <int> , sizeof result ) ; } } return rows ; } int main ( ) { int row , test_cases = <int> , p ; while ( test_cases > <int> ) { row = scan ( ) ; p = maxpath ( <int> , <int> , row ) ; printf ( <str> , p ) ; test_cases -- ; } return <int> ; }", "label": 3, "id": 333}
{"input": "int main ( ) { long long int t , n , i , a [ <int> ] , min , ans ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) a [ i ] = <int> ; min = <int> ; ans = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } ans = ( n - <int> ) * min ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 334}
{"input": "int main ( ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 335}
{"input": "static char _rbuf [ <int> * <int> ] ; static char * _rend = <int> ; static char * _rpos = <int> ; static int _getchar ( ) { int n = read ( <int> , _rbuf , sizeof _rbuf ) ; if ( n <= <int> ) { printf ( <str> , n ) ; exit ( <int> ) ; } _rend = _rbuf + n ; _rpos = _rbuf + <int> ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < <char> ) { } int n = c - <char> ; while ( ( ( c = mygetchar ( ) ) ) >= <char> ) { n = n * <int> + c - <char> ; } return n ; } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - <int> ; while ( <int> ) { buf [ bn -- ] = <char> + ( n ) ; n = n / <int> ; if ( n == <int> ) break ; } while ( bn < BSIZE - <int> ) putchar ( buf [ ++ bn ] ) ; putchar ( <char> ) ; } static int dump ( int a [ ] , int n ) { int i = <int> ; printf ( <str> ) ; while ( i < n ) printf ( <str> , a [ i ++ ] ) ; printf ( <str> ) ; } void tria ( int n ) { int a [ n ] ; int b [ n ] ; a [ <int> ] = <int> ; int * cur = b ; int * old = a ; int i = <int> ; while ( i < n ) { cur [ <int> ] = get_i ( ) + old [ <int> ] ; int j = <int> ; while ( j < i ) { cur [ j ] = get_i ( ) + max ( old [ j - <int> ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = get_i ( ) + old [ j - <int> ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } i ++ ; } int mx = <int> ; for ( i = <int> ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; put_i ( mx ) ; } int main ( int ac , char * * av ) { int n = get_i ( ) ; while ( n -- > <int> ) { tria ( get_i ( ) ) ; } return <int> ; }", "label": 1, "id": 336}
{"input": "int main ( ) { long int t , a , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & a ) ; long int ar [ a ] ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; if ( ar [ i ] < min ) min = ar [ i ] ; } printf ( <str> , min * ( a - <int> ) ) ; } }", "label": 3, "id": 337}
{"input": "int main ( ) { int i , j , k , n , p1 , p2 , cases , lines , largest ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { scanf ( <str> , & lines ) ; int mainArray [ lines ] ; mainArray [ <int> ] = <int> ; largest = <int> ; for ( j = <int> ; j < lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & n ) ; if ( k == <int> ) { p1 = mainArray [ k ] ; mainArray [ k ] = p1 + n ; if ( mainArray [ k ] > largest ) largest = mainArray [ k ] ; } else if ( k == j ) { mainArray [ k ] = p1 + n ; if ( mainArray [ k ] > largest ) largest = mainArray [ k ] ; } else { p2 = mainArray [ k ] ; if ( p1 >= p2 ) mainArray [ k ] = p1 + n ; else mainArray [ k ] = p2 + n ; if ( mainArray [ k ] > largest ) largest = mainArray [ k ] ; p1 = p2 ; } } } printf ( <str> , largest ) ; } return <int> ; }", "label": 1, "id": 338}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long int n , i , small = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int x ; scanf ( <str> , & x ) ; if ( x < small ) { small = x ; } } printf ( <str> , ( ( long long int ) ( n - <int> ) ) * ( ( long long int ) small ) ) ; } return <int> ; }", "label": 0, "id": 339}
{"input": "int max ( int p , int q ) { return p > q ? p : q ; } ; int main ( ) { int a [ <int> ] [ <int> ] = { <int> } , temp , i , j , t , n , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else a [ i ] [ j ] += max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } } i = n - <int> ; s = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] [ j ] > s ) s = a [ i ] [ j ] ; } printf ( <str> , s ) ; } return <int> ; }", "label": 3, "id": 340}
{"input": "main ( ) { int i , j , t , n ; int sum ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i > <int> ) { if ( j == <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ; sum = a [ i ] [ j ] > sum ? a [ i ] [ j ] : sum ; } } printf ( <str> , sum ) ; } exit ( <int> ) ; }", "label": 0, "id": 341}
{"input": "int main ( ) { int a , b , t , gcd , lcm , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; while ( b != <int> ) { x = b ; b = b % a ; a = x ; } gcd = a ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 342}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n ; scanf ( <str> , & n ) ; int i = <int> , arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; t -- ; } }", "label": 1, "id": 343}
{"input": "int a [ <int> ] [ <int> ] ; int b [ <int> ] [ <int> ] ; int num ; int main ( ) { int n , i , j , MaxSum ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { b [ i ] [ j ] = - <int> ; } } MaxSum = SumsInTriangle ( <int> , <int> ) ; printf ( <str> , MaxSum ) ; } return <int> ; } int Max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int SumsInTriangle ( int i , int j ) { int t , t1 , t2 ; if ( i >= num ) return <int> ; if ( b [ i ] [ j ] != - <int> ) return b [ i ] [ j ] ; t1 = SumsInTriangle ( i + <int> , j ) ; t2 = SumsInTriangle ( i + <int> , j + <int> ) ; t = ( Max ( t1 , t2 ) + a [ i ] [ j ] ) ; b [ i ] [ j ] = t ; return t ; }", "label": 0, "id": 344}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j ; long int n , temp ; scanf ( <str> , & n ) ; long int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j + <int> < n && arr [ j ] > arr [ j + <int> ] ) { temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( <str> , arr [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 345}
{"input": "int main ( ) { int l , t , i , j , count , prev , cur , n , a [ <int> ] ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; count = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; count ++ ; for ( j = i ; j > <int> ; j -- ) { if ( a [ j - <int> ] <= a [ j ] ) { count ++ ; } else break ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 346}
{"input": "int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int n , count = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; int k ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n - i ; j ++ ) { if ( a [ i ] <= a [ i + j ] ) { count ++ ; } else { break ; } } } printf ( <str> , count ) ; } return <int> ; }", "label": 2, "id": 347}
{"input": "int main ( ) { int * * a , i , n , j , k , maxm , t , p ; scanf ( <str> , & t ) ; for ( p = <int> ; p < t ; p ++ ) { k = <int> ; scanf ( <str> , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } j = <int> ; for ( i = <int> ; i < n ; i ++ ) { k = k + a [ i ] [ j ] ; } maxm = k ; for ( j = <int> ; j < n ; j ++ ) { for ( i = n - <int> ; i >= <int> && i > j ; i -- ) { k = k + a [ i ] [ j + <int> ] - a [ i ] [ j ] ; if ( k > maxm ) maxm = k ; } } printf ( <str> , maxm ) ; } return <int> ; }", "label": 1, "id": 348}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) { return b ; } else { return gcd ( b % a , a ) ; } } int main ( ) { int a , b , hcf , lcm , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return ( <int> ) ; }", "label": 1, "id": 349}
{"input": "int main ( ) { int sum [ <int> ] [ <int> ] , i , j , size , max = <int> , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & sum [ i ] [ j ] ) ; } for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) sum [ i ] [ j ] = sum [ i ] [ j ] ; else if ( j == <int> ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - <int> ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - <int> ] [ j - <int> ] ; else { if ( sum [ i - <int> ] [ j - <int> ] > sum [ i - <int> ] [ j ] ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - <int> ] [ j - <int> ] ; else sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - <int> ] [ j ] ; } } } for ( i = size - <int> , j = <int> ; j <= i ; j ++ ) { if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 350}
{"input": "int read ( ) { int _n = <int> ; char p = getchar_unlocked ( ) ; for ( ; p < <int> ; ) { p = getchar_unlocked ( ) ; } while ( p > <int> ) { _n = ( _n << <int> ) + ( _n << <int> ) + ( p - <char> ) ; p = getchar_unlocked ( ) ; } return _n ; } int partition ( int a [ ] [ <int> ] , int low , int high , int n ) { int temp ; int left = low ; int right = high ; int pivot = low ; while ( left < right ) { while ( a [ n ] [ left ] <= a [ n ] [ pivot ] && left < high ) { left ++ ; } while ( a [ n ] [ right ] >= a [ n ] [ pivot ] && right > low ) { right -- ; } if ( left < right ) { temp = a [ n ] [ right ] ; a [ n ] [ right ] = a [ n ] [ left ] ; a [ n ] [ left ] = temp ; } } temp = a [ n ] [ pivot ] ; a [ n ] [ pivot ] = a [ n ] [ right ] ; a [ n ] [ right ] = temp ; return right ; } void quicksort ( int a [ ] [ <int> ] , int low , int high , int n ) { if ( low < high ) { int pivot ; pivot = partition ( a , low , high , n ) ; quicksort ( a , low , pivot - <int> , n ) ; quicksort ( a , pivot + <int> , high , n ) ; } } int main ( ) { int t ; t = read ( ) ; while ( t -- ) { int n , i , j , low , high ; int a [ <int> ] [ <int> ] ; n = read ( ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = read ( ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else if ( j == i ) { a [ i ] [ j ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) { a [ i ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i ] [ j ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } } } } low = <int> ; high = n ; quicksort ( a , low , high , n ) ; printf ( <str> , a [ n ] [ n ] ) ; } return <int> ; }", "label": 1, "id": 351}
{"input": "int h ( int a , int b ) { while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; } int main ( ) { int t , a , b , hcf , lcm ; scanf ( <str> , & t ) ; while ( t > <int> ) { t -- ; scanf ( <str> , & a , & b ) ; hcf = h ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 352}
{"input": "int main ( void ) { long int i , t , n , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int m , c = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ <int> ] ) { m = a [ i ] ; a [ i ] = a [ <int> ] ; a [ <int> ] = m ; } } c = a [ <int> ] * ( n - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 353}
{"input": "int main ( ) { int n , i , a , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; long long int b [ <int> ] , m ; for ( j = <int> ; j < a ; j ++ ) scanf ( <str> , & b [ j ] ) ; m = b [ <int> ] ; for ( j = <int> ; j < a ; j ++ ) { if ( b [ j ] < m ) m = b [ j ] ; } printf ( <str> , m * ( a - <int> ) ) ; } return <int> ; }", "label": 1, "id": 354}
{"input": "int sum_triangle ( int * * trdata , int r , int c , int n ) { int s1 , s2 ; if ( n == <int> ) return trdata [ r ] [ c ] ; else { s1 = trdata [ r ] [ c ] + sum_triangle ( trdata , r + <int> , c , n - <int> ) ; s2 = trdata [ r ] [ c ] + sum_triangle ( trdata , r + <int> , c + <int> , n - <int> ) ; return ( s1 > s2 ? s1 : s2 ) ; } } int main ( ) { int n , i , j , k , * trn , flag = <int> , * * * trdata ; scanf ( <str> , & n ) ; trn = ( int * ) malloc ( n * sizeof ( int ) ) ; trdata = ( int * * * ) malloc ( n * sizeof ( int * * ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & trn [ i ] ) ; trdata [ i ] = ( int * * ) malloc ( trn [ i ] * sizeof ( int * ) ) ; for ( j = <int> ; j < trn [ i ] ; j ++ ) { flag = <int> ; for ( k = <int> ; k <= j ; k ++ ) { if ( flag ) { trdata [ i ] [ j ] = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; flag = <int> ; } scanf ( <str> , & trdata [ i ] [ j ] [ k ] ) ; } } } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , sum_triangle ( trdata [ i ] , <int> , <int> , trn [ i ] ) ) ; } }", "label": 2, "id": 355}
{"input": "int cal_max_sum ( ) ; int s [ limit ] [ limit ] ; int t [ limit ] [ limit ] ; int line ; int main ( ) { int n , out [ limit ] , i , j , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & line ) ; for ( j = <int> ; j < line ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & s [ j ] [ k ] ) ; s [ j ] [ k ] = <int> ; } out [ i ] = cal_max_sum ( ) ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , out [ i ] ) ; return ; } int cal_max_sum ( ) { int i , j ; for ( i = <int> ; i <= line ; i ++ ) t [ line - <int> ] [ i ] = s [ line - <int> ] [ i ] ; for ( i = line - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( t [ i + <int> ] [ j ] > t [ i + <int> ] [ j + <int> ] ) t [ i ] [ j ] = s [ i ] [ j ] + t [ i + <int> ] [ j ] ; else t [ i ] [ j ] = s [ i ] [ j ] + t [ i + <int> ] [ j + <int> ] ; } } return ( t [ <int> ] [ <int> ] ) ; }", "label": 3, "id": 356}
{"input": "int main ( ) { int n , i , r , j ; scanf ( <str> , & n ) ; while ( n ) { scanf ( <str> , & r ) ; int a [ r ] [ r ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; n -- ; } return ( <int> ) ; }", "label": 0, "id": 357}
{"input": "int main ( ) { int t , n , a [ <int> ] , i , j , k , sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( k = <int> ; k < n - <int> ; k ++ ) { if ( a [ k ] < a [ k + <int> ] ) { a [ k + <int> ] = a [ k ] ; sum = sum + a [ k ] ; } else sum = sum + a [ k + <int> ] ; } printf ( <str> , sum ) ; } return ( <int> ) ; }", "label": 3, "id": 358}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( void ) { int a , b , t , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 359}
{"input": "int main ( ) { unsigned int T , j , c ; T = j = c = <int> ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { unsigned long N ; unsigned long A , B , i , op , c ; N = A = B = op = c = i = <int> ; scanf ( <str> , & N ) ; scanf ( <str> , & A , & B ) ; if ( A >= B ) { c = B ; op += B ; } else { c = A ; op += A ; } for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A ) ; if ( c >= A ) { c = A ; op += A ; } else { op += c ; } } printf ( <str> , op ) ; } return <int> ; }", "label": 1, "id": 360}
{"input": "int n ; int a [ <int> ] [ <int> ] , visited [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int sum ( int i , int j ) { if ( i >= n ) return <int> ; if ( visited [ i ] [ j ] == <int> ) return cache [ i ] [ j ] ; int t1 , t2 , t ; t1 = sum ( i + <int> , j ) ; t2 = sum ( i + <int> , j + <int> ) ; visited [ i ] [ j ] = <int> ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int cases , i , j ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; visited [ i ] [ j ] = <int> ; cache [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , visited [ i ] [ j ] ) ; printf ( <str> ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , cache [ i ] [ j ] ) ; printf ( <str> ) ; } printf ( <str> , sum ( <int> , <int> ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , visited [ i ] [ j ] ) ; printf ( <str> ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , cache [ i ] [ j ] ) ; printf ( <str> ) ; } } }", "label": 2, "id": 361}
{"input": "int main ( ) { int i , j , t , n , buff [ <int> ] ; t = in ( ) ; while ( t -- ) { n = in ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) buff ( i , j ) = in ( ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) buff ( i , j ) += max ( buff ( i + <int> , j ) , buff ( i + <int> , j + <int> ) ) ; printf ( <str> , buff ( <int> , <int> ) ) ; } return <int> ; } int in ( ) { int a = <int> ; char c ; while ( ( c = getchar ( ) ) < <char> || c > <char> ) ; a = ( a << <int> ) + ( a << <int> ) + ( c - <char> ) ; while ( ( c = getchar ( ) ) >= <char> && c <= <char> ) a = ( a << <int> ) + ( a << <int> ) + ( c - <char> ) ; return a ; }", "label": 3, "id": 362}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int calc ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , calc ( x ) ) ; } return <int> ; }", "label": 0, "id": 363}
{"input": "int main ( void ) { int t , a , b , i , r , big , small ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { big = a ; small = b ; } else { big = b ; small = a ; } while ( small != <int> ) { r = big % small ; big = small ; small = r ; } printf ( <str> , big , ( a * b / big ) ) ; } return <int> ; }", "label": 1, "id": 364}
{"input": "long GCD ( long a , long b ) { if ( b == <int> ) return a ; else return GCD ( b , a % b ) ; } main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long a , b ; scanf ( <str> , & a , & b ) ; long gcd = GCD ( a , b ) ; long long lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 365}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { a [ i - <int> ] [ j ] += max ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 366}
{"input": "int main ( ) { int T , N , j , i ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; if ( N >= <int> && N <= <int> ) { int a [ N ] , sum = N , k ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < N - <int> ; i ++ ) { for ( k = i + <int> ; k < N ; k ++ ) { if ( a [ k ] >= a [ k - <int> ] ) sum = sum + <int> ; else break ; } } printf ( <str> , sum ) ; } } } }", "label": 0, "id": 367}
{"input": "int main ( ) { int t , n , i , j ; char a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - i ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 368}
{"input": "int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; int a [ t * <int> ] ; for ( i = <int> ; i < t * <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < t * <int> ; i += <int> ) { for ( j = a [ i ] ; j >= <int> ; j -- ) if ( a [ i ] % j == <int> && a [ i + <int> ] % j == <int> ) { printf ( <str> , j ) ; break ; } for ( j = <int> ; j <= a [ i ] * a [ i + <int> ] ; j ++ ) if ( j % a [ i ] == <int> && j % a [ i + <int> ] == <int> ) { printf ( <str> , j ) ; break ; } printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 369}
{"input": "int main ( ) { int a , b , temp ; int gcd , repeat = <int> , n , lcm , tempa , tempb ; scanf ( <str> , & n ) ; for ( ; repeat < n ; repeat ++ ) { scanf ( <str> , & a , & b ) ; tempa = a ; tempb = b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( a != <int> && b != <int> ) { temp = a ; a = b ; b = temp % b ; } gcd = a ; printf ( <str> , a ) ; a = tempa / gcd ; b = tempb / gcd ; lcm = gcd * a * b ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 370}
{"input": "int main ( ) { long long int a [ <int> ] , m , n , i , j , keys , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { keys = a [ i ] ; j = i - <int> ; while ( j >= <int> && a [ j ] > keys ) { a [ j + <int> ] = a [ j ] ; j -- ; } a [ j + <int> ] = keys ; } if ( n == <int> ) { printf ( <str> , ( a [ <int> ] ) ) ; } else { m = a [ <int> ] * ( n - <int> ) ; printf ( <str> , m ) ; } } return <int> ; }", "label": 2, "id": 371}
{"input": "void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n1 , n2 , minmultiple , lcm ; scanf ( <str> , & n1 , & n2 ) ; minmultiple = ( n1 > n2 ) ? n1 : n2 ; while ( <int> ) { if ( minmultiple % n1 == <int> && minmultiple % n2 == <int> ) { lcm = minmultiple ; break ; } ++ minmultiple ; } int gcd ; gcd = ( n1 * n2 ) / lcm ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 372}
{"input": "int arr [ <int> ] [ <int> ] ; int max = - <int> , n ; void func ( int i , int j , int sum ) { int sum1 , sum2 ; if ( i >= n ) { if ( max < sum ) max = sum ; } else { sum1 = sum + arr [ i ] [ j ] ; func ( ++ i , j , sum1 ) ; sum2 = sum + arr [ i - <int> ] [ j ] ; func ( i , ++ j , sum2 ) ; } return ; } int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; func ( <int> , <int> , <int> ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 373}
{"input": "int gcd ( int a , int b ) { int m = <int> , i , g = <int> , lcm = <int> ; m = b ; if ( a > b ) m = a ; for ( i = <int> ; i <= m ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) g = i ; } return g ; } int main ( ) { int a , b , t ; scanf ( <str> , & t ) ; int g , l ; if ( t >= <int> && t <= <int> ) { for ( int i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a >= <int> && a <= <int> && b >= <int> && b <= <int> ) { g = gcd ( a , b ) ; l = a * b / g ; printf ( <str> , g , l ) ; } else exit ( <int> ) ; } } return <int> ; }", "label": 2, "id": 374}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] = { { <int> , <int> } } , sum , temp = <int> , i , j , flag ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= ( i + <int> ) ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = <int> ; j <= n ; j += <int> ) { temp = <int> ; flag = j ; for ( i = n - <int> ; i > <int> ; i -- ) { if ( a [ i ] [ flag ] > a [ i ] [ flag - <int> ] ) { temp += a [ i ] [ flag ] ; } else { flag -- ; temp += a [ i ] [ flag ] ; } } if ( sum < temp ) sum = temp ; } printf ( <str> , sum + a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 375}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , T ; while ( T -- ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 376}
{"input": "typedef long long int ll ; ll gcd ( ll , ll ) ; int main ( ) { ll a , b , t , i , min , max , h , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; max = a > b ? a : b ; min = a < b ? a : b ; h = gcd ( max , min ) ; l = ( a * b ) / h ; printf ( <str> , h , l ) ; } } ll gcd ( ll a , ll b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; }", "label": 0, "id": 377}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int count = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { j ++ ; count = j + <int> ; } else j = <int> ; } printf ( <str> , count + n ) ; } return <int> ; }", "label": 3, "id": 378}
{"input": "int max ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; int i ; int a [ <int> ] [ <int> ] ; int b [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i <= t ; i ++ ) { int n ; int j , k ; int maximum = INT_MIN ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { b [ j ] [ <int> ] = b [ j - <int> ] [ <int> ] + a [ j ] [ <int> ] ; } for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { b [ j ] [ k ] = a [ j ] [ k ] + ( max ( b [ j - <int> ] [ k ] , b [ j - <int> ] [ k - <int> ] ) ) ; if ( j == n - <int> && b [ j ] [ k ] > maximum ) maximum = b [ j ] [ k ] ; } } printf ( <str> , maximum ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; }", "label": 3, "id": 379}
{"input": "int fastscan ( ) { char c ; int t = <int> ; while ( c < <int> ) g ; while ( ( <char> <= ( c = g ) ) && ( c <= <char> ) ) { t = ( t << <int> ) + ( t << <int> ) + ( c - <char> ) ; } return t ; } int main ( ) { int T ; int ans [ <int> ] ; int sums [ <int> ] ; int i , j ; int Tc ; int n ; int num [ <int> ] ; T = fastscan ( ) ; Tc = T ; while ( Tc -- ) { n = fastscan ( ) ; memset ( ( void * ) sums , <int> , n * sizeof ( sums [ <int> ] ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { num [ j ] = fastscan ( ) ; } for ( j = i ; j >= <int> ; j -- ) { sums [ j ] = MAX ( sums [ j ] + num [ j ] , sums [ j - <int> ] + num [ j ] ) ; } sums [ <int> ] += num [ <int> ] ; } ans [ Tc ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { ans [ Tc ] = MAX ( sums [ i ] , ans [ Tc ] ) ; } } while ( T -- ) { printf ( <str> , ans [ T ] ) ; } return <int> ; }", "label": 2, "id": 380}
{"input": "main ( ) { int t ; long long int r , a , b , x , y , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = ( x > y ) ? x : y ; b = ( x < y ) ? x : y ; r = b ; while ( a % b != <int> ) { r = a % b ; a = b ; b = r ; } l = ( x * y ) / r ; printf ( <str> , r , l ) ; } }", "label": 0, "id": 381}
{"input": "int main ( void ) { int t , a [ <int> ] , n , min = <int> , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 382}
{"input": "int main ( ) { int t , i , n , min = <int> , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { min = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( min > a [ j ] || min == <int> ) min = a [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 383}
{"input": "int main ( ) { int t , a [ <int> ] , n , i , sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { a [ i + <int> ] = a [ i ] < a [ i + <int> ] ? a [ i ] : a [ i + <int> ] ; sum += a [ i + <int> ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 384}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n ; scanf ( <str> , & n ) ; int i , j ; long int s [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & s [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = n - <int> ; j > <int> ; j -- ) { if ( s [ i ] [ j ] > s [ i ] [ j - <int> ] ) s [ i - <int> ] [ j - <int> ] += s [ i ] [ j ] ; else s [ i - <int> ] [ j - <int> ] += s [ i ] [ j - <int> ] ; } } printf ( <str> , s [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 1, "id": 385}
{"input": "int * * a ; long int maxsum = <int> ; void calc ( int n , int x , int r , long int tsum ) { long int <unk> ; int i ; for ( i = x ; i <= r && i < ( x + <int> ) ; i ++ ) { <unk> = tsum ; <unk> += a [ r ] [ i ] ; if ( r == ( n - <int> ) ) { if ( <unk> > maxsum ) maxsum = <unk> ; } else { calc ( n , i , r + <int> , <unk> ) ; } } } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } calc ( n , <int> , <int> , a [ <int> ] [ <int> ] ) ; printf ( <str> , maxsum ) ; } return <int> ; }", "label": 2, "id": 386}
{"input": "int main ( ) { int i , j , k , a , op1 , op2 ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & a ) ; int p [ a + <int> ] [ a + <int> ] ; for ( i = <int> ; i <= a ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & p [ i ] [ j ] ) ; } } for ( i = a - <int> ; i > <int> ; i -- ) { op1 = <int> ; op2 = <int> ; for ( j = i ; j > <int> ; j -- ) { op1 = p [ i + <int> ] [ j ] + p [ i ] [ j ] ; op2 = p [ i + <int> ] [ j + <int> ] + p [ i ] [ j ] ; if ( op1 >= op2 ) p [ i ] [ j ] = op1 ; else p [ i ] [ j ] = op2 ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 387}
{"input": "int main ( ) { int t , a , b , i , j , k ; scanf ( <str> , & t ) ; int g [ t ] , l [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j < a + b ; j ++ ) { if ( a % j && b % j == <int> ) g [ i ] = j ; else g [ i ] = <int> ; } for ( k = a * b ; k > <int> ; k -- ) { if ( k % a == <int> && k % b == <int> ) { l [ i ] = k ; break ; } } } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , g [ i ] , l [ i ] ) ; }", "label": 2, "id": 388}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , n1 , n2 , l , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; g = gcd ( n1 , n2 ) ; l = n1 * n2 / g ; printf ( <str> , g , l ) ; printf ( <str> ) ; } }", "label": 1, "id": 389}
{"input": "void main ( ) { int tc , a , b , c ; scanf ( <str> , & tc ) ; while ( tc != <int> ) { scanf ( <str> , & a , & b , & c ) ; printf ( <str> , a > b ? ( b > c ? b : ( a > c ? c : a ) ) : b < c ? b : a < c ? c : a ) ; tc -- ; } }", "label": 1, "id": 390}
{"input": "int n ; void input ( int a [ <int> ] [ <int> ] ) { int i , j , p ; scanf ( <str> , & n ) ; if ( n < <int> ) { exit ( <int> ) ; } else { for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } } } int sumtriangle ( int a [ <int> ] [ <int> ] ) { int i , j , max , Result_max = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> ) { max = a [ i ] [ j ] ; Result_max = max ; } else if ( i != <int> && j == <int> ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; Result_max = a [ i ] [ j ] ; } else if ( i != <int> && j > <int> && j < i ) { max = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; if ( max < ( a [ i - <int> ] [ j ] + a [ i ] [ j ] ) ) { max = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } a [ i ] [ j ] = max ; if ( max > Result_max ) { Result_max = max ; } } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; if ( ( max = a [ i ] [ j ] ) > Result_max ) { Result_max = max ; } } } } return Result_max ; } int main ( void ) { int a [ <int> ] [ <int> ] , times , result [ <int> ] , i = <int> , j ; scanf ( <str> , & times ) ; while ( times -- ) { input ( a ) ; result [ i ++ ] = sumtriangle ( a ) ; } for ( j = <int> ; j < i ; j ++ ) { printf ( <str> , result [ j ] ) ; } return <int> ; }", "label": 0, "id": 391}
{"input": "int main ( void ) { int t ; long long int a , b , x , y , gcd , lcm , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( <int> ) { if ( x % y == <int> ) { gcd = y ; break ; } else { temp = y ; y = x % y ; x = temp ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 392}
{"input": "int main ( void ) { long int T , i , a , b , LCM , t ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & a , & b ) ; t = a ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } LCM = ( t * b ) / a ; printf ( <str> , a , LCM ) ; } return <int> ; }", "label": 1, "id": 393}
{"input": "int main ( ) { long int i , j , count , n , t ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; count = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] > a [ i ] ) { count ++ ; } } count = count + n ; printf ( <str> , count ) ; } }", "label": 1, "id": 394}
{"input": "main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 395}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned int n , i ; scanf ( <str> , & n ) ; unsigned int a [ n ] , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 396}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; long N ; long * A ; long i ; long min = <int> ; long cost ; int c = <int> ; while ( c < T ) { scanf ( <str> , & N ) ; A = ( long * ) malloc ( N * sizeof ( long ) ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( i = <int> ; i < N ; i ++ ) { if ( min > A [ i ] ) { min = A [ i ] ; } } cost = min * ( N - <int> ) ; printf ( <str> , cost ) ; c = c + <int> ; } }", "label": 1, "id": 397}
{"input": "int main ( ) { int tests ; long temp , minval , i , n ; long long ans ; scanf ( <str> , & tests ) ; while ( tests -- ) { scanf ( <str> , & n ) ; minval = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < minval ) { minval = temp ; } } ans = ( n - <int> ) * minval ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 398}
{"input": "int main ( ) { int t , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; int a , b ; a = x ; b = y ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } printf ( <str> , a ) ; a = x ; b = y ; while ( a != b ) { if ( a < b ) { a += x ; } else { b += y ; } } printf ( <str> , a ) ; } return <int> ; }", "label": 2, "id": 399}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int numerator , denominator , n1 , n2 , remainder ; scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { numerator = n1 ; denominator = n2 ; } else { numerator = n2 ; denominator = n1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } long int gcd = denominator ; long int lcm = n1 * n2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 400}
{"input": "int sum ( int a [ <int> ] [ <int> ] , int i , int j , int n , int b [ <int> ] [ <int> ] ) { if ( i > n ) { return a [ i ] [ j ] ; } if ( b [ i ] [ j ] != <int> ) { return b [ i ] [ j ] ; } int s1 = a [ i ] [ j ] + sum ( a , i + <int> , j , n , b ) ; int s2 = a [ i ] [ j ] + sum ( a , i + <int> , j + <int> , n , b ) ; if ( s1 > s2 ) { b [ i ] [ j ] = s1 ; return s1 ; } else { b [ i ] [ j ] = s2 ; return s2 ; } } int main ( void ) { int a [ <int> ] [ <int> ] , n , i , j , k , T , b [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { b [ i ] [ j ] = <int> ; } } int ans = sum ( a , <int> , <int> , n , b ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 401}
{"input": "int main ( void ) { int a , b , gcd = <int> , lcm = <int> , n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a % b == <int> || b % a == <int> ) { if ( a % b == <int> ) gcd = a / b ; else gcd = b / a ; } else gcd = <int> ; lcm = a * b ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 402}
{"input": "int longestPath ( int numbers [ ROWS ] [ COLS ] , int m ) { int i ; int j ; for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( numbers [ i + <int> ] [ j ] < numbers [ i + <int> ] [ j + <int> ] ) { numbers [ i ] [ j ] = numbers [ i ] [ j ] + numbers [ i + <int> ] [ j + <int> ] ; } else { numbers [ i ] [ j ] = numbers [ i ] [ j ] + numbers [ i + <int> ] [ j ] ; } } } return numbers [ <int> ] [ <int> ] ; } void extraction ( int numbers [ ROWS ] [ COLS ] , int m ) { int i ; int j ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & numbers [ i ] [ j ] ) ; } } } int main ( ) { int n ; int m ; int i ; int answer ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; int numbers [ m ] [ m ] ; extraction ( numbers , m ) ; answer = longestPath ( numbers , m ) ; printf ( <str> , answer ) ; } return <int> ; }", "label": 0, "id": 403}
{"input": "int main ( ) { int n , l , a [ <int> ] [ <int> ] , sum = <int> , i , j , k ; printf ( <str> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; scanf ( <str> , & l ) ; for ( k = <int> ; k <= n ; k ++ ) { for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= l - <int> ; i ++ ) { if ( a [ i + <int> ] [ i ] > a [ i + <int> ] [ i + <int> ] ) { sum = sum + a [ i + <int> ] [ i ] ; } else { sum = sum + a [ i + <int> ] [ i + <int> ] ; } } } sum = sum + a [ <int> ] [ <int> ] ; printf ( <str> , sum ) ; }", "label": 3, "id": 404}
{"input": "int main ( ) { int t ; long int a , b , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 405}
{"input": "int main ( ) { int t , n , arr [ <int> ] = { } , i , j , k , check , temp , count ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { if ( j + i - <int> <= n ) { temp = arr [ j - <int> ] ; check = <int> ; for ( k = j ; ( k <= j + i - <int> ) ; k ++ ) { if ( arr [ k - <int> ] >= temp ) temp = arr [ k - <int> ] ; else { check = <int> ; break ; } } if ( check == <int> ) count ++ ; } else break ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 2, "id": 406}
{"input": "int main ( ) { int t , n , i , j , array [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } i -- ; while ( i ) { j = <int> ; while ( j < i ) { if ( array [ i ] [ j ] > array [ i ] [ j + <int> ] ) array [ i - <int> ] [ j ] += array [ i ] [ j ] ; else array [ i - <int> ] [ j ] += array [ i ] [ j + <int> ] ; j ++ ; } i -- ; } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 407}
{"input": "int maxm ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , n , a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] , max , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { max = - <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i == <int> && j == <int> ) sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; else if ( j == <int> ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else if ( i == j ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { sum [ i ] [ j ] = maxm ( sum [ i - <int> ] [ j ] , sum [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 408}
{"input": "int main ( ) { int t , n , a , b ; long long int min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; n -- ; while ( n -- ) { scanf ( <str> , & b ) ; if ( a >= b ) a = b ; min = min + a ; } printf ( <str> , min ) ; } return <int> ; }", "label": 1, "id": 409}
{"input": "int main ( ) { int i , num , t , a [ <int> ] , j , b [ <int> ] , min , n , sum ; printf ( <str> ) ; scanf ( <str> , & num ) ; for ( j = <int> ; j < num ; j ++ ) { printf ( <str> ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { b [ i ] = a [ i ] ; } else { b [ i ] = a [ i + <int> ] ; } } sum = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { sum = sum + b [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 410}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int i , m , z = <int> ; int a [ <int> ] ; int b [ <int> ] ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( m = <int> ; m > <int> ; m -- ) { for ( i = <int> ; i < <int> ; i ++ ) { b [ i ] = a [ i ] % m ; { if ( b [ i ] != <int> ) { break ; } if ( i == <int> ) { z = m ; printf ( <str> , z , ( a [ <int> ] * a [ <int> ] ) / z ) ; } } } } } }", "label": 2, "id": 411}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j = <int> , n , k = <int> , sum = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; if ( n == <int> ) sum = <int> ; while ( j >= <int> && j + <int> < n ) { while ( ( a [ j ] <= a [ j + <int> ] ) && j + <int> < n ) { k ++ ; j ++ ; } sum = sum + ( ( k * ( k + <int> ) ) / <int> ) ; k = <int> ; j ++ ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 412}
{"input": "int main ( ) { int t , i , j , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { long min , n ; scanf ( <str> , & n ) ; long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( min > a [ i ] ) min = a [ i ] ; printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 413}
{"input": "int main ( ) { int t , i ; long long int a , b , temp , lcm , m , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { temp = m ; m = n ; n = temp % m ; } lcm = ( a * b ) / m ; printf ( <str> , m , lcm ) ; } return <int> ; }", "label": 0, "id": 414}
{"input": "int main ( ) { int t , x , y , pr , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; pr = x * y ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } lcm = pr / x ; printf ( <str> , x , lcm ) ; } return <int> ; }", "label": 1, "id": 415}
{"input": "int main ( ) { int a [ MAX_SUPPORTED_ROWS ] [ MAX_SUPPORTED_ROWS ] = { <int> } ; int row_count = <int> ; int i = <int> , j = <int> ; int count ; scanf ( <str> , & count ) ; while ( count -- > <int> ) { scanf ( <str> , & row_count ) ; for ( i = <int> ; i < row_count ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } } }", "label": 1, "id": 416}
{"input": "int main ( ) { int t , q ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long int sum = <int> , i = <int> ; while ( i <= n - <int> ) { int c = <int> ; while ( a [ i ] <= a [ i + <int> ] && ( i + <int> < n ) ) { c ++ ; i ++ ; } i ++ ; sum += ( c * ( c + <int> ) / <int> ) ; } printf ( <str> , sum ) ; } }", "label": 0, "id": 417}
{"input": "long int gcd ( long int a , long int b ) ; int main ( ) { long int k , x , y , t ; scanf ( <str> , & t ) ; if ( t < <int> || t > <int> ) return <int> ; while ( t ) { scanf ( <str> , & x , & y ) ; k = gcd ( x , y ) ; printf ( <str> , k , ( x * y ) / k ) ; t -- ; } } long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 0, "id": 418}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; if ( test < <int> || test > <int> ) { return <int> ; } int ans [ <int> * test ] ; int t = <int> ; int j ; for ( j = <int> ; j < test ; j ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; if ( a < <int> || a > <int> || b < <int> || b > <int> ) { return <int> ; } int i ; int gcd = <int> , lcm = <int> ; if ( a > b ) { int temp = a ; a = b ; b = temp ; } int product = a * b ; for ( i = a ; i > <int> ; i = b % i ) { if ( b % i == <int> ) { gcd = i ; } else { int temp = a ; a = b % i ; b = temp ; } } lcm = product / gcd ; ans [ t ++ ] = gcd ; ans [ t ++ ] = lcm ; } for ( t = <int> ; t < <int> * test ; t = t + <int> ) { printf ( <str> , ans [ t ] , ans [ t + <int> ] ) ; } return <int> ; }", "label": 1, "id": 419}
{"input": "int main ( ) { int t , i , n , a , min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 420}
{"input": "int hcf ( int x , int y ) { if ( y != <int> ) return hcf ( y , x % y ) ; else return x ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , m , i , r , c ; long long int rs ; scanf ( <str> , & m , & n ) ; r = hcf ( n , m ) ; rs = m * n / r ; printf ( <str> , r , rs ) ; } return <int> ; }", "label": 1, "id": 421}
{"input": "void sort ( int * array , int p ) { int i , temp , j ; for ( i = <int> ; i < p ; i ++ ) { temp = array [ i ] ; for ( j = i - <int> ; j >= <int> && temp < array [ j ] ; j -- ) array [ j + <int> ] = array [ j ] ; array [ j + <int> ] = temp ; } } int min ( int m , int n ) { if ( m < n ) return m ; else return n ; } int main ( ) { int test , i , p , s , sum = <int> , j , a ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & p ) ; int array [ p ] ; for ( i = <int> ; i < p ; i ++ ) scanf ( <str> , & array [ i ] ) ; sort ( array , p ) ; s = array [ <int> ] ; for ( i = <int> ; i < p ; i ++ ) { s = min ( s , array [ i ] ) ; sum = sum + s ; } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 2, "id": 422}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int z , a [ <int> ] , i ; int count = <int> ; scanf ( <str> , & z ) ; for ( i = <int> ; i < z ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < z - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { count = count + a [ i ] ; a [ i + <int> ] = a [ i ] ; } else if ( a [ i ] > a [ i + <int> ] ) { count = count + a [ i + <int> ] ; } } printf ( <str> , count ) ; printf ( <str> ) ; } return <int> ; }", "label": 3, "id": 423}
{"input": "int main ( ) { long long int t , a , b , temp , t1 , x , y , lcm , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( a % b != <int> ) { t1 = b ; b = a % b ; a = t1 ; } lcm = ( x * y ) / b ; printf ( <str> , b , lcm ) ; } }", "label": 2, "id": 424}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , x , y , temp , gcd , lcm ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 425}
{"input": "int main ( ) { int i , j , k , n , rows ; scanf ( <str> , & n ) ; int arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = <int> ; } return <int> ; }", "label": 2, "id": 426}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int x = gcd ( a , b ) ; long long int lcm = ( a * b ) / x ; printf ( <str> , x , lcm ) ; } return <int> ; }", "label": 0, "id": 427}
{"input": "int main ( ) { int i , j , k ; unsigned long int n , t , a [ MAXROWS ] , count ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; count = <int> ; if ( n != <int> ) { for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < n ; k ++ ) { if ( j != k ) { if ( a [ j ] < a [ k ] ) { count ++ ; } } } } printf ( <str> , count ) ; } else if ( n == <int> && j == k && a [ j ] == a [ k ] ) { printf ( <str> ) ; } } return <int> ; }", "label": 2, "id": 428}
{"input": "int main ( ) { int in [ <int> ] , i , j , n , count ; int res [ <int> ] , t , k = <int> ; scanf ( <str> , & t ) ; while ( k < t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & in [ i ] ) ; count = n ; for ( i = <int> ; i < n ; i ++ ) for ( j = i ; j < n - <int> ; j ++ ) if ( in [ j ] <= in [ j + <int> ] ) count ++ ; else break ; res [ k ++ ] = count ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , res [ i ] ) ; return <int> ; }", "label": 0, "id": 429}
{"input": "main ( ) { int j , a , b , t , min , i , hcf = <int> , lcm ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( j = <int> ; j <= t ; j ++ ) { printf ( <str> ) ; scanf ( <str> , & a , & b ) ; min = a < b ? a : b ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) hcf = i ; } printf ( <str> , hcf ) ; lcm = a * b / hcf ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 430}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n > <int> ) { int x , t ; scanf ( <str> , & x ) ; int a [ x ] , i ; for ( i = <int> ; i < x ; i ++ ) scanf ( <str> , & a [ i ] ) ; t = a [ <int> ] ; for ( i = <int> ; i < x ; i ++ ) { if ( t > a [ i ] ) t = a [ i ] ; } printf ( <str> , t * ( x - <int> ) ) ; n -- ; } }", "label": 0, "id": 431}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 432}
{"input": "int main ( ) { long long int cost ; int t , i , j , temp , n ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( arr [ j ] > arr [ j + <int> ] ) { temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } } cost = arr [ <int> ] * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 433}
{"input": "int main ( ) { unsigned int t ; unsigned long n , i , j ; long long int a [ <int> ] , sum , k , l ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; k = <int> ; l = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) l ++ ; else { k = k + l * ( l + <int> ) / <int> ; l = <int> ; } } k = k + l * ( l + <int> ) / <int> ; sum = k + n ; printf ( <str> , sum ) ; t -- ; } }", "label": 0, "id": 434}
{"input": "int main ( void ) { int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( <str> ) ; scanf ( <str> , & A , & B ) ; if ( A > B ) { A = numerator ; B = denominator ; } else { A = denominator ; B = numerator ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return <int> ; }", "label": 3, "id": 435}
{"input": "int a [ <int> ] [ <int> ] ; int b [ <int> ] [ <int> ] ; int num ; int main ( ) { int n , i , j , MaxSum ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { b [ i ] [ j ] = - <int> ; } } MaxSum = SumsInTriangle ( <int> , <int> ) ; printf ( <str> , MaxSum ) ; } return <int> ; } int Max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int SumsInTriangle ( int i , int j ) { int t ; if ( i >= num ) return <int> ; if ( b [ i ] [ j ] != - <int> ) return b [ i ] [ j ] ; t = a [ i ] [ j ] + ( Max ( SumsInTriangle ( i + <int> , j ) , SumsInTriangle ( i + <int> , j + <int> ) ) ) ; b [ i ] [ j ] = t ; return t ; }", "label": 0, "id": 436}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 437}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int hcf = <int> ; hcf = gcd ( a , b ) ; long long int mul = a * b ; long long int lcm = mul / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 438}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; i = <int> , j = <int> ; int total = <int> ; while ( i <= n ) total = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , total ) ; } }", "label": 2, "id": 439}
{"input": "const unsigned int bufsize = <int> ; const unsigned int numbufsize = <int> ; const char zero = <char> ; const char newline = <char> ; const char space = <char> ; char inbuf [ <int> ] ; char outbuf [ <int> ] ; unsigned int inptr = <int> ; unsigned int outptr = <int> ; void dump ( unsigned int a [ ] , unsigned int j ) { unsigned int i ; printf ( <str> , j ) ; if ( j == <int> ) { printf ( <str> , a [ j ] ) ; return ; } for ( i = <int> ; i < j ; i ++ ) { printf ( <str> , a [ i ] ) ; } printf ( <str> , a [ j ] ) ; } unsigned int getint ( ) { unsigned int n = <int> ; while ( inbuf [ inptr ] != newline && inbuf [ inptr ] != space ) { n = n * <int> + ( inbuf [ inptr ++ ] - zero ) ; if ( inptr == bufsize ) { fread ( inbuf , bufsize , <int> , stdin ) ; inptr = <int> ; } } inptr ++ ; if ( inptr == bufsize ) { fread ( inbuf , bufsize , <int> , stdin ) ; inptr = <int> ; } return n ; } void setint ( unsigned int n ) { if ( n == <int> ) { outbuf [ outptr ++ ] = zero ; if ( outptr == bufsize ) { fwrite ( outbuf , bufsize , <int> , stdout ) ; outptr = <int> ; } outbuf [ outptr ++ ] = newline ; if ( outptr == bufsize ) { fwrite ( outbuf , bufsize , <int> , stdout ) ; outptr = <int> ; } } else { char numbuf [ <int> ] , i = <int> ; if ( outptr + <int> >= bufsize ) { fwrite ( outbuf , outptr , <int> , stdout ) ; outptr = <int> ; } numbuf [ -- i ] = newline ; while ( n > <int> ) { numbuf [ -- i ] = n % <int> + zero ; n = n / <int> ; } memcpy ( outbuf + outptr , numbuf + i , <int> - i ) ; outptr += ( <int> - i ) ; } } void initbuf ( ) { fread ( inbuf , bufsize , <int> , stdin ) ; } void flushbuf ( ) { fwrite ( outbuf , outptr , <int> , stdout ) ; } int main ( ) { unsigned int t , i , n ; initbuf ( ) ; t = getint ( ) ; for ( i = <int> ; i < t ; i ++ ) { unsigned int n = getint ( ) , j , a [ <int> ] , max , previous ; if ( n == <int> ) continue ; a [ <int> ] = previous = getint ( ) ; if ( n == <int> ) { setint ( previous ) ; continue ; } for ( j = <int> ; j < n - <int> ; j ++ ) { unsigned int k ; previous = a [ <int> ] ; a [ <int> ] = a [ <int> ] + getint ( ) ; for ( k = <int> ; k < j ; k ++ ) { unsigned int m = getint ( ) ; unsigned int current = a [ k ] ; a [ k ] = ( current > previous ) ? current + m : previous + m ; previous = current ; } a [ j ] = previous + getint ( ) ; } max = a [ <int> ] + getint ( ) ; previous = a [ <int> ] ; for ( j = <int> ; j < n - <int> ; j ++ ) { unsigned int m = getint ( ) ; unsigned int current = a [ j ] ; unsigned int x = ( current > previous ) ? current + m : previous + m ; if ( x > max ) max = x ; previous = current ; } unsigned int m = getint ( ) ; max = ( max > ( previous + m ) ) ? max : previous + m ; setint ( max ) ; } flushbuf ( ) ; return <int> ; }", "label": 1, "id": 440}
{"input": "int gcm ( int x , int y ) { if ( x == y ) return ( x ) ; if ( x % y == <int> ) return ( y ) ; if ( y % x == <int> ) return ( x ) ; if ( x > y ) return ( gcm ( x % y , y ) ) ; else return ( gcm ( x , y % x ) ) ; } main ( ) { int a , b , c , d , e , f , g ; scanf ( <str> , & a ) ; printf ( <str> ) ; while ( a -- ) { scanf ( <str> , & b , & c ) ; e = gcm ( b , c ) ; printf ( <str> , e ) ; g = ( c * b ) / e ; printf ( <str> , g ) ; } }", "label": 1, "id": 441}
{"input": "int main ( ) { int t , i , n ; long int * a , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; a = ( long int * ) malloc ( sizeof ( long int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; min = min < a [ i ] ? min : a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 442}
{"input": "int arr [ <int> ] [ <int> ] ; void disp ( int len ) { printf ( <str> ) ; int i , j ; for ( i = <int> ; i < len ; i ++ ) { printf ( <str> ) ; for ( j = <int> ; j < len ; j ++ ) { printf ( <str> , arr [ i ] [ j ] ) ; } } } int solve ( int x ) { int k , l ; if ( x == <int> ) return arr [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { arr [ k ] [ l ] += ret_max ( arr [ k + <int> ] [ l ] , arr [ k + <int> ] [ l + <int> ] ) ; } } return arr [ <int> ] [ <int> ] ; } int ret_max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int i , T , k , l , tmp , j ; scanf ( <str> , & T ) ; int N ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; for ( j = <int> ; j < N ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & tmp ) ; arr [ j ] [ k ] = tmp ; } } printf ( <str> , solve ( N ) ) ; } return <int> ; }", "label": 0, "id": 443}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; i ++ ) { int n ; scanf ( <str> , & n ) ; int arr [ <int> ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( int i = n - <int> ; i >= <int> ; i -- ) { int k = <int> ; for ( int j = <int> ; j <= i ; j ++ ) { arr [ i - <int> ] [ k ++ ] += arr [ i ] [ j - <int> ] > arr [ i ] [ j ] ? arr [ i ] [ j - <int> ] : arr [ i ] [ j ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 444}
{"input": "long long gcd ( long n , long m ) { if ( n % m == <int> || m == <int> ) return m ; else return gcd ( m , n % m ) ; } int main ( ) { long long n , m , t , l ; scanf ( <str> , & n , & m ) ; if ( n < m ) { t = n ; n = m ; m = t ; } t = gcd ( n , m ) ; l = ( n * m ) / t ; printf ( <str> , t , l ) ; }", "label": 1, "id": 445}
{"input": "void code ( ) { int n , i , k ; k = <int> ; long long int ans = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] >= a [ i ] ) k ++ ; else { k = ( k * ( k + <int> ) ) / <int> ; ans = ans + k ; k = <int> ; } } k = ( k * ( k + <int> ) ) / <int> ; ans = ans + k ; printf ( <str> , ans ) ; return ; } int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { code ( ) ; } return <int> ; }", "label": 0, "id": 446}
{"input": "int main ( ) { int t ; float a , b ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i = <int> , s = <int> ; scanf ( <str> , & n ) ; int p ; p = n - <int> ; while ( n -- ) { long int k ; scanf ( <str> , & k ) ; if ( n == p ) i = k ; if ( k < i ) { i = k ; s = s + i ; } else if ( k > i ) { s = s + i ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 447}
{"input": "int main ( ) { long long int a , b , g , l , n ; int i , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; n = ( a > b ? b : a ) ; for ( i = n ; i >= <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 448}
{"input": "int t , n , i , j , a [ <int> ] [ <int> ] , visited [ <int> ] [ <int> ] , <unk> [ <int> ] [ <int> ] ; int solve ( int i , int j ) { if ( i > n - <int> ) return <int> ; if ( visited [ i ] [ j ] != <int> ) { return <unk> [ i ] [ j ] ; } int t1 = solve ( i + <int> , j ) ; int t2 = solve ( i + <int> , j + <int> ) ; int t = max ( t1 , t2 ) + a [ i ] [ j ] ; visited [ i ] [ j ] = <int> ; <unk> [ i ] [ j ] = t ; return t ; } int main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & a [ i ] [ j ] ) ; visited [ i ] [ j ] = <int> ; } } printf ( <str> , solve ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 449}
{"input": "int sum [ <int> ] [ <int> ] , num ; int max_sum ( int arr [ ] [ <int> ] , int row , int col ) { int r1 , r2 ; if ( row == ( num - <int> ) ) sum [ row ] [ col ] = arr [ row ] [ col ] ; else if ( col != <int> ) { r1 = max_sum ( arr , row + <int> , col + <int> ) ; if ( r1 > sum [ row + <int> ] [ col ] ) sum [ row ] [ col ] = r1 + arr [ row ] [ col ] ; else sum [ row ] [ col ] = sum [ row + <int> ] [ col ] + arr [ row ] [ col ] ; } else { r1 = max_sum ( arr , row + <int> , col ) ; r2 = max_sum ( arr , row + <int> , col + <int> ) ; sum [ row ] [ col ] = r1 > r2 ? ( r1 + arr [ row ] [ col ] ) : ( r2 + arr [ row ] [ col ] ) ; } return sum [ row ] [ col ] ; } int main ( ) { int n , i , r , c , arr [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & num ) ; for ( r = <int> ; r < num ; r ++ ) for ( c = <int> ; c <= r ; c ++ ) scanf ( <str> , & arr [ r ] [ c ] ) ; printf ( <str> , max_sum ( arr , <int> , <int> ) ) ; } }", "label": 0, "id": 450}
{"input": "int arr [ <int> ] , max = <int> , row = <int> ; void findsum ( int sum , int i , int j , int n ) { int sum1 , sum2 ; if ( n > row - <int> ) { if ( sum > max ) max = sum ; return ; } sum1 = sum + arr [ i + n + j ] ; sum2 = sum + arr [ i + n + j + <int> ] ; findsum ( sum1 , i + n , j , n + <int> ) ; findsum ( sum2 , i + n , j + <int> , n + <int> ) ; } int main ( void ) { int i , t = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < ( row * ( row + <int> ) / <int> ) ; i ++ ) scanf ( <str> , & arr [ i ] ) ; i = arr [ <int> ] ; findsum ( i , <int> , <int> , <int> ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 451}
{"input": "int main ( void ) { int t , n , i , j , z ; long long int k , a [ <int> ] , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = <int> ; for ( z = <int> ; z < n ; z ++ ) { scanf ( <str> , & a [ z ] ) ; } i = <int> ; j = <int> ; while ( j < n ) { if ( a [ j ] > a [ j + <int> ] || n == j + <int> ) { k = j - i + <int> ; sum += ( k * ( k + <int> ) / <int> ) ; i = j + <int> ; } j ++ ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 452}
{"input": "int main ( ) { int t , a , b , x , y , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( ( r = a % b ) != <int> ) { a = b ; b = r ; } printf ( <str> , b , ( ( x * y ) / b ) ) ; } return <int> ; }", "label": 1, "id": 453}
{"input": "int main ( ) { int a , b , t , i , c , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) c = func ( a , b ) ; else c = func ( b , a ) ; d = ( a * b ) / c ; printf ( <str> , c , d ) ; } return <int> ; } int func ( int x , int y ) { if ( y % x == <int> ) return x ; else return func ( y % x , x ) ; }", "label": 1, "id": 454}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( void ) { int t = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; long long int ans = <int> ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; long long int dp [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - <int> ] [ j ] ; else if ( j == i ) dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - <int> ] [ j - <int> ] ; else dp [ i ] [ j ] = a [ i ] [ j ] + max ( dp [ i - <int> ] [ j ] , dp [ i - <int> ] [ j - <int> ] ) ; } } i = n - <int> ; ans = dp [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( ans < dp [ i ] [ j ] ) ans = dp [ i ] [ j ] ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 455}
{"input": "int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int c ; if ( a > b ) { while ( a != <int> ) { c = a - b ; a = c ; } } else { while ( b != <int> ) { c = b - a ; a = c ; } } int gcd , lcm ; gcd = c ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 456}
{"input": "int find_sum ( int * triangle , int row , int column , int rows ) { int below , right , <unk> = row + <int> ; if ( <unk> == rows ) { return triangle [ row * <int> + column ] ; } below = find_sum ( triangle , <unk> , column , rows ) ; right = find_sum ( triangle , <unk> , column + <int> , rows ) ; return triangle [ row * <int> + column ] + ( below > right ? below : right ) ; } int find_max_sum ( int * triangle , int rows ) { return find_sum ( triangle , <int> , <int> , rows ) ; } int main ( ) { int testcases , rows , i , j , * triangle ; triangle = malloc ( sizeof ( int ) * <int> ) ; scanf ( <str> , & testcases ) ; while ( testcases -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangle [ i * <int> + j ] ) ; } } printf ( <str> , find_max_sum ( triangle , rows ) ) ; } return <int> ; }", "label": 2, "id": 457}
{"input": "int compare ( const void * a , const void * b ) ; int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int number , i , cost = <int> , temp ; scanf ( <str> , & number ) ; int arr [ number ] ; for ( i = <int> ; i < number ; i ++ ) scanf ( <str> , & arr [ i ] ) ; qsort ( arr , number , sizeof ( int ) , compare ) ; for ( i = <int> ; i < number - <int> ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] ) { cost = cost + arr [ i ] ; arr [ i + <int> ] = arr [ i ] ; } } printf ( <str> , cost ) ; } } int compare ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; }", "label": 1, "id": 458}
{"input": "int main ( ) { int t , i ; long long int a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int temp ; long long int x = a , y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a ) ; printf ( <str> , ( x * y / a ) ) ; } return <int> ; }", "label": 1, "id": 459}
{"input": "int main ( ) { int a , b , z , t , i , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; z = a > b ? b : a ; for ( i = z ; i < <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } } printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 460}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; long a , b , t , l , g ; scanf ( <str> , & a , & b ) ; l = a * b ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } g = a ; l /= a ; printf ( <str> , g , l ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 461}
{"input": "int * A [ <int> ] ; int max ( int , int , int , int ) ; int main ( ) { int n , i , j , k ; int T [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & T [ i ] ) ; k = T [ i ] * ( T [ i ] + <int> ) / <int> ; A [ i ] = ( int * ) malloc ( k * sizeof ( int ) ) ; for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , max ( <int> , <int> , T [ i ] , i ) ) ; } return <int> ; } int max ( int i , int j , int T , int k ) { int sum1 = <int> , sum2 = <int> ; if ( i == T - <int> ) if ( A [ k ] [ i * ( i + <int> ) / <int> + j ] > A [ k ] [ <int> + i * ( i + <int> ) / <int> + j ] ) return A [ k ] [ i * ( i + <int> ) / <int> + j ] ; else return A [ k ] [ <int> + i * ( i + <int> ) / <int> + j ] ; sum1 = A [ k ] [ i * ( i + <int> ) / <int> + j ] + max ( i + <int> , j , T , k ) ; sum2 = A [ k ] [ i * ( i + <int> ) / <int> + j ] + max ( i + <int> , j + <int> , T , k ) ; if ( sum1 > sum2 ) { printf ( <str> , sum1 ) ; return sum1 ; } else { printf ( <str> , sum2 ) ; return sum2 ; } }", "label": 2, "id": 462}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( void ) { int a , b , lcm = <int> , n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd ( a , b ) ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( <str> , gcd ( a , b ) , lcm ) ; } return <int> ; }", "label": 1, "id": 463}
{"input": "int main ( void ) { int n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( int i = n - <int> ; i > <int> ; i -- ) for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 464}
{"input": "long unsigned int leastCD ( long unsigned int a , long unsigned int b ) ; long unsigned int greatestCD ( long unsigned int a , long unsigned int b ) { int k , j ; if ( a > b ) { while ( <int> ) { k = a / b ; j = a - k * b ; if ( j == <int> ) break ; a = b ; b = j ; } return b ; } else { while ( <int> ) { k = b / a ; j = b - k * a ; if ( j == <int> ) break ; b = a ; a = j ; } return a ; } } long unsigned int leastCD ( long unsigned int a , long unsigned int b ) { return ( a * b / greatestCD ( a , b ) ) ; } int main ( ) { int t , k = <int> , i ; long unsigned int A , B , * lcm , * gcd ; scanf ( <str> , & t ) ; gcd = ( long unsigned int * ) malloc ( t * sizeof ( long unsigned int ) ) ; lcm = ( long unsigned int * ) malloc ( t * sizeof ( long unsigned int ) ) ; while ( t ) { scanf ( <str> , & A , & B ) ; gcd [ k ] = greatestCD ( A , B ) ; lcm [ k ] = leastCD ( A , B ) ; k ++ ; t -- ; } for ( i = <int> ; i < k ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } }", "label": 0, "id": 465}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long unsigned n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( long unsigned i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int l = a [ <int> ] ; for ( long unsigned i = <int> ; i < n ; i ++ ) if ( a [ i ] < l ) l = a [ i ] ; printf ( <str> , ( long unsigned ) l * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 466}
{"input": "int main ( ) { int T , i , a , b , temp ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; temp = a * b ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } printf ( <str> , a , temp / a ) ; } return <int> ; }", "label": 1, "id": 467}
{"input": "int main ( void ) { int T , A , B , C , D ; scanf ( <str> , & T ) ; scanf ( <str> , & A , & B ) ; if ( A % B == <int> && B % A == <int> ) { C = <int> ; D = A * B ; printf ( <str> , C , D ) ; } else printf ( <str> ) ; return <int> ; }", "label": 1, "id": 468}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , t , row , k , i , j ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = row - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] = a [ i + <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i ] [ j ] = a [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 469}
{"input": "int main ( void ) { int test , row , i , j , k ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & row ) ; int array [ row ] [ row ] ; int col = <int> ; for ( j = <int> ; j < row ; j ++ ) { for ( k = <int> ; k < col + <int> ; k ++ ) { scanf ( <str> , & array [ j ] [ k ] ) ; } col = col + <int> ; } int sum = <int> ; for ( j = <int> , k = <int> ; j < row ; j ++ ) { sum = sum + array [ j ] [ k ] ; } int flag = <int> ; int <unk> ; for ( k = <int> ; k < row - <int> ; k ++ ) { int <unk> = flag + <int> ; <unk> = <int> ; for ( j = row - <int> ; j >= <int> ; j -- ) { <unk> = <unk> + array [ j ] [ <unk> ] ; if ( <unk> == <int> ) { <unk> = <int> ; } else { <unk> = <unk> - <int> ; } } flag = flag + <int> ; if ( <unk> > sum ) { sum = <unk> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 470}
{"input": "typedef <unk> { <unk> = <int> , <unk> = <int> } <unk> ; typedef struct { int * <unk> ; } <unk> ; static <unk> getInput ( <unk> * * <unk> , int numberOfRows ) ; static int <unk> ( <unk> * <unk> , int numberOfRows ) ; int main ( ) { <unk> * <unk> = NULL ; <unk> <unk> = <unk> ; int numberOfRows = <int> ; int MaxSum = <int> ; scanf ( <str> , & numberOfRows ) ; <unk> = getInput ( & <unk> , numberOfRows ) ; if ( <unk> ) { MaxSum = <unk> ( <unk> , numberOfRows ) ; printf ( <str> , MaxSum ) ; } return MaxSum ; } static <unk> getInput ( <unk> * * <unk> , int numberOfRows ) { int i , j ; <unk> <unk> = <unk> ; <unk> * <unk> = NULL ; if ( numberOfRows > <unk> ) { <unk> = <unk> ; } else { <unk> = malloc ( sizeof ( <unk> ) * numberOfRows ) ; for ( i = <int> ; i < numberOfRows ; i ++ ) { int <unk> = i + <int> ; <unk> [ i ] <fp> <unk> = malloc ( sizeof ( int ) * <unk> ) ; for ( j = <int> ; j < <unk> ; j ++ ) { int temp = <int> ; scanf ( <str> , & temp ) ; if ( temp < <int> ) { <unk> [ i ] <fp> <unk> [ j ] = temp ; } else { <unk> [ i ] <fp> <unk> [ j ] = <int> ; } } } } if ( <unk> ) { * <unk> = <unk> ; } return <unk> ; } static int <unk> ( <unk> * <unk> , int numberOfRows ) { int i , <unk> ; int MaxSum = <int> ; for ( i = <int> ; i < numberOfRows ; i ++ ) { if ( i == <int> ) { <unk> = <int> ; MaxSum = <unk> [ i ] <fp> <unk> [ <unk> ] ; } else { if ( <unk> [ i ] <fp> <unk> [ <unk> ] < <unk> [ i ] <fp> <unk> [ <unk> + <int> ] ) { <unk> ++ ; } MaxSum += <unk> [ i ] <fp> <unk> [ <unk> ] ; } } return MaxSum ; }", "label": 1, "id": 471}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , x , y , t , gcd , lcm ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 472}
{"input": "int main ( ) { int t ; long a , b , x , y , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a >= b ) { x = a ; y = b ; while ( ! ( x % a == <int> && x % b == <int> ) ) x ++ ; while ( ! ( a % y == <int> && b % y == <int> ) ) y -- ; lcm = x ; gcd = y ; } else { x = b ; y = a ; while ( ! ( x % a == <int> && x % b == <int> ) ) x ++ ; while ( ! ( a % y == <int> && b % y == <int> ) ) y -- ; lcm = x ; gcd = y ; } printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 473}
{"input": "int main ( ) { int a [ <int> ] ; int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } } } printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 474}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , result = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 475}
{"input": "int main ( ) { int i , j , n , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 476}
{"input": "int main ( ) { int i , t , min ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] < min ) min = a [ i + <int> ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 477}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int tc = <int> ; tc < t ; tc ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; long long int c = <int> ; for ( int i = <int> ; i + <int> < n && i < n ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) c ++ ; } printf ( <str> , ( long long int ) c + n ) ; } return <int> ; }", "label": 1, "id": 478}
{"input": "int main ( ) { int test_case ; unsigned long n , count , sum , i ; scanf ( <str> , & test_case ) ; while ( test_case -- ) { scanf ( <str> , & n ) ; unsigned long a [ n ] ; count = <int> ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) { count ++ ; } else { sum = sum + ( count * ( count + <int> ) / <int> ) ; count = <int> ; } } sum = sum + ( count * ( count + <int> ) / <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 479}
{"input": "int main ( ) { int T , N , i , j , triangle [ <int> ] ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N * ( N + <int> ) / <int> ; i ++ ) scanf ( <str> , & triangle [ i ] ) ; for ( i = N - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( triangle [ i * ( i + <int> ) / <int> + j ] >= triangle [ i * ( i + <int> ) / <int> + j + <int> ] ) triangle [ ( i - <int> ) * i / <int> + j ] += triangle [ i * ( i + <int> ) / <int> + j ] ; else triangle [ ( i - <int> ) * i / <int> + j ] += triangle [ i * ( i + <int> ) / <int> + j + <int> ] ; } } printf ( <str> , triangle [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 480}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i , s , hcf , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) s = a ; else s = b ; for ( i = <int> ; i <= s ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { hcf = i ; } } printf ( <str> , hcf ) ; lcm = ( a * b ) / hcf ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 2, "id": 481}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 482}
{"input": "int main ( ) { int a , b , i , Gcd , Lcm ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a || i <= b ; ++ i ) if ( b % i == <int> && a % i == <int> ) Gcd = i ; Lcm = ( a * b ) / Gcd ; printf ( <str> , Gcd ) ; printf ( <str> , Lcm ) ; return <int> ; }", "label": 1, "id": 483}
{"input": "int gcd ( int , int ) ; main ( ) { int t , a , b , g ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; t -- ; } return <int> ; } int gcd ( int x , int y ) { if ( x == <int> || y == <int> ) return <int> ; else if ( x == <int> || y == <int> ) return ( x == <int> ? y : x ) ; else if ( x > y ) return gcd ( y , x % y ) ; else if ( x < y ) return ( x , y % x ) ; }", "label": 1, "id": 484}
{"input": "int main ( ) { int t , i , j , num [ <int> ] [ <int> ] , n ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( num [ i ] [ j ] > num [ i ] [ j + <int> ] ) num [ i - <int> ] [ j ] += num [ i ] [ j ] ; else num [ i - <int> ] [ j ] += num [ i ] [ j + <int> ] ; } } printf ( <str> , num [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 485}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & j ) ; if ( i == <int> ) min = j ; if ( j < min ) min = j ; } printf ( <str> , ( long ) min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 486}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int n ; scanf ( <str> , & n ) ; int ar [ n ] ; int i , length = <int> , sum = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ar [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { length ++ ; if ( ar [ i ] > ar [ i + <int> ] || i == n - <int> ) { sum += ( length ) * ( length + <int> ) / <int> ; length = <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 487}
{"input": "int main ( ) { int test , n , arr [ <int> ] , i , j , max , ans [ <int> ] , sum = <int> , temp , k ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { sum = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { k = <int> ; max = <int> ; do { scanf ( <str> , & temp ) ; if ( max < temp ) max = temp ; arr [ j ] = max ; k ++ ; } while ( k <= j ) ; } for ( j = <int> ; j < n ; j ++ ) sum = sum + arr [ j ] ; ans [ i ] = sum ; } for ( i = <int> ; i < test ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 1, "id": 488}
{"input": "int greater ( int a , int b ) { if ( a >= b ) { return a ; } else { return b ; } } int main ( ) { int n , t , i , r , s = <int> , c = <int> , d [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { s = <int> ; scanf ( <str> , & t ) ; for ( r = <int> ; r < t ; r ++ ) { for ( c = <int> ; c <= r ; c ++ ) { scanf ( <str> , & d [ r ] [ c ] ) ; } } for ( r = t - <int> ; r >= <int> ; r -- ) { for ( c = <int> ; c <= r ; c ++ ) { d [ r ] [ c ] = d [ r ] [ c ] + greater ( d [ r + <int> ] [ c ] , d [ r + <int> ] [ c + <int> ] ) ; } } printf ( <str> , d [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 489}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t , n , i , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; if ( n > <int> ) for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == j ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else if ( j == <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } max = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j ] > max ) max = a [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; } return ( <int> ) ; }", "label": 0, "id": 490}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int n ; scanf ( <str> , & n ) ; int A [ <int> ] [ <int> ] , B [ <int> ] [ <int> ] ; while ( n > <int> ) { int N ; scanf ( <str> , & N ) ; int i , j ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; B [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) B [ i ] [ <int> ] = B [ i - <int> ] [ <int> ] + A [ i ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) B [ i ] [ i ] = B [ i - <int> ] [ i - <int> ] + A [ i ] [ i ] ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j < N - <int> ; j ++ ) B [ i ] [ j ] = max ( B [ i - <int> ] [ j ] , B [ i - <int> ] [ j - <int> ] ) + A [ i ] [ j ] ; int m = B [ N - <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) if ( B [ N - <int> ] [ i ] > m ) m = B [ N - <int> ] [ i ] ; printf ( <str> , m ) ; return <int> ; n -- ; } return <int> ; }", "label": 1, "id": 491}
{"input": "int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; int min ; long long int n ; scanf ( <str> , & n ) ; int ptr [ <int> ] ; for ( j = <int> ; j < t ; j ++ ) { for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ptr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { min = ptr [ <int> ] ; if ( ptr [ i ] < min ) min = ptr [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 1, "id": 492}
{"input": "int main ( ) { int t , n , a [ <int> ] , c , s , i , k , x , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; c = <int> ; s = <int> ; for ( x = <int> ; x < n ; x ++ ) { scanf ( <str> , & a [ x ] ) ; c ++ ; } k = c ; while ( k >= <int> ) { for ( i = <int> ; i < k ; i ++ ) { c = <int> ; if ( a [ i ] != a [ i + <int> ] ) { if ( a [ i ] > a [ i + <int> ] ) { s = s + a [ i + <int> ] ; for ( j = i ; j < k - <int> ; j ++ ) { a [ j ] = a [ j + <int> ] ; c ++ ; } } else { s = s + a [ i ] ; for ( j = i + <int> ; j < k - <int> ; j ++ ) { a [ j ] = a [ j + <int> ] ; c ++ ; } } k = c ; } } } printf ( <str> , s ) ; } return <int> ; }", "label": 3, "id": 493}
{"input": "int main ( ) { int store , num1 , num2 , temp , m , check = <int> , tst , i ; long int lcm , hcf ; scanf ( <str> , & tst ) ; while ( check < tst ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 < num2 ) { temp = num2 ; num2 = num1 ; num1 = temp ; } for ( i = <int> ; i <= num2 ; i ++ ) { if ( num1 % i == <int> && num2 % i == <int> ) { hcf = i ; } } lcm = num1 / hcf ; lcm = lcm * num2 ; printf ( <str> , hcf , lcm ) ; check ++ ; } }", "label": 0, "id": 494}
{"input": "int main ( ) { int t ; long long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long long int c = a , d = b ; int r = a % b ; while ( r != <int> ) { a = b ; b = r ; r = a % b ; } long long int mul = c / b ; printf ( <str> , b , ( mul ) * d ) ; } }", "label": 0, "id": 495}
{"input": "int main ( ) { int n , i , j , max , sum = <int> , flag , t , no ; scanf ( <str> , & t ) ; if ( t <= <int> ) { while ( t != <int> ) { scanf ( <str> , & n ) ; if ( n > <int> && n < <int> ) { int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & no ) ; if ( no >= <int> && no <= <int> ) a [ i ] [ j ] = no ; else exit ( <int> ) ; } } max = a [ <int> ] [ <int> ] ; sum = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { flag = i ; for ( j = <int> ; flag == i ; j ++ ) { sum = a [ i ] [ j ] + a [ i + <int> ] [ j ] + a [ i + <int> ] [ j + <int> ] ; flag ++ ; if ( sum > max ) { max = sum ; } } } printf ( <str> , max ) ; t -- ; } else exit ( <int> ) ; } } return <int> ; }", "label": 1, "id": 496}
{"input": "long long int gc ( long long int , long long int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int gcd , lcm ; gcd = gc ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } long long int gc ( long long int a , long long int b ) { while ( a != b ) { if ( a > b ) { return gc ( a - b , b ) ; } else { return gc ( a , b - a ) ; } } return a ; }", "label": 0, "id": 497}
{"input": "int main ( ) { long long int t , a , b , x , i , hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = <int> ; while ( x <= a && x <= b ) { if ( a % x == <int> && b % x == <int> ) hcf = x ; x ++ ; } printf ( <str> , hcf ) ; lcm = ( a * b ) / hcf ; printf ( <str> , lcm ) ; } }", "label": 2, "id": 498}
{"input": "int main ( ) { int n , i , t , j , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & t ) ; int a [ t ] [ t ] ; for ( j = <int> ; j < t ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = t - <int> ; j > <int> ; j -- ) for ( k = <int> ; k < j ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + <int> ] ) a [ j - <int> ] [ k ] += a [ j ] [ k ] ; else a [ j - <int> ] [ k ] += a [ j ] [ k + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 499}
{"input": "short int rows ; short int space [ <int> ] [ <int> ] ; short int sum_cache [ <int> ] [ <int> ] ; short int sumtrian ( short int , short int ) ; short int main ( ) { short int t , i , j ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & space [ i ] [ j ] ) ; sum_cache [ i ] [ j ] = - <int> ; } printf ( <str> , sumtrian ( <int> , <int> ) ) ; -- t ; rows = <int> ; } return <int> ; } short int sumtrian ( short int curr_row , short int curr_col ) { if ( curr_row < ( rows - <int> ) ) { if ( sum_cache [ curr_row ] [ curr_col ] == - <int> ) { short int sb , sr ; sb = sumtrian ( curr_row + <int> , curr_col ) ; sr = sumtrian ( curr_row + <int> , curr_col + <int> ) ; sum_cache [ curr_row ] [ curr_col ] = space [ curr_row ] [ curr_col ] + ( ( sb > sr ) ? sb : sr ) ; } return sum_cache [ curr_row ] [ curr_col ] ; } sum_cache [ curr_row ] [ curr_col ] = space [ curr_row ] [ curr_col ] ; return sum_cache [ curr_row ] [ curr_col ] ; }", "label": 3, "id": 500}
{"input": "int maxLen ( int * mem , int t ) { int * cp = ( int * ) malloc ( sizeof ( int ) * t * t ) ; int i , j ; int max ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { cp [ i * t + j ] = mem [ i * t + j ] ; } } for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { cp [ i * t + j ] += cp [ ( i - <int> ) * t + j ] ; } else if ( j == i ) { cp [ i * t + j ] += cp [ ( i - <int> ) * t + j - <int> ] ; } else { cp [ i * t + j ] += ( cp [ ( i - <int> ) * t + j - <int> ] > cp [ ( i - <int> ) * t + j ] ) ? cp [ ( i - <int> ) * t + j - <int> ] : cp [ ( i - <int> ) * t + j ] ; } } } i = t - <int> ; max = cp [ i * t ] ; for ( j = <int> ; j < t ; j ++ ) { if ( cp [ i * t + j ] > max ) { max = cp [ i * t + j ] ; } } return max ; } int main ( ) { int n , t ; int i , j ; int * mem ; int len = <int> ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; mem = ( int * ) malloc ( sizeof ( int ) * t * t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , mem + i * t + j ) ; } } printf ( <str> , maxLen ( mem , t ) ) ; free ( mem ) ; } return <int> ; }", "label": 0, "id": 501}
{"input": "int main ( void ) { unsigned long long T , N , i , j , max , lar , A [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; } for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) A [ i ] [ <int> ] += A [ i - <int> ] [ <int> ] ; else if ( i == j ) A [ i ] [ j ] += A [ i - <int> ] [ j - <int> ] ; else { max = ( A [ i - <int> ] [ j - <int> ] > A [ i - <int> ] [ j ] ) ? A [ i - <int> ] [ j - <int> ] : A [ i - <int> ] [ j ] ; A [ i ] [ j ] += max ; } } } lar = A [ N - <int> ] [ <int> ] ; for ( j = <int> ; j < N ; j ++ ) { if ( A [ N - <int> ] [ j ] > lar ) lar = A [ N - <int> ] [ j ] ; } printf ( <str> , lar ) ; } return <int> ; }", "label": 0, "id": 502}
{"input": "int main ( ) { int tc ; scanf ( <str> , & tc ) ; for ( int t = <int> ; t < tc ; t ++ ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int n1 = a , n2 = b ; while ( b != <int> ) { int temp = a % b ; a = b ; b = temp ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 0, "id": 503}
{"input": "void main ( ) { int array [ LENGTH ] [ LENGTH ] , i , j , k , l , m , n , temp [ LENGTH ] [ <int> * ( LENGTH - <int> ) ] , highest [ LENGTH ] , test_cases , test_case_no [ LENGTH ] ; for ( i = <int> ; i < LENGTH ; i ++ ) { for ( j = <int> ; j < <int> * ( LENGTH - <int> ) ; j ++ ) { temp [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < LENGTH ; i ++ ) { highest [ i ] = <int> ; } scanf ( <str> , & test_cases ) ; for ( i = <int> ; i < test_cases ; i ++ ) { scanf ( <str> , & test_case_no [ i ] ) ; for ( j = <int> ; j <= test_case_no [ i ] ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & array [ j ] [ k ] ) ; } printf ( <str> ) ; } temp [ <int> ] [ <int> ] = array [ <int> ] [ <int> ] ; for ( l = <int> ; l <= test_case_no [ i ] ; l ++ ) { for ( m = <int> ; m < l ; ) { for ( k = <int> ; k < <int> * l ; ) { temp [ l ] [ k ] = temp [ l - <int> ] [ m ] + array [ l ] [ m ] ; k ++ ; temp [ l ] [ k ] = temp [ l - <int> ] [ m ] + array [ l ] [ m + <int> ] ; k ++ ; m ++ ; } } } for ( n = <int> ; n < ( test_case_no [ i ] - <int> ) * <int> ; n ++ ) { if ( temp [ test_case_no [ i ] ] [ n ] > temp [ test_case_no [ i ] ] [ n + <int> ] ) { highest [ i ] = temp [ test_case_no [ i ] ] [ n ] ; } else { highest [ i ] = temp [ test_case_no [ i ] ] [ n + <int> ] ; } } } for ( i = <int> ; i < LENGTH ; i ++ ) { for ( j = <int> ; j < <int> * ( LENGTH - <int> ) ; j ++ ) { temp [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < test_cases ; i ++ ) { printf ( <str> , highest [ i ] ) ; } }", "label": 3, "id": 504}
{"input": "long int sum ( long int [ ] [ <int> ] , long int , long int , long int ) ; int main ( ) { long int t , n , i , j , s ; long int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } s = a [ <int> ] [ <int> ] + sum ( a , <int> , <int> , n - <int> ) ; printf ( <str> , s ) ; } return <int> ; } long int sum ( long int ar [ ] [ <int> ] , long int p , long int q , long int s ) { long int s1 , s2 ; if ( p + <int> < s ) { s1 = ar [ p + <int> ] [ q ] + sum ( ar , p + <int> , q , s ) ; s2 = ar [ p + <int> ] [ q + <int> ] + sum ( ar , p + <int> , q + <int> , s ) ; if ( s1 > s2 ) return s1 ; else return s2 ; } else if ( p + <int> == s ) { if ( ar [ p + <int> ] [ q ] > ar [ p + <int> ] [ q + <int> ] ) return ar [ p + <int> ] [ q ] ; else return ar [ p + <int> ] [ q + <int> ] ; } else return <int> ; }", "label": 2, "id": 505}
{"input": "int gcd ( int a , int b ) { int x , y ; for ( x = <int> ; x <= a && x <= b ; x ++ ) { if ( a % x == <int> && b % x == <int> ) { y = x ; } } return y ; } int main ( ) { int a , b , t , l , g ; int i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 506}
{"input": "int main ( ) { int i , j , k , t , n , * * a , ans ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( j = <int> ; j < n ; j ++ ) { a [ j ] = ( int * ) malloc ( sizeof ( int ) * ( j + <int> ) ) ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { a [ j ] [ k ] += MAX ( a [ j + <int> ] [ k ] , a [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , * * a ) ; free ( a ) ; } return <int> ; }", "label": 0, "id": 507}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 508}
{"input": "int main ( ) { long long int A , B , T , i , j , GCD , C ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; C = A * B ; if ( A == <int> || B == <int> ) { printf ( <str> ) ; } else { for ( j = <int> ; ; j ++ ) { if ( j % A == <int> && j % B == <int> ) { break ; } } GCD = ( C / j ) ; printf ( <str> , GCD , j ) ; } } return <int> ; }", "label": 2, "id": 509}
{"input": "int main ( ) { int i , j , k , m , n , max ; scanf ( <str> , & n ) ; int sum [ n ] ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & m ) ; sum [ k ] = <int> ; int a [ m ] ; for ( i = <int> ; i < m ; i ++ ) { a [ i ] = <int> ; } for ( i = <int> ; i <= m ; i ++ ) { max = a [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] ) ; if ( max < a [ j ] ) max = a [ j ] ; } sum [ k ] += max ; } } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , sum [ i ] ) ; } return <int> ; }", "label": 1, "id": 510}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int cost , i ; cost = <int> ; long long int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { cost = cost + a [ i + <int> ] ; n - <int> ; } else if ( a [ i ] < a [ i + <int> ] ) { a [ i + <int> ] = a [ i ] ; cost = cost + a [ i ] ; n - <int> ; } } printf ( <str> , cost ) ; } }", "label": 1, "id": 511}
{"input": "int get_gcd ( int a , int b ) { if ( b == <int> ) return a ; else return get_gcd ( b , a % b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a == <int> ) printf ( <str> , b , <int> ) ; else if ( b == <int> ) printf ( <str> , a , <int> ) ; else { int gcd = get_gcd ( a , b ) ; int lcm = a * b ; lcm /= gcd ; printf ( <str> , gcd , lcm ) ; } } return <int> ; }", "label": 1, "id": 512}
{"input": "int Gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { Gcd ( b , a % b ) ; } } int main ( ) { int k , a , b , i , j , c , l , arr [ <int> ] ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & b , & a ) ; l = Gcd ( b , a ) ; if ( l == <int> ) { c = b * a ; } else { c = l * ( b / l ) * ( a / l ) ; } printf ( <str> , l , c ) ; } return <int> ; }", "label": 1, "id": 513}
{"input": "long int gcd ( long int a , long int b ) { long int t ; while ( b % a != <int> ) { t = b % a ; b = a ; a = t ; } return ( a ) ; } long int lcm ( long int a , long int b ) { long int t ; t = <int> ; while ( ( t * b ) % a != <int> ) t ++ ; return ( t * b ) ; } int main ( ) { long int t , a , b , i , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { i = a ; a = b ; b = i ; } printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return ( <int> ) ; }", "label": 2, "id": 514}
{"input": "int arr , dp [ <int> ] , pre [ <int> ] ; int MAX ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , la , lb , lc ; scanf ( <str> , & t ) ; for ( la = <int> ; la < t ; la ++ ) { int num ; scanf ( <str> , & num ) ; for ( lb = <int> ; lb <= num ; lb ++ ) { for ( lc = <int> ; lc <= lb ; lc ++ ) { scanf ( <str> , & arr ) ; pre [ lc ] = dp [ lc ] ; dp [ lc ] = arr + MAX ( pre [ lc ] , pre [ lc - <int> ] ) ; } } int mx = <int> ; for ( lb = <int> ; lb < <int> ; lb ++ ) { if ( mx < dp [ lb ] ) mx = dp [ lb ] ; } printf ( <str> , mx ) ; } return <int> ; }", "label": 1, "id": 515}
{"input": "int main ( ) { int t ; long long int a , b , n , de , r , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; de = b ; } else { n = b ; de = a ; } r = n % de ; while ( r != <int> ) { n = de ; de = r ; r = n % de ; } g = r ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 3, "id": 516}
{"input": "int main ( ) { int a , i , min , no1 , no2 , lcm [ <int> ] = { <int> } , c , gcd [ <int> ] = { <int> } ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & no1 ) ; scanf ( <str> , & no2 ) ; if ( no1 > no2 ) min = no2 ; else min = no1 ; for ( c = <int> ; c <= min ; c ++ ) { if ( no1 % c == <int> && no2 % c == <int> ) { gcd [ i ] = c ; } } if ( no1 % no2 == <int> ) lcm [ i ] = no1 ; else if ( no2 % no1 == <int> ) lcm [ i ] = no2 ; else lcm [ i ] = no1 * no2 ; } for ( i = <int> ; i < a ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } return <int> ; }", "label": 3, "id": 517}
{"input": "int main ( ) { int a [ SIZE ] [ SIZE ] ; int i , j , n , nl ; scanf ( <str> , & n ) ; while ( n != <int> ) { scanf ( <str> , & nl ) ; for ( i = <int> ; i < nl ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = nl - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; n -- ; } return <int> ; }", "label": 0, "id": 518}
{"input": "int main ( ) { int t , i , n , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 519}
{"input": "int max ( int a , int b ) { return ( a >= b ) ? a : b ; } int main ( ) { int t , a [ mx ] [ mx ] ; long int i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { a [ i - <int> ] [ j - <int> ] = max ( a [ i - <int> ] [ j - <int> ] + a [ i ] [ j - <int> ] , a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 520}
{"input": "int main ( ) { int t , a , b , gcd , lcm , a1 , b1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; a1 = a ; b1 = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else b = b - a ; } gcd = a ; lcm = ( a1 * b1 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 521}
{"input": "int * * arr ; long long * * dp ; long long max ( long long a , long long b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; arr = ( int * * ) malloc ( sizeof ( int * ) * n ) ; dp = ( long long * * ) malloc ( sizeof ( long long * ) * n ) ; for ( i = <int> ; i < n ; i ++ ) { arr [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; dp [ i ] = ( long long * ) malloc ( sizeof ( long long ) * ( i + <int> ) ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; dp [ i ] [ j ] = <int> ; } } dp [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( j == <int> ) dp [ i ] [ j ] = dp [ i - <int> ] [ j ] + arr [ i ] [ j ] ; else if ( j == i - <int> ) dp [ i ] [ j ] = dp [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ; else dp [ i ] [ j ] = max ( dp [ i - <int> ] [ j ] , dp [ i - <int> ] [ j - <int> ] ) + arr [ i ] [ j ] ; } } long long maxi = dp [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( dp [ n - <int> ] [ i ] > maxi ) maxi = dp [ n - <int> ] [ i ] ; } printf ( <str> , maxi ) ; } return <int> ; }", "label": 1, "id": 522}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , M = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { b [ i ] [ j ] = <int> ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] + b [ i - <int> ] [ j ] >= a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ) { b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; } else b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; } } for ( i = <int> ; i < n ; i ++ ) { if ( b [ n ] [ i ] > M ) M = b [ n ] [ i ] ; } printf ( <str> , M ) ; } return <int> ; }", "label": 1, "id": 523}
{"input": "int main ( ) { unsigned long long int t , n , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; unsigned long long int a [ n ] ; scanf ( <str> , & a [ <int> ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 524}
{"input": "int main ( void ) { unsigned long long T , N , i , j , max ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; unsigned long long A [ <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; } for ( i = N - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] += ( A [ i + <int> ] [ j + <int> ] > A [ i + <int> ] [ j ] ) ? A [ i + <int> ] [ j + <int> ] : A [ i + <int> ] [ j ] ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 525}
{"input": "int row [ <int> ] ; int cur [ <int> ] ; int row2 [ <int> ] ; void <unk> ( int len ) { int i = <int> ; if ( len == <int> ) { row [ <int> ] = cur [ <int> ] ; return ; } for ( i = <int> ; i < len ; i ++ ) { if ( i > <int> && i < len - <int> ) { if ( row [ i ] < row [ i - <int> ] ) row2 [ i ] = row [ i - <int> ] + cur [ i ] ; else row2 [ i ] = row [ i ] + cur [ i ] ; } else if ( i < len - <int> ) { row2 [ i ] = row [ i ] + cur [ i ] ; } else row2 [ i ] = row [ i - <int> ] + cur [ i ] ; } for ( i = <int> ; i < len ; i ++ ) { row [ i ] = row2 [ i ] ; } } int main ( ) { int T ; int n , j , max = <int> ; int i = <int> , cell ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & cell ) ; cur [ j ] = cell ; } <unk> ( i + <int> ) ; } max = row [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max < row [ i ] ) max = row [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 526}
{"input": "int gcd ( int a , int b ) { return b == <int> ? a : gcd ( b , a % b ) ; } int main ( ) { int t ; long a , b , res , lcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; res = gcd ( a , b ) ; lcd = ( a * b ) / res ; printf ( <str> , res , lcd ) ; } return <int> ; }", "label": 0, "id": 527}
{"input": "int main ( ) { int i , j , n , max , sum , t , A [ <int> ] ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- , sum = <int> ) { scanf ( <str> , & n ) ; scanf ( <str> , & A [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ , max = <int> ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ j ] ) ; if ( A [ j ] > max ) max = A [ j ] ; } sum += max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 528}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , n , k , p ; scanf ( <str> , & n ) ; scanf ( <str> , & k ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p ) ; if ( p < k ) k = p ; } int res = k * ( n - <int> ) ; printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 529}
{"input": "int main ( ) { int gcd ( int , int ) ; int i , a , b , t , hcf , lcm ; scanf ( <str> , & t ) ; int c [ t ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; c [ i ] [ <int> ] = hcf ; c [ i ] [ <int> ] = lcm ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , c [ i ] [ <int> ] , c [ i ] [ <int> ] ) ; } } int gcd ( int x , int y ) { int a , b ; if ( x == <int> ) return y ; else { a = y % x ; b = x ; gcd ( a , b ) ; } }", "label": 1, "id": 530}
{"input": "main ( ) { int i , t , k , j ; long int n , minimum , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; long int A [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & A [ j ] ) ; minimum = A [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( A [ j ] < minimum ) minimum = A [ j ] ; } b = ( n - <int> ) * minimum ; printf ( <str> , b ) ; } }", "label": 0, "id": 531}
{"input": "main ( ) { int t , i , j , rows , mat [ <int> ] [ <int> ] , sum , large , p , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { sum = <int> ; scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; } for ( i = rows - <int> ; i >= <int> ; i -- ) { large = mat [ i ] [ <int> ] ; p = <int> ; for ( j = <int> ; j <= i ; j ++ ) { if ( i == rows - <int> ) { if ( large < mat [ i ] [ j ] ) { large = mat [ i ] [ j ] ; p = j ; } } else { if ( large < mat [ i ] [ j ] && ( j == p || j == p - <int> ) ) { large = mat [ i ] [ j ] ; p = j ; } } } sum += large ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 532}
{"input": "int main ( void ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] , b [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; int sum = a [ <int> ] [ <int> ] , max = <int> , k = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( i == n - <int> ) { max = a [ i ] [ k ] > a [ i ] [ k + <int> ] ? a [ i ] [ k ] : a [ i ] [ k + <int> ] ; sum += max ; break ; } if ( ( ( a [ i + <int> ] [ k ] + a [ i ] [ k ] ) == ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) || ( a [ i + <int> ] [ k ] + a [ i ] [ k ] ) == ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) ) || ( ( a [ i ] [ k ] + a [ i + <int> ] [ k + <int> ] ) == ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) || ( a [ i ] [ k ] + a [ i + <int> ] [ k + <int> ] ) == ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) ) && ( i + <int> ) ) { if ( ( a [ i + <int> ] [ k + <int> ] + a [ i + <int> ] [ k + <int> ] ) > ( a [ i + <int> ] [ k + <int> ] + a [ i + <int> ] [ k + <int> ] ) || ( a [ i + <int> ] [ k + <int> ] + a [ i + <int> ] [ k + <int> ] ) > ( a [ i + <int> ] [ k + <int> ] + a [ i + <int> ] [ k + <int> ] ) ) { max = a [ i ] [ k + <int> ] ; ++ k ; } else if ( ( ( a [ i + <int> ] [ k ] + a [ i + <int> ] [ k ] ) > ( a [ i + <int> ] [ k + <int> ] + a [ i + <int> ] [ k + <int> ] ) && ( a [ i + <int> ] [ k ] + a [ i + <int> ] [ k ] ) > ( a [ i + <int> ] [ k + <int> ] + a [ i + <int> ] [ k + <int> ] ) ) || ( ( a [ i + <int> ] [ k ] + a [ i + <int> ] [ k + <int> ] ) > ( a [ i + <int> ] [ k + <int> ] + a [ i + <int> ] [ k + <int> ] ) && ( a [ i + <int> ] [ k ] + a [ i + <int> ] [ k + <int> ] ) > ( a [ i + <int> ] [ k + <int> ] + a [ i + <int> ] [ k + <int> ] ) ) ) { max = a [ i ] [ k ] ; } else { max = a [ i ] [ k + <int> ] ; ++ k ; } } else if ( ( ( a [ i + <int> ] [ k ] + a [ i ] [ k ] ) >= ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) && ( a [ i + <int> ] [ k ] + a [ i ] [ k ] ) >= ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) ) || ( ( a [ i ] [ k ] + a [ i + <int> ] [ k + <int> ] ) >= ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) && ( a [ i ] [ k ] + a [ i + <int> ] [ k + <int> ] ) >= ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) ) ) { max = a [ i ] [ k ] ; } else { max = a [ i ] [ k + <int> ] ; ++ k ; } sum = sum + max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 533}
{"input": "int main ( ) { int i , t , j , k ; int n [ <int> ] ; int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n [ i ] ) ; for ( j = <int> ; j < n [ i ] ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } int sum ; sum = <int> ; for ( j = <int> ; j < n [ i ] - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) sum = sum + a [ j ] ; else sum = sum + a [ j + <int> ] ; } printf ( <str> , sum ) ; printf ( <str> ) ; } return <int> ; }", "label": 3, "id": 534}
{"input": "long int gcdf ( long int , long int ) ; int main ( ) { long int t , a , b , i , lc , gc ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; gc = gcdf ( a , b ) ; lc = ( a * b ) / gc ; printf ( <str> , gc , lc ) ; } } long int gcdf ( long int m , long int n ) { long int temp ; if ( m < n ) { temp = m ; m = n ; n = temp ; } while ( ( m % n ) != <int> ) { temp = m ; m = n ; n = temp % n ; } return n ; }", "label": 0, "id": 535}
{"input": "int hcf ( long int a , long int b ) { long int t ; if ( a < b ) { t = a ; a = b ; b = t ; } if ( a % b == <int> ) return b ; a = a % b ; return hcf ( a , b ) ; } int main ( ) { long int a , b , h , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; h = hcf ( a , b ) ; printf ( <str> , h , a / h * b ) ; } return <int> ; }", "label": 0, "id": 536}
{"input": "int main ( ) { int t , n , i , j ; int arr [ <int> ] [ <int> ] = { { <int> } } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 537}
{"input": "int main ( ) { int a , x , y , b , n , t , gcd , lcm ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 538}
{"input": "int main ( ) { int t , i , j ; long a , b ; scanf ( <str> , & t ) ; long int h [ t ] , l [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; ( j <= a && j <= b ) ; j ++ ) { if ( a % j == <int> && b % j == <int> ) h [ i ] = j ; } l [ i ] = a * b / h [ i ] ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , h [ i ] , l [ i ] ) ; return <int> ; }", "label": 2, "id": 539}
{"input": "int Tri [ <int> ] [ <int> ] , RSum [ <int> ] [ <int> ] ; void rootSum ( int , int ) ; int levels = <int> , x = <int> , y = <int> ; int readint ( ) { int cc = getc ( stdin ) ; for ( ; cc < <char> || cc > <char> ; ) cc = getc ( stdin ) ; int ret = <int> ; for ( ; cc >= <char> && cc <= <char> ; ) { ret = ret * <int> + cc - <char> ; cc = getc ( stdin ) ; } return ret ; } int main ( ) { int Input [ <int> ] ; int i , j , k = <int> , iter = <int> , size , t ; t = readint ( ) ; for ( iter = <int> ; iter <= t ; iter ++ ) { k = <int> ; levels = readint ( ) ; size = levels * ( levels + <int> ) / <int> ; for ( i = <int> ; i < size ; i ++ ) Input [ i ] = readint ( ) ; for ( i = <int> ; i <= levels ; i ++ ) { for ( j = i ; j >= <int> ; j -- ) { Tri [ j ] [ i - j + <int> ] = Input [ k ++ ] ; } } for ( i = levels ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { rootSum ( i - j + <int> , j ) ; } } printf ( <str> , RSum [ <int> ] [ <int> ] ) ; } return <int> ; } void rootSum ( int j , int i ) { RSum [ j ] [ i ] = - <int> ; if ( j + i - <int> != levels ) { if ( RSum [ j ] [ i ] < RSum [ j + <int> ] [ i ] + Tri [ j ] [ i ] ) { RSum [ j ] [ i ] = RSum [ j + <int> ] [ i ] + Tri [ j ] [ i ] ; } if ( RSum [ j ] [ i ] < RSum [ j ] [ i + <int> ] + Tri [ j ] [ i ] ) { RSum [ j ] [ i ] = RSum [ j ] [ i + <int> ] + Tri [ j ] [ i ] ; } } else RSum [ j ] [ i ] = Tri [ j ] [ i ] ; }", "label": 0, "id": 540}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { long int a , b ; scanf ( <str> , & a , & b ) ; long int min = ( a < b ) ? a : b ; long int j ; unsigned long long int hcf ; unsigned long long int p = a * b ; for ( j = min ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) hcf = j ; } unsigned long long int lcm = p / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 541}
{"input": "int main ( ) { int x ; int n ; int i ; int temp ; int test ; scanf ( <str> , & test ) ; while ( test > <int> ) { n = <int> ; scanf ( <str> , & x ) ; int a [ x ] ; for ( i = <int> ; i < x ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < x - <int> ; i ++ ) { if ( a [ i + <int> ] > a [ i ] ) { n += a [ i ] ; temp = a [ i ] ; a [ i ] = a [ i + <int> ] ; a [ i + <int> ] = temp ; } else { n += a [ i + <int> ] ; } } printf ( <str> , n ) ; test -- ; } return <int> ; }", "label": 1, "id": 542}
{"input": "int store [ MAXSIZE ] [ MAXSIZE ] ; int finds ( int , int , int ) ; int main ( ) { int n , rows , count , sum , i , j ; int result [ MAXSIZE ] , store [ MAXSIZE ] [ MAXSIZE ] ; for ( i = <int> ; i < MAXSIZE ; i ++ ) for ( j = <int> ; j < MAXSIZE ; store [ i ] [ j ++ ] = <int> ) ; scanf ( <str> , & n ) ; for ( count = <int> ; count <= n ; count ++ ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & store [ i ] [ j ] ) ; } } sum = finds ( <int> , <int> , rows ) ; result [ count - <int> ] = sum ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; } int finds ( int i , int j , int row ) { int sum1 = <int> , sum2 = <int> ; if ( i == row - <int> ) return store [ i ] [ j ] ; else { sum1 = finds ( i + <int> , j , row ) ; if ( j + <int> < row ) sum2 = finds ( i + <int> , j + <int> , row ) ; return store [ i ] [ j ] + ( sum2 > sum1 ? sum2 : sum1 ) ; } }", "label": 2, "id": 543}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int a [ n ] [ n ] ; int i , j ; for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 544}
{"input": "long int hcf ( long int , long int ) ; long long int lcm ( long int , long int ) ; int main ( ) { long long int l ; long int t , h , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; l = lcm ( a , b ) ; h = hcf ( a , b ) ; printf ( <str> , h , l ) ; } return <int> ; } long int hcf ( long int a , long int b ) { if ( b == <int> ) return a ; else return hcf ( b , a % b ) ; } long long int lcm ( long int a , long int b ) { long long int lm = <int> , i ; for ( i = <int> ; a > b ? i <= a : i <= b ; ) { if ( ( a % i == <int> ) || ( b % i == <int> ) ) { lm = lm * i ; if ( a % i == <int> ) a = a / i ; if ( b % i == <int> ) b = b / i ; continue ; } i ++ ; } return lm ; }", "label": 2, "id": 545}
{"input": "void calc ( int a [ ] , int n ) { int cost = <int> , i = <int> , min ; min = a [ <int> ] ; while ( i < n ) { if ( a [ i ] < min ) { min = a [ i ] ; } i ++ ; } cost = ( n - <int> ) * min ; printf ( <str> , cost ) ; } int main ( ) { int a [ <int> ] , n , t , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; i = <int> ; while ( i < n ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } calc ( a , n ) ; } return <int> ; }", "label": 0, "id": 546}
{"input": "int c , d ; void fact ( int [ <int> ] [ <int> ] , int , int , int ) ; int main ( void ) { int k [ <int> ] [ <int> ] , f = <int> , g = <int> , j , z , l , m , h ; scanf ( <str> , & z ) ; for ( j = <int> ; j < z ; j ++ ) ; { scanf ( <str> , & h ) ; for ( l = <int> ; l < h ; l ++ ) { for ( m = <int> ; m <= l ; m ++ ) { scanf ( <str> , & k [ l ] [ m ] ) ; } } fact ( k , f , g , h ) ; printf ( <str> , d ) ; } return <int> ; } fact ( int s [ <int> ] [ <int> ] , int a , int b , int n ) { c += s [ a ] [ b ] ; if ( b == <int> ) { if ( c > d ) d = c ; } fact ( s , a + <int> , b , n ) ; fact ( s , a + <int> , b + <int> , n ) ; }", "label": 3, "id": 547}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i <= t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , min = <int> ; for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { min = a [ i + <int> ] ; } } int cost = min * ( n - <int> ) ; return cost ; } }", "label": 3, "id": 548}
{"input": "main ( ) { long int A , B , gcd , lcm , rem , T , nr , dr ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { nr = A ; dr = B ; } else { nr = B ; dr = A ; } while ( dr != <int> ) { rem = nr % dr ; nr = dr ; dr = rem ; } gcd = nr ; lcm = ( A * B ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 0, "id": 549}
{"input": "long int gcd ( int a , int b ) { if ( b != <int> ) return gcd ( b , a % b ) ; else return a ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 550}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int Array [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & Array [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { Array [ i ] [ j ] += ( Array [ i + <int> ] [ j ] > Array [ i + <int> ] [ j + <int> ] ? Array [ i + <int> ] [ j ] : Array [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , Array [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 551}
{"input": "int main ( ) { int t , i , n , j , k ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j + <int> ] [ k + <int> ] > a [ j + <int> ] [ k ] ) { a [ j ] [ k ] = a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ; } else a [ j ] [ k ] = a [ j ] [ k ] + a [ j + <int> ] [ k ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 552}
{"input": "int a [ <int> ] [ <int> ] , n ; int flag [ <int> ] [ <int> ] ; void init ( ) { int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { a [ i ] [ j ] = <int> ; flag [ i ] [ j ] = <int> ; } } } int res ( int i , int j ) { int res1 , res2 , res3 ; if ( i >= n ) return <int> ; else if ( flag [ i ] [ j ] != <int> ) return flag [ i ] [ j ] ; else { res1 = a [ i ] [ j ] ; res2 = res ( i + <int> , j ) ; res3 = res ( i + <int> , j + <int> ) ; if ( res2 > res3 ) { flag [ i ] [ j ] = res1 + res2 ; return res1 + res2 ; } else { flag [ i ] [ j ] = res1 + res3 ; return res1 + res3 ; } } } int main ( ) { int i , j , num ; scanf ( <str> , & num ) ; while ( num -- ) { scanf ( <str> , & n ) ; init ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , res ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 553}
{"input": "int main ( ) { long int i , j , t , a , c , arr [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & a ) ; for ( i = <int> ; i <= a ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i <= a ; i ++ ) { j = i + <int> ; if ( arr [ i ] < arr [ j ] ) c = c + <int> ; } c = c + a ; printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 554}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { int a , b , i ; scanf ( <str> , & a , & b ) ; int gcd = <int> ; int min ; if ( a > b ) min = a ; else min = b ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } int lcm ; lcm = gcd * ( a / gcd ) * ( b / gcd ) ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; t -- ; } return <int> ; }", "label": 2, "id": 555}
{"input": "int main ( ) { int ans ; int x , n , i , j , num ; scanf ( <str> , & num ) ; while ( num -- ) { ans = <int> ; scanf ( <str> , & n ) ; x = n ; int arr [ n ] [ n ] ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { arr [ i ] [ j + <int> ] = <int> ; scanf ( <str> , & arr [ i ] [ j ] ) ; if ( i != <int> && j != <int> ) { if ( arr [ i - <int> ] [ j ] < arr [ i - <int> ] [ j - <int> ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; } if ( i != <int> && j == <int> ) { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; } if ( ans <= arr [ i ] [ j ] ) ans = arr [ i ] [ j ] ; } } printf ( <str> , ans ) ; } }", "label": 0, "id": 556}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long a , b , minmultiple ; scanf ( <str> , & a , & b ) ; minmultiple = ( a > b ) ? a : b ; while ( <int> ) { if ( minmultiple % a == <int> && minmultiple % b == <int> ) { break ; } ++ minmultiple ; } printf ( <str> , ( a * b ) / minmultiple , minmultiple ) ; } }", "label": 2, "id": 557}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int i = <int> ; int x , y ; while ( i ++ < T ) { int a , b ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else if ( b > a ) { b = b - a ; } } printf ( <str> , a ) ; printf ( <str> , ( x * y ) / a ) ; } return <int> ; }", "label": 1, "id": 558}
{"input": "int Calculate ( int * , int ) ; int main ( ) { int a [ <int> ] , i , t , n , j , count ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ i ] ) ; count = Calculate ( a , n ) ; printf ( <str> , count ) ; } return <int> ; } int Calculate ( int * a , int n ) { int i , count = <int> , j , temp1 = <int> , temp2 = <int> ; for ( i = <int> , j = <int> ; i < n - <int> ; i ++ , j ++ ) { if ( a [ i ] < a [ j ] ) { temp1 ++ ; } temp2 ++ ; if ( temp2 > temp1 ) { count ++ ; temp1 = temp2 = <int> ; } } return count + n ; }", "label": 3, "id": 559}
{"input": "int maxi ( int a , int b ) { return a < b ? b : a ; } int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( <str> , & n ) ; int vec1 [ n + <int> ] [ n + <int> ] ; int vec2 [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; vec2 [ <int> ] [ <int> ] = vec1 [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { vec2 [ i ] [ <int> ] = vec2 [ i - <int> ] [ <int> ] + vec1 [ i ] [ <int> ] ; } else if ( j == i ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } else if ( vec2 [ i - <int> ] [ j ] > vec2 [ i - <int> ] [ j - <int> ] ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } } } max = vec2 [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( vec2 [ n ] [ i ] > max ) max = vec2 [ n ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 560}
{"input": "main ( n ) { int a [ <int> ] [ <int> ] , k , i , j ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i + <int> ; j ++ ) a [ i - <int> ] [ j ] += m ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 561}
{"input": "int h = <int> , * tr ; int main ( ) { int nt , * res ; int * i , j , k , l ; scanf ( <str> , & nt ) ; res = ( int * ) malloc ( sizeof ( int ) * nt ) ; for ( l = <int> ; l < nt ; l ++ ) { scanf ( <str> , & h ) ; int n = ( h * ( h + <int> ) ) / <int> ; tr = ( int * ) malloc ( n * sizeof ( int ) ) ; i = tr ; for ( j = <int> ; j < n ; j ++ , i ++ ) { scanf ( <str> , i ) ; } res [ l ] = sum ( <int> , <int> ) ; free ( tr ) ; } for ( l = <int> ; l < nt ; l ++ ) printf ( <str> , res [ l ] ) ; printf ( <str> ) ; return <int> ; } int sum ( int i , int j ) { int down , right ; if ( i == h - <int> ) return tr [ ( ( i * ( i + <int> ) ) / <int> ) + j ] ; down = sum ( i + <int> , j ) ; right = sum ( i + <int> , j + <int> ) ; if ( right > down ) return right + tr [ ( ( i * ( i + <int> ) ) / <int> ) + j ] ; else return down + tr [ ( ( i * ( i + <int> ) ) / <int> ) + j ] ; }", "label": 2, "id": 562}
{"input": "int main ( ) { int t , n , i , j , sum , ans , k , min ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; min = <int> ; ans = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) { min = a [ i ] ; ans = i ; } } { for ( i = <int> ; i < n - <int> ; i ++ ) sum += min ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 563}
{"input": "int main ( ) { int a , t , i , b , c , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a <= b ) c = a ; else c = b ; for ( i = <int> ; i <= c ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } } if ( g != i ) g = <int> ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 1, "id": 564}
{"input": "int maxsum = <int> ; int * * arr ; int no_of_rows ; int main ( ) { int t , i , j , k ; scanf ( <str> , & t ) ; int result [ t ] ; i = <int> ; while ( i < t ) { scanf ( <str> , & no_of_rows ) ; arr = ( int * * ) malloc ( no_of_rows * sizeof ( int * ) ) ; j = <int> ; while ( j < no_of_rows ) { arr [ j ] = ( int * ) calloc ( j + <int> , sizeof ( int ) ) ; k = <int> ; while ( k <= j ) { scanf ( <str> , & arr [ j ] [ k ] ) ; k ++ ; } j ++ ; } func ( <int> , <int> , <int> ) ; result [ i ] = maxsum ; maxsum = <int> ; i ++ ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; } int func ( int row , int col , int sum ) { if ( row < no_of_rows - <int> ) { sum = sum + arr [ row ] [ col ] ; func ( row + <int> , col , sum ) ; func ( row + <int> , col + <int> , sum ) ; } if ( row == no_of_rows - <int> ) { sum = sum + arr [ row ] [ col ] ; if ( sum >= maxsum ) maxsum = sum ; } }", "label": 2, "id": 565}
{"input": "int findLength ( int a ) { int sum = <int> ; for ( int i = <int> ; i <= a ; i ++ ) { sum += i ; } return sum ; } int main ( ) { int n ; scanf ( <str> , & n ) ; int t [ n ] ; int res [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & t [ i ] ) ; int l = findLength ( t [ i ] ) ; int trian [ l ] ; for ( int k = <int> ; k < l ; k ++ ) { scanf ( <str> , & trian [ k ] ) ; } int j = <int> , k = <int> ; int sum = trian [ <int> ] ; while ( j < t [ i ] ) { if ( trian [ k ] > trian [ k + <int> ] ) { sum += trian [ k ] ; k += ++ j ; } else { sum += trian [ k + <int> ] ; k += ++ j + <int> ; } } res [ i ] = sum ; } for ( int i = <int> ; i < n ; i ++ ) printf ( <str> , res [ i ] ) ; }", "label": 1, "id": 566}
{"input": "int main ( ) { int t , n , a [ <int> ] , c , s , i , k , x , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; c = <int> ; s = <int> ; for ( x = <int> ; x < n ; x ++ ) { scanf ( <str> , & a [ x ] ) ; c ++ ; } k = c ; while ( k >= <int> ) { for ( i = <int> ; i < k ; i ++ ) { c = <int> ; if ( a [ i ] != a [ i + <int> ] ) { if ( a [ i ] > a [ i + <int> ] ) { s = s + a [ i + <int> ] ; for ( j = i ; j < k - <int> ; j ++ ) { a [ j ] = a [ j + <int> ] ; c ++ ; } } else { s = s + a [ i ] ; for ( j = i + <int> ; j < k - <int> ; j ++ ) { a [ j ] = a [ j + <int> ] ; c ++ ; } } k = c ; } } } printf ( <str> , s ) ; } return <int> ; }", "label": 3, "id": 567}
{"input": "int main ( ) { long long int t , gcd , lcm , i , temp1 , temp2 , n1 , n2 ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; temp1 = n1 ; temp2 = n2 ; while ( temp1 != temp2 ) { if ( temp1 > temp2 ) { temp1 = temp1 - temp2 ; } else { temp2 = temp2 - temp1 ; } } gcd = temp1 ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 568}
{"input": "int main ( ) { int t , i , n , a , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 569}
{"input": "int max ( int x , int y ) { return ( x > y ? x : y ) ; } int main ( ) { int result = - <int> , test_cases , number_of_rows , i , j ; int arr [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & test_cases ) ; while ( test_cases -- ) { scanf ( <str> , & number_of_rows ) ; for ( i = <int> ; i < number_of_rows ; i ++ ) for ( j = <int> ; j <= i + <int> ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = <int> ; i < number_of_rows ; i ++ ) for ( j = <int> ; j <= i + <int> ; j ++ ) arr [ i ] [ j ] = max ( ( arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ) , ( arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ) ) ; i -- ; for ( j = <int> ; j <= i ; j ++ ) if ( arr [ i ] [ j ] > result ) result = arr [ i ] [ j ] ; memset ( arr , <int> , <int> ) ; printf ( <str> , result ) ; } return <int> ; }", "label": 1, "id": 570}
{"input": "int rpn ( int * , int , int ) ; int cache [ <int> ] [ <int> ] ; int maxj = <int> , maxk = <int> ; int main ( ) { int i = - <int> , count = <int> , j_count , j = - <int> , k = - <int> ; scanf ( <str> , & count ) ; int arr [ <int> ] [ <int> ] ; while ( ++ i < count ) { int k = <int> , l = <int> ; for ( k = <int> ; k < <int> ; k ++ ) for ( l = <int> ; l < <int> ; l ++ ) { cache [ k ] [ l ] = <int> ; arr [ k ] [ l ] = <int> ; } j = - <int> ; scanf ( <str> , & j_count ) ; while ( ++ j < j_count ) { int k = - <int> ; while ( ++ k <= j ) scanf ( <str> , & arr [ j ] [ k ] ) ; } maxj = j ; maxk = k ; printf ( <str> , rpn ( & arr [ <int> ] [ <int> ] , <int> , <int> ) ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int rpn ( int * arr , int j , int k ) { { if ( ( j >= maxj ) || ( k > maxj ) ) return <int> ; if ( cache [ j ] [ k ] != <int> ) return cache [ j ] [ k ] ; return arr [ j * <int> + k ] + max ( rpn ( arr , j + <int> , k ) , rpn ( arr , j + <int> , k + <int> ) ) ; } }", "label": 2, "id": 571}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] + a [ i + <int> ] [ j ] > a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 572}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ <int> ] [ <int> ] = { { <int> } } ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 573}
{"input": "int main ( ) { unsigned int i , j , n , c , t ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n ) ; unsigned int a , min = <int> ; long long int cost ; c = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) min = a ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 574}
{"input": "int main ( ) { int testcases , i ; scanf ( <str> , & testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) { int x , x1 , y1 , y , j , lcm ; scanf ( <str> , & x , & y ) ; x1 = x ; y1 = y ; while ( x != y ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } lcm = ( x1 * y1 ) / x ; printf ( <str> , x , lcm ) ; } return <int> ; }", "label": 1, "id": 575}
{"input": "int main ( ) { int i , j , n , t ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) if ( arr [ i ] [ j ] >= arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j + <int> ] ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 576}
{"input": "int main ( ) { int i , * * a , j , * * b , max , tc , n ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; b = ( int * * ) malloc ( sizeof ( int * ) * n ) ; a [ <int> ] = ( int * ) malloc ( sizeof ( int ) ) ; b [ <int> ] = ( int * ) malloc ( sizeof ( int ) ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { free ( a [ i - <int> ] ) ; a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; b [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = <int> ; } for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; else if ( i == j ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; else { if ( ( a [ i ] [ j ] + b [ i - <int> ] [ j ] ) >= ( a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ) ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; else b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; } } free ( b [ i - <int> ] ) ; } free ( a [ i - <int> ] ) ; max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( max < b [ n - <int> ] [ i ] ) max = b [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; free ( b [ i - <int> ] ) ; free ( a ) ; free ( b ) ; } return <int> ; }", "label": 0, "id": 577}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] , i , j , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } else if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 578}
{"input": "int main ( void ) { int * a , i , j , t ; long long count ; long n ; scanf ( <str> , & t ) ; if ( t < <int> || t > <int> ) exit ( <int> ) ; while ( t > <int> ) { count = <int> ; scanf ( <str> , & n ) ; if ( n < <int> || n > <int> ) exit ( <int> ) ; else { a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) if ( a [ i ] <= a [ j ] ) count ++ ; } printf ( <str> , count ) ; t -- ; } return <int> ; }", "label": 2, "id": 579}
{"input": "int main ( ) { int t , i , a [ <int> ] , n , sum = <int> , pos = <int> , j ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < ( n * ( n + <int> ) ) / <int> ; i ++ ) a [ i ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < ( n * ( n + <int> ) ) / <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; sum = a [ <int> ] ; pos = <int> ; for ( j = <int> ; j < n ; j ++ ) { pos += j ; if ( a [ pos ] > a [ pos + <int> ] ) sum += a [ pos ] ; else sum += a [ ++ pos ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 580}
{"input": "inline int getInt ( ) { char c ; int val = <int> ; while ( ! isdigit ( c = getchar_unlocked ( ) ) ) ; do { val = val * <int> + ( c - <char> ) ; } while ( isdigit ( c = getchar_unlocked ( ) ) ) ; return val ; } int getInt ( ) ; int main ( ) { int t = getInt ( ) ; int result [ MAX ] ; int i ; for ( i = <int> ; i < t && i < MAX ; i ++ ) { int n = getInt ( ) ; int j , min = ( <int> ^ <int> ) ; for ( j = <int> ; j < n ; j ++ ) { int a = getInt ( ) ; if ( a < min ) min = a ; } result [ i ] = min * ( n - <int> ) ; } for ( i = <int> ; i < t && i < MAX ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; }", "label": 0, "id": 581}
{"input": "int main ( ) { register int i ; float c ; int test ; int n , a , b ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; for ( i = <int> ; i < n ; ++ i ) { scanf ( <str> , & b ) ; if ( a > b ) a = b ; } c = ( n - <int> ) * a ; printf ( <str> , ( int ) c ) ; } return <int> ; }", "label": 0, "id": 582}
{"input": "int main ( ) { long int n , h , x = <int> , output [ <int> ] , i , j , k , sum = <int> ; long long int * * a ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & h ) ; * a = ( long long int * ) malloc ( h * ( h + <int> ) * ( h + <int> ) * sizeof ( long long int ) ) ; for ( j = <int> ; j < h ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < h ; j ++ ) { for ( k = x ; k <= j ; k ++ ) { if ( j == <int> ) { sum = a [ j ] [ k ] ; } else { if ( a [ j ] [ k ] > a [ j ] [ k + <int> ] ) { sum = sum + a [ j ] [ k ] ; break ; } else { sum = sum + a [ j ] [ k + <int> ] ; x = k + <int> ; break ; } } } } output [ i ] = sum ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , output [ i ] ) ; } return <int> ; }", "label": 3, "id": 583}
{"input": "int main ( ) { long long int a , b , max , min , r , t , i ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; max = ( a > b ) ? a : b ; min = ( a <= b ) ? a : b ; while ( max > min ) { r = max % min ; if ( r != <int> ) { max = min ; min = r ; } else break ; } printf ( <str> , min , a * b / min ) ; } return <int> ; }", "label": 0, "id": 584}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , c , d ; scanf ( <str> , & a , & b ) ; c = a ; d = b ; while ( d != <int> ) { c = c % d ; c = c ^ d ; d = d ^ c ; c = c ^ d ; } a = ( a * b ) / c ; printf ( <str> , c , a ) ; } return <int> ; }", "label": 1, "id": 585}
{"input": "int main ( ) { short int n ; short int i , j , p , r ; scanf ( <str> , & n ) ; int k [ n ] ; printf ( <str> ) ; short int t [ <int> ] [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & k [ i ] ) ; for ( j = <int> ; j < k [ i ] ; j ++ ) { for ( r = <int> ; r <= j ; r ++ ) { scanf ( <str> , & t [ i ] [ j ] [ r ] ) ; } } printf ( <str> ) ; } for ( p = <int> ; p < n ; p ++ ) { int l ; l = k [ p ] ; for ( j = l ; j > <int> ; j -- ) { for ( i = l - <int> ; i > <int> ; i -- ) { if ( * ( t [ p ] [ j - <int> ] + i ) >= * ( t [ p ] [ j - <int> ] + i - <int> ) ) * ( t [ p ] [ j - <int> ] + i - <int> ) = * ( t [ p ] [ j - <int> ] + i - <int> ) + * ( t [ p ] [ j - <int> ] + i ) ; else * ( t [ p ] [ j - <int> ] + i - <int> ) = * ( t [ p ] [ j - <int> ] + i - <int> ) + * ( t [ p ] [ j - <int> ] + i - <int> ) ; } } } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , t [ i ] [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 586}
{"input": "int main ( ) { int i , j , t , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 587}
{"input": "int main ( void ) { int a , b ; int gcd = <int> , lcm = <int> ; int i , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 588}
{"input": "int sumtran ( ) ; int sumtran ( ) { int n , i , j , a , b ; scanf ( <str> , & n ) ; int arr1 [ <int> ] [ <int> ] , arr2 [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr1 [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { arr2 [ n - <int> ] [ i ] = arr1 [ n - <int> ] [ i ] ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a = arr2 [ i + <int> ] [ j ] ; b = arr2 [ i + <int> ] [ j + <int> ] ; arr2 [ i ] [ j ] = arr1 [ i ] [ j ] + ( a > b ? a : b ) ; } } return arr2 [ <int> ] [ <int> ] ; } int main ( ) { int t , count ; scanf ( <str> , & t ) ; count = <int> ; int ar [ <int> ] ; while ( count <= t ) { ar [ count ] = sumtran ( ) ; count ++ ; } count = <int> ; while ( count <= t ) { printf ( <str> , ar [ count ] ) ; count ++ ; } return <int> ; }", "label": 0, "id": 589}
{"input": "int main ( ) { long long n1 , n2 , gcd , lcm , a , b , x , y , t ; scanf ( <str> , & n1 ) ; while ( n1 -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( ( x * y ) / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 590}
{"input": "int main ( void ) { int i , t , a , b , hcf = <int> , k ; long lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; k = ( a < b ) ? a : b ; for ( i = k ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; break ; } else i = <int> ; } b = b / i ; a = a / i ; lcm = a * b * i ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 3, "id": 591}
{"input": "long long unsigned gcd ( long long unsigned a , long long unsigned b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long unsigned a , b , p , q ; scanf ( <str> , & a , & b ) ; p = gcd ( a , b ) ; q = ( a * b ) / p ; printf ( <str> , p , q ) ; } }", "label": 0, "id": 592}
{"input": "int main ( ) { int cf , cf2 , n , i = <int> , * p , x , count = <int> , ch ; scanf ( <str> , & ch ) ; while ( ch != <int> ) { scanf ( <str> , & n ) ; p = ( int * ) malloc ( n * sizeof ( int ) ) ; i = <int> ; while ( i != n ) { scanf ( <str> , & p [ i ] ) ; i ++ ; } cf = n - <int> ; while ( cf != <int> ) { x = <int> ; while ( x < ( n - cf ) ) { i = x ; cf2 = <int> ; while ( i <= ( cf + x - <int> ) ) { if ( p [ i ] <= p [ i + <int> ] ) cf2 ++ ; i ++ ; } if ( cf == cf2 ) count ++ ; x ++ ; } cf -- ; } printf ( <str> , ( count + n ) ) ; free ( p ) ; ch -- ; } return <int> ; }", "label": 2, "id": 593}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long n ; scanf ( <str> , & n ) ; long a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; long long min = a [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 594}
{"input": "int main ( ) { int tst , check = <int> , i , j , k , s , f ; long int num ; scanf ( <str> , & tst ) ; while ( check < tst ) { scanf ( <str> , & num ) ; long int a [ num ] , store [ num * ( num + <int> ) / <int> ] [ num ] ; for ( i = <int> ; i < num ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int count = <int> ; int s = <int> ; for ( i = <int> ; i < num ; i ++ ) { for ( j = i ; j < num ; j ++ ) { int f = <int> ; for ( k = i ; k <= j ; k ++ ) { store [ count ] [ k ] = a [ k ] ; if ( i == j ) { s ++ ; } else if ( k > i && ( store [ count ] [ k ] >= store [ count ] [ k - <int> ] ) ) { f ++ ; if ( f == ( j - i ) ) { s ++ ; } } } count ++ ; } } printf ( <str> , s ) ; check ++ ; } }", "label": 3, "id": 595}
{"input": "int main ( ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int a , j , min ; scanf ( <str> , & a ) ; int b [ a ] ; for ( j = <int> ; j < a ; j ++ ) scanf ( <str> , & b [ j ] ) ; min = b [ <int> ] ; for ( j = <int> ; j < a - <int> ; j ++ ) { if ( min > b [ j + <int> ] ) min = b [ j + <int> ] ; } printf ( <str> , min * ( a - <int> ) ) ; } return <int> ; }", "label": 0, "id": 596}
{"input": "int main ( void ) { long long int n , a [ <int> ] , t , sum , i ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { sum = sum + a [ i ] ; a [ i + <int> ] = a [ i ] ; } else { sum = sum + a [ i + <int> ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 597}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 598}
{"input": "int main ( ) { int n , a , b , h , i ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i < a ; i ++ ) if ( a % i == <int> && b % i == <int> ) h = i ; printf ( <str> , h , ( ( a * b ) / h ) ) ; } return <int> ; }", "label": 3, "id": 599}
{"input": "int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int n , s = <int> , c = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int count = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i - <int> ] ) c = <int> ; else c ++ ; s = s + c ; } printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 600}
{"input": "int max ( int , int ) ; int main ( ) { int n , no ; int a [ <int> ] [ <int> ] = { <int> } ; int i , j , k ; int val [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & no ) ; for ( j = <int> ; j < no ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = <int> ; j < no ; j ++ ) { val [ no ] [ j ] = a [ no ] [ j ] ; } for ( j = no - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { val [ j ] [ k ] = max ( val [ j + <int> ] [ k ] , val [ j + <int> ] [ k + <int> ] ) + a [ j ] [ k ] ; } } printf ( <str> , val [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int x , int y ) { int d = ( x > y ) ? x : y ; return d ; }", "label": 0, "id": 601}
{"input": "int main ( ) { int t , a , b , c , m , i , s , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( a != <int> ) { c = a ; a = b % a ; b = c ; } if ( m < n ) s = m ; else s = n ; for ( i = <int> ; i < s ; i ++ ) { if ( m * i == n * i ) break ; } printf ( <str> , b , m * i ) ; } return <int> ; }", "label": 1, "id": 602}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int p , n , i ; scanf ( <str> , & n ) ; int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p ) ; if ( min > p ) min = p ; } long long int q ; q = min * ( n - <int> ) ; printf ( <str> , q ) ; } return <int> ; }", "label": 0, "id": 603}
{"input": "int hcf ( int a , int b ) { if ( a == <int> ) return b ; return ( hcf ( b % a , a ) ) ; } int main ( void ) { int T ; long int a , b , gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 604}
{"input": "void input ( long a [ ] , int n ) { int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } } int countSubArrays ( long a [ ] , int n ) { int i = <int> , j = <int> , c = <int> ; if ( n == <int> ) { c = <int> ; return c ; } while ( i < n ) { c ++ ; if ( a [ i ] < a [ i + <int> ] ) { j ++ ; c = c ++ ; } else { c = c + j ; j = <int> ; } i ++ ; } return c ; } int main ( ) { long a [ MAX ] ; int n , t ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; input ( a , n ) ; printf ( <str> , countSubArrays ( a , n ) ) ; t -- ; } return <int> ; }", "label": 3, "id": 605}
{"input": "long hcf ( long a , long b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; else if ( a > b ) return hcf ( a - b , b ) ; return hcf ( a , b - a ) ; } int main ( ) { int T ; long long A , B ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; long long gcd = <int> , lcm = <int> ; gcd = hcf ( A , B ) ; lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 606}
{"input": "int main ( ) { int T , a , b , t ; int a_ , b_ ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; if ( a >= b ) { a_ = a ; b_ = b ; } else { a_ = b ; b_ = a ; } while ( b_ != <int> ) { t = a_ % b_ ; a_ = b_ ; b_ = t ; } printf ( <str> , a_ , a * b / a_ ) ; } return <int> ; }", "label": 1, "id": 607}
{"input": "int max ( int p , int i , int a [ <int> ] [ <int> ] ) { int j , max1 = a [ i ] [ p ] ; if ( a [ i ] [ p ] < a [ i ] [ p - <int> ] ) max1 = a [ i ] [ p - <int> ] ; return max1 ; } int pos ( int p , int i , int a [ <int> ] [ <int> ] ) { int j , max1 = p ; if ( a [ i ] [ p ] < a [ i ] [ p - <int> ] ) max1 = p - <int> ; return max1 ; } int main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } int q = <int> , p = <int> , x = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] > x ) { x = a [ n - <int> ] [ i ] ; p = i ; } } int sum = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { q = max ( p , i , a ) ; p = pos ( p , i , a ) ; sum += q ; } printf ( <str> , sum + x ) ; } }", "label": 1, "id": 608}
{"input": "int gdc ( int a , int b ) { int i , g ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> ) { if ( b % i == <int> ) { g = i ; } } return ( g ) ; } } int lcm ( int a , int b ) { int x = <int> , i ; for ( i = <int> ; i < a ; i ++ ) { if ( a % i == <int> ) { if ( b % i == <int> ) { a = a / i ; b = b / i ; x = x * i ; } } } return ( a * b * x ) ; } int main ( ) { unsigned int s ; scanf ( <str> , & s ) ; while ( s -- ) { int a , b , l , g ; scanf ( <str> , & a , & b ) ; l = lcm ( a , b ) ; g = gdc ( a , b ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 609}
{"input": "int main ( ) { long long int t , tc , rem , nr , dr ; scanf ( <str> , & t ) ; for ( tc = <int> ; tc <= t ; tc ++ ) { long long int a , b ; scanf ( <str> , & a , & b ) ; nr = a ; dr = b ; rem = nr % dr ; while ( rem != <int> ) { nr = dr ; dr = rem ; rem = nr % dr ; } printf ( <str> , dr , a * b / dr ) ; } return <int> ; }", "label": 1, "id": 610}
{"input": "int main ( ) { int i , a , b , t , gcd , lcm , mul ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd = <int> ; lcm = <int> ; mul = a * b ; while ( a > <int> || b > <int> ) { if ( a > b ) a = a - b ; else if ( b > a ) b = b - a ; else if ( a == b ) break ; } gcd = a ; lcm = mul / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 611}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , t , n , i , j , k , m , m1 ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { m = a [ i - <int> ] [ j ] ; if ( j - <int> < <int> ) m1 = m ; else m1 = a [ i - <int> ] [ j - <int> ] ; if ( m >= m1 ) a [ i ] [ j ] += m ; else a [ i ] [ j ] += m1 ; } } m = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] [ j ] > m ) m = a [ i ] [ j ] ; } printf ( <str> , m ) ; } return <int> ; }", "label": 1, "id": 612}
{"input": "int result ( int i , int j , int rows , int sum ) ; int a [ <int> ] [ <int> ] ; int main ( ) { int i , j , sum = <int> , rows , test ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; i = <int> ; j = <int> ; sum += result ( i , j , rows , sum ) ; printf ( <str> , sum ) ; } return <int> ; } int result ( int i , int j , int rows , int sum ) { int <unk> = <int> , <unk> = <int> ; if ( j == rows || i == rows ) return <int> ; <unk> = a [ i ] [ j ] + result ( i + <int> , j , rows , sum ) ; <unk> = a [ i ] [ j ] + result ( i + <int> , j + <int> , rows , sum ) ; return max ( <unk> , <unk> ) ; }", "label": 2, "id": 613}
{"input": "int sum [ <int> ] , a [ <int> ] ; int main ( ) { int i , count ; scanf ( <str> , & count ) ; for ( i = <int> ; i < count ; i ++ ) { int t , j , k , r = <int> ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) sum [ j ] = <int> ; for ( j = <int> ; j < t ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ k ] ) ; for ( k = j ; k >= <int> ; k -- ) { if ( k == <int> && k == j ) sum [ k ] = a [ k ] ; else if ( k == j ) sum [ k ] = sum [ k - <int> ] + a [ k ] ; else if ( k == <int> ) sum [ k ] += a [ k ] ; else if ( sum [ k ] > sum [ k - <int> ] ) sum [ k ] += a [ k ] ; else sum [ k ] = sum [ k - <int> ] + a [ k ] ; } } int max = <int> ; for ( j = <int> ; j < t ; j ++ ) if ( max < sum [ j ] ) max = sum [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 614}
{"input": "int main ( ) { int t , a , r , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; r = m ; n = m ; n = r ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 3, "id": 615}
{"input": "int knownP [ <int> ] = { <int> } ; int rtTrg [ MAXL ] [ MAXL ] ; int maxPath ( int level , int offset , int maxlevel ) { int sum1 , sum2 ; if ( ( knownP [ level * <int> + offset ] != UNKNOWN ) && ( ! NOMOREDOWN ) ) { return knownP [ level * <int> + offset ] ; } if ( NOMOREDOWN ) { return knownP [ level * <int> + offset ] = rtTrg [ level ] [ offset ] ; } else { sum1 = maxPath ( level + <int> , offset , maxlevel ) ; sum2 = maxPath ( level + <int> , offset + <int> , maxlevel ) ; knownP [ level * <int> + offset ] = ( ( sum1 > sum2 ) ? sum1 : sum2 ) + rtTrg [ level ] [ offset ] ; return knownP [ level * <int> + offset ] ; } return ; } void fastread_D ( int * base ) { char c = <int> ; while ( c < <int> ) { c = getchar_unlocked ( ) ; } * base = <int> ; while ( c > <int> ) { * base = * base * <int> + c - <char> ; c = getchar_unlocked ( ) ; } } int main ( ) { int i , j , cases ; int totalLevels = <int> ; fastread_D ( & cases ) ; while ( cases -- ) { memset ( rtTrg , <int> , sizeof ( rtTrg ) ) ; memset ( knownP , UNKNOWN , sizeof ( knownP ) ) ; fastread_D ( & totalLevels ) ; for ( i = <int> ; i < totalLevels ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { fastread_D ( & rtTrg [ i ] [ j ] ) ; } } printf ( <str> , maxPath ( <int> , <int> , totalLevels - <int> ) ) ; } return <int> ; }", "label": 1, "id": 616}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , i , j , n , sum = <int> , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { sum += a [ j ] [ i ] ; } sum = sum + a [ j ] [ i + <int> ] ; if ( max < sum ) max = sum ; sum = <int> ; } printf ( <str> , max ) ; } }", "label": 1, "id": 617}
{"input": "int main ( void ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int N , i ; scanf ( <str> , & N ) ; int A [ N ] ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } long min = A [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( A [ i ] <= min ) min = A [ i ] ; } long long c = min * ( N - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 618}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } long int gcd ( long int a , long int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 0, "id": 619}
{"input": "int main ( ) { int t , i ; long a , b , gcd , lcm , p , q , d , c ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; p = a ; q = b ; if ( a - b > <int> ) { d = a ; a = b ; b = d ; } while ( c != <int> ) { c = b % a ; gcd = a ; b = a ; a = c ; } lcm = ( p / gcd ) * ( q / gcd ) * gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 620}
{"input": "int main ( ) { int T , N , i , j , k ; int nums [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; for ( j = <int> ; j < N ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & nums [ j ] [ k ] ) ; } } for ( j = N - <int> ; j >= <int> ; j -- ) { for ( k = j ; k >= <int> ; k -- ) { nums [ j ] [ k ] = nums [ j ] [ k ] + ( ( nums [ j + <int> ] [ k ] >= nums [ j + <int> ] [ k + <int> ] ) ? nums [ j + <int> ] [ k ] : nums [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , nums [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 621}
{"input": "int GCD ( int a , int b ) { int divisor , D , aux ; divisor = a > b ? b : a ; D = a > b ? a : b ; while ( <int> ) { if ( ( aux = D % divisor ) == <int> ) { return divisor ; } else { D = divisor ; divisor = aux ; } } } int main ( ) { int x , y , i , j , T , lcm ; scanf ( <str> , & T ) ; scanf ( <str> , & x , & y ) ; for ( i = <int> ; i < T ; i ++ ) { j = GCD ( x , y ) ; lcm = x * y / j ; printf ( <str> , j , lcm ) ; } return <int> ; }", "label": 1, "id": 622}
{"input": "int main ( void ) { long int i , j , t , a = <int> , b , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & b ) ; if ( a > b ) a = b ; } printf ( <str> , ( a * ( n - <int> ) ) ) ; } return <int> ; }", "label": 1, "id": 623}
{"input": "int max ( int a , int b ) ; int main ( void ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int x , j , k ; scanf ( <str> , & x ) ; int angka [ x ] [ x + <int> ] ; for ( j = <int> ; j < x ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & angka [ j ] [ k ] ) ; } } for ( j = x - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { angka [ j - <int> ] [ k ] += max ( angka [ j ] [ k ] , angka [ j ] [ k + <int> ] ) ; } } printf ( <str> , angka [ <int> ] [ <int> ] ) ; } } int max ( int a , int b ) { if ( b > a ) return b ; return a ; }", "label": 0, "id": 624}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , t , x , y ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } long long int gcd , lcm ; gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 625}
{"input": "int main ( ) { int m1 [ <int> ] [ <int> ] , m2 [ <int> ] [ <int> ] , n , size , s_cp , i , res [ <int> ] , n_cp ; scanf ( <str> , & n ) ; n_cp = n ; while ( n -- ) { scanf ( <str> , & size ) ; s_cp = size ; while ( size -- ) { for ( i = <int> ; i <= ( s_cp - size ) ; i ++ ) { scanf ( <str> , & m1 [ s_cp - size ] [ i ] ) ; m2 [ s_cp - size ] [ i ] = <int> ; } } size = s_cp - <int> ; m2 [ <int> ] [ <int> ] = m1 [ <int> ] [ <int> ] ; while ( size -- ) { for ( i = <int> ; i <= ( s_cp - size ) ; i ++ ) { if ( i > <int> ) { m2 [ s_cp - size ] [ i ] = ( m2 [ s_cp - size - <int> ] [ i ] > m2 [ s_cp - size - <int> ] [ i - <int> ] ) ? m2 [ s_cp - size - <int> ] [ i ] : m2 [ s_cp - size - <int> ] [ i - <int> ] + m1 [ s_cp - size ] [ i ] ; } else { m2 [ s_cp - size ] [ i ] = m2 [ s_cp - size - <int> ] [ i ] + m1 [ s_cp - size ] [ i ] ; } } } res [ n_cp - n ] = m2 [ size ] [ <int> ] ; for ( i = <int> ; i <= s_cp ; i ++ ) { if ( m2 [ s_cp ] [ i ] > res [ n_cp - n ] ) res [ n_cp - n ] = m2 [ s_cp ] [ i ] ; } } for ( i = <int> ; i <= n_cp ; i ++ ) { printf ( <str> , res [ i ] ) ; } return <int> ; }", "label": 1, "id": 626}
{"input": "int main ( ) { int t , cost , i , n , min = <int> ; scanf ( <str> , & t ) ; while ( t >= <int> ) { min = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; t -- ; } }", "label": 1, "id": 627}
{"input": "int main ( ) { int i , N , test , j , sm , temp ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & N ) ; scanf ( <str> , & sm ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < sm ) sm = temp ; } printf ( <str> , sm * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 628}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long a , b , g ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 0, "id": 629}
{"input": "int main ( ) { int t , l , i , j , sum , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & l ) ; i = <int> ; while ( i <= l ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; i = i + <int> ; } for ( i = <int> ; i <= l ; i ++ ) sum = sum + ( ( a [ i ] [ <int> ] > a [ i ] [ <int> ] ) ? a [ i ] [ <int> ] : a [ i ] [ <int> ] ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 630}
{"input": "int hash [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int n ; void debug ( int i , int j ) { int p , q ; printf ( <str> , i , j ) ; for ( p = <int> ; p < n ; p ++ ) { for ( q = <int> ; q <= p ; q ++ ) { printf ( <str> , a [ p ] [ q ] ) ; } printf ( <str> ) ; } return ; } int func ( int i , int j ) { int p , q ; if ( i >= n ) { return <int> ; } else if ( hash [ i ] [ j ] == <int> ) { return a [ i ] [ j ] ; } else { p = func ( i + <int> , j ) ; q = func ( i + <int> , j + <int> ) ; a [ i ] [ j ] += p > q ? p : q ; hash [ i ] [ j ] = <int> ; return a [ i ] [ j ] ; } } int main ( ) { int i , j , ans , cases ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; hash [ i ] [ j ] = <int> ; } } ans = func ( <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 631}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , n , p ; scanf ( <str> , & n ) ; while ( n ) { scanf ( <str> , & p ) ; for ( i = <int> ; i < p ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = p - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( ( a [ i - <int> ] [ j ] + a [ i ] [ j ] ) > ( a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ) ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; n -- ; } return ( <int> ) ; }", "label": 0, "id": 632}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( int i = n - <int> ; i >= <int> ; i -- ) { for ( int j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 633}
{"input": "int getMaxPathSum ( int * * arr , int rowcount , int r , int c ) { int j , <unk> , <unk> ; if ( rowcount == <int> ) return * ( * ( arr + r ) + c ) ; <unk> = getMaxPathSum ( arr , rowcount - <int> , r + <int> , c ) ; <unk> = getMaxPathSum ( arr , rowcount - <int> , r + <int> , c + <int> ) ; if ( <unk> > <unk> ) return <unk> + * ( * ( arr + r ) + c ) ; return <unk> + * ( * ( arr + r ) + c ) ; } int main ( ) { int times , rowcount , i , j ; int * * arr ; for ( scanf ( <str> , & times ) ; times ; times -- ) { scanf ( <str> , & rowcount ) ; arr = ( int * * ) malloc ( rowcount * sizeof ( int * ) ) ; if ( ! arr ) { printf ( <str> ) ; exit ( <int> ) ; } for ( i = <int> ; i < rowcount ; i ++ ) { * ( arr + i ) = ( int * ) malloc ( i * sizeof ( int ) ) ; if ( ! ( arr + i ) ) { printf ( <str> ) ; exit ( <int> ) ; } } for ( i = <int> ; i < rowcount ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , * ( arr + i ) + j ) ; printf ( <str> , getMaxPathSum ( arr , rowcount , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 634}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i = <int> , j = <int> ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) arr [ i ] [ j ] = max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) + arr [ i ] [ j ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 635}
{"input": "int main ( ) { int count ; int data [ <int> ] = { <int> } ; int greater ; int greater_list [ <int> ] = { <int> } ; int sum = <int> ; scanf ( <str> , & count ) ; while ( count ) { int tgl_length , i , j ; scanf ( <str> , & tgl_length ) ; for ( i = <int> ; i <= tgl_length ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , ( data + j ) ) ; if ( * ( data + j ) > * ( data + j - <int> ) ) { greater_list [ i ] = * ( data + j ) ; } } } while ( i ) { sum += greater_list [ i -- ] ; } printf ( <str> , sum ) ; count -- ; sum = <int> ; tgl_length = <int> ; } }", "label": 1, "id": 636}
{"input": "int main ( void ) { long long int a , b ; long int x = <int> , i , n , t ; int y , j ; scanf ( <str> , & y ) ; for ( j = <int> ; j < y ; j ++ ) { scanf ( <str> , & n ) ; a = <int> ; b = <int> ; t = <int> ; x = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a >= b ) { t ++ ; } else { x += ( ( t * ( t + <int> ) ) / <int> ) ; t = <int> ; } b = a ; } x += ( ( t * ( t + <int> ) ) / <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 637}
{"input": "int main ( ) { int t , i , j , max , sum , m , k , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; max = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( m = <int> ; m < n ; m ++ ) { sum = <int> ; k = m ; j = <int> ; for ( i = <int> ; i < n ; i ++ ) { sum = sum + a [ i ] [ j ] ; if ( k > <int> ) k -- ; else j ++ ; } if ( sum > max ) max = sum ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 638}
{"input": "int main ( ) { int T ; long long int a , b , i , m , n ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( b > a ) { a = a + b ; b = a - b ; a = a - b ; } m = a ; n = b ; while ( a % b != <int> ) { a = a % b ; if ( b > a ) { a = a + b ; b = a - b ; a = a - b ; } } printf ( <str> , b , ( m * n ) / b ) ; } return <int> ; }", "label": 0, "id": 639}
{"input": "int max ( int , int ) ; int main ( ) { int t = <int> , num , * A , * S , * sum , i , j , k , n ; scanf ( <str> , & num ) ; sum = ( int * ) malloc ( sizeof ( int ) * num ) ; for ( k = <int> ; k < num ; k ++ ) { scanf ( <str> , & n ) ; A = ( int * ) malloc ( sizeof ( int ) * n * n ) ; S = ( int * ) malloc ( sizeof ( int ) * n * n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , ( A + i * n + j ) ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == n - <int> ) * ( S + i * n + j ) = * ( A + i * n + j ) ; else * ( S + i * n + j ) = * ( A + i * n + j ) + max ( * ( S + ( i + <int> ) * n + j ) , * ( S + ( i + <int> ) * n + j + <int> ) ) ; } sum [ t ++ ] = * S ; } for ( k = <int> ; k < num ; k ++ ) printf ( <str> , sum [ k ] ) ; return <int> ; } int max ( int a , int b ) { return ( a > b ? a : b ) ; }", "label": 0, "id": 640}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int i = <int> ; long x , y ; while ( i ++ < T ) { long a , b ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else if ( b > a ) { b = b - a ; } } printf ( <str> , a ) ; printf ( <str> , ( x * y ) / a ) ; } return <int> ; }", "label": 1, "id": 641}
{"input": "int main ( void ) { int <unk> ; int test_cases ; scanf ( <str> , & <unk> ) ; int k ; for ( k = <int> ; k < <unk> ; k ++ ) { scanf ( <str> , & test_cases ) ; int num [ test_cases ] [ test_cases ] ; int i , j , sum = <int> ; for ( j = <int> ; j < test_cases ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) { scanf ( <str> , & num [ j ] [ i ] ) ; } } i = <int> ; int sumd , sumr , a , b ; sumd = sumr = num [ <int> ] [ <int> ] ; for ( j = <int> ; j < test_cases - <int> ; j ++ ) { for ( ; i < j ; i ++ ) { sumd = sumd + num [ j ] [ i ] ; sumr = sumr + num [ j ] [ i + <int> ] ; if ( sumd + num [ j + <int> ] [ i ] > sumd + num [ j + <int> ] [ i + <int> ] ) a = sumd + num [ j + <int> ] [ i ] ; else a = sumd + num [ j + <int> ] [ i + <int> ] ; if ( sumr + num [ j + <int> ] [ i + <int> ] > sumr + num [ j + <int> ] [ i + <int> ] ) b = sumr + num [ j + <int> ] [ i + <int> ] ; else b = sumr + num [ j + <int> ] [ i + <int> ] ; if ( a > b ) { sum = sumd ; break ; } else { sum = sumr ; i = i + <int> ; break ; } } } if ( num [ test_cases - <int> ] [ i ] > num [ test_cases - <int> ] [ i + <int> ] ) { sum = sum + num [ test_cases - <int> ] [ i ] ; printf ( <str> , sum ) ; } else { sum = sum + num [ test_cases - <int> ] [ i + <int> ] ; printf ( <str> , sum ) ; } } return <int> ; }", "label": 1, "id": 642}
{"input": "int main ( ) { int n , a [ <int> ] [ <int> ] , t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; -- i ) { for ( j = <int> ; j < i ; ++ j ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 643}
{"input": "int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; int min ; int n ; scanf ( <str> , & n ) ; int ptr [ <int> ] ; for ( j = <int> ; j < t ; j ++ ) { for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ptr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { min = ptr [ <int> ] ; if ( ptr [ i ] < min ) min = ptr [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 1, "id": 644}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , n ; int i = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 645}
{"input": "main ( ) { int t , n , i , j , k , sum = <int> , q = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; while ( n != <int> ) { n -- ; if ( a [ q ] >= a [ q + <int> ] ) { sum += a [ q + <int> ] ; for ( k = q ; k < n - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; q ++ ; } else { sum += a [ q ] ; for ( k = q + <int> ; k < n - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; q ++ ; } } printf ( <str> , sum ) ; sum = <int> ; q = <int> ; } }", "label": 2, "id": 646}
{"input": "int main ( ) { int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int sum = <int> ; int m = <int> ; int t ; scanf ( <str> , & t ) ; int * a = ( int * ) malloc ( sizeof ( int ) * ( ( t * ( t + <int> ) ) / <int> ) ) ; for ( j = <int> ; j < t ; j ++ ) { int k = j + <int> ; while ( k != <int> ) { scanf ( <str> , & a [ m ] ) ; m ++ ; k -- ; } } int index = <int> ; sum = sum + a [ index ] ; index = <int> ; j = <int> ; while ( j != t ) { if ( a [ index * <int> - <int> ] > a [ index * <int> ] ) { sum = sum + a [ index * <int> - <int> ] ; index = index * <int> - <int> ; j ++ ; } else { sum = sum + a [ index * <int> ] ; index = index * <int> ; j ++ ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 647}
{"input": "main ( ) { int n , n1 , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n1 ) ; while ( n1 -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < n ; j ++ ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 648}
{"input": "int gcd ( int x , int y ) { if ( x == <int> ) { return y ; } while ( y != <int> ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; } int main ( void ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int t , m , lcm ; scanf ( <str> , & t , & m ) ; printf ( <str> , gcd ( t , m ) ) ; lcm = ( t * m ) / ( gcd ( t , m ) ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 649}
{"input": "int min ( long long int a , long long int b ) ; int max ( long long int g , long long int h ) ; main ( ) { int t ; long long int n , i , c , d , e , f ; scanf ( <str> , & t ) ; while ( t -- ) { f = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } c = min ( a [ <int> ] , a [ <int> ] ) ; e = c ; d = max ( a [ <int> ] , a [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { c = min ( c , a [ i ] ) ; d = max ( c , a [ i ] ) ; f = f + c ; } printf ( <str> , f + e ) ; } return <int> ; } int min ( long long int a , long long int b ) { if ( a > b ) return ( b ) ; else return ( a ) ; } int max ( long long int g , long long int h ) { if ( g > h ) return ( g ) ; else return ( h ) ; }", "label": 1, "id": 650}
{"input": "void below ( int , int , int ) ; void right ( int , int , int ) ; int a [ <int> ] [ <int> ] , t = <int> , ans [ <int> ] , rows ; void below ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + <int> ; } else { i = i + <int> ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } } void right ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + <int> ; } else { i = i + <int> ; j = j + <int> ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } } int main ( ) { int i , j , test_case , k , r , max = <int> ; scanf ( <str> , & test_case ) ; for ( i = <int> ; i <= test_case ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j <= rows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } below ( <int> , <int> , <int> ) ; right ( <int> , <int> , <int> ) ; for ( r = <int> ; ans [ r ] != <char> ; r ++ ) { if ( ans [ r ] > max ) max = ans [ r ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 651}
{"input": "int main ( ) { int t , p , a , b , gcd , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; p = a > b ? b : a ; for ( i = <int> ; i <= p ; i ++ ) if ( a % i == <int> & b % i == <int> ) gcd = i ; printf ( <str> , gcd , a * b / gcd ) ; } return <int> ; }", "label": 2, "id": 652}
{"input": "int max_sum ( int i , int j ) ; int max ( int a , int b ) ; int A [ <int> ] [ <int> ] , n ; int path [ <int> ] [ <int> ] ; int main ( ) { int t , i , j , k , sum ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; path [ i ] [ j ] = - <int> ; } sum = max_sum ( <int> , <int> ) ; printf ( <str> , sum ) ; } return <int> ; } int max_sum ( int i , int j ) { if ( i + <int> == n ) { return A [ i ] [ j ] ; } else if ( path [ i ] [ j ] != - <int> ) return path [ i ] [ j ] ; else { path [ i ] [ j ] = A [ i ] [ j ] + max ( max_sum ( i + <int> , j ) , max_sum ( i + <int> , j + <int> ) ) ; return path [ i ] [ j ] ; } } max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 653}
{"input": "void main ( ) { int t , i , j , n , a [ <int> ] , num [ <int> ] , temp ; unsigned int sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { num [ i ] = a [ i + <int> ] ; } else { num [ i ] = a [ i ] ; temp = a [ i ] ; a [ i ] = a [ i + <int> ] ; a [ i + <int> ] = temp ; } } for ( i = <int> ; i < n - <int> ; i ++ ) { sum = sum + num [ i ] ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 654}
{"input": "int main ( ) { int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } long int c [ n ] ; for ( i = <int> ; i < n ; i ++ ) c [ i ] = <int> ; for ( j = <int> ; j < n - <int> ; j ++ ) { for ( i = <int> ; i < n - <int> ; i ++ ) { c [ j ] += a [ i ] [ j ] ; } if ( a [ n - <int> ] [ j ] < a [ n - <int> ] [ j + <int> ] ) c [ j ] += a [ n - <int> ] [ j + <int> ] ; else c [ j ] += a [ n - <int> ] [ j ] ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( c [ i ] <= c [ i + <int> ] ) c [ i ] = c [ i + <int> ] ; else c [ i + <int> ] = c [ i ] ; } printf ( <str> , c [ n - <int> ] ) ; } return <int> ; }", "label": 1, "id": 655}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int i ; for ( i = <int> ; i < T ; i ++ ) { int n ; scanf ( <str> , & n ) ; long long int arr [ n ] ; int j ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } int len = <int> ; unsigned long long int sum = <int> ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( arr [ j + <int> ] >= arr [ j ] ) { len ++ ; } else { sum += ( ( len * ( len + <int> ) ) / <int> ) ; len = <int> ; } } if ( len > <int> ) { sum += ( ( len * ( len + <int> ) ) / <int> ) ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 656}
{"input": "int main ( ) { long long a , b ; int t , gcd , lcm , min ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; } else { min = a ; } for ( ; min >= <int> ; min -- ) { if ( a % min == <int> && b % min == <int> ) { gcd = min ; break ; } } lcm = ( a * b ) / ( gcd ) ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 657}
{"input": "int main ( ) { int t , n , i , j , k = <int> ; long long int a [ <int> ] , ans ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n ; j ++ ) { if ( j == <int> ) ans = <int> ; else { if ( a [ j ] < a [ j - <int> ] ) k = j ; ans += ( <int> + j - k ) ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 658}
{"input": "int main ( void ) { int T ; long N , i , min , input ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; scanf ( <str> , & input ) ; min = input ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & input ) ; if ( min > input ) min = input ; } printf ( <str> , min * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 659}
{"input": "int main ( ) { long int t , i , n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int A [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } min = A [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > A [ i ] ) min = A [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 660}
{"input": "int max , n ; int a [ <int> ] [ <int> ] ; void recursion ( int , int , int ) ; int main ( ) { int t , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } recursion ( <int> , <int> , <int> ) ; printf ( <str> , max ) ; } return <int> ; } void recursion ( int s , int y , int x ) { s = s + a [ x ] [ y ] ; x ++ ; if ( x < n ) { recursion ( s , y , x ) ; y ++ ; recursion ( s , y , x ) ; } else if ( max < s ) max = s ; }", "label": 2, "id": 661}
{"input": "int main ( ) { int t , n , j , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] + a [ i + <int> ] [ j ] >= a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 662}
{"input": "int gcd ( int a , int b ) { while ( a * b > <int> ) { if ( b > a ) b = b % a ; else a = a % b ; } return a + b ; } int main ( ) { int i , j ; scanf ( <str> , & i ) ; j = i ; int grid [ i ] [ <int> ] ; for ( ; i > <int> ; i -- ) { scanf ( <str> , & grid [ i ] [ <int> ] , & grid [ i ] [ <int> ] ) ; grid [ i ] [ <int> ] = gcd ( grid [ i ] [ <int> ] , grid [ i ] [ <int> ] ) ; grid [ i ] [ <int> ] = ( grid [ i ] [ <int> ] * grid [ i ] [ <int> ] ) / grid [ i ] [ <int> ] ; } for ( ; j > <int> ; j -- ) { printf ( <str> , grid [ j ] [ <int> ] , grid [ j ] [ <int> ] ) ; } }", "label": 1, "id": 663}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int n1 , i , j , k = <int> , sum = <int> , s1 = <int> , max = <int> ; scanf ( <str> , & n1 ) ; int * * a = ( int * * ) malloc ( n1 * sizeof ( int * ) ) ; for ( i = <int> ; i <= n1 ; i ++ ) { a [ i ] = ( int * ) malloc ( i * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n1 - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } free ( a [ i + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; free ( a [ <int> ] ) ; free ( a ) ; } }", "label": 3, "id": 664}
{"input": "int main ( ) { int t , i ; long long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int g = <int> ; long long int l = <int> ; if ( a == <int> || b == <int> ) printf ( <str> ) ; else if ( a > <int> && b > <int> ) { if ( a > b ) { for ( i = <int> ; i <= ( a / <int> ) ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = g * i ; } } else { for ( i = <int> ; i <= ( b / <int> ) ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = g * i ; } } l = ( ( a * b ) / g ) ; printf ( <str> , g , l ) ; } } return <int> ; }", "label": 2, "id": 665}
{"input": "int main ( ) { int c = <int> , m , nbi , te , i = <int> , s = <int> , p = <int> , t = <int> , k , l = <int> , * ans , j = <int> , n , a [ <int> ] [ <int> ] , max [ <int> ] ; scanf ( <str> , & te ) ; ans = ( int * ) malloc ( t * sizeof ( int ) ) ; k = <int> ; while ( l < te ) { c = <int> ; t = <int> ; s = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { max [ i ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] > a [ i ] [ max [ i ] ] ) max [ i ] = j ; } for ( j = i + <int> ; j < n ; j ++ ) a [ i ] [ j ] = - <int> ; } i = <int> ; p = <int> ; while ( c <= n - <int> ) { if ( t == i ) { m = <int> ; for ( k = p ; k < n ; k ++ ) { if ( a [ k ] [ max [ k ] ] > m ) { m = max [ k ] ; i = k ; } } t = p - <int> ; p = m ; s = s + a [ i ] [ m ] ; i -- ; c ++ ; continue ; } if ( a [ i ] [ p ] > a [ i ] [ p - <int> ] ) { s += a [ i ] [ p ] ; c ++ ; i -- ; } else { s += a [ i ] [ p - <int> ] ; c ++ ; p -- ; i -- ; } } ans [ l ] = s ; l ++ ; } for ( i = <int> ; i < te ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return ( <int> ) ; }", "label": 1, "id": 666}
{"input": "int main ( ) { int nofcases , size1 , i , j , input [ <int> ] , output [ <int> ] , sum = <int> , cost ; scanf ( <str> , & nofcases ) ; for ( i = <int> ; i < nofcases ; i ++ ) { scanf ( <str> , & size1 ) ; cost = <int> ; for ( j = <int> ; j < size1 ; j ++ ) { scanf ( <str> , & input [ j ] ) ; } for ( j = <int> ; j <= size1 - <int> ; j ++ ) { if ( input [ j ] <= input [ j + <int> ] ) { input [ j + <int> ] = input [ j ] ; } cost = cost + input [ j + <int> ] ; } output [ i ] = cost ; } for ( i = <int> ; i < nofcases ; i ++ ) { printf ( <str> , output [ i ] ) ; } return <int> ; }", "label": 1, "id": 667}
{"input": "int main ( ) { int T ; long int N ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; int ar [ N ] ; long int min = <int> ; for ( int j = <int> ; j < N ; j ++ ) { scanf ( <str> , & ar [ j ] ) ; if ( min > ar [ j ] ) min = ar [ j ] ; } long cost = min * ( N - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 668}
{"input": "int main ( ) { int n , rows , count , sum , i , j ; int result [ MAXSIZE ] ; int store [ MAXSIZE ] [ MAXSIZE ] ; int val [ MAXSIZE ] [ MAXSIZE ] ; for ( i = <int> ; i < MAXSIZE ; i ++ ) for ( j = <int> ; j < MAXSIZE ; store [ i ] [ j ++ ] = <int> , val [ i ] [ j ] = <int> ) ; scanf ( <str> , & n ) ; for ( count = <int> ; count <= n ; count ++ ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & store [ i ] [ j ] ) ; } } for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( i == rows - <int> ) val [ i ] [ j ] = store [ i ] [ j ] ; else { val [ i ] [ j ] = store [ i ] [ j ] + ( val [ i + <int> ] [ j + <int> ] > val [ i + <int> ] [ j ] ? val [ i + <int> ] [ j + <int> ] : val [ i + <int> ] [ j ] ) ; } } } result [ count - <int> ] = val [ <int> ] [ <int> ] ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; }", "label": 1, "id": 669}
{"input": "int main ( ) { int i , j , max , t , n ; int arr [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ( arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ) > ( arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ) ) { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; } else { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; } } } max = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( max < arr [ n ] [ i ] ) max = arr [ n ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 670}
{"input": "int hcf ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; gcd = hcf ( a , b ) ; if ( gcd != <int> ) lcm = ( a * b ) / gcd ; else lcm = <int> ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int hcf ( int a , int b ) { int i , gcd ; if ( a == <int> || b == <int> ) return <int> ; else { for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a == b ) return a ; else if ( ( ( a % i ) == <int> ) && ( ( b % i ) == <int> ) ) gcd = i ; } } return gcd ; }", "label": 1, "id": 671}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; int x = gcd ( a , b ) ; printf ( <str> , x ) ; int lcm = ( a * b ) / x ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 672}
{"input": "int main ( void ) { long long a , b , i , min ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & b ) ; long long arr [ b + <int> ] ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < b ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( <str> , ( min * ( b - <int> ) ) ) ; } return <int> ; }", "label": 1, "id": 673}
{"input": "int main ( ) { int i , t ; long int j , n ; long int pre , in ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { pre = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & in ) ; if ( pre > in ) pre = in ; } printf ( <str> , ( pre * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 674}
{"input": "int p , arr [ <int> ] [ <int> ] ; int main ( ) { int i , j , n , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p ) ; for ( j = <int> ; j < p ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; for ( j = p - <int> ; j >= <int> ; j -- ) for ( k = <int> ; k < j ; k ++ ) { if ( arr [ j ] [ k ] > arr [ j ] [ k + <int> ] ) arr [ j - <int> ] [ k ] += arr [ j ] [ k ] ; else arr [ j - <int> ] [ k ] += arr [ j ] [ k + <int> ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 675}
{"input": "int main ( ) { int a , b , c , t ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a * b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } printf ( <str> , a , c / a ) ; } } return <int> ; }", "label": 1, "id": 676}
{"input": "main ( ) { long int i , n , min ; int t , <unk> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = <int> ^ <int> ; for ( i = <int> ; i < n ; i ++ ) if ( min > a [ i ] ) min = a [ i ] ; <unk> = min * ( n - <int> ) ; printf ( <str> , <unk> ) ; } }", "label": 0, "id": 677}
{"input": "int max ( int x , int y ) { return ( x > y ? x : y ) ; } int main ( ) { int data [ <int> ] [ <int> ] , t , i , j , rows , columns , largest = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( columns = <int> ; columns <= j ; columns ++ ) { scanf ( <str> , & ( data [ j ] [ columns ] ) ) ; if ( j != <int> ) { if ( columns == <int> ) { data [ j ] [ columns ] += data [ j - <int> ] [ columns ] ; } else if ( columns == j ) { data [ j ] [ columns ] += data [ j - <int> ] [ columns - <int> ] ; } else { data [ j ] [ columns ] += max ( data [ j - <int> ] [ columns ] , data [ j - <int> ] [ columns - <int> ] ) ; } if ( data [ j ] [ columns ] > largest ) { largest = data [ j ] [ columns ] ; } } } } printf ( <str> , largest ) ; } }", "label": 1, "id": 678}
{"input": "int main ( void ) { int t , i ; int a , b , c , ans , l , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a * b ; d = a < b ? a : b ; for ( i = <int> ; i <= d ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { ans = i ; } } l = c / ans ; printf ( <str> , ans , l ) ; } return <int> ; }", "label": 1, "id": 679}
{"input": "int main ( ) { int t , i , n , a [ <int> ] , min , s ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( s = <int> ; s < n ; s ++ ) { scanf ( <str> , & a [ s ] ) ; } min = a [ <int> ] ; for ( s = <int> ; s < n ; s ++ ) { if ( a [ s ] < min ) min = a [ s ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 680}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , arr [ n ] [ n ] ) ; }", "label": 1, "id": 681}
{"input": "int main ( ) { long long int t , i , n , j , min ; long long int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { min = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < min ) { min = a [ j ] ; } } if ( n == <int> ) { printf ( <str> , a [ <int> ] ) ; } else { printf ( <str> , min * ( n - <int> ) ) ; } } return <int> ; }", "label": 0, "id": 682}
{"input": "int main ( ) { unsigned int i , n , t ; long int * a , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = ( long int * ) malloc ( n * sizeof ( long int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , a + i ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( * ( a + i ) > * ( a + i + <int> ) ) { sum = sum + * ( a + i + <int> ) ; } else { sum = sum + * ( a + i ) ; * ( a + i + <int> ) = * ( a + i ) ; } } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 683}
{"input": "int main ( void ) { int x ; scanf ( <str> , & x ) ; while ( x -- ) { int k , y , z , g , f , a , lcm ; scanf ( <str> , & k , & y ) ; if ( k > y ) { z = y ; for ( g = <int> ; g < z ; g ++ ) { if ( k % g == <int> && y % g == <int> ) f = g ; } } else { z = k ; for ( g = <int> ; g < z ; g ++ ) { if ( k % g == <int> && y % g == <int> ) f = g ; } } a = k * y ; lcm = a / f ; printf ( <str> , f , lcm ) ; } return <int> ; }", "label": 3, "id": 684}
{"input": "int main ( ) { int b [ <int> ] ; int arr [ <int> ] [ <int> ] [ <int> ] ; int n ; int m ; int i ; int j ; int k ; int cm ; int sum ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j < m ; j ++ ) { if ( j <= i ) { scanf ( <str> , & arr [ k ] [ i ] [ j ] ) ; } else { arr [ k ] [ i ] [ j ] = <int> ; } } } cm = <int> ; sum = <int> ; for ( i = <int> ; i < m ; i ++ ) { while ( <int> ) { if ( arr [ k ] [ i ] [ cm ] >= arr [ k ] [ i ] [ cm + <int> ] ) { sum = sum + arr [ k ] [ i ] [ cm ] ; break ; } else { cm ++ ; sum = sum + arr [ k ] [ i ] [ cm ] ; break ; } } } b [ k ] = sum ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , b [ i ] ) ; } return <int> ; }", "label": 3, "id": 685}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int i , j , n , z , b , k , e [ <int> ] , l , q ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } e [ <int> ] = a [ <int> ] [ <int> ] ; k = <int> ; z = <int> ; l = <int> ; b = <int> ; q = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( z == <int> ) { z = <int> ; b ++ ; k ++ ; if ( b / q == <int> ) { j = j - q ; q = q * <int> ; } else { j = j - <int> ; } } e [ l ] = e [ k ] + a [ i ] [ j ] ; l = l + <int> ; z ++ ; } z = <int> ; k ++ ; q = <int> ; b = <int> ; } i = <int> ; int c ; int u = ( <int> ^ n ) ; l = l - <int> ; c = e [ l ] ; while ( l > <int> ) { if ( e [ l ] > c ) { c = e [ l ] ; } l -- ; i ++ ; } printf ( <str> , c ) ; t -- ; } return ( <int> ) ; }", "label": 3, "id": 686}
{"input": "int gcd ( int m , int n ) { int temp ; while ( n ) { temp = n ; n = m % n ; m = temp ; } return m ; } int main ( ) { int i , a , t , x , y ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & x , & y ) ; a = gcd ( x , y ) ; printf ( <str> , a ) ; printf ( <str> , ( x * y ) / a ) ; } return <int> ; }", "label": 1, "id": 687}
{"input": "int main ( ) { int temp ; int n , a [ <int> ] [ <int> ] ; int sum ; scanf ( <str> , & n ) ; int j ; int i , k ; while ( n -- ) { scanf ( <str> , & j ) ; for ( i = <int> ; i < j ; i ++ ) { for ( k = <int> ; k <= i ; k ++ ) { scanf ( <str> , & a [ i ] [ k ] ) ; } } temp = <int> ; for ( i = <int> ; i < j - <int> ; i ++ ) { k = <int> ; sum = a [ i ] [ k ] + a [ i + <int> ] [ k ] + a [ i + <int> ] [ k + <int> ] ; if ( temp < sum ) { temp = sum ; } } printf ( <str> , temp ) ; } return <int> ; }", "label": 1, "id": 688}
{"input": "long gcd ( long a , long b ) { long n ; if ( a > b ) n = b ; else n = a ; while ( ( ( a % n ) != <int> ) || ( ( b % n ) != <int> ) ) { n = n - <int> ; } return ( n ) ; } long lcd ( long a , long b ) { long n ; if ( a > b ) n = a ; else n = b ; while ( ( ( n % a ) != <int> ) || ( ( n % b ) != <int> ) ) { n = n + <int> ; } return ( n ) ; } main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { long x , y ; scanf ( <str> , & x , & y ) ; printf ( <str> , gcd ( x , y ) , lcd ( x , y ) ) ; } }", "label": 2, "id": 689}
{"input": "int main ( ) { int a , b , c , e , i , f , num1 , num2 ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b , & c ) ; if ( b > c ) { num1 = b ; num2 = c ; } if ( b == c ) { printf ( <str> , b , c ) ; } if ( c == <int> ) { printf ( <str> , b , <int> ) ; } if ( b == <int> ) { printf ( <str> , c , <int> ) ; } else { num1 = c ; num2 = b ; } e = ( num1 % num2 ) ; while ( e != <int> ) { num1 = num2 ; num2 = e ; e = ( num1 % num2 ) ; } f = ( b * c ) / num2 ; printf ( <str> , num2 , f ) ; } return <int> ; }", "label": 1, "id": 690}
{"input": "int main ( ) { int A , B , lcm , gcd , i , T , min ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) min = B ; else if ( A < B ) min = A ; for ( i = <int> ; i <= min ; i ++ ) { if ( ( A % i == <int> ) && ( B % i == <int> ) ) gcd = i ; } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 691}
{"input": "long long A [ <int> ] ; long long dp [ <int> ] ; int main ( ) { int i , j , k ; int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( int i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; dp [ i ] = <int> ; } long long int sum = dp [ n ] ; for ( int i = n - <int> ; i > <int> ; i -- ) { if ( A [ i ] < A [ i + <int> ] ) dp [ i ] = dp [ i + <int> ] + <int> ; sum += dp [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 692}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; long long int s = <int> , i , a , d ; scanf ( <str> , & n ) ; scanf ( <str> , & d ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < d ) d = a ; } s = d * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 693}
{"input": "long long int a [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int t , r , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = r - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; } return <int> ; }", "label": 1, "id": 694}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int f = <int> ; while ( f <= t ) { int k ; scanf ( <str> , & k ) ; int a [ k ] ; int i ; for ( i = <int> ; i < ( k - <int> ) ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min , cost , greater ; for ( i = <int> ; i < k ; i ++ ) { if ( i != ( k - <int> ) ) { if ( a [ i ] < a [ i + <int> ] ) greater = a [ i ] ; else greater = a [ i + <int> ] ; } else { if ( a [ i ] < a [ i + <int> ] ) { greater = a [ i ] ; cost = a [ i - <int> ] ; } else { greater = a [ i + <int> ] ; cost = a [ i - <int> ] ; } } } printf ( <str> , cost ) ; } }", "label": 2, "id": 695}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int a [ <int> ] [ <int> ] ; while ( t -- ) { int n ; int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i != <int> ) { if ( j != <int> ) { int t = a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ; a [ i ] [ j ] += t ; } else a [ i ] [ j ] += a [ i - <int> ] [ <int> ] ; } } int max = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( max < a [ n - <int> ] [ j ] ) max = a [ n - <int> ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 696}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , x ; long long int sum = INT_MAX ; scanf ( <str> , & x ) ; while ( x -- ) { scanf ( <str> , & a ) ; if ( a > sum ) sum = a ; } printf ( <str> , sum * ( x - <int> ) ) ; } return <int> ; }", "label": 1, "id": 697}
{"input": "int n ; int matrix [ <int> ] [ <int> ] ; int dpmatx [ <int> ] [ <int> ] ; int max_cost ( int , int ) ; int giv_max_cost ( int , int ) ; int max2 ( int , int ) ; int main ( ) { int t_cases ; scanf ( <str> , & t_cases ) ; while ( t_cases -- ) { int i , j ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { dpmatx [ i ] [ j ] = - <int> ; } } scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } } int max_val ; max_val = max_cost ( <int> , <int> ) ; printf ( <str> , max_val ) ; } return <int> ; } int max_cost ( int i , int j ) { if ( ( i < n ) && ( j < n ) ) { return matrix [ i ] [ j ] + max2 ( giv_max_cost ( i + <int> , j ) , giv_max_cost ( i + <int> , j + <int> ) ) ; } else { return <int> ; } } int giv_max_cost ( int i , int j ) { if ( dpmatx [ i ] [ j ] == - <int> ) { dpmatx [ i ] [ j ] = max_cost ( i , j ) ; } return dpmatx [ i ] [ j ] ; } int max2 ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 698}
{"input": "int main ( ) { int n , t , i , j , k , max , sum , key , num [ <int> ] [ <int> ] , loc ; int answer [ <int> ] ; int flag ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; max = <int> ; sum = <int> ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k < n ; k ++ ) { if ( k <= j ) scanf ( <str> , & num [ j ] [ k ] ) ; else num [ j ] [ k ] = <int> ; } for ( j = <int> ; j < n ; j ++ ) { if ( num [ n - <int> ] [ j ] >= max ) { key = <int> ; max = num [ n - <int> ] [ j ] ; loc = j ; if ( loc == n - <int> ) key = <int> ; } } sum = sum + max ; for ( j = n - <int> ; j >= <int> ; j -- ) { if ( key == <int> ) sum += num [ j ] [ -- loc ] ; else { if ( num [ j ] [ loc ] > num [ j ] [ loc - <int> ] ) sum += num [ j ] [ loc ] ; else { sum += num [ j ] [ loc - <int> ] ; loc = loc - <int> ; } } } answer [ i ] = sum ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , answer [ i ] ) ; return <int> ; }", "label": 1, "id": 699}
{"input": "long gcd ( long a , long b ) { while ( a != <int> & & b != <int> ) { if ( a >= b ) { if ( a % b == <int> ) return b ; else a = a - b ; } else { if ( b % a == <int> ) return a ; else b = b - a ; } } } int main ( ) { long t ; long a , b , d ; long c ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; d = gcd ( a , b ) ; c = ( a * b ) / d ; printf ( <str> , d ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 700}
{"input": "int main ( ) { int i , t , j ; long int lcm , hcf , a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { if ( a % b == <int> ) { hcf = b ; } else { for ( j = b ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { hcf = j ; break ; } } } } else { if ( b % a == <int> ) { hcf = a ; } else { for ( j = a ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { hcf = j ; break ; } } } } lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 701}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] , i , min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 702}
{"input": "int size = <int> , j = <int> ; void compare_and_delete ( int arr [ ] , int index ) { int i = <int> ; if ( index == <int> ) { for ( i = index + <int> ; i < size && i + <int> <= size ; i ++ ) { arr [ i ] = arr [ i + <int> ] ; } } else if ( index == size - <int> ) { arr [ index - <int> ] = arr [ index ] ; } else { if ( arr [ index - <int> ] > arr [ index + <int> ] ) { for ( i = index ; i < size ; i ++ ) { arr [ i - <int> ] = arr [ i ] ; } } else { for ( i = index + <int> ; i < size && i + <int> <= size ; i ++ ) { arr [ i ] = arr [ i + <int> ] ; } } } -- size ; } void find_min_cost ( int arr [ ] , int sum [ ] ) { int minimum = arr [ <int> ] , i = <int> , index = <int> , sm = <int> ; if ( size == <int> ) { return ; } for ( i = <int> ; i < size ; i ++ ) { if ( minimum > arr [ i ] ) { minimum = arr [ i ] ; index = i ; } } while ( size > <int> ) { compare_and_delete ( arr , index ) ; sm = sm + minimum ; } sum [ j ++ ] = sm ; } void input_array ( int sum [ ] ) { int i = <int> ; scanf ( <str> , & size ) ; int arr [ size ] ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } find_min_cost ( arr , sum ) ; } int main ( ) { int test_cases = <int> , i = <int> ; scanf ( <str> , & test_cases ) ; int sum [ test_cases ] ; for ( i = <int> ; i < test_cases ; i ++ ) { input_array ( sum ) ; } for ( i = <int> ; i < test_cases ; i ++ ) { printf ( <str> , sum [ i ] ) ; } }", "label": 2, "id": 703}
{"input": "int main ( ) { int a , b , t , h , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i < a + <int> ; i ++ ) { if ( a % i == <int> && b % i == <int> ) h = i ; } printf ( <str> , h ) ; for ( i = a ; i < ( a * b + <int> ) ; i ++ ) { if ( i % a == <int> && i % b == <int> ) { printf ( <str> , i ) ; break ; } } } return <int> ; }", "label": 2, "id": 704}
{"input": "int main ( ) { int i , j , n , m , b [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) b [ i ] [ j ] = <int> ; for ( i = <int> ; i < m ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & b [ i ] [ j ] ) ; for ( i = m - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { if ( b [ i + <int> ] [ j + <int> ] > b [ i + <int> ] [ j ] ) b [ i ] [ j ] += b [ i + <int> ] [ j + <int> ] ; else b [ i ] [ j ] += b [ i + <int> ] [ j ] ; } printf ( <str> , b [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 705}
{"input": "int main ( ) { int t , n , i ; long long int a [ n ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int count = <int> , ans = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) count ++ ; else { ans += ( count * ( count - <int> ) ) / <int> ; count = <int> ; } } ans += n ; printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 706}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 1, "id": 707}
{"input": "int main ( ) { int t , a , b , gcd , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( ( a != <int> ) || ( b != <int> ) ) { a = a % b ; if ( a == <int> ) { gcd = b ; break ; } b = b % a ; if ( b == <int> ) { gcd = a ; break ; } } printf ( <str> , gcd , m * n / gcd ) ; } return <int> ; }", "label": 1, "id": 708}
{"input": "void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { long int n , i , a [ <int> ] , j , k = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; while ( <int> ) { for ( i = <int> ; i < n - <int> ; i ++ ) if ( a [ i ] <= a [ i + <int> ] ) { k = k + a [ i ] ; for ( j = i + <int> ; j < n ; j ++ ) a [ j ] = a [ j + <int> ] ; n -- ; } else { k = k + a [ i + <int> ] ; for ( j = i ; j < n ; j ++ ) a [ j ] = a [ j + <int> ] ; n -- ; } if ( n == <int> ) { printf ( <str> , k ) ; break ; } } } return <int> ; }", "label": 2, "id": 709}
{"input": "int main ( ) { int t , n , max , i , j , arr [ <int> ] [ <int> ] ; s ( t ) ; while ( t -- ) { s ( n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } arr [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] ; arr [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; else if ( j == i ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; else { if ( arr [ i - <int> ] [ j - <int> ] >= arr [ i - <int> ] [ j ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; } } } max = arr [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( arr [ n - <int> ] [ j ] > max ) max = arr [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 710}
{"input": "int main ( ) { int t , n , a [ max ] , i , j , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( j = <int> ; j < n ; j ++ ) if ( a [ <int> ] > a [ j ] ) { temp = a [ <int> ] ; a [ <int> ] = a [ j ] ; a [ j ] = temp ; } printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 711}
{"input": "int main ( ) { unsigned long long int l , c , j , a , b , max , min ; int i , n ; unsigned long long int p ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } l = max ; for ( j = <int> ; j < l ; j ++ ) { if ( max % min == <int> ) { p = ( a * b ) / min ; printf ( <str> , min , p ) ; j = max ; } c = max % min ; max = min ; min = c ; } } }", "label": 3, "id": 712}
{"input": "void print ( int a [ z ] [ z ] ) { int i , j ; for ( i = <int> ; i < z ; i ++ ) { for ( j = <int> ; j < z ; j ++ ) printf ( <str> , a [ i ] [ j ] ) ; printf ( <str> ) ; } } int main ( ) { int i = <int> , j , k , n , t , max = - <int> ; int a [ z ] [ z ] ; scanf ( <str> , & n ) ; while ( n -- ) { j = <int> ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 713}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int tc = <int> ; tc < t ; tc ++ ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( long long int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = a [ <int> ] ; for ( long long int i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 714}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] , i , j , n ; int first ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 715}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t , a , b , hcf = <int> , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = a * ( b / hcf ) ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 716}
{"input": "int main ( ) { long long int n , i , a , b , small ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & b ) ; long long int w [ b ] ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & w [ i ] ) ; } small = w [ <int> ] ; for ( i = <int> ; i < b ; i ++ ) { if ( small > w [ i ] ) small = w [ i ] ; } i = small * ( b - <int> ) ; printf ( <str> , i ) ; } return <int> ; }", "label": 0, "id": 717}
{"input": "typedef long long ll ; int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { int n , p ; scanf ( <str> , & n ) ; ll * a = ( ll * ) malloc ( sizeof ( ll ) * n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , a + i ) ; int s = n ; int r = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) { r ++ ; } else { p = ( r * ( r - <int> ) ) >> <int> ; s = s + p ; r = <int> ; } } p = ( r * ( r - <int> ) ) >> <int> ; s = s + p ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 718}
{"input": "int main ( ) { int t , gcd , lcm , a , b , p , q ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; p = a , q = b ; while ( b > <int> ) { gcd = a % b ; a = b ; b = gcd ; } gcd = a ; lcm = ( p * q ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 719}
{"input": "int main ( ) { int n , a , b ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; n -- ; } return <int> ; }", "label": 1, "id": 720}
{"input": "int main ( ) { int * * o , max ; int t , r , x , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { max = - <int> ; scanf ( <str> , & r ) ; o = ( int * * ) malloc ( ( r + <int> ) * sizeof ( int * ) ) ; for ( i = <int> ; i <= r ; i ++ ) { o [ i ] = ( int * ) malloc ( ( r + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i <= r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & x ) ; o [ i ] [ j ] = x + ( o [ i - <int> ] [ j - <int> ] > o [ i - <int> ] [ j ] ? o [ i - <int> ] [ j - <int> ] : o [ i - <int> ] [ j ] ) ; } } for ( j = <int> ; j <= r ; j ++ ) { if ( o [ r ] [ j ] > max ) max = o [ r ] [ j ] ; } printf ( <str> , max ) ; } }", "label": 0, "id": 721}
{"input": "int main ( ) { int t , i , n , j , temp ; scanf ( <str> , & t ) ; while ( t -- ) { int n , cnt = <int> ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( j = <int> ; j < n ; j ++ ) { if ( j + <int> < n && arr [ j ] > arr [ j + <int> ] ) cnt = cnt + arr [ j + <int> ] ; if ( j + <int> < n && arr [ j ] < arr [ j + <int> ] ) { cnt = cnt + arr [ j ] ; temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } printf ( <str> , cnt ) ; } return <int> ; }", "label": 1, "id": 722}
{"input": "int main ( ) { int a , b , i , p , j , max , min , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } for ( j = min ; j > <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { printf ( <str> , j ) ; j = <int> ; } } for ( p = max ; p <= ( a * b ) ; p = p + max ) { if ( p % a == <int> && p % b == <int> ) { printf ( <str> , p ) ; break ; } } } }", "label": 1, "id": 723}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; if ( a > b ) return gcd ( a % b , b ) ; if ( b > a ) return gcd ( b % a , a ) ; if ( a == b ) return a ; } int main ( ) { int t , g , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 724}
{"input": "int max ( int a , int b ) { if ( a < b ) return b ; else return a ; } int main ( ) { int t , i , j , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { m = - <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i == <int> && j == <int> ) continue ; if ( j == <int> ) a [ i ] [ <int> ] = a [ i ] [ <int> ] + a [ i - <int> ] [ <int> ] ; else if ( j == i ) a [ i ] [ i ] += a [ i - <int> ] [ i - <int> ] ; else a [ i ] [ j ] += max ( a [ i - <int> ] [ j - <int> ] , a [ i - <int> ] [ j ] ) ; if ( i == n - <int> ) { if ( m < a [ i ] [ j ] ) m = a [ i ] [ j ] ; } } } printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 725}
{"input": "int main ( ) { int t ; int a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int p = a * b ; gcd = a ; while ( a != b ) { if ( a > b ) { a = a - b ; } else if ( b > a ) b = b - a ; else if ( a == b ) ; gcd = a ; lcm = p / gcd ; } printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 726}
{"input": "int main ( void ) { int t ; long long int n , i , count , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int * a = ( long long int * ) malloc ( n * sizeof ( long long int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; count = <int> ; if ( n == <int> ) count = <int> ; else { for ( i = <int> ; i < ( n ) ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; } } } printf ( <str> , count ) ; free ( a ) ; } return <int> ; }", "label": 2, "id": 727}
{"input": "int quickread_int ( ) { int ch ; int num = <int> ; ch = getchar ( ) ; while ( ch < <char> || ch > <char> ) ch = getchar ( ) ; while ( ch >= <char> && ch <= <char> ) { num = num * <int> + ch - <char> ; ch = getchar ( ) ; } return num ; } int main ( ) { int ar [ <int> ] ; int n , max ; int t ; int k = <int> , q ; register int i , l , f ; scanf ( <str> , & t ) ; while ( k < t ) { n = quickread_int ( ) ; for ( i = <int> ; i < ( max = n * ( n + <int> ) / <int> ) ; i ++ ) ar [ i ] = quickread_int ( ) ; for ( l = <int> ; l <= n - <int> ; l ++ ) { if ( l == <int> ) f = max + <int> - <int> * n ; else f = f - n + l ; q = <int> ; while ( q < n - l ) { ar [ f + q ] += ( ar [ f + q + n - l ] > ar [ f + q + n - l + <int> ] ? ar [ f + q + n - l ] : ar [ f + q + n - l + <int> ] ) ; q ++ ; } } printf ( <str> , ar [ <int> ] ) ; } }", "label": 2, "id": 728}
{"input": "long a [ <int> ] [ <int> ] , n , ans = <int> ; rec ( int i ) { int big = <int> , j , temp = <int> , sum1 , sum2 ; if ( i == n ) return <int> ; else { rec ( i + <int> ) ; for ( j = <int> ; j <= i ; j ++ ) { sum1 = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; sum2 = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; if ( sum1 > sum2 ) a [ i ] [ j ] = sum1 ; else a [ i ] [ j ] = sum2 ; } } } int main ( ) { long t , i , j , flag = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { ans = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; rec ( <int> ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 729}
{"input": "int main ( ) { int a , i = <int> , j ; int x [ <int> ] ; long long n ; scanf ( <str> , & a ) ; while ( a -- ) { i = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & x [ i ] ) ; j = x [ i ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x [ i ] ) ; if ( x [ i ] < j ) j = x [ i ] ; } printf ( <str> , j * ( n - <int> ) ) ; } }", "label": 3, "id": 730}
{"input": "main ( ) { int a , b , l , t , gcd = <int> , flag = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; l = a * b ; if ( a < b ) { flag = a ; a = b ; b = flag ; } while ( a % b ) { gcd = a % b ; a = b ; b = gcd ; } l = l / b ; printf ( <str> , b , l ) ; } return <int> ; }", "label": 1, "id": 731}
{"input": "int main ( ) { int t , i , a , b , x , y , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { x = a ; y = b ; } else { x = b ; y = a ; } r = x % y ; while ( r != <int> ) { x = y ; y = r ; r = x % y ; } printf ( <str> , y , ( a * b ) / y ) ; } }", "label": 1, "id": 732}
{"input": "int main ( ) { int t , rows , arr [ MAX ] [ MAX ] , i , j , k , max_sum ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i <= rows ; i ++ ) { for ( j = <int> ; j <= rows ; j ++ ) { arr [ i ] [ j ] = <int> ; } } for ( i = <int> ; i <= rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; if ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ) { arr [ i ] [ j ] += arr [ i - <int> ] [ j ] ; } else { arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } } } max_sum = <int> ; for ( i = <int> ; i <= rows ; i ++ ) { if ( max_sum < arr [ rows ] [ i ] ) { max_sum = arr [ rows ] [ i ] ; } } printf ( <str> , max_sum ) ; } }", "label": 3, "id": 733}
{"input": "int main ( ) { int i , j , t ; long long int n , min ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; long int a [ size ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) { min = a [ j ] ; } } printf ( <str> , ( n - <int> ) * min ) ; } return ( <int> ) ; }", "label": 0, "id": 734}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; long long int min ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j == <int> ) min = a [ j ] ; else if ( min > a [ j ] ) min = a [ j ] ; } long long int h = min * ( n - <int> ) ; printf ( <str> , h ) ; } return <int> ; }", "label": 0, "id": 735}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int num1 , num2 , max , lcm , hcf ; scanf ( <str> , & num1 , & num2 ) ; max = ( num1 > num2 ) ? num1 : num2 ; while ( <int> ) { if ( max % num1 == <int> && max % num2 == <int> ) { lcm = max ; hcf = ( num1 * num2 ) / lcm ; break ; } ++ max ; } printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 736}
{"input": "int input [ <int> ] [ <int> ] ; int memory [ <int> ] [ <int> ] ; int main ( ) { int n , j , i , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & input [ i ] [ j ] ) ; } for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) memory [ i ] [ j ] = - <int> ; } printf ( <str> , solve ( <int> , <int> , n ) ) ; t -- ; } return <int> ; } int solve ( int i , int j , int n ) { int t1 , t2 ; if ( i >= n ) return <int> ; if ( memory [ i ] [ j ] != - <int> ) return memory [ i ] [ j ] ; else { t1 = solve ( i + <int> , j , n ) ; t2 = solve ( i + <int> , j + <int> , n ) ; memory [ i ] [ j ] = input [ i ] [ j ] + max ( t1 , t2 ) ; return memory [ i ] [ j ] ; } } int max ( t1 , t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; }", "label": 1, "id": 737}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> || b == <int> ) { return ( <int> ) ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } int main ( ) { long long int a , b , t , i , h , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; h = gcd ( a , b ) ; lcm = ( a * b ) / h ; printf ( <str> , h , lcm ) ; } }", "label": 0, "id": 738}
{"input": "int main ( ) { int t , i , j ; long a , b , lcm , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a && j <= b ; ++ j ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } printf ( <str> , gcd ) ; lcm = ( a * b ) / gcd ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 2, "id": 739}
{"input": "int main ( ) { int t , i , j , c , p , q , f ; long int n , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } c = <int> ; q = <int> ; f = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { c ++ ; p = i ; for ( j = p + <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) { c = c + <int> ; i ++ ; q ++ ; } else break ; } } } for ( i = <int> ; i <= q - <int> ; i ++ ) { f = f + i ; } printf ( <str> , c + n + f ) ; } }", "label": 1, "id": 740}
{"input": "int main ( ) { int t , i , j , n , c , a [ <int> ] ; long long int l = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { l = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; c = a [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( c > a [ i + <int> ] ) { c = a [ i + <int> ] ; l = l + c ; } else l = l + c ; } printf ( <str> , l ) ; } return ( <int> ) ; }", "label": 1, "id": 741}
{"input": "main ( ) { int test , row , i , j ; int num [ <int> ] [ <int> ] ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & num [ i ] [ j ] ) ; for ( i = row - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( num [ i + <int> ] [ j ] < num [ i + <int> ] [ j + <int> ] ) num [ i ] [ j ] += num [ i + <int> ] [ j + <int> ] ; else num [ i ] [ j ] += num [ i + <int> ] [ j ] ; } printf ( <str> , num [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 742}
{"input": "int max ( int a , int b ) { if ( a < b ) return b ; else return a ; } int main ( ) { int t , i , j , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { m = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i == <int> && j == <int> ) continue ; if ( j == <int> ) a [ i ] [ <int> ] = a [ i ] [ <int> ] + a [ i - <int> ] [ <int> ] ; else if ( j == i ) a [ i ] [ i ] += a [ i - <int> ] [ i - <int> ] ; else a [ i ] [ j ] += max ( a [ i - <int> ] [ j - <int> ] , a [ i - <int> ] [ j ] ) ; if ( i == n - <int> && m < a [ n - <int> ] [ j ] ) m = a [ n - <int> ] [ j ] ; } } printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 743}
{"input": "int lcm ( int a , int b ) ; int gcd ( int a , int b ) ; int main ( ) { int t ; int i ; int n1 ; int n2 ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; printf ( <str> , gcd ( n1 , n2 ) , lcm ( n1 , n2 ) ) ; } return <int> ; } int gcd ( int a , int b ) { int temp ; while ( b != <int> ) { temp = ( a % b ) ; a = b ; b = temp ; } return a ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; }", "label": 1, "id": 744}
{"input": "int main ( ) { int t , i , j , temp , r ; int n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) { temp = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = temp ; } } n = n - <int> ; r = n * a [ n ] ; printf ( <str> , r ) ; } }", "label": 0, "id": 745}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( void ) { int a , b , n , i ; unsigned long long int lcm = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd ( a , b ) ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( <str> , gcd ( a , b ) , lcm ) ; } return <int> ; }", "label": 1, "id": 746}
{"input": "int greater ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int <unk> ( int a , int b ) { if ( a <= b ) return a ; else return b ; } int gcd ( int a , int b ) { int i , n ; n = <unk> ( a , b ) ; i = <int> ; while ( i <= n ) { if ( a % i == <int> && b % i == <int> ) { return i ; } i ++ ; } } int lcm ( int a , int b ) { int i , n ; n = greater ( a , b ) ; i = n ; while ( i ) { if ( i % a == <int> && i % b == <int> ) { return i ; break ; } i ++ ; } } int main ( ) { int i , t , a , b ; int r1 , r2 ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; r1 = gcd ( a , b ) ; r2 = lcm ( a , b ) ; printf ( <str> , r1 , r2 ) ; } }", "label": 2, "id": 747}
{"input": "int <unk> ( ) { int t = <int> ; char ch ; ch = gc ( ) ; while ( ch < <int> || ch > <int> ) ch = gc ( ) ; while ( ch >= <int> && ch <= <int> ) { t = ( t << <int> ) + ( t << <int> ) + ch - <int> ; ch = gc ( ) ; } return t ; } int main ( ) { int test_case , n ; test_case = <unk> ( ) ; while ( test_case -- ) { n = <unk> ( ) ; if ( ( n & <int> ) == <int> ) printf ( <str> , n ) ; else printf ( <str> , n - <int> ) ; } return <int> ; }", "label": 1, "id": 748}
{"input": "int main ( ) { int t , a , b , i = <int> ; long long l , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { g = i ; } } } else { for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { g = i ; } } } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 749}
{"input": "int main ( void ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { int i , a , b , c = <int> ; long s = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & b ) ; if ( b < a ) { s += ( c * ( c + <int> ) ) / <int> ; c = <int> ; } c ++ ; a = b ; } s += ( c * ( c + <int> ) ) / <int> ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 750}
{"input": "int getStartIndexOfRow ( int row ) { return ( <int> + row ) / <fp> * row ; } int getLargestSum ( int * numbers ) { return getLargestSumRec ( numbers , <int> , <int> ) ; } int getLargestSumRec ( int * numbers , int currentRow , int positionInRow ) { int sum1 ; int sum2 ; int erg ; if ( numbers [ getStartIndexOfRow ( currentRow ) ] == - <int> ) { return <int> ; } sum1 = getLargestSumRec ( numbers , currentRow + <int> , positionInRow ) ; sum2 = getLargestSumRec ( numbers , currentRow + <int> , positionInRow + <int> ) ; erg = sum1 > sum2 ? sum1 : sum2 ; erg += numbers [ getStartIndexOfRow ( currentRow ) + positionInRow ] ; return erg ; } int main ( ) { int numOfTestCases ; int numOfRows ; int largestSum ; int i , j , k ; int arrayCounter = <int> ; int numbers [ ARRAY_LEN ] ; scanf ( <str> , & numOfTestCases ) ; for ( i = <int> ; i < numOfTestCases ; i ++ ) { scanf ( <str> , & numOfRows ) ; arrayCounter = <int> ; for ( j = <int> ; j < numOfRows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & numbers [ arrayCounter ++ ] ) ; } } numbers [ getStartIndexOfRow ( numOfRows ) ] = - <int> ; printf ( <str> , getLargestSum ( numbers ) ) ; } return <int> ; }", "label": 2, "id": 751}
{"input": "int main ( ) { int t , a , b , i , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; k = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; if ( a == b ) break ; } printf ( <str> , a , k / a ) ; } return <int> ; }", "label": 1, "id": 752}
{"input": "long long int hcf ( long long int a , long long int b ) { if ( b == <int> ) return a ; long long int rem = a % b ; return hcf ( b , rem ) ; } int main ( ) { int test , i ; scanf ( <str> , & test ) ; long long int first , second , max , min ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & first , & second ) ; max = first > second ? first : second ; min = first <= second ? first : second ; long long int gcd = hcf ( max , min ) ; printf ( <str> , gcd , ( first * second ) / gcd ) ; } return <int> ; }", "label": 0, "id": 753}
{"input": "fun ( int a [ <int> ] [ <int> ] , int r , int j , int n ) { int l , ri ; if ( r < n ) { l = a [ n - <int> ] [ r ] + a [ n ] [ j ] ; ri = a [ n - <int> ] [ r ] + a [ n ] [ j + <int> ] ; if ( l > ri ) a [ n - <int> ] [ r ] = l ; else a [ n - <int> ] [ r ] = ri ; return fun ( a , r + <int> , j + <int> , n ) ; } } function ( int a [ <int> ] [ <int> ] , int n ) { int r = <int> , j = <int> ; if ( n > <int> ) { fun ( a , r , j , n ) ; return function ( a , n - <int> ) ; } } int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; function ( a , n - <int> ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 754}
{"input": "int gcd ( long long n1 , long long n2 ) { if ( n2 != <int> ) return gcd ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { long long n1 , n2 ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; printf ( <str> , gcd ( n1 , n2 ) , ( n1 * n2 ) / gcd ( n1 , n2 ) ) ; } return <int> ; }", "label": 0, "id": 755}
{"input": "int main ( ) { long int t , n , i , total ; long int arr [ M ] , sub [ M ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; sub [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i - <int> ] <= arr [ i ] ) sub [ i ] = sub [ i - <int> ] + <int> ; else sub [ i ] = <int> ; } total = <int> ; for ( i = <int> ; i < n ; i ++ ) total += sub [ i ] ; printf ( <str> , total ) ; } return <int> ; }", "label": 0, "id": 756}
{"input": "int main ( void ) { int t , a [ <int> ] , k , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { k = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { k ++ ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( ( a [ j ] == a [ i ] + <int> ) ) { k ++ ; } } } printf ( <str> , k ) ; } return <int> ; }", "label": 3, "id": 757}
{"input": "int getmax ( int * arr , int n ) { int i = <int> , max = - <int> ; while ( i < n ) { if ( max < arr [ i ] ) max = arr [ i ] ; i ++ ; } return max ; } int Sum_of_triangle ( int * * arr , int n ) { int i = <int> , j ; int a , b ; while ( i < n ) { j = <int> ; while ( j < ( i + <int> ) ) { a = b = <int> ; if ( j >= <int> ) a = arr [ i - <int> ] [ j - <int> ] ; if ( j < i ) b = arr [ i - <int> ] [ j ] ; if ( a > b ) arr [ i ] [ j ] += a ; else arr [ i ] [ j ] += b ; j ++ ; } i ++ ; } return getmax ( arr [ n - <int> ] , n ) ; } int main ( ) { int t , n , * * arr ; int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { i = <int> ; scanf ( <str> , & n ) ; arr = ( int * * ) malloc ( sizeof ( int * ) * n ) ; while ( i < n ) { arr [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; i ++ ; } i = <int> ; while ( i < n ) { j = <int> ; while ( j < i + <int> ) { scanf ( <str> , & arr [ i ] [ j ] ) ; j ++ ; } i ++ ; } printf ( <str> , Sum_of_triangle ( arr , n ) ) ; } return <int> ; }", "label": 0, "id": 758}
{"input": "int main ( ) { int n , t , i , j , k , num , temp , max ; int a [ <int> ] [ <int> ] , r [ <int> ] ; max = <int> ; temp = <int> ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( k = <int> ; k < t ; k ++ ) { r [ k ] = <int> ; } do { num = <int> ; for ( i = <int> ; i < t ; i ++ ) { num = num + a [ i ] [ r [ i ] ] ; } if ( num > max ) { max = num ; } for ( j = t - <int> ; j >= <int> ; j -- ) { if ( r [ j ] == r [ j - <int> ] ) { temp = r [ j ] + <int> ; for ( i = j ; i <= t ; i ++ ) { r [ i ] = temp ; } break ; } } } while ( r [ t - <int> ] != t ) ; printf ( <str> , max ) ; n = n - <int> ; } return <int> ; }", "label": 2, "id": 759}
{"input": "int main ( ) { int maximum = <int> , t , j , i , lines , * * arr , * max1 , * max2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & lines ) ; arr = ( int * * ) malloc ( sizeof ( int * ) * lines ) ; max1 = ( int * ) malloc ( sizeof ( int ) * lines ) ; max2 = ( int * ) malloc ( sizeof ( int ) * lines ) ; for ( i = <int> ; i < lines ; i ++ ) { max2 [ i ] = max1 [ i ] = <int> ; arr [ i ] = ( int * ) malloc ( sizeof ( int ) * lines ) ; for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) { max2 [ i ] = max1 [ i ] = arr [ i ] [ j ] ; continue ; } else if ( i == j ) { max2 [ j ] = arr [ i ] [ j ] + max1 [ j - <int> ] ; } else if ( j == <int> ) { max2 [ j ] = max1 [ j ] + arr [ i ] [ j ] ; } else { max2 [ j ] = arr [ i ] [ j ] + ( max1 [ j ] > max1 [ j - <int> ] ? max1 [ j ] : max1 [ j - <int> ] ) ; } } for ( j = <int> ; j < lines ; j ++ ) max1 [ j ] = max2 [ j ] ; } for ( i = <int> ; i < lines ; i ++ ) { printf ( <str> , max2 [ i ] ) ; if ( maximum < max2 [ i ] ) maximum = max2 [ i ] ; } printf ( <str> , maximum ) ; } return <int> ; }", "label": 1, "id": 760}
{"input": "int main ( ) { int n , i , j , x ; long long a [ <int> ] ; long long b [ <int> ] ; long long gcd [ <int> ] ; long long lcm [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; if ( a [ i ] < b [ i ] ) { x = a [ i ] ; } else { x = b [ i ] ; } for ( ; x >= <int> ; x -- ) { if ( a [ i ] % x == <int> && b [ i ] % x == <int> ) { gcd [ i ] = x ; lcm [ i ] = ( a [ i ] * b [ i ] ) / gcd [ i ] ; break ; } } } for ( j = <int> ; j < n ; j ++ ) { printf ( <str> , gcd [ j ] , lcm [ j ] ) ; } return <int> ; }", "label": 2, "id": 761}
{"input": "int main ( ) { int t ; long long int n , i , j , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & min ) ; for ( i = <int> ; i < n ; ++ i ) { scanf ( <str> , & j ) ; if ( j < min ) min = j ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 762}
{"input": "long op [ <int> ] ; int ip [ <int> ] [ <int> ] ; int main ( ) { int T , n , i , j , k , a ; long sum = <int> , temp_sum = <int> ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & n ) ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ip [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) sum = sum + ip [ i ] [ <int> ] ; temp_sum = sum ; for ( j = <int> , a = <int> ; j < n - <int> , a < n ; j ++ , a ++ ) for ( i = n - <int> ; i > a ; i -- ) { temp_sum = temp_sum - ip [ i ] [ j ] ; temp_sum = temp_sum + ip [ i ] [ j + <int> ] ; if ( sum < temp_sum ) sum = temp_sum ; } op [ k ] = sum ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , op [ i ] ) ; return <int> ; }", "label": 1, "id": 763}
{"input": "int main ( ) { long t , a [ <int> ] [ <int> ] , n [ <int> ] , count [ <int> ] , i , j , l , k , b [ <int> ] , sum [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n [ i ] ) ; for ( j = <int> ; j < n [ i ] ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ <int> ] = <int> ; if ( a [ i ] [ j ] >= a [ i ] [ j - <int> ] && j >= <int> ) { b [ j ] = b [ j - <int> ] + <int> ; } else { b [ j ] = <int> ; } } sum [ i ] = <int> ; for ( l = <int> ; l < n [ i ] ; l ++ ) { sum [ i ] = sum [ i ] + b [ l ] ; } } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , sum [ i ] ) ; } return <int> ; }", "label": 0, "id": 764}
{"input": "int nt , nr , nc , i , j , a [ <int> ] [ <int> ] , sum ; int getMax ( int num1 , int num2 ) { int result ; if ( num1 > num2 ) result = num1 ; else result = num2 ; return result ; } int getSum ( int i , int j ) { if ( i == nr ) sum = a [ i ] [ j ] ; else sum = a [ i ] [ j ] + getMax ( getSum ( i + <int> , j ) , getSum ( i + <int> , j + <int> ) ) ; return sum ; } int main ( ) { scanf ( <str> , & nt ) ; while ( nt -- ) { scanf ( <str> , & nr ) ; nc = nr ; for ( i = <int> ; i < nr ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , getSum ( <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 765}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int i , sum = <int> , max ; int arr [ n ] [ n ] ; memset ( arr , <int> , sizeof ( arr ) ) ; int j = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } max = arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { sum = arr [ i ] [ <int> ] + arr [ i + <int> ] [ <int> ] + arr [ i + <int> ] [ <int> ] ; if ( sum > max ) { max = sum ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 766}
{"input": "void <unk> ( char * str ) { int i = <int> , j = strlen ( str ) - <int> ; char temp ; while ( i < j ) { temp = str [ i ] ; str [ i ++ ] = str [ j ] ; str [ j -- ] = temp ; } } void <unk> ( int num , char * str ) { int i = <int> ; while ( num ) { str [ i ++ ] = ( num ) + <char> ; num /= <int> ; } str [ i ] = <char> ; <unk> ( str ) ; } char * <unk> ( char * num1 , char * num2 ) { char * result ; int i , j , k = <int> , carry , temp , temp1 , length1 = strlen ( num1 ) , length2 = strlen ( num2 ) ; result = ( char * ) malloc ( ( length1 + length2 + <int> ) * sizeof ( char ) ) ; for ( i = <int> ; i < length1 + length2 + <int> ; i ++ ) result [ i ] = <char> ; for ( i = length1 - <int> ; i >= <int> ; i -- ) { k = length1 - <int> - i ; carry = <int> ; for ( j = length2 - <int> ; j >= <int> ; j -- ) { temp = ( num2 [ j ] - <char> ) * ( num1 [ i ] - <char> ) ; temp += carry ; temp1 = temp ; temp /= <int> ; carry = temp ; temp = result [ k ] - <char> + temp1 ; result [ k ++ ] = ( temp ) + <char> ; temp /= <int> ; carry += temp ; } while ( carry != <int> ) { temp = carry % <int> ; carry /= <int> ; temp1 = result [ k ] - <char> + temp ; result [ k ++ ] = temp1 + <char> ; carry += temp1 / <int> ; } } result [ k ] = <char> ; <unk> ( result ) ; return result ; } int main ( void ) { int t , n , i , num , min ; char <unk> [ <int> ] , <unk> [ <int> ] , * result ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num ) ; if ( num < min ) min = num ; } <unk> ( n - <int> , <unk> ) ; <unk> ( min , <unk> ) ; result = <unk> ( <unk> , <unk> ) ; printf ( <str> , result ) ; free ( result ) ; } return <int> ; }", "label": 1, "id": 767}
{"input": "void lcm ( int x , int y , int t1 ) { int m ; m = ( x * y ) / t1 ; printf ( <str> , m ) ; } void gcd ( int x , int y ) { int t1 , t2 ; t1 = x ; t2 = y ; while ( t1 != t2 ) { if ( t1 > t2 ) t1 = t1 - t2 ; else t2 = t2 - t1 ; } printf ( <str> , t1 ) ; lcm ( x , y , t1 ) ; } void main ( ) { int n , i ; int a [ <int> ] , b [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; scanf ( <str> , & b [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { gcd ( a [ i ] , b [ i ] ) ; } }", "label": 3, "id": 768}
{"input": "void main ( ) { int a , b , n , t = <int> , gcd , lcm , x , y ; scanf ( <str> , & n ) ; while ( t < n ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; t ++ ; } }", "label": 1, "id": 769}
{"input": "long long gcd ( long long num1 , long long num2 ) { long long t ; do { t = num1 % num2 ; num1 = num2 ; num2 = t ; } while ( num2 != <int> ) ; return num1 ; } int main ( ) { long long num1 , num2 ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & num1 , & num2 ) ; long long g_c_d = gcd ( num1 , num2 ) ; printf ( <str> , g_c_d , ( num1 * num2 ) / g_c_d ) ; } return <int> ; }", "label": 1, "id": 770}
{"input": "int gcd ( int a , int b ) { int i , hcf ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { hcf = i ; } } return ( hcf ) ; } int main ( ) { int t ; long int a , b , hcf ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; printf ( <str> , hcf , ( a * b ) / hcf ) ; } return ( <int> ) ; }", "label": 1, "id": 771}
{"input": "void shell_sort ( int arr [ ] , int length ) ; int main ( ) { int a [ <int> ] , t , n , i , j , s ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { while ( t -- ) { s = <int> ; scanf ( <str> , & n ) ; if ( n >= <int> && n <= <int> ) { for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; shell_sort ( a , n ) ; while ( n != <int> ) { if ( a [ <int> ] < a [ <int> ] ) { s += a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) a [ j ] = a [ j + <int> ] ; } n -- ; } printf ( <str> , s ) ; } } } return <int> ; } void shell_sort ( int arr [ ] , int length ) { int i , gap , j , key ; for ( gap = ( length / <int> ) ; gap > <int> ; gap /= <int> ) { for ( i = gap ; i <= length - <int> ; i ++ ) { key = arr [ i ] ; for ( j = i ; j >= gap && arr [ j - gap ] > key ; j -= gap ) arr [ j ] = arr [ j - gap ] ; arr [ j ] = key ; } } }", "label": 2, "id": 772}
{"input": "int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = a [ <int> ] ; int sum = <int> ; for ( int i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 773}
{"input": "int main ( ) { int add [ <int> ] , i , j , lines , k , test , sum = <int> , n , large = <int> , cout = <int> , p [ <int> ] ; scanf ( <str> , & test ) ; add [ <int> ] = <int> ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { cout ++ ; for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & n ) ; sum = sum + n ; if ( sum > large ) { large = sum ; p [ i ] = cout ; } else if ( sum == large ) { large = sum ; p [ i ] = cout - <int> ; } } sum = <int> ; } } for ( i = <int> ; i < test ; i ++ ) { printf ( <str> , p [ i ] + test + i ) ; } return <int> ; }", "label": 1, "id": 774}
{"input": "int main ( void ) { int t , a , b , i , min , l ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; min = a < b ? a : b ; for ( i = min ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { break ; } } l = ( a * b ) / i ; printf ( <str> , i , l ) ; t -- ; } return <int> ; }", "label": 1, "id": 775}
{"input": "int a [ <int> ] [ <int> ] ; int n ; int find ( int i , int j ) { int k ; if ( i == n - <int> ) k = a [ i ] [ j ] ; else { k = max ( find ( i + <int> , j ) , find ( i + <int> , j + <int> ) ) ; k += a [ i ] [ j ] ; } return k ; } main ( ) { int T , i , j ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , find ( <int> , <int> ) ) ; } }", "label": 2, "id": 776}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int i , c , d , a , b , m , n ; scanf ( <str> , & i ) ; while ( i -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; m = a / c ; n = b / c ; d = c * m * n ; printf ( <str> , c , d ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 777}
{"input": "long long int gcd ( long long int n , long long int n1 ) { if ( n % n1 == <int> ) { return n1 ; } else { return gcd ( n1 , n % n1 ) ; } } int main ( ) { int t , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { long long int n , n1 , l = <int> , g = <int> , i , rem = <int> ; scanf ( <str> , & n , & n1 ) ; g = gcd ( n , n1 ) ; l = ( n * n1 ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 778}
{"input": "int main ( ) { long long int t , m , a , b , <unk> , <unk> ; long long int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; <unk> = a ; <unk> = b ; while ( b != <int> ) { m = b ; b = a % b ; a = m ; } lcm = ( <unk> * <unk> ) / a ; printf ( <str> , a , lcm ) ; } return <int> ; }", "label": 0, "id": 779}
{"input": "int gcd ( int p , int q ) { if ( p == q ) { return p ; } while ( p != q ) { if ( p > q ) { p -= q ; } else { q -= p ; } } return p ; } int main ( ) { int t , n , b , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & m ) ; b = gcd ( n , m ) ; printf ( <str> , b , ( m * n ) / b ) ; } return <int> ; }", "label": 1, "id": 780}
{"input": "int n ; long long int f ( int i , int j , long long int a [ <int> ] [ <int> ] ) { int temp1 , temp2 , ans ; if ( i < n ) { temp1 = f ( i + <int> , j , a ) ; temp2 = f ( i + <int> , j + <int> , a ) ; if ( temp1 > temp2 ) ans = a [ i ] [ j ] + temp1 ; else ans = a [ i ] [ j ] + temp2 ; return ( ans ) ; } else return ( a [ i ] [ j ] ) ; } int main ( ) { int t , i , j ; long long int ans , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; ans = f ( <int> , <int> , a ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 781}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int i , k , j , n , t , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = a [ <int> ] [ <int> ] ; k = <int> , j = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ k ] [ j ] > a [ k ] [ j + <int> ] ) { sum += a [ k ] [ j ] ; j = j ; } else { sum += a [ k ] [ j + <int> ] ; j = j + <int> ; } k ++ ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 782}
{"input": "long long int gcd ( long long int x , long long int y ) { if ( y == <int> ) return x ; else return gcd ( y , x % y ) ; } long long int lcm ( long long int x , int y ) { return ( ( x * y ) / gcd ( x , y ) ) ; } main ( ) { long long int a , b , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 783}
{"input": "int findGcd ( int a , int b ) { if ( a < b ) { int t = a ; a = b ; b = t ; } if ( b == <int> ) return a ; else return findGcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = findGcd ( a , b ) ; printf ( <str> , gcd , ( ( long long int ) a * b ) / gcd ) ; } return <int> ; }", "label": 0, "id": 784}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm , t , z ; scanf ( <str> , & t ) ; for ( z = <int> ; z < t ; z ++ ) { scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } printf ( <str> , n1 , lcm ) ; } return <int> ; }", "label": 1, "id": 785}
{"input": "int n ; int function ( int a [ ] , int line , int previous ) { int t = line + previous ; if ( line == ( n - <int> ) ) return a [ t ] > a [ t + <int> ] ? a [ t ] : a [ t + <int> ] ; else { int t1 = a [ t ] + function ( a , line + <int> , t ) ; int t2 = a [ t + <int> ] + function ( a , line + <int> , t + <int> ) ; return t1 > t2 ? t1 : t2 ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int sum = <int> , i ; for ( i = <int> ; i <= n ; sum += i , i ++ ) ; int a [ sum ] ; for ( i = <int> ; i < sum ; i ++ ) scanf ( <str> , & a [ i ] ) ; printf ( <str> , a [ <int> ] + function ( a , <int> , <int> ) ) ; } }", "label": 2, "id": 786}
{"input": "typedef long long int ll ; int main ( ) { ll t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; ll a [ n ] ; ll min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , ( ( n - <int> ) * min ) ) ; } }", "label": 1, "id": 787}
{"input": "int main ( ) { int t , b , i , s , c ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & b ) ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & a [ i ] ) ; printf ( <str> ) ; } for ( i = <int> ; i < b - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) s = a [ i ] ; else s = a [ i + <int> ] ; } c = s * ( b - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 788}
{"input": "int gcd ( long int a , long int b ) { int temp ; if ( b > a ) { temp = b ; b = a ; a = temp ; } if ( a % b == <int> ) { return b ; } else if ( b == <int> ) { return a ; } return gcd ( a % b , b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a , & b ) ; int hcf = gcd ( a , b ) ; long int mult = a * b ; long int lcm = mult / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 789}
{"input": "long gcd ( int a , int b ) ; int main ( ) { int t ; long n1 , n2 , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; g = gcd ( n1 , n2 ) ; printf ( <str> , g , ( n1 * n2 / g ) ) ; } return <int> ; } long gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 0, "id": 790}
{"input": "int gcd ( int x , int y ) { int temp ; while ( y != <int> ) { temp = y ; y = x % y ; x = temp ; } return x ; } void main ( ) { int a , b , t , res ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; res = gcd ( a , b ) ; printf ( <str> , res , ( a * b ) / res ) ; } }", "label": 1, "id": 791}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int i , n , a ; scanf ( <str> , & n ) ; long int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) { min = a ; } } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } }", "label": 0, "id": 792}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] = { <int> } ; int i , j , temp ; int t , n , res ; scanf ( <str> , & t ) ; while ( t -- ) { res = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> && i > <int> ) { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; continue ; } if ( j == i && i > <int> ) { a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; continue ; } temp = a [ i ] [ j ] ; if ( ( ( temp += a [ i - <int> ] [ j ] ) > ( a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ) ) && ( i > <int> ) ) a [ i ] [ j ] = temp ; if ( i == n && a [ n ] [ j ] > res ) { res = a [ n ] [ j ] ; } } } printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 793}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int line [ n ] [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { for ( int k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & line [ j ] [ k ] ) ; } } for ( int j = <int> ; j < n ; j ++ ) { line [ j ] [ <int> ] += line [ j - <int> ] [ <int> ] ; } for ( int k = <int> ; k < n ; k ++ ) { line [ k ] [ k ] += line [ k - <int> ] [ k - <int> ] ; for ( int j = k + <int> ; j < n ; j ++ ) { if ( line [ j - <int> ] [ k - <int> ] > line [ j - <int> ] [ k ] ) line [ j ] [ k ] += line [ j - <int> ] [ k - <int> ] ; else line [ j ] [ k ] += line [ j - <int> ] [ k ] ; } } int max = <int> ; for ( int k = <int> ; k < n ; k ++ ) { if ( max < line [ n - <int> ] [ k ] ) max = line [ n - <int> ] [ k ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 794}
{"input": "int arr [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int maxPath ( int n ) { int maxlen = <int> ; if ( n < <int> ) return - <int> ; if ( n == <int> ) return <int> ; if ( n == <int> ) return <int> ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( i == <int> && j == <int> ) continue ; if ( j == <int> ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + max ( arr [ i - <int> ] [ j ] , arr [ i - <int> , j - <int> ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { if ( arr [ n - <int> ] [ i ] > maxlen ) maxlen = arr [ n - <int> ] [ i ] ; } return maxlen ; } int main ( ) { int T ; int ans [ <int> ] ; scanf ( <str> , & T ) ; int rows ; int i , j , k ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } int max_length = maxPath ( rows ) ; ans [ i ] = max_length ; } for ( i = <int> ; i < T ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return <int> ; }", "label": 3, "id": 795}
{"input": "int main ( ) { long int j , t , i , n , m , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & m ) ; if ( j == <int> ) temp = m ; if ( temp > m ) temp = m ; } printf ( <str> , temp * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 796}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int k = n * ( n + <int> ) / <int> ; int arr [ k ] , i ; for ( i = <int> ; i < k ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int s = <int> , nxr , nxb ; while ( s != <int> ) { s = k - ( <int> * n ) + <int> ; nxb = s + n - <int> ; nxr = nxb + <int> ; arr [ s ] = ( arr [ s ] + arr [ nxb ] ) > ( arr [ s ] + arr [ nxr ] ) ? arr [ s ] + arr [ nxb ] : arr [ s ] + arr [ nxr ] ; k = k - n ; n = n - <int> ; } printf ( <str> , arr [ <int> ] ) ; } }", "label": 1, "id": 797}
{"input": "int main ( void ) { int matrix [ <int> ] [ <int> ] , t = <int> , sum = <int> , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & matrix [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ( j <= i - <int> ) && j > <int> ) matrix [ i ] [ j ] = ( matrix [ i - <int> ] [ j ] + matrix [ i ] [ j ] ) > ( matrix [ i - <int> ] [ j - <int> ] + matrix [ i ] [ j ] ) ? matrix [ i - <int> ] [ j ] + matrix [ i ] [ j ] : matrix [ i - <int> ] [ j - <int> ] + matrix [ i ] [ j ] ; else if ( j == <int> ) matrix [ i ] [ j ] = matrix [ i - <int> ] [ j ] + matrix [ i ] [ j ] ; else matrix [ i ] [ j ] = matrix [ i - <int> ] [ j - <int> ] + matrix [ i ] [ j ] ; } } for ( j = <int> ; j < n ; j ++ ) if ( matrix [ n - <int> ] [ j ] > sum ) sum = matrix [ n - <int> ] [ j ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 798}
{"input": "long gcd ( long x , long y ) { if ( x == <int> ) return y ; while ( y != <int> ) { if ( x > y ) x = x - y ; else y = y - x ; } return x ; } int main ( ) { int tc , hcf ; long int a , b , lcm ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 799}
{"input": "main ( ) { int a [ <int> ] , n , t , i , c ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { c = c + a [ i + <int> ] ; } else { c = c + a [ i ] ; a [ i + <int> ] = a [ i ] ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 800}
{"input": "int gcd ( int a , int b ) { int c = a % b ; if ( c == <int> ) return b ; else return gcd ( b , c ) ; } int main ( ) { int i , t , n , m , lcm , g ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n , & m ) ; g = gcd ( n , m ) ; lcm = ( n * m ) / g ; printf ( <str> , g , lcm ) ; } return <int> ; }", "label": 1, "id": 801}
{"input": "void sol ( ) { int i , n , j , count ; long int arr [ MAX ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; count = n ; for ( i = <int> ; i < n ; i ++ ) { j = i + <int> ; while ( arr [ j ] > arr [ j - <int> ] && j < n ) { count ++ ; j ++ ; } } printf ( <str> , count ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) sol ( ) ; return <int> ; }", "label": 0, "id": 802}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { int a , b , m , n ; scanf ( <str> , & m , & n ) ; a = m ; b = n ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } int gcd = a ; int lcm = ( m * n ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 803}
{"input": "long long check ( int a [ ] [ <int> ] , int i , int j , int n ) { long long int sum1 , sum2 ; if ( i == n - <int> ) return a [ i ] [ j ] ; sum1 = check ( a , i + <int> , j , n ) ; sum1 += a [ i ] [ j ] ; sum2 = check ( a , i + <int> , j + <int> , n ) ; sum2 += a [ i ] [ j ] ; if ( sum1 > sum2 ) return sum1 ; return sum2 ; } int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; long long int max ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } max = check ( a , <int> , <int> , n ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 804}
{"input": "int main ( ) { int i , n , length = <int> , a [ <int> ] , t , total , flag = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } a [ n ] = a [ n - <int> ] - <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) flag = <int> ; else { if ( flag == <int> ) length ++ ; flag = <int> ; } } total = n + length ; printf ( <str> , total ) ; } return <int> ; }", "label": 3, "id": 805}
{"input": "int main ( ) { int * p , * q ; int * r , * s ; int i , n , j ; scanf ( <str> , & n ) ; printf ( <str> ) ; q = ( int * ) malloc ( sizeof ( int ) * ( n + <int> ) ) ; p = ( int * ) malloc ( sizeof ( int ) * ( n + <int> ) ) ; r = ( int * ) malloc ( sizeof ( int ) * ( n + <int> ) ) ; s = ( int * ) malloc ( sizeof ( int ) * ( n + <int> ) ) ; for ( i = <int> ; i <= ( n ) ; i ++ ) { printf ( <str> , i ) ; scanf ( <str> , & p [ i ] , & q [ i ] ) ; } printf ( <str> ) ; for ( i = <int> ; i <= n ; i ++ ) { printf ( <str> ) ; if ( p [ i ] < q [ i ] ) { for ( j = p [ i ] ; j >= <int> ; j -- ) { if ( ( p [ i ] % j == <int> ) && ( q [ i ] % j == <int> ) ) { s [ i ] = j ; break ; } } } else { for ( j = q [ i ] ; j >= <int> ; j -- ) { if ( ( p [ i ] % j == <int> ) && ( q [ i ] % j == <int> ) ) { s [ i ] = j ; break ; } } } } for ( i = <int> ; i <= n ; i ++ ) { printf ( <str> ) ; if ( p [ i ] > q [ i ] ) { for ( j = p [ i ] ; j <= ( p [ i ] * q [ i ] ) ; j ++ ) { if ( ( j % p [ i ] == <int> ) && ( j % q [ i ] == <int> ) ) { r [ i ] = j ; break ; } } } if ( p [ i ] < q [ i ] ) { for ( j = q [ i ] ; j <= ( p [ i ] * q [ i ] ) ; j ++ ) { if ( ( j % p [ i ] == <int> ) && ( j % q [ i ] == <int> ) ) { r [ i ] = j ; break ; } } } } for ( i = <int> ; i <= ( n ) ; i ++ ) { printf ( <str> , s [ i ] , r [ i ] ) ; } return <int> ; }", "label": 2, "id": 806}
{"input": "int main ( ) { int t , a [ max ] , n , i , j ; scanf ( <str> , & t ) ; while ( t > <int> ) { int count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= <int> ; j ++ ) { if ( a [ i ] <= a [ i + j ] ) { count ++ ; } } } printf ( <str> , count ) ; t -- ; } return <int> ; }", "label": 3, "id": 807}
{"input": "int main ( ) { FILE * p , * q , * w ; int count = <int> , count1 = <int> , i ; char a ; p = fopen ( <str> , <str> ) ; q = fopen ( <str> , <str> ) ; w = fopen ( <str> , <str> ) ; while ( <int> ) { a = fgetc ( p ) ; if ( a != EOF ) { if ( a == <char> ) count ++ ; } else break ; } while ( <int> ) { a = fgetc ( q ) ; if ( a == <char> ) count1 ++ ; else if ( a == EOF ) break ; } fclose ( p ) ; fclose ( q ) ; printf ( <str> , count ) ; p = fopen ( <str> , <str> ) ; q = fopen ( <str> , <str> ) ; for ( i = <int> ; i < count ; i ++ ) { while ( ( ( a = fgetc ( p ) ) != <char> ) && ( a != EOF ) ) fprintf ( w , <str> , a ) ; fprintf ( w , <str> ) ; while ( ( ( a = fgetc ( q ) ) != <char> ) && ( a != EOF ) ) fprintf ( w , <str> , a ) ; fprintf ( w , <str> ) ; } fclose ( p ) ; fclose ( q ) ; fclose ( w ) ; }", "label": 3, "id": 808}
{"input": "char * tri = <int> ; char rows ; int size [ ] = { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; void create ( ) { scanf ( <str> , & rows ) ; free ( tri ) ; tri = malloc ( size [ rows + <int> ] ) ; int i , j ; for ( i = <int> ; i < size [ rows + <int> ] ; i ++ ) { scanf ( <str> , tri + i ) ; } } void max ( ) { int i , j ; for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = size [ i ] ; j < size [ i + <int> ] ; j ++ ) { tri [ j ] += MAX ( tri [ size [ i ] - size [ i - <int> ] + j + <int> ] , tri [ size [ i ] - size [ i - <int> ] + j + <int> ] ) ; } } } void pr ( ) { int i , j ; for ( i = <int> ; i <= rows ; i ++ ) { for ( j = size [ i ] ; j < size [ i + <int> ] ; j ++ ) { printf ( <str> , tri [ j ] ) ; } printf ( <str> ) ; } } main ( ) { int n ; scanf ( <str> , & n ) ; for ( ; n >= <int> ; n -- ) { create ( ) ; max ( ) ; printf ( <str> , tri [ <int> ] ) ; } }", "label": 1, "id": 809}
{"input": "int main ( ) { int T , N ; int * A ; int cost , i , j ; scanf ( <str> , & T ) ; while ( T > <int> ) { cost = <int> ; scanf ( <str> , & N ) ; A = ( int * ) malloc ( N * sizeof ( int ) ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } i = <int> ; j = <int> ; while ( j < N ) { if ( A [ i ] < A [ j ] ) { cost += A [ i ] ; } else { cost += A [ j ] ; i = j ; } j ++ ; } printf ( <str> , cost ) ; T -- ; } return <int> ; }", "label": 1, "id": 810}
{"input": "int main ( ) { int array [ SIZE ] ; int n ; int col ; scanf ( <str> , & n ) ; int i , j , k , index ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & col ) ; index = <int> ; for ( j = <int> ; j < col ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & array [ index ++ ] ) ; } } int <unk> , <unk> , <unk> , <unk> ; <unk> = j = ( col * ( col + <int> ) ) / <int> - col ; <unk> = col - <int> ; <unk> = <unk> = <unk> - <unk> ; while ( <unk> >= <int> ) { for ( k = <int> ; k < <unk> ; k ++ ) { array [ <unk> ] += array [ j ] > array [ j + <int> ] ? array [ j ] : array [ j + <int> ] ; j ++ ; <unk> ++ ; } <unk> -- ; <unk> = <unk> = <unk> - <unk> ; <unk> = j = <unk> - <unk> - <int> ; } printf ( <str> , array [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 811}
{"input": "int sum ( int ) ; int sum ( int n ) { if ( n == <int> ) return <int> ; else if ( n == <int> ) return <int> ; else return ( n + sum ( n - <int> ) ) ; } int main ( ) { int t , * brr , n , i , tt , sum1 = <int> , j = <int> , k = <int> , sum2 , * arr ; scanf ( <str> , & t ) ; tt = t ; brr = malloc ( sizeof ( int ) * t ) ; while ( t -- ) { sum1 = <int> , sum2 = <int> , k = <int> ; scanf ( <str> , & n ) ; if ( n > <int> || n < <int> ) return <int> ; arr = malloc ( sizeof ( int ) * sum ( n ) ) ; for ( i = <int> ; i < sum ( n ) ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < <int> || arr [ i ] > <int> ) return <int> ; } while ( k < n ) { sum1 = sum1 + arr [ sum ( k ++ ) ] ; } sum2 = sum1 - arr [ sum ( n - <int> ) ] + arr [ ( sum ( n - <int> ) + <int> ) ] ; if ( sum2 > sum1 ) brr [ j ++ ] = sum2 ; else brr [ j ++ ] = sum1 ; } for ( i = <int> ; i < tt ; i ++ ) printf ( <str> , brr [ i ] ) ; return <int> ; }", "label": 2, "id": 812}
{"input": "int main ( ) { int t , n , i , j , k , l , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k < i ; k ++ ) { if ( a [ i ] [ k ] < a [ i ] [ k + <int> ] ) l = <int> ; else l = <int> ; a [ i - <int> ] [ k ] = a [ i - <int> ] [ k ] + a [ i ] [ k + l ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 813}
{"input": "int main ( ) { int t , n , i , j ; long long int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; } } }", "label": 0, "id": 814}
{"input": "int main ( ) { int n , t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] + a [ i + <int> ] [ j ] > a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 815}
{"input": "int main ( ) { int t , n1 , n2 , num , deno , rem , lcm , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 ) ; scanf ( <str> , & n2 ) ; if ( n1 > n2 ) { num = n1 ; deno = n2 ; } else { num = n2 ; deno = n1 ; } rem = n1 % n2 ; while ( rem != <int> ) { num = deno ; deno = rem ; rem = n1 % n2 ; } gcd = deno ; lcm = n1 * n2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 816}
{"input": "int main ( ) { int t , n , cost , array [ <int> ] , count , x , i ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & array [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( array [ i ] > array [ i + <int> ] ) count = count + array [ i + <int> ] ; else { if ( i == ( n - <int> ) ) { count = count + array [ i ] ; break ; } else { count = count + array [ i ] ; x = array [ i ] ; array [ i ] = array [ i + <int> ] ; array [ i + <int> ] = x ; } } } printf ( <str> , count ) ; } }", "label": 1, "id": 817}
{"input": "int read ( ) { char c ; int d ; d = <int> ; c = getchar_unlocked ( ) ; while ( <int> ) { if ( c == <char> || c == <char> ) break ; d = d * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return d ; } int main ( ) { int n , T , i , j ; scanf ( <str> , & T ) ; while ( T -- ) { int a [ <int> ] [ <int> ] ; int sum [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 818}
{"input": "int a [ <int> ] [ <int> ] ; int sum ( int ) ; int main ( ) { int t , i , j , n ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , sum ( n ) ) ; printf ( <str> ) ; t -- ; } return <int> ; } int sum ( int n ) { int k = <int> , i , j = <int> , m = - <int> ; int s [ <int> ] [ <int> ] = { <int> } ; s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= i + <int> ; j ++ ) { if ( j == <int> ) s [ i + <int> ] [ j ] = s [ i ] [ <int> ] + a [ i + <int> ] [ j ] ; k = s [ i ] [ j - <int> ] + a [ i + <int> ] [ j ] ; if ( k < ( s [ i ] [ j ] + a [ i + <int> ] [ j ] ) ) s [ i + <int> ] [ j ] = s [ i ] [ j ] + a [ i + <int> ] [ j ] ; else s [ i + <int> ] [ j ] = k ; } } for ( i = <int> ; i < n ; i ++ ) { if ( s [ n - <int> ] [ i ] > m ) m = s [ n - <int> ] [ i ] ; } return m ; }", "label": 0, "id": 819}
{"input": "int a [ <int> ] [ <int> ] ; int recurse ( int a [ <int> ] [ <int> ] , int n , int sum , int i , int j , int <unk> ) ; int top = - <int> ; int stack [ max ] ; int push ( int item ) ; int <unk> ( ) ; int <unk> ( ) ; int main ( ) { int t ; int n ; int i ; int j ; scanf ( <str> , & t ) ; while ( t -- ) { int sum = <int> ; int <unk> = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } i = <int> ; j = <int> ; recurse ( a , n , sum , i , j , <unk> ) ; } return <int> ; } int recurse ( int a [ <int> ] [ <int> ] , int n , int sum , int i , int j , int <unk> ) { sum += a [ i ] [ j ] ; if ( i == n - <int> ) { push ( sum ) ; } if ( i == n - <int> && j == n - <int> ) { int z = <int> ; int m ; while ( ! <unk> ( ) ) { m = pop ( ) ; if ( m > z ) { z = m ; } } printf ( <str> , z ) ; return ; } if ( i < n ) { recurse ( a , n , sum , i + <int> , j , <unk> ) ; recurse ( a , n , sum , i + <int> , j + <int> , <unk> ) ; } } int push ( int item ) { if ( <unk> ( ) ) { return ; } else { top = top + <int> ; stack [ top ] = item ; return stack [ top ] ; } } int <unk> ( ) { if ( top == max ) { return <int> ; } else { return <int> ; } } int <unk> ( ) { if ( top == - <int> ) { return <int> ; } else { return <int> ; } } int pop ( ) { int x ; if ( <unk> ( ) ) { return ; } else { x = stack [ top ] ; top = top - <int> ; return x ; } }", "label": 2, "id": 820}
{"input": "int main ( void ) { int a , b , i , j , t1 , t2 ; scanf ( <str> , & j ) ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & a , & b ) ; t1 = a ; t2 = b ; while ( t1 != t2 ) { if ( t1 > t2 ) t1 = t1 - t2 ; else t2 = t2 - t1 ; } printf ( <str> , t1 , a * b / t1 ) ; } return <int> ; }", "label": 1, "id": 821}
{"input": "int ar [ <int> ] ; int n ; int max ( ) ; int main ( ) { int t ; int i , j ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ ( ( i - <int> ) * i ) / <int> + j - <int> ] ) ; printf ( <str> , max ( ) ) ; } } int max ( ) { int i , j ; int t1 , t2 ; for ( i = n - <int> ; i >= <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { t1 = ar [ ( ( i + <int> ) * i ) / <int> + j - <int> ] ; t2 = ar [ ( ( i + <int> ) * i ) / <int> + j ] ; ar [ ( ( i - <int> ) * i ) / <int> + j - <int> ] = t1 > t2 ? t1 : t2 ; } } return ar [ <int> ] ; }", "label": 3, "id": 822}
{"input": "int input [ <int> ] [ <int> ] , output [ <int> ] , max = <int> , k ; int main ( ) { int T , i , N [ <int> ] , j ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N [ i ] ) ; for ( j = <int> ; j < N [ i ] ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & input [ j ] [ k ] ) ; } } output [ i ] = <int> ; for ( j = <int> ; j < N [ i ] - <int> ; j ++ ) { max = input [ j ] [ <int> ] + input [ j + <int> ] [ <int> ] + input [ j + <int> ] [ <int> ] ; if ( max > output [ i ] ) { output [ i ] = max ; } } } for ( i = <int> ; i < T ; i ++ ) { printf ( <str> ) ; printf ( <str> , output [ i ] ) ; } return <int> ; }", "label": 1, "id": 823}
{"input": "int arr [ MAX ] [ MAX ] , answer [ MAX ] [ MAX ] ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int sum1 ( int n ) { int i , j ; i = n - <int> ; for ( j = <int> ; j < n ; j ++ ) answer [ i ] [ j ] = arr [ i ] [ j ] ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { answer [ i ] [ j ] = arr [ i ] [ j ] + max ( answer [ i + <int> ] [ j ] , answer [ i + <int> ] [ j + <int> ] ) ; } } return answer [ <int> ] [ <int> ] ; } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } printf ( <str> , sum1 ( n ) ) ; t -- ; } return <int> ; }", "label": 0, "id": 824}
{"input": "void function ( int n ) { int i , j ; i = <int> ; int min , sum ; sum = <int> ; int array [ n ] ; while ( i < n ) { scanf ( <str> , & array [ i ] ) ; i ++ ; } min = array [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( min > array [ j ] ) { min = array [ j ] ; } sum = sum + min ; } printf ( <str> , sum ) ; } int main ( ) { int t , no ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & no ) ; function ( no ) ; } return <int> ; }", "label": 1, "id": 825}
{"input": "int main ( ) { long int div , divs , rem , nl ; scanf ( <str> , & nl ) ; long int prod ; while ( nl ) { scanf ( <str> , & div , & divs ) ; prod = div * divs ; rem = div % divs ; while ( rem ) { div = divs ; divs = rem ; rem = div % divs ; } printf ( <str> , divs , prod / divs ) ; nl -- ; } return <int> ; }", "label": 0, "id": 826}
{"input": "int traverse ( int ary [ ] [ <int> ] , int row , int col , int totalrow , int presum ) ; int main ( ) { int noOfCases , noOfRows , i , j , k , array [ <int> ] [ <int> ] ; scanf ( <str> , & noOfCases ) ; for ( i = <int> ; i < noOfCases ; i ++ ) { scanf ( <str> , & noOfRows ) ; for ( j = <int> ; j < noOfRows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & array [ j ] [ k ] ) ; } printf ( <str> , traverse ( array , <int> , <int> , noOfRows - <int> , <int> ) ) ; } return <int> ; } int traverse ( int ary [ ] [ <int> ] , int row , int col , int totalrow , int presum ) { int sum1 = <int> , sum2 = <int> ; if ( row >= totalrow ) return ( presum + ary [ row ] [ col ] ) ; sum1 = traverse ( ary , row + <int> , col , totalrow , presum + ary [ row ] [ col ] ) ; sum2 = traverse ( ary , row + <int> , col + <int> , totalrow , presum + ary [ row ] [ col ] ) ; if ( sum1 >= sum2 ) return sum1 ; return sum2 ; }", "label": 2, "id": 827}
{"input": "int array [ <int> ] [ <int> ] ; int largest ( int r , int c , int n ) { int path , pth1 , pth2 ; if ( r == n - <int> ) { path = array [ r ] [ c ] ; } else { pth1 = largest ( r + <int> , c , n ) ; pth2 = largest ( r + <int> , c + <int> , n ) ; if ( pth1 > pth2 ) path = array [ r ] [ c ] + pth1 ; else path = array [ r ] [ c ] + pth2 ; } return path ; } int main ( void ) { int t , n , i , j ; int path ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } path = largest ( <int> , <int> , n ) ; printf ( <str> , path ) ; memset ( array , <int> , sizeof ( int ) * <int> * <int> ) ; t -- ; } return <int> ; }", "label": 2, "id": 828}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long a [ <int> ] , z , i ; int count = <int> ; scanf ( <str> , & z ) ; for ( i = <int> ; i < z ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long long min , ans ; for ( i = <int> ; i < z - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { min = a [ i ] ; a [ i + <int> ] = a [ i ] ; } else if ( a [ i ] > a [ i + <int> ] ) { min = a [ i + <int> ] ; } } ans = min * ( z - <int> ) ; printf ( <str> , ans ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 829}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 830}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { long int i , n ; scanf ( <str> , & n ) ; long int c = <int> , c1 = <int> , d = n ; long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } i = <int> ; while ( i < ( n - <int> ) ) { c = <int> ; while ( arr [ i + <int> ] > arr [ i ] ) { c ++ ; i ++ ; if ( i == ( n - <int> ) ) { break ; } } i = i + <int> ; c1 = ( ( c * ( c + <int> ) ) / <int> ) - c ; d = d + c1 ; } printf ( <str> , d ) ; t -- ; } return <int> ; }", "label": 0, "id": 831}
{"input": "int main ( ) { int t , count , n , i , k , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { count = <int> ; scanf ( <str> , & n ) ; long a [ n ] ; for ( k = <int> ; k < n ; k ++ ) scanf ( <str> , & a [ k ] ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = j + <int> ; k < n ; k ++ ) { if ( a [ k ] < a [ k - <int> ] ) { if ( k != j + <int> ) count += <int> ; break ; } if ( a [ k ] == a [ k - <int> ] && k != j + <int> ) { count += <int> ; break ; } if ( ( k == n - <int> ) && ( a [ n - <int> ] > a [ n - <int> ] ) ) count += <int> ; } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 1, "id": 832}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 1, "id": 833}
{"input": "int a [ <int> ] [ <int> ] ; int f ( int x , int y , int n ) { if ( x == n ) return a [ x ] [ y ] ; int p = a [ x ] [ y ] + f ( x + <int> , y , n ) ; int q = a [ x ] [ y ] + f ( x + <int> , y + <int> , n ) ; if ( p > q ) return p ; else return q ; } int main ( ) { int t , i , n , j ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , f ( <int> , <int> , n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 834}
{"input": "long minimum ( long a , long b ) { if ( a > b ) return b ; else return a ; } int main ( ) { int n ; long a , b , min , hcf , lcm ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; min = minimum ( a , b ) ; int i ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) hcf = i ; } lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 835}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int gcd , x , y ; scanf ( <str> , & x , & y ) ; long long int lcm , c = x * y ; while ( x != y ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } gcd = x ; lcm = c / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 836}
{"input": "int main ( ) { long int n1 , n2 , i , gcd , lcm , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { printf ( <str> ) ; scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 2, "id": 837}
{"input": "int A [ MAX ] [ MAX ] ; int path [ MAX ] [ MAX ] ; void <unk> ( ) { int i , j , numRow ; scanf ( <str> , & numRow ) ; for ( i = <int> ; i < numRow ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; path [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < numRow ; i ++ ) { path [ i ] [ <int> ] = path [ i - <int> ] [ <int> ] + A [ i ] [ <int> ] ; path [ i ] [ i ] = path [ i - <int> ] [ i - <int> ] + A [ i ] [ i ] ; } for ( i = <int> ; i < numRow ; i ++ ) for ( j = <int> ; j < i ; j ++ ) if ( path [ i - <int> ] [ j - <int> ] + A [ i ] [ j ] > path [ i - <int> ] [ j ] + A [ i ] [ j ] ) path [ i ] [ j ] = path [ i - <int> ] [ j - <int> ] + A [ i ] [ j ] ; else path [ i ] [ j ] = path [ i - <int> ] [ j ] + A [ i ] [ j ] ; int path_max = <int> ; for ( j = <int> ; j < numRow ; j ++ ) if ( path [ numRow - <int> ] [ j ] > path_max ) path_max = path [ numRow - <int> ] [ j ] ; printf ( <str> , path_max ) ; } int main ( ) { int numTest ; scanf ( <str> , & numTest ) ; while ( numTest -- ) <unk> ( ) ; return <int> ; }", "label": 0, "id": 838}
{"input": "int main ( ) { int t , n , * a , i , cnt ; scanf ( <str> , & t ) ; while ( t -- ) { cnt = <int> ; scanf ( <str> , & n ) ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , a + i ) ; while ( n > <int> ) { if ( * ( a ) > * ( a + <int> ) ) { cnt += * ( a + <int> ) ; for ( i = <int> ; i < n ; i ++ ) * ( a + i ) = * ( a + i + <int> ) ; n -- ; } else { cnt += * ( a ) ; for ( i = <int> ; i < n ; i ++ ) * ( a ) = * ( a + i + <int> ) ; n -- ; } } printf ( <str> , cnt ) ; } return <int> ; }", "label": 2, "id": 839}
{"input": "int main ( ) { unsigned int T , j , c ; T = j = c = <int> ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { unsigned long int N ; unsigned long int A , B , i , op , c ; N = A = B = op = c = i = <int> ; scanf ( <str> , & N ) ; scanf ( <str> , & A , & B ) ; if ( A >= B ) { c = B ; op += B ; } else { c = A ; op += A ; } for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A ) ; if ( c >= A ) { c = A ; op += A ; } else { op += c ; } } printf ( <str> , op ) ; } return <int> ; }", "label": 1, "id": 840}
{"input": "int main ( ) { long int a [ <int> ] , n , mr , m1 , sum [ <int> ] = { } , t , b ; scanf ( <str> , & t ) ; for ( b = <int> ; b < t ; b ++ ) { scanf ( <str> , & n ) ; if ( n >= <int> && n <= <int> ) { for ( mr = <int> ; mr <= n - <int> ; mr ++ ) { scanf ( <str> , & a [ mr ] ) ; } while ( n != <int> ) { if ( a [ <int> ] > a [ <int> ] ) { sum [ b ] += a [ <int> ] ; for ( m1 = <int> ; m1 < n - <int> ; m1 ++ ) { a [ m1 ] = a [ m1 + <int> ] ; } n -- ; } else if ( a [ <int> ] < a [ <int> ] ) { sum [ b ] += a [ <int> ] ; for ( m1 = <int> ; m1 < n - <int> ; m1 ++ ) { a [ m1 ] = a [ m1 + <int> ] ; } n -- ; } } printf ( <str> , sum ) ; } } return <int> ; }", "label": 2, "id": 841}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int dp [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int n , a [ <int> ] [ <int> ] , j , i , test ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( j == <int> ) dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - <int> ] [ j ] ; dp [ i ] [ j ] = a [ i ] [ j ] + max ( dp [ i - <int> ] [ j ] , dp [ i - <int> ] [ j - <int> ] ) ; } } int max = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( dp [ n - <int> ] [ i ] > max ) max = dp [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 842}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int m , i , t , j , n , smax = <int> ; scanf ( <str> , & m ) ; scanf ( <str> , & t ) ; int a [ t ] [ t ] , b [ t ] [ t ] ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < t ; j ++ ) { a [ i ] [ j ] = <int> ; b [ i ] [ j ] = <int> ; } } while ( m -- ) { for ( i = <int> ; i < t ; i ++ ) { j = <int> ; while ( i >= j ) { scanf ( <str> , & n ) ; a [ i ] [ j ] = n ; j ++ ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < t ; j ++ ) { if ( j - <int> >= <int> ) { b [ i ] [ j ] = max ( b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] , b [ i - <int> ] [ j ] + a [ i ] [ j ] ) ; } else { b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } } for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < t ; j ++ ) { if ( b [ i ] [ j ] > smax ) smax = b [ i ] [ j ] ; } } printf ( <str> , smax ) ; } return <int> ; }", "label": 1, "id": 843}
{"input": "int main ( ) { int t ; long long a , min , i , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long ara [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ara [ i ] ) ; min = ara [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( ara [ i ] < min ) min = ara [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 844}
{"input": "long long int ar [ <int> ] [ <int> ] ; long long int f [ <int> ] [ <int> ] ; long long int v [ <int> ] [ <int> ] ; int n ; long long int max ( long long int a , long long int b ) { return ( a > b ? a : b ) ; } long long int sum ( int i , int j ) { long long int t1 , t2 , t3 ; if ( i > n ) return <int> ; if ( f [ i ] [ j ] ) return v [ i ] [ j ] ; t1 = sum ( i + <int> , j ) ; t2 = sum ( i + <int> , j + <int> ) ; t3 = max ( t1 , t2 ) + ar [ i ] [ j ] ; v [ i ] [ j ] = t3 ; f [ i ] [ j ] = <int> ; return t3 ; } int main ( void ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> && j < n ; j ++ ) { scanf ( <str> , & ar [ i ] [ j ] ) ; f [ i ] [ j ] = <int> ; } } v [ <int> ] [ <int> ] = ar [ <int> ] [ <int> ] ; printf ( <str> , sum ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 845}
{"input": "int main ( ) { int x , n , t , s = <int> , s1 = <int> , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) { s = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & x ) ; s = s + x ; } if ( s1 < s ) s1 = s ; } printf ( <str> , s1 ) ; s1 = <int> ; } return ( <int> ) ; }", "label": 1, "id": 846}
{"input": "int main ( void ) { int i , j , n , t , count , count1 , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; count1 = count = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( count1 == <int> ) { temp = a [ i ] ; count1 ++ ; } if ( a [ i ] >= temp ) { count1 ++ ; temp = a [ i ] ; } else if ( a [ i ] < temp ) { count += count1 * ( count1 + <int> ) / <int> ; count1 = <int> ; } } if ( count == <int> ) count = <int> ; printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 847}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long a , b , m , n ; scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } }", "label": 0, "id": 848}
{"input": "int main ( ) { int a , b , m , n , t , l , tc ; scanf ( <str> , & tc ) ; if ( tc >= <int> && tc <= <int> ) { while ( tc -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; for ( ; n != <int> ; ) { t = n ; n = m % n ; m = t ; } l = ( a * b ) / t ; printf ( <str> , t , l ) ; } } return <int> ; }", "label": 1, "id": 849}
{"input": "int main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; long int mini = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( mini > a [ j ] ) mini = a [ j ] ; } long long int cost ; cost = mini * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 850}
{"input": "int aux [ <int> ] [ <int> ] = { <int> } ; int max ( int y , int z ) { return ( ( y > z ) ? y : z ) ; } int maxs ( int i , int j , int a [ ] [ <int> ] ) { if ( aux [ i ] [ j ] == <int> ) { if ( i == <int> && j == <int> ) aux [ i ] [ j ] == ( * ( * ( a + i ) + j ) ) ; else { aux [ i ] [ j ] = ( * ( * ( a + i ) + j ) ) + max ( maxs ( i - <int> , j - <int> , a ) , maxs ( i - <int> , j , a ) ) ; } } return aux [ i ] [ j ] ; } int main ( void ) { int i , n , j , k , ma , sum , x , y , t , T ; scanf ( <str> , & T ) ; for ( t = <int> ; t < T ; t ++ ) { printf ( <str> ) ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; ma = <int> ; x = <int> ; for ( i = <int> ; i < n ; i ++ ) { x = x + a [ i ] [ <int> ] ; aux [ i ] [ <int> ] = x ; } y = <int> ; for ( i = <int> ; i < n ; i ++ ) { y = y + a [ i ] [ i ] ; aux [ i ] [ i ] = y ; } for ( i = n - <int> , j = <int> ; j < n ; j ++ ) { sum = maxs ( i , j , a ) ; if ( sum > ma ) ma = sum ; } printf ( <str> , ma ) ; } return <int> ; }", "label": 1, "id": 851}
{"input": "int func ( int i , int j , int ) ; int a [ <int> ] , n , max , b ; int main ( ) { int i , t , row , sum , m ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { row = <int> ; m = <int> ; scanf ( <str> , & n ) ; b = ( n * ( n + <int> ) ) / <int> ; for ( i = <int> ; i <= b ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } sum = <int> ; func ( sum , m , row ) ; printf ( <str> , max ) ; } return <int> ; } int func ( int sum , int m , int row ) { sum = sum + a [ m ] ; if ( b - m < n ) { if ( sum > max ) max = sum ; return <int> ; } if ( row <= n ) func ( sum , m + row , row + <int> ) ; if ( row <= n ) func ( sum , m + row + <int> , row + <int> ) ; return <int> ; }", "label": 2, "id": 852}
{"input": "void triangle_sum ( int , int , int ) ; int arr [ <int> ] [ <int> ] , max , n ; int main ( ) { int test , i , j ; scanf ( <str> , & test ) ; while ( test > <int> ) { max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } triangle_sum ( <int> , <int> , <int> ) ; printf ( <str> , max ) ; test -- ; } return <int> ; } void triangle_sum ( int sum , int i , int j ) { if ( i <= n - <int> && j <= n - <int> ) { sum = sum + arr [ i ] [ j ] ; if ( sum > max ) { max = sum ; } triangle_sum ( sum , i + <int> , j ) ; triangle_sum ( sum , i + <int> , j + <int> ) ; } return ; }", "label": 2, "id": 853}
{"input": "int mini ( int * a , int n ) { int i , b = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < b ) b = a [ i ] ; } return b ; } int main ( ) { int * a , j , n ; long int sum = <int> ; int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , a + j ) ; } sum = ( n - <int> ) * mini ( a , n ) ; printf ( <str> , sum ) ; free ( a ) ; } return <int> ; }", "label": 0, "id": 854}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 855}
{"input": "void initialize ( int lines ) ; int findSum ( int matrix [ <int> ] [ <int> ] , int lines ) ; int max ( int a , int b ) ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int findSum ( int matrix [ <int> ] [ <int> ] , int lines ) { int i = <int> ; while ( lines > <int> ) { for ( i = <int> ; i <= lines - <int> ; i ++ ) { matrix [ lines - <int> ] [ i ] = matrix [ lines - <int> ] [ i ] + max ( matrix [ lines - <int> ] [ i ] , matrix [ lines - <int> ] [ i + <int> ] ) ; } lines -- ; } return matrix [ <int> ] [ <int> ] ; } void initialize ( int lines ) { int matrix [ <int> ] [ <int> ] ; int i = <int> ; int a = <int> ; int val = <int> ; for ( ; i < lines ; i ++ ) { for ( ; a < lines ; a ++ ) { if ( a > i ) matrix [ i ] [ a ] = <int> ; else { scanf ( <str> , & matrix [ i ] [ a ] ) ; if ( matrix [ i ] [ a ] > <int> || matrix [ i ] [ a ] < <int> ) return ; } } a = <int> ; } val = findSum ( matrix , lines ) ; printf ( <str> , val ) ; } int main ( ) { int cases = <int> ; int lines = <int> ; int i = <int> ; scanf ( <str> , & cases ) ; if ( lines < <int> || lines > <int> ) { return - <int> ; } for ( ; i < cases ; i ++ ) { scanf ( <str> , & lines ) ; initialize ( lines ) ; } return <int> ; }", "label": 0, "id": 856}
{"input": "int A [ <int> ] [ <int> ] ; int memo [ <int> ] [ <int> ] ; int sum ( int n , int i , int j ) { int s ; if ( i == n ) s = A [ i ] [ j ] ; else if ( memo [ i ] [ j ] >= <int> ) s = memo [ i ] [ j ] ; else { if ( sum ( n , i + <int> , j ) >= sum ( n , i + <int> , j + <int> ) ) s = sum ( n , i + <int> , j ) + A [ i ] [ j ] ; else s = sum ( n , i + <int> , j + <int> ) + A [ i ] [ j ] ; memo [ i ] [ j ] = s ; } return s ; } int main ( ) { int t , k , x , y , n ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( x = <int> ; x < n ; x ++ ) { for ( y = <int> ; y <= x ; y ++ ) { if ( x >= y ) scanf ( <str> , & A [ x ] [ y ] ) ; } } int c , d ; for ( c = <int> ; c < <int> ; c ++ ) { for ( d = <int> ; d <= c ; d ++ ) { memo [ c ] [ d ] = - <int> ; } } printf ( <str> , sum ( n , <int> , <int> ) ) ; } return <int> ; }", "label": 1, "id": 857}
{"input": "int arr [ <int> ] [ <int> ] ; int maxsum = <int> ; int n ; void <unk> ( int , int , int ) ; int main ( ) { int i , j , t , test ; scanf ( <str> , & test ) ; while ( test != <int> ) { maxsum = <int> ; scanf ( <str> , & n ) ; t = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < t ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; t ++ ; } <unk> ( <int> , <int> , arr [ <int> ] [ <int> ] ) ; printf ( <str> , maxsum ) ; test -- ; } return <int> ; } void <unk> ( int i , int j , int sum ) { if ( i == n ) { if ( sum > maxsum ) maxsum = sum ; return ; } int x = arr [ i + <int> ] [ j ] ; int y = arr [ i + <int> ] [ j + <int> ] ; int sum1 = sum + x ; int sum2 = sum + y ; <unk> ( i + <int> , j , sum1 ) ; <unk> ( i + <int> , j + <int> , sum2 ) ; return ; }", "label": 2, "id": 858}
{"input": "int main ( ) { int t , n , a , min , i ; long ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; min = a ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) min = a ; } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 859}
{"input": "short a [ <int> ] [ <int> ] ; short max ( short a , short b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { short t , n , i , j , k , maxs ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k <= j + <int> ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; a [ j ] [ k ] += max ( a [ j - <int> ] [ k - <int> ] , a [ j - <int> ] [ k ] ) ; } maxs = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j <= n ; j ++ ) if ( a [ n - <int> ] [ j ] > maxs ) maxs = a [ n - <int> ] [ j ] ; printf ( <str> , maxs ) ; } return <int> ; }", "label": 0, "id": 860}
{"input": "main ( ) { int T , a , j , i , sum = <int> ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a ) ; int arr [ a ] ; for ( j = <int> ; j < a ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } for ( j = <int> ; j < a ; j ++ ) { if ( arr [ <int> ] > arr [ j ] ) { sum = sum + arr [ j ] ; arr [ <int> ] = arr [ j ] ; } if ( arr [ <int> ] < arr [ j ] ) { sum = sum + arr [ <int> ] ; } } printf ( <str> , sum ) ; sum = <int> ; } }", "label": 1, "id": 861}
{"input": "main ( ) { int T , A , B , X , Y , GCD , rem , LCM ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; X = A ; Y = B ; while ( B != <int> ) { rem = A % B ; A = B ; B = rem ; } GCD = A ; LCM = ( X * Y ) / GCD ; printf ( <str> , GCD , LCM ) ; } }", "label": 1, "id": 862}
{"input": "int max ( int a1 , int b1 ) { if ( a1 > b1 ) return a1 ; else return b1 ; } int main ( ) { int i , j , t , n , m ; scanf ( <str> , & t ) ; while ( t != <int> ) { t -- ; int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i - <int> ] [ j - <int> ] , a [ i - <int> ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; } m = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] > m ) { m = a [ n - <int> ] [ i ] ; } } printf ( <str> , m ) ; } return <int> ; }", "label": 1, "id": 863}
{"input": "int main ( ) { int testCases , n , i , j , temp , temp2 , temp3 , k ; int a [ <int> ] = { <int> } , b [ <int> ] = { <int> } ; scanf ( <str> , & testCases ) ; while ( testCases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp ) ; if ( j == <int> ) { a [ <int> ] += temp ; } else if ( j == i ) { a [ j ] = temp + b [ j - <int> ] ; } else { temp2 = temp + b [ j - <int> ] ; temp3 = temp + b [ j ] ; a [ j ] = ( temp2 > temp3 ) ? temp2 : temp3 ; } } for ( k = <int> ; k <= i ; k ++ ) { b [ k ] = a [ k ] ; } } temp = b [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( b [ i ] > temp ) temp = b [ i ] ; } printf ( <str> , temp ) ; for ( k = <int> ; k < n ; k ++ ) { b [ k ] = a [ k ] = <int> ; } } return <int> ; }", "label": 0, "id": 864}
{"input": "void cost ( int [ ] , int ) ; int main ( ) { int i , no , n ; scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; cost ( a , n ) ; } return <int> ; } void cost ( int a [ ] , int n ) { int min , j ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , ( n - <int> ) * min ) ; return ; }", "label": 1, "id": 865}
{"input": "int main ( ) { int n , m , sum = <int> , i , j , * b , k = <int> , temp1 = <int> , temp2 = <int> , l = <int> ; scanf ( <str> , & n ) ; int ar [ <int> ] [ <int> ] ; for ( ; n > <int> ; n -- ) { scanf ( <str> , & m ) ; b = calloc ( m , sizeof ( int ) ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } for ( i = <int> ; i < m ; i ++ ) { sum += ar [ i ] [ <int> ] ; l += ar [ i ] [ i ] ; } temp1 = temp2 = sum ; for ( j = m - <int> ; j > k ; ) { if ( b [ j ] == b [ j - <int> ] ) { temp1 = temp1 - ar [ j ] [ b [ j ] ] + ar [ j ] [ <int> + b [ j ] ] ; b [ j ] ++ ; if ( sum < temp1 ) sum = temp1 ; j = m - <int> ; } if ( b [ j ] == j ) { k ++ ; j = m - <int> ; } if ( ( b [ j ] - <int> ) == b [ j - <int> ] ) j -- ; } b = calloc ( m , sizeof ( int ) ) ; k = <int> ; for ( j = m - <int> ; j > k ; j -- ) { if ( b [ j ] == b [ j - <int> ] ) { temp2 = temp2 - ar [ j ] [ b [ j ] ] + ar [ j ] [ <int> + b [ j ] ] ; b [ j ] ++ ; if ( sum < temp2 ) sum = temp2 ; } if ( b [ j ] == j ) { k ++ ; j = m - <int> ; } } if ( sum < l ) sum = l ; printf ( <str> , sum ) ; sum = temp1 = temp2 = k = l = <int> ; } return <int> ; }", "label": 2, "id": 866}
{"input": "int main ( ) { int <unk> , nol , result [ <int> ] , i , j , k , l ; scanf ( <str> , & <unk> ) ; for ( i = <int> ; i < <unk> ; i ++ ) { scanf ( <str> , & nol ) ; int arr [ nol - <int> ] [ nol - <int> ] ; for ( k = <int> ; k < nol ; k ++ ) { for ( l = <int> ; l <= k ; l ++ ) { scanf ( <str> , & arr [ k ] [ l ] ) ; } } for ( k = <int> ; k < nol ; k ++ ) { for ( l = <int> ; l <= k ; l ++ ) { arr [ i ] [ j ] += ( ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ) ; } } result [ i ] = arr [ <int> ] [ <int> ] ; } for ( i = <int> ; i < <unk> ; i ++ ) { printf ( <str> , result [ i ] ) ; } return <int> ; }", "label": 3, "id": 867}
{"input": "void main ( ) { int t , i , p , n , m , max , l , k ; scanf ( <str> , & t ) ; k = <int> ; while ( k < t ) { k ++ ; scanf ( <str> , & n , & m ) ; p = n * m ; if ( n > m ) max = n ; else max = m ; for ( i = <int> ; i < max ; i ++ ) { if ( n % i == <int> && m % i == <int> ) max = i ; } l = p / max ; printf ( <str> , max , l ) ; } }", "label": 1, "id": 868}
{"input": "int main ( ) { long long int n , a [ <int> ] , p , k , i , count , t , j ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { printf ( <str> ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } count = <int> ; while ( n - <int> > <int> ) { if ( a [ <int> ] > a [ <int> ] ) { for ( i = <int> , j = <int> ; i < n ; i ++ , j ++ ) { a [ j ] = a [ i ] ; } } else { for ( i = <int> , j = <int> ; i < n ; i ++ , j ++ ) { if ( i >= <int> ) { a [ j ] = a [ i + <int> ] ; } else { a [ j ] = a [ i ] ; } } } count = count + a [ <int> ] ; n -- ; } printf ( <str> , count ) ; } return <int> ; }", "label": 2, "id": 869}
{"input": "int main ( ) { int t ; long i , a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; long b [ a ] ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b [ i ] ) ; if ( b [ <int> ] > b [ i ] ) b [ <int> ] = b [ i ] ; } printf ( <str> , b [ <int> ] * ( a - <int> ) ) ; } }", "label": 0, "id": 870}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { int a , b ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; int p = b , temp , h = a ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } int q = ( h * p ) / temp ; printf ( <str> , temp , q ) ; } return <int> ; }", "label": 1, "id": 871}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { long sum = <int> ; scanf ( <str> , & n ) ; int a [ MAX ] [ MAX ] = { { <int> , <int> } } ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 872}
{"input": "int main ( ) { int t , n , i , k , m , j ; long long int sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; k = <int> ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = <int> ; } sum = <int> ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( a [ k ] > a [ k + <int> ] ) { sum = sum + a [ k ] ; } else { sum = sum + a [ k + <int> ] ; k ++ ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 873}
{"input": "main ( ) { int n , i , j , k , sum1 , sum2 , lines , array [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & array [ j ] [ k ] ) ; } } for ( j = lines - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j + <int> ; k ++ ) { if ( ( sum1 = ( array [ j ] [ k ] + array [ j + <int> ] [ k ] ) ) > ( sum2 = ( array [ j ] [ k ] + array [ j + <int> ] [ k + <int> ] ) ) ) array [ j ] [ k ] = sum1 ; else array [ j ] [ k ] = sum2 ; } } printf ( <str> , array [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 874}
{"input": "int main ( ) { int matrix [ <int> ] [ <int> ] ; int index [ <int> ] [ <int> ] ; int t , i , j ; int sum1 , sum2 ; char ch ; scanf ( <str> , & t ) ; int n ; int sum ; sum = <int> ; sum1 = <int> ; sum2 = <int> ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } } sum = sum + matrix [ <int> ] [ <int> ] ; index [ <int> ] [ <int> ] = <int> ; index [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) { sum1 = <int> ; sum2 = <int> ; if ( i != n ) { for ( j = i ; j <= n ; j ++ ) { sum1 = sum1 + matrix [ j ] [ index [ <int> ] [ <int> ] ] ; sum2 = sum2 + matrix [ j ] [ index [ <int> ] [ <int> ] + j - i + <int> ] ; } if ( sum1 > sum2 ) { index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] ; } else { index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; } } if ( i == n ) { if ( matrix [ index [ <int> ] [ <int> ] + <int> ] [ index [ <int> ] [ <int> ] ] > matrix [ index [ <int> ] [ <int> ] + <int> ] [ index [ <int> ] [ <int> ] + <int> ] ) { index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] ; } else { index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; } } sum = sum + matrix [ index [ <int> ] [ <int> ] ] [ index [ <int> ] [ <int> ] ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 875}
{"input": "int main ( ) { long int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int a , b = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < b ) b = a ; } printf ( <str> , b * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 876}
{"input": "train ( ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) train ( ) ; }", "label": 0, "id": 877}
{"input": "typedef unsigned long long ull ; inline ull read ( ) { ull num = <int> ; char c = gc ( ) ; while ( ! ( c >= <char> && c <= <char> ) ) { c = gc ( ) ; } while ( c >= <char> && c <= <char> ) { num = ( num << <int> ) + ( num << <int> ) + c - <char> ; c = gc ( ) ; } return ( num ) ; } int main ( ) { ull t , n , * arr , min , i , ans ; t = read ( ) ; while ( t -- ) { min = <int> ; n = read ( ) ; arr = ( ull * ) calloc ( n , sizeof ( ull ) ) ; for ( i = <int> ; i < n ; i ++ ) { arr [ i ] = read ( ) ; if ( min > arr [ i ] ) min = arr [ i ] ; } free ( ( void * ) arr ) ; ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 878}
{"input": "int main ( ) { int t , n , k , i , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int ar [ n ] , arr [ n ] , k = <int> ; n -= <int> ; g = <int> ; for ( i = <int> ; i <= n ; i ++ ) ar [ i ] = <int> ; while ( k <= n ) { for ( i = <int> ; i <= k ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( i == <int> ) arr [ i ] = arr [ i ] + ar [ i ] ; else if ( i == k ) arr [ i ] = arr [ i ] + ar [ i - <int> ] ; else { if ( ar [ i ] > ar [ i - <int> ] ) arr [ i ] = arr [ i ] + ar [ i ] ; else arr [ i ] = arr [ i ] + ar [ i - <int> ] ; } } i -= <int> ; while ( i >= <int> ) { ar [ k - i ] = arr [ k - i ] ; i -- ; } k ++ ; } while ( n >= <int> ) { if ( g < ar [ n ] ) g = ar [ n ] ; n -- ; } printf ( <str> , g ) ; } }", "label": 0, "id": 879}
{"input": "int main ( ) { int t , n , i , j , m ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; if ( n > <int> ) { int a [ n ] ; j = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; while ( n > <int> ) { if ( a [ <int> ] < a [ <int> ] ) { m = a [ <int> ] ; i = <int> ; } else { m = a [ <int> ] ; i = <int> ; } for ( ; i < n ; i ++ ) a [ i ] = a [ i + <int> ] ; j += m ; n -- ; } printf ( <str> , j ) ; t -- ; } } return <int> ; }", "label": 2, "id": 880}
{"input": "void fun ( int i , int j , int temp ) ; int a [ <int> ] [ <int> ] , s , lines ; int main ( ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i <= lines ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) scanf ( <str> , & a [ i - <int> ] [ j ] ) ; } for ( i = <int> ; i <= lines ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } } s = a [ lines - <int> ] [ <int> ] ; for ( j = <int> ; j < lines ; j ++ ) { if ( a [ lines - <int> ] [ j ] > s ) s = a [ lines - <int> ] [ j ] ; } printf ( <str> , s ) ; } return <int> ; }", "label": 3, "id": 881}
{"input": "int main ( void ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 882}
{"input": "int main ( ) { int t , a , b , den , num , rem ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; num = a > b ? a : b ; den = a > b ? b : a ; rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } printf ( <str> , den , a * b / den ) ; } return <int> ; }", "label": 1, "id": 883}
{"input": "void remov ( int a [ ] , int size , int x ) { int i , k ; int flag = <int> ; for ( i = <int> ; i < size ; i ++ ) if ( a [ i ] == x ) { flag = <int> ; break ; } if ( flag == <int> ) { for ( k = i ; k < size - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; } } int main ( ) { long long int t , n , i , count , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } while ( a [ <int> ] != <char> ) { if ( a [ <int> ] < a [ <int> ] ) { count = count + a [ <int> ] ; remov ( a , sizeof ( a ) / <int> , a [ <int> ] ) ; } else { count = count + a [ <int> ] ; remov ( a , sizeof ( a ) / <int> , a [ <int> ] ) ; } } printf ( <str> , count ) ; } }", "label": 2, "id": 884}
{"input": "int cost ( int s , int a [ ] ) ; int main ( ) { int t , i , m ; int p = <int> ; int sum [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & m ) ; int a [ m ] ; for ( i = <int> ; i < m ; i ++ ) scanf ( <str> , & a [ i ] ) ; sum [ p ] = cost ( m , a ) ; t -- ; p ++ ; } for ( i = <int> ; i < p ; i ++ ) printf ( <str> , sum [ i ] ) ; return <int> ; } int cost ( int m , int a [ ] ) { int i , sum = <int> ; for ( i = <int> ; i < m - <int> ; i ++ ) { if ( a [ i + <int> ] < a [ i ] ) sum += a [ i + <int> ] ; else sum += + a [ i ] ; } return sum ; }", "label": 1, "id": 885}
{"input": "int main ( ) { static int a [ <int> ] [ <int> ] ; int k = <int> , sum , t , n , i , j ; scanf ( <str> , & t ) ; while ( t != <int> ) { sum = <int> ; if ( k != <int> ) { for ( i = <int> ; i <= k - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = <int> ; } } i = <int> ; scanf ( <str> , & n ) ; k = n ; while ( i <= n - <int> ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; j ++ ; } i ++ ; } sum = a [ <int> ] [ <int> ] ; i = <int> , j = <int> ; while ( i < n - <int> && j < n - <int> ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { sum = sum + a [ i + <int> ] [ j ] ; i ++ ; } else { sum = sum + a [ i + <int> ] [ j + <int> ] ; i ++ ; j ++ ; } } printf ( <str> , sum ) ; t -- ; } return <int> ; }", "label": 1, "id": 886}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , g ; scanf ( <str> , & a , & b ) ; long long int l = a * b ; if ( a < b ) a = b + a - ( b = a ) ; do { g = a % b ; a = b ; b = g ; } while ( g != <int> ) ; l = l / a ; printf ( <str> , a , l ) ; } return <int> ; }", "label": 1, "id": 887}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcm , x , y , t ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 888}
{"input": "int main ( ) { long long int t , i , a , b , j , l , g ; scanf ( <str> , & t ) ; for ( j = <int> ; j <= t - <int> ; j ++ ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = i ; } a = a / g ; l = a * b ; printf ( <str> , g , l ) ; } }", "label": 2, "id": 889}
{"input": "int max1 ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a [ <int> ] [ <int> ] , i , j , count , cases , max2 ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & count ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < count ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = max1 ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } a [ i ] [ j + <int> ] = <int> ; } max2 = a [ count - <int> ] [ <int> ] ; for ( i = <int> ; i < count ; i ++ ) { if ( a [ count - <int> ] [ i ] > max2 ) max2 = a [ count - <int> ] [ i ] ; } printf ( <str> , max2 ) ; } return <int> ; }", "label": 1, "id": 890}
{"input": "int <unk> ( int , int ) ; int main ( ) { int x , y , GCD , LCM ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; GCD = <unk> ( x , y ) ; LCM = ( ( x * y ) / GCD ) ; printf ( <str> , GCD , LCM ) ; return <int> ; } int <unk> ( int n1 , int n2 ) { int i , gcd ; for ( i = <int> ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } return gcd ; }", "label": 1, "id": 891}
{"input": "int GCD ( int a , int b ) ; int main ( void ) { int T ; int lcm , gcd ; int a , b ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int GCD ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) return GCD ( a - b , b ) ; else return GCD ( b - a , a ) ; }", "label": 1, "id": 892}
{"input": "long int max ( long int , long int ) ; int main ( ) { long int val [ <int> ] , calc [ <int> ] = { <int> } , i , j , k , sum , n , size ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & size ) ; for ( j = <int> ; j < <int> ; j ++ ) calc [ j ] = <int> ; for ( j = <int> ; j < size ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & val [ k ] ) ; } for ( k = j ; k >= <int> ; k -- ) { if ( k == <int> ) calc [ k ] = val [ k ] + calc [ k ] ; else if ( k == j ) calc [ k ] = val [ k ] + calc [ k - <int> ] ; else calc [ k ] = val [ k ] + max ( calc [ k ] , calc [ k - <int> ] ) ; } } sum = calc [ <int> ] ; for ( k = <int> ; k < size ; k ++ ) { if ( calc [ k ] > sum ) sum = calc [ k ] ; } printf ( <str> , sum ) ; } return <int> ; } long int max ( long int a , long int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 893}
{"input": "int main ( ) { int t , a , b , i , lcm , gcd , j , c , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; lcm = <int> ; gcd = <int> ; if ( a == b ) printf ( <str> , b , b ) ; else { if ( a > b ) { c = a ; d = b ; } else if ( a < b ) { c = b ; d = a ; } for ( j = <int> ; j <= d ; j ++ ) { if ( ( c % j == <int> ) && ( d % j == <int> ) ) { lcm = lcm * j ; gcd = gcd * j ; c = c / j ; d = d / j ; } } if ( ( d > <int> ) || ( c > <int> ) ) lcm = lcm * d * c ; printf ( <str> , gcd , lcm ) ; } } return <int> ; }", "label": 1, "id": 894}
{"input": "int main ( void ) { int t , a , b , i , g , l , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = i ; } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 895}
{"input": "int triangle [ <int> ] [ <int> ] ; int levels ; int computed [ <int> ] [ <int> ] ; int main ( ) { int tests ; scanf ( <str> , & tests ) ; while ( tests -- > <int> ) { scanf ( <str> , & levels ) ; int y , x , value ; for ( y = <int> ; y < levels ; y += <int> ) { for ( x = <int> ; x < <int> + y ; x += <int> ) { scanf ( <str> , & value ) ; triangle [ y ] [ x ] = value ; computed [ y ] [ x ] = - <int> ; } } printf ( <str> , bestSum ( <int> , <int> ) ) ; } return <int> ; } int bestSum ( int y , int x ) { if ( y == levels ) return <int> ; if ( computed [ y ] [ x ] == - <int> ) { int a = bestSum ( y + <int> , x ) ; int b = bestSum ( y + <int> , x + <int> ) ; computed [ y ] [ x ] = a > b ? a : b ; } return computed [ y ] [ x ] + triangle [ y ] [ x ] ; }", "label": 0, "id": 896}
{"input": "int main ( ) { int t , n , i , sum = <int> , j , k , A [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } j = <int> ; sum = A [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( A [ i ] [ j ] > A [ i ] [ j + <int> ] ) { sum = sum + A [ i ] [ j ] ; j = i ; } else { sum = sum + A [ i ] [ j + <int> ] ; j = j + <int> ; } } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 897}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , r , i , a , b , c ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; c = a * b ; printf ( <str> , gcd ( a , b ) ) ; printf ( <str> , c / gcd ( a , b ) ) ; } } int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 1, "id": 898}
{"input": "int main ( ) { long long int a , b , n1 , n2 ; int t ; do { scanf ( <str> , & t ) ; } while ( t < <int> || t > <int> ) ; int lcm ; while ( t > <int> ) { b = <int> ; do { scanf ( <str> , & a ) ; } while ( a < <int> && a > <int> ) ; do { scanf ( <str> , & b ) ; } while ( b < <int> && b > <int> ) ; n1 = a ; n2 = b ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } printf ( <str> , n1 ) ; lcm = a * b / n1 ; printf ( <str> , lcm ) ; t -- ; } }", "label": 1, "id": 899}
{"input": "int main ( void ) { int T , A , B , i , h , l ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & A , & B ) ; for ( i = <int> ; i <= A && i <= B ; i ++ ) { if ( A % i == <int> && B % i == <int> ) h = i ; } l = A * B / h ; printf ( <str> , h , l ) ; printf ( <str> ) ; T -- ; } return <int> ; }", "label": 2, "id": 900}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , r , c , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( r = <int> ; r < n ; r ++ ) for ( c = <int> ; c <= r ; c ++ ) scanf ( <str> , & a [ r ] [ c ] ) ; for ( r = n - <int> ; r >= <int> ; r -- ) for ( c = <int> ; c <= r ; c ++ ) a [ r ] [ c ] += a [ r + <int> ] [ c ] > a [ r + <int> ] [ c + <int> ] ? a [ r + <int> ] [ c ] : a [ r + <int> ] [ c + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 901}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b , G , L ; scanf ( <str> , & a , & b ) ; G = gcd ( a , b ) ; L = ( a * b ) / G ; printf ( <str> , G , L ) ; } return <int> ; }", "label": 1, "id": 902}
{"input": "int main ( ) { long long int t , n , k , i ; long long int count ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; i = <int> , k = <int> , count = <int> ; while ( i < n ) { if ( arr [ i - <int> ] <= arr [ i ] ) k ++ ; else { count += k * ( k + <int> ) / <int> ; k = <int> ; } i ++ ; } count += k * ( k + <int> ) / <int> ; printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 903}
{"input": "int main ( ) { int a , b , i , sum , t , arr [ <int> ] ; scanf ( <str> , & a ) ; while ( a -- ) { sum = <int> ; scanf ( <str> , & b ) ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < b - <int> ; i ++ ) { if ( arr [ i ] > arr [ i + <int> ] ) { sum = sum + arr [ i + <int> ] ; } else { sum = sum + arr [ i ] ; t = arr [ i ] ; arr [ i ] = arr [ i + <int> ] ; arr [ i + <int> ] = t ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 904}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 905}
{"input": "long long A [ <int> ] ; long long dp [ <int> ] ; int main ( ) { long long int i , j , k ; long long int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( int i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; dp [ i ] = <int> ; } long long int sum = <int> ; for ( int i = n - <int> ; i > <int> ; i -- ) { if ( A [ i ] < A [ i + <int> ] ) dp [ i ] = dp [ i + <int> ] + <int> ; } for ( int i = <int> ; i <= n ; i ++ ) sum = sum + dp [ i ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 906}
{"input": "int main ( void ) { long long int i , T , a , b , temp , A , B , gcd ; long long int lcm ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; a = A , b = B ; while ( b != <int> ) { temp = a ; a = b ; b = temp % b ; } gcd = a ; lcm = A * B / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 907}
{"input": "int main ( ) { int t , n , i , cost = <int> , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; scanf ( <str> , & a [ <int> ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 908}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int prev = <int> , n , a [ <int> ] , ai , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) a [ i ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & ai ) ; if ( ai > prev ) a [ i ] ++ ; prev = ai ; } for ( ai = <int> , i = <int> ; i <= n ; i ++ ) ai += a [ i ] ; printf ( <str> , ai ) ; } return <int> ; }", "label": 1, "id": 909}
{"input": "void main ( ) { long int t , i , a , b , numerator , denominator , remainder , lcm , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } while ( denominator != <int> ) { remainder = denominator ; denominator = numerator % denominator ; numerator = remainder ; } printf ( <str> , numerator , ( ( a * b ) / numerator ) ) ; } }", "label": 0, "id": 910}
{"input": "int main ( ) { int T , N , I [ <int> ] [ <int> ] , ir , ic , max = <int> ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( ir = <int> ; ir < N ; ir ++ ) { for ( ic = <int> ; ic < ir + <int> ; ic ++ ) { scanf ( <str> , & I [ ir ] [ ic ] ) ; } } for ( ir = <int> ; ir < N ; ir ++ ) { for ( ic = <int> ; ic < ir + <int> ; ic ++ ) { if ( ic == <int> ) I [ ir ] [ <int> ] = I [ ir ] [ <int> ] + I [ ir - <int> ] [ <int> ] ; else if ( ic == ir ) I [ ir ] [ ir ] = I [ ir ] [ ir ] + I [ ir - <int> ] [ ir - <int> ] ; else { I [ ir ] [ ic ] = ( I [ ir - <int> ] [ ic ] > I [ ir - <int> ] [ ic - <int> ] ) ? I [ ir ] [ ic ] + I [ ir - <int> ] [ ic ] : I [ ir ] [ ic ] + I [ ir - <int> ] [ ic - <int> ] ; } } } for ( ic = <int> ; ic < N ; ic ++ ) { if ( I [ N - <int> ] [ ic ] > max ) max = I [ N - <int> ] [ ic ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 911}
{"input": "int main ( ) { int data [ <int> ] [ <int> ] , t , i , j , rows , columns , largest = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { largest = <int> ; scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( columns = <int> ; columns <= j ; columns ++ ) { scanf ( <str> , & ( data [ j ] [ columns ] ) ) ; if ( j != <int> ) { if ( columns == <int> ) { data [ j ] [ columns ] += data [ j - <int> ] [ columns ] ; } else if ( columns == j ) { data [ j ] [ columns ] += data [ j - <int> ] [ columns - <int> ] ; } else { if ( data [ j - <int> ] [ columns ] > data [ j - <int> ] [ columns - <int> ] ) { data [ j ] [ columns ] += data [ j - <int> ] [ columns ] ; } else { data [ j ] [ columns ] += data [ j - <int> ] [ columns - <int> ] ; } } } if ( data [ j ] [ columns ] > largest ) { largest = data [ j ] [ columns ] ; } } } printf ( <str> , largest ) ; } return <int> ; }", "label": 0, "id": 912}
{"input": "int main ( ) { int t ; unsigned int num [ <int> ] , min , n , temp , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & num [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( num [ i ] < num [ i + <int> ] ) { temp = num [ i ] ; num [ i ] = num [ i + <int> ] ; num [ i + <int> ] = temp ; min += temp ; } } printf ( <str> , min ) ; min = <int> ; } return <int> ; }", "label": 1, "id": 913}
{"input": "int main ( void ) { int t ; long a , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , c / a ) ; } return <int> ; }", "label": 0, "id": 914}
{"input": "int n ; int a [ <int> ] [ <int> ] ; long long int f ( int i , int j ) { long long int sum1 = <int> , sum2 = <int> ; sum1 = sum2 = a [ i ] [ j ] ; if ( i - <int> >= <int> ) { sum1 += f ( i - <int> , j ) ; if ( j + <int> <= n - i ) sum2 += f ( i - <int> , j + <int> ) ; if ( sum1 > sum2 ) return sum1 ; else return sum2 ; } return sum1 ; } int main ( ) { int i , j , k ; scanf ( <str> , & n ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( k = <int> , j = n - i ; j > <int> ; j -- , k ++ ) scanf ( <str> , & a [ i ] [ k ] ) ; } printf ( <str> , f ( n - <int> , <int> ) ) ; return <int> ; }", "label": 3, "id": 915}
{"input": "int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { int temp = a ; a = b ; b = temp ; } int g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 1, "id": 916}
{"input": "int rec ( int n ) { if ( n == <int> ) { return <int> ; } else return ( n + rec ( n - <int> ) ) ; } void sumoftriangle ( int a ) { int arr [ <int> ] ; int c ; int d [ <int> ] ; int k ; int i = <int> ; int p = <int> ; int q = <int> ; int r = <int> ; int x , y , z , f , b , v ; int n = a ; int l , j ; int e ; c = a + <int> ; e = rec ( c ) ; for ( k = <int> ; k < e ; k ++ ) { scanf ( <str> , & arr [ k ] ) ; } for ( i = <int> ; i < a ; i ++ ) { x = arr [ p ] ; y = arr [ q ] ; z = arr [ r ] ; b = x + y + z ; d [ i ] = b ; f = ( q - p ) + <int> ; p = q ; q = p + f ; r = q + <int> ; } for ( l = <int> ; l < n ; l ++ ) { for ( j = l + <int> ; j < n - <int> ; j ++ ) { if ( d [ l ] > d [ j ] ) { int temp = d [ l ] ; d [ l ] = d [ j ] ; d [ j ] = temp ; } } } printf ( <str> , d [ n - <int> ] ) ; } int main ( ) { int m , e , a , g ; scanf ( <str> , & m ) ; for ( g = <int> ; g < m ; g ++ ) { scanf ( <str> , & a ) ; e = a - <int> ; sumoftriangle ( e ) ; } return <int> ; }", "label": 3, "id": 917}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int cases ; scanf ( <str> , & cases ) ; while ( cases > <int> ) { int arr [ <int> ] [ <int> ] , n , i , j , sum = <int> , jmax = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } sum = arr [ n - <int> ] [ <int> ] ; jmax = <int> ; for ( j = <int> ; j < n ; ++ j ) { if ( sum < arr [ n - <int> ] [ j ] ) { sum = arr [ n - <int> ] [ j ] ; jmax = j ; } } for ( i = n - <int> ; i >= <int> ; -- i ) { if ( jmax > <int> && jmax != i + <int> ) { if ( arr [ i ] [ jmax ] > arr [ i ] [ jmax - <int> ] ) { sum += arr [ i ] [ jmax ] ; } else { sum += arr [ i ] [ jmax - <int> ] ; jmax -= <int> ; } } else if ( jmax == i + <int> ) { sum += arr [ i ] [ -- jmax ] ; } else if ( jmax == <int> ) { sum += arr [ i ] [ jmax ] ; } } printf ( <str> , sum ) ; cases -- ; } return <int> ; }", "label": 1, "id": 918}
{"input": "int sumtri ( int a [ <int> ] [ <int> ] , int n ) { int i = <int> , j = <int> , x , y , s1 = <int> , s2 = <int> ; if ( n == <int> ) return a [ <int> ] [ <int> ] ; s1 += a [ i ] [ j ] ; s2 += a [ i ] [ j + <int> ] ; x = j ; y = j + <int> ; for ( i = <int> ; i <= ( n - <int> ) ; i ++ ) { if ( a [ i ] [ x ] <= a [ i ] [ x + <int> ] ) { s1 += a [ i ] [ x + <int> ] ; x += <int> ; } else s1 += a [ i ] [ x ] ; if ( a [ i ] [ y ] <= a [ i ] [ y + <int> ] ) { s2 += a [ i ] [ y + <int> ] ; y += <int> ; } else s2 += a [ i ] [ y ] ; } if ( s1 > s2 ) return s1 + a [ <int> ] [ <int> ] ; else return s2 + a [ <int> ] [ <int> ] ; } main ( ) { int a [ <int> ] [ <int> ] , t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , sumtri ( a , n ) ) ; } }", "label": 1, "id": 919}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { long a , b ; scanf ( <str> , & a , & b ) ; long g , p , hcf , lcm ; p = a * b ; if ( a > b ) { g = b ; } else { g = a ; } for ( long j = g ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { hcf = j ; break ; } } lcm = p / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 920}
{"input": "int main ( ) { int t , n , k [ <int> ] [ <int> ] ; int c , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & k [ i ] [ j ] ) ; } for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { c = MAX ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 921}
{"input": "int main ( ) { long long int t , i , j , k , n [ <int> ] [ <int> ] , flag ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n [ i ] [ <int> ] ) ; for ( j = <int> ; j <= n [ i ] [ <int> ] ; j ++ ) scanf ( <str> , & n [ i ] [ j ] ) ; } for ( i = <int> ; i < t ; i ++ ) { j = <int> ; k = j + <int> ; while ( j <= n [ i ] [ <int> ] ) { if ( n [ i ] [ j ] < n [ i ] [ k ] ) flag ++ ; j ++ ; k ++ ; } flag = flag + n [ i ] [ <int> ] ; printf ( <str> , flag ) ; } return <int> ; }", "label": 1, "id": 922}
{"input": "int main ( ) { int i , j , k , n , tc [ <int> ] , tri [ <int> ] [ <int> ] , max ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & tc [ i ] ) ; for ( j = <int> ; j < tc [ i ] ; j ++ ) { tri [ j ] [ <int> ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & tri [ j ] [ k + <int> ] ) ; tri [ j ] [ <int> ] += tri [ j ] [ k + <int> ] ; } } max = tri [ <int> ] [ <int> ] ; for ( j = <int> ; j < tc [ i ] ; j ++ ) if ( max < tri [ j ] [ <int> ] ) max = tri [ j ] [ <int> ] ; tc [ i ] = max ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , tc [ i ] ) ; return <int> ; }", "label": 1, "id": 923}
{"input": "int main ( ) { int i , min , a [ <int> ] , t ; long int size ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < size ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( size - <int> ) ) ; } return <int> ; }", "label": 3, "id": 924}
{"input": "int main ( ) { int t , n , i ; long long int a [ <int> ] ; long long int large , small , count = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } large = a [ <int> ] ; small = a [ <int> ] ; if ( n == <int> ) { if ( small > large ) small = large ; printf ( <str> , small ) ; } else { for ( i = <int> ; i < n ; i ++ ) { if ( small > large ) { small = large ; } count = count + small ; large = a [ i + <int> ] ; } printf ( <str> , count ) ; } } }", "label": 1, "id": 925}
{"input": "int scan ( ) { int n = <int> ; int ch = getchar_unlocked ( ) ; while ( ch >= <char> && ch <= <char> ) { n = ( n * <int> ) + ch - <char> ; ch = getchar_unlocked ( ) ; } return n ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 926}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; int x , y , a , b ; int lcm ; int gcd ; for ( int l = <int> ; l < t ; l ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; x = a ; y = b ; while ( y != <int> ) { int temp = y ; y = x % y ; x = temp ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 927}
{"input": "int main ( ) { int t , n , a [ <int> ] , sum = <int> , i , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; m = ( n * ( n + <int> ) ) / <int> ; for ( i = <int> ; i < m ; i ++ ) { scanf ( <str> , & a [ i ] ) ; sum += a [ i ] ; } printf ( <str> , sum / <int> ) ; sum = <int> ; } return <int> ; }", "label": 3, "id": 928}
{"input": "int main ( ) { int T , c , d ; long long int a , b ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; c = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , c / a ) ; printf ( <str> , a ) ; } return <int> ; }", "label": 1, "id": 929}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 930}
{"input": "int m ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j , x ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; x = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i - <int> >= <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; if ( i - <int> >= <int> && j - <int> >= <int> ) a [ i ] [ j ] = m ( a [ i ] [ j ] , a [ i ] [ j ] - a [ i - <int> ] [ j ] + a [ i - <int> ] [ j - <int> ] ) ; if ( i == n - <int> ) x = m ( x , a [ i ] [ j ] ) ; } printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 931}
{"input": "int main ( void ) { long long t ; scanf ( <str> , & t ) ; while ( t -- != <int> ) { long long n , arr [ <int> ] , i , min , a = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } a = ( n - <int> ) * min ; printf ( <str> , a ) ; } return <int> ; }", "label": 0, "id": 932}
{"input": "long long gcd ( long long a , long long b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } } long long int lcm ( long long int a , long long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( void ) { long long t , q , p ; double r ; scanf ( <str> , & t ) ; while ( t -- ) { fflush ( stdin ) ; scanf ( <str> , & p , & q ) ; printf ( <str> , gcd ( p , q ) , lcm ( p , q ) ) ; } return <int> ; }", "label": 0, "id": 933}
{"input": "int main ( ) { long long int N , min , P , i ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; scanf ( <str> , & P ) ; min = P ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & P ) ; if ( P < min ) min = P ; } printf ( <str> , ( N - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 934}
{"input": "int main ( ) { int t ; int a [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { int i , n ; scanf ( <str> , & n ) ; int min = INT_MAX ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } long long ans = ( n - <int> ) * min ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 935}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] += arr [ i ] [ j + <int> ] ; else arr [ i - <int> ] [ j ] += arr [ i ] [ j ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 936}
{"input": "int k = <int> ; void trian ( int a [ ] [ <int> ] , int n , int k ) { int i , j , max ; if ( k > n ) return ; { for ( i = <int> ; i < k ; i ++ ) { if ( ! i ) a [ k ] [ i ] += a [ k - <int> ] [ i ] ; else if ( i == k - <int> ) a [ k ] [ i ] += a [ k - <int> ] [ i - <int> ] ; else { max = ( a [ k - <int> ] [ i ] > a [ k - <int> ] [ i - <int> ] ) ? a [ k - <int> ] [ i ] : a [ k - <int> ] [ i - <int> ] ; a [ k ] [ i ] += max ; } } return trian ( a , n , k + <int> ) ; } } int main ( ) { int T , a [ <int> ] [ <int> ] , n , max , i , j ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; trian ( a , n , <int> ) ; max = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; printf ( <str> , max + a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 937}
{"input": "int * * a ; int max ( int a , int b ) { if ( a > b ) return ( a ) ; return ( b ) ; } int check ( int i , int j , int size ) { int sum ; if ( i == ( size - <int> ) ) { return ( a [ i ] [ j ] ) ; } else { sum = max ( ( a [ i ] [ j ] + check ( i + <int> , j , size ) ) , ( a [ i ] [ j ] + check ( i + <int> , j + <int> , size ) ) ) ; } return ( sum ) ; } int main ( ) { int testcases , size , i , j , sum ; scanf ( <str> , & testcases ) ; while ( testcases != <int> ) { scanf ( <str> , & size ) ; a = ( int * * ) malloc ( size * ( sizeof ( int * ) ) ) ; for ( i = <int> ; i < size ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + <int> ) * ( sizeof ( int * ) ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = check ( <int> , <int> , size ) ; printf ( <str> , sum ) ; free ( a ) ; testcases -- ; } return ( <int> ) ; }", "label": 2, "id": 938}
{"input": "int lines , inp [ <int> ] [ <int> ] ; int func ( int i , int j ) { if ( i == lines ) return inp [ i ] [ j ] ; else { int left_sum , right_sum ; left_sum = func ( i + <int> , j ) ; right_sum = func ( i + <int> , j + <int> ) ; if ( left_sum > right_sum ) return left_sum + inp [ i ] [ j ] ; else return right_sum + inp [ i ] [ j ] ; } } int main ( ) { int i , iter , test_cases , j ; scanf ( <str> , & test_cases ) ; int ans [ test_cases ] ; for ( iter = <int> ; iter < test_cases ; iter ++ ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i <= lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & inp [ i ] [ j ] ) ; } } ans [ iter ] = func ( <int> , <int> ) ; } for ( i = <int> ; i < test_cases ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 2, "id": 939}
{"input": "main ( ) { int t , a [ <int> ] , s , n , i , small ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; if ( n >= <int> ) { for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } small = a [ <int> ] ; s = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( small > a [ i ] ) { small = a [ i ] ; } s = s + small ; } printf ( <str> , s ) ; } } return <int> ; }", "label": 1, "id": 940}
{"input": "int main ( ) { int a , b , t , mul , temp , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; mul = a * b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = mul / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 941}
{"input": "int * tri = <int> ; int rows ; int size [ ] = { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; void create ( ) { scanf ( <str> , & rows ) ; free ( tri ) ; tri = malloc ( size [ rows + <int> ] ) ; int i , j ; for ( i = <int> ; i < size [ rows + <int> ] ; i ++ ) { scanf ( <str> , tri + i ) ; } } void max ( ) { int i , j ; for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = size [ i ] ; j < size [ i + <int> ] ; j ++ ) { tri [ j ] += MAX ( tri [ size [ i ] - size [ i - <int> ] + j + <int> ] , tri [ size [ i ] - size [ i - <int> ] + j + <int> ] ) ; } } } void pr ( ) { int i , j ; for ( i = <int> ; i <= rows ; i ++ ) { for ( j = size [ i ] ; j < size [ i + <int> ] ; j ++ ) { printf ( <str> , tri [ j ] ) ; } printf ( <str> ) ; } } main ( ) { int n ; scanf ( <str> , & n ) ; for ( ; n >= <int> ; n -- ) { create ( ) ; max ( ) ; printf ( <str> , tri [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 942}
{"input": "int main ( ) { int T , a , b , m , i ; int gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; m = ( a > b ? b : a ) ; gcd = <int> ; for ( i = m ; i > <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { gcd = i ; break ; } } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 943}
{"input": "int main ( ) { int t , i , j , n , max , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } for ( j = i + <int> ; j <= n ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = n ; i >= <int> ; i -- ) { for ( j = <int> ; j <= <int> ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) max = a [ i ] [ j + <int> ] ; else max = a [ i ] [ j ] ; } a [ i - <int> ] [ j ] += max ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 944}
{"input": "int main ( ) { int t , m , x , i , n , j , k , l , a [ <int> ] , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( k = <int> ; k < n - <int> ; k ++ ) { if ( a [ k ] < a [ k + <int> ] ) { temp = a [ k + <int> ] ; a [ k + <int> ] = a [ k ] ; a [ k ] = temp ; } } printf ( <str> , a [ n - <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 945}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , t , x , i , j ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & x ) ; for ( i = <int> ; i < x ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = x - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 946}
{"input": "int main ( ) { int i , j , k , t , s , n ; long long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { s = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) if ( a [ i ] <= a [ i + <int> ] ) { j = i ; while ( a [ i ] < a [ i + <int> ] ) i ++ ; for ( k = <int> ; i - k - j != <int> ; k ++ ) s = s + ( i - j - k ) ; } printf ( <str> , s + n ) ; } return <int> ; }", "label": 3, "id": 947}
{"input": "int a [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int n , x , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & x ) ; for ( i = <int> ; i < x ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = x - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; } return <int> ; }", "label": 3, "id": 948}
{"input": "int main ( ) { int k , i , j , n , m , sum = <int> , t [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & t [ i ] [ j ] ) ; } } for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( ( i + <int> ) == ( m - <int> ) ) { sum += t [ i + <int> ] [ j ] ; } else if ( t [ i + <int> ] [ j ] > t [ i + <int> ] [ j + <int> ] ) { sum += t [ i + <int> ] [ j ] ; } else sum += t [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 949}
{"input": "int main ( ) { int t , f = <int> , i ; int findgcd ( long int x , long int y ) ; long int a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = findgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int findgcd ( long int x , long int y ) { while ( x != y ) { if ( x > y ) return findgcd ( x - y , y ) ; else return findgcd ( x , y - x ) ; } return x ; }", "label": 0, "id": 950}
{"input": "int gcd_lcm ( long int a , long int b ) { long int t1 , t2 , t3 ; t1 = a ; t2 = b ; do { t3 = t1 % t2 ; t1 = t2 ; t2 = t3 ; } while ( t2 != <int> ) ; printf ( <str> , t1 , ( a * b ) / t1 ) ; } int main ( ) { int t , i ; long int a , b , t1 , t2 , t3 ; scanf ( <str> , & t ) ; if ( <int> <= t <= <int> ) { for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( <int> <= a <= <int> && <int> <= b <= <int> ) { gcd_lcm ( a , b ) ; } } } return <int> ; }", "label": 1, "id": 951}
{"input": "int main ( ) { int t ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , temp ; long int sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) swap ( a [ i ] , a [ i + <int> ] , temp ) ; sum = sum + a [ i + <int> ] ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 952}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] , i , j , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = n - <int> ; j >= <int> ; j -- ) { if ( ( a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ) > a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ) a [ i - <int> ] [ j - <int> ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i - <int> ] [ j - <int> ] = a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 953}
{"input": "int main ( ) { int t , s = <int> ; long int n ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; int a [ n + <int> ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; a [ n ] = <int> ; for ( int i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { a [ i + <int> ] = <int> ; s += a [ i ] ; } else { a [ i ] = <int> ; s += a [ i + <int> ] ; } } printf ( <str> , s ) ; s = <int> ; } return <int> ; }", "label": 1, "id": 954}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int count = <int> , pi = <int> ; for ( i = <int> ; i < n ; ) { for ( j = i ; j < n - <int> ; j ++ ) if ( a [ j ] <= a [ j + <int> ] ) count ++ ; if ( i < j ) i = j ; else i ++ ; } printf ( <str> , count + n ) ; } }", "label": 1, "id": 955}
{"input": "int main ( ) { int r = <int> , t = <int> , i , a [ <int> ] , j = <int> , z = <int> , r1 , c ; scanf ( <str> , & c ) ; while ( c -- ) { r = <int> , t = <int> , j = <int> , z = <int> ; scanf ( <str> , & r ) ; r1 = r ; for ( ; r > <int> ; r -- ) t = t + r ; r = r1 ; printf ( <str> , t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < <int> || a [ i ] > <int> ) i -- ; } int k = a [ <int> ] , w = <int> ; r1 = <int> ; while ( r1 < r ) { if ( a [ w + r1 ] >= a [ w + r1 + <int> ] ) { k = k + a [ w + r1 ] ; w = w + r1 ; } else { k = k + a [ w + r1 + <int> ] ; w = w + r1 + <int> ; } r1 ++ ; } printf ( <str> , k ) ; } return <int> ; }", "label": 3, "id": 956}
{"input": "int main ( ) { int t , max , min , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & max ) ; int a [ max ] ; for ( i = <int> ; i < max ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < max ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } int sum = min * ( max - <int> ) ; printf ( <str> , sum ) ; t -- ; } return <int> ; }", "label": 0, "id": 957}
{"input": "int main ( ) { int t , n , i , j , k , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ i ] ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = j ; k < n ; k ++ ) { if ( a [ j ] > a [ k ] ) { temp = a [ j ] ; a [ j ] = a [ k ] ; a [ k ] = temp ; } } int count = <int> , m = n ; for ( j = <int> ; j < n ; j ++ ) { for ( k = j ; k < m ; k ++ ) { if ( a [ j ] <= a [ k + <int> ] ) count ++ ; } m -- ; } printf ( <str> , count ) ; } return <int> ; }", "label": 2, "id": 958}
{"input": "int main ( ) { int T , N , <unk> , count , i , j ; long int A [ <int> ] ; scanf ( <str> , & T ) ; for ( j = <int> ; j <= T ; j ++ ) { scanf ( <str> , & N ) ; count = <int> ; for ( i = <int> ; i < N - <int> ; i ++ ) if ( A [ i + <int> ] >= A [ i ] ) count ++ ; printf ( <str> , count + N ) ; } return <int> ; }", "label": 3, "id": 959}
{"input": "int main ( ) { short int n , cse , a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; scanf ( <str> , & cse ) ; short int i , j ; do { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; ++ i ) { b [ i ] [ <int> ] = a [ i ] [ <int> ] ; b [ i ] [ i ] = a [ i ] [ i ] + b [ i - <int> ] [ i - <int> ] ; } for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j < i ; ++ j ) b [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; j = b [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; ++ i ) j = max ( j , a [ n - <int> ] [ i ] ) ; printf ( <str> , j ) ; cse -- ; } while ( cse ) ; return <int> ; }", "label": 2, "id": 960}
{"input": "int main ( ) { int t ; int i ; int j ; int n ; int k ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( j = n - <int> ; j >= <int> ; j -- ) for ( k = <int> ; k <= j ; k ++ ) a [ j ] [ k ] = a [ j + <int> ] [ k ] >= a [ j + <int> ] [ k + <int> ] ? ( a [ j + <int> ] [ k ] + a [ j ] [ k ] ) : ( a [ j + <int> ] [ k + <int> ] + a [ j ] [ k ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 961}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int n , i , j ; long long int ko = <int> ; int a ; while ( t -- ) { int min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } ko = <int> ; ko = min * ( n - <int> ) ; printf ( <str> , ko ) ; } return <int> ; }", "label": 0, "id": 962}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] ; long long min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] <= min ) { min = arr [ i ] ; } } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 963}
{"input": "int main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , s = <int> , k ; scanf ( <str> , & n ) ; long int a [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( s > a [ i ] ) s = a [ i ] ; } printf ( <str> , s * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 964}
{"input": "unsigned long long int getGCD ( unsigned long long int A , unsigned long long int B ) ; int main ( ) { int T ; unsigned long long int A , B , n ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; n = getGCD ( A , B ) ; printf ( <str> , n , ( A * B ) / n ) ; } return <int> ; } unsigned long long int getGCD ( unsigned long long int A , unsigned long long int B ) { unsigned long int max , min , t , s ; if ( A > B ) { max = A ; min = B ; } else { max = B ; min = A ; } if ( max % min == <int> ) { return min ; } else { while ( <int> ) { t = max % min ; if ( t == <int> ) break ; s = min ; min = t ; max = s ; } return min ; } }", "label": 0, "id": 965}
{"input": "int main ( ) { long long int t , n , i , j , sum = <int> , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; sum = a [ <int> ] [ <int> ] ; j = <int> ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) a [ i - <int> ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 966}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , k = <int> , m = <int> , d = <int> , f , b = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( j = m ; j < n ; j ++ ) { if ( j == n - <int> && a [ n - <int> ] - a [ n - <int> ] >= <int> ) { d = d + <int> ; break ; } else if ( j == n - <int> ) break ; else if ( a [ j + <int> ] - a [ j ] >= <int> ) k ++ ; else if ( a [ j + <int> ] - a [ j ] < <int> && k == b ) m = m + <int> ; else if ( a [ j + <int> ] - a [ j ] < <int> && k != b ) { f = k - b ; d = d + ( f * ( f + <int> ) ) / <int> ; m = m + j ; b = k ; } } printf ( <str> , d + n ) ; } return <int> ; }", "label": 1, "id": 967}
{"input": "long int gcd1 ( long int a , long int b ) { if ( b == <int> ) { return a ; } else { return gcd1 ( b , a % b ) ; } } int main ( ) { long int a = <int> , b = <int> , c , lcm , t = <int> , i = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = gcd1 ( a , b ) ; } else { c = gcd1 ( b , a ) ; } lcm = a * b / c ; printf ( <str> , c , lcm ) ; } return <int> ; }", "label": 0, "id": 968}
{"input": "int main ( ) { int lcm = <int> , gcd = <int> , a , b , pro = <int> , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; pro = a * b ; while ( b ) { if ( a > b ) a = a - b ; else if ( b > a ) b = b - a ; } lcm = pro / b ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 969}
{"input": "int main ( ) { int n , arr_size , i , j , max ; scanf ( <str> , & n ) ; while ( n -- > <int> ) { scanf ( <str> , & arr_size ) ; int arr [ arr_size ] [ arr_size ] ; for ( i = <int> ; i < arr_size ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = arr_size - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { max = ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; arr [ i ] [ j ] = max + arr [ i ] [ j ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 970}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; long long min = INT_MAX ; scanf ( <str> , & n ) ; long long a ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 971}
{"input": "int main ( ) { int t , i ; long int n , min = <int> , arr [ n ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > arr [ i ] ) { min = arr [ i ] ; } } printf ( <str> , min ) ; } return <int> ; }", "label": 3, "id": 972}
{"input": "int main ( ) { int cas , sum , row , l , m , i , j , k ; scanf ( <str> , & cas ) ; for ( k = <int> ; k <= cas ; k ++ ) { scanf ( <str> , & row ) ; int a [ row ] [ row ] ; for ( i = <int> ; i <= row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } m = <int> ; sum = a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= row ; i ++ ) { if ( a [ i ] [ m ] > a [ i ] [ m + <int> ] ) sum += a [ i ] [ m ] ; else { sum += a [ i ] [ m + <int> ] ; m ++ ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 973}
{"input": "void main ( ) { int t , a , b , gcd , lcm ; scanf ( <str> , & t , & a , & b ) ; while ( t -- ) { gcd = a % b ; while ( gcd > <int> ) { a = b ; b = gcd ; gcd = a % b ; } printf ( <str> , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , lcm ) ; } }", "label": 3, "id": 974}
{"input": "int main ( void ) { int a , b ; scanf ( <str> , & a , & b ) ; if ( ( ( a - b ) != <int> ) ) printf ( <str> , a - b + <int> ) ; else printf ( <str> , a - b - <int> ) ; return <int> ; }", "label": 1, "id": 975}
{"input": "int main ( ) { static int i , j , num , T , k , arr [ <int> ] [ <int> ] , out [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; ++ i ) { int sum = <int> , temp = <int> , largest = <int> ; scanf ( <str> , & num ) ; for ( j = <int> ; j < num ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; if ( arr [ j ] [ k ] >= <int> || arr [ j ] [ k ] < <int> ) scanf ( <str> , & arr [ j ] [ k ] ) ; } for ( j = <int> ; j < num ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( k == temp || k == ( temp + <int> ) ) if ( arr [ j ] [ k ] > largest ) { largest = arr [ j ] [ k ] ; temp = k ; } } sum = sum + largest ; } out [ i ] = sum ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , out [ i ] ) ; return <int> ; }", "label": 1, "id": 976}
{"input": "int n , t , i , j , a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] , max = <int> ; int main ( ) { scanf ( <str> , & n ) ; while ( n -- ) { max = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) s [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == <int> ) s [ i ] [ j ] = s [ i - <int> ] [ <int> ] + a [ i ] [ j ] ; else if ( i == j ) s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else if ( ( s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ) > ( s [ i - <int> ] [ j ] + a [ i ] [ j ] ) ) s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; } for ( i = <int> ; i < t ; i ++ ) { if ( s [ t - <int> ] [ i ] > max ) max = s [ t - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 977}
{"input": "int main ( ) { long long int t , test_cases , i , n , val ; scanf ( <str> , & test_cases ) ; for ( t = <int> ; t < test_cases ; t ++ ) { scanf ( <str> , & n ) ; long long int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & val ) ; if ( val < min ) min = val ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 978}
{"input": "int gcd ( int a , int b ) { int t ; while ( b ) { t = a % b ; a = b ; b = t ; } return a ; } int main ( ) { int t , x , y , hcf ; long long int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) ; lcm /= hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 979}
{"input": "int gcd ( int x , int y ) { if ( y == <int> ) { return x ; } else { return gcd ( y , x % y ) ; } } int main ( ) { int t , a , b , hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 980}
{"input": "int arr [ <int> ] ; int a2 [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int sums ( int sum , int i , int rows ) { int k , row , ch1 , ch2 ; for ( k = <int> ; k <= rows ; k ++ ) { int temp = k * ( k + <int> ) / <int> ; if ( i == <int> ) { row = <int> ; break ; } if ( i < temp ) { row = k ; break ; } if ( i == temp ) { row = k + <int> ; break ; } } ch1 = i + row ; ch2 = i + row + <int> ; if ( arr [ ch1 ] != - <int> ) { if ( a2 [ i ] == - <int> ) { a2 [ i ] = max ( sums ( sum + arr [ ch1 ] , ch1 , rows ) , sums ( sum + arr [ ch2 ] , ch2 , rows ) ) ; } return a2 [ i ] ; } else return sum ; } int main ( ) { int num_cases , i ; scanf ( <str> , & num_cases ) ; for ( i = <int> ; i < num_cases ; i ++ ) { int iter , j , elements , l ; scanf ( <str> , & iter ) ; for ( j = <int> ; j < <int> ; j ++ ) { arr [ j ] = - <int> ; a2 [ j ] = - <int> ; } elements = iter * ( iter + <int> ) / <int> ; for ( j = <int> ; j < elements ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } j = sums ( arr [ <int> ] , <int> , iter ) ; printf ( <str> , j ) ; } }", "label": 2, "id": 981}
{"input": "int main ( ) { int t ; long int n , i , j , k = <int> ; long long int a [ <int> ] , count = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; count = <int> ; k = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; ) { k ++ ; count ++ ; for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) count ++ ; else { break ; } i ++ ; } i = k ; } printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 982}
{"input": "int main ( void ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; l = a > b ? a : b ; g = a + b - l ; while ( a % g != <int> || b % g != <int> ) g -- ; while ( l % a != <int> || l % b != <int> ) l ++ ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 983}
{"input": "long long int GCD ( long long int a , long long int b ) { if ( b == <int> ) { return a ; } else { GCD ( b , a % b ) ; } } int main ( ) { long long int a , c , d , l ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & c , & d ) ; l = GCD ( c , d ) ; printf ( <str> , l , ( c * d ) / ( GCD ( c , d ) ) ) ; } return <int> ; }", "label": 0, "id": 984}
{"input": "int main ( ) { int a , x , y , b , n , t , gcd , lcm ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; printf ( <str> , gcd ) ; printf ( <str> , ( x * y ) / gcd ) ; } return <int> ; }", "label": 1, "id": 985}
{"input": "int main ( ) { int t , n , i ; long long int min , ele ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> , min = INF ; i < n ; i ++ ) { scanf ( <str> , & ele ) ; if ( ele < min ) min = ele ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 986}
{"input": "int main ( ) { int t , i , j , k , n , sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( j = <int> ; j <= n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } k = <int> ; for ( j = <int> ; j <= n ; j ++ ) { if ( a [ j ] [ k ] < a [ j ] [ k + <int> ] ) a [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] + a [ j ] [ k + <int> ] ; else a [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] + a [ j ] [ k ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 987}
{"input": "int n = <int> ; int * * a = NULL ; unsigned long int max ( int i , int j , unsigned long int count ) { unsigned long int count1 = <int> , count2 = <int> ; if ( i == n ) { return count ; } else { count1 = max ( i + <int> , j , count + a [ i ] [ j ] ) ; count2 = max ( i + <int> , j + <int> , count + a [ i ] [ j ] ) ; if ( count1 > count2 ) return count1 ; else return count2 ; } } int main ( ) { int i = <int> , j = <int> , t = <int> ; scanf ( <str> , & t ) ; while ( t -- != <int> ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; while ( i < n ) { a [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; i ++ ; } i = <int> ; while ( i < n ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; j ++ ; } i ++ ; } printf ( <str> , max ( <int> , <int> , <int> ) ) ; free ( a ) ; } return <int> ; }", "label": 2, "id": 988}
{"input": "int computetriangle ( int nRows ) { int i , j , k ; int arr2 [ <int> ] [ <int> ] ; int sum1 , sum2 ; for ( i = <int> ; i <= nRows - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & k ) ; arr2 [ i ] [ j ] = k ; } } for ( i = nRows - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { sum2 = arr2 [ i ] [ j ] + arr2 [ i - <int> ] [ j - <int> ] ; sum1 = arr2 [ i ] [ j - <int> ] + arr2 [ i - <int> ] [ j - <int> ] ; if ( sum2 > sum1 ) { arr2 [ i - <int> ] [ j - <int> ] = sum2 ; } if ( sum1 >= sum2 ) { arr2 [ i - <int> ] [ j - <int> ] = sum1 ; } } } if ( sum2 > sum1 ) { printf ( <str> , sum2 ) ; } else { printf ( <str> , sum1 ) ; } } int main ( void ) { int nTestCases , i , nRows ; scanf ( <str> , & nTestCases ) ; for ( i = <int> ; i < nTestCases ; i ++ ) { scanf ( <str> , & nRows ) ; computetriangle ( nRows ) ; } return <int> ; }", "label": 0, "id": 989}
{"input": "int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } return a ; } int main ( ) { int T , M , N ; long long ans ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & M , & N ) ; ans = gcd ( M , N ) ; printf ( <str> , ans , M * N / ans ) ; } return <int> ; }", "label": 1, "id": 990}
{"input": "int max ( int a , int b ) ; int main ( void ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int x , j , k ; scanf ( <str> , & x ) ; int angka [ x ] [ x + <int> ] ; for ( j = <int> ; j < x ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & angka [ j ] [ k ] ) ; } } for ( j = x - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { angka [ j - <int> ] [ k ] += max ( angka [ j ] [ k ] , angka [ j ] [ k + <int> ] ) ; } } printf ( <str> , angka [ <int> ] [ <int> ] ) ; } } int max ( int a , int b ) { if ( b > a ) return b ; return a ; }", "label": 0, "id": 991}
{"input": "int max ( int a , int b ) { return ( a > b ? a : b ) ; } int calculate ( int arr [ ] [ MAX ] , int n ) { int sum_arr [ MAX ] [ MAX ] ; int i , j ; for ( j = <int> ; j <= n ; j ++ ) sum_arr [ n ] [ j ] = arr [ n ] [ j ] ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) sum_arr [ i ] [ j ] = arr [ i ] [ j ] + max ( sum_arr [ i + <int> ] [ j ] , sum_arr [ i + <int> ] [ j + <int> ] ) ; } return sum_arr [ <int> ] [ <int> ] ; } int main ( ) { int arr [ MAX ] [ MAX ] , n ; int test ; scanf ( <str> , & test ) ; int i , k , j ; for ( k = <int> ; k <= test ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; printf ( <str> , calculate ( arr , n ) ) ; } return <int> ; }", "label": 0, "id": 992}
{"input": "int input [ <int> ] [ <int> ] ; int ans [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } void triangle ( int N ) { int ans [ <int> ] [ <int> ] ; ans [ <int> ] [ <int> ] = input [ <int> ] [ <int> ] ; for ( int i = <int> ; i < N ; i ++ ) { ans [ i ] [ <int> ] = input [ i ] [ <int> ] ; ans [ i ] [ <int> ] += ans [ i - <int> ] [ <int> ] ; ans [ i ] [ i ] = input [ i ] [ i ] ; ans [ i ] [ i ] += ans [ i - <int> ] [ i - <int> ] ; } for ( int k = <int> ; k < N ; k ++ ) { for ( int j = <int> ; j < k ; j ++ ) { ans [ k ] [ j ] = input [ k ] [ j ] ; ans [ k ] [ j ] += max ( ans [ k - <int> ] [ j ] , ans [ k - <int> ] [ j - <int> ] ) ; } } int temp = <int> ; for ( int i = <int> ; i < N ; i ++ ) { if ( ans [ N - <int> ] [ i ] >= temp ) temp = ans [ N - <int> ] [ i ] ; } printf ( <str> , temp ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int N ; scanf ( <str> , & N ) ; for ( int i = <int> ; i < N ; i ++ ) for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & input [ i ] [ j ] ) ; triangle ( N ) ; } return <int> ; }", "label": 0, "id": 993}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int a , b , i = <int> ; int gcd , lcm ; scanf ( <str> , & a , & b ) ; if ( a < b ) { for ( i = a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; break ; } } } else { for ( i = b ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } } lcm = ( ( a * b ) / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 994}
{"input": "int main ( ) { int gcd , lcm , t , n , a [ <int> ] , b [ <int> ] , d , i , r ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { if ( a [ i ] > b [ i ] ) { n = a [ i ] ; d = b [ i ] ; } else { n = b [ i ] ; d = a [ i ] ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = ( a [ i ] * b [ i ] ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 995}
{"input": "void sort ( int * , int ) ; int main ( ) { int ip [ <int> ] , op [ <int> ] , t , s , i , j , p = <int> , v ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int k = <int> ; scanf ( <str> , & s ) ; while ( k != s ) { scanf ( <str> , & ip [ k ] ) ; k ++ ; } sort ( & ip [ <int> ] , s ) ; op [ p ] = ip [ s - <int> ] ; p ++ ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , op [ i ] ) ; return <int> ; } void sort ( int * ar , int n ) { int i , j , temp ; for ( i = <int> ; i < n ; i ++ ) { j = i ; while ( j > <int> && ar [ j ] < ar [ j - <int> ] ) { temp = ar [ j ] ; ar [ j ] = ar [ j - <int> ] ; ar [ j - <int> ] = temp ; j -- ; } } }", "label": 3, "id": 996}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , max , rows , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) max = a [ i + <int> ] [ j ] ; else max = a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] += max ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 997}
{"input": "void main ( ) { int a [ <int> ] [ <int> ] , n , t , i , j , k ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 998}
{"input": "int hcf ( int a , int b ) { int i = <int> , p = <int> ; if ( a >= b ) { for ( ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) p *= i ; } return p ; } else { for ( ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) p *= i ; } return p ; } } int lcm ( int a , int b ) { int l = <int> , i = <int> ; while ( a != <int> || b != <int> ) { while ( a % i == <int> && b % i == <int> ) { a /= i ; b /= i ; l *= i ; } while ( a % i == <int> ) { a /= i ; l *= i ; } while ( b % i == <int> ) { b /= i ; l *= i ; } i ++ ; } return l ; } int main ( ) { int t , a , b ; scanf ( <str> , & t , & a , & b ) ; int l = lcm ( a , b ) ; int h = hcf ( a , b ) ; printf ( <str> , h , l ) ; return <int> ; }", "label": 1, "id": 999}
{"input": "int gcd ( int a , int b ) { if ( a % b ) gcd ( b , a % b ) ; else return b ; } int main ( ) { int t ; int g , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 1000}
{"input": "int main ( ) { int t , pos , level , i , ele , j ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & level ) ; ele = ( level * ( level + <int> ) ) / <int> ; int n [ ele ] ; for ( i = <int> ; i < ele ; i ++ ) { scanf ( <str> , & n [ i ] ) ; } j = <int> ; pos = <int> ; ele = n [ <int> ] ; for ( i = <int> ; i < level ; i ++ ) { if ( n [ pos + i ] > n [ pos + i + <int> ] ) { ele = ele + n [ pos + i ] ; pos = pos + i ; } else { ele = ele + n [ pos + i + <int> ] ; pos = pos + i + <int> ; } } printf ( <str> , ele ) ; t -- ; } return <int> ; }", "label": 1, "id": 1001}
{"input": "int main ( void ) { int n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( int i = n - <int> ; i > <int> ; i -- ) for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1002}
{"input": "int main ( void ) { short int arr [ <int> ] [ <int> ] ; short int testcases ; scanf ( <str> , & testcases ) ; while ( testcases ) { short int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] += arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; testcases -- ; } return <int> ; }", "label": 0, "id": 1003}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , c , gcd , i ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } c = ( a * b ) / gcd ; printf ( <str> , gcd , c ) ; } }", "label": 2, "id": 1004}
{"input": "int main ( void ) { int t ; long long int i , n , ans ; scanf ( <str> , & t ) ; while ( t -- ) { ans = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 1005}
{"input": "int main ( ) { int t ; long int n , i , temp , * p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , p ) ; p ++ ; } p = p - n ; temp = * p ; for ( i = <int> ; i < n ; i ++ ) { if ( * ( p + i ) < temp ) temp = * ( p + i ) ; } printf ( <str> , temp * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 1006}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { int n ; scanf ( <str> , & n ) ; long long int arr [ n ] , c = n ; int i , j = <int> , k = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; if ( n == <int> ) printf ( <str> , n ) ; else { while ( j != n - <int> ) { if ( arr [ j ] <= arr [ j + <int> ] ) k ++ ; else { while ( k != <int> ) { c = c + k ; k -- ; } } j ++ ; } if ( k != <int> ) { while ( k != <int> ) { c = c + k ; k -- ; } } printf ( <str> , c ) ; } t -- ; } return <int> ; }", "label": 0, "id": 1007}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; int s = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { a [ i + <int> ] = a [ i ] ; a [ i ] = - <int> ; } if ( a [ i ] != a [ i - <int> ] ) s = s + a [ i + <int> ] ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 1008}
{"input": "int getint ( ) { char n = <int> , c ; do { c = getchar_unlocked ( ) ; } while ( ( c < <char> || c > <char> ) && c != EOF ) ; if ( c == EOF ) { return <int> ; } do { n = ( n << <int> ) + ( n << <int> ) + c - <char> ; } while ( ( c = getchar_unlocked ( ) ) >= <char> && c <= <char> ) ; return n ; } void GetSum ( int arr [ ] [ <int> ] , int r , int c , int tr , int sum , int * maxsum ) { if ( r > tr - <int> || c > r ) return ; sum += arr [ r ] [ c ] ; if ( sum > * maxsum ) * maxsum = sum ; GetSum ( arr , r + <int> , c , tr , sum , maxsum ) ; GetSum ( arr , r + <int> , c + <int> , tr , sum , maxsum ) ; } int main ( void ) { int sum , t , n , i , j , arr [ <int> ] [ <int> ] ; t = getint ( ) ; while ( t -- ) { n = getint ( ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] = getint ( ) ; } } sum = <int> ; GetSum ( arr , <int> , <int> , n , <int> , & sum ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 1009}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 1010}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { int n , num , next ; scanf ( <str> , & n ) ; scanf ( <str> , & num ) ; long long int s = n , r = <int> , p ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & next ) ; if ( next >= num ) { r ++ ; } else { p = ( r * ( r - <int> ) ) >> <int> ; s = s + p ; r = <int> ; } num = next ; } p = ( r * ( r - <int> ) ) >> <int> ; s = s + p ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 1011}
{"input": "int main ( ) { int t , n , a , min , i ; long long ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; min = a ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) min = a ; } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 1012}
{"input": "long int gcd ( long int a , long int b ) { int temp = <int> ; if ( a < b ) { temp = a ; a = b ; b = temp ; } if ( b == <int> ) { return a ; } else return ( gcd ( b , a % b ) ) ; } int main ( ) { int tc = <int> ; long int a , b , temp = <int> ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & a , & b ) ; temp = a * b ; printf ( <str> , gcd ( a , b ) , temp / gcd ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 1013}
{"input": "int main ( ) { int t , max , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int j , i , k , a [ n ] [ n ] , s [ n ] ; max = <int> ; for ( i = <int> ; i < n ; i ++ ) s [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { for ( k = <int> ; k < n ; k ++ ) { if ( i - j == k ) { s [ k ] += a [ i ] [ j ] ; } } } for ( k = <int> ; k < n ; k ++ ) { if ( max < s [ k ] ) max = s [ k ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 1014}
{"input": "int main ( ) { int t , a , b , gcd , lcm , temp1 , temp2 , temp3 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; temp1 = a ; temp2 = b ; while ( a % b != <int> ) { temp3 = a ; a = b ; b = temp3 % b ; } gcd = b ; lcm = temp1 * temp2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1015}
{"input": "int main ( ) { long long int i , j , n , t , k , sum , min ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; long long int x [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & x [ j ] ) ; } min = x [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( x [ j ] < min ) { min = x [ j ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1016}
{"input": "int main ( ) { long long int T , N , m , x ; scanf ( <str> , & T ) ; for ( int j = <int> ; j <= T ; j ++ ) { int c = <int> ; scanf ( <str> , & N ) ; scanf ( <str> , & x ) ; m = x ; for ( int i = <int> ; i <= N ; i ++ ) { scanf ( <str> , & x ) ; if ( x < m ) m = x ; } printf ( <str> , m * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1017}
{"input": "int main ( ) { int t , a , b , s , k , count , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a >= b ) { min = b ; } else if ( b > a ) { min = a ; } k = <int> ; for ( i = <int> ; i <= min ; i ++ ) { if ( ( ( a % i ) == <int> ) && ( ( b % i ) == <int> ) ) { k = i ; } } s = <int> ; do { i = <int> ; count = <int> ; while ( i <= min ) { if ( ( ( a % i ) == <int> ) && ( ( b % i ) == <int> ) ) { a = a / i ; b = b / i ; s = s * i ; if ( a >= b ) { min = b ; } else if ( b > a ) { min = a ; } count ++ ; break ; } else { i ++ ; } } } while ( count == <int> ) ; s = s * ( a * b ) ; printf ( <str> , k , s ) ; } return <int> ; }", "label": 2, "id": 1018}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( <str> ) ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , num1 , num2 , gcd ) ; printf ( <str> , num1 , num2 , lcm ) ; }", "label": 1, "id": 1019}
{"input": "int main ( ) { long int T , j , i , N ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { long int cost , small ; scanf ( <str> , & N ) ; long int arr [ N ] ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } small = arr [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( arr [ i ] < small ) small = arr [ i ] ; } cost = small * ( N - <int> ) ; printf ( <str> , cost ) ; } }", "label": 0, "id": 1020}
{"input": "int main ( ) { int t , n , i , j , ar [ <int> ] [ <int> ] , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } s = ar [ n - <int> ] [ <int> ] + ar [ n - <int> ] [ <int> ] + ar [ n - <int> ] [ <int> ] ; printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 1021}
{"input": "int A [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x < y ) return y ; if ( y <= x ) return x ; } int newPath ( int n , int i , int j ) { if ( i == n ) return <int> ; else { return A [ i ] [ j ] + max ( newPath ( n , i + <int> , j + <int> ) , newPath ( n , i + <int> , j ) ) ; } } int main ( ) { int m , k , l , i , j ; scanf ( <str> , & i ) ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & m ) ; for ( k = <int> ; k < m ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & A [ k ] [ l ] ) ; } } printf ( <str> , newPath ( m , <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 1022}
{"input": "int * * table ; unsigned int * * arr ; unsigned int t ; int fill ( int row , int col ) { if ( col < <int> || col > row || row > t - <int> || row < <int> ) return <int> ; if ( table [ row ] [ col ] == <int> ) { if ( row - <int> >= <int> ) { unsigned int val1 , val2 ; if ( col - <int> >= <int> ) { if ( table [ row - <int> ] [ col - <int> ] == <int> ) { table [ row - <int> ] [ col - <int> ] = fill ( row - <int> , col - <int> ) ; } val1 = arr [ row ] [ col ] + table [ row - <int> ] [ col - <int> ] ; } else val1 = arr [ row ] [ col ] ; if ( col <= row - <int> ) { if ( table [ row - <int> ] [ col ] == <int> ) { table [ row - <int> ] [ col ] = fill ( row - <int> , col ) ; } val2 = arr [ row ] [ col ] + table [ row - <int> ] [ col ] ; } else val2 = arr [ row ] [ col ] ; table [ row ] [ col ] = val1 >= val2 ? val1 : val2 ; } else table [ row ] [ col ] = arr [ row ] [ col ] ; } return table [ row ] [ col ] ; } unsigned int get_max ( ) { unsigned int i , max = <int> ; for ( i = <int> ; i < t ; i ++ ) { if ( max < fill ( t - <int> , i ) ) max = fill ( t - <int> , i ) ; } return max ; } int main ( ) { unsigned int n ; scanf ( <str> , & n ) ; while ( n -- > <int> ) { unsigned int i ; scanf ( <str> , & t ) ; arr = ( unsigned int * * ) malloc ( sizeof ( unsigned int * ) * t ) ; table = ( int * * ) malloc ( sizeof ( int * ) * t ) ; for ( i = <int> ; i < t ; i ++ ) { unsigned int j ; arr [ i ] = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( i + <int> ) ) ; table [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; table [ i ] [ j ] = <int> ; } } printf ( <str> , get_max ( ) ) ; } return <int> ; }", "label": 0, "id": 1023}
{"input": "int main ( ) { int n , l , i , j , sum1 , sum2 ; scanf ( <str> , & n ) ; while ( n -- ) { sum1 = <int> ; sum2 = <int> ; scanf ( <str> , & l ) ; for ( i = <int> ; i <= l ; i ++ ) { int a [ i ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } sum1 += a [ <int> ] ; sum2 += a [ i - <int> ] ; } if ( sum1 > sum2 ) printf ( <str> , sum1 ) ; else printf ( <str> , sum2 ) ; } return <int> ; }", "label": 1, "id": 1024}
{"input": "int ar [ <int> ] [ <int> ] , br [ <int> ] [ <int> ] ; main ( ) { int t , n , i , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( ar [ i + <int> ] [ j ] > ar [ i + <int> ] [ j + <int> ] ) k = ar [ i + <int> ] [ j ] ; else k = ar [ i + <int> ] [ j + <int> ] ; ar [ i ] [ j ] += k ; } } printf ( <str> , ar [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1025}
{"input": "int main ( ) { int t ; long int l , b ; long int res ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l , & b ) ; long int x , y , hcf ; x = l ; y = b ; long int rem ; while ( <int> ) { rem = x % y ; if ( rem == <int> ) { hcf = y ; break ; } else { x = y ; y = rem ; } } res = ( l * b ) / hcf ; printf ( <str> , hcf , res ) ; } return <int> ; }", "label": 0, "id": 1026}
{"input": "int main ( ) { int k , res [ <int> ] , i , a , b , t , s , temp , m = <int> ; scanf ( <str> , k ) ; printf ( <str> ) ; for ( i = <int> ; i ++ < k ; ) { scanf ( <str> , & a , & b ) ; printf ( <str> ) ; if ( a < b ) { temp = a ; a = b ; b = temp ; } t = a ; s = b ; while ( b != <int> ) { temp = a ; a = b ; b = temp % a ; } res [ m ] = a ; res [ m + <int> ] = ( s * t ) / a ; m = m + <int> ; } for ( i = <int> ; i < ( sizeof ( res ) / sizeof ( res [ <int> ] ) ) ; i = i + <int> ) { printf ( <str> , res [ i ] , res [ i + <int> ] ) ; } return <int> ; }", "label": 3, "id": 1027}
{"input": "void main ( ) { int a , x , y , b , n , t , gcd , lcm ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 1028}
{"input": "int main ( int argc , char * argv [ ] ) { int rows , max , cases ; int psum [ <int> ] ; int nsum [ <int> ] ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & rows ) ; if ( rows > <int> ) { int i , j , k , z ; scanf ( <str> , & i ) ; scanf ( <str> , & j ) ; scanf ( <str> , & k ) ; nsum [ <int> ] = i + j ; nsum [ <int> ] = i + k ; for ( i = <int> ; i < rows - <int> ; i ++ ) { psum [ <int> ] = nsum [ <int> ] ; scanf ( <str> , & z ) ; nsum [ <int> ] += z ; for ( j = <int> ; j < i ; j ++ ) { psum [ j ] = nsum [ j ] ; scanf ( <str> , & z ) ; nsum [ j ] = psum [ j - <int> ] + z > psum [ j ] + z ? psum [ j - <int> ] + z : psum [ j ] + z ; } scanf ( <str> , & z ) ; nsum [ i ] = psum [ i - <int> ] + z ; } psum [ <int> ] = nsum [ <int> ] ; scanf ( <str> , & z ) ; nsum [ <int> ] += z ; max = nsum [ <int> ] ; for ( j = <int> ; j < rows - <int> ; j ++ ) { psum [ j ] = nsum [ j ] ; scanf ( <str> , & z ) ; nsum [ j ] = psum [ j - <int> ] + z > psum [ j ] + z ? psum [ j - <int> ] + z : psum [ j ] + z ; max = max > nsum [ j ] ? max : nsum [ j ] ; } scanf ( <str> , & z ) ; nsum [ rows - <int> ] = psum [ rows - <int> ] + z ; printf ( <str> , ( max > nsum [ rows - <int> ] ? max : nsum [ rows - <int> ] ) ) ; } else if ( rows == <int> ) { int sum [ <int> ] ; int i , j , k ; scanf ( <str> , & i ) ; scanf ( <str> , & sum [ <int> ] ) ; scanf ( <str> , & sum [ <int> ] ) ; sum [ <int> ] += i ; sum [ <int> ] += i ; j = sum [ <int> ] ; k = sum [ <int> ] ; scanf ( <str> , & i ) ; sum [ <int> ] += i ; max = sum [ <int> ] ; scanf ( <str> , & i ) ; sum [ <int> ] = i + j > i + k ? i + j : i + k ; max = max > sum [ <int> ] ? max : sum [ <int> ] ; scanf ( <str> , & i ) ; sum [ <int> ] = i + k ; printf ( <str> , ( max > sum [ <int> ] ? max : sum [ <int> ] ) ) ; } else if ( rows == <int> ) { int sum [ <int> ] , i ; scanf ( <str> , & i ) ; scanf ( <str> , & sum [ <int> ] ) ; scanf ( <str> , & sum [ <int> ] ) ; sum [ <int> ] += i ; sum [ <int> ] += i ; printf ( <str> , ( sum [ <int> ] > sum [ <int> ] ? sum [ <int> ] : sum [ <int> ] ) ) ; } else if ( rows == <int> ) { scanf ( <str> , & max ) ; printf ( <str> , max ) ; } } return <int> ; }", "label": 0, "id": 1029}
{"input": "int getint ( ) { char n = <int> , c ; while ( c < <int> ) { c = getchar_unlocked ( ) ; } while ( c > <int> ) { n = n * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return n ; } int main ( void ) { int t , n , i , j , arr [ <int> ] [ <int> ] ; t = getint ( ) ; while ( t -- ) { n = getint ( ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] = getint ( ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] += max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 1030}
{"input": "int main ( ) { int i , j , k , t , m , c , g ; scanf ( <str> , & t ) ; for ( m = <int> ; m <= t ; m ++ ) { c = <int> ; scanf ( <str> , & k ) ; int a [ k ] ; for ( i = <int> ; i < k ; i ++ ) scanf ( <str> , & a [ i ] ) ; while ( k != <int> ) { i = <int> ; if ( a [ i ] > a [ i + <int> ] ) { c = c + a [ i + <int> ] ; k -- ; for ( g = i ; g < k ; g ++ ) { a [ g ] = a [ g + <int> ] ; } } else if ( a [ i + <int> ] > a [ i ] ) { c = c + a [ i ] ; k -- ; for ( g = i + <int> ; g < k ; g ++ ) { a [ g ] = a [ g + <int> ] ; } } i ++ ; } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 1031}
{"input": "int gcd ( int x , int y ) ; int main ( ) { int n , i , j , count = <int> , partialLcm ; scanf ( <str> , & n ) ; while ( count <= n ) { scanf ( <str> , & i , & j ) ; printf ( <str> , gcd ( i , j ) ) ; printf ( <str> , ( ( i * j ) / gcd ( i , j ) ) ) ; count ++ ; } return <int> ; } int gcd ( int x , int y ) { int temp ; if ( x < y ) { x = x + y ; y = x - y ; x = x - y ; } while ( y != <int> ) { temp = x % y ; x = y ; y = temp ; } return x ; }", "label": 1, "id": 1032}
{"input": "int main ( void ) { int n , l , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & l ) ; int x [ l ] [ l ] ; for ( j = <int> ; j < l ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) { scanf ( <str> , & x [ j ] [ i ] ) ; } } for ( i = l - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( x [ i ] [ j ] < x [ i ] [ j + <int> ] ) { x [ i - <int> ] [ j ] = x [ i - <int> ] [ j ] + x [ i ] [ j + <int> ] ; } else { x [ i - <int> ] [ j ] = x [ i ] [ j ] + x [ i - <int> ] [ j ] ; } } } printf ( <str> , x [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1033}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int k = n * ( n + <int> ) / <int> , i , j ; int a [ k + <int> ] , heap [ <int> * n + <int> ] ; for ( i = <int> ; i < k + <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; heap [ <int> ] = a [ <int> ] ; heap [ <int> ] = - <int> ; for ( i = <int> ; i < n + <int> ; i ++ ) { heap [ <int> * i ] = heap [ <int> * ( i - <int> ) ] + a [ <int> + i ] ; heap [ <int> * i + <int> ] = heap [ <int> * ( i - <int> ) ] + a [ <int> + i ] ; } int max = heap [ <int> ] ; for ( i = <int> ; i < <int> * n + <int> ; i ++ ) if ( max < heap [ i ] ) max = heap [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1034}
{"input": "int main ( ) { int tc ; int a , b , x , y , t , gcd ; long int lcm ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1035}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t , i , a , b , rgcd , rlcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; rgcd = gcd ( a , b ) ; rlcm = lcm ( a , b ) ; printf ( <str> , rgcd , rlcm ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == <int> ) { return b ; } return gcd ( b % a , a ) ; } int lcm ( int a , int b ) { int q ; for ( q = <int> ; q <= ( a * b ) ; q ++ ) { if ( q % a == <int> && q % b == <int> ) { break ; } } return q ; }", "label": 2, "id": 1036}
{"input": "int main ( ) { long int t , k , a , b , r , a2 , b2 ; scanf ( <str> , & t ) ; while ( t -- ) { r = <int> ; scanf ( <str> , & a , & b ) ; b2 = b ; a2 = a ; if ( a < b ) { k = a2 ; a2 = b2 ; b2 = k ; } while ( r != <int> ) { r = a2 % b2 ; a2 = b2 ; b2 = r ; } printf ( <str> , a2 , ( a * b ) / a2 ) ; } return <int> ; }", "label": 0, "id": 1037}
{"input": "int main ( ) { int t , i , n , a , min ; long long int cost ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 1038}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int t , a [ t ] [ t ] , b [ t ] [ t ] , i , j , p , q ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( j = <int> ; j < t ; j ++ ) { b [ t - <int> ] [ j ] = a [ t - <int> ] [ j ] ; } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { p = b [ i + <int> ] [ j ] ; q = b [ i + <int> ] [ j + <int> ] ; if ( p > q ) b [ i ] [ j ] = p + a [ i ] [ j ] ; else b [ i ] [ j ] = q + a [ i ] [ j ] ; } } printf ( <str> , b [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 1039}
{"input": "int main ( ) { int m , n , p , q , r , s , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m , & n ) ; p = m ; q = n ; r = m % n ; while ( r != <int> ) { r = m % n ; m = n ; n = r ; } s = ( p * q ) / m ; printf ( <str> , m , s ) ; } return <int> ; }", "label": 1, "id": 1040}
{"input": "void fastRead ( int * a ) { register char c = <int> ; while ( c < <int> ) c = getchar ( ) ; * a = <int> ; while ( c > <int> ) { * a = * a * <int> + c - <char> ; c = getchar ( ) ; } } int tab [ <int> ] [ <int> ] ; int in [ <int> ] [ <int> ] ; int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a , Test , res , n , i , j , r ; fastRead ( & Test ) ; while ( Test -- ) { fastRead ( & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { fastRead ( & in [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { in [ i ] [ j ] += in [ i + <int> ] [ j ] > in [ i + <int> ] [ j + <int> ] ? in [ i + <int> ] [ j ] : in [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , in [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1041}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( long int n , long int m ) { if ( m == <int> ) return n ; if ( n == <int> ) return m ; else return gcd ( m , n % m ) ; }", "label": 0, "id": 1042}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) { return b ; } else { return gcd ( b , a % b ) ; } } int main ( void ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int gcda = gcd ( a , b ) ; long long int lcm = ( a * b ) / gcda ; printf ( <str> , gcda , lcm ) ; } return <int> ; }", "label": 0, "id": 1043}
{"input": "int main ( ) { int t , nl , n [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & nl ) ; for ( i = <int> ; i < nl ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & n [ i ] [ j ] ) ; } for ( i = nl - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( n [ i + <int> ] [ j ] > n [ i + <int> ] [ j + <int> ] ) n [ i ] [ j ] += n [ i + <int> ] [ j ] ; else n [ i ] [ j ] += n [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , n [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1044}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int n , i , j , p , t , k , max ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; max = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j > <int> && ( j != i ) ) a [ i ] [ j ] = max ( ( a [ i - <int> ] [ j ] ) , ( a [ i - <int> ] [ j - <int> ] ) ) + a [ i ] [ j ] ; else if ( j == i ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; if ( i == ( n - <int> ) ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } } printf ( <str> , max ) ; } return ( <int> ) ; }", "label": 0, "id": 1045}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( int i = n - <int> ; i >= <int> ; i -- ) for ( int j = <int> ; j < n ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1046}
{"input": "int t , a , b , g ; int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( void ) { scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 1047}
{"input": "int main ( ) { int t , i = <int> , num , den , rem , lcm , gcd ; int a [ <int> ] ; int b [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; if ( a [ i ] > b [ i ] ) { num = a [ i ] ; den = b [ i ] ; } else { num = b [ i ] ; den = a [ i ] ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a [ i ] * b [ i ] / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1048}
{"input": "int main ( ) { long int a , b , t , r , s , f ; long int lcm = <int> , gcd = <int> ; scanf ( <str> , & f ) ; while ( f != <int> ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; r = a ; s = b ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( r * s ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; f -- ; } }", "label": 1, "id": 1049}
{"input": "long long int get_gcd ( int , int ) ; long long int get_lcm ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , gcd , lcm , max , min ; scanf ( <str> , & a , & b ) ; if ( a < b ) { max = b ; min = a ; } else { max = a ; min = b ; } gcd = get_gcd ( max , min ) ; lcm = get_lcm ( max , min ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; } long long int get_gcd ( int x , int y ) { long long int div , d , q , r = <int> ; div = x ; d = y ; r = div % d ; if ( r == <int> ) return ( div / d ) ; else { while ( r != <int> ) { div = d ; d = r ; r = div % d ; } return d ; } } long long int get_lcm ( int x , int y ) { long long int i , num ; for ( i = <int> ; i <= y ; i ++ ) { num = i * x ; if ( num % y == <int> ) break ; } return num ; }", "label": 2, "id": 1050}
{"input": "int main ( int argc , char * argv [ ] ) { int arr [ <int> ] [ <int> ] , tmp , i , j , x , k , n , sum , max ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } sum = - <int> ; for ( i = <int> ; i < k ; i ++ ) { max = <int> ; for ( j = <int> ; j <= i ; j ++ ) { tmp = arr [ i ] [ j ] ; if ( tmp > max ) max = tmp ; } sum = sum + max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 1051}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , g , min , max , t ; long long int l ; scanf ( <str> , a , b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } while ( min ) { g = min ; min = max % min ; max = g ; } t = max ; l = ( a * b ) / t ; printf ( <str> , t , l ) ; } return <int> ; }", "label": 3, "id": 1052}
{"input": "int main ( ) { int t , no , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & no ) ; int array [ no ] ; min = <int> ; for ( i = <int> ; i < no ; i ++ ) { scanf ( <str> , & array [ i ] ) ; if ( min > array [ i ] ) min = array [ i ] ; } printf ( <str> , min * ( no - <int> ) ) ; printf ( <str> ) ; } }", "label": 0, "id": 1053}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , n , k , p ; scanf ( <str> , & n ) ; scanf ( <str> , & k ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p ) ; if ( p < k ) k = p ; } long long int res = k * ( n - <int> ) ; printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 1054}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int m ; scanf ( <str> , & m ) ; int a [ m ] [ m ] ; int i , j ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1055}
{"input": "int main ( ) { int i , t , result [ t ] , index = <int> , max ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; } } max = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( max < a [ n - <int> ] [ j ] ) max = a [ n - <int> ] [ j ] ; } result [ index ++ ] = max ; } for ( i = <int> ; i < index ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; }", "label": 3, "id": 1056}
{"input": "int n = <int> ; int main ( void ) { int t , i , test ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & t ) ; n = t * ( t + <int> ) / <int> ; int arr [ <int> ] = { <int> } ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; printf ( <str> , fun ( arr , <int> ) + arr [ <int> ] ) ; } return <int> ; } int fun ( int arr [ ] , int k ) { if ( <int> * k > n ) return <int> ; else return max ( arr [ <int> * k ] + fun ( arr , <int> * k ) , arr [ <int> * k + <int> ] + fun ( arr , <int> * k + <int> ) ) ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 3, "id": 1057}
{"input": "int main ( ) { int t , a , b , p , q ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & p , & q ) ; int c ; a = ( p < q ) ? p : q ; b = ( p > q ) ? p : q ; while ( a != <int> ) { c = a ; a = b % a ; b = c ; } printf ( <str> , b , ( p * q / b ) ) ; } return <int> ; }", "label": 1, "id": 1058}
{"input": "int main ( ) { int y , i , j , n , x , p , q , max ; int * * a ; scanf ( <str> , & y ) ; for ( i = <int> ; i < y ; i ++ ) { scanf ( <str> , & x ) ; a = ( int * * ) malloc ( x * sizeof ( int * ) ) ; for ( j = <int> ; j < x ; j ++ ) a [ j ] = ( int * ) malloc ( x * sizeof ( int ) ) ; for ( p = <int> ; p < x ; p ++ ) { for ( q = <int> ; q <= p ; q ++ ) scanf ( <str> , & a [ p ] [ q ] ) ; for ( q = p + <int> ; q < x ; q ++ ) a [ p ] [ q ] = <int> ; } for ( q = <int> ; q < x ; q ++ ) a [ q ] [ <int> ] = a [ q ] [ <int> ] + a [ q - <int> ] [ <int> ] ; for ( p = <int> ; p < x ; p ++ ) { for ( q = <int> ; q < x ; q ++ ) { a [ p ] [ q ] = a [ p ] [ q ] + ( a [ p - <int> ] [ q ] > a [ p - <int> ] [ q - <int> ] ? a [ p - <int> ] [ q ] : a [ p - <int> ] [ q - <int> ] ) ; } } max = a [ x - <int> ] [ <int> ] ; for ( q = <int> ; q < x ; q ++ ) if ( max < a [ x - <int> ] [ q ] ) max = a [ x - <int> ] [ q ] ; printf ( <str> , max ) ; free ( a ) ; } return <int> ; }", "label": 0, "id": 1059}
{"input": "long int gcd ( long int m , long int n ) { int temp ; if ( m < n ) { temp = n ; n = m ; m = temp ; } if ( n == <int> ) return m ; else return gcd ( n , m % n ) ; } int main ( ) { long int a , b , k ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; printf ( <str> , k , ( ( a * b ) / k ) ) ; } return <int> ; }", "label": 0, "id": 1060}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } long long int lcm ( long long int a , long long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 1061}
{"input": "void main ( ) { int a [ <int> ] , t , n , count , p , i , j ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( p = <int> ; p < t ; p ++ ) { count = <int> ; printf ( <str> , p + <int> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count += <int> ; } } printf ( <str> , count ) ; } }", "label": 3, "id": 1062}
{"input": "void <unk> ( int a [ <int> ] [ <int> ] , int m ) { int i , j ; for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } int main ( ) { int i , j , m , t , n , k ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m ) ; for ( j = <int> ; j < m ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } <unk> ( a , m ) ; } return <int> ; }", "label": 0, "id": 1063}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int i , N , tmp , least = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & tmp ) ; if ( tmp < least ) { least = tmp ; } } printf ( <str> , least * ( N - <int> ) ) ; } }", "label": 0, "id": 1064}
{"input": "void main ( ) { long long int T , a , b , i , j ; long long int c , d ; scanf ( <str> , & T ) ; long long int gcd [ T ] , lcm [ T ] ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a , & b ) ; c = a ; d = b ; while ( c != <int> && d != <int> ) { if ( ( c > d ? c : d ) == c ) c = c % d ; else d = d % c ; } if ( d != <int> ) gcd [ i ] = d ; else gcd [ i ] = c ; lcm [ i ] = ( a / gcd [ i ] ) * b ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , gcd [ i ] , lcm [ i ] ) ; }", "label": 0, "id": 1065}
{"input": "int main ( ) { int a , b , t , gcd , lcm , m , n , p , q ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; if ( a == b ) { gcd = a ; lcm = b ; } else if ( a > b ) { if ( a % b == <int> ) { gcd = b ; lcm = a ; } else { p = <int> ; while ( p ) { q = a / b ; p = a - ( q * b ) ; a = b ; gcd = b ; b = p ; } lcm = ( m * n ) / gcd ; } } else { if ( b % a == <int> ) { gcd = a ; lcm = b ; } else { p = <int> ; while ( p ) { q = b / a ; p = b - ( q * a ) ; b = a ; gcd = a ; a = p ; } lcm = ( m * n ) / gcd ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1066}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else gcd ( b , a % b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; long long int hcf , lcm ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = a * ( b / hcf ) ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 1067}
{"input": "int gcd ( int x , int y ) { int t , a = x , b = y ; while ( t != <int> ) { t = a % b ; a = b ; b = t ; } return a ; } int main ( ) { int t , a , b , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 1068}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int A , B , gcd ; long long int lcm ; scanf ( <str> , & A , & B ) ; for ( int i = <int> ; i <= A && i <= B ; i ++ ) { if ( A % i == <int> && B % i == <int> ) { gcd = i ; } } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1069}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int count = <int> , pi = - <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { if ( pi == - <int> ) pi = i ; continue ; } else { printf ( <str> , pi , i ) ; int numOf = i - pi ; count += ( numOf * ( numOf + <int> ) ) / <int> ; pi = - <int> ; } } if ( pi != - <int> ) { printf ( <str> , pi , i ) ; int numOf = i - pi ; count += ( numOf * ( numOf + <int> ) ) / <int> ; pi = - <int> ; } printf ( <str> , count + n ) ; } }", "label": 1, "id": 1070}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int p , n , i ; scanf ( <str> , & n ) ; int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p ) ; if ( min > p ) min = p ; } long long int q ; q = min * ( n - <int> ) ; printf ( <str> , q ) ; } return <int> ; }", "label": 0, "id": 1071}
{"input": "int main ( ) { int t , i , a , b , gcd , lcm , max , min , x , y ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a <= b ) { min = a ; max = b ; } else { min = b ; max = a ; } while ( <int> ) { if ( a % min == <int> && b % min == <int> ) { gcd = min ; break ; } min -- ; } printf ( <str> , gcd , a * b / gcd ) ; } return <int> ; }", "label": 1, "id": 1072}
{"input": "int main ( ) { int t , i = <int> , num , den , rem , lcm , gcd ; int a [ <int> ] ; int b [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; if ( a [ i ] > b [ i ] ) { num = a [ i ] ; den = b [ i ] ; } else { num = b [ i ] ; den = a [ i ] ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a [ i ] * b [ i ] / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 1073}
{"input": "void recurse ( int arr [ ] , int first , int n ) { if ( arr [ first ] < arr [ first + <int> ] ) arr [ first + <int> ] = arr [ first ] ; static int k ; if ( first == <int> ) k = <int> ; k += arr [ first + <int> ] ; if ( first < n - <int> ) { recurse ( arr , first + <int> , n ) ; } else { printf ( <str> , k ) ; } } int main ( ) { int n , arr [ <int> ] , i , a ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) scanf ( <str> , & arr [ i ] ) ; recurse ( arr , <int> , i - <int> ) ; } return <int> ; }", "label": 1, "id": 1074}
{"input": "int n , s [ <int> ] , a [ <int> ] [ <int> ] ; void input ( int i ) { if ( i < n ) { int j ; input ( i + <int> ) ; for ( j = <int> ; j <= i ; j ++ ) { if ( ( s [ j ] + a [ i ] [ j ] ) > ( s [ j + <int> ] + a [ i ] [ j ] ) ) s [ j ] += a [ i ] [ j ] ; else s [ j ] = s [ j + <int> ] + a [ i ] [ j ] ; } } } int main ( ) { int c , max = <int> , t , p = <int> , ma [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( c = <int> ; c < n ; c ++ ) s [ c ] = <int> ; input ( <int> ) ; ma [ p ] = s [ <int> ] ; p ++ ; } for ( c = <int> ; c < p ; c ++ ) printf ( <str> , ma [ c ] ) ; return ( <int> ) ; }", "label": 0, "id": 1075}
{"input": "void sub ( int [ ] , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; int i , n , j ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } sub ( a , n ) ; } return <int> ; } void sub ( int a [ ] , int n ) { int i , j , c = <int> , count = <int> , m ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { for ( m = i ; m < j ; m ++ ) { if ( a [ m ] < a [ m + <int> ] ) c ++ ; } if ( ( i + c ) == j ) { count ++ ; } c = <int> ; } } printf ( <str> , count ) ; }", "label": 2, "id": 1076}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int x , y , z ; x = a , y = b ; while ( y != <int> ) { z = y ; y = x % y ; x = z ; } if ( b > a ) { int temp = a ; a = b ; b = temp ; } int p = a ; long long int lcm = ( a * b ) / x ; printf ( <str> , x , lcm ) ; } return <int> ; }", "label": 1, "id": 1077}
{"input": "int main ( ) { int n1 , n2 , lcm , gcd ; printf ( <str> ) ; scanf ( <str> , & n1 , & n2 ) ; if ( n1 < n2 ) { gcd = n1 ; lcm = n2 ; } else { lcm = n1 ; gcd = n2 ; } while ( n1 % gcd != <int> || n2 % gcd != <int> ) { gcd -- ; } while ( lcm % n1 != <int> || lcm % n2 != <int> ) { lcm ++ ; } printf ( <str> , lcm , gcd ) ; return <int> ; }", "label": 1, "id": 1078}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; long int a , b , lcm , gcd , num , den , rem ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1079}
{"input": "int main ( ) { int t , n , i , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { int l = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & k ) ; if ( l > k ) l = k ; } printf ( <str> , l * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1080}
{"input": "int main ( ) { long T , k , i ; long long A [ <int> ] , c [ <int> ] , l , j , N ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { c [ i ] = <int> ; k = <int> ; scanf ( <str> , & N ) ; for ( l = <int> ; l < N ; l ++ ) { scanf ( <str> , & A [ l ] ) ; } while ( k < N - <int> ) { if ( A [ <int> ] > A [ <int> ] ) { c [ i ] += A [ <int> ] ; for ( j = <int> ; j < N - <int> ; j ++ ) { A [ j ] = A [ j + <int> ] ; } } else { c [ i ] += A [ <int> ] ; for ( j = <int> ; j < N - <int> ; j ++ ) { A [ j ] = A [ j + <int> ] ; } } k ++ ; } } for ( i = <int> ; i < T ; i ++ ) { printf ( <str> , c [ i ] ) ; } return <int> ; }", "label": 2, "id": 1081}
{"input": "int max ( int * * s , int * * m , int row , int col , int i , int j ) { if ( i == row - <int> ) { if ( s [ i + <int> ] [ j ] > s [ i + <int> ] [ j + <int> ] ) { return s [ i ] [ j ] + s [ i + <int> ] [ j ] ; } else { return s [ i ] [ j ] + s [ i + <int> ] [ j + <int> ] ; } } else { m [ i + <int> ] [ j ] = max ( s , m , row , col , i + <int> , j ) ; m [ i + <int> ] [ j + <int> ] = max ( s , m , row , col , i + <int> , j + <int> ) ; if ( m [ i + <int> ] [ j ] > m [ i + <int> ] [ j + <int> ] ) { return ( s [ i ] [ j ] + m [ i + <int> ] [ j ] ) ; } else { return ( s [ i ] [ j ] + m [ i + <int> ] [ j + <int> ] ) ; } } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , * p [ <int> ] , * * pf , * mp [ <int> ] , * * mpf ; scanf ( <str> , & n ) ; int s [ n ] [ n ] , m [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & s [ i ] [ j ] ) ; } p [ i ] = s [ i ] ; mp [ i ] = m [ i ] ; } pf = p ; mpf = mp ; int sum = max ( ( int * * ) p , ( int * * ) mpf , n , n , <int> , <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 1082}
{"input": "int i , j , t ; int main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = ( ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) > ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ) ? ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) : ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 1083}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int max , ar [ <int> ] [ <int> ] = { <int> } , i , j , n , s [ <int> ] [ <int> ] = { <int> } ; int ans ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } ans = s [ <int> ] [ <int> ] = ar [ <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) { max = ar [ j ] [ i ] + s [ j - <int> ] [ i ] ; if ( i == <int> ) { max = ar [ j ] [ i ] + s [ j - <int> ] [ <int> ] ; } else if ( j == i ) { max = ar [ j ] [ i ] + s [ j - <int> ] [ i - <int> ] ; } else if ( s [ j - <int> ] [ i - <int> ] > s [ j - <int> ] [ i ] ) max = ar [ j ] [ i ] + s [ j - <int> ] [ i - <int> ] ; s [ j ] [ i ] = max ; if ( j == n - <int> && ans < max ) ans = max ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 1084}
{"input": "main ( ) { int k , j , i ; int nt , nl ; int a [ <int> ] [ <int> ] ; int p = <int> ; scanf ( <str> , & nt ) ; int op [ nt ] ; for ( k = <int> ; k < nt ; k ++ ) { scanf ( <str> , & nl ) ; for ( i = <int> ; i < nl ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = nl - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) > ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } op [ k ] = a [ <int> ] [ <int> ] ; } } for ( k = <int> ; k < nt ; k ++ ) printf ( <str> , op [ k ] ) ; printf ( <str> ) ; return <int> ; }", "label": 1, "id": 1085}
{"input": "int main ( void ) { int times , k ; scanf ( <str> , & times ) ; int t [ times ] ; for ( k = <int> ; k < times ; k ++ ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j + <int> ] ; } } t [ k ] = arr [ <int> ] [ <int> ] ; } for ( k = <int> ; k < times ; k ++ ) printf ( <str> , t [ k ] ) ; }", "label": 0, "id": 1086}
{"input": "int main ( ) { int x ; int i ; int test ; int min ; scanf ( <str> , & test ) ; while ( test > <int> ) { scanf ( <str> , & x ) ; long int a [ x ] ; for ( i = <int> ; i < x ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( x - <int> ) ) ; test -- ; } return <int> ; }", "label": 1, "id": 1087}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; int i = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int z = a [ <int> ] ; int b = <int> ; int x = <int> ; while ( b < n ) { if ( a [ x ] < a [ b ] ) { z = a [ x ] ; b ++ ; } else { z = a [ b ] ; a [ x ] = z ; b ++ ; } } printf ( <str> , z ) ; } return <int> ; }", "label": 1, "id": 1088}
{"input": "int gcd ( int a , int b ) { while ( b % a != <int> ) { int r = b % a ; b = a ; a = r ; } printf ( <str> , a ) ; } int lcm ( int a , int b ) { int f ; for ( int i = b ; i <= a * b ; i ++ ) if ( i % a == <int> && i % b == <int> ) f = i ; printf ( <str> , f ) ; } main ( ) { int a , b , t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } gcd ( a , b ) ; lcm ( a , b ) ; } }", "label": 2, "id": 1089}
{"input": "typedef long long int ll ; ll solve1 ( int arr [ ] , int n ) { int i , j ; ll ans = <int> ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( arr [ j ] <= arr [ j + <int> ] ) ans ++ ; else break ; } } return ( ans + n ) ; } ll solve2 ( int arr [ ] , int n ) { ll ans = <int> , x = <int> ; int i , j ; for ( i = <int> ; i <= n ; i ++ ) { int flag = <int> ; for ( j = i ; j <= n && flag ; j ++ ) { if ( arr [ j ] <= arr [ j + <int> ] ) x ++ ; else { ans += ( x * ( x + <int> ) ) / <int> ; i = j ; x = <int> ; flag = <int> ; } } } return ans ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ <int> ] ; int i ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; if ( n <= <int> ) printf ( <str> , solve1 ( arr , n ) ) ; else printf ( <str> , solve2 ( arr , n ) ) ; } }", "label": 0, "id": 1090}
{"input": "int * * temp ; int calc_sum ( int i , int j , int num , int * * arr ) ; int main ( ) { int * * arr ; int cases = <int> ; int num = <int> , n = <int> , i , j ; scanf ( <str> , & cases ) ; while ( cases > <int> ) { cases = cases - <int> ; scanf ( <str> , & num ) ; arr = ( int * * ) malloc ( num * sizeof ( int ) ) ; temp = ( int * * ) malloc ( num * sizeof ( int ) ) ; for ( i = <int> ; i < num ; i ++ ) { arr [ i ] = ( int * ) malloc ( ( num ) * sizeof ( int ) ) ; temp [ i ] = ( int * ) malloc ( num * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & n ) ; arr [ i ] [ j ] = n ; temp [ i ] [ j ] = - <int> ; } } int ans = calc_sum ( <int> , <int> , num , arr ) ; printf ( <str> , ans ) ; } } int calc_sum ( int i , int j , int num , int * * arr ) { if ( temp [ i ] [ j ] != - <int> ) { return temp [ i ] [ j ] ; } if ( i == num - <int> ) { return arr [ i ] [ j ] ; } int rightsum = arr [ i ] [ j ] + calc_sum ( i + <int> , j + <int> , num , arr ) ; int leftsum = arr [ i ] [ j ] + calc_sum ( i + <int> , j , num , arr ) ; if ( rightsum > leftsum ) { temp [ i ] [ j ] = rightsum ; return rightsum ; } else { temp [ i ] [ j ] = leftsum ; return leftsum ; } }", "label": 1, "id": 1091}
{"input": "int main ( ) { int t , n , i , min , sum = <int> ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; sum = <int> ; t -- ; } }", "label": 0, "id": 1092}
{"input": "int main ( ) { int t = <int> , n , i , j , a [ <int> ] [ <int> ] = { <int> } , testcase , b [ <int> ] ; char y ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } b [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) { b [ j ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; a [ i ] [ j ] = b [ j ] ; } else { b [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; a [ i ] [ j ] = b [ j ] ; } } } for ( i = <int> ; i <= n ; i ++ ) { if ( t < b [ i ] ) t = b [ i ] ; } printf ( <str> , t ) ; t = <int> ; } return <int> ; }", "label": 3, "id": 1093}
{"input": "int main ( ) { int t , n , j , k , x ; scanf ( <str> , & t ) ; int a [ t ] ; int i ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int b [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & b [ j ] ) ; for ( j = <int> ; j < <int> ; j ++ ) { for ( k = j + <int> ; k < n ; k ++ ) { if ( b [ k ] < b [ j ] ) { x = b [ k ] ; b [ k ] = b [ j ] ; b [ j ] = x ; } } } a [ i ] = ( n - <int> ) * x ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , a [ i ] ) ; return <int> ; }", "label": 0, "id": 1094}
{"input": "int main ( ) { int t , i , min , n ; long int c ; scanf ( <str> , & t ) ; while ( t > <int> ) { c = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } c = ( n - <int> ) * min ; printf ( <str> , c ) ; t -- ; } return <int> ; }", "label": 0, "id": 1095}
{"input": "int max ( int x , int y ) ; int main ( int argc , char * argv [ ] ) { int a [ <int> ] [ <int> ] , i , j , n , t , maximum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } a [ i ] [ j + <int> ] = <int> ; } maximum = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; ++ i ) { if ( a [ n - <int> ] [ i ] > maximum ) maximum = a [ n - <int> ] [ i ] ; } printf ( <str> , maximum ) ; } return <int> ; } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; }", "label": 1, "id": 1096}
{"input": "typedef long long ll ; typedef unsigned long long ull ; ll getnum ( ) { char ch ; ll num = <int> ; while ( ! isdigit ( ch = gc ( ) ) ) ; do { num = num * <int> + ( ch - <char> ) ; } while ( isdigit ( ch = gc ( ) ) ) ; return num ; } void sort ( int a [ ] , int begin , int mid , int end ) { int i = begin , j = mid + <int> , k = <int> , temp [ end - begin + <int> ] ; while ( i <= mid && j <= end ) { if ( a [ i ] >= a [ j ] ) temp [ k ++ ] = a [ i ++ ] ; else temp [ k ++ ] = a [ j ++ ] ; } for ( ; i <= mid ; ++ i ) temp [ k ++ ] = a [ i ] ; for ( ; j <= end ; ++ j ) temp [ k ++ ] = a [ j ] ; for ( i = <int> ; i < k ; ++ i ) a [ begin + i ] = temp [ i ] ; } void partition ( int a [ ] , int begin , int end ) { if ( begin == end ) return ; int mid = ( begin + end ) / <int> ; partition ( a , begin , mid ) ; partition ( a , mid + <int> , end ) ; sort ( a , begin , mid , end ) ; } ll gcd ( ll a , ll b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t = getnum ( ) , i , j , found ; while ( t -- ) { ll a , b , k ; a = getnum ( ) ; b = getnum ( ) ; k = gcd ( a , b ) ; printf ( <str> , k , ( a * b ) / k ) ; } return <int> ; }", "label": 0, "id": 1097}
{"input": "int main ( ) { int n , l , i , sum , count , actsum , j ; scanf ( <str> , & n ) ; if ( ( n <= <int> ) || ( n > <int> ) ) return <int> ; int first ; int ans [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & l ) ; int a [ ( l * l + l ) / <int> + <int> ] ; for ( i = <int> ; i < ( ( l * l + l ) / <int> ) ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( ( a [ i ] < <int> ) || ( a [ i ] > <int> ) ) return <int> ; } count = <int> ; actsum = a [ <int> ] + a [ <int> ] + a [ <int> ] ; sum = <int> ; first = a [ <int> ] ; for ( i = <int> ; i < ( ( l * l + l ) / <int> ) ; i ++ ) { sum += a [ i ] + a [ i + <int> ] + first ; first = a [ i ] ; i ++ ; i += count ; count += <int> ; if ( sum >= actsum ) actsum = sum ; sum = <int> ; } ans [ j ] = actsum ; } for ( j = <int> ; j < n ; j ++ ) printf ( <str> , ans [ j ] ) ; return <int> ; }", "label": 3, "id": 1098}
{"input": "int main ( ) { int t ; int i , n , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; x = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < x ) x = a [ i ] ; } x = x * ( n - <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 1099}
{"input": "int main ( ) { int T , l , i , n , j , sum , k = <int> , x ; int arr [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; ++ i ) { k = <int> ; x = <int> ; scanf ( <str> , & l ) ; n = ( l * ( l + <int> ) ) / <int> ; for ( j = <int> ; j < n ; ++ j ) { scanf ( <str> , & arr [ j ] ) ; } sum = arr [ <int> ] ; while ( k <= n ) { if ( arr [ k ] > arr [ k + <int> ] ) { sum = sum + arr [ k ] ; k = k + x ; } else { sum = sum + arr [ k + <int> ] ; k = k + <int> + x ; } ++ x ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 1100}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int i , n , min = INT_MAX ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1101}
{"input": "long GCD ( int A , int B ) { long reminder ; if ( B > A ) { int temp ; temp = A ; A = B ; B = temp ; } while ( B ) { reminder = A % B ; A = B ; B = reminder ; } return A ; } long LCM ( int A , int B ) { return ( A * B ) / GCD ( A , B ) ; } int main ( void ) { int T , A , B ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; printf ( <str> , GCD ( A , B ) , LCM ( A , B ) ) ; } return <int> ; }", "label": 1, "id": 1102}
{"input": "int main ( ) { int t , i , gcd , lcm ; long long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long long int n = a , m = b ; while ( a != b ) { if ( a > b ) { a -= b ; } else { b -= a ; } } gcd = a ; lcm = ( n * m ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1103}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , rem ; long long int c , d ; scanf ( <str> , & a , & b ) ; if ( b > a ) { c = a ; a = b ; b = a ; } c = a ; d = b ; while ( b > <int> ) { rem = a % b ; a = b ; b = rem ; } printf ( <str> , a , ( c * d ) / a ) ; } return <int> ; }", "label": 1, "id": 1104}
{"input": "int main ( ) { int n , i , j , k , t ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & t ) ; int a [ t ] [ t ] ; for ( j = <int> ; j < t ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( j = t - <int> ; j > <int> ; j -- ) for ( k = <int> ; k < j ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + <int> ] ) a [ j - <int> ] [ k ] += a [ j ] [ k ] ; else a [ j - <int> ] [ k ] += a [ j ] [ k + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1105}
{"input": "int main ( ) { int i , j , k , ntest , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & ntest ) ; for ( i = <int> ; i < ntest ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) { a [ j ] [ k ] += a [ j + <int> ] [ k ] ; } else { a [ j ] [ k ] += a [ j + <int> ] [ k + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1106}
{"input": "int main ( ) { int t , a = <int> ; scanf ( <str> , & t ) ; long int e , f ; long int gcd [ t ] , lcm [ t ] ; while ( a < t ) { int i = <int> ; scanf ( <str> , & e , & f ) ; long int j = ( e > f ) ? f : e ; long int z = e * f ; while ( i <= j ) { if ( e % i == <int> && f % i == <int> ) { gcd [ a ] = i ; } ++ i ; } lcm [ a ] = z / gcd [ a ] ; printf ( <str> , gcd [ a ] , lcm [ a ] ) ; a ++ ; } return <int> ; }", "label": 2, "id": 1107}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , c , d ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = ( n - <int> ) ; i >= <int> ; i -- ) { for ( j = <int> ; j <= ( n - <int> ) ; j ++ ) { c = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; d = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; if ( c > d ) { a [ i ] [ j ] = c ; } else a [ i ] [ j ] = d ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1108}
{"input": "int main ( ) { int dong ; scanf ( <str> , & dong ) ; while ( dong -- ) { int so1 , so2 , ucln , bcnn , gan1 , gan2 ; scanf ( <str> , & so1 , & so2 ) ; gan1 = so1 ; gan2 = so2 ; while ( so1 != so2 ) { if ( so1 > so2 ) so1 = so1 - so2 ; else so2 = so2 - so1 ; } ucln = so1 ; bcnn = ( gan1 * gan2 ) / so1 ; printf ( <str> , ucln , bcnn ) ; } return <int> ; }", "label": 1, "id": 1109}
{"input": "int main ( ) { long int a [ <int> ] [ <int> ] ; int i , j , s ; long int n , t ; scanf ( <str> , & n ) ; if ( n <= <int> ) { while ( n > <int> ) { s = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; s = s + a [ i ] [ j ] ; } } printf ( <str> , ( s / <int> ) ) ; t -- ; } } return <int> ; }", "label": 2, "id": 1110}
{"input": "int cmp ( int * a , int * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int a , d , b , e , f ; scanf ( <str> , & e ) ; while ( e -- ) { b = <int> ; f = <int> ; scanf ( <str> , & d ) ; while ( d -- ) { int c [ b ] ; for ( a = <int> ; a < b ; a ++ ) { scanf ( <str> , & c [ a ] ) ; } qsort ( c , b , sizeof ( int ) , cmp ) ; f = f + c [ b - <int> ] ; b ++ ; } printf ( <str> , f ) ; } return <int> ; }", "label": 1, "id": 1111}
{"input": "unsigned s , temp , a , b ; main ( ) { scanf ( <str> , & s ) ; while ( s -- ) { scanf ( <str> , & a , b ) ; temp = ( a > b ) ? b : a ; while ( a % temp != <int> && b % temp != <int> ) temp -- ; printf ( <str> , temp , a * b / temp ) ; } }", "label": 3, "id": 1112}
{"input": "void compute ( long int a [ ] , int n ) ; int main ( ) { int t , n , k , i ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; compute ( a , n ) ; } } void compute ( long int a [ ] , int n ) { int i , j , ctr = <int> ; int c ; for ( i = <int> ; i < n ; i ++ ) { c = i ; for ( j = i ; j < n ; j ++ ) { if ( a [ c ] <= a [ j ] ) { ctr ++ ; c = j ; } else break ; } } printf ( <str> , ctr ) ; }", "label": 1, "id": 1113}
{"input": "int main ( ) { int a , b , t , temp1 , dividend , divisor , gcd , i , rem = <int> ; long long int temp , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; temp = a * b ; if ( a < b ) { temp1 = a ; a = b ; b = temp1 ; } dividend = a ; divisor = b ; while ( rem > <int> ) { rem = dividend % divisor ; dividend = divisor ; if ( rem == <int> ) break ; divisor = rem ; } gcd = divisor ; lcm = temp / gcd ; printf ( <str> , gcd , lcm ) ; rem = <int> ; } return <int> ; }", "label": 1, "id": 1114}
{"input": "int ar [ <int> ] ; int n ; int max ( ) ; int main ( ) { int t ; int i , j ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ ( ( i - <int> ) * i ) / <int> + j - <int> ] ) ; printf ( <str> , max ( ) ) ; } } int max ( ) { int i , j ; int t1 , t2 ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { t1 = ar [ ( ( i + <int> ) * i ) / <int> + j - <int> ] ; t2 = ar [ ( ( i + <int> ) * i ) / <int> + j ] ; ar [ ( ( i - <int> ) * i ) / <int> + j - <int> ] += t1 > t2 ? t1 : t2 ; } } return ar [ <int> ] ; }", "label": 0, "id": 1115}
{"input": "int main ( ) { long long int test , i , n , a [ <int> ] [ <int> ] , j , k ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( k != j && a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k ] ; else if ( k != j && a [ j + <int> ] [ k ] <= a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k + <int> ] ; else a [ j ] [ k ] += a [ j + <int> ] [ k ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1116}
{"input": "int sum ( int m , int s , int n , int a [ n ] [ n ] , int i , int j ) { if ( i >= n || a [ i ] [ j ] == - <int> ) { if ( s > m ) return s ; else return m ; } else { s = s + a [ i ] [ j ] ; m = sum ( m , s , n , a , i + <int> , j ) ; if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) m = sum ( m , s , n , a , i + <int> , j + <int> ) ; return m ; } } int main ( void ) { int t , n , m = <int> , i = <int> , j = <int> , x ; scanf ( <str> , & t ) ; for ( x = <int> ; x < t ; x ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = - <int> ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } m = sum ( - <int> , <int> , n , a , <int> , <int> ) ; printf ( <str> , m ) ; } return <int> ; }", "label": 2, "id": 1117}
{"input": "int main ( ) { long long int test , i , n , a [ <int> ] [ <int> ] , j , k ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( j == <int> ) { if ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k ] ; else a [ j ] [ k ] += a [ j + <int> ] [ k + <int> ] ; } else if ( k != j && a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k ] ; else if ( k != j && j != <int> && a [ j + <int> ] [ k ] <= a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k + <int> ] ; else a [ j ] [ k ] += a [ j + <int> ] [ k ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1118}
{"input": "int main ( void ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int n , i , min ; int arr [ MAX ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min >= arr [ i ] ) min = arr [ i ] ; } long long int val = min * ( n - <int> ) ; printf ( <str> , val ) ; } return <int> ; }", "label": 0, "id": 1119}
{"input": "int main ( ) { int t , n , i , j , max , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i <= n ; i ++ ) a [ i ] [ <int> ] = <int> ; for ( j = <int> ; j <= n ; j ++ ) a [ <int> ] [ j ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = i + <int> ; j <= n ; j ++ ) a [ i ] [ j ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] += ( a [ i - <int> ] [ j - <int> ] >= a [ i - <int> ] [ j ] ? a [ i - <int> ] [ j - <int> ] : a [ i - <int> ] [ j ] ) ; } } max = a [ n ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( a [ n ] [ j + <int> ] > a [ n ] [ j ] ) max = a [ n ] [ j + <int> ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 1120}
{"input": "int main ( ) { int a [ <int> ] , i , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { a [ i + <int> ] = <char> ; } } printf ( <str> , a [ i ] ) ; } return <int> ; }", "label": 3, "id": 1121}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j , k , sum , sum1 , sum2 , <unk> , large ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } <unk> = <int> ; for ( j = <int> ; j <= n ; j ++ ) { sum = <int> ; for ( i = j ; i <= n - <int> ; i ++ ) { sum = sum + a [ i ] [ j ] ; } sum1 = sum + a [ i ] [ j ] ; sum2 = sum + a [ i ] [ j + <int> ] ; if ( sum1 > sum2 ) large = sum1 ; else large = sum2 ; if ( large > <unk> ) <unk> = large ; else continue ; } printf ( <str> , <unk> ) ; } }", "label": 3, "id": 1122}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int c , t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; printf ( <str> , c , a * b / c ) ; } return <int> ; }", "label": 1, "id": 1123}
{"input": "int main ( ) { int tc , n , i , j , k , c ; scanf ( <str> , & tc ) ; while ( tc -- ) { c = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { for ( k = j ; k < n ; k ++ ) a [ k ] = a [ k + <int> ] ; c = c + a [ i ] ; } else { for ( k = i ; k < n ; k ++ ) a [ k ] = a [ k + <int> ] ; c = c + a [ j ] ; } n -- ; } } printf ( <str> , c ) ; } }", "label": 2, "id": 1124}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else gcd ( b , a % b ) ; } int main ( ) { int a , b , g , l , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 1125}
{"input": "int n , s [ <int> ] ; void input ( int i ) { int a [ <int> ] ; if ( i < n ) { int j ; for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ j ] ) ; input ( i + <int> ) ; for ( j = <int> ; j <= i ; j ++ ) { if ( ( s [ j ] + a [ j ] ) > ( s [ j + <int> ] + a [ j ] ) ) s [ j ] += a [ j ] ; else s [ j ] = s [ j + <int> ] + a [ j ] ; } } } int main ( ) { int c , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( c = <int> ; c < n ; c ++ ) s [ c ] = <int> ; input ( <int> ) ; printf ( <str> , s [ <int> ] ) ; } return ( <int> ) ; }", "label": 0, "id": 1126}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { long int t ; long long int n , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; n = gcd ( a , b ) ; printf ( <str> , n , ( ( a * b ) / n ) ) ; } return <int> ; } long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; }", "label": 0, "id": 1127}
{"input": "int main ( ) { long int T , lcm , gcd ; scanf ( <str> , & T ) ; long int a , b ; for ( long int i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( long int j = <int> ; j <= b && j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 1128}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( j = <int> ; j < n ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) { scanf ( <str> , & a [ j ] [ i ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 1129}
{"input": "int main ( ) { int t , i , j , r , k , l , sum1 , sum2 , sum ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } sum = a [ <int> ] [ <int> ] ; j = <int> ; k = <int> ; while ( j < r ) { sum1 = <int> ; sum2 = <int> ; for ( l = j + <int> ; l < r ; l ++ ) sum1 += a [ l ] [ k ] ; for ( l = j + <int> ; l < r ; l ++ ) sum2 += a [ l ] [ k + <int> ] ; if ( sum1 > sum2 ) { sum += a [ j + <int> ] [ k ] ; j ++ ; } else if ( sum1 < sum2 ) { sum += a [ j + <int> ] [ k + <int> ] ; j ++ ; k ++ ; } else if ( sum1 == sum2 ) { if ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) { sum += a [ j + <int> ] [ k ] ; j ++ ; } else { sum += a [ j + <int> ] [ k + <int> ] ; j ++ ; k ++ ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 1130}
{"input": "int main ( ) { int t , n , a [ <int> ] , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 1131}
{"input": "int max ( int , int ) ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int arr [ <int> ] [ <int> ] , i , j , n , t ; int sum = <int> , ma = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i <= n ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] += max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; } if ( ma < sum ) ma = sum ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; ma = <int> ; sum = <int> ; } return <int> ; }", "label": 2, "id": 1132}
{"input": "int main ( ) { int i , k , j , n , ln , a [ <int> ] [ <int> ] = { <int> } , big ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & ln ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < ln ; i ++ ) { for ( j = <int> ; j <= i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } } big = <int> ; for ( i = <int> ; i <= ln ; i ++ ) { if ( big < a [ ln - <int> ] [ i ] ) big = a [ ln - <int> ] [ i ] ; } printf ( <str> , big ) ; } return <int> ; }", "label": 0, "id": 1133}
{"input": "int main ( ) { int n , i , l , depth , add , <unk> , level , <unk> , n1 , n2 , location ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & depth ) ; add = <int> ; scanf ( <str> , & <unk> ) ; location = <int> ; add += <unk> ; for ( level = <int> ; level <= depth ; level ++ ) { for ( l = <int> ; l < location - <int> ; l ++ ) scanf ( <str> , & <unk> ) ; scanf ( <str> , & n1 , & n2 ) ; if ( n2 > n1 ) { add += n2 ; location += <int> ; } else add += n1 ; } printf ( <str> , add ) ; } return <int> ; }", "label": 1, "id": 1134}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } j = <int> ; int s = a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { s = s + a [ i ] [ j ] ; } else { s = s + a [ i ] [ j + <int> ] ; j ++ ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 1135}
{"input": "int d ; int a [ <int> ] [ <int> ] ; int fun ( int x , int y ) { int ans = <int> ; int l , m ; if ( x == d - <int> ) { return a [ x ] [ y ] ; } else { l = fun ( x + <int> , y ) ; m = fun ( x + <int> , y + <int> ) ; if ( l > m ) { return a [ x ] [ y ] + l ; } else { return a [ x ] [ y ] + m ; } } } int main ( ) { int m , t ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & d ) ; int i , j ; for ( i = <int> ; i < d ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } int ans ; ans = fun ( <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 1136}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int n ; scanf ( <str> , & n ) ; int A [ <int> ] [ <int> ] , B [ <int> ] [ <int> ] ; while ( n > <int> ) { int N ; scanf ( <str> , & N ) ; int i , j ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; B [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) B [ i ] [ <int> ] = B [ i - <int> ] [ <int> ] + A [ i ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) B [ i ] [ i ] = B [ i - <int> ] [ i - <int> ] + A [ i ] [ i ] ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j < N - <int> ; j ++ ) B [ i ] [ j ] = max ( B [ i - <int> ] [ j ] , B [ i - <int> ] [ j - <int> ] ) + A [ i ] [ j ] ; int m = B [ N - <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) if ( B [ N - <int> ] [ i ] > m ) m = B [ N - <int> ] [ i ] ; printf ( <str> , m ) ; n -- ; } return <int> ; }", "label": 0, "id": 1137}
{"input": "int gcd ( long long int a , long long int b ) { int r ; r = a % b ; if ( r == <int> ) { return b ; } else return gcd ( b , r ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; int n1 , n2 , lcm ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; lcm = ( n1 * n2 ) / gcd ( n1 , n2 ) ; printf ( <str> , gcd ( n1 , n2 ) , lcm ) ; } return <int> ; }", "label": 1, "id": 1138}
{"input": "int main ( ) { int test , i , j , a [ <int> ] [ <int> ] , line ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & line ) ; for ( i = <int> ; i < line ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = line - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1139}
{"input": "int main ( ) { int t , a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( int i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1140}
{"input": "int findgcd ( unsigned long long int , unsigned long long int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned long long int i , a , b , k ; scanf ( <str> , & a , & b ) ; k = findgcd ( a , b ) ; i = ( a * b ) / k ; printf ( <str> , k , i ) ; printf ( <str> ) ; } } int findgcd ( unsigned long long int a , unsigned long long int b ) { if ( a % b == <int> ) return b ; else return findgcd ( b , a % b ) ; }", "label": 0, "id": 1141}
{"input": "long long int hc ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) hc ( a - b , b ) ; else hc ( a , b - a ) ; } int main ( ) { long long int a , b , lcm , hcf , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = hc ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } }", "label": 0, "id": 1142}
{"input": "int a [ <int> ] , n , l , i , j , k , upper , lower ; int main ( void ) { scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l * ( l + <int> ) / <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = l * ( l - <int> ) / <int> - <int> ; i >= <int> ; i -- ) { lower = <int> ; for ( k = <int> ; k < l ; k ++ ) { lower += k ; upper = lower + k ; if ( i >= lower && i <= upper ) { j = k + <int> ; break ; } } a [ i ] += max ( a [ i + j ] , a [ i + j + <int> ] ) ; } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 1143}
{"input": "int main ( ) { int t , n , m , <unk> , k , l , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & m , & <unk> ) ; k = minm ( n , m ) ; l = max ( n , m ) ; min = abs ( n - m ) ; for ( i = k ; i <= k + <unk> ; i ++ ) { if ( abs ( i - l ) < min ) min = abs ( i - l ) ; } printf ( <str> , min ) ; } return <int> ; }", "label": 1, "id": 1144}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { long int n ; scanf ( <str> , & n ) ; int j ; long int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; long int min = arr [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( min > arr [ j ] ) min = arr [ j ] ; } long int ans = ( n - <int> ) * min ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 1145}
{"input": "int main ( ) { int a [ MAX ] [ MAX ] , u , t , i , j ; scanf ( <str> , & u ) ; while ( u -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1146}
{"input": "int main ( ) { int testcase ; int input ; int b ; int m , n ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { scanf ( <str> , & input ) ; int * cell [ input ] ; for ( m = <int> ; m < input ; m ++ ) { int cell [ input ] [ m ] ; for ( n = <int> ; n <= m ; n ++ ) { scanf ( <str> , & b ) ; cell [ m ] [ n ] = b ; } } for ( m = input - <int> ; m >= <int> ; m -- ) { for ( n = m ; n >= <int> ; n -- ) { cell [ m ] [ n ] = cell [ m ] [ n ] + max ( cell [ m + <int> ] [ n ] , cell [ m + <int> ] [ n + <int> ] ) ; } } int ans = cell [ <int> ] [ <int> ] ; printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 1147}
{"input": "int main ( ) { int i , j , k , row , t , n ; long int sum , gr = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & row ) ; gr = <int> ; for ( j = <int> ; j <= row ; j ++ ) { sum = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & n ) ; sum += n ; } if ( sum > gr ) { gr = sum ; } } printf ( <str> , gr ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 1148}
{"input": "int main ( ) { int testcase , num1 , num2 , i , t , gcd , lcm ; scanf ( <str> , & testcase ) ; while ( testcase != <int> ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) t = num2 ; else t = num1 ; for ( i = <int> ; i <= t ; i ++ ) { if ( num1 % i == <int> && num2 % i == <int> ) gcd = i ; } lcm = ( num1 * num2 ) / gcd ; printf ( <str> , gcd , lcm ) ; testcase -- ; } return <int> ; }", "label": 1, "id": 1149}
{"input": "int main ( ) { int a [ maxi ] [ maxi ] , s [ maxi ] [ maxi ] , n , t ; int i , j , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = s [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( j == i ) s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else { if ( s [ i - <int> ] [ j ] > s [ i - <int> ] [ j - <int> ] ) s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } if ( s [ i ] [ j ] > max ) max = s [ i ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1150}
{"input": "int main ( ) { int t ; long long a , b , g , c , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = a ; c = b % a ; while ( c ) { d = c ; c = g % c ; g = d ; } printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 1151}
{"input": "int main ( ) { int k , a , sum , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; fflush ( stdin ) ; for ( t = <int> ; t < n ; t ++ ) { for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & a ) ; sum += a ; } } sum = sum / <int> ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 1152}
{"input": "int main ( void ) { int t ; unsigned long long a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , a / m * b ) ; } return <int> ; }", "label": 0, "id": 1153}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , t ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; int a [ t ] [ <int> ] ; int i , j ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int b [ t ] [ <int> ] ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { b [ i ] [ <int> ] = a [ i ] [ <int> ] + a [ i - <int> ] [ <int> ] ; } for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { b [ i ] [ j ] = a [ i ] [ j ] + max ( b [ i - <int> ] [ j ] , b [ i - <int> ] [ j - <int> ] ) ; } } int max = b [ t - <int> ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { if ( b [ t - <int> ] [ i ] > max ) max = b [ t - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1154}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int x = a * b ; printf ( <str> , gcd ( a , b ) , x / gcd ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 1155}
{"input": "main ( ) { int arr [ <int> ] [ <int> ] , out [ <int> ] , temp [ <int> ] , n , l , i , j , k ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & l ) ; arr [ <int> ] [ <int> ] = l ; for ( j = <int> ; j <= l ; j ++ ) for ( i = <int> ; i <= j ; i ++ ) scanf ( <str> , & arr [ j ] [ i ] ) ; temp [ <int> ] = l ; for ( i = <int> ; i <= l ; i ++ ) temp [ i ] = <int> ; while ( temp [ <int> ] != <int> ) { for ( i = <int> ; i <= temp [ <int> ] ; i ++ ) { if ( temp [ i ] < temp [ i + <int> ] ) temp [ i ] = temp [ i + <int> ] ; temp [ i ] += arr [ temp [ <int> ] ] [ i ] ; } temp [ <int> ] -- ; } out [ k ] = temp [ <int> ] ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , out [ i ] ) ; return <int> ; }", "label": 3, "id": 1156}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long n , i , j , count = <int> , k ; scanf ( <str> , & n ) ; long arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { k = arr [ i ] ; for ( j = i ; j < n ; j ++ ) { if ( arr [ j ] >= k ) { count ++ ; k = arr [ j ] ; } else k = <int> ; } } printf ( <str> , count ) ; } }", "label": 2, "id": 1157}
{"input": "int main ( ) { int T , M , N , temp , j ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & M , & N ) ; if ( M > N ) { temp = M ; M = N ; N = temp ; } if ( N % M == <int> ) { printf ( <str> , M , N ) ; continue ; } for ( j = N - M ; j >= <int> ; j -- ) { if ( M % j == <int> && N % j == <int> ) { printf ( <str> , j , <fp> * N * M / j ) ; break ; } } } return <int> ; }", "label": 0, "id": 1158}
{"input": "struct tree { int value ; int row ; int col ; long long sum ; struct tree * <unk> ; struct tree * <unk> ; } ; struct tree * queue [ MAX ] ; int front = - <int> ; int rear = - <int> ; int count = <int> ; void enqueue ( struct tree * ) ; struct tree * dequeue ( ) ; main ( ) { int test , i , row , j , k ; long long max ; struct tree * node , * root = NULL , * temp ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & row ) ; int a [ row ] [ row ] ; for ( j = <int> ; j < row ; j ++ ) for ( k = <int> ; k < row ; k ++ ) a [ j ] [ k ] = <int> ; for ( j = <int> ; j < row ; j ++ ) for ( k = <int> ; k < row ; k ++ ) { if ( k > j ) break ; scanf ( <str> , & a [ j ] [ k ] ) ; } node = ( struct tree * ) malloc ( sizeof ( struct tree ) ) ; node -> value = a [ <int> ] [ <int> ] ; node -> row = <int> ; node -> col = <int> ; node -> sum = a [ <int> ] [ <int> ] ; node -> <unk> = NULL ; node -> <unk> = NULL ; root = node ; max = node -> value ; while ( node -> row < row - <int> ) { printf ( <str> , count ) ; temp = ( struct tree * ) malloc ( sizeof ( struct tree ) ) ; node -> <unk> = temp ; temp -> value = a [ node -> row + <int> ] [ node -> col ] ; temp -> row = node -> row + <int> ; temp -> col = node -> col ; temp -> sum = temp -> value + node -> sum ; if ( temp -> sum > max ) max = temp -> sum ; enqueue ( temp ) ; temp = ( struct tree * ) malloc ( sizeof ( struct tree ) ) ; node -> <unk> = temp ; temp -> value = a [ node -> row + <int> ] [ node -> col + <int> ] ; temp -> row = node -> row + <int> ; temp -> col = node -> col + <int> ; temp -> sum = temp -> value + node -> sum ; if ( temp -> sum > max ) max = temp -> sum ; enqueue ( temp ) ; node = dequeue ( ) ; } printf ( <str> , max ) ; } return <int> ; } void enqueue ( struct tree * ptr ) { if ( ( front - rear ) == MAX - <int> || rear - front == <int> ) { return ; } else if ( front == - <int> && rear == - <int> ) { front = <int> ; rear = <int> ; queue [ front ] = ptr ; } else if ( front == MAX - <int> ) { front = <int> ; queue [ front ] = ptr ; } else { front ++ ; queue [ front ] = ptr ; } } struct tree * dequeue ( ) { struct tree * <unk> ; if ( rear == - <int> && front == - <int> ) { return NULL ; } else if ( rear == MAX - <int> ) { <unk> = queue [ rear ] ; rear = <int> ; return <unk> ; } else if ( rear == front ) { <unk> = queue [ rear ] ; rear = - <int> ; front = - <int> ; return <unk> ; } else { <unk> = queue [ rear ] ; rear ++ ; return <unk> ; } }", "label": 2, "id": 1159}
{"input": "void remov ( int a [ ] , int size , int x ) { int i , k ; int flag = <int> ; for ( i = <int> ; i < size ; i ++ ) if ( a [ i ] == x ) { flag = <int> ; break ; } if ( flag == <int> ) { for ( k = i ; k < size - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; } } int main ( ) { int t , n , i , count , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } while ( a [ <int> ] != <char> ) { if ( a [ <int> ] < a [ <int> ] ) { count = count + a [ <int> ] ; remov ( a , sizeof ( a ) / <int> , a [ <int> ] ) ; } else { count = count + a [ <int> ] ; remov ( a , sizeof ( a ) / <int> , a [ <int> ] ) ; } } printf ( <str> , count ) ; } }", "label": 3, "id": 1160}
{"input": "int main ( ) { long long int t , n , i , j , count ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { count = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j - <int> ] <= a [ j ] && j > <int> ) count ++ ; else continue ; } count = n + count ; printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 1161}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int a , b ; scanf ( <str> , & a , & b ) ; int min ; if ( a > b ) { min = b ; } else { min = a ; } int num ; for ( int i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { num = i ; } } int sum1 = a ; int sum2 = b ; while ( <int> ) { if ( sum1 == sum2 ) { break ; } else if ( sum1 > sum2 ) { sum2 = sum2 + b ; } else if ( sum2 > sum1 ) { sum1 = sum1 + a ; } } printf ( <str> , num , sum1 ) ; t -- ; } return <int> ; }", "label": 2, "id": 1162}
{"input": "int main ( ) { int n , a [ <int> ] [ <int> ] , c [ <int> ] [ <int> ] , max , t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i <= n ; i ++ ) c [ i ] [ <int> ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) c [ <int> ] [ i ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( c [ i - <int> ] [ j - <int> ] >= c [ i - <int> ] [ j ] ) c [ i ] [ j ] = c [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else c [ i ] [ j ] = c [ i - <int> ] [ j ] + a [ i ] [ j ] ; } max = <int> ; for ( j = <int> ; j <= n ; j ++ ) if ( c [ n ] [ j ] > max ) max = c [ n ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1163}
{"input": "long long int min ( long long int a , long long int b ) { if ( a > b ) return b ; else return a ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int p , q , l , g , i ; scanf ( <str> , & p , & q ) ; if ( p > q && p % q == <int> ) { g = q ; l = p ; } else if ( q > p && q % p == <int> ) { g = p ; l = q ; } else { for ( i = <int> ; i < min ( p , q ) ; i ++ ) { if ( p % i == <int> && q % i == <int> ) g = i ; } l = p * q ; } printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 1164}
{"input": "int min ( int a [ ] , int n ) { int i , x = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( x > a [ i ] ) x = a [ i ] ; } return x ; } int main ( ) { int t , n , a [ <int> ] , i , j , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } x = min ( a , n ) ; printf ( <str> , ( n - <int> ) * x ) ; } return <int> ; }", "label": 0, "id": 1165}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , x , y , gcd , lcm , c = <int> ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { c = b ; b = a % b ; a = c ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1166}
{"input": "struct node { int wt ; int row ; } tri [ SZ ] ; int main ( void ) { int n ; int num_rows , num_elem , last_row_index ; int i , row , j ; int max_sum = - <int> , sum , chosen , chosen1 , chosen2 , cur_node_index ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & num_rows ) ; num_elem = ( num_rows * ( num_rows + <int> ) ) / <int> ; last_row_index = ( ( num_rows - <int> ) * num_rows ) / <int> ; for ( i = <int> , row = <int> , j = row ; i < num_elem ; i ++ ) { scanf ( <str> , & tri [ i ] <fp> wt ) ; tri [ i ] <fp> row = row ; j -- ; if ( j < <int> ) { row ++ ; j = row ; } } row -= <int> ; for ( i = num_elem - <int> ; i >= last_row_index ; i -- ) { sum = tri [ i ] <fp> wt ; cur_node_index = i ; for ( j = row ; j > <int> ; j -- ) { chosen1 = cur_node_index - j + <int> ; chosen2 = cur_node_index - j ; chosen = chosen1 ; if ( ( tri [ chosen1 ] <fp> row != j - <int> ) || ( ( tri [ chosen2 ] <fp> row == j - <int> ) && ( tri [ chosen ] <fp> wt < tri [ chosen2 ] <fp> wt ) ) ) { chosen = chosen2 ; } sum += tri [ chosen ] <fp> wt ; cur_node_index = chosen ; } if ( sum > max_sum ) { max_sum = sum ; } } printf ( <str> , max_sum ) ; n -- ; } }", "label": 1, "id": 1167}
{"input": "int main ( ) { int i , t , a , b , c , lcm , gcd , temp1 , temp2 ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { a = <int> ; b = <int> ; c = <int> ; scanf ( <str> , & a , & b ) ; c = a * b ; if ( a > b ) { temp1 = b ; b = a ; a = temp1 ; } while ( b % a != <int> ) { temp2 = b % a ; b = a ; a = temp2 ; } gcd = a ; lcm = c / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1168}
{"input": "int main ( ) { int t , gcd , lcm , a , b , p , q ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; p = a , q = b ; lcm = ( a > b ? a : b ) ; while ( b > <int> ) { gcd = a % b ; a = b ; b = gcd ; } gcd = a ; lcm = ( p * q ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 1169}
{"input": "int main ( void ) { int i , j , k , l , row , repeat_factor = <int> , arr [ <int> ] [ <int> ] ; long int rowsum [ <int> ] , largestsum ; int N ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { largestsum = <int> ; scanf ( <str> , & row ) ; for ( j = <int> ; j < row ; j ++ ) { rowsum [ <int> * j ] = rowsum [ <int> * j + <int> ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } repeat_factor = <int> ; for ( j = row - <int> ; j >= <int> ; j -- ) { for ( l = j ; l >= <int> ; l -- ) { for ( k = repeat_factor - <int> ; k >= <int> ; k -- ) { rowsum [ repeat_factor * l + k ] += arr [ j ] [ l ] ; } } repeat_factor *= <int> ; } largestsum = rowsum [ <int> ] ; for ( l = <int> ; rowsum [ l ] != <int> ; l ++ ) largestsum = ( largestsum > rowsum [ l ] ) ? largestsum : rowsum [ l ] ; printf ( <str> , largestsum ) ; } return <int> ; }", "label": 3, "id": 1170}
{"input": "int main ( void ) { int t , a , b , c , j , i , gcd , lcm ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) c = a ; else c = b ; for ( j = <int> ; j <= c / <int> ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; } } printf ( <str> , gcd ) ; lcm = ( a * b ) / gcd ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 1171}
{"input": "int main ( ) { int i , j , k , n , a [ size ] [ size ] , x , y , sum ; x = <int> ; y = <int> ; sum = <int> ; printf ( <str> ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { printf ( <str> , i ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } k = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( i > <int> ) { x = sum + a [ i ] [ k + <int> ] ; y = sum + a [ i ] [ k ] ; if ( x > y ) { k = k + <int> ; sum = x ; } else { sum = y ; } } else { sum = a [ <int> ] [ <int> ] ; } } printf ( <str> , sum ) ; return <int> ; }", "label": 3, "id": 1172}
{"input": "int main ( ) { long num1 , num2 , i , l , count2 , t , j ; long count = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 >= num2 ) l = num2 ; else l = num1 ; for ( i = <int> ; i <= l ; i ++ ) { if ( num1 % i == <int> && num2 % i == <int> ) count = i ; } printf ( <str> , count ) ; printf ( <str> , num1 * ( num2 / count ) ) ; } return <int> ; }", "label": 2, "id": 1173}
{"input": "int main ( void ) { int t , n , a [ <int> ] , i , j , out [ <int> ] = { <int> } , k , min ; si ( t ) ; for ( i = <int> ; i < t ; i ++ ) { si ( n ) ; for ( j = <int> ; j < n ; j ++ ) si ( a [ j ] ) ; while ( n != <int> ) { min = <int> ; for ( j = <int> ; j < n ; j ++ ) if ( a [ j ] < a [ min ] ) min = j ; out [ i ] += a [ min ] ; if ( min != n - <int> || min != <int> ) if ( a [ min - <int> ] > a [ min + <int> ] ) n = deletion ( a , n , ( min - <int> ) ) ; else n = deletion ( a , n , ( min + <int> ) ) ; else if ( min == <int> ) n = deletion ( a , n , <int> ) ; else n = deletion ( a , n , ( n - <int> ) ) ; } } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , out [ i ] ) ; } int deletion ( int a [ ] , int n , int pos ) { int i ; for ( i = pos ; i < n - <int> ; i ++ ) { a [ i ] = a [ i + <int> ] ; } n -- ; return n ; }", "label": 2, "id": 1174}
{"input": "int main ( ) { int count , i , j ; unsigned long int x , N , T , A [ <int> ] ; scanf ( <str> , & T ) ; if ( T > <int> ) return ; while ( T -- ) { scanf ( <str> , & N ) ; count = N ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( i = <int> ; i < N ; i ++ ) { x = A [ i ] ; for ( j = i + <int> ; j < N ; j ++ ) { if ( x > A [ j ] ) { count ++ ; } x = A [ j ] ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 2, "id": 1175}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int n , a , b ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; int ans = gcd ( a , b ) ; printf ( <str> , ans , ( a * b ) / ans ) ; } return <int> ; }", "label": 1, "id": 1176}
{"input": "int main ( ) { int t ; long int n , i , j ; long long int a [ <int> ] , min , k ; scanf ( <str> , & t ) ; while ( t -- ) { { scanf ( <str> , & n ) ; } for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = <int> ; j = n ; while ( -- n ) { if ( min > a [ n ] ) { k = min ; min = a [ n ] ; a [ n ] = k ; } } printf ( <str> , ( j * min - min ) ) ; } return <int> ; }", "label": 1, "id": 1177}
{"input": "int main ( ) { long long int a , b , l , n , h ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; for ( h = a < b ? a : b ; h >= <int> ; h -- ) { if ( a % h == <int> && b % h == <int> ) break ; } l = a * b / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 2, "id": 1178}
{"input": "int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int n ; int large ( int i , int j ) { if ( i == n ) return a [ i ] [ j ] ; else if ( b [ i ] [ j ] == - <int> ) b [ i ] [ j ] = a [ i ] [ j ] + ( ( ( large ( i + <int> , j ) >= large ( i + <int> , j + <int> ) ) ? large ( i + <int> , j ) : large ( i + <int> , j + <int> ) ) ) ; return b [ i ] [ j ] ; } int main ( ) { int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = - <int> ; } return large ( <int> , <int> ) ; }", "label": 3, "id": 1179}
{"input": "int main ( ) { int i , T , a , b , j , c , <unk> , larg , d ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { c = <int> ; scanf ( <str> , & a , & b ) ; <unk> = a ; larg = b ; if ( b < a ) { <unk> = b ; larg = a ; } for ( j = <int> ; j <= <unk> ; j ++ ) { if ( a % j == <int> && b % j == <int> ) c = j ; } printf ( <str> , c ) ; c = larg ; d = <int> ; while ( c <= a * b ) { if ( c % a == <int> && c % b == <int> ) { d = c ; break ; } c ++ ; } printf ( <str> , d ) ; } return <int> ; }", "label": 2, "id": 1180}
{"input": "int main ( ) { int i , j , t , a , b , g ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } j = <int> ; while ( j <= a ) { if ( a % j == <int> && b % j == <int> ) g = j ; j ++ ; } printf ( <str> , g , ( a * b / g ) ) ; } }", "label": 1, "id": 1181}
{"input": "int main ( ) { int t , row , i , j , num , sum , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & row ) ; sum = <int> ; for ( i = <int> ; i <= row ; i ++ ) { scanf ( <str> , & num ) ; max = num ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & num ) ; if ( max < num ) max = num ; } sum += max ; } printf ( <str> , sum - <int> ) ; } return <int> ; }", "label": 1, "id": 1182}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int n , i , j , k ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & n ) ; { for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } } return <int> ; }", "label": 1, "id": 1183}
{"input": "int main ( int argc , char * argv [ ] ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } int mini = <int> ; for ( int i = <int> ; i < n ; i ++ ) { if ( a [ i ] < mini ) { mini = a [ i ] ; } } printf ( <str> , mini * ( n - <int> ) ) ; } }", "label": 1, "id": 1184}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , c [ <int> ] ; int n , i , j , k , m , x , p = <int> , v , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n - <int> ; i ++ ) { m = a [ i ] [ <int> ] + a [ i + <int> ] [ <int> ] ; k = m + a [ i + <int> ] [ <int> ] ; c [ p ] = m > k ? m : k ; p ++ ; } x = p ; v = c [ <int> ] ; for ( p = <int> ; p < x ; p ++ ) { if ( c [ p ] > v ) v = c [ p ] ; } printf ( <str> , v ) ; t -- ; } return <int> ; }", "label": 3, "id": 1185}
{"input": "int main ( ) { int t , i ; long int n , j ; long int x [ <int> ] , w [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & x [ j ] ) ; } int count = <int> ; for ( j = n - <int> ; j >= <int> ; j -- ) { if ( j == n - <int> ) { w [ j ] = <int> ; } else if ( x [ j ] < x [ j + <int> ] ) { w [ j ] = w [ j + <int> ] + <int> ; } else if ( x [ j ] == x [ j + <int> ] ) w [ j ] = w [ j + <int> ] ; else w [ j ] = <int> ; count = count + w [ j ] ; } printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 1186}
{"input": "int HCF ( int x , int y ) { if ( x == <int> ) return y ; else return HCF ( y % x , x ) ; } int main ( void ) { int hf , lm ; int t ; int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hf = HCF ( a , b ) ; printf ( <str> , hf , a * b / hf ) ; } return <int> ; }", "label": 1, "id": 1187}
{"input": "int main ( ) { int t ; int a , b , gcd , keep , temp ; int small , big , remainder ; long long int product , lcm ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; product = ( a * b ) ; small = ( a < b ) ? a : b ; big = ( a > b ) ? a : b ; if ( big % small == <int> ) gcd = small ; else { remainder = ( big % small ) ; keep = small ; while ( remainder != <int> ) { temp = remainder ; remainder = keep % remainder ; keep = temp ; } gcd = keep ; } lcm = product / ( long long int ) gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 1188}
{"input": "int main ( ) { int t , i , j , k , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int dat [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & dat [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( dat [ i ] [ j ] > dat [ i ] [ j + <int> ] ) { dat [ i - <int> ] [ j ] += dat [ i ] [ j ] ; } else dat [ i - <int> ] [ j ] += dat [ i ] [ j + <int> ] ; } } printf ( <str> , dat [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1189}
{"input": "int main ( ) { int t , n , a [ <int> ] , z = <int> , i , j , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < z ) { z = a [ j ] ; } } x = z * ( n - <int> ) ; printf ( <str> , x ) ; z = <int> ; } }", "label": 3, "id": 1190}
{"input": "int main ( ) { int t , l , h ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a , & b ) ; for ( l = a > b ? a : b ; l <= a * b ; ++ l ) { if ( l % a == <int> && l % b == <int> ) break ; } for ( h = a < b ? a : b ; h >= <int> ; -- h ) { if ( a % h == <int> && b % h == <int> ) break ; } printf ( <str> , h , l ) ; } return <int> ; }", "label": 2, "id": 1191}
{"input": "int main ( ) { long T , N , countSubSet = <int> , stretch , prev , next ; long <unk> [ <int> ] ; long count = <int> ; int i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; stretch = <int> ; scanf ( <str> , & prev ) ; if ( N == <int> ) { <unk> [ i ] = <int> ; continue ; } N -- ; countSubSet = <int> ; while ( N -- ) { scanf ( <str> , & next ) ; if ( prev < next ) { prev = next ; stretch ++ ; } else { prev = next ; if ( stretch == <int> ) countSubSet ++ ; else { countSubSet += ( stretch * ( stretch + <int> ) / <int> ) ; stretch = <int> ; } } } countSubSet += ( stretch * ( stretch + <int> ) / <int> ) ; <unk> [ i ] = countSubSet ; countSubSet = <int> ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , <unk> [ i ] ) ; return <int> ; }", "label": 0, "id": 1192}
{"input": "int main ( ) { int total ; scanf ( <str> , & total ) ; while ( total -- ) { int n , i ; long long cost ; scanf ( <str> , & n ) ; long min , a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 1193}
{"input": "void main ( ) { int t , a , b , h , l , g , i ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; for ( i = a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { l = i ; break ; } } if ( a < b ) h = a ; else h = b ; for ( i = h ; i <= a * b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } } printf ( <str> , l , g ) ; t -- ; } }", "label": 2, "id": 1194}
{"input": "int n ; int arr [ <int> ] [ <int> ] ; int path ( int i , int j ) { if ( i + <int> == n - <int> ) { int sum1 = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; int sum2 = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; if ( sum1 > sum2 ) return sum1 ; return sum2 ; } if ( path ( i + <int> , j ) > path ( i + <int> , j + <int> ) ) return ( arr [ i ] [ j ] + path ( i + <int> , j ) ) ; return ( arr [ i ] [ j ] + path ( i + <int> , j + <int> ) ) ; } int main ( void ) { int T ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & n ) ; int k , m ; for ( k = <int> ; k < n ; k ++ ) { for ( m = <int> ; m <= k ; m ++ ) scanf ( <str> , & arr [ k ] [ m ] ) ; } printf ( <str> , path ( <int> , <int> ) ) ; T -- ; } return <int> ; }", "label": 2, "id": 1195}
{"input": "int fastint ( ) { int r = <int> ; char c = getchar ( ) ; while ( c == <char> || c == <char> ) c = getchar ( ) ; while ( c != <char> && c != <char> ) { r = ( r * <int> ) + ( c - <char> ) ; c = getchar ( ) ; } return r ; } void getTriangle ( int buffer [ <int> ] [ <int> ] , int limit ) { int i , j ; for ( i = <int> ; i <= limit ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) buffer [ i ] [ j ] = fastint ( ) ; } } void printTriangle ( int buffer [ <int> ] [ <int> ] , int limit ) { int i , j ; for ( i = <int> ; i <= limit ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) printf ( <str> , buffer [ i ] [ j ] ) ; printf ( <str> ) ; } } void zeroTriangle ( int buffer [ <int> ] [ <int> ] , int limit ) { int i , j ; for ( i = <int> ; i <= limit ; i ++ ) for ( j = <int> ; j < i ; j ++ ) buffer [ i ] [ j ] = <int> ; } int tsum_mr ( int buffer [ <int> ] [ <int> ] , int limit ) { int i , j ; for ( i = limit ; i >= <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { buffer [ i - <int> ] [ j ] = max ( ( buffer [ i ] [ j ] + buffer [ i - <int> ] [ j ] ) , ( buffer [ i ] [ j + <int> ] + buffer [ i - <int> ] [ j ] ) ) ; } return buffer [ <int> ] [ <int> ] ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int i , j , k ; i = fastint ( ) ; int buffer [ <int> ] [ <int> ] ; while ( i ) { k = fastint ( ) ; getTriangle ( buffer , k ) ; printf ( <str> , tsum_mr ( buffer , k ) ) ; i -- ; } return <int> ; }", "label": 3, "id": 1196}
{"input": "int comparetor ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int loop = <int> , max_loop = <int> , g = <int> ; scanf ( <str> , & loop ) ; int sum1 [ <int> ] ; int sum2 [ <int> ] ; int arr [ <int> ] [ <int> ] ; for ( g = <int> ; g < loop ; g ++ ) { int lines = <int> , i = <int> , j = <int> ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } sum1 [ <int> ] = arr [ <int> ] [ <int> ] ; sum1 [ <int> ] = - <int> ; for ( i = <int> ; i < lines ; i ++ ) { int num ; if ( i == lines - <int> ) { qsort ( sum1 , <int> , sizeof ( int ) , comparetor ) ; printf ( <str> , sum1 [ <int> ] ) ; } else { int count = <int> , cum = <int> ; while ( sum1 [ cum ] != - <int> ) { if ( i >= <int> && cum > i ) { sum2 [ count ] = sum1 [ cum ] + arr [ i + <int> ] [ i + <int> ] ; count ++ ; } else { sum2 [ count ] = sum1 [ cum ] + arr [ i + <int> ] [ cum ] ; sum2 [ count + <int> ] = sum1 [ cum ] + arr [ i + <int> ] [ cum + <int> ] ; count = count + <int> ; } cum ++ ; } num = count ; } int l = <int> ; for ( l = <int> ; l < num ; l ++ ) sum1 [ l ] = sum2 [ l ] ; sum1 [ l ] = - <int> ; for ( l = <int> ; l < num ; l ++ ) sum2 [ l ] = <int> ; } } return <int> ; }", "label": 3, "id": 1197}
{"input": "int main ( ) { unsigned short * a , n , t , m , p , q , k , s , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; unsigned short s = n * ( n + <int> ) / <int> ; a = ( short * ) malloc ( s * sizeof ( short ) ) ; for ( i = <int> ; i < s ; ++ i ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < s ; ++ i ) { printf ( <str> , a [ i ] ) ; } printf ( <str> ) ; for ( i = n - <int> ; i > <int> ; -- i ) { m = i * ( i - <int> ) / <int> ; printf ( <str> , i ) ; for ( k = <int> ; k < s ; ++ k ) printf ( <str> , a [ k ] ) ; printf ( <str> ) ; for ( j = <int> ; j < i ; ++ j ) { p = a [ m + j ] + a [ m + i + j ] ; q = a [ m + j ] + a [ m + i + j + <int> ] ; if ( p > q ) a [ m + j ] = p ; else a [ m + j ] = q ; printf ( <str> ) ; for ( k = <int> ; k < s ; ++ k ) printf ( <str> , a [ k ] ) ; printf ( <str> ) ; } } for ( i = <int> ; i < m ; ++ i ) printf ( <str> , a [ i ] ) ; printf ( <str> , a [ <int> ] ) ; free ( a ) ; } return <int> ; }", "label": 0, "id": 1198}
{"input": "int arr [ <int> ] [ <int> ] ; int max = <int> ; void get_max ( int x , int y , int n ) { static int total = <int> ; if ( x == n || y == n ) { if ( x == n && total > max ) { max = total ; } return ; } else { total = total + arr [ x ] [ y ] ; get_max ( x + <int> , y + <int> , n ) ; get_max ( x + <int> , y , n ) ; total -= arr [ x ] [ y ] ; } } int main ( int argc , char * * argv ) { int t = <int> , i = <int> , n = <int> , j = <int> , k = <int> ; int <unk> = <int> , sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } for ( j = <int> ; j < n ; j ++ ) { sum = sum + arr [ j ] [ j + <int> ] ; } get_max ( <int> , <int> , n ) ; printf ( <str> , max ) ; max = <int> ; } return ( EXIT_SUCCESS ) ; }", "label": 2, "id": 1199}
{"input": "int main ( ) { int T ; long int A , B , l , i , GCD , LCM ; scanf ( <str> , & T ) ; { scanf ( <str> , & A , & B ) ; if ( A > B ) l = A ; else l = B ; i = l ; while ( <int> ) { if ( i % A == <int> && i % B == <int> ) { LCM = l ; break ; } else i = i + l ; } while ( B ) { l = A % B ; A = B ; B = l ; } GCD = A ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 1, "id": 1200}
{"input": "int main ( void ) { int t , a , b , gcd = <int> , c , d , i , lcm = <int> , a1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; d = a * b ; while ( a != <int> ) { c = a ; a = b % a ; b = c ; } gcd = b ; lcm = d / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1201}
{"input": "int matrix [ <int> ] [ <int> ] ; int find_sum ( int , int , int ) ; int main ( ) { int count ; int lines ; int i , j ; scanf ( <str> , & count ) ; while ( count > <int> ) { i = <int> ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } } printf ( <str> , find_sum ( lines , <int> , <int> ) ) ; count -- ; } return <int> ; } int find_sum ( int lines , int i , int j ) { int sum = <int> ; int max_sum = <int> ; if ( i < lines && j <= i ) { max_sum = find_sum ( lines , i + <int> , j ) ; sum = find_sum ( lines , i + <int> , j + <int> ) ; if ( max_sum < sum ) max_sum = sum ; max_sum += matrix [ i ] [ j ] ; } return max_sum ; }", "label": 3, "id": 1202}
{"input": "int main ( ) { int A , B , T , i , t , z , y ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; z = A * B ; if ( A > B ) { do { t = A % B ; A = B ; B = t ; } while ( B != <int> ) ; } else if ( B > A ) { do { t = B % A ; B = A ; A = t ; } while ( A != <int> ) ; } if ( A > B ) { y = z / A ; printf ( <str> , A , y ) ; } else if ( B > A ) { y = z / B ; printf ( <str> , B , y ) ; } } }", "label": 1, "id": 1203}
{"input": "int main ( ) { unsigned int T , j , c ; T = j = c = <int> ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { long int N , i ; long long int A , B , op , c ; N = A = B = op = c = i = <int> ; scanf ( <str> , & N ) ; scanf ( <str> , & A , & B ) ; if ( A >= B ) { c = B ; op += B ; } else { c = A ; op += A ; } for ( i = <int> ; i < N ; i ++ ) { A = <int> ; scanf ( <str> , & A ) ; if ( c >= A ) { c = A ; op += A ; } else { op += c ; } } printf ( <str> , op ) ; } return <int> ; }", "label": 1, "id": 1204}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1205}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , res ; scanf ( <str> , & a , & b ) ; res = gcd ( a , b ) ; printf ( <str> , res , ( a * b ) / res ) ; } return <int> ; }", "label": 1, "id": 1206}
{"input": "int main ( ) { int T , i ; long int A , B , gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; for ( i = <int> ; i <= A && i <= B ; ++ i ) { if ( A % i == <int> && B % i == <int> ) { gcd = i ; } } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 1207}
{"input": "int main ( ) { int i , j , rows ; int loop , sum ; scanf ( <str> , & loop ) ; while ( loop -- ) { scanf ( <str> , & rows ) ; int array [ rows ] [ rows ] ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i - <int> >= <int> && j <= i - <int> ) { if ( j - <int> >= <int> ) array [ i ] [ j ] += array [ i - <int> ] [ j ] >= array [ i - <int> ] [ j - <int> ] ? array [ i - <int> ] [ j ] : array [ i - <int> ] [ j - <int> ] ; else array [ i ] [ j ] += array [ i - <int> ] [ j ] ; } else if ( j - <int> >= <int> && i - <int> >= <int> ) array [ i ] [ j ] += array [ i - <int> ] [ j - <int> ] ; } sum = <int> ; for ( j = <int> ; j < rows ; j ++ ) sum = ( sum > array [ rows - <int> ] [ j ] ) ? sum : array [ rows - <int> ] [ j ] ; printf ( <str> , sum ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , array [ i ] [ j ] ) ; } return <int> ; }", "label": 1, "id": 1208}
{"input": "long array [ <int> ] [ <int> ] ; long totals [ <int> ] [ <int> ] ; void findMaxSum ( int starti , int startj , int row , int size ) { long temp = ( totals [ starti ] [ startj ] == <int> ) ? array [ starti ] [ startj ] : totals [ starti ] [ startj ] ; long sum1 = temp , sum2 = temp ; if ( starti + <int> < size ) { sum1 = temp + totals [ starti + <int> ] [ startj ] ; } if ( starti + <int> < size && startj + <int> <= row + <int> ) { sum2 = temp + totals [ starti + <int> ] [ startj + <int> ] ; } totals [ starti ] [ startj ] = ( sum1 > sum2 ) ? sum1 : sum2 ; if ( startj > <int> ) findMaxSum ( starti , startj - <int> , row , size ) ; if ( startj == <int> && starti > <int> ) findMaxSum ( starti - <int> , row - <int> , row - <int> , size ) ; return ; } int main ( ) { int totalInputs , a , i , j , size ; long answers [ <int> ] ; scanf ( <str> , & totalInputs ) ; for ( a = <int> ; a < totalInputs ; a ++ ) { scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) totals [ i ] [ j ] = <int> ; for ( i = <int> ; i < size ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; findMaxSum ( size - <int> , size - <int> , size - <int> , size ) ; answers [ a ] = totals [ <int> ] [ <int> ] ; } for ( a = <int> ; a < totalInputs ; a ++ ) printf ( <str> , answers [ a ] ) ; return <int> ; }", "label": 0, "id": 1209}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int num1 , num2 , gcd , lcm , numerator , denominator , remainder ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( num1 * num2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 1210}
{"input": "void sum_triangle ( ) { int i , j , row ; scanf ( <str> , & row ) ; int arr [ row ] [ row ] ; int control [ row ] [ row ] ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; if ( i == ( row - <int> ) ) control [ i ] [ j ] = arr [ i ] [ j ] ; } } for ( i = row - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { control [ i ] [ j ] = ( arr [ i ] [ j ] ) + max ( control [ i + <int> ] [ j ] , control [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , control [ <int> ] [ <int> ] ) ; } int max ( int i , int j ) { if ( i > j ) return i ; else return j ; } int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; t ++ ) { sum_triangle ( ) ; } return <int> ; }", "label": 2, "id": 1211}
{"input": "long int gcd1 ( long int a , long int b ) { if ( a % b == <int> ) return b ; else return gcd1 ( b , a % b ) ; } int main ( void ) { int t ; long int a , b , lcm , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = gcd1 ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1212}
{"input": "void main ( ) { int t , size ; int i , j , sum , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & size ) ; int tri [ size ] [ size ] ; max = sum = <int> ; for ( i = <int> ; i < size ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; for ( i = <int> ; i < size ; i ++ ) { sum = sum + tri [ i ] [ <int> ] ; } max = sum ; for ( j = <int> ; j < size ; j ++ ) { for ( i = size - <int> ; i >= j ; i -- ) { sum = sum + tri [ i ] [ j ] - tri [ i ] [ j - <int> ] ; if ( sum > max ) max = sum ; } } printf ( <str> , max ) ; } }", "label": 1, "id": 1213}
{"input": "int main ( void ) { int i , T , N , min , temp , ans ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; scanf ( <str> , & min ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < min ) min = temp ; } ans = min * ( N - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 1214}
{"input": "int main ( ) { int t , a , b , i , gcd , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a <= b ) min = a ; else min = b ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } printf ( <str> , gcd , ( ( a * b ) / gcd ) ) ; } return <int> ; }", "label": 1, "id": 1215}
{"input": "int main ( ) { int a , b , t , i , g , l , r , n , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } g = d ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 1216}
{"input": "long long int fact ( int num ) { if ( num == <int> ) return <int> ; else return num * fact ( num - <int> ) ; } int main ( void ) { int t , n , i , top , lb , ub , * a ; long long int cnt ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; cnt = n ; top = lb = ub = <int> ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i > <int> && a [ i ] > a [ i - <int> ] ) ub ++ ; else if ( lb != ub ) { cnt += fact ( ub - lb ) ; lb = ub = i ; } } if ( lb != ub ) cnt += fact ( ub - lb ) ; printf ( <str> , cnt ) ; free ( a ) ; } return <int> ; }", "label": 1, "id": 1217}
{"input": "int main ( ) { int t , n , max ; scanf ( <str> , & t ) ; while ( t -- ) { int i , a [ n ] [ n ] , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( j = i + <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; } max = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) { if ( j == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else { if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } printf ( <str> , max ) ; } }", "label": 1, "id": 1218}
{"input": "main ( ) { int t , d [ <int> ] [ <int> ] ; int i , j , k , row , max ; scanf ( <str> , & t ) ; scanf ( <str> , & row ) ; for ( i = <int> ; i <= t ; i ++ ) { for ( j = <int> ; j < row ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & d [ j ] [ k ] ) ; } } } for ( j = row - <int> ; j >= <int> ; j -- ) { for ( k = j ; k >= <int> ; k -- ) { max = d [ j ] [ k ] > d [ j ] [ k - <int> ] ? d [ j ] [ k ] : d [ j ] [ k - <int> ] ; d [ j - <int> ] [ k - <int> ] += max ; } } printf ( <str> , d [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 1, "id": 1219}
{"input": "int main ( ) { int a , b , i , j , T ; scanf ( <str> , & T ) ; int * k = ( int * ) malloc ( T * sizeof ( int ) ) ; int * l = ( int * ) malloc ( T * sizeof ( int ) ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & a , & b ) ; int x = a , y = b ; while ( b != <int> ) { j = b ; b = a % b ; a = j ; } k [ i - <int> ] = a ; l [ i - <int> ] = x * y / k [ i - <int> ] ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , k [ i ] , l [ i ] ) ; return <int> ; }", "label": 1, "id": 1220}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; long long out [ t ] ; for ( int i = <int> ; i < t ; i ++ ) { long long inp ; scanf ( <str> , & inp ) ; long long a [ inp ] [ inp ] ; for ( int j = <int> ; j < inp ; j ++ ) { for ( int k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( long j = inp - <int> ; j >= <int> ; j -- ) { for ( long k = <int> ; k < inp ; k ++ ) { a [ j ] [ k ] += ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) ? a [ j + <int> ] [ k ] : a [ j + <int> ] [ k + <int> ] ; } } out [ i ] = a [ <int> ] [ <int> ] ; } for ( int i = <int> ; i < t ; i ++ ) printf ( <str> , out [ i ] ) ; return <int> ; }", "label": 3, "id": 1221}
{"input": "int arr [ <int> ] [ <int> ] ; int main ( ) { int j , i , lines , temp , cases , largest ; int a , b ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < <int> ; i ++ ) { arr [ i ] [ <int> ] = <int> ; arr [ i ] [ i + <int> ] = <int> ; } while ( cases -- ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i <= lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp ) ; a = arr [ i - <int> ] [ j ] ; b = arr [ i - <int> ] [ j - <int> ] ; arr [ i ] [ j ] = ( a > b ? a : b ) + temp ; } } largest = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > largest ) largest = arr [ lines ] [ i ] ; printf ( <str> , largest ) ; } return <int> ; }", "label": 0, "id": 1222}
{"input": "int sum ( int a [ <int> ] [ <int> ] , int i , int j ) ; int N ; int main ( ) { int T , i , j , k , a [ <int> ] [ <int> ] , result ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } result = sum ( a , <int> , <int> ) ; printf ( <str> , result ) ; } return <int> ; } int sum ( int a [ <int> ] [ <int> ] , int i , int j ) { int b [ <int> ] [ <int> ] = { { <int> } , { <int> } } ; int t1 , t2 , t ; if ( i > N ) { return <int> ; } if ( b [ i ] [ j ] != <int> ) { return b [ i ] [ j ] ; } t1 = sum ( a , i + <int> , j ) ; t2 = sum ( a , i + <int> , j + <int> ) ; t = MAX ( t1 , t2 ) + a [ i ] [ j ] ; b [ i ] [ j ] = t ; return t ; }", "label": 3, "id": 1223}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int n , i ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int j = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( j > a [ i ] ) j = a [ i ] ; printf ( <str> , j * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1224}
{"input": "int main ( ) { int a , i ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { int b , c , j , gcd , lcm , m ; scanf ( <str> , & b , & c ) ; if ( b > c ) m = c ; else m = b ; for ( j = <int> ; j <= m ; j ++ ) { if ( b % j == <int> && c % j == <int> ) gcd = j ; } lcm = c * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1225}
{"input": "void main ( ) { int t , i , j , c , <unk> , <unk> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & <unk> ) ; int arr [ <unk> ] ; c = <int> ; <unk> = <int> ; scanf ( <str> , & arr [ <int> ] ) ; for ( j = <int> ; j < <unk> ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( arr [ j ] >= arr [ j - <int> ] ) { c ++ ; <unk> += c ; } else { c = <int> ; <unk> ++ ; } } printf ( <str> , <unk> ) ; } }", "label": 0, "id": 1226}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i < t ; i ++ ) { long long int n ; scanf ( <str> , & n ) ; long long int u [ n ] ; long long int g ; for ( g = <int> ; g < n ; g ++ ) { scanf ( <str> , & u [ g ] ) ; } for ( g = <int> ; g < n ; g ++ ) { if ( u [ <int> ] > u [ g ] ) { u [ <int> ] = u [ g ] ; } } printf ( <str> , u [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1227}
{"input": "main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int A , B , GCD , LCM , r ; scanf ( <str> , & A , & B ) ; long long int x = B , y = A ; while ( B != <int> ) { r = A % B ; A = B ; B = r ; } GCD = A ; B = x ; A = y ; LCM = ( A * B ) / GCD ; printf ( <str> , GCD , LCM ) ; } }", "label": 1, "id": 1228}
{"input": "int main ( ) { int i , j , k , t , n , a [ <int> ] , p ; long int sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; scanf ( <str> , a [ <int> ] ) ; sum = a [ <int> ] ; p = <int> ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ k ] ) ; } if ( a [ p ] > a [ p + <int> ] ) sum = sum + a [ p ] ; else { sum = sum + a [ p + <int> ] ; p = p + <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 1229}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , ans ; ans = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; scanf ( <str> , & a [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] > a [ i - <int> ] ) { ans += a [ i - <int> ] ; } else { ans += a [ i ] ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 1230}
{"input": "int main ( ) { int t , x ; int a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] , i , j , n , k , l , b [ <int> ] ; scanf ( <str> , & t ) ; for ( x = <int> ; x < t ; x ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { { for ( j = <int> ; j <= i ; j ++ ) s [ i ] [ j ] = a [ i ] [ j ] ; } } for ( k = n - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { if ( s [ k + <int> ] [ l ] >= s [ k + <int> ] [ l + <int> ] ) { s [ k ] [ l ] = s [ k + <int> ] [ l ] + s [ k ] [ l ] ; } else if ( s [ k + <int> ] [ l ] <= s [ k + <int> ] [ l + <int> ] ) { s [ k ] [ l ] = s [ k + <int> ] [ l + <int> ] + s [ k ] [ l ] ; } } } b [ x ] = s [ <int> ] [ <int> ] ; } for ( x = <int> ; x < t ; x ++ ) { printf ( <str> , b [ x ] ) ; } return <int> ; }", "label": 3, "id": 1231}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1232}
{"input": "int sum ( int ) ; int a [ <int> ] [ <int> ] ; int main ( ) { int s = <int> , n , i , j , c ; printf ( <str> ) ; scanf ( <str> , & c ) ; while ( c != <int> ) { printf ( <str> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j > i ) a [ i ] [ j ] = <int> ; else if ( i > n - <int> ) a [ i ] [ j ] = <int> ; else scanf ( <str> , & a [ i ] [ j ] ) ; } } s = sum ( n - <int> ) ; printf ( <str> , s ) ; c -- ; } } int sum ( int n ) { int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = n - <int> ; j >= <int> ; j -- ) { if ( ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) >= ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } } return a [ <int> ] [ <int> ] ; }", "label": 1, "id": 1233}
{"input": "main ( ) { int T , i , a , b , k , j , l ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a && j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) k = j ; } l = ( a * b ) / k ; printf ( <str> , k , l ) ; } return <int> ; }", "label": 1, "id": 1234}
{"input": "int main ( ) { int t , a , b , lcm , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } lcm = b ; while ( lcm % a != <int> ) lcm += b ; if ( lcm == a * b ) { printf ( <str> , <int> , lcm ) ; continue ; } gcd = a ; while ( b % gcd != <int> || a % gcd != <int> ) gcd -- ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 1235}
{"input": "int main ( ) { int i , j , k , count [ max ] ; int T , A [ max ] , N , L , M ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { count [ i ] = <int> ; scanf ( <str> , & N ) ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & A [ j ] ) ; L = j ; M = j ; k = j ; while ( A [ M ] >= A [ L ] && k < N ) { L = M ; M = k ; k ++ ; if ( A [ M ] >= A [ L ] ) count [ i ] ++ ; } ; } } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , count [ i ] ) ; return <int> ; }", "label": 3, "id": 1236}
{"input": "long long int hcf ( long long int , long long int ) ; long long int hcf ( long long int a , long long int b ) { if ( a == <int> ) return b ; else return hcf ( b % a , a ) ; } int main ( ) { long long int t , a , b , gcd ; long long int lcm ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( b / gcd ) * a ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1237}
{"input": "int main ( ) { int t ; sf ( <str> , & t ) ; while ( t -- ) { int a , b ; sf ( <str> , & a , & b ) ; int n = a , m = b ; while ( a % b != <int> ) { int t = a % b ; a = b ; b = t ; } printf ( <str> , b , n * m / b ) ; } }", "label": 1, "id": 1238}
{"input": "int main ( void ) { long long int t , n , i , k , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; s = n ; for ( i = <int> ; i < n - <int> ; i ++ ) { k = <int> ; while ( i < n - <int> && a [ i + <int> ] >= a [ i ] ) { k ++ ; i ++ ; } s += k * ( k + <int> ) / <int> ; } printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 1239}
{"input": "main ( ) { int t ; long int a , b , h , l , c ; scanf ( <str> , & t ) ; while ( t -- ) { h = <int> ; scanf ( <str> , & a , & b ) ; for ( c = <int> ; c < a + b ; c ++ ) { if ( a % c == <int> && b % c == <int> ) h = h * c ; } l = a * b / h ; printf ( <str> , h , l ) ; } }", "label": 2, "id": 1240}
{"input": "int main ( ) { int T , i , z ; scanf ( <str> , & T ) ; int a [ T ] , b [ T ] ; for ( i = <int> ; i < T ; i ++ ) scanf ( <str> , & a [ i ] , & b [ i ] ) ; for ( i = <int> ; i < T ; i ++ ) { z = gcd ( a [ i ] , b [ i ] ) ; printf ( <str> , z , ( a [ i ] * b [ i ] / z ) ) ; } } int gcd ( int a , int b ) { int temp , rem ; if ( a > b ) { temp = a ; a = b ; b = temp ; } rem = b % a ; if ( rem == <int> ) return ( a ) ; else { b = a ; a = rem ; return ( gcd ( a , b ) ) ; } }", "label": 1, "id": 1241}
{"input": "void createsolution ( long * sol , long curindex , long currow , long * n ) { sol [ <int> ] = curindex ; if ( ( curindex + <int> ) <= currow ) { sol [ <int> ] = curindex + <int> ; * n = <int> ; return ; } * n = <int> ; return ; } void helper ( long * * triangle , long rows , long currow , long curindex , long cursum , long * sum ) { if ( rows == currow ) { if ( cursum > * sum ) * sum = cursum ; return ; } else { long sol [ <int> ] , n , i , s ; createsolution ( sol , curindex , currow , & n ) ; for ( i = <int> ; i < n ; i ++ ) { cursum += triangle [ currow ] [ sol [ i ] ] ; helper ( triangle , rows , currow + <int> , sol [ i ] , cursum , sum ) ; cursum -= triangle [ currow ] [ sol [ i ] ] ; } } } long process ( long * * triangle , long rows ) { long sum = - <int> ; helper ( triangle , rows , <int> , <int> , <int> , & sum ) ; return sum ; } int main ( ) { long testcases , rows , * * triangle , i , j , k , result ; scanf ( <str> , & testcases ) ; for ( k = <int> ; k < testcases ; k ++ ) { scanf ( <str> , & rows ) ; triangle = ( long * * ) malloc ( rows * sizeof ( long * ) ) ; for ( i = <int> ; i < rows ; i ++ ) { triangle [ i ] = ( long * ) malloc ( ( i + <int> ) * sizeof ( long ) ) ; for ( j = <int> ; j < ( i + <int> ) ; j ++ ) scanf ( <str> , & triangle [ i ] [ j ] ) ; } result = process ( triangle , rows ) ; printf ( <str> , result ) ; for ( i = <int> ; i < rows ; i ++ ) { free ( triangle [ i ] ) ; triangle [ i ] = NULL ; } free ( triangle ) ; } return <int> ; }", "label": 2, "id": 1242}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , g ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; } int gcd ( long long int a , long long int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; }", "label": 0, "id": 1243}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , t , n , i , j , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1244}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , lcm , k , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; lcm = ( a * b ) / k ; printf ( <str> , k , lcm ) ; } } int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { gcd ( b , b % a ) ; } }", "label": 1, "id": 1245}
{"input": "int main ( void ) { int x , y , t , a , b ; int gcd ( int x , int y ) ; int lcm ( int x , int y , int a ) ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = gcd ( x , y ) ; b = lcm ( x , y , a ) ; printf ( <str> , a , b ) ; } return <int> ; } int gcd ( int x , int y ) { if ( y != <int> ) return gcd ( y , x % y ) ; else return x ; } int lcm ( int x , int y , int a ) { return ( ( x * y ) / a ) ; }", "label": 1, "id": 1246}
{"input": "int gcd ( int , int ) ; int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int t , a , b ; int l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; l = a * b / gcd ( a , b ) ; printf ( <str> , gcd ( a , b ) , l ) ; } }", "label": 1, "id": 1247}
{"input": "int main ( ) { int n , t , i , max , j , s [ <int> ] [ <int> ] , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = s [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else { if ( s [ i - <int> ] [ j ] > s [ i - <int> ] [ j - <int> ] ) s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } if ( s [ i ] [ j ] > max ) max = s [ i ] [ j ] ; } } printf ( <str> , max ) ; } }", "label": 0, "id": 1248}
{"input": "int main ( ) { int t , i ; long a , b , u , v , x , lcm , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; u = a ; v = b ; while ( <int> ) { x = a % b ; a = b ; b = x ; if ( x == <int> ) { gcd = a ; break ; } } lcm = ( u * v ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1249}
{"input": "int cal ( int arr [ ] [ <int> ] , int ) ; int max ( int , int , int ) ; void calll ( int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; calll ( t ) ; return <int> ; } void calll ( int t ) { int i , j , k , n , sum [ <int> ] ; int arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } sum [ i ] = cal ( arr , n ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , sum [ i ] ) ; } } int cal ( int arr [ ] [ <int> ] , int n ) { int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] = max ( arr [ i ] [ j ] , arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; } } return arr [ <int> ] [ <int> ] ; } int max ( int x , int y , int z ) { if ( x + y >= x + z ) return x + y ; else return x + z ; }", "label": 1, "id": 1250}
{"input": "long gcd ( int a , int b ) { int i , g ; for ( i = <int> ; i < a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = i ; } return g ; } int main ( ) { int t , lc ; long n1 , n2 , gc ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) gc = gcd ( n1 , n2 ) ; else gc = gcd ( n2 , n2 ) ; lc = ( n1 * n2 ) / gc ; printf ( <str> , gc , lc ) ; } return <int> ; }", "label": 2, "id": 1251}
{"input": "int main ( ) { int * a , t , n , count , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int count = <int> ; scanf ( <str> , & n ) ; a = malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) if ( a [ j + <int> ] > a [ j ] ) count ++ ; else break ; count ++ ; } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 1252}
{"input": "int main ( ) { int max [ <int> ] = { <int> } , arr [ <int> ] [ <int> ] = { <int> } , n , t ; register int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = <int> ; i <= n ; i ++ ) max [ i ] = arr [ n ] [ i ] ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i ] [ j ] + max [ j ] >= arr [ i ] [ j ] + max [ j + <int> ] ) max [ j ] = arr [ i ] [ j ] + max [ j ] ; else max [ j ] = arr [ i ] [ j ] + max [ j + <int> ] ; } } printf ( <str> , max [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1253}
{"input": "int findMax ( int num1 , int num2 ) { return num1 >= num2 ? num1 : num2 ; } int main ( ) { void printMaxSum ( int * * , int ) ; int numLines , numCases ; int * * elemArr = NULL ; int count , i , j ; scanf ( <str> , & numCases ) ; for ( count = <int> ; count < numCases ; count ++ ) { scanf ( <str> , & numLines ) ; elemArr = ( int * * ) malloc ( sizeof ( int * ) * numLines ) ; for ( i = <int> ; i <= numLines ; i ++ ) { elemArr [ i - <int> ] = ( int * ) malloc ( sizeof ( int ) * i ) ; for ( j = <int> ; j < i ; j ++ ) scanf ( <str> , & elemArr [ i - <int> ] [ j ] ) ; } printMaxSum ( elemArr , numLines ) ; for ( i = <int> ; i < numLines ; i ++ ) free ( elemArr [ i ] ) ; free ( elemArr ) ; } return <int> ; } void printMaxSum ( int * * elemArr , int numLines ) { int i , j ; int * maxArr = ( int * ) malloc ( sizeof ( int ) * numLines ) ; for ( i = <int> ; i < numLines ; i ++ ) { maxArr [ i ] = elemArr [ numLines - <int> ] [ i ] ; } for ( i = numLines - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { maxArr [ j ] = findMax ( maxArr [ j ] , maxArr [ j + <int> ] ) ; maxArr [ j ] = maxArr [ j ] + elemArr [ i - <int> ] [ j ] ; } } printf ( <str> , maxArr [ <int> ] ) ; free ( maxArr ) ; }", "label": 0, "id": 1254}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 1255}
{"input": "long sumd ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) ; long sumr ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) ; int main ( ) { int arr [ <int> ] [ <int> ] ; int i , j , tc , go , row , k ; long sumrt = <int> , sumdn , sum ; scanf ( <str> , & tc ) ; for ( go = <int> ; go <= tc ; go ++ ) { scanf ( <str> , & row ) ; i = <int> ; while ( i < row ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & arr [ i ] [ j ] ) ; j ++ ; } i ++ ; } sum = <int> ; sumrt = sumr ( sum , row , <int> , <int> , arr ) ; sumdn = sumd ( sum , row , <int> , <int> , arr ) ; if ( sumrt > sumdn ) printf ( <str> , sumrt ) ; else printf ( <str> , sumdn ) ; } return <int> ; } long sumd ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) { long sumdn , sumrt ; if ( i < n ) { s = s + arr [ i ] [ j ] ; sumdn = sumd ( s , n , i + <int> , j , arr ) ; sumrt = sumr ( s , n , i + <int> , j + <int> , arr ) ; if ( sumrt > sumdn ) return sumrt ; else return sumdn ; } return s ; } long sumr ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) { long sumdn , sumrt ; if ( i < n ) { s = s + arr [ i ] [ j ] ; sumdn = sumd ( s , n , i + <int> , j , arr ) ; sumrt = sumr ( s , n , i + <int> , j + <int> , arr ) ; if ( sumrt > sumdn ) return sumrt ; else return sumdn ; } return s ; }", "label": 2, "id": 1256}
{"input": "int main ( ) { int t , a , b , c , d , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a || j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { c = j ; } } d = ( a * b ) / c ; printf ( <str> , c , d ) ; return <int> ; } }", "label": 3, "id": 1257}
{"input": "int N [ <int> ] [ <int> ] ; int n ; void scanint ( int * x ) { register char c = getchar_unlocked ( ) ; * x = <int> ; for ( ; ( c < <int> ) || ( c > <int> ) ; c = getchar_unlocked ( ) ) ; for ( ; ( c > <int> ) && ( c < <int> ) ; c = getchar_unlocked ( ) ) * x = ( int ) ( ( ( ( * x ) << <int> ) + ( ( * x ) << <int> ) ) + c - <int> ) ; } int max ( int a , int b ) { return ( a > b ? a : b ) ; } int sum ( int s , int x , int y ) { s += N [ x ] [ y ] ; if ( x == n - <int> ) return s ; return max ( sum ( s , x + <int> , y + <int> ) , sum ( s , x + <int> , y ) ) ; } int main ( ) { int T , i , j ; scanint ( & T ) ; while ( T -- > <int> ) { scanint ( & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j > i ) N [ i ] [ j ] = <int> ; else scanint ( & N [ i ] [ j ] ) ; } } int ans = sum ( <int> , <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 1258}
{"input": "int main ( ) { int a , b , temp , t ; long long int x , y , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1259}
{"input": "int main ( void ) { int n = <int> , t = <int> , i = <int> , j = <int> ; int a [ MAX ] [ MAX ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1260}
{"input": "long long int hcf ( long long int i , long long int j ) { long long int m , k ; if ( i < j ) { for ( k = i ; k >= <int> ; k -- ) { if ( j % k == <int> && i % k == <int> ) { m = k ; break ; } } } else { for ( k = j ; k >= <int> ; k -- ) { if ( i % k == <int> && j % k == <int> ) { m = k ; break ; } } } return m ; } int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int i , j ; scanf ( <str> , & i , & j ) ; long long int gcd , lcm ; gcd = hcf ( i , j ) ; lcm = ( i * j ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 1261}
{"input": "int main ( void ) { int a [ <int> ] , b [ <int> ] , gcd , lcm , i , j , max , min , t , u , l , k ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { min = a [ i ] < b [ i ] ? a [ i ] : b [ i ] ; for ( j = min ; j >= <int> ; j -- ) { if ( a [ i ] % j == <int> && b [ i ] % j == <int> ) l = j ; break ; } max = a [ i ] > b [ i ] ? a [ i ] : b [ i ] ; for ( k = max ; k <= a [ i ] * b [ i ] ; k ++ ) { if ( k % a [ i ] == <int> && k % b [ i ] == <int> ) u = k ; break ; } printf ( <str> , l , u ) ; } return <int> ; }", "label": 1, "id": 1262}
{"input": "int main ( ) { int test , row , i , k , j ; scanf ( <str> , & test ) ; for ( i = <int> ; i <= test ; i ++ ) { scanf ( <str> , & row ) ; int a [ row ] [ row ] ; for ( k = <int> ; k <= row ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & a [ k ] [ j ] ) ; } } for ( i = row ; i >= <int> ; i -- ) { for ( j = <int> ; j < row ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 1263}
{"input": "int main ( ) { int n , i , j , k , a [ <int> ] [ <int> ] , lines ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = lines - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) { a [ j ] [ k ] = a [ j ] [ k ] + a [ j + <int> ] [ k ] ; } else { a [ j ] [ k ] = a [ j + <int> ] [ k + <int> ] + a [ j ] [ k ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1264}
{"input": "int main ( ) { int t , i , x , y , r , n1 , n2 , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { r = <int> ; scanf ( <str> , & x , & y ) ; n1 = x ; n2 = y ; if ( x > y ) { r = x ; x = y ; y = r ; } while ( y % x != <int> ) { r = y % x ; y = x ; x = r ; } lcm = ( n1 * n2 ) / x ; printf ( <str> , x , lcm ) ; } return <int> ; }", "label": 1, "id": 1265}
{"input": "int main ( void ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { long int i , n , min , a [ <int> ] , ans ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 1266}
{"input": "int main ( ) { int i , j , k , t , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; if ( t > <int> ) { for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; if ( n > <int> ) { for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k < ( j + <int> ) ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( j = ( n - <int> ) ; j >= <int> ; j -- ) { for ( k = <int> ; k < ( j + <int> ) ; k ++ ) { if ( ( a [ j ] [ k ] + a [ j + <int> ] [ k ] ) > ( a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ) ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j + <int> ] [ k ] ; else if ( ( a [ j ] [ k ] + a [ j + <int> ] [ k ] ) < ( a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ) ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } } } return <int> ; }", "label": 1, "id": 1267}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int cmp ( const void * a , const void * b ) { return ( * ( ( int * ) a ) - * ( ( int * ) b ) ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ <int> ] [ <int> ] ; for ( int i = <int> ; i <= n ; i ++ ) for ( int j = <int> ; j < i ; j ++ ) scanf ( <str> , & arr [ i - <int> ] [ j ] ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; else if ( j == i ) arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; else arr [ i ] [ j ] += max ( arr [ i - <int> ] [ j ] , arr [ i - <int> ] [ j - <int> ] ) ; } } qsort ( arr [ n - <int> ] , n , sizeof ( int ) , cmp ) ; printf ( <str> , arr [ n - <int> ] [ n - <int> ] ) ; } return <int> ; }", "label": 0, "id": 1268}
{"input": "void calculate ( ) ; int mylog ( int num ) ; int main ( int argc , char * argv [ ] ) { int triangleCount ; scanf ( <str> , & triangleCount ) ; while ( triangleCount > <int> ) { calculate ( ) ; triangleCount -- ; } return EXIT_SUCCESS ; } void calculate ( ) { int lineCount , lineNum , sumLen , i , max ; scanf ( <str> , & lineCount ) ; int line [ lineCount ] ; int sum [ <int> ] ; lineCount = <int> ; lineNum = <int> ; sumLen = <int> ; max = <int> ; while ( lineCount > <int> ) { int i ; lineNum ++ ; for ( i = <int> ; i < lineNum ; i ++ ) scanf ( <str> , & line [ i ] ) ; if ( lineNum == <int> ) { sum [ <int> ] = line [ <int> ] ; sumLen = <int> ; } else { for ( i = sumLen ; i > <int> ; i -- ) { int lineC = mylog ( i ) ; sum [ ( <int> * i ) - <int> ] = sum [ i - <int> ] + line [ lineC + <int> ] ; sum [ ( <int> * i ) - <int> ] = sum [ i - <int> ] + line [ lineC ] ; } sumLen *= <int> ; } lineCount -- ; } for ( i = <int> ; i < sumLen ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( <str> , max ) ; } int mylog ( int num ) { int count = <int> ; while ( num > <int> ) { num = num / <int> ; count ++ ; } return count - <int> ; }", "label": 3, "id": 1269}
{"input": "int a [ <int> ] [ <int> ] ; int dp [ <int> ] [ <int> ] ; int main ( ) { int t , i , n , j ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; dp [ n - <int> ] [ j ] = a [ n - <int> ] [ j ] ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { dp [ i ] [ j ] = max ( a [ i ] [ j ] + dp [ i + <int> ] [ j ] , a [ i ] [ j ] + dp [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , dp [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1270}
{"input": "int main ( ) { int s , i , j , n , b ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( b = <int> ; b < n ; b ++ ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = s - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1271}
{"input": "int main ( ) { int T , N ; long int A , B , L ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & A , & B ) ; while ( A % B ) { A = B ; B = A % B ; } for ( L = <int> ; L <= ( A * B ) ; L ++ ) { if ( L % A == <int> && L % B == <int> ) break ; } printf ( <str> , B , L ) ; T = T - <int> ; } return <int> ; }", "label": 3, "id": 1272}
{"input": "int main ( ) { int t , n , min , x , c , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & x ) ; if ( x < min ) { min = x ; } } c = min * ( n - <int> ) ; printf ( <str> , c ) ; t -- ; } return ( <int> ) ; }", "label": 0, "id": 1273}
{"input": "int gcd ( int a , int b ) { if ( a % b ) gcd ( b , a % b ) ; else return b ; } int main ( ) { int t ; int g , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 1274}
{"input": "int main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { long long int a , b , j , d , gcd , lcm ; scanf ( <str> , & a , & b ) ; d = a < b ? a : b ; for ( j = <int> ; j <= d ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; lcm = ( a * b ) / gcd ; } printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 2, "id": 1275}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n + <int> ] , i ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int index = <int> ; long long int count = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( a [ i ] < a [ i - <int> ] ) { index = i - <int> ; count ++ ; } else { count += i - index ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 1276}
{"input": "int maxCal ( int * , int , int , int ) ; int main ( ) { int a [ <int> ] ; int n , i = <int> , row , j = <int> , tot = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & row ) ; tot = row * ( row + <int> ) / <int> ; for ( j = <int> ; j < tot ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } printf ( <str> , maxCal ( a , row , <int> , <int> ) ) ; } return <int> ; } int maxCal ( int * a , int n , int in , int nl ) { int sum = <int> , sum1 = <int> , temp = <int> ; if ( nl == n ) return a [ in ] ; temp = in + nl ; nl = nl + <int> ; sum1 = a [ in ] + maxCal ( a , n , temp , nl ) ; sum = a [ in ] + maxCal ( a , n , temp + <int> , nl ) ; if ( sum > sum1 ) return sum ; return sum1 ; }", "label": 3, "id": 1277}
{"input": "int main ( ) { int tc ; scanf ( <str> , & tc ) ; while ( tc -- ) { int i , n , counter = <int> ; long long int count = <int> , temp , first ; scanf ( <str> , & n ) ; count += counter ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp >= first ) count += ( ++ counter ) ; else { counter = <int> ; count += <int> ; } first = temp ; } printf ( <str> , count ) ; } return <int> ; }", "label": 2, "id": 1278}
{"input": "int a [ <int> ] [ <int> ] ; int mem [ <int> ] [ <int> ] ; int sutr ( int r , int i , int z , int end ) { if ( r > end ) return <int> ; if ( mem [ r ] [ i ] != <int> ) return mem [ r ] [ i ] ; int t1 , t2 , t ; t1 = sutr ( r + <int> , i , a [ r + <int> ] [ i ] , end ) ; t2 = sutr ( r + <int> , i + <int> , a [ r + <int> ] [ i + <int> ] , end ) ; t = ( t1 > t2 ? t1 : t2 ) + a [ r ] [ i ] ; mem [ r ] [ i ] = t ; return t ; } int main ( ) { int row , i , j , test ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j < row ; j ++ ) { mem [ i ] [ j ] = <int> ; } } int z ; z = sutr ( <int> , <int> , <int> , row - <int> ) ; printf ( <str> , z ) ; } }", "label": 0, "id": 1279}
{"input": "int main ( ) { int t , i ; long int l , gcd , lcm , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { gcd = <int> ; scanf ( <str> , & a , & b ) ; l = a < b ? a : b ; for ( i = <int> ; i <= l ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return ( <int> ) ; }", "label": 2, "id": 1280}
{"input": "int main ( void ) { int a , b , c , t ; float gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; c = a * b ; while ( b != <int> ) { t = a % b ; a = b ; b = t ; } gcd = a ; lcm = c / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 1281}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , x , y , t , gcd , lcm ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; return <int> ; } }", "label": 1, "id": 1282}
{"input": "int main ( ) { int n , t , i , j , sum ; int num [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n > <int> ) { sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & num [ i ] [ j ] ) ; for ( i = <int> ; i < t - <int> ; i ++ ) { num [ i + <int> ] [ <int> ] += num [ i ] [ <int> ] ; } for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( num [ i - <int> ] [ j - <int> ] > num [ i - <int> ] [ j ] ) num [ i ] [ j ] += num [ i - <int> ] [ j - <int> ] ; else num [ i ] [ j ] += num [ i - <int> ] [ j ] ; } for ( i = <int> ; i < t ; i ++ ) { if ( sum < num [ t - <int> ] [ i ] ) sum = num [ t - <int> ] [ i ] ; } printf ( <str> , sum ) ; n -- ; } return <int> ; }", "label": 1, "id": 1283}
{"input": "int greater ( int a , int b ) ; int main ( ) { int a , b [ <int> ] = { <int> } , c [ <int> ] = { <int> } , d , e , f , t , i , j , m , n ; scanf ( <str> , & e ) ; for ( t = <int> ; t < e ; t ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b [ <int> ] ) ; for ( i = <int> ; i < a ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & c [ j ] ) ; } for ( j = <int> ; j < i + <int> ; j ++ ) { d = greater ( b [ j + <int> ] , b [ j + <int> ] ) ; b [ j + <int> ] = c [ j + <int> ] + d ; } b [ i ] = c [ i ] + b [ i - <int> ] ; b [ <int> ] = c [ <int> ] + b [ <int> ] ; } for ( i = <int> ; i < a ; i ++ ) { for ( j = <int> ; j < a ; j ++ ) { if ( b [ i ] > b [ j ] ) { f = b [ i ] ; b [ i ] = b [ j ] ; b [ j ] = f ; } } } printf ( <str> , b [ <int> ] ) ; } } int greater ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 1, "id": 1284}
{"input": "void findmax ( int * * triangle , int * * sums , int r , int c , int lines ) ; int main ( int argc , char * argv [ ] ) { char c ; int cases , lines , iter , i , j , * * triangle , * * sums ; scanf ( <str> , & cases ) ; for ( iter = <int> ; iter <= cases ; iter ++ ) { scanf ( <str> , & lines ) ; triangle = ( int * * ) malloc ( lines * sizeof ( int * ) ) ; sums = ( int * * ) malloc ( lines * sizeof ( int * ) ) ; for ( i = <int> ; i < lines ; i ++ ) { * ( sums + i ) = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; * ( triangle + i ) = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , * ( triangle + i ) + j , & c ) ; } } for ( i = <int> ; i < lines - <int> ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) sums [ i ] [ j ] = - <int> ; for ( i = <int> ; i < lines ; i ++ ) sums [ lines - <int> ] [ i ] = triangle [ lines - <int> ] [ i ] ; findmax ( triangle , sums , <int> , <int> , lines ) ; printf ( <str> , sums [ <int> ] [ <int> ] ) ; } return <int> ; } void findmax ( int * * triangle , int * * sums , int r , int c , int lines ) { if ( r == lines - <int> ) return ; if ( sums [ r + <int> ] [ c ] < <int> ) findmax ( triangle , sums , r + <int> , c , lines ) ; if ( sums [ r + <int> ] [ c + <int> ] < <int> ) findmax ( triangle , sums , r + <int> , c + <int> , lines ) ; sums [ r ] [ c ] = triangle [ r ] [ c ] + ( ( sums [ r + <int> ] [ c ] > sums [ r + <int> ] [ c + <int> ] ) ? sums [ r + <int> ] [ c ] : sums [ r + <int> ] [ c + <int> ] ) ; }", "label": 0, "id": 1285}
{"input": "int main ( ) { int a , b , r , lcm ; int x , y ; int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { r = a % b ; a = b ; b = r ; } lcm = x * y ; printf ( <str> , a , lcm ) ; } return <int> ; }", "label": 1, "id": 1286}
{"input": "int main ( ) { int t , no , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & no ) ; int a [ no ] [ no ] ; for ( i = <int> ; i < no ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = no - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1287}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; int a [ n ] , temp = <int> ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( int i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) temp = a [ i + <int> ] ; a [ i + <int> ] = a [ i ] ; a [ i ] = temp ; } printf ( <str> , a [ n - <int> ] ) ; } }", "label": 1, "id": 1288}
{"input": "int max ( int a , int b ) { if ( a == b ) return a ; else if ( a < b ) return b ; else return a ; } char ch [ <int> ] [ <int> ] ; int n ; int sum ( int i , int j ) { int t1 , t2 ; int total = <int> ; if ( i > n - <int> ) return <int> ; else { t1 = sum ( i + <int> , j ) ; t2 = sum ( i + <int> , j + <int> ) ; total = max ( t1 , t2 ) + ( ch [ i ] [ j ] - <int> ) ; return total ; } } int main ( ) { char input [ <int> ] ; int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , input ) ; for ( j = <int> ; j <= i ; j ++ ) ch [ i ] [ j ] = input [ j ] ; } printf ( <str> , sum ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 1289}
{"input": "int main ( ) { int store , num1 , num2 , m , check = <int> , tst , hcf ; long long int temp , lcm ; scanf ( <str> , & tst ) ; while ( check < tst ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 < num2 ) { temp = num2 ; num2 = num1 ; num1 = temp ; } store = <int> ; for ( m = <int> ; m < <int> ; m ++ ) { temp = num1 * m ; if ( temp % num2 == <int> ) { lcm = temp ; store = m ; break ; } } hcf = num2 / store ; printf ( <str> , lcm , hcf ) ; check ++ ; } }", "label": 3, "id": 1290}
{"input": "int gcd ( int x , int y ) { int temp ; while ( y != <int> ) { temp = y ; y = x % y ; x = temp ; } return x ; } void main ( ) { int a , b , t , res ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; res = gcd ( a , b ) ; printf ( <str> , res , ( a * b ) / res ) ; } }", "label": 1, "id": 1291}
{"input": "int main ( ) { int n , i , j , a [ <int> ] [ <int> ] , line ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & line ) ; for ( i = <int> ; i < line ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = line - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? ( a [ i + <int> ] [ j ] ) : ( a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1292}
{"input": "int main ( ) { int t ; unsigned int n ; long int a [ <int> ] , sum1 , sum2 , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } sum1 = <int> , sum2 = <int> ; while ( n >= <int> ) { if ( a [ <int> ] > a [ <int> ] ) { sum1 = sum1 + a [ <int> ] ; for ( k = <int> ; k < n - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; n -- ; } else if ( a [ <int> ] < a [ <int> ] ) { sum2 = sum2 + a [ <int> ] ; for ( k = <int> ; k < n - <int> ; k ++ ) a [ k + <int> ] = a [ k + <int> ] ; n -- ; } } printf ( <str> , sum2 + sum1 ) ; } return <int> ; }", "label": 2, "id": 1293}
{"input": "int max_sum ( int a [ <int> ] [ <int> ] , int <unk> , int row_max , int <unk> ) { int sum = a [ <unk> ] [ <unk> ] ; if ( <unk> == row_max ) return sum ; int sumb , sumr ; sumb = max_sum ( a , <unk> + <int> , row_max , <unk> ) ; sumr = max_sum ( a , <unk> + <int> , row_max , <unk> + <int> ) ; if ( sumb > sumr ) sum += sumb ; else sum += sumr ; return sum ; } int main ( ) { int t ; scanf ( <str> , & t ) ; int i = <int> ; while ( i < t ) { int n ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; int j = <int> ; while ( j < n ) { int k = <int> ; while ( k <= j ) { scanf ( <str> , & a [ j ] [ k ] ) ; k ++ ; } j ++ ; } int sum = max_sum ( a , <int> , n , <int> ) ; printf ( <str> , sum ) ; i ++ ; } return <int> ; }", "label": 2, "id": 1294}
{"input": "int main ( void ) { int n , a , b , l , g , x , y , t ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { t = y ; y = x % y ; x = t ; } g = x ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 1295}
{"input": "void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i = <int> , n ; scanf ( <str> , & n ) ; long long int a [ n ] , cnt ; while ( i < n ) scanf ( <str> , & a [ i ++ ] ) ; if ( n < <int> ) cnt = <int> ; else cnt = ( ( n - <int> ) * ( n - <int> ) ) / <int> ; printf ( <str> , cnt ) ; } }", "label": 1, "id": 1296}
{"input": "int findSum ( int * * array , int j , int t , int r ) ; void printArray ( int * * array , int r ) ; int main ( ) { int n ; int r ; int * * array ; int i ; int j ; int k ; int t ; int sum ; int buffer ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & r ) ; array = ( int * * ) malloc ( sizeof ( int * ) * r ) ; for ( j = <int> ; j < r ; j ++ ) { k = j + <int> ; array [ j ] = ( int * ) malloc ( sizeof ( int ) * k ) ; for ( t = <int> ; t < k ; t ++ ) { scanf ( <str> , & array [ j ] [ t ] ) ; } } sum = findSum ( array , <int> , <int> , r ) ; printf ( <str> , sum ) ; } } int findSum ( int * * array , int j , int t , int r ) { int sum1 = array [ j ] [ t ] ; int sum2 = array [ j ] [ t ] ; if ( r > <int> ) { sum1 += findSum ( array , j + <int> , t , r - <int> ) ; sum2 += findSum ( array , j + <int> , t + <int> , r - <int> ) ; if ( sum1 > sum2 ) { return sum1 ; } else { return sum2 ; } } else { if ( sum1 > sum2 ) { return sum1 ; } else { return sum2 ; } } return <int> ; } void printArray ( int * * array , int r ) { int i ; int j ; int k ; for ( i = <int> ; i < r ; i ++ ) { j = i + <int> ; for ( k = <int> ; k < j ; k ++ ) { printf ( <str> , array [ i ] [ k ] ) ; } printf ( <str> ) ; } }", "label": 2, "id": 1297}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int i , k ; long long int n1 , n2 , small , big , lcm , gcd , temp = <int> ; for ( k = <int> ; k <= t ; k ++ ) { temp = <int> ; scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { small = n2 ; big = n1 ; } else { small = n1 ; big = n2 ; } while ( temp > <int> ) { temp = big % small ; big = small ; small = temp ; } gcd = big ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1298}
{"input": "int main ( ) { int T , i , A [ <int> ] , n , j ; int max = <int> , sum = <int> , k , p ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & n ) ; p = ( n - <int> ) * ( n + <int> ) / <int> ; for ( j = <int> ; j <= p ; j ++ ) scanf ( <str> , & A [ j ] ) ; for ( k = <int> ; k <= n ; k ++ ) { printf ( <str> , max ) ; sum = <int> ; printf ( <str> , A [ <int> ] ) ; for ( j = k * ( k - <int> ) / <int> ; j < k * ( k + <int> ) / <int> ; k ++ ) sum = sum + A [ j ] ; if ( sum > max ) max = sum ; sum = <int> ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1299}
{"input": "int gcd ( int x , int y ) { if ( x == <int> ) return y ; else return gcd ( y % x , x ) ; } int lcm ( int x , int y ) { if ( x % y == <int> && x >= y ) return x ; else if ( x % y == <int> && x < y ) return y ; else return x * y ; } int main ( ) { int i , n , a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 1300}
{"input": "void main ( ) { int a , b , c , gcd , lcm , remainder , numerator , denominator , i ; scanf ( <str> , & a ) ; for ( i = <int> ; i <= a ; i ++ ) { scanf ( <str> , & b , & c ) ; if ( b > c ) { numerator = b ; denominator = c ; } else { numerator = c ; denominator = b ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( b * c ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 1301}
{"input": "int read ( ) { char c ; int d ; d = <int> ; c = getchar ( ) ; while ( <int> ) { if ( c == <char> || c == <char> ) break ; d = d * <int> + c - <char> ; c = getchar ( ) ; } return d ; } int main ( ) { long int n , T , a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] , i , j ; T = read ( ) ; while ( T -- ) { n = read ( ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = read ( ) ; } for ( i = <int> ; i < n ; i ++ ) { sum [ n - <int> ] [ i ] = a [ n - <int> ] [ i ] ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( sum [ i + <int> ] [ j ] > sum [ i + <int> ] [ j + <int> ] ) { sum [ i ] [ j ] = sum [ i + <int> ] [ j ] + a [ i ] [ j ] ; } else { sum [ i ] [ j ] = sum [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ; } } } printf ( <str> , sum [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1302}
{"input": "int main ( void ) { long unsigned int T , A , B , i , j , gcd , y , x ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { y = <int> ; printf ( <str> ) ; scanf ( <str> , & A , & B ) ; if ( A < B ) x = A ; else x = B ; for ( j = x ; j >= <int> ; j -- ) { if ( A % j == <int> && B % j == <int> ) { gcd = j ; break ; } } for ( i = x ; i >= <int> ; i -- ) { if ( A % i == <int> && B % i == <int> ) { y = y * i ; A = A / i ; B = B / i ; } } printf ( <str> , gcd , y * A * B ) ; } return <int> ; }", "label": 2, "id": 1303}
{"input": "int main ( void ) { long long int t , i , n , a [ <int> ] , min ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; t -- ; } return <int> ; }", "label": 0, "id": 1304}
{"input": "int main ( ) { int n , c , g ; scanf ( <str> , & n ) ; for ( int z = <int> ; z < n ; z ++ ) { int p , s = <int> ; scanf ( <str> , & p ) ; int arr [ p ] ; for ( int i = <int> ; i < p ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & c ) ; if ( j == <int> ) g = c ; if ( g <= c ) { g = c ; } } arr [ i ] = g ; } for ( int t = <int> ; t < p ; t ++ ) { } for ( int y = <int> ; y < p ; y ++ ) { s = s + arr [ y ] ; } s -- ; printf ( <str> , s ) ; } }", "label": 1, "id": 1305}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i = <int> , j = <int> , c1 , c2 ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { c1 = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; c2 = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; if ( c1 > c2 ) { a [ i - <int> ] [ j ] = c1 ; } else { a [ i - <int> ] [ j ] = c2 ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1306}
{"input": "int a [ <int> ] ; int b [ <int> ] ; int i ; int rec ( int , int , int , int ) ; int main ( ) { int t , j , k , max , elements , n ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n ) ; a [ <int> ] = <int> ; elements = ( n * ( n + <int> ) ) / <int> ; for ( k = <int> ; k <= elements ; k ++ ) { scanf ( <str> , & a [ k ] ) ; } rec ( <int> , <int> , a [ <int> ] , n - <int> ) ; max = a [ <int> ] ; for ( i = <int> ; i <= elements ; i ++ ) { if ( b [ i ] > max ) { max = b [ i ] ; } } printf ( <str> , max ) ; } return <int> ; } int rec ( int no , int add , int value , int n ) { if ( add <= n ) { rec ( ( no + add ) , ( add + <int> ) , ( value + a [ no + add ] ) , n ) ; rec ( ( no + add + <int> ) , ( add + <int> ) , ( value + a [ no + add + <int> ] ) , n ) ; } else { b [ i ] = value ; i ++ ; } return <int> ; }", "label": 3, "id": 1307}
{"input": "int cost [ MAX ] [ MAX ] ; int dp [ MAX ] [ MAX ] ; int results [ MAX ] ; int main ( void ) { int i , j ; int n , numOfLines ; int max , count = <int> ; scanf ( <str> , & n ) ; while ( n > count ) { scanf ( <str> , & numOfLines ) ; for ( i = <int> ; i < numOfLines ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) cost [ i ] [ j ] = <int> ; for ( i = <int> ; i < numOfLines ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & cost [ i ] [ j ] ) ; for ( i = <int> ; i < numOfLines ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) dp [ i ] [ j ] = <int> ; for ( i = <int> ; i < numOfLines ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( ( dp [ i - <int> ] [ j ] + cost [ i ] [ j ] ) > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - <int> ] [ j ] + cost [ i ] [ j ] ; if ( ( dp [ i - <int> ] [ j ] + cost [ i ] [ j + <int> ] ) > dp [ i ] [ j + <int> ] ) dp [ i ] [ j + <int> ] = dp [ i - <int> ] [ j ] + cost [ i ] [ j + <int> ] ; } } max = <int> ; for ( i = <int> ; i < numOfLines ; i ++ ) if ( dp [ numOfLines - <int> ] [ i ] > dp [ numOfLines - <int> ] [ max ] ) max = i ; results [ count ] = dp [ numOfLines - <int> ] [ max ] ; count ++ ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , results [ i ] ) ; return <int> ; }", "label": 1, "id": 1308}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else gcd ( b , a % b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } }", "label": 1, "id": 1309}
{"input": "int main ( ) { int n1 , n2 , T , a , b , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } lcm = ( n1 * n2 ) / a ; printf ( <str> , a , lcm ) ; } }", "label": 1, "id": 1310}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; ++ i ) { int A , B , hcf = <int> ; int smaller = A < B ? A : B ; scanf ( <str> , & A , & B ) ; int tempA = A , tempB = B ; for ( int j = <int> ; j <= smaller ; ++ j ) { while ( A % j == <int> && B % j == <int> ) { hcf *= j ; A /= j ; B /= j ; } } printf ( <str> , hcf , tempA * tempB / hcf ) ; } return <int> ; }", "label": 1, "id": 1311}
{"input": "int main ( ) { int a , b , tm , t , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; p = a * b ; if ( b < a ) { tm = a ; a = b ; b = tm ; } while ( ( b % a ) != <int> ) { tm = ( b % a ) ; b = a ; a = tm ; } printf ( <str> , a , ( p / a ) ) ; } return <int> ; }", "label": 1, "id": 1312}
{"input": "int max ( int a , int b ) { if ( a > b ) { return ( a ) ; } else return ( b ) ; } int value ( int i , int j , int k , int mat [ <int> ] [ <int> ] , int value1 [ <int> ] [ <int> ] ) { int v ; if ( i > k ) { return <int> ; } else if ( value1 [ i ] [ j ] ) { return value1 [ i ] [ j ] ; } else { value1 [ i ] [ j ] = max ( value ( i + <int> , j , k , mat , value1 ) , value ( i + <int> , j + <int> , k , mat , value1 ) ) ; v = mat [ i ] [ j ] + value1 [ i ] [ j ] ; return ( v ) ; } } int main ( ) { int i , j , k , x , m , v [ <int> ] , p = <int> ; scanf ( <str> , & x ) ; int mat [ <int> ] [ <int> ] ; int value1 [ <int> ] [ <int> ] ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { value1 [ i ] [ j ] = <int> ; } } while ( x ) { for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { value1 [ i ] [ j ] = <int> ; } } scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & m ) ; if ( m < <int> || m > <int> ) { scanf ( <str> , & m ) ; } mat [ i ] [ j ] = m ; } } v [ p ++ ] = value ( <int> , <int> , k , mat , value1 ) ; x -- ; } for ( i = <int> ; i < p ; i ++ ) { printf ( <str> , v [ i ] ) ; } return <int> ; }", "label": 1, "id": 1313}
{"input": "int gcd ( long long int x , long long int y ) ; main ( ) { long long int t ; long long int a , b , g , l , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long long int c [ a + <int> ] , d [ b + <int> ] ; g = gcd ( a , b ) ; printf ( <str> , g ) ; for ( i = <int> ; i <= a ; i ++ ) { c [ i ] = b * i ; } for ( i = <int> ; i <= b ; i ++ ) { d [ i ] = a * i ; } for ( i = <int> ; i <= a ; i ++ ) { for ( j = <int> ; j <= b ; j ++ ) { if ( c [ i ] == d [ j ] ) { goto end ; } } } end : printf ( <str> , c [ i ] ) ; } return <int> ; } int gcd ( long long int x , long long int y ) { if ( y == <int> ) return ( x ) ; else return ( gcd ( y , x % y ) ) ; }", "label": 3, "id": 1314}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int a [ <int> ] [ <int> ] ; int c [ <int> ] [ <int> ] ; int solve ( int i , int j , int n ) { int t1 , t2 , t ; if ( i > n ) return <int> ; if ( c [ i ] [ j ] != - <int> ) { return c [ i ] [ j ] ; } t1 = solve ( i + <int> , j , n ) ; t2 = solve ( i + <int> , j + <int> , n ) ; t = a [ i ] [ j ] + max ( t1 , t2 ) ; c [ i ] [ j ] = t ; return t ; } int main ( ) { int t , n , i , j , r , v , tcn = <int> , ic = <int> ; for ( tcn = <int> ; tcn < <int> ; tcn ++ ) { for ( ic = <int> ; ic < <int> ; ic ++ ) { c [ tcn ] [ ic ] = - <int> ; } } scanf ( <str> , & t ) ; for ( r = <int> ; r < t ; r ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } v = solve ( <int> , <int> , n ) ; printf ( <str> , v ) ; } return <int> ; }", "label": 1, "id": 1315}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , t ; scanf ( <str> , & n ) ; int arr [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] > arr [ i + <int> ] ) { t = arr [ <int> ] ; arr [ <int> ] = arr [ i + <int> ] ; arr [ i + <int> ] = t ; } } printf ( <str> , ( n - <int> ) * ( arr [ <int> ] ) ) ; } }", "label": 1, "id": 1316}
{"input": "int fun ( void ) ; int main ( ) { int n = <int> , m , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { m = fun ( ) ; printf ( <str> , m ) ; } return <int> ; } int fun ( void ) { { int a [ <int> ] [ <int> ] , i , j , n , m ; scanf ( <str> , & n ) ; m = n ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } if ( m == <int> ) { m = a [ <int> ] [ <int> ] ; return ( m ) ; } else { if ( a [ <int> ] [ <int> ] > a [ <int> ] [ <int> ] ) { n = a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ; j = <int> ; } else { n = a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ; j = <int> ; } } for ( i = <int> ; i <= m ; i ++ ) { if ( j == <int> ) { if ( a [ i ] [ <int> ] > a [ i ] [ <int> ] ) { n = n + a [ i ] [ <int> ] ; j = <int> ; } else { n = n + a [ i ] [ <int> ] ; j = <int> ; } } else if ( i == j ) { if ( a [ i ] [ j ] > a [ i ] [ j - i ] ) n = n + a [ i ] [ j ] ; else { n = n + a [ i ] [ j - i ] ; j = j - <int> ; } } else if ( j >= <int> ) { if ( a [ i ] [ j ] > a [ i ] [ j - <int> ] && a [ i ] [ j ] > a [ i ] [ j + <int> ] ) n = n + a [ i ] [ j ] ; else if ( a [ i ] [ j - <int> ] > a [ i ] [ j ] && a [ i ] [ j - <int> ] > a [ i ] [ j + <int> ] ) { n = n + a [ i ] [ j - <int> ] ; j = j - <int> ; } else if ( a [ i ] [ j + <int> ] > a [ i ] [ j ] && a [ i ] [ j + <int> ] > a [ i ] [ j - <int> ] ) { n = n + a [ i ] [ j + <int> ] ; j = j + <int> ; } } } return ( n ) ; } }", "label": 1, "id": 1317}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { int x ; scanf ( <str> , & x ) ; int y ; scanf ( <str> , & y ) ; int c = gcd ( x , y ) ; printf ( <str> , c ) ; int d = lcm ( x , y ) ; printf ( <str> , d ) ; t -- ; } return <int> ; } int gcd ( int a , int b ) { while ( a % b != <int> ) { int p = a % b ; a = b ; b = p ; } return b ; } int lcm ( int a , int b ) { int min ; if ( a < b ) min = b ; min = a ; int i ; for ( i = min ; i <= ( a * b ) ; i = i + min ) { if ( i % a == <int> && i % b == <int> ) break ; } return i ; }", "label": 1, "id": 1318}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , s ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } s = a [ <int> ] [ <int> ] ; j = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) { s = s + a [ i + <int> ] [ j + <int> ] ; j ++ ; } else s = s + a [ i + <int> ] [ j ] ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 1319}
{"input": "int maxInt ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int _case ; scanf ( <str> , & _case ) ; int row , max ; int d [ <int> ] [ <int> ] ; int i , j , k ; int pre , cur ; while ( _case -- ) { scanf ( <str> , & row ) ; if ( row ) { scanf ( <str> , & d [ <int> ] [ <int> ] ) ; max = d [ <int> ] [ <int> ] ; } else max = <int> ; for ( i = <int> ; i < row ; i ++ ) { pre = ( i - <int> ) & <int> ; cur = i & <int> ; scanf ( <str> , & d [ cur ] [ <int> ] ) ; d [ cur ] [ <int> ] += d [ pre ] [ <int> ] ; max = d [ cur ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { k = maxInt ( d [ pre ] [ j - <int> ] , d [ pre ] [ j ] ) ; scanf ( <str> , & d [ cur ] [ j ] ) ; d [ cur ] [ j ] += k ; if ( d [ cur ] [ j ] > max ) max = d [ cur ] [ j ] ; } scanf ( <str> , & d [ cur ] [ i ] ) ; d [ cur ] [ i ] += d [ pre ] [ i - <int> ] ; if ( d [ cur ] [ i ] > max ) max = d [ cur ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1320}
{"input": "int main ( ) { int T , A , B , x , y , r , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; x = A ; y = B ; while ( y != <int> ) { r = x % y ; x = y ; y = r ; } printf ( <str> , x , ( A * B ) / x ) ; } return <int> ; }", "label": 1, "id": 1321}
{"input": "int main ( void ) { long int n ; int t , i , j , a [ <int> ] , c ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; ++ i ) { for ( j = i ; j < n ; ++ j ) { if ( a [ j ] > a [ j + <int> ] ) { ++ c ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 1322}
{"input": "int triangle [ <int> ] [ <int> ] ; int lines ; int indices [ <int> ] ; int main ( ) { int testcases , i , j , k , l , m ; scanf ( <str> , & testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { indices [ j ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & triangle [ j ] [ k ] ) ; } } for ( j = lines - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { l = triangle [ j + <int> ] [ k ] ; m = triangle [ j + <int> ] [ k + <int> ] ; triangle [ j ] [ k ] += l > m ? l : m ; } } printf ( <str> , triangle [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 1323}
{"input": "long int fastInput ( ) { long int n = <int> , c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; while ( c >= <char> && c <= <char> ) n = ( n << <int> ) + ( n << <int> ) + c - <char> , c = gc ( ) ; return n ; } int main ( void ) { long int i , T , N , min , temp , ans ; T = fastInput ( ) ; for ( i = <int> ; i < T ; i ++ ) { N = fastInput ( ) ; min = fastInput ( ) ; for ( i = <int> ; i < N ; i ++ ) { temp = fastInput ( ) ; if ( temp < min ) min = temp ; } ans = min * ( N - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 1324}
{"input": "int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t , hcf ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; printf ( <str> , hcf , ( a * ( b / hcf ) ) ) ; } return <int> ; }", "label": 0, "id": 1325}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , m , k = <int> ; scanf ( <str> , & m ) ; int a [ m ] [ m ] ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = m - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } else { a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1326}
{"input": "int main ( ) { int tc ; scanf ( <str> , & tc ) ; while ( tc -- ) { long a , b , x , y , temp , gcd , lcm ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , lcm , gcd ) ; } return <int> ; }", "label": 1, "id": 1327}
{"input": "int main ( ) { int n , min = <int> , t , a , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) min = a ; } min *= ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 1328}
{"input": "long gcdca ( long a , long b ) { a = abs ( a ) ; b = abs ( b ) ; return ( b == <int> ) ? a : gcdca ( b , a % b ) ; } int main ( ) { long t , a , b , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { lcm = <int> ; gcd = <int> ; scanf ( <str> , & a , & b ) ; gcd = gcdca ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 1329}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i , c , s = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; c = min ( a [ <int> ] , a [ <int> ] ) ; s = s + c ; for ( i = <int> ; i < n ; i ++ ) { c = min ( c , a [ i ] ) ; s = s + c ; } printf ( <str> , s ) ; t -- ; } return <int> ; } int min ( int q , int r ) { int m ; if ( q > r ) m = r ; if ( r > q ) m = q ; if ( q == r ) m = q ; return m ; }", "label": 1, "id": 1330}
{"input": "int main ( ) { int T ; long int a , b , c , x , y , temp ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } c = a % b ; while ( c > <int> ) { a = b ; b = c ; c = a % b ; } printf ( <str> , b , ( x * y ) / b ) ; } }", "label": 1, "id": 1331}
{"input": "int s [ <int> ] [ <int> ] , t [ <int> ] [ <int> ] ; int main ( ) { int n , i , j , a , flag = <int> , x ; scanf ( <str> , & x ) ; while ( x -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & s [ i ] [ j ] ) ; t [ <int> ] [ <int> ] = s [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) t [ i ] [ j ] = s [ i ] [ j ] + t [ i - <int> ] [ j ] ; else if ( i == j ) t [ i ] [ j ] = s [ i ] [ j ] + t [ i - <int> ] [ j - <int> ] ; else { if ( flag == <int> ) { t [ i ] [ j ] = s [ i ] [ j ] + t [ i - <int> ] [ j - <int> ] ; flag = <int> ; } if ( flag == <int> ) { if ( t [ i ] [ j ] < s [ i ] [ j ] + t [ i - <int> ] [ j ] ) t [ i ] [ j ] = s [ i ] [ j ] + t [ i - <int> ] [ j ] ; flag = <int> ; } } } a = t [ n - <int> ] [ <int> ] ; for ( j = <int> , i = n ; j <= i ; j ++ ) { if ( a < t [ n - <int> ] [ j ] ) a = t [ n - <int> ] [ j ] ; } printf ( <str> , a ) ; } return <int> ; }", "label": 1, "id": 1332}
{"input": "int main ( ) { int n , i , j ; int numoftimes ; scanf ( <str> , & numoftimes ) ; while ( numoftimes > <int> ) { scanf ( <str> , & n ) ; int A [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { A [ i ] [ j ] += ( A [ i + <int> ] [ j ] > A [ i + <int> ] [ j + <int> ] ) ? A [ i + <int> ] [ j ] : A [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , A [ <int> ] [ <int> ] ) ; numoftimes -- ; } return <int> ; }", "label": 1, "id": 1333}
{"input": "int main ( void ) { long long int t , a , b , lcm , r , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; if ( a < b ) { r = b ; b = a ; a = r ; } r = a % b ; while ( r != <int> ) { a = b ; b = r ; r = a % b ; } lcm = x * y / b ; printf ( <str> , b , lcm ) ; } return <int> ; }", "label": 0, "id": 1334}
{"input": "int main ( ) { int n , i , j , k , sum1 , sum2 , lines , * array [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { array [ j ] = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & array [ j ] [ k ] ) ; } } for ( j = lines - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j + <int> ; k ++ ) { if ( ( sum1 = ( array [ j ] [ k ] + array [ j + <int> ] [ k ] ) ) > ( sum2 = ( array [ j ] [ k ] + array [ j + <int> ] [ k + <int> ] ) ) ) array [ j ] [ k ] = sum1 ; else array [ j ] [ k ] = sum2 ; } } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1335}
{"input": "int a [ <int> ] [ <int> ] ; int mem [ <int> ] [ <int> ] ; int sutr ( int r , int i , int z , int end ) { if ( r > end ) return <int> ; else if ( mem [ r ] [ i ] != <int> ) return mem [ r ] [ i ] ; int t1 , t2 , t ; t1 = sutr ( r + <int> , i , a [ r + <int> ] [ i ] , end ) ; t2 = sutr ( r + <int> , i + <int> , a [ r + <int> ] [ i + <int> ] , end ) ; t = ( t1 > t2 ? t1 : t2 ) + a [ r ] [ i ] ; mem [ r ] [ i ] = t ; return t ; } int main ( ) { int row , i , j ; while ( scanf ( <str> , & row ) != EOF ) { for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j < row ; j ++ ) { mem [ i ] [ j ] = <int> ; } } int z ; z = sutr ( <int> , <int> , <int> , row - <int> ) ; printf ( <str> , z ) ; } }", "label": 3, "id": 1336}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; ++ i ) { int N ; scanf ( <str> , & N ) ; int arra [ N ] ; for ( int i = <int> ; i < N ; ++ i ) { scanf ( <str> , & arra [ i ] ) ; } int min = arra [ <int> ] ; for ( int j = <int> ; j < N ; ++ j ) { if ( min > arra [ j ] ) min = arra [ j ] ; } printf ( <str> , min * ( N - <int> ) ) ; } return <int> ; }", "label": 1, "id": 1337}
{"input": "int top = - <int> , stack [ <int> ] ; void push ( int value ) { stack [ top ++ ] = value ; } int pop ( ) { return stack [ top -- ] ; } void findSum ( int * * triangle , int height , int sum , int i , int j ) { if ( i == height - <int> ) { push ( sum + triangle [ i ] [ j ] ) ; return ; } findSum ( triangle , height , sum + triangle [ i ] [ j ] , i + <int> , j ) ; findSum ( triangle , height , sum + triangle [ i ] [ j ] , i + <int> , j + <int> ) ; } int findLargestSum ( int * * triangle , int height ) { int largest , temp ; findSum ( triangle , height , <int> , <int> , <int> ) ; while ( top >= <int> ) { temp = pop ( ) ; if ( largest < temp ) largest = temp ; } return largest ; } int main ( void ) { int N , height , i , j , * * triangle ; scanf ( <str> , & N ) ; while ( N -- ) { scanf ( <str> , & height ) ; triangle = ( int * * ) malloc ( height * sizeof ( int * ) ) ; for ( i = <int> ; i < height ; i ++ ) { triangle [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i < height ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangle [ i ] [ j ] ) ; } } printf ( <str> , findLargestSum ( triangle , height ) ) ; } return <int> ; }", "label": 3, "id": 1338}
{"input": "int max ( a , b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int sum = - <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( j == <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else a [ i ] [ j ] += max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; if ( a [ i ] [ j ] > sum ) sum = a [ i ] [ j ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 1339}
{"input": "int main ( ) { int N , T ; long int A , B ; long int count , tempC ; int flag ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; count = N ; tempC = <int> ; flag = <int> ; if ( N > <int> ) { scanf ( <str> , & A , & B ) ; N -- ; N -- ; if ( B > A ) { tempC ++ ; } while ( N -- ) { A = B ; scanf ( <str> , & B ) ; if ( B > A ) { tempC ++ ; } else { count = count + ( tempC - <int> ) ; count = count + ( tempC * ( tempC - <int> ) / <int> ) ; tempC = <int> ; } } } else { scanf ( <str> , & A ) ; } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 1340}
{"input": "int main ( ) { int t , n , a [ <int> ] , b , c , i , j , k , s ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { b = <int> ; c = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } s = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( s <= a [ j ] ) { s = a [ j ] ; b ++ ; } else { c = c + b * ( b + <int> ) / <int> ; b = <int> ; s = a [ j ] ; } } if ( b != <int> ) { c = c + b * ( b + <int> ) / <int> ; } printf ( <str> , c + n ) ; } return <int> ; }", "label": 0, "id": 1341}
{"input": "int inp [ <int> ] , out [ <int> ] ; char str [ BUFF ] ; int largR ( int N ) { int i , j , a , b ; for ( i = N - <int> ; i >= <int> ; i -- ) { a = ( i - <int> ) * i / <int> ; b = ( i + <int> ) * i / <int> ; for ( j = <int> ; j <= i ; j ++ ) inp [ a + j ] += inp [ b + j ] > inp [ b + j + <int> ] ? inp [ b + j ] : inp [ b + j + <int> ] ; } return inp [ <int> ] ; } int main ( ) { int T , i , row , incount ; int N , Ma , num , k ; char cha ; scanf ( <str> , & T ) ; while ( cha = fgetc ( stdin ) ) { if ( cha == <char> ) break ; } N = Ma = row = <int> ; while ( ( incount = fread ( str , <int> , BUFF , stdin ) ) > <int> ) { for ( i = <int> ; i < incount ; i ++ ) { if ( str [ i ] >= <char> && str [ i ] <= <char> ) { for ( num = <int> ; str [ i ] >= <char> && str [ i ] <= <char> ; i ++ ) { num = num * <int> + str [ i ] - <char> ; } i -- ; if ( ! Ma ) { N = num ; Ma = N * ( N + <int> ) / <int> ; k = <int> ; } else { inp [ k ++ ] = num ; if ( k == Ma ) { out [ row ++ ] = largR ( N ) ; Ma = <int> ; } } } } } for ( i = <int> ; i < row ; i ++ ) printf ( <str> , out [ i ] ) ; return <int> ; }", "label": 3, "id": 1342}
{"input": "int main ( ) { int k , t , n ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; int a [ n - <int> ] [ n - <int> ] ; int j , i ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 1343}
{"input": "int gcd ( int a , int b ) { int temp ; while ( b != <int> ) { temp = a % b ; a = b ; b = temp ; } return a ; } main ( ) { int t ; scanf ( <str> , & t ) ; int i , arr [ t ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; if ( a >= <int> && b >= <int> && a <= <int> && b <= <int> ) { arr [ i ] [ <int> ] = gcd ( a , b ) ; arr [ i ] [ <int> ] = ( a * b ) / ( arr [ i ] [ <int> ] ) ; } } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , arr [ i ] [ <int> ] , arr [ i ] [ <int> ] ) ; }", "label": 1, "id": 1344}
{"input": "int main ( ) { int i , j , a [ <int> ] [ <int> ] , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1345}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] , i , j = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( j > a [ i ] ) j = a [ i ] ; } printf ( <str> , j * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1346}
{"input": "int gcd ( int a , int b ) { if ( b ) return gcd ( b , a % b ) ; return a ; } int main ( void ) { int t , n , i , j ; long long int a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & i , & j ) ; if ( i < j ) { n = j ; j = i ; i = n ; } n = gcd ( i , j ) ; a = i ; a = a * j ; printf ( <str> , n , a / n ) ; } return <int> ; }", "label": 0, "id": 1347}
{"input": "int main ( ) { int t ; long long int a , b , x , y , gcd , lcm ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( x * y ) / a ) ; t -- ; } }", "label": 0, "id": 1348}
{"input": "int main ( ) { long int z , i , n , a , b , max , min , hcf , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } z = max % min ; if ( z == <int> ) { hcf = min ; } else { while ( z != <int> ) { max = min ; min = z ; z = max % min ; } hcf = min ; } lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 1349}
{"input": "int Arr [ <int> ] [ <int> ] ; long Sum ; int Size ; void <unk> ( int <unk> , int <unk> , long current_sum ) { long newSum = current_sum + Arr [ <unk> ] [ <unk> ] ; if ( <unk> == Size - <int> ) { if ( newSum > Sum ) Sum = newSum ; } else { <unk> ( <unk> + <int> , <unk> , newSum ) ; <unk> ( <unk> + <int> , <unk> + <int> , newSum ) ; } } void <unk> ( int size ) { int <unk> , <unk> ; Size = size ; for ( <unk> = <int> ; <unk> < Size ; <unk> ++ ) for ( <unk> = <int> ; <unk> <= <unk> ; <unk> ++ ) scanf ( <str> , & Arr [ <unk> ] [ <unk> ] ) ; } int main ( ) { int size , TC ; scanf ( <str> , & TC ) ; while ( TC -- > <int> ) { Sum = <int> ; scanf ( <str> , & Size ) ; <unk> ( Size ) ; <unk> ( <int> , <int> , <int> ) ; printf ( <str> , Sum ) ; } return <int> ; }", "label": 2, "id": 1350}
{"input": "int a [ <int> ] ; int min ; int swap ( int min , int a [ ] ) ; int main ( ) { long int n , sum ; int t , i , min , temp ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i <= n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { min = a [ i ] ; sum = sum + a [ i ] ; temp = min ; min = a [ i + <int> ] ; a [ i + <int> ] = temp ; } else { min = a [ i + <int> ] ; sum = sum + a [ i + <int> ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 1351}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { long int t , a , i ; scanf ( <str> , & t ) ; long int b [ t ] ; for ( i = <int> ; i < t ; i ++ ) scanf ( <str> , & b [ i ] ) ; a = b [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { if ( a > b [ i ] ) a = b [ i ] ; } printf ( <str> , a * ( t - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1352}
{"input": "int main ( ) { int n1 , n2 , x , a , y , gcd , i ; int w [ a ] ; int v [ a ] ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) { n1 = n1 - n2 ; } else { n2 = n2 - n1 ; } } gcd = n1 ; int lcm = ( x * y ) / gcd ; w [ i ] = n1 ; v [ i ] = lcm ; } for ( i = <int> ; i < a ; i ++ ) { printf ( <str> , w [ i ] ) ; printf ( <str> , v [ i ] ) ; } return <int> ; }", "label": 1, "id": 1353}
{"input": "int hcf ( int , int ) ; int main ( ) { int a , b , t , h , l , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; } int hcf ( int x , int y ) { if ( y == <int> ) return x ; else return hcf ( y , x % y ) ; }", "label": 1, "id": 1354}
{"input": "int main ( ) { int a , b , t , x , y , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { temp = y ; y = x % y ; x = temp ; } int lcm = a * b / x ; printf ( <str> , x , lcm ) ; } }", "label": 1, "id": 1355}
{"input": "void print ( int , int ) ; int main ( ) { int a , b ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; print ( a , b ) ; } return <int> ; } void print ( int a , int b ) { int i , small , gcd = <int> , lcm ; small = ( a < b ) ? a : b ; for ( i = <int> ; i <= small ; i ++ ) { if ( a % i == <int> && b % i == <int> && i > gcd ) { gcd = i ; } } lcm = ( ( a * b ) / gcd ) ; printf ( <str> , gcd , lcm ) ; }", "label": 1, "id": 1356}
{"input": "int main ( ) { unsigned int t , n , i , j ; int num , prev , sum ; scanf ( <str> , & t ) ; while ( t > <int> ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { j = i ; prev = <int> ; while ( j > <int> ) { scanf ( <str> , & num ) ; if ( prev < num ) { prev = num ; } j -- ; } sum = sum + prev ; } printf ( <str> , sum ) ; t -- ; } return <int> ; }", "label": 1, "id": 1357}
{"input": "int main ( ) { long long t , i , n , a , min , cost ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) { min = a ; } } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 1358}
{"input": "int main ( void ) { int n , a , b , l , g , x , y , t ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { t = y ; y = x % y ; x = t ; } g = x ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 1359}
{"input": "int main ( ) { int testCases , n , i , j , temp , temp2 , temp3 , k ; int a [ <int> ] = { <int> } , b [ <int> ] = { <int> } ; scanf ( <str> , & testCases ) ; while ( testCases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp ) ; if ( j == <int> ) { a [ <int> ] += temp ; } else if ( j == i ) { a [ j ] = temp + b [ j - <int> ] ; } else { temp2 = temp + b [ j - <int> ] ; temp3 = temp + b [ j ] ; a [ j ] = ( temp2 > temp3 ) ? temp2 : temp3 ; } } for ( k = <int> ; k <= i ; k ++ ) { b [ k ] = a [ k ] ; printf ( <str> , b [ k ] ) ; } putchar ( <char> ) ; } temp = b [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( b [ i ] > temp ) temp = b [ i ] ; } printf ( <str> , temp ) ; for ( k = <int> ; k < n ; k ++ ) { b [ k ] = a [ k ] = <int> ; } } return <int> ; }", "label": 1, "id": 1360}
{"input": "int main ( ) { long long t , n , a , i , sum , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; min = a ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 1361}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; long long int p = <int> , c [ t ] , d [ t ] ; for ( int i = <int> ; i < t ; i ++ ) { long long int a , b ; scanf ( <str> , & a , & b ) ; c [ p ] = gcd ( a , b ) ; d [ p ] = ( a * b ) / gcd ( a , b ) ; p ++ ; } for ( int i = <int> ; i < p ; i ++ ) { printf ( <str> , c [ i ] , d [ i ] ) ; printf ( <str> ) ; } } long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; else if ( a == <int> ) { return b ; } else return gcd ( b , a % b ) ; }", "label": 0, "id": 1362}
{"input": "int gcd ( int n1 , int n2 ) ; int main ( ) { int n1 , n2 , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; printf ( <str> , gcd ( n1 , n2 ) , ( n1 * n2 ) / gcd ( n1 , n2 ) ) ; } return <int> ; } int gcd ( int n1 , int n2 ) { if ( n2 == <int> ) return n1 ; else n2 = gcd ( n2 , n1 % n2 ) ; }", "label": 1, "id": 1363}
{"input": "int main ( void ) { int t , n , i , j , ctr , f = <int> ; long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { ctr = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i - <int> ] ) f ++ ; else { ctr = ctr + ( f * ( f + <int> ) ) / <int> ; f = <int> ; } } if ( f != <int> ) { ctr = ctr + ( f * ( f + <int> ) ) / <int> ; f = <int> ; } ctr = ctr + n ; printf ( <str> , ctr ) ; } return <int> ; }", "label": 1, "id": 1364}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a1 , b1 , a , b , max = <int> ; scanf ( <str> , & a , & b ) ; a1 = a ; b1 = b ; while ( max > <int> ) { max = a % b ; a = b ; b = max ; } printf ( <str> , a , ( a1 * b1 ) / a ) ; } return <int> ; }", "label": 0, "id": 1365}
{"input": "int find_path ( int a [ ] [ <int> ] , int p , int q , int n , int div [ ] [ <int> ] ) { int val1 , val2 ; if ( p > n ) return ( <int> ) ; if ( div [ p ] [ q ] != <int> ) return ( div [ p ] [ q ] ) ; val1 = find_path ( a , p + <int> , q , n , div ) ; div [ p + <int> ] [ q ] = <int> ; val2 = find_path ( a , p + <int> , q + <int> , n , div ) ; div [ p + <int> ] [ q + <int> ] = <int> ; if ( val1 > a [ p ] [ q ] ) { return ( a [ p ] [ q ] + val1 ) ; div [ p ] [ q ] = a [ p ] [ q ] + val1 ; } else { return ( a [ p ] [ q ] + val2 ) ; div [ p ] [ q ] = a [ p ] [ q ] + val2 ; } } int main ( ) { int i = <int> , j = <int> , k , num , rowmax , val , count , m = <int> ; int tri [ <int> ] [ <int> ] , div [ <int> ] [ <int> ] ; int result [ <int> ] ; scanf ( <str> , & num ) ; while ( m < num ) { for ( k = <int> ; k < <int> ; k ++ ) { for ( count = <int> ; count < <int> ; count ++ ) { div [ k ] [ count ] = <int> ; } } scanf ( <str> , & rowmax ) ; for ( k = <int> ; k < rowmax ; k ++ ) { for ( count = <int> ; count <= k ; count ++ ) { scanf ( <str> , & tri [ k ] [ count ] ) ; } } val = find_path ( tri , i , j , k , div ) ; printf ( <str> , val ) ; } return ( <int> ) ; }", "label": 2, "id": 1366}
{"input": "int main ( ) { int T , N , i , j , k ; scanf ( <str> , & T ) ; while ( T -- ) { int arr [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = ( N - <int> ) ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i - <int> ] [ j ] = MAX ( arr [ i - <int> ] [ j ] + arr [ i ] [ j ] , arr [ i - <int> ] [ j ] + arr [ i ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1367}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , sum = <int> ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( int j = <int> ; j < n ; j ++ ) { if ( a [ j ] != <char> ) { if ( a [ j ] > a [ j + <int> ] ) { a [ j ] = <char> ; sum += a [ j + <int> ] ; } else { a [ j + <int> ] = <char> ; sum += a [ j ] ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 1368}
{"input": "int main ( ) { int t , i , j , k , sum ; int n [ <int> ] , r , h = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum = <int> ; scanf ( <str> , & r ) ; { for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & n [ h ] ) ; sum = sum + n [ h ] ; h ++ ; } } printf ( <str> , ( sum / <int> ) ) ; } } }", "label": 3, "id": 1369}
{"input": "int main ( ) { int T , h , l ; scanf ( <str> , & T ) ; while ( T -- ) { int p , q ; scanf ( <str> , & p , & q ) ; h = hcf ( p , q ) ; l = lcm ( p , q ) ; printf ( <str> , h , l ) ; } return <int> ; } int hcf ( int a , int b ) { while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } return a ; } int lcm ( int i , int k ) { static int multiple = <int> ; multiple += k ; if ( ( multiple % i == <int> ) && ( multiple % k == <int> ) ) { return multiple ; } else { return lcm ( i , k ) ; } }", "label": 3, "id": 1370}
{"input": "int main ( ) { int t ; int * sol , * temp ; scanf ( <str> , & t ) ; sol = ( int * ) malloc ( sizeof ( int ) * ( t + <int> ) ) ; temp = sol ; while ( t -- ) { int n ; int i ; scanf ( <str> , & n ) ; short int a [ <int> ] ; for ( i = <int> ; i < n * ( n + <int> ) / <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; while ( n ) { for ( i = ( n - <int> ) * ( n - <int> ) / <int> ; i < n * ( n - <int> ) / <int> && i >= <int> ; i ++ ) if ( ( a [ n + i - <int> ] ) >= a [ n + i ] ) a [ i ] += a [ n + i - <int> ] ; else a [ i ] += a [ n + i ] ; n -- ; } ; * temp = a [ <int> ] ; temp ++ ; } * temp = - <int> ; while ( * sol > <int> ) { printf ( <str> , * sol ) ; sol ++ ; } return <int> ; }", "label": 0, "id": 1371}
{"input": "int main ( ) { int T , i ; scanf ( <str> , & T ) ; while ( T -- ) { long long int a , b ; long long int gcd = <int> , lcm = <int> ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 1372}
{"input": "int main ( ) { int max , lines , testcases , i , j , k , arr1 [ <int> ] , arr2 [ <int> ] ; scanf ( <str> , & testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) { scanf ( <str> , & lines ) ; arr1 [ <int> ] = <int> ; arr1 [ <int> ] = <int> ; for ( j = <int> ; j <= lines ; j ++ ) { for ( k = <int> ; k < j - <int> ; k ++ ) { scanf ( <str> , & arr2 [ k ] ) ; } scanf ( <str> , & arr2 [ j - <int> ] ) ; for ( k = <int> ; k < j ; k ++ ) { arr1 [ j - k ] = arr2 [ j - <int> - k ] + ( arr1 [ j - k ] > arr1 [ j - <int> - k ] ? arr1 [ j - k ] : arr1 [ j - <int> - k ] ) ; } arr1 [ <int> ] = <int> ; arr1 [ j + <int> ] = <int> ; } max = <int> ; for ( j = <int> ; j < lines + <int> ; j ++ ) max = arr1 [ j ] > max ? arr1 [ j ] : max ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1373}
{"input": "main ( ) { int t , n , i , j , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] < <int> || a [ i ] [ j ] > <int> ) return <int> ; } for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) a [ i - <int> ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 1374}
{"input": "void max ( int , int ) ; int i , j , n ; int a [ <int> ] [ <int> ] ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) max ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } void max ( int p , int q ) { if ( p >= q ) { a [ i - <int> ] [ j ] = p + a [ i - <int> ] [ j ] ; } else { a [ i - <int> ] [ j ] = q + a [ i - <int> ] [ j ] ; } }", "label": 3, "id": 1375}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 1376}
{"input": "int main ( ) { int t , n , i , p , c ; long long int arr [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & p ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < p ) { p = arr [ i ] ; } } printf ( <str> , ( n - <int> ) * p ) ; } return <int> ; }", "label": 1, "id": 1377}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; scanf ( <str> , & a [ <int> ] ) ; int min = a [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1378}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t ; int a , b ; int one , two ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { do { scanf ( <str> , & a , & b ) ; } while ( a < <int> || a > <int> || b < <int> || b > <int> ) ; one = gcd ( a , b ) ; two = lcm ( a , b ) ; printf ( <str> , one , two ) ; } return <int> ; } int gcd ( int x , int y ) { int i ; int l ; int p = <int> ; if ( x <= y ) l = x ; else l = y ; for ( i = <int> ; i <= l ; i ++ ) { if ( x % i == <int> && y % i == <int> ) { p = i ; } } return p ; } int lcm ( int x , int y ) { int i ; int h ; int p ; if ( x <= y ) h = y ; else h = x ; for ( i = x * y ; i >= h ; i -- ) { if ( i % x == <int> && i % y == <int> ) p = i ; } return p ; }", "label": 2, "id": 1379}
{"input": "int main ( ) { int t , n1 , n2 , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { for ( i = <int> ; i <= n2 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } } else { for ( i = <int> ; i <= n1 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1380}
{"input": "main ( ) { int t , i , l , n , j , a [ ROW ] [ COL ] , * b ; b = ( int * ) malloc ( sizeof ( int ) * t ) ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= n - <int> ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } b [ l ] = a [ <int> ] [ <int> ] ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , b [ i ] ) ; }", "label": 1, "id": 1381}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , l , m , n , t ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j < i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( l = t - <int> ; l >= <int> ; l -- ) for ( m = <int> ; m <= l - <int> ; m ++ ) if ( a [ l ] [ m ] > a [ l ] [ m + <int> ] ) a [ l - <int> ] [ m ] = a [ l - <int> ] [ m ] + a [ l ] [ m ] ; else a [ l - <int> ] [ m ] = a [ l - <int> ] [ m ] + a [ l ] [ m + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1382}
{"input": "int max ( int num1 , int num2 ) ; main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int t , i , j ; scanf ( <str> , & t ) ; int a [ t ] [ t ] , b [ t ] [ t ] ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = <int> ; j <= t - <int> ; j ++ ) { b [ t - <int> ] [ j ] = a [ t - <int> ] [ j ] ; } for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < t - i ; j ++ ) { b [ t - i - <int> ] [ j ] = max ( a [ t - i - <int> ] [ j ] + b [ t - i ] [ j ] , a [ t - i - <int> ] [ j ] + b [ t - i ] [ j + <int> ] ) ; } } printf ( <str> , b [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int num1 , int num2 ) { int result ; if ( num1 >= num2 ) result = num1 ; else result = num2 ; return result ; }", "label": 0, "id": 1383}
{"input": "int main ( ) { int n , p , i , j ; int var [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & p ) ; for ( i = <int> ; i < p ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , var [ i ] [ j ] ) ; } printf ( <str> ) ; } for ( i = p - <int> ; i > <int> ; i -- ) { for ( j = p - <int> ; j > <int> ; j -- ) { if ( var [ i ] [ j ] + var [ i - <int> ] [ j - <int> ] > var [ i ] [ j - <int> ] + var [ i - <int> ] [ j - <int> ] ) var [ i - <int> ] [ j - <int> ] = var [ i - <int> ] [ j - <int> ] + var [ i ] [ j ] ; else var [ i - <int> ] [ j - <int> ] = var [ i - <int> ] [ j - <int> ] + var [ i ] [ j - <int> ] ; } } printf ( <str> , var [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 1384}
{"input": "int main ( ) { int a , b , i , t , j , g ; scanf ( <str> , & t ) ; while ( t -- ) { j = a < b ? a : b ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= j ; ++ i ) { if ( a % i == <int> && b % i == <int> ) g = i ; } printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 1, "id": 1385}
{"input": "int gcd ( int a , int b ) { int hcf = <int> , i = <int> , p = <int> , min = i ; while ( i <= min ) { if ( a % i == <int> && b % i == <int> ) { hcf *= i ; a /= i ; b /= i ; i = p ; } else { i ++ ; p = i ; } if ( a < b ) min = a ; else min = b ; } return hcf ; } int main ( ) { int n ; scanf ( <str> , & n ) ; int i , g [ n ] , l [ n ] ; for ( i = <int> ; i < n ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; g [ i ] = gcd ( a , b ) ; l [ i ] = a * b / g [ i ] ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , g [ i ] , l [ i ] ) ; } return <int> ; }", "label": 1, "id": 1386}
{"input": "int main ( ) { int t , n , x , cost , i , ss ; scanf ( <str> , & t ) ; int arr [ <int> ] ; int test = - <int> , j = <int> , k ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( ss = <int> ; ss < n ; ss ++ ) { scanf ( <str> , & arr [ ss ] ) ; } cost = <int> ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( arr [ j ] <= arr [ j + <int> ] ) { cost = arr [ j ] ; } } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 1387}
{"input": "int main ( ) { int A , B , i , T , G , L ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; G = gcd ( A , B ) ; L = A * B / G ; printf ( <str> , G , L ) ; } return <int> ; } int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } return a ; }", "label": 1, "id": 1388}
{"input": "int main ( ) { int t , n ; long long int min , temp ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; scanf ( <str> , & min ) ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & temp ) ; if ( min > temp ) min = temp ; } printf ( <str> , min * ( n - <int> ) ) ; t -- ; } }", "label": 1, "id": 1389}
{"input": "int main ( ) { int test , n , i , c = <int> ; unsigned long a [ size ] ; scanf ( <str> , & test ) ; while ( test > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } c = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) c += a [ i + <int> ] ; if ( a [ i ] < a [ i + <int> ] ) c += a [ i ] ; } printf ( <str> , c ) ; test -- ; } }", "label": 3, "id": 1390}
{"input": "int main ( ) { int t , b , i = <int> ; double g , h , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & b ) ; if ( b > <int> ) { h = <int> ; d = <fp> * b ; } else { h = <fp> * b ; d = <fp> * b ; } g = ( float ) b + h + d ; printf ( <str> , g ) ; } return <int> ; }", "label": 1, "id": 1391}
{"input": "main ( ) { int t , a , b , i , j , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= ( a < b ? a : b ) ; j ++ ) { if ( a % j == <int> && b % j == <int> ) g = j ; } for ( j = ( a > b ? a : b ) ; j <= a * b ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { l = j ; break ; } } printf ( <str> , g , l ) ; } }", "label": 2, "id": 1392}
{"input": "int find_gcd ( int x , int y ) { if ( y == <int> ) return x ; else return find_gcd ( y , x % y ) ; } int main ( ) { int T , a , b , ans = <int> , * arr , gcd , lcm ; scanf ( <str> , & T ) ; arr = ( int * ) malloc ( T * <int> * sizeof ( int ) ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; gcd = find_gcd ( a , b ) ; lcm = ( a * b ) / gcd ; arr [ ans ++ ] = gcd ; arr [ ans ++ ] = lcm ; } for ( T = <int> ; T < ans ; T += <int> ) { printf ( <str> , arr [ T ] , arr [ T + <int> ] ) ; if ( T != ans - <int> ) printf ( <str> ) ; } }", "label": 1, "id": 1393}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n1 , n2 , g ; int lcm ; scanf ( <str> , & n1 , & n2 ) ; g = gcd ( n1 , n2 ) ; lcm = n1 * n2 / g ; printf ( <str> , g , lcm ) ; } }", "label": 1, "id": 1394}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , min , i , * arr ; long long int ans ; scanf ( <str> , & n ) ; arr = ( int * ) malloc ( n * sizeof ( int ) ) ; scanf ( <str> , & arr [ <int> ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( min > arr [ i ] ) { min = arr [ i ] ; } } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; free ( arr ) ; } return <int> ; }", "label": 0, "id": 1395}
{"input": "int n , a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] = { <int> } ; int s ( int a1 , int a2 ) { if ( sum [ a1 ] [ a2 ] != <int> ) return sum [ a1 ] [ a2 ] ; else if ( a1 == n ) { sum [ a1 ] [ a2 ] = a [ a1 ] [ a2 ] ; return sum [ a1 ] [ a2 ] ; } else { int t1 , t2 ; t1 = s ( a1 + <int> , a2 ) ; t2 = s ( a1 + <int> , a2 + <int> ) ; if ( t1 > t2 ) sum [ a1 ] [ a2 ] = a [ a1 ] [ a2 ] + t1 ; else sum [ a1 ] [ a2 ] = a [ a1 ] [ a2 ] + t2 ; return sum [ a1 ] [ a2 ] ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j ; scanf ( <str> , & n ) ; memset ( sum , <int> , sizeof ( sum ) ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , s ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 1396}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] <= min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 1397}
{"input": "int arr [ <int> ] [ <int> ] ; int arr1 [ <int> ] [ <int> ] ; int n ; int func ( int m , int y ) { int a , b ; if ( m >= n || y >= n ) return <int> ; if ( arr1 [ m ] [ y ] >= <int> ) return arr1 [ m ] [ y ] ; else { a = arr [ m ] [ y ] + ( func ( m + <int> , y ) ) ; b = arr [ m ] [ y ] + ( func ( m + <int> , y + <int> ) ) ; if ( a > b ) { arr1 [ m ] [ y ] = a ; return a ; } else { arr1 [ m ] [ y ] = b ; return b ; } } } int main ( ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr1 [ i ] [ j ] = - <int> ; } printf ( <str> , func ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 1398}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 1, "id": 1399}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; int i , j , m = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; if ( a [ i ] [ j ] > m ) m = a [ i ] [ j ] ; } } printf ( <str> , m ) ; } return <int> ; }", "label": 1, "id": 1400}
{"input": "int main ( ) { int n , t ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; int a [ t ] [ t ] ; for ( int i = <int> ; i < t ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( int i = t - <int> ; i > <int> ; i -- ) for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1401}
{"input": "int sort ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } main ( ) { int t , n , i , ans ; scanf ( <str> , & t ) ; while ( t -- ) { ans = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; qsort ( ( void * ) a , n , sizeof ( int ) , sort ) ; for ( i = n - <int> ; i > <int> ; i -- ) { if ( a [ i - <int> ] + <int> == a [ i ] ) a [ i ] = <int> ; else { a [ i - <int> ] = <int> ; i -- ; } } for ( i = <int> ; i < n ; i ++ ) ans += a [ i ] ; printf ( <str> , ans ) ; } }", "label": 1, "id": 1402}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int a [ n ] [ n ] ; int i , j ; for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 1403}
{"input": "int main ( ) { int n ; int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = ( n - <int> ) ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? ( a [ i - <int> ] [ j ] = ( a [ i - <int> ] [ j ] + a [ i ] [ j ] ) ) : ( a [ i - <int> ] [ j ] = ( a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ) ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1404}
{"input": "int main ( ) { int a [ <int> ] , count , t ; long long int i , n , ans = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( i == <int> ) count = <int> ; else { if ( a [ i ] >= a [ i - <int> ] ) ++ count ; else count = <int> ; } ans += count ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 1405}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , k ; int sum = <int> ; scanf ( <str> , & n ) ; int tri [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & tri [ i ] [ j ] ) ; for ( k = n - <int> ; k > <int> ; k -- ) { for ( j = <int> ; j < k ; j ++ ) { if ( tri [ k ] [ j ] >= tri [ k ] [ j + <int> ] ) tri [ k - <int> ] [ j ] += tri [ k ] [ j ] ; else tri [ k - <int> ] [ j ] += tri [ k ] [ j + <int> ] ; } } printf ( <str> , tri [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1406}
{"input": "int main ( void ) { int t , a , b ; long long int c , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; d = a * b ; if ( a > b ) { while ( <int> ) { c = b ; if ( a % b == <int> ) { printf ( <str> , b , d / b ) ; break ; } b = a % b ; a = c ; } } else if ( a < b ) { while ( <int> ) { c = a ; if ( b % a == <int> ) { printf ( <str> , a , d / a ) ; break ; } a = b % a ; b = c ; } } else if ( a == b ) printf ( <str> , a , b ) ; } }", "label": 1, "id": 1407}
{"input": "int main ( ) { int n , i ; scanf ( <str> , & n ) ; int a [ n ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] [ <int> ] , & a [ i ] [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { int big , small ; if ( a [ i ] [ <int> ] > a [ i ] [ <int> ] ) { small = a [ i ] [ <int> ] ; big = a [ i ] [ <int> ] ; } else { big = a [ i ] [ <int> ] ; small = a [ i ] [ <int> ] ; } int rem = big % small ; while ( rem != <int> ) { big = small ; small = rem ; rem = big % small ; } int hcf = small ; int lcm = ( a [ i ] [ <int> ] * a [ i ] [ <int> ] ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 1408}
{"input": "int n ; int a [ <int> ] [ <int> ] ; int b [ <int> ] [ <int> ] = { - <int> } ; int solve ( int , int ) ; int main ( ) { int t = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int i = <int> ; int j = <int> ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { b [ i ] [ j ] = - <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } i = <int> ; j = <int> ; int ans = solve ( i , j ) ; printf ( <str> , ans ) ; } return <int> ; } int solve ( i , j ) { if ( i > n - <int> ) { return <int> ; } if ( b [ i ] [ j ] != - <int> ) { return b [ i ] [ j ] ; } int t1 = solve ( i + <int> , j ) ; int t2 = solve ( i + <int> , j + <int> ) ; int t ; if ( t1 > t2 ) { t = t1 + a [ i ] [ j ] ; } else { t = t2 + a [ i ] [ j ] ; } b [ i ] [ j ] = t ; return t ; }", "label": 2, "id": 1409}
{"input": "int table [ <int> ] [ <int> ] ; int tri [ <int> ] [ <int> ] ; int n ; int solve ( int i , int j ) { if ( i > ( n - <int> ) ) return <int> ; if ( table [ i ] [ j ] != - <int> ) return table [ i ] [ j ] ; int a1 = solve ( i + <int> , j ) ; int a2 = solve ( i + <int> , j + <int> ) ; table [ i ] [ j ] = a1 > a2 ? a1 + tri [ i ] [ j ] : a2 + tri [ i ] [ j ] ; return table [ i ] [ j ] ; } int main ( ) { int tc , i , j , ans ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) table [ i ] [ j ] = - <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; ans = solve ( <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 1410}
{"input": "int gcd ( int x , int y ) { if ( y != <int> ) return gcd ( y , x % y ) ; else return x ; } int lcm ( int x , int y ) { return ( ( x * y ) / gcd ( x , y ) ) ; } int main ( ) { int t , i , g , l , x , y ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x , & y ) ; g = gcd ( x , y ) ; l = lcm ( x , y ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 1411}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , n1 , n2 , lcm , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; g = gcd ( n1 , n2 ) ; lcm = ( n1 * n2 ) / g ; printf ( <str> , g , lcm ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; }", "label": 1, "id": 1412}
{"input": "int main ( ) { int i , n1 , n2 , y1 , y2 , l , t , x = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { x = <int> ; scanf ( <str> , & n1 , & n2 ) ; y1 = n1 ; y2 = n2 ; if ( n1 < n2 ) { while ( x != <int> ) { x = n2 % n1 ; n2 = n1 ; n1 = x ; } printf ( <str> , n2 ) ; l = y1 * y2 / n2 ; printf ( <str> , l ) ; } else { while ( x != <int> ) { x = n1 % n2 ; n1 = n2 ; n2 = x ; } printf ( <str> , n1 ) ; l = y1 * y2 / n1 ; printf ( <str> , l ) ; } } return <int> ; }", "label": 1, "id": 1413}
{"input": "int mat [ MAX ] [ MAX ] ; int max ( int a , int b ) { return ( a > b ? a : b ) ; } int sum ( int n , int i , int j ) { if ( i == n ) return <int> ; return mat [ i ] [ j ] + max ( sum ( n , i + <int> , j ) , sum ( n , i + <int> , j + <int> ) ) ; } int main ( ) { int tc , i , j , k , n ; scanf ( <str> , & tc ) ; for ( k = <int> ; k < tc ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; if ( j < i + <int> ) scanf ( <str> ) ; } printf ( <str> , sum ( n , <int> , <int> ) ) ; } }", "label": 2, "id": 1414}
{"input": "int main ( ) { int test , x ; scanf ( <str> , & test ) ; for ( x = <int> ; x <= test ; x ++ ) { int a [ <int> ] , i ; int score = <int> ; int b ; scanf ( <str> , & b ) ; for ( i = <int> ; i <= b - <int> ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i <= b - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) score = a [ i + <int> ] + score ; else if ( a [ i + <int> ] > a [ i ] ) { score = a [ i ] + score ; int t ; t = a [ i + <int> ] ; a [ i + <int> ] = a [ i ] ; a [ i ] = t ; } } printf ( <str> , score ) ; } return <int> ; }", "label": 1, "id": 1415}
{"input": "int main ( void ) { int t , n , i , j , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { x = a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] += x ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1416}
{"input": "int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } return a ; } int lcm ( int a , int b ) { return a * b / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 2, "id": 1417}
{"input": "int t , n , i , j , a [ <int> ] [ <int> ] ; int main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1418}
{"input": "int arr [ <int> ] [ <int> ] , res [ <int> ] [ <int> ] , len ; int foo ( int i , int j ) { int sum1 = <int> , sum2 = <int> , sum = <int> ; if ( i >= len ) { return <int> ; } if ( res [ i ] [ j ] != - <int> ) { return res [ i ] [ j ] ; } sum1 = sum1 + foo ( i + <int> , j ) ; sum2 += foo ( i + <int> , j + <int> ) ; sum = ( sum1 > sum2 ? sum1 + arr [ i ] [ j ] : sum2 + arr [ i ] [ j ] ) ; res [ i ] [ j ] = sum ; return sum ; } int main ( ) { int i , j , tcase ; scanf ( <str> , & tcase ) ; while ( tcase ) { int sum = <int> ; scanf ( <str> , & len ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) res [ i ] [ j ] = - <int> ; for ( i = <int> ; i < len ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; sum = foo ( <int> , <int> ) ; printf ( <str> , sum ) ; tcase -- ; } }", "label": 0, "id": 1419}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; if ( test >= <int> && test <= <int> ) { while ( test -- ) { long long int a [ <int> ] = { <int> } , ans = <int> , i , n = <int> , j , k = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { k = i ; for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] >= a [ k ] ) { ans ++ ; k ++ ; } else break ; } } printf ( <str> , ans + n ) ; } } return <int> ; }", "label": 0, "id": 1420}
{"input": "int main ( ) { int t , n , line , tri [ <int> ] [ <int> ] , tri2 [ <int> ] [ <int> ] , i , j , a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) tri2 [ i ] [ j ] = - <int> ; while ( t -- ) { scanf ( <str> , & n ) ; line = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; for ( i = n - <int> ; i > - <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( j > <int> ) { a = tri [ i - <int> ] [ j - <int> ] + tri [ i ] [ j ] ; b = tri [ i - <int> ] [ j ] + tri [ i ] [ j ] ; if ( a > b ) { if ( tri2 [ i - <int> ] [ j - <int> ] < a ) tri2 [ i - <int> ] [ j - <int> ] = a ; } else { if ( tri2 [ i - <int> ] [ j ] < b ) tri2 [ i - <int> ] [ j ] = b ; } } else tri2 [ i - <int> ] [ j ] = tri [ i - <int> ] [ j ] + tri [ i ] [ j ] ; } for ( j = <int> ; j < i + <int> ; j ++ ) tri [ i - <int> ] [ j ] = tri2 [ i - <int> ] [ j ] ; } printf ( <str> , tri2 [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1421}
{"input": "int max ( int , int ) ; int main ( ) { int a [ <int> ] [ <int> ] , n , t , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; }", "label": 2, "id": 1422}
{"input": "int main ( ) { int t , r , i , sum = <int> , l , m , s = <int> , max ; scanf ( <str> , & t ) ; while ( -- t ) { scanf ( <str> , & r ) ; s = r * ( r + <int> ) / <int> ; int ar [ s ] ; max = ar [ <int> ] + ar [ <int> ] + ar [ <int> ] + ar [ <int> ] ; l = <int> ; while ( l <= ( s - <int> ) ) { for ( i = l ; i < l + <int> ; i ++ ) { sum = sum + ar [ i ] ; } if ( sum > max ) max = sum ; l ++ ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1423}
{"input": "int m , i , j , k , l , n , * p , * q , s , b [ <int> ] ; int z ( int a , int b ) { return a > b ? a : b ; } void assert2 ( ) { while ( <int> ) { } } void f ( ) { p ++ , i ++ , k ++ ; if ( k == j ) { k = <int> ; j ++ ; p -- ; } assert2 ( p - b < <int> ) ; q = p - <int> ; assert2 ( q - b < <int> ) ; } int main ( ) { scanf ( <str> , & m ) ; while ( m -- ) { scanf ( <str> , & n ) ; for ( i = k = <int> , j = <int> , p = b ; i * <int> < n * n + n ; f ( ) ) { assert2 ( & ( b [ i ] ) - p == j - <int> ) ; scanf ( <str> , & s ) ; l = z ( l , ( b [ i ] = s + ( ( i > <int> ) ? ( ( k > <int> ) ? ( ( k < j - <int> ) ? z ( * p , * q ) : * q ) : * p ) : <int> ) ) ) ; } printf ( <str> , l ) ; } }", "label": 2, "id": 1424}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 1425}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , T , i , j , n ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) ? a [ i + <int> ] [ j + <int> ] : a [ i + <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; T -- ; } return <int> ; }", "label": 0, "id": 1426}
{"input": "int main ( ) { int i , j , t , a [ <int> ] [ <int> ] , r ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= r ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 1427}
{"input": "int great ( int a , int b ) { int r ; if ( b == <int> ) return a ; else { r = b ; b = a % b ; a = r ; } } int main ( ) { int n , a , b ; long int gcd , lcm ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; gcd = great ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1428}
{"input": "int main ( ) { long int t , n1 , n2 , rem , num , den , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { num = n1 ; den = n2 ; } else { num = n2 ; den = n1 ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 0, "id": 1429}
{"input": "main ( ) { int tc , l , num [ <int> ] [ <int> ] , sum = <int> , i , j , snum [ <int> ] [ <int> ] ; scanf ( <str> , & tc ) ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { num [ i ] [ j ] = <int> ; snum [ i ] [ j ] = <int> ; } } while ( tc -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & num [ i ] [ j ] ) ; for ( i = l - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < l - <int> ; j ++ ) { if ( num [ i ] [ j ] > num [ i ] [ j + <int> ] ) num [ i - <int> ] [ j ] += num [ i ] [ j ] ; else num [ i - <int> ] [ j ] += num [ i ] [ j + <int> ] ; } } printf ( <str> , num [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 1430}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int small , arr [ <int> ] , i , pos ; long int N , cost ; scanf ( <str> , & N ) ; scanf ( <str> , & arr [ <int> ] ) ; small = arr [ <int> ] ; for ( i = <int> ; i <= N ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < small ) { small = arr [ i ] ; } } cost = small * ( N - <int> ) ; printf ( <str> , cost ) ; } }", "label": 0, "id": 1431}
{"input": "int main ( int argc , char * * argv ) { int times , nRows , a , i , row , elements , TRIndex , elmCount , nr ; int iRows [ MAX ] [ MAX ] , rTemp [ MAX ] , lRow [ MAX ] ; scanf ( <str> , & times ) ; while ( times > <int> ) { scanf ( <str> , & nRows ) ; nr = nRows ; row = <int> ; elements = <int> ; for ( i = <int> ; i < MAX ; i ++ ) for ( a = <int> ; a < MAX ; a ++ ) iRows [ i ] [ a ] = - <int> ; while ( nRows > <int> ) { for ( i = <int> ; i < elements ; i ++ ) scanf ( <str> , & iRows [ row ] [ i ] ) ; row ++ ; elements ++ ; nRows -- ; } elements = <int> ; TRIndex = <int> ; for ( a = <int> ; a < MAX ; a ++ ) rTemp [ a ] = - <int> , lRow [ a ] = iRows [ row - <int> ] [ a ] ; if ( nr == <int> ) { printf ( <str> , lRow [ <int> ] ) ; times -- ; continue ; } for ( i = row - <int> ; i > <int> ; i -- ) { elmCount = i + <int> ; for ( a = <int> ; a < elmCount - <int> ; a ++ ) rTemp [ a ] = iRows [ i ] [ a ] + lRow [ a ] >= iRows [ i ] [ a ] + lRow [ a + <int> ] ? iRows [ i ] [ a ] + lRow [ a ] : iRows [ i ] [ a ] + lRow [ a + <int> ] ; for ( a = <int> ; a < MAX ; a ++ ) lRow [ a ] = rTemp [ a ] , rTemp [ a ] = - <int> ; } printf ( <str> , lRow [ <int> ] + iRows [ <int> ] [ <int> ] > lRow [ <int> ] + iRows [ <int> ] [ <int> ] ? lRow [ <int> ] + iRows [ <int> ] [ <int> ] : lRow [ <int> ] + iRows [ <int> ] [ <int> ] ) ; times -- ; } return <int> ; }", "label": 0, "id": 1432}
{"input": "int hcf ( int n1 , int n2 ) { int i , gcd = <int> ; for ( i = <int> ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } return gcd ; } int lcm ( int n1 , int n2 ) { int i , l , gcd = <int> ; for ( i = <int> ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } l = ( n1 * n2 ) / gcd ; return l ; } int main ( ) { int A [ <int> ] , B [ <int> ] , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & A [ i ] , & B [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , hcf ( A [ i ] , B [ i ] ) , lcm ( A [ i ] , B [ i ] ) ) ; } return <int> ; }", "label": 2, "id": 1433}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { int temp = a ; while ( <int> ) { if ( temp % b == <int> && temp % a == <int> ) break ; temp ++ ; } return temp ; } int main ( ) { int l , t , a , b , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 1434}
{"input": "int n = <int> ; int * * a = NULL ; unsigned long int max ( int i , int j , unsigned long int count ) { unsigned long int count1 = <int> , count2 = <int> ; if ( i == n ) { return count ; } else { count1 = max ( i + <int> , j , count + a [ i ] [ j ] ) ; count2 = max ( i + <int> , j + <int> , count + a [ i ] [ j ] ) ; if ( count1 > count2 ) return count1 ; else return count2 ; } } int main ( ) { int i = <int> , j = <int> , t = <int> ; scanf ( <str> , & t ) ; while ( t -- != <int> ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; while ( i < n ) { a [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; i ++ ; } i = <int> ; while ( i < n ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; j ++ ; } i ++ ; } printf ( <str> , max ( <int> , <int> , <int> ) ) ; free ( a ) ; } return <int> ; }", "label": 2, "id": 1435}
{"input": "int trisum ( int a [ <int> ] [ <int> ] , int rows ) ; int main ( ) { int n , rows , a [ <int> ] [ <int> ] , i , k , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } trisum ( a , rows ) ; } return <int> ; } int trisum ( int a [ <int> ] [ <int> ] , int rows ) { int i , j ; int sum1 = <int> , sum2 = <int> ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = rows - <int> ; j > <int> ; j -- ) { sum1 = a [ rows - <int> - i ] [ j ] + a [ rows - <int> - i ] [ j - <int> ] ; sum2 = a [ rows - <int> - i ] [ j - <int> ] + a [ rows - <int> - i ] [ j - <int> ] ; if ( sum1 > sum2 ) { a [ rows - <int> - i ] [ j - <int> ] = sum1 ; } else { a [ rows - <int> - i ] [ j - <int> ] = sum2 ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 1436}
{"input": "int main ( void ) { int n , i , j , k , t , count , ans ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } count = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { count ++ ; if ( a [ i ] == a [ i + <int> ] ) { count = count - <int> ; } } if ( count == <int> ) { ans = <int> ; } else ans = count * ( count + <int> ) / <int> ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 1437}
{"input": "int main ( ) { int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] , mem [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } n -- ; for ( i = <int> ; i <= n ; i ++ ) mem [ n ] [ i ] = a [ n ] [ i ] ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) mem [ i ] [ j ] = max ( mem [ i + <int> ] [ j ] , mem [ i + <int> ] [ j + <int> ] ) + a [ i ] [ j ] ; printf ( <str> , mem [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1438}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b ; int gcd , lcm ; scanf ( <str> , & a , & b ) ; int A = a , B = b ; if ( a > b ) { int r = a % b ; while ( r != <int> ) { a = b ; b = r ; r = a % b ; } gcd = b ; } else { int r = b % a ; while ( r != <int> ) { b = a ; a = r ; r = b % a ; } gcd = a ; } lcm = A * B / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1439}
{"input": "int scan ( ) { int n = <int> ; int ch = getchar_unlocked ( ) ; while ( ch < <char> || ch > <char> ) ch = getchar_unlocked ( ) ; while ( ch >= <char> && ch <= <char> ) { n = ( n * <int> ) + ch - <char> ; ch = getchar_unlocked ( ) ; } return n ; } main ( ) { int max , i , j , t , n , a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] = { <int> } ; t = scan ( ) ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { s [ i ] [ j ] = <int> ; } } n = scan ( ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = scan ( ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { s [ i ] [ j ] = max ( a [ i ] [ j ] + s [ i - <int> ] [ j - <int> ] , a [ i ] [ j ] + s [ i - <int> ] [ j ] ) ; } } max = s [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( s [ n ] [ i ] > max ) max = s [ n ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1440}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 1, "id": 1441}
{"input": "inline void <unk> ( int * a ) { char c = <int> ; while ( c < <int> ) c = fgetc_unlocked ( stdin ) ; * a = <int> ; while ( c > <int> ) { * a = * a * <int> + c - <char> ; c = fgetc_unlocked ( stdin ) ; } } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - <int> ; while ( <int> ) { buf [ bn -- ] = <char> + ( n ) ; n = n / <int> ; if ( n == <int> ) break ; } while ( bn < BSIZE - <int> ) putchar ( buf [ ++ bn ] ) ; putchar ( <char> ) ; } static char _rbuf [ <int> * <int> ] ; static char * _rend = <int> ; static char * _rpos = <int> ; static int _getchar ( ) { int n = read ( <int> , _rbuf , sizeof _rbuf ) ; if ( n <= <int> ) { printf ( <str> , n ) ; exit ( <int> ) ; } _rend = _rbuf + n ; _rpos = _rbuf + <int> ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < <char> ) { } int n = c - <char> ; while ( ( ( c = mygetchar ( ) ) ) >= <char> ) { n = n * <int> + c - <char> ; } return n ; } int main ( ) { int t , n , i , j , k , temp , max , <unk> ; t = get_i ( ) ; int * * arr = ( int * * ) malloc ( <int> * sizeof ( int * ) ) ; for ( i = <int> ; i < <int> ; i ++ ) arr [ i ] = ( int * ) malloc ( <int> * sizeof ( int ) ) ; for ( i = <int> ; i < t ; i ++ ) { n = get_i ( ) ; <unk> = - <int> ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { max = - <int> ; temp = get_i ( ) ; if ( ( j - <int> ) >= <int> && k < j ) max = arr [ j - <int> ] [ k ] ; if ( ( j - <int> ) >= <int> && ( k - <int> ) >= <int> && arr [ j - <int> ] [ k - <int> ] > max ) max = arr [ j - <int> ] [ k - <int> ] ; if ( max > <int> ) arr [ j ] [ k ] = max + temp ; else arr [ j ] [ k ] = temp ; if ( j == ( n - <int> ) && arr [ j ] [ k ] > <unk> ) <unk> = arr [ j ] [ k ] ; } } put_i ( <unk> ) ; } return <int> ; }", "label": 1, "id": 1442}
{"input": "int gcd ( int num1 , int num2 ) { if ( num2 == <int> ) { return num1 ; } else { gcd ( num2 , num1 % num2 ) ; } } int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; struct s1 { int num1 , num2 ; } ; struct s1 arr [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & arr [ i ] <fp> num1 ) ; scanf ( <str> , & arr [ i ] <fp> num2 ) ; } for ( j = <int> ; j < t ; j ++ ) { int num1 , num2 , hcf , lcm ; num1 = arr [ j ] <fp> num1 ; num2 = arr [ j ] <fp> num2 ; hcf = gcd ( num1 , num2 ) ; lcm = ( num1 * num2 ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 1443}
{"input": "int main ( ) { int tc , nl , i , j ; scanf ( <str> , & tc ) ; while ( tc -- != <int> ) { scanf ( <str> , & nl ) ; int a [ nl ] [ nl ] , b [ nl - <int> ] [ nl - <int> ] ; for ( i = <int> ; i < nl ; i ++ ) for ( j = <int> ; j < nl ; j ++ ) { a [ i ] [ j ] = <int> ; if ( j <= i ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = nl - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { int s1 , s2 ; s1 = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; s2 = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = s1 > s2 ? s1 : s2 ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1444}
{"input": "int main ( ) { int w [ <int> ] [ <int> ] , i , j , k ; int t , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & w [ i ] [ j ] ) ; for ( i = k - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i + <int> ; j ++ ) { x = w [ i ] [ j ] + w [ i + <int> ] [ j ] ; y = w [ i ] [ j ] + w [ i + <int> ] [ j + <int> ] ; if ( x > y ) w [ i ] [ j ] = x ; else w [ i ] [ j ] = y ; } printf ( <str> , w [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1445}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { int n , j ; scanf ( <str> , & n ) ; int A [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & A [ j ] ) ; int min = A [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( A [ j ] < min ) min = A [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1446}
{"input": "int main ( ) { long long int t ; scanf ( <str> , & t ) ; do { long long int n , max ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; max = a [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( max > a [ i ] ) { max = a [ i ] ; } } long long int sum = max * ( n - <int> ) ; t = t - <int> ; printf ( <str> , sum ) ; } while ( t > <int> ) ; return <int> ; }", "label": 0, "id": 1447}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , k , count = <int> , i , j ; scanf ( <str> , & n ) ; count = n ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) { count ++ ; } else break ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 1448}
{"input": "int main ( ) { long long int a , c , d , b , k , y , z ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a ; d = b ; while ( d % c != <int> ) { k = d % c ; d = c ; c = k ; } y = a * b / c ; printf ( <str> , c , y ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 1449}
{"input": "int max1 ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a [ <int> ] [ <int> ] , i , j , count , cases , max2 ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & count ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < count ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = max1 ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } a [ i ] [ j + <int> ] = <int> ; } max2 = a [ count - <int> ] [ <int> ] ; for ( i = <int> ; i < count ; i ++ ) { if ( a [ count - <int> ] [ i ] > max2 ) max2 = a [ count - <int> ] [ i ] ; } printf ( <str> , max2 ) ; } return <int> ; }", "label": 1, "id": 1450}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] , i , j , k , max , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = <int> ; j <= n ; j ++ ) { for ( k = <int> ; k <= n ; k ++ ) s [ j ] [ k ] = <int> ; } for ( j = <int> ; j <= n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( j >= <int> ) { if ( k <= j - <int> ) { if ( a [ j - <int> ] [ k - <int> ] > a [ j - <int> ] [ k ] ) s [ j ] [ k ] = a [ j ] [ k ] + s [ j - <int> ] [ k - <int> ] ; else s [ j ] [ k ] = a [ j ] [ k ] + s [ j - <int> ] [ k ] ; } else s [ j ] [ k ] = a [ j ] [ k ] + s [ j - <int> ] [ k - <int> ] ; } else s [ j ] [ k ] = a [ j ] [ k ] ; } } max = <int> ; for ( j = <int> ; j <= n ; j ++ ) { if ( s [ n ] [ j ] > max ) max = s [ n ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1451}
{"input": "void main ( ) { int t ; int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 1452}
{"input": "int main ( ) { int t , n , min , a , x ; scanf ( <str> , & t ) ; { while ( t -- ) { scanf ( <str> , & n ) ; x = n ; min = <int> ; { while ( n -- ) { scanf ( <str> , & a ) ; if ( a < min ) { min = a ; continue ; } } printf ( <str> , min * ( x - <int> ) ) ; } } } }", "label": 0, "id": 1453}
{"input": "int main ( ) { int t , sz , i , sum = <int> ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & sz ) ; int a [ sz ] ; for ( i = <int> ; i < sz ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } sum = <int> ; for ( i = <int> ; i < sz ; i ++ ) { sum = sum + ( a [ i ] > a [ i + <int> ] ? a [ i + <int> ] : a [ i ] ) ; } printf ( <str> , sum ) ; t -- ; } return <int> ; }", "label": 1, "id": 1454}
{"input": "int a [ N ] [ N ] ; int cache [ N ] [ N ] , n ; int sum ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < N ; j ++ ) { a [ i ] [ j ] = <int> ; cache [ i ] [ j ] = <int> ; } } scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , sum ( <int> , <int> ) ) ; } return <int> ; } int sum ( int i , int j ) { if ( i > n ) return <int> ; if ( cache [ i ] [ j ] != <int> ) return cache [ i ] [ j ] ; else { cache [ i ] [ j ] = a [ i ] [ j ] + ( sum ( i + <int> , j ) > sum ( i + <int> , j + <int> ) ? sum ( i + <int> , j ) : sum ( i + <int> , j + <int> ) ) ; return cache [ i ] [ j ] ; } }", "label": 0, "id": 1455}
{"input": "long long int gcd ( long long int a , int b ) { if ( a == <int> || b == <int> ) { return <int> ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; } int main ( void ) { long long int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 1456}
{"input": "int A [ <int> ] [ <int> ] ; int main ( ) { int t = <int> , n = <int> , i = <int> , j = <int> , k = <int> , max1 = <int> ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( A [ i ] [ j ] >= A [ i ] [ j + <int> ] ) { A [ i - <int> ] [ j ] = A [ i ] [ j ] + A [ i - <int> ] [ j ] ; } else { A [ i - <int> ] [ j ] = A [ i ] [ j + <int> ] + A [ i - <int> ] [ j ] ; } } } printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1457}
{"input": "int main ( ) { long long int g , t , n , k , gcd , lcm , a , b ; scanf ( <str> , & t ) ; for ( g = <int> ; g <= t ; g ++ ) { scanf ( <str> , & n , & k ) ; a = ( n > k ) ? n : k ; b = ( n < k ) ? n : k ; while ( b != <int> ) { long long int x = b ; b = a % b ; a = x ; } gcd = a ; lcm = ( n * k ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1458}
{"input": "int main ( ) { int T , i ; scanf ( <str> , & T ) ; while ( T -- ) { int A , B , GCD , LCM ; scanf ( <str> , & A , & B ) ; if ( A > B ) { for ( i = <int> ; i <= A ; i ++ ) { if ( A % i == <int> && B % i == <int> ) GCD = i ; } LCM = ( A * B ) / GCD ; printf ( <str> , GCD , LCM ) ; } else if ( B > A ) { for ( i = <int> ; i <= B ; i ++ ) { if ( A % i == <int> && B % i == <int> ) GCD = i ; } LCM = ( A * B ) / GCD ; printf ( <str> , GCD , LCM ) ; } } return <int> ; }", "label": 2, "id": 1459}
{"input": "int main ( void ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { int a [ <int> ] , n , b = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] >= a [ i + <int> ] ) { a [ i ] = a [ i + <int> ] ; b = b + a [ i ] ; } else { a [ i + <int> ] = a [ i ] ; b = a [ i ] + b ; } } printf ( <str> , b ) ; } return <int> ; }", "label": 3, "id": 1460}
{"input": "int main ( ) { int t ; long n , i ; long long int count , val ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; count = <int> ; val = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) count ++ ; else { val += count * ( count + <int> ) / <int> ; count = <int> ; } } val += count * ( count + <int> ) / <int> ; printf ( <str> , val ) ; } return <int> ; }", "label": 1, "id": 1461}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int N ; scanf ( <str> , & N ) ; long long int A [ N ] , i , min , c ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & A [ i ] ) ; min = A [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( min > A [ i ] ) min = A [ i ] ; } c = min * ( N - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 1462}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , n ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; int min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1463}
{"input": "int main ( ) { int a , b , r , t , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; t = a * b ; while ( b > <int> ) { r = a % b ; a = b ; b = r ; } gcd = a ; lcm = t / gcd ; printf ( <str> , gcd , lcm ) ; return <int> ; }", "label": 1, "id": 1464}
{"input": "int main ( void ) { int t , n , a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else sum [ i ] [ j ] = max ( sum [ i - <int> ] [ j ] , sum [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } } int max = <int> ; for ( j = <int> ; j <= n ; j ++ ) if ( sum [ n ] [ j ] > max ) max = sum [ n ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1465}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , r , p [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & r ) ; for ( i = <int> ; i <= r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & p [ i ] [ j ] ) ; } } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { p [ i ] [ j ] = p [ i ] [ j ] + max ( p [ i + <int> ] [ j ] , p [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 1466}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int maxsum ( int A [ ] [ <int> ] , int n ) { int i , j , sum [ <int> ] [ <int> ] ; sum [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { sum [ i ] [ <int> ] = A [ i ] [ <int> ] + sum [ i - <int> ] [ <int> ] ; sum [ i ] [ i ] = A [ i ] [ i ] + sum [ i - <int> ] [ i - <int> ] ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { sum [ i ] [ j ] = max ( sum [ i - <int> ] [ j - <int> ] , sum [ i - <int> ] [ j ] ) + A [ i ] [ j ] ; } } return sum [ n - <int> ] [ n - <int> ] ; } int main ( ) { int i , j , A [ <int> ] [ <int> ] , n ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; scanf ( <str> ) ; } int sum = maxsum ( A , n ) ; printf ( <str> , sum ) ; return <int> ; }", "label": 1, "id": 1467}
{"input": "long long int matrix [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] , n ; int max ( long long int a , long long int b ) { if ( a > b ) return a ; else return b ; } long long int solve ( int i , int j ) { long long int t1 , t2 , t ; if ( i == n ) { return <int> ; } if ( cache [ i ] [ j ] < <int> ) { return cache [ i ] [ j ] ; } t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + matrix [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int test , i , j , t ; long long int ans ; scanf ( <str> , & test ) ; for ( t = <int> ; t < test ; t ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } } for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { cache [ i ] [ j ] = <int> ; } } ans = solve ( <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 1468}
{"input": "int check ( ) { int i , j , max , n , posi , posj , sum = <int> , ii , jj , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , a [ i ] [ j ] ) ; printf ( <str> ) ; } max = a [ <int> ] [ <int> ] ; posi = <int> ; posj = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) if ( a [ i ] [ j ] > max ) { max = a [ i ] [ j ] ; posi = i ; posj = j ; } sum += max ; ii = posi ; jj = posj ; while ( posi > <int> ) { if ( posj == <int> ) { sum += a [ posi - <int> ] [ posj ] ; posi = posi - <int> ; } else if ( a [ posi - <int> ] [ posj ] > a [ posi - <int> ] [ posj - <int> ] ) { sum += a [ posi - <int> ] [ posj ] ; posi = posi - <int> ; } else { sum += a [ posi - <int> ] [ posj - <int> ] ; posi = posi - <int> ; posj = posj - <int> ; } } posi = ii ; posj = jj ; while ( posi < n - <int> ) { if ( a [ posi + <int> ] [ posj ] > a [ posi + <int> ] [ posj + <int> ] ) { sum += a [ posi + <int> ] [ posj ] ; posi += <int> ; } else { sum += a [ posi + <int> ] [ posj + <int> ] ; posi += <int> ; posj += <int> ; } } return sum ; } main ( ) { int n , p , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { p = check ( ) ; printf ( <str> , p ) ; } }", "label": 1, "id": 1469}
{"input": "int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { int m , n ; scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , m , ( m * n ) / m ) ; } return <int> ; }", "label": 1, "id": 1470}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; long i , a , b ; while ( t -- ) { scanf ( <str> , & a , & b ) ; i = a * b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } printf ( <str> , a , i / a ) ; } }", "label": 0, "id": 1471}
{"input": "int fastread ( ) { int input ; char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; input = <int> ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int arr [ <int> ] [ <int> ] , i , k , j , t , n ; n = fastread ( ) ; for ( k = <int> ; k < n ; k ++ ) { t = fastread ( ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] = fastread ( ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1472}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i = <int> , gcd = <int> , lcm = <int> , min = <int> , max = <int> ; scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } while ( i != <int> ) { i = max % min ; if ( i == <int> ) break ; else { max = min ; min = i ; } } gcd = min ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1473}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 0, "id": 1474}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } unsigned long int val = ( unsigned long int ) min * ( unsigned long int ) ( n - <int> ) ; printf ( <str> , val ) ; } return <int> ; }", "label": 0, "id": 1475}
{"input": "int main ( ) { long int num1 , num2 , gcd , lcm , a , i , testcases ; x : scanf ( <str> , & testcases ) ; if ( testcases <= <int> && testcases >= <int> ) { for ( i = <int> ; i <= testcases ; i ++ ) { y : scanf ( <str> , & num1 , & num2 ) ; if ( num1 <= <int> && num2 <= <int> && num1 >= <int> && num2 >= <int> ) { if ( num1 > num2 ) { a = num1 ; num1 = num2 ; num2 = a ; } for ( i = num1 ; i > <int> ; i -- ) { if ( num1 % i == <int> ) { if ( num2 % i == <int> ) { gcd = i ; break ; } } } lcm = num1 * num2 / gcd ; printf ( <str> , lcm , gcd ) ; } else goto y ; } } else goto x ; return <int> ; }", "label": 2, "id": 1476}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i ; long int a , b , k ; scanf ( <str> , & a , & b ) ; for ( i = a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i ) ; break ; } } k = a * b ; for ( i = a ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> && k % i == <int> ) { printf ( <str> , i ) ; break ; } } } return <int> ; }", "label": 2, "id": 1477}
{"input": "int main ( ) { int i , t ; long n1 , n2 , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; m = n1 * n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } printf ( <str> , n1 , ( m ) / n1 ) ; } return <int> ; }", "label": 0, "id": 1478}
{"input": "int main ( ) { int i , a [ <int> ] , n , c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { c = c + <int> ; while ( i < n ) { if ( a [ i + <int> ] < a [ i + <int> ] ) { c = c + <int> ; } i ++ ; } } } printf ( <str> , c + n ) ; return <int> ; }", "label": 1, "id": 1479}
{"input": "int main ( ) { int t , n , i , j , k , d , c ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; long int a [ n ] ; c = <int> ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { d = <int> ; for ( k = j ; k < n ; k ++ ) { if ( a [ k + <int> ] >= a [ k ] ) { d ++ ; continue ; } else { c += d ; break ; } } } c = c + n ; printf ( <str> , c ) ; } }", "label": 1, "id": 1480}
{"input": "int main ( void ) { long long t , i , a , b , x , y , gcd , lcm , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) ; lcm = lcm / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 1481}
{"input": "long int gcd ( long int a , long int b ) ; long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return ( gcd ( b , a % b ) ) ; } int main ( ) { int t ; long int a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 1482}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 1483}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int A , B , H , L ; scanf ( <str> , & A , & B ) ; { for ( H = A < B ? A : B ; H >= <int> ; H -- ) if ( A % H == <int> && B % H == <int> ) break ; } { for ( L = A > B ? A : B ; L >= <int> ; L ++ ) if ( L % A == <int> && L % B == <int> ) break ; } printf ( <str> , H , L ) ; } return <int> ; }", "label": 2, "id": 1484}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , c = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] , dp [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) dp [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] <= a [ i ] ) { dp [ i ] = dp [ i - <int> ] + <int> ; } else { dp [ i ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { c = c + dp [ i ] ; } printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 1485}
{"input": "int main ( ) { int T , n , arr [ <int> ] [ <int> ] , i , j , k ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] += max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1486}
{"input": "main ( ) { int t , x , y , z , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; z = x > y ? x : y ; while ( <int> ) { if ( z % y == <int> && z % x == <int> ) break ; z ++ ; } p = x * y / z ; printf ( <str> , p , z ) ; } return <int> ; }", "label": 2, "id": 1487}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { unsigned long long int a , b , lcm , d , hcf ; int i ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; d = ( a > b ) ? b : a ; for ( i = <int> ; i <= d ; i ++ ) { if ( a % i == <int> && b % i == <int> ) hcf = i ; } lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 1488}
{"input": "int fastscan ( ) { char c ; int t = <int> ; while ( ( c = g ) < <int> ) ; while ( ( <char> <= c ) && ( c <= <char> ) ) { t = ( t << <int> ) + ( t << <int> ) + ( c - <char> ) ; c = g ; } return t ; } int main ( ) { int T ; int ans [ <int> ] ; int sums [ <int> ] ; int i , j ; int Tc ; int n ; int num [ <int> ] ; T = fastscan ( ) ; Tc = T ; while ( Tc -- ) { n = fastscan ( ) ; memset ( ( void * ) sums , <int> , n * sizeof ( sums [ <int> ] ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { num [ j ] = fastscan ( ) ; } for ( j = i ; j >= <int> ; j -- ) { sums [ j ] = MAX ( sums [ j ] + num [ j ] , sums [ j - <int> ] + num [ j ] ) ; } sums [ <int> ] += num [ <int> ] ; } ans [ Tc ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { ans [ Tc ] = MAX ( sums [ i ] , ans [ Tc ] ) ; } } while ( T -- ) { printf ( <str> , ans [ T ] ) ; } return <int> ; }", "label": 0, "id": 1489}
{"input": "int main ( ) { int t , a , b , gcd , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( ( a != <int> ) || ( b != <int> ) ) { a = a % b ; if ( a == <int> ) { gcd = b ; break ; } b = b % a ; if ( b == <int> ) { gcd = a ; break ; } } printf ( <str> , gcd , m * n / gcd ) ; } return <int> ; }", "label": 1, "id": 1490}
{"input": "int maximum ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int main ( ) { int T , i , j , k , N ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; int A [ N ] [ N ] , max [ N ] [ N ] ; for ( j = <int> ; j < N ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & A [ j ] [ k ] ) ; } } for ( j = <int> ; j < N ; j ++ ) { max [ N - <int> ] [ j ] = A [ N - <int> ] [ j ] ; } for ( j = N - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { max [ j ] [ k ] = maximum ( A [ j ] [ k ] + max [ j + <int> ] [ k ] , A [ j ] [ k ] + max [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , max [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1491}
{"input": "int main ( ) { int a , b , t , n , d , r , gcd , lcm ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } } return <int> ; }", "label": 1, "id": 1492}
{"input": "int main ( ) { long int a , b , c , d , e , gcd , lcm ; int f , g ; scanf ( <str> , & g ) ; for ( f = <int> ; f <= g ; f ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = a ; d = b ; } else { c = b ; d = a ; } e = c % d ; while ( e != <int> ) { c = d ; d = e ; e = c % d ; } gcd = d ; lcm = a * b / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 1493}
{"input": "int main ( ) { long int t , n , i , m , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) { { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) m = a [ i ] [ j ] ; else m = a [ i ] [ j + <int> ] ; a [ i - <int> ] [ j ] += m ; } } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1494}
{"input": "int getGcd ( int a , int b ) { if ( b == <int> ) return a ; else return getGcd ( b , a % b ) ; } int main ( ) { int t , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { int x , y ; scanf ( <str> , & x , & y ) ; int n1 = x ; int n2 = y ; gcd = getGcd ( x , y ) ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1495}
{"input": "int gcd ( int a , int b ) { int c ; while ( a != <int> ) { c = a ; a = b % a ; b = c ; } return b ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int k = gcd ( a , b ) ; printf ( <str> , k , ( a * b / k ) ) ; } }", "label": 1, "id": 1496}
{"input": "int main ( ) { int t , n , u , temp , i , j ; int sum ; int k ; int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; temp = ( n * ( n + <int> ) ) / <int> ; for ( u = <int> ; u <= temp ; u ++ ) { scanf ( <str> , & a [ u ] ) ; } sum = a [ <int> ] ; k = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( ( a [ k ] + a [ k + j ] ) > ( a [ k ] + a [ k + j + <int> ] ) ) { sum = sum + a [ k + j ] ; k = k + j ; } else { sum = sum + a [ k + j + <int> ] ; k = k + j + <int> ; } } printf ( <str> , sum ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 1497}
{"input": "int main ( ) { int t , a , b , gcd , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = ( ( a > b ) ? b : a ) ; i > <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { gcd = i ; break ; } printf ( <str> , gcd , ( a * b / gcd ) ) ; } return <int> ; }", "label": 1, "id": 1498}
{"input": "int fastread ( ) { int input ; char c = <int> ; while ( c < <int> ) c = getchar ( ) ; input = <int> ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ <int> ] [ <int> ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1499}
{"input": "int main ( ) { int r , a , b , p , q ; scanf ( <str> , & r ) ; while ( r -- ) { scanf ( <str> , & p , & q ) ; int c ; a = ( p < q ) ? p : q ; b = ( p > q ) ? p : q ; while ( a != <int> ) { c = a ; a = b % a ; b = c ; } printf ( <str> , b , ( p * q / b ) ) ; } return <int> ; }", "label": 1, "id": 1500}
{"input": "int main ( ) { int t , a , b , p = <int> , hcf , lcm , temp = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; p = a * b ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } hcf = a ; lcm = p / hcf ; printf ( <str> , hcf , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 1501}
{"input": "int main ( ) { int t , a , b , g = <int> , l , p , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a == b ) g = a ; else if ( a < b ) { p = b ; b = a ; a = p ; } while ( ( a % b ) == <int> ) { r = a % b ; a = b ; b = r ; } g = b ; l = ( a * b ) / g ; printf ( <str> , g ) ; printf ( <str> , l ) ; g = <int> , l = <int> ; } return <int> ; }", "label": 1, "id": 1502}
{"input": "int main ( ) { int t , i ; long long int n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] , m , cost ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } m = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( m > a [ i ] ) { m = a [ i ] ; } } cost = m * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 1503}
{"input": "int main ( ) { int T , i ; scanf ( <str> , & T ) ; unsigned long int out [ T ] ; for ( i = <int> ; i < T ; i ++ ) { int N , j , smlst ; scanf ( <str> , & N ) ; int ar [ N ] ; for ( j = <int> ; j < N ; j ++ ) scanf ( <str> , & ar [ j ] ) ; smlst = ar [ <int> ] ; for ( j = <int> ; j < N ; j ++ ) { if ( ar [ j ] < smlst ) smlst = ar [ j ] ; } out [ i ] = smlst * ( N - <int> ) ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , out [ i ] ) ; return <int> ; }", "label": 0, "id": 1504}
{"input": "int main ( void ) { int t , i ; int n , arr [ <int> ] , temp , min_cost ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min_cost = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] >= arr [ i + <int> ] ) { min_cost += arr [ i + <int> ] ; } else { min_cost += arr [ i ] ; temp = arr [ i ] ; arr [ i ] = arr [ i + <int> ] ; arr [ i + <int> ] = temp ; } } printf ( <str> , min_cost ) ; } return <int> ; }", "label": 1, "id": 1505}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , min = <int> ; int sum = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , sum += ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 1, "id": 1506}
{"input": "int main ( ) { long int i , j , t , n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int x [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x [ i ] ) ; } min = x [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( x [ i ] < min ) min = x [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1507}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } void <unk> ( int array [ ] [ <int> ] , int size ) { int j , k ; for ( j = <int> ; j < size ; j ++ ) { array [ j ] [ <int> ] = array [ j ] [ <int> ] + array [ j - <int> ] [ <int> ] ; } for ( j = <int> ; j < size ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { array [ j ] [ k ] = array [ j ] [ k ] + max ( array [ j - <int> ] [ k ] , array [ j - <int> ] [ k - <int> ] ) ; } } return ; } int main ( ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int l ; scanf ( <str> , & l ) ; int triangle [ l ] [ <int> ] , j , k ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & triangle [ l ] [ k ] ) ; } } <unk> ( triangle , l ) ; int maxi = <int> ; for ( k = <int> ; k < l ; k ++ ) { maxi = max ( maxi , triangle [ l - <int> ] [ k ] ) ; } printf ( <str> , maxi ) ; } return <int> ; }", "label": 3, "id": 1508}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; do { long long int n , max ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; max = a [ <int> ] ; for ( long long int i = <int> ; i < n ; i ++ ) { if ( max > a [ i ] ) { max = a [ i ] ; } } long long int sum = max * ( n - <int> ) ; t = t - <int> ; printf ( <str> , sum ) ; } while ( t > <int> ) ; return <int> ; }", "label": 1, "id": 1509}
{"input": "int scan ( ) { char c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; int ret = <int> ; while ( c >= <char> && c <= <char> ) { ret = <int> * ret + c - <int> ; c = gc ( ) ; } return ret ; } int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; t = scan ( ) ; while ( t -- ) { n = scan ( ) ; for ( i = <int> ; i < j ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ? ( a [ i + <int> ] [ j ] + a [ i ] [ j ] ) : ( a [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1510}
{"input": "int gcd ( int a , int b ) ; int lcm ( int a , int b ) ; int main ( ) { int t , a , b , g ; scanf ( <str> , & t ) ; if ( t > <int> || t < <int> ) return <int> ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b % a == <int> ) return a ; else return gcd ( b % a , a ) ; return <int> ; }", "label": 1, "id": 1511}
{"input": "int scan ( ) { int t = <int> ; char c ; c = getchar_unlocked ( ) ; while ( c < <char> || c > <char> ) c = getchar_unlocked ( ) ; while ( c >= <char> && c <= <char> ) { t = ( t << <int> ) + ( t << <int> ) + c - <char> ; c = getchar_unlocked ( ) ; } return ( t ) ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int a [ <int> ] [ <int> ] = { <int> } , s [ <int> ] [ <int> ] = { <int> } , i , j , k , t , n ; t = scan ( ) ; while ( t -- ) { k = <int> ; n = scan ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = scan ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; else if ( j == <int> ) s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; else s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - <int> ] [ j ] , s [ i - <int> ] [ j - <int> ] ) ; } for ( i = <int> ; i < n ; i ++ ) if ( s [ n - <int> ] [ i ] > k ) k = s [ n - <int> ] [ i ] ; printf ( <str> , k ) ; } return <int> ; }", "label": 0, "id": 1512}
{"input": "int main ( ) { int a , b , c , x , y , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { c = a % b ; a = b ; b = c ; } printf ( <str> , a , ( x * y ) / a ) ; } return <int> ; }", "label": 1, "id": 1513}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; int r , c , k = <int> ; for ( i = <int> ; i < k && k < n ; i ++ ) { for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } long int sum = a [ <int> ] [ <int> ] ; k = <int> , r = <int> , c = <int> ; while ( k != ( n - <int> ) ) { if ( a [ r + <int> ] [ c ] > a [ r + <int> ] [ c + <int> ] ) { sum += a [ r + <int> ] [ c ] ; r = r + <int> ; } else { sum += a [ r + <int> ] [ c + <int> ] ; r = r + <int> ; c = c + <int> ; } k ++ ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 1514}
{"input": "int main ( ) { int testcase ; int input ; int b ; int m , n ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { scanf ( <str> , & input ) ; int cell [ input ] [ input ] ; for ( m = <int> ; m < input ; m ++ ) { for ( n = <int> ; n <= m ; n ++ ) { scanf ( <str> , & b ) ; cell [ m ] [ n ] = b ; } } for ( m = input - <int> ; m >= <int> ; m -- ) { for ( n = m ; n >= <int> ; n -- ) { cell [ m ] [ n ] = cell [ m ] [ n ] + max ( cell [ m + <int> ] [ n ] , cell [ m + <int> ] [ n + <int> ] ) ; } } int ans = cell [ <int> ] [ <int> ] ; printf ( <str> , ans ) ; free ( cell ) ; } return <int> ; }", "label": 3, "id": 1515}
{"input": "int gcd ( int n1 , int n2 ) { if ( n2 != <int> ) return gcd ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int n , i , j , A , B , GCD ; long int LCM ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A , & B ) ; GCD = gcd ( A , B ) ; for ( j = <int> ; j <= A && j <= B ; ++ j ) { if ( A % j == <int> && B % j == <int> ) GCD = j ; } LCM = ( A * B ) / GCD ; printf ( <str> , gcd ( A , B ) , LCM ) ; } return <int> ; }", "label": 1, "id": 1516}
{"input": "int run ( ) ; int main ( ) { int t , x ; scanf ( <str> , & t ) ; int * p ; x = <int> ; p = ( int * ) malloc ( sizeof ( int ) * t ) ; while ( x < t ) p [ x ++ ] = run ( ) ; x = <int> ; while ( x < t ) printf ( <str> , p [ x ++ ] ) ; return <int> ; } int run ( ) { int c = <int> , y ; long int n ; scanf ( <str> , & n ) ; c = n ; long int * ar ; ar = ( long int * ) malloc ( sizeof ( long int ) * n ) ; int x = <int> ; while ( scanf ( <str> , & ar [ x ] ) == <int> ) x ++ ; fflush ( stdin ) ; for ( x = <int> ; x < n ; x ++ ) { for ( y = x ; y < n - <int> ; y ++ ) { if ( ar [ y ] <= ar [ y + <int> ] ) c ++ ; else break ; } } return c ; }", "label": 3, "id": 1517}
{"input": "int main ( ) { int i , j , t , n , x , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1518}
{"input": "int main ( ) { int t , n , i , j , s , res ; int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; t -- ; } }", "label": 0, "id": 1519}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int arr [ <int> ] ; int n ; int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } long long int cnt = <int> , flag = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( arr [ i ] >= arr [ i - <int> ] ) cnt ++ ; } cnt = cnt + n ; printf ( <str> , cnt ) ; } return <int> ; }", "label": 1, "id": 1520}
{"input": "int main ( void ) { int t , r , max , i , j ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> ; i < r ; i ++ ) { arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; } max = arr [ r - <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] += arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ; if ( arr [ i ] [ j ] > max ) { max = arr [ i ] [ j ] ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1521}
{"input": "int a [ <int> ] [ <int> ] ; int b [ <int> ] [ <int> ] ; int find ( int n ) { int i , j , large = <int> ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( j == <int> ) b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else { if ( b [ i - <int> ] [ j - <int> ] > b [ i - <int> ] [ j ] ) b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } } large = b [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( b [ n - <int> ] [ j ] > large ) large = b [ n - <int> ] [ j ] ; } printf ( <str> , large ) ; } int main ( ) { int n , t , i = <int> , j = <int> , large = <int> ; scanf ( <str> , & t ) ; fflush ( stdin ) ; while ( t -- ) { scanf ( <str> , & n ) ; fflush ( stdin ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; fflush ( stdin ) ; } } find ( n ) ; } return <int> ; }", "label": 2, "id": 1522}
{"input": "int hcf ( int a , int b ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int hcf ( int a , int b ) { if ( a % b == <int> ) return ( b ) ; else return ( hcf ( b , a % b ) ) ; }", "label": 1, "id": 1523}
{"input": "int main ( ) { int a , b , n , d , r , gcd , lcm , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else if ( b > a ) { n = b ; d = a ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1524}
{"input": "int main ( ) { int i , a , t , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int h = <int> , l = <int> ; for ( i = <int> ; i < a ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { h = h * i ; } } l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 2, "id": 1525}
{"input": "int main ( void ) { long long int t ; scanf ( <str> , & t ) ; long long int a [ t ] , i , j , k , count , ans , sum , h = <int> ; for ( i = <int> ; i < t ; i ++ ) { count = <int> ; sum = <int> ; h = <int> ; scanf ( <str> , & a [ i ] ) ; long long int b [ a [ i ] ] ; for ( j = <int> ; j < a [ i ] ; j ++ ) { scanf ( <str> , & b [ j ] ) ; } if ( a [ i ] == <int> ) { printf ( <str> ) ; } else { for ( j = <int> ; j < a [ i ] ; j ++ ) { count = <int> ; h = <int> ; for ( k = j ; k < a [ i ] - <int> ; k ++ ) { if ( b [ k ] <= b [ k + <int> ] ) { count ++ ; ans = count * ( count + <int> ) / <int> ; if ( k == a [ i ] - <int> ) { h = <int> ; } } else { j = k ; break ; } } sum = sum + ans ; if ( h == <int> ) { break ; } } printf ( <str> , sum + a [ i ] ) ; } } return <int> ; }", "label": 1, "id": 1526}
{"input": "int main ( ) { int a = <int> , b = <int> , d , e , f , l [ <int> ] , g [ <int> ] , k , n ; scanf ( <str> , & k ) ; for ( n = <int> ; n < k ; n ++ ) { scanf ( <str> , & a , & b ) ; f = a * b ; if ( a > b ) { e = b ; b = a ; a = e ; } while ( <int> ) { d = b % a ; if ( d == <int> ) break ; b = a ; a = d ; } l [ n ] = f / a ; g [ n ] = a ; } for ( n = <int> ; n < k ; n ++ ) printf ( <str> , g [ n ] , l [ n ] ) ; return <int> ; }", "label": 1, "id": 1527}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int n , a [ <int> ] [ <int> ] , ln , i , j ; scanf ( <str> , & ln ) ; while ( ln -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j + <int> ] , a [ i + <int> ] [ j ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1528}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( void ) { int arr [ <int> ] [ <int> ] , i , j , m , n ; scanf ( <str> , & m ) ; while ( m -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] += max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1529}
{"input": "int getGcd ( int a , int b ) { if ( a == <int> ) return b ; else if ( b == <int> ) return a ; else return getGcd ( b , a % b ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = getGcd ( a , b ) ; printf ( <str> , gcd , a * b / gcd ) ; } return <int> ; }", "label": 1, "id": 1530}
{"input": "int main ( ) { int t , count , n , i , k , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { count = <int> ; scanf ( <str> , & n ) ; long a [ n ] ; for ( k = <int> ; k < n ; k ++ ) scanf ( <str> , & a [ k ] ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = j + <int> ; k < n ; k ++ ) { if ( a [ k ] > a [ k - <int> ] ) count += <int> ; if ( a [ k ] <= a [ k - <int> ] ) break ; } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 0, "id": 1531}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , p , q ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( p = <int> ; p < n ; p ++ ) { for ( q = <int> ; q <= p ; q ++ ) { scanf ( <str> , & a [ p ] [ q ] ) ; } } for ( p = n - <int> ; p > <int> ; p -- ) { for ( q = <int> ; q < p ; q ++ ) { if ( a [ p ] [ q ] > a [ p ] [ q + <int> ] ) { a [ p - <int> ] [ q ] = a [ p ] [ q ] + a [ p - <int> ] [ q ] ; } else { a [ p - <int> ] [ q ] = a [ p ] [ q + <int> ] + a [ p - <int> ] [ q ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1532}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int A [ n ] ; int i ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & A [ i ] ) ; int c , j , k ; c = <int> ; for ( j = <int> ; j < n - <int> ; j ++ ) { for ( k = j ; k < n - <int> ; k ++ ) { if ( A [ k ] <= A [ k + <int> ] ) c ++ ; else break ; } } printf ( <str> , c + n ) ; } return <int> ; }", "label": 0, "id": 1533}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int i , j ; for ( j = <int> ; j <= t ; j ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } long long int cost = ( long long int ) ( ( n - <int> ) * min ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 1534}
{"input": "int main ( ) { int a , b , i , j , k , t , T ; long long x , y ; scanf ( <str> , & T ) ; for ( t = <int> ; t <= T ; t ++ ) { scanf ( <str> , & a , & b ) ; j = a > b ? a : b ; k = a <= b ? a : b ; for ( i = <int> ; i <= k ; i ++ ) { if ( ( long long ) j * i % k == <int> ) { x = ( long long ) j * i ; break ; } } y = ( ( long long ) k * j ) / x ; printf ( <str> , y ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 2, "id": 1535}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int t , n , i ; int * * p ; int k ; int tempval ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; p = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= i ; k ++ ) { scanf ( <str> , & p [ i ] [ k ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k <= i ; k ++ ) { p [ i ] [ k ] += max ( p [ i + <int> ] [ k ] , p [ i + <int> ] [ k + <int> ] ) ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 1536}
{"input": "int main ( ) { int a [ <int> ] , t , n , count , p , i , j ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( p = <int> ; p < t ; p ++ ) { count = <int> ; printf ( <str> , p + <int> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count += <int> ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 1537}
{"input": "int main ( ) { int n , l , i , j , k , sum = <int> , maxsum = <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } k = l - <int> ; j = l - <int> ; while ( k >= <int> ) { i = l - <int> ; while ( i >= <int> ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) { sum = sum + a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; j -- ; } else { sum = sum + a [ i ] [ j ] + a [ i + <int> ] [ j ] ; j -- ; } i -- ; } if ( maxsum < sum ) { maxsum = sum ; } j = k -- ; k -- ; } printf ( <str> , maxsum ) ; n -- ; } return <int> ; }", "label": 3, "id": 1538}
{"input": "int main ( ) { long int t , a , b , x , y , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1539}
{"input": "int main ( ) { int t , a , b , i , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = ( a < b ) ? a : b ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i ) ; break ; } } for ( i = ( a > b ) ? a : b ; i <= a * b ; i += a ) { if ( i % a == <int> && i % b == <int> ) { printf ( <str> , i ) ; break ; } } } return <int> ; }", "label": 1, "id": 1540}
{"input": "unsigned short int FindMaxSum ( unsigned short int * * row , int rn ) ; int main ( ) { unsigned short int t , i , j , k , x ; unsigned short int * * row ; unsigned short int * MaxSum ; scanf ( <str> , & t ) ; row = ( unsigned short int * * ) malloc ( sizeof ( unsigned short int * ) * ROW_NUM ) ; MaxSum = ( unsigned short int * ) malloc ( sizeof ( unsigned short int ) * t ) ; for ( i = <int> ; i < ROW_NUM ; i ++ ) { row [ i ] = ( unsigned short int * ) malloc ( sizeof ( unsigned short int ) * ( i + <int> ) ) ; } for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x ) ; for ( j = <int> ; j < x ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & row [ j ] [ k ] ) ; } } MaxSum [ i ] = FindMaxSum ( row , x ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , MaxSum [ i ] ) ; } free ( MaxSum ) ; for ( i = <int> ; i < ROW_NUM ; i ++ ) { free ( row [ i ] ) ; } free ( row ) ; return <int> ; } unsigned short int FindMaxSum ( unsigned short int * * row , int rn ) { unsigned short int * lastMax , * curMax , * last , * cur ; unsigned short int Max = <int> , i , j ; lastMax = ( unsigned short int * ) malloc ( sizeof ( unsigned short int ) * ROW_NUM ) ; curMax = ( unsigned short int * ) malloc ( sizeof ( unsigned short int ) * ROW_NUM ) ; last = lastMax ; cur = curMax ; Max = last [ <int> ] = row [ <int> ] [ <int> ] ; for ( i = <int> ; i < rn ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( last [ j - <int> ] + row [ i ] [ j ] > last [ j ] + row [ i ] [ j ] ) { cur [ j ] = last [ j - <int> ] + row [ i ] [ j ] ; } else { cur [ j ] = last [ j ] + row [ i ] [ j ] ; } } cur [ <int> ] = last [ <int> ] + row [ i ] [ <int> ] ; if ( Max < cur [ <int> ] ) { Max = cur [ <int> ] ; } cur [ i ] = last [ i - <int> ] + row [ i ] [ i ] ; if ( Max < cur [ i ] ) { Max = cur [ i ] ; } last = curMax ; cur = lastMax ; } free ( lastMax ) ; free ( curMax ) ; return Max ; }", "label": 1, "id": 1541}
{"input": "int main ( ) { int t , a [ <int> ] , n , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 1542}
{"input": "int rpn ( int * , int , int , int * ) ; int maxj = <int> , maxk = <int> ; int main ( ) { int i = - <int> , count = <int> , j_count , j = - <int> , k = - <int> ; scanf ( <str> , & count ) ; while ( ++ i < count ) { int k = <int> , l = <int> ; int arr [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] ; j = - <int> ; scanf ( <str> , & j_count ) ; while ( ++ j < j_count ) { int k = - <int> ; while ( ++ k <= j ) scanf ( <str> , & arr [ j ] [ k ] ) ; } maxj = j ; maxk = k ; printf ( <str> , rpn ( & arr [ <int> ] [ <int> ] , <int> , <int> , & cache [ <int> ] [ <int> ] ) ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int rpn ( int * arr , int j , int k , int * cache ) { { if ( ( j >= maxj ) || ( k > maxj ) ) return <int> ; if ( cache [ j * <int> + k ] != <int> ) return cache [ j * <int> + k ] ; cache [ j * <int> + k ] = arr [ j * <int> + k ] + max ( rpn ( arr , j + <int> , k , cache ) , rpn ( arr , j + <int> , k + <int> , cache ) ) ; return arr [ j * <int> + k ] + max ( rpn ( arr , j + <int> , k , cache ) , rpn ( arr , j + <int> , k + <int> , cache ) ) ; } }", "label": 1, "id": 1543}
{"input": "int main ( ) { long long int t , i , a , x , b , min , max , j , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; min = a < b ? a : b ; for ( j = <int> ; j <= min ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; } } max = a > b ? a : b ; j = max ; x = a * b ; while ( j <= x ) { if ( j % a == <int> && j % b == <int> ) { lcm = j ; break ; } j = j + max ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 1544}
{"input": "int min ( int , int ) ; int main ( ) { int i , a [ <int> ] , t , p , j , sum = <int> ; long n , m ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { p = min ( a [ i ] , a [ i + <int> ] ) ; a [ i + <int> ] = p ; sum += p ; } printf ( <str> , sum ) ; } } int min ( int a , int b ) { if ( a > b ) return b ; else return a ; }", "label": 1, "id": 1545}
{"input": "int main ( ) { long int t , a , b , l , m , r = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; l = a ; m = b ; while ( r != <int> ) { r = l % m ; l = m ; m = r ; } printf ( <str> , l , ( a * b ) / l ) ; r = <int> ; } }", "label": 0, "id": 1546}
{"input": "int main ( int argc , char * * argv ) { int t ; int i , j , n ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1547}
{"input": "int main ( ) { int i , j , n , t , sum = <int> , k = <int> , pos = <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = <int> ; k = <int> ; a [ <int> ] [ <int> ] = - <int> ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } pos = <int> ; for ( i = <int> ; i <= n ; i ++ ) { sum = sum + a [ i ] [ pos ] ; if ( i != <int> && i != n ) k = k + a [ i ] [ i + <int> ] ; if ( i == n ) k = k + a [ i ] [ i ] ; if ( k > sum ) { sum = k ; pos = i + <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 1548}
{"input": "int max ; void recur ( int * * p , int r , int i , int j , int sum ) { if ( i == r - <int> ) { if ( sum > max ) max = sum ; return ; } recur ( p , r , i + <int> , j , sum + p [ i + <int> ] [ j ] ) ; if ( j <= i ) recur ( p , r , i + <int> , j + <int> , sum + p [ i + <int> ] [ j + <int> ] ) ; } int main ( ) { int t , r , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; int * * p ; * p = ( int * ) ( malloc ( r * sizeof ( int ) ) ) ; for ( i = <int> ; i < r ; i ++ ) p [ i ] = ( int * ) ( malloc ( ( i + <int> ) * sizeof ( int ) ) ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & p [ i ] [ j ] ) ; } } int sum = p [ <int> ] [ <int> ] ; max = <int> ; recur ( p , r , <int> , <int> , sum ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 1549}
{"input": "int f1 ( int a [ ] [ <int> ] , int i , int j ) { int n_i , n_j ; if ( i == - <int> || j == - <int> ) { return ( <int> ) ; } else if ( j == <int> ) { return ( a [ i ] [ j ] + f1 ( a , i - <int> , j ) ) ; } else if ( i == <int> ) { return ( a [ i ] [ j ] ) ; } else { n_i = i - <int> ; if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) { n_j = j - <int> ; } else { n_j = j ; } return ( a [ i ] [ j ] + f1 ( a , n_i , n_j ) ) ; } } void m ( int a [ ] [ <int> ] , int l ) { int i , j ; for ( i = <int> ; i <= l - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = <int> ; } } } int main ( ) { int a [ <int> ] [ <int> ] ; int i , j , max = - <int> ; int i1 = <int> ; int l ; int t ; scanf ( <str> , & t ) ; if ( t < <int> ) { exit ( <int> ) ; } while ( t ) { scanf ( <str> , & l ) ; if ( l < <int> || l > <int> ) { exit ( <int> ) ; } for ( i = <int> ; i <= l - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] < <int> || a [ i ] [ j ] > <int> ) { exit ( <int> ) ; } } } for ( i = <int> ; i <= l - <int> ; i ++ ) { if ( a [ l - <int> ] [ i ] > max ) { max = a [ l - <int> ] [ i ] ; i1 = i ; } } max = f1 ( a , l - <int> , i1 ) ; printf ( <str> , max ) ; max = <int> ; m ( a , l ) ; t -- ; } return <int> ; }", "label": 1, "id": 1550}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j , k , sum , sum1 , sum2 , <unk> , large ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } <unk> = <int> ; for ( j = <int> ; j <= n - <int> ; j ++ ) { sum = <int> ; for ( i = j ; i <= n - <int> ; i ++ ) { sum = sum + a [ i ] [ j ] ; } sum1 = sum + a [ i ] [ j ] ; sum2 = sum + a [ i ] [ j + <int> ] ; if ( sum1 > sum2 ) large = sum1 ; else large = sum2 ; if ( large > <unk> ) <unk> = large ; else continue ; } printf ( <str> , <unk> ) ; } }", "label": 3, "id": 1551}
{"input": "int a [ <int> ] ; int main ( void ) { int t , n , i , j , c , x ; long long int s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> , s = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> , c = <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ j - <int> ] ) c ++ ; else { x = <int> ; break ; } } if ( x ) { s = s + ( c * ( c + <int> ) ) / <int> ; i = j - <int> ; } else s = s + c ; } printf ( <str> , s + n ) ; } return <int> ; }", "label": 0, "id": 1552}
{"input": "int main ( void ) { int n , t , a , c , j ; int s [ SIZE ] , k , sum = <int> ; scanf ( <str> , & t ) ; for ( a = <int> ; a <= t ; a ++ ) { sum = <int> ; k = <int> ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & s [ i ] ) ; for ( int i = <int> ; i < n - <int> ; i ++ ) { c = i ; for ( j = <int> ; j < n ; j ++ ) { if ( s [ j ] < s [ i ] ) c = j ; } } k = s [ c ] ; for ( int i = <int> ; i < n - <int> ; i ++ ) sum += k ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 1553}
{"input": "int main ( ) { int n , m , i , j , a [ <int> ] [ <int> ] , sum , sum1 , fsum = <int> ; sum = a [ <int> ] [ <int> ] , sum1 = a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { sum = sum + a [ i + <int> ] [ j ] ; sum1 = sum1 + a [ i + <int> ] [ j + <int> ] ; if ( sum > sum1 ) fsum = sum ; else fsum = sum1 ; } } } printf ( <str> , fsum ) ; return <int> ; }", "label": 1, "id": 1554}
{"input": "int main ( ) { int c , k , l , n , t , sum , b [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & b [ i ] [ j ] ) ; } c = <int> , sum = b [ <int> ] [ <int> ] , k = <int> , l = <int> ; while ( c < n ) { if ( b [ k + <int> ] [ l ] >= b [ k + <int> ] [ l + <int> ] && b [ k + <int> ] [ l ] >= b [ k + <int> ] [ l - <int> ] ) { sum += b [ k + <int> ] [ l ] ; k = k + <int> ; } else if ( b [ k + <int> ] [ l - <int> ] > b [ k + <int> ] [ l ] ) { sum += b [ k + <int> ] [ l - <int> ] ; k = k + <int> ; l = l - <int> ; } else if ( b [ k + <int> ] [ l + <int> ] > b [ k + <int> ] [ l ] ) { sum += b [ k + <int> ] [ l + <int> ] ; k = k + <int> ; l = l + <int> ; } c ++ ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 1555}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n , i ; long long int sum = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int d [ n ] ; d [ n - <int> ] = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { if ( a [ i ] <= a [ i + <int> ] ) { d [ i ] = d [ i + <int> ] + <int> ; } else { d [ i ] = d [ i + <int> ] ; } } printf ( <str> , d [ <int> ] + n ) ; } return <int> ; }", "label": 1, "id": 1556}
{"input": "int main ( void ) { int n , i ; scanf ( <str> , & n ) ; unsigned long long int a , b , gcd , lcm , rem , num , den ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * ( b / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1557}
{"input": "int min ( int size , int arr [ ] ) { int min = arr [ <int> ] , i ; for ( i = <int> ; i < size ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } return ( min ) ; } int main ( ) { int T , i , j , N ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; int array [ N ] ; for ( j = <int> ; j < N ; j ++ ) scanf ( <str> , & array [ j ] ) ; printf ( <str> , ( N - <int> ) * min ( N , array ) ) ; } }", "label": 0, "id": 1558}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int n , i , j , k , x ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; for ( j = <int> ; j < x ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } for ( j = x - <int> ; j > <int> ; j -- ) { for ( k = j ; k > <int> ; k -- ) { if ( arr [ j ] [ k ] > arr [ j ] [ k - <int> ] ) { arr [ j - <int> ] [ k - <int> ] = arr [ j - <int> ] [ k - <int> ] + arr [ j ] [ k ] ; } else { arr [ j - <int> ] [ k - <int> ] = arr [ j - <int> ] [ k - <int> ] + arr [ j ] [ k - <int> ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1559}
{"input": "void main ( ) { int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , n , i , j , k , p ; scanf ( <str> , & k ) ; scanf ( <str> , & n ) ; for ( p = <int> ; p < k ; p ++ ) { for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } if ( i == <int> ) printf ( <str> , a [ i ] [ <int> ] ) ; } } }", "label": 3, "id": 1560}
{"input": "int main ( ) { long long n , i , j , n1 , n2 ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { long long a , b ; scanf ( <str> , & a , & b ) ; n1 = a , n2 = b ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } }", "label": 0, "id": 1561}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { int s1 = <int> , s2 = <int> , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int k = <int> ; s1 = s2 = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { j = k ; s1 = s1 + a [ i + <int> ] [ j ] ; s2 = s2 + a [ i + <int> ] [ j + <int> ] ; if ( s1 > s2 ) { s2 = s1 ; k = j ; } else { s1 = s2 ; k = j + <int> ; } } printf ( <str> , s1 ) ; } return <int> ; }", "label": 1, "id": 1562}
{"input": "int main ( ) { int t ; int n ; int i ; long long int min ; long long int * arr ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; arr = ( long long int * ) calloc ( n , sizeof ( long long int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( min > arr [ i ] ) min = arr [ i ] ; printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1563}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) { gcd = i ; } } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1564}
{"input": "int main ( ) { int t , a , b , i , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a >= b ) { n = b ; i = a ; } else { n = a ; i = b ; } while ( i % a != <int> || i % b != <int> ) { i ++ ; } while ( n -- ) { if ( a % n == <int> && b % n == <int> ) { break ; } } printf ( <str> , n , i ) ; } return <int> ; }", "label": 2, "id": 1565}
{"input": "int main ( ) { int t , i , n , min , array [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & array [ i ] ) ; if ( array [ i ] < min ) { min = array [ i ] ; } } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 1566}
{"input": "int main ( ) { int t , m , i , j , arr [ <int> ] [ <int> ] , n ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { if ( arr [ i + <int> ] [ j + <int> ] > arr [ i + <int> ] [ j ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 1567}
{"input": "int main ( ) { int t , r , i , j , k , sum , max ; int array [ <int> ] [ <int> ] ; int <unk> [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } for ( i = <int> ; i < r ; i ++ ) { for ( j = i + <int> ; j < r ; j ++ ) { array [ i ] [ j ] = <int> ; } } k = <int> ; for ( i = <int> ; i < r ; i ++ ) { j = <int> ; sum = <int> ; while ( j < r ) { sum = sum + array [ j ] [ i ] ; j ++ ; } <unk> [ k ] = sum ; k ++ ; } max = <unk> [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { if ( <unk> [ i ] > max ) { max = <unk> [ i ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1568}
{"input": "int arr [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] , visited [ <int> ] [ <int> ] = { <int> } , n ; int solve ( int i , int j ) { int v1 , v2 , v ; if ( i > n ) return <int> ; if ( visited [ i ] [ j ] ) return cache [ i ] [ j ] ; v1 = solve ( i + <int> , j ) ; v2 = solve ( i + <int> , j + <int> ) ; v = ( v1 > v2 ? v1 : v2 ) + arr [ i ] [ j ] ; cache [ i ] [ j ] = v ; return v ; } int main ( ) { int t , i , j , ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; ans = solve ( <int> , <int> ) ; printf ( <str> , ans ) ; } }", "label": 2, "id": 1569}
{"input": "void main ( ) { int p ; int remainder , numerator , denominator ; long int num1 , num2 ; scanf ( <str> , & p ) ; long int gcd [ p ] , lcm [ p ] ; int i ; for ( i = <int> ; i < p ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd [ i ] = denominator ; lcm [ i ] = num1 * num2 / gcd [ i ] ; } for ( i = <int> ; i < p ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } }", "label": 0, "id": 1570}
{"input": "int lcm ( int a , int b ) { int max = a > b ? a : b ; int x = max ; while ( <int> ) { if ( max % a == <int> && max % b == <int> ) { return max ; } max = max + x ; } } int hcf ( int a , int b ) { if ( a % b == <int> ) return b ; else return hcf ( b , a % b ) ; } int main ( ) { int t , x , i , y ; int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = hcf ( a , b ) ; y = lcm ( a , b ) ; printf ( <str> , x , y ) ; } return <int> ; }", "label": 2, "id": 1571}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; static long arr [ <int> ] [ <int> ] , f = <int> , d = <int> , <unk> [ <int> ] , i , j , c = <int> , k ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & <unk> [ i ] ) ; for ( j = <int> ; j < <unk> [ i ] ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < <unk> [ i ] ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + <int> ] ) { f ++ ; } else { c = <int> ; for ( k = f ; k > <int> ; k -- ) c = c + k ; d = d + c ; f = <int> ; } } printf ( <str> , ( <unk> [ i ] + d ) ) ; d = <int> ; } return <int> ; }", "label": 1, "id": 1572}
{"input": "int sums [ <int> ] [ <int> ] = { { <int> , <int> , <int> , <int> } , { <int> , <int> , <int> , <int> } , { <int> , <int> , <int> , <int> } , { <int> , <int> , <int> , <int> } } ; int findsum ( int * * a , int i , int j , int n ) { if ( sums [ i ] [ j ] > <int> ) return sums [ i ] [ j ] ; int sum1 = <int> , sum2 = <int> ; if ( i >= n - <int> || j > n - <int> ) { fflush ( stdin ) ; sum1 = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; sum2 = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; if ( sum1 >= sum2 ) { sums [ i ] [ j ] = sum1 ; return sum1 ; } sums [ i ] [ j ] = sum2 ; return sum2 ; } else { sum1 = a [ i ] [ j ] + findsum ( a , i + <int> , j , n ) ; sum2 = a [ i ] [ j ] + findsum ( a , i + <int> , j + <int> , n ) ; if ( sum1 >= sum2 ) { sums [ i ] [ j ] = sum1 ; return sum1 ; } sums [ i ] [ j ] = sum2 ; return sum2 ; } } int main ( ) { int t , n ; scanf ( <str> , & t ) ; scanf ( <str> , & n ) ; int * * a = malloc ( n * sizeof ( int * ) ) ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = malloc ( n * sizeof ( int ) ) ; for ( j = <int> ; j < <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { printf ( <str> , a [ i ] [ j ] ) ; } printf ( <str> ) ; } printf ( <str> , findsum ( a , <int> , <int> , n ) ) ; return <int> ; }", "label": 1, "id": 1573}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; if ( test < <int> || test > <int> ) { return <int> ; } else { int ans [ <int> * test ] ; int ui ; int t = <int> ; for ( ui = <int> ; ui < test ; ui ++ ) { int a ; int b ; scanf ( <str> , & a , & b ) ; if ( ( a < <int> || a > <int> ) || ( b < <int> || b > <int> ) ) { return <int> ; } else { int lcm = <int> , hcf = <int> ; int temp ; if ( a > b ) { temp = a ; a = b ; b = temp ; } int x = a , y = b ; int i ; int lcmdone = <int> ; int count = <int> ; for ( i = <int> ; i <= b ; i ++ ) { if ( x % i == <int> ) { lcm *= i ; x /= i ; lcmdone ++ ; count ++ ; } if ( y % i == <int> ) { if ( lcmdone == <int> ) { lcm *= i ; } y /= i ; lcmdone = <int> ; count ++ ; } if ( count != <int> ) { i = <int> ; count = <int> ; lcmdone = <int> ; } } hcf = a * b / lcm ; ans [ t ++ ] = hcf ; ans [ t ++ ] = lcm ; } } int q ; for ( q = <int> ; q < <int> * test ; q = q + <int> ) { printf ( <str> , ans [ q ] , ans [ q + <int> ] ) ; printf ( <str> ) ; } } }", "label": 2, "id": 1574}
{"input": "int main ( ) { int a , b , c , i , j , k , n , g_c_d = <int> , l_c_m ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j < n ; j ++ ) { if ( a % j == <int> && b % j == <int> ) g_c_d *= j ; } l_c_m = ( a * b ) / g_c_d ; printf ( <str> , g_c_d , l_c_m ) ; } return <int> ; }", "label": 3, "id": 1575}
{"input": "int main ( ) { int t ; int a , b ; int gcd ; long long int lcm ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; long long int product = ( a * b ) ; int small = ( a < b ) ? a : b ; int big = ( a > b ) ? a : b ; if ( ( a % small ) == <int> && ( b % small ) == <int> ) gcd = small ; else { int remainder = big % small ; int keep = small ; int temp ; while ( remainder != <int> ) { temp = remainder ; remainder = keep % remainder ; keep = temp ; } gcd = keep ; } lcm = product / gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 1576}
{"input": "int main ( ) { int t , n , i , a [ <int> ] , small ; char s1 [ <int> ] , s2 [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; small = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( small >= a [ i ] ) small = a [ i ] ; } printf ( <str> , small * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1577}
{"input": "int LCM ( int a , int b ) { if ( a % b == <int> ) return a ; else if ( b % a == <int> ) return b ; else return a * b ; } int GCD ( int a , int b ) { while ( b > <int> ) { int temp ; temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { int T , A , B , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; ++ i ) { scanf ( <str> , & A , & B ) ; printf ( <str> , GCD ( A , B ) , LCM ( A , B ) ) ; } return <int> ; }", "label": 1, "id": 1578}
{"input": "long int max ( long int a , long int b ) { if ( a > b ) return a ; else return b ; } long int solver ( ) { int rows , i , elems ; long int temp ; scanf ( <str> , & rows ) ; elems = ( ( rows * ( rows + <int> ) ) / <int> ) ; long int values [ elems ] ; for ( i = <int> ; i < elems ; i ++ ) { scanf ( <str> , & temp ) ; values [ i ] = temp ; } long int solution [ rows - <int> ] ; for ( i = <int> ; i < rows - <int> ; i ++ ) solution [ i ] = <int> ; for ( rows -= <int> , elems -= <int> ; elems > <int> ; rows -- , elems -= <int> ) for ( i = rows ; i >= <int> ; i -- , elems -- ) solution [ i ] += max ( values [ elems ] , values [ elems + <int> ] ) ; return ( values [ <int> ] + max ( solution [ <int> ] , solution [ <int> ] ) ) ; } int main ( ) { int t , count ; scanf ( <str> , & t ) ; for ( count = <int> ; count <= t ; count ++ ) printf ( <str> , solver ( ) ) ; return <int> ; }", "label": 1, "id": 1579}
{"input": "int array [ <int> ] [ <int> ] ; int cache [ <int> ] [ <int> ] ; int visited [ <int> ] [ <int> ] ; int solve ( int , int , int ) ; int main ( ) { int testno , rownum , j , k , i , output ; scanf ( <str> , & testno ) ; for ( i = <int> ; i < testno ; i ++ ) { scanf ( <str> , & rownum ) ; for ( j = <int> ; j < rownum ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { visited [ j ] [ k ] = <int> ; scanf ( <str> , & array [ j ] [ k ] ) ; } } output = solve ( <int> , <int> , rownum ) ; printf ( <str> , output ) ; } return <int> ; } int solve ( int i , int j , int n ) { int t1 , t2 , t ; if ( i > n ) return <int> ; else if ( visited [ i ] [ j ] == <int> ) return cache [ i ] [ j ] ; else { t1 = solve ( i + <int> , j , n ) ; t2 = solve ( i + <int> , j + <int> , n ) ; t = array [ i ] [ j ] + MAX ( t1 , t2 ) ; cache [ i ] [ j ] = t ; visited [ i ] [ j ] = t ; return t ; } }", "label": 2, "id": 1580}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , temp = <int> , i , ans ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i - <int> ] ) { temp = temp + a [ i - <int> ] ; } else { temp = temp + a [ i ] ; } } printf ( <str> , temp ) ; temp = <int> ; } }", "label": 1, "id": 1581}
{"input": "int sumtran ( int n , int triangle [ ] [ <int> ] , int rown , int coln , int store [ ] [ <int> ] ) ; int main ( ) { int t , i , j , k , n , sum , triangle [ <int> ] [ <int> ] , store [ <int> ] [ <int> ] ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { triangle [ i ] [ j ] = <int> ; store [ i ] [ j ] = - <int> ; } } scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & triangle [ j ] [ k ] ) ; } sum = sumtran ( n , triangle , <int> , <int> , store ) ; printf ( <str> , sum ) ; } return <int> ; } int sumtran ( int n , int triangle [ ] [ <int> ] , int rown , int coln , int store [ ] [ <int> ] ) { if ( store [ rown ] [ coln ] != - <int> ) return store [ rown ] [ coln ] ; int prev_sum ; if ( rown >= n ) return triangle [ rown ] [ coln ] ; if ( sumtran ( n , triangle , rown + <int> , coln , store ) > sumtran ( n , triangle , rown + <int> , coln + <int> , store ) ) prev_sum = sumtran ( n , triangle , rown + <int> , coln , store ) + triangle [ rown ] [ coln ] ; else prev_sum = sumtran ( n , triangle , rown + <int> , coln + <int> , store ) + triangle [ rown ] [ coln ] ; store [ rown ] [ coln ] = prev_sum ; return prev_sum ; }", "label": 1, "id": 1582}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { long int num1 , num2 , gcd , lcm , rem , num , den ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { num = num1 ; den = num2 ; } else { num = num2 ; den = num1 ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1583}
{"input": "int main ( ) { int t , n , max , i , j ; int a [ <int> ] [ <int> ] ; t = SD ; while ( t -- ) { n = SD ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = SD ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i + <int> ; j ++ ) { max = ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; a [ i ] [ j ] += max ; } } printf ( <str> , * * a ) ; } return <int> ; }", "label": 1, "id": 1584}
{"input": "int i , j , n , t [ <int> ] [ <int> ] = { } , temp [ <int> ] [ <int> ] = { } ; int max ( int x , int y ) { return x > y ? x : y ; } int find ( int i , int j ) { if ( i >= n ) { return <int> ; } else if ( temp [ i ] [ j ] != <int> ) return temp [ i ] [ j ] ; else { temp [ i ] [ j ] = max ( find ( i + <int> , j ) , find ( i + <int> , j + <int> ) ) + t [ i ] [ j ] ; return temp [ i ] [ j ] ; } } int main ( ) { int c , k ; scanf ( <str> , & c ) ; for ( k = <int> ; k < c ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & t [ i ] [ j ] ) ; } printf ( <str> , find ( <int> , <int> ) ) ; } return <int> ; }", "label": 1, "id": 1585}
{"input": "long long int min ( long long int c , long long int d ) { long long int mini = ( c < d ) ? c : d ; return mini ; } int main ( ) { int t , i ; long long int a [ <int> ] , x , n , u ; long long int cost ; do { scanf ( <str> , & t ) ; } while ( t < <int> || t > <int> ) ; while ( t -- ) { do { scanf ( <str> , & n ) ; } while ( n < <int> || n > <int> ) ; scanf ( <str> , & a [ <int> ] , & a [ <int> ] ) ; x = min ( a [ <int> ] , a [ <int> ] ) ; cost = x ; if ( n == <int> ) { printf ( <str> , cost ) ; continue ; } for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ <int> ] ) ; u = min ( x , a [ <int> ] ) ; x = u ; cost += x ; } printf ( <str> , cost ) ; } }", "label": 1, "id": 1586}
{"input": "int main ( ) { int t , i , j , arr [ <int> ] , gcd = <int> , lcm , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & arr [ <int> ] , & arr [ <int> ] ) ; p = arr [ <int> ] * arr [ <int> ] ; if ( arr [ <int> ] > arr [ <int> ] ) j = arr [ <int> ] ; else j = arr [ <int> ] ; i = <int> ; while ( i < j ) { if ( arr [ <int> ] % i == <int> && arr [ <int> ] % i == <int> ) { arr [ <int> ] = arr [ <int> ] / i ; arr [ <int> ] = arr [ <int> ] / <int> ; gcd *= i ; i = <int> ; } else { i ++ ; } } lcm = p / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 3, "id": 1587}
{"input": "int main ( ) { int A , B , L , H , I , S , N ; scanf ( <str> , & N ) ; while ( N != <int> ) { scanf ( <str> , & A , & B ) ; S = ( A < B ) ? A : B ; for ( I = <int> ; I <= S ; I ++ ) { if ( ( A % I == <int> ) && ( B % I == <int> ) ) H = I ; } L = ( A * B ) / H ; printf ( <str> , H , L ) ; N -- ; } return <int> ; }", "label": 1, "id": 1588}
{"input": "int main ( ) { unsigned long i , n ; int t , small ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; int a [ n - <int> ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; small = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < small ) small = a [ i ] ; } printf ( <str> , ( ( n - <int> ) * small ) ) ; t -- ; } return <int> ; }", "label": 0, "id": 1589}
{"input": "long long int gcd_fn ( int a , int b ) { if ( b > a ) { b = a + b ; a = b - a ; b = b - a ; } long long int div1 = a ; long long int ds = b ; long long int rem , ans ; while ( ds > <int> ) { rem = div1 % ds ; ans = ds ; div1 = ds ; ds = rem ; } return ans ; } int main ( void ) { long long int t , a , b , gcd , lcm , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd = gcd_fn ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1590}
{"input": "long sumd ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) ; long sumr ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) ; int main ( ) { int arr [ <int> ] [ <int> ] ; int i , j , tc , go , row , k ; long sumrt = <int> , sumdn , sum ; scanf ( <str> , & tc ) ; for ( go = <int> ; go <= tc ; go ++ ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } sum = <int> ; sumrt = sumr ( sum , row , <int> , <int> , arr ) ; sumdn = sumd ( sum , row , <int> , <int> , arr ) ; if ( sumrt > sumdn ) printf ( <str> , sumrt ) ; else printf ( <str> , sumdn ) ; } return <int> ; } long sumd ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) { long sumdn , sumrt ; if ( i < n ) { s = s + arr [ i ] [ j ] ; sumdn = sumd ( s , n , i + <int> , j , arr ) ; sumrt = sumr ( s , n , i + <int> , j + <int> , arr ) ; if ( sumrt > sumdn ) return sumrt ; else return sumdn ; } return s ; } long sumr ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) { long sumdn , sumrt ; if ( i < n ) { s = s + arr [ i ] [ j ] ; sumdn = sumd ( s , n , i + <int> , j , arr ) ; sumrt = sumr ( s , n , i + <int> , j + <int> , arr ) ; if ( sumrt > sumdn ) return sumrt ; else return sumdn ; } return s ; }", "label": 2, "id": 1591}
{"input": "int main ( ) { int a , b , p , gcd , lcm , T ; scanf ( <str> , T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; while ( b != <int> ) { p = b ; b = a % b ; a = p ; } gcd = a ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 3, "id": 1592}
{"input": "main ( ) { long long int a , b , t , i , x , y ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; y = a * b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } x = a % b ; while ( x != <int> ) { a = b ; b = x ; x = a % b ; } printf ( <str> , b , y / b ) ; } return <int> ; }", "label": 0, "id": 1593}
{"input": "long long gcd ( long long a , long long b ) { long long r ; if ( a == <int> ) { return b ; } else { r = b % a ; if ( r == <int> ) { return a ; } else { return gcd ( r , a ) ; } } } int main ( ) { long long a , b , hcf , lcm , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; { hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; } printf ( <str> , hcf , lcm ) ; } return ( <int> ) ; }", "label": 0, "id": 1594}
{"input": "int main ( ) { int i , j , t , a , b , gcd = <int> , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( b > a ) { temp = a ; a = b ; b = temp ; } for ( j = <int> ; j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } printf ( <str> , gcd , a * b / gcd ) ; } return <int> ; }", "label": 1, "id": 1595}
{"input": "int main ( ) { int T , n , i ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & n ) ; int A [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & A [ i ] ) ; int count = <int> ; int p = <int> , q = <int> ; while ( q < n ) { if ( A [ q ] >= A [ q - <int> ] ) { q ++ ; } else { int size = q - p ; count = count + ( size * ( size + <int> ) ) / <int> ; p = q ; q ++ ; } } int size = q - p ; count = count + ( size * ( size + <int> ) ) / <int> ; printf ( <str> , count ) ; T -- ; } }", "label": 0, "id": 1596}
{"input": "int main ( ) { int t , n , arr [ <int> ] , i , cost = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] ) { cost += arr [ i ] ; arr [ i + <int> ] = arr [ i ] ; } else { cost += arr [ i + <int> ] ; } } printf ( <str> , cost ) ; cost = <int> ; } return <int> ; }", "label": 1, "id": 1597}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a [ <int> ] [ <int> ] , i , j , m , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { memset ( a , <int> , sizeof ( a ) ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { if ( i && j ) a [ i ] [ j ] += max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; if ( i && ! j ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } m = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j ] > m ) m = a [ n - <int> ] [ j ] ; } printf ( <str> , m ) ; if ( m < <int> ) return <int> ; } return <int> ; }", "label": 1, "id": 1598}
{"input": "int main ( ) { int T , i , j ; unsigned long long int N ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; unsigned long long int p , * a , min ; min = <int> ; p = <int> ; a = ( unsigned long long int * ) malloc ( N * sizeof ( unsigned long long int ) ) ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , min ) ; { p = min * ( N - <int> ) ; printf ( <str> , p ) ; } } return <int> ; }", "label": 1, "id": 1599}
{"input": "int main ( ) { long int t , a , b , x , y , temp , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { x = a ; y = b ; } else { x = b ; y = a ; } while ( y != <int> ) { temp = y ; y = x % y ; x = temp ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1600}
{"input": "main ( ) { int i , j , k , n , m , l , c , t ; scanf ( <str> , & i ) ; for ( j = <int> ; j <= i ; j ++ ) { c = <int> ; printf ( <str> ) ; scanf ( <str> , & n ) ; int a [ n ] ; for ( k = <int> ; k < n ; k ++ ) scanf ( <str> , & a [ k ] ) ; for ( l = <int> ; l < n ; l ++ ) { t = <int> ; for ( m = l ; m < n ; m ++ ) { if ( a [ l ] <= a [ m ] ) { if ( a [ m ] > t ) { c ++ ; t = a [ m ] ; printf ( <str> , a [ l ] , a [ m ] ) ; } } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 1601}
{"input": "int main ( ) { int A , B , T , i , j , GCD , C ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; C = A * B ; for ( j = <int> ; ; j ++ ) { if ( j % A == <int> && j % B == <int> ) { break ; } } GCD = ( C / j ) ; printf ( <str> , GCD , j ) ; } return <int> ; }", "label": 2, "id": 1602}
{"input": "int sum ( int , int ) ; int m = <int> , b [ <int> ] [ <int> ] , ch = <int> ; int main ( ) { int n , i , a [ <int> ] , j , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; for ( j = <int> ; j < m ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & b [ j ] [ k ] ) ; a [ i ] = sum ( <int> , <int> ) ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , a [ i ] ) ; return <int> ; } int sum ( int i , int j ) { int n , n1 , n2 , q ; if ( i >= m ) return <int> ; if ( b [ i ] [ j ] == <int> ) return ch ; n1 = sum ( i + <int> , j ) ; n2 = sum ( i + <int> , j + <int> ) ; if ( n1 > n2 ) q = n1 ; else q = n2 ; n = q + b [ i ] [ j ] ; b [ i ] [ j ] = <int> ; ch = n ; return n ; }", "label": 1, "id": 1603}
{"input": "int main ( ) { int t , n , l , m , k , s , i , j , temp [ <int> ] , temp1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; l = <int> ; m = <int> ; k = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { l = l + <int> ; temp [ <int> ] = a [ l ] [ m ] + a [ l + <int> ] [ m ] ; temp [ <int> ] = a [ l ] [ m ] + a [ l + <int> ] [ m + <int> ] ; temp [ <int> ] = a [ l ] [ m + <int> ] + a [ l + <int> ] [ m + <int> ] ; temp [ <int> ] = a [ l ] [ m + <int> ] + a [ l + <int> ] [ m + <int> ] ; temp1 = <int> ; for ( j = <int> ; j < <int> ; j ++ ) { if ( temp1 < temp [ i ] ) temp1 = temp [ i ] ; } if ( temp1 == temp [ <int> ] ) { s = a [ l ] [ m ] ; m = m ; } if ( temp1 == temp [ <int> ] ) { s = a [ l ] [ m ] ; m = m ; } if ( temp1 == temp [ <int> ] ) { s = a [ l ] [ m + <int> ] ; m = m + <int> ; } if ( temp1 == temp [ <int> ] ) { s = a [ l ] [ m + <int> ] ; m = m + <int> ; } k = k + s ; } if ( a [ l + <int> ] [ m ] > a [ l + <int> ] [ m + <int> ] ) k = k + a [ l + <int> ] [ m ] ; else k = k + a [ l + <int> ] [ m + <int> ] ; printf ( <str> , k ) ; } return <int> ; }", "label": 1, "id": 1604}
{"input": "int main ( ) { int s , i , j , n , b ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( b = <int> ; b < n ; b ++ ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = s - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1605}
{"input": "int main ( ) { int t , lcm , a , b , i , hcf ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) hcf = i ; } lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 1606}
{"input": "void binary ( int * num , int count ) { int carry = <int> ; int sum , sum_temp ; count -= <int> ; sum = * num + <int> + carry ; if ( sum == <int> ) { * num = <int> ; } if ( sum == <int> ) { while ( sum >= <int> ) { * num = <int> ; carry = <int> ; count -= <int> ; num -- ; sum = * num + carry ; sum_temp = sum ; } * num = sum ; } } int binsum ( int * n , int count ) { int sum = <int> , i ; count -- ; for ( i = <int> ; i <= count ; i ++ ) { sum = sum + * n ; } return sum ; } int main ( void ) { int test ; unsigned int n ; int triangle [ <int> ] [ <int> ] ; int i , j , k , bin_count ; int sum [ <int> ] , temp ; int bin [ <int> ] ; int row , col ; for ( i = <int> ; i < <int> ; i ++ ) bin [ i ] = <int> ; scanf ( <str> , & test ) ; if ( test > <int> ) exit ( <int> ) ; for ( i = <int> ; i < test ; i ++ ) { bin [ <int> ] = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & triangle [ j ] [ k ] ) ; } } while ( binsum ( & bin [ <int> ] , n - <int> ) != n - <int> ) { row = <int> ; col = <int> ; temp = triangle [ row ] [ col ] ; for ( k = <int> ; k <= n - <int> ; k ++ ) { if ( bin [ k - <int> ] == <int> ) { row ++ ; } else { row ++ ; col ++ ; } temp = temp + triangle [ row ] [ col ] ; } if ( temp > sum [ i ] ) sum [ i ] = temp ; binary ( & bin [ n - <int> ] , n - <int> ) ; } } for ( i = <int> ; i < test ; i ++ ) { printf ( <str> , sum [ i ] ) ; } return <int> ; }", "label": 2, "id": 1607}
{"input": "int main ( ) { long long int i , j , T , n , a , min ; long long int cost = <int> ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & n ) ; min = <int> * <int> ; cost = <int> ; for ( j = <int> ; j <= n ; j ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 1608}
{"input": "main ( ) { int tc ; scanf ( <str> , & tc ) ; while ( tc -- ) { int i , j , n , c = <int> ; scanf ( <str> , & n ) ; int ar [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; c = ar [ <int> ] [ <int> ] ; int k = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( i + <int> <= n - <int> && k + <int> <= i + <int> ) { if ( ( c + ar [ i + <int> ] [ k ] ) > ( c + ar [ i + <int> ] [ k + <int> ] ) ) { c = c + ar [ i + <int> ] [ k ] ; } else { if ( ( c + ar [ i + <int> ] [ k + <int> ] ) > ( c + ar [ i + <int> ] [ k - <int> ] ) ) { c = c + ar [ i + <int> ] [ k + <int> ] ; k = k + <int> ; } else { c = c + ar [ i + <int> ] [ k - <int> ] ; } } } } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 1609}
{"input": "int fun1 ( ) { int i , j , size ; int * * array ; int result = <int> ; scanf ( <str> , & size ) ; array = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( i = <int> ; i < size ; i ++ ) { array [ i ] = ( int * ) malloc ( size * sizeof ( int ) ) ; } for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; } result = ( array [ <int> ] [ <int> ] + fun2 ( array , <int> , <int> , size ) ) ; return result ; } int fun2 ( int * * temp , int i , int j , int size ) { int x , y ; if ( i < size ) { x = ( temp [ i ] [ j ] + ( fun2 ( temp , i + <int> , j , size ) ) ) ; y = ( temp [ i ] [ j + <int> ] + fun2 ( temp , i + <int> , j + <int> , size ) ) ; } else return <int> ; if ( x > y ) return x ; else return y ; } int main ( ) { int test , result ; scanf ( <str> , & test ) ; while ( test ) { result = fun1 ( ) ; printf ( <str> , result ) ; test -- ; } return <int> ; }", "label": 2, "id": 1610}
{"input": "int map [ <int> ] [ <int> ] ; int width ; int main ( ) { int test_case = <int> , T , i , j ; scanf ( <str> , & T ) ; for ( test_case = <int> ; test_case <= T ; test_case ++ ) { scanf ( <str> , & width ) ; for ( i = <int> ; i < width ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & map [ i ] [ j ] ) ; } for ( i = width - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { map [ i ] [ j ] += map [ i + <int> ] [ j ] > map [ i + <int> ] [ j + <int> ] ? map [ i + <int> ] [ j ] : map [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , map [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 1611}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , c [ <int> ] ; int n , i , j , k , m , x , p = <int> , v , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n - <int> ; i ++ ) { m = a [ i ] [ <int> ] + a [ i + <int> ] [ <int> ] ; k = m + a [ i + <int> ] [ <int> ] ; c [ p ] = m > k ? m : k ; p ++ ; } x = p ; v = c [ <int> ] ; for ( p = <int> ; p < x ; p ++ ) { if ( c [ p ] > v ) v = c [ p ] ; } printf ( <str> , v ) ; t -- ; } return <int> ; }", "label": 3, "id": 1612}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; long int a , b ; while ( T -- ) { scanf ( <str> , & a , & b ) ; long int hcf = <int> ; long int lcm = <int> ; long int num ; int i ; num = ( ( a < b ) ? a : b ) ; for ( i = <int> ; i < num ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; } } lcm = ( a * b ) / hcf ; printf ( <str> , hcf ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 2, "id": 1613}
{"input": "int min ( int a [ ] , int n ) { int i = <int> , j = <int> , s = <int> ; while ( n != <int> ) { if ( a [ i ] > a [ j ] ) { i += <int> ; s += a [ j ] ; } else { j ++ ; s += a [ i ] ; } n -- ; } return s ; } int main ( void ) { int a [ <int> ] , n , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int s = min ( a , n ) ; printf ( <str> , s ) ; t -- ; } return <int> ; }", "label": 3, "id": 1614}
{"input": "int recurse ( int arr [ ] , int front , int end ) { if ( front < end ) { if ( arr [ front ] > arr [ front + <int> ] ) { return recurse ( arr , front + <int> , end ) ; } else { arr [ front + <int> ] = arr [ front ] ; return recurse ( arr , front + <int> , end ) ; } } else { return arr [ front + <int> ] ; } } int main ( ) { int n , a , b , arr [ <int> ] , i ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) scanf ( <str> , & arr [ i ] ) ; b = recurse ( arr , <int> , a - <int> ) ; printf ( <str> , b ) ; } return <int> ; }", "label": 3, "id": 1615}
{"input": "void t_sums ( int sum , int i , int j ) ; int * * element , max , n ; int main ( void ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; element = ( int * * ) calloc ( n , sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) element [ i ] = ( int * ) calloc ( i + <int> , sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & element [ i ] [ j ] ) ; max = <int> ; t_sums ( <int> , <int> , <int> ) ; printf ( <str> , max ) ; for ( i = <int> ; i < n ; i ++ ) free ( element [ i ] ) ; free ( element ) ; } return <int> ; } void t_sums ( int sum , int i , int j ) { if ( i == n - <int> ) { sum += element [ i ] [ j ] ; if ( sum > max ) max = sum ; } else { t_sums ( sum + element [ i ] [ j ] , i + <int> , j ) ; t_sums ( sum + element [ i ] [ j ] , i + <int> , j + <int> ) ; } }", "label": 2, "id": 1616}
{"input": "int main ( ) { int t , n , j , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int k [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & k [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { k [ i - <int> ] [ j - <int> ] = max ( k [ i - <int> ] [ j - <int> ] + k [ i ] [ j ] , k [ i - <int> ] [ j - <int> ] + k [ i ] [ j - <int> ] ) ; } } printf ( <str> , k [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1617}
{"input": "int main ( ) { int t , i , j , n , a [ <int> ] [ <int> ] , maxm = - <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += ( ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ) ; } } for ( j = <int> ; j < n ; j ++ ) if ( maxm < a [ n - <int> ] [ j ] ) maxm = a [ n - <int> ] [ j ] ; printf ( <str> , maxm ) ; } return <int> ; }", "label": 1, "id": 1618}
{"input": "int main ( ) { int t , u ; scanf ( <str> , & t ) ; for ( u = <int> ; u <= t ; u ++ ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; int sum = <int> ; int m = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i ] [ j ] > m ) ; m = arr [ i ] [ j ] ; } sum = sum + m ; m = <int> ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 1619}
{"input": "int main ( ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int x , a , y , z ; scanf ( <str> , & x , & a ) ; if ( a > x ) { y = x ; x = a ; a = y ; } z = x * a ; while ( x % a != <int> ) { y = a ; a = x % a ; x = y ; } printf ( <str> , a , z / a ) ; } return <int> ; }", "label": 1, "id": 1620}
{"input": "int main ( void ) { int t ; int i , n , x , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = MAX ; for ( i = <int> ; i < n ; ++ i ) { scanf ( <str> , & x ) ; if ( x < min ) min = x ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1621}
{"input": "int gcd ( int f , int a , int b ) ; int lcm ( int g , int a , int b ) ; main ( ) { int t , a , b , i , f , g ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; f = ( a < b ? a : b ) ; g = ( a > b ? a : b ) ; printf ( <str> , gcd ( f , a , b ) , lcm ( g , a , b ) ) ; } } int gcd ( int f , int a , int b ) { if ( a % f == <int> && b % f == <int> ) return f ; else return gcd ( f - <int> , a , b ) ; } int lcm ( int g , int a , int b ) { int i ; for ( i = g ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) return i ; } }", "label": 3, "id": 1622}
{"input": "int main ( ) { int t , a , b , r , a1 , b1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; a1 = a ; b1 = b ; while ( b1 != <int> ) { r = a1 % b1 ; a1 = b1 ; b1 = r ; } printf ( <str> , a1 ) ; printf ( <str> , ( a * b ) / a1 ) ; printf ( <str> ) ; } }", "label": 1, "id": 1623}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , T ; scanf ( <str> , & T ) ; for ( t = <int> ; t < T ; t ++ ) { int N ; scanf ( <str> , & N ) ; long long int A [ N ] [ N ] ; int i , j ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } long long int sum [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < N ; j ++ ) sum [ i ] [ j ] = <int> ; } sum [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { sum [ i ] [ <int> ] = A [ i ] [ <int> ] + sum [ i - <int> ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { sum [ i ] [ j ] = max ( sum [ i - <int> ] [ j ] , sum [ i - <int> ] [ j - <int> ] ) + A [ i ] [ j ] ; } } long long int max = sum [ N - <int> ] [ <int> ] ; for ( i = <int> ; i < N - <int> ; i ++ ) { if ( sum [ N - <int> ] [ i ] > max ) max = sum [ N - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1624}
{"input": "long long int gcd ( long long int x , long long int y ) ; int main ( ) { int n , i ; long long int g , l , a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } } long long int gcd ( long long int x , long long int y ) { if ( y == <int> ) return x ; else return gcd ( y , x % y ) ; }", "label": 0, "id": 1625}
{"input": "long gcd ( long , long ) ; int main ( ) { int t , i = <int> ; long a , b , g , l , f , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; f = a / g ; m = b / g ; l = g * f * m ; printf ( <str> , g , l ) ; } return <int> ; } long gcd ( long a , long b ) { if ( b != <int> ) return ( gcd ( b , a % b ) ) ; else return ( a ) ; }", "label": 0, "id": 1626}
{"input": "long long int gcd ( int i , int j ) { if ( j == <int> ) return i ; return gcd ( j , i % j ) ; } int main ( ) { long long int t , a , b , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 0, "id": 1627}
{"input": "unsigned long long int find_gcm ( unsigned long long int , unsigned long long int ) ; int main ( ) { unsigned int T , i ; T = i = <int> ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { unsigned long long int A , B , O ; A = B = O = <int> ; scanf ( <str> , & A , & B ) ; O = find_gcm ( A , B ) ; printf ( <str> , O ) ; printf ( <str> , ( A * B / O ) ) ; } return <int> ; } unsigned long long int find_gcm ( unsigned long long int A , unsigned long long int B ) { while ( A != B ) { if ( A > B ) A = A - B ; else B = B - A ; } return A ; }", "label": 0, "id": 1628}
{"input": "int main ( ) { int n , i , j , k , e , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; int sum [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & e ) ; int c = <int> ; for ( j = <int> ; j < e ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; c = c + a [ j ] [ k ] ; } } sum [ i ] = c ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , sum [ i ] / <int> ) ; } return <int> ; }", "label": 1, "id": 1629}
{"input": "long long int a [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int m , i , j ; scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = m - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; } return <int> ; }", "label": 0, "id": 1630}
{"input": "long int gcd ( long int a , long int b ) ; long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return ( gcd ( b , a % b ) ) ; } int main ( ) { int t ; long int a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 1631}
{"input": "main ( ) { int n , l , i , max , j , k = <int> , p ; scanf ( <str> , & n ) ; p = n ; int m [ n ] ; while ( p > <int> && p <= <int> ) { scanf ( <str> , & l ) ; if ( l > <int> && l < <int> ) { int arr [ <int> ] [ <int> ] = { <int> } ; int a [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } a [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < l - <int> ; i ++ ) { a [ i + <int> ] [ <int> ] = arr [ i + <int> ] [ <int> ] + a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { max = a [ i ] [ j ] + arr [ i + <int> ] [ j ] ; if ( max > a [ i + <int> ] [ j ] ) a [ i + <int> ] [ j ] = max ; a [ i + <int> ] [ j + <int> ] = arr [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ; } } m [ k ] = a [ l - <int> ] [ <int> ] ; for ( i = <int> ; i < l - <int> ; i ++ ) { if ( a [ l - <int> ] [ i + <int> ] > m [ k ] ) m [ k ] = a [ l - <int> ] [ i + <int> ] ; } k ++ ; } p -- ; } if ( n > <int> && n <= <int> ) { for ( i = <int> ; i < n ; i ++ ) printf ( <str> , m [ i ] ) ; } }", "label": 3, "id": 1632}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int T , a , b , gcd_val ; long long unsigned lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; gcd_val = gcd ( a , b ) ; lcm = gcd_val * ( a / gcd_val ) * ( b / gcd_val ) ; printf ( <str> , gcd_val , lcm ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 1633}
{"input": "int triangle [ <int> ] [ <int> ] ; int lines , level , offset ; int indices [ <int> ] ; int sumtrian ( ) ; int bump ( ) ; int main ( ) { int testcases , i , j , k ; int sum , temp ; scanf ( <str> , & testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { indices [ j ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & triangle [ j ] [ k ] ) ; } } if ( lines == <int> ) { printf ( <str> , triangle [ <int> ] [ <int> ] ) ; continue ; } sum = <int> ; offset = <int> ; level = lines - <int> ; while ( <int> ) { temp = sumtrian ( ) ; if ( temp > sum ) sum = temp ; if ( bump ( ) ) break ; } printf ( <str> , sum ) ; } return <int> ; } int sumtrian ( ) { register int i ; int sum = <int> ; for ( i = <int> ; i < lines ; i ++ ) { sum += triangle [ i ] [ indices [ i ] ] ; } return sum ; } int bump ( ) { if ( level == <int> || offset > level ) { level = lines - <int> ; offset ++ ; indices [ lines - <int> ] = offset ; return offset == lines ; } else { indices [ level -- ] = offset ; return <int> ; } }", "label": 2, "id": 1634}
{"input": "int a [ <int> ] [ <int> ] , t , i , j , n , p , q , m ; int main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & m ) ; p = a [ i - <int> ] [ j - <int> ] ; q = a [ i - <int> ] [ j ] ; a [ i ] [ j ] = m + ( ( p > q ) ? p : q ) ; } m = <int> ; for ( i = <int> ; i <= n ; i ++ ) if ( a [ n ] [ i ] > m ) m = a [ n ] [ i ] ; printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 1635}
{"input": "int main ( ) { int n1 , n2 , m , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; m = ( n1 > n2 ) ? n1 : n2 ; while ( <int> ) { if ( m % n1 == <int> && m % n2 == <int> ) { break ; } ++ m ; } printf ( <str> , m ) ; } }", "label": 2, "id": 1636}
{"input": "int sumCompare = <int> ; void addNodes ( int * arry , int * level , int node , int totalNodes , int sum ) { if ( node >= totalNodes ) { if ( sum > sumCompare ) { sumCompare = sum ; } return ; } sum = sum + arry [ node ] ; addNodes ( arry , level , ( node + level [ node ] ) , totalNodes , sum ) ; addNodes ( arry , level , ( node + level [ node ] + <int> ) , totalNodes , sum ) ; return ; } int main ( ) { int testCase , rowNum , totalNodes , * valueAry , * levelAry ; int i , j , index ; scanf ( <str> , & testCase ) ; while ( testCase -- ) { scanf ( <str> , & rowNum ) ; totalNodes = ( rowNum * ( rowNum + <int> ) ) / <int> ; index = <int> ; valueAry = ( int * ) malloc ( totalNodes * sizeof ( int ) ) ; levelAry = ( int * ) malloc ( totalNodes * sizeof ( int ) ) ; for ( i = <int> ; i <= rowNum ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & valueAry [ index ] ) ; levelAry [ index ] = i ; index ++ ; } } addNodes ( valueAry , levelAry , <int> , totalNodes , <int> ) ; printf ( <str> , sumCompare ) ; sumCompare = <int> ; free ( valueAry ) ; free ( levelAry ) ; } return <int> ; }", "label": 2, "id": 1637}
{"input": "int a [ <int> ] [ <int> ] ; int max ( int i , int j ) { return ( i > j ) ? i : j ; } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + MAX ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1638}
{"input": "void lcm_gcd ( int , int ) ; int main ( ) { int i , t , a1 , a2 ; int * p ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { p = ( int * ) calloc ( <int> * t , sizeof ( int ) ) ; for ( i = <int> ; i < <int> * t ; i += <int> ) { scanf ( <str> , p + i , p + i + <int> ) ; } for ( i = <int> ; i < <int> * t ; i += <int> ) { a1 = * ( p + i ) ; a2 = * ( p + i + <int> ) ; if ( a1 >= <int> && a2 <= <int> && a2 >= <int> && a2 <= <int> ) lcm_gcd ( a1 , a2 ) ; else printf ( <str> ) ; } } return <int> ; } void lcm_gcd ( int n1 , int n2 ) { int i , j , a , b , lcm , gcd ; if ( n1 > <int> && n2 > <int> ) { for ( i = <int> ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) { gcd = i ; } } if ( n1 > n2 ) { a = n1 ; b = n2 ; } else { a = n2 ; b = n1 ; } for ( j = b ; ; j ++ ) { if ( j % b == <int> && j % a == <int> ) { lcm = j ; break ; } } } else { lcm = gcd = <int> ; } printf ( <str> , gcd , lcm ) ; }", "label": 2, "id": 1639}
{"input": "void main ( ) { int a , b , t , rem , nr , dr , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { nr = a ; dr = b ; } else nr = b ; dr = a ; while ( dr != <int> ) { rem = nr % dr ; nr = dr ; rem = dr ; } gcd = nr ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 2, "id": 1640}
{"input": "int main ( ) { int t , i , d [ <int> ] , e [ <int> ] , j ; unsigned int a , b , c , s , q ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) s = j ; } d [ i - <int> ] = s ; s = <int> ; for ( j = <int> ; ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { q = j ; break ; } } e [ i - <int> ] = q ; q = <int> ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , d [ i ] , e [ i ] ) ; } return <int> ; }", "label": 2, "id": 1641}
{"input": "int maxval ; void setmax ( int ) ; int getmax ( short int , short int ) ; int main ( ) { short int arr [ <int> ] [ <int> ] , element , maxarr [ <int> ] [ <int> ] ; int tc , gmax = <int> , smax = <int> ; unsigned short int i = <int> , j = <int> , no = <int> ; scanf ( <str> , & tc ) ; while ( tc ) { maxval = <int> , gmax = <int> , smax = <int> ; memset ( arr , <int> , sizeof ( arr [ <int> ] [ <int> ] ) + <int> ) ; memset ( maxarr , <int> , sizeof ( maxarr [ <int> ] [ <int> ] ) + <int> ) ; scanf ( <str> , & no ) ; for ( i = <int> ; i <= no ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & element ) ; arr [ i ] [ j ] = element ; if ( i == <int> ) { maxarr [ i ] [ j ] = gmax + arr [ i ] [ j ] ; continue ; } else { gmax = getmax ( maxarr [ i - <int> ] [ j - <int> ] , maxarr [ i - <int> ] [ j ] ) ; maxarr [ i ] [ j ] = gmax + arr [ i ] [ j ] ; setmax ( maxarr [ i ] [ j ] ) ; } } } printf ( <str> , maxval ) ; tc -- ; } return <int> ; } int getmax ( short int x , short int y ) { int maxi = <int> ; if ( x > y ) maxi = x ; else maxi = y ; return maxi ; } void setmax ( int x ) { if ( x > maxval ) maxval = x ; }", "label": 3, "id": 1642}
{"input": "int sinput ( ) { int no = <int> ; char ch = getchar ( ) ; while ( ch != <char> ) { no = ( no * <int> ) + ( ch - <char> ) ; ch = getchar ( ) ; } return no ; } void foutput ( long int n ) { if ( n == <int> ) { puts ( <str> ) ; return ; } long int temp = n ; int count = <int> ; while ( temp != <int> ) { temp /= <int> ; ++ count ; } char * no = malloc ( sizeof ( char ) * count + <int> ) ; temp = n ; int temp2 = count ; no [ count ] = <char> ; while ( temp != <int> ) { no [ temp2 - <int> ] = temp % <int> + <char> ; temp /= <int> ; -- temp2 ; } puts ( no ) ; free ( no ) ; no = NULL ; } void minput ( int * inparr ) { int no = <int> , i = <int> ; char ch = getchar ( ) ; while ( ch != <char> ) { if ( ch != <char> ) { no = ( no * <int> ) + ( ch - <char> ) ; } else { inparr [ i ++ ] = no ; no = <int> ; } ch = getchar ( ) ; } inparr [ i ++ ] = no ; } int lpath ( int * * arr , int n ) { if ( n == <int> ) return arr [ <int> ] [ <int> ] ; int i ; for ( i = <int> ; i < n - <int> ; i ++ ) arr [ n - <int> ] [ i ] += ( arr [ n - <int> ] [ i ] > arr [ n - <int> ] [ i + <int> ] ) ? arr [ n - <int> ] [ i ] : arr [ n - <int> ] [ i + <int> ] ; return lpath ( arr , n - <int> ) ; } int main ( ) { int t = sinput ( ) , i ; int * solution = malloc ( t * sizeof ( int ) ) ; for ( i = <int> ; i < t ; i ++ ) { int n = sinput ( ) , j ; int * * arr = malloc ( n * sizeof ( int ) ) ; arr [ <int> ] = malloc ( n * n * sizeof ( int ) ) ; for ( j = <int> ; j < n ; j ++ ) { arr [ j ] = arr [ <int> ] + j * n ; minput ( arr [ j ] ) ; } solution [ i ] = lpath ( arr , n ) ; free ( arr [ <int> ] ) ; free ( arr ) ; } for ( i = <int> ; i < t ; i ++ ) foutput ( solution [ i ] ) ; free ( solution ) ; return <int> ; }", "label": 3, "id": 1643}
{"input": "int main ( ) { int t ; long long int min , numb , lc , cost ; scanf ( <str> , & t ) ; min = <int> ; while ( t -- ) { scanf ( <str> , & lc ) ; cost = lc ; while ( lc -- ) { scanf ( <str> , & numb ) ; if ( numb < min ) { min = numb ; } } printf ( <str> , min * ( cost - <int> ) ) ; } }", "label": 1, "id": 1644}
{"input": "typedef long long int <unk> ; int main ( void ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { <unk> N ; scanf ( <str> , & N ) ; <unk> min ; long long int cost = <int> ; scanf ( <str> , & min ) ; <unk> i = N ; while ( -- i ) { <unk> temp ; scanf ( <str> , & temp ) ; min = ( <unk> ) small ( min , temp ) ; } cost = min * ( N - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 1645}
{"input": "main ( ) { int t , n , i , j ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 1646}
{"input": "int gcd ( int m , int n ) { if ( n == <int> ) return m ; if ( n > m ) return gcd ( m , n ) ; return gcd ( n , m % n ) ; } int main ( ) { int m , n , N ; scanf ( <str> , & N ) ; while ( N -- ) { scanf ( <str> , & m , & n ) ; printf ( <str> , gcd ( m , n ) ) ; } return <int> ; }", "label": 3, "id": 1647}
{"input": "int main ( ) { int i , t , j , k , s [ <int> ] = { <int> } , a [ <int> ] , temp , sum = <int> , n ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) s [ i ] = <int> ; sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( k = <int> ; k < j - <int> ; k ++ ) { if ( a [ k ] > a [ k + <int> ] ) { temp = a [ k ] ; a [ k ] = a [ k + <int> ] ; a [ k + <int> ] = temp ; } } s [ i ] = a [ k ] ; } for ( i = <int> ; i < n ; i ++ ) { sum += s [ i ] ; } printf ( <str> , sum - <int> ) ; } return <int> ; }", "label": 1, "id": 1648}
{"input": "int main ( ) { long long int t , n , temp , arr [ <int> ] , j , k , i ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } temp = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( arr [ i ] < temp ) temp = arr [ i ] ; temp = temp * ( n - <int> ) ; printf ( <str> , temp ) ; } return <int> ; }", "label": 0, "id": 1649}
{"input": "int arr [ <int> ] [ <int> ] , b , maxi = <int> ; int main ( ) { int i , j , k , a ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b ) ; for ( j = <int> ; j < b ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } recur ( <int> , <int> , <int> ) ; printf ( <str> , maxi ) ; } return <int> ; } int recur ( int k , int i , int sum ) { if ( k < b ) { sum += arr [ k ] [ i ] ; recur ( k + <int> , i , sum ) ; recur ( k + <int> , i + <int> , sum ) ; } if ( sum > maxi ) maxi = sum ; }", "label": 2, "id": 1650}
{"input": "long int gcd ( int a , int b ) { int temp ; while ( a ) { temp = a ; a = b % a ; b = temp ; } return b ; } int main ( int argc , char const * argv [ ] ) { int t , a , b ; long int hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm = gcd ( a , b ) ; hcf = ( a * b ) / lcm ; printf ( <str> , lcm , hcf ) ; } return <int> ; }", "label": 1, "id": 1651}
{"input": "long int gcd ( long int x , long int y ) ; main ( ) { long int t ; long int a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; printf ( <str> ) ; } return <int> ; } long int gcd ( long int x , long int y ) { if ( y == <int> ) return ( x ) ; else return gcd ( y , x % y ) ; }", "label": 0, "id": 1652}
{"input": "int main ( ) { int t , i , min , n ; long long int c ; scanf ( <str> , & t ) ; while ( t > <int> ) { c = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } c = ( n - <int> ) * min ; printf ( <str> , c ) ; t -- ; } return <int> ; }", "label": 0, "id": 1653}
{"input": "int main ( ) { unsigned int noTest = <int> ; unsigned int inputArray [ <int> ] = { <int> } ; unsigned int computeArray [ <int> ] = { <int> } ; unsigned int largest = <int> , i = <int> , k = <int> , j = <int> , x = <int> , y = <int> , noRow = <int> ; unsigned int temp = <int> , temp1 = <int> ; scanf ( <str> , & noTest ) ; while ( i < noTest ) { scanf ( <str> , & noRow ) ; for ( j = <int> ; j < noRow ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & inputArray [ k ] ) ; } for ( k = <int> ; k <= j ; k ++ ) { if ( ( x = inputArray [ k ] + computeArray [ k - <int> ] ) > ( y = inputArray [ k ] + computeArray [ k ] ) ) { temp = x ; } else { temp = y ; } if ( k > <int> ) { computeArray [ k - <int> ] = temp1 ; } temp1 = temp ; temp = <int> ; } if ( k > <int> ) { computeArray [ k - <int> ] = temp1 ; temp1 = <int> ; } computeArray [ <int> ] = computeArray [ <int> ] + inputArray [ <int> ] ; } k = <int> ; largest = <int> ; while ( k < noRow ) { if ( computeArray [ k ] > largest ) { largest = computeArray [ k ] ; } computeArray [ k ] = <int> ; k ++ ; } printf ( <str> , largest ) ; i ++ ; } }", "label": 0, "id": 1654}
{"input": "int main ( ) { int t , i , small , N , a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a ) ; if ( i == <int> ) small = a ; if ( small > a ) small = a ; } printf ( <str> , ( N - <int> ) * small ) ; } return <int> ; }", "label": 0, "id": 1655}
{"input": "main ( ) { int i , t , numerator , denominator , remainder ; long long a , b , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1656}
{"input": "int main ( ) { int T , A , B , l , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A < B ) l = A ; else l = B ; l -- ; while ( l != <int> ) { if ( A % l == <int> && B % l == <int> ) break ; l -- ; } lcm = ( A * B ) / l ; printf ( <str> , l , lcm ) ; } return <int> ; }", "label": 2, "id": 1657}
{"input": "int main ( ) { int i , gcd , lcd ; long long int t , A , B , H , M ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & A , & B ) ; H = A ; M = B ; while ( A != B ) { if ( A > B ) A = A - B ; else B = B - A ; } gcd = B ; lcd = ( H * M ) / gcd ; printf ( <str> , gcd , lcd ) ; } return <int> ; }", "label": 1, "id": 1658}
{"input": "int main ( ) { int t , n , m , a , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; m = n ; scanf ( <str> , & s ) ; m -- ; while ( m -- ) { scanf ( <str> , & a ) ; if ( a < s ) s = a ; } s = s * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 1659}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { return x > y ? x : y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 0, "id": 1660}
{"input": "int main ( ) { int T , a , b , i , mul ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; mul = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a ) ; printf ( <str> , mul / a ) ; } }", "label": 1, "id": 1661}
{"input": "int main ( ) { int i , t ; long int j , n ; long int pre ; long int A [ MAX ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { pre = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & A [ j ] ) ; if ( pre > A [ j ] ) pre = A [ j ] ; } printf ( <str> , ( pre * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 1662}
{"input": "int gcd ( int m , int n ) { int temp ; while ( m ) { temp = m % n ; m = n ; n = temp ; } return m ; } int main ( ) { int t ; int i ; int g ; int m , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; ++ i ) { scanf ( <str> , & m , & n ) ; g = gcd ( m , n ) ; printf ( <str> , g , ( m * n ) / g ) ; } return <int> ; }", "label": 3, "id": 1663}
{"input": "int main ( ) { long int T , i , N ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; long int A [ N ] , i ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } int sum = <int> ; for ( i = <int> ; i < N ; ) { int count = <int> ; if ( A [ i ] <= A [ i + <int> ] ) { while ( A [ i ] <= A [ i + <int> ] ) { count ++ ; i ++ ; } } else i ++ ; sum = sum + count ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 1664}
{"input": "int maxim ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int x , i , j , t , n , a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; s [ i ] [ j ] = <int> ; } for ( j = i + <int> ; j < n ; j ++ ) { a [ i ] [ j ] = s [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) { s [ i ] [ j ] = a [ i ] [ j ] ; } else if ( i != <int> && j == <int> ) { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j ] ; } else { s [ i ] [ j ] = a [ i ] [ j ] + maxim ( s [ i - <int> ] [ j ] , s [ i - <int> ] [ j - <int> ] ) ; } } } i = n - <int> ; x = s [ i ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( s [ i ] [ j ] > x ) x = s [ i ] [ j ] ; printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 1665}
{"input": "int arr [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int t , n , i , j , k , s1 , s2 , max ; scanf ( <str> , & t ) ; while ( t -- ) { s1 = s2 = max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; if ( i > <int> && j == <int> ) { arr [ i ] [ j ] += arr [ i - <int> ] [ j ] ; } if ( i > <int> && j > <int> ) { s1 = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; s2 = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; if ( s1 > s2 ) arr [ i ] [ j ] = s1 ; else arr [ i ] [ j ] = s2 ; } } } if ( i > n && j == i ) { for ( k = <int> ; k <= n ; k ++ ) { if ( arr [ n ] [ k ] > max ) max = arr [ n ] [ k ] ; } printf ( <str> , max ) ; } } return <int> ; }", "label": 0, "id": 1666}
{"input": "int main ( ) { long long int T , A [ <int> ] , B [ <int> ] , x , y , z , gcd , lcm , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A [ i ] , & B [ i ] ) ; } for ( i = <int> ; i < T ; i ++ ) { if ( A [ i ] > B [ i ] ) { x = A [ i ] ; y = B [ i ] ; } else if ( A [ i ] < B [ i ] ) { x = B [ i ] ; y = A [ i ] ; } while ( y != <int> ) { z = x % y ; x = y ; y = z ; } gcd = x ; lcm = ( A [ i ] * B [ i ] ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 1667}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j ; long int n , temp ; scanf ( <str> , & n ) ; long int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j + <int> < n && arr [ j ] > arr [ j + <int> ] ) { temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( <str> , arr [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 1668}
{"input": "void main ( ) { int t , n , a , z [ <int> ] , s [ <int> ] , i = <int> , c = <int> , p , b ; scanf ( <str> , & t ) ; for ( b = <int> ; b <= t ; b ++ ) { scanf ( <str> , & n ) ; i = <int> ; c = <int> ; for ( a = <int> ; a < n ; a ++ ) { scanf ( <str> , & z [ a ] ) ; s [ a ] = z [ a ] ; } for ( p = <int> ; p < n - i ; p ++ ) { if ( z [ p ] > z [ p + <int> ] ) { c = z [ p + <int> ] + c ; i = i + <int> ; for ( a = <int> ; a < p ; a ++ ) { s [ a ] = z [ a ] ; } for ( a = p + <int> ; a < n - i ; a ++ ) { s [ a ] = z [ a ] ; } } else { c = z [ p ] + c ; i = i + <int> ; for ( a = <int> ; a < p + <int> ; a ++ ) { s [ a ] = z [ a ] ; } for ( a = p + <int> ; a < n - i ; a ++ ) { s [ a ] = z [ a ] ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 1669}
{"input": "int main ( void ) { int n = <int> , t = <int> , i = <int> , j = <int> , a [ MAX ] [ MAX ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? ( a [ i + <int> ] [ j ] ) : ( a [ i + <int> ] [ j + <int> ] ) ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1670}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 1671}
{"input": "int geter ( ) { char a ; int b = <int> ; fread ( & a , <int> , <int> , stdin ) ; while ( a >= <char> && a <= <char> ) { b = ( b << <int> ) + ( b << <int> ) + a - <char> ; fread ( & a , <int> , <int> , stdin ) ; } return b ; } int t , n , tot , g , in [ <int> ] , res [ <int> ] , ptr , k ; int main ( ) { t = geter ( ) ; while ( t > <int> ) { n = geter ( ) ; tot = ( ( n * ( n + <int> ) ) / <int> ) - <int> ; ptr = tot ; g = <int> ; while ( g <= tot ) { in [ g ] = geter ( ) ; g ++ ; } for ( g = n ; g >= <int> ; g -- ) { for ( k = g ; k > <int> ; k -- ) { if ( ptr + g > tot ) { res [ ptr ] = in [ ptr ] ; } else { if ( res [ ptr + g ] > res [ ptr + g + <int> ] ) { res [ ptr ] = res [ ptr + g ] + in [ ptr ] ; } else { res [ ptr ] = res [ ptr + g + <int> ] + in [ ptr ] ; } } ptr -- ; } } printf ( <str> , res [ <int> ] ) ; t -- ; } return <int> ; }", "label": 1, "id": 1672}
{"input": "int main ( ) { int a , b , m , n , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; ++ i ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; m = a ; n = b ; while ( n != <int> ) { i = m % n ; m = n ; n = i ; } printf ( <str> , m ) ; printf ( <str> , a * b / m ) ; } return <int> ; }", "label": 2, "id": 1673}
{"input": "unsigned int numRows = <int> ; void ReadInput ( char * data , int num ) { int i = <int> ; for ( i = <int> ; i < num ; i ++ ) { scanf ( <str> , & data [ i ] ) ; fflush ( stdin ) ; } } void AnalyseData ( ) { int * sum = NULL ; char * data = NULL ; int i = <int> , j = <int> ; int max = <int> ; scanf ( <str> , & numRows ) ; fflush ( stdin ) ; sum = ( int * ) malloc ( numRows * sizeof ( int ) ) ; for ( i = <int> ; i < numRows ; i ++ ) { data = ( char * ) malloc ( ( <int> + i ) * sizeof ( char ) ) ; ReadInput ( data , i + <int> ) ; for ( j = <int> ; j < i ; j ++ ) { if ( data [ j ] > data [ j + <int> ] ) sum [ j ] += data [ j ] ; else sum [ j ] += data [ j + <int> ] ; } sum [ i ] = data [ i ] ; free ( data ) ; } for ( i = <int> ; i < numRows ; i ++ ) { if ( max < sum [ i ] ) max = sum [ i ] ; } free ( sum ) ; printf ( <str> , max ) ; } int main ( ) { unsigned int numTestCases = <int> ; int i = <int> ; scanf ( <str> , & numTestCases ) ; fflush ( stdin ) ; for ( i = <int> ; i < numTestCases ; i ++ ) { AnalyseData ( ) ; numRows = <int> ; } return <int> ; }", "label": 3, "id": 1674}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , r , i , j , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = r - <int> ; j >= <int> ; j -- ) { for ( k = j ; k >= <int> ; k -- ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) ? a [ i + <int> ] [ j + <int> ] : a [ i + <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 1675}
{"input": "void main ( ) { long long int a [ <int> ] ; long long int n , i , j , k , t , s , p , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) { k = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = k ; } } } m = n - <int> ; p = a [ <int> ] * m ; printf ( <str> , p ) ; } }", "label": 2, "id": 1676}
{"input": "int main ( ) { int t , i , j , a ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & t ) ; int a [ t ] [ t ] ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < t ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1677}
{"input": "int main ( ) { int t , n , A [ <int> ] [ <int> ] , i , j , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; for ( i = n - <int> ; i > - <int> ; i -- ) for ( j = <int> ; j < i + <int> ; j ++ ) A [ i - <int> ] [ j ] += A [ i ] [ j ] > A [ i ] [ j + <int> ] ? A [ i ] [ j ] : A [ i ] [ j + <int> ] ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1678}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , max ; long long int gcd , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) { max = a ; } else { max = b ; } for ( int i = max ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; break ; } } for ( int i = max ; ; i ++ ) { if ( i % a == <int> && i % b == <int> ) { lcm = i ; break ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 1679}
{"input": "main ( ) { int i , t , k , gcd ; long a , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { k = <int> ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a % <int> != <int> || b % <int> != <int> ) k = <int> ; c = ( a < b ) ? a : b ; if ( c % a == <int> && c % b == <int> ) gcd = c ; else { if ( k == <int> ) for ( i = <int> ; i <= c ; i = i + <int> ) if ( a % i == <int> && b % i == <int> ) gcd = i ; if ( k != <int> ) for ( i = <int> ; i <= c ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; } printf ( <str> , gcd , a * b / gcd ) ; } return <int> ; }", "label": 2, "id": 1680}
{"input": "int main ( ) { int n1 , n2 , k , a , b ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { k = <int> ; scanf ( <str> , & n1 , & n2 ) ; a = n1 ; b = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } k = ( a * b ) / n1 ; printf ( <str> , n1 , k ) ; } return <int> ; }", "label": 1, "id": 1681}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n1 , n2 , rem , lcm ; scanf ( <str> , & n1 , & n2 ) ; lcm = n1 * n2 ; if ( n1 > n2 ) { rem = n1 % n2 ; while ( rem != <int> ) { n1 = n2 ; n2 = rem ; rem = n1 % n2 ; } } else { rem = n2 % n1 ; while ( rem != <int> ) { n2 = n1 ; n1 = rem ; rem = n2 % n1 ; } } printf ( <str> , n2 , lcm ) ; } }", "label": 1, "id": 1682}
{"input": "int main ( ) { int t , i , j , k ; unsigned long int arr [ <int> ] ; unsigned int n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; if ( t >= <int> && t <= <int> && n >= <int> && n <= <int> ) { for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } int sum = <int> ; for ( k = <int> ; k < n - <int> ; k ++ ) { if ( arr [ k ] < arr [ k + <int> ] ) { sum = sum + arr [ k ] ; arr [ k + <int> ] = arr [ k ] ; } else { sum = sum + arr [ k + <int> ] ; } } printf ( <str> , sum ) ; } } return <int> ; }", "label": 2, "id": 1683}
{"input": "int main ( ) { int g ; scanf ( <str> , & g ) ; while ( g -- ) { int n ; scanf ( <str> , & n ) ; int i , j , a [ n ] [ n ] , c , d ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else if ( j == i ) { a [ i ] [ j ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { c = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; d = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; if ( d > c ) a [ i ] [ j ] = d ; else if ( c > d ) a [ i ] [ j ] = c ; } } } int t = <int> ; for ( i = <int> ; i <= n - <int> ; i ++ ) { if ( t < a [ n - <int> ] [ i ] ) t = a [ n - <int> ] [ i ] ; } printf ( <str> , t ) ; } }", "label": 1, "id": 1684}
{"input": "int main ( void ) { int t , n , i , a [ <int> ] [ <int> ] , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = k - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( a [ i ] [ j - <int> ] > a [ i ] [ j ] ) a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j - <int> ] ; else a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1685}
{"input": "long int gcd ( long int a , long int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { long int a , b ; int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 0, "id": 1686}
{"input": "int main ( ) { int t , n , a , j , i ; int sum [ <int> ] , sum1 , sum2 ; int max [ <int> ] , size = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a ) ; if ( j == <int> ) { sum2 = sum [ j ] ; sum [ j ] = sum [ j ] + a ; } else { sum1 = sum [ j ] ; if ( ( sum2 + a ) > ( sum [ j ] + a ) ) sum [ j ] = sum2 + a ; else sum [ j ] = sum [ j ] + a ; sum2 = sum1 ; } } } max [ size ] = sum [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( max [ size ] < sum [ i ] ) max [ size ] = sum [ i ] ; size ++ ; } for ( i = <int> ; i < size ; i ++ ) printf ( <str> , max [ i ] ) ; return <int> ; }", "label": 1, "id": 1687}
{"input": "int max1 ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , t , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; if ( n < <int> || n > <int> ) exit ( <int> ) ; while ( n -- ) { scanf ( <str> , & t ) ; if ( t < <int> || t > <int> ) exit ( <int> ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + max1 ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1688}
{"input": "int sum ( int a [ ] [ <int> ] , int i , int j , int n , int b [ ] [ <int> ] ) { if ( i > n ) { return a [ i ] [ j ] ; } if ( b [ i ] [ j ] != <int> ) { return b [ i ] [ j ] ; } int s1 = a [ i ] [ j ] + sum ( a , i + <int> , j , n , b ) ; int s2 = a [ i ] [ j ] + sum ( a , i + <int> , j + <int> , n , b ) ; if ( s1 > s2 ) { b [ i ] [ j ] = s1 ; return s1 ; } else { b [ i ] [ j ] = s2 ; return s2 ; } } int main ( void ) { int a [ <int> ] [ <int> ] , n , i , j , k , T , b [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { b [ i ] [ j ] = <int> ; } } int ans = sum ( a , <int> , <int> , n , b ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 1689}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , hcf = <int> ; long long int lcm ; scanf ( <str> , & a , & b ) ; lcm = a * b ; while ( b ) { long long int k = b % a ; if ( k == <int> ) { hcf = a ; break ; } b = a ; a = k ; } printf ( <str> , hcf , lcm / hcf ) ; } }", "label": 0, "id": 1690}
{"input": "int main ( ) { char arr [ <int> ] [ <int> ] ; int n , i , j , rslt = <int> , s ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = s - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1691}
{"input": "void <unk> ( int a , int b ) { if ( b == <int> ) printf ( <str> , a ) ; else <unk> ( b , a % b ) ; } void func ( int a , int b ) { int max ; if ( a > b ) max = a ; else max = b ; while ( <int> ) { if ( max % a == <int> && max % b == <int> ) { break ; } max ++ ; } printf ( <str> , max ) ; } int main ( ) { int a , b , T ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & a , & b ) ; <unk> ( a , b ) ; func ( a , b ) ; } return <int> ; }", "label": 2, "id": 1692}
{"input": "int main ( ) { int t , a , b , ans , gcd , i , lcm , n1 , n2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; ans = ( a < b ) ? a : b ; for ( i = ans ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i ) ; break ; } } n1 = a ; n2 = b ; while ( n1 != n2 ) { if ( n1 > n2 ) { n1 = n1 - n2 ; } else n2 = n2 - n1 ; } lcm = a * b / n1 ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 1693}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { arr [ i ] [ j ] = - <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] += ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1694}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int A , B , GCD , LCM ; scanf ( <str> , & A , & B ) ; int i ; for ( i = ( A > B ? B : A ) ; i > <int> ; i -- ) { if ( A % i == <int> && B % i == <int> ) { GCD = i ; break ; } } LCM = ( A * B ) / GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 2, "id": 1695}
{"input": "long gcd ( long a , long b ) { long c ; while ( a % b != <int> ) { c = a % b ; a = b ; b = c ; } return b ; } long lcm ( long a , long b ) { return ( a / gcd ( a , b ) * b ) ; } int main ( void ) { int t ; long a , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 1696}
{"input": "int main ( ) { int a , b , x , y , t , c ; scanf ( <str> , & c ) ; while ( c -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } printf ( <str> , a , x * y / a ) ; } return <int> ; }", "label": 1, "id": 1697}
{"input": "void main ( ) { int a , b , G , L , r , n , d ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } r = n % d ; while ( ( r != <int> ) ) { n = d ; d = r ; r = n % d ; } G = d ; L = a * b / G ; printf ( <str> , G ) ; printf ( <str> , L ) ; }", "label": 1, "id": 1698}
{"input": "int main ( ) { int i , j , k , rows , rowVal [ <int> ] , maxSum [ <int> ] , max = <int> , sumL , sumT ; scanf ( <str> , & i ) ; for ( ; i > <int> ; i -- ) { scanf ( <str> , & rows ) ; max = <int> ; for ( j = <int> ; j <= rows ; j ++ ) { for ( k = <int> ; k < j ; k ++ ) { scanf ( <str> , & rowVal [ k ] ) ; } if ( j > <int> ) { rowVal [ <int> ] = rowVal [ <int> ] + maxSum [ <int> ] ; for ( k = <int> ; k < j - <int> ; k ++ ) { sumL = maxSum [ k - <int> ] + rowVal [ k ] ; sumT = maxSum [ k ] + rowVal [ k ] ; rowVal [ k ] = sumL > sumT ? sumL : sumT ; } rowVal [ k ] = rowVal [ k ] + maxSum [ k - <int> ] ; } for ( k = <int> ; k < j ; k ++ ) { maxSum [ k ] = rowVal [ k ] ; } } printf ( <str> ) ; for ( j = <int> ; j < rows ; j ++ ) { max = maxSum [ j ] > max ? maxSum [ j ] : max ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1699}
{"input": "int main ( ) { int t , i ; long int n , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; long long int ans = n ; int test = <int> ; long long int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) { ans = ans + test ; test ++ ; } else { test = <int> ; } } printf ( <str> , ans ) ; } }", "label": 1, "id": 1700}
{"input": "int main ( ) { int n , a , b , num , den , gcd , lcm , rem ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; gcd = <int> ; lcm = <int> ; } return <int> ; }", "label": 1, "id": 1701}
{"input": "int main ( ) { int T , L , <unk> , H ; scanf ( <str> , & T , & L , & <unk> , & H ) ; if ( L >= <int> && <unk> && H >= <int> ) { printf ( <str> ) ; } else printf ( <str> ) ; return <int> ; }", "label": 1, "id": 1702}
{"input": "int main ( ) { int t , max , n , ar [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) b [ <int> ] [ <int> ] = ar [ <int> ] [ <int> ] ; else { if ( j == <int> ) b [ i ] [ j ] = b [ i - <int> ] [ j ] + ar [ i ] [ j ] ; else if ( j == i ) b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + ar [ i ] [ j ] ; else { if ( b [ i - <int> ] [ j ] > b [ i - <int> ] [ j - <int> ] ) b [ i ] [ j ] = b [ i - <int> ] [ j ] + ar [ i ] [ j ] ; else b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + ar [ i ] [ j ] ; } } } i = n - <int> ; max = b [ i ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( max < b [ i ] [ j ] ) max = b [ i ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1703}
{"input": "long gcd ( long , long ) ; int main ( ) { long x , y , hcf , lcm ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( <str> , x , y , hcf ) ; printf ( <str> , x , y , lcm ) ; return <int> ; } long gcd ( long a , long b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } }", "label": 1, "id": 1704}
{"input": "int main ( void ) { int n , i , n1 , n2 , p ; long long int lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; lcm = ( n1 * n2 ) ; p = gcd ( n1 , n2 ) ; printf ( <str> , p , lcm / p ) ; } return <int> ; } int gcd ( int n , int m ) { if ( m == <int> ) return n ; else return gcd ( m , n % m ) ; }", "label": 1, "id": 1705}
{"input": "int main ( ) { int t , a , b , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int g = <int> ; long long int l = <int> ; if ( a == <int> || b == <int> ) printf ( <str> ) ; else if ( a > <int> && b > <int> ) { if ( a > b ) { for ( i = <int> ; i <= ( a / <int> ) ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = g * i ; } } else { for ( i = <int> ; i <= ( b / <int> ) ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = g * i ; } } l = ( ( a * b ) / g ) ; printf ( <str> , g , l ) ; } } return <int> ; }", "label": 1, "id": 1706}
{"input": "int m [ <int> ] [ <int> ] ; int main ( ) { int n , t , i , j , k , lines ; scanf ( <str> , & n ) ; for ( t = <int> ; t < n ; t ++ ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) for ( k = <int> ; k <= i ; k ++ ) scanf ( <str> , & m [ i ] [ k ] ) ; for ( i = lines - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) m [ i ] [ j ] += m [ i + <int> ] [ j ] > m [ i + <int> ] [ j + <int> ] ? m [ i + <int> ] [ j ] : m [ i + <int> ] [ j + <int> ] ; printf ( <str> , m [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1707}
{"input": "int f = <int> ; int hight ( long int s ) { long int i ; for ( i = <int> ; ; i ++ ) { if ( i * ( i + <int> ) == <int> * s ) { f = <int> ; return i ; } if ( i * ( i + <int> ) > <int> * s ) { if ( <int> * s - ( i * ( i - <int> ) ) == <int> ) { f = <int> ; return i ; } else return i ; } } } long int max ( long int a , long int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; int n , i , k ; long int ms = <int> ; while ( t -- ) { scanf ( <str> , & n ) ; k = ( n * ( n + <int> ) ) / <int> ; long int a [ k + <int> ] , h , ms = <int> ; for ( i = <int> ; i <= k ; i ++ ) scanf ( <str> , & a [ i ] ) ; long int sum [ n ] ; sum [ <int> ] = a [ <int> ] ; for ( i = <int> ; i <= k ; i ++ ) { f = <int> ; h = hight ( i ) ; if ( f == <int> ) { sum [ i ] = max ( a [ i ] + sum [ i - h ] , a [ i ] + sum [ i - h + <int> ] ) ; if ( sum [ i ] > ms ) ms = sum [ i ] ; } if ( f == <int> ) { sum [ i ] = a [ i ] + sum [ i - h ] ; if ( sum [ i ] > ms ) ms = sum [ i ] ; } if ( f == <int> ) { sum [ i ] = a [ i ] + sum [ i - h + <int> ] ; if ( sum [ i ] > ms ) ms = sum [ i ] ; } } printf ( <str> , ms ) ; } }", "label": 2, "id": 1708}
{"input": "int main ( ) { int t , gcd , a , i , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int z = <int> ; if ( a > b ) { if ( a % b == <int> ) { printf ( <str> , b ) ; printf ( <str> , a ) ; } else if ( a % b != <int> ) { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { if ( i > z ) { z = i ; } } } printf ( <str> , z ) ; printf ( <str> , a * b / z ) ; } } if ( b > a ) { if ( b % a == <int> ) { printf ( <str> , a ) ; printf ( <str> , b ) ; } if ( b % a != <int> ) { for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { if ( i > z ) { z = i ; } } } printf ( <str> , z ) ; printf ( <str> , a * b / z ) ; } } } }", "label": 1, "id": 1709}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int n , i , min , sum = <int> , a [ <int> ] ; scanf ( <str> , & n ) ; if ( n > <int> ) scanf ( <str> , a [ <int> ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) { min = a [ i ] ; } } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 1710}
{"input": "int main ( ) { int a , b , num , den , rem , lcm , gcd ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( a * b ) / gcd ; printf ( <str> , a , b , gcd ) ; printf ( <str> , a , b , lcm ) ; return <int> ; }", "label": 1, "id": 1711}
{"input": "int main ( ) { long i , x , d , n , t , small ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { small = a [ i + <int> ] ; } } { n = n - <int> ; printf ( <str> , small * n ) ; } } }", "label": 3, "id": 1712}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , n , min = INT_MAX ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1713}
{"input": "int main ( ) { int n , t , a , b , j , y ; t = <int> ; scanf ( <str> , & n ) ; while ( n > <int> ) { t = <int> ; scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( j = <int> ; j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { if ( j > t ) t = j ; } } y = a * b / t ; printf ( <str> , t , y ) ; } else { for ( j = <int> ; j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { if ( j > t ) t = j ; } } y = a * b / t ; printf ( <str> , t , y ) ; } n -- ; } }", "label": 1, "id": 1714}
{"input": "int findMaxSum ( int data [ ] [ MAX ] , int , int , int , int ) ; int maxFun = <int> ; int main ( ) { int testCases , sizeData , itrInner , itrOuter , max = <int> ; int data [ MAX ] [ MAX ] ; scanf ( <str> , & testCases ) ; while ( testCases -- ) { scanf ( <str> , & sizeData ) ; for ( itrInner = <int> ; itrInner < sizeData ; itrInner ++ ) { for ( itrOuter = <int> ; itrOuter <= itrInner ; itrOuter ++ ) { scanf ( <str> , & data [ itrInner ] [ itrOuter ] ) ; } } findMaxSum ( data , sizeData , data [ <int> ] [ <int> ] , <int> , <int> ) ; printf ( <str> , maxFun ) ; } return <int> ; } int findMaxSum ( int data [ ] [ MAX ] , int sizeData , int recSum , int rowElement , int colElement ) { int itr ; if ( rowElement == sizeData ) { maxFun = ( maxFun < recSum ) ? recSum : maxFun ; return ; } else { for ( itr = <int> ; itr <= rowElement ; itr ++ ) { if ( itr - colElement == <int> || itr - colElement == <int> ) { recSum = recSum + data [ rowElement ] [ itr ] ; findMaxSum ( data , sizeData , recSum , rowElement + <int> , itr ) ; recSum = recSum - data [ rowElement ] [ itr ] ; } } } }", "label": 2, "id": 1715}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int n , i , j , p , t , k , max ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; max = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j > <int> && ( j != i ) ) a [ i ] [ j ] = max ( ( a [ i - <int> ] [ j ] ) , ( a [ i - <int> ] [ j - <int> ] ) ) + a [ i ] [ j ] ; else if ( j == i ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; if ( i == ( n - <int> ) ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } } printf ( <str> , max ) ; } return ( <int> ) ; }", "label": 0, "id": 1716}
{"input": "int main ( ) { int a , b , gcd , lcm , i , temp , t ; scanf ( <str> , & t ) ; while ( t -- ) { if ( a < b ) { a = a ; b = b ; } else { temp = a ; a = b ; b = temp ; } scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 1717}
{"input": "int main ( void ) { int t , i ; int n ; long long int ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int sml = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < sml ) sml = a [ i ] ; } if ( n == <int> ) printf ( <str> , a [ <int> ] ) ; else { ans = ( long long ) sml * ( long long ) ( n - <int> ) ; printf ( <str> , ans ) ; } } return <int> ; }", "label": 0, "id": 1718}
{"input": "int main ( ) { int a , b , c , d , e , max ; int t [ <int> ] [ <int> ] ; int tri [ <int> ] ; scanf ( <str> , & a ) ; for ( b = <int> ; b <= a ; b ++ ) { scanf ( <str> , & c ) ; if ( ( c > <int> ) && ( c < <int> ) ) { for ( d = <int> ; d <= c ; d ++ ) { for ( e = <int> ; e <= d ; e ++ ) { scanf ( <str> , & max ) ; if ( ( max > <int> ) && ( max < <int> ) ) { t [ d ] [ e ] = max ; } } } for ( d = c ; d > <int> ; d -- ) { for ( e = <int> ; e < d ; e ++ ) { if ( t [ d ] [ e ] >= t [ d ] [ e + <int> ] ) { max = t [ d ] [ e ] ; } else { max = t [ d ] [ e + <int> ] ; } t [ d - <int> ] [ e ] = max + t [ d - <int> ] [ e ] ; } } tri [ b ] = t [ <int> ] [ <int> ] ; } } for ( b = <int> ; b <= a ; b ++ ) { printf ( <str> , tri [ b ] ) ; } return <int> ; }", "label": 1, "id": 1719}
{"input": "int main ( ) { int a , b , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int x = gcd ( a , b ) ; printf ( <str> , x , a * b / x ) ; } return <int> ; } int gcd ( int m , int n ) { if ( m % n == <int> ) return n ; else gcd ( n , m % n ) ; }", "label": 1, "id": 1720}
{"input": "int main ( void ) { long int t , i = <int> , p , q , n , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & p , & q ) ; m = p ; n = q ; while ( m != n ) { if ( m > n ) m = m - n ; else n = n - m ; } printf ( <str> , m , ( p * q ) / m ) ; } }", "label": 0, "id": 1721}
{"input": "long gcd ( long , long ) ; int main ( ) { int T , i , hcf ; long x , y , lcm ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } long gcd ( long x , long y ) { if ( x == <int> ) { return y ; } while ( y != <int> ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 0, "id": 1722}
{"input": "int main ( ) { int n ; short int i , j , p , r ; scanf ( <str> , & n ) ; int k [ n ] ; printf ( <str> ) ; short int t [ <int> ] [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & k [ i ] ) ; for ( j = <int> ; j < k [ i ] ; j ++ ) { for ( r = <int> ; r <= j ; r ++ ) { scanf ( <str> , & t [ i ] [ j ] [ r ] ) ; } } printf ( <str> ) ; } for ( p = <int> ; p < n ; p ++ ) { int l ; l = k [ p ] ; for ( j = l ; j > <int> ; j -- ) { for ( i = l - <int> ; i > <int> ; i -- ) { if ( * ( t [ p ] [ j - <int> ] + i ) >= * ( t [ p ] [ j - <int> ] + i - <int> ) ) * ( t [ p ] [ j - <int> ] + i - <int> ) = * ( t [ p ] [ j - <int> ] + i - <int> ) + * ( t [ p ] [ j - <int> ] + i ) ; else * ( t [ p ] [ j - <int> ] + i - <int> ) = * ( t [ p ] [ j - <int> ] + i - <int> ) + * ( t [ p ] [ j - <int> ] + i - <int> ) ; } } } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , t [ i ] [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 1723}
{"input": "int cmpfunc ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } qsort ( a , n , sizeof ( int ) , cmpfunc ) ; printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1724}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { unsigned int a , i , s , b , h , l ; scanf ( <str> , & a , & b ) ; if ( a < b ) s = a ; else s = b ; for ( i = <int> ; i <= s ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { h = i ; } } l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 2, "id": 1725}
{"input": "int main ( ) { int t , i , p , q , r , j , k , s , n , m ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & p , & q ) ; if ( p < q ) r = p ; else r = q ; s = <int> ; if ( p < q ) m = q ; else m = p ; for ( i = <int> ; i <= r ; i ++ ) { j = r % i ; n = m % i ; if ( ( j == <int> ) && ( n == <int> ) ) { a [ s ] = i ; s ++ ; } } printf ( <str> , a [ s - <int> ] ) ; k = p * q / a [ s - <int> ] ; printf ( <str> , k ) ; } return <int> ; }", "label": 2, "id": 1726}
{"input": "int main ( ) { int t , a , b , r , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; r = m ; m = n ; n = r ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 1727}
{"input": "int main ( ) { int t , a , b , hcf , lcm , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; n = ( a < b ) ? a : b ; while ( a % n != <int> || b % n != <int> ) { n -- ; } hcf = n ; printf ( <str> , hcf , a * b / hcf ) ; } return <int> ; }", "label": 1, "id": 1728}
{"input": "int HCF ( int , int ) ; int LCM ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , x , y ; scanf ( <str> , & a , & b ) ; x = HCF ( a , b ) ; y = LCM ( a , b ) ; printf ( <str> , x , y ) ; } return <int> ; } int HCF ( int n , int m ) { if ( n > m ) return HCF ( n - m , m ) ; else if ( n < m ) return HCF ( n , m - n ) ; else if ( n == m ) return n ; } int LCM ( int p , int q ) { int i = <int> ; if ( p > q ) { while ( ( p * i ) % q != <int> ) i ++ ; p = p * i ; return p ; } else if ( q > p ) { while ( ( q * i ) % p != <int> ) i ++ ; q = q * i ; return q ; } else if ( p == q ) return p ; }", "label": 1, "id": 1729}
{"input": "int main ( void ) { int n , i , r , j , k , p , q ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & r ) ; for ( j = <int> ; j <= r ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( p = r - <int> ; p >= <int> ; p -- ) { for ( q = <int> ; q <= p ; q ++ ) { a [ p ] [ q ] = a [ p ] [ q ] + ( a [ p + <int> ] [ q ] > a [ p + <int> ] [ q + <int> ] ? a [ p + <int> ] [ q ] : a [ p + <int> ] [ q + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 1730}
{"input": "int main ( ) { int i , j , a [ <int> ] [ <int> ] , k , l , t = <int> , m , n ; scanf ( <str> , & m ) ; for ( n = <int> ; n < m ; n ++ ) { scanf ( <str> , & i ) ; for ( j = <int> ; j < i ; j ++ ) { t ++ ; for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( l = t ; l > <int> ; l -- ) for ( k = <int> ; k < l ; k ++ ) { if ( a [ l ] [ k + <int> ] > a [ l ] [ k ] ) { a [ l - <int> ] [ k ] = a [ l - <int> ] [ k ] + a [ l ] [ k + <int> ] ; } else { a [ l - <int> ] [ k ] = a [ l - <int> ] [ k ] + a [ l ] [ k ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 1731}
{"input": "int sit ( int , int , int , int * , int * * ) ; int main ( void ) { int t , n , * triangle , i , * * st ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; triangle = ( int * ) malloc ( sizeof ( int ) * n * ( n + <int> ) / <int> ) ; st = ( int * * ) malloc ( sizeof ( int ) * n * n * ( n + <int> ) / <int> ) ; for ( i = <int> ; i < n ; i ++ ) memset ( st + i , <int> , n * n * ( n + <int> ) / <int> ) ; for ( i = <int> ; i < ( n * ( n + <int> ) / <int> ) ; i ++ ) scanf ( <str> , & triangle [ i ] ) ; printf ( <str> , sit ( <int> , <int> , n , triangle , st ) ) ; free ( triangle ) ; free ( st ) ; } return <int> ; } int sit ( int x , int l , int n , int * triangle , int * * st ) { if ( l == n - <int> ) return triangle [ x - <int> ] + MAX ( triangle [ x + l - <int> ] , triangle [ x + l + <int> - <int> ] ) ; else { int a = <int> , b = <int> ; if ( st [ x + <int> ] [ l + <int> ] != <int> ) a = st [ x + <int> ] [ l + <int> ] ; else a = st [ x + l ] [ l + <int> ] = sit ( x + l , l + <int> , n , triangle , st ) ; if ( st [ x + <int> + <int> ] [ l + <int> ] != <int> ) b = st [ x + <int> + <int> ] [ l + <int> ] ; else b = st [ x + l + <int> ] [ l + <int> ] = sit ( x + l + <int> , l + <int> , n , triangle , st ) ; st [ x ] [ l ] = triangle [ x - <int> ] + MAX ( a , b ) ; return st [ x ] [ l ] ; } }", "label": 3, "id": 1732}
{"input": "int main ( void ) { long long a , b , i , min ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & b ) ; long long arr [ b + <int> ] ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < b ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( <str> , min * ( b - <int> ) ) ; } return <int> ; }", "label": 1, "id": 1733}
{"input": "long long n1 , n2 ; int main ( ) { int tc ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & n1 , & n2 ) ; long long ns = n1 ; int t ; int a = n1 , b = n2 ; while ( b > <int> ) { t = b ; b = a % b ; a = t ; } ns /= a ; printf ( <str> , a , ns * n2 ) ; } return <int> ; }", "label": 0, "id": 1734}
{"input": "long long gcd ( long long a , long long b ) { if ( a == <int> ) { return b ; } return ( gcd ( b % a , a ) ) ; } long long lcm ( long long a , long long b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , i ; long long l = <int> , u = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l , & u ) ; printf ( <str> , gcd ( l , u ) , lcm ( l , u ) ) ; } return <int> ; }", "label": 0, "id": 1735}
{"input": "int main ( ) { int n , a [ <int> ] , i , b , j , k , c , s , t , test , z ; long long int sum , max ; scanf ( <str> , & test ) ; for ( z = <int> ; z < test ; z ++ ) { max = <int> ; scanf ( <str> , & n ) ; s = n * ( n + <int> ) / <int> ; for ( i = <int> ; i <= s ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { b = i * ( i - <int> ) / <int> + <int> ; sum = a [ b ] ; t = b ; for ( j = i + <int> ; j <= n ; j ++ ) { t = t + j ; sum = sum + a [ t ] ; } if ( b > <int> ) { for ( k = <int> ; k < i ; k ++ ) { c = k * ( k - <int> ) / <int> + <int> ; sum = sum + a [ c ] ; } } if ( sum >= max ) { max = sum ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1736}
{"input": "int main ( ) { long long int T , A , B , temp1 , temp2 ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & A , & B ) ; temp1 = A ; temp2 = B ; while ( temp1 != temp2 ) { if ( temp1 > temp2 ) temp1 -= temp2 ; else temp2 -= temp1 ; } printf ( <str> , temp1 , ( A * B ) / ( temp1 ) ) ; T -- ; } return <int> ; }", "label": 0, "id": 1737}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & j ) ; if ( i == <int> ) min = j ; if ( j < min ) min = j ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1738}
{"input": "char ibuffer [ BS ] ; long ibuffer_size = <int> , ibuffer_offset = <int> ; static long inline fastread ( ) { long r = <int> , s = <int> ; while ( <int> ) { if ( ibuffer_offset >= ibuffer_size ) { ibuffer_size = read ( <int> , ibuffer , BS ) ; ibuffer_offset = <int> ; } if ( ibuffer [ ibuffer_offset ] < <char> ) { if ( s ) ibuffer_offset ++ ; else return r ; } else { s = <int> ; r = r * <int> + ibuffer [ ibuffer_offset ++ ] - <char> ; } } } int main ( ) { int a [ <int> ] [ <int> ] , i , j , N , T , max ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else if ( i == j ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ) ; } } max = a [ N - <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) if ( a [ N - <int> ] [ i ] > max ) max = a [ N - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1739}
{"input": "int main ( ) { short i , j , k , n , l , t , s ; short a [ <int> ] , b [ <int> ] , c [ <int> ] , d [ <int> ] ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; a [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( k = <int> ; k <= i ; k ++ ) { scanf ( <str> , & b [ k ] ) ; } c [ <int> ] = a [ <int> ] + b [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { c [ j ] = ( a [ j - <int> ] > a [ j ] ? a [ j - <int> ] : a [ j ] ) + b [ j ] ; } for ( j = <int> ; j <= i ; j ++ ) { a [ j ] = c [ j ] ; } a [ j ] = <int> ; } s = c [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( s < c [ j ] ) { s = c [ j ] ; } } d [ l ] = s ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , d [ i ] ) ; } return <int> ; }", "label": 3, "id": 1740}
{"input": "int <unk> ( int triangle [ ] [ <int> ] , int size ) { return <unk> ( triangle , <int> , <int> , size ) ; } int <unk> ( int triangle [ ] [ <int> ] , int <unk> , int <unk> , int size ) { if ( size <= <int> ) { return <int> ; } int <unk> = triangle [ <unk> ] [ <unk> ] ; if ( size == <int> ) { return <unk> ; } int <unk> = <unk> ( triangle , <unk> , <unk> + <int> , size - <int> ) ; int <unk> = <unk> ( triangle , <unk> + <int> , <unk> + <int> , size - <int> ) ; if ( <unk> > <unk> ) { return <unk> + <unk> ; } else { return <unk> + <unk> ; } } int main ( ) { int testCases ; scanf ( <str> , & testCases ) ; int i , j ; for ( i = <int> ; i < testCases ; ++ i ) { int numberOfRows ; scanf ( <str> , & numberOfRows ) ; int triangle [ <int> ] [ <int> ] ; for ( i = <int> ; i < numberOfRows ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & triangle [ j ] [ i ] ) ; } } printf ( <str> , <unk> ( triangle , numberOfRows ) ) ; } return <int> ; }", "label": 2, "id": 1741}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , c , d ; scanf ( <str> , & a , & b ) ; c = a ; d = b ; while ( d != <int> ) { c = c % d ; c = c ^ d ; d = d ^ c ; c = c ^ d ; } a = ( a * b ) / c ; printf ( <str> , c , a ) ; } return <int> ; }", "label": 1, "id": 1742}
{"input": "int main ( ) { long int t , i , n , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; j = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & k ) ; if ( k < j ) j = k ; } printf ( <str> , ( n - <int> ) * j ) ; } return ( <int> ) ; }", "label": 0, "id": 1743}
{"input": "int main ( ) { int t , i , j , r = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; int a [ r ] [ r ] ; for ( i = <int> ; i < r ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = r - <int> ; i > <int> ; -- i ) { for ( j = <int> ; j < i ; ++ j ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1744}
{"input": "int main ( ) { int k , n ; long long int a [ <int> ] , b [ <int> ] , hcf , lcm , max , min , r ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & a [ k ] ) ; scanf ( <str> , & b [ k ] ) ; if ( b [ k ] > a [ k ] ) { max = b [ k ] ; min = a [ k ] ; } else if ( a [ k ] > b [ k ] ) { max = a [ k ] ; min = b [ k ] ; } if ( a [ k ] == b [ k ] ) { hcf = a [ k ] ; } else { do { r = max % min ; max = min ; min = r ; } while ( r != <int> ) ; { hcf = max ; } } lcm = ( a [ k ] * b [ k ] ) / hcf ; printf ( <str> , lcm , hcf ) ; } return <int> ; }", "label": 3, "id": 1745}
{"input": "int main ( ) { int n , a , b , h , i , l ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) h = i ; } l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 2, "id": 1746}
{"input": "max ( a , b ) { if ( a > b ) return a ; else return b ; } solve ( t ) { int i , j , a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } return a [ <int> ] [ <int> ] ; } main ( ) { int n , f ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & f ) ; printf ( <str> , solve ( f ) ) ; } return <int> ; }", "label": 0, "id": 1747}
{"input": "int main ( ) { int t , a , b , i , j , k = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; int s [ b ] ; for ( i = <int> ; i <= b ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { s [ k ] = i ; k ++ ; } } j = ( a * b ) / s [ k - <int> ] ; printf ( <str> , s [ k - <int> ] , j ) ; } return <int> ; }", "label": 2, "id": 1748}
{"input": "int main ( ) { short t , n , i , j , max_sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; short a [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } max_sum = <int> ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j > <int> ) { if ( j < i ) { a [ i ] [ j ] += max ( a [ i - <int> ] [ j - <int> ] , a [ i - <int> ] [ j ] ) ; } else { a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } else { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } if ( a [ i ] [ j ] > max_sum ) max_sum = a [ i ] [ j ] ; } } printf ( <str> , max_sum ) ; } return <int> ; }", "label": 0, "id": 1749}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int n , r , j , i , l ; int s [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < r ; j ++ ) { if ( i <= j ) { scanf ( <str> , & a [ i ] [ j ] ) ; } else { a [ i ] [ j ] = <int> ; } } } for ( j = <int> ; j < r - <int> ; j ++ ) { s [ j ] = a [ <int> ] [ j ] + a [ <int> ] [ j + <int> ] + a [ <int> ] [ j + <int> ] ; } l = s [ <int> ] ; for ( j = <int> ; j < r - <int> ; j ++ ) { if ( l < s [ j ] ) { l = s [ j ] ; } } printf ( <str> , l ) ; } return <int> ; }", "label": 1, "id": 1750}
{"input": "int main ( ) { int t , max , min , n , i ; int * a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; * a = malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; max = a [ <int> ] ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; if ( a [ i ] > max ) max = a [ i ] ; } printf ( <str> , min ) ; } return <int> ; }", "label": 3, "id": 1751}
{"input": "int solve ( int a [ <int> ] [ <int> ] , int , int , int ) ; int main ( ) { int i , j , m , n , t ; int num [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & num [ i ] [ j ] ) ; printf ( <str> , solve ( num , n , <int> , <int> ) ) ; } return <int> ; } int solve ( int a [ <int> ] [ <int> ] , int n , int i , int j ) { int t , t1 , t2 , temp ; if ( i >= n ) return <int> ; t1 = solve ( a , n , i + <int> , j ) ; t2 = solve ( a , n , i + <int> , j + <int> ) ; temp = ( t1 > t2 ? t1 : t2 ) ; t = temp + a [ i ] [ j ] ; return t ; }", "label": 2, "id": 1752}
{"input": "long long int gcd ( int a , int b ) { if ( b == <int> || a == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } main ( ) { int t , a , b ; long long int gcd1 , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd1 = gcd ( a , b ) ; lcm = ( a / gcd1 ) ; lcm = lcm * b ; printf ( <str> , gcd1 , lcm ) ; } }", "label": 0, "id": 1753}
{"input": "int readint ( ) { int n = <int> ; char c ; while ( c = getchar_unlocked ( ) ) { if ( c == <char> || c == <char> ) return n ; else n = n * <int> + c - <char> ; } return n ; } int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] , k ; t = readint ( ) ; while ( t -- ) { n = readint ( ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = readint ( ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1754}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , h , l ; scanf ( <str> , & a , & b ) ; int x = a , y = b ; while ( x != y ) { if ( x > y ) x -= y ; else y -= x ; } l = ( a * b ) / x ; printf ( <str> , x , l ) ; } }", "label": 1, "id": 1755}
{"input": "int main ( void ) { int t , n , m , i , j , k , l , r , d , s , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } d = n ; m = <int> ; for ( i = <int> ; i <= n ; i ++ ) { s = <int> ; for ( j = <int> ; j <= d ; j ++ ) { s = s + a [ j ] [ i ] ; } if ( s > m ) { m = s ; } d -- ; } printf ( <str> , m + <int> ) ; } return <int> ; }", "label": 1, "id": 1756}
{"input": "int euclid ( int a , int b ) { if ( a % b == <int> ) return b ; else return euclid ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; int gcd ; long long int lcm ; scanf ( <str> , & a , & b ) ; if ( a < b ) { gcd = a ; a = b ; gcd = b ; } gcd = euclid ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1757}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int n , nLines , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & nLines ) ; for ( i = <int> ; i < nLines ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = nLines - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j + <int> ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1758}
{"input": "int main ( ) { int i , t , n , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ i - <int> ] [ j ] ) ; } } return <int> ; }", "label": 2, "id": 1759}
{"input": "int main ( ) { int tst , len , i , j ; scanf ( <str> , & tst ) ; for ( i = <int> ; i < tst ; i ++ ) { long long int ans ; scanf ( <str> , & len ) ; long int min ; long int chk [ len ] ; for ( j = <int> ; j < len ; j ++ ) { scanf ( <str> , & chk [ j ] ) ; } min = chk [ <int> ] ; for ( j = <int> ; j <= len / <int> ; j ++ ) { if ( chk [ j ] <= chk [ len - <int> - j ] ) { if ( chk [ j ] <= min ) { min = chk [ j ] ; } } else { if ( chk [ len - <int> - j ] <= min ) { min = chk [ len - <int> - j ] ; } } } ans = ( len - <int> ) * min ; printf ( <str> , ans ) ; } }", "label": 1, "id": 1760}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , min ; scanf ( <str> , & n ) ; long long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 1, "id": 1761}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; int min ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j == <int> ) min = a [ j ] ; else if ( min > a [ j ] ) min = a [ j ] ; } long int h = min * ( n - <int> ) ; printf ( <str> , h ) ; } return <int> ; }", "label": 0, "id": 1762}
{"input": "main ( ) { int n , i , m , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; int z [ m ] [ m ] ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & z [ i ] [ j ] ) ; } for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( z [ i + <int> ] [ j ] > z [ i + <int> ] [ j + <int> ] ) z [ i ] [ j ] += z [ i + <int> ] [ j ] ; else z [ i ] [ j ] += z [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , z [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 1763}
{"input": "int main ( ) { long int t , x , y , a , b , g , l , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { r = a % b ; a = b ; b = r ; } g = a ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 1764}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , k ; scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; printf ( <str> , k , ( a * b ) / k ) ; } return <int> ; }", "label": 1, "id": 1765}
{"input": "int main ( ) { int T , A , B , i , j , gcd , min ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; min = A < B ? A : B ; for ( j = <int> ; j <= min ; j ++ ) if ( A % j == <int> && B % j == <int> ) gcd = j ; printf ( <str> , gcd , ( A * B ) / gcd ) ; } } return <int> ; }", "label": 1, "id": 1766}
{"input": "int arr [ <int> ] [ <int> ] ; int result [ <int> ] ; int r = <int> ; int main ( ) { int t , n , l = <int> , i , j , max , p , q , sum , k ; scanf ( <str> , & t ) ; while ( t > <int> ) { max = <int> ; sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( k = <int> ; k < n ; k ++ ) { p = n - <int> ; q = n - <int> - k ; sum = arr [ p ] [ q ] ; while ( p >= <int> ) { if ( arr [ p - <int> ] [ q ] > arr [ p - <int> ] [ q - <int> ] ) { sum = sum + arr [ p - <int> ] [ q ] ; p -- ; } else { sum = sum + arr [ p - <int> ] [ q - <int> ] ; p -- ; q -- ; } } if ( max < sum ) max = sum ; } result [ l ] = max ; l ++ ; t -- ; } l -- ; for ( ; r <= l ; r ++ ) printf ( <str> , result [ r ] ) ; return <int> ; }", "label": 1, "id": 1767}
{"input": "void cost ( unsigned long int [ ] , unsigned long int ) ; int main ( ) { unsigned long int a [ <int> ] , n ; int i , no ; scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) { scanf ( <str> , & n ) ; cost ( a , n ) ; } return <int> ; } void cost ( unsigned long int a [ ] , unsigned long int n ) { unsigned long int min , i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; return ; }", "label": 3, "id": 1768}
{"input": "int main ( int argc , char const * argv [ ] ) { int t , i , temp , min ; long long int n , cost ; scanf ( <str> , & t ) ; while ( t -- ) { min = INT_MAX ; cost = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < min ) min = temp ; if ( i >= <int> ) cost += min ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 1769}
{"input": "int main ( ) { int t , n , i , min ; long long int s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } s = min * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 1770}
{"input": "int main ( ) { int i , t , num1 , num2 , remainder , denominator , numerator , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; remainder = numerator % denominator ; } else { numerator = num2 ; denominator = num2 ; remainder = numerator % denominator ; } while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( num1 * num2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1771}
{"input": "int prev_array [ <int> ] ; int main ( ) { int t , cnt ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ <int> * n ] ; int i , k , j ; int maxi ; for ( i = <int> ; i < n ; i ++ ) arr [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { int inp [ i + <int> ] ; for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & inp [ j ] ) ; if ( i == <int> ) { arr [ <int> ] = inp [ <int> ] ; } else { for ( k = <int> ; k <= i ; k ++ ) prev_array [ k ] = arr [ k ] ; cnt = <int> ; for ( k = <int> ; k < i ; k ++ ) { int x = prev_array [ k ] ; arr [ cnt ] = x + inp [ k ] ; cnt ++ ; arr [ cnt ] = x + inp [ k + <int> ] ; cnt ++ ; } } } maxi = INT_MIN ; for ( i = <int> ; i < cnt ; i ++ ) { if ( arr [ i ] > maxi ) maxi = arr [ i ] ; } printf ( <str> , maxi ) ; } }", "label": 1, "id": 1772}
{"input": "long gcd ( long , long ) ; int main ( ) { int T , i , hcf ; long x , y , lcm ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } long gcd ( long x , long y ) { if ( x == <int> ) { return y ; } while ( y != <int> ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 0, "id": 1773}
{"input": "int main ( ) { int T , a [ <int> ] , i , n , j , k , b [ <int> ] , t ; int count , s ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { count = <int> ; s = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( k = <int> ; k < n - <int> ; k ++ ) { if ( a [ k ] <= a [ k + <int> ] ) { count ++ ; s = s + count ; } else count = <int> ; } b [ i ] = s + n ; } for ( t = <int> ; t < T ; t ++ ) printf ( <str> , b [ t ] ) ; }", "label": 0, "id": 1774}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int n , i , j = <int> , k = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) { j ++ ; } else if ( j > <int> ) { k ++ ; j = <int> ; } } if ( j > <int> ) k += ++ n ; else k += n ; printf ( <str> , k ) ; } return <int> ; }", "label": 1, "id": 1775}
{"input": "int main ( ) { int n , a [ <int> ] [ <int> ] , r , i , j ; scan ( & n ) ; while ( n -- ) { scan ( & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scan ( & a [ i ] [ j ] ) ; for ( i = r - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ? ( a [ i + <int> ] [ j ] + a [ i ] [ j ] ) : ( a [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1776}
{"input": "int main ( void ) { int big , no ; int k = <int> ; long long int a , b ; scanf ( <str> , & no ) ; while ( k < no ) { scanf ( <str> , & a , & b ) ; int gcd , i = <int> ; if ( a > b ) big = a ; else big = b ; while ( i <= big ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { gcd = i ; } i ++ ; } printf ( <str> , gcd ) ; int j = <int> , lcm = <int> ; while ( j <= big ) { if ( ( a % j == <int> ) && ( b % j == <int> ) ) { lcm = lcm * j ; a = a / j , b = b / j ; j ++ ; } else { lcm = lcm * a * b ; break ; } } printf ( <str> , lcm ) ; k ++ ; } return <int> ; }", "label": 2, "id": 1777}
{"input": "int main ( ) { int no , a , b , x , y , gcd , lcm , t ; scanf ( <str> , & no ) ; while ( no -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; x = a ; y = b ; while ( y != <int> ) { t = y ; y = x % y ; x = t ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 1778}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long int n , i ; scanf ( <str> , & n ) ; long int A [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( A [ i ] > A [ i + <int> ] ) A [ i ] = <int> ; else if ( A [ i ] < A [ i + <int> ] ) A [ i + <int> ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { if ( A [ i ] != <int> ) printf ( <str> , A [ i ] ) ; } } return <int> ; }", "label": 1, "id": 1779}
{"input": "int main ( ) { int t , x , y ; long long int a , b , gcd , lcm , no1 , no2 , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { i = <int> , x = <int> , y = <int> ; scanf ( <str> , & a , & b ) ; if ( a > b ) no1 = b , no2 = a ; else no1 = a , no2 = b ; j = no1 ; while ( <int> ) { if ( ( no2 * i ) % no1 == <int> && x == <int> ) { lcm = no2 * i ; x = <int> ; } if ( no1 % j == <int> && no2 % j == <int> && y == <int> ) { gcd = j ; y = <int> ; } j -- ; i ++ ; if ( x == <int> && y == <int> ) break ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 1780}
{"input": "int tcout [ <int> ] ; int count_subarray ( int A [ ] , int size ) { int i , j , c ; for ( j = <int> ; j < size ; j ++ ) { c ++ ; i = j ; while ( i < size - <int> && A [ i ] <= A [ ++ i ] ) { c ++ ; } } return c ; } int main ( ) { int T , N , i , j ; unsigned int a [ <int> ] ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } tcout [ j ] = count_subarray ( a , N ) ; } for ( j = <int> ; j < T ; j ++ ) { printf ( <str> , tcout [ j ] ) ; } return <int> ; }", "label": 1, "id": 1781}
{"input": "int main ( ) { int n , x , a , s = <int> , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & x ) ; for ( i = <int> ; i <= x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a ) ; if ( ( i == x && j == <int> ) || ( i == x - <int> && j == <int> ) || ( i == x && j == <int> ) ) { s = a + s ; } } printf ( <str> ) ; } } printf ( <str> , s ) ; return <int> ; }", "label": 1, "id": 1782}
{"input": "int main ( ) { int i , t , m , n , p , q , r ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m , & n ) ; while ( n != <int> ) { r = m % n ; m = n ; n = r ; } printf ( <str> , m , ( p * q ) / m ) ; } return <int> ; }", "label": 1, "id": 1783}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int b [ t ] ; int a [ <int> ] [ <int> ] ; int i , j , k , sum ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , b [ i ] ) ; for ( j = <int> ; j <= b [ i ] ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } } for ( i = <int> ; i <= t ; i ++ ) { sum = <int> ; k = <int> ; for ( j = <int> ; j <= b [ i ] ; j ++ ) { sum = a [ j ] [ k ] ; if ( ( a [ j ] [ k ] + a [ j + <int> ] [ k ] ) > ( a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ) ) { sum = sum + a [ j + <int> ] [ k ] ; } else { sum = sum + a [ j + <int> ] [ k + <int> ] ; k ++ ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 1784}
{"input": "int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } return a ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int hcf = gcd ( a , b ) ; long long int lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 1785}
{"input": "int main ( ) { int j , i , k , l , t , a [ <int> ] [ <int> ] , max [ <int> ] , sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & j ) ; for ( k = <int> ; k <= j ; k ++ ) { for ( l = <int> ; l <= k ; l ++ ) { scanf ( <str> , & a [ k - <int> ] [ l - <int> ] ) ; } } max [ i ] = a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ; for ( k = <int> ; k < j ; k ++ ) { sum = <int> ; sum += a [ k ] [ <int> ] + a [ k + <int> ] [ <int> ] + a [ k + <int> ] [ <int> ] ; if ( sum >= max [ i ] ) { max [ i ] = sum ; } } } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , max [ i ] ) ; } return <int> ; }", "label": 1, "id": 1786}
{"input": "int max ( int x , int y ) { if ( x >= y ) return x ; else return y ; } int main ( ) { int a [ <int> ] [ <int> ] ; int t , i , j , k , l , nor ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & nor ) ; for ( j = <int> ; j < nor ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = nor - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { a [ j ] [ k ] += max ( a [ j + <int> ] [ k ] , a [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1787}
{"input": "int main ( ) { int i , j , t , n , a [ <int> ] [ <int> ] = { <int> } , p , q ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; p = a [ i - <int> ] [ j - <int> ] ; q = a [ i - <int> ] [ j ] ; if ( p > q ) a [ i ] [ j ] += p ; else a [ i ] [ j ] += q ; } } p = a [ n ] [ j ] ; for ( j = <int> ; j <= n ; j ++ ) { if ( p < a [ n ] [ j ] ) p = a [ n ] [ j ] ; } printf ( <str> , p ) ; } return ( <int> ) ; }", "label": 0, "id": 1788}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int n , k , j ; scanf ( <str> , & n ) ; for ( k = n ; k > <int> ; k -- ) { for ( j = <int> ; j < k - <int> ; j ++ ) { scanf ( <str> , & a [ k ] [ j ] ) ; if ( a [ k ] [ j ] > a [ k ] [ j + <int> ] ) { a [ k - <int> ] [ j ] = a [ k - <int> ] [ j ] + a [ k ] [ j ] ; } else a [ k - <int> ] [ j ] = a [ k - <int> ] [ j ] + a [ k ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( k = n ; k > <int> ; k -- ) { for ( j = <int> ; j < k - <int> ; j ++ ) { a [ k ] [ j ] = <int> ; } } } return <int> ; }", "label": 1, "id": 1789}
{"input": "int a [ <int> ] [ <int> ] ; int bs [ <int> ] [ <int> ] ; int n ; int bestsum ( int i , int j ) { if ( i == n - <int> ) return ( bs [ i ] [ j ] = a [ i ] [ j ] ) ; if ( bs [ i ] [ j ] ) return bs [ i ] [ j ] ; int t1 = a [ i ] [ j ] + bestsum ( i + <int> , j ) ; int t2 = a [ i ] [ j ] + bestsum ( i + <int> , j + <int> ) ; return ( bs [ i ] [ j ] = t1 > t2 ? t1 : t2 ) ; } main ( ) { int t ; scanf ( <str> , & t ) ; int i , j ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , bestsum ( <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 1790}
{"input": "int main ( ) { int i , j , t , n , x ; int a [ n ] ; scanf ( <str> , & x ) ; for ( i = <int> ; i < x ; i ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n - <int> - i ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) { t = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = t ; } } } printf ( <str> , a [ <int> ] * ( -- n ) ) ; } return <int> ; }", "label": 3, "id": 1791}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , i , j , k ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1792}
{"input": "int main ( int argc , char * argv [ ] ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int j , i , n , temp ; scanf ( <str> , & n ) ; int * * ar = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) ar [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ar [ i + <int> ] [ j ] > ar [ i + <int> ] [ j + <int> ] ) temp = ar [ i + <int> ] [ j ] ; else temp = ar [ i + <int> ] [ j + <int> ] ; ar [ i ] [ j ] += temp ; } } printf ( <str> , ar [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1793}
{"input": "int sum = <int> ; int m ; int ar [ <int> ] [ <int> ] ; void pro ( int i , int j , int p ) { if ( i == m ) return ; p += ar [ i ] [ j ] ; if ( p > sum ) sum = p ; pro ( i + <int> , j , p ) ; pro ( i + <int> , j + <int> , p ) ; } int main ( ) { int i , j , n , k , t = <int> ; scanf ( <str> , & n ) ; for ( ; n > <int> ; n -- ) { sum = <int> ; scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } pro ( <int> , <int> , <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 1794}
{"input": "void main ( ) { int t , i , j , c , <unk> , <unk> , ar , arr ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & <unk> ) ; c = <int> ; <unk> = <int> ; scanf ( <str> , & ar ) ; for ( j = <int> ; j < <unk> ; j ++ ) { scanf ( <str> , & arr ) ; if ( arr >= ar ) { c ++ ; <unk> += c ; } else { c = <int> ; <unk> ++ ; } ar = arr ; } printf ( <str> , <unk> ) ; } }", "label": 0, "id": 1795}
{"input": "int main ( int argc , char const * argv [ ] ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( int i = n - <int> ; i >= <int> ; i -- ) { for ( int j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1796}
{"input": "int main ( ) { int n , i , j , k , limit , max ; int array [ <int> ] [ <int> ] = { - <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & limit ) ; for ( j = <int> ; j < limit ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & array [ j ] [ k ] ) ; printf ( <str> , sum ( array , limit , <int> , <int> ) ) ; } return <int> ; } int sum ( int array [ <int> ] [ <int> ] , int limit , int cur_row , int pos ) { if ( cur_row == limit ) return <int> ; int sum1 , sum2 ; sum1 = array [ cur_row ] [ pos ] + sum ( array , limit , cur_row + <int> , pos ) ; sum2 = array [ cur_row ] [ pos ] + sum ( array , limit , cur_row + <int> , pos + <int> ) ; if ( sum1 > sum2 ) return sum1 ; else return sum2 ; }", "label": 2, "id": 1797}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( void ) { int hcf , lcm ; int T ; int A , B ; scanf ( <str> , & T ) ; while ( T -- > <int> ) { scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; hcf = gcd ( A , B ) ; printf ( <str> , hcf , A * B / hcf ) ; } return <int> ; }", "label": 1, "id": 1798}
{"input": "int sumtri ( int a [ <int> ] [ <int> ] , int n ) { int i = <int> , j = <int> , x , y , s1 = <int> , s2 = <int> ; if ( n == <int> ) return <int> ; if ( n == <int> ) return a [ <int> ] [ <int> ] ; s1 += a [ i ] [ j ] ; s2 += a [ i ] [ j + <int> ] ; x = j ; y = j + <int> ; for ( i = <int> ; i <= ( n - <int> ) ; i ++ ) { if ( a [ i ] [ x ] <= a [ i ] [ x + <int> ] ) { s1 += a [ i ] [ x + <int> ] ; x += <int> ; } else s1 += a [ i ] [ x ] ; if ( a [ i ] [ y ] <= a [ i ] [ y + <int> ] ) { s2 += a [ i ] [ y + <int> ] ; y += <int> ; } else s2 += a [ i ] [ y ] ; } if ( s1 > s2 ) return s1 + a [ <int> ] [ <int> ] ; else return s2 + a [ <int> ] [ <int> ] ; } int main ( ) { int a [ <int> ] [ <int> ] , t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , sumtri ( a , n ) ) ; } return <int> ; }", "label": 1, "id": 1799}
{"input": "int main ( int argc , char * * argv ) { int N ; scanf ( <str> , & N ) ; while ( N -- ) { int size , i , j ; scanf ( <str> , & size ) ; int * * T = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( i = <int> ; i < size ; i ++ ) T [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < size ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & T [ i ] [ j ] ) ; for ( i = size - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < i + <int> ; j ++ ) T [ i ] [ j ] += ( T [ i + <int> ] [ j ] > T [ i + <int> ] [ j + <int> ] ? T [ i + <int> ] [ j ] : T [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , T [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1800}
{"input": "int main ( ) { int i , j , k , n , m , s , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { s = <int> ; scanf ( <str> , & m ) ; for ( j = <int> ; j < m ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = m - <int> ; j >= <int> ; j -- ) { s = s + a [ j ] [ <int> ] ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 1801}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) { return b ; } else { return gcd ( b % a , a ) ; } } int main ( ) { int a , b , hcf , lcm , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return ( <int> ) ; }", "label": 1, "id": 1802}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , n , sum = <int> , min , * a ; scanf ( <str> , & n ) ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , a + i ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= min ) sum += min ; else { sum += a [ i ] ; min = a [ i ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 1803}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] , i , j , n ; int first ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1804}
{"input": "int main ( ) { int n , c , i , j ; int t , k ; scanf ( <str> , & t ) ; int ans [ t ] ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; int ar [ n ] ; for ( i = <int> ; i <= n - <int> ; i ++ ) scanf ( <str> , & ar [ i ] ) ; c = <int> ; for ( i = <int> ; i <= n - <int> ; i ++ ) { c ++ ; for ( j = i + <int> ; j <= n - <int> ; j ++ ) { if ( ar [ j ] > ar [ j - <int> ] ) c ++ ; else break ; } } ans [ k - <int> ] = c ; } for ( i = <int> ; i <= t - <int> ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 0, "id": 1805}
{"input": "int main ( ) { long int n , t , i , a ; long long int min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = mini ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } min *= n - <int> ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 1806}
{"input": "int main ( ) { int arr [ N ] , a , b , c , n = <int> , i , j , d = <int> ; scanf ( <str> , & a ) ; while ( n < a ) { scanf ( <str> , & b ) ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & c ) ; arr [ i ] = c ; } if ( b == <int> ) { printf ( <str> ) ; break ; } i = <int> ; j = <int> ; while ( <int> ) { if ( arr [ i ] > arr [ j ] ) { d = d + arr [ j ] ; if ( i > j ) { i = i + <int> ; } if ( i < j ) { i = j + <int> ; } } else { d = d + arr [ i ] ; if ( i > j ) { j = i + <int> ; } if ( j > i ) { j = j + <int> ; } } if ( i == b || j == b ) { break ; } } printf ( <str> , d ) ; n = n + <int> ; d = <int> ; } return <int> ; }", "label": 3, "id": 1807}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n1 , n2 , gcd , lcm , i ; scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = n1 * n2 / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 1808}
{"input": "int check ( int n ) { if ( n > <int> ) return n + check ( n - <int> ) ; else return <int> ; } int main ( ) { int t , n , i , j , sum , * a = NULL , tl , temp ; scanf ( <str> , & tl ) ; while ( tl -- ) { sum = <int> ; scanf ( <str> , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { temp = <int> ; for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ i ] ) { temp ++ ; if ( i < ( n - <int> ) ) i ++ ; else break ; } else break ; } sum = sum + check ( temp ) ; } free ( a ) ; printf ( <str> , sum + n ) ; } return <int> ; }", "label": 0, "id": 1809}
{"input": "int main ( ) { int ara1 [ <int> ] , ara2 [ <int> ] , i , n , rem , j , prod ; scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> * n ; i = i + <int> ) { scanf ( <str> , & ara1 [ i ] , & ara1 [ i + <int> ] ) ; } for ( i = <int> ; i < <int> * n ; i = i + <int> ) { prod = ara1 [ i ] * ara1 [ i + <int> ] ; if ( ara1 [ i ] == <int> || ara1 [ i + <int> ] == <int> ) { break ; } else if ( ara1 [ i + <int> ] % ara1 [ i ] == <int> ) { ara2 [ i ] = ara1 [ i ] ; } else { for ( j = <int> ; ; j ++ ) { rem = ara1 [ i + <int> ] % ara1 [ i ] ; ara1 [ i + <int> ] = ara1 [ i ] ; ara1 [ i ] = rem ; if ( ara1 [ i + <int> ] % ara1 [ i ] == <int> ) { ara2 [ i ] = ara1 [ i ] ; break ; } } } ara2 [ i + <int> ] = prod / ara2 [ i ] ; printf ( <str> , ara2 [ i ] , ara2 [ i + <int> ] ) ; } return <int> ; }", "label": 1, "id": 1810}
{"input": "int main ( ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { int a , b , x , y , t , lcm , gcd ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 1811}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] , n , i , j , min = <int> , temp = <int> , sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n - i - <int> ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) { temp = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = temp ; } } } printf ( <str> , sum = sum + ( a [ <int> ] * ( n - <int> ) ) ) ; } }", "label": 3, "id": 1812}
{"input": "long int gcd ( long int m , long int n ) { if ( m % n == <int> ) return n ; else return gcd ( n , m % n ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 1813}
{"input": "long int gcd ( long int a , long int b ) { while ( a != b ) { if ( a > b ) return ( gcd ( a - b , b ) ) ; else return ( gcd ( a , b - a ) ) ; } return a ; } int main ( ) { int t ; long int lcm , a , b , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; max = gcd ( a , b ) ; lcm = ( a * b ) / max ; printf ( <str> , max , lcm ) ; } }", "label": 0, "id": 1814}
{"input": "int main ( ) { long long int i , j , n , b [ <int> ] ; int t , min = <int> ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { while ( t -- > <int> ) { scanf ( <str> , & n ) ; if ( n >= <int> ) { for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & b [ i ] ) ; } min = b [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( min > b [ j ] ) { min = b [ j ] ; } } printf ( <str> , min * ( n - <int> ) ) ; min = <int> ; } } return <int> ; }", "label": 1, "id": 1815}
{"input": "int main ( void ) { int t , n , k , temp , sum , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; int ar [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { k = <int> ; for ( j = <int> ; j < i ; j ++ ) { if ( ar [ i ] [ k ] < ar [ i ] [ j ] ) k = j ; } temp = ar [ i ] [ k ] ; ar [ i ] [ k ] = ar [ i ] [ <int> ] ; ar [ i ] [ <int> ] = temp ; } for ( i = <int> ; i < n ; i ++ ) sum += ar [ i ] [ <int> ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 1816}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , x , y ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a ) ; a = x ; b = y ; while ( a != b ) { if ( a < b ) a = a + x ; else b = b + y ; } printf ( <str> , a ) ; } return <int> ; }", "label": 2, "id": 1817}
{"input": "int a [ <int> ] [ <int> ] ; int fastread ( ) { int input ; char c = <int> ; while ( c < <int> ) c = getchar ( ) ; input = <int> ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar ( ) ; } return input ; } int main ( ) { int n , t , i , j , k , temp ; t = fastread ( ) ; while ( t -- ) { n = fastread ( ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } temp = a [ <int> ] [ <int> ] ; for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; k ++ ; } return <int> ; }", "label": 0, "id": 1818}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int cost = <int> ; for ( int i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { a [ i + <int> ] = a [ i + <int> ] ; cost = cost + a [ i + <int> ] ; } else if ( a [ i + <int> ] >= a [ i ] ) { a [ i + <int> ] = a [ i ] ; cost = cost + a [ i ] ; } } printf ( <str> , cost ) ; t -- ; } return <int> ; }", "label": 1, "id": 1819}
{"input": "void calculate ( ) ; int mylog ( int num ) ; int main ( int argc , char * argv [ ] ) { int triangleCount ; scanf ( <str> , & triangleCount ) ; while ( triangleCount > <int> ) { calculate ( ) ; triangleCount -- ; } return EXIT_SUCCESS ; } void calculate ( ) { int lineCount , lineNum , sumLen , i , max ; scanf ( <str> , & lineCount ) ; int line [ lineCount ] ; int sum [ <int> ] ; lineNum = <int> ; sumLen = <int> ; max = <int> ; while ( lineCount > <int> ) { int i ; lineNum ++ ; for ( i = <int> ; i < lineNum ; i ++ ) scanf ( <str> , & line [ i ] ) ; if ( lineNum == <int> ) { sum [ <int> ] = line [ <int> ] ; sumLen = <int> ; } else { for ( i = sumLen ; i > <int> ; i -- ) { int lineC = mylog ( i ) ; sum [ ( <int> * i ) - <int> ] = sum [ i - <int> ] + line [ lineC + <int> ] ; sum [ ( <int> * i ) - <int> ] = sum [ i - <int> ] + line [ lineC ] ; } sumLen *= <int> ; } lineCount -- ; } for ( i = <int> ; i < sumLen ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( <str> , max ) ; } int mylog ( int num ) { int count = <int> ; while ( num > <int> ) { num = num / <int> ; count ++ ; } return count - <int> ; }", "label": 3, "id": 1820}
{"input": "int main ( ) { int n , a , min ; int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( i == <int> ) min = a ; else if ( min > a ) min = a ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 1821}
{"input": "int main ( ) { int t , n , i , count , count1 , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; count = n ; scanf ( <str> , & a ) ; n -- ; while ( n ) { count1 = <int> ; scanf ( <str> , & b ) ; n -- ; while ( a <= b ) { count1 ++ ; a = b ; if ( n ) { scanf ( <str> , & b ) ; n -- ; } else break ; } a = b ; if ( count1 ) { count = count + count1 * ( count1 - <int> ) / <int> ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 1822}
{"input": "int main ( ) { int i , n , a , b , j , gcd , lcm , max ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( j = b ; j >= <int> ; j -- ) { if ( ( a % j == <int> ) && ( b % j == <int> ) ) { gcd = j ; break ; } } max = a ; while ( <int> ) { if ( ( max % a == <int> ) && ( max % b == <int> ) ) { lcm = max ; break ; } max ++ ; } } else { for ( j = a ; j >= <int> ; j -- ) { if ( ( a % j == <int> ) && ( b % j == <int> ) ) { gcd = j ; break ; } } max = b ; while ( <int> ) { if ( ( max % a == <int> ) && ( max % b == <int> ) ) { lcm = max ; break ; } max ++ ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 1823}
{"input": "int f ( int * , int , int , int , int ) ; main ( ) { int test , a [ <int> ] [ <int> ] , b , c , d , i , e , g , h ; scanf ( <str> , & test ) ; for ( i = <int> ; i <= test ; i ++ ) { scanf ( <str> , & b ) ; for ( c = <int> ; c < b ; c ++ ) { for ( d = <int> ; d <= c ; d ++ ) { scanf ( <str> , & a [ c ] [ d ] ) ; } } g = a [ <int> ] [ <int> ] ; h = <int> ; e = f ( & a [ <int> ] [ <int> ] , g , h , h , b ) ; printf ( <str> , e ) ; } return <int> ; } int f ( int * a , int b , int c , int d , int k ) { int lsum , rsum , g ; lsum = b ; rsum = b ; if ( ( c + <int> ) < k ) { a = a + <int> ; lsum = lsum + * ( a + d ) ; g = c + <int> ; c = c + <int> ; lsum = f ( a , lsum , g , d , k ) ; rsum = rsum + * ( a + d + <int> ) ; rsum = f ( a , rsum , c , d + <int> , k ) ; } if ( rsum > lsum ) return rsum ; else if ( lsum >= rsum ) return lsum ; }", "label": 2, "id": 1824}
{"input": "int gcd ( int a , int b ) ; int main ( int argc , const char * argv [ ] ) { int numOfCases ; int i , n1 , n2 ; scanf ( <str> , & numOfCases ) ; for ( i = <int> ; i < numOfCases ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; int temp = gcd ( n1 , n2 ) ; printf ( <str> , temp , ( n1 * n2 ) / temp ) ; } return <int> ; } int gcd ( int a , int b ) { int t ; if ( a < b ) { t = a ; a = b ; b = t ; } while ( b != <int> ) { t = b ; b = a % b ; a = t ; } return a ; }", "label": 1, "id": 1825}
{"input": "int maximum ( int b , int c ) ; int main ( ) { unsigned int i , j , a [ <int> ] [ <int> ] ; unsigned int n ; int k ; int t ; unsigned int max [ <int> ] [ <int> ] , max_value ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } max [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( j == <int> ) { max [ i ] [ j ] = a [ i ] [ j ] + max [ i - <int> ] [ j ] ; } else if ( j == i ) { max [ i ] [ j ] = a [ i ] [ j ] + max [ i - <int> ] [ j - <int> ] ; } else { max [ i ] [ j ] = a [ i ] [ j ] + maximum ( max [ i - <int> ] [ j ] , max [ i - <int> ] [ j - <int> ] ) ; } } } int l_r = n - <int> ; max_value = a [ l_r ] [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( max [ l_r ] [ k ] > max_value ) { max_value = max [ l_r ] [ k ] ; } } printf ( <str> , max_value ) ; } return <int> ; } int maximum ( int b , int c ) { if ( b > c ) { return b ; } else { return c ; } }", "label": 3, "id": 1826}
{"input": "int main ( ) { int g ; scanf ( <str> , & g ) ; while ( g -- ) { int n ; scanf ( <str> , & n ) ; int i , j , a [ n ] [ n ] , c , d ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } if ( i == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else if ( j == i ) { a [ i ] [ j ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { c = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; d = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; if ( d >= c ) a [ i ] [ j ] = d ; else if ( c > d ) a [ i ] [ j ] = c ; } } } int t = <int> ; for ( i = <int> ; i <= n - <int> ; i ++ ) { if ( t <= a [ n - <int> ] [ i ] ) t = a [ n - <int> ] [ i ] ; } printf ( <str> , t ) ; } }", "label": 0, "id": 1827}
{"input": "int n , i , j , k , l , T , n , a , b ; int main ( ) { scanf ( <str> , & T ) ; int M [ T ] [ <int> ] ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = a ; ; j -- ) { if ( b % j == <int> && a % j == <int> ) { M [ i ] [ <int> ] = j ; break ; } } for ( k = a ; ; k ++ ) { if ( k % b == <int> && k % a == <int> ) { M [ i ] [ <int> ] = k ; break ; } } } for ( l = <int> ; l < T ; l ++ ) { printf ( <str> , M [ l ] [ <int> ] , M [ l ] [ <int> ] ) ; } }", "label": 2, "id": 1828}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] , i , c = <int> , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { a [ i + <int> ] = a [ i ] ; } c = c + a [ i + <int> ] ; } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 1829}
{"input": "int gcd ( a , b ) { int num = <int> , den = <int> , rem , c ; if ( a > b ) { num = a ; den = b ; } else if ( a < b ) { num = b ; den = a ; } else { num = a ; den = b ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } c = den ; return ( c ) ; } int main ( ) { int A , B , t , g , l ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & A , & B ) ; g = gcd ( A , B ) ; l = ( A * B ) / g ; printf ( <str> , g , l ) ; } return ( <int> ) ; }", "label": 1, "id": 1830}
{"input": "int main ( ) { long long cases , n , a , min , i ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a <= min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1831}
{"input": "long gcd ( long , long ) ; int main ( ) { int t ; long a , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; printf ( <str> , c ) ; a = a / c ; printf ( <str> , a * b ) ; } } long gcd ( long a , long b ) { if ( a % b == <int> ) return b ; else gcd ( b , ( a % b ) ) ; }", "label": 1, "id": 1832}
{"input": "int main ( ) { int i , j , l = <int> , n , r , p = <int> , c , t [ <int> ] = { <int> } , a [ <int> ] = { <int> } , sum [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> , c = <int> ; i <= r ; i ++ ) { c += i ; if ( i != r ) { p *= <int> ; a [ i ] = i - <int> ; } } for ( i = <int> ; i <= c ; i ++ ) scanf ( <str> , & t [ i ] ) ; for ( i = <int> , l = <int> ; i <= p ; i ++ ) { sum [ i ] = t [ <int> ] ; for ( j = <int> , c = <int> ; j <= r - <int> ; j ++ ) { c += a [ j ] + <int> ; sum [ i ] += t [ c ] ; if ( l < sum [ i ] ) l = sum [ i ] ; } j -- ; while ( a [ j ] == j ) j -- ; a [ j ++ ] ++ ; while ( j <= r - <int> ) a [ j ++ ] -- ; } printf ( <str> , l ) ; } return <int> ; }", "label": 3, "id": 1833}
{"input": "int main ( ) { int i , j , k , n , m , t , l , max ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; int a [ n + <int> ] [ n + <int> ] , b [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; if ( j != i && j != <int> ) { l = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; m = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; if ( l >= m ) { b [ i ] [ j ] = l ; } else { b [ i ] [ j ] = m ; } } if ( j == <int> && i > <int> ) { b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; } if ( j == i && j != <int> ) { b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; } } } max = b [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( b [ n ] [ i ] >= max ) { max = b [ n ] [ i ] ; } } printf ( <str> , max ) ; } }", "label": 0, "id": 1834}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , a , min , i ; scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } long long int score ; score = min * ( n - <int> ) ; printf ( <str> , score ) ; } return <int> ; }", "label": 1, "id": 1835}
{"input": "int main ( ) { int t , a , b , l , max , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; ( ( i <= a ) && ( i <= b ) ) ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) max = i ; } if ( a > b ) min = b ; else min = a ; for ( i = min ; i <= ( a * b ) ; i ++ ) { if ( ( i % a == <int> ) && ( i % b == <int> ) ) { l = i ; break ; } } printf ( <str> , max , l ) ; } return <int> ; }", "label": 2, "id": 1836}
{"input": "int main ( ) { int a , b , c , d , t , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a ; d = b ; while ( <int> ) { if ( a == b ) { printf ( <str> , a ) ; break ; } else if ( a > b ) a = a - b ; else b = b - a ; } lcm = c * d / a ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 1837}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] = { <int> , <int> } ; int i , l , t , j , cases , ccnt ; scanf ( <str> , & cases ) ; for ( ccnt = <int> ; ccnt < cases ; ccnt ++ ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( t = <int> ; t <= i ; t ++ ) { scanf ( <str> , & a [ i ] [ t ] ) ; } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( t = <int> ; t <= i ; t ++ ) { a [ i ] [ t ] += ( a [ i + <int> ] [ t ] >= a [ i + <int> ] [ t + <int> ] ) ? a [ i + <int> ] [ t ] : a [ i + <int> ] [ t + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1838}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int flag = <int> ; int max = n - <int> ; int x = <int> ; int y = n / <int> ; for ( i = <int> ; i <= y ; i ++ ) { int count = <int> ; while ( ( a [ x ] == i + <int> ) && ( a [ max - x ] == i + <int> ) ) { x ++ ; count ++ ; if ( x > ( max / <int> ) ) break ; } if ( count > <int> ) { i = i + count - <int> ; y = y - count + <int> ; } if ( count == <int> ) { flag = <int> ; break ; } } if ( flag == <int> ) printf ( <str> ) ; else printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 1839}
{"input": "int main ( ) { int T , N [ <int> ] , i , j , a [ <int> ] , max , c [ <int> ] , k ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { c [ k ] = <int> ; scanf ( <str> , & N [ k ] ) ; for ( j = <int> ; j < N [ k ] ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( i = <int> ; i < N [ k ] - <int> ; i ++ ) { max = a [ i ] ; for ( j = i + <int> ; j < N [ k ] ; j ++ ) { if ( a [ j ] >= max ) { c [ k ] ++ ; max = a [ j ] ; } else if ( a [ j ] > max ) break ; } } } for ( k = <int> ; k < T ; k ++ ) printf ( <str> , c [ k ] ) ; return <int> ; }", "label": 3, "id": 1840}
{"input": "int main ( ) { int n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1841}
{"input": "int fmax ( a , b ) { if ( a > b ) { return a ; } else { return b ; } } int main ( ) { int T , N , i , j , a , max , prev , cur ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; int * array ; array = ( int * ) calloc ( N , sizeof ( int ) ) ; max = <int> ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a ) ; if ( i == <int> ) { array [ j ] = a ; } else { if ( j == <int> ) { prev = array [ j ] ; array [ j ] = a + array [ j ] ; } else { cur = array [ j ] ; array [ j ] = a + fmax ( prev , cur ) ; prev = cur ; } } if ( i == N - <int> ) { if ( array [ j ] > max ) { max = array [ j ] ; } } } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1842}
{"input": "long int gcd ( long int a , long int b ) ; long int lcm ( long int a , long int b ) ; int main ( ) { int t ; long int a , b ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; t -- ; } return <int> ; } long int gcd ( long int a , long int b ) { if ( b != <int> ) return gcd ( b , a % b ) ; else return a ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; }", "label": 0, "id": 1843}
{"input": "int maximum ( int p , int q ) { if ( p > q ) return p ; else return q ; } int main ( ) { int x , t , n , i , j ; int arr [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; x = <int> ; for ( i = <int> ; i <= n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , arr [ i ] + j ) ; arr [ i ] [ j ] = maximum ( arr [ i - <int> ] [ j ] , arr [ i - <int> ] [ j - <int> ] ) + arr [ i ] [ j ] ; x = maximum ( x , arr [ i ] [ j ] ) ; } } printf ( <str> , x ) ; } return <int> ; }", "label": 3, "id": 1844}
{"input": "long long int arr [ <int> ] [ <int> ] ; long long int m [ <int> ] [ <int> ] ; int findmax ( int a , int b ) { return a > b ? a : b ; } long long int maxsum ( int i , int j , int l ) { if ( m [ i ] [ j ] ) return m [ i ] [ j ] ; if ( i == l - <int> ) return arr [ i ] [ j ] ; else m [ i ] [ j ] = arr [ i ] [ j ] + findmax ( maxsum ( i + <int> , j , l ) , maxsum ( i + <int> , j + <int> , l ) ) ; return m [ i ] [ j ] ; } int main ( ) { long long int sum ; int t , n ; int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; m [ i ] [ j ] = <int> ; } } sum = maxsum ( <int> , <int> , n ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 1845}
{"input": "int gcd ( int a , int b ) { int i ; if ( a > b ) for ( i = b ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) return i ; } else if ( b > a ) for ( i = a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) return i ; } if ( a = b ) return a ; } int lcm ( int a , int b ) { int x , y ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } return x * y / a ; } int main ( ) { int t , x [ <int> ] , y [ <int> ] , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) scanf ( <str> , & x [ i ] , & y [ i ] ) ; for ( i = <int> ; i < t ; i ++ ) printf ( <str> , gcd ( x [ i ] , y [ i ] ) , lcm ( x [ i ] , y [ i ] ) ) ; }", "label": 2, "id": 1846}
{"input": "int gcd ( long , long ) ; int main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long int g1 , g2 , a , b ; scanf ( <str> , & g1 , & g2 ) ; a = ( g1 > g2 ) ? g1 : g2 ; b = ( g1 < g2 ) ? g1 : g2 ; long int hcf = gcd ( a , b ) ; long int lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } } int gcd ( long a , long b ) { if ( b == <int> ) return ( a ) ; else gcd ( b , a % b ) ; }", "label": 0, "id": 1847}
{"input": "int count ( long long int [ <int> ] , long long int ) ; int fact ( int ) ; int main ( ) { long long int a [ <int> ] ; long long int size ; int t , i ; long long c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) scanf ( <str> , & a [ i ] ) ; c = count ( a , size ) ; printf ( <str> , c ) ; } return <int> ; } int count ( long long int a [ <int> ] , long long int n ) { int i , count = <int> ; long long sum = <int> ; if ( n == <int> ) return <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i + <int> ] > a [ i ] ) { count ++ ; } else if ( count == <int> ) { sum = sum + <int> ; count = <int> ; } else { sum = sum + ( fact ( count ) / ( <int> * fact ( count - <int> ) ) ) + count ; count = <int> ; } } return sum ; } int fact ( int n ) { int i = <int> ; while ( n != <int> ) { i = i * n ; n -- ; } return i ; }", "label": 1, "id": 1848}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , a [ <int> ] [ <int> ] , sum ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } sum = a [ n - <int> ] [ <int> ] + a [ n - <int> ] [ <int> ] + a [ n - <int> ] [ <int> ] ; printf ( <str> , sum ) ; } }", "label": 3, "id": 1849}
{"input": "int main ( ) { int c , t , h , j ; scanf ( <str> , & t ) ; for ( c = <int> ; c < t ; c ++ ) { scanf ( <str> , & h , & j ) ; int n1 , n2 ; n1 = h ; n2 = j ; while ( h != j ) { if ( h > j ) h = h - j ; else j = j - h ; } printf ( <str> , h , ( n1 * n2 ) / h ) ; } return <int> ; }", "label": 1, "id": 1850}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int g = gcd ( a , b ) ; long long int l = a * b / g ; printf ( <str> , g , l ) ; } }", "label": 0, "id": 1851}
{"input": "int main ( ) { long i , n , sum = <int> , t ; long a [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { a [ i + <int> ] = a [ i ] ; } sum = sum + a [ i + <int> ] ; } printf ( <str> , sum ) ; sum = <int> ; t -- ; } return <int> ; }", "label": 1, "id": 1852}
{"input": "int mat [ <int> ] [ <int> ] , rows ; int lookup [ <int> ] [ <int> ] ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int sumtrian ( int i , int j ) { int t ; if ( i > rows ) return <int> ; if ( lookup [ i ] [ j ] != <int> ) return lookup [ i ] [ j ] ; t = mat [ i ] [ j ] + max ( sumtrian ( i + <int> , j ) , sumtrian ( i + <int> , j + <int> ) ) ; lookup [ i ] [ j ] = t ; return t ; } int main ( ) { int count , i , j , result ; scanf ( <str> , & count ) ; while ( count -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & mat [ i ] [ j ] ) ; } } for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { lookup [ i ] [ j ] = <int> ; } } result = sumtrian ( <int> , <int> ) ; printf ( <str> , result ) ; } return <int> ; }", "label": 0, "id": 1853}
{"input": "int main ( ) { int a [ <int> ] , i , j , k , T ; int n ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } k = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < k ) { k = a [ i ] ; } } k *= n - <int> ; printf ( <str> , k ) ; T -- ; } }", "label": 3, "id": 1854}
{"input": "int input ( ) { char a = g ( ) ; int n = <int> ; while ( a >= <int> && a <= <int> ) { n = n * <int> + a - <int> ; a = g ( ) ; } return n ; } int main ( ) { int t , row , i , j , mat [ ROW ] [ ROW ] ; t = input ( ) ; while ( t -- ) { row = input ( ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) mat [ i ] [ j ] = input ( ) ; } for ( i = row - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( mat [ i + <int> ] [ j ] > mat [ i + <int> ] [ j + <int> ] ) mat [ i ] [ j ] += mat [ i + <int> ] [ j ] ; else mat [ i ] [ j ] += mat [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , mat [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1855}
{"input": "int main ( ) { long int t , n , i , a [ <int> ] ; long long int r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; r = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( r > a [ i ] ) r = a [ i ] ; } r = r * ( n - <int> ) ; printf ( <str> , r ) ; } return <int> ; }", "label": 1, "id": 1856}
{"input": "int main ( void ) { long int t , a , b , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = ( a >= b ? b : a ) ; for ( ; gcd >= <int> ; gcd -- ) { if ( a % gcd == <int> && b % gcd == <int> ) break ; } printf ( <str> , gcd , a * ( b / gcd ) ) ; } return <int> ; }", "label": 2, "id": 1857}
{"input": "int check_sum ( int , int , int ) ; int arr [ <int> ] [ <int> ] ; int main ( void ) { int i , j ; int t , a = <int> ; int nr ; int sumation = <int> ; int sum_r8 = <int> ; int sum_lft = <int> ; int store [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & nr ) ; for ( i = <int> ; i < nr ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; sumation = <int> ; for ( i = <int> , j = <int> ; i < nr ; i ++ ) { sumation += arr [ i ] [ j ] ; sum_r8 = check_sum ( i + <int> , j + <int> , ( nr - i - <int> ) ) ; sum_lft = check_sum ( i + <int> , j , ( nr - i - <int> ) ) ; if ( ! ( ( sum_lft > sum_r8 ) || ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ) ) j ++ ; } printf ( <str> , sumation ) ; } return <int> ; } int check_sum ( int i , int j , int n ) { int sum = <int> ; while ( n -- ) { sum += arr [ i ] [ j ] ; i ++ ; } return sum ; }", "label": 1, "id": 1858}
{"input": "int <unk> ( ) { int input ; char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; input = <int> ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int b [ <int> ] [ <int> ] ; n = <unk> ( ) ; while ( n -- ) { t = <unk> ( ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { b [ i ] [ j ] = <unk> ( ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { b [ i ] [ j ] += ( ( b [ i + <int> ] [ j ] > b [ i + <int> ] [ j + <int> ] ) ? b [ i + <int> ] [ j ] : b [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , b [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1859}
{"input": "int comparetor ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int loop , max_loop = <int> , g ; scanf ( <str> , & loop ) ; for ( g = <int> ; g < loop ; g ++ ) { int sum1 [ <int> ] ; int sum2 [ <int> ] ; int lines , i , j ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } sum1 [ <int> ] = arr [ <int> ] [ <int> ] ; sum1 [ <int> ] = - <int> ; for ( i = <int> ; i < lines ; i ++ ) { int num ; if ( i == lines - <int> ) { qsort ( sum1 , <int> , sizeof ( int ) , comparetor ) ; printf ( <str> , sum1 [ <int> ] ) ; } else { int count = <int> , cum = <int> ; while ( sum1 [ cum ] != - <int> ) { if ( i >= <int> && cum > i ) { sum2 [ count ] = sum1 [ cum ] + arr [ i + <int> ] [ i + <int> ] ; count ++ ; } else { sum2 [ count ] = sum1 [ cum ] + arr [ i + <int> ] [ cum ] ; sum2 [ count + <int> ] = sum1 [ cum ] + arr [ i + <int> ] [ cum + <int> ] ; count = count + <int> ; } cum ++ ; } num = count ; } int l = <int> ; for ( l = <int> ; l < num ; l ++ ) sum1 [ l ] = sum2 [ l ] ; sum1 [ l ] = - <int> ; for ( l = <int> ; l < num ; l ++ ) sum2 [ l ] = <int> ; } } return <int> ; }", "label": 3, "id": 1860}
{"input": "int main ( ) { int i , t , n , min , j , a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( min > a [ j ] ) min = a [ j ] ; } printf ( <str> , ( min ) * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1861}
{"input": "int main ( ) { int t , n , i , j , max , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i <= n ; i ++ ) a [ i ] [ <int> ] = <int> ; for ( j = <int> ; j <= n ; j ++ ) a [ <int> ] [ j ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = i + <int> ; j <= n ; j ++ ) a [ i ] [ j ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] += ( a [ i - <int> ] [ j - <int> ] >= a [ i - <int> ] [ j ] ? a [ i - <int> ] [ j - <int> ] : a [ i - <int> ] [ j ] ) ; } } max = a [ n ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( a [ n ] [ j + <int> ] > a [ n ] [ j ] ) max = a [ n ] [ j + <int> ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 1862}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 1863}
{"input": "int gcd ( int a , int b ) { int g ; if ( a > b ) { if ( a % b == <int> ) g = b ; else g = gcd ( b , a % b ) ; } else { if ( b % a == <int> ) g = a ; else g = gcd ( a , b % a ) ; } return g ; } int least ( int a , int b ) { int l , g ; g = gcd ( a , b ) ; l = ( ( a / g ) * ( b / g ) ) * g ; return l ; } int main ( ) { int t , i , j , a , b ; scanf ( <str> , & t ) ; int hcf [ t ] ; int lcm [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; hcf [ i ] = gcd ( a , b ) ; lcm [ i ] = least ( a , b ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , hcf [ i ] , lcm [ i ] ) ; } return <int> ; }", "label": 1, "id": 1864}
{"input": "long int gcd ( long int a , long int b ) { if ( a % b == <int> ) return b ; else return ( gcd ( b , a % b ) ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , R ; scanf ( <str> , & a , & b ) ; R = gcd ( a , b ) ; printf ( <str> , R , ( a * b ) / R ) ; } }", "label": 0, "id": 1865}
{"input": "int main ( void ) { int t , a , b , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a ) ; printf ( <str> , x / a ) ; } return <int> ; }", "label": 1, "id": 1866}
{"input": "long min ( int a [ ] , int n ) { long i ; long min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; return min ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; int i ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; printf ( <str> , ( min ( a , n ) * ( n - <int> ) ) ) ; } }", "label": 0, "id": 1867}
{"input": "int main ( ) { int t , a , b , i ; long int gcd = <int> , lcm = <int> ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; for ( i = <int> ; i < a && i < b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } printf ( <str> , gcd ) ; lcm = ( a * b ) / gcd ; printf ( <str> , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 1868}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int n , rows ; scanf ( <str> , & n , & rows ) ; int i ; for ( i = <int> ; i < n ; i ++ ) { int t [ rows ] [ <int> ] ; int j , k ; for ( j = <int> ; j < rows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & t [ j ] [ k ] ) ; } } for ( j = rows - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { int c = max ( t [ j + <int> ] [ k ] , t [ j + <int> ] [ k + <int> ] ) ; t [ j ] [ k ] = t [ j ] [ k ] + c ; } } printf ( <str> , t [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1869}
{"input": "int main ( ) { int n , * p , x , l , * * m , row , col , sum = <int> , max = - <int> , temp ; scanf ( <str> , & n ) ; for ( x = <int> ; x <= n ; x ++ ) { scanf ( <str> , & l ) ; m = ( int * * ) malloc ( sizeof ( int ) * l ) ; for ( row = <int> ; row < l ; row ++ ) m [ row ] = ( int * ) malloc ( sizeof ( int ) * ( row + <int> ) ) ; for ( row = <int> ; row < l ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) scanf ( <str> , & m [ row ] [ col ] ) ; } max = - <int> ; for ( col = <int> ; col < l - <int> ; col ++ ) { sum = <int> ; for ( row = col ; row < l - <int> ; row ++ ) sum = sum + m [ row ] [ col ] ; temp = m [ row ] [ col ] > m [ row ] [ col + <int> ] ? m [ row ] [ col ] : m [ row ] [ col + <int> ] ; sum = sum + temp ; if ( sum > max ) max = sum ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 1870}
{"input": "void main ( ) { int t , a [ <int> ] , i , n , d = <int> , count = <int> , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } d = <int> ; count = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( n > <int> ) { d = d + count ; count = <int> ; for ( k = j ; k < n ; k ++ ) { if ( a [ k ] < a [ k + <int> ] ) count ++ ; else break ; } } else d = <int> ; } printf ( <str> , d ) ; } }", "label": 3, "id": 1871}
{"input": "void swap ( long int * x , long int * y ) { * x = * x + * y ; * y = * x - * y ; * x = * x - * y ; } long int gcd ( long int a , long int b ) { long int temp ; while ( b != <int> ) { temp = a ; a = b ; b = temp % b ; } return a ; } int main ( ) { int T ; long int A , B , temp ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; ++ i ) { scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; if ( A < B ) swap ( & A , & B ) ; temp = gcd ( A , B ) ; printf ( <str> , temp ) ; printf ( <str> , A * B / temp ) ; } return <int> ; }", "label": 0, "id": 1872}
{"input": "int main ( ) { char n ; scanf ( <str> , & n ) ; for ( ; ( n != <int> ) ; printf ( <str> , n ) , scanf ( <str> , & n ) ) ; return <int> ; }", "label": 3, "id": 1873}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { int n , num , next ; scanf ( <str> , & n ) ; scanf ( <str> , & num ) ; long long int s = n , r = <int> , p ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & next ) ; if ( next >= num ) { r ++ ; } else { p = ( r * ( r - <int> ) ) >> <int> ; s = s + p ; r = <int> ; } num = next ; } p = ( r * ( r - <int> ) ) >> <int> ; s = s + p ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 1874}
{"input": "int max ( int a , int b ) { return ( a < b ) ? b : a ; } int findMaxPath ( int * * array , int i , int j , int n , int * * visited ) { if ( i == n ) { return <int> ; } if ( visited [ i ] [ j ] ) { return visited [ i ] [ j ] ; } int t1 = findMaxPath ( array , i + <int> , j + <int> , n , visited ) ; int t2 = findMaxPath ( array , i + <int> , j , n , visited ) ; int t = array [ i ] [ j ] + max ( t1 , t2 ) ; visited [ i ] [ j ] = t ; return t ; } int main ( ) { int test , n , * * array ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; int * * visited ; array = ( int * * ) malloc ( sizeof ( int * ) * n ) ; int i , j , k = <int> ; for ( i = <int> ; i < n ; i ++ ) { array [ i ] = ( int * ) malloc ( sizeof ( int ) * k ) ; k ++ ; } k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } k ++ ; } visited = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = <int> ; i < n ; i ++ ) { visited [ i ] = ( int * ) malloc ( sizeof ( int ) * k ) ; k ++ ; } k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= k ; j ++ ) { visited [ i ] [ j ] = <int> ; } k ++ ; } int m = findMaxPath ( array , <int> , <int> , n , visited ) ; printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 1875}
{"input": "int main ( ) { long long int t , n , i , j , min = <int> , val ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { min = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & val ) ; if ( val < min ) min = val ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 1876}
{"input": "int main ( ) { int r , i , j , t ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = r - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1877}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int n , j , k , cnt = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) cnt ++ ; else { cnt = ( cnt * ( cnt + <int> ) ) / <int> ; break ; } } printf ( <str> , cnt + n ) ; } }", "label": 1, "id": 1878}
{"input": "int main ( ) { int t , lines , i , j , max ; int a [ <int> ] [ <int> ] ; a [ <int> ] [ <int> ] = <int> ; a [ <int> ] [ <int> ] = <int> ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & lines ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < lines ; ++ i ) { scanf ( <str> , & a [ i ] [ <int> ] ) ; a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] += MAX ( a [ i - <int> ] [ j - <int> ] , a [ i - <int> ] [ j ] ) ; } a [ i ] [ i + <int> ] = <int> ; } max = <int> ; for ( i = <int> ; i < lines ; ++ i ) { max = MAX ( max , a [ lines - <int> ] [ i ] ) ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1879}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1880}
{"input": "int a [ <int> ] [ <int> ] , n ; int main ( ) { char c [ <int> ] ; int i , j , t , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( j = <int> ; j < n + <int> ; j ++ ) a [ n ] [ j ] = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i + <int> ] [ j ] + a [ i ] [ j ] ; else a [ i ] [ j ] = a [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ; } } c [ k ] = a [ <int> ] [ <int> ] ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , c [ i ] ) ; return ( <int> ) ; }", "label": 1, "id": 1881}
{"input": "int gcd ( int a , int b ) { if ( a % b ) gcd ( b , a % b ) ; else return b ; } int main ( ) { int t ; int g , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 1882}
{"input": "int Max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int FindMax ( int n , int a [ ] [ n ] ) { int b [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) b [ i ] [ j ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) b [ n - <int> ] [ i ] = a [ n - <int> ] [ i ] ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { b [ i ] [ j ] = a [ i ] [ j ] + Max ( b [ i + <int> ] [ j ] , b [ i + <int> ] [ j + <int> ] ) ; } } return b [ <int> ] [ <int> ] ; } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> , FindMax ( n , a ) ) ; } return <int> ; }", "label": 0, "id": 1883}
{"input": "int main ( ) { int t , n , currentele , prevele , count , i ; scanf ( <str> , & t ) ; while ( t -- ) { long long answer = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & currentele ) ; if ( i == <int> ) count = <int> ; else if ( currentele >= prevele ) ++ count ; else count = <int> ; answer += count ; prevele = currentele ; } printf ( <str> , answer ) ; } return <int> ; }", "label": 0, "id": 1884}
{"input": "int main ( void ) { int j , t , n , i , a [ <int> ] [ <int> ] ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1885}
{"input": "int main ( ) { int t , i , j , A ; scanf ( <str> , & t ) ; int a [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( j = <int> ; j < t ; j ++ ) { if ( a [ j ] != <int> ) A = a [ j ] / <int> + <int> ; else A = <int> ; printf ( <str> , A ) ; } }", "label": 1, "id": 1886}
{"input": "int n ; void bub ( int a [ ] ) { int i , j ; for ( i = <int> ; i < n - <int> ; ++ i ) for ( j = <int> ; j < n - <int> - i ; ++ j ) if ( a [ j ] > a [ j + <int> ] ) a [ j ] = a [ j ] + a [ j + <int> ] - ( a [ j + <int> ] = a [ j ] ) ; } int main ( ) { int t , i ; long int m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a ; scanf ( <str> , & m ) ; for ( i = <int> ; i < n ; ++ i ) { scanf ( <str> , & a ) ; if ( a < m ) m = a ; } m = m * ( n - <int> ) ; printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 1887}
{"input": "int main ( ) { int t , n , s = <int> , f = <int> , x , temp , p ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { while ( t ) { scanf ( <str> , & n ) ; p = n ; if ( n >= <int> && n <= <int> ) { int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( int i = <int> ; i < n ; i ++ ) { if ( i < n && i + <int> < n ) { if ( ( a [ i ] >= <int> && a [ i ] <= <int> ) && ( a [ i + <int> ] >= <int> && a [ i + <int> ] <= <int> ) ) { if ( a [ i ] > a [ i + <int> ] ) { s += a [ i + <int> ] ; a [ i ] = a [ i + <int> ] ; } else if ( a [ i ] < a [ i + <int> ] ) { s += a [ i ] ; a [ i + <int> ] = a [ i ] ; } } else { f = <int> ; printf ( <str> , s ) ; break ; } } } if ( f != <int> ) { printf ( <str> , s ) ; } } else { scanf ( <str> , & x ) ; } s = <int> ; f = <int> ; t -- ; } } }", "label": 1, "id": 1888}
{"input": "int main ( ) { int i , j , k , n ; scanf ( <str> , & n ) ; while ( n -- ) { int s ; scanf ( <str> , & s ) ; int arr [ s ] ; int arr1 [ s ] ; long long total = <int> ; for ( i = <int> ; i < s ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( i > <int> ) { if ( arr [ i ] >= arr [ i - <int> ] ) { arr1 [ i - <int> ] = <int> ; } else { arr1 [ i - <int> ] = <int> ; } } } arr1 [ s - <int> ] = <int> ; for ( i = s - <int> ; i >= <int> ; i -- ) { if ( arr1 [ i ] == <int> && arr1 [ i + <int> ] > <int> ) { arr1 [ i ] = arr1 [ i ] + arr1 [ i + <int> ] ; } total = total + arr1 [ i ] ; } total = total + s ; printf ( <str> , total ) ; } }", "label": 0, "id": 1889}
{"input": "main ( ) { int i , j , k , t , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; if ( t > <int> ) { for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; if ( n > <int> ) { for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k < ( j + <int> ) ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( j = ( n - <int> ) ; j >= <int> ; j -- ) { for ( k = <int> ; k < ( j + <int> ) ; k ++ ) { if ( ( a [ j ] [ k ] + a [ j + <int> ] [ k ] ) > ( a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ) ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j + <int> ] [ k ] ; else if ( ( a [ j ] [ k ] + a [ j + <int> ] [ k ] ) < ( a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ) ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } } } }", "label": 1, "id": 1890}
{"input": "void compute ( int b [ <int> ] [ <int> ] , int n ) { int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( b [ i + <int> ] [ j ] > b [ i + <int> ] [ j + <int> ] ) { b [ i ] [ j ] += b [ i + <int> ] [ j ] ; } else b [ i ] [ j ] += b [ i + <int> ] [ j + <int> ] ; } printf ( <str> , b [ <int> ] [ <int> ] ) ; } int main ( ) { int n , i = <int> , j , n1 , input , b [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( i < n ) { scanf ( <str> , & n1 ) ; for ( i = <int> ; i < n1 ; i ++ ) for ( j = <int> ; j < n1 ; j ++ ) { b [ i ] [ j ] = <int> ; } for ( i = <int> ; i < n1 ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & input ) ; b [ i ] [ j ] = input ; } compute ( b , n1 - <int> ) ; } return <int> ; }", "label": 2, "id": 1891}
{"input": "int main ( int argc , char * argv [ ] ) { int * sums = malloc ( MAX_SIZE * sizeof ( int ) ) ; int * prev_sums = malloc ( MAX_SIZE * sizeof ( int ) ) ; int round , rounds ; int line , width ; int i , tmp , max ; scanf ( <str> , & rounds ) ; for ( round = <int> ; round < rounds ; ++ round ) { scanf ( <str> , & width ) ; memset ( prev_sums , <int> , MAX_SIZE * sizeof ( int ) ) ; for ( max = line = <int> ; line < width ; ++ line ) { for ( i = <int> ; i < ( line + <int> ) ; ++ i ) { scanf ( <str> , & tmp ) ; if ( i == <int> ) { sums [ i ] = prev_sums [ i ] + tmp ; } else { sums [ i ] = ( prev_sums [ i ] > prev_sums [ i - <int> ] ) ? ( prev_sums [ i ] + tmp ) : ( prev_sums [ i - <int> ] + tmp ) ; } if ( max < sums [ i ] ) max = sums [ i ] ; } for ( i = <int> ; i < ( line + <int> ) ; ++ i ) prev_sums [ i ] = sums [ i ] ; } printf ( <str> , max ) ; } free ( prev_sums ) ; free ( sums ) ; return <int> ; }", "label": 0, "id": 1892}
{"input": "int main ( ) { int n , r , i , j ; int large ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; int a [ r ] [ r ] ; for ( i = <int> ; i < r ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < r ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { if ( j == <int> ) { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } else if ( j == i ) { a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } else if ( a [ i - <int> ] [ j ] >= a [ i - <int> ] [ j - <int> ] ) { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } } large = a [ r - <int> ] [ <int> ] ; for ( i = <int> ; i < ( r - <int> ) ; ++ i ) if ( a [ r - <int> ] [ i ] < a [ r - <int> ] [ i + <int> ] ) large = a [ r - <int> ] [ i + <int> ] ; printf ( <str> , large ) ; } return <int> ; }", "label": 1, "id": 1893}
{"input": "int main ( ) { int T , num1 [ <int> ] [ <int> ] , gcd , lcm , rem , numer , denom , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) scanf ( <str> , & num1 [ i ] [ <int> ] , & num1 [ i ] [ <int> ] ) ; for ( i = <int> ; i < T ; i ++ ) { if ( num1 [ i ] [ <int> ] > num1 [ i ] [ <int> ] ) { numer = num1 [ i ] [ <int> ] ; denom = num1 [ i ] [ <int> ] ; } else { numer = num1 [ i ] [ <int> ] ; denom = num1 [ i ] [ <int> ] ; } rem = num1 [ i ] [ <int> ] % num1 [ i ] [ <int> ] ; while ( rem != <int> ) { numer = denom ; denom = rem ; rem = numer % denom ; } gcd = denom ; lcm = num1 [ i ] [ <int> ] * num1 [ i ] [ <int> ] / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 1894}
{"input": "int gcd ( ) ; int main ( ) { int t , a , b , c , H [ <int> ] , L [ <int> ] ; scanf ( <str> , & t ) ; for ( a = <int> ; a < t ; a ++ ) { scanf ( <str> , & b , & c ) ; H [ a ] = gcd ( b , c ) ; L [ a ] = ( b * c ) / H [ a ] ; } for ( a = <int> ; a < t ; a ++ ) { printf ( <str> , H [ a ] , L [ a ] ) ; } return <int> ; } int gcd ( int b , int c ) { if ( b == <int> ) { return c ; } else { while ( c != <int> ) { if ( b > c ) { b = b - c ; } else { c = c - b ; } } return b ; } }", "label": 1, "id": 1895}
{"input": "int n ; void input ( int a [ <int> ] [ <int> ] ) { int i , j , p ; scanf ( <str> , & n ) ; if ( n < <int> ) { exit ( <int> ) ; } else { for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & p ) ; if ( p > <int> && p < <int> ) { a [ i ] [ j ] = p ; } else { exit ( <int> ) ; } } } } } int sumtriangle ( int a [ <int> ] [ <int> ] ) { int i , j , max , Result_max = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> ) { max = a [ i ] [ j ] ; Result_max = max ; } else if ( i != <int> && j == <int> ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; Result_max = a [ i ] [ j ] ; } else if ( i != <int> && j > <int> && j < i ) { max = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; if ( max < ( a [ i - <int> ] [ j ] + a [ i ] [ j ] ) ) { max = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } a [ i ] [ j ] = max ; if ( max > Result_max ) { Result_max = max ; } } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; if ( ( max = a [ i ] [ j ] ) > Result_max ) { Result_max = max ; } } } } return Result_max ; } int main ( void ) { int a [ <int> ] [ <int> ] , times , result [ <int> ] , i = <int> , j ; scanf ( <str> , & times ) ; while ( times -- ) { input ( a ) ; result [ i ++ ] = sumtriangle ( a ) ; } for ( j = <int> ; j < i ; j ++ ) { printf ( <str> , result [ j ] ) ; } return <int> ; }", "label": 1, "id": 1896}
{"input": "int main ( void ) { long long int a , b , gcd = <int> , lcm = <int> ; int i , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm = a > b ? a : b ; while ( <int> ) { if ( lcm % a == <int> && lcm % b == <int> ) { break ; } lcm ++ ; } for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 1897}
{"input": "int main ( ) { int t , l , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; int arr [ l - <int> ] [ l - <int> ] ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 1898}
{"input": "int main ( void ) { int t , i ; long long int n , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] , b [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) b [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i - <int> ] ) b [ i ] = b [ i ] + b [ i - <int> ] ; else if ( a [ i ] < a [ i - <int> ] ) b [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) sum = sum + b [ i ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 1899}
{"input": "int main ( ) { int tst , i , j , k , row , max ; scanf ( <str> , & tst ) ; int ans [ tst ] ; for ( i = <int> ; i < tst ; i ++ ) { max = <int> ; int sum = <int> ; scanf ( <str> , & row ) ; int ind [ row ] ; int tri [ row ] [ row ] ; for ( j = <int> ; j <= row ; j ++ ) { ind [ j - <int> ] = <int> ; for ( k = <int> ; k < j ; k ++ ) { tri [ j - <int> ] [ k ] = <int> ; scanf ( <str> , & tri [ j - <int> ] [ k ] ) ; } } while ( ind [ <int> ] < row ) { for ( k = <int> ; k < row ; k ++ ) { int temp = ind [ row - k - <int> ] ; sum += tri [ k ] [ temp ] ; } if ( sum >= max ) { max = sum ; } sum = <int> ; if ( ind [ <int> ] == row - <int> ) { break ; } for ( k = <int> ; k < row - <int> ; k ++ ) { if ( ( ind [ k ] == ind [ k + <int> ] ) && ind [ k + <int> ] ) { ind [ k ] ++ ; break ; } if ( ! ind [ k ] && ! ind [ k + <int> ] ) { for ( int p = <int> ; p < k + <int> ; p ++ ) { ind [ p ] = <int> ; } break ; } } } ans [ i ] = max ; } for ( i = <int> ; i < tst ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return <int> ; }", "label": 2, "id": 1900}
{"input": "int main ( void ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int m , o , gcd , i , lcm ; scanf ( <str> , & m , & o ) ; for ( i = <int> ; i <= m && i <= o ; i ++ ) { if ( m % i == <int> && o % i == <int> ) { gcd = i ; } } lcm = ( m * o ) / ( gcd ) ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 1901}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int t , lines , j , k , max , c = <int> ; scanf ( <str> , & t ) ; while ( c < t ) { scanf ( <str> , & lines ) ; for ( k = <int> ; k < lines ; k ++ ) for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & arr [ k ] [ j ] ) ; } for ( k = <int> ; k < lines ; k ++ ) for ( j = <int> ; j <= k ; j ++ ) { if ( j != <int> ) arr [ k ] [ j ] += ( arr [ k - <int> ] [ j - <int> ] > arr [ k - <int> ] [ j ] ) ? arr [ k - <int> ] [ j - <int> ] : arr [ k - <int> ] [ j ] ; else arr [ k ] [ j ] += arr [ k - <int> ] [ j ] ; } max = arr [ lines - <int> ] [ <int> ] ; for ( j = <int> ; j < lines ; j ++ ) if ( max < ( arr [ lines - <int> ] [ j + <int> ] ) ) max = arr [ lines - <int> ] [ j + <int> ] ; printf ( <str> , max ) ; c ++ ; } return <int> ; }", "label": 1, "id": 1902}
{"input": "int main ( ) { int n , num ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & num ) ; if ( num < <int> ) printf ( <str> ) ; else printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 1903}
{"input": "int main ( ) { int i , j , T , N , curr , c , d ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & N ) ; int a [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = N - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { curr = a [ i ] [ j ] ; c = a [ i + <int> ] [ j ] + curr ; d = a [ i + <int> ] [ j + <int> ] + curr ; curr = c >= d ? c : d ; a [ i ] [ j ] = curr ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 1904}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 1905}
{"input": "int gcd ( int A , int B ) { if ( B % A == <int> ) { return A ; } else { return gcd ( B % A , A ) ; } } long long lcm ( int A , int B ) { long long L ; L = ( long long ) A * ( long long ) B / gcd ( A , B ) ; return L ; } int main ( ) { int t , a , b , g ; long long l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { g = gcd ( a , b ) ; } else { g = gcd ( b , a ) ; } l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 1906}
{"input": "int main ( void ) { int i , n , a , b , gcd , lcd , j ; scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) gcd = i ; } lcd = ( a * b ) / gcd ; printf ( <str> , gcd , lcd ) ; } return <int> ; }", "label": 1, "id": 1907}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , x , min = INT_MAX ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; if ( x < min ) min = x ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 1908}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int g , l ; if ( a > b ) { int D , d , temp ; D = a ; d = b ; while ( D % d != <int> ) { temp = d ; d = D % d ; D = temp ; } g = d ; } else { int D , d , temp ; D = b ; d = a ; while ( D % d != <int> ) { d = temp ; d = D % d ; D = temp ; } g = d ; } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 3, "id": 1909}
{"input": "int main ( ) { int t , i , j , n , a [ <int> ] [ <int> ] , sol ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; int ans [ <int> ] [ <int> ] = { <int> } ; ans [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; ans [ <int> ] [ <int> ] = ans [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ; ans [ <int> ] [ <int> ] = ans [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { ans [ i ] [ <int> ] = ans [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; if ( ans [ i - <int> ] [ j - <int> ] > ans [ i - <int> ] [ j ] ) ans [ i ] [ j ] = a [ i ] [ j ] + ans [ i - <int> ] [ j - <int> ] ; else ans [ i ] [ j ] = a [ i ] [ j ] + ans [ i - <int> ] [ j ] ; } } sol = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( sol <= ans [ n - <int> ] [ i ] ) sol = ans [ n - <int> ] [ i ] ; printf ( <str> , sol ) ; } return <int> ; }", "label": 0, "id": 1910}
{"input": "int readNum ( ) ; int main ( ) { int T ; T = readNum ( ) ; while ( T -- > <int> ) { int N = readNum ( ) ; int i = N ; int min ; min = readNum ( ) ; while ( -- i > <int> ) { int new = readNum ( ) ; if ( new < min ) min = new ; } int answer = min * ( N - <int> ) ; printf ( <str> , answer ) ; } return <int> ; } int readNum ( ) { char c ; int num = <int> ; c = getchar ( ) ; while ( c != <char> && c != <char> ) { num = num * <int> + ( c - <char> ) ; c = getchar ( ) ; } return num ; }", "label": 2, "id": 1911}
{"input": "int main ( ) { int T , N , j , i ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; if ( N >= <int> && N <= <int> ) { int a [ N ] , sum = N , k ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < N - <int> ; i ++ ) { for ( k = i + <int> ; k < N ; k ++ ) { if ( a [ k ] > a [ k - <int> ] ) sum = sum + <int> ; else break ; } } printf ( <str> , sum ) ; } } } }", "label": 0, "id": 1912}
{"input": "int main ( ) { int t , b , i , s , c = <int> ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & b ) ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < b - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) s = a [ i ] ; else s = a [ i + <int> ] ; c = c + s ; } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 1913}
{"input": "int main ( ) { int t , i , n , q , j , in , a [ <int> ] , k , sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { q = <int> ; for ( j = <int> ; j < n - i + <int> ; j ++ ) { if ( q > a [ j ] ) { q = a [ j ] ; in = j ; } } if ( in == <int> ) { for ( k = in + <int> ; k < n - i ; k ++ ) a [ k ] = a [ k + <int> ] ; sum += q ; } else { if ( a [ in + <int> ] < a [ in - <int> ] ) { for ( k = in - <int> ; k < n - i ; k ++ ) a [ k ] = a [ k + <int> ] ; sum += q ; } else { for ( k = in + <int> ; k < n - i ; k ++ ) a [ k ] = a [ k + <int> ] ; sum += q ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 1914}
{"input": "int main ( ) { int n , x , y , no ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & no ) ; int * * mat1 = ( int * * ) malloc ( no * sizeof ( int * ) ) ; int * * <unk> = ( int * * ) malloc ( no * sizeof ( int * ) ) ; for ( x = <int> ; x < no ; x ++ ) mat1 [ x ] = <unk> [ x ] = ( int * ) malloc ( no * sizeof ( int ) ) ; for ( x = <int> ; x < no ; x ++ ) for ( y = <int> ; y <= x ; y ++ ) scanf ( <str> , & mat1 [ x ] [ y ] ) ; for ( x = <int> ; x < no ; x ++ ) <unk> [ no - <int> ] [ x ] = mat1 [ no - <int> ] [ x ] ; for ( x = no - <int> ; x >= <int> ; x -- ) { for ( y = <int> ; y <= x ; y ++ ) { <unk> [ x ] [ y ] = mat1 [ x ] [ y ] + ( <unk> [ x + <int> ] [ y ] > <unk> [ x + <int> ] [ y + <int> ] ? <unk> [ x + <int> ] [ y ] : <unk> [ x + <int> ] [ y + <int> ] ) ; } } printf ( <str> , <unk> [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1915}
{"input": "int readint ( ) { int c = gc ( ) , n = <int> ; while ( c < <char> ) c = gc ( ) ; while ( c >= <char> && c <= <char> ) { n = ( n << <int> ) + ( n << <int> ) + ( c - <char> ) ; c = gc ( ) ; } return n ; } void print ( int n ) { int N = n , rev , count = <int> ; rev = N ; if ( N == <int> ) { pc ( <char> ) ; return ; } while ( ( rev % <int> ) == <int> ) { count ++ ; rev /= <int> ; } rev = <int> ; while ( N != <int> ) { rev = ( rev << <int> ) + ( rev << <int> ) + N % <int> ; N /= <int> ; } while ( rev != <int> ) { pc ( rev % <int> + <char> ) ; rev /= <int> ; } while ( count -- ) pc ( <char> ) ; } int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int A , B , T , Gcd ; T = readint ( ) ; while ( T -- ) { A = readint ( ) ; B = readint ( ) ; Gcd = gcd ( A , B ) ; print ( Gcd ) ; pc ( <char> ) ; print ( ( A * B ) / Gcd ) ; pc ( <char> ) ; } return <int> ; }", "label": 1, "id": 1916}
{"input": "long GCD ( int A , int B ) { long reminder ; while ( B ) { reminder = A % B ; A = B ; B = reminder ; } return A ; } long LCM ( int A , int B ) { return ( A * B ) / GCD ( A , B ) ; } int main ( void ) { int T , A , B ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; printf ( <str> , GCD ( A , B ) , LCM ( A , B ) ) ; } return <int> ; }", "label": 1, "id": 1917}
{"input": "long long int gcd ( long long int a , long long int b ) { while ( a != b ) { if ( a > b ) a = a - b ; if ( a < b ) b = b - a ; } printf ( <str> , a ) ; printf ( <str> ) ; return a ; } int main ( ) { int t ; long long int num1 , num2 , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & num1 , & num2 ) ; temp = ( num1 * num2 ) / gcd ( num1 , num2 ) ; printf ( <str> , temp ) ; } return <int> ; }", "label": 0, "id": 1918}
{"input": "int gcd ( int a , int b ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { while ( t -- ) { long long int a , b , g , l ; scanf ( <str> , & a , & b ) ; if ( a >= <int> && b >= <int> && a <= <int> && b <= <int> ) { if ( a > b ) { g = gcd ( a , b ) ; } else { g = gcd ( b , a ) ; } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } } } return <int> ; } int gcd ( int a , int b ) { long long int rem = a % b ; a = b ; b = rem ; if ( b == <int> ) { return a ; } else { gcd ( a , b ) ; } }", "label": 0, "id": 1919}
{"input": "int main ( int argc , const char * argv [ ] ) { int maxNumberOfTestCases = <int> , maxnumberOfLines = <int> , numberOfColumns = <int> , k = <int> , numberOfRows = <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & maxNumberOfTestCases ) ; for ( k = <int> ; k < maxNumberOfTestCases ; k ++ ) { scanf ( <str> , & maxnumberOfLines ) ; for ( numberOfRows = <int> ; numberOfRows < maxnumberOfLines ; numberOfRows ++ ) { for ( numberOfColumns = <int> ; numberOfColumns <= numberOfRows ; numberOfColumns ++ ) { scanf ( <str> , & a [ numberOfRows ] [ numberOfColumns ] ) ; } } while ( numberOfRows -- > <int> ) { for ( numberOfColumns = <int> ; numberOfColumns < numberOfRows ; numberOfColumns ++ ) { a [ numberOfRows - <int> ] [ numberOfColumns ] = a [ numberOfRows - <int> ] [ numberOfColumns ] + a [ numberOfRows ] [ numberOfColumns ] > a [ numberOfRows - <int> ] [ numberOfColumns ] + a [ numberOfRows ] [ numberOfColumns + <int> ] ? a [ numberOfRows - <int> ] [ numberOfColumns ] + a [ numberOfRows ] [ numberOfColumns ] : a [ numberOfRows - <int> ] [ numberOfColumns ] + a [ numberOfRows ] [ numberOfColumns + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1920}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long sum = <int> ; long long n , i , test [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; long long arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i - <int> ] < arr [ i ] ) { test [ i ] = test [ i - <int> ] + <int> ; } else { test [ i ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { sum = sum + test [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 1921}
{"input": "int main ( ) { int t , i , j , n ; int a [ <int> ] ; long result ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { result = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) { result += a [ j + <int> ] ; } else { result += a [ j ] ; } } printf ( <str> , result ) ; } return <int> ; }", "label": 1, "id": 1922}
{"input": "int a [ <int> ] ; int b [ <int> ] ; int main ( ) { int n , r , i , j , max ; scanf ( <str> , & n ) ; while ( n -- ) { for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = <int> ; b [ i ] = <int> ; } scanf ( <str> , & r ) ; for ( i = <int> ; i <= r ; i ++ ) { if ( i % <int> ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & b [ j ] ) ; if ( j ) b [ j ] += ( ( a [ j ] > a [ j - <int> ] ) ? a [ j ] : a [ j - <int> ] ) ; else b [ j ] += a [ j ] ; } } else for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j ) a [ j ] += ( ( b [ j ] > b [ j - <int> ] ) ? b [ j ] : b [ j - <int> ] ) ; else a [ j ] += b [ j ] ; } } if ( ! ( r % <int> ) ) { max = a [ <int> ] ; while ( ( r -- ) - <int> ) { if ( a [ r - <int> ] > max ) max = a [ r - <int> ] ; } } else { max = b [ <int> ] ; while ( ( r -- ) - <int> ) { if ( b [ r - <int> ] > max ) max = b [ r - <int> ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1923}
{"input": "int pop1 ( ) ; int pop2 ( ) ; int pop3 ( ) ; void push ( int , int , int ) ; int stack1 [ MAX ] ; int stack2 [ MAX ] , stack3 [ MAX ] ; int top1 = - <int> , top2 = - <int> , top3 = - <int> ; int main ( ) { int t , r , i , j , m , n , s , a [ <int> ] [ <int> ] , x = <int> , sum [ <int> ] , max ; scanf ( <str> , & t ) ; while ( t -- ) { x = <int> ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> ) ; } push ( <int> , <int> , <int> ) ; while ( top1 != - <int> && top2 != - <int> && top3 != - <int> ) { m = pop2 ( ) ; n = pop3 ( ) ; s = pop1 ( ) ; s = s + a [ m ] [ n ] ; for ( i = m ; i < r - <int> ; i ++ ) { push ( s , m + <int> , n + <int> ) ; s = s + a [ m + <int> ] [ n ] ; m = m + <int> ; } sum [ x ++ ] = s ; } max = sum [ <int> ] ; for ( i = <int> ; i < x ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( <str> , max ) ; } return <int> ; } void push ( int sum , int k , int l ) { if ( top1 == MAX - <int> ) printf ( <str> ) ; else { top1 ++ ; stack1 [ top1 ] = sum ; } if ( top2 == MAX - <int> ) printf ( <str> ) ; else { top2 ++ ; stack2 [ top2 ] = k ; } if ( top3 == MAX - <int> ) printf ( <str> ) ; else { top3 ++ ; stack3 [ top3 ] = l ; } } int pop1 ( ) { if ( top1 == - <int> ) printf ( <str> ) ; else { return ( stack1 [ top1 -- ] ) ; } } int pop2 ( ) { if ( top2 == - <int> ) printf ( <str> ) ; else { return ( stack2 [ top2 -- ] ) ; } } int pop3 ( ) { if ( top3 == - <int> ) printf ( <str> ) ; else { return ( stack3 [ top3 -- ] ) ; } }", "label": 3, "id": 1924}
{"input": "int main ( ) { int n , i , j , k , * trn , flag = <int> , * * * trdata , sum ; scanf ( <str> , & n ) ; trn = ( int * ) malloc ( n * sizeof ( int ) ) ; trdata = ( int * * * ) malloc ( n * sizeof ( int * * ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & trn [ i ] ) ; trdata [ i ] = ( int * * ) malloc ( trn [ i ] * sizeof ( int * ) ) ; for ( j = <int> ; j < trn [ i ] ; j ++ ) { flag = <int> ; for ( k = <int> ; k <= j ; k ++ ) { if ( flag ) { trdata [ i ] [ j ] = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; flag = <int> ; } scanf ( <str> , & trdata [ i ] [ j ] [ k ] ) ; } } } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , trn [ i ] ) ; for ( j = <int> ; j < trn [ i ] ; j ++ ) { printf ( <str> ) ; for ( k = <int> ; k <= j ; k ++ ) { printf ( <str> , trdata [ i ] [ j ] [ k ] ) ; } } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < trn [ i ] ; j += <int> ) { for ( k = <int> ; k <= j ; k += <int> ) { if ( k == <int> ) { trdata [ i ] [ j ] [ <int> ] += trdata [ i ] [ j - <int> ] [ <int> ] ; } else if ( k == j ) { trdata [ i ] [ j ] [ k ] += trdata [ i ] [ j - <int> ] [ k - <int> ] ; } else { trdata [ i ] [ j ] [ k ] += ( ( trdata [ i ] [ j - <int> ] [ k ] > trdata [ i ] [ j - <int> ] [ k - <int> ] ) ? trdata [ i ] [ j - <int> ] [ k ] : trdata [ i ] [ j - <int> ] [ k - <int> ] ) ; } } } sum = trdata [ i ] [ trn [ i ] - <int> ] [ <int> ] ; for ( j = <int> ; j < trn [ i ] ; j += <int> ) { if ( sum < trdata [ i ] [ trn [ i ] - <int> ] [ j ] ) { sum = trdata [ i ] [ trn [ i ] - <int> ] [ j ] ; } } printf ( <str> , sum ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , trn [ i ] ) ; for ( j = <int> ; j < trn [ i ] ; j ++ ) { printf ( <str> ) ; for ( k = <int> ; k <= j ; k ++ ) { printf ( <str> , trdata [ i ] [ j ] [ k ] ) ; } } } return <int> ; }", "label": 2, "id": 1925}
{"input": "int main ( ) { int t , n , i , a , b , cost ; long int c ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & b ) ; a = a < b ? a : b ; } c = a * ( n - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 1926}
{"input": "int main ( ) { int t , r , i , sum = <int> , l , m , s = <int> , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; s = r * ( r + <int> ) / <int> ; int ar [ s ] ; max = ar [ <int> ] + ar [ <int> ] + ar [ <int> ] + ar [ <int> ] ; l = <int> ; while ( l <= ( s - <int> ) ) { for ( i = l ; i < l + <int> ; i ++ ) { sum = sum + ar [ i ] ; } if ( sum > max ) max = sum ; l ++ ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1927}
{"input": "main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( ! j ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ? a [ i - <int> ] [ j - <int> ] : a [ i - <int> ] [ j ] ) ; } n -- ; max = a [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) if ( max < a [ n ] [ i ] ) max = a [ n ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 1928}
{"input": "int n , i , j ; int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int tri [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tri [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = n - <int> ; j >= <int> ; j -- ) { tri [ i ] [ j ] += tri [ i + <int> ] [ j ] > tri [ i + <int> ] [ j + <int> ] ? tri [ i + <int> ] [ j ] : tri [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , tri [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1929}
{"input": "int main ( ) { int min , a [ <int> ] , i , j , n , temp , t , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n - <int> - i ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) { temp = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = temp ; } } } min = a [ <int> ] * ( n - <int> ) ; printf ( <str> , min ) ; } }", "label": 3, "id": 1930}
{"input": "int gcd ( long int a , long int b ) { int rem = <int> ; rem = a % b ; if ( rem == <int> ) return b ; else return gcd ( b , rem ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , l , lcm ; scanf ( <str> , & a , & b ) ; l = gcd ( a , b ) ; lcm = ( a * b ) / l ; printf ( <str> , l , lcm ) ; } return <int> ; }", "label": 1, "id": 1931}
{"input": "int main ( ) { int t , i , j , na1 , na2 , a1 [ <int> ] , a2 [ <int> ] , cost1 = <int> , cost2 = <int> ; scanf ( <str> , & t ) ; scanf ( <str> , & na1 ) ; for ( i = <int> ; i < na1 ; i ++ ) { scanf ( <str> , & a1 [ i ] ) ; } for ( i = <int> ; i < na1 - <int> ; i ++ ) { if ( a1 [ i ] > a1 [ i + <int> ] ) cost1 = cost1 + a1 [ i + <int> ] ; else cost1 = cost1 + a1 [ i ] ; } scanf ( <str> , & na2 ) ; for ( j = <int> ; j < na2 ; j ++ ) { scanf ( <str> , & a2 [ j ] ) ; } for ( j = <int> ; j < na2 - <int> ; j ++ ) { if ( a2 [ j ] > a2 [ j + <int> ] ) cost2 = cost2 + a2 [ j + <int> ] ; else cost2 = cost2 + a2 [ j ] ; } printf ( <str> , cost1 ) ; printf ( <str> , cost2 ) ; return <int> ; }", "label": 3, "id": 1932}
{"input": "int findmax ( int X [ ] , int level , int last ) ; int main ( ) { int T , N , A [ MAX ] , i , j , total ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; total = ( N * ( N + <int> ) ) / <int> ; for ( j = <int> ; j < total ; j ++ ) { scanf ( <str> , & A [ j ] ) ; } printf ( <str> , findmax ( A , N - <int> , total - <int> ) ) ; } return <int> ; } int findmax ( int X [ ] , int level , int last ) { int j , temp ; if ( level == <int> ) return X [ <int> ] ; else { temp = ( level * ( level + <int> ) ) / <int> ; for ( j = last ; j >= ( temp + <int> ) ; j -- ) { if ( ( X [ j - level - <int> ] + X [ j ] ) >= ( X [ j - level - <int> ] + X [ j - <int> ] ) ) X [ j - level - <int> ] = ( X [ j - level - <int> ] + X [ j ] ) ; else X [ j - level - <int> ] = ( X [ j - level - <int> ] + X [ j - <int> ] ) ; } findmax ( X , level - <int> , temp - <int> ) ; } }", "label": 3, "id": 1933}
{"input": "int main ( ) { long num1 , num2 , total , tmp , GCD , LCM ; scanf ( <str> , & total ) ; while ( total -- ) { scanf ( <str> , & num1 , & num2 ) ; LCM = num1 * num2 * <fp> ; while ( num2 != <int> ) { tmp = num1 % num2 ; num1 = num2 ; num2 = tmp ; } GCD = num1 ; LCM /= GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 0, "id": 1934}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } int sum = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { int max = a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) max = a [ i ] [ j ] ; else if ( a [ i ] [ j + <int> ] > a [ i ] [ j ] ) max = a [ i ] [ j + <int> ] ; } sum += max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 1935}
{"input": "long long int maxx ( long long int a , long long int b ) { long long int x ; x = a > b ? a : b ; return x ; } int main ( ) { long long int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { a [ i - <int> ] [ j ] = maxx ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) + a [ i - <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 1936}
{"input": "int main ( ) { long long i , k , x , n , sum , min = <int> , a [ <int> ] ; int t ; scanf ( <str> , & t ) ; for ( x = <int> ; x <= t ; x ++ ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return ; }", "label": 3, "id": 1937}
{"input": "int main ( ) { int count ; int i , N ; int min ; int a ; long long cost ; scanf ( <str> , & count ) ; while ( count -- ) { scanf ( <str> , & N ) ; min = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) { min = a ; } } if ( N == <int> ) { cost = ( long ) min ; } else cost = ( long long ) min * ( long long ) ( N - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 1938}
{"input": "int main ( ) { int t , n , i , j , a [ n ] [ n ] , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { max = ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = a [ i ] [ j ] + max ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 1939}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int A [ <int> ] , a , ans , i ; scanf ( <str> , & a ) ; for ( i = <int> ; i <= a ; i ++ ) { scanf ( <str> , & A [ i ] ) ; if ( ans > A [ i ] ) ans = A [ i ] ; } printf ( <str> , ans * ( a - <int> ) ) ; } return <int> ; }", "label": 1, "id": 1940}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( <str> ) ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , num1 , num2 , gcd ) ; printf ( <str> , num1 , num2 , lcm ) ; }", "label": 1, "id": 1941}
{"input": "long int GCD ( long int a , long int b ) { long int divisor , D , aux ; divisor = a > b ? b : a ; D = a > b ? a : b ; while ( <int> ) { if ( ( aux = D % divisor ) == <int> ) { return divisor ; } else { D = divisor ; divisor = aux ; } } } int main ( ) { long int x , y , i , j , lcm ; int T ; scanf ( <str> , & T ) ; scanf ( <str> , & x , & y ) ; for ( i = <int> ; i < T ; i ++ ) { j = GCD ( x , y ) ; lcm = x * y / j ; printf ( <str> , j , lcm ) ; } return <int> ; }", "label": 1, "id": 1942}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , sum = <int> ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] ) { sum += arr [ i ] ; arr [ i + <int> ] = arr [ i ] ; } else sum += arr [ i + <int> ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 1943}
{"input": "int main ( ) { int i , j , n , t ; scanf ( <str> , & t ) ; int a [ <int> ] [ <int> ] ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { int ab = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; int bb = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = ( ab > bb ) ? ab : bb ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1944}
{"input": "int main ( ) { int t , a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & m ) ; a = n ; b = m ; while ( b ) { a = a % b ; a ^= b ^= a ^= b ; } printf ( <str> , a , ( n * m ) / a ) ; } return <int> ; }", "label": 1, "id": 1945}
{"input": "int lcm ( int a , int b ) ; int main ( ) { int t , a , b , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , a * b / lcm ( a , b ) , lcm ( a , b ) ) ; } } int lcm ( int a , int b ) { int lcm ; lcm = ( a > b ) ? a : b ; while ( <int> ) { if ( lcm % a == <int> && lcm % b == <int> ) { return lcm ; } lcm ++ ; } }", "label": 2, "id": 1946}
{"input": "int main ( ) { int arr [ <int> ] , n , i , test , sum = <int> ; scanf ( <str> , & test ) ; while ( test != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] ) sum = sum + arr [ i ] ; else sum = sum + arr [ i + <int> ] ; } printf ( <str> , sum ) ; test -- ; sum = <int> ; } return <int> ; }", "label": 1, "id": 1947}
{"input": "long long int hcf ( long long int n1 , long long int n2 ) { while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } return n1 ; } long long int lcm ( long long int a , long long int b ) { return ( a * b ) / hcf ( a , b ) ; } main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , hcf ( a , b ) , lcm ( a , b ) ) ; } }", "label": 0, "id": 1948}
{"input": "int main ( void ) { int a , b , c , t ; int gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; c = a * b ; while ( b != <int> ) { t = a % b ; a = b ; b = t ; } gcd = a ; lcm = c / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 1949}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( void ) { int hcf , lcm ; int T ; int A , B ; scanf ( <str> , & T ) ; while ( T -- > <int> ) { scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; hcf = gcd ( A , B ) ; printf ( <str> , hcf , A * B / hcf ) ; } return <int> ; }", "label": 1, "id": 1950}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int dp ( int a [ <int> ] [ <int> ] , int cp [ <int> ] [ <int> ] , int n , int i , int j ) { if ( i >= n ) return a [ i ] [ j ] ; else if ( cp [ i ] [ j ] == - <int> ) { cp [ i ] [ j ] = ( a [ i ] [ j ] + max ( dp ( a , cp , n , i + <int> , j + <int> ) , dp ( a , cp , n , i + <int> , j ) ) ) ; return cp [ i ] [ j ] ; } else return cp [ i ] [ j ] ; } int main ( ) { int cp [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int n , t ; int i ; int j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) cp [ i ] [ j ] = - <int> ; printf ( <str> , dp ( a , cp , n - <int> , <int> , <int> ) ) ; } return <int> ; }", "label": 1, "id": 1951}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , r , b , x , y , n , d ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { r = b ; b = a % b ; a = r ; } n = a ; d = ( x * y ) / n ; printf ( <str> , n , d ) ; } return <int> ; }", "label": 0, "id": 1952}
{"input": "void gcd ( long int a , long int b ) { int num , den , rem , g , l ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } while ( num % den ) { rem = num % den ; num = den ; den = rem ; } g = den ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } int main ( ) { long int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd ( a , b ) ; } return <int> ; }", "label": 1, "id": 1953}
{"input": "char buffer [ <int> ] , * buffer_cursor , * buffer_end ; int number [ <int> * <int> ] ; static unsigned long long int a [ <int> ] , b [ <int> ] , * cur , * old ; int c ; void puti ( unsigned long long int n ) { char temp [ <int> ] ; int i = <int> , j ; while ( n > <int> ) { temp [ i -- ] = n + <char> ; n /= <int> ; } j = i + <int> ; while ( j < <int> ) { putchar ( temp [ j ++ ] ) ; } } int main ( ) { static int i , t , n , i_f , j_f ; int x , j = <int> , k ; unsigned long long int mx = <int> ; c = fread ( buffer , <int> , <int> , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , <int> , <int> , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } if ( ( * buffer_cursor ++ ) < <char> ) break ; t = t * <int> + buffer_cursor [ - <int> ] - <char> ; } while ( <int> ) ; for ( i_f = <int> ; i_f < t ; i_f ++ ) { do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , <int> , <int> , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } if ( ( * buffer_cursor ++ ) < <char> ) break ; n = n * <int> + buffer_cursor [ - <int> ] - <char> ; } while ( <int> ) ; x = n * ( n + <int> ) / <int> ; for ( k = <int> ; k < x ; k ++ ) number [ k ] = <int> ; for ( i = <int> ; i < x ; i ++ ) { do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , <int> , <int> , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } if ( * ( buffer_cursor ++ ) < <char> ) break ; number [ i ] = number [ i ] * <int> + buffer_cursor [ - <int> ] - <char> ; } while ( <int> ) ; } for ( k = <int> ; k < ( n + <int> ) ; k ++ ) { a [ k ] = b [ k ] = <int> ; } cur = a ; old = b ; j_f = <int> ; a [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { cur [ <int> ] = number [ j_f ++ ] + old [ <int> ] ; j = <int> ; while ( j < i ) { cur [ j ] = number [ j_f ++ ] + max ( old [ j - <int> ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = number [ j_f ++ ] + old [ j - <int> ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } } mx = <int> ; for ( i = <int> ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; puti ( mx ) ; putchar ( <char> ) ; n = <int> ; } return <int> ; }", "label": 1, "id": 1954}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) { return b ; } else { return gcd ( b , a % b ) ; } } int main ( void ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int gcda = gcd ( a , b ) ; long long int lcm = ( a * b ) / gcda ; printf ( <str> , gcda , lcm ) ; } return <int> ; }", "label": 0, "id": 1955}
{"input": "int main ( ) { int t , i , n , j , k , sum = <int> , max ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , a [ i ] [ j ] ) ; } max = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { sum = <int> ; for ( j = <int> ; j <= i ; j ++ ) sum = sum + a [ j ] [ i ] ; for ( j = i + <int> ; j < n ; j ++ ) sum = sum + a [ j ] [ i ] ; if ( max < sum ) max = sum ; sum = sum - a [ j - <int> ] [ i ] + a [ j - <int> ] [ i + <int> ] ; if ( max < sum ) max = sum ; } printf ( <str> , max ) ; } return ( <int> ) ; }", "label": 3, "id": 1956}
{"input": "int ARR [ <int> ] [ <int> ] , temp [ <int> ] [ <int> ] ; int max ( int , int ) ; void input_matrix ( int ) ; void solve ( int ) ; int main ( ) { int T , N ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; ++ i ) { scanf ( <str> , & N ) ; input_matrix ( N ) ; solve ( N ) ; } return <int> ; } void input_matrix ( int n ) { for ( int i = <int> ; i < n ; ++ i ) for ( int j = <int> ; j <= i ; ++ j ) scanf ( <str> , & ARR [ i ] [ j ] ) ; } void solve ( int n ) { temp [ <int> ] [ <int> ] = ARR [ <int> ] [ <int> ] ; for ( int i = <int> ; i < n ; ++ i ) { temp [ i ] [ <int> ] = ARR [ i ] [ <int> ] + temp [ i - <int> ] [ <int> ] ; temp [ i ] [ i ] = ARR [ i ] [ i ] + temp [ i - <int> ] [ i - <int> ] ; } for ( int i = <int> ; i < n ; ++ i ) for ( int j = <int> ; j < i ; ++ j ) temp [ i ] [ j ] = max ( temp [ i - <int> ] [ j ] , temp [ i - <int> ] [ j - <int> ] ) + ARR [ i ] [ j ] ; int max = <int> ; for ( int i = <int> ; i < n ; ++ i ) if ( temp [ n - <int> ] [ i ] > max ) max = temp [ n - <int> ] [ i ] ; printf ( <str> , max ) ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; }", "label": 0, "id": 1957}
{"input": "int glob = <int> ; int max1 ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int num = <int> ; int i = <int> ; char * * str1 ; char buf [ <int> ] ; char buf1 [ <int> ] ; int len1 = <int> ; scanf ( <str> , & num ) ; str1 = ( char * * ) malloc ( num * sizeof ( char * ) ) ; for ( i = <int> ; i < num ; i ++ ) { int row = <int> ; int j = <int> ; int * arr = NULL ; int * max = NULL ; int lum = <int> ; int count = <int> ; char * str = ( char * ) malloc ( <int> ) ; scanf ( <str> , & row ) ; j = ( ( row ) * ( row + <int> ) ) / <int> ; arr = ( int * ) malloc ( j * sizeof ( int ) ) ; max = ( int * ) malloc ( j * sizeof ( int ) ) ; getline ( & str , & j , stdin ) ; for ( j = <int> ; j < row ; j ++ ) { int k = <int> ; char * tmp , * tmp1 ; int lum = <int> ; int byte_read = getline ( & str , & k , stdin ) ; int len = strlen ( str ) ; str [ len ] = <char> ; lum = j + <int> ; tmp = str ; tmp1 = str ; do { tmp = strchr ( tmp1 , <char> ) ; if ( tmp ) { tmp [ <int> ] = <char> ; } arr [ count ++ ] = atoi ( tmp1 ) ; tmp1 = tmp + <int> ; lum -- ; } while ( lum ) ; } count = <int> ; glob = <int> ; for ( j = row ; j >= <int> ; j -- ) { int k = <int> ; int fib = ( ( j - <int> ) * j ) / <int> ; int <unk> = ( j * ( j + <int> ) ) / <int> ; for ( k = <int> ; k < row ; k ++ ) { if ( j == row ) { max [ fib + k ] = arr [ fib + k ] ; } else { max [ fib + k ] = arr [ fib + k ] + max1 ( max [ <unk> + k ] , max [ <unk> + k + <int> ] ) ; } } } sprintf ( buf1 , <str> , max [ <int> ] ) ; len1 = strlen ( buf1 ) + <int> ; str1 [ i ] = ( char * ) malloc ( len1 ) ; strcpy ( str1 [ i ] , buf1 ) ; free ( max ) ; free ( arr ) ; free ( str ) ; } for ( i = <int> ; i < num ; i ++ ) { printf ( <str> , str1 [ i ] ) ; free ( str1 [ i ] ) ; } free ( str1 ) ; return <int> ; }", "label": 0, "id": 1958}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b , gcd , lcm , rem , n , d ; scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } rem = n % d ; while ( rem != <int> ) { n = d ; d = rem ; rem = n % d ; } gcd = d ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 1959}
{"input": "int main ( ) { unsigned int i , j , a [ <int> ] [ <int> ] , sum = <int> , n , t , t1 , t2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; if ( n == <int> ) printf ( <str> , a [ <int> ] [ <int> ] ) ; else if ( n == <int> ) printf ( <str> , ( a [ <int> ] [ <int> ] > a [ <int> ] [ <int> ] ? a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] : a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ) ; else { for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , ( a [ <int> ] [ <int> ] > a [ <int> ] [ <int> ] ? a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] : a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ) ; } } return <int> ; }", "label": 0, "id": 1960}
{"input": "int main ( ) { int T , i , A , B , Q , R , j , k , product , LCM ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A >= <int> && A <= <int> && B >= <int> && B <= <int> ) { if ( A > B ) { product = A * B ; for ( j = <int> ; ; j ++ ) { Q = A / B ; R = A % B ; if ( R == <int> ) { break ; } A = B ; B = R ; } LCM = product / B ; printf ( <str> , B , LCM ) ; } else if ( B > A ) { product = A * B ; for ( k = <int> ; ; k ++ ) { Q = B / A ; R = B % A ; if ( R == <int> ) { break ; } B = A ; A = R ; } LCM = product / A ; printf ( <str> , A , LCM ) ; } } } } return <int> ; }", "label": 1, "id": 1961}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int N ; scanf ( <str> , & N ) ; long long int A [ N ] , i , min , c ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & A [ i ] ) ; min = A [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( min > A [ i ] ) min = A [ i ] ; } c = min * ( N - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 1962}
{"input": "void main ( ) { int n = <int> , i = <int> , smtsize = <int> , j = <int> , a [ <int> ] , b [ <int> ] [ <int> ] , k , k1 ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & smtsize ) ; for ( k = <int> ; k < smtsize ; k ++ ) { for ( k1 = <int> ; k1 < k + <int> ; k1 ++ ) { scanf ( <str> , & b [ k ] [ k1 ] ) ; a [ i ] += b [ k ] [ k1 ] ; } } } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , a [ i ] ) ; }", "label": 1, "id": 1963}
{"input": "int main ( ) { int t , r , sum , i , j , k , <unk> [ <int> ] [ <int> ] , a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = r - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( j == r - <int> ) <unk> [ j ] [ k ] = a [ j ] [ k ] ; else if ( <unk> [ j + <int> ] [ k ] >= <unk> [ j + <int> ] [ k + <int> ] ) <unk> [ j ] [ k ] = <unk> [ j + <int> ] [ k ] + a [ j ] [ k ] ; else <unk> [ j ] [ k ] = <unk> [ j + <int> ] [ k + <int> ] + a [ j ] [ k ] ; } } printf ( <str> , <unk> [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 1964}
{"input": "int Calculate ( int * , int ) ; int main ( ) { int a [ <int> ] , i , t , n , j , count ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; count = Calculate ( a , n ) ; printf ( <str> , count ) ; } return <int> ; } int Calculate ( int * a , int n ) { int i , count = <int> , sum = <int> , temp = <int> , j , b [ <int> ] ; b [ temp ] = - <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { temp ++ ; b [ temp ] = i ; } } temp = temp + <int> ; b [ temp ] = i - <int> ; for ( i = <int> ; i <= temp ; i ++ ) { sum = b [ i ] - b [ i - <int> ] ; count += ( sum * ( sum + <int> ) ) / <int> ; } return count ; }", "label": 3, "id": 1965}
{"input": "int main ( ) { int a , b , i , T , x , GCD , LCM ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { x = a ; } else { x = b ; } for ( ; x >= <int> ; x -- ) { if ( a % x == <int> && b % x == <int> ) { GCD = x ; break ; } } LCM = ( a * b ) / GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 1, "id": 1966}
{"input": "int output , arr [ <int> ] ; int main ( ) { int testcase , test , total_row , i , start , end ; scanf ( <str> , & testcase ) ; end = - <int> ; for ( test = <int> ; test <= testcase ; test ++ ) { scanf ( <str> , & total_row ) ; start = <int> ; end = start + total_row * ( total_row + <int> ) / <int> - <int> ; for ( i = start ; i <= end ; i ++ ) scanf ( <str> , & arr [ i ] ) ; output = arr [ start ] ; total ( total_row , <int> , start ) ; printf ( <str> , output ) ; } return <int> ; } int total ( int total_row , int row , int index ) { if ( row == total_row ) return ; int below , row_end ; below = row + index ; row_end = ( row * ( row + <int> ) % <int> ) - <int> ; if ( below - <int> == row_end ) index = maxof2 ( below , below + <int> ) ; else index = maxof3 ( below - <int> , below , below + <int> ) ; output += arr [ index ] ; total ( total_row , row + <int> , index ) ; } int maxof2 ( int a , int b ) { if ( arr [ a ] > arr [ b ] ) return a ; else return b ; } int maxof3 ( int a , int b , int c ) { int d = maxof2 ( a , b ) ; return maxof2 ( d , c ) ; }", "label": 1, "id": 1967}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T ) { int a , b ; scanf ( <str> , & a , & b ) ; int p , q ; if ( a > b ) { p = a ; q = b ; } else { p = b ; q = a ; } while ( q ) { int tmp = p % q ; p = q ; q = tmp ; } printf ( <str> , p , a * b / p ) ; T -- ; } return <int> ; }", "label": 1, "id": 1968}
{"input": "void insert ( long long int j , int * B ) { long int parent , child ; int k ; parent = j / <int> ; child = j ; if ( j != <int> ) { while ( child != parent ) { if ( B [ parent ] > B [ child ] ) { k = B [ parent ] ; B [ parent ] = B [ child ] ; B [ child ] = k ; child = parent ; parent = child / <int> ; } else { break ; } } } } int main ( ) { int T , i , A [ <int> ] ; long long int N , j ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & A [ j ] ) ; insert ( j , A ) ; } printf ( <str> , ( N - <int> ) * A [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1969}
{"input": "int main ( void ) { int t , n , a [ <int> ] , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; return <int> ; } }", "label": 3, "id": 1970}
{"input": "int main ( void ) { int a , b , c , t ; float gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; c = a * b ; while ( b != <int> ) { t = a % b ; a = b ; b = t ; gcd = a ; } lcm = c / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 1971}
{"input": "int main ( ) { int n , a [ <int> ] , b [ <int> ] , r , i , l ; scanf ( <str> , & n ) ; i = n ; while ( i -- ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; l = a [ i ] * b [ i ] ; do { r = a [ i ] % b [ i ] ; a [ i ] = b [ i ] ; b [ i ] = r ; } while ( r != <int> ) ; b [ i ] = l / a [ i ] ; } for ( i = n - <int> ; i >= <int> ; i -- ) { printf ( <str> , a [ i ] , b [ i ] ) ; } }", "label": 1, "id": 1972}
{"input": "int total ; void cal ( int a [ ] [ <int> ] , int isize , int jsize , int i , int j , int sum ) { if ( i >= isize || j >= jsize ) return ; else { sum += a [ i ] [ j ] ; if ( total < sum ) total = sum ; cal ( a , isize , jsize , i + <int> , j , sum ) ; cal ( a , isize , jsize , i + <int> , j + <int> , sum ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; total = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } cal ( a , n , n , <int> , <int> , <int> ) ; printf ( <str> , total ) ; } return <int> ; }", "label": 2, "id": 1973}
{"input": "int main ( ) { int tc , T ; scanf ( <str> , & T ) ; for ( tc = <int> ; tc < T ; tc ++ ) { long long int a , b , g ; scanf ( <str> , & a , & b ) ; long long int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a >= b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 0, "id": 1974}
{"input": "int main ( ) { int t , a , b , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int min = ( a < b ) ? a : b ; int lcm = <int> , gcd = <int> ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { lcm = i ; } } gcd = ( a * b ) / lcm ; printf ( <str> , lcm , gcd ) ; } return <int> ; }", "label": 1, "id": 1975}
{"input": "int main ( ) { long long int T , N , m ; scanf ( <str> , & T ) ; for ( int j = <int> ; j <= T ; j ++ ) { int c = <int> ; scanf ( <str> , & N ) ; int * a = ( int * ) malloc ( N * sizeof ( int ) ) ; for ( int i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) m = a [ i ] ; else if ( a [ i ] < m ) m = a [ i ] ; } printf ( <str> , m * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 1976}
{"input": "int main ( ) { int t , i , j , a , b , x , y ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & a , & b ) ; i = ( a > b ? b : a ) ; j = ( a > b ? a : b ) ; for ( x = i ; x >= <int> ; x -- ) { if ( j % x == <int> && i % x == <int> ) { printf ( <str> , x ) ; break ; } } y = ( i * j ) / x ; printf ( <str> , y ) ; } return <int> ; }", "label": 1, "id": 1977}
{"input": "int main ( ) { long int n , q , i , p ; int t , key ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { key = <int> ; scanf ( <str> , & n ) ; if ( n >= <int> ) { int a [ n ] ; q = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < q - <int> ; i ++ ) { if ( a [ <int> ] > a [ <int> ] ) { key += a [ <int> ] ; for ( p = <int> ; p < n - <int> ; p ++ ) a [ p ] = a [ p + <int> ] ; } else { key += a [ <int> ] ; for ( p = <int> ; p < n - <int> ; p ++ ) a [ p ] = a [ p + <int> ] ; } n -- ; } } printf ( <str> , key ) ; } return <int> ; }", "label": 2, "id": 1978}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] , ind = - <int> ; long min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < min ) { min = arr [ i ] ; ind = i ; } } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 1979}
{"input": "int greater ( int a , int b ) { if ( a > b ) return a ; else return b ; } void process ( int r , int ans [ ] , int k ) { int i , arr [ r ] [ r ] , j , sum1 , sum2 ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < r - <int> ; j ++ ) { sum1 = <int> ; sum2 = <int> ; sum1 = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; sum2 = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; arr [ i ] [ j ] = greater ( sum1 , sum2 ) ; } } ans [ k ] = arr [ <int> ] [ <int> ] ; } int main ( ) { int i , n , r , ans [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & r ) ; process ( r , ans , i ) ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 0, "id": 1980}
{"input": "int maxsum ( int i , int j , int arr [ ] [ <int> ] , int found [ ] [ <int> ] ) { if ( found [ i ] [ j ] == <int> ) { return ( arr [ i ] [ j ] ) ; } else { found [ i ] [ j ] = <int> ; arr [ i ] [ j ] = arr [ i ] [ j ] + max ( maxsum ( i + <int> , j , arr , found ) , maxsum ( i + <int> , j + <int> , arr , found ) ) ; return ( arr [ i ] [ j ] ) ; } } int main ( ) { int i , j , t , l , arr [ <int> ] [ <int> ] , found [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < ( l - <int> ) ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; found [ i ] [ j ] = <int> ; } } for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; found [ i ] [ j ] = <int> ; } printf ( <str> , maxsum ( <int> , <int> , arr , found ) ) ; } return ( <int> ) ; }", "label": 0, "id": 1981}
{"input": "int max ( int a , int b ) { int ans ; ans = a > b ? a : b ; return ans ; } int len ( int i , int j , int cache_arr [ <int> ] [ <int> ] , int arr [ <int> ] [ <int> ] , int n ) { if ( i > n ) return <int> ; if ( cache_arr [ i ] [ j ] ) return cache_arr [ i ] [ j ] ; int value = <int> ; value = max ( len ( i + <int> , j , cache_arr , arr , n ) , len ( i + <int> , j + <int> , cache_arr , arr , n ) ) ; value += arr [ i ] [ j ] ; cache_arr [ i ] [ j ] = value ; return ( value ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int cache_arr [ <int> ] [ <int> ] = { <int> } , arr [ <int> ] [ <int> ] = { <int> } ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; int ans = len ( <int> , <int> , cache_arr , arr , n ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 1982}
{"input": "int main ( ) { int tcase , num , j , i , sum , temp , prev , curr ; scanf ( <str> , & tcase ) ; for ( i = <int> ; i < tcase ; i ++ ) { scanf ( <str> , & num ) ; sum = <int> ; temp = <int> ; for ( j = <int> ; j < num ; j ++ ) { if ( j = <int> ) scanf ( <str> , & prev ) ; else scanf ( <str> , & curr ) ; if ( curr < prev ) temp = j ; sum = sum + ( j - temp + <int> ) ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 1983}
{"input": "int main ( ) { int b [ <int> ] [ <int> ] , a [ <int> ] , i , j , n , k = <int> , x [ <int> ] = { <int> } , t , m , n1 , n2 ; a [ <int> ] = <int> ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } a [ <int> ] = b [ <int> ] [ <int> ] ; a [ <int> ] = b [ <int> ] [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = b [ <int> ] [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( ( j == <int> ) || ( j == i - <int> ) ) { n1 = ( ( i - <int> ) * ( i - <int> ) ) - i + j + <int> ; a [ k ] = b [ i ] [ j ] + a [ n1 ] ; ++ k ; n2 = ( ( i - <int> ) * ( i - <int> ) ) - i + j + <int> ; a [ k ] = b [ i ] [ j + <int> ] + a [ n2 ] ; ++ k ; } else { n1 = ( ( i - <int> ) * ( i - <int> ) ) - i + j + <int> ; a [ k ] = b [ i ] [ j ] + a [ n1 ] ; ++ k ; n1 = ( ( i - <int> ) * ( i - <int> ) ) - i + j + <int> ; a [ k ] = b [ i ] [ j ] + a [ n1 ] ; ++ k ; n2 = ( ( i - <int> ) * ( i - <int> ) ) - i + j + <int> ; a [ k ] = b [ i ] [ j + <int> ] + a [ n2 ] ; ++ k ; n2 = ( ( i - <int> ) * ( i - <int> ) ) - i + j + <int> ; a [ k ] = b [ i ] [ j + <int> ] + a [ n2 ] ; ++ k ; } } } for ( i = <int> ; i <= <int> * n * n ; i ++ ) { if ( x [ m ] < a [ i ] ) { x [ m ] = a [ i ] ; } } } i = <int> ; while ( i < t ) { printf ( <str> , x [ i ] ) ; i ++ ; } return <int> ; }", "label": 1, "id": 1984}
{"input": "int main ( ) { int i , t , n ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; long long a [ n ] , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; t -- ; } return <int> ; }", "label": 1, "id": 1985}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 1986}
{"input": "int main ( ) { long int n , t , i , a ; long long int min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = mini ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } min *= n - <int> ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 1987}
{"input": "int n , a [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] ; int maxFromTop ( int i , int j ) { if ( i == n ) return <int> ; if ( cache [ i ] [ j ] != - <int> ) return cache [ i ] [ j ] ; int path1 = maxFromTop ( i + <int> , j + <int> ) ; int path2 = maxFromTop ( i + <int> , j ) ; int max = ( path1 > path2 ? path1 : path2 ) ; cache [ i ] [ j ] = a [ i ] [ j ] + max ; return a [ i ] [ j ] + max ; } int main ( void ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) cache [ i ] [ j ] = - <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , maxFromTop ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 1988}
{"input": "void cost ( long long int [ ] , long long int ) ; int main ( ) { long long int a [ <int> ] , n ; int i , no ; scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) { scanf ( <str> , & n ) ; cost ( a , n ) ; } return <int> ; } void cost ( long long int a [ ] , long long int n ) { long long int min , i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; return ; }", "label": 3, "id": 1989}
{"input": "int main ( ) { int a , b , H , L , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; H = GCD ( a , b ) ; printf ( <str> , H ) ; L = lcm ( a , b ) ; printf ( <str> , L ) ; } return <int> ; } int GCD ( int a , int b ) { if ( a == b ) return a ; if ( a % b == <int> ) return b ; if ( b % a == <int> ) return a ; if ( a > b ) return ( GCD ( a % b , b ) ) ; else return ( GCD ( a , b % a ) ) ; } int lcm ( int a , int b ) { int L ; for ( L = a > b ? a : b ; L <= a * b ; L ++ ) if ( L % a == <int> && L % b == <int> ) break ; return L ; }", "label": 2, "id": 1990}
{"input": "int main ( ) { unsigned int test_case , <unk> ; int i , j ; scanf ( <str> , & test_case ) ; while ( test_case -- ) { scanf ( <str> , & <unk> ) ; unsigned int matrix [ <unk> ] [ <unk> ] ; for ( i = <int> ; i < <unk> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } } for ( i = <unk> - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( matrix [ i ] [ j ] > matrix [ i ] [ j + <int> ] ) matrix [ i - <int> ] [ j ] = matrix [ i - <int> ] [ j ] + matrix [ i ] [ j ] ; else matrix [ i - <int> ] [ j ] = matrix [ i - <int> ] [ j ] + matrix [ i ] [ j + <int> ] ; } } printf ( <str> , matrix [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1991}
{"input": "int nd ( int a [ ] , int , int ) ; int a [ <int> ] ; int main ( ) { int t , i , n , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int j = <int> ; long long count = <int> ; while ( j < n ) { for ( i = j ; i < n ; i ++ ) { c = nd ( a , j , i ) ; if ( c == <int> ) count ++ ; } j ++ ; } printf ( <str> , count + n ) ; } return <int> ; } int nd ( int a [ ] , int x , int y ) { int i , found ; for ( i = x ; i <= y ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) found = <int> ; else { found = <int> ; break ; } } if ( found == <int> ) return <int> ; else return <int> ; }", "label": 2, "id": 1992}
{"input": "unsigned long long cache [ <int> ] [ <int> ] = { <int> } ; unsigned long long arr [ <int> ] [ <int> ] ; unsigned long long t , nol , res ; int i , j ; unsigned long long solve ( int i , int j ) ; unsigned long long max ( unsigned long long a , unsigned long long b ) ; int main ( void ) { scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & nol ) ; for ( i = <int> ; i < nol ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; cache [ i ] [ j ] = <int> ; } } res = solve ( <int> , <int> ) ; printf ( <str> , res ) ; } return <int> ; } unsigned long long solve ( int i , int j ) { unsigned long long t1 , t2 , t ; if ( i > nol ) { return <int> ; } if ( cache [ i ] [ j ] ) { return cache [ i ] [ j ] ; } t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = arr [ i ] [ j ] + max ( t1 , t2 ) ; cache [ i ] [ j ] = t ; return t ; } unsigned long long max ( unsigned long long a , unsigned long long b ) { if ( a >= b ) { return a ; } return b ; }", "label": 0, "id": 1993}
{"input": "int arr [ <int> ] [ <int> ] ; int tri ( int h , int i , int j ) { if ( h == <int> ) return arr [ i ] [ j ] + ( ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ) ; else { int m , n = <int> , max , k , <unk> , tria , l , max2 ; m = tri ( h - <int> , i + <int> , j + <int> ) ; for ( k = <int> ; k < h ; k ++ ) n += arr [ i + k ] [ j ] ; max = <int> ; for ( k = <int> ; k < h - <int> ; k ++ ) { <unk> = <int> ; for ( l = <int> ; l <= k ; l ++ ) <unk> += arr [ i + l + <int> ] [ j ] ; if ( h - <int> - k == <int> ) tria = arr [ i + <int> + k ] [ j + <int> ] ; else tria = tri ( h - <int> - k , i + <int> + k , j + <int> ) ; if ( max < <unk> + tria ) max = <unk> + tria ; } max2 = m ; if ( n > max2 ) max2 = n ; if ( max > max2 ) max2 = max ; return arr [ i ] [ j ] + max2 ; } } int main ( ) { int i , j , k , t , h , res ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & h ) ; for ( j = <int> ; j < h ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } res = tri ( h , <int> , <int> ) ; printf ( <str> , res ) ; } return <int> ; }", "label": 2, "id": 1994}
{"input": "int main ( ) { int i , j , k , t , n , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = j ; k >= <int> ; k -- ) { if ( arr [ j + <int> ] [ k + <int> ] > arr [ j + <int> ] [ k ] ) { arr [ j ] [ k ] += arr [ j + <int> ] [ k + <int> ] ; } else { arr [ j ] [ k ] += arr [ j + <int> ] [ k ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 1995}
{"input": "int main ( ) { int t , a , b , x , y , p , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a , y = b ; while ( b != <int> ) { if ( a > b ) { p = a % b ; a = b ; b = p ; } } l = ( x * y ) / a ; printf ( <str> , a , l ) ; } }", "label": 2, "id": 1996}
{"input": "int main ( void ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int a , b , x1 , x2 , lcm ; scanf ( <str> , & x1 , & x2 ) ; a = x1 ; b = x2 ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } lcm = ( x1 * x2 ) / a ; printf ( <str> , a , lcm ) ; } return <int> ; }", "label": 1, "id": 1997}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int i , j , n , count = <int> , a [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { count = count + <int> ; } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 1, "id": 1998}
{"input": "char ibuffer [ BS ] ; long ibuffer_size = <int> , ibuffer_offset = <int> ; static long inline fastread ( ) { long r = <int> , s = <int> ; while ( <int> ) { if ( ibuffer_offset >= ibuffer_size ) { ibuffer_size = read ( <int> , ibuffer , BS ) ; ibuffer_offset = <int> ; } if ( ibuffer [ ibuffer_offset ] < <char> ) { if ( s ) ibuffer_offset ++ ; else return r ; } else { s = <int> ; r = r * <int> + ibuffer [ ibuffer_offset ++ ] - <char> ; } } } int main ( ) { int a [ <int> ] [ <int> ] , i , j , N , T , max ; T = fastread ( ) ; while ( T -- ) { N = fastread ( ) ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; if ( j == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else if ( i == j ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ; } } max = a [ N - <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) if ( a [ N - <int> ] [ i ] > max ) max = a [ N - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 1999}
{"input": "void main ( ) { long int count , i , k , j , N , l , a [ <int> ] ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { k = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } count = N ; for ( j = <int> ; j < N - <int> ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) { k ++ ; if ( j == ( N - <int> ) ) { count += k * ( k + <int> ) / <int> ; k = <int> ; } } else { if ( k == <int> ) count ++ ; else count += k * ( k + <int> ) / <int> ; k = <int> ; } } printf ( <str> , count ) ; } }", "label": 0, "id": 2000}
{"input": "int main ( ) { int n , T , G , L , A , B , X ; scanf ( <str> , & T ) ; for ( n = <int> ; n <= T ; n ++ ) { if ( T < <int> ) { scanf ( <str> , & A , & B ) ; if ( A <= <int> && B <= <int> ) { if ( A < B ) { X = A ; } else { X = B ; } for ( ; X >= <int> ; X -- ) { if ( A % X == <int> && B % X == <int> ) { G = X ; L = A * B / G ; break ; } } printf ( <str> , G , L ) ; } break ; } } return <int> ; }", "label": 1, "id": 2001}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , min = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( min > a [ j ] ) min = a [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2002}
{"input": "int main ( ) { int dong ; scanf ( <str> , & dong ) ; while ( dong -- ) { int mang [ <int> ] ; int sopt , i = <int> , j = <int> ; scanf ( <str> , & sopt ) ; while ( i < sopt ) { scanf ( <str> , & mang [ i ] ) ; i ++ ; } int cost = <int> ; while ( j < sopt ) { if ( mang [ j ] < mang [ j + <int> ] ) cost = cost + mang [ j ] ; else if ( mang [ j ] > mang [ j + <int> ] ) cost = cost + mang [ j + <int> ] ; j ++ ; sopt -- ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 2003}
{"input": "int main ( ) { int numOfLines ; int triHeight ; int triangles [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & numOfLines ) ; while ( numOfLines > <int> ) { scanf ( <str> , & triHeight ) ; int i = <int> ; int j ; while ( i < triHeight ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangles [ i ] [ j ] ) ; } i ++ ; } triHeight -= <int> ; while ( triHeight >= <int> ) { for ( j = <int> ; j <= triHeight ; j ++ ) { int currentNumber = triangles [ triHeight ] [ j ] ; int leftBelow = triangles [ triHeight + <int> ] [ j ] + currentNumber ; int rightBelow = triangles [ triHeight + <int> ] [ j + <int> ] + currentNumber ; triangles [ triHeight ] [ j ] = leftBelow > rightBelow ? leftBelow : rightBelow ; } triHeight -- ; } printf ( <str> , triangles [ <int> ] [ <int> ] ) ; numOfLines -- ; } return <int> ; }", "label": 1, "id": 2004}
{"input": "int main ( ) { int t , n , ans [ <int> ] ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; for ( int k = <int> ; k < n ; k ++ ) for ( int j = <int> ; j < k + <int> ; j ++ ) scanf ( <str> , & a [ k ] [ j ] ) ; for ( int x = n - <int> ; x >= <int> ; x -- ) for ( int y = <int> ; y <= x ; y ++ ) { if ( a [ x + <int> ] [ y ] > a [ x + <int> ] [ y + <int> ] ) a [ x ] [ y ] += a [ x + <int> ] [ y ] ; else a [ x ] [ y ] += a [ x + <int> ] [ y + <int> ] ; } ans [ i ] = a [ <int> ] [ <int> ] ; } for ( int x = <int> ; x < t ; x ++ ) printf ( <str> , ans [ x ] ) ; return <int> ; }", "label": 0, "id": 2005}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int i , j , sum = <int> , test , n ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i - <int> ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2006}
{"input": "int main ( ) { long int a , b , T , i = <int> , GCD , LCM ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( i = b ; i >= <int> ; i -- ) { if ( b % i == <int> && a % i == <int> ) { GCD = i ; break ; } } for ( i = a ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) { LCM = i ; break ; } } printf ( <str> , GCD , LCM ) ; } else if ( b > a ) { for ( i = a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { GCD = i ; break ; } } for ( i = b ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) { LCM = i ; break ; } } printf ( <str> , GCD , LCM ) ; } } return <int> ; }", "label": 2, "id": 2007}
{"input": "int main ( void ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 2008}
{"input": "int max ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int maxim , n , line , i , j ; int Arr [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & line ) ; for ( i = <int> ; i < line ; i ++ ) for ( j = <int> ; j < line ; j ++ ) Arr [ i ] [ j ] = <int> ; i = <int> ; for ( i ; i < line ; i ++ ) { j = <int> ; for ( j ; j <= i ; j ++ ) { scanf ( <str> , & Arr [ i ] [ j ] ) ; } } for ( i = <int> ; i < line ; i ++ ) { j = <int> ; for ( j ; j <= i ; j ++ ) { if ( j == <int> ) Arr [ i ] [ j ] += Arr [ i - <int> ] [ j ] ; else Arr [ i ] [ j ] += max ( Arr [ i - <int> ] [ j - <int> ] , Arr [ i - <int> ] [ j ] ) ; } } j = <int> ; maxim = <int> ; for ( j ; j < line ; j ++ ) { if ( Arr [ line - <int> ] [ j ] > maxim ) maxim = Arr [ line - <int> ] [ j ] ; } printf ( <str> , maxim ) ; } return <int> ; }", "label": 0, "id": 2009}
{"input": "int main ( void ) { int a [ <int> ] [ <int> ] ; int x ; int t = <int> ; int i = <int> , j = <int> ; int max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x ) ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = x - <int> ; j >= <int> ; j -- ) { for ( i = <int> ; i <= j ; i ++ ) { a [ j ] [ i ] += a [ j + <int> ] [ i ] > a [ j + <int> ] [ i + <int> ] ? a [ j + <int> ] [ i ] : a [ j + <int> ] [ i + <int> ] ; } } for ( i = <int> ; i < x ; i ++ ) { if ( max < a [ i ] [ i ] ) { max = a [ i ] [ i ] ; } } printf ( <str> , max ) ; max = <int> ; } return <int> ; }", "label": 3, "id": 2010}
{"input": "int main ( ) { int t , i , a [ <int> ] , n , sum = <int> , pos = <int> , j ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < ( n * ( n + <int> ) ) / <int> ; i ++ ) a [ i ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < ( n * ( n + <int> ) ) / <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; sum = a [ <int> ] ; pos = <int> ; for ( j = <int> ; j < n ; j ++ ) { pos += j ; if ( a [ pos ] > a [ pos + <int> ] ) sum += a [ pos ] ; else sum += a [ ++ pos ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2011}
{"input": "int main ( void ) { int numr , i , j , ret , val ; int numtest ; scanf ( <str> , & numtest ) ; while ( numtest -- ) { int arr [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & numr ) ; for ( i = <int> ; i < numr ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & val ) ; if ( i == <int> && j == <int> ) { arr [ <int> ] [ <int> ] = val ; } else { if ( j == <int> ) { arr [ i ] [ j ] = arr [ i - <int> ] [ j ] + val ; } else if ( i == j ) { arr [ i ] [ j ] = arr [ i - <int> ] [ j - <int> ] + val ; } else { arr [ i ] [ j ] = arr [ i - <int> ] [ j - <int> ] >= arr [ i - <int> ] [ j ] ? arr [ i - <int> ] [ j - <int> ] + val : arr [ i - <int> ] [ j ] + val ; } } } } ret = <int> ; for ( j = <int> ; j < numr ; j ++ ) { if ( ret < arr [ numr - <int> ] [ j ] ) { ret = arr [ numr - <int> ] [ j ] ; } } printf ( <str> , ret ) ; } return <int> ; }", "label": 0, "id": 2012}
{"input": "int main ( ) { int t , n , i , j , k , t1 ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n ; j ++ ) { for ( k = j + <int> ; k < n ; k ++ ) { if ( a [ j ] < a [ k ] ) { t1 = a [ j ] ; a [ j ] = a [ k ] ; a [ k ] = t1 ; } } } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 2013}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int f = <int> ; printf ( <str> ) ; while ( f <= t ) { int k ; scanf ( <str> , & k ) ; int a [ k ] ; printf ( <str> ) ; int i ; for ( i = <int> ; i < ( k ) ; i ++ ) { scanf ( <str> , & a [ i ] ) ; printf ( <str> ) ; } int min = a [ <int> ] ; int cost ; for ( i = <int> ; i < <int> ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } cost = min * ( k - <int> ) ; printf ( <str> ) ; printf ( <str> , cost ) ; f = f + <int> ; } return <int> ; }", "label": 1, "id": 2014}
{"input": "int main ( ) { int T , N , i , j , max = <int> , arr [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = N - <int> ; i >= <int> ; -- i ) { for ( j = <int> ; j <= i ; ++ j ) { max = ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; arr [ i ] [ j ] += max ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2015}
{"input": "int gcd ( int a , int b ) { int x ; if ( a == <int> ) return b ; else if ( b == <int> ) return a ; else { while ( b != <int> ) { x = a % b ; a = b ; b = x ; } return a ; } } int lcm ( int x , int y , int z ) { int g = y / x ; return z * g ; } int main ( ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( g , a , b ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 2016}
{"input": "int main ( ) { int t , a , b , c , i , gcd [ <int> ] , lcm [ <int> ] , mlt ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; mlt = a * b ; while ( <int> ) { c = b % a ; b = a ; a = c ; if ( a == <int> ) { break ; } } gcd [ i ] = b ; lcm [ i ] = mlt / gcd [ i ] ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } }", "label": 1, "id": 2017}
{"input": "int gcd ( long int , long int ) ; int gcd ( long int a , long int b ) { return b == <int> ? a : gcd ( b , a % b ) ; } int main ( ) { long int a , b , hcf = <int> ; long long unsigned int lcm = <int> ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = a / hcf * b ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 2018}
{"input": "int max ( int size , int i , int j , int p [ size ] [ size ] ) ; int main ( ) { int cases , array_size , p [ <int> ] [ <int> ] ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & array_size ) ; if ( array_size ) { int i , j ; for ( i = <int> ; i < array_size ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & p [ i ] [ j ] ) ; } } printf ( <str> , p [ <int> ] [ <int> ] + max ( array_size , <int> , <int> , p ) ) ; } } return <int> ; } int max ( int size , int i , int j , int p [ size ] [ size ] ) { if ( i == ( size - <int> ) ) { return greater ( p [ i ] [ j ] , p [ i ] [ j + <int> ] ) ; } else { return greater ( p [ i ] [ j ] + max ( size , i + <int> , j , p ) , p [ i ] [ j + <int> ] + max ( size , i + <int> , j + <int> , p ) ) ; } }", "label": 2, "id": 2019}
{"input": "int fun ( ) { int i = <int> ; char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) { i = i * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return i ; } int main ( ) { int tc , nor , arr [ SIZE ] [ SIZE ] , j , i ; tc = fun ( ) ; while ( tc -- ) { nor = fun ( ) ; for ( i = <int> ; i < nor ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = fun ( ) ; for ( i = nor - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) arr [ i ] [ j ] += ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2020}
{"input": "int main ( ) { int A , B , gcd , lcm , remainder , numerator , denominator , T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 2021}
{"input": "main ( ) { int i , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { int c = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { if ( a [ i ] <= a [ j ] ) { c ++ ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 2022}
{"input": "int main ( ) { int x , a [ <int> ] [ <int> ] , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x ) ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = x - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2023}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int x , min = INT_MAX ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; if ( min > x ) min = x ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2024}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a == <int> ) return b ; if ( b == <int> ) return a ; else { if ( a % <int> == <int> && b % <int> == <int> ) return <int> * ( gcd ( a / <int> , b / <int> ) ) ; else if ( a % <int> == <int> && b % <int> != <int> ) return gcd ( a / <int> , b ) ; if ( a % <int> != <int> && b % <int> == <int> ) return gcd ( a , b / <int> ) ; if ( a % <int> != <int> && b % <int> != <int> ) if ( a > b ) return gcd ( ( a - b ) / <int> , b ) ; else return gcd ( ( b - a ) / <int> , a ) ; } } int main ( ) { int t , a , b , hcf ; long long int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } }", "label": 1, "id": 2025}
{"input": "int main ( ) { int testcase ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { int a [ <int> ] , i , n , j , k , sum = <int> , sum1 = <int> , ans ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int min = a [ <int> ] , max = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min >= a [ i ] ) min = a [ i ] ; if ( a [ i ] <= a [ i + <int> ] ) sum1 = sum1 + a [ i ] ; else sum = sum + min ; } ans = sum1 + sum ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 2026}
{"input": "int main ( void ) { int t = <int> ; long long int a = <int> , b = <int> , temp = <int> ; long long int lcm = <int> , gcd = <int> , i = <int> , j = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { lcm = gcd = <int> ; temp = <int> ; scanf ( <str> , & a , & b ) ; i = a ; j = b ; if ( b > a ) { temp = b ; b = a ; a = temp ; } temp = <int> ; while ( b != <int> && a != <int> ) { temp = b ; a %= b ; b = a ; a = temp ; } gcd = a == <int> ? b : a ; lcm = gcd * ( i / gcd ) * ( j / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 2027}
{"input": "int main ( ) { int t , n , i , c ; scanf ( <str> , & t ) ; while ( t -- ) { int sum = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { c = a [ i + <int> ] ; } else { c = a [ i ] ; } sum += c ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 2028}
{"input": "struct node { int wt ; int row ; } tri [ SZ ] ; int main ( void ) { int n ; int num_rows , num_elem , last_row_index ; int i , row , j ; int max_sum , sum , chosen , chosen1 , chosen2 ; int input ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & num_rows ) ; num_elem = ( num_rows * ( num_rows + <int> ) ) / <int> ; last_row_index = ( ( num_rows - <int> ) * num_rows ) / <int> ; for ( i = <int> , row = <int> , j = row ; i < num_elem ; i ++ ) { scanf ( <str> , & input ) ; tri [ i ] <fp> wt = input ; tri [ i ] <fp> row = row ; j -- ; if ( j < <int> ) { row ++ ; j = row ; } } row -= <int> ; max_sum = - <int> ; for ( i = num_elem - <int> ; i >= last_row_index ; i -- ) { sum = tri [ i ] <fp> wt ; chosen = i ; for ( j = row ; j > <int> ; j -- ) { chosen1 = chosen - j + <int> ; chosen2 = chosen - j ; chosen = chosen1 ; if ( ( tri [ chosen1 ] <fp> row != j - <int> ) || ( ( chosen2 > - <int> ) && ( tri [ chosen2 ] <fp> row == j - <int> ) && ( tri [ chosen ] <fp> wt < tri [ chosen2 ] <fp> wt ) ) ) { chosen = chosen2 ; } sum += tri [ chosen ] <fp> wt ; } if ( sum > max_sum ) { max_sum = sum ; } } printf ( <str> , max_sum ) ; n -- ; } }", "label": 1, "id": 2029}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] , dp [ n ] [ n ] ; int i ; int j ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= n ; j ++ ) { a [ i ] [ j ] = <int> ; dp [ i ] [ j ] = <int> ; } for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i <= n ; i ++ ) dp [ i ] [ <int> ] = <int> ; dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) dp [ i ] [ j ] = max ( dp [ i - <int> ] [ j ] , dp [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; int ans = dp [ n ] [ <int> ] ; for ( i = n , j = <int> ; j < n ; j ++ ) ans = dp [ i ] [ j ] > ans ? dp [ i ] [ j ] : ans ; printf ( <str> , ans ) ; t -- ; } return <int> ; }", "label": 3, "id": 2030}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t > <int> ) { int counter = <int> ; scanf ( <str> , & n ) ; int array [ n ] ; int j = <int> , i = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & array [ j ] ) ; for ( j = i ; j < n ; j ++ ) { if ( j - i > <int> ) { if ( array [ j - <int> ] <= array [ j ] ) { counter ++ ; } else { break ; } } else { if ( array [ i ] <= array [ j ] ) { counter ++ ; } else { break ; } } } } printf ( <str> , counter ) ; t -- ; } return <int> ; }", "label": 1, "id": 2031}
{"input": "int gc ; void gcd ( int a , int b ) { int i ; for ( i = <int> ; i < a && i < b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gc = i ; } printf ( <str> , gc ) ; } void lcm ( int a , int b ) { printf ( <str> , a * b / gc ) ; } int main ( ) { int t , i , f ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; gcd ( a , b ) ; lcm ( a , b ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 2032}
{"input": "int main ( ) { int i , a , b , gcd , lcm , temp ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; a = abs ( a ) ; b = abs ( b ) ; if ( a == <int> || b == <int> ) lcm = <int> ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2033}
{"input": "int main ( ) { int t , n , max , i , j ; s ( t ) ; while ( t -- ) { s ( n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } arr [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] ; arr [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; else if ( j == i ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; else { if ( arr [ i - <int> ] [ j - <int> ] >= arr [ i - <int> ] [ j ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; } } } max = arr [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( arr [ n - <int> ] [ j ] > max ) max = arr [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2034}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int a [ n ] , i ; long long int s = <int> , min ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= min ) { min = a [ i ] ; s = s + min ; } else { s = s + min ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 2035}
{"input": "int max ( int a , int b ) { int c ; c = a - b ; if ( c >= <int> ) return a ; else return b ; } main ( ) { int n , size ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & size ) ; int a [ size ] [ size ] , i , k ; for ( i = <int> ; i < size ; i ++ ) { for ( k = <int> ; k <= i ; k ++ ) { scanf ( <str> , & a [ i ] [ k ] ) ; } } i = size - <int> ; while ( i >= <int> ) { for ( k = <int> ; k <= i ; k ++ ) { a [ i ] [ k ] = max ( a [ i ] [ k ] + a [ i + <int> ] [ k ] , a [ i ] [ k ] + a [ i + <int> ] [ k + <int> ] ) ; } i -- ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 2036}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , i , j , n , k , p = <int> , t ; scanf ( <str> , & n ) ; for ( t = <int> ; t <= n ; t ++ ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j > <int> && j < i ) { if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } if ( j == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; if ( j = i ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; } } for ( j = <int> ; j < k ; j ++ ) { if ( a [ k - <int> ] [ j ] > p ) p = a [ k - <int> ] [ j ] ; } printf ( <str> , p ) ; } printf ( <str> ) ; return <int> ; }", "label": 1, "id": 2037}
{"input": "int main ( void ) { int t , b , n , i ; long long int cost ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { cost += a [ i + <int> ] ; b = a [ i ] ; } else { cost += a [ i ] ; a [ i ] = a [ i + <int> ] ; } } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 2038}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] >= arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 2039}
{"input": "long int gcd ( long int a , long int b ) { while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } return a ; } int main ( ) { int t ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 0, "id": 2040}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T > <int> ) { int N ; scanf ( <str> , & N ) ; int arr [ N ] ; int i , min = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( <str> , min * ( N - <int> ) ) ; T -- ; } return <int> ; }", "label": 0, "id": 2041}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int i , j , n , test , k = <int> ; scanf ( <str> , & test ) ; do { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { arr [ i ] [ <int> ] = arr [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ; } for ( i = <int> ; i <= n ; i ++ ) { arr [ i ] [ i ] = arr [ i ] [ i ] + arr [ i - <int> ] [ i - <int> ] ; } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( arr [ i - <int> ] [ j - <int> ] > arr [ i - <int> ] [ j ] ) { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; } else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; } } int max = - <int> ; for ( j = <int> ; j <= n ; j ++ ) { if ( arr [ n ] [ j ] > max ) max = arr [ n ] [ j ] ; } printf ( <str> , max ) ; k ++ ; } while ( k <= test ) ; return <int> ; }", "label": 3, "id": 2042}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] , cases , lines , i , j , sum , <unk> ; scanf ( <str> , & cases ) ; while ( cases ) { cases -- ; scanf ( <str> , & lines ) ; sum = <int> ; memset ( arr , <int> , sizeof ( arr [ <int> ] [ <int> ] ) * <int> * lines ) ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & <unk> ) ; arr [ i ] [ j ] += <unk> ; } for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { arr [ i + <int> ] [ <int> ] += arr [ i ] [ <int> ] ; } if ( arr [ i ] [ j ] >= arr [ i ] [ j + <int> ] ) { arr [ i + <int> ] [ j + <int> ] += arr [ i ] [ j ] ; } else arr [ i + <int> ] [ j + <int> ] += arr [ i ] [ j + <int> ] ; } } for ( j = <int> ; j < lines ; j ++ ) { if ( sum < arr [ lines - <int> ] [ j ] ) sum = arr [ lines - <int> ] [ j ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 2043}
{"input": "int main ( void ) { long int t , i , n , min , a ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2044}
{"input": "int main ( ) { long long int t , i ; long long a , b , x , y , r ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { r = a % b ; a = b ; b = r ; } printf ( <str> , a , x * y / a ) ; } return <int> ; }", "label": 0, "id": 2045}
{"input": "int main ( ) { int i , j , t , n , arr [ i ] [ j ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } if ( n == <int> ) printf ( <str> , arr [ <int> ] [ <int> ] ) ; else if ( n == <int> ) printf ( <str> , ( arr [ <int> ] [ <int> ] > arr [ <int> ] [ <int> ] ? arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] : arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] ) ) ; else { for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] += ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , ( arr [ <int> ] [ <int> ] > arr [ <int> ] [ <int> ] ? arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] : arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] ) ) ; } } return <int> ; }", "label": 3, "id": 2046}
{"input": "long long a [ <int> ] ; int main ( void ) { long long t , n , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } for ( i = <int> ; i < n - <int> ; i ++ ) min *= min ; printf ( <str> , min ) ; } return <int> ; }", "label": 1, "id": 2047}
{"input": "int GCD ( int a , int b ) { if ( b == <int> ) return a ; return GCD ( b , a % b ) ; } int main ( ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = GCD ( a , b ) ; l = ( int ) a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 2048}
{"input": "void initialize ( int lines ) ; int findSum ( int matrix [ <int> ] [ <int> ] , int lines ) ; int max ( int a , int b ) ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int findSum ( int matrix [ <int> ] [ <int> ] , int lines ) { int i = <int> ; while ( lines > <int> ) { for ( i = <int> ; i <= lines - <int> ; i ++ ) { matrix [ lines - <int> ] [ i ] = matrix [ lines - <int> ] [ i ] + max ( matrix [ lines - <int> ] [ i ] , matrix [ lines - <int> ] [ i + <int> ] ) ; } lines -- ; } return matrix [ <int> ] [ <int> ] ; } void initialize ( int lines ) { int matrix [ <int> ] [ <int> ] ; int i = <int> ; int a = <int> ; int val = <int> ; for ( ; i < lines ; i ++ ) { for ( ; a < lines ; a ++ ) { if ( a > i ) matrix [ i ] [ a ] = <int> ; else { scanf ( <str> , & matrix [ i ] [ a ] ) ; if ( matrix [ i ] [ a ] > <int> || matrix [ i ] [ a ] < <int> ) return ; } } a = <int> ; } val = findSum ( matrix , lines ) ; printf ( <str> , val ) ; } int main ( ) { int cases = <int> ; int lines = <int> ; int i = <int> ; scanf ( <str> , & cases ) ; if ( lines < <int> || lines > <int> ) { return - <int> ; } for ( ; i < cases ; i ++ ) { scanf ( <str> , & lines ) ; initialize ( lines ) ; } return <int> ; }", "label": 1, "id": 2049}
{"input": "void main ( ) { int i , j , s , z , k , h , t , a [ <int> ] [ <int> ] , m ; scanf ( <str> , & t ) ; while ( t -- ) { h = <int> , z = <int> ; scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } while ( z < m ) { s = a [ <int> ] [ <int> ] , i = <int> , j = <int> ; for ( k = <int> ; k <= m - <int> - z ; k ++ ) { s = s + a [ ++ i ] [ j ] ; } for ( k = <int> ; k <= z ; k ++ ) { s = s + a [ ++ i ] [ ++ j ] ; } if ( s > h ) h = s ; z ++ ; } printf ( <str> , h ) ; } }", "label": 1, "id": 2050}
{"input": "long int find_gcm ( long int , long int ) ; int main ( ) { unsigned int T , i ; T = i = <int> ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { long int A , B , O ; A = B = O = <int> ; scanf ( <str> , & A , & B ) ; O = find_gcm ( A , B ) ; printf ( <str> , O ) ; printf ( <str> , ( A * B / O ) ) ; } return <int> ; } long int find_gcm ( long int A , long int B ) { while ( A != B ) { if ( A > B ) A = A - B ; else B = B - A ; } return A ; }", "label": 0, "id": 2051}
{"input": "int main ( ) { int t ; long int a [ <int> ] , n , i , count , min ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } count = min * ( n - <int> ) ; printf ( <str> , count ) ; t -- ; } return <int> ; }", "label": 0, "id": 2052}
{"input": "int main ( ) { int nTestCases ; int nArrIntegers [ <int> ] , nIntegerCount , nMinCost ; int i , nSmallestInt = <int> ; scanf ( <str> , & nTestCases ) ; while ( nTestCases != <int> ) { scanf ( <str> , & nIntegerCount ) ; PRINTD ( <str> , nIntegerCount ) ; for ( i = <int> ; i <= nIntegerCount - <int> ; i ++ ) { scanf ( <str> , & nArrIntegers [ i ] ) ; PRINTD ( <str> , nArrIntegers [ i ] ) ; if ( nArrIntegers [ i ] < nSmallestInt ) { nSmallestInt = nArrIntegers [ i ] ; } } nMinCost = nSmallestInt * ( nIntegerCount - <int> ) ; printf ( <str> , nMinCost ) ; nTestCases -- ; } return <int> ; }", "label": 1, "id": 2053}
{"input": "int main ( void ) { int cases , lines , vals [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i <= lines ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vals [ i ] [ j ] ) ; for ( i = lines ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( vals [ i ] [ j ] < vals [ i ] [ j + <int> ] ) vals [ i - <int> ] [ j ] = vals [ i - <int> ] [ j ] + vals [ i ] [ j + <int> ] ; else vals [ i - <int> ] [ j ] = vals [ i - <int> ] [ j ] + vals [ i ] [ j ] ; } } printf ( <str> , vals [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 2054}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , temp ; int arr [ <int> ] ; int cost = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < <int> ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } } cost = abs ( cost + ( n - <int> ) * arr [ <int> ] ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 2055}
{"input": "int main ( ) { int t , n1 , n2 , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } printf ( <str> , gcd , ( n1 * n2 ) / <int> * gcd ) ; } return <int> ; }", "label": 2, "id": 2056}
{"input": "void main ( ) { int T , N , i , j , maxSum ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; int Triangle [ N ] [ N ] , SumTri [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & Triangle [ i ] [ j ] ) ; SumTri [ i ] [ j ] = <int> ; } SumTri [ <int> ] [ <int> ] = Triangle [ <int> ] [ <int> ] ; if ( N > <int> ) { SumTri [ <int> ] [ <int> ] = SumTri [ <int> ] [ <int> ] + Triangle [ <int> ] [ <int> ] ; SumTri [ <int> ] [ <int> ] = SumTri [ <int> ] [ <int> ] + Triangle [ <int> ] [ <int> ] ; } for ( i = <int> ; i < N ; i ++ ) { SumTri [ i ] [ <int> ] = SumTri [ i - <int> ] [ <int> ] + Triangle [ i ] [ <int> ] ; SumTri [ i ] [ i ] = SumTri [ i - <int> ] [ i - <int> ] + Triangle [ i ] [ i ] ; } for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { if ( Triangle [ i - <int> ] [ j ] > Triangle [ i - <int> ] [ j - <int> ] ) SumTri [ i ] [ j ] = SumTri [ i - <int> ] [ j ] + Triangle [ i ] ; else SumTri [ i ] [ j ] = SumTri [ i - <int> ] [ j - <int> ] + Triangle [ i ] [ j ] ; } maxSum = SumTri [ N - <int> ] [ <int> ] ; for ( i = <int> ; i <= N ; i ++ ) if ( SumTri [ N - <int> ] [ i ] > maxSum ) maxSum = SumTri [ N - <int> ] [ i ] ; printf ( <str> , maxSum ) ; } }", "label": 1, "id": 2057}
{"input": "int main ( ) { int i , j , a , b , greater , test , GCD ; long int LCM ; scanf ( <str> , & test ) ; while ( test -- ) { printf ( <str> ) ; scanf ( <str> , & a , & b ) ; if ( a > b ) greater = a ; else greater = b ; for ( i = <int> ; i <= greater ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) GCD = i ; } LCM = ( a * b ) / GCD ; printf ( <str> , a , b , GCD , LCM ) ; } return <int> ; }", "label": 2, "id": 2058}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] = { <int> } , k ; long int max , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } max = <int> ; for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { max = a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; a [ i - <int> ] [ j ] += max ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2059}
{"input": "int main ( ) { int i , j , n , t , s = <int> , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } s = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i - <int> ; j <= i ; j ++ ) { s += arr [ i ] [ j ] ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 2060}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , m , g , lcm ; scanf ( <str> , & n , & m ) ; g = gcd ( n , m ) ; lcm = n * m / g ; printf ( <str> , g , lcm ) ; } return <int> ; }", "label": 1, "id": 2061}
{"input": "int main ( ) { int t , n , a [ <int> ] , i ; scanf ( <str> , & t ) ; while ( t -- ) { int cost = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { a [ i ] = a [ i + <int> ] ; cost += a [ i ] ; } else { a [ i + <int> ] = a [ i ] ; cost += a [ i ] ; } } printf ( <str> , cost ) ; } }", "label": 1, "id": 2062}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int sum = <int> , i , n , arr [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] ) sum += arr [ i ] ; else sum += arr [ i + <int> ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 2063}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , M = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { b [ i ] [ j ] = <int> ; a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] + b [ i - <int> ] [ j ] >= a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ) { b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; } else b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; } } M = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( b [ n ] [ i ] > M ) M = b [ n ] [ i ] ; } printf ( <str> , M ) ; } return <int> ; }", "label": 0, "id": 2064}
{"input": "int main ( void ) { long long int t , n , ar [ <int> ] = { <int> } , count [ <int> ] = { <int> } ; ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int i = <int> ; while ( ( ( i ^ n ) != <int> ) ) { scanf ( <str> , & ar [ i ] ) ; i ++ ; } i = <int> ; count [ <int> ] = <int> ; long long int k = <int> ; while ( ( i ^ n ) != <int> ) { if ( ar [ i + <int> ] >= ar [ i ] ) { count [ k ] ++ ; } else { k ++ ; count [ k ] = <int> ; } i ++ ; } i = <int> ; long long int sum = <int> ; while ( ( i ^ k ) != <int> ) { sum += ( count [ i ] * ( count [ i ] + <int> ) ) / <int> ; i ++ ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 2065}
{"input": "int sum ( int a [ <int> ] [ <int> ] , int i , int j , int n , int b [ <int> ] [ <int> ] ) { int s ; if ( i > n ) return <int> ; if ( b [ i ] [ j ] != <int> ) return b [ i ] [ j ] ; int s1 = sum ( a , i + <int> , j , n , b ) ; int s2 = sum ( a , i + <int> , j + <int> , n , b ) ; if ( s1 > s2 ) { s = s1 + a [ i ] [ j ] ; } else { s = s2 + a [ i ] [ j ] ; } b [ i ] [ j ] = s ; return s ; } int main ( ) { int a [ <int> ] [ <int> ] , n , i , j , no , t , b [ <int> ] [ <int> ] ; scanf ( <str> , & no ) ; for ( t = <int> ; t < no ; t ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } scanf ( <str> ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { b [ i ] [ j ] = <int> ; } } int ans = sum ( a , <int> , <int> , n , b ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 2066}
{"input": "int getGcd ( int a , int b ) { if ( b == <int> ) return a ; else return getGcd ( b , a % b ) ; } int main ( ) { int t , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { int x , y ; scanf ( <str> , & x , & y ) ; gcd = getGcd ( x , y ) ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2067}
{"input": "int a [ <int> ] , <unk> [ <int> ] ; long long <unk> [ <int> ] ; int main ( ) { int T , N , i ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , a + i ) ; <unk> [ <int> ] = <int> ; <unk> [ <int> ] = <int> ; for ( i = <int> ; i < N ; i ++ ) if ( a [ i ] >= a [ i - <int> ] ) { <unk> [ i ] = <unk> [ i - <int> ] ; <unk> [ i ] = <unk> [ i - <int> ] + i - <unk> [ i ] + <int> ; } else { <unk> [ i ] = i ; <unk> [ i ] = <unk> [ i - <int> ] + <int> ; } printf ( <str> , <unk> [ N - <int> ] ) ; } return <int> ; }", "label": 1, "id": 2068}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; } return <int> ; }", "label": 0, "id": 2069}
{"input": "int main ( ) { int maxim , n , line , i , j ; int Arr [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & line ) ; i = <int> ; for ( i ; i < line ; i ++ ) { j = <int> ; for ( j ; j <= i ; j ++ ) { scanf ( <str> , & Arr [ i ] [ j ] ) ; } } if ( line == <int> ) printf ( <str> , Arr [ <int> ] [ <int> ] ) ; else for ( i = <int> ; i < line ; i ++ ) { j = <int> ; for ( j ; j <= i ; j ++ ) { Arr [ i ] [ j ] += max ( Arr [ i - <int> ] [ j - <int> ] , Arr [ i - <int> ] [ j ] ) ; } } j = <int> ; maxim = <int> ; for ( j ; j < line ; j ++ ) { if ( Arr [ line - <int> ] [ j ] > maxim ) maxim = Arr [ line - <int> ] [ j ] ; } printf ( <str> , maxim ) ; } return <int> ; } int max ( int a , int b ) { return ( a > b ? a : b ) ; }", "label": 1, "id": 2070}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int <unk> ( int t [ <int> ] [ <int> ] , int i , int j , int l ) { if ( i == l || j == l ) return <int> ; return t [ i ] [ j ] + max ( <unk> ( t , i + <int> , j , l ) , <unk> ( t , i + <int> , j + <int> , l ) ) ; } void sumtri ( ) { int l = <int> ; scanf ( <str> , & l ) ; int t [ <int> ] [ <int> ] = { <int> , } ; int i , j ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & t [ i ] [ j ] ) ; int sum = <unk> ( t , <int> , <int> , l ) ; printf ( <str> , sum ) ; return ; } int main ( ) { int T , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) sumtri ( ) ; return <int> ; }", "label": 2, "id": 2071}
{"input": "int main ( ) { int x , y , n ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & x , & y ) ; n -- ; int flag1 = <int> , i , store2 , store1 ; if ( x > y ) { for ( i = <int> ; i <= y ; i ++ ) { if ( x % i == <int> && y % i == <int> ) { flag1 = <int> ; store1 = i ; break ; } } } else if ( y > x ) { for ( i = <int> ; i <= x * y ; i ++ ) { if ( x % i == <int> && y % i == <int> ) { flag1 = <int> ; store1 = i ; break ; } } } store2 = ( x * y ) / store1 ; if ( flag1 == <int> ) printf ( <str> , store1 , store2 ) ; else printf ( <str> , x , y ) ; } }", "label": 1, "id": 2072}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , x , y , i , j , n , times ; scanf ( <str> , & times ) ; while ( times -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { x = a [ i + <int> ] [ j ] ; y = a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = a [ i ] [ j ] + ( x > y ? x : y ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 2073}
{"input": "long int gcd ( long int x , long int y ) { if ( x % y == <int> ) return y ; else return gcd ( y , x % y ) ; } int main ( void ) { long int t , a , b , l , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 2074}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , a ) ; else return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; }", "label": 1, "id": 2075}
{"input": "int main ( ) { int t , i , a [ <int> ] , n , sum , pos , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < <int> ; i ++ ) a [ i ] = <int> ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < ( n * ( n + <int> ) ) / <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; sum = a [ <int> ] ; pos = <int> ; for ( j = <int> ; j < n ; j ++ ) { pos += j ; if ( a [ pos ] > a [ pos + <int> ] ) sum += a [ pos ] ; else sum += a [ ++ pos ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 2076}
{"input": "int main ( ) { int q , t ; scanf ( <str> , & t ) ; for ( q = <int> ; q < t ; q ++ ) { long int a , b , i , c , d ; scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( i = b ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { c = i ; break ; } } } else { for ( i = a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { c = i ; break ; } } } d = ( a * b ) / c ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 2, "id": 2077}
{"input": "int Greatest ( int , int ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd = <int> , lcm ; scanf ( <str> , & a , & b ) ; gcd = Greatest ( a , b ) ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int Greatest ( int a , int b ) { if ( a == <int> && b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return Greatest ( a - b , b ) ; return Greatest ( a , b - a ) ; }", "label": 1, "id": 2078}
{"input": "long gcd ( int m , int n ) { if ( n == <int> ) return m ; return gcd ( n , m % n ) ; } int main ( void ) { int N , i ; long a , b , ans ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a , & b ) ; ans = gcd ( a , b ) ; printf ( <str> , ans , ( a * b / ans ) ) ; } return <int> ; }", "label": 0, "id": 2079}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 1, "id": 2080}
{"input": "int main ( ) { int A , B , c , d , g , l , T ; scanf ( <str> , & T ) ; if ( T > <int> || T < <int> ) return <int> ; else { for ( c = <int> ; c <= T ; c ++ ) { scanf ( <str> , & A , & B ) ; if ( A < B ) d = A ; else d = B ; again : if ( A % d == <int> && B % d == <int> ) g = d ; else { d = d + <int> ; goto again ; } l = A * B / g ; printf ( <str> , g , l ) ; } } return <int> ; }", "label": 2, "id": 2081}
{"input": "int sum_n ( int n ) { return ( n * ( n + <int> ) / <int> ) ; } int row_num ( int index ) { int row = <int> ; while ( ( row * ( row + <int> ) / <int> ) <= index ) { row ++ ; } return row ; } void sumtrian ( int * a , int index , int sum , int n , int * answer ) { if ( row_num ( index ) <= n ) { sum = sum + a [ index ] ; if ( row_num ( index ) == n ) { if ( * answer < sum ) { * answer = sum ; } } sumtrian ( a , index + row_num ( index ) , sum , n , answer ) ; sumtrian ( a , index + row_num ( index ) + <int> , sum , n , answer ) ; } } int main ( ) { int m , i , a [ <int> ] , row , sum [ <int> ] , j , flag = <int> ; scanf ( <str> , & m ) ; if ( m >= <int> && m <= <int> ) for ( i = <int> ; i < m ; i ++ ) { sum [ i ] = <int> ; flag = <int> ; scanf ( <str> , & row ) ; if ( row > <int> && row < <int> ) { for ( j = <int> ; j < sum_n ( row ) ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] <= <int> && a [ j ] > <int> ) { flag = <int> ; break ; } } if ( flag == <int> ) sumtrian ( a , <int> , <int> , row , & sum [ i ] ) ; } } for ( i = <int> ; i < m ; i ++ ) { printf ( <str> , sum [ i ] ) ; } return <int> ; }", "label": 2, "id": 2082}
{"input": "void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = <int> ; if ( a [ i ] < min ) { min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 1, "id": 2083}
{"input": "int main ( ) { int add [ <int> ] , i , j , lines , k , test , sum = <int> , n , large = <int> , cout = <int> , p [ <int> ] ; scanf ( <str> , & test ) ; add [ <int> ] = <int> ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { cout ++ ; for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & n ) ; sum = sum + n ; if ( sum > large ) { large = sum ; p [ i ] = cout ; } else if ( sum == large ) { large = sum ; p [ i ] = cout - <int> ; } } sum = <int> ; } } for ( i = <int> ; i < test ; i ++ ) { printf ( <str> , p [ i ] + test + i ) ; } return <int> ; }", "label": 1, "id": 2084}
{"input": "int arr [ <int> ] [ <int> ] = { } ; static int max ; void sums ( int , int , int , int ) ; int main ( ) { int t , i , n , j , k ; scanf ( <str> , & t ) ; if ( t < <int> || t > <int> ) return <int> ; for ( i = <int> ; i < t ; i ++ ) { max = <int> ; scanf ( <str> , & n ) ; if ( n < <int> || n > <int> ) return <int> ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } sums ( <int> , <int> , <int> , n ) ; printf ( <str> , max ) ; } return <int> ; } void sums ( int a , int b , int sum , int n ) { if ( a == n || b == n ) { if ( sum > max ) max = sum ; return ; } sum += arr [ a ] [ b ] ; if ( a == n - <int> && arr [ a ] [ b ] >= arr [ a ] [ b + <int> ] ) sums ( a + <int> , b , sum , n ) ; else if ( a == n - <int> && arr [ a ] [ b ] < arr [ a ] [ b + <int> ] ) sums ( a + <int> , b + <int> , sum , n ) ; else { sums ( a + <int> , b , sum , n ) ; sums ( a + <int> , b + <int> , sum , n ) ; } }", "label": 2, "id": 2085}
{"input": "struct node { int data ; struct node * next ; } ; typedef struct node NODE ; NODE * head = NULL ; NODE * create ( int ) ; int clear ( ) ; NODE * insert ( int ) ; int sum = <int> ; int main ( ) { int t , n ; int i = <int> , key ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; head = create ( n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & key ) ; head = insert ( key ) ; } sum = clear ( ) ; printf ( <str> , key ) ; } return <int> ; } NODE * create ( int n ) { NODE * p , * q = head ; int i = <int> ; for ( i = <int> ; i < n ; i ++ ) { p = ( NODE * ) malloc ( sizeof ( NODE ) ) ; p -> data = <int> ; p -> next = NULL ; if ( head == NULL ) head = p ; else { while ( q -> next != NULL ) q = q -> next ; q -> next = p ; } } return head ; } NODE * insert ( int n ) { NODE * p = head ; while ( p -> next != NULL ) { if ( p -> data == <int> ) { p -> data = n ; break ; } p = p -> next ; } return head ; } int clear ( ) { NODE * p , * q = head ; int key ; p = head -> next ; while ( q -> next != NULL ) { if ( p -> data >= q -> data ) { key = p -> data ; q -> next = p -> next ; free ( p ) ; p = q -> next ; } else { key = q -> data ; head = p ; free ( q ) ; q = head ; p = p -> next ; } sum = sum + key ; } return sum ; }", "label": 3, "id": 2086}
{"input": "int main ( ) { int t , a , b , c , i , gcd [ <int> ] , lcm [ <int> ] , mlt ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; mlt = a * b ; while ( <int> ) { c = b % a ; b = a ; a = c ; if ( a == <int> ) { break ; } } gcd [ i ] = b ; lcm [ i ] = mlt / gcd [ i ] ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } }", "label": 1, "id": 2087}
{"input": "int main ( ) { int t , i , nn ; scanf ( <str> , & t ) ; char N [ <int> ] ; while ( t -- ) { long long int s = <int> ; scanf ( <str> , & nn ) ; for ( i = <int> ; i < nn ; i ++ ) { scanf ( <str> , & N [ i ] ) ; } for ( i = <int> ; i < nn ; i ++ ) if ( N [ i ] > N [ i + <int> ] ) s = s + N [ i + <int> ] ; else s = s + N [ i ] ; printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 2088}
{"input": "int main ( void ) { int n , m , i ; scanf ( <str> , & m ) ; while ( m > <int> && m <= <int> ) for ( i = <int> ; i < m ; i ++ ) { scanf ( <str> , & n ) ; int A [ <int> ] , B , c = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } B = A [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( B < A [ i ] ) { c = c + B ; } else { c = c + A [ i ] ; B = A [ i ] ; } } printf ( <str> , c ) ; m -- ; } return <int> ; }", "label": 1, "id": 2089}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } void <unk> ( ) { int arr [ <int> ] [ <int> ] , i = <int> , j = <int> , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { arr [ i - <int> ] [ j ] += max ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } int main ( ) { int t = <int> , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { <unk> ( ) ; } }", "label": 0, "id": 2090}
{"input": "int main ( ) { int t , a , b , hcf = <int> , lcm = <int> , n ; scanf ( <str> , & t ) ; while ( t -- ) { hcf = <int> ; lcm = <int> ; scanf ( <str> , & a , & b ) ; n = ( a > b ) ? a : b ; for ( int i = ( n / <int> ) ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { hcf *= i ; a /= i ; b /= i ; } } for ( int i = ( n / <int> ) ; i > <int> ; i -- ) { if ( a % i == <int> ) { lcm *= i ; a /= i ; } if ( b % i == <int> ) { lcm *= i ; b /= i ; } } lcm = lcm * hcf * a * b ; printf ( <str> , hcf , lcm ) ; } }", "label": 2, "id": 2091}
{"input": "int max ( int t1 , int t2 ) ; int solve ( int i , int j ) ; int arr [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] , n ; int main ( ) { int a ; scanf ( <str> , & a ) ; while ( a -- ) { int t , i = <int> , j ; scanf ( <str> , & n ) ; for ( t = <int> ; t <= n ; t ++ ) { for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } i ++ ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { cache [ i ] [ j ] = <int> ; } } printf ( <str> , solve ( <int> , <int> ) ) ; } } int solve ( int i , int j ) { int t , t1 , t2 ; if ( i > n ) return <int> ; if ( cache [ i ] [ j ] != <int> ) return cache [ i ] [ j ] ; t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = arr [ i ] [ j ] + max ( t1 , t2 ) ; cache [ i ] [ j ] = t ; return t ; } int max ( int t1 , int t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; }", "label": 1, "id": 2092}
{"input": "int a [ <int> ] ; int main ( ) { int t , i , n , j , s , b ; long long int c ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; s = <int> ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } b = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( b > a [ j ] ) { b = a [ j ] ; } } c = b * ( n - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 2093}
{"input": "int main ( ) { int t , n , s , i , size , k , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; size = n ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; s = <int> ; while ( size != <int> ) { if ( a [ i ] >= a [ i + <int> ] ) { s += a [ i + <int> ] ; a [ i ] = a [ i + <int> ] ; } else { s += a [ i ] ; } for ( k = <int> ; k < n ; k ++ ) { a [ k ] = a [ k + <int> ] ; } size -- ; } printf ( <str> , s ) ; } return <int> ; }", "label": 2, "id": 2094}
{"input": "int main ( ) { int t , i , n , min , a [ <int> ] ; long long int sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = n - <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( <str> , sum * min ) ; } return <int> ; }", "label": 0, "id": 2095}
{"input": "int main ( ) { int n , l , i , j , k , max , A [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; max = A [ l - <int> ] [ j ] ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) A [ i ] [ j ] += A [ i - <int> ] [ j ] ; else { A [ i ] [ j ] += ( A [ i - <int> ] [ j ] > A [ i - <int> ] [ j - <int> ] ? A [ i - <int> ] [ j ] : A [ i - <int> ] [ j - <int> ] ) ; if ( i == l - <int> ) { if ( A [ i ] [ j ] > max ) max = A [ i ] [ j ] ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 2096}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , ans ; scanf ( <str> , & n ) ; int a [ n ] ; scanf ( <str> , & a [ <int> ] ) ; ans = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( ans > a [ i ] ) { ans = a [ i ] ; } } printf ( <str> , ( n - <int> ) * ans ) ; } return <int> ; }", "label": 0, "id": 2097}
{"input": "int main ( ) { int a , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; int i = <int> , j = <int> , b [ a ] [ a ] , p = <int> ; for ( i = <int> ; i < a ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } for ( i = a - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( b [ i + <int> ] [ j ] > b [ i + <int> ] [ j + <int> ] ) b [ i ] [ j ] += b [ i + <int> ] [ j ] ; else b [ i ] [ j ] += b [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , b [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2098}
{"input": "int main ( ) { int t , i , j , n , a [ <int> ] , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) temp = a [ j ] ; } printf ( <str> , temp * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 2099}
{"input": "int read_int ( ) { int s = <int> ; char c ; while ( ( c = getchar_unlocked ( ) ) != <char> && c != <char> ) s = s * <int> + ( c - <char> ) ; return s ; } void write_int ( int n ) { char c [ <int> ] = { <char> } ; int j , i = <int> ; while ( n ) { c [ i ++ ] = n ; n = n / <int> ; } for ( j = i - <int> ; j >= <int> ; j -- ) putchar_unlocked ( c [ j ] + <char> ) ; } int sum ( int a [ <int> ] , int i , int j , int n ) { int m = i * ( i - <int> ) / <int> + j ; int max = - <int> , k , v1 , v2 ; if ( i == n - <int> ) if ( a [ m + i ] > a [ m + i + <int> ] ) return a [ m ] + a [ m + i ] ; else return a [ m ] + a [ m + i + <int> ] ; v1 = a [ m ] + sum ( a , i + <int> , j , n ) ; v2 = a [ m ] + sum ( a , i + <int> , j + <int> , n ) ; if ( v1 > v2 ) return v1 ; else return v2 ; } int main ( void ) { int t , n , a [ <int> ] ; int i ; t = read_int ( ) ; while ( t -- ) { n = read_int ( ) ; for ( i = <int> ; i <= n * ( n + <int> ) / <int> ; i ++ ) a [ i ] = read_int ( ) ; write_int ( sum ( a , <int> , <int> , n ) ) ; printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 2100}
{"input": "int main ( ) { int a , b , gcd , lcm , temp , numerator , denominator , t ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a >= <int> && a <= <int> && b >= <int> && b <= <int> ) { if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } while ( denominator != <int> ) { temp = denominator ; denominator = numerator % denominator ; numerator = temp ; } gcd = numerator ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } } } }", "label": 1, "id": 2101}
{"input": "int gcd ( a , b ) { if ( a % b == <int> ) return b ; if ( b % a == <int> ) return a ; if ( a > b ) return gcd ( b , a % b ) ; if ( b > a ) return gcd ( a , b % a ) ; } int lcm ( a , b ) { if ( a % b == <int> ) return a ; if ( b % a == <int> ) return b ; if ( a % b != <int> && b % a != <int> ) return ( a * b ) ; } main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 2102}
{"input": "int main ( void ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long int n , j ; long int num [ <int> ] ; scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) scanf ( <str> , & num [ j ] ) ; long long int answer = <int> ; long int start = <int> ; long int end = <int> ; j = <int> ; while ( j <= n ) { while ( ( num [ j ] <= num [ j + <int> ] ) && ( j < n ) ) { j ++ ; } end = j ; answer = answer + ( end - start + <int> ) * ( end - start + <int> ) / <int> ; j ++ ; start = j ; end = j ; } printf ( <str> , answer ) ; } return <int> ; }", "label": 0, "id": 2103}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , t , n , big ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else if ( i == j ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } } big = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i <= n - <int> ; i ++ ) { if ( a [ n - <int> ] [ i ] > big ) { big = a [ n - <int> ] [ i ] ; } } printf ( <str> , big ) ; t -- ; } return <int> ; }", "label": 3, "id": 2104}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n ; scanf ( <str> , & n ) ; int i = <int> ; long long int a [ n ] , min = <int> ; for ( ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; else if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2105}
{"input": "int main ( void ) { int a , b , n , i , x , y ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> ) ; x = a ; y = b ; while ( y != <int> ) { i = y ; y = x % y ; x = i ; } printf ( <str> , y , ( a * b ) / x ) ; } return <int> ; }", "label": 2, "id": 2106}
{"input": "void gcd ( long long a , long long b ) ; void lcm ( long long a , long long b ) ; main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { long long a , b ; scanf ( <str> , & a , & b ) ; gcd ( a , b ) ; lcm ( a , b ) ; } } void gcd ( long long a , long long b ) { long long c , i , z ; c = ( a >= b ) ? a : b ; for ( i = <int> ; i <= c ; i ++ ) { if ( a % i == <int> && b % i == <int> ) z = i ; } printf ( <str> , z ) ; } void lcm ( long long a , long long b ) { long long c , z ; c = ( a >= b ) ? a : b ; while ( <int> ) { if ( c % a == <int> && c % b == <int> ) { z = c ; break ; } c ++ ; } printf ( <str> , z ) ; }", "label": 2, "id": 2107}
{"input": "int main ( ) { int n , t , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 2108}
{"input": "int main ( ) { int t , r , a , b , x , y , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { r = b ; b = a % b ; a = r ; } g = a ; l = ( x * y ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 2109}
{"input": "int main ( void ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? ( a [ i + <int> ] [ j ] ) : ( a [ i + <int> ] [ j + <int> ] ) ) ; printf ( <str> , a [ <int> ] [ <int> ] , n , t ) ; } return <int> ; }", "label": 0, "id": 2110}
{"input": "int main ( ) { int i , j , a , * * x , lar , t ; scanf ( <str> , & t ) ; while ( t >= <int> ) { scanf ( <str> , & a ) ; x = ( int * * ) malloc ( sizeof ( int * ) * a ) ; for ( i = <int> ; i <= a ; i ++ ) { x [ i ] = ( int * ) malloc ( sizeof ( int ) * a ) ; } for ( i = <int> ; i <= a ; i ++ ) { for ( j = <int> ; j <= a ; j ++ ) { if ( j > i ) x [ i ] [ j ] = - <int> ; else scanf ( <str> , & x [ i ] [ j ] ) ; } } for ( i = <int> ; i <= a ; i ++ ) { for ( j = <int> ; j <= a ; j ++ ) { if ( i - <int> >= <int> ) { if ( j - <int> >= <int> ) { if ( x [ i - <int> ] [ j - <int> ] > x [ i - <int> ] [ j ] ) x [ i ] [ j ] += x [ i - <int> ] [ j - <int> ] ; else x [ i ] [ j ] += x [ i - <int> ] [ j ] ; } else x [ i ] [ j ] += x [ i - <int> ] [ j ] ; } } } for ( i = <int> , lar = x [ a ] [ <int> ] ; i <= a ; i ++ ) { if ( x [ a ] [ i ] > lar ) lar = x [ a ] [ i ] ; } printf ( <str> , lar ) ; t -- ; } return <int> ; }", "label": 1, "id": 2111}
{"input": "int sum ( int , char [ <int> ] [ <int> ] , int , int ) ; int max ( int , int ) ; int scanInt ( ) ; void printInt ( int ) ; int M [ <int> ] [ <int> ] ; int main ( ) { char a [ <int> ] [ <int> ] = { <int> } ; int n , r , o , p , q , temp ; n = scanInt ( n ) ; while ( n -- ) { r = scanInt ( ) ; for ( o = <int> ; o < r ; o ++ ) for ( q = <int> ; q <= o ; q ++ ) { a [ o ] [ q ] = ( char ) scanInt ( ) ; M [ o ] [ q ] = - <int> ; } printf ( <str> , sum ( r , a , <int> , <int> ) ) ; } } int sum ( int n , char a [ <int> ] [ <int> ] , int x , int y ) { char L1 [ <int> ] [ <int> ] , L2 [ <int> ] [ <int> ] ; int i , j , i1 , j1 , k , m = <int> ; if ( M [ x ] [ y ] >= <int> ) { return M [ x ] [ y ] ; } else { if ( n == <int> ) return a [ <int> ] [ <int> ] ; else if ( n == <int> ) return max ( a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] , a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; else { for ( i = <int> , i1 = <int> ; i < n ; i ++ , i1 ++ ) for ( j = <int> , j1 = <int> ; j < i ; j ++ , j1 ++ ) { L1 [ i1 ] [ j1 ] = a [ i ] [ j ] ; } for ( i = <int> , i1 = <int> ; i < n ; i ++ , i1 ++ ) for ( j = <int> , j1 = <int> ; j <= i ; j1 ++ , j ++ ) { L2 [ i1 ] [ j1 ] = a [ i ] [ j ] ; } M [ x ] [ y ] = a [ <int> ] [ <int> ] + max ( sum ( n - <int> , L1 , x , y + <int> ) , sum ( n - <int> , L2 , x + <int> , y + <int> ) ) ; return M [ x ] [ y ] ; } } } int max ( int a , int b ) { return ( a > b ) ? a : b ; } int scanInt ( ) { int x = <int> ; char ch ; ch = getchar ( ) ; while ( ch > <char> || ch < <char> ) { ch = getchar ( ) ; } while ( ch <= <char> && ch >= <char> ) { x = ( x << <int> ) + ( x << <int> ) + ch - <char> ; ch = getchar ( ) ; } return x ; } void printInt ( int x ) { int i = <int> ; char ch [ <int> ] ; while ( x > <int> ) { ch [ i ++ ] = ( char ) ( <char> + x ) ; x /= <int> ; } while ( i -- ) { putchar ( ch [ i ] ) ; } }", "label": 1, "id": 2112}
{"input": "int main ( ) { int t ; long long int n , a [ <int> ] , k , j , i ; scanf ( <str> , & t ) ; while ( t -- ) { j = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; k = n ; for ( i = <int> ; i < n ; i ++ ) { while ( a [ i + j ] <= a [ i + <int> + j ] ) { k ++ ; j ++ ; } j = <int> ; } printf ( <str> , k ) ; } return <int> ; }", "label": 1, "id": 2113}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 2114}
{"input": "long gcd ( int m , int n ) { if ( m < n ) return gcd ( n , m ) ; if ( m % n == <int> ) return n ; else return gcd ( n , m % n ) ; } long long lcm ( int m , int n ) { int i ; if ( n > m ) return lcm ( n , m ) ; if ( m % n == <int> ) return m ; for ( i = <int> ; i < n ; i ++ ) { if ( m % i == <int> && n % i == <int> ) { n /= i ; } } return ( m * n ) ; } int main ( ) { long a , b ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 2115}
{"input": "int mat [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int t = <int> , i = <int> , j = <int> , n = <int> , temp = <int> , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & mat [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp ) ; if ( j == <int> ) { mat [ i ] [ <int> ] = mat [ i - <int> ] [ <int> ] + temp ; } else if ( i == j ) { mat [ i ] [ j ] = mat [ i - <int> ] [ j - <int> ] + temp ; } else { mat [ i ] [ j ] = ( mat [ i - <int> ] [ j - <int> ] + temp ) > ( mat [ i - <int> ] [ j ] + temp ) ? ( mat [ i - <int> ] [ j - <int> ] + temp ) : ( mat [ i - <int> ] [ j ] + temp ) ; } } } max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( max < mat [ n - <int> ] [ i ] ) { max = mat [ n - <int> ] [ i ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2116}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int x [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & x [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( x [ i + <int> ] [ j ] > x [ i + <int> ] [ j + <int> ] ) { x [ i ] [ j ] = x [ i ] [ j ] + x [ i + <int> ] [ j ] ; } else x [ i ] [ j ] = x [ i ] [ j ] + x [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , x [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2117}
{"input": "void function ( void ) ; void function ( void ) { long long int i , a , b , j , z = <int> , c ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b ) ; z = z + b ; } } c = z / <int> ; printf ( <str> , c ) ; z = <int> ; c = <int> ; } int main ( void ) { int i , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { function ( ) ; } return <int> ; }", "label": 1, "id": 2118}
{"input": "int main ( ) { int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( <str> ) ; scanf ( <str> , & A , & B ) ; if ( A > B ) { denominator = A ; numerator = B ; } else { numerator = A ; denominator = B ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 2119}
{"input": "int main ( ) { int t , s ; scanf ( <str> , & t ) ; while ( t -- ) { int min , n ; scanf ( <str> , & s ) ; scanf ( <str> , & min ) ; int i = <int> ; for ( i = <int> ; i < s ; i ++ ) { scanf ( <str> , & n ) ; if ( n < min ) min = n ; } printf ( <str> , ( ( long long ) min ) * ( s - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2120}
{"input": "int main ( ) { int i , t , n , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] > a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ) a [ i - <int> ] [ j - <int> ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i - <int> ] [ j - <int> ] = a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 2121}
{"input": "char array [ <int> ] = { <int> } ; char sum [ <int> ] = { <int> } ; int maxUpto ( int lineNumber , int endPoint ) ; int pop ( int id , int i , int j ) ; void push ( int id , int i , int j , int num ) ; int main ( int argc , char * * argv ) { int noOfCases ; scanf ( <str> , & noOfCases ) ; while ( noOfCases -- ) { int N = <int> , tempSum = <int> , i = <int> , maxSum = <int> ; for ( i = <int> ; i < <int> ; i ++ ) { array [ i ] = <int> ; sum [ i ] = <int> ; } scanf ( <str> , & N ) ; for ( i = <int> ; i < N * ( N + <int> ) / <int> ; i ++ ) scanf ( <str> , & array [ i ] ) ; for ( i = <int> ; i < N ; i ++ ) { tempSum = maxUpto ( N - <int> , i ) ; if ( tempSum > maxSum ) maxSum = tempSum ; } printf ( <str> , maxSum ) ; } return <int> ; } int maxUpto ( int lineNumber , int endPoint ) { if ( pop ( <int> , lineNumber , endPoint ) != <int> ) return pop ( <int> , lineNumber , endPoint ) ; int i ; if ( lineNumber == <int> ) { push ( <int> , <int> , <int> , pop ( <int> , <int> , <int> ) ) ; return pop ( <int> , <int> , <int> ) ; } if ( endPoint == <int> ) { push ( <int> , lineNumber , <int> , ( pop ( <int> , lineNumber , <int> ) + maxUpto ( lineNumber - <int> , <int> ) ) ) ; return pop ( <int> , lineNumber , <int> ) ; } if ( endPoint <= lineNumber - <int> ) { int a = maxUpto ( lineNumber - <int> , endPoint - <int> ) ; int b = maxUpto ( lineNumber - <int> , endPoint ) ; int c = pop ( <int> , lineNumber , endPoint ) ; if ( a + c > b + c ) { push ( <int> , lineNumber , endPoint , a + c ) ; return a + c ; } else { push ( <int> , lineNumber , endPoint , b + c ) ; return b + c ; } } if ( endPoint == lineNumber ) { push ( <int> , lineNumber , lineNumber , maxUpto ( lineNumber - <int> , lineNumber - <int> ) + pop ( <int> , lineNumber , lineNumber ) ) ; return maxUpto ( lineNumber - <int> , lineNumber - <int> ) + pop ( <int> , lineNumber , lineNumber ) ; } } int pop ( int id , int i , int j ) { int index ; index = i * ( i + <int> ) / <int> + j ; if ( id == <int> ) return sum [ index ] ; else return array [ index ] ; } void push ( int id , int i , int j , int num ) { int index ; index = i * ( i + <int> ) / <int> + j ; if ( id == <int> ) sum [ index ] = num ; else array [ index ] = num ; return ; }", "label": 1, "id": 2122}
{"input": "int main ( ) { register int i ; int t ; long a , b , x , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( b >= a ) { int j = <int> ; x = b ; while ( x % a != <int> ) { x = b * j ; j ++ ; } printf ( <str> , ( a * b ) / x , x ) ; } if ( a > b ) { int j = <int> ; x = a ; while ( x % b != <int> ) { x = a * j ; j ++ ; } printf ( <str> , ( a * b ) / x , x ) ; } } return <int> ; }", "label": 2, "id": 2123}
{"input": "int main ( void ) { int i , j , k , n , t , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { n = <int> ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) scanf ( <str> , & arr [ k ] [ j ] ) ; } for ( k = n - <int> ; k >= <int> ; k -- ) { for ( j = <int> ; j <= k ; j ++ ) { if ( arr [ k + <int> ] [ j ] < arr [ k + <int> ] [ j + <int> ] ) arr [ k ] [ j ] += arr [ k + <int> ] [ j + <int> ] ; else arr [ k ] [ j ] += arr [ k + <int> ] [ j ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2124}
{"input": "char rbuffer [ rbuffer_size ] ; int rfptr = rbuffer_size ; char wbuffer [ wbuffer_size ] ; int wfptr = <int> ; int readno = <int> ; void rd ( ) { rfptr = <int> ; readno = read ( <int> , rbuffer , sizeof ( rbuffer ) ) ; } int get_i ( ) { int sum = <int> ; char c ; int sign = <int> ; while ( <int> ) { if ( readno < rbuffer_size ) { if ( rfptr == readno - <int> ) { return sum * sign ; } } if ( ( rfptr >= rbuffer_size ) || ( rfptr >= readno ) ) rd ( ) ; c = rbuffer [ rfptr ++ ] ; if ( c == <char> ) { sign = - <int> ; } else { if ( c == <char> || c == <char> ) return sum * sign ; else sum = sum * <int> + c - <char> ; } } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int t , n , i ; int * * p ; int k ; int tempval ; t = get_i ( ) ; while ( t -- > <int> ) { n = get_i ( ) ; p = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= i ; k ++ ) { p [ i ] [ k ] = get_i ( ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k <= i ; k ++ ) { p [ i ] [ k ] += max ( p [ i + <int> ] [ k ] , p [ i + <int> ] [ k + <int> ] ) ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 2125}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int tt , n , ar1 [ <int> ] [ <int> ] , * ar2 , i , j , k , tmp ; scanf ( <str> , & tt ) ; ar2 = ( int * ) malloc ( tt * sizeof ( int ) ) ; for ( k = <int> ; k < tt ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { printf ( <str> ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tmp ) ; ar1 [ i ] [ j ] = tmp ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { ar1 [ i ] [ j ] = ar1 [ i ] [ j ] + max ( ar1 [ i + <int> ] [ j ] , ar1 [ i + <int> ] [ j + <int> ] ) ; } } ar2 [ k ] = ar1 [ <int> ] [ <int> ] ; } for ( k = <int> ; k < tt ; k ++ ) printf ( <str> , ar2 [ k ] ) ; return <int> ; }", "label": 0, "id": 2126}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , i , j , tc ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { arr [ i ] [ j ] += max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2127}
{"input": "int main ( void ) { int t , g ; long long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } } int gcd ( long long int a , long long int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 2128}
{"input": "int main ( ) { int t , n , * p , i , j , k , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; p = ( int * ) malloc ( n * n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { j = <int> ; for ( ; j < i + <int> ; j ++ ) { scanf ( <str> , p + i + j ) ; } } sum = <int> ; k = <int> ; for ( i = <int> ; i <= n - <int> ; i ++ ) { if ( * ( p + i + n - <int> ) > * ( p + n - <int> + k ) ) k = i ; } sum = sum + * ( p + k + n - <int> ) ; if ( * ( p + k + n - <int> ) > * ( p + k + <int> + n - <int> ) ) sum = sum + * ( p + k + n - <int> ) ; else sum = sum + * ( p + k + <int> + n - <int> ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { if ( k > <int> ) { if ( * ( p + i + k ) > * ( p + i + k - <int> ) ) { sum = sum + * ( p + i + k ) ; } else { sum = sum + * ( p + i + k - <int> ) ; k = k - <int> ; } } else sum = sum + * ( p + i + k ) ; } free ( p ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2129}
{"input": "int n ; int function ( int start , int line , int a [ ] ) { int i = start + <int> , max = a [ start ] ; for ( ; i < line + start ; i ++ ) { if ( max < a [ i ] ) max = a [ i ] ; } if ( line == n ) return max ; else return max + function ( start + line , line + <int> , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int line = <int> , sum = <int> ; scanf ( <str> , & n ) ; for ( ; line <= n ; sum += line , line ++ ) ; int a [ sum ] ; for ( line = <int> ; line < sum ; line ++ ) scanf ( <str> , & a [ line ] ) ; printf ( <str> , function ( <int> , <int> , a ) - <int> ) ; } return <int> ; }", "label": 1, "id": 2130}
{"input": "int main ( void ) { long t , a , b , hcf , lcm , n , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { n = b ; } else { n = a ; } for ( i = <int> ; i <= n ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; } lcm = ( a * b ) / hcf ; } printf ( <str> , hcf , lcm ) ; t -- ; } return <int> ; }", "label": 2, "id": 2131}
{"input": "int main ( ) { int a [ <int> ] , t , n ; int i , j , count ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] >= a [ i ] ) count ++ ; } printf ( <str> , n + count ) ; } return <int> ; }", "label": 3, "id": 2132}
{"input": "int main ( ) { int testCases , n ; int matrix [ <int> ] [ <int> ] ; int i , j ; int max = <int> ; scanf ( <str> , & testCases ) ; while ( testCases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & matrix [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) matrix [ i ] [ j ] = MAX ( matrix [ i - <int> ] [ j ] , matrix [ i - <int> ] [ j - <int> ] ) + matrix [ i ] [ j ] ; matrix [ i ] [ j ] = matrix [ i - <int> ] [ j - <int> ] + matrix [ i ] [ j ] ; } max = matrix [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max < matrix [ n - <int> ] [ i ] ) max = matrix [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2133}
{"input": "int tcout [ <int> ] ; int count_subarray ( int A [ ] , int size ) { int i , j , c ; for ( j = <int> ; j < size ; j ++ ) { c ++ ; i = j ; while ( i < size - <int> && A [ i ] <= A [ ++ i ] ) { c ++ ; } } return c ; } int main ( ) { int T , N , i , j ; unsigned int a [ <int> ] ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } tcout [ j ] = count_subarray ( a , N ) ; } for ( j = <int> ; j < T ; j ++ ) { printf ( <str> , tcout [ j ] ) ; } return <int> ; }", "label": 1, "id": 2134}
{"input": "int max ( int a , int b ) { if ( a > b ) return a - <int> ; else return b - <int> ; } int main ( ) { char path [ <int> ] [ <int> ] ; int n ; scanf ( <str> , & n ) ; int i , j , k ; for ( i = <int> ; i < n ; i ++ ) { int row ; scanf ( <str> , & row ) ; for ( j = <int> ; j < row ; j ++ ) scanf ( <str> , & path [ j ] ) ; for ( k = row - <int> ; k >= <int> ; k -- ) for ( j = <int> * k ; j >= <int> ; j = j - <int> ) path [ k ] [ j ] += max ( ( int ) path [ k + <int> ] [ j ] , ( int ) path [ k + <int> ] [ j + <int> ] ) ; printf ( <str> , path [ <int> ] [ <int> ] - <int> ) ; } return <int> ; }", "label": 1, "id": 2135}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] < a [ i ] [ j + <int> ] ? a [ i ] [ j + <int> ] : a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2136}
{"input": "int gcd ( int n1 , int n2 ) { if ( n2 == <int> ) return n1 ; else return gcd ( n2 , n1 % n2 ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int GCD = gcd ( a , b ) ; int LCM = ( a * b ) / GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 1, "id": 2137}
{"input": "int main ( ) { long n , i , a , min ; int t ; long long sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( i == <int> ) min = a ; if ( min > a ) min = a ; } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 2138}
{"input": "void below ( int , int , int ) ; void right ( int , int , int ) ; int a [ <int> ] [ <int> ] , t = <int> , ans [ <int> ] , rows ; int main ( ) { int i , j , test_case , k , r , max = <int> ; scanf ( <str> , & test_case ) ; for ( i = <int> ; i <= test_case ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j <= rows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } below ( <int> , <int> , <int> ) ; right ( <int> , <int> , <int> ) ; for ( r = <int> ; ans [ r ] != <char> ; r ++ ) { if ( ans [ r ] > max ) max = ans [ r ] ; } printf ( <str> , max ) ; } return <int> ; } void below ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + <int> ; } else { i = i + <int> ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } } void right ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + <int> ; } else { i = i + <int> ; j = j + <int> ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } }", "label": 3, "id": 2139}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n ) ; int k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } k ++ ; } k = <int> ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= k ; j ++ ) { if ( j == <int> && i != <int> ) { b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; } else if ( j == i && i != <int> ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; else if ( i != <int> ) b [ i ] [ j ] = max ( b [ i - <int> ] [ j ] , b [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } k ++ ; } int ans = b [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( ans < b [ n - <int> ] [ i ] ) ans = b [ n - <int> ] [ i ] ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 2140}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( void ) { int a [ <int> ] [ <int> ] , i , j , m , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i + <int> ; j ++ ) a [ i ] [ j ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { if ( i && j ) a [ i ] [ j ] += max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; if ( i && ! j ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } m = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j ] > m ) m = a [ n - <int> ] [ j ] ; } printf ( <str> , m ) ; } return <int> ; }", "label": 1, "id": 2141}
{"input": "int main ( void ) { int a [ <int> ] , b [ <int> ] , i , count , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; b [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) b [ i ] = b [ i - <int> ] + <int> ; if ( a [ i - <int> ] > a [ i ] ) b [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) count += b [ i ] ; printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 2142}
{"input": "int main ( ) { int t , i , n , a [ <int> ] , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 2143}
{"input": "main ( ) { long a [ <int> ] [ <int> ] , n , r , i , j , k ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i <= r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = r - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2144}
{"input": "long int gcd ( long int u , long int v ) { if ( u == v ) return u ; if ( u == <int> ) return v ; if ( v == <int> ) return u ; if ( ~ u & <int> ) { if ( v & <int> ) return gcd ( u >> <int> , v ) ; else return gcd ( u >> <int> , v >> <int> ) << <int> ; } if ( ~ v & <int> ) return gcd ( u , v >> <int> ) ; if ( u > v ) return gcd ( ( u - v ) >> <int> , v ) ; return gcd ( ( v - u ) >> <int> , u ) ; } int main ( ) { int i , n ; long int a , b , Gcd , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { Gcd = <int> ; lcm = <int> ; scanf ( <str> , & a , & b ) ; Gcd = gcd ( a , b ) ; lcm = ( a * b ) / Gcd ; printf ( <str> , Gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 2145}
{"input": "int calc_sum ( int i , int j , int num , int * * arr ) ; int main ( ) { int * * arr ; int cases = <int> ; int num = <int> , n = <int> , i , j ; scanf ( <str> , & cases ) ; while ( cases > <int> ) { cases = cases - <int> ; scanf ( <str> , & num ) ; arr = ( int * * ) malloc ( num * sizeof ( int ) ) ; for ( i = <int> ; i < num ; i ++ ) { arr [ i ] = ( int * ) malloc ( ( num ) * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & n ) ; arr [ i ] [ j ] = n ; } } int ans = calc_sum ( <int> , <int> , num , arr ) ; printf ( <str> , ans ) ; } } int calc_sum ( int i , int j , int num , int * * arr ) { if ( i == num - <int> ) { return arr [ i ] [ j ] ; } int rightsum = arr [ i ] [ j ] + calc_sum ( i + <int> , j + <int> , num , arr ) ; int leftsum = arr [ i ] [ j ] + calc_sum ( i + <int> , j , num , arr ) ; if ( rightsum > leftsum ) { return rightsum ; } else { return leftsum ; } }", "label": 2, "id": 2146}
{"input": "int main ( void ) { int i , j , k , A , B , T , gcd , lcm = <int> , min , max ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A >= <int> && A <= <int> && B >= <int> && B <= <int> ) { if ( A < B ) min = A ; else min = B ; for ( j = <int> , gcd = <int> ; j <= min ; j ++ ) { if ( A % j == <int> && B % j == <int> ) { if ( j > gcd ) gcd = j ; else gcd = gcd ; } } if ( A > B ) max = A ; else max = B ; for ( k = max ; k <= ( A * B ) ; k ++ ) { if ( k % A == <int> && k % B == <int> ) { lcm = k ; break ; } } printf ( <str> , gcd , lcm ) ; } } } return <int> ; }", "label": 2, "id": 2147}
{"input": "int maxsum ; void trav ( int * [ ] , int , int , int , int , int ) ; int main ( void ) { int testcases , num , i , j ; scanf ( <str> , & testcases ) ; while ( testcases -- ) { maxsum = - <int> ; int * arr [ SIZE ] ; scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { arr [ i ] = malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } trav ( arr , <int> , <int> , <int> , <int> , num ) ; printf ( <str> , maxsum ) ; } return <int> ; } void trav ( int * arr [ ] , int <unk> , int <unk> , int maxnum , int sum , int maxlevel ) { if ( <unk> < maxlevel ) { sum += arr [ <unk> ] [ <unk> ] ; if ( <unk> < maxnum ) { trav ( arr , <unk> + <int> , <unk> , maxnum + <int> , sum , maxlevel ) ; trav ( arr , <unk> + <int> , <unk> + <int> , maxnum + <int> , sum , maxlevel ) ; } } else { if ( sum > maxsum ) maxsum = sum ; } }", "label": 2, "id": 2148}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b , r = <int> ; long l = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; r = gcd ( a , b ) ; l = a / r * b ; printf ( <str> , r , l ) ; } return <int> ; } int gcd ( int i1 , int i2 ) { int a , b ; if ( i1 > i2 ) { a = i1 ; b = i2 ; } else { a = i2 ; b = i1 ; } int result ; int c = a % b ; if ( c > <int> ) result = gcd ( b , c ) ; else result = b ; return result ; }", "label": 1, "id": 2149}
{"input": "int main ( ) { int i , t ; long int n1 , n2 , lcm , gcd , num1 , num2 ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 < <int> ) n1 = n1 * ( - <int> ) ; if ( n2 < <int> ) n2 = n2 * ( - <int> ) ; num1 = n1 ; num2 = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } gcd = n1 ; lcm = ( num1 * num2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 2150}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { int n , i , count = <int> ; scanf ( <str> , & n ) ; int arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] <= arr [ i + <int> ] ) count ++ ; } count = count + n ; printf ( <str> , count ) ; t -- ; } }", "label": 1, "id": 2151}
{"input": "int main ( ) { int t , a , b , rem , pro ; int gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; pro = a * b ; while ( b != <int> ) { rem = a % b ; a = b ; b = rem ; } gcd = a ; printf ( <str> , gcd , pro / gcd ) ; } return <int> ; }", "label": 1, "id": 2152}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int temp = <int> , a , b , x , y ; scanf ( <str> , & a , & b ) ; if ( a < b ) { x = gcd ( a , b ) ; } else { x = gcd ( b , a ) ; } printf ( <str> , x ) ; if ( a < b ) { y = lcm ( a , b ) ; } else { y = lcm ( b , a ) ; } if ( x == <int> ) { printf ( <str> , ( a * b ) ) ; } else { printf ( <str> , y ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == <int> ) { return <int> ; } if ( b % a == <int> ) { return a ; } return gcd ( b % a , a ) ; } int lcm ( a , b ) { static int i = <int> ; i ++ ; if ( b % a == <int> ) { return b ; } else { lcm ( a , ( ( i ) * b ) ) ; } }", "label": 1, "id": 2153}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 1, "id": 2154}
{"input": "int swap ( long long int * a , long long int * b ) { long long int t = * a ; * a = * b ; * b = t ; } int main ( void ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int N , j ; scanf ( <str> , & N ) ; long long int a [ N ] , sum = <int> , i , k , l , p = N - <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( j = <int> ; j < p ; j ++ ) { if ( a [ <int> ] <= a [ <int> ] ) { for ( k = <int> ; k < N - <int> ; k ++ ) { a [ k ] = a [ k + <int> ] ; } sum = sum + a [ <int> ] ; N -- ; } else if ( a [ <int> ] > a [ <int> ] ) { swap ( & a [ <int> ] , & a [ <int> ] ) ; for ( l = <int> ; l < N - <int> ; l ++ ) { a [ l ] = a [ l + <int> ] ; } sum = sum + a [ <int> ] ; N -- ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 2155}
{"input": "int max ( int * <unk> , int size ) { int <unk> = <unk> [ <int> ] ; int i = <int> ; for ( i = <int> ; i < size ; i ++ ) { if ( <unk> [ i ] > <unk> ) { <unk> = <unk> [ i ] ; } } } int main ( ) { int testCases ; int lineNumber ; int i = <int> ; int j = <int> ; int k = <int> ; int l = <int> ; int * array ; int large = <int> ; int sum = <int> ; scanf ( <str> , & testCases ) ; for ( i ; i < testCases ; i ++ ) { scanf ( <str> , & lineNumber ) ; for ( j ; j < lineNumber ; j ++ ) { array = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & array [ i ] ) ; } large = max ( array , j + <int> ) ; sum += large ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2156}
{"input": "int dope [ <int> ] [ <int> ] , i , j ; int tr [ <int> ] [ <int> ] ; int max ( int x , int y ) { return x > y ? x : y ; } int maxs ( int tr [ ] [ <int> ] , int n ) { for ( i = <int> ; i < n ; i ++ ) dope [ n - <int> ] [ i ] = tr [ n - <int> ] [ i ] ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) dope [ i ] [ j ] = tr [ i ] [ j ] + max ( dope [ i + <int> ] [ j ] , dope [ i + <int> ] [ j + <int> ] ) ; dope [ i ] [ n - <int> ] = tr [ i ] [ n - <int> ] + max ( dope [ i + <int> ] [ n - <int> ] , dope [ i + <int> ] [ n - <int> ] ) ; } return dope [ <int> ] [ <int> ] ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tr [ i ] [ j ] ) ; printf ( <str> , maxs ( tr , n ) ) ; } }", "label": 0, "id": 2157}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n1 , n2 , gcd = <int> ; long long int lcm ; scanf ( <str> , & n1 , & n2 ) ; long long int i ; if ( n1 == n2 ) { gcd = n1 ; lcm = n1 ; } else if ( n1 > n2 ) { for ( i = <int> ; i <= n2 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = n1 * n2 / gcd ; } else { for ( i = <int> ; i <= n1 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = n1 * n2 / gcd ; } printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 2158}
{"input": "unsigned int tri [ <int> ] [ <int> ] ; int main ( ) { unsigned int n , l , i , j , total ; scanf ( <str> , & n ) ; if ( n = <int> ) printf ( <str> ) ; while ( n > <int> ) { total = <int> ; scanf ( <str> , & l ) ; if ( n = l ) printf ( <str> ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tri [ i ] [ j ] ) ; if ( j > <int> && i > <int> && j < i ) { tri [ i ] [ j ] += tri [ i - <int> ] [ j - <int> ] > tri [ i - <int> ] [ j ] ? tri [ i - <int> ] [ j - <int> ] : tri [ i - <int> ] [ j ] ; } else if ( j == <int> ) { tri [ i ] [ j ] += tri [ i - <int> ] [ <int> ] ; } else if ( j == i ) { tri [ i ] [ j ] += tri [ i - i ] [ j - <int> ] ; } } for ( i = <int> ; i < l ; i ++ ) { total = total > tri [ l - <int> ] [ i ] ? total : tri [ l - <int> ] [ i ] ; } printf ( <str> , total ) ; n -- ; } return <int> ; }", "label": 1, "id": 2159}
{"input": "int main ( ) { int t , i , j , n , max , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } for ( j = i + <int> ; j <= n ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = n ; i >= <int> ; i -- ) { for ( j = <int> ; j <= n ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) max = a [ i ] [ j + <int> ] ; else max = a [ i ] [ j ] ; } a [ i - <int> ] [ j ] += max ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 2160}
{"input": "long int A [ <int> ] ; int main ( ) { int i , N , mn , T ; long int sum ; scanf ( <str> , & T ) ; while ( T -- ) { sum = <int> ; mn = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; if ( mn > A [ i ] ) mn = A [ i ] ; } if ( N == <int> ) { sum = mn ; } else sum = mn * ( N - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 2161}
{"input": "int greater ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; int n ; int i , j , max ; while ( t -- ) { scanf ( <str> , & n ) ; int A [ n ] [ n ] , B [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; } B [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { B [ i ] [ <int> ] = A [ i ] [ <int> ] + B [ i - <int> ] [ <int> ] ; B [ i ] [ i ] = A [ i ] [ i ] + B [ i - <int> ] [ i - <int> ] ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { B [ i ] [ j ] = A [ i ] [ j ] + greater ( B [ i - <int> ] [ j ] , B [ i - <int> ] [ j - <int> ] ) ; } } max = <int> ; for ( i = <int> ; i < n ; i ++ ) { max = greater ( B [ n - <int> ] [ i ] , max ) ; } printf ( <str> , max ) ; printf ( <str> ) ; } return <int> ; } int greater ( int a , int b ) { if ( a > b ) return a ; return b ; }", "label": 0, "id": 2162}
{"input": "main ( ) { int t , n , a [ <int> ] , i , c , se ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { a [ i + <int> ] = a [ i ] ; se = a [ i + <int> ] ; } c = c + a [ i + <int> ] ; } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 2163}
{"input": "main ( ) { int i , t , min , j ; long long int n , ans , a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { ans = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( min > a [ j ] ) { min = a [ j ] ; } } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } }", "label": 0, "id": 2164}
{"input": "main ( ) { char a [ <int> ] , b [ <int> ] ; int i , j , k , count = <int> , l ; scanf ( <str> , a ) ; l = strlen ( a ) ; for ( i = <int> ; i < l ; i ++ ) { if ( a [ i ] == <char> ) { for ( j = i , k = <int> ; j < ( i + <int> ) ; k ++ , j ++ ) b [ k ] = a [ j ] ; if ( strcmp ( b , <str> ) == <int> ) { count ++ ; } } } printf ( <str> , count ) ; return <int> ; }", "label": 1, "id": 2165}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int ar [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) ar [ i - <int> ] [ j ] += ar [ i ] [ j ] > ar [ i ] [ j + <int> ] ? ar [ i ] [ j ] : ar [ i ] [ j + <int> ] ; printf ( <str> , ar [ <int> ] [ <int> ] ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 2166}
{"input": "int main ( ) { long long int i , j , min = <int> , y , o , x , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; scanf ( <str> , & y ) ; min = y ; for ( j = <int> ; j < x - <int> ; j ++ ) { scanf ( <str> , & y ) ; if ( min > y ) min = y ; } printf ( <str> , min ) ; o = min * ( x - <int> ) ; printf ( <str> , o ) ; } return <int> ; }", "label": 1, "id": 2167}
{"input": "main ( ) { int t , a , b , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; int x = a ; int y = b ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } int lcm = x * y / t ; printf ( <str> , t , lcm ) ; } }", "label": 1, "id": 2168}
{"input": "long gcd ( long , long ) ; int main ( ) { int T , i , hcf ; long x , y , lcm ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } long gcd ( long x , long y ) { if ( x == <int> ) { return y ; } while ( y != <int> ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 0, "id": 2169}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { int a = <int> ; for ( a > <int> ; a <= T ; a ++ ) { int A , B ; int lcm , gcd ; int rem , num , den ; scanf ( <str> , & A , & B ) ; if ( A > B ) { num = A ; den = B ; } else { num = B ; den = A ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = A * B / gcd ; printf ( <str> , gcd , lcm ) ; } } }", "label": 1, "id": 2170}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; int a [ n ] ; long int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 2171}
{"input": "static int tri [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x >= y ) return x ; else return y ; } int main ( ) { int t ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i < t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int j , k ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & tri [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { tri [ j ] [ k ] += max ( tri [ j + <int> ] [ k ] , tri [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , tri [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2172}
{"input": "void main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 2173}
{"input": "int main ( ) { int t , n , i , j , max , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i <= n ; i ++ ) a [ i ] [ <int> ] = <int> ; for ( j = <int> ; j <= n ; j ++ ) a [ <int> ] [ j ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = i + <int> ; j <= n ; j ++ ) a [ i ] [ j ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] += ( a [ i - <int> ] [ j - <int> ] >= a [ i - <int> ] [ j ] ? a [ i - <int> ] [ j - <int> ] : a [ i - <int> ] [ j ] ) ; } } max = a [ n ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( a [ n ] [ j + <int> ] > a [ n ] [ j ] ) max = a [ n ] [ j + <int> ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 2174}
{"input": "int main ( void ) { int t ; long long int i , n , x , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = MAX ; for ( i = <int> ; i < n ; ++ i ) { scanf ( <str> , & x ) ; if ( x < min ) min = x ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2175}
{"input": "int Call ( int x , int y ) { int a , b , t , gc , lc ; a = x ; b = y ; if ( b == <int> ) { return <int> ; } while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gc = a ; lc = ( x * y ) / gc ; printf ( <str> , lc , gc ) ; } int main ( void ) { int n , i = <int> ; long A , B , gcd , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( B != <int> ) { Call ( A , B ) ; } else { printf ( <str> ) ; } } return <int> ; }", "label": 1, "id": 2176}
{"input": "int main ( ) { int a ; int e , r = <int> , i , j ; int tri [ <int> ] [ <int> ] ; scanf ( <str> , & a ) ; while ( r < a ) { scanf ( <str> , & e ) ; for ( i = <int> ; i <= e ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; } for ( i = e - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( tri [ i + <int> ] [ j ] >= tri [ i + <int> ] [ j + <int> ] ) tri [ i ] [ j ] = tri [ i ] [ j ] + tri [ i + <int> ] [ j ] ; else tri [ i ] [ j ] = tri [ i ] [ j ] + tri [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , tri [ <int> ] [ <int> ] ) ; r ++ ; } return <int> ; }", "label": 0, "id": 2177}
{"input": "void scanNumb ( int * a ) { int c = <int> ; * a = <int> ; while ( c < <char> ) c = getchar ( ) ; while ( c >= <char> && c <= <char> ) { * a = * a * <int> + c - <char> ; c = getchar ( ) ; } } int main ( int argc , char * argv [ ] ) { int t , n , i , j ; scanNumb ( & t ) ; while ( t -- ) { scanNumb ( & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanNumb ( & a [ i ] [ j ] ) ; for ( i = n - <int> ; i <= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 2178}
{"input": "int main ( void ) { int a , b , x , y , t , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , x , y , gcd ) ; printf ( <str> , x , y , lcm ) ; return <int> ; }", "label": 1, "id": 2179}
{"input": "int max ( int , int ) ; int main ( ) { int test , i , a [ <int> ] [ <int> ] , j , k , n ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( k = n - <int> ; k > <int> ; k -- ) for ( j = <int> ; j < k ; j ++ ) a [ k - <int> ] [ j ] += max ( a [ k ] [ j ] , a [ k ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } } int max ( int a , int b ) { if ( a > b ) return a ; return b ; }", "label": 0, "id": 2180}
{"input": "int main ( ) { int t , n , i , ele , sum = <int> , max = <int> , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ele ) ; sum = sum + ele ; } if ( max < sum ) max = sum ; } printf ( <str> , max ) ; sum = <int> ; max = <int> ; } return <int> ; }", "label": 1, "id": 2181}
{"input": "int main ( ) { long int a [ <int> ] ; int t , i , j , k , count , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { count = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = j ; k < n ; k ++ ) { if ( a [ k ] < a [ k + <int> ] ) { count ++ ; } else { count ++ ; break ; } } } printf ( <str> , count ) ; } }", "label": 1, "id": 2182}
{"input": "int main ( ) { long int max ; int t ; int x , y ; int wp1 , wp2 ; scanf ( <str> , & t ) ; int n ; int k ; int q , w ; while ( t > <int> ) { scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] = { <int> } ; int i , j ; for ( q = <int> ; q < n ; q ++ ) { for ( w = <int> ; w <= q ; w ++ ) { scanf ( <str> , & a [ q ] [ w ] ) ; } } i = n - <int> ; max = a [ i ] [ <int> ] + a [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] [ j ] + a [ i - <int> ] [ j ] > max ) { max = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; x = j ; y = i - <int> ; } if ( a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] > max ) { max = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; x = j - <int> ; y = i - <int> ; } } while ( y != <int> ) { if ( x == <int> ) { for ( k = y - <int> ; k >= <int> ; k -- ) max = max + a [ k ] [ <int> ] ; break ; } wp1 = max + a [ x ] [ y - <int> ] ; wp2 = max + a [ x - <int> ] [ y - <int> ] ; if ( wp2 >= wp1 ) { x = x - <int> ; y = y - <int> ; max = wp2 ; } else { y = y - <int> ; max = wp1 ; } } printf ( <str> , max ) ; t = t - <int> ; } return <int> ; }", "label": 1, "id": 2183}
{"input": "int gcd ( int a , int b ) { int temp ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { int t ; long long G , L , A , B ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & A , & B ) ; G = gcd ( A , B ) ; L = ( A * B ) / G ; printf ( <str> , G , L ) ; } return <int> ; }", "label": 0, "id": 2184}
{"input": "unsigned int t [ <int> ] [ <int> ] ; unsigned int tri [ <int> ] ; unsigned int r [ <int> ] [ <int> ] ; int count ; int main ( ) { unsigned int a , b , c , d , e , max , f ; count = <int> ; scanf ( <str> , & a ) ; for ( b = <int> ; b <= a ; b ++ ) { scanf ( <str> , & c ) ; if ( ( c > <int> ) && ( c < <int> ) ) { for ( d = <int> ; d <= c ; d ++ ) { for ( e = <int> ; e <= d ; e ++ ) { scanf ( <str> , & f ) ; if ( ( f > <int> ) && ( f < <int> ) ) { t [ d ] [ e ] = f ; r [ d ] [ e ] = f ; } } } for ( d = c ; d > <int> ; d -- ) { for ( e = <int> ; e <= d ; e ++ ) { max = r [ d ] [ e ] + t [ d - <int> ] [ e ] ; if ( ( max > r [ d - <int> ] [ e ] ) && ( e != d ) ) { r [ d - <int> ] [ e ] = max ; } max = r [ d ] [ e ] + t [ d - <int> ] [ e - <int> ] ; if ( ( max > r [ d - <int> ] [ e - <int> ] ) && ( e != <int> ) ) { r [ d - <int> ] [ e - <int> ] = max ; } } } tri [ count ] = r [ <int> ] [ <int> ] ; for ( d = <int> ; d <= c ; d ++ ) { for ( e = <int> ; e <= d ; e ++ ) { t [ d ] [ e ] = <int> ; r [ d ] [ e ] = <int> ; } } count ++ ; } } for ( b = <int> ; b <= a ; b ++ ) printf ( <str> , tri [ b ] ) ; return <int> ; }", "label": 3, "id": 2185}
{"input": "void <unk> ( int k , int c [ ] , int * <unk> , int in [ ] [ <int> ] , int x ) { c [ <int> ] = in [ k ] [ x ] ; c [ <int> ] = in [ k ] [ x + <int> ] ; * <unk> = <int> ; } int sum = - <int> ; void backtrack ( int a [ ] [ <int> ] , int k , int n , int in [ ] [ <int> ] , int x ) { int c [ <int> ] , <unk> , i ; if ( k == n ) { if ( a [ n ] [ <int> ] > sum ) sum = a [ n ] [ <int> ] ; if ( a [ n ] [ <int> ] > sum ) sum = a [ n ] [ <int> ] ; } else { k = k + <int> ; <unk> ( k , c , & <unk> , in , x ) ; for ( i = <int> ; i < <unk> ; i ++ ) { a [ k ] [ i ] = a [ k ] [ i ] + c [ i ] ; if ( i == <int> ) x ++ ; backtrack ( a , k , n , in , x ) ; } } } int main ( ) { int T , n ; scanf ( <str> , & T ) ; while ( T -- ) { int i , j , in [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & in [ i ] [ j ] ) ; } } int a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] [ <int> ] = <int> ; a [ i ] [ <int> ] = <int> ; } backtrack ( a , <int> , n - <int> , in , <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 2186}
{"input": "int main ( void ) { int i , j , t , n , max , a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else if ( sum [ i - <int> ] [ j ] > sum [ i - <int> ] [ j - <int> ] ) sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2187}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } long long int main ( ) { long long int i , c , d , a , b ; scanf ( <str> , & i ) ; while ( i -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = a * b / c ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 0, "id": 2188}
{"input": "long int in ( ) { char c ; long int t = <int> ; c = gc ; while ( c < <int> || c > <int> ) c = gc ; while ( c >= <int> && c <= <int> ) { t = ( t << <int> ) + ( t << <int> ) + c - <int> ; c = gc ; } return t ; } int main ( ) { int T , N , i , j , ans ; T = in ( ) ; while ( T -- ) { ans = <int> ; N = in ( ) ; int A [ N + <int> ] [ N + <int> ] , dp [ N + <int> ] [ N + <int> ] ; for ( i = <int> ; i <= N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] = in ( ) ; } dp [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i <= N ; i ++ ) dp [ i ] [ <int> ] = A [ i ] [ <int> ] + dp [ i - <int> ] [ <int> ] ; for ( i = <int> ; i <= N ; i ++ ) dp [ i ] [ i ] = A [ i ] [ i ] + dp [ i - <int> ] [ i - <int> ] ; dp [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] + A [ <int> ] [ <int> ] ; for ( i = <int> ; i <= N ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( dp [ i - <int> ] [ j ] > dp [ i - <int> ] [ j - <int> ] ) dp [ i ] [ j ] = A [ i ] [ j ] + dp [ i - <int> ] [ j ] ; else dp [ i ] [ j ] = A [ i ] [ j ] + dp [ i - <int> ] [ j - <int> ] ; } } for ( i = <int> ; i <= N ; i ++ ) { if ( dp [ N ] [ i ] > ans ) ans = dp [ N ] [ i ] ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 2189}
{"input": "int max ( int ele1 , int ele2 ) { if ( ele1 > ele2 ) return ele1 ; else return ele2 ; } int main ( ) { int i , nor , not , a [ <int> ] [ <int> ] , sum , n , j ; scanf ( <str> , & not ) ; for ( n = <int> ; n < not ; n ++ ) { scanf ( <str> , & nor ) ; sum = <int> ; for ( i = <int> ; i <= nor ; i ++ ) sum = sum + i ; for ( i = <int> ; i < sum ; i ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = nor - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } } }", "label": 3, "id": 2190}
{"input": "main ( ) { int T , i , a , b , d ; int z ; scanf ( <str> , & T ) ; for ( d = <int> ; d < T ; d ++ ) { scanf ( <str> , & a , & b ) ; z = a > b ? b : a ; for ( i = z ; i > <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) break ; printf ( <str> , i , ( a * b ) / ++ i ) ; } }", "label": 2, "id": 2191}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2192}
{"input": "int main ( ) { int i , t , n , j , sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ ( n * ( n + <int> ) ) / <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } j = <int> ; sum = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( ( a [ i ] [ j ] ) > a [ i ] [ j + <int> ] ) { sum = sum + a [ i ] [ j ] ; } else { sum = sum + a [ j ] [ j + <int> ] ; j = j + <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 2193}
{"input": "int hcf ( int a , int b ) { if ( a > b ) { int c = b ; b = a ; a = c ; } while ( a != <int> ) { int d ; d = b % a ; b = a ; a = d ; } return b ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = hcf ( a , b ) ; printf ( <str> , gcd , ( a * b ) / gcd ) ; } return ( <int> ) ; }", "label": 1, "id": 2194}
{"input": "int a [ <int> ] [ <int> ] ; int n ; int max ( int a , int b ) { return a > b ? a : b ; } int tr ( int i , int j ) { if ( i == n ) return a [ i ] [ j ] ; else return a [ i ] [ j ] + max ( tr ( i + <int> , j ) , tr ( i + <int> , j + <int> ) ) ; } int main ( ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , tr ( <int> , <int> ) ) ; } }", "label": 2, "id": 2195}
{"input": "unsigned find ( unsigned long int a [ ] , unsigned int n ) { unsigned int min ; unsigned int i ; unsigned int j ; min = <int> , <int> ; i = <int> ; while ( i < n ) { if ( min >= a [ i ] ) { min = a [ i ] ; j = i ; } i ++ ; } return min ; } int main ( ) { unsigned int i ; unsigned int t ; unsigned int p ; unsigned int j ; unsigned int n ; unsigned int cost ; unsigned int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & p ) ; if ( p == <int> ) { break ; } i = <int> ; cost = <int> ; while ( i < p ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } n = p ; j = find ( a , n ) ; j = j * ( n - <int> ) ; printf ( <str> , j ) ; t -- ; } return <int> ; }", "label": 3, "id": 2196}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int j = <int> ; int cost = <int> ; for ( int i = <int> ; i < n ; i ++ ) { if ( j > ( n - <int> ) ) break ; if ( a [ i ] < a [ j ] && a [ i ] != - <int> && a [ j ] != - <int> ) { cost += a [ i ] ; a [ j ] = - <int> ; } else if ( a [ i ] >= a [ j ] && a [ i ] != - <int> && a [ j ] != - <int> ) { cost += a [ j ] ; a [ i ] = - <int> ; } j ++ ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 2197}
{"input": "int getMax ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int t , a [ MAX ] [ MAX ] , i , n , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += getMax ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } max = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) max = getMax ( max , a [ n - <int> ] [ i ] ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2198}
{"input": "int main ( ) { int t , r , i , j , n [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & n [ i ] [ j ] ) ; } } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = r - <int> ; j >= <int> ; j -- ) { n [ i ] [ j ] += ( n [ i + <int> ] [ j + <int> ] >= n [ i + <int> ] [ j ] ) ? ( n [ i + <int> ] [ j + <int> ] ) : ( n [ i + <int> ] [ j ] ) ; } } printf ( <str> , n [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2199}
{"input": "int main ( ) { int t , p , i , j ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & p ) ; for ( i = <int> ; i < p ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = p - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 2200}
{"input": "int check ( long int a [ ] , long int i , long int k ) { int j , count = <int> ; for ( j = i ; j < ( i + k ) ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) count ++ ; } if ( count == k ) return <int> ; else return <int> ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , k , i ; int d ; long int c ; scanf ( <str> , & n ) ; long int a [ n ] ; c = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( k = <int> ; k <= n - <int> ; k ++ ) { for ( i = <int> ; i <= n - <int> ; i ++ ) { if ( ( i + k ) > n - <int> ) break ; d = check ( a , i , k ) ; if ( d == <int> ) c ++ ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 2201}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int i , gcd ; if ( a < b ) { for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } else { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } printf ( <str> , gcd , ( a * b ) / gcd ) ; } return <int> ; }", "label": 2, "id": 2202}
{"input": "void calculate ( ) ; int mylog ( int num ) ; int main ( int argc , char * argv [ ] ) { int triangleCount ; scanf ( <str> , & triangleCount ) ; while ( triangleCount > <int> ) { calculate ( ) ; triangleCount -- ; } return EXIT_SUCCESS ; } void calculate ( ) { int lineCount , lineNum , sumLen , i , max ; scanf ( <str> , & lineCount ) ; int line [ lineCount ] ; int size = <int> ; for ( i = <int> ; i < lineCount ; i ++ ) size *= <int> ; int sum [ size ] ; if ( lineCount > <int> ) lineCount = <int> ; lineNum = <int> ; sumLen = <int> ; max = <int> ; while ( lineCount > <int> ) { int i ; lineNum ++ ; for ( i = <int> ; i < lineNum ; i ++ ) scanf ( <str> , & line [ i ] ) ; if ( lineNum == <int> ) { sum [ <int> ] = line [ <int> ] ; sumLen = <int> ; } else { for ( i = sumLen ; i > <int> ; i -- ) { int lineC = mylog ( i ) ; sum [ ( <int> * i ) - <int> ] = sum [ i - <int> ] + line [ lineC + <int> ] ; sum [ ( <int> * i ) - <int> ] = sum [ i - <int> ] + line [ lineC ] ; } sumLen *= <int> ; } lineCount -- ; } for ( i = <int> ; i < sumLen ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( <str> , max ) ; } int mylog ( int num ) { int count = <int> ; while ( num > <int> ) { num = num / <int> ; count ++ ; } return count - <int> ; }", "label": 3, "id": 2203}
{"input": "int main ( ) { int a [ <int> ] , b [ <int> ] , g [ <int> ] , l [ <int> ] , min , i , j , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; if ( a [ i ] > <int> || b [ i ] > <int> ) { printf ( <str> ) ; scanf ( <str> , & a [ i ] , & b [ i ] ) ; } if ( a [ i ] > b [ i ] ) min = b [ i ] ; else min = a [ i ] ; for ( j = <int> ; j < min ; j ++ ) { if ( j % a [ i ] == <int> && j % b [ i ] == <int> ) { g [ i ] = j ; l [ i ] = ( a [ i ] * b [ i ] ) / g [ i ] ; break ; } } } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , g [ i ] , l [ i ] ) ; } return <int> ; }", "label": 3, "id": 2204}
{"input": "int gcd ( long long int a , long long int b ) { long long int rem = a % b ; if ( rem == <int> ) return b ; return gcd ( b , rem ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int lcm = a * b / gcd ( a , b ) ; printf ( <str> , gcd ( a , b ) , lcm ) ; } return <int> ; }", "label": 0, "id": 2205}
{"input": "int gcd ( int c , int d ) { if ( d == <int> ) { return c ; } else { return gcd ( d , c % d ) ; } } int main ( void ) { long long int t , a [ <int> ] , b [ <int> ] , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { int g , f ; g = gcd ( a [ i ] , b [ i ] ) ; f = ( a [ i ] * b [ i ] ) / g ; printf ( <str> , g , f ) ; } return <int> ; }", "label": 1, "id": 2206}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , l , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; j = <int> ; for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2207}
{"input": "int main ( ) { long long int n , t , ar [ <int> ] , i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; c = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( ar [ j + <int> ] >= ar [ j ] ) { c ++ ; } else break ; } } printf ( <str> , c + n ) ; } return <int> ; }", "label": 1, "id": 2208}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int N ; scanf ( <str> , & N ) ; int a [ N ] , i ; int s = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } i = <int> ; while ( i != N - <int> ) { int temp ; if ( a [ i ] < a [ i + <int> ] ) { s = s + a [ i ] ; temp = a [ i + <int> ] ; a [ i + <int> ] = a [ N - <int> ] ; a [ N - <int> ] = temp ; N = N - <int> ; } else { s = s + a [ i + <int> ] ; temp = a [ i ] ; a [ i ] = a [ N - <int> ] ; a [ N - <int> ] = temp ; N = N - <int> ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 2209}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t , a , b , x , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { lcm = <int> ; scanf ( <str> , & a , & b ) ; x = a * b ; lcm = x / gcd ( a , b ) ; printf ( <str> , gcd ( a , b ) , lcm ) ; } return <int> ; }", "label": 1, "id": 2210}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2211}
{"input": "int main ( ) { long long int t , a [ <int> ] [ <int> ] , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2212}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , t , r , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; r = gcd ( a , b ) ; l = ( a * b ) / r ; printf ( <str> , r , l ) ; printf ( <str> ) ; } return <int> ; } int gcd ( int a , int b ) { if ( ( a % b ) == <int> ) return b ; else { return gcd ( b , ( a % b ) ) ; } }", "label": 1, "id": 2213}
{"input": "int n ; int arr [ <int> ] [ <int> ] ; int maxsum ( int i , int j ) { if ( i == n - <int> ) return arr [ i ] [ j ] ; return arr [ i ] [ j ] + max ( maxsum ( i + <int> , j ) , maxsum ( i + <int> , j + <int> ) ) ; } int max ( int i , int j ) { if ( i > j ) return i ; return j ; } int main ( ) { int t ; scanf ( <str> , & t ) ; int i , j ; while ( t -- != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } printf ( <str> , maxsum ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 2214}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { int cases ; scanf ( <str> , & cases ) ; while ( cases -- ) { long long int num1 , num2 , g_c_d , l_c_m ; scanf ( <str> , & num1 , & num2 ) ; long long int prod = num1 * num2 ; g_c_d = gcd ( num1 , num2 ) ; l_c_m = ( prod / g_c_d ) ; printf ( <str> , g_c_d , l_c_m ) ; printf ( <str> ) ; } return <int> ; } long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } }", "label": 1, "id": 2215}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n ; while ( test -- > <int> ) { scanf ( <str> , & n ) ; int vec1 [ n ] [ n ] ; int vec2 [ n ] [ n ] ; int x ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & x ) ; vec1 [ i ] [ j ] = x ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( vec1 [ i + <int> ] [ j ] >= vec1 [ i + <int> ] [ j + <int> ] ) vec1 [ i ] [ j ] = vec1 [ i ] [ j ] + vec1 [ i + <int> ] [ j ] ; else vec1 [ i ] [ j ] = vec1 [ i ] [ j ] + vec1 [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , vec1 [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2216}
{"input": "long int gcd ( long int a , long int b ) { if ( a == <int> ) { return b ; } else { return gcd ( b % a , a ) ; } } int main ( void ) { long int T , A , B , i , g , l ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; g = gcd ( A , B ) ; l = ( A * B ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 2217}
{"input": "int max ( int , int ) ; int main ( ) { int * * a , l , n , i , j , k ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & l ) ; a = ( int * * ) malloc ( l * sizeof ( int * ) ) ; for ( i = <int> ; i < l ; i ++ ) a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = l - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 2218}
{"input": "int main ( ) { int n , i ; long int a , b , num , denom , gcd , lcm , rem ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; denom = b ; } else { num = b ; denom = a ; } rem = num % denom ; while ( rem != <int> ) { num = denom ; denom = rem ; rem = num % denom ; } gcd = denom ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 0, "id": 2219}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t ) { int n ; scanf ( <str> , & n ) ; int a [ n + <int> ] [ n + <int> ] , dp [ n + <int> ] [ n + <int> ] ; int i ; int j ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= n ; j ++ ) { a [ i ] [ j ] = <int> ; dp [ i ] [ j ] = <int> ; } for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i <= n ; i ++ ) dp [ i ] [ <int> ] = <int> ; dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) dp [ i ] [ j ] = max ( dp [ i - <int> ] [ j ] , dp [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; int ans = dp [ n ] [ <int> ] ; for ( i = n , j = <int> ; j < n ; j ++ ) ans = dp [ i ] [ j ] > ans ? dp [ i ] [ j ] : ans ; printf ( <str> , ans ) ; t -- ; } return <int> ; }", "label": 0, "id": 2220}
{"input": "int main ( ) { int t , n , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , b [ n ] , i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } a [ n ] = a [ n - <int> ] + <int> ; b [ i ] = <int> ; sum = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { if ( a [ i + <int> ] >= a [ i ] ) { b [ i ] = b [ i + <int> ] + <int> ; } else { b [ i ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { sum = sum + b [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2221}
{"input": "struct node { int triangle [ <int> ] [ <int> ] ; int max ; } ; typedef struct node * NODE ; NODE getnode ( void ) { NODE x ; x = malloc ( sizeof ( struct node ) ) ; x -> max = <int> ; return ( x ) ; } int main ( void ) { int count ; int testcases ; int sum = <int> ; NODE cur , temp ; int rows ; int i , j , k ; int num = <int> ; scanf ( <str> , & testcases ) ; for ( k = <int> ; k < testcases ; k ++ ) { cur = getnode ( ) ; scanf ( <str> , & rows ) ; if ( rows <= <int> || rows > <int> ) exit ( <int> ) ; for ( i = <int> ; i <= rows ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & cur -> triangle [ i - <int> ] [ j ] ) ; if ( cur -> triangle [ i - <int> ] [ j ] < <int> || cur -> triangle [ i - <int> ] [ j ] > <int> ) exit ( <int> ) ; } for ( count = <int> ; count < rows ; count ++ ) { i = rows - <int> ; j = count ; sum = <int> ; while ( i >= <int> ) { if ( j == <int> ) while ( i >= <int> ) sum += cur -> triangle [ i -- ] [ j ] ; else if ( j == i ) while ( i >= <int> ) sum += cur -> triangle [ i -- ] [ j -- ] ; else { sum += cur -> triangle [ i ] [ j ] ; num = ( cur -> triangle [ i - <int> ] [ j ] < cur -> triangle [ i - <int> ] [ j - <int> ] ) ? <int> : <int> ; i -- ; j -= num ; } } if ( sum > cur -> max ) cur -> max = sum ; } printf ( <str> , cur -> max ) ; free ( cur ) ; cur = NULL ; } return <int> ; }", "label": 1, "id": 2222}
{"input": "int main ( ) { int i , a , b , x , y , t , test , gcd , lcm ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 2223}
{"input": "static int data [ <int> ] [ <int> ] = { <int> } ; static int n ; static int max [ <int> ] = { <int> } ; static int solve ( int i , int j , int sum ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; int i , j ; int temp ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & data [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { max [ i ] = solve ( i , i , <int> ) ; } temp = max [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max [ i ] > temp ) { temp = max [ i ] ; } } printf ( <str> , temp ) ; } return <int> ; } static int solve ( int i , int j , int sum ) { sum += data [ i ] [ j ] ; if ( i == n - <int> ) { return sum ; } int a = solve ( i + <int> , j , sum ) ; int b = solve ( i + <int> , j + <int> , sum ) ; return ( a > b ) ? a : b ; }", "label": 2, "id": 2224}
{"input": "int main ( ) { long int t , l , x , i ; long int ans = <int> ; long int m , j , k , count = <int> , a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & l ) ; for ( m = <int> ; m < <int> ; m ++ ) a [ m ] = <int> ; for ( j = <int> ; j <= l ; j ++ ) { for ( k = <int> ; k <= count ; k ++ ) { scanf ( <str> , & x ) ; if ( a [ x ] == <int> ) a [ x ] = <int> ; else a [ x ] = <int> ; if ( a [ x ] == <int> ) ans += x ; } count ++ ; } if ( a [ <int> ] != <int> ) ans = ans - <int> ; printf ( <str> , ans - <int> ) ; ans = <int> ; count = <int> ; } return <int> ; }", "label": 1, "id": 2225}
{"input": "int main ( ) { long int n , j ; int i , t , min ; long int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j == <int> ) { min = a [ j ] ; } if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 2226}
{"input": "int main ( ) { int t , i , g , l , a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( int a , int b ) { int g , s , i ; if ( a > b ) { g = a ; s = b ; } else { s = a ; g = b ; } for ( i = s ; i >= <int> ; i -- ) { if ( ( g % i == <int> ) && ( s % i == <int> ) ) { return i ; } } }", "label": 1, "id": 2227}
{"input": "int subArrCount = <int> ; int * arr ; int getdata ( ) { int arrSize , i ; scanf ( <str> , & arrSize ) ; arr = ( int * ) malloc ( sizeof ( int ) * arrSize ) ; for ( i = <int> ; i < arrSize ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; while ( arr [ i ] == <char> || arr [ i ] == <char> ) scanf ( <str> , & arr [ i ] ) ; } return arrSize ; } int main ( void ) { int totalTest , testLoop , arrSize , arrLoop ; int i ; setbuf ( stdout , NULL ) ; scanf ( <str> , & totalTest ) ; for ( testLoop = <int> ; testLoop < totalTest ; testLoop ++ ) { arrSize = getdata ( ) ; for ( arrLoop = <int> ; arrLoop < arrSize ; arrLoop ++ ) { subArrCount ++ ; for ( i = arrLoop ; i < arrSize - <int> ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] ) { subArrCount ++ ; } else return ; } } printf ( <str> , subArrCount ) ; subArrCount = <int> ; free ( arr ) ; } return ( <int> ) ; }", "label": 3, "id": 2228}
{"input": "int main ( ) { int gcd ( int x , int y ) ; int lcm ( int p , int q ) ; int n , f , s , i ; scanf ( <str> , & n ) ; if ( n >= <int> && n <= <int> ) { for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & f , & s ) ; if ( f >= <int> && f <= <int> && s >= <int> && s <= <int> ) { printf ( <str> , gcd ( f , s ) , lcm ( f , s ) ) ; } } } return <int> ; } int gcd ( int x , int y ) { int z ; if ( x > y ) { while ( z != <int> ) { z = x % y ; if ( z == <int> ) { return y ; } x = y ; y = z ; } } else { while ( z != <int> ) { z = y % x ; if ( z == <int> ) { return x ; } y = x ; x = z ; } } return <int> ; } int lcm ( int p , int q ) { int i ; if ( p > q ) { for ( i = <int> ; i <= q ; i ++ ) { if ( q % i == <int> && p % i == <int> ) { return i ; break ; } } } else { for ( i = <int> ; i <= p ; i ++ ) { if ( q % i == <int> && p % i == <int> ) { return i ; break ; } } } return ( p * q ) ; }", "label": 1, "id": 2229}
{"input": "int main ( ) { int t , i , j , n , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j + <int> < n && arr [ j ] > arr [ j + <int> ] ) { temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( <str> , arr [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 2230}
{"input": "int main ( ) { int t = <int> ; int i , n1 , n2 , lcm , gcd , s ; scanf ( <str> , & t ) ; while ( t -- != <int> ) { scanf ( <str> , & n1 , & n2 ) ; gcd = <int> ; lcm = n1 * n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; if ( n2 > n1 ) n2 = n2 - n1 ; } gcd = n1 ; lcm /= gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2231}
{"input": "int sum ( int ) ; int sum ( int n ) { if ( n == <int> ) return <int> ; else if ( n == <int> ) return <int> ; else return ( n + sum ( n - <int> ) ) ; } int main ( ) { int t , * brr , n , i , tt , sum1 = <int> , j = <int> , k = <int> , sum2 , * arr ; scanf ( <str> , & t ) ; if ( t > <int> ) return - <int> ; tt = t ; brr = malloc ( sizeof ( int ) * t ) ; while ( t -- ) { sum1 = <int> , sum2 = <int> , k = <int> ; scanf ( <str> , & n ) ; if ( n > <int> || n < <int> ) return - <int> ; arr = malloc ( sizeof ( int ) * sum ( n ) ) ; for ( i = <int> ; i < sum ( n ) ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < <int> || arr [ i ] > <int> ) return - <int> ; } while ( k < n ) { sum1 = sum1 + arr [ sum ( k ++ ) ] ; } sum2 = sum1 - arr [ sum ( n - <int> ) ] + arr [ ( sum ( n - <int> ) + <int> ) ] ; if ( sum2 > sum1 ) brr [ j ++ ] = sum2 ; else brr [ j ++ ] = sum1 ; } for ( i = <int> ; i < tt ; i ++ ) printf ( <str> , brr [ i ] ) ; return <int> ; }", "label": 3, "id": 2232}
{"input": "int optimal ( int a [ ] [ <int> ] , int s [ ] [ <int> ] , int , int , int ) ; int main ( ) { int a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] , r , sum , i , j , noc ; scanf ( <str> , & noc ) ; while ( noc ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; s [ i ] [ j ] = - <int> ; } sum = optimal ( a , s , <int> , <int> , r ) ; printf ( <str> , sum ) ; noc -- ; } return <int> ; } int optimal ( int a [ ] [ <int> ] , int s [ ] [ <int> ] , int row , int col , int r ) { if ( row == ( r - <int> ) ) return a [ row ] [ col ] ; if ( s [ row ] [ col ] > <int> ) return s [ row ] [ col ] ; if ( ( s [ row + <int> ] [ col ] = optimal ( a , s , row + <int> , col , r ) ) > ( s [ row + <int> ] [ col + <int> ] = optimal ( a , s , row + <int> , col + <int> , r ) ) ) return ( a [ row ] [ col ] + s [ row + <int> ] [ col ] ) ; else return ( a [ row ] [ col ] + s [ row + <int> ] [ col + <int> ] ) ; }", "label": 0, "id": 2233}
{"input": "int main ( ) { int T , a , b , x , y , t , gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 2234}
{"input": "int maxsum ( int n , int A [ ] [ n ] , int i , int j ) { if ( i == n - <int> ) return A [ i ] [ j ] ; if ( maxsum ( n , A , i + <int> , j ) > maxsum ( n , A , i + <int> , j + <int> ) ) return ( A [ i ] [ j ] + maxsum ( n , A , i + <int> , j ) ) ; else return ( A [ i ] [ j ] + maxsum ( n , A , i + <int> , j + <int> ) ) ; } int main ( ) { int t , n , i , j , x ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; int A [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; } x = maxsum ( n , A , <int> , <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 2, "id": 2235}
{"input": "int a [ <int> ] [ <int> ] ; int o [ <int> ] ; int main ( ) { int i = <int> , j = <int> , n = <int> , k = <int> , p = <int> , h = <int> ; scanf ( <str> , & k ) ; for ( p = <int> ; p < k ; p ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i + <int> ] [ j ] += a [ i ] [ j ] ; if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { a [ i + <int> ] [ j + <int> ] += a [ i ] [ j ] ; } } else { if ( a [ i ] [ j ] >= a [ i ] [ j - <int> ] ) { a [ i + <int> ] [ j ] += a [ i ] [ j ] ; } if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { a [ i + <int> ] [ j + <int> ] += a [ i ] [ j ] ; } } } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > h ) { h = a [ i ] [ j ] ; } } } o [ p ] = h ; } for ( i = <int> ; i < k ; i ++ ) { printf ( <str> , o [ i ] ) ; } return <int> ; }", "label": 3, "id": 2236}
{"input": "long long int hcf ( long long int a , long long int b ) { if ( a % b == <int> ) return b ; else return hcf ( b , a % b ) ; } long long int lcm ( long long int a , long long int b ) { long long int i ; long long int ans = <int> ; for ( i = a ; i <= ( a * b ) ; i += a ) if ( i % b == <int> ) { ans = i ; break ; } return ans ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int h = hcf ( a , b ) ; long long int l = lcm ( a , b ) ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 2, "id": 2237}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int majorHelper [ <int> ] = { <int> } ; int a [ <int> ] [ <int> ] ; int i , j , k , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; majorHelper [ <int> ] = a [ <int> ] [ <int> ] ; k = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { majorHelper [ <int> * k + <int> ] = majorHelper [ k ] + a [ i + <int> ] [ j ] ; majorHelper [ <int> * k + <int> ] = majorHelper [ k ] + a [ i + <int> ] [ j + <int> ] ; k ++ ; } } int max = - <int> ; for ( i = <int> ; i < <int> ; i ++ ) { if ( max < majorHelper [ i ] ) max = majorHelper [ i ] ; } printf ( <str> , max ) ; } }", "label": 1, "id": 2238}
{"input": "int main ( ) { int i , j , n , t ; long long int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2239}
{"input": "int main ( void ) { long long int a , b , i , lcm , gcd ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) break ; } gcd = i ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 2240}
{"input": "int main ( ) { int a , m , n , gcd , t ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & m , & n ) ; a = ( m > n ) ? m : n ; for ( int i = <int> ; i <= a ; i ++ ) { if ( m % i == <int> && n % i == <int> ) gcd = i ; } printf ( <str> , gcd , ( m * n ) / gcd ) ; t -- ; } }", "label": 2, "id": 2241}
{"input": "int main ( ) { int t , i , n , var ; long long int x ; scanf ( <str> , & t ) ; while ( t -- ) { x = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & var ) ; if ( x > var ) x = var ; } x = x * ( n - <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 2242}
{"input": "int maxab ( int a , int b ) { return a > b ? a : b ; } int main ( int argc , char * argv [ ] ) { int rows , max , cases , i , j , k ; int psum [ <int> ] , nsum [ <int> ] ; scanf ( <str> , & cases ) ; while ( cases -- ) { psum [ <int> ] = psum [ <int> ] = <int> ; scanf ( <str> , & rows ) ; for ( i = <int> ; i <= rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & nsum [ j ] ) ; nsum [ j ] += maxab ( psum [ j - <int> ] , psum [ j ] ) ; } for ( j = <int> ; j <= i ; j ++ ) { psum [ j ] = nsum [ j ] ; } } max = nsum [ rows ] ; for ( i = <int> ; i < rows ; i ++ ) max = maxab ( max , nsum [ i ] ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2243}
{"input": "int main ( ) { int tc = <int> , notc , r , maxi , i , j ; scanf ( <str> , & notc ) ; while ( tc != notc ) { scanf ( <str> , & r ) ; int arr [ <int> ] [ <int> ] , max [ <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } max [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { max [ i ] [ <int> ] = max [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ; max [ i ] [ i ] = max [ i - <int> ] [ i - <int> ] + arr [ i ] [ i ] ; } for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < r ; j ++ ) { if ( max [ i - <int> ] [ j - <int> ] >= max [ i - <int> ] [ j ] ) { max [ i ] [ j ] = max [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ; } else { max [ i ] [ j ] = max [ i - <int> ] [ j ] + arr [ i ] [ j ] ; } } } maxi = max [ r - <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { if ( max [ r - <int> ] [ <int> ] >= maxi ) { maxi = max [ r - <int> ] [ <int> ] ; } } printf ( <str> , maxi ) ; tc ++ ; } return <int> ; }", "label": 1, "id": 2244}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j , k ; long int sum , sum1 , sum2 , <unk> , large ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } <unk> = <int> ; for ( j = <int> ; j <= n - <int> ; j ++ ) { sum = <int> ; for ( i = j ; i <= n - <int> ; i ++ ) { sum = sum + a [ i ] [ j ] ; } sum1 = sum + a [ i ] [ j ] ; sum2 = sum + a [ i ] [ j + <int> ] ; if ( sum1 > sum2 ) large = sum1 ; else large = sum2 ; if ( large > <unk> ) <unk> = large ; else continue ; } printf ( <str> , <unk> ) ; } }", "label": 3, "id": 2245}
{"input": "int main ( ) { int t , N , a [ <int> ] ; scanf ( <str> , & t ) ; int i , j , k ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & N ) ; int count = N ; for ( j = <int> ; j <= N ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j <= N ; j ++ ) { for ( k = <int> ; k <= N ; k ++ ) { if ( a [ k - <int> ] <= a [ k ] ) count ++ ; if ( a [ k - <int> ] > a [ k ] ) break ; } } printf ( <str> , count ) ; return <int> ; } }", "label": 3, "id": 2246}
{"input": "int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int x = a , y = b , temp , lcm ; while ( b != <int> ) { temp = a % b ; a = b ; b = temp ; } lcm = x * y / a ; printf ( <str> , a , lcm ) ; } return <int> ; }", "label": 1, "id": 2247}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int a , b , gcd , lcm , i ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2248}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a > b ) { if ( a % b == <int> ) { return b ; } else { return gcd ( b , a % b ) ; } } if ( a < b ) { if ( b % a == <int> ) { return a ; } else { return gcd ( a , b % a ) ; } } } long long int max ( long long int a , long long int b ) { if ( a > b ) { return a ; } else { return b ; } } long long int lcm ( long long int a , long long int b ) { long long int i , lc = <int> , maxi ; maxi = max ( a , b ) ; while ( a != <int> && b != <int> ) { for ( i = <int> ; i <= maxi / <int> ; i ++ ) { if ( a % i == <int> && b % i != <int> ) { lc *= i ; a /= i ; } else if ( a % i != <int> && b % i == <int> ) { lc *= i ; b /= i ; } else if ( ( a % i == <int> && b % i == <int> ) ) { lc *= i ; a /= i ; b /= i ; } } } return lc ; } void main ( ) { long long int a , b , gc , lc , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gc = gcd ( a , b ) ; lc = lcm ( a , b ) ; printf ( <str> , lc , gc ) ; } }", "label": 2, "id": 2249}
{"input": "int main ( int argc , char * argv [ ] ) { int t ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t -- ) { int n1 , n2 , x , y ; printf ( <str> ) ; scanf ( <str> , & n1 , & n2 ) ; x = gcd ( n1 , n2 ) ; printf ( <str> , x ) ; y = lcm ( n1 , n2 ) ; printf ( <str> , y ) ; } } int gcd ( int n1 , int n2 ) { while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } return n1 ; } int lcm ( int n1 , int n2 ) { int x , y ; x = n1 , y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } return x * y / n1 ; }", "label": 1, "id": 2250}
{"input": "int main ( int argc , char * argv [ ] ) { long t , i , j , n , max , temp ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } i = <int> ; while ( i < n - <int> ) { if ( a [ i ] > a [ i + <int> ] ) { max = max + a [ i + <int> ] ; i ++ ; } else if ( a [ i ] < a [ i + <int> ] ) { max = max + a [ i ] ; temp = a [ i ] ; a [ i ] = a [ i + <int> ] ; a [ i + <int> ] = temp ; i ++ ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 2251}
{"input": "int maxsum = <int> ; int a [ <int> ] [ <int> ] ; void findmaxsum ( int <unk> , int i , int j ) { if ( i == <int> && j == <int> && <unk> + a [ <int> ] [ <int> ] > maxsum ) maxsum = <unk> + a [ <int> ] [ <int> ] ; else if ( i >= <int> && j >= <int> ) { findmaxsum ( <unk> + a [ i ] [ j ] , i - <int> , j ) ; findmaxsum ( <unk> + a [ i ] [ j ] , i - <int> , j - <int> ) ; } } int main ( ) { int T , i , j , k , lines ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < lines ; i ++ ) findmaxsum ( <int> , lines - <int> , i ) ; printf ( <str> , maxsum ) ; maxsum = <int> ; } return <int> ; }", "label": 2, "id": 2252}
{"input": "int main ( ) { long long int t , n , i , a [ <int> ] , j ; scanf ( <str> , & t ) ; while ( t -- ) { int temp = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; ++ i ) for ( j = i + <int> ; j < n ; ++ j ) if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 2253}
{"input": "int gcd ( long int a , long int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int g , l , i , p , q ; scanf ( <str> , & p , & q ) ; g = gcd ( p , q ) ; l = ( p * q ) / g ; printf ( <str> , g , l ) ; } }", "label": 0, "id": 2254}
{"input": "unsigned int input ( ) { char c = get ( ) ; unsigned int n = <int> ; while ( c < <char> || c > <char> ) c = get ( ) ; while ( c >= <char> && c <= <char> ) { n = ( n << <int> ) + ( n << <int> ) + ( c & <int> ) ; c = get ( ) ; } return n ; } unsigned int gcd ( unsigned int a , unsigned int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; int shift = __builtin_ctz ( a | b ) ; a >>= __builtin_ctz ( a ) ; do { b >>= __builtin_ctz ( b ) ; if ( a > b ) { a += b ; b = a - b ; a = a - b ; } b -= a ; } while ( b ) ; return a << shift ; } int main ( ) { unsigned int t , a , b , c ; t = input ( ) ; while ( t -- ) { a = input ( ) ; b = input ( ) ; c = gcd ( a , b ) ; printf ( <str> , c , a / c * b ) ; } return <int> ; }", "label": 1, "id": 2255}
{"input": "int main ( ) { unsigned long long t , a , b , c , d , e , lcm , hcf ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } c = a ; d = b ; e = <int> ; while ( e ) { e = a % b ; a = b ; b = e ; } hcf = a ; lcm = ( c * d ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 2256}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; long int mini = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( mini > a [ j ] ) mini = a [ j ] ; } long int cost ; cost = mini * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 2257}
{"input": "int codechef ( int maxsize , int ar [ ] [ maxsize ] , int row , int col ) ; int max ( int x , int y ) ; int main ( ) { int t , k = <int> ; scanf ( <str> , & t ) ; int result [ t ] ; while ( k < t ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } result [ k ] = codechef ( n , arr , <int> , <int> ) ; k ++ ; } for ( k = <int> ; k < t ; k ++ ) printf ( <str> , result [ k ] ) ; return <int> ; } int codechef ( int maxsize , int ar [ ] [ maxsize ] , int row , int col ) { int a , b ; if ( row > maxsize ) return ; else if ( row == maxsize ) return <int> ; else { a = ar [ row ] [ col ] + codechef ( maxsize , ar , row + <int> , col ) ; b = ar [ row ] [ col ] + codechef ( maxsize , ar , row + <int> , col + <int> ) ; if ( a > b ) return a ; else return b ; } }", "label": 2, "id": 2258}
{"input": "int main ( ) { int t ; long n , s ; int c , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; s = n - <int> ; while ( n -- ) { scanf ( <str> , & c ) ; if ( n == s ) min = c ; if ( min > c ) min = c ; } printf ( <str> , min * s ) ; } return <int> ; }", "label": 1, "id": 2259}
{"input": "void calculate ( int [ ] [ <int> ] , int rows ) ; int main ( ) { int n , rows , i , j , a [ <int> ] [ <int> ] ; while ( n -- ) { scanf ( <str> , rows ) ; for ( i = <int> ; i <= rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , a [ i ] [ j ] ) ; calculate ( a , rows ) ; } return <int> ; } void calculate ( int a [ ] [ <int> ] , int rows ) { int k , i , j ; for ( i = rows ; i >= <int> ; i -- ) for ( j = <int> ; j <= i - <int> ; j ++ ) { k = ( a [ i ] [ j + <int> ] > a [ i ] [ j ] ) ; a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + k ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; printf ( <str> ) ; }", "label": 1, "id": 2260}
{"input": "int main ( ) { int n , i , r , sum , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { sum = <int> ; scanf ( <str> , & r ) ; int Ar [ r ] ; for ( j = <int> ; j < r ; j ++ ) { scanf ( <str> , & Ar [ j ] ) ; } while ( r > <int> ) { if ( Ar [ <int> ] > Ar [ <int> ] ) { sum += Ar [ <int> ] ; for ( j = <int> ; j < r ; j ++ ) { Ar [ j ] = Ar [ j + <int> ] ; } r -- ; } else { sum += Ar [ <int> ] ; for ( j = <int> ; j < r ; j ++ ) { Ar [ j ] = Ar [ j + <int> ] ; } r -- ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 2261}
{"input": "int main ( ) { int t , i , j , k , m , largest ; int N ; char space ; int A [ <int> ] [ <int> ] ; int M [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & N ) ; for ( j = <int> ; j < N ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & A [ j ] [ k ] , & space ) ; } M [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( j = <int> ; j < N ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( k == <int> ) { M [ j ] [ k ] = M [ j - <int> ] [ k ] + A [ j ] [ k ] ; } else { if ( M [ j - <int> ] [ k ] + A [ j ] [ k ] > M [ j - <int> ] [ k - <int> ] + A [ j ] [ k ] ) M [ j ] [ k ] = M [ j - <int> ] [ k ] + A [ j ] [ k ] ; else M [ j ] [ k ] = M [ j - <int> ] [ k - <int> ] + A [ j ] [ k ] ; } } } largest = M [ N - <int> ] [ <int> ] ; for ( m = <int> ; m < N ; m ++ ) { if ( M [ N - <int> ] [ m ] > largest ) largest = M [ N - <int> ] [ m ] ; } printf ( <str> , largest ) ; } }", "label": 0, "id": 2262}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , x , y , gcd ) ; printf ( <str> , x , y , lcm ) ; return <int> ; }", "label": 1, "id": 2263}
{"input": "int main ( ) { int i , gcd , lcm , t , a , b , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; n = ( a > b ) ? a : b ; for ( i = <int> ; i <= n ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 2264}
{"input": "int main ( ) { int t ; long long int a , b , lcm , gdc , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; i = <int> ; while ( a / i > <int> && b / i > <int> ) { if ( a % i == <int> && b % i == <int> ) gdc = i ; i ++ ; } j = ( a > b ) ? a : b ; while ( <int> ) { if ( j % a == <int> && j % b == <int> ) { lcm = j ; break ; } j ++ ; } printf ( <str> , gdc , lcm ) ; } return <int> ; }", "label": 2, "id": 2265}
{"input": "int max1 ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a [ <int> ] [ <int> ] , i , j , count , cases , max2 ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & count ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < count ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = max1 ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } a [ i ] [ j + <int> ] = <int> ; } max2 = a [ count - <int> ] [ <int> ] ; for ( i = <int> ; i < count ; i ++ ) { if ( a [ count - <int> ] [ i ] > max2 ) max2 = a [ count - <int> ] [ i ] ; } printf ( <str> , max2 ) ; } return <int> ; }", "label": 1, "id": 2266}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; long long int ans = <int> ; for ( int i = <int> ; i < n ; i ++ ) { ans += <int> ; for ( int j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) ans ++ ; else break ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 2267}
{"input": "long int gcd ( long int x , long int y ) ; main ( ) { long int t ; long int a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; printf ( <str> ) ; } return <int> ; } long int gcd ( long int x , long int y ) { if ( y == <int> ) return ( x ) ; else return gcd ( y , x % y ) ; }", "label": 0, "id": 2268}
{"input": "int main ( ) { int store , num1 , num2 , temp , m , check = <int> , tst , i ; long int lcm , hcf ; scanf ( <str> , & tst ) ; while ( check < tst ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 < num2 ) { temp = num2 ; num2 = num1 ; num1 = temp ; } for ( i = <int> ; i <= num2 ; i ++ ) { if ( num1 % i == <int> && num2 % i == <int> ) { hcf = i ; } } lcm = num1 / hcf ; lcm = lcm * num2 ; printf ( <str> , hcf , lcm ) ; check ++ ; } }", "label": 0, "id": 2269}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , s = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { s ++ ; j = i ; for ( j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) s ++ ; else break ; } } printf ( <str> , s + <int> ) ; } }", "label": 0, "id": 2270}
{"input": "int main ( ) { long int t , i , j , a , b , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } printf ( <str> , gcd , ( a * b ) / gcd ) ; } return ( <int> ) ; }", "label": 2, "id": 2271}
{"input": "int main ( ) { int t ; long int min , n , a , temp ; scanf ( <str> , & t ) ; while ( t -- ) { temp = <int> ; scanf ( <str> , & n ) ; while ( temp != n ) { scanf ( <str> , & a ) ; if ( temp == <int> ) { min = a ; } else { if ( min > a ) min = a ; } temp ++ ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2272}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int hcf = gcd ( a , b ) ; printf ( <str> , hcf , ( ( a ) / hcf ) * b ) ; } return <int> ; }", "label": 1, "id": 2273}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] + arr [ i - <int> ] [ j ] > arr [ i ] [ j + <int> ] + arr [ i - <int> ] [ j ] ) arr [ i - <int> ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; else arr [ i - <int> ] [ j ] = arr [ i ] [ j + <int> ] + arr [ i - <int> ] [ j ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 1, "id": 2274}
{"input": "int main ( ) { long long int n , l , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2275}
{"input": "int main ( ) { int T ; long long int n , p , min , i ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & p ) ; min = p ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p ) ; if ( p < min ) min = p ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 2276}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int x , y , gcd ; long long int lcm ; scanf ( <str> , & x , & y ) ; for ( int i = <int> ; i <= x && i <= y ; ++ i ) { if ( x % i == <int> && y % i == <int> ) { gcd = i ; } } lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2277}
{"input": "void main ( ) { int noTestCases , i , j , k , catchBuff , temp ; scanf ( <str> , & noTestCases ) ; int arr [ noTestCases ] ; int maxBuff [ noTestCases ] ; for ( i = <int> ; i < noTestCases ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; catchBuff = arr [ i ] + <int> ; int buff [ catchBuff ] [ catchBuff ] ; maxBuff [ i ] = <int> ; for ( j = <int> ; j < catchBuff ; j ++ ) { for ( k = <int> ; k < catchBuff ; k ++ ) { buff [ j ] [ k ] = <int> ; } } for ( j = <int> ; j < catchBuff ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & buff [ j ] [ k ] ) ; temp = buff [ j ] [ k ] ; buff [ j ] [ k ] = max ( ( temp + buff [ j - <int> ] [ k - <int> ] ) , ( temp + buff [ j - <int> ] [ k ] ) ) ; if ( buff [ j ] [ k ] > maxBuff [ i ] ) maxBuff [ i ] = buff [ j ] [ k ] ; } } for ( j = <int> ; j < arr [ i ] + <int> ; j ++ ) { free ( buff [ j ] ) ; } free ( buff ) ; } for ( i = <int> ; i < noTestCases ; i ++ ) { printf ( <str> , maxBuff [ i ] ) ; } return ; }", "label": 3, "id": 2278}
{"input": "int main ( ) { int t , m , gcd , i , lcm , n1 , n2 , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; min = n1 < n2 ? n1 : n2 ; m = min ; for ( i = <int> ; i <= min ; i ++ ) { if ( n1 % m == <int> && n2 % m == <int> ) { gcd = m ; break ; } else m -- ; } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2279}
{"input": "int main ( ) { int i , t ; long n1 , n2 , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; m = n1 * n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } printf ( <str> , n1 , ( m ) / n1 ) ; } return <int> ; }", "label": 0, "id": 2280}
{"input": "int gcd ( a , b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int i , t , a , b , lcm , hcf ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 2281}
{"input": "void main ( ) { int t , n , i = <int> , j = <int> ; long long int count = <int> , a [ <int> ] , max = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { t -- ; scanf ( <str> , & n ) ; while ( i < n ) { scanf ( <str> , & a [ i ] ) ; j = a [ i ] ; if ( j > n ) continue ; while ( j < n ) { if ( a [ j - <int> ] > max ) count ++ ; else break ; j ++ ; } max = <int> ; i ++ ; } printf ( <str> , count ) ; } }", "label": 2, "id": 2282}
{"input": "int main ( ) { int t , i , a [ <int> ] ; long long int n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; else if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2283}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t ) { long long int i , n ; scanf ( <str> , & n ) ; long long int arr [ n ] , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } long long int result ; result = min * ( n - <int> ) ; printf ( <str> , result ) ; t -- ; } return <int> ; }", "label": 0, "id": 2284}
{"input": "int main ( void ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2285}
{"input": "unsigned int calgcd ( unsigned int a , unsigned int b ) { unsigned int temp ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { unsigned int a , b , gcd ; int t ; long unsigned int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = calgcd ( a , b ) ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2286}
{"input": "int max ( long int a , long int b ) { if ( a >= b ) return a ; else return b ; } int min ( long int a , long int b ) { if ( a >= b ) return b ; else return a ; } int gcd ( int a , int b ) { if ( a > b && a % b == <int> ) { return b ; } else if ( a < b && b % a == <int> ) { return a ; } else return gcd ( b , a % b ) ; } long int min_of_n ( long int len , long int arr [ ] ) { long int i = <int> , j = <int> ; long int minimum = min ( arr [ <int> ] , arr [ <int> ] ) ; if ( len % <int> == <int> ) { for ( ; i < len && j < len ; i += <int> , j += <int> ) { long int temp = ( min ( arr [ i ] , arr [ j ] ) ) ; if ( temp < minimum ) { minimum = temp ; } } } if ( len % <int> != <int> ) { for ( ; i < len && j < len ; i += <int> , j += <int> ) { long int temp = ( min ( arr [ i ] , arr [ j ] ) ) ; if ( temp < minimum ) { minimum = temp ; } minimum = min ( minimum , arr [ len - <int> ] ) ; } } return minimum * ( len - <int> ) ; } int main ( ) { int t ; long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int noneed = <int> ; for ( noneed = <int> ; noneed < n ; noneed ++ ) { scanf ( <str> , & a [ noneed ] ) ; } printf ( <str> , min_of_n ( n , a ) ) ; } return <int> ; }", "label": 0, "id": 2287}
{"input": "int a [ <int> ] [ <int> ] ; long int N ; long int greatest ( int row , int column ) { long int down , bottom ; if ( row == N - <int> ) return a [ row ] [ column ] ; else { down = greatest ( row + <int> , column ) ; bottom = greatest ( row + <int> , column + <int> ) ; if ( down >= bottom ) return a [ row ] [ column ] + down ; else return a [ row ] [ column ] + bottom ; } } int main ( ) { int T , i , j ; long int sum ; scanf ( <str> , & T ) ; while ( T -- ) { sum = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; sum = greatest ( <int> , <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 2288}
{"input": "int * tree ; int levels = <int> ; int treeSize ( int levels ) { return ( levels * ( levels + <int> ) ) / <int> ; } int findBranch ( int level , int pos ) { return treeSize ( level ) + pos ; } int findBiggestSum ( int level , int pos ) { int c = tree [ findBranch ( level , pos ) ] ; if ( level == levels - <int> ) return c ; if ( level == levels - <int> ) { return c + ( tree [ findBranch ( level + <int> , pos ) ] > tree [ findBranch ( level + <int> , pos + <int> ) ] ? tree [ findBranch ( level + <int> , pos ) ] : tree [ findBranch ( level + <int> , pos + <int> ) ] ) ; } return c + ( findBiggestSum ( level + <int> , pos ) > findBiggestSum ( level + <int> , pos + <int> ) ? findBiggestSum ( level + <int> , pos ) : findBiggestSum ( level + <int> , pos + <int> ) ) ; } int main ( int argc , char * * argv ) { int n ; int prevLevels ; tree = malloc ( sizeof ( int ) ) ; int i ; int size = <int> ; scanf ( <str> , & n ) ; while ( n -- > <int> ) { prevLevels = levels ; scanf ( <str> , & levels ) ; size = treeSize ( levels ) ; if ( levels > prevLevels ) { tree = ( int * ) realloc ( tree , size * sizeof ( int ) ) ; } for ( i = <int> ; i < size ; ++ i ) { scanf ( <str> , & tree [ i ] ) ; } printf ( <str> , findBiggestSum ( <int> , <int> ) ) ; } free ( tree ) ; return <int> ; }", "label": 2, "id": 2289}
{"input": "main ( ) { int test , i , a , b ; int gcd ( int a , int b ) ; int lcm , hcf ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; if ( a % b == <int> ) { lcm = a ; } else { lcm = a * b / hcf ; } printf ( <str> , hcf , lcm ) ; } } int gcd ( int x , int y ) { if ( x % y == <int> ) return y ; else return gcd ( y , x % y ) ; }", "label": 1, "id": 2290}
{"input": "int gcd ( int p , int q ) { int c = p % q ; if ( c == <int> ) return q ; else gcd ( q , c ) ; } int main ( ) { int T , f , g , a , b ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; f = gcd ( a , b ) ; g = ( a * b ) / f ; printf ( <str> , f , g ) ; } return <int> ; }", "label": 1, "id": 2291}
{"input": "void lcm ( long int a , long int b ) { static long long int i , m , k , s ; if ( a > b ) m = a ; else m = b ; s = m ; while ( <int> ) { if ( m % a == <int> && m % b == <int> ) { break ; } m ++ ; } for ( i = <int> ; i <= s ; i ++ ) { if ( a % i == <int> && b % i == <int> ) k = i ; } printf ( <str> , k , m ) ; } int main ( ) { int t ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm ( a , b ) ; } return <int> ; }", "label": 2, "id": 2292}
{"input": "void mergeSort ( int * a , int low , int mid , int high ) { int p1 = low , p2 = mid + <int> , i = <int> ; int temp [ high - low + <int> ] ; while ( p1 <= mid && p2 <= high ) { temp [ i ++ ] = ( a [ p1 ] < a [ p2 ] ) ? a [ p1 ++ ] : a [ p2 ++ ] ; } while ( p1 <= mid ) { temp [ i ++ ] = a [ p1 ++ ] ; } while ( p2 <= high ) { temp [ i ++ ] = a [ p2 ++ ] ; } for ( int j = low ; j <= high ; j ++ ) { a [ j ] = temp [ j - low ] ; } } void merge ( int * a , int low , int high ) { if ( low == high ) return ; int mid = low + ( high - low ) / <int> ; merge ( a , low , mid ) ; merge ( a , mid + <int> , high ) ; mergeSort ( a , low , mid , high ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } merge ( a , <int> , n - <int> ) ; printf ( <str> , a [ n - <int> ] ) ; } return <int> ; }", "label": 1, "id": 2293}
{"input": "void main ( ) { int i , g = <int> , l = <int> , t ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = i ; l = a * b / g ; } printf ( <str> , g , l ) ; } }", "label": 2, "id": 2294}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i = <int> , j = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2295}
{"input": "int main ( ) { int t , i , a , b , j , smaller ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int gcd , lcm ; if ( a < b ) { smaller = a ; } else { smaller = b ; } for ( j = <int> ; j <= smaller ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; } } lcm = a * b ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2296}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i <= t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int j ; int min ; scanf ( <str> , & min ) ; int temp ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & temp ) ; if ( temp < min ) min = temp ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2297}
{"input": "int min ( int a [ ] , int n ) { int i , x = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( x > a [ i ] ) x = a [ i ] ; } return x ; } int main ( ) { int t , n , a [ <int> ] , i , j , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } x = min ( a , n ) ; printf ( <str> , ( n - <int> ) * x ) ; } return <int> ; }", "label": 0, "id": 2298}
{"input": "int main ( void ) { int T , i , n1 , n2 , rem = <int> ; long long int num1 ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { rem = <int> ; scanf ( <str> , & n1 , & n2 ) ; num1 = n1 * n2 ; while ( rem ) { rem = n1 % n2 ; n1 = n2 ; n2 = rem ; } num1 = num1 / n1 ; printf ( <str> , n1 , num1 ) ; } return <int> ; }", "label": 1, "id": 2299}
{"input": "int main ( ) { int a , b , n , repeat ; int temp ; int gcd , lcm , tempa , tempb ; scanf ( <str> , & n ) ; for ( repeat = <int> ; repeat < n ; repeat ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { tempa = b ; tempb = a ; } else { tempa = a ; tempb = b ; } temp = a ; while ( b != <int> ) { a = b ; b = temp % b ; temp = a ; } gcd = a ; printf ( <str> , a ) ; a = tempa / gcd ; b = tempb / gcd ; lcm = gcd * a * b ; printf ( <str> , lcm ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 2300}
{"input": "int arr [ <int> ] = { <int> } ; int main ( ) { int i , n , j = <int> , sum , k , flag = <int> , m ; scanf ( <str> , & m ) ; while ( m -- ) { sum = <int> ; flag = <int> ; j = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( k = <int> ; k <= i ; k ++ ) { scanf ( <str> , & arr [ k ] ) ; } if ( flag == <int> ) { j = ( arr [ j ] > arr [ j + <int> ] ? ( ( arr [ j ] > arr [ j + <int> ] ? j : j + <int> ) ) : ( ( arr [ j + <int> ] > arr [ j + <int> ] ) ? j + <int> : j + <int> ) ) ; sum = sum + arr [ j ] ; } else { if ( i == <int> ) { sum = sum + arr [ j ] ; } else if ( arr [ j + <int> ] > arr [ j ] ) { j ++ ; sum = sum + arr [ j ] ; flag = <int> ; } else if ( arr [ j + <int> ] < arr [ j ] ) { sum = sum + arr [ j ] ; flag = <int> ; } else { sum = sum + arr [ j ] ; flag = <int> ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2301}
{"input": "int main ( void ) { int t , i , a , b , gcd , lcm , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j < a && j < b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 2302}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int rem , num , denom ; if ( a > b ) { num = a ; denom = b ; } else { num = b ; denom = a ; } rem = num % denom ; while ( rem != <int> ) { num = denom ; denom = rem ; rem = num % denom ; } int gcd = denom ; int lcm = ( ( a * b ) / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2303}
{"input": "int main ( ) { int cases , triangle ; int i = <int> , j , k , temp , <unk> , <unk> , max_value ; scanf ( <str> , & cases ) ; for ( ; i < cases ; i ++ ) { scanf ( <str> , & triangle ) ; int * sum_array = ( int * ) calloc ( triangle , sizeof ( int ) ) ; for ( j = <int> ; j <= triangle ; j ++ ) { scanf ( <str> , & temp ) ; <unk> = sum_array [ <int> ] ; sum_array [ <int> ] = sum_array [ <int> ] + temp ; for ( k = <int> ; k < j ; k ++ ) { scanf ( <str> , & temp ) ; if ( sum_array [ k ] > <unk> ) { <unk> = sum_array [ k ] ; sum_array [ k ] += temp ; } else { <unk> = sum_array [ k ] ; sum_array [ k ] = <unk> + temp ; <unk> = <unk> ; } } } max_value = sum_array [ <int> ] ; for ( j = <int> ; j < triangle ; j ++ ) { if ( sum_array [ j ] > max_value ) max_value = sum_array [ j ] ; } printf ( <str> , max_value ) ; free ( sum_array ) ; } return <int> ; }", "label": 0, "id": 2304}
{"input": "void main ( ) { int T , N , a , b , i , j , c = <int> ; int A [ <int> ] ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( a = <int> ; a < T ; a ++ ) { scanf ( <str> , & N ) ; if ( N >= <int> && N <= <int> ) { for ( b = <int> ; b < N ; b ++ ) { scanf ( <str> , & A [ b ] ) ; } for ( i = <int> ; i < N ; i ++ ) { if ( A [ i ] >= A [ i - <int> ] ) c ++ ; } } } printf ( <str> , c + N ) ; } }", "label": 1, "id": 2305}
{"input": "int main ( ) { int matrix [ <int> ] [ <int> ] ; int index [ <int> ] [ <int> ] ; int t , i , j ; int sum1 , sum2 ; char ch ; scanf ( <str> , & t ) ; int n ; int sum ; sum = <int> ; sum1 = <int> ; sum2 = <int> ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } } sum = sum + matrix [ <int> ] [ <int> ] ; index [ <int> ] [ <int> ] = <int> ; index [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) { sum1 = <int> ; sum2 = <int> ; if ( i != n ) { for ( j = i ; j <= n ; j ++ ) { sum1 = sum1 + matrix [ j ] [ index [ <int> ] [ <int> ] ] ; sum2 = sum2 + matrix [ j ] [ index [ <int> ] [ <int> ] + j - i + <int> ] ; } if ( sum1 > sum2 ) { index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] ; } else { index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; } } if ( i == n ) { if ( matrix [ index [ <int> ] [ <int> ] + <int> ] [ index [ <int> ] [ <int> ] ] > matrix [ index [ <int> ] [ <int> ] + <int> ] [ index [ <int> ] [ <int> ] + <int> ] ) { index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] ; } else { index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; index [ <int> ] [ <int> ] = index [ <int> ] [ <int> ] + <int> ; } } sum = sum + matrix [ index [ <int> ] [ <int> ] ] [ index [ <int> ] [ <int> ] ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2306}
{"input": "int main ( ) { int i , j , test , n , a [ MAX ] , min ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & n ) ; min = <int> ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2307}
{"input": "int main ( ) { int t ; long int a , b , z , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; z = a * b ; while ( b != <int> ) { r = a % b ; a = b ; b = r ; } printf ( <str> , b , z / b ) ; } return <int> ; }", "label": 3, "id": 2308}
{"input": "int main ( void ) { int a [ <int> ] [ <int> ] , i , j , t , n , p , q ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { p = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; q = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; if ( p > q ) a [ i - <int> ] [ j ] = p ; else a [ i - <int> ] [ j ] = q ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2309}
{"input": "int main ( ) { int n , i , j , l , max = <int> , sum , sum1 , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } if ( n < <int> ) printf ( <str> , a [ <int> ] [ <int> ] ) ; else { for ( i = <int> ; i < n ; i ++ ) { l = i ; sum = a [ <int> ] [ <int> ] ; sum1 = a [ <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { sum = sum + a [ j ] [ i ] ; sum1 = sum1 + a [ j ] [ ++ l ] ; } if ( sum > sum1 && max < sum ) max = sum ; else if ( sum1 > sum && max < sum1 ) max = sum1 ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 2310}
{"input": "int main ( ) { int i , k , x , n , t , sum , a [ <int> ] ; scanf ( <str> , & t ) ; for ( x = <int> ; x <= t ; x ++ ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; n -- ) { if ( a [ i ] >= a [ i + <int> ] ) { sum = sum + a [ i + <int> ] ; for ( k = i ; k < n ; k ++ ) { a [ k ] = a [ k + <int> ] ; } } else { sum = sum + a [ i ] ; for ( k = i + <int> ; k < n ; k ++ ) { a [ k ] = a [ k + <int> ] ; } } } printf ( <str> , sum ) ; } return ; }", "label": 2, "id": 2311}
{"input": "int main ( void ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { int a [ <int> ] , n , b = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] >= a [ i + <int> ] ) { a [ i ] = a [ i + <int> ] ; b = b + a [ i ] ; } else { a [ i + <int> ] = a [ i ] ; b = a [ i ] + b ; } } printf ( <str> , b ) ; } return <int> ; }", "label": 3, "id": 2312}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int cost [ T ] , i ; for ( i = <int> ; i < T ; i ++ ) { int N , min , num , j ; min = <int> ; scanf ( <str> , & N ) ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & num ) ; if ( num < min ) { min = num ; } } cost [ i ] = min * ( N - <int> ) ; } for ( i = <int> ; i < T ; i ++ ) { printf ( <str> , cost [ i ] ) ; } return <int> ; }", "label": 0, "id": 2313}
{"input": "int main ( ) { long int n , i , a , b , small ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & b ) ; long int w [ b ] ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & w [ i ] ) ; } small = w [ <int> ] ; for ( i = <int> ; i < b ; i ++ ) { if ( small > w [ i ] ) small = w [ i ] ; } i = small * ( b - <int> ) ; printf ( <str> , i ) ; } return <int> ; }", "label": 0, "id": 2314}
{"input": "int main ( ) { int t ; long long int a , b , c , d ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & a , & b ) ; d = a * b ; while ( c != <int> ) { c = a % b ; a = b ; b = c ; } printf ( <str> , a , ( d / a ) ) ; } return <int> ; }", "label": 0, "id": 2315}
{"input": "main ( ) { long int t , n , a [ <int> ] , i ; long long int s ; scanf ( <str> , & t ) ; while ( t ) { s = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] == <int> ) { continue ; } if ( a [ i ] > a [ i + <int> ] ) { s = s + a [ i + <int> ] ; a [ i ] = <int> ; } else { s = s + a [ i ] ; a [ i + <int> ] = <int> ; } } printf ( <str> , s ) ; t -- ; } }", "label": 1, "id": 2316}
{"input": "int main ( ) { long long int i , j , min = <int> , d [ <int> ] , o , x , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; min = d [ <int> ] ; for ( j = <int> ; j < x ; j ++ ) { scanf ( <str> , & d [ j ] ) ; } for ( j = <int> ; j < x ; j ++ ) if ( d [ j ] < min ) min = d [ j ] ; o = min * ( x - <int> ) ; printf ( <str> , o ) ; } return <int> ; }", "label": 3, "id": 2317}
{"input": "int main ( ) { int tc , n , arr [ <int> ] [ <int> ] , sum , i , j ; scanf ( <str> , & tc ) ; while ( tc ) { scanf ( <str> , & n ) ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , arr [ i ] [ j ] ) ; printf ( <str> ) ; } for ( i = <int> , j = <int> ; i < n ; i ++ ) { sum += MAX ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; if ( arr [ i ] [ j ] < arr [ i ] [ j + <int> ] ) j ++ ; } printf ( <str> , sum ) ; tc -- ; } return <int> ; }", "label": 1, "id": 2318}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t ; scanf ( <str> , & t ) ; int i , j , n , s1 , s2 ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2319}
{"input": "int main ( ) { int t , n , i , j ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t > <int> ) { printf ( <str> ) ; scanf ( <str> , & n ) ; int A [ n ] [ n ] ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } int k ; i = n - <int> ; while ( i >= <int> ) { for ( k = <int> ; k <= i ; k ++ ) { int a , b , c ; a = A [ i ] [ k ] + A [ i + <int> ] [ k ] ; b = A [ i ] [ k ] + A [ i + <int> ] [ k + <int> ] ; c = a - b ; if ( c > <int> ) { A [ i ] [ k ] = a ; } else { A [ i ] [ k ] = b ; } } i -- ; } printf ( <str> , A [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 1, "id": 2320}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , k , t , rows ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & rows ) ; if ( rows < <int> ) { for ( i = <int> ; i <= rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } } for ( i = rows - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2321}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] = { <int> } , i , j , n , t ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> ) ; } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } else a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2322}
{"input": "int main ( ) { int t , n , curr , curi , * arr , * crr , i , a , b , c , d , e , ap ; unsigned long long sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; ap = ( n * ( n + <int> ) ) / <int> ; arr = ( int * ) calloc ( ap * n , sizeof ( int ) ) ; crr = arr ; i = <int> ; sum = <int> ; curr = <int> ; curi = <int> ; while ( ( i ++ ) <= ap ) { scanf ( <str> , & ( * crr ) ) ; crr ++ ; } while ( <int> ) { sum = sum + arr [ curi ] ; if ( curr < ( n - <int> ) ) { a = arr [ curi + curr ] ; b = arr [ curi + curr + <int> ] ; c = arr [ curi + curr + curr + <int> ] ; d = arr [ curi + curr + curr + <int> ] ; e = arr [ curi + curr + curr + <int> ] ; if ( ( ( a > b ) && ( ( a + c ) > ( b + e ) ) ) || ( ( a < b ) && ( ( a + c ) > ( b + d ) ) && ( ( a + c ) > ( b + e ) ) ) ) { curi = curi + curr ; curr ++ ; } else { curi = curi + curr + <int> ; curr ++ ; } } else if ( curr == ( n - <int> ) ) { a = arr [ curi + curr ] ; b = arr [ curi + curr + <int> ] ; if ( a > b ) { curi = curi + curr ; curr ++ ; } else { curi = curi + curr + <int> ; curr ++ ; } } else break ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 2323}
{"input": "int main ( ) { int t , n , i , s , f ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; f = a [ <int> ] ; s = a [ <int> ] ; if ( n == <int> ) { if ( s > f ) s = f ; } else { for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > s ) s = a [ i ] ; if ( s > f ) { s = s + f ; f = s - f ; s = s - f ; } } } printf ( <str> , s ) ; } }", "label": 1, "id": 2324}
{"input": "int a , b , c , d , e ; int i , j , k , l ; int max ; void <unk> ( int p , int q , int row , int count , int array [ ] [ <int> ] ) { count = count + array [ p ] [ q ] ; if ( ( p + <int> ) >= row ) { if ( max < count ) max = count ; } else if ( ( q + <int> ) > p ) <unk> ( p + <int> , q , row , count , array ) ; else { <unk> ( p + <int> , q , row , count , array ) ; <unk> ( p + <int> , q + <int> , row , count , array ) ; } } int main ( ) { scanf ( <str> , & a ) ; if ( a > <int> || a <= <int> ) return <int> ; for ( i = <int> ; i < a ; i ++ ) { int array [ <int> ] [ <int> ] ; int count = <int> ; max = <int> ; scanf ( <str> , & b ) ; if ( b > <int> || b < <int> ) return <int> ; for ( j = <int> ; j < b ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( k == j ) scanf ( <str> , & e ) ; else scanf ( <str> , & e ) ; if ( e > <int> || e < <int> ) return <int> ; else array [ j ] [ k ] = e ; } } <unk> ( <int> , <int> , b , count , array ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 2325}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , d , n , k ; scanf ( <str> , & d ) ; int m [ NUM ( d ) ] ; for ( i = <int> ; i <= d * ( d + <int> ) / <int> ; i ++ ) scanf ( <str> , & m [ i ] ) ; int sum = <int> ; while ( d ) { k = <int> ; for ( i = ( ( d * d - d + <int> ) / <int> ) ; i <= ( d * ( d + <int> ) / <int> ) ; i ++ ) { if ( m [ i ] > k ) k = m [ i ] ; } sum = sum + k ; d -- ; if ( d == <int> ) break ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2326}
{"input": "int main ( ) { int n , i , j , k , lines ; scanf ( <str> , & n ) ; int arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } printf ( <str> ) ; } for ( j = lines - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( arr [ j + <int> ] [ k ] > arr [ j + <int> ] [ k + <int> ] ) arr [ j ] [ k ] += arr [ j + <int> ] [ k ] ; else arr [ j ] [ k ] += arr [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2327}
{"input": "int a [ <int> ] [ <int> ] ; int m ( int a [ ] [ <int> ] , int r ) { int i , j ; for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } return a [ <int> ] [ <int> ] ; } int main ( ) { int i , j , t , n , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } printf ( <str> , m ( a , n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2328}
{"input": "int main ( ) { long int n1 , n2 , x , y , lcm , t , i , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n2 > n1 ) n2 = n2 - n1 ; else n1 = n1 - n2 ; } gcd = n1 ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 2329}
{"input": "int node [ <int> ] [ <int> ] , temp [ <int> ] [ <int> ] , n ; int maax ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int i , tc , j , res , ctr ; scanf ( <str> , & tc ) ; for ( ctr = <int> ; ctr < tc ; ctr ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & node [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == i ) node [ i ] [ j ] += node [ i - <int> ] [ j - <int> ] ; else if ( j == <int> ) node [ i ] [ j ] += node [ i - <int> ] [ j ] ; else node [ i ] [ j ] += maax ( node [ i - <int> ] [ j ] , node [ i - <int> ] [ j - <int> ] ) ; } } res = node [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( res < node [ n - <int> ] [ i ] ) res = node [ n - <int> ] [ i ] ; printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 2330}
{"input": "int n ; int * * a ; int * * cache , * * visit ; int max ( int c , int d ) { return c > d ? c : d ; } int max_path ( int i , int j ) { int t1 , t2 , t ; if ( i >= n ) return <int> ; if ( visit [ i ] [ j ] == <int> ) return cache [ i ] [ j ] ; else t1 = max_path ( i + <int> , j ) ; t2 = max_path ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; visit [ i ] [ j ] = <int> ; return t ; } void printm ( ) { int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , a [ i ] [ j ] ) ; printf ( <str> ) ; } } int main ( ) { int i , j , t , m , * op ; scanf ( <str> , & t ) ; op = ( int * ) malloc ( t * sizeof ( int ) ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; cache = ( int * * ) malloc ( n * sizeof ( int * ) ) ; visit = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * n ) ; cache [ i ] = ( int * ) malloc ( sizeof ( int ) * n ) ; visit [ i ] = ( int * ) malloc ( sizeof ( int ) * n ) ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; visit [ i ] [ j ] = <int> ; cache [ i ] [ j ] = <int> ; } op [ m ] = max_path ( <int> , <int> ) ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , op [ i ] ) ; return <int> ; }", "label": 0, "id": 2331}
{"input": "int main ( ) { int * * ptr , i , j , ln , n ; scanf ( <str> , & n ) ; for ( ; n ; n -- ) { scanf ( <str> , & ln ) ; ptr = ( int * * ) malloc ( ln * sizeof ( int ) ) ; for ( i = <int> ; i < ln ; i ++ ) { ptr [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i < ln ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & ptr [ i ] [ j ] ) ; } } for ( i = ln - <int> ; i ; i -- ) { for ( j = i ; j ; j -- ) { ptr [ i - <int> ] [ j - <int> ] += MAX ( ptr [ i ] [ j ] , ptr [ i ] [ j - <int> ] ) ; } } printf ( <str> , ptr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 2332}
{"input": "int main ( ) { int a , b , c , n1 , n2 ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & b , & c ) ; n1 = b ; n2 = c ; while ( b != c ) { if ( b > c ) { b = b - c ; } else { c = c - b ; } } printf ( <str> , b , ( n1 * n2 ) / b ) ; } return <int> ; }", "label": 1, "id": 2333}
{"input": "int main ( ) { int A , B , T , i , j , GCD , C ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; C = A * B ; for ( j = <int> ; ; j ++ ) { if ( j % A == <int> && j % B == <int> ) { break ; } } GCD = ( C / j ) ; printf ( <str> , GCD , j ) ; } return <int> ; }", "label": 2, "id": 2334}
{"input": "int main ( ) { int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; int k = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; while ( i < n ) { if ( a [ i ] < a [ i + <int> ] ) i ++ ; else { k ++ ; i ++ ; } } printf ( <str> , k ) ; } return <int> ; }", "label": 1, "id": 2335}
{"input": "int main ( ) { int t ; long int a , b , x , y , temp , lcm , hcf ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } hcf = a ; lcm = ( x * y ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 2336}
{"input": "int gcd ( int m , int n ) { if ( m % n == <int> ) { return n ; } else { return gcd ( n , m % n ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; int m , n , c , d ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m , & n ) ; c = gcd ( m , n ) ; d = ( m * n ) / c ; printf ( <str> , c , d ) ; } }", "label": 1, "id": 2337}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int a ; scanf ( <str> , & a ) ; int e [ a ] , i , c = <int> ; for ( i = <int> ; i < a ; i ++ ) scanf ( <str> , & e [ i ] ) ; for ( i = <int> ; i < a - <int> ; i ++ ) { if ( e [ i ] > e [ i + <int> ] ) { c = c + e [ i + <int> ] ; } else if ( e [ i ] < e [ i + <int> ] ) c = c + e [ i ] ; } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 2338}
{"input": "int c [ <int> ] ; void counting_sort ( int a [ ] , int b [ ] , int n ) { int i ; for ( i = <int> ; i < <int> ; i ++ ) { c [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { b [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { c [ a [ i ] - <int> ] ++ ; } for ( i = <int> ; i < <int> ; i ++ ) { c [ i ] = c [ i ] + c [ i - <int> ] ; } for ( i = n - <int> ; i > - <int> ; i -- ) { b [ c [ a [ i ] - <int> ] - <int> ] = a [ i ] ; c [ a [ i ] - <int> ] -- ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i , a [ n ] , b [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } counting_sort ( a , b , n ) ; printf ( <str> , b [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 2339}
{"input": "int subinc ( ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] ; int i = <int> , j = <int> , count = n ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } i = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { j = <int> ; while ( arr [ i + j ] <= arr [ i + j + <int> ] && ( i + j + <int> ) < n ) { j ++ ; } count += j ; } return count ; } int main ( ) { int t ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i <= t ; i ++ ) { printf ( <str> , subinc ( ) ) ; } return <int> ; }", "label": 1, "id": 2340}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = ( a < b ) ? a : b ; int lcm = ( a > b ) ? a : b ; for ( int i = gcd ; i > <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { gcd = i ; break ; } } for ( int i = lcm ; i < <int> ; i ++ ) { if ( ( i % a == <int> ) && ( i % b == <int> ) ) { lcm = i ; break ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2341}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; long long int n1 , n2 , remainder , numerator , denominator , lcm , gcd ; while ( t -- ) { lcm = <int> , gcd = <int> , denominator = <int> ; scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { numerator = n1 ; denominator = n2 ; } else { numerator = n2 ; denominator = n1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = n1 * n2 / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 2342}
{"input": "int main ( void ) { long long int t , a , b = <int> , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < b ) { b = a ; } } printf ( <str> , ( n - <int> ) * b ) ; } return <int> ; }", "label": 1, "id": 2343}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 2344}
{"input": "int main ( ) { long int t , n , a , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & a ) ; min = a ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2345}
{"input": "main ( ) { int i , j , t , n ; scanf ( <str> , & t ) ; while ( t ) { int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } }", "label": 1, "id": 2346}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , n , r , i , j , k ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i <= r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = r - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2347}
{"input": "int main ( ) { int t , i , n , j , s , k ; scanf ( <str> , & t ) ; int m [ t ] , p [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ <int> ] > a [ j ] ) { s = a [ <int> ] ; a [ <int> ] = a [ j ] ; a [ j ] = s ; } } m [ i ] = a [ <int> ] ; p [ i ] = n ; } for ( k = <int> ; k < t ; k ++ ) printf ( <str> , m [ k ] * ( p [ k ] - <int> ) ) ; return <int> ; }", "label": 0, "id": 2348}
{"input": "int main ( ) { int t , n , i , j , s , s1 , k , a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { s = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; s1 = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; if ( s >= s1 ) { a [ i - <int> ] [ j ] = s ; } else { a [ i - <int> ] [ j ] = s1 ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2349}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( void ) { int t = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; long long int ans = <int> ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; long long int dp [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - <int> ] [ j ] ; else if ( j == i ) dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - <int> ] [ j - <int> ] ; else dp [ i ] [ j ] = a [ i ] [ j ] + max ( dp [ i - <int> ] [ j ] , dp [ i - <int> ] [ j - <int> ] ) ; } } i = n - <int> ; ans = dp [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( ans < dp [ i ] [ j ] ) ans = dp [ i ] [ j ] ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 2350}
{"input": "int main ( ) { int t , n , i , j , sum = <int> , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; sum = a [ <int> ] [ <int> ] ; j = <int> ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) a [ i - <int> ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2351}
{"input": "int n ; int sum ( int a [ <int> ] [ <int> ] , int i , int j , int b [ <int> ] [ <int> ] ) { int s ; if ( i >= n ) { return <int> ; } if ( b [ i ] [ j ] != <int> ) { return b [ i ] [ j ] ; } int s1 = sum ( a , i + <int> , j , b ) ; int s2 = sum ( a , i + <int> , j + <int> , b ) ; s = max ( s1 , s2 ) + a [ i ] [ j ] ; b [ i ] [ j ] = s ; return s ; } int main ( ) { int a [ <int> ] [ <int> ] , i , j , k , T , b [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { b [ i ] [ j ] = <int> ; } } int ans = sum ( a , <int> , <int> , b ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 2352}
{"input": "long int max , count ; int A [ <int> ] [ <int> ] , N ; void count_max ( int , int ) ; int main ( ) { int i , j , k , T ; scanf ( <str> , & T ) ; int buff [ T ] ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; count = A [ <int> ] [ <int> ] ; max = <int> ; count_max ( <int> , <int> ) ; buff [ k ] = max ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , buff [ i ] ) ; return <int> ; } void count_max ( int i , int P ) { static int j ; if ( i == N ) { if ( count > max ) max = count ; count -= A [ i - <int> ] [ j ] ; return ; } for ( j = P ; j <= P + <int> ; j ++ ) { count += A [ i ] [ j ] ; count_max ( i + <int> , j ) ; } }", "label": 1, "id": 2353}
{"input": "int main ( ) { int t , i , n , a , min ; long long int cost ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 2354}
{"input": "int main ( ) { int sum = <int> , k , j , i , test , row , a [ <int> ] [ <int> ] ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & row ) ; for ( j = <int> ; j < row ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } sum = sum + a [ <int> ] [ <int> ] ; for ( j = <int> ; j < row ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j ] [ k ] >= a [ j ] [ k + <int> ] ) sum += a [ j ] [ k ] ; else { sum += a [ j ] [ ++ k ] ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2355}
{"input": "int output , arr [ <int> ] ; int main ( ) { int testcase , test , total_row , i , start , end ; scanf ( <str> , & testcase ) ; end = - <int> ; for ( test = <int> ; test <= testcase ; test ++ ) { scanf ( <str> , & total_row ) ; start = end + <int> ; end = start + total_row * ( total_row + <int> ) / <int> - <int> ; for ( i = start ; i <= end ; i ++ ) scanf ( <str> , & arr [ i ] ) ; output = arr [ start ] ; total ( total_row , <int> , start ) ; printf ( <str> , output ) ; } return ( <int> ) ; } int total ( int total_row , int row , int index ) { if ( row == total_row ) return ; int below , row_end ; below = row + index ; row_end = ( row * ( row + <int> ) % <int> ) - <int> ; if ( below - <int> == row_end ) index = maxof2 ( below , below + <int> ) ; else index = maxof3 ( below - <int> , below , below + <int> ) ; output += arr [ index ] ; total ( total_row , row + <int> , index ) ; } int maxof2 ( int a , int b ) { if ( arr [ a ] > arr [ b ] ) return ( a ) ; else return ( b ) ; } int maxof3 ( int a , int b , int c ) { int d = maxof2 ( a , b ) ; return ( maxof2 ( d , c ) ) ; }", "label": 3, "id": 2356}
{"input": "int main ( ) { long i , j , T , n , a , min ; long cost = <int> ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & n ) ; min = <int> ; cost = <int> ; for ( j = <int> ; j <= n ; j ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 2357}
{"input": "int maxim ( int a , int b ) { if ( a > b ) return a ; else if ( b > a ) return b ; else return a ; } int main ( void ) { long long int tests ; scanf ( <str> , & tests ) ; long long int range ; for ( range = <int> ; range < tests ; range ++ ) { long long int num ; scanf ( <str> , & num ) ; long long int i , j ; long long int arr [ num ] [ num ] ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } long long int k , k1 , val , lol ; long long int a , b ; for ( k = num - <int> ; k > <int> ; k -- ) { for ( k1 = k - <int> ; k1 >= <int> ; k1 -- ) { a = arr [ k ] [ k1 ] ; b = arr [ k ] [ k1 + <int> ] ; val = arr [ k - <int> ] [ k1 ] ; lol = maxim ( a , b ) ; arr [ k - <int> ] [ k1 ] = lol + val ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2358}
{"input": "int main ( ) { int a , b , c , m , n , i , t , j , k , arr [ <int> ] [ <int> ] ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b ) ; for ( j = <int> ; j < b ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } if ( b - <int> >= <int> ) { for ( m = b - <int> ; m >= <int> ; m -- ) { for ( n = <int> ; n <= m ; n ++ ) { if ( arr [ m + <int> ] [ n ] > arr [ m + <int> ] [ n + <int> ] ) { arr [ m ] [ n ] = arr [ m ] [ n ] + arr [ m + <int> ] [ n ] ; } else { arr [ m ] [ n ] = arr [ m ] [ n ] + arr [ m + <int> ] [ n + <int> ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } else { printf ( <str> , arr [ <int> ] [ <int> ] ) ; } } return <int> ; }", "label": 0, "id": 2359}
{"input": "main ( ) { long int a [ <int> ] , t , i , j , n , c , h , p , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; c = n ; for ( j = <int> ; j < n ; j ++ ) { p = <int> ; for ( k = j + <int> ; k < n ; k ++ ) { if ( a [ k ] >= a [ k - <int> ] ) { p ++ ; j = k ; } else break ; } for ( h = <int> ; h <= p ; h ++ ) c = c + h ; } printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 2360}
{"input": "int main ( void ) { unsigned long long T , N , i , j , max , lar ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; unsigned long long A [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; } for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) A [ i ] [ <int> ] += A [ i - <int> ] [ <int> ] ; else if ( i == j ) A [ i ] [ j ] += A [ i - <int> ] [ j - <int> ] ; else { max = ( A [ i - <int> ] [ j - <int> ] > A [ i - <int> ] [ j ] ) ? A [ i - <int> ] [ j - <int> ] : A [ i - <int> ] [ j ] ; A [ i ] [ j ] += max ; } } } lar = A [ N - <int> ] [ <int> ] ; for ( j = <int> ; j < N ; j ++ ) { if ( A [ N - <int> ] [ j ] > lar ) lar = A [ N - <int> ] [ j ] ; } printf ( <str> , lar ) ; } return <int> ; }", "label": 0, "id": 2361}
{"input": "int main ( ) { long long int t , n , a [ <int> ] , b [ <int> ] , large ; long long int temp , temp1 , i , j ; long long int temp2 ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } temp = <int> ; temp1 = <int> ; for ( j = <int> ; j < i ; j ++ ) { if ( i == <int> ) { b [ j ] = a [ j ] ; temp1 = a [ j ] ; } else { temp = temp1 ; if ( j == <int> ) { temp1 = b [ j ] ; b [ j ] = b [ j ] + a [ j ] ; } else if ( j != i - <int> ) { if ( a [ j ] + b [ j ] > temp1 + a [ j ] ) { b [ j ] = a [ j ] + b [ j ] ; temp1 = b [ j ] - a [ j ] ; } else { b [ j ] = temp1 + a [ j ] ; temp1 = b [ j ] - temp1 ; } } else b [ j ] = a [ j ] + temp1 ; } } } large = b [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( large < b [ i ] ) large = b [ i ] ; } printf ( <str> , large ) ; t -- ; } ; }", "label": 1, "id": 2362}
{"input": "main ( ) { int t , i , j ; long int n ; long int x1 [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & x1 [ j ] ) ; } long long sum = <int> ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( x1 [ j + <int> ] > x1 [ j ] ) { x1 [ j + <int> ] = x1 [ j ] ; } sum += x1 [ j + <int> ] ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 2363}
{"input": "int main ( ) { int a [ <int> ] , b , i , j , m , k , p = <int> , s ; scanf ( <str> , & i ) ; for ( b = <int> ; b < i ; b ++ ) { scanf ( <str> , & m ) ; for ( j = <int> ; j < m ; j ++ ) scanf ( <str> , & a [ m ] ) ; for ( j = <int> ; j < m ; j ++ ) { for ( k = j + <int> ; k < m ; k ++ ) { if ( a [ j ] == a [ k ] ) p ++ ; } } s = ( m - p ) * ( m - p - <int> ) ; printf ( <str> , s / <int> ) ; } }", "label": 2, "id": 2364}
{"input": "long long int GCD ( long long int x , long long int y ) { if ( x == <int> ) return y ; while ( y != <int> ) { if ( x > y ) x = x - y ; else y = y - x ; } return x ; } int main ( ) { int t , i ; long long int a , b ; long long int ans1 , ans2 ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; ans1 = GCD ( a , b ) ; ans2 = ( a * b ) / ans1 ; printf ( <str> , ans1 , ans2 ) ; } return <int> ; }", "label": 0, "id": 2365}
{"input": "int main ( ) { int t ; long int a , b , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t > <int> ) { gcd = <int> ; scanf ( <str> , & a , & b ) ; lcm = ( ( a * b ) / gcd ) ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 2366}
{"input": "int Gcd ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; gcd = Gcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int Gcd ( int x , int y ) { if ( x == <int> ) return y ; else return Gcd ( y % x , x ) ; }", "label": 1, "id": 2367}
{"input": "int fastread ( ) { int input ; char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; input = <int> ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ <int> ] [ <int> ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2368}
{"input": "long long int compare ( long long int * a , long long int * b ) { long long int l , n ; l = * a ; n = * b ; return ( l - n ) ; } int cmpfunc ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( void ) { int x ; scanf ( <str> , & x ) ; while ( x -- ) { int n , i ; scanf ( <str> , & n ) ; int values [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & values [ i ] ) ; } qsort ( values , n , sizeof ( int ) , cmpfunc ) ; printf ( <str> , values [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2369}
{"input": "int table [ <int> ] [ <int> ] ; int input [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } void count ( int n ) { int i , j ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= n ; j ++ ) table [ i ] [ j ] = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { table [ i ] [ j ] = max ( table [ i + <int> ] [ j ] + input [ i + <int> ] [ j ] , table [ i + <int> ] [ j + <int> ] + input [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , table [ <int> ] [ <int> ] + input [ <int> ] [ <int> ] ) ; return ; } int main ( ) { int t ; int n ; int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & input [ i ] [ j ] ) ; count ( n ) ; } return <int> ; }", "label": 0, "id": 2370}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { int m , n ; scanf ( <str> , & m , & n ) ; int max , min ; if ( m > n ) { max = m ; min = n ; } else { max = n ; min = m ; } int r = max % min ; while ( r != <int> ) { min = r ; r = max % min ; } int gcd = min ; int lcm = ( m * n ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2371}
{"input": "int main ( ) { int t , n , s , d = <int> , max ; scanf ( <str> , & t ) ; while ( t -- ) { max = INT_MIN ; scanf ( <str> , & n ) ; int a [ ( n * ( n + <int> ) ) / <int> ] , i , c = <int> , d = <int> , s ; for ( i = <int> ; i < ( n * ( n + <int> ) / <int> ) ; i ++ ) scanf ( <str> , a + i ) ; if ( n == <int> ) { scanf ( <str> , a [ -- i ] ) ; continue ; } for ( i = <int> ; i <= ( n * ( n + <int> ) / <int> - <int> * n ) + <int> ; ) { s = a [ i ] + a [ i + c ] + a [ i + c + <int> ] ; if ( s >= max ) { max = s ; } if ( i > <int> ) i += c ; else i ++ ; c ++ ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2372}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] , i , j , count = <int> , list ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] > arr [ i + <int> ] ) { count += arr [ i + <int> ] ; } else { list = arr [ i ] ; arr [ i ] = arr [ i + <int> ] ; arr [ i + <int> ] = list ; count += arr [ i + <int> ] ; } } printf ( <str> , count ) ; } t -- ; return <int> ; }", "label": 2, "id": 2373}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; return gcd ( b % a , a ) ; } int main ( ) { long long int g , a , b ; int tc ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g ) ; printf ( <str> , ( a * b ) / g ) ; } }", "label": 1, "id": 2374}
{"input": "int main ( ) { int i , j , n , t , * ptr ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; ptr = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ptr [ i ] ) ; int sum = n ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n - i ; j ++ ) { int min = ptr [ <int> ] ; if ( ptr [ i + j ] <= ptr [ i + j + <int> ] ) min = ptr [ i + j + <int> ] ; else sum = sum + j ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 2375}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int min = <int> ; for ( j = <int> ; j < n ; j ++ ) { int temp ; scanf ( <str> , & temp ) ; if ( min > temp ) min = temp ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2376}
{"input": "int main ( ) { int x , y , i , j , p ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & x ) ; while ( x -- ) { p = <int> ; a [ <int> ] [ <int> ] = <int> ; scanf ( <str> , & y ) ; for ( i = <int> ; i < y ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < y - <int> ; i ++ ) { p = p + a [ i ] [ <int> ] ; } printf ( <str> , p + a [ y - <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2377}
{"input": "int func ( int A [ ] , int i , int j ) { int n = i , flag = <int> ; for ( n = i ; n < j ; n ++ ) { if ( A [ n ] > A [ n + <int> ] ) { flag = <int> ; break ; } } return flag ; } int main ( ) { int i , test_no ; scanf ( <str> , & test_no ) ; for ( i = <int> ; i < test_no ; i ++ ) { int N ; scanf ( <str> , & N ) ; int A [ N ] ; int z ; int a , b , t_c = <int> ; for ( a = <int> ; a < N ; a ++ ) { scanf ( <str> , & A [ a ] ) ; for ( b = a ; b < N ; b ++ ) { if ( func ( A , a , b ) ) t_c ++ ; } } printf ( <str> , t_c ) ; } }", "label": 2, "id": 2378}
{"input": "int sum ( int a [ <int> ] [ <int> ] , int i , int j , int N , int b [ <int> ] [ <int> ] ) { int t , t1 , t2 ; if ( i > N ) { return <int> ; } if ( b [ i ] [ j ] != <int> ) { return b [ i ] [ j ] ; } t1 = sum ( a , i + <int> , j , N , b ) ; t2 = sum ( a , i + <int> , j + <int> , N , b ) ; if ( t1 > t2 ) { t = t1 + a [ i ] [ j ] ; } else { t = t2 + + a [ i ] [ j ] ; } b [ i ] [ j ] = t ; return t ; } int main ( ) { int T , N , i , j , k , a [ <int> ] [ <int> ] , result ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int b [ <int> ] [ <int> ] = { { <int> } , { <int> } } ; result = sum ( a , <int> , <int> , N , b ) ; printf ( <str> , result ) ; } return <int> ; }", "label": 1, "id": 2379}
{"input": "int main ( ) { int i , t , k , a , b , p ; scanf ( <str> , & t ) ; if ( t <= <int> ) { for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; p = a * b ; while ( b % a != <int> ) { k = b % a ; b = a ; a = k ; } printf ( <str> , a , ( p / a ) ) ; } } return <int> ; }", "label": 1, "id": 2380}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int size , sl = <int> ; scanf ( <str> , & size ) ; int arr [ size ] , i , j , k ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < sl ) sl = arr [ i ] ; } int result = sl * ( size - <int> ) ; printf ( <str> , result ) ; } }", "label": 0, "id": 2381}
{"input": "void sum ( int ( * arr ) [ <int> ] , int line ) ; int main ( ) { int arr [ <int> ] [ <int> ] ; int ans [ <int> ] ; int line , loop , ch , i , j , p = <int> ; loop = ( int ) getchar ( ) - <int> ; getchar ( ) ; while ( loop ) { i = <int> ; line = ( int ) getchar ( ) - <int> ; getchar ( ) ; while ( line ) { j = <int> ; while ( ( ch = getchar ( ) ) != <char> ) { if ( ch != <char> ) { arr [ i ] [ j ] = ( int ) ch - <int> ; j ++ ; } } i ++ ; line -- ; } sum ( arr , i - <int> ) ; ans [ p ++ ] = arr [ <int> ] [ <int> ] ; loop -- ; } i = <int> ; while ( i < p ) printf ( <str> , ans [ i ++ ] ) ; } void sum ( int ( * arr ) [ <int> ] , int line ) { if ( line < <int> ) return ; int j = <int> ; while ( j <= line ) { arr [ line ] [ j ] = ( ( arr [ line + <int> ] [ j ] > arr [ line + <int> ] [ j + <int> ] ) ? ( arr [ line ] [ j ] += arr [ line + <int> ] [ j ] ) : ( arr [ line ] [ j ] += arr [ line + <int> ] [ j + <int> ] ) ) ; j ++ ; } sum ( arr , -- line ) ; }", "label": 1, "id": 2382}
{"input": "int main ( ) { long long t ; scanf ( <str> , & t ) ; while ( t -- ) { int x , y , m , i , n1 , n2 ; scanf ( <str> , & x , & y ) ; if ( x > y ) m = y ; else m = x ; for ( i = m ; i >= <int> ; i -- ) { if ( x % i == <int> && y % i == <int> ) { printf ( <str> , i ) ; break ; } } printf ( <str> , x * y / i ) ; } return <int> ; }", "label": 1, "id": 2383}
{"input": "unsigned long int lcm ( unsigned long int a , unsigned long int b ) { unsigned long int x = ( a < b ) ? a : b ; unsigned long int y = ( a > b ) ? a : b ; int i = <int> ; while ( <int> ) { if ( ( x * i ) % y == <int> ) { break ; } else { i ++ ; } } return x * i ; } unsigned long int gcd ( unsigned long int a , unsigned long int b ) { unsigned long int rem = a % b ; if ( rem ) return gcd ( b , rem ) ; else return b ; } int main ( ) { int T ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; i ++ ) { unsigned long int a , b ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 2, "id": 2384}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int gcd , a , b , i ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; printf ( <str> , gcd , ( ( long long int ) a * b ) / gcd ) ; } }", "label": 0, "id": 2385}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int N ; scanf ( <str> , & N ) ; int a [ N ] ; unsigned long int small = <int> ; int i ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( small > a [ i ] ) small = a [ i ] ; } printf ( <str> , small * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2386}
{"input": "typedef unsigned long u32 ; typedef unsigned int u16 ; typedef unsigned char u8 ; typedef long s32 ; typedef int s16 ; typedef char s8 ; int main ( ) { int sldr , i , loop , N = <int> , Sum = <int> , K = <int> , wpn [ <int> ] = { <int> } ; scanf ( <str> , & sldr ) ; while ( sldr -- ) { scanf ( <str> , & N , & K ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & wpn [ i ] ) ; Sum += wpn [ i ] ; } if ( K == <int> ) { if ( Sum % <int> == <int> ) { printf ( <str> ) ; } else printf ( <str> ) ; } else printf ( <str> ) ; } return <int> ; } int main ( ) { int sldr , i , tmp , loop , N = <int> , Sum = <int> , K = <int> , wpn [ <int> ] = { <int> } ; scanf ( <str> , & sldr ) ; while ( sldr -- ) { scanf ( <str> , & N , & K ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & wpn [ i ] ) ; Sum += wpn [ i ] ; } while ( K -- ) { tmp = Sum + <int> ; Sum = Sum + tmp ; } if ( tmp % <int> == <int> ) printf ( <str> ) ; else printf ( <str> ) ; } return <int> ; } int main ( ) { u16 loop , i , index , mv , num = <int> , ratingcpy ; u8 lngth [ <int> ] = { <int> } , rating [ <int> ] = { <int> } ; scanf ( <str> , & loop ) ; while ( loop -- ) { scanf ( <str> , & mv ) ; for ( i = <int> ; i <= mv ; i ++ ) { scanf ( <str> , & lngth [ i ] ) ; } for ( i = <int> ; i <= mv ; i ++ ) { scanf ( <str> , & rating [ i ] ) ; } for ( i = mv ; i > <int> ; i -- ) { if ( ( num < lngth [ i ] * rating [ i ] ) || ( ( num == lngth [ i ] * rating [ i ] ) && ( ratingcpy < rating [ i ] ) ) || ( ( num == lngth [ i ] * rating [ i ] ) && ( ratingcpy == rating [ i ] ) ) ) { num = lngth [ i ] * rating [ i ] ; ratingcpy = rating [ i ] ; index = i ; } } printf ( <str> , index ) ; num = <int> ; } return <int> ; } int main ( ) { u8 A [ <int> ] , loop ; u32 i , j , x = <int> , len , ctr = <int> ; scanf ( <str> , & loop ) ; while ( loop -- ) { scanf ( <str> , & A ) ; len = strlen ( A ) ; for ( i = <int> ; i < len ; i ++ ) { if ( <int> == A [ i ] ) { x = A [ i ] ; for ( j = i ; j < len ; j ++ , i = len ) { if ( x != A [ j ] ) { x = A [ j ] ; ctr ++ ; } } } } if ( ctr == <int> ) { if ( x == <int> ) printf ( <str> ) ; else printf ( <str> ) ; } else if ( ctr == <int> ) printf ( <str> ) ; else printf ( <str> ) ; ctr = <int> ; x = <int> ; } return <int> ; } int main ( ) { int loop ; scanf ( <str> , & loop ) ; while ( loop -- ) { int num , L , min = <int> , Arr [ ] = { <int> , <int> , <int> , <int> , <int> , <int> } ; scanf ( <str> , & num ) ; L = sizeof ( Arr ) / sizeof ( Arr [ <int> ] ) ; while ( num ) { min += ( num / Arr [ L - <int> ] ) ; num %= ( Arr [ L - <int> ] ) ; L -- ; } printf ( <str> , min ) ; } return <int> ; } int main ( ) { int loop ; scanf ( <str> , & loop ) ; while ( loop -- ) { int D , N , i , j = <int> , sum = <int> ; scanf ( <str> , & D , & N ) ; for ( i = N ; i > <int> ; i -- ) { sum += i ; } for ( i = sum ; i > <int> ; i -- ) j += i ; printf ( <str> , j ) ; } return <int> ; } int main ( ) { int loop ; scanf ( <str> , & loop ) ; while ( loop -- ) { u32 i , j , k , num1 , num2 , gcd = <int> ; scanf ( <str> , & num1 , & num2 ) ; i = num1 ; j = num2 ; while ( i != j ) { ( i > j ) ? ( i -= j ) : ( j -= i ) ; } printf ( <str> , i , ( ( num1 * num2 ) / i ) ) ; } return <int> ; }", "label": 0, "id": 2387}
{"input": "int main ( ) { int n , t , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( i = <int> ; i <= j ; i ++ ) { a [ j ] [ i ] += ( ( a [ j + <int> ] [ i ] > a [ j + <int> ] [ i + <int> ] ) ? a [ j + <int> ] [ i ] : a [ j + <int> ] [ i + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2388}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int f = <int> ; printf ( <str> ) ; while ( f <= t ) { int k ; scanf ( <str> , & k ) ; int a [ k ] ; printf ( <str> ) ; int i ; for ( i = <int> ; i < ( k ) ; i ++ ) { scanf ( <str> , & a [ i ] ) ; printf ( <str> ) ; } int min , cost , greater ; for ( i = <int> ; i < ( k - <int> ) ; i ++ ) { if ( i != ( k - <int> ) ) { if ( a [ i ] > a [ i + <int> ] ) greater = a [ i ] ; else greater = a [ i + <int> ] ; } else { if ( a [ i ] > a [ i + <int> ] ) { greater = a [ i ] ; cost = a [ i - <int> ] ; } else { greater = a [ i + <int> ] ; cost = a [ i - <int> ] ; } } } printf ( <str> ) ; printf ( <str> , cost ) ; } }", "label": 2, "id": 2389}
{"input": "int main ( ) { int y , z , i , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & y ) ; int A [ y ] ; for ( i = <int> ; i <= y ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } int min = A [ <int> ] ; for ( z = <int> ; z <= y ; z ++ ) { if ( A [ z ] < min ) min = A [ z ] ; } printf ( <str> , min * ( y - <int> ) ) ; } return <int> ; }", "label": 1, "id": 2390}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int A , B ; long int gcd ; long int lcm ; scanf ( <str> , & A , & B ) ; for ( int i = <int> ; i <= A && i <= B ; i ++ ) { if ( A % i == <int> && B % i == <int> ) { gcd = i ; } } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2391}
{"input": "int max , sum , i , t , k , j = <int> , f = <int> ; int q [ <int> ] ; void ser ( int , int ) ; int main ( void ) { fastRead ( & t ) ; while ( t -- ) { fastRead ( & k ) ; k = k * ( k + <int> ) / <int> ; max = <int> ; sum = <int> ; for ( i = <int> ; i < k ; i ++ ) { fastRead ( q [ i ] ) ; } ser ( q [ <int> ] , <int> ) ; printf ( <str> , max ) ; } return <int> ; } void ser ( int old , int opos ) { sum += old ; j ++ ; if ( ( opos + j ) < k ) { ser ( q [ opos + j ] , opos + j ) ; f = <int> ; } else j -- ; max = maxf ( sum , max ) ; if ( f == <int> ) { f = <int> ; sum = sum - old ; ser ( q [ opos + <int> ] , opos + <int> ) ; j -- ; } else { sum = sum - old ; } } void inline fastRead ( int * a ) { register char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; * a = <int> ; while ( c > <int> ) { * a = * a * <int> + c - <char> ; c = getchar_unlocked ( ) ; } }", "label": 3, "id": 2392}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int i , j , n , z , b , k , e [ <int> ] , l , q ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } e [ <int> ] = a [ <int> ] [ <int> ] ; k = <int> ; z = <int> ; l = <int> ; b = <int> ; q = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( z == <int> ) { z = <int> ; b ++ ; k ++ ; if ( b == q ) { j = j - q ; q = q * <int> ; } else { j = j - <int> ; } } e [ l ] = e [ k ] + a [ i ] [ j ] ; l = l + <int> ; z ++ ; } z = <int> ; k ++ ; q = <int> ; b = <int> ; } i = <int> ; int c ; int u = ( <int> ^ n ) ; l = l - <int> ; c = e [ l ] ; while ( l > <int> ) { if ( e [ l ] > c ) { c = e [ l ] ; } l -- ; i ++ ; } printf ( <str> , c ) ; t -- ; } return ( <int> ) ; }", "label": 3, "id": 2393}
{"input": "inline int getInt ( ) { char c ; int val = <int> ; while ( ! isdigit ( c = getchar_unlocked ( ) ) ) ; do { val = val * <int> + ( c - <char> ) ; } while ( isdigit ( c = getchar_unlocked ( ) ) ) ; return val ; } int getInt ( ) ; int main ( ) { int t = getInt ( ) ; unsigned long long int result [ MAX ] ; int i ; for ( i = <int> ; i < t ; i ++ ) { int n = getInt ( ) ; int j , min = getInt ( ) ; for ( j = <int> ; j < n ; j ++ ) { int a = getInt ( ) ; if ( a < min ) min = a ; } result [ i ] = ( unsigned long long ) min * ( n - <int> ) ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; }", "label": 0, "id": 2394}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , cost = <int> , min , a [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } cost = ( n - <int> ) * min ; printf ( <str> , cost ) ; } }", "label": 0, "id": 2395}
{"input": "int main ( void ) { int t , i , j , k , size , l , m , q ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & size ) ; long int a [ size ] ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long int min = <int> ; for ( i = <int> ; i < size - <int> ; i ++ ) { if ( a [ <int> ] > a [ <int> ] ) { min = min + a [ <int> ] ; for ( l = <int> ; l < size - <int> ; l ++ ) a [ l ] = a [ l + <int> ] ; } else { min = min + a [ <int> ] ; for ( m = <int> ; m < size - <int> ; m ++ ) a [ m ] = a [ m + <int> ] ; } } printf ( <str> , min ) ; } return <int> ; }", "label": 2, "id": 2396}
{"input": "main ( ) { int p , i , b , a , j , d , n , k , l , x , y , max1 ; scanf ( <str> , & a ) ; for ( i = <int> ; i <= a ; i ++ ) { scanf ( <str> , & n ) ; int c [ n + <int> ] [ n + <int> ] ; int max [ n + <int> ] ; for ( j = <int> ; j <= n ; j ++ ) { for ( k = <int> ; k <= n ; k ++ ) { c [ j ] [ k ] = <int> ; max [ k ] = <int> ; } } max [ n + <int> ] = <int> ; for ( j = <int> ; j <= n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & c [ j ] [ k ] ) ; } } p = <int> ; max [ <int> ] = c [ <int> ] [ <int> ] ; for ( j = <int> ; j <= n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { x = c [ j ] [ k ] + p ; y = c [ j ] [ k ] + max [ k ] ; p = max [ k ] ; max [ k ] = ( ( x > y ) ? x : y ) ; } } max1 = max [ <int> ] ; for ( k = <int> ; k <= n ; k ++ ) { max1 = ( ( max1 > max [ k ] ) ? max1 : max [ k ] ) ; } printf ( <str> , max1 ) ; } }", "label": 1, "id": 2397}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 2398}
{"input": "main ( ) { int a [ <int> ] , i , j , count = <int> , k , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , a + i ) ; for ( i = <int> ; i < n ; i ++ ) { k = i ; for ( j = i ; j < n ; j ++ ) { if ( a [ k ] <= a [ j ] ) { count ++ ; k = j ; } else break ; } } printf ( <str> , count ) ; } }", "label": 3, "id": 2399}
{"input": "void initialize ( int lines ) ; int findSum ( int matrix [ <int> ] [ <int> ] , int lines ) ; int max ( int a , int b ) ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int findSum ( int matrix [ <int> ] [ <int> ] , int lines ) { int i = <int> ; while ( lines > <int> ) { for ( i = <int> ; i < lines - <int> ; i ++ ) { matrix [ lines - <int> ] [ i ] = matrix [ lines - <int> ] [ i ] + max ( matrix [ lines - <int> ] [ i ] , matrix [ lines - <int> ] [ i + <int> ] ) ; } lines -- ; } return matrix [ lines ] [ lines ] ; } void initialize ( int lines ) { int matrix [ <int> ] [ <int> ] ; int i = <int> ; int a = <int> ; int val = <int> ; for ( ; i < lines ; i ++ ) { for ( ; a < lines ; a ++ ) { if ( a > i ) matrix [ i ] [ a ] = <int> ; else { scanf ( <str> , & matrix [ i ] [ a ] ) ; if ( matrix [ i ] [ a ] > <int> || matrix [ i ] [ a ] < <int> ) return ; } } a = <int> ; } val = findSum ( matrix , lines ) ; printf ( <str> , val ) ; } int main ( ) { int cases = <int> ; int lines = <int> ; int i = <int> ; scanf ( <str> , & cases ) ; if ( lines < <int> || lines > <int> ) { return - <int> ; } for ( ; i < cases ; i ++ ) { scanf ( <str> , & lines ) ; initialize ( lines ) ; } return <int> ; }", "label": 1, "id": 2400}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , m , i , j , max , t ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { printf ( <str> ) ; for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j + <int> ] = <int> ; } for ( i = <int> ; i < m ; i ++ ) a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } max = a [ m - <int> ] [ <int> ] ; for ( j = <int> ; j < m ; j ++ ) { if ( a [ m - <int> ] [ j ] > max ) max = a [ m - <int> ] [ j ] ; } printf ( <str> , max ) ; t -- ; } return ( <int> ) ; }", "label": 3, "id": 2401}
{"input": "long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , g , l ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 2402}
{"input": "int main ( ) { int tcase , i , j , num , sum , temp , prev , curr ; scanf ( <str> , & tcase ) ; for ( i = <int> ; i < tcase ; i ++ ) { scanf ( <str> , & num ) ; sum = <int> ; temp = <int> ; for ( j = <int> ; j < num ; j ++ ) { if ( j == <int> ) scanf ( <str> , & prev ) ; else { scanf ( <str> , & curr ) ; if ( curr < prev ) temp = j ; sum = sum + ( j - temp + <int> ) ; prev = curr ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2403}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2404}
{"input": "int main ( void ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { long long int a , b , i , gcd , lcm ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2405}
{"input": "int main ( ) { int i , j , tc , num , prev , curr , temp ; long long count ; scanf ( <str> , & tc ) ; for ( i = <int> ; i <= tc ; i ++ ) { count = <int> ; temp = <int> ; scanf ( <str> , & num ) ; for ( j = <int> ; j <= num ; j ++ ) { if ( j == <int> ) scanf ( <str> , & prev ) ; else { scanf ( <str> , & curr ) ; if ( prev > curr ) temp = j ; else count += ( j - temp + <int> ) ; prev = curr ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 2406}
{"input": "int main ( ) { int t , n , p , m , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; p = n - <int> ; scanf ( <str> , & min ) ; while ( p -- ) { scanf ( <str> , & m ) ; if ( m < min ) min = m ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 1, "id": 2407}
{"input": "int gcd ( int a , int b ) { int i ; i = a - <int> ; for ( ; i >= <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) return i ; } } int lcm ( int a , int b ) { int k , o ; o = gcd ( a , b ) ; k = ( b / o ) * a ; return k ; } int main ( ) { int t , a , b , l , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a == b ) { printf ( <str> , a , a ) ; break ; } else if ( a > b ) { l = gcd ( b , a ) ; m = lcm ( b , a ) ; } else { l = gcd ( a , b ) ; m = lcm ( a , b ) ; } printf ( <str> , l , m ) ; } return <int> ; }", "label": 2, "id": 2408}
{"input": "int a [ <int> ] [ <int> ] ; int b [ <int> ] [ <int> ] ; struct co { int x ; int y ; } ind [ <int> ] ; int in ; int max ( int s1 , int s2 ) { if ( s1 >= s2 ) return s1 ; else return s2 ; } int before ( int i , int j ) { int k ; for ( k = <int> ; k < in ; k ++ ) if ( ind [ k ] <fp> x == i && ind [ k ] <fp> y == j ) return <int> ; return <int> ; } int sum ( int i , int j , int n ) { int s1 , s2 , s ; if ( i >= n ) return <int> ; if ( before ( i , j ) ) return b [ i ] [ j ] ; s1 = sum ( i + <int> , j , n ) ; s2 = sum ( i + <int> , j + <int> , n ) ; s = a [ i ] [ j ] + max ( s1 , s2 ) ; b [ i ] [ j ] = s ; ind [ in ] <fp> x = i ; ind [ in ++ ] <fp> y = j ; return s ; } main ( ) { int t , n ; int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , sum ( <int> , <int> , n ) ) ; } return <int> ; }", "label": 1, "id": 2409}
{"input": "int main ( ) { int t , i ; long long int l , a , b , g ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & a , & b ) ; for ( i = b ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) g = i ; } l = ( a * b ) / g ; printf ( <str> , g , l ) ; t -- ; } }", "label": 2, "id": 2410}
{"input": "int gcd ( int x , int y ) { if ( x == y ) return x ; if ( y == <int> ) return <int> ; return gcd ( y , x % y ) ; } int main ( ) { int a , b , x , y , t , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = ( a > b ) ? a : b ; y = a + b - x ; g = gcd ( x , y ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 3, "id": 2411}
{"input": "int main ( void ) { int t , l , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = l - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return ( <int> ) ; }", "label": 0, "id": 2412}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; long int a , b , temp ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( b < a ) { temp = a ; a = b ; b = temp ; } if ( a % b == <int> ) { printf ( <str> , b , a ) ; continue ; } temp = b / <int> ; while ( b % temp != <int> || a % temp != <int> ) { temp -- ; } b = b * a ; b = b / temp ; printf ( <str> , temp , b ) ; } return <int> ; }", "label": 2, "id": 2413}
{"input": "int main ( ) { int t , N , c , m , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & N ) ; int a [ N ] ; c = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < N ; j ++ ) { m = a [ j ] - a [ i ] ; if ( m == <int> || m == <int> ) { c ++ ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 2414}
{"input": "int main ( ) { int n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int dp [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) dp [ i ] [ j ] = <int> ; dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j != <int> ) dp [ i ] [ j ] = a [ i ] [ j ] + max ( dp [ i - <int> ] [ j ] , dp [ i - <int> ] [ j - <int> ] ) ; else dp [ i ] [ j ] = a [ i ] [ j ] + dp [ i - <int> ] [ j ] ; } } int m = INT_MIN ; for ( j = <int> ; j < n ; j ++ ) { if ( m < dp [ n - <int> ] [ j ] ) m = dp [ n - <int> ] [ j ] ; } printf ( <str> , m ) ; } } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; }", "label": 0, "id": 2415}
{"input": "int main ( void ) { long int T , i , a , b , LCM , t ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & a , & b ) ; t = a ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a ) ; LCM = ( t * b ) / a ; printf ( <str> , LCM ) ; } return <int> ; }", "label": 1, "id": 2416}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , j , min = <int> , temp = <int> , sum = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n - i - <int> ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) { temp = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = temp ; } } } printf ( <str> , sum = sum + ( a [ <int> ] * ( n - <int> ) ) ) ; } }", "label": 2, "id": 2417}
{"input": "int main ( ) { int cas , n , a [ <int> ] [ <int> ] , i , r , j , c , k = <int> , sum = <int> , max = <int> , <unk> = <int> , <unk> = <int> ; scanf ( <str> , & cas ) ; for ( i = <int> ; i < cas ; i ++ ) { k = <int> ; max = <int> ; <unk> = <int> ; <unk> = <int> ; scanf ( <str> , & n ) ; for ( r = <int> ; r < n ; r ++ ) { for ( c = <int> ; c <= r ; c ++ ) { scanf ( <str> , & a [ r ] [ c ] ) ; } } for ( c = <int> ; c < n ; c ++ ) { for ( r = <int> ; r < n ; r ++ ) { sum = sum + a [ r ] [ k ] ; } if ( sum > max ) { max = sum ; } sum = <int> ; k ++ ; } for ( r = <int> ; r < ( n - <int> ) ; r ++ ) { for ( c = <int> ; c < ( n - r ) ; c ++ ) { sum = sum + a [ <unk> ] [ <unk> ] ; <unk> ++ ; <unk> ++ ; } if ( sum > max ) { max = sum ; } sum = <int> ; <unk> = r ; <unk> = <int> ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2418}
{"input": "main ( ) { int array [ <int> ] , finalArray [ <int> ] ; int i , j , k ; int noOfTestCases , totalNoOfElements , noOfLines , nextElement ; scanf ( <str> , & noOfTestCases ) ; for ( k = <int> ; k < noOfTestCases ; k ++ ) { scanf ( <str> , & noOfLines ) ; totalNoOfElements = ( noOfLines * ( noOfLines + <int> ) ) / <int> ; for ( i = <int> ; i < totalNoOfElements ; i ++ ) { scanf ( <str> , & array [ i ] ) ; } for ( ; noOfLines > <int> ; -- noOfLines ) { for ( i = ( ( totalNoOfElements - noOfLines ) - ( noOfLines - <int> ) ) , j = <int> ; j < noOfLines ; i ++ , j ++ ) { if ( array [ i + noOfLines - <int> ] > array [ i + noOfLines ] ) { array [ i ] = array [ i ] + array [ i + noOfLines - <int> ] ; } else { array [ i ] = array [ i ] + array [ i + noOfLines ] ; } } totalNoOfElements = totalNoOfElements - noOfLines ; } finalArray [ k ] = array [ <int> ] ; } for ( k = <int> ; k < noOfTestCases ; k ++ ) { printf ( <str> , finalArray [ k ] ) ; } }", "label": 0, "id": 2419}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int gcd , lcm , a , b , i ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; for ( i = <int> ; ; i ++ ) if ( a * i % b == <int> ) { lcm = a * i ; break ; } printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 2420}
{"input": "int main ( ) { int t , i = <int> , j ; scanf ( <str> , & t ) ; int a [ t ] , b [ t ] ; for ( ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { for ( j = ( a [ i ] > b [ i ] ? b [ i ] : a [ i ] ) ; j >= <int> ; j -- ) { if ( a [ i ] % j == <int> && b [ i ] % j == <int> ) { printf ( <str> , j , a [ i ] * b [ i ] / j ) ; break ; } } } return <int> ; }", "label": 1, "id": 2421}
{"input": "int main ( void ) { int t , k = <int> , i ; long a [ <int> ] , n , sum = <int> , first ; scanf ( <str> , & t ) ; while ( k < t ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; first = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < first ) { sum = sum + a [ i ] ; first = a [ i ] ; } else sum = sum + first ; } printf ( <str> , sum ) ; k ++ ; } return <int> ; }", "label": 1, "id": 2422}
{"input": "int main ( void ) { int t , c , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b , & c ) ; if ( a == b && a == c && b == c ) { printf ( <str> ) ; } if ( a == b && c > a ) printf ( <str> , a ) ; if ( b == c && a > b ) printf ( <str> , b ) ; if ( a == c && b > a ) printf ( <str> , a ) ; if ( a == b && c < a ) printf ( <str> , c ) ; if ( b == c && a < b ) printf ( <str> , a ) ; if ( a == c && b < a ) printf ( <str> , b ) ; if ( a > b && a < c || a > c && a < b ) printf ( <str> , a ) ; if ( b > a && b < c || b < a && b > c ) printf ( <str> , b ) ; if ( c > a && c < b || c < a && c > b ) printf ( <str> , & c ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 2423}
{"input": "int main ( ) { int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return ( <int> ) ; }", "label": 0, "id": 2424}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , temp ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( long long int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long long int min = a [ <int> ] ; for ( long long int i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2425}
{"input": "int gcdf ( int a , int b ) { int m ; if ( ( a % b ) == <int> ) { return b ; } else { m = gcdf ( b , a % b ) ; } return m ; } int main ( ) { int T , N1 , N2 , i , gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N1 , & N2 ) ; gcd = lcm = <int> ; gcd = gcdf ( N1 , N2 ) ; lcm = ( N1 * N2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2426}
{"input": "typedef long long ll ; int main ( ) { ll t , n , x , cost , i , ss ; scanf ( <str> , & t ) ; ll small ; int a [ <int> ] ; ll test , j = <int> , k ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( ss = <int> ; ss < n ; ss ++ ) { scanf ( <str> , & a [ ss ] ) ; } small = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < small ) { small = a [ j ] ; } } ll c = small * ( n - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 2427}
{"input": "int n , a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int mmax ( int p , int q ) { if ( p > q ) return p ; else return q ; } int sum ( int i , int j ) { if ( b [ i ] [ j ] == <int> ) { if ( i >= ( n ) || n <= <int> ) return <int> ; else b [ i ] [ j ] = a [ i ] [ j ] + mmax ( sum ( i + <int> , j + <int> ) , sum ( i + <int> , j ) ) ; return b [ i ] [ j ] ; } else return b [ i ] [ j ] ; } int main ( ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { t -- ; for ( i = <int> ; i <= <int> ; i ++ ) { for ( j = <int> ; j <= <int> ; j ++ ) { b [ i ] [ j ] = <int> ; } } scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , sum ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 2428}
{"input": "long int gcd ( long int , long int ) ; long int lcm ( long int , long int ) ; int main ( void ) { int t ; long int a , b , g , temp , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } g = gcd ( a , b ) ; l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } return <int> ; } long int gcd ( long int a , long int b ) { long int i , r1 , r2 ; for ( i = a ; i >= <int> ; i -- ) { r1 = a % i ; if ( r1 == <int> ) { r2 = b % i ; if ( r2 == <int> ) return i ; } } } long int lcm ( long int a , long int b ) { long int i = b , r ; while ( <int> ) { r = b % a ; if ( r == <int> ) return b ; b += i ; } }", "label": 2, "id": 2429}
{"input": "int main ( ) { int t , a , b , num , den , rem , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2430}
{"input": "int gcd ( int a , int b ) { if ( a % b ) gcd ( b , a % b ) ; else return b ; } int main ( void ) { int t ; int g , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 2431}
{"input": "int countIncreasing ( int arr [ ] , int n ) { int cnt = <int> ; int i , len = <int> ; for ( i = <int> ; i < n - <int> ; ++ i ) { if ( arr [ i + <int> ] > arr [ i ] ) len ++ ; else { cnt += ( ( ( len - <int> ) * len ) / <int> ) ; len = <int> ; } } if ( len > <int> ) cnt += ( ( ( len - <int> ) * len ) / <int> ) ; return cnt ; } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int count = countIncreasing ( a , n ) ; printf ( <str> , n + count ) ; } }", "label": 0, "id": 2432}
{"input": "unsigned int max ( unsigned int a , unsigned int b ) { return a >= b ? a : b ; } unsigned int min ( unsigned int a , unsigned int b ) { return a <= b ? a : b ; } int main ( ) { unsigned int t , n , i , j , k , number ; unsigned int triangle [ <int> ] [ <int> ] ; unsigned int max_path = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & number ) ; if ( j > <int> ) { triangle [ j ] [ k ] = max ( number + triangle [ j - <int> ] [ min ( k , j - <int> ) ] , number + triangle [ j - <int> ] [ max ( k - <int> , <int> ) ] ) ; } else { triangle [ j ] [ k ] = number ; } } } for ( k = <int> ; k < n ; k ++ ) { max_path = max ( max_path , triangle [ n - <int> ] [ k ] ) ; } printf ( <str> , max_path ) ; max_path = <int> ; } return <int> ; }", "label": 3, "id": 2433}
{"input": "int main ( void ) { int t , i , j , k , n , count ; long long * a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; count = n ; a = ( long long * ) calloc ( n , sizeof ( long long ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { k = i + <int> ; j = i ; while ( a [ j ] < a [ k ] && k < n ) { count ++ ; j ++ ; k ++ ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 2434}
{"input": "int main ( ) { int N , i = <int> ; int a , b , lcm , hcf , least , greatest ; scanf ( <str> , & N ) ; while ( N -- ) { scanf ( <str> , & a , & b ) ; least = ( a < b ) ? a : b ; greatest = ( least == a ) ? b : a ; for ( i = <int> ; i <= least ; i ++ ) if ( a % i == <int> && b % i == <int> ) hcf = i ; for ( i = <int> ; ; i ++ ) { if ( ( greatest * i ) % least == <int> ) { lcm = greatest ; break ; } } printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 2435}
{"input": "void read_input ( ) ; void process ( ) ; void calculate ( int ) ; void print_input ( ) ; int num_test_cases ; typedef struct test_case { int num_lines ; int * * values ; } testcase ; testcase * t ; int main ( ) { read_input ( ) ; process ( ) ; return <int> ; } void read_input ( ) { char * s ; char * ipstring ; char * token ; int i , j , k , n , ipval ; s = ( char * ) malloc ( <int> * sizeof ( char ) ) ; gets ( s ) ; num_test_cases = atoi ( s ) ; t = ( testcase * ) malloc ( num_test_cases * sizeof ( struct test_case ) ) ; for ( i = <int> ; i < num_test_cases ; i ++ ) { gets ( s ) ; n = atoi ( s ) ; ( t + i ) -> num_lines = n ; ( t + i ) -> values = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( j = <int> ; j <= n ; j ++ ) { ( t + i ) -> values [ j - <int> ] = ( int * ) malloc ( j * sizeof ( int ) ) ; ipstring = ( char * ) malloc ( <int> * ( j + <int> ) * sizeof ( char ) ) ; gets ( ipstring ) ; token = strtok ( ipstring , <str> ) ; k = <int> ; while ( token != NULL ) { * ( ( ( t + i ) -> values [ j - <int> ] ) + ( k - <int> ) ) = atoi ( token ) ; token = strtok ( NULL , <str> ) ; k ++ ; } free ( ipstring ) ; } } } void process ( ) { int i ; for ( i = <int> ; i < num_test_cases ; i ++ ) { calculate ( i ) ; } } void calculate ( int n ) { int k , j ; int down , down_right ; int * * a = ( t + n ) -> values ; for ( k = ( t + n ) -> num_lines - <int> ; k >= <int> ; k -- ) { for ( j = <int> ; j < k ; j ++ ) { down = * ( a [ k ] + j ) ; down_right = * ( a [ k ] + ( j + <int> ) ) ; if ( down > down_right ) { * ( a [ k - <int> ] + j ) += down ; } else { * ( a [ k - <int> ] + j ) += down_right ; } } } printf ( <str> , * ( a [ <int> ] + <int> ) ) ; }", "label": 3, "id": 2436}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcm , i ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 2437}
{"input": "int main ( void ) { int t ; unsigned long n , a [ <int> ] , i , s ; scanf ( <str> , & t ) ; while ( t -- ) { s = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i <= n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { s += a [ i ] ; a [ i + <int> ] = a [ i ] ; } else { s += a [ i + <int> ] ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 2438}
{"input": "int main ( ) { int size , test , z = <int> ; scanf ( <str> , & test ) ; int a [ <int> ] ; if ( test != <int> ) do { scanf ( <str> , & size ) ; int count , i , j ; count = <int> ; for ( i = <int> ; i < size ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < size ; i ++ ) { count ++ ; int k = i ; for ( j = k + <int> ; j < size ; j ++ ) { if ( a [ k ] < a [ j ] ) { count ++ ; k ++ ; } else break ; } } printf ( <str> , count ) ; z ++ ; } while ( z < test ) ; return <int> ; }", "label": 3, "id": 2439}
{"input": "int main ( ) { int i , n1 , n2 , y1 , y2 , l , t , x = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { x = <int> ; scanf ( <str> , & n1 , & n2 ) ; y1 = n1 ; y2 = n2 ; if ( n1 < n2 ) { while ( x != <int> ) { x = n2 % n1 ; n2 = n1 ; n1 = x ; } printf ( <str> , n2 ) ; l = y1 * y2 / n2 ; printf ( <str> , l ) ; } else { while ( x != <int> ) { x = n1 % n2 ; n1 = n2 ; n2 = x ; } printf ( <str> , n1 ) ; l = y1 * y2 / n1 ; printf ( <str> , l ) ; } } return <int> ; }", "label": 1, "id": 2440}
{"input": "int main ( ) { int t , n , i , sum , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; min = <int> , sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , a + i ) ; min = ( a [ i ] < min ) ? a [ i ] : min ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 2441}
{"input": "int main ( void ) { int t ; int n ; int i ; int j ; int max = <int> ; int <unk> ; int x ; int y ; int c = <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { if ( a [ n - <int> ] [ i ] > max ) { max = a [ n - <int> ] [ i ] ; <unk> = i ; } } c += max ; for ( i = n - <int> ; i >= <int> ; i -- ) { x = <int> ; y = <int> ; if ( <unk> < i + <int> ) { x = a [ i ] [ <unk> ] ; } if ( <unk> > <int> ) { y = a [ i ] [ <unk> - <int> ] ; } if ( x > y ) { c += x ; } else { c += y ; <unk> -- ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 2442}
{"input": "main ( ) { int num , i , count , k ; scanf ( <str> , & count ) ; while ( count -- ) { scanf ( <str> , & num ) ; k = num * ( num + <int> ) / <int> ; int a [ k ] ; for ( i = <int> ; i < k ; i ++ ) scanf ( <str> , & a [ i ] ) ; k = k - num ; while ( -- num ) { k = k - num ; a [ k ] += a [ k + num ] > a [ k + num + <int> ] ? a [ k + num ] : a [ k + num + <int> ] ; } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2443}
{"input": "int main ( void ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; int * a [ n ] ; int i , j , temp , ans ; ans = <int> ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp ) ; if ( i == <int> ) { a [ i ] [ j ] = temp ; ans = MAX ( ans , a [ i ] [ j ] ) ; } else if ( i != j && j != <int> ) { a [ i ] [ j ] = MAX ( temp + a [ i - <int> ] [ j ] , temp + a [ i - <int> ] [ j - <int> ] ) ; ans = MAX ( ans , a [ i ] [ j ] ) ; } else if ( j == <int> ) { a [ i ] [ j ] = a [ i - <int> ] [ j ] + temp ; ans = MAX ( ans , a [ i ] [ j ] ) ; } else if ( i == j ) { a [ i ] [ j ] = a [ i - <int> ] [ j - <int> ] + temp ; ans = MAX ( ans , a [ i ] [ j ] ) ; } } } printf ( <str> , ans ) ; ans = <int> ; } return <int> ; }", "label": 0, "id": 2444}
{"input": "int main ( ) { int t , line , i , a [ line ] [ line ] , temp1 , j ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t -- ) { printf ( <str> ) ; scanf ( <str> , & line ) ; for ( i = <int> ; i < line ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } temp1 = line - <int> ; int last ; for ( i = temp1 ; i >= <int> ; i -- ) { for ( j = <int> ; j < temp1 + <int> ; j ++ ) { if ( ( a [ temp1 ] [ j ] + a [ temp1 + <int> ] [ j ] ) >= ( a [ temp1 ] [ j ] + a [ temp1 + <int> ] [ j + <int> ] ) ) { a [ temp1 ] [ j ] = a [ temp1 ] [ j ] + a [ temp1 + <int> ] [ j + <int> ] ; last = a [ temp1 ] [ j ] ; } else { a [ temp1 ] [ j ] = a [ temp1 ] [ j ] + a [ temp1 + <int> ] [ j + <int> ] ; last = a [ temp1 ] [ j ] ; } } temp1 -- ; } if ( line == <int> ) { last = a [ i ] [ j ] ; } printf ( <str> , last ) ; } return <int> ; }", "label": 3, "id": 2445}
{"input": "long long dope ( int tri [ ] [ <int> ] , int x , int y , int weed [ ] [ <int> ] ) { if ( weed [ x ] [ y ] != <int> ) return weed [ x ] [ y ] ; if ( x == <int> ) return weed [ x ] [ y ] = tri [ x ] [ y ] ; if ( y == <int> ) return weed [ x ] [ y ] = tri [ x ] [ y ] + dope ( tri , x - <int> , y , weed ) ; int p , q , r ; r = ( tri [ x - <int> ] [ y ] > tri [ x - <int> ] [ y - <int> ] ) ? <int> : <int> ; if ( r == <int> ) { p = x - <int> ; q = y ; } if ( r == <int> ) { p = x - <int> ; q = y - <int> ; } return weed [ x ] [ y ] = tri [ x ] [ y ] + dope ( tri , p , q , weed ) ; } long long maxsum ( int n , int tri [ ] [ <int> ] ) { int i ; int weed [ <int> ] [ <int> ] = { <int> } ; long long max = <int> , sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { sum = dope ( tri , n - <int> , i , weed ) ; if ( sum > max ) max = sum ; } return max ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int tri [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) tri [ i ] [ j ] = - <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; printf ( <str> , maxsum ( n , tri ) ) ; } }", "label": 1, "id": 2446}
{"input": "int main ( ) { long long int t , n , sum , i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } c = <int> ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] && i != n - <int> ) { c ++ ; } else { sum += c * ( c + <int> ) / <int> ; c = <int> ; } } printf ( <str> , sum ) ; } }", "label": 0, "id": 2447}
{"input": "main ( ) { int i , j ; int * * a ; int n ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 2448}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , l ; scanf ( <str> , & a , & b ) ; int x , y , temp ; if ( a > b ) { x = a ; y = b ; } else { y = a ; x = b ; } temp = x % y ; while ( temp != <int> ) { x = y ; y = temp ; temp = x % y ; } l = ( a * b ) / y ; printf ( <str> , y , l ) ; } return <int> ; }", "label": 1, "id": 2449}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int i , gcd ; if ( a < b ) { for ( i = <int> ; i <= a / <int> ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } else { for ( i = <int> ; i <= b / <int> ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } printf ( <str> , gcd , a * b ) ; } return <int> ; }", "label": 1, "id": 2450}
{"input": "int count_subarray ( int A [ ] , int size ) { int i , j , c = <int> ; for ( j = <int> ; j < size ; j ++ ) { i = j ; while ( A [ i ] < A [ i + <int> ] ) { c ++ ; if ( i == size - <int> ) { break ; } else { i ++ ; } } } c += size ; return c ; } int main ( ) { int T , N , i , j ; unsigned int a [ <int> ] ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } printf ( <str> , count_subarray ( a , N ) ) ; } return <int> ; }", "label": 0, "id": 2451}
{"input": "int main ( ) { int i , j , t , n ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 2452}
{"input": "int gcd ( int a , int b ) { int i , hcf = <int> ; for ( i = <int> ; i <= a || i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) hcf = i ; } return hcf ; } int lcm ( int a , int b ) { int l ; l = ( a * b ) / ( gcd ( a , b ) ) ; return l ; } int main ( ) { int t , j , a , b , hcf , lc ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lc = lcm ( a , b ) ; printf ( <str> , hcf , lc ) ; } return <int> ; }", "label": 2, "id": 2453}
{"input": "int maxnum ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , a [ <int> ] [ <int> ] , max , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = maxnum ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } a [ i ] [ j + <int> ] = <int> ; } a [ n - <int> ] [ <int> ] = max ; for ( i = <int> ; i <= n ; i ++ ) if ( a [ n - <int> ] [ i ] > max ) max = a [ n - <int> ] [ i ] ; printf ( <str> , max ) ; max = <int> ; } return ( <int> ) ; }", "label": 0, "id": 2454}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n , i , j , c = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } c = n ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ j - <int> ] ) { c ++ ; } else break ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 2455}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int a , b , c ; long long int l ; scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; l = ( a * b ) / c ; printf ( <str> , c , l ) ; return <int> ; }", "label": 1, "id": 2456}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int tc = <int> ; tc < t ; tc ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; long long int p = a * b ; int temp ; if ( a > b ) { temp = a ; a = b ; b = temp ; } while ( a != <int> ) { temp = b % a ; if ( temp == <int> ) break ; b = a ; a = temp ; } int lcm = p / a ; printf ( <str> , a , lcm ) ; } return <int> ; }", "label": 1, "id": 2457}
{"input": "int main ( ) { int ar [ <int> ] [ <int> ] ; int i , j , n , k , l , m ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & ar [ j ] [ k ] ) ; } for ( j = ( l - <int> ) ; j > <int> ; j -- ) { for ( k = <int> ; k < ( l - <int> ) ; k ++ ) { m = ar [ j ] [ k ] < ar [ j ] [ k + <int> ] ; ar [ j - <int> ] [ k ] = ar [ j - <int> ] [ k ] + ar [ j ] [ k + m ] ; } } printf ( <str> , ar [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2458}
{"input": "int gcd ( int x , int y ) { int a ; a = y % x ; if ( a == <int> ) return x ; gcd ( a , x ) ; } int main ( ) { int a , b , swap , c , d , t , i , lcm , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { swap = a ; a = b ; b = swap ; } x = gcd ( a , b ) ; lcm = ( a * b ) / x ; printf ( <str> , x , lcm ) ; } return <int> ; }", "label": 1, "id": 2459}
{"input": "int gcd ( int a , int b ) { int temp ; if ( a < b ) { temp = b ; b = a ; a = temp ; } while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( ) { int t , a , b , hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 2460}
{"input": "long gcd ( long a , long b ) { long i , ans = <int> ; } int main ( ) { int t , i , j ; long a , b , hcf , lcm , ans = <int> , smaller ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) smaller = a ; else smaller = b ; if ( a == b ) hcf = a ; else { ans = <int> ; for ( j = <int> ; j <= smaller ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { ans = j ; continue ; } } hcf = ans ; } lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } }", "label": 2, "id": 2461}
{"input": "int main ( void ) { long long n , i , a [ <int> ] , x = <int> ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; x = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( x > a [ i ] ) x = a [ i ] ; } printf ( <str> , ( ( n - <int> ) * x ) ) ; } return <int> ; }", "label": 0, "id": 2462}
{"input": "int main ( ) { int ic , ir , r , n , a [ <int> ] [ <int> ] , max , i , b , br , c , colast , icol ; int s , paths ; scanf ( <str> , & c ) ; for ( ic = <int> ; ic < c + <int> ; ic ++ ) { scanf ( <str> , & n ) ; for ( ir = <int> ; ir < n + <int> ; ir ++ ) { for ( icol = <int> ; icol < ir + <int> ; icol ++ ) { fscanf ( stdin , <str> , & a [ ir ] [ icol ] ) ; } } max = <int> ; paths = <int> ; for ( i = <int> ; i < n + <int> ; i ++ ) { paths = paths * <int> ; } for ( i = <int> ; i < paths ; i ++ ) { colast = <int> ; s = a [ <int> ] [ <int> ] ; br = i ; for ( ir = <int> ; ir < n + <int> ; ir ++ ) { b = br - <int> * ( br / <int> ) ; br = br / <int> ; c = colast + b ; colast = c ; s = s + a [ ir ] [ c ] ; } if ( s > max ) max = s ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 2463}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , n , d , lcm , c ; scanf ( <str> , & a , & b ) ; n = a ; d = b ; while ( a % b ) { c = a % b ; a = b ; b = c ; } lcm = ( n * d ) / b ; printf ( <str> , b , lcm ) ; } return <int> ; }", "label": 1, "id": 2464}
{"input": "int main ( ) { int t , T ; scanf ( <str> , & T ) ; for ( t = <int> ; t < T ; t ++ ) { int N , i , j ; scanf ( <str> , & N ) ; int dp [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & dp [ i ] [ j ] ) ; for ( i = N - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { dp [ i ] [ j ] = dp [ i ] [ j ] + ( dp [ i + <int> ] [ j ] > dp [ i + <int> ] [ j + <int> ] ? dp [ i + <int> ] [ j ] : dp [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , dp [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2465}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j , temp , m ; int * a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = ( int * ) calloc ( n + <int> , sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp ) ; a [ n - <int> - i + j ] = temp + max ( a [ n - <int> - i + j ] , a [ n - i + j ] ) ; } } m = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( m < a [ i ] ) m = a [ i ] ; printf ( <str> , m ) ; free ( a ) ; } return <int> ; }", "label": 0, "id": 2466}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t ) { printf ( <str> ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 1, "id": 2467}
{"input": "unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ) ; int main ( ) { unsigned long long int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a / g ) * b ; printf ( <str> , g , l ) ; t -- ; } return <int> ; } unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ) { unsigned long long int t ; while ( b != <int> ) { t = a % b ; a = b ; b = t ; } return a ; }", "label": 0, "id": 2468}
{"input": "int main ( ) { int tc , T ; scanf ( <str> , & T ) ; for ( tc = <int> ; tc < T ; tc ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 1, "id": 2469}
{"input": "int main ( ) { int T ; long int i , n , min ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2470}
{"input": "int getGcd ( int x , int y ) { if ( x > y ) { if ( x % y == <int> ) return y ; else return getGcd ( y , x % y ) ; } else { return getGcd ( y , x ) ; } } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = getGcd ( a , b ) ; int lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 2471}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , i , m , ans = <int> , j , temp ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } printf ( <str> , ( n - <int> ) * a [ <int> ] ) ; } }", "label": 2, "id": 2472}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } void <unk> ( ) { int arr [ <int> ] [ <int> ] , i = <int> , j = <int> , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { arr [ i - <int> ] [ j ] += max ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } int main ( ) { int t = <int> , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { <unk> ( ) ; } return <int> ; }", "label": 0, "id": 2473}
{"input": "int main ( ) { int t , n , a [ <int> ] , j , i , r , k , d , g ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; r = n ; for ( i = <int> ; i < n * ( n + <int> ) / <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; g = n - <int> ; n = n + <int> ; d = i - n ; for ( j = i - n ; j >= <int> ; j -- ) { if ( j == d ) { d = ( g * ( g - <int> ) / <int> ) - <int> ; g -- ; n -- ; } a [ j ] = a [ j ] + ( a [ j + n ] > a [ j + n - <int> ] ? a [ j + n ] : a [ j + n - <int> ] ) ; } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2474}
{"input": "int gcd ( ) ; int lcm ( ) ; int main ( ) { int n , c , d ; scanf ( <str> , & n ) ; while ( n -- ) { int a , b ; scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = lcm ( a , b ) ; printf ( <str> , c , d ) ; } } int gcd ( int n1 , int n2 ) { int i , g ; if ( n2 == <int> ) { return n1 ; } else { for ( i = <int> ; ( i <= n1 ) || ( i <= n2 ) ; i ++ ) if ( n1 % i == <int> && n2 % i == <int> ) g = i ; return g ; } } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; }", "label": 3, "id": 2475}
{"input": "long sum [ <int> ] [ <int> ] ; int <unk> [ <int> ] [ <int> ] ; void test ( int t ) { int i , j , k , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & <unk> [ i ] [ j ] ) ; } sum [ <int> ] [ <int> ] = <unk> [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) sum [ i ] [ j ] = <unk> [ i ] [ j ] + sum [ i - <int> ] [ j ] ; else if ( j == i ) sum [ i ] [ j ] = <unk> [ i ] [ j ] + sum [ i - <int> ] [ j - <int> ] ; else { if ( sum [ i - <int> ] [ j - <int> ] > sum [ i - <int> ] [ j ] ) sum [ i ] [ j ] = <unk> [ i ] [ j ] + sum [ i - <int> ] [ j - <int> ] ; else sum [ i ] [ j ] = <unk> [ i ] [ j ] + sum [ i - <int> ] [ j ] ; } } } k = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( sum [ n - <int> ] [ i ] > k ) k = sum [ n - <int> ] [ i ] ; printf ( <str> , k ) ; } int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) test ( i ) ; return <int> ; }", "label": 0, "id": 2476}
{"input": "int main ( ) { int T ; int A , B , lcm ; int numerator , denominator , remainder , gcd ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; lcm = A * B ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2477}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int a , b , c , t ; long long int l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; l = ( a * b ) / c ; printf ( <str> , c , l ) ; } return <int> ; }", "label": 1, "id": 2478}
{"input": "long sum ; int main ( ) { int counter , loop , test , val , i , j , k , m , n , num , arr [ <int> ] [ <int> ] , p , q ; long res , ans ; scanf ( <str> , & test ) ; for ( counter = <int> ; counter < test ; counter ++ ) { n = <int> ; sum = <int> ; res = <int> ; ans = <int> ; scanf ( <str> , & val ) ; num = val ; for ( i = <int> ; i < val ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ j ] [ i ] ) ; } } for ( i = <int> ; i < val ; i ++ ) sum += arr [ <int> ] [ i ] ; ans = sum ; for ( i = <int> , j = val - <int> ; i < j ; i ++ ) { sum = <int> ; for ( k = <int> ; k < j ; k ++ ) { sum += arr [ i ] [ k ] ; } while ( j < val ) { sum += arr [ i + <int> ] [ j ] ; j ++ ; } if ( ans < sum ) ans = sum ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 2479}
{"input": "int findGcd ( int a , int b ) { if ( a < b ) { int t = a ; a = b ; b = t ; } if ( b == <int> ) return a ; else return findGcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = findGcd ( a , b ) ; printf ( <str> , gcd , ( ( long long int ) a * b ) / gcd ) ; } return <int> ; }", "label": 0, "id": 2480}
{"input": "int main ( ) { int n_lines ; scanf ( <str> , & n_lines ) ; while ( n_lines != <int> ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] , i , j ; int no = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } no = no * <int> ; } no = no / <int> ; int sum [ no ] [ no ] , cout , k , r , a [ no ] [ no ] ; sum [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { cout = <int> , r = <int> ; for ( k = <int> ; k < i ; k ++ ) { r = r * <int> ; } for ( j = <int> ; j < r ; j += <int> ) { sum [ i ] [ j ] = sum [ i - <int> ] [ cout ] + arr [ i ] [ a [ i - <int> ] [ cout ] ] ; a [ i ] [ j ] = a [ i - <int> ] [ cout ] ; sum [ i ] [ j + <int> ] = sum [ i - <int> ] [ cout ] + arr [ i ] [ a [ i - <int> ] [ cout ] + <int> ] ; a [ i ] [ j + <int> ] = a [ i - <int> ] [ cout ] + <int> ; cout ++ ; } } int max = sum [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < no ; i ++ ) { if ( sum [ n - <int> ] [ i ] > max ) max = sum [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; n_lines -- ; } return <int> ; }", "label": 3, "id": 2481}
{"input": "int main ( ) { unsigned short int tests ; unsigned int a , b , max , min , mod ; scanf ( <str> , & tests ) ; while ( tests -- ) { scanf ( <str> , & a , & b ) ; max = ( a > b ? a : b ) ; min = ( a < b ? a : b ) ; mod = max % min ; while ( mod ) { max = min ; min = mod ; mod = max % min ; } printf ( <str> , min , ( ( a * b ) / min ) ) ; } return <int> ; }", "label": 1, "id": 2482}
{"input": "int sum ; int max ; void cal ( int a [ ] [ <int> ] , int n , int i , int j ) { if ( i > n - <int> ) { if ( sum > max ) max = sum ; return ; } else if ( j > n - <int> ) { if ( sum > max ) max = sum ; return ; } sum += a [ i ] [ j ] ; cal ( a , n , i + <int> , j ) ; cal ( a , n , i + <int> , j + <int> ) ; sum -= a [ i ] [ j ] ; return ; } int main ( ) { int n , t ; int a [ <int> ] [ <int> ] ; register int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; cal ( a , n , <int> , <int> ) ; printf ( <str> , max ) ; sum = max = <int> ; } return <int> ; }", "label": 2, "id": 2483}
{"input": "int main ( ) { int t , i , j , a [ <int> ] , n , c ; int b [ <int> ] ; long long int p = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { p = <int> ; c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) b [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] < a [ i ] ) { b [ i ] = b [ i - <int> ] + <int> ; } } for ( i = <int> ; i < n ; i ++ ) p = p + b [ i ] ; printf ( <str> , p ) ; } return <int> ; }", "label": 1, "id": 2484}
{"input": "int maxSum ( int * * a , int rows ) { int i , j , k , max = <int> ; int * * <unk> ; <unk> = ( int * * ) malloc ( rows * sizeof ( int ) ) ; for ( i = <int> ; i < rows ; i ++ ) <unk> [ i ] = malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) <unk> [ i ] [ j ] = <int> ; <unk> [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) { for ( k = <int> ; k < i ; k ++ ) for ( j = <int> ; j <= <int> ; j ++ ) { if ( j + k <= i && <unk> [ i ] [ j + k ] < ( a [ i ] [ j + k ] + <unk> [ i - <int> ] [ k ] ) ) <unk> [ i ] [ j + k ] = a [ i ] [ j + k ] + <unk> [ i - <int> ] [ k ] ; } } for ( i = <int> ; i < rows ; i ++ ) max = ( max > <unk> [ rows - <int> ] [ i ] ) ? max : <unk> [ rows - <int> ] [ i ] ; for ( i = <int> ; i < rows ; i ++ ) free ( <unk> [ i ] ) ; free ( <unk> ) ; return max ; } int main ( ) { int n , i , j , k ; int * rows ; int * * * arr ; scanf ( <str> , & n ) ; arr = ( int * * * ) malloc ( n * sizeof ( int * * * ) ) ; rows = malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & rows [ i ] ) ; arr [ i ] = ( int * * ) malloc ( rows [ i ] * sizeof ( int * * ) ) ; for ( j = <int> ; j < rows [ i ] ; j ++ ) arr [ i ] [ j ] = malloc ( ( j + <int> ) * sizeof ( int * ) ) ; for ( j = <int> ; j < rows [ i ] ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ i ] [ j ] [ k ] ) ; printf ( <str> , maxSum ( arr [ i ] , rows [ i ] ) ) ; } for ( i = <int> ; i < n ; i ++ ) for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < rows [ i ] ; j ++ ) free ( arr [ i ] [ j ] ) ; free ( arr [ i ] ) ; } free ( arr ) ; free ( rows ) ; return <int> ; }", "label": 3, "id": 2485}
{"input": "int main ( ) { int T , A , B , i , c , D , a ; D = <int> ; scanf ( <str> , & T ) ; for ( a = <int> ; a < T ; a ++ ) { scanf ( <str> , & A , & B ) ; } for ( a = <int> ; a < T ; a ++ ) { for ( i = <int> ; i < A && i < B ; i ++ ) { if ( A % i == <int> && B % i == <int> ) { c = c * i ; printf ( <str> , D , c ) ; } } } return <int> ; }", "label": 1, "id": 2486}
{"input": "long a [ <int> ] [ <int> ] , n , ans = <int> ; rec ( int i ) { int big = <int> , j , temp = <int> , sum1 , sum2 ; if ( i == n ) return <int> ; else { rec ( i + <int> ) ; for ( j = <int> ; j <= i ; j ++ ) { sum1 = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; sum2 = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; if ( sum1 > sum2 ) a [ i ] [ j ] = sum1 ; else a [ i ] [ j ] = sum2 ; } } } int main ( ) { long t , i , j , flag = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { ans = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; rec ( <int> ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2487}
{"input": "long long int Gcd ( int a , int b ) { if ( b == <int> ) return a ; else if ( a >= b ) Gcd ( b , a % b ) ; } int main ( ) { int t = <int> ; scanf ( <str> , & t ) ; long long int a = <int> , b = <int> , temp = <int> ; long long int lcm = <int> ; long long int gcd = <int> ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( b > a ) { temp = a ; a = b ; b = temp ; } gcd = Gcd ( a , b ) ; lcm = a * b ; lcm /= gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 2488}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int n , a [ <int> ] , b [ <int> ] , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , gcd ( a [ i ] , b [ i ] ) , lcm ( a [ i ] , b [ i ] ) ) ; } return <int> ; }", "label": 1, "id": 2489}
{"input": "int main ( ) { int t , n , i , j , counter ; scanf ( <str> , & t ) ; while ( t -- ) { counter = <int> ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( arr [ i ] >= arr [ j ] ) counter ++ ; } } printf ( <str> , counter ) ; } }", "label": 2, "id": 2490}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; for ( int i = <int> ; i < test ; i ++ ) { int n ; scanf ( <str> , & n ) ; int ar [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & ar [ j ] ) ; } int sum = <int> ; for ( int j = <int> ; j < n - <int> ; j ++ ) { if ( ar [ j ] > ar [ j + <int> ] ) { sum = sum + ar [ j + <int> ] ; } else { sum = sum + ar [ j ] ; } } printf ( <str> , sum ) ; } }", "label": 1, "id": 2491}
{"input": "int main ( ) { int i , n , p , q , a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & p , & q ) ; a = p ; b = q ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( p * q ) / a ) ; } return <int> ; }", "label": 1, "id": 2492}
{"input": "void getint ( int * a ) ; int main ( ) { int n , l , i , j , a [ <int> ] [ <int> ] ; getint ( & n ) ; while ( n -- ) { getint ( & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { getint ( & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= ( l - i - <int> ) ; j ++ ) { a [ l - i - <int> ] [ j ] += ( a [ l - i ] [ j ] > a [ l - i ] [ j + <int> ] ) ? a [ l - i ] [ j ] : a [ l - i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } void getint ( int * a ) { int c , num = <int> ; while ( ( c = getchar_unlocked ( ) ) != <char> && c != <char> && c != EOF ) { num = ( num << <int> ) + ( num << <int> ) + ( c - <char> ) ; } * a = num ; }", "label": 1, "id": 2493}
{"input": "int main ( ) { int l , t , i , j , count , prev , cur , n , a [ <int> ] ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; count = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; count ++ ; for ( j = i ; j > <int> ; j ++ ) { if ( a [ j - <int> ] <= a [ j ] ) count ++ ; else break ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 2494}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int q , p ; scanf ( <str> , & q , & p ) ; if ( q >= p ) printf ( <str> , gcd ( q , p ) ) ; else printf ( <str> , gcd ( p , q ) ) ; printf ( <str> , p * q / gcd ( p , q ) ) ; } }", "label": 1, "id": 2495}
{"input": "main ( ) { int i , j , n , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { int x = a [ i ] [ j ] , y = a [ i + <int> ] [ j ] , z = a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = x + ( y > z ? y : z ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 2496}
{"input": "int main ( ) { int i , j , n , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - <int> ] ? a [ i ] [ j ] : a [ i ] [ j - <int> ] ; a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + max ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2497}
{"input": "int main ( ) { int t ; long long int x , y , a , b , g , l , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { r = a % b ; a = b ; b = r ; } g = a ; l = ( x * y ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 2498}
{"input": "int main ( ) { int t , n , i , j , k , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] , c = <int> ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { d = <int> ; for ( k = j ; k < n ; k ++ ) { if ( a [ k + <int> ] >= a [ k ] ) { d ++ ; continue ; } else { c += d ; break ; } } } c = c + n ; printf ( <str> , c ) ; } }", "label": 0, "id": 2499}
{"input": "int main ( ) { int test , i , p ; scanf ( <str> , & test ) ; while ( test -- ) { int arr [ p ] ; for ( i = <int> ; i < p ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int smallest = arr [ <int> ] ; for ( i = <int> ; i < p ; i ++ ) { if ( arr [ i ] < smallest ) { smallest = arr [ i ] ; } } printf ( <str> , ( long long int ) smallest * ( p - <int> ) ) ; } return <int> ; }", "label": 3, "id": 2500}
{"input": "int main ( ) { int t ; long n , s , c , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; s = n - <int> ; while ( n -- ) { scanf ( <str> , & c ) ; if ( n == s ) min = c ; if ( min > c ) min = c ; } printf ( <str> , min * s ) ; } return <int> ; }", "label": 1, "id": 2501}
{"input": "int sumrecur ( int * a , int row , int pos , int * cache ) ; int n ; int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ ( n * ( n + <int> ) ) / <int> ] ; int cache [ ( n * ( n + <int> ) ) / <int> ] ; for ( i = <int> ; i < n * ( n + <int> ) / <int> ; i ++ ) cache [ i ] = <int> ; for ( i = <int> ; i < n * ( n + <int> ) / <int> ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } printf ( <str> , sumrecur ( a , <int> , <int> , cache ) ) ; } return <int> ; } int sumrecur ( int * a , int row , int pos , int * cache ) { int one , two ; if ( row == n - <int> ) return ( a [ pos ] ) ; else { if ( cache [ pos ] ) return cache [ pos ] ; else { one = sumrecur ( a , row + <int> , pos + row + <int> , cache ) ; two = sumrecur ( a , row + <int> , pos + row + <int> , cache ) ; cache [ pos ] = a [ pos ] + ( ( one > two ) ? one : two ) ; return cache [ pos ] ; } } }", "label": 1, "id": 2502}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int n , t , i , j ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) a [ i - <int> ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 1, "id": 2503}
{"input": "int main ( ) { int t = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { int n = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( int i = n - <int> ; i >= <int> ; i -- ) { for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2504}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + max ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2505}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , rem , numrtr , denomntr ; printf ( <str> ) ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numrtr = num1 ; denomntr = num2 ; } else { numrtr = num2 ; denomntr = num1 ; } rem = numrtr % denomntr ; while ( ( rem != <int> ) ) { numrtr = denomntr ; denomntr = rem ; rem = numrtr % denomntr ; } gcd = denomntr ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; }", "label": 1, "id": 2506}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> || b == <int> ) { return <int> ; } if ( a == b ) { return b ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; } int main ( ) { long long int test ; scanf ( <str> , & test ) ; while ( test -- > <int> ) { long long int n , a ; scanf ( <str> , & n , & a ) ; long long int gc = gcd ( n , a ) ; printf ( <str> , gc ) ; printf ( <str> , ( n * a ) / gc ) ; } }", "label": 0, "id": 2507}
{"input": "int main ( ) { long int test , n , i , j , k , arr [ <int> ] , min , sum ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } min = arr [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( arr [ k ] < min ) { min = arr [ k ] ; } } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } }", "label": 0, "id": 2508}
{"input": "int main ( ) { int a = <int> , b = <int> , r , max , a1 , b1 ; printf ( <str> ) ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a != <int> && b != <int> ) { a1 = a ; b1 = b ; if ( a > b ) { while ( r == <int> ) { r = a1 % b1 ; a1 = b1 ; b1 = r ; } printf ( <str> , a , b , b1 ) ; } else { while ( r == <int> ) { r = b1 % a1 ; a1 = r ; b1 = a1 ; } printf ( <str> , a , b , a1 ) ; } } max = ( a > b ) ? a : b ; while ( <int> ) { if ( max % a == <int> && max % b == <int> ) { printf ( <str> , a , b , max ) ; break ; } ++ max ; } return <int> ; }", "label": 1, "id": 2509}
{"input": "int trisum ( int a [ <int> ] [ <int> ] , int rows ) ; int main ( ) { int n , rows , a [ <int> ] [ <int> ] , i = <int> , k = <int> , j = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } trisum ( a , rows ) ; } return <int> ; } int trisum ( int a [ <int> ] [ <int> ] , int rows ) { int i , j , k ; int sum1 = <int> , sum2 = <int> ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = rows - <int> ; j > <int> ; j -- ) { sum1 = a [ rows - <int> - i ] [ j ] + a [ rows - <int> - i ] [ j - <int> ] ; sum2 = a [ rows - <int> - i ] [ j - <int> ] + a [ rows - <int> - i ] [ j - <int> ] ; if ( sum1 > sum2 ) { a [ rows - <int> - i ] [ j - <int> ] = sum1 ; } else { a [ rows - <int> - i ] [ j - <int> ] = sum2 ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 2510}
{"input": "int main ( void ) { int t , i , n , s , j ; scanf ( <str> , & t ) ; while ( t < <int> || t > <int> ) { scanf ( <str> , & t ) ; } while ( t > <int> ) { s = <int> ; scanf ( <str> , & n ) ; while ( n < <int> || n > <int> ) { scanf ( <str> , & n ) ; } int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; while ( a [ i ] < <int> || a [ i ] > <int> ) { scanf ( <str> , & a [ i ] ) ; } } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { s += a [ i + <int> ] ; } else { s += a [ i ] ; i ++ ; } } printf ( <str> , s ) ; t -- ; } return <int> ; }", "label": 1, "id": 2511}
{"input": "int main ( ) { int t , n ; int i , j , k ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] + arr [ i - <int> ] [ j ] > arr [ i ] [ j + <int> ] + arr [ i - <int> ] [ j ] ) arr [ i - <int> ] [ j ] += arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] += arr [ i ] [ j + <int> ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 2, "id": 2512}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { int i , t ; long long int ab , a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; ab = a * b ; printf ( <str> , gcd ( a , b ) , ab / gcd ( a , b ) ) ; } return <int> ; } long long int gcd ( long long int a , long long int b ) { if ( b % a == <int> ) return a ; else return gcd ( b % a , a ) ; }", "label": 0, "id": 2513}
{"input": "int max ( int a , int b ) { if ( a < b ) return b ; else a ; } void main ( ) { int a [ <int> ] [ <int> ] , m [ <int> ] [ <int> ] ; int i = <int> , j = <int> , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; j ++ ; } } for ( j = <int> ; j < n ; j ++ ) { m [ n - <int> ] [ j ] = a [ n - <int> ] [ j ] ; } j = <int> ; i = n - <int> ; while ( i >= <int> ) { m [ i ] [ <int> ] = a [ i ] [ <int> ] + max ( m [ i + <int> ] [ <int> ] , m [ i + <int> ] [ <int> ] ) ; for ( j = <int> ; j <= i ; j ++ ) { m [ i ] [ j ] = max ( a [ i ] [ j ] + max ( m [ i + <int> ] [ j ] , m [ i + <int> ] [ j + <int> ] ) , m [ i + <int> ] [ j - <int> ] ) ; } i -- ; } printf ( <str> , m [ <int> ] [ <int> ] ) ; }", "label": 3, "id": 2514}
{"input": "int main ( void ) { int t ; int i , temp , k ; long int num , n , count ; long long int sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { temp = <int> ; count = <int> ; sum = <int> ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & num ) ; if ( num >= temp ) { count ++ ; } else { sum = sum + ( count * ( count + <int> ) / <int> ) ; count = <int> ; } temp = num ; } sum = sum + ( count * ( count + <int> ) / <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 2515}
{"input": "int a [ <int> ] [ <int> ] ; main ( ) { int m = <int> ; int k , l , n ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { for ( l = <int> ; l <= k ; l ++ ) { scanf ( <str> , & a [ k ] [ l ] ) ; } } for ( k = <int> ; k < n ; k ++ ) { m = findmax ( m , tri ( <int> , n , k ) ) ; } printf ( <str> , m ) ; } int findmax ( int a , int b ) { return ( a > b ? a : b ) ; } int tri ( int sum , int i , int j ) { if ( i == <int> ) return ( sum ) ; if ( j == <int> ) { sum = sum + a [ i - <int> ] [ <int> ] ; i -- ; tri ( sum , i , j ) ; } else { int x = findmax ( a [ i - <int> ] [ j - <int> ] , a [ i - <int> ] [ j ] ) ; if ( x == a [ i - <int> ] [ j - <int> ] ) { i -- ; j -- ; } else { i -- ; } sum = sum + x ; tri ( sum , i , j ) ; } }", "label": 3, "id": 2516}
{"input": "long gcd ( long a , long b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return ( gcd ( a - b , b ) ) ; return ( gcd ( b - a , a ) ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t ) { long a , b ; scanf ( <str> , & a , & b ) ; if ( a > b ) printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; else if ( a < b ) printf ( <str> , gcd ( b , a ) , ( a * b ) / gcd ( b , a ) ) ; else printf ( <str> , a , a ) ; t -- ; } return <int> ; }", "label": 0, "id": 2517}
{"input": "int sum ( int ) ; int sum ( int n ) { if ( n == <int> ) return <int> ; else if ( n == <int> ) return <int> ; else return ( n + sum ( n - <int> ) ) ; } int main ( ) { int t , n , i , tt , sum1 = <int> , j = <int> , k = <int> , sum2 , * arr ; scanf ( <str> , & t ) ; if ( t > <int> || t < <int> ) return - <int> ; tt = t ; while ( t -- ) { sum1 = <int> , sum2 = <int> , k = <int> ; scanf ( <str> , & n ) ; if ( n > <int> || n < <int> ) return - <int> ; arr = malloc ( sizeof ( int ) * sum ( n ) ) ; for ( i = <int> ; i < sum ( n ) ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < <int> || arr [ i ] > <int> ) return - <int> ; } while ( k < n ) { sum1 = sum1 + arr [ sum ( k ++ ) ] ; } sum2 = sum1 - arr [ sum ( n - <int> ) ] + arr [ ( sum ( n - <int> ) + <int> ) ] ; if ( sum2 > sum1 ) printf ( <str> , sum2 ) ; else printf ( <str> , sum1 ) ; } return <int> ; }", "label": 3, "id": 2518}
{"input": "int n = <int> , aj = <int> ; summ ( int a [ n ] [ n ] , int i , int j ) { if ( i == ( n - <int> ) ) return a [ i ] [ j ] ; int sum1 = a [ i ] [ j ] + summ ( a , i + <int> , j ) ; int sum2 = a [ i ] [ j ] + summ ( a , i + <int> , j + <int> ) ; if ( sum1 > sum2 ) return ( sum1 ) ; else return ( sum2 ) ; } main ( ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { printf ( <str> , a [ i ] [ j ] ) ; } printf ( <str> ) ; } int s = summ ( a , <int> , <int> ) ; printf ( <str> , s ) ; } }", "label": 2, "id": 2519}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; ++ i ) { int N ; scanf ( <str> , & N ) ; int arr [ N ] ; for ( int i = <int> ; i < N ; ++ i ) scanf ( <str> , & arr [ i ] ) ; int <unk> = <int> ; int <unk> = <int> ; int Max = arr [ <int> ] ; for ( int j = <int> ; j < N ; ++ j ) { if ( arr [ j ] >= Max ) { <unk> ++ ; <unk> += <unk> ; Max = arr [ j ] ; } else { <unk> = <int> ; <unk> += <unk> ; Max = arr [ j ] ; } } printf ( <str> , <unk> ) ; } return <int> ; }", "label": 1, "id": 2520}
{"input": "int main ( ) { int t , arr [ <int> ] [ <int> ] , r , k , i , j , max = <int> , sum [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum [ i ] = <int> ; scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) { max = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; if ( max < arr [ j ] [ k ] ) max = arr [ j ] [ k ] ; } sum [ i ] = max + sum [ i ] ; } } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , sum [ i ] ) ; } return <int> ; }", "label": 1, "id": 2521}
{"input": "main ( ) { int t , a , b , i , h , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( h = a < b ? a : b ; <int> <= h ; h ++ ) { if ( a % h == <int> && b % h == <int> ) break ; } l = ( a * b ) / h ; printf ( <str> , h ) ; printf ( <str> , l ) ; } }", "label": 2, "id": 2522}
{"input": "void main ( ) { int a , b , x , y , n , t , gcd , lcm ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 2523}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long n , i ; scanf ( <str> , & n ) ; long long a [ n ] , count [ n ] , total = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; count [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] <= a [ i ] ) count [ i ] = count [ i - <int> ] + <int> ; } for ( i = <int> ; i < n ; i ++ ) { total += count [ i ] ; } printf ( <str> , total ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 2524}
{"input": "int main ( ) { int t ; long i , n , num , min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num ) ; min = ( num < min ) ? num : min ; } printf ( <str> , ( long long ) ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 2525}
{"input": "int main ( ) { int t , n , a , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; min = a ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2526}
{"input": "int main ( ) { long long int a , b , x , y , t , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2527}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long int n ; scanf ( <str> , & n ) ; long int arr [ n ] , j ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; long int min = arr [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( min > arr [ j ] ) min = arr [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 2528}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; for ( int ti = <int> ; ti < T ; ti ++ ) { int N ; scanf ( <str> , & N ) ; int a [ N ] ; for ( int i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; long min = a [ <int> ] ; for ( int i = <int> ; i < N ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2529}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; int i ; for ( i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , & gcd , & lcm ) ; } return <int> ; }", "label": 2, "id": 2530}
{"input": "int main ( ) { int t , i , j ; long int a [ <int> ] ; long int n , min = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , min ) ; } return <int> ; }", "label": 1, "id": 2531}
{"input": "int sum ( int , int , int ) ; int max ( int , int ) ; int scanInt ( ) ; void printInt ( int ) ; int M [ <int> ] [ <int> ] ; int A [ <int> ] [ <int> ] ; int main ( ) { int n , r , i , j ; n = scanInt ( n ) ; while ( n -- ) { r = scanInt ( ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { A [ i ] [ j ] = scanInt ( ) ; M [ i ] [ j ] = - <int> ; } printInt ( sum ( r , <int> , <int> ) ) ; putchar ( <char> ) ; } } int sum ( int n , int i , int j ) { if ( M [ i ] [ j ] == - <int> ) { if ( n == <int> ) return A [ i ] [ j ] ; else { M [ i ] [ j ] = A [ i ] [ j ] + max ( sum ( n - <int> , i + <int> , j ) , sum ( n - <int> , i + <int> , j + <int> ) ) ; } } return M [ i ] [ j ] ; } int max ( int a , int b ) { return ( a > b ) ? a : b ; } int scanInt ( ) { int x = <int> ; char ch ; ch = getchar ( ) ; while ( ch > <char> || ch < <char> ) { ch = getchar ( ) ; } while ( ch <= <char> && ch >= <char> ) { x = ( x << <int> ) + ( x << <int> ) + ch - <char> ; ch = getchar ( ) ; } return x ; } void printInt ( int x ) { int i = <int> ; char ch [ <int> ] ; while ( x > <int> ) { ch [ i ++ ] = ( char ) ( <char> + x ) ; x /= <int> ; } while ( i -- ) { putchar ( ch [ i ] ) ; } }", "label": 1, "id": 2532}
{"input": "int max_sum ( int i , int j ) ; int max ( int a , int b ) ; int A [ <int> ] [ <int> ] , n , <unk> [ <int> ] = { <int> } , <unk> [ <int> ] = { <int> } ; int path [ <int> ] [ <int> ] ; int main ( ) { int t , i , j , k , sum ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; sum = max_sum ( <int> , <int> ) ; printf ( <str> , sum ) ; for ( i = <int> ; i < <int> ; i ++ ) { <unk> [ i ] = <int> ; <unk> [ i ] = <int> ; } } return <int> ; } int max_sum ( int i , int j ) { if ( i + <int> == n ) { <unk> [ i ] = <int> ; <unk> [ j ] = <int> ; return A [ i ] [ j ] ; } else if ( <unk> [ i ] == <int> && <unk> [ j ] == <int> ) return path [ i ] [ j ] ; else { path [ i ] [ j ] = max ( max_sum ( i + <int> , j ) , max_sum ( i + <int> , j + <int> ) ) ; <unk> [ i ] = <int> ; <unk> [ j ] = <int> ; return ( A [ i ] [ j ] + path [ i ] [ j ] ) ; } } max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 1, "id": 2533}
{"input": "main ( ) { int test , i , a , b ; int gcd ( int a , int b ) ; int lcm [ test ] , hcf [ test ] ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & a , & b ) ; hcf [ i ] = gcd ( a , b ) ; if ( a % b == <int> ) { lcm [ i ] = a ; } else { lcm [ i ] = a * b / hcf [ i ] ; } } for ( i = <int> ; i < test ; i ++ ) printf ( <str> , hcf [ i ] , lcm [ i ] ) ; } int gcd ( int x , int y ) { if ( x % y == <int> ) return y ; else return gcd ( y , x % y ) ; }", "label": 3, "id": 2534}
{"input": "int main ( ) { int cases , rows , factor , factor2 ; int row [ <int> ] [ <int> ] ; register int i , j , k ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < <int> ; j ++ ) row [ <int> ] [ j ] = row [ <int> ] [ j ] = <int> ; for ( j = <int> ; j < rows ; j ++ ) { factor = j % <int> ; factor2 = ( j + <int> ) % <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & <unk> [ k ] ) ; if ( k == <int> ) <unk> [ k ] += <unk> [ k ] ; else if ( k == j ) <unk> [ k ] += <unk> [ k - <int> ] ; else <unk> [ k ] += ( <unk> [ k ] > <unk> [ k - <int> ] ) ? <unk> [ k ] : <unk> [ k - <int> ] ; } } factor2 = - <int> ; for ( k = <int> ; k < rows ; k ++ ) if ( <unk> [ k ] > factor2 ) factor2 = <unk> [ k ] ; printf ( <str> , factor2 ) ; } return <int> ; }", "label": 0, "id": 2535}
{"input": "int main ( ) { int T , N , A [ <int> ] , i , j , c ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } c = <int> ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < N ; j ++ ) { if ( A [ j + <int> ] >= A [ j ] ) c ++ ; } } printf ( <str> , c ) ; } }", "label": 2, "id": 2536}
{"input": "int main ( ) { long long int t , a [ <int> ] , n , s , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; s = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] > a [ i - <int> ] ) { s = s + a [ i - <int> ] ; a [ i ] = a [ i - <int> ] ; } else s = s + a [ i ] ; } if ( s == <int> ) printf ( <str> , a [ <int> ] ) ; else printf ( <str> , s ) ; } }", "label": 1, "id": 2537}
{"input": "int main ( ) { int n , a , b , lcm , gcd , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a && j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2538}
{"input": "main ( ) { int n , i , m , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; int z [ m ] [ m ] ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & z [ i ] [ j ] ) ; } for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( z [ i + <int> ] [ j ] > z [ i + <int> ] [ j + <int> ] ) z [ i ] [ j ] += z [ i + <int> ] [ j ] ; else z [ i ] [ j ] += z [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , z [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 2539}
{"input": "int main ( ) { int a , b , z , i , lcm , hcf ; scanf ( <str> , & a , & b ) ; z = a < b ? a : b ; for ( i = <int> ; i <= z ; i ++ ) if ( a % i == <int> && b % i == <int> ) hcf = i ; lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; return <int> ; }", "label": 1, "id": 2540}
{"input": "int main ( void ) { int cases , counter ; scanf ( <str> , & cases ) ; for ( counter = <int> ; counter < cases ; counter ++ ) { int lines , inner , outer , input , <unk> = <int> , <unk> = <int> ; scanf ( <str> , & lines ) ; for ( outer = <int> ; outer < lines ; outer ++ ) { for ( inner = <int> ; inner <= outer ; inner ++ ) { scanf ( <str> , & input ) ; if ( inner == <int> ) <unk> += input ; if ( inner == outer ) <unk> += input ; } } printf ( <str> , ( <unk> > <unk> ) ? <unk> : <unk> ) ; } return <int> ; }", "label": 1, "id": 2541}
{"input": "int main ( void ) { int t , n , i , j , a [ <int> ] [ <int> ] , p1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 2542}
{"input": "long int GCD ( long long int a , long long int b ) { if ( a < b ) return GCD ( b , a ) ; else if ( b == <int> ) return a ; else return GCD ( b , a % b ) ; } int main ( ) { int t ; long int g ; long long int a , b , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = GCD ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 0, "id": 2543}
{"input": "int main ( ) { int t ; int n ; scanf ( <str> , & t ) ; int i , j , k , l ; int sum [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; sum [ i ] = <int> ; int nos [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & nos [ j ] ) ; } k = <int> ; l = k + <int> ; while ( k < n - <int> && l < n - <int> ) { if ( nos [ k ] < nos [ l ] ) { sum [ i ] += nos [ k ] ; l ++ ; } else { sum [ i ] += nos [ l ] ; k = l ; l ++ ; } } } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , sum [ i ] ) ; }", "label": 1, "id": 2544}
{"input": "int main ( ) { int i , j , t , n , k , l , m ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; i < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ i ] [ k ] ) ; } } for ( l = n - <int> ; l >= <int> ; i -- ) { for ( m = <int> ; m <= l ; m ++ ) { a [ l ] [ m ] = a [ l ] [ m ] + ( ( a [ l + <int> ] [ m ] > a [ l + <int> ] [ m + <int> ] ) ? a [ l + <int> ] [ m ] : a [ l + <int> ] [ m + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 2545}
{"input": "int main ( ) { int i , n , l , j , k , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = l - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k ] ; else a [ j ] [ k ] += a [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2546}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , lcm , hcf ; scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 2547}
{"input": "int main ( ) { int i = <int> , j = <int> , t , b , l = <int> , n = <int> , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & m ) ; int a [ <int> ] ; for ( j = <int> ; j < m ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = m - <int> , b = <int> ; j > <int> ; j -- ) { for ( l = <int> ; a [ j ] != <int> ; ) { n = a [ j ] ; a [ j ] = a [ j ] / <int> ; if ( l < n ) { l = n ; } } b = b + l ; } printf ( <str> , b ) ; } return <int> ; }", "label": 3, "id": 2548}
{"input": "int Maxsum ( int A [ <int> ] [ <int> ] , int n ) { int i , k ; for ( i = <int> ; i < n ; i ++ ) { for ( k = <int> ; k <= i ; k ++ ) { if ( i - <int> >= <int> && k - <int> >= <int> && k < i ) A [ i ] [ k ] = MAX ( A [ i ] [ k ] + A [ i - <int> ] [ k - <int> ] , A [ i ] [ k ] + A [ i - <int> ] [ k ] ) ; else if ( k == i ) A [ i ] [ k ] += A [ i - <int> ] [ k - <int> ] ; else A [ i ] [ k ] += A [ i - <int> ] [ k ] ; } } int max = - <int> ; int j ; i = n - <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( A [ i ] [ j ] > max ) max = A [ i ] [ j ] ; } return max ; } int main ( ) { int T [ <int> ] [ <int> ] ; int t , n , k = <int> , ans [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; j = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & T [ i ] [ j ] ) ; } } ans [ k ++ ] = Maxsum ( T , n ) ; } printf ( <str> ) ; for ( i = <int> ; i < k ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 1, "id": 2549}
{"input": "int main ( ) { int t , a [ <int> ] , b [ <int> ] , n , sum = <int> , tot = <int> , j , k , l , i ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; while ( n > <int> ) { sum = sum + n ; n -- ; } for ( i = <int> ; i < sum ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k < sum ; k ++ ) { if ( a [ k ] == j ) tot ++ ; } b [ l ] = tot ; tot = <int> ; sum = <int> ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , b [ i ] ) ; } return <int> ; }", "label": 3, "id": 2550}
{"input": "int main ( ) { int n , t , i , tree , k , temp , j ; int * house ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; house = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & house [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) for ( j = i + <int> ; j < n ; j ++ ) { if ( house [ j ] < house [ i ] ) { temp = house [ j ] ; house [ j ] = house [ i ] ; house [ i ] = temp ; } } tree = house [ <int> ] * ( n - <int> ) ; printf ( <str> , tree ) ; t -- ; free ( house ) ; } return <int> ; }", "label": 2, "id": 2551}
{"input": "int scanInt ( ) { register int retInt = <int> , d ; while ( ( d = getchar ( ) ) >= <char> ) { retInt = ( retInt << <int> ) + ( retInt << <int> ) + ( d - <char> ) ; } return retInt ; } struct node { unsigned int length ; unsigned int a [ <int> ] [ <int> ] ; } ; int main ( void ) { register unsigned int testcase = <int> , i = <int> , j = <int> , k = <int> ; unsigned int * ans ; testcase = scanInt ( ) ; if ( testcase <= <int> ) { ans = ( int * ) malloc ( testcase * sizeof ( int ) ) ; for ( i = <int> ; i < testcase ; i ++ ) { struct node c ; c <fp> length = scanInt ( ) ; if ( c <fp> length <= <int> ) { for ( j = <int> ; j < c <fp> length ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( j == <int> ) c <fp> a [ j ] [ k ] = scanInt ( ) ; else { if ( k == <int> ) c <fp> a [ j ] [ k ] = c <fp> a [ j - <int> ] [ k ] + scanInt ( ) ; else if ( j == k ) c <fp> a [ j ] [ k ] = c <fp> a [ j - <int> ] [ k - <int> ] + scanInt ( ) ; else { unsigned int total = scanInt ( ) ; unsigned int a1 = ( c <fp> a [ j - <int> ] [ k - <int> ] + total ) ; unsigned int a2 = ( c <fp> a [ j - <int> ] [ k ] + total ) ; c <fp> a [ j ] [ k ] = ( a1 < a2 ) ? a2 : a1 ; } } } } ans [ i ] = <int> ; j = c <fp> length - <int> ; k = c <fp> length - <int> ; while ( k -- ) { if ( ans [ i ] < c <fp> a [ j ] [ k ] ) ans [ i ] = c <fp> a [ j ] [ k ] ; } } else exit ( <int> ) ; } for ( i = <int> ; i < testcase ; i ++ ) { printf ( <str> , ans [ i ] ) ; } } return <int> ; }", "label": 3, "id": 2552}
{"input": "int main ( ) { int t , a , b , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int x , y ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } if ( a == b ) printf ( <str> , a , ( x * y ) / a ) ; } return <int> ; }", "label": 1, "id": 2553}
{"input": "unsigned long int mat [ MAX ] [ MAX ] ; void empty ( ) { int i , j ; for ( i = <int> ; i < MAX ; i ++ ) for ( j = <int> ; j < MAX ; j ++ ) mat [ i ] [ j ] = <int> ; } int main ( ) { int c , t ; scanf ( <str> , & t ) ; for ( c = <int> ; c < t ; c ++ ) { int i , j , r ; unsigned long int m = <int> ; scanf ( <str> , & r ) ; empty ( ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; for ( i = <int> ; i < r ; i ++ ) { mat [ i ] [ <int> ] += mat [ i - <int> ] [ <int> ] ; if ( mat [ i ] [ <int> ] > m ) m = mat [ i ] [ <int> ] ; } for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < r ; j ++ ) { mat [ i ] [ j ] += MAXIMUM ( mat [ i - <int> ] [ j - <int> ] , mat [ i - <int> ] [ j ] ) ; if ( mat [ i ] [ j ] > m ) m = mat [ i ] [ j ] ; } } printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 2554}
{"input": "int main ( ) { int a , b , t , i , j , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a == <int> || b == <int> ) { g = <int> ; l = ( a * b ) / g ; } else { if ( a <= b ) { for ( j = a ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { g = j ; break ; } else g = <int> ; } } else { for ( j = b ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { g = j ; break ; } else g = <int> ; } } } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 2555}
{"input": "int main ( ) { int a , b , t , i , c , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) c = func ( a , b ) ; else c = func ( b , a ) ; d = ( a * b ) / c ; printf ( <str> , c , d ) ; } return <int> ; } int func ( int x , int y ) { if ( y % x == <int> ) return x ; else return func ( y % x , x ) ; }", "label": 1, "id": 2556}
{"input": "int fastinput ( void ) { char c = <int> ; int input = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return input ; } int main ( void ) { int a [ <int> ] [ <int> ] , i , j , n , t ; t = fastinput ( ) ; while ( t -- ) { n = fastinput ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = fastinput ( ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2557}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( void ) { int * t , i , j , n , k , num , count = <int> , m ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & k ) ; count = <int> ; t = ( int * ) malloc ( sizeof ( int ) * k * k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j < k ; j ++ ) { * ( t + i * j + k ) = <int> ; } } for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num ) ; * ( t + i * k + j ) = num ; } } for ( i = k - <int> ; i >= <int> ; i -- ) { for ( j = k - <int> - count ; j >= <int> ; j -- ) { m = max ( * ( t + ( i + <int> ) * k + ( j + <int> ) ) , * ( t + ( i + <int> ) * k + j ) ) ; * ( t + i * k + j ) = m + * ( t + i * k + j ) ; } count ++ ; } printf ( <str> , * ( t + <int> * k + <int> ) ) ; free ( t ) ; } return <int> ; }", "label": 1, "id": 2558}
{"input": "main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int A , B , X , Y , GCD , rem , LCM ; scanf ( <str> , & A , & B ) ; X = A ; Y = B ; while ( B != <int> ) { rem = A % B ; A = B ; B = rem ; } GCD = A ; LCM = ( X * Y ) / GCD ; printf ( <str> , GCD , LCM ) ; } }", "label": 1, "id": 2559}
{"input": "int main ( ) { long int a , b , r , t , prod ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; prod = a * b ; while ( <int> ) { r = a % b ; if ( r == <int> ) break ; b = r ; } printf ( <str> , b ) ; printf ( <str> , prod / b ) ; } return <int> ; }", "label": 2, "id": 2560}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 0, "id": 2561}
{"input": "int temp = <int> ; void recursion ( int * arr , int n , int s , int count ) { if ( count == n - <int> ) { temp = ( s > temp ) ? s : temp ; } else { s = s + * arr ; recursion ( arr + n , n , s , count + <int> ) ; recursion ( arr + n + <int> , n , s , count + <int> ) ; } } void main ( ) { int n , i , j , s = <int> , count = - <int> , m ; scanf ( <str> , & m ) ; while ( m -- ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; recursion ( & arr [ <int> ] [ <int> ] , n , s , count ) ; printf ( <str> , temp ) ; } }", "label": 2, "id": 2562}
{"input": "int main ( ) { int t , i , n , s , a [ <int> ] , min , count = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( s = <int> ; s < n ; s ++ ) { scanf ( <str> , & a [ s ] ) ; } min = a [ <int> ] ; for ( s = <int> ; s < n ; s ++ ) { if ( a [ s ] < min ) { min = a [ s ] ; } } count = <int> ; for ( s = <int> ; s < n ; s ++ ) { if ( a [ s ] % min == <int> ) count += <int> ; } for ( s = <int> ; s < n ; s ++ ) { if ( count == n ) printf ( <str> , a [ s ] / min ) ; else printf ( <str> , a [ s ] ) ; } printf ( <str> ) ; } return <int> ; }", "label": 3, "id": 2563}
{"input": "int gcd ( int a , int b ) { return b == <int> ? a : gcd ( b , a % b ) ; } int main ( ) { int t ; long a , b , res , lcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; res = gcd ( a , b ) ; lcd = ( a * b ) / res ; printf ( <str> , res , lcd ) ; } return <int> ; }", "label": 0, "id": 2564}
{"input": "int main ( ) { int t1 ; scanf ( <str> , & t1 ) ; unsigned long long p , lcm , x , y , a , b , t , gcd ; while ( t1 -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; printf ( <str> , x , y ) ; p = x * y ; lcm = ( p ) / gcd ; printf ( <str> , gcd , p ) ; } return <int> ; }", "label": 1, "id": 2565}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int a , b ; long long int n , lcm ; scanf ( <str> , & a , & b ) ; n = gcd ( a , b ) ; lcm = a * b / n ; printf ( <str> , n ) ; printf ( <str> , lcm ) ; } } int gcd ( int x , int y ) { if ( x == <int> ) return y ; else if ( x > y ) { if ( x % y == <int> ) return y ; else return gcd ( y , x % y ) ; } else { if ( y % x == <int> ) return x ; else return ( x , y % x ) ; } }", "label": 1, "id": 2566}
{"input": "int main ( ) { long int i , j , T , n , cost = <int> ; long int a [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { cost = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) { cost = cost + a [ j ] ; } if ( a [ j + <int> ] < a [ j ] ) { cost = cost + a [ j + <int> ] ; } } printf ( <str> , cost ) ; printf ( <str> ) ; } printf ( <str> ) ; }", "label": 3, "id": 2567}
{"input": "int main ( void ) { int cases , i , j , lines , sum , val , count ; scanf ( <str> , & cases ) ; while ( cases -- ) { sum = <int> ; count = <int> ; scanf ( <str> , & lines ) ; while ( count != lines ) { for ( j = <int> ; j < count + <int> ; j ++ ) { scanf ( <str> , & val ) ; sum += val ; } count ++ ; } printf ( <str> , sum / <int> ) ; } return <int> ; }", "label": 1, "id": 2568}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int numb ; scanf ( <str> , & numb ) ; int * arr [ numb ] ; int i ; for ( i = <int> ; i < numb ; i ++ ) { int * ptr ; ptr = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; int j ; for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , ptr + j ) ; arr [ i ] = ptr ; } int index = numb - <int> ; do { for ( i = <int> ; i < index + <int> ; i ++ ) { if ( arr [ index + <int> ] [ i ] > arr [ index + <int> ] [ i + <int> ] ) arr [ index ] [ i ] += arr [ index + <int> ] [ i ] ; else arr [ index ] [ i ] += arr [ index + <int> ] [ i + <int> ] ; } index = index - <int> ; } while ( index > - <int> ) ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 2569}
{"input": "long int Gcd ( long int a , long int b ) { long int t ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } return a ; } int main ( ) { int t ; long int x , y , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; g = Gcd ( x , y ) ; l = x * y / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 2570}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , r , n , d ; printf ( <str> ) ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { n = num1 ; d = num2 ; } else { n = num2 ; d = num1 ; } r = n % d ; while ( ( r != <int> ) ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; }", "label": 1, "id": 2571}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int i = <int> , j = <int> ; int n = <int> ; int rows = <int> ; int num = <int> ; int k = <int> ; int maxSum = <int> ; int matrix [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { maxSum = <int> ; scanf ( <str> , & rows ) ; scanf ( <str> , & num ) ; maxSum = num ; matrix [ <int> ] [ <int> ] = num ; for ( j = <int> ; j < rows - <int> ; j ++ ) { matrix [ j ] [ j + <int> ] = <int> ; } for ( j = <int> ; j < rows ; j ++ ) { scanf ( <str> , & num ) ; matrix [ j ] [ <int> ] = matrix [ j - <int> ] [ <int> ] + num ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & num ) ; matrix [ j ] [ k ] = max ( matrix [ j - <int> ] [ k ] + num , matrix [ j - <int> ] [ k - <int> ] + num ) ; maxSum = matrix [ j ] [ k ] > maxSum ? matrix [ j ] [ k ] : maxSum ; } } printf ( <str> , maxSum ) ; } return <int> ; }", "label": 0, "id": 2572}
{"input": "int main ( ) { int testcases , a , b , m , n , temp ; scanf ( <str> , & testcases ) ; while ( testcases ) { scanf ( <str> , & m ) ; scanf ( <str> , & n ) ; a = m > n ? m : n ; b = m < n ? m : n ; while ( b != <int> ) { temp = b ; b = a % temp ; a = temp ; } printf ( <str> , a ) ; printf ( <str> , m * n / a ) ; testcases -- ; } }", "label": 1, "id": 2573}
{"input": "int tri ( int num [ ] , int i ) ; int main ( ) { int n , r , num [ size ] , i , j , max = <int> ; scanf ( <str> , & n ) ; while ( n -- ) { max = <int> ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ j ] ) ; } if ( i == <int> ) continue ; else max = max + tri ( num , i ) ; } printf ( <str> , max ) ; } return <int> ; } int tri ( int num [ size ] , int i ) { int k , max ; max = num [ <int> ] ; for ( k = <int> ; k <= i ; k ++ ) { if ( max <= num [ k ] ) max = num [ k ] ; } return max ; }", "label": 1, "id": 2574}
{"input": "int GCD ( long long int a , long long int b ) { if ( b == <int> ) return a ; return GCD ( b , a % b ) ; } int LCM ( long long int a , long long int b ) { return b * a / GCD ( a , b ) ; } int main ( ) { long long int a , b , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , GCD ( a , b ) ) ; printf ( <str> , LCM ( a , b ) ) ; } return <int> ; }", "label": 2, "id": 2575}
{"input": "int gcd ( int c , int d ) ; int main ( ) { int t ; long int a , b , i , lcm , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = gcd ( a , b ) ; lcm = ( a * b ) / m ; printf ( <str> , m , lcm ) ; printf ( <str> ) ; } return <int> ; } int gcd ( int c , int d ) { if ( d == <int> ) return c ; else return gcd ( d , c % d ) ; }", "label": 0, "id": 2576}
{"input": "int <unk> ( int , int ) ; int <unk> ( int , int ) ; int main ( ) { int T , i ; int A [ <int> ] , B [ <int> ] ; int gcd [ <int> ] , lcm [ <int> ] ; printf ( <str> ) ; scanf ( <str> , & T ) ; if ( ( T >= <int> ) && ( T <= <int> ) ) { printf ( <str> , T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A [ i ] , & B [ i ] ) ; } for ( i = <int> ; i < T ; i ++ ) { gcd [ i ] = <unk> ( A [ i ] , B [ i ] ) ; lcm [ i ] = <unk> ( A [ i ] , B [ i ] ) ; printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } } else printf ( <str> ) ; return <int> ; } int <unk> ( int num1 , int num2 ) { int i , m ; int gcd ; if ( num1 > num2 ) m = num2 ; else m = num1 ; for ( i = m ; i >= <int> ; i -- ) { if ( ( num1 % i == <int> ) && ( num2 % i == <int> ) ) { gcd = i ; break ; } } return gcd ; } int <unk> ( int num1 , int num2 ) { int i , m , gcd , lcm ; if ( num1 > num2 ) m = num2 ; else m = num1 ; for ( i = m ; i >= <int> ; i -- ) { if ( ( num1 % i == <int> ) && ( num2 % i == <int> ) ) { gcd = i ; break ; } } lcm = ( num1 * num2 ) / gcd ; return lcm ; }", "label": 2, "id": 2577}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] <= min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 1, "id": 2578}
{"input": "int main ( ) { int t , n , i , pres , next ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & pres ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & next ) ; if ( pres > next ) { pres = next ; } } printf ( <str> , pres * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2579}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 1, "id": 2580}
{"input": "int gcd ( long int a , long int b ) ; int main ( void ) { int i = <int> ; int n ; scanf ( <str> , & n ) ; while ( i < n ) { long int a , b ; scanf ( <str> , & a , & b ) ; long int g = gcd ( MAX ( a , b ) , <unk> ( a , b ) ) ; printf ( <str> , g ) ; printf ( <str> , ( a * b ) / ( g ) ) ; i ++ ; } return <int> ; } int gcd ( long int a , long int b ) { if ( a % b == <int> ) { return b ; } while ( a > b ) { a = a - b ; } return gcd ( b , a ) ; }", "label": 0, "id": 2581}
{"input": "void FASTWRITE ( long long int x ) { char str [ <int> ] ; int i = <int> ; if ( x < <int> ) { putchar_unlocked ( <char> ) ; x *= - <int> ; } do { str [ i ++ ] = x + <int> ; x /= <int> ; } while ( x != <int> ) ; for ( i -- ; i >= <int> ; i -- ) putchar_unlocked ( str [ i ] ) ; } long long int fastread ( ) { long long int input = <int> ; char c = getchar_unlocked ( ) ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { long long int t , a , b , i , j , num , dend , div , quo , rem = - <int> , gcd , lcm , k ; t = fastread ( ) ; while ( t -- ) { rem = - <int> ; a = fastread ( ) ; b = fastread ( ) ; if ( a > b ) { dend = a ; div = b ; } else { dend = b ; div = a ; } while ( rem != <int> ) { rem = dend % div ; dend = div ; div = rem ; } gcd = dend ; lcm = a * b / gcd ; putchar_unlocked ( <char> ) ; FASTWRITE ( gcd ) ; putchar_unlocked ( <char> ) ; FASTWRITE ( lcm ) ; } return <int> ; }", "label": 1, "id": 2582}
{"input": "int solve ( int [ ] [ <int> ] , int [ ] [ <int> ] , int , int , int ) ; int main ( ) { int i , j , t ; int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] = { <int> } ; int n ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , solve ( a , b , n , <int> , <int> ) ) ; t -- ; } return <int> ; } int solve ( int a [ ] [ <int> ] , int b [ ] [ <int> ] , int n , int i , int j ) { int t , t1 , t2 ; if ( i > n ) return <int> ; if ( b [ i ] [ j ] != <int> ) return b [ i ] [ j ] ; t1 = solve ( a , b , n , i + <int> , j ) ; t2 = solve ( a , b , n , i + <int> , j + <int> ) ; if ( t1 > t2 ) t = t1 + a [ i ] [ j ] ; else t = t2 + a [ i ] [ j ] ; b [ i ] [ j ] = t ; return t ; }", "label": 1, "id": 2583}
{"input": "int main ( ) { int i , j , test , a [ <int> ] [ <int> ] = { <int> } , n ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2584}
{"input": "int n ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int sumtri ( int arr [ n + <int> ] [ n + <int> ] , int n , int row , int col ) { if ( row == n ) return <int> ; else { if ( col + <int> < n ) return max ( sumtri ( arr , n , row + <int> , col ) + arr [ row + <int> ] [ col ] , sumtri ( arr , n , row + <int> , col + <int> ) + arr [ row + <int> ] [ col + <int> ] ) ; else if ( col + <int> == n ) return sumtri ( arr , n , row + <int> , col ) + arr [ row + <int> ] [ col ] ; else return <int> ; } } int dynamic ( int arr [ n + <int> ] [ n + <int> ] , int n ) { int grid [ n + <int> ] [ n + <int> ] , i , j ; grid [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) grid [ i ] [ <int> ] = grid [ i - <int> ] [ j ] + arr [ i ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) if ( j == i ) grid [ i ] [ j ] = grid [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ; else grid [ i ] [ j ] = max ( grid [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] , grid [ i - <int> ] [ j ] + arr [ i ] [ j ] ) ; int gr = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( grid [ n - <int> ] [ i ] > gr ) gr = grid [ n - <int> ] [ i ] ; return gr ; } int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- > <int> ) { int i , j ; scanf ( <str> , & n ) ; int arr [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; printf ( <str> , arr [ <int> ] [ <int> ] + sumtri ( arr , n , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 2585}
{"input": "int scan ( ) { char ch = get ( ) ; int n = <int> ; while ( ch < <char> || ch > <char> ) ch = get ( ) ; while ( ch <= <char> && ch >= <char> ) { n = ( n << <int> ) + ( n << <int> ) + ch - <char> ; ch = get ( ) ; } return n ; } int main ( ) { int T , N , i ; T = scan ( ) ; while ( T -- ) { N = scan ( ) ; int array [ N ] ; long long int count = <int> , res = <int> ; for ( i = <int> ; i < N ; i ++ ) array [ i ] = scan ( ) ; for ( i = <int> ; i < N ; i ++ ) { if ( array [ i ] >= array [ i - <int> ] ) count ++ ; else { res += count * ( count + <int> ) / <int> ; count = <int> ; } } res += count * ( count + <int> ) / <int> ; printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 2586}
{"input": "int main ( ) { long int a , b , hcf [ <int> ] , i , j , gcd [ <int> ] , small ; int flag , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { flag = <int> ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; small = a ; if ( b < a ) small = b ; for ( j = <int> ; j <= small ; j ++ ) { if ( a % j != <int> || b % j != <int> ) flag = <int> ; if ( flag == <int> ) gcd [ i ] = j ; } hcf [ i ] = a * b / gcd [ i ] ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> ) ; printf ( <str> , gcd [ i ] ) ; printf ( <str> , hcf [ i ] ) ; } return <int> ; }", "label": 2, "id": 2587}
{"input": "main ( ) { int test , row , i , j ; int num [ <int> ] [ <int> ] = { { <int> } } ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & num [ i ] [ j ] ) ; for ( i = row - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( num [ i + <int> ] [ j ] < num [ i + <int> ] [ j + <int> ] ) num [ i ] [ j ] += num [ i + <int> ] [ j + <int> ] ; else num [ i ] [ j ] += num [ i + <int> ] [ j + <int> ] ; } printf ( <str> , num [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 2588}
{"input": "int main ( ) { int tests ; long temp , minval , i , n ; scanf ( <str> , & tests ) ; while ( tests -- ) { scanf ( <str> , & n ) ; minval = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < minval ) { minval = temp ; } } printf ( <str> , ( n - <int> ) * minval ) ; } return <int> ; }", "label": 0, "id": 2589}
{"input": "int main ( ) { long t , n , j , k , s1 = <int> , s2 = <int> , i ; long a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; s1 = <int> ; s2 = <int> ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = <int> ; j < n ; j ++ ) { s1 += a [ j ] [ <int> ] ; s2 += a [ j ] [ j ] ; } if ( s1 > s2 ) printf ( <str> , s1 + ! ( n % <int> ) ) ; if ( s1 < s2 ) printf ( <str> , s2 + ! ( n % <int> ) ) ; } return <int> ; }", "label": 1, "id": 2590}
{"input": "int main ( ) { int t ; long i , temp ; scanf ( <str> , & t ) ; long n , j ; long long k ; while ( t -- ) { scanf ( <str> , & n ) ; long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) { temp = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = temp ; } } } k = a [ n - <int> ] * ( n - <int> ) ; printf ( <str> , k ) ; } return <int> ; }", "label": 0, "id": 2591}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = <int> ; for ( int j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 2592}
{"input": "int main ( ) { int t , i , a [ <int> ] ; long long int n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; else if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2593}
{"input": "int main ( void ) { int sum [ LIMIT ] ; int i , j , l , max , n , prev_sum , tmp , x ; <unk> ( n ) ; while ( n -- > <int> ) { <unk> ( l ) ; if ( l < <int> || l > LIMIT ) continue ; for ( * sum = <int> , i = <int> ; i <= l ; i ++ ) { <unk> ( x ) ; prev_sum = * sum ; max = * sum += x ; for ( j = <int> ; j < i - <int> ; j ++ ) { <unk> ( x ) ; if ( prev_sum < * ( sum + j ) ) { prev_sum = * ( sum + j ) ; * ( sum + j ) += x ; } else { tmp = * ( sum + j ) ; * ( sum + j ) = prev_sum + x ; prev_sum = tmp ; } if ( max < * ( sum + j ) ) max = * ( sum + j ) ; } if ( j < i ) { <unk> ( x ) ; * ( sum + j ) = prev_sum + x ; if ( max < * ( sum + j ) ) max = * ( sum + j ) ; } } <unk> ( max ) ; putchar_unlocked ( <char> ) ; } return <int> ; }", "label": 0, "id": 2594}
{"input": "void main ( ) { int t , l , i , j , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 2595}
{"input": "long int gcd ( long int a , long int b ) ; int main ( void ) { int t ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long int p = a * b ; long int g = gcd ( a , b ) ; printf ( <str> , g , ( p / g ) ) ; } return <int> ; } long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 0, "id": 2596}
{"input": "int main ( ) { int t , n1 , n2 , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { gcd = <int> ; lcm = <int> ; scanf ( <str> , & n1 , & n2 ) ; int n ; n = n1 <= n2 ? n1 : n2 ; for ( i = <int> ; i <= n ; i ++ ) if ( ( n1 % i == <int> ) && ( n2 % i == <int> ) ) gcd = i ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2597}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , max = <int> ; scanf ( <str> , & n ) ; int a [ n ] , b [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] >= max ) max = a [ i ] ; } int newmax = - <int> ; for ( i = <int> ; i < n ; i ++ ) { b [ i ] = a [ i ] - max ; if ( b [ i ] >= newmax && b [ i ] != <int> ) newmax = b [ i ] ; } printf ( <str> , max + newmax ) ; } return <int> ; }", "label": 1, "id": 2598}
{"input": "typedef struct { int value ; int maxsum ; } element ; element * * * e ; void <unk> ( int <unk> , int colindex , int noofrows , int testno ) { int val , <unk> , <unk> ; if ( <unk> == ( noofrows - <int> ) ) { e [ testno ] [ <unk> ] [ colindex ] <fp> maxsum = e [ testno ] [ <unk> ] [ colindex ] <fp> value ; } else { val = e [ testno ] [ <unk> ] [ colindex ] <fp> value ; <unk> = e [ testno ] [ <unk> + <int> ] [ colindex ] <fp> maxsum + val ; <unk> = e [ testno ] [ <unk> + <int> ] [ colindex + <int> ] <fp> maxsum + val ; e [ testno ] [ <unk> ] [ colindex ] <fp> maxsum = ( <unk> > <unk> ) ? <unk> : <unk> ; } } void findMaxSum ( int noofrows , int testno ) { int j , k ; for ( j = noofrows - <int> ; j >= <int> ; j -- ) { for ( k = j ; k >= <int> ; k -- ) { <unk> ( j , k , noofrows , testno ) ; } } } element * * * e ; int main ( ) { int * out , <unk> , i , j , k = <int> , l , noofrows ; scanf ( <str> , & <unk> ) ; out = ( int * ) malloc ( ( <unk> ) * sizeof ( int ) ) ; e = ( element * * * ) malloc ( ( <unk> ) * sizeof ( element * * ) ) ; for ( i = <int> ; i < <unk> ; i ++ ) { scanf ( <str> , & noofrows ) ; e [ i ] = ( element * * ) malloc ( ( noofrows ) * sizeof ( element * ) ) ; for ( j = <int> ; j < noofrows ; j ++ ) { e [ i ] [ j ] = ( element * ) malloc ( k * sizeof ( element ) ) ; for ( l = <int> ; l < k ; l ++ ) { scanf ( <str> , & e [ i ] [ j ] [ l ] <fp> value ) ; e [ i ] [ j ] [ l ] <fp> maxsum = <int> ; } k ++ ; } k = <int> ; findMaxSum ( noofrows , i ) ; out [ i ] = e [ i ] [ <int> ] [ <int> ] <fp> maxsum ; } for ( i = <int> ; i < <unk> ; i ++ ) { printf ( <str> , out [ i ] ) ; } return <int> ; }", "label": 0, "id": 2599}
{"input": "int main ( void ) { int t , a [ <int> ] , i , z , n , t1 ; scanf ( <str> , & t ) ; while ( t -- ) { z = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { z = z + a [ i ] ; t1 = a [ i ] ; a [ i ] = a [ i + <int> ] ; a [ i + <int> ] = t1 ; } else if ( a [ i + <int> ] < a [ i ] ) z = z + a [ i + <int> ] ; } printf ( <str> , z ) ; } return <int> ; }", "label": 1, "id": 2600}
{"input": "int main ( ) { long long int t , n , a [ <int> ] , b [ <int> ] , large ; long long int temp , temp1 , i , j ; long long int temp2 ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } temp = <int> ; temp1 = <int> ; for ( j = <int> ; j < i ; j ++ ) { if ( i == <int> ) { b [ j ] = a [ j ] ; temp1 = a [ j ] ; } else { temp = temp1 ; if ( j == <int> ) { temp1 = b [ j ] ; b [ j ] = b [ j ] + a [ j ] ; } else if ( j != i - <int> ) { if ( a [ j ] + b [ j ] > temp1 + a [ j ] ) { b [ j ] = a [ j ] + b [ j ] ; temp1 = b [ j ] - a [ j ] ; } else { b [ j ] = temp1 + a [ j ] ; temp1 = b [ j ] - temp1 ; } } else b [ j ] = a [ j ] + temp1 ; } } } large = b [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( large < b [ i ] ) large = b [ i ] ; } printf ( <str> , large ) ; t -- ; } ; }", "label": 1, "id": 2601}
{"input": "int main ( ) { int min = <int> , n , i , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; t -- ; } }", "label": 1, "id": 2602}
{"input": "void main ( ) { int test , num1 , num2 , minmultiple , lcm , gcd , i = <int> ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & num1 , & num2 ) ; minmultiple = ( num1 > num2 ) ? num1 : num2 ; while ( <int> ) { if ( minmultiple % num1 == <int> && minmultiple % num2 == <int> ) { lcm = minmultiple ; break ; } ++ minmultiple ; } for ( i = <int> ; i <= num1 && i <= num2 ; ++ i ) { if ( num1 % i == <int> && num2 % i == <int> ) gcd = i ; } printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 2603}
{"input": "int max_num ( int num1 , int num2 ) { if ( num1 > num2 ) return num1 ; return num2 ; } int main ( ) { int * * input , * * res , test_cases , no_of_lines , i , j , k , max = <int> ; scanf ( <str> , & test_cases ) ; for ( i = <int> ; i < test_cases ; i ++ ) { max = <int> ; scanf ( <str> , & no_of_lines ) ; input = ( int * * ) malloc ( sizeof ( int ) * no_of_lines ) ; res = ( int * * ) malloc ( sizeof ( int ) * no_of_lines ) ; for ( j = <int> ; j < no_of_lines ; j ++ ) { input [ j ] = ( int * ) malloc ( sizeof ( int ) * ( j + <int> ) ) ; res [ j ] = ( int * ) malloc ( sizeof ( int ) * ( j + <int> ) ) ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & input [ j ] [ k ] ) ; } } res [ <int> ] [ <int> ] = input [ <int> ] [ <int> ] ; for ( j = <int> ; j < no_of_lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( k == <int> ) { res [ j ] [ k ] = res [ j - <int> ] [ k ] + input [ j ] [ k ] ; } else if ( k == j ) { res [ j ] [ k ] = res [ j - <int> ] [ k - <int> ] + input [ j ] [ k ] ; } else { res [ j ] [ k ] = max_num ( res [ j - <int> ] [ k ] , res [ j - <int> ] [ k - <int> ] ) + input [ j ] [ k ] ; } } } for ( k = <int> ; k < no_of_lines - <int> ; k ++ ) { if ( max < res [ no_of_lines - <int> ] [ k ] ) max = res [ no_of_lines - <int> ] [ k ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2604}
{"input": "int main ( void ) { int p ; scanf ( <str> , & p ) ; while ( p -- ) { long int i ; long int n ; int tmp = <int> ; int a [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) { tmp = a [ i ] ; a [ i ] = min ; min = tmp ; } } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 2605}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2606}
{"input": "int main ( ) { int t , j , k ; int n ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] + ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) ? a [ j + <int> ] [ k ] : a [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2607}
{"input": "int Call ( int x , int y ) { int a , b , t , gc , lc ; a = x ; b = y ; if ( b == <int> ) { return <int> ; } while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gc = a ; lc = ( x * y ) / gc ; printf ( <str> , lc , gc ) ; } int main ( void ) { int n , i = <int> ; long A , B , gcd , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( B != <int> ) { Call ( A , B ) ; } } return <int> ; }", "label": 1, "id": 2608}
{"input": "int main ( void ) { int t , n , s [ <int> ] , i , j , k , amt ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; k = <int> ; amt = <int> ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & s [ j ] ) ; if ( k >= s [ j ] ) { k = s [ j ] ; } } amt = k * ( n - <int> ) ; printf ( <str> , amt ) ; } return <int> ; }", "label": 0, "id": 2609}
{"input": "int main ( ) { int t , gcd ; long a , b , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { gcd = <int> ; scanf ( <str> , & a , & b ) ; while ( a > <int> || b > <int> ) { b = b % a ; if ( b == <int> ) { gcd = a ; break ; } a = a % b ; if ( a == <int> ) { gcd = b ; break ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2610}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { int cases ; scanf ( <str> , & cases ) ; while ( cases -- ) { long long int num1 , num2 , g_c_d , l_c_m ; scanf ( <str> , & num1 , & num2 ) ; long long int prod = num1 * num2 ; g_c_d = gcd ( num1 , num2 ) ; l_c_m = ( prod / g_c_d ) ; printf ( <str> , g_c_d , l_c_m ) ; printf ( <str> ) ; } return <int> ; } long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } }", "label": 0, "id": 2611}
{"input": "int main ( ) { int T , i ; scanf ( <str> , & T ) ; while ( T -- ) { long int a , b ; int gcd , lcm ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; lcm = ( a * b ) / gcd ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2612}
{"input": "int main ( ) { int t , n , i , j , k ; int a [ MAXVAL ] [ MAXVAL ] , mv [ MAXVAL ] [ MAXVAL ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; mv [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j > i ; j -- ) { a [ i ] [ j ] = - <int> ; mv [ i ] [ j ] = <int> ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( ( a [ i + <int> ] [ j ] == - <int> ) || ( a [ i + <int> ] [ j ] == - <int> && a [ i ] [ j + <int> ] == - <int> ) ) { mv [ i ] [ j ] = a [ i ] [ j ] ; } else { mv [ i ] [ j ] = max ( mv [ i + <int> ] [ j ] , mv [ i + <int> ] [ j + <int> ] ) + a [ i ] [ j ] ; } } } printf ( <str> , mv [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2613}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] , i , s = <int> , c = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( ( a [ i ] > a [ i - <int> ] ) && ( i != <int> ) ) { c ++ ; } else { s = s + ( c * ( c - <int> ) ) / <int> ; c = <int> ; } } s = s + ( c * ( c - <int> ) ) / <int> ; printf ( <str> , s + n ) ; } }", "label": 0, "id": 2614}
{"input": "int main ( ) { long long int arr [ <int> ] , n , j , count = <int> , sub = <int> , tc [ <int> ] , t = <int> , size , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { sub = <int> ; scanf ( <str> , & size ) ; for ( j = <int> ; j < size ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } for ( j = <int> ; j < size ; j ++ ) { count = <int> ; while ( arr [ j + <int> ] > arr [ j ] ) { count ++ ; j ++ ; } sub += ( count * ( count + <int> ) ) / <int> ; } tc [ t ++ ] = sub ; } printf ( <str> ) ; for ( i = <int> ; i < t ; i ++ ) printf ( <str> , tc [ i ] ) ; return <int> ; }", "label": 1, "id": 2615}
{"input": "int main ( ) { unsigned int max [ <int> ] , arr [ <int> ] [ <int> ] , n , t ; register unsigned int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = <int> ; i <= n ; i ++ ) max [ i ] = arr [ n ] [ i ] + arr [ <int> ] [ <int> ] ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) if ( arr [ i ] [ j ] + max [ j ] >= arr [ i ] [ j ] + max [ j + <int> ] ) max [ j ] = arr [ i ] [ j ] + max [ j ] ; else max [ j ] = arr [ i ] [ j ] + max [ j + <int> ] ; printf ( <str> , max [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2616}
{"input": "int main ( void ) { int t , n , i , j ; long int a [ <int> ] , ctr , f = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { ctr = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i - <int> ] ) f ++ ; else { ctr = ctr + ( f * ( f + <int> ) ) / <int> ; f = <int> ; } } if ( f != <int> ) { ctr = ctr + ( f * ( f + <int> ) ) / <int> ; f = <int> ; } ctr = ctr + n ; printf ( <str> , ctr ) ; } return <int> ; }", "label": 1, "id": 2617}
{"input": "int max ( int a , int b ) { if ( a <= b ) return b ; return a ; } int main ( ) { int T , num , fsum , col , i , j , tsum ; int a [ <int> ] [ <int> ] ; int sums [ <int> ] [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & num ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } fsum = sums [ <int> ] [ <int> ] [ <int> ] = sums [ <int> ] [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < num ; i ++ ) { sums [ i ] [ <int> ] [ <int> ] = max ( sums [ i - <int> ] [ <int> ] [ <int> ] , sums [ i - <int> ] [ <int> ] [ <int> ] ) + a [ i ] [ <int> ] ; sums [ i ] [ <int> ] [ <int> ] = <int> ; for ( j = <int> ; j < i ; j ++ ) { sums [ i ] [ j ] [ <int> ] = max ( sums [ i - <int> ] [ j ] [ <int> ] , sums [ i - <int> ] [ j ] [ <int> ] ) + a [ i ] [ j ] ; sums [ i ] [ j ] [ <int> ] = max ( sums [ i - <int> ] [ j - <int> ] [ <int> ] , sums [ i - <int> ] [ j - <int> ] [ <int> ] ) + a [ i ] [ j ] ; } sums [ i ] [ i ] [ <int> ] = <int> ; sums [ i ] [ i ] [ <int> ] = max ( sums [ i - <int> ] [ i - <int> ] [ <int> ] , sums [ i - <int> ] [ i - <int> ] [ <int> ] ) + a [ i ] [ i ] ; } fsum = sums [ <int> ] [ <int> ] [ <int> ] ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { tsum = ( sums [ i ] [ j ] [ <int> ] ? sums [ i ] [ j ] [ <int> ] : sums [ i ] [ j ] [ <int> ] > sums [ i ] [ j ] [ <int> ] ) ; if ( tsum > fsum ) fsum = tsum ; } } printf ( <str> , fsum ) ; } return <int> ; }", "label": 1, "id": 2618}
{"input": "int main ( void ) { int T ; long long int A , B , i , gcd , lcm ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & A , & B ) ; for ( i = <int> ; i <= A && i <= B ; ++ i ) { if ( A % i == <int> && B % i == <int> ) { gcd = i ; } } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; T -- ; } return <int> ; }", "label": 2, "id": 2619}
{"input": "int main ( ) { int i , t , n , count ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; count = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) count ++ ; } count = count + n ; printf ( <str> , count ) ; } }", "label": 1, "id": 2620}
{"input": "int main ( ) { unsigned int t ; unsigned long n , i , j ; long long int a [ <int> ] , sum , k , l ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; k = <int> ; l = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) l ++ ; else { k = k + l * ( l + <int> ) / <int> ; l = <int> ; } } k = k + l * ( l + <int> ) / <int> ; sum = k + n ; printf ( <str> , sum ) ; t -- ; } }", "label": 0, "id": 2621}
{"input": "int main ( ) { int p , i , j ; long int n ; scanf ( <str> , & p ) ; while ( p -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n - <int> - i ; j ++ ) { if ( a [ j ] >= a [ j + <int> ] ) { int t = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = t ; } } } printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 2622}
{"input": "int main ( void ) { int t , n , i , j ; long ans , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } j = ans = <int> ; sum = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { sum ++ ; continue ; } else { j = i + <int> ; ans += sum * ( sum + <int> ) / <int> ; sum = <int> ; } } ans += sum * ( sum + <int> ) / <int> ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 2623}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , m , i ; long long int s ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } m = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < m ) m = a [ i ] ; } s = m * ( n - <int> ) ; printf ( <str> , s ) ; } }", "label": 0, "id": 2624}
{"input": "int main ( void ) { long a [ <int> ] , t , n , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2625}
{"input": "int main ( ) { int t , i , a , b , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int gcd , lcm ; for ( j = <int> ; j <= a && j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2626}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i ; scanf ( <str> , & n ) ; long long a [ n ] , c ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } c = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < c ) { c = a [ i ] ; } } c = c * ( n - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 2627}
{"input": "int main ( ) { int e , c , a , b ; scanf ( <str> , & e ) ; while ( e != <int> ) { scanf ( <str> , & a , & b ) ; c = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , c / a ) ; e -- ; } return <int> ; }", "label": 1, "id": 2628}
{"input": "int gcd ( int x , int y ) { if ( x == y ) return x ; if ( x > y ) return gcd ( x - y , y ) ; else return gcd ( x , y - x ) ; } int lcm ( int x , int y ) { return ( x * y ) / gcd ( x , y ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 2629}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , l , m , x , t , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( l = t - <int> ; l >= <int> ; l -- ) for ( m = <int> ; m <= l - <int> ; m ++ ) if ( a [ l ] [ m ] > a [ l ] [ m + <int> ] ) a [ l - <int> ] [ m ] = a [ l - <int> ] [ m ] + a [ l ] [ m ] ; else a [ l - <int> ] [ m ] = a [ l - <int> ] [ m ] + a [ l ] [ m + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2630}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( <str> , & n ) ; int vec1 [ n ] [ n ] ; int vec2 [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; vec2 [ <int> ] [ <int> ] = vec1 [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { vec2 [ i ] [ <int> ] = vec1 [ i ] [ <int> ] + vec2 [ i - <int> ] [ <int> ] ; vec2 [ i ] [ i ] = vec1 [ i ] [ i ] + vec2 [ i - <int> ] [ i - <int> ] ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( vec2 [ i - <int> ] [ j ] > vec2 [ i - <int> ] [ j - <int> ] ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } } } max = vec2 [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( vec2 [ n - <int> ] [ i ] > max ) max = vec2 [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2631}
{"input": "int l ( int , int ) ; int h ( int , int , int ) ; int main ( ) { int a , b , t , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return <int> ; } int gcd ( int a , int b ) { int max = a > b ? a : b ; int min = a + b - max ; int r = max % min ; while ( r != <int> ) { max = min ; min = r ; r = max % min ; } return min ; }", "label": 1, "id": 2632}
{"input": "int main ( ) { int t , n , a [ <int> ] , i , sm ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; sm = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( a [ i ] < sm ) sm = a [ i ] ; printf ( <str> , sm * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2633}
{"input": "int main ( ) { long long int t , lcm , i , x , gcd , a , b ; scanf ( <str> , & t ) ; for ( x = <int> ; x <= t ; x ++ ) { scanf ( <str> , & a , & b ) ; { for ( i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; lcm = ( a * b ) / gcd ; } printf ( <str> , gcd , lcm ) ; } } return <int> ; }", "label": 2, "id": 2634}
{"input": "int main ( ) { int a , b , lcm , gcd , remainder , numerator , denominator ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = a * b / gcd ; printf ( <str> , a , b , gcd ) ; printf ( <str> , a , b , lcm ) ; }", "label": 1, "id": 2635}
{"input": "long gcd ( long , long ) ; int main ( ) { long x , y , hcf , lcm ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( <str> , x , y , hcf ) ; printf ( <str> , x , y , lcm ) ; return <int> ; } long gcd ( long x , long y ) { if ( x == <int> ) { return y ; } while ( y != <int> ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 1, "id": 2636}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , n , t , max ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2637}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) { return a + b ; } else { return gcd ( b % a , a ) ; } } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 2638}
{"input": "int hcf ( int i , int j ) { int m , k ; if ( i < j ) { for ( k = i ; k >= <int> ; k -- ) { if ( j % k == <int> && i % k == <int> ) { m = k ; break ; } } } else { for ( k = j ; k >= <int> ; k -- ) { if ( i % k == <int> && j % k == <int> ) { m = k ; break ; } } } return m ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j ; scanf ( <str> , & i , & j ) ; long long int gcd , lcm ; gcd = hcf ( i , j ) ; lcm = ( i * j ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2639}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int A [ n ] ; int min ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; if ( i == <int> ) min = A [ i ] ; if ( A [ i ] < min ) min = A [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2640}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n + <int> ] , i , j , x , y ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) scanf ( <str> , & a [ j ] [ i ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { x = a [ j ] [ i + <int> ] ; y = a [ j + <int> ] [ i + <int> ] ; if ( x > y ) a [ j ] [ i ] += x ; else a [ j ] [ i ] += y ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2641}
{"input": "int main ( void ) { int testCases ; int inputTriangle [ <int> ] [ <int> ] , Result [ <int> ] [ <int> ] , ans = <int> ; int rows = <int> ; scanf ( <str> , & testCases ) ; while ( testCases -- ) { scanf ( <str> , & rows ) ; int i , j ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & inputTriangle [ i ] [ j ] ) ; if ( i == <int> ) { Result [ i ] [ j ] = inputTriangle [ i ] [ j ] ; } else if ( j == <int> && i != <int> ) { Result [ i ] [ j ] = inputTriangle [ i ] [ j ] + Result [ i - <int> ] [ j ] ; } else if ( i == j && i != <int> ) { Result [ i ] [ j ] = inputTriangle [ i ] [ j ] + Result [ i - <int> ] [ j - <int> ] ; } else { if ( ( Result [ i - <int> ] [ j ] > Result [ i - <int> ] [ j - <int> ] ) && i != <int> ) { Result [ i ] [ j ] = Result [ i - <int> ] [ j ] + inputTriangle [ i ] [ j ] ; } else { Result [ i ] [ j ] = Result [ i - <int> ] [ j - <int> ] + inputTriangle [ i ] [ j ] ; } } if ( Result [ i ] [ j ] > ans ) { ans = Result [ i ] [ j ] ; } } } printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 2642}
{"input": "int main ( ) { int n , a , b , i , j , min , max , gcd , t , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { min = a ; max = b ; } for ( j = min ; j > <int> ; j -- ) { if ( max % j == <int> ) gcd = j ; else continue ; } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2643}
{"input": "int main ( ) { int n , i = <int> , j = <int> , max1 = <int> , max2 = <int> , max , t ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; int A [ <int> ] [ <int> ] ; int m [ <int> ] [ <int> ] ; scanf ( <str> , & A [ <int> ] [ <int> ] ) ; m [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; m [ i ] [ <int> ] = m [ i - <int> ] [ <int> ] + A [ i ] [ <int> ] ; } max = m [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == j ) m [ i ] [ j ] = m [ i - <int> ] [ j - <int> ] + A [ i ] [ j ] ; else { max1 = m [ i - <int> ] [ j ] + A [ i ] [ j ] ; max2 = m [ i - <int> ] [ j - <int> ] + A [ i ] [ j ] ; if ( max1 > max2 ) m [ i ] [ j ] = max1 ; else m [ i ] [ j ] = max2 ; if ( max < m [ i ] [ j ] ) max = m [ i ] [ j ] ; } } } printf ( <str> , max ) ; t -- ; } return <int> ; }", "label": 0, "id": 2644}
{"input": "int main ( ) { long arr [ <int> ] [ <int> ] ; int t , n ; int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2645}
{"input": "void main ( ) { int n , sum = <int> , gr = <int> , i , j , num , n1 , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { gr = <int> ; scanf ( <str> , & num ) ; n1 = num ; if ( n1 > gr ) gr = num ; printf ( <str> , gr ) ; sum = sum + num ; } sum = sum - gr ; printf ( <str> , sum ) ; printf ( <str> , sum ) ; sum = <int> ; } }", "label": 1, "id": 2646}
{"input": "int func ( int A [ ] , int i , int j ) { int n = i , flag = <int> ; for ( n = i ; n < j ; n ++ ) { if ( A [ n ] > A [ n + <int> ] ) { flag = <int> ; break ; } } return flag ; } int main ( ) { int i , test_no ; scanf ( <str> , & test_no ) ; for ( i = <int> ; i < test_no ; i ++ ) { int N ; scanf ( <str> , & N ) ; int A [ N ] ; int z ; for ( z = <int> ; z < N ; z ++ ) scanf ( <str> , & A [ z ] ) ; int a , b , t_c = <int> ; for ( a = <int> ; a < N ; a ++ ) { for ( b = a ; b < N ; b ++ ) { if ( func ( A , a , b ) ) t_c ++ ; } } printf ( <str> , t_c ) ; } }", "label": 2, "id": 2647}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int t ; scanf ( <str> , & t ) ; int line ; int ans ; int i , j , next ; while ( t -- ) { ans = <int> ; line = <int> ; memset ( arr , <int> , sizeof ( arr [ <int> ] [ <int> ] ) * <int> * <int> ) ; scanf ( <str> , & line ) ; for ( i = <int> ; i < line ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } ans = arr [ <int> ] [ <int> ] ; j = <int> ; for ( i = <int> ; i < line ; i ++ ) { next = <int> ; if ( j - <int> >= <int> && ans < arr [ i ] [ j - <int> ] ) { ans = ans - arr [ i - <int> ] [ j ] ; j = j - <int> ; ans = ans + arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ; } else { next = max ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; if ( next == arr [ i ] [ j + <int> ] ) { j ++ ; } ans += next ; } } printf ( <str> , ans ) ; } }", "label": 1, "id": 2648}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int r , i , j , k , v , c , max = <int> ; scanf ( <str> , & r ) ; int a [ r ] [ r ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } v = r ; for ( k = <int> ; k < v ; k ++ ) { for ( j = <int> ; j < r ; j ++ ) c = <int> ; { for ( i = <int> ; i < r - <int> ; i ++ ) { c = c + a [ i ] [ j ] ; } c = c + a [ i ] [ j ] ; } if ( c > max ) { max = c ; } r = r - <int> ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2649}
{"input": "int max2 ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int triangle [ <int> ] [ <int> ] ; int T , lines , ans , i , j , k ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & lines ) ; scanf ( <str> , & triangle [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangle [ i ] [ j ] ) ; if ( j == <int> ) { triangle [ i ] [ j ] += triangle [ i - <int> ] [ j ] ; } else if ( j == i ) { triangle [ i ] [ j ] += triangle [ i - <int> ] [ j - <int> ] ; } else { triangle [ i ] [ j ] += max2 ( triangle [ i - <int> ] [ j ] , triangle [ i - <int> ] [ j - <int> ] ) ; } } } ans = triangle [ lines - <int> ] [ <int> ] ; for ( k = <int> ; k < lines ; k ++ ) { if ( triangle [ lines - <int> ] [ k ] > ans ) ans = triangle [ lines - <int> ] [ k ] ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 2650}
{"input": "int gcd ( int a , int b ) { int temp ; while ( b % a != <int> ) { temp = a ; a = b % a ; b = temp ; } return a ; } void main ( ) { int T , LCM [ <int> ] , GCD [ <int> ] , i , a , b ; do { scanf ( <str> , & T ) ; } while ( T > <int> && T < <int> ) ; for ( i = <int> ; i < T ; i ++ ) { do { scanf ( <str> , & a , & b ) ; } while ( a < <int> && a > <int> && b < <int> && b > <int> ) ; GCD [ i ] = gcd ( a , b ) ; LCM [ i ] = ( a * b ) / GCD [ i ] ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , GCD [ i ] , LCM [ i ] ) ; }", "label": 1, "id": 2651}
{"input": "void cost ( unsigned long int ) ; unsigned long int a [ <int> ] ; int main ( ) { unsigned long int i , no , n ; scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) { scanf ( <str> , & n ) ; cost ( n ) ; } return <int> ; } void cost ( unsigned long int n ) { unsigned long int min , j ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , ( n - <int> ) * min ) ; return ; }", "label": 3, "id": 2652}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; int i ; int count = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ j - <int> ] ) count ++ ; else if ( a [ j ] < a [ j - <int> ] ) break ; } } int lastcount ; lastcount = count + n ; printf ( <str> , lastcount ) ; } }", "label": 0, "id": 2653}
{"input": "int main ( ) { int t , b , i , min , c ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & b ) ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & a [ i ] ) ; printf ( <str> ) ; } min = a [ <int> ] ; for ( i = <int> ; i < b - <int> ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } c = min * ( b - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 2654}
{"input": "main ( ) { int a [ <int> ] [ <int> ] ; int t , r , num ; scanf ( <str> , & t ) ; int ans [ t ] ; int i , p , q ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & r ) ; for ( p = <int> ; p < r ; p ++ ) { for ( q = <int> ; q <= p ; q ++ ) { a [ p ] [ q ] = <unk> ( ) ; } } ans [ i ] = <unk> ( a , r ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , ans [ i ] ) ; } } int <unk> ( ) { int input ; char c = <int> ; while ( c < <int> ) { scanf ( <str> , & c ) ; } input = <int> ; while ( c > <int> ) { input = <int> * input + c - <char> ; scanf ( <str> , & c ) ; } return input ; } int <unk> ( int a [ <int> ] [ <int> ] , int r ) { int i , j , max ; for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < r - <int> ; j ++ ) { max = findmax ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + max ; } } return a [ <int> ] [ <int> ] ; } int findmax ( int p , int q ) { return ( ( p > q ) ? p : q ) ; }", "label": 1, "id": 2655}
{"input": "int main ( ) { long long a , b , min , x , remain , gcd , lcm , t ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; x = a ; } else { min = a ; x = b ; } remain = x % min ; while ( remain ) { x = min ; min = remain ; remain = x % min ; } gcd = min ; lcm = ( a * b ) / ( gcd ) ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 2656}
{"input": "int find ( int a , int b ) ; int main ( ) { int t , a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) gcd = find ( a , b ) ; else gcd = find ( b , a ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } } int find ( int a , int b ) { while ( a != b ) { if ( a > b ) return find ( a - b , b ) ; else return find ( a , b - a ) ; } return a ; }", "label": 1, "id": 2657}
{"input": "int main ( ) { int buff [ <int> ] , t_case , n_row , i , j , <unk> , <unk> , ans ; scanf ( <str> , & t_case ) ; while ( t_case -- ) { <unk> = <int> ; <unk> = <int> ; scanf ( <str> , & n_row ) ; for ( i = <int> ; i <= n_row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { <unk> ++ ; scanf ( <str> , & buff [ <unk> ] ) ; if ( i == <int> ) { } else if ( j == <int> ) { buff [ <unk> ] = buff [ <unk> ] + buff [ <unk> ] ; } else if ( j == i ) { buff [ <unk> ] = buff [ <unk> ] + buff [ <unk> + j - <int> ] ; <unk> = <unk> + j - <int> ; } else { if ( buff [ <unk> + j - <int> ] >= buff [ <unk> + j - <int> ] ) { buff [ <unk> ] = buff [ <unk> + j - <int> ] + buff [ <unk> ] ; } else { buff [ <unk> ] = buff [ <unk> ] + buff [ <unk> + j - <int> ] ; } } } } i = n_row - <int> ; ans = buff [ <unk> ] ; while ( i -- ) { if ( ans < buff [ <unk> - <int> ] ) { ans = buff [ <unk> - <int> ] ; } <unk> -- ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 2658}
{"input": "void printMat ( ) ; int findMax ( ) ; int matrix [ size ] [ size ] ; int result [ size ] [ size ] ; int main ( ) { int testCase ; int lines ; int i , j ; int row , col ; int item ; int down , right ; scanf ( <str> , & testCase ) ; for ( i = <int> ; i < testCase ; i ++ ) { scanf ( <str> , & lines ) ; for ( row = <int> ; row < lines ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { scanf ( <str> , & matrix [ row ] [ col ] ) ; } } result [ <int> ] [ <int> ] = matrix [ <int> ] [ <int> ] ; for ( row = <int> ; row < lines ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { item = matrix [ row ] [ col ] ; down = row + <int> ; right = col + <int> ; if ( result [ row ] [ col ] + matrix [ down ] [ col ] > result [ down ] [ col ] ) result [ down ] [ col ] = result [ row ] [ col ] + matrix [ down ] [ col ] ; if ( result [ row ] [ col ] + matrix [ down ] [ right ] > result [ down ] [ right ] ) result [ down ] [ right ] = result [ row ] [ col ] + matrix [ down ] [ right ] ; } } printf ( <str> , findMax ( ) ) ; for ( row = <int> ; matrix [ row ] [ <int> ] != <int> ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { matrix [ row ] [ col ] = <int> ; result [ row ] [ col ] = <int> ; } } } } void printMat ( ) { int row , col ; for ( row = <int> ; matrix [ row ] [ <int> ] != <int> ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { printf ( <str> , result [ row ] [ col ] ) ; } printf ( <str> ) ; } } int findMax ( ) { int row , col ; int max = <int> ; for ( row = <int> ; matrix [ row ] [ <int> ] != <int> ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { if ( result [ row ] [ col ] > max ) max = result [ row ] [ col ] ; } } return max ; }", "label": 1, "id": 2659}
{"input": "long gcd ( long a , long b ) ; int main ( ) { int i , t , x ; long a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = gcd ( a , b ) ; printf ( <str> , x , ( a * b ) / x ) ; } return <int> ; } long gcd ( long a , long b ) { long i , m ; if ( a > b ) { m = b ; } else { m = a ; } for ( i = m ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { return i ; } } }", "label": 2, "id": 2660}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , i , j , n , k , p = <int> , t ; scanf ( <str> , & n ) ; for ( t = <int> ; t < n ; t ++ ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j > <int> && j < i ) { if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } if ( j == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; if ( j = i ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; } } for ( j = <int> ; j < k ; j ++ ) { if ( a [ k - <int> ] [ j ] > p ) p = a [ k - <int> ] [ j ] ; } printf ( <str> , p ) ; } printf ( <str> ) ; return <int> ; }", "label": 1, "id": 2661}
{"input": "int main ( ) { int t , line , i = <int> , j = <int> , temp1 , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & line ) ; int arr [ line ] [ line ] ; int last ; temp1 = line - <int> ; for ( i = <int> ; i < line ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = temp1 ; i > - <int> ; i -- ) { for ( j = <int> ; j < temp1 + <int> ; j ++ ) { if ( arr [ temp1 ] [ j ] + arr [ temp1 + <int> ] [ j ] >= arr [ temp1 ] [ j ] + arr [ temp1 + <int> ] [ j + <int> ] ) { arr [ temp1 ] [ j ] = arr [ temp1 ] [ j ] + arr [ temp1 + <int> ] [ j ] ; last = arr [ temp1 ] [ j ] ; } else { arr [ temp1 ] [ j ] = arr [ temp1 ] [ j ] + arr [ temp1 + <int> ] [ j + <int> ] ; last = arr [ temp1 ] [ j ] ; } } temp1 -- ; } if ( line == <int> ) { last = arr [ i ] [ j ] ; } printf ( <str> , last ) ; } return <int> ; }", "label": 0, "id": 2662}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , c , d ; scanf ( <str> , & a , & b ) ; c = a * b ; if ( b > a ) { d = a ; a = b ; b = d ; } while ( b != <int> ) { d = b ; b = a % b ; a = d ; } printf ( <str> , a , c / a ) ; } return <int> ; }", "label": 1, "id": 2663}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , s , p ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) { p = <int> ; } else { p = <int> ; a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + p ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2664}
{"input": "main ( ) { int t , i , j , k = <int> , flag = <int> ; long int count = <int> , ans ; long int n ; long long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } count = <int> ; i = <int> ; while ( i < n - <int> ) { if ( a [ i ] > a [ i + <int> ] ) i ++ ; else { j = i ; k = <int> ; while ( j < n - <int> ) { if ( a [ j ] <= a [ j + <int> ] ) { count ++ ; j ++ ; k ++ ; } else break ; } flag = k ; while ( k -- ) { count = count + k ; } i = i + flag ; } } ans = count + n ; printf ( <str> , ans ) ; } }", "label": 1, "id": 2665}
{"input": "int main ( ) { int a , b , d , e , GCD , lcm , r ; scanf ( <str> , & a , & b ) ; d = a ; e = b ; while ( b > <int> ) { r = a % b ; a = b ; b = r ; } GCD = a ; lcm = ( d * e ) / GCD ; printf ( <str> , GCD , lcm ) ; return <int> ; }", "label": 1, "id": 2666}
{"input": "int max ( int x , int y ) { return ( x > y ) ? x : y ; } int fun ( int ar [ MAX ] [ MAX ] , int i , int j , int n ) { if ( i == n ) return <int> ; else return max ( ( ar [ i ] [ j ] + fun ( ar , i + <int> , j , n ) ) , ( ar [ i ] [ j ] + fun ( ar , i + <int> , j + <int> , n ) ) ) ; } int main ( ) { int ar [ MAX ] [ MAX ] ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } printf ( <str> , fun ( ar , <int> , <int> , n ) ) ; } }", "label": 2, "id": 2667}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , GCD , LCM , v ; scanf ( <str> , & a , & b ) ; GCD = gcd ( a , b ) ; v = b / GCD ; LCM = v * a ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 0, "id": 2668}
{"input": "int a [ <int> ] = { <int> } ; int j = <int> ; int sum ( int , int ) ; int main ( ) { int t , i , row , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & row ) ; j = ( row * ( row + <int> ) ) / <int> ; for ( m = <int> ; m <= j ; m ++ ) { scanf ( <str> , & a [ m ] ) ; } printf ( <str> , sum ( <int> , <int> ) ) ; } return <int> ; } int sum ( int i , int c ) { c ++ ; if ( i < j + <int> ) { if ( sum ( i + c , c ) > sum ( i + c + <int> , c ) ) { return sum ( i + c , c ) + a [ i ] ; } else { return sum ( i + c + <int> , c ) + a [ i ] ; } } return <int> ; }", "label": 2, "id": 2669}
{"input": "long gcd ( long a , long b ) ; int main ( ) { long n , i , a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return <int> ; } long gcd ( long a , long b ) { long i , min , gcd ; if ( a >= b ) { min = b ; } else { min = a ; } for ( i = min ; i > <int> ; i -- ) { if ( ( a % i ) == <int> && ( b % i ) == <int> ) { gcd = i ; break ; } } return gcd ; }", "label": 2, "id": 2670}
{"input": "int main ( ) { int nTest ; scanf ( <str> , & nTest ) ; int N ; unsigned int row [ <int> ] ; while ( nTest -- ) { scanf ( <str> , & N ) ; memset ( row , <int> , sizeof ( row ) ) ; int i ; for ( i = <int> ; i < N + <int> ; ++ i ) { int curr , temp , prev = <int> ; int j ; for ( j = <int> ; j < i ; ++ j ) { curr = <int> ; char c ; do { c = getchar ( ) ; } while ( ! isdigit ( c ) ) ; do { curr = curr * <int> + c - <char> ; c = getchar ( ) ; } while ( isdigit ( c ) ) ; temp = MAX ( prev + curr , row [ j ] + curr ) ; prev = row [ j ] ; row [ j ] = temp ; } } int j , max = <int> ; for ( j = <int> ; j < N ; ++ j ) { max = MAX ( max , row [ j ] ) ; } printf ( <str> , max ) ; } }", "label": 0, "id": 2671}
{"input": "int sol ( int * arr , int N ) { int * * array = ( int * * ) arr ; int i , j ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) if ( j == <int> ) array [ i ] [ j ] += array [ i - <int> ] [ j ] ; else if ( j == i ) array [ i ] [ j ] += array [ i - <int> ] [ j - <int> ] ; else { if ( array [ i - <int> ] [ j ] > array [ i - <int> ] [ j - <int> ] ) array [ i ] [ j ] += array [ i - <int> ] [ j ] ; else array [ i ] [ j ] += array [ i - <int> ] [ j - <int> ] ; } int max = array [ N - <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) if ( array [ N - <int> ] [ i ] > max ) max = array [ N - <int> ] [ i ] ; return max ; } int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T ) { int N ; scanf ( <str> , & N ) ; int * * array = malloc ( sizeof ( int * ) * N ) ; int i , j ; for ( i = <int> ; i < N ; i ++ ) array [ i ] = malloc ( sizeof ( int ) * N ) ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { char ch ; scanf ( <str> , & array [ i ] [ j ] , & ch ) ; } } int max = sol ( ( int * ) array , N ) ; printf ( <str> , max ) ; for ( i = <int> ; i < N ; i ++ ) free ( array [ i ] ) ; free ( array ) ; T -- ; } return <int> ; }", "label": 0, "id": 2672}
{"input": "int cmpfunc ( const void * a , const void * b ) { return * ( long long unsigned int * ) a - * ( long long unsigned int * ) b ; } int main ( ) { long long unsigned int n , a [ <int> ] , t , c , l , i , j , p = <int> ; ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; p = <int> ; l = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; if ( n == <int> ) c = <int> ; else { for ( i = <int> ; i < n - <int> ; i ++ ) { l = i ; while ( a [ l + <int> ] > a [ l ] ) { c ++ ; l ++ ; } } qsort ( a , n , sizeof ( long long unsigned int ) , cmpfunc ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { p = <int> ; l = i ; while ( a [ l ] == a [ l + <int> ] ) { p = <int> ; l ++ ; } if ( l == i || l - i == <int> ) c ++ ; else c += l - i - <int> ; if ( p == <int> && i == n - <int> ) { c ++ ; break ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 2673}
{"input": "void func ( int a , int b ) ; void maxmin ( int a , int b , int c ) ; void merge ( int a , int b ) ; int s = <int> , c = <int> , row ; int b [ <int> ] ; int a [ <int> ] ; int main ( ) { int n , t , flag ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & row ) ; t = ( row * ( row + <int> ) ) / <int> ; for ( flag = <int> ; flag <= t ; flag ++ ) scanf ( <str> , & a [ flag ] ) ; for ( ; flag < <int> ; flag ++ ) a [ flag ] = - <int> ; func ( <int> , <int> ) ; int yu , x ; yu = <int> , x = c ; merge ( yu , x ) ; printf ( <str> , b [ x ] ) ; n -- ; } return <int> ; } void func ( int i , int r ) { s += a [ i ] ; if ( a [ i + r ] != - <int> ) { func ( ( i + r ) , ( r + <int> ) ) ; func ( ( i + r + <int> ) , ( r + <int> ) ) ; } if ( r == row ) { c ++ ; b [ c ] = s ; } s = s - a [ i ] ; } void maxmin ( int p , int q , int r ) { int temp = <int> ; if ( b [ p ] > b [ q + <int> ] ) { temp = b [ p ] ; b [ p ] = b [ q + <int> ] ; b [ q + <int> ] = temp ; } if ( b [ q ] > b [ r ] ) { temp = b [ q ] ; b [ q ] = b [ r ] ; b [ r ] = temp ; } } void merge ( int p , int r ) { int q ; if ( p < r ) { q = ( p + r ) / <int> ; merge ( p , q ) ; merge ( q + <int> , r ) ; maxmin ( p , q , r ) ; } }", "label": 3, "id": 2674}
{"input": "int main ( ) { int i , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; int t ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; lcm = <int> ; gcd = <int> , remainder = <int> ; } return <int> ; }", "label": 1, "id": 2675}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 2676}
{"input": "int main ( ) { int t , a , b , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 2677}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] , n , i , m , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) { { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) m = a [ i ] [ j ] ; else m = a [ i ] [ j + <int> ] ; a [ i - <int> ] [ j ] += m ; } } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2678}
{"input": "int hcf ( int a , int b ) { int t ; while ( a != <int> ) { t = a ; a = b % a ; b = t ; } return b ; } int main ( ) { int t , i , a , b , h ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; h = hcf ( a , b ) ; printf ( <str> , h , ( a * b ) / h ) ; } return <int> ; }", "label": 1, "id": 2679}
{"input": "int main ( ) { int * * a , tests , i , j , n ; scanf ( <str> , & tests ) ; while ( tests -- ) { scanf ( <str> , & n ) ; a = malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) a [ i ] = malloc ( ( i + <int> ) * sizeof ( int * * ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) free ( a [ i ] ) ; free ( a ) ; } return <int> ; }", "label": 0, "id": 2680}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; long int a , b , temp ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( b < a ) { temp = a ; a = b ; b = temp ; } if ( a % b == <int> ) { printf ( <str> , b , a ) ; continue ; } temp = b / <int> ; while ( b % temp != <int> || a % temp != <int> ) { temp -- ; } b = b * a ; b = b / temp ; printf ( <str> , temp , b ) ; } return <int> ; }", "label": 2, "id": 2681}
{"input": "int solve ( int i , int j ) ; int max ( int , int ) ; int arr [ <int> ] [ <int> ] , n ; int main ( ) { int i , j , k , x ; scanf ( <str> , & x ) ; for ( k = <int> ; k <= x ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } printf ( <str> , solve ( <int> , <int> ) ) ; } return <int> ; } int solve ( int i , int j ) { int cost1 , cost2 , cost , cache [ <int> ] [ <int> ] , visited [ <int> ] [ <int> ] = { <int> } ; if ( i > n ) return <int> ; if ( visited [ i ] [ j ] == <int> ) return cache [ i ] [ j ] ; cost1 = solve ( i + <int> , j ) ; cost2 = solve ( i + <int> , j + <int> ) ; cost = max ( cost1 , cost2 ) + arr [ i ] [ j ] ; cache [ i ] [ j ] = cost ; visited [ i ] [ j ] = <int> ; return cost ; } int max ( int cost1 , int cost2 ) { if ( cost1 > cost2 ) return cost1 ; else return cost2 ; }", "label": 3, "id": 2682}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; }", "label": 1, "id": 2683}
{"input": "int gcd ( int m , int n ) { if ( m % n == <int> ) return n ; else return gcd ( n , m % n ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int m , n , l ; scanf ( <str> , & m , & n ) ; l = ( m * n ) / gcd ( m , n ) ; printf ( <str> , gcd ( m , n ) , l ) ; } return <int> ; }", "label": 1, "id": 2684}
{"input": "int dp [ <int> ] [ <int> ] ; int main ( ) { int T , N , x , i , j ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N , & dp [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & x ) ; if ( ! j ) dp [ i ] [ j ] = dp [ i - <int> ] [ j ] + x ; else if ( j == i ) dp [ i ] [ j ] = dp [ i - <int> ] [ j - <int> ] + x ; else dp [ i ] [ j ] = ( dp [ i - <int> ] [ j ] > dp [ i - <int> ] [ j - <int> ] ) ? ( dp [ i - <int> ] [ j ] + x ) : ( dp [ i - <int> ] [ j - <int> ] + x ) ; } for ( i = <int> ; i < N ; i ++ ) if ( ! i ) x = dp [ N - <int> ] [ i ] ; else x = ( x > dp [ N - <int> ] [ i ] ) ? x : dp [ N - <int> ] [ i ] ; printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 2685}
{"input": "int getgcd ( int x , int y ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; gcd = getgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int getgcd ( int x , int y ) { if ( y != <int> ) { getgcd ( y , x % y ) ; } else { return ( x ) ; } }", "label": 0, "id": 2686}
{"input": "int main ( ) { long int t , a , i , m ; long long int g , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; m = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < m ) m = a ; } g = ( m * ( n - <int> ) ) ; printf ( <str> , g ) ; } return <int> ; }", "label": 0, "id": 2687}
{"input": "int main ( ) { int in [ <int> ] , T , i , j , n , min ; long long int sum ; scanf ( <str> , & T ) ; assert ( T >= <int> && T <= <int> ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & n ) ; assert ( n >= <int> && n <= <int> ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & in [ j ] ) ; min = in [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( in [ j ] < min ) min = in [ j ] ; } sum = ( long long int ) min * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 2688}
{"input": "int main ( ) { int t , i , n , num , k , j , temp , large ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int arr1 [ n ] ; int arr2 [ n ] ; for ( j = <int> ; j < n ; j ++ ) { arr1 [ j ] = <int> ; } for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr2 [ k ] ) ; if ( k >= <int> ) { if ( arr1 [ k ] > arr1 [ k - <int> ] ) { arr2 [ k ] = arr2 [ k ] + arr1 [ k ] ; } else arr2 [ k ] = arr2 [ k ] + arr1 [ k - <int> ] ; } else arr2 [ k ] = arr2 [ k ] + arr1 [ k ] ; } for ( k = <int> ; k <= j ; k ++ ) { temp = arr1 [ k ] ; arr1 [ k ] = arr2 [ k ] ; arr2 [ k ] = temp ; } } large = arr1 [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( arr1 [ k ] > large ) large = arr1 [ k ] ; } printf ( <str> , large ) ; } return <int> ; }", "label": 0, "id": 2689}
{"input": "long min ( long pg , long ss ) { return ss < pg ? ss : pg ; } int main ( ) { long n , i , pos , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long pg = <int> , ss = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & pg ) ; ss = min ( ss , pg ) ; } printf ( <str> , ss * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2690}
{"input": "int main ( ) { int t , m , a , b , <unk> , <unk> ; int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; <unk> = a ; <unk> = b ; while ( b != <int> ) { m = b ; b = a % b ; a = m ; } lcm = ( <unk> * <unk> ) / a ; printf ( <str> , a , lcm ) ; } return <int> ; }", "label": 1, "id": 2691}
{"input": "int sum_max = <int> ; int a [ <int> ] [ <int> ] = { <int> } ; void maxsum ( int n , int sum , int line , int count ) { if ( line > n ) { if ( sum > sum_max ) { sum_max = sum ; } return ; } sum = sum + a [ line ] [ count ] ; maxsum ( n , sum , line + <int> , count ) ; maxsum ( n , sum , line + <int> , count + <int> ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } maxsum ( n , <int> , <int> , <int> ) ; printf ( <str> , sum_max ) ; } return <int> ; }", "label": 2, "id": 2692}
{"input": "void calculate ( ) ; int mylog ( int num ) ; int main ( int argc , char * argv [ ] ) { int triangleCount ; scanf ( <str> , & triangleCount ) ; while ( triangleCount > <int> ) { calculate ( ) ; triangleCount -- ; } return EXIT_SUCCESS ; } void calculate ( ) { int lineCount , lineNum , sumLen , i , max ; scanf ( <str> , & lineCount ) ; int line [ lineCount ] ; int sum [ <int> ] ; lineCount = <int> ; lineNum = <int> ; sumLen = <int> ; max = <int> ; while ( lineCount > <int> ) { int i ; lineNum ++ ; for ( i = <int> ; i < lineNum ; i ++ ) scanf ( <str> , & line [ i ] ) ; if ( lineNum == <int> ) { sum [ <int> ] = line [ <int> ] ; sumLen = <int> ; } else { for ( i = sumLen ; i > <int> ; i -- ) { int lineC = mylog ( i ) ; sum [ ( <int> * i ) - <int> ] = sum [ i - <int> ] + line [ lineC + <int> ] ; sum [ ( <int> * i ) - <int> ] = sum [ i - <int> ] + line [ lineC ] ; } sumLen *= <int> ; } lineCount -- ; } for ( i = <int> ; i < sumLen ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( <str> , max ) ; } int mylog ( int num ) { int count = <int> ; while ( num > <int> ) { num = num / <int> ; count ++ ; } return count - <int> ; }", "label": 1, "id": 2693}
{"input": "int main ( ) { int t , a , b , x , y , temp , i , lcm , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2694}
{"input": "int main ( ) { int t , i , j , a [ <int> ] [ <int> ] , nr , s1 , s2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & nr ) ; for ( i = <int> ; i < nr ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = nr - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { s1 = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; s2 = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = ( ( s1 > s2 ) ? s1 : s2 ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2695}
{"input": "int main ( ) { int t , i , n , m , g , min , l , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & m ) ; j = n * m ; if ( n > m ) l = m ; else l = n ; for ( i = l ; i >= <int> ; i -- ) { if ( n % i == <int> && m % i == <int> ) { g = i ; break ; } } min = j / g ; printf ( <str> , g , min ) ; g = <int> ; l = <int> ; } return <int> ; }", "label": 1, "id": 2696}
{"input": "int main ( ) { int t , n , * * a , * * b ; int max , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; b = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; b [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = a [ i ] [ j ] ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) { if ( ( i && j ) && j < i ) b [ i ] [ j ] += ( b [ i - <int> ] [ j - <int> ] > b [ i - <int> ] [ j ] ) ? b [ i - <int> ] [ j - <int> ] : b [ i - <int> ] [ j ] ; else if ( i && j == i ) b [ i ] [ j ] += b [ i - <int> ] [ j - <int> ] ; else if ( j == <int> && i != j ) b [ i ] [ j ] += b [ i - <int> ] [ j ] ; } max = b [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( b [ n - <int> ] [ i ] > max ) max = b [ n - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2697}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; int j , c = <int> , k = <int> ; long long int a [ n ] ; for ( j = <int> ; j <= n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = i ; j <= n - <int> ; j ++ ) { if ( ( a [ j ] < a [ j + <int> ] ) || ( a [ j ] == a [ j + <int> ] ) ) c ++ ; else break ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { if ( ( a [ i ] = a [ j ] ) && ( a [ i ] != NULL ) ) { a [ j ] = NULL ; k ++ ; } } } printf ( <str> , n + c - k ) ; } return <int> ; }", "label": 2, "id": 2698}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int N ; scanf ( <str> , & N ) ; int min = INT_MAX , n = N ; while ( N -- ) { int x ; scanf ( <str> , & x ) ; if ( min > x ) min = x ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 2699}
{"input": "long int <unk> ( ) { long int ret = <int> ; char ch = getchar ( ) ; while ( ch >= <char> && ch <= <char> ) { ret = <int> * ret + ( ch - <char> ) ; ch = getchar ( ) ; } return ret ; } int main ( ) { long int t , j , min = <int> , m , k ; t = <unk> ( ) ; while ( t -- ) { min = <int> ; k = j = <unk> ( ) ; while ( j -- ) { m = <unk> ( ) ; if ( m < min ) min = m ; } printf ( <str> , min * ( k - <int> ) ) ; } return <int> ; }", "label": 1, "id": 2700}
{"input": "int main ( void ) { long long int a , b , m , n ; int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & m , & n ) ; a = m , b = n ; while ( b != <int> ) { a %= b ; a ^= b ^= a ^= b ; } printf ( <str> , a , m / a * n ) ; } return <int> ; }", "label": 0, "id": 2701}
{"input": "int main ( ) { int i , t , x , n , p , u ; long sum ; int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum = <int> ; scanf ( <str> , & n ) ; for ( p = <int> ; p < n ; p ++ ) scanf ( <str> , & a [ p ] ) ; int min = a [ <int> ] ; for ( x = <int> ; x < n ; x ++ ) { if ( a [ x ] < min ) min = a [ x ] ; } for ( u = <int> ; u < p - <int> ; u ++ ) { sum = sum + min ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 2702}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i , arr [ n ] , b [ n ] , sum = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; b [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i - <int> ] <= arr [ i ] ) b [ i ] = b [ i - <int> ] + <int> ; else b [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) sum = sum + b [ i ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 2703}
{"input": "int n , v , a [ <int> ] = { <int> } , sum [ <int> ] = { <int> } , t ; int main ( ) { scanf ( <str> , & t ) ; while ( t >= <int> ) { scanf ( <str> , & n ) ; v = ( n * ( n + <int> ) ) / <int> ; int i = <int> ; for ( i = <int> ; i < v ; i ++ ) scanf ( <str> , & a [ i ] ) ; int m = <int> , j = <int> , k = <int> , temp = <int> ; for ( j = <int> ; j < v ; j ++ ) { if ( m <= n ) { k = <int> ; int r = m ; while ( k <= <int> ) { a [ j + r ] = a [ j ] + a [ j + r ] ; r ++ ; k ++ ; } m ++ ; } } for ( i = <int> ; i < v ; i ++ ) { if ( temp < a [ i ] ) temp = a [ i ] ; } printf ( <str> , temp ) ; t -- ; } return <int> ; }", "label": 1, "id": 2704}
{"input": "int maxi ( int a , int b ) { return a < b ? b : a ; } int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( <str> , & n ) ; int vec1 [ n + <int> ] [ n + <int> ] ; int vec2 [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; vec2 [ <int> ] [ <int> ] = vec1 [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else if ( j == i ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } else if ( vec2 [ i - <int> ] [ j ] > vec2 [ i - <int> ] [ j - <int> ] ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } } } max = vec2 [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( vec2 [ n ] [ i ] > max ) max = vec2 [ n ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2705}
{"input": "int main ( ) { int t , i , j , a , b , g [ <int> ] , l [ <int> ] , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; m = a < b ? a : b ; for ( j = <int> ; j <= m ; j ++ ) { if ( ( a % j == <int> ) && ( b % j == <int> ) ) g [ i ] = j ; } l [ i ] = ( a * b ) / g [ i ] ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , g [ i ] , l [ i ] ) ; }", "label": 1, "id": 2706}
{"input": "int main ( ) { int t , r , c , i , j , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= ( n - <int> ) ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = ( n - <int> ) ; i > <int> ; i -- ) { for ( j = <int> ; j < ( n - <int> ) ; j ++ ) { if ( a [ i ] [ j ] <= a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } }", "label": 0, "id": 2707}
{"input": "int gcd ( int a , int b ) { if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } else return gcd ( a , b - a ) ; } int main ( ) { int t ; int a , b ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 2708}
{"input": "int main ( ) { int test ; long int a , b , c , d , hcf ; printf ( <str> ) ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & a , & b ) ; c = a ; d = b ; while ( a != b ) { if ( a < b ) { b = b - a ; } else a = a - b ; } printf ( <str> , a , ( c * d ) / a ) ; } return <int> ; }", "label": 1, "id": 2709}
{"input": "int main ( void ) { int size , i , T , j ; long long int cnt , a [ <int> ] ; scanf ( <str> , & T ) ; while ( T -- > <int> ) { scanf ( <str> , & size ) ; cnt = size ; for ( i = <int> ; i < size ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < size ; i ++ ) { j = i ; while ( a [ j + <int> ] >= a [ j ] && j < size ) { cnt ++ ; j ++ ; } } printf ( <str> , cnt ) ; } return <int> ; }", "label": 1, "id": 2710}
{"input": "int main ( ) { int s , i , j , n , b ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( b = <int> ; b < n ; b ++ ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = s - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2711}
{"input": "int main ( ) { int a , b , x ; int lcm , i , j ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; i = a ; j = b ; while ( b != <int> ) { x = a ; a = b ; b = x % b ; } lcm = i * j / a ; printf ( <str> , a , lcm ) ; } }", "label": 1, "id": 2712}
{"input": "int main ( ) { long n1 , n2 , t , i , r , l , p ; scanf ( <str> , & t ) ; long gcd [ t ] , lcm [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 < n2 ) { l = n1 ; n1 = n2 ; n2 = l ; } p = n1 * n2 ; while ( n2 != <int> ) { r = n1 % n2 ; n1 = n2 ; n2 = r ; } gcd [ i ] = n1 ; lcm [ i ] = p / gcd [ i ] ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , gcd [ i ] , lcm [ i ] ) ; return <int> ; }", "label": 0, "id": 2713}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t ; long int a , b , hcf ; long long int p , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; p = a * b ; lcm = p / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 0, "id": 2714}
{"input": "int maxim ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j , maxC [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; maxC [ i ] [ j ] = <int> ; } maxC [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) maxC [ i ] [ <int> ] = maxC [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) if ( j == i ) { maxC [ i ] [ j ] = maxC [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else maxC [ i ] [ j ] = maxim ( maxC [ i - <int> ] [ j ] , maxC [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; int max = maxC [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( maxC [ n - <int> ] [ i ] > max ) max = maxC [ n - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2715}
{"input": "void main ( ) { int i , j , k = <int> , t , l = <int> , a [ <int> ] , n ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( n >= <int> ) for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) k = a [ i ] ; else k = a [ i + <int> ] ; l = l + k ; } printf ( <str> , l ) ; l = <int> ; t -- ; } }", "label": 3, "id": 2716}
{"input": "int main ( ) { int t ; long n , i ; long a [ NUM ] , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2717}
{"input": "int max ( int , int ) ; int ini [ <int> ] [ <int> ] ; int mem [ <int> ] [ <int> ] ; int read ( ) { register char ch ; register int t = <int> ; while ( <int> ) { ch = GC ; if ( ch > <int> && ch < <int> ) t = <int> * t + ch - <int> ; else return t ; } } int main ( ) { int t , n , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; getchar ( ) ; for ( j = <int> ; j <= n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & ini [ j ] [ k ] ) ; } for ( k = <int> ; k <= n ; k ++ ) mem [ n ] [ k ] = ini [ n ] [ k ] ; for ( j = n - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { mem [ j ] [ k ] = ini [ j ] [ k ] + max ( mem [ j + <int> ] [ k ] , mem [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , mem [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 2718}
{"input": "int store [ MAXSIZE ] [ MAXSIZE ] ; int finds ( int , int , int ) ; int main ( ) { int n , rows , count , sum , i , j ; int result [ MAXSIZE ] , store [ MAXSIZE ] [ MAXSIZE ] ; for ( i = <int> ; i < MAXSIZE ; i ++ ) for ( j = <int> ; j < MAXSIZE ; store [ i ] [ j ++ ] = <int> ) ; scanf ( <str> , & n ) ; for ( count = <int> ; count <= n ; count ++ ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & store [ i ] [ j ] ) ; } } sum = finds ( <int> , <int> , rows ) ; result [ count - <int> ] = sum ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; } int finds ( int i , int j , int row ) { int sum1 = <int> , sum2 = <int> ; if ( i >= row - <int> ) return store [ i ] [ j ] ; else { sum1 = finds ( i + <int> , j , row ) ; sum2 = finds ( i + <int> , j + <int> , row ) ; return store [ i ] [ j ] + ( sum2 > sum1 ? sum2 : sum1 ) ; } }", "label": 2, "id": 2719}
{"input": "int main ( ) { int T , row , i , j ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & row ) ; int a [ row ] [ row ] ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = row - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2720}
{"input": "int main ( ) { int t , n , i , j ; long int a [ <int> ] , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n , & a [ <int> ] ) ; k = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < k ) k = a [ j ] ; } printf ( <str> , k * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2721}
{"input": "int main ( ) { long int j , a , b , max , min ; int i , n ; long long int p ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } for ( j = min ; j > <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { printf ( <str> , j ) ; j = <int> ; } } for ( p = max ; p <= ( a * b ) ; p = p + max ) { if ( p % a == <int> && p % b == <int> ) { printf ( <str> , p ) ; break ; } } } }", "label": 2, "id": 2722}
{"input": "int main ( ) { int t , i ; int long a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int z = <int> ; if ( a > b ) { if ( a % b == <int> ) { printf ( <str> , b ) ; printf ( <str> , a ) ; } else if ( a % b != <int> ) { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { if ( i > z ) { z = i ; } } } printf ( <str> , z ) ; printf ( <str> , a * b / z ) ; } } if ( b > a ) { if ( b % a == <int> ) { printf ( <str> , a ) ; printf ( <str> , b ) ; } if ( b % a != <int> ) { for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { if ( i > z ) { z = i ; } } } printf ( <str> , z ) ; printf ( <str> , a * b / z ) ; } } } }", "label": 2, "id": 2723}
{"input": "int main ( ) { int i , a , b , t , m , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a * b ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } lcm = ( m / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2724}
{"input": "int main ( ) { int t , i , j , line ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & line ) ; int arr [ line ] [ line ] ; for ( i = <int> ; i < line ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = line - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) arr [ i - <int> ] [ j ] += ( arr [ i ] [ j ] > arr [ i ] [ j ] ) ? arr [ i ] [ j ] : arr [ i ] [ j + <int> ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2725}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 2726}
{"input": "int a [ <int> ] [ <int> ] ; int c [ <int> ] [ <int> ] ; int n ; int solve ( int i , int j ) ; int main ( void ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int m ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) c [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; m = solve ( <int> , <int> ) ; printf ( <str> , m ) ; } return <int> ; } int solve ( int i , int j ) { if ( i > n ) return <int> ; if ( c [ i ] [ j ] > <int> ) return c [ i ] [ j ] ; int t1 , t2 , t ; t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; if ( t1 >= t2 ) t = t1 + a [ i ] [ j ] ; else t = t2 + a [ i ] [ j ] ; c [ i ] [ j ] = t ; return t ; }", "label": 0, "id": 2727}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int b , c = <int> , i , n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { b = min ( a [ i ] , a [ i + <int> ] ) ; c = c + b ; } printf ( <str> , c ) ; } }", "label": 1, "id": 2728}
{"input": "int gcd ( int x , int y ) { if ( x == y ) return x ; else if ( x > y ) return gcd ( x - y , y ) ; else return gcd ( x , y - x ) ; } int lcm ( int x , int y ) { int max = ( x > y ) ? x : y ; do { if ( max % x == <int> && max % y == <int> ) { return max ; } else ++ max ; } while ( <int> ) ; } int main ( void ) { int a , b , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 2, "id": 2729}
{"input": "int main ( ) { int t , n , arr [ <int> ] , i , j , sum , max , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; sum = <int> ; max = arr [ <int> ] ; x = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( arr [ i ] >= max ) { sum += x + <int> ; x ++ ; max = arr [ i ] ; } else { x = <int> ; max = arr [ i ] ; sum += <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 2730}
{"input": "int matrix [ <int> ] [ <int> ] ; int sum [ <int> ] [ <int> ] ; int main ( ) { int t , rows ; int i , j , ans ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & rows ) ; if ( rows < <int> && rows >= <int> ) { for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & matrix [ i ] [ j ] ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; ( j <= i && ( matrix [ i ] [ j ] >= <int> && matrix [ i ] [ j ] < <int> ) ) ; j ++ ) { if ( i == <int> && j == <int> ) sum [ i ] [ j ] = matrix [ i ] [ j ] ; else if ( j == <int> ) sum [ i ] [ j ] = matrix [ i ] [ j ] + sum [ i - <int> ] [ j ] ; else sum [ i ] [ j ] = matrix [ i ] [ j ] + ( sum [ i - <int> ] [ j ] > sum [ i - <int> ] [ j - <int> ] ? sum [ i - <int> ] [ j ] : sum [ i - <int> ] [ j - <int> ] ) ; } } ans = <int> ; for ( i = <int> ; i < rows ; i ++ ) ans = ( sum [ rows - <int> ] [ i ] > ans ? sum [ rows - <int> ] [ i ] : ans ) ; printf ( <str> , ans ) ; } t -- ; } }", "label": 1, "id": 2731}
{"input": "int best_path ( int l , int tri [ <int> ] [ <int> ] , int r , int c ) { int i , j , k ; if ( r == l ) { return <int> ; } int max = MAX ( best_path ( l , tri , r + <int> , c ) , best_path ( l , tri , r + <int> , c + <int> ) ) ; return tri [ r ] [ c ] + max ; } int main ( ) { int n , i , j , k , l , sum = <int> ; scanf ( <str> , & n ) ; int tri [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & tri [ j ] [ k ] ) ; } } sum = best_path ( l , tri , <int> , <int> ) ; printf ( <str> , sum ) ; } }", "label": 2, "id": 2732}
{"input": "int main ( ) { long int a , flag = <int> , b , i , temp ; scanf ( <str> , & a ) ; while ( a -- ) { flag = <int> ; scanf ( <str> , & b ) ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < flag ) flag = temp ; } printf ( <str> , flag * ( b - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2733}
{"input": "int a [ <int> ] ; int main ( int argc , char const * argv [ ] ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , min = INT_MAX ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2734}
{"input": "int main ( ) { int t , n , m , i , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & m ) ; a = n , b = m ; while ( n != m ) { if ( m > n ) m = m - n ; else n = n - m ; } printf ( <str> , n ) ; printf ( <str> , ( a * b ) / m ) ; } }", "label": 1, "id": 2735}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int maxProfit ( int arr [ <int> ] [ <int> ] , int lines ) { int i = <int> , j = <int> ; int profit [ <int> ] [ <int> ] = { { <int> } } ; int rmax = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < lines ; i ++ ) { profit [ i ] [ <int> ] = i > <int> ? ( profit [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ) : arr [ i ] [ <int> ] ; rmax = max ( rmax , profit [ i ] [ <int> ] ) ; } profit [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { profit [ i ] [ j ] = max ( profit [ i - <int> ] [ j - <int> ] , profit [ i - <int> ] [ j ] ) + arr [ i ] [ j ] ; rmax = max ( rmax , profit [ i ] [ j ] ) ; } } return rmax ; } int main ( void ) { int n , i = <int> , lines = <int> , j = <int> , k = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & lines ) ; int arr [ <int> ] [ <int> ] = { { <int> , } , } ; for ( j = <int> ; j < lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } printf ( <str> , maxProfit ( arr , lines ) ) ; } return <int> ; }", "label": 0, "id": 2736}
{"input": "int main ( ) { int sum = <int> , n , i , j , t ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } if ( n == <int> ) printf ( <str> , a [ <int> ] [ <int> ] ) ; else { for ( i = n ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { sum = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else { sum = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } a [ i - <int> ] [ j ] = sum ; } } printf ( <str> , sum ) ; t -- ; } } return <int> ; }", "label": 3, "id": 2737}
{"input": "int main ( ) { int t ; long a , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a * b ; while ( a != b ) ( a > b ) ? ( a = a - b ) : ( b = b - a ) ; printf ( <str> , a , c / a ) ; } return <int> ; }", "label": 0, "id": 2738}
{"input": "int main ( ) { int i , j , arr [ <int> ] [ <int> ] , temp , result , cases , lines , value ; scanf ( <str> , & cases ) ; while ( <int> ) { result = <int> ; scanf ( <str> , & lines ) ; for ( i = <int> ; i <= lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & value ) ; arr [ i ] [ j ] = value + arr [ i - <int> ] [ j - <int> ] ; temp = value + arr [ i - <int> ] [ j ] ; if ( temp > arr [ i ] [ j ] ) arr [ i ] [ j ] = temp ; if ( result < arr [ i ] [ j ] ) result = arr [ i ] [ j ] ; } } printf ( <str> , result ) ; if ( -- cases == <int> ) break ; } return <int> ; }", "label": 1, "id": 2739}
{"input": "int main ( ) { long T ; scanf ( <str> , & T ) ; while ( T > <int> ) { long n , a , res = <int> , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( res > a ) res = a ; } printf ( <str> , res * ( n - <int> ) ) ; T -- ; } return <int> ; }", "label": 0, "id": 2740}
{"input": "long long int a [ <int> ] ; main ( ) { long long int t , n , i , c , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } c = min * ( n - <int> ) ; printf ( <str> , c ) ; } }", "label": 0, "id": 2741}
{"input": "int main ( ) { int T , N , I [ <int> ] [ <int> ] , ir , ic , t , <unk> , max ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; <unk> = <int> ; if ( N < <int> || N > <int> ) <unk> = <int> ; if ( ! <unk> ) continue ; scanf ( <str> , & I [ <int> ] [ <int> ] ) ; max = I [ <int> ] [ <int> ] ; for ( ir = <int> ; ir < N ; ir ++ ) { for ( ic = <int> ; ic < ir + <int> ; ic ++ ) { scanf ( <str> , & t ) ; I [ ir ] [ ic ] = t ; if ( t < <int> || t > <int> ) <unk> = <int> ; if ( ic == <int> ) I [ ir ] [ <int> ] = I [ ir ] [ <int> ] + I [ ir - <int> ] [ <int> ] ; else if ( ic == ir ) I [ ir ] [ ir ] = I [ ir ] [ ir ] + I [ ir - <int> ] [ ir - <int> ] ; else I [ ir ] [ ic ] = ( I [ ir - <int> ] [ ic ] > I [ ir - <int> ] [ ic - <int> ] ) ? I [ ir ] [ ic ] + I [ ir - <int> ] [ ic ] : I [ ir ] [ ic ] + I [ ir - <int> ] [ ic - <int> ] ; if ( I [ ir ] [ ic ] > max ) max = I [ ir ] [ ic ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2742}
{"input": "int main ( ) { int n , i , b , t , c ; char s1 [ <int> ] , s2 [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; b = a [ <int> ] ; c = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( b > a [ i ] ) b = a [ i ] ; c = c + b ; } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 2743}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i , gcd = <int> , lcm = <int> ; scanf ( <str> , & a , & b ) ; for ( i = b ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; break ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2744}
{"input": "int main ( ) { int t , i , n , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = n - <int> ; j >= <int> ; j -- ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2745}
{"input": "int main ( void ) { int n , i , p , q ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p , & q ) ; printf ( <str> , gcd ( p , q ) , p * q / gcd ( p , q ) ) ; } return <int> ; } int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } return a ; }", "label": 1, "id": 2746}
{"input": "int main ( ) { int t , n , pos , min = <int> , temp ; printf ( <str> ) ; scanf ( <str> , & t ) ; printf ( <str> ) ; scanf ( <str> , & n ) ; int ar [ n ] ; printf ( <str> ) ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & ar [ i ] ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j < n ; j ++ ) { if ( ar [ j ] > ar [ j + <int> ] ) pos = j ; else if ( ar [ j + <int> ] > ar [ j ] ) pos = j + <int> ; min = min + ar [ j ] ; for ( int k = pos ; k < n ; k ++ ) { temp = ar [ k ] ; ar [ k ] = ar [ k + <int> ] ; } n -- ; } } printf ( <str> , min ) ; return <int> ; }", "label": 2, "id": 2747}
{"input": "int main ( void ) { int t = <int> , n = <int> , a [ MAX ] , i = <int> , min = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; if ( n <= <int> ) { break ; } else { for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { min += ( a [ i ] < a [ i + <int> ] ) ? a [ i ] : a [ i + <int> ] ; } } printf ( <str> , min ) ; } return <int> ; }", "label": 1, "id": 2748}
{"input": "int main ( ) { int t , n , i , small ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } small = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( small > a [ i ] ) small = a [ i ] ; } printf ( <str> , small ) ; } return <int> ; }", "label": 1, "id": 2749}
{"input": "int * pt , largest = <int> , max ; int sum ( int n ) { int i , sum = <int> ; for ( i = <int> ; i <= n ; i ++ ) sum = sum + i ; return sum ; } void <unk> ( int i , int ro , int sum ) { sum = sum + pt [ i ] ; if ( ro < max ) { <unk> ( i + ro , ro + <int> , sum ) ; <unk> ( i + ro + <int> , ro + <int> , sum ) ; } else if ( largest < sum ) largest = sum ; } main ( ) { int t , row , i , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & row ) ; max = row ; pt = ( int * ) malloc ( sizeof ( int ) * row ) ; n = sum ( row ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , pt + i ) ; <unk> ( <int> , <int> , <int> ) ; printf ( <str> , largest ) ; } }", "label": 2, "id": 2750}
{"input": "typedef unsigned long long ull ; typedef long long ll ; ll ReadInt ( void ) { int ch , neg = <int> ; ll val = <int> ; while ( ( ch = getchar ( ) ) < <char> || ch > <char> ) { if ( ch == <char> ) { neg = <int> ; ch = getchar ( ) ; break ; } } while ( ch >= <char> && ch <= <char> ) { val *= <int> ; val += ch - <char> ; ch = getchar ( ) ; } if ( neg ) val = - val ; return val ; } ull CalcGCD ( ull a , ull b ) { ull temp ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( void ) { ull numtests , a , b , gcd ; numtests = ReadInt ( ) ; while ( numtests -- > <int> ) { a = ReadInt ( ) ; b = ReadInt ( ) ; gcd = CalcGCD ( a , b ) ; printf ( <str> , gcd , ( a / gcd ) * b ) ; } return <int> ; }", "label": 0, "id": 2751}
{"input": "int main ( ) { int t = <int> ; long int a , b , gcd = <int> , lcm , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( b < a ) { p = b ; while ( p != <int> ) { if ( ( a % p == <int> ) && ( b % p == <int> ) ) { gcd = p ; break ; } p -- ; } } else { p = a ; while ( p != <int> ) { if ( ( a % p == <int> ) && ( b % p == <int> ) ) { gcd = p ; break ; } p -- ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return ; }", "label": 2, "id": 2752}
{"input": "int maximum ( int * * s , int row , int col ) { int i , j , m [ row ] [ col ] ; for ( i = <int> ; i < row ; ++ i ) { for ( j = <int> ; j < row ; ++ j ) { m [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) m [ i ] [ j ] = s [ i ] [ j ] ; else if ( j == <int> ) m [ i ] [ j ] = m [ i - <int> ] [ j ] + s [ i ] [ j ] ; else if ( i == <int> ) m [ i ] [ j ] = s [ i ] [ j ] ; else if ( m [ i - <int> ] [ j ] > m [ i - <int> ] [ j - <int> ] ) m [ i ] [ j ] = m [ i - <int> ] [ j ] + s [ i ] [ j ] ; else m [ i ] [ j ] = m [ i - <int> ] [ j - <int> ] + s [ i ] [ j ] ; } } for ( i = <int> ; i < row ; ++ i ) { for ( j = <int> ; j < row ; ++ j ) { } } int max = <int> ; for ( i = <int> ; i < row ; ++ i ) { if ( m [ row - <int> ] [ i ] > max ) max = m [ row - <int> ] [ i ] ; } return max ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , * p [ <int> ] , * * pf ; scanf ( <str> , & n ) ; int s [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { s [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & s [ i ] [ j ] ) ; } p [ i ] = s [ i ] ; } pf = p ; int sum = maximum ( ( int * * ) pf , n , n ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 2753}
{"input": "int gcd ( int x , int y ) { if ( x == <int> ) return y ; else return gcd ( y % x , x ) ; } int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int A , B , hcf , lcm ; scanf ( <str> , & A , & B ) ; hcf = gcd ( A , B ) ; lcm = ( A * B ) / hcf ; printf ( <str> , hcf , lcm ) ; } return ( <int> ) ; }", "label": 1, "id": 2754}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; int a [ n ] ; int i ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; long long int cost = <int> ; int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( min >= a [ i ] ) min = a [ i ] ; } cost = ( n - <int> ) * min ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 2755}
{"input": "int main ( void ) { long int t , a , b , i = <int> , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; while ( i <= a && i <= b ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; ++ i ; } printf ( <str> , gcd , ( a * b ) / gcd ) ; } }", "label": 1, "id": 2756}
{"input": "long long int a [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int n , m ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; for ( int i = <int> ; i < m ; i ++ ) for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( int i = m - <int> ; i >= <int> ; i -- ) for ( int j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( int i = <int> ; i < <int> ; i ++ ) for ( int j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; } return <int> ; }", "label": 0, "id": 2757}
{"input": "int main ( ) { int t , a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 2758}
{"input": "int main ( ) { int t , n , i , j , sum = <int> ; int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } i = <int> ; j = <int> ; sum = a [ <int> ] [ <int> ] ; for ( ; i <= n ; ) { for ( ; j <= n ; ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { sum = sum + a [ i ] [ j ] ; i = i + <int> ; } else { sum = sum + a [ i ] [ j + <int> ] ; i = i + <int> ; j = j + <int> ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 2759}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ MAX ] , i , j , n , cost = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; while ( n != <int> ) { i = <int> ; if ( a [ i ] < a [ i + <int> ] ) { for ( j = i + <int> ; j < n ; j ++ ) a [ j ] = a [ j + <int> ] ; n -- ; cost += a [ <int> ] ; } else { for ( j = i ; j < n ; j ++ ) a [ j ] = a [ j + <int> ] ; n -- ; cost += a [ <int> ] ; } } printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 2760}
{"input": "int gcd ( int a , int b ) { int t ; while ( b != <int> ) { t = a % b ; a = b ; b = t ; } printf ( <str> , a ) ; return <int> ; } int lcm ( int a , int b ) { int max = a ; while ( <int> ) { if ( ( max % a == <int> ) && ( max % b == <int> ) ) { printf ( <str> , max ) ; break ; } else max ++ ; } return <int> ; } int main ( ) { int b , i , a , n , temp ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( b > a ) { temp = a ; a = b ; b = temp ; } gcd ( a , b ) ; lcm ( a , b ) ; } return <int> ; }", "label": 2, "id": 2761}
{"input": "int GCD ( int a , int b ) { if ( b == <int> ) return a ; else return GCD ( b , a % b ) ; } int main ( ) { int cases ; scanf ( <str> , & cases ) ; while ( cases > <int> ) { int A , B ; scanf ( <str> , & A , & B ) ; int gcd = GCD ( A , B ) ; int lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; cases -- ; } return <int> ; }", "label": 1, "id": 2762}
{"input": "int main ( void ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { int i , min = <int> , cost , n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; if ( a [ <int> ] < min ) min = a [ <int> ] ; cost = min ; for ( i = <int> ; i < n ; i ++ ) { if ( min < a [ i ] ) { cost = cost + min ; min = a [ i ] ; } else { min = a [ i ] ; cost = cost + min ; } } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 2763}
{"input": "int main ( ) { int cases , n , i , j , max ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } a [ i ] [ i ] += a [ i - <int> ] [ i - <int> ] ; } max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] > max ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2764}
{"input": "int main ( void ) { int cases , row , * * data ; int i , j , k , max ; int up , up_left ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { scanf ( <str> , & row ) ; data = ( int * * ) malloc ( row * sizeof ( int * ) ) ; for ( j = <int> ; j < row ; j ++ ) { data [ j ] = ( int * ) malloc ( row * sizeof ( int ) ) ; for ( k = <int> ; k < row ; k ++ ) data [ j ] [ k ] = <int> ; } j = <int> ; k = <int> ; max = <int> ; while ( j < row ) { scanf ( <str> , & data [ j ] [ k ] ) ; if ( j > <int> ) { up = data [ j - <int> ] [ k ] ; up_left = <int> ; if ( k > <int> ) up_left = data [ j - <int> ] [ k - <int> ] ; if ( up_left > up ) data [ j ] [ k ] += up_left ; else data [ j ] [ k ] += up ; if ( j == row - <int> ) { if ( data [ j ] [ k ] > max ) max = data [ j ] [ k ] ; } } k ++ ; if ( k == j + <int> ) { j ++ ; k = <int> ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2765}
{"input": "int main ( ) { int i , a , b , t ; int gcd = <int> , lcm = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a , i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 2766}
{"input": "int main ( ) { long long int t , n , s , i , j = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < j ) { j = arr [ i ] ; } } printf ( <str> , j * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 2767}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n ; while ( test -- > <int> ) { scanf ( <str> , & n ) ; int vec1 [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( vec1 [ i ] [ j ] > vec1 [ i ] [ j + <int> ] ) vec1 [ i - <int> ] [ j ] = vec1 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; else vec1 [ i - <int> ] [ j ] = vec1 [ i - <int> ] [ j ] + vec1 [ i ] [ j + <int> ] ; } } printf ( <str> , vec1 [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2768}
{"input": "int fastInput ( ) { int n = <int> , c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; while ( c >= <char> && c <= <char> ) n = ( n << <int> ) + ( n << <int> ) + c - <char> , c = gc ( ) ; return n ; } int main ( void ) { int i , T , N , min , temp , ans ; T = fastInput ( ) ; for ( i = <int> ; i < T ; i ++ ) { N = fastInput ( ) ; min = fastInput ( ) ; for ( i = <int> ; i < N ; i ++ ) { temp = fastInput ( ) ; if ( temp < min ) min = temp ; } ans = min * ( N - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 2769}
{"input": "int lcm ( int a , int b ) { int i = a ; while ( <int> ) { if ( i % a == <int> && i % b == <int> ) break ; i ++ ; } return i ; } int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int a , b , t , l , g ; int i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { l = lcm ( a , b ) ; } else { l = lcm ( b , a ) ; } g = gcd ( a , b ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 2770}
{"input": "int find ( int [ ] [ <int> ] , int , int , int ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n , ans = <int> , i , j , ar [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } ans = find ( ar , <int> , <int> , n ) ; printf ( <str> , ans ) ; } return <int> ; } int find ( int ar [ ] [ <int> ] , int i , int j , int n ) { int max = <int> ; if ( i != n - <int> ) { int a1 = find ( ar , i + <int> , j , n ) ; int a2 = find ( ar , i + <int> , j + <int> , n ) ; max = a1 > a2 ? a1 : a2 ; return ( max + ar [ i ] [ j ] ) ; } else return ar [ i ] [ j ] ; }", "label": 2, "id": 2771}
{"input": "int main ( void ) { int N , line ; scanf ( <str> , & N ) ; while ( N -- ) { scanf ( <str> , & line ) ; int * * input ; input = ( int * * ) malloc ( line * sizeof ( int * ) ) ; int j , i = <int> ; for ( ; i < line ; i ++ ) { input [ i ] = malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & input [ i ] [ j ] ) ; } int * * output ; output = ( int * * ) malloc ( line * sizeof ( int * ) ) ; for ( i = <int> ; i < line ; i ++ ) { output [ i ] = malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j < line ; j ++ ) output [ i ] [ j ] = <int> ; } for ( j = <int> ; j < line ; j ++ ) output [ line - <int> ] [ j ] = input [ line - <int> ] [ j ] ; for ( i = line - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { int max ; if ( output [ i + <int> ] [ j + <int> ] > output [ i + <int> ] [ j ] ) max = output [ i + <int> ] [ j + <int> ] ; else max = output [ i + <int> ] [ j ] ; output [ i ] [ j ] = max + input [ i ] [ j ] ; } } printf ( <str> , output [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < line ; i ++ ) { free ( input [ i ] ) ; free ( output [ i ] ) ; } free ( input ) ; free ( output ) ; } }", "label": 3, "id": 2772}
{"input": "int GCD ( int x , int y ) { if ( x < y ) { if ( y % x == <int> ) return x ; else return ( GCD ( x , y % x ) ) ; } else { if ( x % y == <int> ) return y ; else return ( GCD ( x % y , y ) ) ; } } int main ( ) { int t , i ; int n1 , n2 , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; gcd = GCD ( n1 , n2 ) ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2773}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long long int l , j , a , b , cnt = <int> ; scanf ( <str> , & a , & b ) ; l = a * b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } printf ( <str> , a , l / a ) ; } return <int> ; }", "label": 0, "id": 2774}
{"input": "int main ( ) { long long int A [ size ] , B [ size ] , i , N , pos , sum ; int T , count ; scanf ( <str> , & T ) ; while ( T -- ) { sum = <int> ; pos = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & A [ i ] ) ; i = <int> ; while ( pos < N ) { if ( A [ i ] > A [ pos ] ) { sum += A [ pos ] ; i = pos ; pos ++ ; } else { sum += A [ i ] ; pos ++ ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 2775}
{"input": "int main ( ) { int t , i ; long long a , b , gcd = <int> , lcm , j , l , s , p ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a >= b ) { l = a ; s = b ; } else { l = b ; s = a ; } for ( j = <int> ; j <= s ; j ++ ) { p = s / j ; if ( l % p == <int> && p * j == s ) { gcd = p ; break ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2776}
{"input": "int main ( ) { long long int T , num , ans , scratch , prev , change ; scanf ( <str> , & T ) ; while ( T -- ) { prev = - <int> ; change = <int> ; scanf ( <str> , & num ) ; ans = num ; while ( num -- ) { scanf ( <str> , & scratch ) ; if ( scratch < prev && change ) { change = <int> ; ans ++ ; } else { change ++ ; } prev = scratch ; } if ( change ) ans ++ ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 2777}
{"input": "int main ( void ) { int i , k , j , n , ln , row [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & ln ) ; for ( i = <int> ; i < ln ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & row [ i ] [ j ] ) ; } } for ( i = ln - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( row [ i ] [ j ] >= row [ i ] [ j + <int> ] ) row [ i - <int> ] [ j ] = row [ i - <int> ] [ j ] + row [ i ] [ j ] ; else row [ i - <int> ] [ j ] = row [ i - <int> ] [ j ] + row [ i ] [ j + <int> ] ; } } printf ( <str> , row [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2778}
{"input": "int main ( ) { int t , i , j , x , n , num [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { num [ i ] [ j ] += ( num [ i + <int> ] [ j ] > num [ i + <int> ] [ j + <int> ] ? num [ i + <int> ] [ j ] : num [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , num [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2779}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , c = <int> , i ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; long int m = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( m > a [ i ] ) { m = a [ i ] ; } } printf ( <str> , m * ( n - <int> ) ) ; } }", "label": 0, "id": 2780}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) { return b ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int i , t ; for ( i = <int> ; i < t ; i ++ ) { int m , n ; scanf ( <str> , & m , & n ) ; int p = gcd ( m , n ) ; int lcm = ( m * n ) / p ; printf ( <str> , p ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 2781}
{"input": "int main ( ) { int t , a , n , x , i ; freopen ( <str> , <str> , stdin ) ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> , x = <int> ; i <= n ; ++ i ) { scanf ( <str> , & a ) ; if ( a < x ) x = a ; } printf ( <str> , ( long long ) x * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 2782}
{"input": "int s1 = <int> , s2 = <int> , sum = <int> , ele [ <int> ] [ <int> ] ; int maxfunc ( int row , int col , int l ) { if ( row < l ) { return ele [ row ] [ col ] + max ( maxfunc ( row + <int> , col , l ) , maxfunc ( row + <int> , col + <int> , l ) ) ; } else return <int> ; } int main ( ) { int n , l , i , j , k , ans [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & ele [ j ] [ k ] ) ; } } ans [ i ] = maxfunc ( <int> , <int> , l ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , ans [ i ] ) ; } }", "label": 2, "id": 2783}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int n , i , m , j ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; while ( i < n ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } i ++ ; } i = <int> ; m = arr [ <int> ] [ <int> ] ; while ( i < n ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { arr [ i ] [ j ] += arr [ i - <int> ] [ <int> ] ; } else if ( j != i ) { arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } else { arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } if ( arr [ i ] [ j ] > m ) { m = arr [ i ] [ j ] ; } } i ++ ; } printf ( <str> , m ) ; } return <int> ; }", "label": 1, "id": 2784}
{"input": "int main ( ) { long int * * a , max ; unsigned long int t , size , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & size ) ; a = ( long int * * ) calloc ( size , sizeof ( long int * ) ) ; for ( i = <int> ; i < size ; i ++ ) a [ i ] = ( long int * ) calloc ( size , sizeof ( long int ) ) ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < size ; i ++ ) a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ? a [ i - <int> ] [ j - <int> ] : a [ i - <int> ] [ j ] ; } } max = a [ size - <int> ] [ <int> ] ; for ( j = <int> ; j < size ; j ++ ) { if ( a [ size - <int> ] [ j ] > max ) max = a [ size - <int> ] [ j ] ; } printf ( <str> , max ) ; for ( i = <int> ; i < size ; i ++ ) free ( a [ i ] ) ; free ( a ) ; } return <int> ; }", "label": 0, "id": 2785}
{"input": "int main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int i ; long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , arr + i ) ; long int count [ n ] ; i = <int> ; count [ <int> ] = <int> ; while ( i != n ) { if ( arr [ i ] >= arr [ i - <int> ] ) count [ i ] = count [ i - <int> ] + <int> ; else count [ i ] = <int> ; i ++ ; } long ans = <int> ; for ( i = <int> ; i < n ; i ++ ) { ans += count [ i ] ; } printf ( <str> , ans ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 2786}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 0, "id": 2787}
{"input": "int main ( ) { int t , n , a [ <int> ] , i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; c = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) c ++ ; if ( ( i != j ) && ( a [ i ] == a [ j ] ) ) c -- ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 2788}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int a , b ; for ( int i = <int> ; i < t ; i ++ ) { for ( int i = <int> ; i < <int> ; i ++ ) { scanf ( <str> , & a , & b ) ; } } gcd ( a , b ) ; lcm ( a , b ) ; return <int> ; } int gcd ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; }", "label": 1, "id": 2789}
{"input": "int a [ <int> ] [ <int> ] , m [ <int> ] [ <int> ] , n ; int main ( ) { int t , i , j , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { m [ i ] [ j ] = - <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = mem ( <int> , <int> ) ; printf ( <str> , sum ) ; } return <int> ; } mem ( int i , int j ) { int c , d ; if ( i == n - <int> ) return a [ i ] [ j ] ; if ( m [ i ] [ j ] != - <int> ) return m [ i ] [ j ] ; else { c = mem ( i + <int> , j ) ; d = mem ( i + <int> , j + <int> ) ; if ( c > d ) m [ i ] [ j ] = c + a [ i ] [ j ] ; else m [ i ] [ j ] = d + a [ i ] [ j ] ; } return m [ i ] [ j ] ; }", "label": 0, "id": 2790}
{"input": "int main ( void ) { int i , j , n , size , max , b , c ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & size ) ; int a [ size ] [ size ] ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < size ; i ++ ) { for ( j = i + <int> ; j < size ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < size ; i ++ ) a [ i ] [ <int> ] = a [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { b = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; c = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; a [ i ] [ j ] = b > c ? b : c ; } } max = a [ size - <int> ] [ <int> ] ; for ( j = <int> ; j < size ; j ++ ) { if ( a [ size - <int> ] [ j ] > max ) max = a [ size - <int> ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2791}
{"input": "int main ( ) { int no , num , i , j , sum = <int> , num1 , a [ <int> ] [ <int> ] ; scanf ( <str> , & no ) ; while ( no -- ) { scanf ( <str> , & num ) ; for ( i = <int> ; i <= num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = num ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2792}
{"input": "int input ( ) { char a = <int> ; int c = <int> ; a = getchar ( ) ; while ( a < <int> ) { a = getchar ( ) ; } while ( a >= <int> ) { c = ( c << <int> ) + ( c << <int> ) + ( a - <char> ) ; a = getchar ( ) ; } return c ; } ; int main ( ) { int a [ <int> ] [ <int> ] , c [ <int> ] [ <int> ] ; int n = <int> , t = <int> , max = <int> , i = <int> , j = <int> ; t = input ( ) ; while ( t -- ) { n = input ( ) ; a [ <int> ] [ <int> ] = input ( ) ; c [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = c [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = input ( ) ; if ( j == <int> ) c [ i ] [ j ] = c [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) c [ i ] [ j ] = c [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) { c [ i ] [ j ] = c [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { c [ i ] [ j ] = c [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } } if ( c [ i ] [ j ] > max ) max = c [ i ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2793}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , t , i , j , start = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> ) ; } for ( i = <int> ; i <= <int> ; i ++ ) { for ( j = start ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] < a [ i + <int> ] [ j + <int> ] ) { a [ <int> ] [ <int> ] += a [ i + <int> ] [ j + <int> ] ; start = j + <int> ; break ; } else { a [ <int> ] [ <int> ] += a [ i + <int> ] [ j ] ; start = j ; break ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 2794}
{"input": "int main ( ) { int a , b , c , l , s , r ; scanf ( <str> , & a ) ; for ( int i = <int> ; i <= a ; i ++ ) { scanf ( <str> , & b , & c ) ; if ( b > c ) { l = b ; s = c ; } else { l = c ; s = b ; } while ( l != <int> ) { r = l % s ; s = l ; l = r ; } printf ( <str> , s , ( b * c ) / s ) ; printf ( <str> ) ; } }", "label": 1, "id": 2795}
{"input": "int main ( ) { int i , j , c = <int> , n , d , T , check , flag ; scanf ( <str> , & T ) ; while ( T -- ) { d = <int> , flag = <int> ; ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } check = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] == check ) continue ; else { flag = <int> ; break ; } } if ( flag == <int> ) { for ( j = <int> ; j < n ; j ++ ) { for ( i = j ; i < n - <int> ; i ++ ) { if ( arr [ i + <int> ] >= arr [ i ] ) c += <int> ; else break ; } d += ( c * ( c + <int> ) ) / <int> ; c = <int> ; j = i ; } printf ( <str> , n + d ) ; } else printf ( <str> , n ) ; } return <int> ; }", "label": 0, "id": 2796}
{"input": "int main ( ) { int t , a , b , max , min , temp , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; max = a > b ? a : b ; min = a < b ? a : b ; while ( min != <int> ) { temp = min ; min = max % min ; max = temp ; } gcd = max ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 2797}
{"input": "int s [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int i , j ; if ( x == <int> ) return s [ <int> ] [ <int> ] ; else { for ( i = x - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { s [ i ] [ j ] += max ( s [ i + <int> ] [ j ] , s [ i + <int> ] [ j + <int> ] ) ; } } } return s [ <int> ] [ <int> ] ; } int main ( ) { int tc , row , i , j ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & s [ i ] [ j ] ) ; } } printf ( <str> , solve ( row ) ) ; } return <int> ; }", "label": 0, "id": 2798}
{"input": "int main ( ) { long long int t , n , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; long long int a [ n ] , b [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; b [ <int> ] = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j - <int> ] <= a [ j ] ) b [ j ] = b [ j - <int> ] + <int> ; else b [ j ] = b [ j - <int> ] + <int> ; } printf ( <str> , b [ n - <int> ] ) ; } return <int> ; }", "label": 1, "id": 2799}
{"input": "long int gcd ( long int , long int ) ; int main ( void ) { int t ; long int a , b , g , temp , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } long int gcd ( long int a , long int b ) { long int min = a , max = b , temp ; while ( <int> ) { temp = min ; min = max % min ; max = temp ; if ( min == <int> ) return max ; } }", "label": 0, "id": 2800}
{"input": "int main ( ) { int t , i , j , k , n , l , sum , sum1 , sum2 , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } sum = arr [ <int> ] [ <int> ] ; if ( n > <int> ) { l = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { j = l ; sum1 = <int> ; sum2 = <int> ; for ( k = i + <int> ; k < n ; k ++ ) { sum1 = sum1 + arr [ k ] [ j ] ; sum2 = sum2 + arr [ k ] [ j + <int> ] ; } if ( sum1 > sum2 ) { sum = sum + arr [ i + <int> ] [ j ] ; l = j ; } else { sum = sum + arr [ i + <int> ] [ j + <int> ] ; l = j + <int> ; } } } printf ( <str> , sum ) ; t = t - <int> ; } return ( <int> ) ; }", "label": 3, "id": 2801}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 2802}
{"input": "int a [ <int> ] [ <int> ] ; int sum ( int a [ <int> ] [ <int> ] , int n , int i , int j ) { int x , y ; if ( ( i + <int> ) == n ) return a [ i ] [ j ] ; else { x = a [ i ] [ j ] + sum ( a , n , i + <int> , j ) ; y = a [ i ] [ j ] + sum ( a , n , i + <int> , j + <int> ) ; } return ( x > y ? x : y ) ; } void main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , sum ( a , n , <int> , <int> ) ) ; } }", "label": 2, "id": 2803}
{"input": "int max ( int a , int b ) { return ( ( a >= b ) ? a : b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; int i = <int> ; for ( i = <int> ; i < t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; int j , k ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] + max ( a [ j + <int> ] [ k ] , a [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2804}
{"input": "int small ( int * , int ) ; int main ( void ) { int t , arr [ <int> ] , i , n , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } r = small ( arr , n ) ; if ( r == <int> ) printf ( <str> , n - <int> ) ; else for ( i = <int> ; i < n - <int> ; i ++ ) { r *= r ; } printf ( <str> , r ) ; } return <int> ; } int small ( int * arr , int n ) { int s , i ; s = * ( arr ) ; for ( i = <int> ; i < n ; i ++ ) { if ( * ( arr + i ) < s ) s = * ( arr + i ) ; } return s ; }", "label": 1, "id": 2805}
{"input": "int main ( ) { long long int a , b , i , t , n , j , e ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( b < a ) { t = b ; b = a ; a = t ; } for ( j = <int> ; j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { e = j ; } } printf ( <str> , e , a * b / e ) ; } }", "label": 2, "id": 2806}
{"input": "int find_max ( int * * input , int size ) { int i , j , k ; int * output [ size ] ; for ( i = <int> ; i < size ; i ++ ) { output [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> ) output [ i ] [ j ] = input [ i ] [ j ] ; else { if ( j == <int> ) output [ i ] [ j ] = output [ i - <int> ] [ j ] + input [ i ] [ j ] ; else if ( i == j ) output [ i ] [ j ] = output [ i - <int> ] [ j - <int> ] + input [ i ] [ j ] ; else { if ( output [ i - <int> ] [ j - <int> ] > output [ i - <int> ] [ j ] ) output [ i ] [ j ] = output [ i - <int> ] [ j - <int> ] + input [ i ] [ j ] ; else output [ i ] [ j ] = output [ i - <int> ] [ j ] + input [ i ] [ j ] ; } } } } int max = output [ size - <int> ] [ <int> ] ; for ( i = <int> ; i < size ; i ++ ) { if ( output [ size - <int> ] [ i ] > max ) max = output [ size - <int> ] [ i ] ; } return max ; } int main ( ) { int n ; scanf ( <str> , & n ) ; int output [ n ] ; int i , j , k , size ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & size ) ; int * input [ size ] ; for ( j = <int> ; j < size ; j ++ ) { input [ j ] = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & input [ j ] [ k ] ) ; } } output [ i ] = find_max ( input , size ) ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , output [ i ] ) ; }", "label": 0, "id": 2807}
{"input": "int main ( ) { int t , n1 , n2 , gcd , lcm , k , l , temp ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n1 , & n2 ) ; k = n1 ; l = n2 ; while ( n1 % n2 != <int> ) { temp = n2 ; n2 = n1 % n2 ; n1 = temp ; } gcd = n2 ; lcm = k * l / gcd ; printf ( <str> , gcd , lcm ) ; gcd = <int> ; lcm = <int> ; } return <int> ; }", "label": 1, "id": 2808}
{"input": "int gcd ( int a , int b ) { int t ; while ( b ) { t = a % b ; a = b ; b = t ; } return a ; } int main ( ) { int t , x , y , hcf ; long long int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) ; lcm /= hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 2809}
{"input": "int main ( ) { int T , i ; long long int x , y ; scanf ( <str> , & T ) ; for ( int j = <int> ; j <= T ; j ++ ) { scanf ( <str> , & x , & y ) ; int max = x > y ? x : y ; int min = x < y ? x : y ; for ( i = min ; i % min != <int> || i % max != <int> ; i ++ ) ; int gcd = min * max / i ; printf ( <str> , gcd , i ) ; } }", "label": 2, "id": 2810}
{"input": "void show ( int a [ ] , int n ) { int i ; for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , a [ i ] ) ; } printf ( <str> ) ; } int main ( ) { int T , N , i , j , s = <int> ; int a [ <int> ] ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < N - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { for ( j = i + <int> ; j < N ; j ++ ) a [ j - <int> ] = a [ j ] ; s = s + a [ i ] ; N -- ; i -- ; } else if ( a [ i ] < a [ i + <int> ] ) { for ( j = i + <int> ; j < N ; j ++ ) a [ j - <int> ] = a [ j ] ; s = s + a [ i ] ; N -- ; i -- ; } else { continue ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 3, "id": 2811}
{"input": "int arr [ <int> ] [ <int> ] ; int main ( ) { int T , i , j ; scanf ( <str> , & T ) ; while ( T -- ) { int n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] += max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2812}
{"input": "int main ( ) { int t ; long int a , min ; long long int n , i ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 2813}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2814}
{"input": "int main ( void ) { long long int t , i , n , a [ <int> ] , j , cnt , min ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> , j = i + <int> ; i < n ; i ++ ) { if ( a [ j ] < a [ i ] && a [ i ] != <int> && a [ j ] != <int> ) { min = a [ j ] ; a [ i ] = <int> ; } else a [ j ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] == <int> ) cnt ++ ; } printf ( <str> , min * cnt ) ; t -- ; } return <int> ; }", "label": 1, "id": 2815}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , r , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 2816}
{"input": "int main ( ) { int t , n , j , i , swap ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , sum = <int> ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) { swap = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = swap ; } } } for ( i = <int> ; i <= ( n - <int> ) ; i ++ ) sum = sum + a [ <int> ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 2817}
{"input": "int main ( ) { int t , q ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int sum = <int> , i = <int> ; while ( i <= n - <int> ) { int c = <int> ; while ( a [ i ] <= a [ i + <int> ] && ( i + <int> < n ) ) { c ++ ; i ++ ; } i ++ ; sum += ( c * ( c + <int> ) / <int> ) ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 2818}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t , i = <int> , n , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < i ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } a [ j ] [ k ] = - <int> ; i ++ ; } k = <int> ; int sum = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( j == <int> ) { sum += a [ j ] [ k ] ; } else { if ( a [ k + <int> ] > a [ k ] ) { sum += a [ j ] [ k + <int> ] ; k ++ ; } else { sum += a [ j ] [ k ] ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 2819}
{"input": "int read_int ( ) { char c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; int ret = <int> ; while ( c >= <char> && c <= <char> ) { ret = <int> * ret + c - <int> ; c = gc ( ) ; } return ret ; } int main ( ) { int test , i , n , j , temp , temp2 , value , max ; test = read_int ( ) ; while ( test -- ) { max = - <int> ; int arr [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { temp = <int> ; temp2 = <int> ; for ( j = <int> ; j <= i ; j ++ ) { value = read_int ( ) ; temp = arr [ j ] ; arr [ j ] = ( ( arr [ j ] > temp2 ) ? arr [ j ] : temp2 ) + value ; temp2 = temp ; if ( i == n && arr [ j ] > max ) { max = arr [ j ] ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 2820}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 2821}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , c ; scanf ( <str> , & a , & b ) ; long long sum = a * b ; if ( a > b ) c = b ; else c = a ; while ( c > <int> ) { if ( a % c == <int> && b % c == <int> ) break ; else c -- ; } sum = sum / c ; printf ( <str> , c , sum ) ; } return <int> ; }", "label": 1, "id": 2822}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , low ; long long int lcm ; long int gc ; scanf ( <str> , & a , & b ) ; low = ( a < b ) ? a : b ; for ( long int gcd = <int> ; gcd < low ; gcd ++ ) { if ( a % gcd == <int> && b % gcd == <int> ) { gc = gcd ; break ; } else { gc = <int> ; } } lcm = a * b / gc ; printf ( <str> , gc , lcm ) ; } return <int> ; }", "label": 2, "id": 2823}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int s = a [ <int> ] , sum = <int> ; for ( int i = <int> ; i < n - <int> ; i ++ ) { if ( s > a [ i + <int> ] ) { s = a [ i + <int> ] ; } } sum = s * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 2824}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int i , n ; scanf ( <str> , & n ) ; long int a [ n ] ; long int mini = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < mini ) { mini = a [ i ] ; } } printf ( <str> , mini * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2825}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int max_arr ( int arr [ ] ) { int i , max ; max = arr [ <int> ] ; for ( i = <int> ; i < <int> ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } return max ; } int main ( ) { int t , n , i , j ; int A [ <int> ] [ <int> ] ; int D [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = - <int> ; i <= <int> ; i ++ ) { for ( j = - <int> ; j <= <int> ; j ++ ) { A [ i ] [ j ] = <int> ; D [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } D [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { D [ i ] [ j ] = A [ i ] [ j ] + max ( D [ i - <int> ] [ j ] , D [ i - <int> ] [ j - <int> ] ) ; } } int ans = max_arr ( D [ n - <int> ] ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 2826}
{"input": "int main ( ) { int t , n , count = <int> , result [ <int> ] = { <int> } , i , j ; long int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( j = <int> ; j <= t ; j ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ j ] [ i ] ) ; } a [ j ] [ i ] = - <int> ; i = <int> ; while ( i < n ) { count = <int> ; while ( ( a [ j ] [ i ] <= a [ j ] [ i + <int> ] ) && ( a [ j ] [ i + <int> ] != - <int> ) ) { i ++ ; count ++ ; } if ( count > <int> ) result [ j ] ++ ; i ++ ; } result [ j ] = result [ j ] + n ; } for ( i = <int> ; i <= t ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; }", "label": 3, "id": 2827}
{"input": "int sort ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } main ( ) { int t , n , i , ans ; scanf ( <str> , & t ) ; while ( t -- ) { ans = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; qsort ( ( void * ) a , n , sizeof ( int ) , sort ) ; for ( i = n - <int> ; i > <int> ; i -- ) { if ( a [ i - <int> ] + <int> == a [ i ] ) ans = a [ i - <int> ] ; } printf ( <str> , ans ) ; } }", "label": 1, "id": 2828}
{"input": "int findmin ( int * A , long int N , int min ) { int i ; min = A [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( min > A [ i ] ) { min = A [ i ] ; } } return min ; } int main ( ) { int T , i , j , k , A [ <int> ] , min ; long int N ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { min = <int> ; scanf ( <str> , & N ) ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & A [ j ] ) ; } k = findmin ( A , N , min ) ; printf ( <str> , ( N - <int> ) * k ) ; } return <int> ; }", "label": 0, "id": 2829}
{"input": "int <unk> ( int a , int b ) { int temp ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( void ) { int a , b ; int n ; int lcm , gcd ; scanf ( <str> , & n ) ; int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd = <unk> ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2830}
{"input": "int input [ <int> ] [ <int> ] ; int memory [ <int> ] [ <int> ] ; int main ( ) { int n , j , i , t , g , m = <int> ; scanf ( <str> , & t ) ; int ans [ t ] ; g = t ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & input [ i ] [ j ] ) ; } for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) memory [ i ] [ j ] = - <int> ; } ans [ m ] = solve ( <int> , <int> , n ) ; m ++ ; t -- ; } m = <int> ; while ( m < g ) { printf ( <str> , ans [ m ] ) ; m ++ ; } return <int> ; } int solve ( int i , int j , int n ) { int t1 , t2 ; if ( i >= n ) return <int> ; if ( memory [ i ] [ j ] != - <int> ) return memory [ i ] [ j ] ; else { t1 = solve ( i + <int> , j , n ) ; t2 = solve ( i + <int> , j + <int> , n ) ; memory [ i ] [ j ] = input [ i ] [ j ] + max ( t1 , t2 ) ; return memory [ i ] [ j ] ; } } int max ( t1 , t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; }", "label": 0, "id": 2831}
{"input": "int memo [ <int> ] [ <int> ] ; int path ( int no [ <int> ] [ <int> ] , int row , int col , int tot ) { if ( memo [ row ] [ col ] != - <int> ) return memo [ row ] [ col ] ; if ( row == tot - <int> ) return no [ row ] [ col ] ; return ( no [ row ] [ col ] + max ( path ( no , row + <int> , col , tot ) , path ( no , row + <int> , col + <int> , tot ) ) ) ; } int main ( ) { int n , i ; memset ( memo , - <int> , sizeof ( memo ) ) ; scanf ( <str> , & n ) ; int ans [ n ] ; int no [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { int k , j , lines ; scanf ( <str> , & lines ) ; if ( lines <= <int> ) break ; for ( k = <int> ; k < lines ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & no [ k ] [ j ] ) ; } } ans [ i ] = path ( no , <int> , <int> , lines ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return <int> ; }", "label": 2, "id": 2832}
{"input": "int main ( ) { int n , i ; long long int a , b , numerator , denominator , gcd , lcm , rem ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else if ( b > a ) { numerator = b ; denominator = a ; } rem = numerator % denominator ; while ( rem != <int> ) { numerator = denominator ; denominator = rem ; rem = numerator % denominator ; } gcd = denominator ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 0, "id": 2833}
{"input": "int input ( ) ; int main ( ) { int i , t , j , k , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { n = input ( ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } inline int input ( ) { int a = <int> ; char c ; c = getchar_unlocked ( ) ; while ( c < <int> ) { c = getchar_unlocked ( ) ; } while ( c >= <int> ) { a = ( a << <int> ) + ( a << <int> ) + ( c - <char> ) ; c = getchar_unlocked ( ) ; } return a ; } ;", "label": 2, "id": 2834}
{"input": "int main ( ) { int a , b , c , d , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; d = a * b ; while ( b != <int> ) { c = a % b ; a = b ; b = c ; } printf ( <str> , a , ( int ) d / a ) ; } return <int> ; }", "label": 1, "id": 2835}
{"input": "int main ( ) { int a , b , c ; printf ( <str> ) ; scanf ( <str> , & a , & b , & c ) ; if ( a > b && a > c ) { printf ( <str> , a ) ; } else { printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 2836}
{"input": "int main ( ) { int a , b , t , x , y , i , temp , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2837}
{"input": "int main ( ) { unsigned int t , n , * a , s , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = ( unsigned int * ) calloc ( n , sizeof ( unsigned int ) ) ; i = <int> ; scanf ( <str> , & a [ i ] ) ; s = a [ i ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( s > a [ i ] ) s = a [ i ] ; } printf ( <str> , s * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2838}
{"input": "int main ( ) { int i , t , a , j , r ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { int s = <int> ; scanf ( <str> , & a ) ; for ( j = <int> ; j <= a ; j ++ ) { for ( r = <int> ; r <= j ; r ++ ) { int u [ i ] ; scanf ( <str> , & u [ r ] ) ; s = s + u [ r ] ; } } printf ( <str> , s / <int> ) ; } }", "label": 1, "id": 2839}
{"input": "int lines = <int> ; int getMaxSum ( int b [ lines ] [ lines ] , int c [ lines ] [ lines ] , int i , int j ) { int t1 , t2 , t ; if ( i >= lines ) { i = <int> ; j = <int> ; return <int> ; } if ( b [ i ] [ j ] == - <int> ) { return c [ i ] [ j ] ; } t1 = getMaxSum ( b , c , i + <int> , j ) ; t2 = getMaxSum ( b , c , i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + b [ i ] [ j ] ; b [ i ] [ j ] = - <int> ; c [ i ] [ j ] = t ; return t ; } int main ( ) { int len , i , ch , x , l , item , count = <int> ; scanf ( <str> , & count ) ; while ( count > <int> ) { i = <int> ; l = <int> ; item = <int> ; scanf ( <str> , & lines ) ; len = ( ( ( lines ) * ( lines + <int> ) ) / <int> ) ; int b [ lines ] [ lines ] ; int c [ lines ] [ lines ] ; while ( len > <int> ) { while ( ( ( ch = getc ( stdin ) ) != EOF ) && ( ch == <char> ) ) ; if ( ch == EOF ) break ; ungetc ( ch , stdin ) ; if ( scanf ( <str> , & x ) != <int> ) break ; if ( item == ( ( l + <int> ) * ( l + <int> ) ) / <int> ) { l ++ ; i = <int> ; } b [ l ] [ i ++ ] = x ; item ++ ; len -- ; } printf ( <str> , getMaxSum ( b , c , <int> , <int> ) ) ; count -- ; } return <int> ; }", "label": 0, "id": 2840}
{"input": "main ( ) { int k , j , i ; int nt , nl ; int a [ <int> ] [ <int> ] ; int p = <int> ; scanf ( <str> , & nt ) ; int op [ nt ] ; for ( k = <int> ; k < nt ; k ++ ) { scanf ( <str> , & nl ) ; for ( i = <int> ; i < nl ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = nl - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) > ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } printf ( <str> ) ; op [ k ] = a [ <int> ] [ <int> ] ; } } for ( k = <int> ; k < nt ; k ++ ) printf ( <str> , op [ k ] ) ; return <int> ; }", "label": 0, "id": 2841}
{"input": "int main ( ) { long int t , n , i ; scanf ( <str> , & t ) ; if ( t <= <int> ) { for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; printf ( <str> , calc ( n ) ) ; } } return <int> ; } int calc ( long int n ) { long int a [ n ] , i , c = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) c ++ ; } return c ; }", "label": 3, "id": 2842}
{"input": "int gcd ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; int p = <int> , c [ t ] , d [ t ] ; for ( int i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; c [ p ] = gcd ( a , b ) ; d [ p ] = ( a * b ) / gcd ( a , b ) ; p ++ ; } for ( int i = <int> ; i < p ; i ++ ) { printf ( <str> , c [ i ] , d [ i ] ) ; printf ( <str> ) ; } } int gcd ( int a , int b ) { if ( b == <int> ) return a ; else if ( a == <int> ) { return b ; } else return gcd ( b , a % b ) ; }", "label": 1, "id": 2843}
{"input": "int main ( void ) { int t ; long long n , i , j , sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; long long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) sum = sum + a [ i ] ; else sum = sum + a [ i + <int> ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2844}
{"input": "struct node { int triangle [ <int> ] [ <int> ] ; int max ; struct node * next ; } ; typedef struct node * NODE ; NODE getnode ( void ) { return ( malloc ( sizeof ( struct node ) ) ) ; } int next ( int mask [ ] , int n ) { int i ; for ( i = <int> ; ( i < n ) && mask [ i ] ; ++ i ) mask [ i ] = <int> ; if ( i < n ) { mask [ i ] = <int> ; return <int> ; } return <int> ; } int main ( void ) { int rows ; int i , j , k , count ; int r , c ; int bin [ <int> ] ; int sum = <int> ; int testcases ; NODE temp , head , cur ; scanf ( <str> , & testcases ) ; for ( count = <int> ; count < testcases ; count ++ ) { temp = getnode ( ) ; scanf ( <str> , & rows ) ; if ( rows <= <int> || rows > <int> ) exit ( <int> ) ; for ( i = <int> ; i <= rows ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & temp -> triangle [ i - <int> ] [ j ] ) ; if ( temp -> triangle [ i - <int> ] [ j ] <= <int> || temp -> triangle [ i - <int> ] [ j ] > <int> ) exit ( <int> ) ; } if ( count == <int> ) { head = temp ; cur = head ; } else { cur -> next = temp ; cur = cur -> next ; } } cur = head ; for ( count = <int> ; count < testcases ; count ++ ) { cur -> max = <int> ; for ( j = <int> ; j < rows ; j ++ ) { bin [ j ] = <int> ; cur -> max += cur -> triangle [ j ] [ <int> ] ; } while ( next ( bin , rows - <int> ) ) { k = <int> ; r = <int> ; c = <int> ; sum = <int> ; for ( j = <int> ; j < rows ; j ++ ) { sum += cur -> triangle [ r ++ ] [ c ] ; c = c + bin [ k ++ ] ; } if ( sum > cur -> max ) cur -> max = sum ; } cur = cur -> next ; } cur = head ; while ( cur != NULL ) { printf ( <str> , cur -> max ) ; cur = cur -> next ; } }", "label": 3, "id": 2845}
{"input": "int main ( ) { int t , a , b , lcm , rem ; lcm = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm = a * b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } while ( b != <int> ) { rem = a % b ; a = b ; b = rem ; } printf ( <str> , a , ( lcm / a ) ) ; } return <int> ; }", "label": 1, "id": 2846}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int i , j , t , a [ <int> ] [ <int> ] , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = ( n - <int> ) ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2847}
{"input": "main ( ) { int T , i , a , b , d ; int z ; scanf ( <str> , & T ) ; for ( d = <int> ; d < T ; d ++ ) { scanf ( <str> , & a , & b ) ; z = a > b ? b : a ; for ( i = z ; i > <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) break ; printf ( <str> , i , ( a * b ) / i ) ; } }", "label": 1, "id": 2848}
{"input": "int main ( ) { int test ; long int n , i , a ; long int min ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 2849}
{"input": "int num_collec [ <int> ] [ <int> ] ; int memo [ <int> ] [ <int> ] ; int height ; int main ( ) { int row , i , j = <int> , val , sum , temp = <int> ; int num_tri ; scanf ( <str> , & num_tri ) ; while ( num_tri != <int> ) { scanf ( <str> , & height ) ; for ( i = <int> ; i < height ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num_collec [ i ] [ j ] ) ; memo [ i ] [ j ] = - <int> ; } } printf ( <str> , solve ( <int> , <int> ) ) ; num_tri -- ; } return <int> ; } int solve ( int p , int q ) { int sum1 = num_collec [ p ] [ q ] , sum2 = num_collec [ p ] [ q ] ; if ( memo [ p ] [ q ] != - <int> ) { return memo [ p ] [ q ] ; } if ( p == height ) { return <int> ; } else { sum1 = sum1 + solve ( p + <int> , q ) ; sum2 = sum2 + solve ( p + <int> , q + <int> ) ; } if ( sum1 > sum2 ) { memo [ p ] [ q ] = sum1 ; return sum1 ; } else { memo [ p ] [ q ] = sum2 ; return sum2 ; } }", "label": 1, "id": 2850}
{"input": "int main ( ) { int tc , T ; scanf ( <str> , & T ) ; for ( tc = <int> ; tc < T ; tc ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 1, "id": 2851}
{"input": "int main ( ) { long long int t , i , n , l , j , min , ans , ar [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( l = <int> ; l < n ; l ++ ) scanf ( <str> , & ar [ l ] ) ; min = ar [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( min > ar [ j ] ) { min = ar [ j ] ; } } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 2852}
{"input": "int main ( ) { long int t , a , i , j , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; long int ar [ a ] ; for ( i = <int> ; i < a ; i ++ ) scanf ( <str> , & ar [ i ] ) ; for ( i = <int> ; i < a - <int> ; i ++ ) { for ( j = i + <int> ; j < a ; j ++ ) { if ( ar [ i ] > ar [ j ] ) { temp = ar [ i ] ; ar [ i ] = ar [ j ] ; ar [ j ] = temp ; } } } printf ( <str> , ar [ <int> ] * ( a - <int> ) ) ; } }", "label": 2, "id": 2853}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , min , i , n ; scanf ( <str> , & n ) ; int ara [ n + <int> ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ara [ i ] ) ; min = ara [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( ara [ i ] < min ) min = ara [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 2854}
{"input": "int main ( ) { unsigned int T , j , c ; T = j = c = <int> ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { long int N , i ; long long int A , B , op , c ; N = A = B = op = c = i = <int> ; scanf ( <str> , & N ) ; scanf ( <str> , & A , & B ) ; if ( A >= B ) { c = B ; } else { c = A ; } for ( i = <int> ; i < N ; i ++ ) { A = <int> ; scanf ( <str> , & A ) ; if ( c > A ) { c = A ; } } printf ( <str> , c * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2855}
{"input": "int main ( ) { int n , num , mat [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; } for ( i = num - <int> ; i >= <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( mat [ i + <int> ] [ j ] > mat [ i + <int> ] [ j + <int> ] ) mat [ i ] [ j ] = mat [ i ] [ j ] + mat [ i + <int> ] [ j ] ; else mat [ i ] [ j ] = mat [ i ] [ j ] + mat [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , mat [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 2856}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int i , n , s = <int> , c = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < s ) { s = a [ i ] ; } } c = ( n - <int> ) * s ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 2857}
{"input": "long int findgcd ( long int a , long int b ) { if ( a % b == <int> ) return b ; else return findgcd ( b , a % b ) ; } int main ( ) { long int t , a , b ; long int gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = findgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 2858}
{"input": "int main ( void ) { long t = <int> , n = <int> , a [ MAX ] , i = <int> ; long long min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; if ( n <= <int> ) { break ; } else { for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } } min *= ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 2859}
{"input": "int main ( ) { int t , n , i , a [ <int> ] , m , j , b [ <int> ] ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } m = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < m ) m = a [ i ] ; } b [ j ] = m * ( n - <int> ) ; } for ( j = <int> ; j < t ; j ++ ) printf ( <str> , b [ j ] ) ; return <int> ; }", "label": 0, "id": 2860}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; int a , b , min , max , hcf , lcm ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } hcf = gcd ( max , min ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 2861}
{"input": "int main ( void ) { int t , n , a [ <int> ] , i , ctr ; scanf ( <str> , & t ) ; while ( t -- ) { ctr = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i != <int> ) { if ( a [ i ] > a [ i - <int> ] ) ctr = ctr + <int> ; } } ctr = ctr + n ; printf ( <str> , ctr ) ; } return <int> ; }", "label": 1, "id": 2862}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long N , num , min , ans , i ; scanf ( <str> , & N ) ; scanf ( <str> , & min ) ; for ( i = <int> ; i < N - <int> ; i ++ ) { scanf ( <str> , & num ) ; if ( num < min ) min = num ; } ans = ( N - <int> ) * min ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 2863}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , b ; int terms ; scanf ( <str> , & b ) ; while ( b -- ) { scanf ( <str> , & terms ) ; for ( i = <int> ; i < terms ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < terms ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { printf ( <str> , a [ i ] [ j ] ) ; } printf ( <str> ) ; } for ( i = terms - <int> ; i > <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j - <int> ] ) { a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j - <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 2864}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , dp [ n ] ; int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; dp [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i - <int> ] ) dp [ i ] = dp [ i - <int> ] + <int> ; } int sum = <int> ; for ( i = <int> ; i < n ; i ++ ) sum = sum + dp [ i ] ; printf ( <str> , sum ) ; } }", "label": 0, "id": 2865}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , N , T , max ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i == <int> && j == <int> ) continue ; if ( j == <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else if ( i == j ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ; } } max = a [ N - <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) if ( a [ N - <int> ] [ i ] > max ) max = a [ N - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2866}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t ; long long int a , b , min = <int> , max = <int> , hcf = <int> , lcm = <int> ; scanf ( <str> , & t ) ; while ( t -- != <int> ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } hcf = gcd ( min , max ) ; lcm = ( a * b / hcf ) ; printf ( <str> , hcf , lcm ) ; } return <int> ; } long int gcd ( long int a , long int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 2867}
{"input": "int main ( ) { int t , n , a , z [ <int> ] , s [ <int> ] , i = <int> , c = <int> , p , b ; scanf ( <str> , & t ) ; for ( b = <int> ; b <= t ; b ++ ) { scanf ( <str> , & n ) ; i = <int> ; c = <int> ; for ( a = <int> ; a < n ; a ++ ) { scanf ( <str> , & z [ a ] ) ; s [ a ] = z [ a ] ; } for ( p = <int> ; p < n - i ; p ++ ) { if ( z [ p ] > z [ p + <int> ] ) { c = z [ p + <int> ] + c ; i = i + <int> ; for ( a = <int> ; a < p ; a ++ ) { s [ a ] = z [ a ] ; } for ( a = p + <int> ; a < n - i ; a ++ ) { s [ a ] = z [ a ] ; } } else { c = z [ p ] + c ; i = i + <int> ; for ( a = <int> ; a < p + <int> ; a ++ ) { s [ a ] = z [ a ] ; } for ( a = p + <int> ; a < n - i ; a ++ ) { s [ a ] = z [ a ] ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 2868}
{"input": "int main ( ) { int t ; int r ; int a [ <int> ] [ <int> ] ; int b [ <int> ] [ <int> ] ; int i , j ; int k ; int p ; int max ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = <int> ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { p = <int> ; for ( j = <int> ; j < i ; j ++ ) { for ( k = <int> ; k < <int> ; k ++ ) { p = b [ i - <int> ] [ j ] + a [ i ] [ j + k ] ; if ( p > b [ i ] [ j + k ] ) { b [ i ] [ j + k ] = p ; } } } } max = <int> ; for ( i = <int> ; i < r ; i ++ ) { if ( b [ r - <int> ] [ i ] > max ) { max = b [ r - <int> ] [ i ] ; } } printf ( <str> , max ) ; t -- ; } return <int> ; }", "label": 0, "id": 2869}
{"input": "int cache [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int l ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int solve ( int i , int j ) { int t1 , t2 , t ; if ( i > l - <int> ) return <int> ; if ( cache [ i ] [ j ] != - <int> ) return cache [ i ] [ j ] ; t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int t , i , j , ans ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & l ) ; for ( i = <int> ; i <= l - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = <int> ; cache [ i ] [ j ] = - <int> ; scanf ( <str> , & a [ i ] [ j ] ) ; } } ans = solve ( <int> , <int> ) ; printf ( <str> , ans ) ; t = t - <int> ; } return <int> ; }", "label": 0, "id": 2870}
{"input": "int main ( ) { int t , n , i , j , k , temp ; scanf ( <str> , & t ) ; int cost [ t ] ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } cost [ k ] = a [ <int> ] * ( n - <int> ) ; } for ( k = <int> ; k < t ; k ++ ) printf ( <str> , cost [ k ] ) ; return <int> ; }", "label": 2, "id": 2871}
{"input": "int arr [ <int> ] [ <int> ] ; int main ( ) { int j , i , lines , cases , maxv , mt , mr ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; mt = ( lines - <int> ) / <int> ; mr = ( lines - <int> ) % <int> ; for ( i = <int> ; i <= lines ; i += <int> ) { if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; } for ( ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; } return <int> ; }", "label": 0, "id": 2872}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int answer = a [ <int> ] [ <int> ] ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 2873}
{"input": "int main ( ) { int t , r , tr [ <int> ] [ <int> ] ; int i , j , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tr [ i ] [ j ] ) ; for ( i = ( r - <int> ) ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) tr [ i - <int> ] [ j ] += ( tr [ i ] [ j ] > tr [ i ] [ j + <int> ] ) ? tr [ i ] [ j ] : tr [ i ] [ j + <int> ] ; printf ( <str> , tr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2874}
{"input": "int main ( void ) { int t , a , b , x , y , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { temp = y ; y = x % y ; x = temp ; } printf ( <str> , x ) ; printf ( <str> , ( a * b ) / x ) ; } return <int> ; }", "label": 1, "id": 2875}
{"input": "int total = <int> , chk = <int> ; int tri ( int a [ ] , int index , int row , int lastrow , int sum ) { if ( sum > total ) { total = sum ; } if ( row > lastrow ) { return <int> ; } tri ( a , index + row , row + <int> , lastrow , sum + a [ index ] ) ; if ( ( row * ( row + <int> ) ) / <int> >= index ) { tri ( a , index + row + <int> , row + <int> , lastrow , sum + a [ index ] ) ; } if ( sum >= total ) { total = sum ; } } int main ( ) { int cases , lines , i , j , nos ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { scanf ( <str> , & lines ) ; nos = ( lines * ( lines + <int> ) ) / <int> ; int a [ nos + <int> ] ; for ( j = <int> ; j <= nos ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } tri ( a , <int> , <int> , lines , <int> ) ; printf ( <str> , total ) ; total = <int> ; } return <int> ; }", "label": 2, "id": 2876}
{"input": "int main ( ) { int t , i , a [ <int> ] ; long long int n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min >= a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2877}
{"input": "long long int gcd1 ( long long int k , long long int l ) { long long int a , b ; if ( k > l ) { a = k ; b = l ; } else { a = l ; b = k ; } long long int c , r ; if ( ( a / b ) == <int> ) { c = a % b ; } else { c = a / b ; } r = a - ( c * b ) ; if ( r == <int> ) return b ; else gcd1 ( b , r ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , c , d ; scanf ( <str> , & a , & b ) ; c = gcd1 ( a , b ) ; d = ( a * b ) / c ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 0, "id": 2878}
{"input": "int compare ( int v1 , int v2 ) ; void main ( ) { int test = <int> , arr [ <int> ] , i , j , k , r , n , y , r1 ; scanf ( <str> , & test ) ; scanf ( <str> , & n ) ; int * p ; while ( test != <int> ) { r1 = n ; p = ( int * ) malloc ( sizeof ( int ) * n * ( n + <int> ) / <int> ) ; while ( r1 - <int> > <int> ) { for ( i = <int> ; i < n * ( n + <int> ) / <int> ; i ++ ) { scanf ( <str> , p + i ) ; } j = n * ( n + <int> ) / <int> ; for ( i = j - <int> , k = <int> ; k < n - <int> ; i -- , k ++ ) { printf ( <str> , p [ i ] ) ; printf ( <str> , p [ i ] ) ; arr [ k ] = compare ( p [ i ] , p [ i - <int> ] ) ; } n -- ; r = k ; for ( i = ( n ) * ( n + <int> ) / <int> , k = <int> ; k < r ; i ++ , k ++ ) { p [ i ] = p [ i ] + arr [ k ] ; } r1 -- ; } p [ <int> ] = p [ <int> ] + p [ <int> ] ; printf ( <str> , * p ) ; test -- ; free ( p ) ; } } int compare ( int v1 , int v2 ) { if ( v1 >= v2 ) return ( v1 ) ; else return ( v2 ) ; }", "label": 1, "id": 2879}
{"input": "int gcd ( int a , int b ) { int x , y ; if ( a > b ) { x = a ; y = b ; } else { x = b ; y = a ; } if ( y == <int> ) { return x ; } else { gcd ( y , x % y ) ; } } int main ( ) { int i , k , a , b , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; printf ( <str> , k , ( a * b ) / k ) ; } return <int> ; }", "label": 1, "id": 2880}
{"input": "int main ( ) { int t , i , j , a , b , gcd , lcm , c , d ; scanf ( <str> , & t ) ; i = <int> ; while ( i < t ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { j = b ; b = a ; a = j ; } if ( a % b == <int> ) lcm = a ; else lcm = a * b ; c = a % b ; while ( c != <int> ) { d = c ; c = b % c ; b = d ; } gcd = b ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 2881}
{"input": "void main ( ) { long int a , b , c , d , t , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a && j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { c = j ; } } d = a * b / c ; printf ( <str> , c , d ) ; } }", "label": 2, "id": 2882}
{"input": "int main ( ) { int i , n , a , b , lcm , gcd ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; { for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2883}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , n1 , n2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; printf ( <str> , lcm ( n1 , n2 ) , gcd ( n1 , n2 ) ) ; } return <int> ; }", "label": 1, "id": 2884}
{"input": "int main ( ) { int T , i , a , b , temp , j ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; temp = a * b ; for ( i = <int> ; ; i ++ ) { if ( a % i == <int> && b % i == <int> ) j = i ; break ; } printf ( <str> , j , temp / j ) ; } return <int> ; }", "label": 2, "id": 2885}
{"input": "long long int gcd ( long long int a , long long int b ) { long long int x ; if ( a >= b ) { while ( a % b != <int> ) { x = a ; a = b ; b = x % a ; } return b ; } else return gcd ( b , a ) ; } long long int lcm ( long long int a , long long int b ) { long long int x , y ; x = gcd ( a , b ) ; y = ( a / x ) * ( b / x ) * x ; return y ; } long long int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , x , y ; scanf ( <str> , & a , & b ) ; x = gcd ( a , b ) ; y = lcm ( a , b ) ; printf ( <str> , x , y ) ; } return <int> ; }", "label": 0, "id": 2886}
{"input": "void main ( ) { int i , j , tc , a , b , l , h ; scanf ( <str> , & tc ) ; for ( j = <int> ; j < tc ; j ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { l = a ; h = b ; } else { l = b ; h = a ; } for ( i = l ; i >= <int> ; i -- ) { if ( l % i == <int> && h % i == <int> ) break ; } printf ( <str> , i ) ; for ( i = h ; i <= l * h ; i ++ ) { if ( i % l == <int> && i % h == <int> ) break ; } printf ( <str> , i ) ; printf ( <str> ) ; } }", "label": 2, "id": 2887}
{"input": "int main ( ) { int t ; long long int n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; long long int min ; scanf ( <str> , & min ) ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 2888}
{"input": "int largest = <int> ; void largest_sum ( int * , int , int , int , int ) ; int main ( ) { int t , n , * m , s ; int i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; s = ( n * ( n + <int> ) ) / <int> ; m = ( int * ) malloc ( sizeof ( int ) * s + <int> ) ; for ( i = <int> ; i < m ; i ++ ) scanf ( <str> , m + i ) ; largest_sum ( m , <int> , <int> , <int> , n ) ; printf ( <str> , largest ) ; free ( m ) ; } return <int> ; } void largest_sum ( int * m , int sum , int l , int c , int n ) { int cstart = ( l * ( l + <int> ) ) / <int> ; if ( l < n ) { largest_sum ( m + l + <int> , sum + m [ c ] , l + <int> , c , n ) ; if ( l != <int> ) largest_sum ( m + l + <int> , sum + m [ c + <int> ] , l + <int> , c + <int> , n ) ; } if ( l == n ) if ( largest < sum ) largest = sum ; }", "label": 3, "id": 2889}
{"input": "int sum ( int , int ) ; int main ( ) { int T , D , N , i , j , count , A [ size ] ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; count = <int> ; if ( N == <int> ) { printf ( <str> , <int> ) ; continue ; } for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & A [ i ] ) ; for ( i = <int> ; i < N - <int> ; i ++ ) { for ( j = i + <int> ; j < N ; j ++ ) { if ( A [ j ] > A [ i ] ) { count ++ ; break ; } else break ; } } printf ( <str> , N + count ) ; } return <int> ; }", "label": 1, "id": 2890}
{"input": "int gcd ( int m , int n ) ; int fastInput ( ) { long int val = <int> ; char c = getchar_unlocked ( ) ; while ( c < <char> || c > <char> ) c = getchar_unlocked ( ) ; while ( c >= <char> && c <= <char> ) { val = ( val << <int> ) + ( val << <int> ) + ( c - <char> ) ; c = getchar_unlocked ( ) ; } return val ; } int gcd ( int m , int n ) { if ( n == <int> ) return m ; else return gcd ( n , m % n ) ; } int main ( ) { int t , a , b , h , l ; t = fastInput ( ) ; while ( t -- ) { a = fastInput ( ) ; b = fastInput ( ) ; h = gcd ( a , b ) ; l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 1, "id": 2891}
{"input": "int main ( ) { int n , i , d , a , b , j , k ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { d = <int> ; scanf ( <str> , & a , & b ) ; if ( b > a > <int> ) { for ( i = a ; i > <int> ; ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i ) ; d = ( a * b ) / i ; printf ( <str> , d ) ; i = <int> ; } i -- ; } } else if ( a > b > <int> ) { for ( j = b ; j > <int> ; ) { if ( b % j == <int> && a % j == <int> ) { printf ( <str> , j ) ; d = ( a * b ) / j ; printf ( <str> , d ) ; j = <int> ; } j -- ; } } } return <int> ; }", "label": 1, "id": 2892}
{"input": "int main ( void ) { long int c , n , num ; scanf ( <str> , & n ) ; if ( n < <int> ) { while ( n -- ) { long int num1 , num2 , gcd , lcm , rem , num , den ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 < <int> && num2 < <int> ) { if ( num1 > num2 ) { num = num1 ; den = num2 ; } else { num = num2 ; den = num1 ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } } } return <int> ; }", "label": 1, "id": 2893}
{"input": "int main ( ) { int t , B ; scanf ( <str> , & t ) ; while ( t -- ) { int sum = <int> ; scanf ( <str> , & B ) ; while ( B > <int> ) { B = B - <int> ; sum = sum + B / <int> ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2894}
{"input": "int main ( ) { long long int a , b , c , d , e , f ; long long int k , i ; scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( b > a ) { c = b ; d = a ; } else { c = a ; d = b ; } e = c % d ; while ( e > <int> ) { c = d ; d = e ; e = c % d ; } printf ( <str> , d , ( a * b ) / d ) ; } return <int> ; }", "label": 0, "id": 2895}
{"input": "int main ( ) { int n , r , i , j , k , e ; scanf ( <str> , & n ) ; int ans [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & r ) ; int a [ r ] [ r ] , f [ r ] [ r ] ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k < r ; k ++ ) { a [ j ] [ k ] = <int> ; } } for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k < j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } f [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k < j ; k ++ ) { if ( k == <int> ) f [ j ] [ k ] = f [ j - <int> ] [ k ] + a [ j ] [ k ] ; else if ( j != k ) { if ( f [ j - <int> ] [ k - <int> ] > f [ j - <int> ] [ k ] ) f [ j ] [ k ] = f [ j - <int> ] [ k - <int> ] + a [ j ] [ k ] ; else f [ j ] [ k ] = f [ j - <int> ] [ k ] + a [ j ] [ k ] ; } else f [ j ] [ k ] = f [ j - <int> ] [ k - <int> ] + a [ j ] [ k ] ; } } int max = f [ r - <int> ] [ <int> ] ; for ( e = <int> ; e < r ; e ++ ) { if ( f [ r - <int> ] [ e ] > max ) max = f [ r - <int> ] [ e ] ; } ans [ i ] = max ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return <int> ; }", "label": 1, "id": 2896}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2897}
{"input": "int main ( ) { int testcase , test , size , i , j , max ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & test ) ; for ( testcase = <int> ; testcase < test ; testcase ++ ) { scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = size - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { max = a [ i ] [ j ] < a [ i ] [ j + <int> ] ? a [ i ] [ j + <int> ] : a [ i ] [ j ] ; a [ i - <int> ] [ j ] += max ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2898}
{"input": "int main ( ) { int tc , T ; scanf ( <str> , & T ) ; for ( tc = <int> ; tc < T ; tc ++ ) { int x , y , a , b , t ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } printf ( <str> , a , ( x * y ) / a ) ; } return <int> ; }", "label": 1, "id": 2899}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd1 , lcm ; scanf ( <str> , & a , & b ) ; gcd1 = gcd ( a , b ) ; lcm = ( a * b ) * gcd1 ; printf ( <str> , gcd1 , lcm ) ; } }", "label": 1, "id": 2900}
{"input": "int main ( ) { int t ; long int a , b , x , y , temp , lcm , hcf ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } hcf = a ; lcm = ( x * y ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 2901}
{"input": "int main ( ) { int divident , minmultiple , t , divisor , remainder , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; divident = a ; divisor = b ; remainder = a % b ; while ( remainder != <int> ) { divident = divisor ; divisor = remainder ; remainder = divident % divisor ; } printf ( <str> , divisor ) ; minmultiple = ( a > b ) ? a : b ; while ( <int> ) { if ( minmultiple % a == <int> && minmultiple % b == <int> ) { printf ( <str> , minmultiple ) ; break ; } minmultiple ++ ; } } return <int> ; }", "label": 2, "id": 2902}
{"input": "int max_sum = <int> ; void <unk> ( int arr [ ] [ <int> ] , int num_row , int cur_row , int sum , int <unk> ) { int sum1 = <int> , sum2 = <int> ; if ( cur_row == num_row && ( <unk> + <int> ) == cur_row ) { sum1 = sum + arr [ cur_row ] [ <unk> ] ; sum2 = sum + arr [ cur_row ] [ <unk> + <int> ] ; if ( sum1 > max_sum ) printf ( <str> , sum1 ) ; else if ( sum2 > max_sum ) printf ( <str> , sum2 ) ; else printf ( <str> , max_sum ) ; } else if ( cur_row == num_row ) { if ( ( <unk> + <int> ) <= cur_row ) { sum1 = sum + arr [ cur_row ] [ <unk> ] ; sum2 = sum + arr [ cur_row ] [ <unk> + <int> ] ; if ( sum1 > max_sum ) max_sum = sum1 ; else if ( sum2 > max_sum ) max_sum = sum2 ; } else { sum1 = sum + arr [ cur_row ] [ <unk> ] ; if ( sum1 > max_sum ) max_sum = sum1 ; } } else { if ( ( <unk> + <int> ) <= cur_row ) { sum1 = sum + arr [ cur_row ] [ <unk> ] ; sum2 = sum + arr [ cur_row ] [ <unk> + <int> ] ; <unk> ( arr , num_row , cur_row + <int> , sum1 , <unk> ) ; <unk> ( arr , num_row , cur_row + <int> , sum2 , <unk> + <int> ) ; } else { sum1 = sum + arr [ cur_row ] [ <unk> ] ; <unk> ( arr , num_row , cur_row + <int> , sum1 , <unk> ) ; } } } int main ( ) { int array [ <int> ] [ <int> ] ; int i , j , k , n , num_row , sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num_row ) ; for ( j = <int> ; j < num_row ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & array [ j ] [ k ] ) ; } } <unk> ( array , num_row , <int> , <int> , <int> ) ; } return <int> ; }", "label": 2, "id": 2903}
{"input": "void main ( ) { int a , b , i , n , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int m , n , g_c_d = <int> ; scanf ( <str> , & a , & b ) ; m = a ; n = b ; for ( j = b ; j > <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { g_c_d *= j ; a = a / j ; b = b / j ; } } printf ( <str> , g_c_d , ( m * n ) / g_c_d ) ; } }", "label": 2, "id": 2904}
{"input": "main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { int a , b ; int gcd ; int high , low ; scanf ( <str> , & a , & b ) ; if ( a < b ) { high = b ; low = a ; } else { low = b ; high = a ; } for ( i = <int> ; i <= low ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } int lcm = <int> , p = <int> ; for ( i = low ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { p = i * p ; a = a / i ; b = b / i ; } } p = p * a * b ; printf ( <str> , gcd , p ) ; lcm = <int> ; t -- ; } return <int> ; }", "label": 2, "id": 2905}
{"input": "long int min ( long int * a , int n ) { long int k = a [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( a [ i ] < k ) { k = a [ i ] ; } } return k ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long int m = min ( a , n ) ; long long int k = ( n - <int> ) * m ; printf ( <str> , k ) ; t -- ; } return <int> ; }", "label": 0, "id": 2906}
{"input": "int main ( ) { int t , i ; long long int n , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; x = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < x ) x = a [ i ] ; } x = x * ( n - <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 2907}
{"input": "int main ( ) { printf ( <str> ) ; return <int> ; }", "label": 1, "id": 2908}
{"input": "int main ( void ) { short n , t , a , q , e , k , c , d , sum = <int> ; scanf ( <str> , & t ) ; for ( a = <int> ; a <= t ; a ++ ) { scanf ( <str> , & e ) ; sum = <int> ; k = <int> ; for ( c = <int> ; c <= e ; c ++ ) { scanf ( <str> , & n ) ; for ( d = <int> ; d <= c - <int> ; d ++ ) { scanf ( <str> , & q ) ; if ( q > n ) { k = q ; n = q ; } else if ( n > q ) k = n ; else k = q ; } sum += k ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 2909}
{"input": "int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = a [ <int> ] ; int sum = <int> ; for ( int i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2910}
{"input": "int fastint ( ) { char c ; int num = <int> ; c = getchar_unlocked ( ) ; while ( c == <char> || c == <char> ) c = getchar_unlocked ( ) ; while ( c >= <int> && c <= <int> ) { num = num * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return num ; } int main ( ) { int tc , n , i , j ; scanf ( <str> , & tc ) ; int ar [ <int> ] [ <int> ] ; while ( tc > <int> ) { for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) ar [ i ] [ j ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ar [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { int mx = ar [ i - <int> ] [ j - <int> ] > ar [ i - <int> ] [ j ] ? ar [ i - <int> ] [ j - <int> ] : ar [ i - <int> ] [ j ] ; ar [ i ] [ j ] += mx ; } } int mx = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( ar [ n ] [ i ] > mx ) mx = ar [ n ] [ i ] ; } printf ( <str> , mx ) ; tc -- ; } return <int> ; }", "label": 0, "id": 2911}
{"input": "void <unk> ( int a [ ] [ MAX ] ) ; void <unk> ( int a [ ] [ MAX ] , int n ) ; int <unk> ( int t1 , int t2 ) ; int solve ( int j , int k , int a [ ] [ MAX ] , int n ) ; int solve2 ( int j , int k , int a [ ] [ MAX ] , int n , int cache [ ] [ MAX ] ) ; int main ( ) { int a [ MAX ] [ MAX ] ; int cache [ MAX ] [ MAX ] ; <unk> ( a ) ; int t ; scanf ( <str> , & t ) ; int i = <int> ; int n ; while ( i <= t ) { scanf ( <str> , & n ) ; <unk> ( a ) ; <unk> ( cache ) ; int j , k ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } printf ( <str> , solve2 ( <int> , <int> , a , n , cache ) ) ; i ++ ; } return <int> ; } int solve ( int j , int k , int a [ ] [ MAX ] , int n ) { if ( j > n ) return <int> ; else { int t1 = solve ( j + <int> , k , a , n ) ; int t2 = solve ( j + <int> , k + <int> , a , n ) ; int hasil = <unk> ( t1 , t2 ) + a [ j ] [ k ] ; return hasil ; } } int solve2 ( int j , int k , int a [ ] [ MAX ] , int n , int cache [ ] [ MAX ] ) { if ( j > n ) return <int> ; else { if ( a [ j ] [ k ] == - <int> ) return cache [ j ] [ k ] ; else { int t1 = solve2 ( j + <int> , k , a , n , cache ) ; int t2 = solve2 ( j + <int> , k + <int> , a , n , cache ) ; int hasil = <unk> ( t1 , t2 ) + a [ j ] [ k ] ; a [ j ] [ k ] = - <int> ; cache [ j ] [ k ] = hasil ; return hasil ; } } } int <unk> ( int t1 , int t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; } void <unk> ( int a [ ] [ MAX ] ) { int i , j ; for ( i = <int> ; i < MAX ; i ++ ) { for ( j = <int> ; j < MAX ; j ++ ) a [ i ] [ j ] = <int> ; } } void <unk> ( int a [ ] [ MAX ] , int n ) { int l , m ; for ( l = <int> ; l < n ; l ++ ) { for ( m = <int> ; m < n ; m ++ ) printf ( <str> , a [ l ] [ m ] ) ; printf ( <str> ) ; } }", "label": 3, "id": 2912}
{"input": "int main ( ) { int T , N , i , n , k , a [ <int> ] [ <int> ] , j ; scanf ( <str> , & T ) ; a [ <int> ] [ <int> ] = <int> ; while ( T > <int> ) { n = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < <int> && j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } k = ( a [ i ] [ <int> ] >= a [ i ] [ <int> ] ) ? a [ i ] [ <int> ] : a [ i ] [ <int> ] ; n += k ; } printf ( <str> , n ) ; T -- ; } return <int> ; }", "label": 1, "id": 2913}
{"input": "main ( ) { int i , j , a [ <int> ] [ <int> ] , b [ <int> ] , max , sum = <int> , n ; int T , k ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { max = a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( max < a [ i ] [ j ] ) max = a [ i ] [ j ] ; } sum = sum + max ; } b [ k ] = sum ; sum = <int> ; } printf ( <str> ) ; for ( i = <int> ; i < T ; i ++ ) { b [ i ] = b [ i ] - a [ <int> ] [ <int> ] ; printf ( <str> , b [ i ] ) ; } }", "label": 1, "id": 2914}
{"input": "int sum = <int> , ele [ <int> ] [ <int> ] , store [ <int> ] [ <int> ] ; int maxfunc ( int row , int col , int l ) { if ( store [ row ] [ col ] ) { return store [ row ] [ col ] ; } if ( row < l ) { sum = ele [ row ] [ col ] + max ( maxfunc ( row + <int> , col , l ) , maxfunc ( row + <int> , col + <int> , l ) ) ; store [ row ] [ col ] = sum ; return sum ; } else return <int> ; } int main ( ) { int n , l , i , j , k , ans [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & ele [ j ] [ k ] ) ; } } ans [ i ] = maxfunc ( <int> , <int> , l ) ; memset ( store , <int> , sizeof ( store ) ) ; memset ( ele , <int> , sizeof ( ele ) ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , ans [ i ] ) ; } }", "label": 0, "id": 2915}
{"input": "int main ( ) { int i , x , n , m , j ; scanf ( <str> , & x ) ; while ( x != <int> ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) { int t = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = t ; } } m = a [ n - <int> ] * ( n - <int> ) ; printf ( <str> , m ) ; x -- ; } return <int> ; }", "label": 1, "id": 2916}
{"input": "int main ( ) { int no , num , i , j , sum = <int> , num1 ; scanf ( <str> , & no ) ; while ( no -- ) { scanf ( <str> , & num ) ; for ( i = <int> ; i <= num ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & num1 ) ; sum += num1 ; } } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 2917}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int maxProfit ( int arr [ <int> ] [ <int> ] , int lines ) { int i = <int> , j = <int> ; int profit [ <int> ] [ <int> ] = { { <int> , } , } ; int rmax = <int> ; for ( i = <int> ; i < lines ; i ++ ) { profit [ <int> ] [ i ] = arr [ <int> ] [ i ] ; profit [ i ] [ <int> ] = i > <int> ? ( profit [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ) : arr [ i ] [ <int> ] ; } for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { profit [ i ] [ j ] = max ( profit [ i - <int> ] [ j - <int> ] , profit [ i - <int> ] [ j ] ) + arr [ i ] [ j ] ; rmax = max ( rmax , profit [ i ] [ j ] ) ; } } return rmax ; } int main ( void ) { int n , i = <int> , lines = <int> , j = <int> , k = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & lines ) ; int arr [ <int> ] [ <int> ] = { { <int> , } , } ; for ( j = <int> ; j < lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } printf ( <str> , maxProfit ( arr , lines ) ) ; if ( i != n - <int> ) printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 2918}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , num , den , r , gcd , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } r = num % den ; while ( r != <int> ) { num = den ; den = r ; r = num % den ; } gcd = den ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 0, "id": 2919}
{"input": "int main ( ) { int t , n , arr [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= n - i ; j ++ ) if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2920}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } main ( ) { int t , q , i , j ; scanf ( <str> , & t ) ; for ( q = <int> ; q < t ; q ++ ) { int n ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i != <int> ) { if ( j == <int> ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } } } } int lar = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] > a [ n - <int> ] [ i - <int> ] ) lar = a [ n - <int> ] [ i ] ; } printf ( <str> , lar ) ; } }", "label": 1, "id": 2921}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , t , sum = <int> , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = i - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] > a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ? a [ i ] [ j ] + a [ i + <int> ] [ j ] : ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2922}
{"input": "long int gcd ( long int a , long int b ) { long int t ; while ( b % a != <int> ) { t = b % a ; b = a ; a = t ; } return ( a ) ; } int main ( ) { long int t , a , b , i , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { i = a ; a = b ; b = i ; } j = gcd ( a , b ) ; printf ( <str> , j , ( a * b ) / j ) ; } return ( <int> ) ; }", "label": 0, "id": 2923}
{"input": "int main ( ) { int i , size , count = <int> ; scanf ( <str> , & size ) ; int array [ size ] ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & array [ i ] ) ; } for ( i = <int> ; i < size ; i ++ ) { if ( ( i + <int> ) != size ) { if ( array [ i ] < array [ i + <int> ] ) continue ; else count ++ ; } else { if ( array [ i - <int> ] < array [ i ] ) { count ++ ; break ; } } } printf ( <str> , count + size ) ; return <int> ; }", "label": 1, "id": 2924}
{"input": "int GCD ( long long int a , long long int b ) { if ( b == <int> ) return a ; return GCD ( b , a % b ) ; } int LCM ( long long int a , long long int b ) { return b * a / GCD ( a , b ) ; } int main ( ) { long long int a , b ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , GCD ( a , b ) ) ; printf ( <str> , LCM ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 2925}
{"input": "int Calculate ( int * , int ) ; int main ( ) { int a [ <int> ] , i , t , n , j , count ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ i ] ) ; count = Calculate ( a , n ) ; printf ( <str> , count ) ; } return <int> ; } int Calculate ( int * a , int n ) { int i , count = <int> , j ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j - <int> ] < a [ j ] ) { count ++ ; } } } return count ; }", "label": 3, "id": 2926}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n ; while ( test -- > <int> ) { scanf ( <str> , & n ) ; int vec1 [ n ] [ n ] ; int vec2 [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) vec2 [ n - <int> ] [ i ] = vec1 [ n - <int> ] [ i ] ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( vec2 [ i + <int> ] [ j ] > vec2 [ i + <int> ] [ j + <int> ] ) vec2 [ i ] [ j ] = vec1 [ i ] [ j ] + vec2 [ i + <int> ] [ j ] ; else vec2 [ i ] [ j ] = vec1 [ i ] [ j ] + vec2 [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , vec2 [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2927}
{"input": "int main ( ) { int a , b , i , gcd , lcm ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 2928}
{"input": "int main ( void ) { long int a ; int t , i , r , c , d , b , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { c = a ; a = b ; b = c ; } c = b ; while ( d % c != <int> ) { r = d % c ; d = c ; c = r ; } j = <int> ; c = a ; while ( a % b != <int> ) { a = c * j ; j ++ ; } printf ( <str> , r , a ) ; } return <int> ; }", "label": 2, "id": 2929}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = max ( a [ i ] [ j ] + a [ i + <int> ] [ j ] , a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2930}
{"input": "int main ( ) { int array [ MAX ] [ MAX ] ; int i , x , n , j , k , max1 = <int> , max2 = <int> , temp , iter , max_set ; i = <int> ; scanf ( <str> , & n ) ; while ( i < n ) { scanf ( <str> , & x ) ; for ( j = <int> ; j < <int> ; j ++ ) { for ( k = <int> ; k < <int> ; k ++ ) { array [ j ] [ k ] = <int> ; } } for ( j = <int> ; j < x ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & array [ j ] [ k ] ) ; } } iter = <int> ; max_set = <int> ; temp = <int> ; for ( k = <int> ; k < x ; k ++ ) { temp = <int> ; for ( j = iter ; j < x - <int> ; j ++ ) { temp = temp + array [ j ] [ k ] ; } max1 = temp + array [ x - <int> ] [ k ] ; if ( ( k + <int> ) < x ) { max2 = temp + array [ x - <int> ] [ k + <int> ] ; } else max2 = <int> ; if ( max1 > max_set ) { max_set = max1 ; } if ( max2 > max_set ) { max_set = max2 ; } iter ++ ; } printf ( <str> , max_set ) ; i ++ ; } return <int> ; }", "label": 1, "id": 2931}
{"input": "int main ( void ) { int i , t , n , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int m , c = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ <int> ] ) { m = a [ i ] ; a [ i ] = a [ <int> ] ; a [ <int> ] = m ; } } c = a [ <int> ] * ( n - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 2932}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int tri [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tri [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( tri [ i + <int> ] [ j ] > tri [ i + <int> ] [ j + <int> ] ) tri [ i ] [ j ] = tri [ i ] [ j ] + tri [ i + <int> ] [ j ] ; else tri [ i ] [ j ] = tri [ i ] [ j ] + tri [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , tri [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2933}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , b [ <int> ] , i , j , test = <int> , n = <int> ; long int ans ; for ( i = <int> ; i < <int> ; i ++ ) b [ i ] = <int> ; scanf ( <str> , & test ) ; while ( test != <int> ) { scanf ( <str> , & n ) ; while ( n != <int> ) { for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } if ( a [ i ] [ <int> ] > a [ i ] [ <int> ] ) b [ i ] = a [ i ] [ <int> ] ; else b [ i ] = a [ i ] [ <int> ] ; ans += b [ i ] ; n -- ; } printf ( <str> , ans ) ; printf ( <str> ) ; } } return <int> ; }", "label": 2, "id": 2934}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , m , g , lcm ; scanf ( <str> , & n , & m ) ; g = gcd ( n , m ) ; lcm = n * m / g ; printf ( <str> , g , lcm ) ; } return <int> ; }", "label": 1, "id": 2935}
{"input": "char rbuffer [ rbuffer_size ] ; int rfptr = rbuffer_size ; char wbuffer [ wbuffer_size ] ; int wfptr = <int> ; int readno ; void rd ( ) { rfptr = <int> ; readno = read ( <int> , rbuffer , rbuffer_size ) ; } int get_i ( ) { int sum = <int> ; char c ; int sign = <int> ; while ( <int> ) { if ( ( rfptr >= rbuffer_size ) || ( rfptr >= readno ) ) rd ( ) ; c = rbuffer [ rfptr ++ ] ; if ( c == <char> ) { sign = - <int> ; } else { if ( c == <char> || c == <char> ) return sum * sign ; else sum = sum * <int> + c - <char> ; } } } void wr ( ) { write ( <int> , wbuffer , wbuffer_size ) ; wfptr = <int> ; } void put_i ( int i ) { char ar [ <int> ] ; ar [ <int> ] = <int> ; int sign = <int> ; int index = - <int> ; if ( i == <int> ) { ar [ <int> ] = <char> ; index = <int> ; } else { if ( i < <int> ) { sign = - <int> ; i *= - <int> ; } while ( i != <int> ) { ar [ ++ index ] = i + <char> ; i /= <int> ; } } if ( sign == - <int> ) { if ( wfptr >= wbuffer_size ) wr ( ) ; wbuffer [ wfptr ++ ] = <char> ; } while ( index >= <int> ) { if ( wfptr >= wbuffer_size ) wr ( ) ; wbuffer [ wfptr ++ ] = ar [ index -- ] ; } } void put_i_c ( int i , char c ) { char ar [ <int> ] ; ar [ <int> ] = <int> ; int sign = <int> ; int index = - <int> ; if ( i == <int> ) { ar [ <int> ] = <int> ; index = <int> ; } else { if ( i < <int> ) { sign = - <int> ; i *= - <int> ; } while ( i != <int> ) { ar [ ++ index ] = i + <char> ; i /= <int> ; } } if ( sign == - <int> ) { if ( wfptr >= wbuffer_size ) wr ( ) ; wbuffer [ wfptr ++ ] = <char> ; } while ( index >= <int> ) { if ( wfptr >= wbuffer_size ) wr ( ) ; wbuffer [ wfptr ++ ] = ar [ index -- ] ; } if ( wfptr >= wbuffer_size ) wr ( ) ; wbuffer [ wfptr ++ ] = c ; } void writeRemaining ( ) { if ( wfptr > <int> ) write ( <int> , wbuffer , wfptr ) ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int t , n , i ; int * * p ; int k ; int tempval ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; p = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= i ; k ++ ) { scanf ( <str> , & p [ i ] [ k ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k <= i ; k ++ ) { p [ i ] [ k ] += max ( p [ i + <int> ] [ k ] , p [ i + <int> ] [ k + <int> ] ) ; } } put_i_c ( p [ <int> ] [ <int> ] , <char> ) ; } writeRemaining ( ) ; }", "label": 1, "id": 2936}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int a [ <int> ] [ <int> ] , n , i , j , max = <int> , x ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; a [ i ] [ i ] += a [ i - <int> ] [ i - <int> ] ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n - <int> ; j ++ ) { x = ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) ? ( a [ i - <int> ] [ j ] ) : ( a [ i - <int> ] [ j - <int> ] ) ; a [ i ] [ j ] += x ; } } for ( j = <int> ; j < n ; j ++ ) { if ( max < a [ n - <int> ] [ j ] ) max = a [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; t -- ; } return <int> ; }", "label": 1, "id": 2937}
{"input": "int main ( ) { long long int i , j , n , k , m , t ; long long int gcd , lcm , max , min ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m , & n ) ; min = m > n ? n : m ; max = m > n ? m : n ; for ( j = <int> ; j <= min ; j ++ ) { if ( m % j == <int> && n % j == <int> ) { gcd = j ; } } for ( k = min ; ; k ++ ) { if ( k % m == <int> && k % n == <int> ) { lcm = k ; break ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2938}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int val , n1 = n ; long min = <int> ; while ( n -- ) { scanf ( <str> , & val ) ; if ( val < min ) min = val ; } unsigned long s = ( n1 - <int> ) * min ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 2939}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int i , t , a , b , c , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { c = a ; a = b ; b = c ; } gcd ( a , b ) ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( <str> , gcd ( a , b ) , lcm ) ; } }", "label": 1, "id": 2940}
{"input": "int n , i , j ; int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int tri [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tri [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = n - <int> ; j >= <int> ; j -- ) { tri [ i ] [ j ] += tri [ i + <int> ] [ j ] > tri [ i + <int> ] [ j + <int> ] ? tri [ i + <int> ] [ j ] : tri [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , tri [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 2941}
{"input": "main ( ) { int t , i , a [ <int> ] , s , n ; scanf ( <str> , & t ) ; while ( t -- ) { s = <int> ; a [ <int> ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { s = s + a [ i ] ; } else { s = s + a [ i + <int> ] ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 3, "id": 2942}
{"input": "static char _rbuf [ <int> * <int> ] ; static char * _rend = <int> ; static char * _rpos = <int> ; static int _getchar ( ) { int n = read ( <int> , _rbuf , sizeof _rbuf ) ; if ( n <= <int> ) { printf ( <str> , n ) ; exit ( <int> ) ; } _rend = _rbuf + n ; _rpos = _rbuf + <int> ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < <char> ) { } int n = c - <char> ; while ( ( ( c = mygetchar ( ) ) ) >= <char> ) { n = n * <int> + c - <char> ; } return n ; } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - <int> ; while ( <int> ) { buf [ bn -- ] = <char> + ( n ) ; n = n / <int> ; if ( n == <int> ) break ; } while ( bn < BSIZE - <int> ) putchar ( buf [ ++ bn ] ) ; putchar ( <char> ) ; } static int dump ( int a [ ] , int n ) { int i = <int> ; printf ( <str> ) ; while ( i < n ) printf ( <str> , a [ i ++ ] ) ; printf ( <str> ) ; } void tria ( int n ) { int a [ n ] ; int b [ n ] ; a [ <int> ] = <int> ; int * cur = b ; int * old = a ; int i = <int> ; while ( i < n ) { cur [ <int> ] = get_i ( ) + old [ <int> ] ; int j = <int> ; while ( j < i ) { cur [ j ] = get_i ( ) + max ( old [ j - <int> ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = get_i ( ) + old [ j - <int> ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } i ++ ; } int mx = <int> ; for ( i = <int> ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; put_i ( mx ) ; } int main ( int ac , char * * av ) { int n = get_i ( ) ; while ( n -- > <int> ) { tria ( get_i ( ) ) ; } return <int> ; }", "label": 1, "id": 2943}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , a , min ; scanf ( <str> , & n ) ; scanf ( <str> , & min ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } }", "label": 0, "id": 2944}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= ( t - <int> ) ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( int i = ( t - <int> ) ; i > <int> ; i -- ) { for ( int j = <int> ; j < ( t - <int> ) ; j ++ ) { if ( a [ i ] [ j ] <= a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2945}
{"input": "int main ( ) { int t , n , i , c ; int b [ <int> ^ <int> ] , a [ <int> ^ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; b [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] <= a [ i ] ) b [ i ] = b [ i - <int> ] + <int> ; else b [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) c += b [ i ] ; printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 2946}
{"input": "int max1 ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int j , n , t , i , k ; int s [ <int> ] [ <int> ] = { <int> } , m , a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { m = <int> ; i = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; else if ( j == <int> ) s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; else { s [ i ] [ j ] = a [ i ] [ j ] + max1 ( s [ i - <int> ] [ j - <int> ] , s [ i - <int> ] [ j ] ) ; } m = max1 ( m , s [ i ] [ j ] ) ; } } printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 2947}
{"input": "int main ( ) { int i , a , b , t , n , g ; int l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) n = b ; else n = a ; for ( i = n ; i >= <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 2948}
{"input": "int main ( void ) { int * A [ <int> ] ; int n , k , i ; k = <int> ; int j , sum ; sum = <int> ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { A [ i ] = ( int * ) malloc ( sizeof ( int ) * k ) ; for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } k ++ ; } k = n - <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < k ; j ++ ) { if ( A [ i + <int> ] [ j ] > A [ i + <int> ] [ j + <int> ] ) A [ i ] [ j ] += A [ i + <int> ] [ j ] ; else A [ i ] [ j ] += A [ i + <int> ] [ j + <int> ] ; } k -- ; } k = <int> ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2949}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int a , b , lcm , gcd , i ; gcd = <int> ; lcm = <int> ; scanf ( <str> , & a , & b ) ; ( a > b ) ? ( a = a + b , b = a - b , a = a - b ) : ( a ) ; for ( i = <int> ; i <= a / <int> ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; if ( b % a == <int> ) gcd = a ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { a = a / i ; b = b / i ; lcm *= i ; i -- ; } } lcm *= ( a * b ) ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 2950}
{"input": "int main ( ) { int a [ <int> ] ; int t , i , j , k , n , count ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; ++ i ) { count = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; ++ j ) { for ( k = <int> ; k <= j ; ++ k ) { scanf ( <str> , & a [ k ] ) ; if ( j != <int> ) { if ( k != <int> ) { if ( a [ k ] < a [ k - <int> ] ) a [ k ] = a [ k - <int> ] ; } } } if ( j != <int> ) count = count + a [ k - <int> ] ; } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 2951}
{"input": "int main ( ) { int T , i ; int s [ T ] [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { int x , y , a , b , l ; scanf ( <str> , & x , & y ) ; int x1 ; a = x ; b = y ; while ( b != <int> ) { x1 = b ; b = a % b ; a = x1 ; } l = ( x * y ) / a ; s [ i ] [ <int> ] = a ; s [ i ] [ <int> ] = l ; printf ( <str> , s [ i ] [ <int> ] , s [ i ] [ <int> ] ) ; } return ( <int> ) ; }", "label": 3, "id": 2952}
{"input": "int main ( ) { int t , no , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & no ) ; int a [ no ] [ no ] ; for ( i = <int> ; i < no ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = no - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2953}
{"input": "int main ( ) { int a , i , n , b , g , l , t , c ; scanf ( <str> , & t ) ; for ( c = <int> ; c <= t ; c ++ ) { scanf ( <str> , & a , & b ) ; g = a ; i = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } printf ( <str> , a ) ; n = ( g > i ) ? g : i ; while ( <int> ) { if ( n % g == <int> && n % i == <int> ) { l = n ; printf ( <str> , l ) ; break ; } n ++ ; } } return <int> ; }", "label": 2, "id": 2954}
{"input": "typedef long long int ll ; typedef int ll ; inline ll read_int ( ) { ll n = <int> , a = <int> ; char c = GC ( ) ; while ( c < <int> || c > <int> ) { if ( c == <char> ) { a = - <int> ; } c = GC ( ) ; } while ( c > <int> && c < <int> ) { n = ( n << <int> ) + ( n << <int> ) + c - <char> ; c = GC ( ) ; } return a * n ; } inline void fastwrite ( ll a ) { if ( a < <int> ) { a = - a ; PC ( <char> ) ; } char snum [ <int> ] ; ll i = <int> ; do { snum [ i ++ ] = a + <int> ; a = a / <int> ; } while ( a != <int> ) ; i = i - <int> ; while ( i >= <int> ) PC ( snum [ i -- ] ) ; } ll gcd ( ll a , ll b ) { ll t ; while ( b ) { t = a % b ; a = b ; b = t ; } return a ; } int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 0, "id": 2955}
{"input": "int main ( ) { int t , n , sum = <int> , i , x , prev , small = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; if ( i > <int> ) small = prev > x ? x : prev ; sum += small ; if ( i == <int> ) prev = x ; else { prev = small ; } } printf ( <str> , sum ) ; small = <int> ; sum = <int> ; } return <int> ; }", "label": 1, "id": 2956}
{"input": "int main ( ) { int T , a , b , m , i ; int gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; m = ( a > b ? b : a ) ; gcd = <int> ; for ( i = m ; i > <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { gcd = gcd * i ; a /= i ; b /= i ; } else { lcm = gcd * a * b ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 2957}
{"input": "int gcd ( long long int , long long int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; long long int i ; scanf ( <str> , & a , & b ) ; i = gcd ( a , b ) ; printf ( <str> , i , a * b / i ) ; } return <int> ; } int gcd ( long long int a , long long int b ) { if ( a > b ) { if ( a % b != <int> ) return gcd ( b , a % b ) ; else return b ; } else if ( b > a ) { if ( b % a != <int> ) return gcd ( b % a , a ) ; else return a ; } else if ( a == b ) return a ; }", "label": 0, "id": 2958}
{"input": "int main ( ) { int t , l , n , i , j , m ; int * a ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & l ) ; i = <int> ; n = l * ( l + <int> ) / <int> ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; while ( i <= n ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } for ( i = l - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i + <int> ; j ++ ) { n = ( i * ( i - <int> ) / <int> ) + j ; m = ( a [ ( i * ( i + <int> ) / <int> ) + j ] > a [ ( i * ( i + <int> ) / <int> ) + j + <int> ] ) ? a [ ( i * ( i + <int> ) / <int> ) + j ] : a [ ( i * ( i + <int> ) / <int> ) + j + <int> ] ; a [ n ] += m ; } } printf ( <str> , a [ <int> ] ) ; free ( a ) ; t -- ; } }", "label": 3, "id": 2959}
{"input": "int main ( ) { long t , n , min , x , c , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & x ) ; if ( x < min ) { min = x ; } } c = min * ( n - <int> ) ; printf ( <str> , c ) ; t -- ; } return ( <int> ) ; }", "label": 0, "id": 2960}
{"input": "int main ( ) { int T , N , i , j , k , l , S , current , next ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; S = N ; scanf ( <str> , & current ) ; for ( j = <int> ; j < N - <int> ; j ++ ) { scanf ( <str> , & next ) ; if ( current <= next ) S ++ ; current = next ; } printf ( <str> , S ) ; } return <int> ; }", "label": 1, "id": 2961}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int m , i , t , j , n , smax = <int> ; scanf ( <str> , & m ) ; while ( m -- ) { smax = <int> ; scanf ( <str> , & t ) ; int a [ t ] [ t ] , b [ t ] [ t ] ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < t ; j ++ ) { a [ i ] [ j ] = <int> ; b [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < t ; i ++ ) { j = <int> ; while ( i >= j ) { scanf ( <str> , & n ) ; a [ i ] [ j ] = n ; j ++ ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < t ; j ++ ) { if ( j - <int> >= <int> ) { b [ i ] [ j ] = max ( b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] , b [ i - <int> ] [ j ] + a [ i ] [ j ] ) ; } else { b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } } for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < t ; j ++ ) { if ( b [ i ] [ j ] > smax ) smax = b [ i ] [ j ] ; } } printf ( <str> , smax ) ; } return <int> ; }", "label": 0, "id": 2962}
{"input": "int testcases , m ; int main ( ) { scanf ( <str> , & testcases ) ; for ( m = <int> ; m < testcases ; m ++ ) { int size , i , j , k , matrix [ <int> ] [ <int> ] ; int max , sum ; scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } for ( k = j ; k < size ; k ++ ) { matrix [ i ] [ k ] = <int> ; } } sum = <int> ; for ( i = <int> ; i < size ; i ++ ) { max = matrix [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( matrix [ i ] [ j ] > max ) { max = matrix [ i ] [ j ] ; } } sum += max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 2963}
{"input": "int main ( ) { int a , i , j , total , in , t ; scanf ( <str> , & t ) ; while ( t -- ) { total = <int> ; scanf ( <str> , & a ) ; if ( a >= <int> && a <= <int> ) { for ( i = <int> ; i <= a ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & in ) ; if ( in >= <int> && in <= <int> ) total = total + in ; } } printf ( <str> , ( float ) total / <int> ) ; } } return <int> ; }", "label": 1, "id": 2964}
{"input": "int main ( void ) { int i , t ; int a , b , m , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 2965}
{"input": "long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) ) ; printf ( <str> ) ; printf ( <str> , lcm ( a , b ) ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 2966}
{"input": "int main ( void ) { int t ; long long int i , a , b , hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { hcf = <int> ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> ) { if ( b % i == <int> ) { hcf = i ; } } } lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 2967}
{"input": "int max ( int , int ) ; int sum ( int , int , int [ ] [ <int> ] , int ) ; int main ( ) { int i , j , maxsum = <int> , r = <int> , c = <int> , t , n ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } maxsum = a [ <int> ] [ <int> ] + max ( sum ( r + <int> , c , a , n ) , sum ( r + <int> , c + <int> , a , n ) ) ; printf ( <str> , maxsum ) ; } return <int> ; } int max ( int a , int b ) { int max = <int> ; if ( a > b ) max = a ; else max = b ; return max ; } int sum ( int row , int col , int arr [ <int> ] [ <int> ] , int num ) { int s = <int> ; if ( row == ( num - <int> ) ) return arr [ row ] [ col ] ; s = arr [ row ] [ col ] + max ( sum ( row + <int> , col , arr , num ) , sum ( row + <int> , col + <int> , arr , num ) ) ; return s ; }", "label": 2, "id": 2968}
{"input": "int main ( ) { int t , n , i , j , array [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } i -- ; while ( i ) { j = <int> ; while ( j < i ) { if ( array [ i ] [ j ] > array [ i ] [ j + <int> ] ) array [ i - <int> ] [ j ] += array [ i ] [ j ] ; else array [ i - <int> ] [ j ] += array [ i ] [ j + <int> ] ; j ++ ; } i -- ; } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2969}
{"input": "int main ( ) { int ara1 [ <int> ] , ara2 [ <int> ] , i , n , rem , j , prod ; scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> * n ; i = i + <int> ) { if ( n > <int> ) { break ; } scanf ( <str> , & ara1 [ i ] , & ara1 [ i + <int> ] ) ; } for ( i = <int> ; i < <int> * n ; i = i + <int> ) { if ( ara1 [ i ] == <int> || ara1 [ i + <int> ] == <int> ) { break ; } prod = ara1 [ i ] * ara1 [ i + <int> ] ; if ( ara1 [ i ] == <int> || ara1 [ i + <int> ] == <int> ) { break ; } else if ( ara1 [ i + <int> ] % ara1 [ i ] == <int> ) { ara2 [ i ] = ara1 [ i ] ; } else { for ( j = <int> ; ; j ++ ) { rem = ara1 [ i + <int> ] % ara1 [ i ] ; ara1 [ i + <int> ] = ara1 [ i ] ; ara1 [ i ] = rem ; if ( ara1 [ i + <int> ] % ara1 [ i ] == <int> ) { ara2 [ i ] = ara1 [ i ] ; break ; } } } ara2 [ i + <int> ] = prod / ara2 [ i ] ; printf ( <str> , ara2 [ i ] , ara2 [ i + <int> ] ) ; } return <int> ; }", "label": 1, "id": 2970}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int solve ( int i , int j , int a [ ] [ MAX ] , int n , int store [ ] [ MAX ] ) { int s ; if ( i >= n ) return <int> ; if ( store [ i ] [ j ] ) return store [ i ] [ j ] ; s = a [ i ] [ j ] + max ( solve ( i + <int> , j , a , n , store ) , solve ( i + <int> , j + <int> , a , n , store ) ) ; store [ i ] [ j ] = s ; return s ; } int main ( ) { int t , i , j , n , a [ MAX ] [ MAX ] , store [ MAX ] [ MAX ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; store [ i ] [ j ] = <int> ; } printf ( <str> , a [ <int> ] [ <int> ] + max ( solve ( <int> , <int> , a , n , store ) , solve ( <int> , <int> , a , n , store ) ) ) ; } return <int> ; }", "label": 0, "id": 2971}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int cost [ T ] , i ; for ( i = <int> ; i < T ; i ++ ) { int N , min , num , j ; min = <int> ; scanf ( <str> , & N ) ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & num ) ; if ( num < min ) { min = num ; } } cost [ i ] = min * ( N - <int> ) ; } for ( i = <int> ; i < T ; i ++ ) { printf ( <str> , cost [ i ] ) ; } return <int> ; }", "label": 0, "id": 2972}
{"input": "int main ( ) { int t , row , i , j ; int s [ <int> ] [ <int> ] , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; int max = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else if ( j == i ) { s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { if ( s [ i - <int> ] [ j ] > s [ i - <int> ] [ j - <int> ] ) { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j ] ; } else { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j - <int> ] ; } } if ( max < s [ i ] [ j ] ) max = s [ i ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 2973}
{"input": "int main ( ) { int j , t , i , n , m , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & m ) ; if ( j == <int> ) temp = m ; if ( temp > m ) temp = m ; } printf ( <str> , temp * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 2974}
{"input": "int hcf ( int , int ) ; int main ( ) { int t ; int y , x , n , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & d ) ; x = hcf ( n , d ) ; y = ( n * d ) / x ; printf ( <str> , x , y ) ; } return <int> ; } int hcf ( int a , int b ) { int c ; while ( a != <int> ) { c = a ; a = b % a ; b = c ; } return b ; }", "label": 1, "id": 2975}
{"input": "main ( ) { int n , i , j , k , m ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] , s [ n ] ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & m ) ; for ( j = <int> ; j <= m ; j ++ ) for ( i = <int> ; i < j ; i ++ ) scanf ( <str> , & a [ j - <int> ] [ i ] ) ; for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } s [ k ] = a [ <int> ] [ <int> ] ; } for ( k = <int> ; k < n ; k ++ ) printf ( <str> , s [ k ] ) ; return <int> ; }", "label": 0, "id": 2976}
{"input": "int main ( ) { unsigned int T , p ; T = p = <int> ; scanf ( <str> , & T ) ; for ( p = <int> ; p < T ; p ++ ) { unsigned long int N , i , j , op ; N = i = j = op = <int> ; scanf ( <str> , & N ) ; unsigned long int A [ N ] ; memset ( A , <int> , sizeof ( A ) ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } op = N ; i = <int> ; for ( i = <int> ; i < N ; i ++ ) { for ( j = i + <int> ; j < N ; j ++ ) { if ( A [ j ] >= A [ j - <int> ] ) { op ++ ; } else break ; } } printf ( <str> , op ) ; } return <int> ; }", "label": 0, "id": 2977}
{"input": "int gcd ( int a , int b ) ; int lcm ( int c , int d ) ; int main ( ) { int n1 , n2 , t , i , s1 , s2 ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; s1 = gcd ( n1 , n2 ) ; s2 = lcm ( n1 , n2 ) ; printf ( <str> , s1 , s2 ) ; } return <int> ; } int gcd ( int a , int b ) { int rem ; rem = a % b ; if ( rem == <int> ) return b ; else return ( gcd ( b , rem ) ) ; } int lcm ( int c , int d ) { int rem ; rem = c % d ; if ( rem != <int> ) return ( c * d ) ; else return c ; }", "label": 1, "id": 2978}
{"input": "int a [ SIZE ] [ SIZE ] ; int funmax ( int a , int b ) { if ( a > b ) return a ; else return b ; } int calculate_max_sum ( int i , int j , int n ) { int sum = <int> ; if ( i < n && j < n ) { sum = sum + a [ i ] [ j ] ; sum = sum + funmax ( calculate_max_sum ( i + <int> , j , n ) , calculate_max_sum ( i + <int> , j + <int> , n ) ) ; } return sum ; } int main ( ) { int t , i , j , n , sum ; scanf ( <str> , & t ) ; for ( int k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; sum = a [ <int> ] [ <int> ] + funmax ( calculate_max_sum ( <int> , <int> , n ) , calculate_max_sum ( <int> , <int> , n ) ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 2979}
{"input": "long long gcd ( long long a , long long b ) { long long temp , r , q ; if ( a > b ) { temp = a ; a = b ; b = temp ; } r = b % a ; if ( r == <int> ) { return a ; } else { return gcd ( r , a ) ; } } int main ( ) { long long a , b , c , d , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = ( a * b ) / c ; printf ( <str> , c , d ) ; } return ( <int> ) ; }", "label": 0, "id": 2980}
{"input": "int n , i , j , k , l , T , n , a , b ; int main ( ) { scanf ( <str> , & T ) ; int M [ T ] [ <int> ] ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = a ; ; j -- ) { if ( b % j == <int> && a % j == <int> ) { M [ i ] [ <int> ] = j ; break ; } } M [ i ] [ <int> ] = a * b / M [ i ] [ <int> ] ; } for ( l = <int> ; l < T ; l ++ ) { printf ( <str> , M [ l ] [ <int> ] , M [ l ] [ <int> ] ) ; } }", "label": 2, "id": 2981}
{"input": "int main ( ) { int i , j , t , n , max = <int> , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } max = a [ n - <int> ] [ <int> ] + a [ n - <int> ] [ <int> ] + a [ n - <int> ] [ <int> ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 2982}
{"input": "int main ( ) { int q [ <int> ] , t , f , i , j , p [ <int> ] , count = <int> , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { count = <int> ; scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { int p [ j + <int> ] ; for ( f = <int> ; f <= j ; f ++ ) { scanf ( <str> , & p [ f ] ) ; } count += p [ <int> ] ; q [ i ] = count ; } } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , q [ i ] + <int> ) ; } }", "label": 3, "id": 2983}
{"input": "static char _rbuf [ <int> * <int> ] ; static char * _rend = <int> ; static char * _rpos = <int> ; static int _getchar ( ) { int n = read ( <int> , _rbuf , sizeof _rbuf ) ; if ( n <= <int> ) { printf ( <str> , n ) ; exit ( <int> ) ; } _rend = _rbuf + n ; _rpos = _rbuf + <int> ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < <char> ) { } int n = c - <char> ; while ( ( ( c = mygetchar ( ) ) ) >= <char> ) { n = n * <int> + c - <char> ; } return n ; } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - <int> ; while ( <int> ) { buf [ bn -- ] = <char> + ( n ) ; n = n / <int> ; if ( n == <int> ) break ; } while ( bn < BSIZE - <int> ) putchar ( buf [ ++ bn ] ) ; putchar ( <char> ) ; } static int dump ( int a [ ] , int n ) { int i = <int> ; printf ( <str> ) ; while ( i < n ) printf ( <str> , a [ i ++ ] ) ; printf ( <str> ) ; } void tria ( int n ) { int a [ n ] ; int b [ n ] ; a [ <int> ] = <int> ; int * cur = b ; int * old = a ; int i = <int> ; while ( i < n ) { cur [ <int> ] = get_i ( ) + old [ <int> ] ; int j = <int> ; while ( j < i ) { cur [ j ] = get_i ( ) + max ( old [ j - <int> ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = get_i ( ) + old [ j - <int> ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } i ++ ; } int mx = <int> ; for ( i = <int> ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; put_i ( mx ) ; } int main ( int ac , char * * av ) { int n = get_i ( ) ; while ( n -- > <int> ) { tria ( get_i ( ) ) ; } return <int> ; }", "label": 1, "id": 2984}
{"input": "int ar [ <int> ] [ <int> ] ; int maxa ( int a , int b ) { if ( a >= b ) return ( a ) ; else return ( b ) ; } int max1 ( int ar1 [ ] [ <int> ] , int n ) { int i , j = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( ar1 [ n - <int> ] [ i ] > j ) j = ar1 [ n - <int> ] [ i ] ; } return ( j ) ; } int main ( ) { int i , j , k , l , m , n , p , t ; scanf ( <str> , & t ) ; for ( p = <int> ; p < t ; p ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= ( i + <int> ) ; j ++ ) { ar [ i ] [ j ] == <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ar [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { ar [ i ] [ j ] += ar [ i - <int> ] [ j ] ; } else { l = ar [ i - <int> ] [ j ] ; m = ar [ i - <int> ] [ j - <int> ] ; ar [ i ] [ j ] += maxa ( l , m ) ; } } } k = max1 ( ar , n ) ; printf ( <str> , k ) ; } system ( <str> ) ; return ( <int> ) ; }", "label": 0, "id": 2985}
{"input": "int a [ <int> ] [ <int> ] ; int b [ <int> ] [ <int> ] ; int main ( void ) { int t , n , i , j , d ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == i ) b [ i ] [ i ] = a [ i ] [ i ] + b [ i - <int> ] [ i - <int> ] ; if ( j == <int> ) b [ i ] [ <int> ] = a [ i ] [ <int> ] + b [ i - <int> ] [ <int> ] ; else { b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; d = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; if ( d > b [ i ] [ j ] ) b [ i ] [ j ] = d ; } } } for ( i = <int> ; i < n ; i ++ ) { if ( b [ n - <int> ] [ i ] > b [ n - <int> ] [ <int> ] ) b [ n - i ] [ <int> ] = b [ n - <int> ] [ i ] ; } printf ( <str> , b [ n - <int> ] [ <int> ] ) ; } }", "label": 1, "id": 2986}
{"input": "int a [ max ] [ max ] ; int b [ max ] ; int main ( ) { int c , d , t = <int> , e , n , m , f , g , h , i ; scanf ( <str> , & c ) ; for ( d = <int> ; d <= c ; d ++ ) { scanf ( <str> , & e ) ; for ( m = <int> ; m < e ; m ++ ) { for ( n = <int> ; n <= m ; n ++ ) scanf ( <str> , & a [ m ] [ n ] ) ; } for ( f = e - <int> ; f > <int> ; f -- ) { for ( g = <int> ; g < f ; g ++ ) { h = a [ f ] [ g ] + a [ f - <int> ] [ g ] ; i = a [ f ] [ g + <int> ] + a [ f - <int> ] [ g ] ; if ( h > i ) a [ f - <int> ] [ g ] = h ; else a [ f - <int> ] [ g ] = i ; } } b [ t ] = a [ <int> ] [ <int> ] ; t ++ ; } printf ( <str> ) ; for ( h = <int> ; h < c ; h ++ ) { printf ( <str> , b [ h ] ) ; } }", "label": 1, "id": 2987}
{"input": "int gcd ( long int , long int ) ; int lcm ( long int , long int ) ; int main ( ) { long int t = <int> , a = <int> , b = <int> ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( long int x , long int y ) { long int dividend = <int> , divisor = <int> , rem = <int> ; if ( x > y ) { dividend = x ; divisor = y ; } else { dividend = y ; divisor = x ; } while ( divisor ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; } return dividend ; } int lcm ( long int x , long int y ) { long int min = <int> , max = <int> , lc = <int> , a = <int> , i = <int> ; if ( x < y ) { min = x ; max = y ; } else { min = y ; max = x ; } for ( i = <int> ; i <= min ; i ++ ) { a = max * i ; if ( a % min == <int> ) { lc = a ; break ; } } return lc ; }", "label": 2, "id": 2988}
{"input": "int main ( ) { int x ; scanf ( <str> , & x ) ; while ( x -- ) { int k , y , g , f ; int a , lcm ; scanf ( <str> , & k , & y ) ; for ( g = <int> ; g <= k ; g ++ ) { if ( ( ( k % g ) == <int> ) && ( ( y % g ) == <int> ) ) f = g ; } a = k * y ; lcm = a / f ; printf ( <str> , f , lcm ) ; } return <int> ; }", "label": 2, "id": 2989}
{"input": "int main ( ) { int t , n , i , j , k , m ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { m = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) a [ i ] [ <int> ] = a [ i ] [ <int> ] + a [ i - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j != <int> && j != i ) { if ( a [ i - <int> ] [ j ] < a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } else a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } for ( j = <int> ; j < n ; j ++ ) { if ( m < a [ n - <int> ] [ j ] ) m = a [ n - <int> ] [ j ] ; } printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 2990}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int p ; p = ( a * b ) / g ; printf ( <str> , g , p ) ; printf ( <str> ) ; } return <int> ; } int gcd ( int a , int b ) { int r ; while ( b != <int> ) { r = a % b ; a = b ; b = r ; } return a ; }", "label": 1, "id": 2991}
{"input": "int main ( ) { int n , A [ <int> ] , i , j , T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } int count = <int> , m ; for ( i = <int> ; i < n ; i ++ ) { int k = i ; for ( m = i + <int> ; m < n ; m ++ ) { if ( A [ k ] <= A [ m ] ) { printf ( <str> , A [ k ] , A [ m ] ) ; k = m ; count ++ ; } else { break ; } } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 3, "id": 2992}
{"input": "int main ( void ) { int t ; unsigned long long a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 0, "id": 2993}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , n , i , j , k , l , m , temp1 , temp2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; memset ( a , - <int> , n * n * <int> ) ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( k = <int> ; k < n ; ++ k ) { i = n - k ; j = i - <int> ; l = i ; m = j ; while ( i > <int> ) { a [ l - <int> ] [ j ] = max ( a [ l ] [ i ] + a [ m ] [ j ] , a [ l ] [ i - <int> ] + a [ m ] [ j ] ) ; i -- ; j -- ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2994}
{"input": "int GCD ( a , b ) { if ( b == <int> ) return a ; else return GCD ( b , a % b ) ; } int main ( ) { int t , a , b , i , j , gcd , lcm ; scanf ( <str> , & t ) ; int * * mat = ( int * * ) calloc ( t , sizeof ( int * ) ) ; for ( i = <int> ; i < t ; i ++ ) { mat [ i ] = ( int * ) calloc ( <int> , sizeof ( int ) ) ; } for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = ( a * b ) / gcd ; mat [ i ] [ <int> ] = gcd ; mat [ i ] [ <int> ] = lcm ; } for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { printf ( <str> , mat [ i ] [ j ] ) ; } printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 2995}
{"input": "int main ( void ) { int t , i , j , rows , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = rows - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i - <int> ; j ++ ) arr [ i - <int> ] [ j ] += arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ? arr [ i ] [ j ] : arr [ i ] [ j + <int> ] ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 2996}
{"input": "int max ( int a , int b ) { if ( a < b ) return b ; else a ; } void main ( ) { int a [ <int> ] [ <int> ] , result [ <int> ] ; int i = <int> , j = <int> , n , m1 , k = <int> ; scanf ( <str> , & m1 ) ; for ( k = <int> ; k < m1 ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; j ++ ; } } i = n - <int> ; while ( i >= <int> ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } i -- ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 2997}
{"input": "int main ( ) { int t , i , j , n ; int a [ n ] [ n ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 2998}
{"input": "int n ; int ms ( int a [ ] [ n ] , int i , int j ) { if ( i == n - <int> ) return a [ i ] [ j ] ; else if ( j == <int> ) return ( a [ i ] [ j ] + MAX ( ms ( a , i + <int> , j ) , ms ( a , i + <int> , j + <int> ) ) ) ; else return ( a [ i ] [ j ] + <unk> ( ms ( a , i + <int> , j - <int> ) , ms ( a , i + <int> , j ) , ms ( a , i + <int> , j + <int> ) ) ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int i , j , a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= n ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; int ans = ms ( a , <int> , <int> ) ; } return <int> ; }", "label": 2, "id": 2999}
{"input": "int main ( ) { int t , i , j , n ; long long int sum ; int arr [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { j = i ; while ( j + <int> < n && arr [ j + <int> ] >= arr [ j ] ) j ++ ; sum += j - i + <int> ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 3000}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3001}
{"input": "int main ( int argc , char const * argv [ ] ) { int tests ; scanf ( <str> , & tests ) ; while ( tests -- ) { int A , B , lcm ; scanf ( <str> , & A , & B ) ; int n1 = A , n2 = B ; if ( A > B ) A = A ^ B , B = A ^ B , A = A ^ B ; while ( B % A ) { B = B % A ; A = A ^ B ; B = A ^ B ; A = A ^ B ; } printf ( <str> ) ; lcm = ( n1 * n2 ) / A ; printf ( <str> , A , lcm ) ; } return <int> ; }", "label": 1, "id": 3002}
{"input": "int main ( void ) { int a , b , l , s , t , r = <int> , gcd ; scanf ( <str> , & t ) ; while ( ! t -- ) { scanf ( <str> , & a , & b ) ; l = a > b ? a : b ; s = a < b ? a : b ; while ( ! r ) { r = l % s ; if ( r == <int> ) gcd = s ; l = s ; s = r ; } l = a * b / gcd ; printf ( <str> , gcd , l ) ; } return <int> ; }", "label": 1, "id": 3003}
{"input": "int gcd ( int x , int y ) ; int main ( ) { int t , a , b , g ; long lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; lcm = ( a * b ) / g ; printf ( <str> , g , lcm ) ; } return <int> ; } int gcd ( int x , int y ) { int r ; r = x % y ; if ( r == <int> ) return y ; else return gcd ( y , r ) ; }", "label": 1, "id": 3004}
{"input": "int main ( void ) { int res [ <int> ] [ <int> ] , i , j , T ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a [ i ] [ <int> ] , & a [ i ] [ <int> ] ) ; } for ( j = <int> ; j < T ; j ++ ) { for ( i = <int> ; i <= a [ j ] [ <int> ] && i <= a [ j ] [ <int> ] ; ++ i ) { if ( a [ j ] [ <int> ] % i == <int> && a [ j ] [ <int> ] % i == <int> ) { res [ j ] [ <int> ] = i ; } res [ j ] [ <int> ] = ( a [ j ] [ <int> ] * a [ j ] [ <int> ] ) / res [ j ] [ <int> ] ; } } for ( j = <int> ; j < T ; j ++ ) { printf ( <str> , res [ j ] [ <int> ] , res [ j ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 3005}
{"input": "int main ( ) { int T , c , d ; long long int a , b ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; if ( ( a % b == <int> ) || ( b % a == <int> ) ) { if ( a > b ) { c = a ; d = b ; } else { c = b ; d = a ; } } else { c = a * b ; d = <int> ; } printf ( <str> , c ) ; printf ( <str> , d ) ; } return <int> ; }", "label": 1, "id": 3006}
{"input": "int main ( ) { long long int n , i , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & n ) ; long long int a [ n ] , b [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } a [ i ] = denominator ; b [ i ] = num1 * num2 / a [ i ] ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , a [ i ] , b [ i ] ) ; } return <int> ; }", "label": 0, "id": 3007}
{"input": "int result [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int maxpath ( int i , int j , int n ) { if ( i > n ) return <int> ; if ( result [ i ] [ j ] != <int> ) return result [ i ] [ j ] ; int t1 , t2 , t ; t1 = maxpath ( i + <int> , j , n ) ; t2 = maxpath ( i + <int> , j + <int> , n ) ; t = t1 > t2 ? t1 : t2 ; t = t + a [ i ] [ j ] ; result [ i ] [ j ] = t ; return t ; } int main ( ) { int i , j , test_cases , row , p ; printf ( <str> ) ; scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } p = maxpath ( <int> , <int> , row ) ; printf ( <str> , p ) ; return <int> ; }", "label": 3, "id": 3008}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; if ( a < b ) { long long int t = a ; a = b ; b = t ; } long long int hcf ; for ( int i = b ; i >= <int> ; i -- ) { if ( b % i == <int> && a % i == <int> ) { hcf = i ; break ; } } long long int lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 3009}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , n , i , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j > <int> && j < i ) a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ) ; else if ( j == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; } } max = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( max < a [ n - <int> ] [ j ] ) max = a [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3010}
{"input": "int main ( ) { int testCases , sizeData , itrInner , itrOuter , max = <int> , addThis ; int data [ MAX ] [ MAX ] ; int maxPath [ MAX ] [ MAX ] ; scanf ( <str> , & testCases ) ; while ( testCases -- ) { scanf ( <str> , & sizeData ) ; for ( itrInner = <int> ; itrInner < sizeData ; itrInner ++ ) { for ( itrOuter = <int> ; itrOuter < sizeData ; itrOuter ++ ) { if ( itrOuter <= itrInner ) scanf ( <str> , & data [ itrInner ] [ itrOuter ] ) ; else data [ itrInner ] [ itrOuter ] = <int> ; } } max = <int> ; for ( itrInner = <int> ; itrInner < sizeData ; itrInner ++ ) { for ( itrOuter = <int> ; itrOuter <= itrInner ; itrOuter ++ ) { if ( itrInner != <int> && itrOuter != <int> ) { addThis = ( maxPath [ itrInner - <int> ] [ itrOuter ] >= maxPath [ itrInner - <int> ] [ itrOuter - <int> ] ) ? maxPath [ itrInner - <int> ] [ itrOuter ] : maxPath [ itrInner - <int> ] [ itrOuter - <int> ] ; } else if ( itrInner == <int> && itrOuter == <int> ) addThis = <int> ; else if ( itrInner != <int> && itrOuter == <int> ) { addThis = maxPath [ itrInner - <int> ] [ itrOuter ] ; } maxPath [ itrInner ] [ itrOuter ] = data [ itrInner ] [ itrOuter ] + addThis ; } } for ( itrInner = <int> ; itrInner < sizeData ; itrInner ++ ) { if ( max < maxPath [ sizeData - <int> ] [ itrInner ] ) max = maxPath [ sizeData - <int> ] [ itrInner ] ; } printf ( <str> , max ) ; } }", "label": 1, "id": 3011}
{"input": "int main ( void ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int N , i , j , min ; scanf ( <str> , & N ) ; long long int a [ N ] ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; else if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , min * ( N - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3012}
{"input": "int max ( int * <unk> , int size ) { int <unk> = <unk> [ <int> ] ; int i = <int> ; for ( i = <int> ; i < size ; i ++ ) { if ( <unk> [ i ] > <unk> ) { <unk> = <unk> [ i ] ; } } } int main ( ) { int testCases ; int lineNumber ; int i = <int> ; int j = <int> ; int k = <int> ; int l = <int> ; int * array ; int large = <int> ; int sum = <int> ; scanf ( <str> , & testCases ) ; for ( i ; i < testCases ; i ++ ) { scanf ( <str> , & lineNumber ) ; for ( j ; j < lineNumber ; j ++ ) { array = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & array [ i ] ) ; } large = max ( array , j + <int> ) ; sum += large ; } printf ( <str> , sum - <int> ) ; } return <int> ; }", "label": 1, "id": 3013}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) { if ( j <= i ) scanf ( <str> , & a [ i ] [ j ] ) ; else a [ i ] [ j ] = <int> ; } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 2, "id": 3014}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t , a , b , n , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; n = gcd ( a , b ) ; l = ( a * b ) / n ; printf ( <str> , n , l ) ; } return <int> ; }", "label": 1, "id": 3015}
{"input": "long int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; int p , q ; scanf ( <str> , & t ) ; assert ( t <= <int> && t >= <int> ) ; while ( t -- ) { scanf ( <str> , & p , & q ) ; long int g = gcd ( p , q ) ; long long int l = ( p * q ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3016}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; long int a [ n ] ; long long int c = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) { c ++ ; } else { break ; } } } printf ( <str> , c + n ) ; } return <int> ; }", "label": 0, "id": 3017}
{"input": "int maxValue = <int> ; int maxPath ( int * input , int row , int pos , int n , int curMax ) { int r = row * ( row - <int> ) / <int> ; if ( row > n ) { if ( curMax > maxValue ) maxValue = curMax ; return <int> ; } int v1 = * ( input + r + pos - <int> ) , v2 = * ( input + r + pos ) ; maxPath ( input , row + <int> , pos + <int> , n , v2 + curMax ) ; maxPath ( input , row + <int> , pos , n , v1 + curMax ) ; } int main ( ) { int tests , n , i , k ; scanf ( <str> , & tests ) ; int out [ tests ] ; for ( k = <int> ; k < tests ; k ++ ) { maxValue = <int> ; scanf ( <str> , & n ) ; int lenght = n * ( n + <int> ) / <int> ; int input [ lenght ] ; for ( i = <int> ; i < lenght ; i ++ ) { scanf ( <str> , input + i ) ; } maxPath ( input , <int> , <int> , n , <int> ) ; * ( out + k ) = * input + maxValue ; } for ( k = <int> ; k < tests ; k ++ ) { printf ( <str> , * ( out + k ) ) ; } return <int> ; }", "label": 2, "id": 3018}
{"input": "int main ( ) { int t , n , i , sum ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; int a [ n ] ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { sum = sum + a [ i + <int> ] ; } else { sum = sum + a [ i ] ; a [ i + <int> ] = a [ i ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3019}
{"input": "int main ( void ) { long a , b , i , n , hcf , lcm , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( i = <int> ; i < b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; } } } if ( b > a ) { for ( i = <int> ; i < a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; } } } for ( j = a ; j <= ( a * b ) ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { lcm = j ; break ; } } printf ( <str> , hcf , lcm ) ; } return ( <int> ) ; }", "label": 2, "id": 3020}
{"input": "int gcd ( int a , int b ) { int temp ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( void ) { int t ; int a , b , g , l ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 1, "id": 3021}
{"input": "unsigned int numRows = <int> ; char * * data = NULL ; void AllocateMem ( ) { int i ; data = ( char * * ) malloc ( numRows * sizeof ( char * ) ) ; for ( i = <int> ; i < numRows ; i ++ ) { data [ i ] = ( char * ) malloc ( ( <int> + i ) * sizeof ( char ) ) ; } } void ReadInput ( ) { int i = <int> , j = <int> ; scanf ( <str> , & numRows ) ; fflush ( stdin ) ; AllocateMem ( ) ; for ( i = <int> ; i < numRows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & data [ i ] [ j ] ) ; fflush ( stdin ) ; } } } int AnalyseData ( ) { int * sum = NULL ; sum = ( int * ) malloc ( numRows * sizeof ( int ) ) ; int i = <int> , col = <int> ; int max = <int> ; for ( col = <int> ; col < numRows ; col ++ ) { sum [ col ] = data [ col ] [ col ] ; for ( i = col + <int> ; i < numRows ; i ++ ) { if ( data [ i ] [ col ] > data [ i ] [ col + <int> ] ) sum [ col ] += data [ i ] [ col ] ; else sum [ col ] += data [ i ] [ col + <int> ] ; } } for ( i = <int> ; i < numRows ; i ++ ) { if ( max < sum [ i ] ) max = sum [ i ] ; } free ( sum ) ; printf ( <str> , max ) ; } void FreeMem ( ) { int i ; for ( i = <int> ; i < numRows ; i ++ ) { free ( data [ i ] ) ; } free ( data ) ; data = NULL ; } int main ( ) { unsigned int numTestCases = <int> ; int i = <int> , j = <int> ; scanf ( <str> , & numTestCases ) ; fflush ( stdin ) ; for ( i = <int> ; i < numTestCases ; i ++ ) { ReadInput ( ) ; AnalyseData ( ) ; FreeMem ( ) ; numRows = <int> ; } }", "label": 3, "id": 3022}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; int GCD = gcd ( a , b ) ; int LCM = lcm ( a , b ) ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 1, "id": 3023}
{"input": "int main ( ) { int a [ max ] , i , min , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ <int> ] ; else if ( i > <int> && a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 3024}
{"input": "int readNum ( ) ; int main ( ) { int T ; T = readNum ( ) ; while ( T -- > <int> ) { int N = readNum ( ) ; int i = N ; int min ; min = readNum ( ) ; while ( -- i > <int> ) { int new = readNum ( ) ; if ( new < min ) min = new ; } long long int answer = min * ( N - <int> ) ; printf ( <str> , answer ) ; } return <int> ; } int readNum ( ) { char c ; int num = <int> ; c = getchar ( ) ; while ( c != <char> && c != <char> ) { num = num * <int> + ( c - <char> ) ; c = getchar ( ) ; } return num ; }", "label": 2, "id": 3025}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , x1 , x2 , hcf , lcm , c ; scanf ( <str> , & a , & b ) ; if ( a > b ) { x2 = a ; x1 = b ; } else { x2 = b ; x1 = a ; } while ( x2 % x1 != <int> ) { c = x2 ; x2 = x1 ; x1 = c % x1 ; } hcf = x1 ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 3026}
{"input": "void main ( ) { int add [ <int> ] , i , j , lines , k , test , sum = <int> , n , large = <int> , cout = <int> , p [ <int> ] ; scanf ( <str> , & test ) ; add [ <int> ] = <int> ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { cout ++ ; for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & n ) ; sum = sum + n ; if ( sum > large ) { large = sum ; p [ i ] = cout ; } else if ( sum == large ) { large = sum ; p [ i ] = cout - <int> ; } } sum = <int> ; } } for ( i = <int> ; i < test ; i ++ ) { printf ( <str> , p [ i ] + test + i ) ; } }", "label": 1, "id": 3027}
{"input": "int hcf ( int n1 , int n2 ) { if ( n2 != <int> ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int A [ <int> ] , B [ <int> ] , C [ <int> ] , D [ <int> ] , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & A [ i ] , & B [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { C [ <int> ] = hcf ( A [ i ] , B [ i ] ) ; D [ <int> ] = ( A [ i ] * B [ i ] ) / C [ i ] ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , C [ i ] , D [ i ] ) ; } return <int> ; }", "label": 3, "id": 3028}
{"input": "int main ( ) { int t , n , i , j , k , mat [ <int> ] [ <int> ] , sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & mat [ j ] [ k ] ) ; } } sum = mat [ <int> ] [ <int> ] ; k = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( mat [ j ] [ k ] > mat [ j ] [ k + <int> ] ) { sum = sum + mat [ j ] [ k ] ; } else { sum = sum + mat [ j ] [ k + <int> ] ; k = k + <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3029}
{"input": "int maxi ( int a , int b ) { return a < b ? b : a ; } int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( <str> , & n ) ; int vec1 [ n + <int> ] [ n + <int> ] ; int vec2 [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; vec2 [ <int> ] [ <int> ] = vec1 [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else if ( j == i ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } else if ( vec2 [ i - <int> ] [ j ] > vec2 [ i - <int> ] [ j - <int> ] ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } } } max = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( vec2 [ n ] [ i ] > max ) max = vec2 [ n ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3030}
{"input": "int main ( void ) { int t , gcd , lcm , i , n1 , n2 , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 <= n2 ) x = n1 ; else x = n2 ; for ( i = x ; i >= <int> ; i -- ) { if ( n1 % i == <int> && n2 % i == <int> ) { gcd = i ; break ; } } lcm = n1 * n2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3031}
{"input": "int mat [ <int> ] [ <int> ] ; int maximum ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int testcase , n , i , sum = <int> , max = <int> , j , k ; scanf ( <str> , & testcase ) ; for ( i = <int> ; i < testcase ; i ++ ) { sum = <int> ; max = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( k <= j ) scanf ( <str> , & mat [ j ] [ k ] ) ; else { mat [ j ] [ k ] = <int> ; } if ( j > <int> && k > <int> ) { mat [ j ] [ k ] = maximum ( mat [ j - <int> ] [ k ] , mat [ j - <int> ] [ k - <int> ] ) + mat [ j ] [ k ] ; } else if ( j > <int> ) { mat [ j ] [ k ] = mat [ j ] [ k ] + mat [ j - <int> ] [ k ] ; } if ( max < mat [ j ] [ k ] ) max = mat [ j ] [ k ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3032}
{"input": "int main ( ) { int t , i ; long long int a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int temp ; long long int x = a , y = b ; while ( b ) { temp = a % b ; a = b ; b = temp ; } printf ( <str> , a ) ; printf ( <str> , ( x * y / a ) ) ; } return <int> ; }", "label": 1, "id": 3033}
{"input": "int fastscan ( ) { char c ; int t = <int> ; while ( ( c = g ) < <int> ) ; while ( ( <char> <= c ) && ( c <= <char> ) ) { t = ( t << <int> ) + ( t << <int> ) + ( c - <char> ) ; c = g ; } return t ; } int main ( ) { int T ; int ans [ <int> ] ; int sums [ <int> ] ; int i , j ; int Tc ; int n ; int num [ <int> ] ; T = fastscan ( ) ; Tc = T ; while ( Tc -- ) { n = fastscan ( ) ; memset ( ( void * ) sums , <int> , n * sizeof ( sums [ <int> ] ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { num [ j ] = fastscan ( ) ; } for ( j = i ; j >= <int> ; j -- ) { sums [ j ] = MAX ( sums [ j ] + num [ j ] , sums [ j - <int> ] + num [ j ] ) ; } sums [ <int> ] += num [ <int> ] ; } ans [ Tc ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { ans [ Tc ] = MAX ( sums [ i ] , ans [ Tc ] ) ; } } while ( T -- ) { printf ( <str> , ans [ T ] ) ; } return <int> ; }", "label": 1, "id": 3034}
{"input": "long int gcd ( long int x , long int y ) ; long int gcd ( long int x , long int y ) { if ( y != <int> ) { return gcd ( y , ( x % y ) ) ; } else { return x ; } } int main ( ) { int t ; long int a ; long int b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( ( a * b ) / gcd ( a , b ) ) ) ; } return <int> ; }", "label": 0, "id": 3035}
{"input": "int T , n ; int A [ <int> ] [ <int> ] ; int maxupto ( int i , int j ) { if ( i == n - <int> ) return A [ i ] [ j ] ; else { int a = maxupto ( i + <int> , j ) ; int b = maxupto ( i + <int> , j + <int> ) ; return A [ i ] [ j ] + ( a > b ? a : b ) ; } } int main ( ) { register int i , j ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; printf ( <str> , maxupto ( <int> , <int> ) ) ; T -- ; } return <int> ; }", "label": 2, "id": 3036}
{"input": "int gcd ( int a , int b ) { while ( b != <int> ) { int r = b % a ; b = a ; a = r ; } printf ( <str> , a ) ; } main ( ) { int a , b , t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } gcd ( a , b ) ; printf ( <str> , a * b / gcd ( a , b ) ) ; } }", "label": 3, "id": 3037}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , b = <int> , i ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; b = b > a [ i ] ? a [ i ] : b ; } b = b * ( n - <int> ) ; printf ( <str> , b ) ; } }", "label": 0, "id": 3038}
{"input": "int a [ <int> ] [ <int> ] , k , c [ <int> ] [ <int> ] ; int f ( int i , int j ) { int sum , m1 , m2 ; if ( i < k ) { if ( ! c [ i ] [ j ] ) { m1 = f ( i + <int> , j ) ; m2 = f ( i + <int> , j + <int> ) ; sum = a [ i ] [ j ] + MAX ( m1 , m2 ) ; c [ i ] [ j ] = sum ; } return c [ i ] [ j ] ; } else return <int> ; } int main ( ) { int i , ii , j , l ; scanf ( <str> , & i ) ; while ( i -- ) { scanf ( <str> , & k ) ; for ( j = <int> ; j < k ; j ++ ) { for ( l = <int> ; l <= j ; l ++ ) { scanf ( <str> , & a [ j ] [ l ] ) ; c [ i ] [ j ] = <int> ; } } printf ( <str> , f ( <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 3039}
{"input": "int main ( ) { int T , i ; scanf ( <str> , & T ) ; while ( T -- ) { long long A , B , GCD , LCM ; scanf ( <str> , & A , & B ) ; for ( i = <int> ; i <= A && i <= B ; i ++ ) { if ( A % i == <int> && B % i == <int> ) GCD = i ; } LCM = ( A * B ) / GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 2, "id": 3040}
{"input": "int matrix [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int n , sum = <int> , number ; scanf ( <str> , & number ) ; while ( number -- ) { scanf ( <str> , & n ) ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } if ( i - <int> >= <int> && i >= j ) { if ( j - <int> >= <int> ) { if ( matrix [ i - <int> ] [ j ] > matrix [ i - <int> ] [ j - <int> ] ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] + matrix [ i - <int> ] [ j ] ; } else { matrix [ i ] [ j ] = matrix [ i ] [ j ] + matrix [ i - <int> ] [ j - <int> ] ; } } else { matrix [ i ] [ j ] = matrix [ i ] [ j ] + matrix [ i - <int> ] [ j ] ; } } } } for ( i = <int> ; i < n ; i ++ ) { if ( sum < matrix [ n - <int> ] [ i ] ) { sum = matrix [ n - <int> ] [ i ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3041}
{"input": "int main ( ) { long long int a , b , t , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long long int p = a , q = b , lcm ; while ( b % a != <int> ) { r = b % a ; b = a ; a = r ; } printf ( <str> , a ) ; lcm = ( p * q ) / a ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 0, "id": 3042}
{"input": "int main ( ) { long long int a , b , x , y , t ; int n ; long long int gcd , lcm ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; if ( x == <int> || y == <int> ) return <int> ; else { while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } } return <int> ; }", "label": 1, "id": 3043}
{"input": "int main ( ) { int t , i , a , b , c , d , e , f , rem , lcm , gcd , num , den ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; scanf ( <str> , & c , & d ) ; if ( c > d ) { num = c ; den = d ; } else { num = d ; den = c ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = c * d / gcd ; printf ( <str> , gcd , lcm ) ; scanf ( <str> , & e , & f ) ; if ( e > f ) { num = e ; den = f ; } else { num = f ; den = e ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = c * d / gcd ; printf ( <str> , gcd , lcm ) ; return <int> ; }", "label": 3, "id": 3044}
{"input": "int findmin ( int * A , int N , int min ) { int i ; min = A [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( min > A [ i ] ) { min = A [ i ] ; } } return min ; } int main ( ) { int T , i , j , k , A [ <int> ] , min ; long int N ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { min = <int> ; scanf ( <str> , & N ) ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & A [ j ] ) ; } k = findmin ( A , N , min ) ; printf ( <str> , ( N - <int> ) * k ) ; } return <int> ; }", "label": 0, "id": 3045}
{"input": "long long int hcf ( long long int A , long long int B ) ; long long int lcm ( long long int A , long long int B , long long int C ) ; int T ; long long int A , B ; int main ( ) { long long int e , f ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; e = hcf ( A , B ) ; f = lcm ( A , B , e ) ; printf ( <str> , e , f ) ; } return <int> ; } long long int hcf ( long long int a , long long int b ) { if ( a % b == <int> ) return b ; else return ( hcf ( b , ( a % b ) ) ) ; } long long int lcm ( long long int a , long long int b , long long int c ) { long long int lcm ; lcm = ( a * b ) / ( c ) ; return lcm ; }", "label": 0, "id": 3046}
{"input": "int main ( ) { int num [ <int> ] [ <int> ] , i , n , j , t , max ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) { num [ i ] [ <int> ] = <int> ; num [ i ] [ <int> ] = <int> ; } scanf ( <str> , & n ) ; { for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & num [ j ] [ <int> ] ) ; for ( j = i ; j > <int> ; j -- ) if ( num [ j ] [ <int> ] > num [ j - <int> ] [ <int> ] ) num [ j ] [ <int> ] = num [ j ] [ <int> ] + num [ j ] [ <int> ] ; else num [ j ] [ <int> ] = num [ j - <int> ] [ <int> ] + num [ j ] [ <int> ] ; num [ <int> ] [ <int> ] = num [ <int> ] [ <int> ] + num [ <int> ] [ <int> ] ; } max = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( max < num [ i ] [ <int> ] ) max = num [ i ] [ <int> ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3047}
{"input": "int main ( ) { int n1 , n2 , k , i , minMultiple , gcd ; printf ( <str> ) ; scanf ( <str> , & n1 , & n2 ) ; minMultiple = ( n1 > n2 ) ? n1 : n2 ; while ( <int> ) { if ( minMultiple % n1 == <int> && minMultiple % n2 == <int> ) { k = minMultiple ; break ; } ++ minMultiple ; } printf ( <str> , k ) ; for ( i = <int> ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } printf ( <str> , gcd ) ; printf ( <str> ) ; return <int> ; }", "label": 1, "id": 3048}
{"input": "int m , i , j , k , l , t , n , * p , * q , s , b [ <int> ] ; int z ( int a , int b ) { return a > b ? a : b ; } void assert2 ( int b ) { if ( ! b ) while ( <int> ) { } } void f ( ) { p ++ , i ++ , k ++ ; if ( k == j ) k = <int> , j ++ , p -- ; q = p - <int> ; } int main ( ) { scanf ( <str> , & m ) ; while ( m -- ) { scanf ( <str> , & n ) ; for ( i = k = l = <int> , j = <int> , p = b ; i < ( n * n + n ) / <int> ; f ( ) ) { t = scanf ( <str> , & s ) ; l = z ( l , ( b [ i ] = s + ( ( <int> < i ) ? ( ( <int> < k ) ? ( ( k < j - <int> ) ? z ( * p , * q ) : * q ) : * p ) : <int> ) ) ) ; } printf ( <str> , l ) ; } }", "label": 0, "id": 3049}
{"input": "int main ( ) { int e , c , a , b ; scanf ( <str> , & e ) ; while ( e != <int> ) { scanf ( <str> , & a , & b ) ; c = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , c / a ) ; e -- ; } return <int> ; }", "label": 1, "id": 3050}
{"input": "int main ( ) { int T , i ; int a [ <int> ] , n , c ; long int min ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & n ) ; for ( c = <int> ; c < n ; c ++ ) { scanf ( <str> , & a [ c ] ) ; } min = a [ <int> ] ; for ( c = <int> ; c < n ; c ++ ) { if ( a [ c ] < min ) { min = a [ c ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 3051}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , j , k , a [ <int> ] , f , min , c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = i ; j < n ; j ++ ) { f = <int> ; for ( k = i ; k <= j ; k ++ ) { if ( k == i ) { min = a [ k ] ; } else if ( min > a [ k ] ) { f = <int> ; break ; } else { min = a [ k ] ; } } if ( f == <int> ) { c ++ ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 3052}
{"input": "int t ; int main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { long a , b , c , i , d , e , f = <int> , g , j = <int> ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) { c = b ; b = a ; a = c ; } for ( i = <int> ; i <= a ; i ++ ) { d = a % i ; e = b % i ; if ( d == <int> && e == <int> ) { f = i ; } } printf ( <str> , f ) ; for ( j = ( a * b ) ; j >= b ; j -- ) { d = j % a ; e = j % b ; if ( d == <int> && e == <int> ) { g = j ; } } printf ( <str> , g ) ; } }", "label": 2, "id": 3053}
{"input": "int main ( ) { int t , a , b , u , v , gcd , lcd ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & a , & b ) ; u = a ; v = b ; while ( u != v ) { if ( u > v ) { u = u - v ; } if ( v > u ) { v = v - u ; } } gcd = u ; lcd = ( a * b ) / gcd ; printf ( <str> , gcd , lcd ) ; t -- ; } }", "label": 1, "id": 3054}
{"input": "int main ( ) { long int i , a , b , t , gcd , lcm ; scanf ( <str> , & t ) ; while ( t > <int> ) { t -- ; gcd = <int> ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3055}
{"input": "int arr [ <int> ] [ <int> ] ; int main ( ) { int j , i , lines , cases , maxv , JT , JR ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } for ( ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i += <int> ) { if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; if ( arr [ lines ] [ i + <int> ] > maxv ) maxv = arr [ lines ] [ i + <int> ] ; } for ( ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; } return <int> ; }", "label": 3, "id": 3056}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , x , y , gcd ) ; printf ( <str> , x , y , lcm ) ; return <int> ; }", "label": 1, "id": 3057}
{"input": "int main ( ) { int T ; long int a , b , min , max , t ; long int lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; min = ( a > b ? b : a ) ; max = ( a > b ? a : b ) ; while ( min ) { t = min ; min = max % min ; max = t ; } lcm = a * b / max ; printf ( <str> , max , lcm ) ; } return <int> ; }", "label": 0, "id": 3058}
{"input": "long int gcd ( long int a , long int b ) { if ( a == <int> || b == <int> ) return <int> ; else if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } long int lcm ( long int a , long int b ) { return ( ( a * b ) / gcd ( a , b ) ) ; } int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 0, "id": 3059}
{"input": "int main ( ) { long long int T , N , i ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; long long int a [ N ] ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; long long int c = a [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( c > a [ i ] ) c = a [ i ] ; } printf ( <str> , c * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3060}
{"input": "int compare ( void * a , void * b ) { int f = * ( ( int * ) a ) ; int s = * ( ( int * ) b ) ; if ( f > s ) return <int> ; if ( f < s ) return - <int> ; } int main ( ) { int arr [ <int> ] ; int i , t , m , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) scanf ( <str> , & arr [ i ] ) ; qsort ( arr , m , sizeof ( int ) , compare ) ; c = arr [ <int> ] * ( m - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 3061}
{"input": "void t_sums ( int sum , int i , int j ) ; int * * element , max , n ; int main ( void ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; element = ( int * * ) calloc ( n , sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) element [ i ] = ( int * ) calloc ( i + <int> , sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & element [ i ] [ j ] ) ; max = <int> ; t_sums ( <int> , <int> , <int> ) ; printf ( <str> , max ) ; for ( i = <int> ; i < n ; i ++ ) free ( element [ i ] ) ; free ( element ) ; } return <int> ; } void t_sums ( int sum , int i , int j ) { if ( i == n - <int> ) { sum += element [ i ] [ j ] ; if ( sum > max ) max = sum ; } else { t_sums ( sum + element [ i ] [ j ] , i + <int> , j ) ; t_sums ( sum + element [ i ] [ j ] , i + <int> , j + <int> ) ; } }", "label": 2, "id": 3062}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; return y ; } void <unk> ( int arr [ <int> ] [ <int> ] , int rown ) { int i , j ; for ( i = <int> ; i < rown ; i ++ ) { arr [ rown - <int> ] [ i ] += max ( arr [ rown ] [ i ] , arr [ rown ] [ i + <int> ] ) ; } } int main ( ) { int arr [ <int> ] [ <int> ] ; int n , t , i , j ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { <unk> ( arr , i ) ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3063}
{"input": "int max ( int x , int y ) { return ( ( x > y ) ? x : y ) ; } int main ( ) { int a , t , n , i , j ; int s [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( a = <int> ; a < t ; a ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & s [ i ] [ j ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { s [ i - <int> ] [ j ] += max ( s [ i ] [ j ] , s [ i ] [ j + <int> ] ) ; } } printf ( <str> , s [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 3064}
{"input": "int main ( ) { int T , N , i , min , j , arr1 [ <int> ] , arr2 [ <int> ] , <unk> [ <int> ] ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & N ) ; if ( N >= <int> && N <= <int> ) { scanf ( <str> , & arr1 [ <int> ] ) ; min = arr1 [ <int> ] ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & arr1 [ j ] ) ; if ( arr1 [ j ] < min ) min = arr1 [ j ] ; } } else if ( N >= <int> && N <= <int> ) { scanf ( <str> , & arr2 [ <int> ] ) ; min = arr2 [ <int> ] ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & arr2 [ j ] ) ; if ( arr2 [ j ] < min ) min = arr2 [ j ] ; } } else if ( N >= <int> && N <= <int> ) { scanf ( <str> , & <unk> [ <int> ] ) ; min = <unk> [ <int> ] ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & <unk> [ j ] ) ; if ( <unk> [ j ] < min ) min = <unk> [ j ] ; } } printf ( <str> , min * ( N - <int> ) ) ; } } return <int> ; }", "label": 0, "id": 3065}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , c , l , i , h ; scanf ( <str> , & a , & b ) ; c = ( a < b ) ? a : b ; for ( i = <int> ; i <= c ; i ++ ) if ( a % i == <int> && b % i == <int> ) h = i ; l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 1, "id": 3066}
{"input": "int main ( ) { int test_cases , rows , i , j , k , no [ <int> ] , sum1 = <int> , row_no , sum = <int> , a = <int> , ps [ <int> ] , l ; short int ns ; scanf ( <str> , & test_cases ) ; for ( k = <int> ; k <= test_cases ; k ++ ) { ns = - <int> ; scanf ( <str> , & rows ) ; for ( i = <int> ; i <= rows * ( rows + <int> ) / <int> ; i ++ ) { ns ++ ; scanf ( <str> , & no [ ns ] ) ; } a = <int> ; for ( i = rows - <int> ; i >= <int> ; i -- ) { row_no = i * ( i - <int> ) / <int> ; a = <int> ; for ( j = row_no ; j < row_no + i ; j ++ ) { if ( no [ row_no + i + a ] >= no [ row_no + i + <int> + a ] ) sum1 = no [ row_no + a ] + no [ row_no + i + a ] ; else sum1 = no [ row_no + a ] + no [ row_no + i + <int> + a ] ; ps [ a ] = sum1 ; a ++ ; } a = <int> ; for ( l = row_no ; l < row_no + i ; l ++ ) { no [ l ] = ps [ a ] ; a ++ ; } } if ( rows != <int> ) { if ( no [ <int> ] >= no [ <int> ] ) sum = no [ <int> ] + no [ <int> ] ; else sum = no [ <int> ] + no [ <int> ] ; printf ( <str> , sum ) ; } else printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 3067}
{"input": "int main ( ) { int n , l , i , sum , count , actsum ; scanf ( <str> , & n ) ; int first ; while ( n ) { scanf ( <str> , & l ) ; int a [ ( l * l + l ) / <int> + <int> ] ; for ( i = <int> ; i <= ( ( l * l + l ) / <int> ) ; i ++ ) { scanf ( <str> , & a [ i - <int> ] ) ; } count = <int> ; actsum = a [ <int> ] + a [ <int> ] + a [ <int> ] ; sum = <int> ; first = a [ <int> ] ; for ( i = <int> ; i < ( ( l * l + l ) / <int> ) ; i ++ ) { sum += a [ i ] + a [ i + <int> ] + first ; first = a [ i ] ; i ++ ; i += count ; count += <int> ; if ( sum >= actsum ) actsum = sum ; sum = <int> ; } printf ( <str> , actsum ) ; n -- ; } return <int> ; }", "label": 1, "id": 3068}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int f = <int> ; printf ( <str> ) ; while ( f <= t ) { int k ; scanf ( <str> , & k ) ; int a [ k ] ; printf ( <str> ) ; int i ; for ( i = <int> ; i < ( k ) ; i ++ ) { scanf ( <str> , & a [ i ] ) ; printf ( <str> ) ; } int min , cost , greater ; for ( i = <int> ; i < ( k - <int> ) ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) greater = a [ i ] ; else greater = a [ i + <int> ] ; } if ( greater > a [ k ] ) cost = a [ k ] ; else cost = greater ; printf ( <str> ) ; printf ( <str> , cost ) ; } }", "label": 2, "id": 3069}
{"input": "int main ( ) { int a , b , t , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) i = b ; else i = a ; for ( ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i , a * b / i ) ; break ; } } } return <int> ; }", "label": 2, "id": 3070}
{"input": "int main ( ) { int cases , arr [ <int> ] [ <int> ] , i , j , k , rows ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { int ans = <int> ; scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } for ( k = <int> ; k <= j && j != <int> ; k ++ ) { if ( k == <int> ) { arr [ j ] [ k ] = arr [ j ] [ k ] + arr [ j - <int> ] [ k ] ; } else if ( k == ( j ) ) { arr [ j ] [ k ] = arr [ j ] [ k ] + arr [ j - <int> ] [ k - <int> ] ; } else { if ( ( arr [ j - <int> ] [ k - <int> ] ) > ( arr [ j - <int> ] [ k ] ) ) { arr [ j ] [ k ] = arr [ j - <int> ] [ k - <int> ] + arr [ j ] [ k ] ; } else { arr [ j ] [ k ] = arr [ j - <int> ] [ k ] + arr [ j ] [ k ] ; } } } for ( k = <int> ; k < rows ; k ++ ) { printf ( <str> , arr [ j ] [ k ] ) ; } printf ( <str> ) ; } for ( j = <int> ; j < rows ; j ++ ) { if ( arr [ rows - <int> ] [ j ] > ans ) { ans = arr [ rows - <int> ] [ j ] ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 3071}
{"input": "int main ( ) { int t , n , j , i ; int arr [ <int> ] ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { int min ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 3072}
{"input": "int gcd ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , lcm ; scanf ( <str> , & a , & b ) ; lcm = ( a * b / gcd ( a , b ) ) ; printf ( <str> , gcd ( a , b ) , lcm ) ; } return <int> ; } int gcd ( int a , int b ) { long long int t ; int f = <int> ; if ( a % b != <int> ) { t = a ; a = b ; b = t % b ; f = <int> ; } if ( f == <int> ) return ( b ) ; else return ( a ) ; }", "label": 1, "id": 3073}
{"input": "int main ( ) { char n [ <int> ] , row [ <int> ] ; int no_of_rows = <int> , i = <int> , largest = <int> , k = <int> , sum = <int> , t = <int> ; scanf ( <str> , & t ) ; fflush ( stdin ) ; while ( t -- ) { fgets ( n , <int> , stdin ) ; sscanf ( n , <str> , & no_of_rows ) ; while ( no_of_rows -- ) { fgets ( row , <int> , stdin ) ; largest = <int> ; if ( strlen ( row ) == <int> ) continue ; for ( i = <int> ; i <= strlen ( row ) - <int> ; i ++ ) { if ( row [ i ] != <char> || row [ i ] != <char> ) { k = row [ i ] - <char> ; if ( k > largest ) largest = k ; } } sum += largest ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 3074}
{"input": "int fastscan ( ) { char c ; int t = <int> ; while ( ( <char> <= ( c = g ) ) && ( c <= <char> ) ) { t = ( t << <int> ) + ( t << <int> ) + ( c - <char> ) ; } return t ; } int main ( ) { int T ; int ans [ <int> ] ; int sums [ <int> ] ; int i , j ; int Tc ; int n ; int num [ <int> ] ; T = fastscan ( ) ; Tc = T ; while ( Tc -- ) { n = fastscan ( ) ; memset ( ( void * ) sums , <int> , n * sizeof ( sums [ <int> ] ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { num [ j ] = fastscan ( ) ; } for ( j = i ; j >= <int> ; j -- ) { sums [ j ] = MAX ( sums [ j ] + num [ j ] , sums [ j - <int> ] + num [ j ] ) ; } sums [ <int> ] += num [ <int> ] ; } ans [ Tc ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { ans [ Tc ] = MAX ( sums [ i ] , ans [ Tc ] ) ; } } while ( T -- ) { printf ( <str> , ans [ T ] ) ; } return <int> ; }", "label": 1, "id": 3075}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , n , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 3076}
{"input": "int main ( ) { int tst , check = <int> , i , j , k , s , f ; long int num ; scanf ( <str> , & tst ) ; while ( check < tst ) { scanf ( <str> , & num ) ; long int a [ num ] , store [ num * ( num + <int> ) / <int> ] [ num ] ; for ( i = <int> ; i < num ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int count = <int> ; int s = <int> ; for ( i = <int> ; i < num ; i ++ ) { for ( j = i ; j < num ; j ++ ) { int f = <int> ; for ( k = i ; k <= j ; k ++ ) { store [ count ] [ k ] = a [ k ] ; if ( i == j ) { s ++ ; } else if ( k > i && ( store [ count ] [ k ] >= store [ count ] [ k - <int> ] ) ) { f ++ ; if ( f == ( j - i ) ) { s ++ ; } } } count ++ ; } } printf ( <str> , s ) ; check ++ ; } }", "label": 3, "id": 3077}
{"input": "int main ( void ) { int grt , n , m , k , i , j ; scanf ( <str> , & n ) ; while ( n != <int> ) { scanf ( <str> , & m ) ; int a [ m ] [ m ] ; int b [ m + <int> ] [ <int> * m ] ; for ( i = <int> ; i < m + <int> ; i ++ ) { for ( j = <int> ; j < <int> * m ; j ++ ) { if ( i <= m - <int> && j <= m - <int> ) a [ i ] [ j ] = <int> ; b [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < m - <int> ; i ++ ) { k = <int> ; for ( j = <int> ; j <= i ; j ++ ) { b [ i + <int> ] [ k ++ ] = b [ i ] [ j ] + a [ i + <int> ] [ j ] ; b [ i + <int> ] [ k ++ ] = b [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } grt = b [ m - <int> ] [ <int> ] ; for ( j = <int> ; j < <int> * m ; j ++ ) { if ( grt < b [ m - <int> ] [ j ] ) { grt = b [ m - <int> ] [ j ] ; } } printf ( <str> , grt ) ; n -- ; } return <int> ; }", "label": 1, "id": 3078}
{"input": "int a [ <int> ] [ <int> ] , n ; int sum ( ) ; int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , sum ( ) ) ; } return <int> ; } int sum ( ) { int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; return a [ <int> ] [ <int> ] ; }", "label": 0, "id": 3079}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , j , count = <int> , k ; scanf ( <str> , & n ) ; long long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { k = arr [ i ] ; for ( j = i ; j < n ; j ++ ) { if ( arr [ j ] >= k ) { count ++ ; k = arr [ j ] ; } else { k = <int> ; break ; } } } printf ( <str> , count ) ; } }", "label": 0, "id": 3080}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int i , n , j , k , min , a [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 3081}
{"input": "int main ( ) { long long int tc , n , a [ <int> ] , i , count = <int> ; scanf ( <str> , & tc ) ; while ( tc > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; count = count + i ; } printf ( <str> , count ) ; tc -- ; } }", "label": 3, "id": 3082}
{"input": "int main ( ) { int dong ; scanf ( <str> , & dong ) ; while ( dong -- ) { int mang [ <int> ] ; int sopt , i = <int> , j = <int> ; scanf ( <str> , & sopt ) ; while ( i < sopt ) { scanf ( <str> , & mang [ i ] ) ; i ++ ; } int min = mang [ <int> ] ; while ( j < sopt ) { if ( mang [ j ] < min ) min = mang [ j ] ; j ++ ; } printf ( <str> , min ) ; } return <int> ; }", "label": 1, "id": 3083}
{"input": "int main ( ) { int t , a [ <int> ] , i , r , c , m , n , mat [ <int> ] [ <int> ] , sum = <int> ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { r = a [ i ] ; c = a [ i ] ; for ( m = <int> ; m < r ; m ++ ) { for ( n = <int> ; n < c ; n ++ ) { if ( m == n ) { sum = sum + mat [ r ] [ c ] ; } } } } printf ( <str> , & sum ) ; return <int> ; }", "label": 1, "id": 3084}
{"input": "main ( ) { long long int i , k , j , n , t , s , temp , min ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & s ) ; int a [ s ] ; for ( j = <int> ; j < s ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < <int> ) { break ; } } min = a [ <int> ] ; for ( k = <int> ; k < s ; k ++ ) { if ( min > a [ k ] ) { temp = min ; min = a [ k ] ; a [ k ] = temp ; } } printf ( <str> , min * ( s - <int> ) ) ; } }", "label": 1, "id": 3085}
{"input": "int main ( ) { long t , a , b , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { lcm = <int> ; gcd = <int> ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i < a ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3086}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { unsigned int a , b ; scanf ( <str> , & a , & b ) ; int c = a ; if ( b > a ) c = b ; int f = <int> ; for ( int i = c ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { f = i ; break ; } } printf ( <str> , f ) ; c = a ; if ( b < a ) c = b ; f = <int> ; for ( int i = c ; i <= ( a * b ) ; i ++ ) { if ( i % a == <int> && i % b == <int> ) { f = i ; break ; } } printf ( <str> , f ) ; } }", "label": 2, "id": 3087}
{"input": "int main ( ) { int t , l , a [ <int> ] [ <int> ] = { <int> } , sum1 , sum2 , big , i , j , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; x = <int> ; big = <int> ; for ( j = <int> ; j < l ; j ++ ) { if ( a [ l - <int> ] [ j ] > big ) { big = a [ l - <int> ] [ j ] ; x = j ; } } sum1 = big ; for ( i = l - <int> ; i >= <int> ; i -- ) { big = <int> ; j = x ; if ( a [ i ] [ j ] < a [ i ] [ j - <int> ] ) { x = j - <int> ; big = a [ i ] [ j - <int> ] ; } else { x = j ; big = a [ i ] [ j ] ; } sum1 += big ; } x = <int> , sum2 = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) { big = <int> ; j = x ; if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) { x = j + <int> ; big = a [ i ] [ j + <int> ] ; } else { x = j ; big = a [ i ] [ j ] ; } sum2 += big ; } if ( sum1 > sum2 ) printf ( <str> , sum1 ) ; else printf ( <str> , sum2 ) ; } return <int> ; }", "label": 1, "id": 3088}
{"input": "int main ( ) { int b [ <int> ] [ <int> ] , a [ <int> ] , i , j , n , k = <int> , x [ <int> ] = { <int> } , t , m , n1 , n2 ; a [ <int> ] = <int> ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } a [ <int> ] = b [ <int> ] [ <int> ] ; a [ <int> ] = b [ <int> ] [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = b [ <int> ] [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { n1 = ( ( i - <int> ) * ( i - <int> ) ) - i + j + <int> ; a [ k ] = b [ i ] [ j ] + a [ n1 ] ; ++ k ; n2 = ( ( i - <int> ) * ( i - <int> ) ) - i + j + <int> ; a [ k ] = b [ i ] [ j + <int> ] + a [ n2 ] ; ++ k ; } } for ( i = <int> ; i < n * n + <int> ; i ++ ) { if ( x [ m ] < a [ i ] ) { x [ m ] = a [ i ] ; } } } i = <int> ; while ( i < t ) { printf ( <str> , x [ i ] ) ; i ++ ; } return <int> ; }", "label": 1, "id": 3089}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t ) { int i , n ; scanf ( <str> , & n ) ; long int arr [ n ] , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; t -- ; } return <int> ; }", "label": 0, "id": 3090}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned int n , i ; scanf ( <str> , & n ) ; unsigned int a [ n ] , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3091}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; int a , b ; int l , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3092}
{"input": "int a [ <int> ] ; int main ( ) { int t , i , j , s ; long long int c , n , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; s = <int> ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } b = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( b > a [ j ] ) { b = a [ j ] ; } } c = b * ( n - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 3093}
{"input": "int gcd ( int , int ) ; int main ( ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { int m , p , l , g ; scanf ( <str> , & m , & p ) ; g = gcd ( m , p ) ; l = ( m * p ) / g ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( int m , int n ) { if ( m % n == <int> ) return n ; else return gcd ( n , m % n ) ; }", "label": 1, "id": 3094}
{"input": "int gcd ( int x , int y ) { if ( y == <int> ) return x ; else return gcd ( y , x % y ) ; } int main ( ) { int n ; int a , b , c , d ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = a * b / c ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 1, "id": 3095}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , tree [ <int> ] [ <int> ] , weight [ <int> ] [ <int> ] ; int i , j , k , x ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & x ) ; tree [ i - <int> ] [ j ] = x ; weight [ i - <int> ] [ j ] = <int> ; } } weight [ <int> ] [ <int> ] = tree [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( weight [ i + <int> ] [ j ] < weight [ i ] [ j ] + tree [ i + <int> ] [ j ] ) weight [ i + <int> ] [ j ] = weight [ i ] [ j ] + tree [ i + <int> ] [ j ] ; if ( weight [ i + <int> ] [ j + <int> ] < weight [ i ] [ j ] + tree [ i + <int> ] [ j + <int> ] ) weight [ i + <int> ] [ j + <int> ] = weight [ i ] [ j ] + tree [ i + <int> ] [ j + <int> ] ; } } int max = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( weight [ n - <int> ] [ i ] > max ) max = weight [ n - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3096}
{"input": "int a [ <int> ] [ <int> ] ; int b [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int t , n , i , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { k = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } k ++ ; } for ( j = n - <int> ; j >= <int> ; j -- ) b [ n - <int> ] [ j ] = a [ n - <int> ] [ j ] ; k = n - <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = k ; j >= <int> ; j -- ) { b [ i ] [ j ] = max ( ( b [ i + <int> ] [ j ] + a [ i ] [ j ] ) , ( b [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ) ) ; } k -- ; } printf ( <str> , b [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3097}
{"input": "int fastread ( ) { int input ; char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; input = <int> ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ <int> ] [ <int> ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3098}
{"input": "int a [ <int> ] [ <int> ] ; int max ( int s1 , int s2 ) { if ( s1 >= s2 ) return s1 ; else return s2 ; } int sum ( int i , int j , int n ) { int s1 , s2 , s ; if ( i >= n ) return <int> ; s1 = sum ( i + <int> , j , n ) ; s2 = sum ( i + <int> , j + <int> , n ) ; s = a [ i ] [ j ] + max ( s1 , s2 ) ; return s ; } main ( ) { int t , n ; int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , sum ( <int> , <int> , n ) ) ; } return <int> ; }", "label": 2, "id": 3099}
{"input": "int main ( ) { int a , b , n , i , l , x , y , t ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> ) ; x = a ; y = b ; while ( y != <int> ) { t = y ; y = x % y ; x = t ; } l = ( a * b ) / y ; printf ( <str> , y , l ) ; } return <int> ; }", "label": 3, "id": 3100}
{"input": "int main ( ) { int t ; long int a , b , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; while ( a != b ) { if ( a > b ) a = a - b ; if ( b > a ) b = b - a ; } } printf ( <str> , a ) ; lcm = ( a * b ) / a ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 3101}
{"input": "int main ( ) { long long int T , N , * arr , i , j , k , ctr , count , * counts , ptr ; scanf ( <str> , & T ) ; counts = malloc ( sizeof ( long long int ) * T ) ; for ( i = <int> ; i < T ; i ++ ) { ctr = <int> , count = <int> ; scanf ( <str> , & N ) ; arr = malloc ( sizeof ( long long int ) * N ) ; for ( j = <int> ; j < N ; j ++ ) scanf ( <str> , & arr [ j ] ) ; printf ( <str> ) ; ptr = <int> ; while ( ptr < N ) { ctr = <int> ; j = ptr ; while ( j < N - <int> ) if ( arr [ j ] < arr [ j + <int> ] ) { j ++ ; ctr ++ ; } else break ; for ( k = ctr ; k >= <int> ; k -- ) count = count + k ; ptr = j + <int> ; } counts [ i ] = count ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , counts [ i ] ) ; return <int> ; }", "label": 1, "id": 3102}
{"input": "int a [ <int> ] ; int main ( void ) { int t , n , i , mn ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; mn = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < mn ) mn = a [ i ] ; } printf ( <str> , ( mn * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 3103}
{"input": "void swap ( int x , int y ) ; int main ( ) { int a [ <int> ] , t , s = <int> ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , k ; printf ( <str> ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= n - <int> - i ; j ++ ) { if ( a [ j + <int> ] < a [ j ] ) swap ( a [ j + <int> ] , a [ j ] ) ; } } for ( k = <int> ; k < n ; k ++ ) { if ( k == <int> ) break ; if ( a [ k ] < a [ k + <int> ] ) { s += a [ i ] ; swap ( a [ k ] , a [ k + <int> ] ) ; } else s += a [ i + <int> ] ; } printf ( <str> , s ) ; } return <int> ; } void swap ( int x , int y ) { int z ; z = x ; x = y ; y = z ; return ; }", "label": 3, "id": 3104}
{"input": "int main ( ) { int t , n , i , j , k , a , b ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k < n - <int> ; k ++ ) { a = arr [ j ] [ k ] + arr [ j + <int> ] [ k ] ; b = arr [ j ] [ k ] + arr [ j + <int> ] [ k + <int> ] ; arr [ j ] [ k ] = a > b ? a : b ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3105}
{"input": "int main ( ) { int t , i , n , a [ <int> ] , x = <int> , y = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] > a [ i ] ) x = x + a [ i ] ; else y = y + a [ i - <int> ] ; } printf ( <str> , x + y ) ; } return <int> ; }", "label": 3, "id": 3106}
{"input": "long long int gcd ( long long int a , long long int b ) { long long int rem , div ; rem = a % b ; div = b ; if ( rem == <int> ) return div ; else gcd ( div , rem ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int gc , lcm , a , b ; scanf ( <str> , & a , & b ) ; gc = gcd ( a , b ) ; lcm = ( a * b ) / gc ; printf ( <str> , gc , lcm ) ; } }", "label": 0, "id": 3107}
{"input": "int main ( ) { int a , b , g , l , remainder , numerator , denominator , n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; numerator = a ; denominator = b ; remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } g = denominator ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3108}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int aa [ n ] , i , total = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & aa [ i ] ) ; } while ( n > <int> ) { if ( aa [ n - <int> ] > aa [ n - <int> ] ) { total += aa [ n - <int> ] ; aa [ n - <int> ] = aa [ n - <int> ] ; n -- ; } else { total += aa [ n - <int> ] ; n -- ; } } printf ( <str> , total ) ; } return <int> ; }", "label": 1, "id": 3109}
{"input": "int gc ( int , int ) ; int main ( ) { int n , a , b , g , l ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; g = gc ( a , b ) ; l = a * b / g ; printf ( <str> , g , l ) ; } } int gc ( int a , int b ) { if ( b = <int> ) { return a ; } else { gc ( b , a % b ) ; } }", "label": 3, "id": 3110}
{"input": "int main ( ) { int a , b , t , c ; int num , den , rem ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { den = a ; num = b ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } printf ( <str> , den ) ; c = ( a > b ) ? a : b ; while ( <int> ) { if ( c % a == <int> && c % b == <int> ) { printf ( <str> , c ) ; break ; } c ++ ; } t -- ; } }", "label": 2, "id": 3111}
{"input": "int co ; int arrayremove ( unsigned int * A , unsigned int n ) { int i , max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( A [ max ] < A [ i ] ) max = i ; } if ( max == <int> ) { co = A [ max + <int> ] + co ; } else if ( max == n - <int> ) { co = A [ max - <int> ] + co ; } else if ( ( A [ max - <int> ] ) > ( A [ max + <int> ] ) ) { co = A [ max - <int> ] + co ; } else if ( ( A [ max - <int> ] ) < ( A [ max + <int> ] ) ) { co = A [ max + <int> ] + co ; } for ( i = max ; i < n ; i ++ ) { A [ i ] = A [ i + <int> ] ; } n = n - <int> ; if ( n != <int> ) arrayremove ( A , n ) ; else return co ; } int main ( ) { unsigned int A [ <int> ] , t , n , i , cost ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } co = <int> ; cost = arrayremove ( A , n ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 3112}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int N , arr [ <int> ] , small , i ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } small = arr [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( arr [ i ] < small ) { small = arr [ i ] ; } } printf ( <str> , ( ( N - <int> ) * small ) ) ; } return <int> ; }", "label": 0, "id": 3113}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; int p , q ; scanf ( <str> , & t ) ; assert ( t <= <int> && t >= <int> ) ; while ( t -- ) { scanf ( <str> , & p , & q ) ; assert ( p <= <int> && p >= <int> && q <= <int> && q >= <int> ) ; int g = gcd ( p , q ) ; int l = ( p * q ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 3, "id": 3114}
{"input": "int main ( ) { int t ; long int n ; int min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int a [ <int> ] ; int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int j ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j + <int> ] > a [ j ] ) { a [ j + <int> ] = a [ j ] ; j ++ ; } } printf ( <str> , ( a [ n - <int> ] * ( n - <int> ) ) ) ; } }", "label": 1, "id": 3115}
{"input": "int hcf ( int a , int b ) { if ( a == <int> ) return b ; return hcf ( b % a , a ) ; } int main ( ) { int t , a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( b / gcd ) * a ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3116}
{"input": "int calculate_gcd ( int a , int b ) { int rem = a % b ; if ( rem == <int> ) return b ; else calculate_gcd ( b , rem ) ; } int main ( ) { int long i , lcm , gcd , t , a , b ; unsigned long long prod = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; prod = a * b ; gcd = calculate_gcd ( a , b ) ; lcm = prod / gcd ; printf ( <str> , gcd , lcm ) ; lcm = <int> ; } }", "label": 1, "id": 3117}
{"input": "long long int gcd ( long long int n , long long int m ) { if ( n % m == <int> ) return m ; else return gcd ( m , n % m ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long n , m , <unk> , lcm ; scanf ( <str> , & n , & m ) ; <unk> = gcd ( n , m ) ; lcm = ( n * m ) / <unk> ; printf ( <str> , <unk> , lcm ) ; } return <int> ; }", "label": 0, "id": 3118}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int a , b , t , result1 = <int> , result2 = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; result1 = gcd ( a , b ) ; result2 = ( a * b ) / result1 ; printf ( <str> , result1 , result2 ) ; } return <int> ; }", "label": 1, "id": 3119}
{"input": "long int gcd ( long int a , long int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { long int a , b ; int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 0, "id": 3120}
{"input": "int HCF ( int a , int b ) { if ( b == <int> ) return a ; return HCF ( b , a % b ) ; } int main ( int argc , const char * argv [ ] ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int m , n , a ; scanf ( <str> , & m , & n ) ; a = HCF ( m , n ) ; printf ( <str> , a , ( m * n ) / a ) ; } return <int> ; }", "label": 1, "id": 3121}
{"input": "int main ( ) { int t , i , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int len , array [ <int> ] , ans = <int> ; int j ; scanf ( <str> , & len ) ; for ( j = <int> ; j < len ; j ++ ) scanf ( <str> , & array [ j ] ) ; for ( j = <int> ; j < len - <int> ; j ++ ) { if ( array [ j ] > array [ j + <int> ] ) { ans += array [ j + <int> ] ; <unk> ( j , len ) ; } else { ans += array [ j ] ; <unk> ( j + <int> , len ) ; } j -- ; len -- ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 3122}
{"input": "int main ( ) { int t , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { long long int a , b , i , j = b , gcd = <int> , lcm = <int> ; scanf ( <str> , & a , & b ) ; if ( b >= a ) { for ( i = a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } for ( j = b ; ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { lcm = j ; break ; } } } else { for ( i = b ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } for ( j = a ; ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { lcm = j ; break ; } } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3123}
{"input": "int main ( ) { unsigned long long int cs , j , n , k , a [ <int> ] ; int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; cs = <int> ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n ; j ++ ) { cs ++ ; if ( j != n - <int> ) { if ( a [ j ] <= a [ j + <int> ] ) cs ++ ; } } printf ( <str> , cs ) ; } return <int> ; }", "label": 1, "id": 3124}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int test , tri [ <int> ] [ <int> ] , n , i , j ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = n - <int> ; j >= <int> ; j -- ) tri [ i ] [ j ] = tri [ i ] [ j ] + max ( tri [ i + <int> ] [ j ] , tri [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , tri [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3125}
{"input": "int hcf ( int n1 , int n2 ) { if ( n2 != <int> ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int t , n1 , n2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; int lcm = ( n1 * n2 ) / hcf ( n1 , n2 ) ; printf ( <str> , hcf ( n1 , n2 ) , lcm ) ; } return <int> ; }", "label": 1, "id": 3126}
{"input": "int n ; int sot [ <int> ] [ <int> ] ; int max ( int t1 , int t2 ) { if ( t1 >= t2 ) return t1 ; else return t2 ; } int solve ( int i , int j , int a [ <int> ] [ <int> ] ) { int t1 , t2 , t ; if ( i > n ) return <int> ; if ( a [ i ] [ j ] ) return a [ i ] [ j ] ; t1 = solve ( i + <int> , j , a ) ; t2 = solve ( i + <int> , j + <int> , a ) ; t = max ( t1 , t2 ) + sot [ i ] [ j ] ; a [ i ] [ j ] = t ; return t ; } main ( ) { int i , j ; int sum , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { printf ( <str> ) ; for ( j = <int> ; j < n ; j ++ ) { printf ( <str> , i , j ) ; scanf ( <str> , & sot [ i ] [ j ] ) ; } } sum = solve ( <int> , <int> , a ) ; printf ( <str> , sum ) ; } }", "label": 1, "id": 3127}
{"input": "struct arr { int a [ <int> ] ; } b [ <int> ] , c [ <int> ] ; int n , i , n1 , j , k , max , m ; void job ( ) ; int main ( ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & n1 ) ; for ( j = <int> ; j < n1 ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & b [ j ] <fp> a [ k ] ) ; } } job ( ) ; } } void job ( ) { c [ <int> ] <fp> a [ <int> ] = b [ <int> ] <fp> a [ <int> ] ; for ( j = <int> ; j < n1 ; j ++ ) { for ( k = <int> , m = <int> ; k < ( <int> * j ) ; k += <int> , m ++ ) { if ( j == <int> ) { c [ j ] <fp> a [ k ] = b [ j ] <fp> a [ k ] + b [ j - <int> ] <fp> a [ k ] ; c [ j ] <fp> a [ k + <int> ] = b [ j - <int> ] <fp> a [ k ] + b [ j ] <fp> a [ k + <int> ] ; } else { c [ j ] <fp> a [ k ] = b [ j ] <fp> a [ m ] + c [ j - <int> ] <fp> a [ m ] ; c [ j ] <fp> a [ k + <int> ] = b [ j ] <fp> a [ m + <int> ] + c [ j - <int> ] <fp> a [ m ] ; } } } max = c [ n1 - <int> ] <fp> a [ <int> ] ; for ( k = <int> ; k < <int> * ( n1 - <int> ) ; k ++ ) { if ( c [ n1 - <int> ] <fp> a [ k ] > max ) { max = c [ n1 - <int> ] <fp> a [ k ] ; } } printf ( <str> , max ) ; }", "label": 3, "id": 3128}
{"input": "int a [ <int> ] [ <int> ] ; int main ( void ) { int r , n , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3129}
{"input": "int hcf ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , n , l ; scanf ( <str> , & a , & b ) ; n = hcf ( a , b ) ; l = ( a * b ) / n ; printf ( <str> , n , l ) ; } return <int> ; } int hcf ( int p , int q ) { if ( p == q ) return p ; else if ( p > q ) return hcf ( p - q , q ) ; else return hcf ( p , q - p ) ; }", "label": 1, "id": 3130}
{"input": "int main ( ) { int t , i , x , y , a , b , j ; long int lcm , hcf ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { hcf = <int> ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; if ( a > b ) { for ( j = <int> ; j <= b ; j ++ ) { if ( ( a % j == <int> ) && ( b % j == <int> ) ) { while ( ( a % j == <int> ) && ( b % j == <int> ) ) { a = a / j ; b = b / j ; hcf = hcf * j ; } } } } else { for ( j = <int> ; j <= a ; j ++ ) { if ( ( a % j == <int> ) && ( b % j == <int> ) ) { while ( ( a % j == <int> ) && ( b % j == <int> ) ) { a = a / j ; b = b / j ; hcf = hcf * j ; } } } } lcm = x * y / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 3131}
{"input": "int main ( ) { int t , j ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { long int a , b ; scanf ( <str> , & a , & b ) ; long int temp , rem , n , gcd , lcm ; if ( a <= b ) { n = b ; rem = a ; } else { n = a ; rem = b ; } while ( n % rem != <int> ) { temp = rem ; rem = n % rem ; n = temp ; } gcd = rem ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3132}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; int a , b ; int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 3133}
{"input": "long int gcd ( long int a , long int b ) { long int c ; if ( a < b ) { c = a ; a = b ; b = c ; } if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { long int T ; long int i ; long int x ; long int y ; long int A , B ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; x = gcd ( A , B ) ; y = ( A * B ) / x ; printf ( <str> , x , y ) ; } return <int> ; }", "label": 0, "id": 3134}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i , gcd = <int> , lcm = <int> ; scanf ( <str> , & a , & b ) ; for ( i = b ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; break ; } } for ( i = <int> ; i <= b ; i ++ ) { while ( a % i == <int> && b % i == <int> ) { a = a / i ; b = b / i ; lcm = lcm * i ; } } lcm = lcm * a * b ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3135}
{"input": "int main ( void ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int nmrt , dmrt , rem , gcd , lcm ; if ( a > b ) { nmrt = a ; dmrt = b ; } else { nmrt = b ; dmrt = a ; } rem = nmrt % dmrt ; while ( rem != <int> ) { nmrt = dmrt ; dmrt = rem ; rem = nmrt % dmrt ; } gcd = dmrt ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3136}
{"input": "int main ( ) { int a , t , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n != m ) { if ( n > m ) n = n - m ; else m = m - n ; } printf ( <str> , n , ( a * b ) / n ) ; } return <int> ; }", "label": 1, "id": 3137}
{"input": "int main ( void ) { unsigned long long int t , i , count , n , j ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; unsigned long long int a [ n + <int> ] [ n + <int> ] , s [ n + <int> ] ; s [ <int> ] = <int> ; count = n ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { if ( i == j ) a [ i ] [ j ] = <int> ; else a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & s [ i ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { for ( j = i ; j <= n ; j ++ ) { if ( a [ i ] [ j - <int> ] == <int> && s [ j - <int> ] <= s [ j ] ) { a [ i ] [ j ] = <int> ; count ++ ; } } } printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 3138}
{"input": "int main ( ) { int i , j , n , l , temp1 = <int> , temp2 = <int> ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & l ) ; int a [ l ] [ l ] ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j < l ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int sum = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j < l ; j ++ ) { temp1 = a [ i + <int> ] [ j ] ; temp2 = a [ i + <int> ] [ j + <int> ] ; if ( temp1 >= temp2 ) { sum += temp1 ; } else { sum += temp2 ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3139}
{"input": "long gcdca ( long a , long b ) { a = abs ( a ) ; b = abs ( b ) ; return ( b == <int> ) ? a : gcdca ( b , a % b ) ; } int main ( ) { long t , a , b , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { lcm = <int> ; gcd = <int> ; scanf ( <str> , & a , & b ) ; gcd = gcdca ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 3140}
{"input": "int main ( void ) { int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int x = a , y = b ; while ( b != <int> ) { int temp = b ; b = a % b ; a = temp ; } int lcm = ( x * y ) / a ; printf ( <str> , a , lcm ) ; } }", "label": 1, "id": 3141}
{"input": "int main ( ) { long long ans , t , n , a [ <int> ] , i , m = <int> , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & b ) ; if ( m > b ) { m = b ; } } n -- ; ans = <int> ; ans = ans * m * n ; printf ( <str> , ans ) ; } }", "label": 1, "id": 3142}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int a , i , j , m = <int> , n = <int> ; scanf ( <str> , & a ) ; int b [ a ] [ a ] ; for ( i = <int> ; i < a ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } for ( j = <int> ; j < a ; j ++ ) { if ( j == a - <int> && b [ j ] [ j ] > m ) { n = n - <int> * m + b [ j ] [ j ] ; } else m = b [ j ] [ j ] ; for ( i = j ; i < a - <int> ; i ++ ) { if ( m < b [ i ] [ j ] ) m = b [ i ] [ j ] ; } n = n + m ; } printf ( <str> , n ) ; t -- ; } return <int> ; }", "label": 1, "id": 3143}
{"input": "int a [ <int> ] [ <int> ] ; int v [ <int> ] [ <int> ] ; int ans , n ; int recur ( int i , int j , int sum ) { if ( i == n - <int> ) { if ( sum > ans ) { ans = sum ; } } else { if ( sum + a [ i + <int> ] [ j ] > v [ i + <int> ] [ j ] ) { v [ i + <int> ] [ j ] = sum + a [ i + <int> ] [ j ] ; recur ( i + <int> , j , sum + a [ i + <int> ] [ j ] ) ; } if ( sum + a [ i + <int> ] [ j + <int> ] > v [ i + <int> ] [ j + <int> ] ) { v [ i + <int> ] [ j + <int> ] = sum + a [ i + <int> ] [ j + <int> ] ; recur ( i + <int> , j + <int> , sum + a [ i + <int> ] [ j + <int> ] ) ; } } } int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; v [ i ] [ j ] = <int> ; } for ( j = i + <int> ; j < n ; j ++ ) { a [ i ] [ j ] = <int> ; v [ i ] [ j ] = <int> ; } } ans = <int> ; recur ( <int> , <int> , a [ <int> ] [ <int> ] ) ; printf ( <str> , ans ) ; } }", "label": 2, "id": 3144}
{"input": "int T , N , i , j ; int a [ <int> ] [ <int> ] ; int main ( void ) { scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = N - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) ? a [ i + <int> ] [ j + <int> ] : a [ i + <int> ] [ j ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3145}
{"input": "int hcf ( int a , int b ) { if ( b != <int> ) return hcf ( b , a % b ) ; else return a ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = hcf ( a , b ) ; int lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3146}
{"input": "long long int findHCF ( int , int ) ; int main ( ) { int T ; scanf ( <str> , & T ) ; long long int a , b , LCM , HCF ; for ( int i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a , & b ) ; HCF = findHCF ( a , b ) ; LCM = a * b / HCF ; printf ( <str> , HCF , LCM ) ; } return <int> ; } long long int findHCF ( int a , int b ) { int remainder = a % b ; if ( remainder == <int> ) { return b ; } else { return findHCF ( b , remainder ) ; } }", "label": 0, "id": 3147}
{"input": "long int gcd ( long int A , long int B ) ; int main ( ) { int T ; long int A , B ; scanf ( <str> , & T ) ; if ( T < <int> || T > <int> ) { return <int> ; } for ( int i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A >= <int> && A <= <int> && B >= <int> && B <= <int> ) { long int x = gcd ( ( A > B ? A : B ) , ( A < B ? A : B ) ) ; printf ( <str> , x , A * B / x ) ; } } return <int> ; } long int gcd ( long int big , long int small ) { int temp ; while ( small > <int> ) { temp = small ; small = big % small ; big = temp ; } return ( big ) ; }", "label": 0, "id": 3148}
{"input": "int gcd ( int x , int y ) ; int main ( ) { int t , a , b , l , s , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; s = gcd ( a , b ) ; l = ( a * b ) / s ; printf ( <str> , s , l ) ; } return <int> ; } int gcd ( int x , int y ) { if ( y == <int> ) return x ; return gcd ( y , x % y ) ; }", "label": 1, "id": 3149}
{"input": "int main ( void ) { int n , i , x , j , k , a [ <int> ] [ <int> ] , max ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; for ( j = <int> ; j < x ; j ++ ) for ( k = <int> ; k < j + <int> ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( j = <int> ; j < x ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { if ( k == <int> ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j - <int> ] [ k ] ; else if ( k == j ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j - <int> ] [ k - <int> ] ; else { if ( a [ j ] [ k ] + a [ j - <int> ] [ k ] > a [ j ] [ k ] + a [ j - <int> ] [ k - <int> ] ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j - <int> ] [ k ] ; else a [ j ] [ k ] = a [ j ] [ k ] + a [ j - <int> ] [ k - <int> ] ; } } } max = <int> ; for ( k = <int> ; k < x ; k ++ ) if ( a [ x - <int> ] [ k ] > max ) max = a [ x - <int> ] [ k ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3150}
{"input": "int main ( int argc , char * argv [ ] ) { int rows , max , cases ; int i , j , k , z ; int psum [ <int> ] ; int nsum [ <int> ] ; int sum [ <int> ] ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & rows ) ; if ( rows > <int> ) { scanf ( <str> , & i ) ; scanf ( <str> , & j ) ; scanf ( <str> , & k ) ; nsum [ <int> ] = i + j ; nsum [ <int> ] = i + k ; for ( i = <int> ; i < rows - <int> ; i ++ ) { psum [ <int> ] = nsum [ <int> ] ; scanf ( <str> , & z ) ; nsum [ <int> ] += z ; for ( j = <int> ; j < i ; j ++ ) { psum [ j ] = nsum [ j ] ; scanf ( <str> , & z ) ; nsum [ j ] = psum [ j - <int> ] + z > psum [ j ] + z ? psum [ j - <int> ] + z : psum [ j ] + z ; } scanf ( <str> , & z ) ; nsum [ i ] = psum [ i - <int> ] + z ; } psum [ <int> ] = nsum [ <int> ] ; scanf ( <str> , & z ) ; nsum [ <int> ] += z ; max = nsum [ <int> ] ; for ( j = <int> ; j < rows - <int> ; j ++ ) { psum [ j ] = nsum [ j ] ; scanf ( <str> , & z ) ; nsum [ j ] = psum [ j - <int> ] + z > psum [ j ] + z ? psum [ j - <int> ] + z : psum [ j ] + z ; max = max > nsum [ j ] ? max : nsum [ j ] ; } scanf ( <str> , & z ) ; nsum [ rows - <int> ] = psum [ rows - <int> ] + z ; printf ( <str> , ( max > nsum [ rows - <int> ] ? max : nsum [ rows - <int> ] ) ) ; } else if ( rows == <int> ) { scanf ( <str> , & i ) ; scanf ( <str> , & sum [ <int> ] ) ; scanf ( <str> , & sum [ <int> ] ) ; sum [ <int> ] += i ; sum [ <int> ] += i ; j = sum [ <int> ] ; k = sum [ <int> ] ; scanf ( <str> , & i ) ; sum [ <int> ] += i ; max = sum [ <int> ] ; scanf ( <str> , & i ) ; sum [ <int> ] = i + j > i + k ? i + j : i + k ; max = max > sum [ <int> ] ? max : sum [ <int> ] ; scanf ( <str> , & i ) ; sum [ <int> ] = i + k ; printf ( <str> , ( max > sum [ <int> ] ? max : sum [ <int> ] ) ) ; } else if ( rows == <int> ) { scanf ( <str> , & i ) ; scanf ( <str> , & j ) ; scanf ( <str> , & k ) ; printf ( <str> , ( i + j > i + k ? i + j : i + k ) ) ; } else if ( rows == <int> ) { scanf ( <str> , & i ) ; printf ( <str> , i ) ; } } return <int> ; }", "label": 0, "id": 3151}
{"input": "static int sum1 = <int> ; static int sum = <int> ; void fun ( int * * , int , int , int ) ; void down ( int * * ptr , int x , int y , int n ) { if ( x < n - <int> ) { x ++ ; sum1 += ptr [ x ] [ y ] ; if ( sum1 > sum ) sum = sum1 ; fun ( ptr , x , y , n ) ; sum1 -= ptr [ x ] [ y ] ; } } void diag ( int * * ptr , int x , int y , int n ) { if ( x < n - <int> ) { x ++ ; y ++ ; sum1 += ptr [ x ] [ y ] ; if ( sum1 > sum ) sum = sum1 ; fun ( ptr , x , y , n ) ; sum1 -= ptr [ x ] [ y ] ; } } void fun ( int * * ptr , int x , int y , int n ) { down ( ptr , x , y , n ) ; diag ( ptr , x , y , n ) ; } int main ( void ) { int * * ptr , i , j , n , k , l ; scanf ( <str> , & k ) ; for ( l = <int> ; l < k ; l ++ ) { scanf ( <str> , & n ) ; ptr = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = <int> ; i < n ; i ++ ) ptr [ i ] = ( int * ) malloc ( sizeof ( int ) * ( n + <int> ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ptr [ i ] [ j ] ) ; } sum = sum1 = ptr [ <int> ] [ <int> ] ; fun ( ptr , <int> , <int> , n ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 3152}
{"input": "int main ( ) { int n1 [ <int> ] , i , n , n2 [ <int> ] , x [ <int> ] , y [ <int> ] , z [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & n1 [ i ] ) ; scanf ( <str> , & n2 [ i ] ) ; x [ i ] = n1 [ i ] ; y [ i ] = n2 [ i ] ; while ( n1 [ i ] != n2 [ i ] ) { if ( n1 [ i ] > n2 [ i ] ) n1 [ i ] -= n2 [ i ] ; else n2 [ i ] -= n1 [ i ] ; } z [ i ] = ( x [ i ] * y [ i ] ) / n1 [ i ] ; printf ( <str> , n1 [ i ] , z [ i ] ) ; } return <int> ; }", "label": 1, "id": 3153}
{"input": "long long int max ( long long int a , long long int b ) { long long int x ; x = a > b ? a : b ; return x ; } int main ( ) { long long int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { a [ i - <int> ] [ j ] = max ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) + a [ i - <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3154}
{"input": "int main ( void ) { int t ; int i , temp , count , n , k ; long int num ; long long int sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { temp = <int> ; count = <int> ; sum = <int> ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & num ) ; if ( num >= temp ) { count ++ ; } else { sum = sum + ( count * ( count + <int> ) / <int> ) ; count = <int> ; } temp = num ; } sum = sum + ( count * ( count + <int> ) / <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 3155}
{"input": "int main ( ) { int y , z , i , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & y ) ; int A [ y ] ; for ( i = <int> ; i <= y ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } int min = A [ <int> ] ; for ( z = <int> ; z <= y ; z ++ ) { if ( A [ z ] < min ) { min = A [ z ] ; } } printf ( <str> , min * ( y - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3156}
{"input": "int main ( ) { int t , i , min , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int ar [ n ] ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; if ( min > ar [ i ] ) min = ar [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3157}
{"input": "main ( ) { int I , j , k , a [ <int> ] [ <int> ] , b , n , d , l ; scanf ( <str> , & n ) ; for ( I = <int> ; I < n ; I ++ ) { scanf ( <str> , & d ) ; for ( j = <int> ; j < d ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = <int> ; j < d ; j ++ ) { for ( k = <int> ; k < j ; k ++ ) { l = a [ j ] [ k ] ; a [ j ] [ k ] = a [ j ] [ k + <int> ] ; a [ j ] [ k + <int> ] = l ; } b = a [ j ] [ k + <int> ] + b ; } printf ( <str> , b ) ; } }", "label": 1, "id": 3158}
{"input": "int main ( ) { int t , i ; long long int l , a , b , g , x , y ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { x = a ; y = b ; } else { x = b ; y = a ; } for ( i = y ; i >= <int> ; i -- ) { if ( x % i == <int> && y % i == <int> ) g = i ; } l = ( a * b ) / g ; printf ( <str> , g , l ) ; t -- ; } }", "label": 2, "id": 3159}
{"input": "long long int lcm ( long long int a , long long int b , long long int * hcf_add ) { long long int x ; x = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } * hcf_add = a ; return ( x / a ) ; } void main ( ) { int t ; long long int num1 , num2 , lcm_val , hcf ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & num1 , & num2 ) ; lcm_val = lcm ( num1 , num2 , & hcf ) ; printf ( <str> , hcf , lcm_val ) ; } }", "label": 0, "id": 3160}
{"input": "void main ( ) { int t , size ; int i , j , sum , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & size ) ; int tri [ size ] [ size ] ; max = sum = <int> ; for ( i = <int> ; i < size ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; for ( i = <int> ; i < size ; i ++ ) { sum = sum + tri [ i ] [ <int> ] ; } max = sum ; for ( j = <int> ; j < size ; j ++ ) { for ( i = size - <int> ; i >= j ; i -- ) { sum = sum + tri [ i ] [ j ] - tri [ i ] [ j - <int> ] ; if ( sum > max ) max = sum ; } } printf ( <str> , max ) ; } }", "label": 1, "id": 3161}
{"input": "int main ( ) { long long int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int N , ar [ <int> ] , i , min , ans ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; } min = ar [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( ar [ i ] < min ) { min = ar [ i ] ; } } ans = min * ( N - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 3162}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , m , ans = <int> , j , temp ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } printf ( <str> , ( n - <int> ) * a [ <int> ] ) ; } }", "label": 2, "id": 3163}
{"input": "int main ( ) { int t , a , b , s , x , y , l , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { s = b ; b = a % b ; a = s ; } g = a ; l = ( x * y ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3164}
{"input": "int triSum ( int height , int * pyr [ height ] ) { int * sum [ height ] ; int c = <int> ; int temp = <int> ; int maxVal = <int> ; while ( c < height ) { sum [ c ] = ( int * ) malloc ( sizeof ( int ) * ( c + <int> ) ) ; sum [ c ] [ <int> ] = pyr [ c ] [ <int> ] + temp ; temp = sum [ c ] [ <int> ] ; int i = <int> ; while ( i <= c && c != <int> ) { if ( i == c ) sum [ c ] [ i ] = sum [ c - <int> ] [ i - <int> ] + pyr [ c ] [ i ] ; else sum [ c ] [ i ] = sum [ c - <int> ] [ i - <int> ] > sum [ c - <int> ] [ i ] ? ( sum [ c - <int> ] [ i - <int> ] + pyr [ c ] [ i ] ) : ( sum [ c - <int> ] [ i ] + pyr [ c ] [ i ] ) ; i ++ ; } c ++ ; } c = <int> ; while ( c < height ) { if ( maxVal < sum [ height - <int> ] [ c ] ) maxVal = sum [ height - <int> ] [ c ] ; c ++ ; } return maxVal ; } int main ( ) { int count = <int> ; int cases ; scanf ( <str> , & cases ) ; int levels ; int sol [ cases ] ; while ( count < cases ) { scanf ( <str> , & levels ) ; int * inp [ count ] [ levels ] ; int c = <int> ; while ( c < levels ) { inp [ count ] [ c ] = ( int * ) malloc ( sizeof ( int ) * ( c + <int> ) ) ; int i = <int> ; while ( i <= c ) { scanf ( <str> , & inp [ count ] [ c ] [ i ] ) ; i ++ ; } c ++ ; } sol [ count ] = triSum ( levels , inp [ count ] ) ; count ++ ; } count = <int> ; while ( count < cases ) { printf ( <str> , sol [ count ] ) ; count ++ ; } return <int> ; }", "label": 1, "id": 3165}
{"input": "int main ( ) { int t , n , i , a , b , cost ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & b ) ; a = a < b ? a : b ; } printf ( <str> , a * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3166}
{"input": "int findMax ( int <unk> [ <int> ] [ <int> ] , int cache [ <int> ] [ <int> ] , int i , int j , int n ) { int t1 , t2 , t ; if ( i > n ) return <int> ; else { if ( cache [ i ] [ j ] != - <int> ) return cache [ i ] [ j ] ; else { t1 = findMax ( <unk> , cache , i + <int> , j , n ) ; t2 = findMax ( <unk> , cache , i + <int> , j + <int> , n ) ; t = max ( t1 , t2 ) + <unk> [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } } } int main ( void ) { int t , i , j , n ; int <unk> [ <int> ] [ <int> ] ; int cache [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; int result ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { cache [ i ] [ j ] = - <int> ; } } scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & <unk> [ i ] [ j ] ) ; } } result = findMax ( <unk> , cache , <int> , <int> , n ) ; printf ( <str> , result ) ; } return <int> ; }", "label": 0, "id": 3167}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t ; int n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > - <int> ; -- i ) { for ( j = <int> ; j <= i ; ++ j ) { a [ i ] [ j ] = max ( i , j ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int i , int j ) { if ( ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) > ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ) return a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else return a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; }", "label": 0, "id": 3168}
{"input": "int main ( ) { int i , j , k , l [ <int> ] , n , m ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { k = <int> ; scanf ( <str> , & m ) ; for ( j = <int> ; j < m ; j ++ ) { scanf ( <str> , & l [ j ] ) ; } for ( j = <int> ; j < m ; j ++ ) { if ( j == ( m - <int> ) ) k += <int> ; else if ( l [ j ] <= l [ j + <int> ] ) k += <int> ; else k += <int> ; } printf ( <str> , k ) ; } }", "label": 1, "id": 3169}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 3170}
{"input": "int small ( unsigned int temp [ ] , int t ) { int i , j , k ; k = temp [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { if ( k > temp [ i ] && temp [ i ] != <int> ) { k = temp [ i ] ; } } return k ; } void re ( unsigned int temp [ ] , int t ) { int i , j , k ; for ( i = <int> ; i < t ; i ++ ) { k = temp [ i ] ; for ( j = i + <int> ; j < t ; j ++ ) { if ( k == temp [ j ] ) { temp [ j ] = <int> ; } } } } int main ( ) { unsigned int n , s , temp [ <int> ] ; int i , j , k , t ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & t ) ; t = ( t * t + t ) / <int> ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & temp [ j ] ) ; } re ( temp , t ) ; k = small ( temp , t ) ; int sum = <int> ; for ( j = <int> ; j < t ; j ++ ) { sum = sum + temp [ j ] ; } sum = sum - k ; printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 3171}
{"input": "int main ( ) { long long int t , n , a [ <int> ] , z = <int> , i , j , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < z ) { z = a [ j ] ; } } x = z * ( n - <int> ) ; printf ( <str> , x ) ; z = <int> ; } }", "label": 0, "id": 3172}
{"input": "struct node { int info ; struct node * next ; } ; int main ( ) { struct node * head , * r , * temp ; int n1 , n , min , num , t ; scanf ( <str> , & t ) ; while ( t -- ) { head = NULL ; scanf ( <str> , & n1 ) ; scanf ( <str> , & num ) ; head = ( struct node * ) malloc ( sizeof ( struct node ) ) ; head -> info = num ; head -> next = NULL ; r = head ; n = n1 - <int> ; while ( n -- ) { scanf ( <str> , & num ) ; temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp -> info = num ; temp -> next = NULL ; r -> next = temp ; r = temp ; } min = head -> info ; r = head -> next ; while ( r != NULL ) { if ( ( r -> info ) < min ) min = r -> info ; r = r -> next ; } printf ( <str> , ( n1 - <int> ) * min ) ; } return <int> ; }", "label": 1, "id": 3173}
{"input": "int main ( ) { long long m , n , a , i , min , cost ; scanf ( <str> , & m ) ; while ( m -- ) { scanf ( <str> , & n ) ; i = <int> ; min = <int> ; while ( i < n ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; i ++ ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3174}
{"input": "int main ( ) { int t , n , arr [ <int> ] , i , j , a , index , crr_max , next_max ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; i = <int> , j = <int> ; scanf ( <str> , & arr [ <int> ] ) ; crr_max = arr [ <int> ] ; next_max = arr [ <int> ] ; while ( i < n ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { next_max = arr [ <int> ] ; if ( arr [ <int> ] > arr [ <int> ] ) { next_max = arr [ <int> ] ; } scanf ( <str> , & a ) ; arr [ <int> ] += a ; } else if ( j == i ) { scanf ( <str> , & a ) ; arr [ j ] = a + next_max ; } else { scanf ( <str> , & a ) ; crr_max = next_max ; next_max = arr [ j ] ; if ( arr [ j + <int> ] > arr [ j ] ) next_max = arr [ j + <int> ] ; arr [ j ] = crr_max + a ; } } i ++ ; } i = <int> ; while ( i < n ) { printf ( <str> , arr [ i ] ) ; i ++ ; } t -- ; } return <int> ; }", "label": 1, "id": 3175}
{"input": "int main ( ) { int t , i ; long int n , a [ <int> ] , j , sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] >= a [ j + <int> ] ) sum = sum + a [ j + <int> ] ; else sum = sum + a [ j ] ; } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 3176}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int A , B , GCD , LCM ; scanf ( <str> , & A , & B ) ; GCD = gcd ( A , B ) ; LCM = ( A * B ) / GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; } int gcd ( int a , int b ) { int c ; while ( b ) { c = b ; b = a % b ; a = c ; } return a ; }", "label": 0, "id": 3177}
{"input": "long long int gcd ( long long int x , long long int y ) { if ( y == <int> ) return x ; else return gcd ( y , x % y ) ; } long long int lcm ( long long int x , int y ) { return ( ( x * y ) / gcd ( x , y ) ) ; } main ( void ) { long long int a , b , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 3178}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ maxx ] [ maxx ] , n , i , sum = <int> , max1 , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { max1 = a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > max1 ) max1 = a [ i ] [ j ] ; } sum = sum + max1 ; } printf ( <str> , sum - <int> ) ; } return <int> ; }", "label": 1, "id": 3179}
{"input": "int main ( void ) { int i , t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , gcd = <int> , lcm = <int> ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3180}
{"input": "int main ( ) { long long int n , x , t , a ; int i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & x ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < x ) x = a ; } printf ( <str> , x * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3181}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int x , y , m , n , l ; scanf ( <str> , & m , & n ) ; x = m ; y = n ; while ( x != y ) { if ( x > y ) x -= y ; else y -= x ; } l = m * n / x ; printf ( <str> , x , l ) ; } }", "label": 1, "id": 3182}
{"input": "int main ( void ) { int T , N ; scanf ( <str> , & T ) ; int t , i ; for ( t = <int> ; t < T ; t ++ ) { scanf ( <str> , & N ) ; int prev , curr ; prev = scanf ( <str> , & prev ) ; int count = <int> ; int <unk> = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & curr ) ; if ( curr >= prev ) <unk> ++ ; else { count += ( <unk> * ( <unk> + <int> ) ) / <int> ; <unk> = <int> ; } prev = curr ; } count += ( <unk> * ( <unk> + <int> ) ) / <int> ; count += N ; printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 3183}
{"input": "int gcd ( int , int ) ; int lcm ( int , int , int ) ; int main ( ) { int num1 , num2 , x , y , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & num1 , & num2 ) ; x = gcd ( num1 , num2 ) ; y = lcm ( num1 , num2 , x ) ; printf ( <str> , x , y ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == <int> ) return b ; else if ( b == <int> ) return a ; else if ( a == <int> && b == <int> ) return <int> ; else if ( a != <int> && b != <int> ) { if ( a >= b ) gcd ( a % b , b ) ; else gcd ( a , b % a ) ; } else ; } int lcm ( int a , int b , int c ) { int p ; p = ( a * b ) / c ; return p ; }", "label": 1, "id": 3184}
{"input": "main ( ) { int t ; long int a , b , h , l , i ; scanf ( <str> , & t ) ; while ( t -- ) { h = <int> ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) h = h * i ; } l = a * b / h ; printf ( <str> , h , l ) ; } }", "label": 2, "id": 3185}
{"input": "int main ( ) { int t , n , a [ <int> ] , i , j , k , min = <int> , sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( k = <int> ; k < n ; k ++ ) { if ( min > a [ k ] ) min = a [ k ] ; } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3186}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a1 , b1 , a , b , max = <int> ; scanf ( <str> , & a , & b ) ; a1 = a ; b1 = b ; while ( max > <int> ) { max = a % b ; a = b ; b = max ; } printf ( <str> , a , ( a1 * b1 ) / a ) ; } return <int> ; }", "label": 1, "id": 3187}
{"input": "int main ( ) { int t , n , i , min , c = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; c = c + min ; } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 3188}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , k ; scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; printf ( <str> , k , ( a * b ) / k ) ; } return <int> ; }", "label": 1, "id": 3189}
{"input": "int main ( ) { int n1 , n2 , prod , gcd , lcm , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; prod = n1 * n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; if ( n2 > n1 ) n2 = n2 - n1 ; } gcd = n1 ; lcm = prod / gcd ; } printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 3190}
{"input": "int a [ <int> ] [ <int> ] ; int n , max ; void recursion ( int , int , int , int ) ; int main ( ) { int t , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { max = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } recursion ( a [ <int> ] [ <int> ] , <int> , <int> , <int> ) ; printf ( <str> , max ) ; } return <int> ; } void recursion ( int b , int s , int y , int x ) { s = s + b ; x = x + <int> ; if ( x < n ) { recursion ( a [ x ] [ y ] , s , y , x ) ; y = y + <int> ; recursion ( a [ x ] [ y ] , s , y , x ) ; } else { if ( s > max ) max = s ; } }", "label": 2, "id": 3191}
{"input": "int tri [ <int> ] [ <int> ] ; int n ; int maxsum ( int , int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j < i + <int> ) scanf ( <str> , & tri [ i ] [ j ] ) ; else tri [ i ] [ j ] = <int> ; } } printf ( <str> , maxsum ( <int> , <int> , <int> ) ) ; } return <int> ; } int maxsum ( int i , int j , int sum ) { if ( tri [ i ] [ j ] == <int> ) return <int> ; sum += tri [ i ] [ j ] ; if ( i == n - <int> ) return sum ; int a = maxsum ( i + <int> , j , sum ) ; int b = maxsum ( i + <int> , j + <int> , sum ) ; if ( a > b ) return a ; return b ; }", "label": 2, "id": 3192}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , n , min ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ <int> ] ; else { if ( a [ i ] < min ) min = a [ i ] ; } } printf ( <str> , ( n - <int> ) * min ) ; } }", "label": 1, "id": 3193}
{"input": "int main ( ) { int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int mat [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( mat [ i ] [ j ] > mat [ i ] [ j + <int> ] ) mat [ i - <int> ] [ j ] = mat [ i - <int> ] [ j ] + mat [ i ] [ j ] ; else mat [ i - <int> ] [ j ] = mat [ i - <int> ] [ j ] + mat [ i ] [ j + <int> ] ; } printf ( <str> , mat [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3194}
{"input": "int main ( ) { int n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int A [ n ] [ n ] , B [ n ] [ n ] , k , max = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; B [ i ] [ j ] = A [ i ] [ j ] ; } } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { for ( k = j ; k <= j + <int> ; k ++ ) { if ( B [ i + <int> ] [ k ] < A [ i + <int> ] [ k ] + B [ i ] [ j ] ) B [ i + <int> ] [ k ] = A [ i + <int> ] [ k ] + B [ i ] [ j ] ; if ( max < B [ i + <int> ] [ k ] ) max = B [ i + <int> ] [ k ] ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3195}
{"input": "int main ( void ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int c , i , l ; long long int a , b , s ; scanf ( <str> , & a , & b ) ; l = a < b ? a : b ; for ( i = <int> ; i <= l ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { c = i ; } } s = ( a * b ) / c ; printf ( <str> , c , s ) ; } return <int> ; }", "label": 2, "id": 3196}
{"input": "int GCD ( int num1 , int num2 ) { int n , d , r ; if ( num1 > num2 ) { n = num1 ; d = num2 ; } else { n = num2 ; d = num1 ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } return d ; } int main ( ) { int t , a [ <int> ] [ <int> ] , gcd , lcm ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; ++ i ) { for ( int j = <int> ; j < <int> ; ++ j ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( int i = <int> ; i < t ; ++ i ) { gcd = GCD ( a [ i ] [ <int> ] , a [ i ] [ <int> ] ) ; lcm = a [ i ] [ <int> ] * a [ i ] [ <int> ] / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3197}
{"input": "int main ( ) { int T , N , j , i ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; if ( N >= <int> && N <= <int> ) { int a [ N ] , sum = <int> , k ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < N ; i ++ ) { for ( k = i + <int> ; k < N ; k ++ ) { if ( a [ i ] == a [ k ] ) break ; } if ( k == N ) sum = sum + <int> ; } for ( i = <int> ; i < N - <int> ; i ++ ) { for ( k = i + <int> ; k < N ; k ++ ) { if ( a [ k ] >= a [ k - <int> ] ) sum = sum + <int> ; else break ; } } printf ( <str> , sum ) ; } } } }", "label": 2, "id": 3198}
{"input": "int main ( int argc , char * * argv ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { int a , b , x , y ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; int p ; while ( b != <int> ) { p = b ; b = a % b ; a = p ; } int gcd = a ; int lcm ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3199}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3200}
{"input": "int main ( ) { int n , i , t , prev , k = <int> , b [ <int> ] ; long sum ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; sum = <int> ; prev = <int> ; i = <int> ; while ( prev < n ) { i = prev ; if ( a [ i ] > a [ i + <int> ] ) { sum += a [ i + <int> ] ; prev = i + <int> ; } else { sum += a [ i ] ; a [ i + <int> ] = a [ i ] ; prev = i + <int> ; } } b [ k ++ ] = sum ; t -- ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , b [ i ] ) ; return <int> ; }", "label": 1, "id": 3201}
{"input": "int hcf ( int , int ) ; int main ( ) { int t , i , a , b , gcd ; long long int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int hcf ( int x , int y ) { if ( x == <int> ) return y ; return hcf ( y % x , x ) ; }", "label": 1, "id": 3202}
{"input": "int main ( ) { int i , j , k , t , a [ <int> ] [ <int> ] , row ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> ) ; } } for ( i = row ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 1, "id": 3203}
{"input": "int calGcd ( int , int ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; int i , gcd , lcm ; for ( i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; gcd = calGcd ( a , b ) ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } } int calGcd ( int a , int b ) { if ( b == <int> ) return a ; else return calGcd ( b , a % b ) ; }", "label": 1, "id": 3204}
{"input": "int main ( ) { long long int t , j , lcm ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { int a , b , i = <int> , d = <int> ; scanf ( <str> , & a , & b ) ; while ( i < a || i < b ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { d = d * i ; a = a / i ; b = b / i ; } else i = i + <int> ; } lcm = a * b * d ; printf ( <str> , d , lcm ) ; } return <int> ; }", "label": 2, "id": 3205}
{"input": "int main ( ) { int i , j , t , a [ <int> ] [ <int> ] , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3206}
{"input": "int find_gcd ( long long int x , long long int y ) { if ( y == <int> ) return x ; else return find_gcd ( y , x % y ) ; } int main ( ) { int T , gcd ; long long int a , b ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; gcd = find_gcd ( a , b ) ; printf ( <str> , gcd , ( a * b ) / gcd ) ; } }", "label": 0, "id": 3207}
{"input": "int main ( ) { long i , j , k , n , l , t , s ; long a [ <int> ] , b [ <int> ] , c [ <int> ] , d [ <int> ] ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; a [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( k = <int> ; k <= i ; k ++ ) { scanf ( <str> , & b [ k ] ) ; } c [ <int> ] = a [ <int> ] + b [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { c [ j ] = ( a [ j - <int> ] > a [ j ] ? a [ j - <int> ] : a [ j ] ) + b [ j ] ; } for ( j = <int> ; j <= i ; j ++ ) { a [ j ] = c [ j ] ; } a [ j ] = <int> ; } s = c [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { if ( s < c [ j ] ) { s = c [ j ] ; } } d [ l ] = s ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , d [ i ] ) ; } return <int> ; }", "label": 3, "id": 3208}
{"input": "int main ( ) { int i , j , no , tc , sum [ N ] [ N ] , n , max ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & sum [ <int> ] [ <int> ] ) ; max = sum [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & no ) ; no = ( no >= <int> && no < <int> ) ? no : <int> ; if ( j == <int> ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + no ; } else if ( i == j ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + no ; } else { sum [ i ] [ j ] = no + ( ( sum [ i - <int> ] [ j ] > sum [ i - <int> ] [ j - <int> ] ) ? sum [ i - <int> ] [ j ] : sum [ i - <int> ] [ j - <int> ] ) ; } max = sum [ i ] [ j ] > max ? sum [ i ] [ j ] : max ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3209}
{"input": "int compare ( void * a , void * b ) { long int f = * ( ( long int * ) a ) ; long int s = * ( ( long int * ) b ) ; if ( f > s ) return <int> ; if ( f < s ) return - <int> ; } int main ( ) { int t ; long int arr [ <int> ] ; long int i , m ; long long int c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) scanf ( <str> , & arr [ i ] ) ; qsort ( arr , m , sizeof ( long ) , compare ) ; c = arr [ <int> ] * ( m - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 3210}
{"input": "int row , a [ <int> ] [ <int> ] ; int l ( int n , int m ) { int trsum , tlsum ; if ( row == n ) { return <int> ; } else { tlsum = l ( n + <int> , m ) ; trsum = l ( n + <int> , m + <int> ) ; if ( tlsum > trsum ) { return tlsum + a [ n ] [ m ] ; } else return trsum + a [ n ] [ m ] ; } } int main ( ) { int t , i , m , n , sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & row ) ; for ( n = <int> ; n < row ; n ++ ) { for ( m = <int> ; m <= n ; m ++ ) { scanf ( <str> , ( * ( a + n ) + m ) ) ; } } sum = l ( <int> , <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 3211}
{"input": "int sum_max = <int> ; int a [ <int> ] [ <int> ] = { <int> } ; void maxsum ( int n , int sum , int line , int count ) { if ( line > n ) { if ( sum > sum_max ) { sum_max = sum ; } return ; } sum = sum + a [ line ] [ count ] ; maxsum ( n , sum , line + <int> , count ) ; maxsum ( n , sum , line + <int> , count + <int> ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } maxsum ( n , <int> , <int> , <int> ) ; printf ( <str> , sum_max ) ; } return <int> ; }", "label": 2, "id": 3212}
{"input": "int gcd ( int m , int n ) { if ( n == <int> ) return m ; else return gcd ( n , m % n ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , res ; scanf ( <str> , & a , & b ) ; res = gcd ( a , b ) ; printf ( <str> , res , ( a * b ) / res ) ; } }", "label": 1, "id": 3213}
{"input": "int n ; int a [ <int> ] [ <int> ] ; long long int f ( int i , int j ) { long long int sum1 = <int> , sum2 = <int> ; sum1 = sum2 = a [ i ] [ j ] ; if ( i - <int> >= <int> ) { sum1 += f ( i - <int> , j ) ; if ( j + <int> <= n - i ) sum2 += f ( i - <int> , j + <int> ) ; if ( sum1 > sum2 ) return sum1 ; else return sum2 ; } return sum1 ; } int main ( ) { int i , j , k , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( k = <int> , j = n - i ; j > <int> ; j -- , k ++ ) scanf ( <str> , & a [ i ] [ k ] ) ; } printf ( <str> , f ( n - <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 3214}
{"input": "int main ( ) { int T , l , q , p , t , lcm ; int A , B ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { t = A ; A = B ; B = t ; } if ( B % A == <int> ) { q = A ; lcm = B ; } else { p = A ; while ( p != <int> ) { if ( B % p != <int> ) q = B % p ; p = B % p ; } lcm = ( A * B ) / q ; } printf ( <str> , q , lcm ) ; } return <int> ; }", "label": 1, "id": 3215}
{"input": "int main ( ) { int n , i , a , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; int b [ a ] , m ; for ( j = <int> ; j < a ; j ++ ) scanf ( <str> , & b [ j ] ) ; m = b [ <int> ] ; for ( j = <int> ; j < a ; j ++ ) { if ( b [ j ] < m ) m = b [ j ] ; } printf ( <str> , m * ( a - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3216}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; for ( gcd = a < b ? a : b ; gcd >= <int> ; gcd -- ) { if ( a % gcd == <int> && b % gcd == <int> ) { break ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3217}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int sum = <int> , temp , n , i , j , max ; int a [ <int> ] [ <int> ] = { { <int> } } ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } max = a [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( a [ n ] [ i ] >= max ) { temp = i ; } } for ( i = n ; i >= <int> ; i -- ) { sum = sum + a [ i ] [ temp ] ; if ( i == <int> ) break ; if ( a [ i - <int> ] [ temp - <int> ] > a [ i - <int> ] [ temp ] ) { temp = temp - <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3218}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else if ( a == <int> ) { return b ; } else { return gcd ( b , a % b ) ; } } int lcm ( int a , int b ) { int s = ( a > b ) ? a : b ; while ( <int> ) { if ( ( s % a == <int> ) && ( s % b == <int> ) ) { return s ; break ; } ++ s ; } } int main ( void ) { int t , a , b ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 2, "id": 3219}
{"input": "void init ( int ) ; void checksum ( int , int , int , int ) ; int e , a [ <int> ] [ <int> ] ; int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { e = <int> ; scanf ( <str> , & n ) ; init ( n ) ; checksum ( <int> , <int> , <int> , n ) ; printf ( <str> , e ) ; } } void init ( int n ) { int i , j ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } void checksum ( int i , int j , int sum , int n ) { if ( e < sum + a [ i ] [ j ] ) { sum = sum + a [ i ] [ j ] ; e = sum ; } if ( i < n ) { checksum ( i + <int> , j , sum , n ) ; checksum ( i + <int> , j + <int> , sum , n ) ; } return ; }", "label": 2, "id": 3220}
{"input": "int main ( ) { int tcases , no , i , j , p , q ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & tcases ) ; while ( tcases -- ) { i = <int> ; j = <int> ; q = <int> ; p = <int> ; scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = no - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3221}
{"input": "int gcd ( int a , int b ) { int g ; if ( a > b ) { if ( a % b == <int> ) g = b ; else g = gcd ( b , a % b ) ; } else { if ( b % a == <int> ) g = a ; else g = gcd ( a , b % a ) ; } return g ; } long long int least ( int a , int b ) { int l , g ; g = gcd ( a , b ) ; l = ( a / g * b / g ) ; return l ; } int main ( ) { int t , i , j , a , b ; scanf ( <str> , & t ) ; int hcf [ t ] ; long long int lcm [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; hcf [ i ] = gcd ( a , b ) ; lcm [ i ] = least ( a , b ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , hcf [ i ] , lcm [ i ] ) ; } return <int> ; }", "label": 1, "id": 3222}
{"input": "int main ( ) { int A , B , T , i , j , gcd , lcm ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A >= <int> && A <= <int> && B >= <int> && B <= <int> ) { for ( j = <int> ; j < A / <int> ; j ++ ) { if ( A % j == <int> && B % j == <int> ) gcd = j ; } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } } } }", "label": 1, "id": 3223}
{"input": "int main ( ) { int t , i , max ; int size , rows , cnt , j , k ; int * arr ; char str [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & rows ) ; size = ( ( rows * ( rows + <int> ) ) / <int> ) ; arr = ( int * ) malloc ( size * sizeof ( int ) ) ; cnt = <int> ; for ( j = <int> ; j < rows ; j ++ ) { gets ( str ) ; char * split = strtok ( str , <str> ) ; while ( split != NULL ) { arr [ cnt ++ ] = atoi ( split ) ; split = strtok ( NULL , <str> ) ; } } int index , prv_index ; for ( k = <int> ; k <= rows ; k ++ ) { index = ( k * ( k - <int> ) / <int> ) ; prv_index = index - ( k - <int> ) ; for ( j = <int> ; j < k ; j ++ ) { if ( ( index + j - ( k - <int> ) - <int> ) < prv_index ) arr [ index + j ] += arr [ index + j - ( k - <int> ) ] ; else if ( ( index + j - ( k - <int> ) ) >= index ) arr [ index + j ] += arr [ index + j - ( k - <int> ) - <int> ] ; else { int temp1 = arr [ index + j - ( k - <int> ) ] > arr [ index + j - ( k - <int> ) - <int> ] ? arr [ index + j - ( k - <int> ) ] : arr [ index + j - ( k - <int> ) - <int> ] ; arr [ index + j ] += temp1 ; } } } max = arr [ index ] ; for ( j = index + <int> ; j < cnt ; j ++ ) { max = ( max > arr [ j ] ) ? max : arr [ j ] ; } printf ( <str> , max ) ; free ( arr ) ; } return <int> ; }", "label": 3, "id": 3224}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int a , b , i = <int> , x = <int> , z , y ; int gcd , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) { z = a ; y = b ; } else { z = b ; y = a ; } while ( x != <int> ) { i ++ ; if ( ( z * i ) % y == <int> ) x = <int> ; } gcd = a * b / ( z * i ) ; lcm = z * i ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3225}
{"input": "int main ( ) { long long int i , j , n , t , k , sum , min ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; long long int x [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & x [ j ] ) ; } min = x [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( x [ j ] < min ) { min = x [ j ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3226}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3227}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3228}
{"input": "int gcd ( int m , int n ) ; int gcd ( int m , int n ) { if ( m < n ) return gcd ( n , m ) ; else if ( n == <int> ) return m ; else return gcd ( n , m % n ) ; } int main ( ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3229}
{"input": "main ( ) { int n , i ; scanf ( <str> , & n ) ; int temp [ n ] ; for ( i = <int> ; i < n ; i ++ ) { int no , j , k ; scanf ( <str> , & no ) ; int a [ no ] [ no ] ; int sum [ no ] [ no ] ; for ( k = <int> ; k < no ; i ++ ) { for ( j = <int> ; j < no ; j ++ ) a [ k ] [ j ] = <int> ; } k = j = <int> ; for ( k = <int> ; k < no ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) scanf ( <str> , & a [ k ] [ j ] ) ; sum [ i ] [ k ] = sum [ i ] [ k ] + a [ k ] [ j ] ; } temp [ i ] = sum [ i ] [ <int> ] ; for ( j = <int> ; j < no ; j ++ ) { if ( temp [ i ] <= sum [ i ] [ j ] ) temp [ i ] = sum [ i ] [ j ] ; } } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , temp [ i ] ) ; return <int> ; }", "label": 2, "id": 3230}
{"input": "int main ( ) { int i , temp , T , j , k ; scanf ( <str> , & T ) ; int a , b , lcm , gcd ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } gcd = <int> ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; i = <int> ; gcd = <int> ; } return <int> ; }", "label": 1, "id": 3231}
{"input": "int main ( ) { int t , n , a [ max ] , i , j , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( j = <int> ; j < n ; j ++ ) if ( a [ <int> ] > a [ j ] ) { temp = a [ <int> ] ; a [ <int> ] = a [ j ] ; a [ j ] = temp ; } printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3232}
{"input": "int ans [ <int> ] [ <int> ] ; int trgl [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int maxsum ( int tot ) { int x , col ; for ( x = tot - <int> ; x >= <int> ; x -- ) { if ( x == tot - <int> ) { for ( col = <int> ; col < tot ; col ++ ) ans [ x ] [ col ] = trgl [ x ] [ col ] ; } else { for ( col = <int> ; col <= x ; col ++ ) ans [ x ] [ col ] = trgl [ x ] [ col ] + max ( ans [ x + <int> ] [ col ] , ans [ x + <int> ] [ col + <int> ] ) ; } } return ans [ <int> ] [ <int> ] ; } void triangle ( int number ) { int row , col ; for ( col = <int> ; col < number ; col ++ ) { for ( row = <int> ; row <= col ; row ++ ) { scanf ( <str> , & trgl [ col ] [ row ] ) ; printf ( <str> ) ; } } printf ( <str> , maxsum ( number ) ) ; } void do_it ( ) { int number ; scanf ( <str> , & number ) ; triangle ( number ) ; } int main ( ) { int x , n ; scanf ( <str> , & x ) ; for ( n = <int> ; n < x ; n ++ ) do_it ( ) ; return <int> ; }", "label": 1, "id": 3233}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; int a [ n + <int> ] [ n + <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ( a [ i ] [ j ] ) ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3234}
{"input": "int scanInt ( ) { register int retInt = <int> , d ; while ( ( d = getchar ( ) ) >= <char> ) { retInt = ( retInt << <int> ) + ( retInt << <int> ) + ( d - <char> ) ; } return retInt ; } struct node { unsigned int length ; unsigned int * a ; unsigned int * b ; } ; int main ( void ) { register unsigned int testcase = <int> , i = <int> , j = <int> , k = <int> ; unsigned int * ans ; testcase = scanInt ( ) ; if ( testcase <= <int> ) { ans = ( int * ) malloc ( testcase * sizeof ( int ) ) ; for ( i = <int> ; i < testcase ; i ++ ) { struct node c ; c <fp> a = NULL ; c <fp> b = NULL ; c <fp> length = scanInt ( ) ; if ( c <fp> length < <int> ) { for ( j = <int> ; j < c <fp> length ; j ++ ) { c <fp> a = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) { int temp = scanInt ( ) ; if ( temp > <int> && temp < <int> ) { if ( j == <int> ) c <fp> a [ k ] = temp ; else { if ( k == <int> ) { c <fp> a [ k ] = c <fp> b [ k ] + temp ; } else { if ( j == k ) { c <fp> a [ k ] = c <fp> b [ k - <int> ] + temp ; } else { unsigned int total = temp ; unsigned int a1 = ( c <fp> b [ k - <int> ] + total ) ; unsigned int a2 = ( c <fp> b [ k ] + total ) ; c <fp> a [ k ] = ( a1 < a2 ) ? a2 : a1 ; } } } c <fp> b = c <fp> a ; c <fp> a = NULL ; } else exit ( <int> ) ; } } ans [ i ] = <int> ; j = c <fp> length - <int> ; k = <int> ; while ( k < c <fp> length ) { if ( ans [ i ] < c <fp> b [ k ] ) ans [ i ] = c <fp> b [ k ] ; k ++ ; } } else exit ( <int> ) ; } for ( i = <int> ; i < testcase ; i ++ ) { printf ( <str> , ans [ i ] ) ; } } return <int> ; }", "label": 1, "id": 3235}
{"input": "int arr [ <int> ] [ <int> ] , N ; int max ( int a , int b ) ; int main ( ) { int T , ans , n , m ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( m = <int> ; m < N ; m ++ ) { for ( n = <int> ; n <= m ; n ++ ) scanf ( <str> , & arr [ m ] [ n ] ) ; } int val ; for ( n = N - <int> ; n >= <int> ; n -- ) { for ( m = <int> ; m < n ; m ++ ) { val = max ( arr [ n ] [ m ] , arr [ n ] [ m + <int> ] ) ; arr [ n - <int> ] [ m ] += val ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; free ( arr ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 3, "id": 3236}
{"input": "int main ( ) { int n1 , n2 ; scanf ( <str> , & n1 , & n2 ) ; int lcm = n1 * n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } int gcd = n1 ; printf ( <str> , gcd , lcm / gcd ) ; return <int> ; }", "label": 1, "id": 3237}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int * * A , N , i , j ; scanf ( <str> , & N ) ; A = ( int * * ) malloc ( N * sizeof ( int * ) ) ; for ( i = <int> ; i < N ; i ++ ) { A [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; } for ( i = N - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] += max ( A [ i + <int> ] [ j ] , A [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3238}
{"input": "void findgcdlcm ( ) { int a , b , c , prod , gcd , lcm ; scanf ( <str> , & a , & b ) ; prod = a * b ; while ( b != <int> ) { c = a % b ; if ( c != <int> ) { a = b ; b = c ; } else { gcd = b ; } } lcm = prod / gcd ; printf ( <str> , gcd , lcm ) ; } int main ( ) { int i , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { findgcdlcm ( ) ; } return <int> ; }", "label": 2, "id": 3239}
{"input": "main ( ) { int t , i , a [ <int> ] , s , n ; scanf ( <str> , & t ) ; while ( t -- ) { s = <int> ; a [ <int> ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { s = s + a [ i ] ; a [ i + <int> ] = a [ i ] ; } else { s = s + a [ i + <int> ] ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 3240}
{"input": "int main ( ) { int n , i , j , k , e , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; int sum [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & e ) ; int c = <int> ; ; for ( j = <int> ; j < e ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; c = c + a [ j ] [ k ] ; } } sum [ i ] = c ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , sum [ i ] / <int> ) ; } return <int> ; }", "label": 1, "id": 3241}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { long long int a , b , result , lcm , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; result = gcd ( a , b ) ; lcm = ( a * b ) / result ; printf ( <str> , result , lcm ) ; } } long long int gcd ( long long int a , long long int b ) { while ( a != b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } return a ; }", "label": 0, "id": 3242}
{"input": "int main ( ) { int temp ; int n , a [ <int> ] [ <int> ] ; int sum ; scanf ( <str> , & n ) ; int j ; scanf ( <str> , & j ) ; int i , k ; while ( n -- ) { for ( i = <int> ; i < j ; i ++ ) { for ( k = <int> ; k <= i ; k ++ ) { scanf ( <str> , & a [ i ] [ k ] ) ; } } temp = <int> ; for ( i = <int> ; i < j - <int> ; i ++ ) { k = <int> ; sum = a [ i ] [ k ] + a [ i + <int> ] [ k ] + a [ i + <int> ] [ k + <int> ] ; if ( temp < sum ) { temp = sum ; } } printf ( <str> , temp ) ; } return <int> ; }", "label": 1, "id": 3243}
{"input": "main ( ) { int i , j , k , t , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k < ( j + <int> ) ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( j = ( n - <int> ) ; j != - <int> ; j -- ) { for ( k = <int> ; k < ( j + <int> ) ; k ++ ) { if ( ( a [ j ] [ k ] + a [ j + <int> ] [ k ] ) > ( a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ) ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j + <int> ] [ k ] ; else a [ j ] [ k ] = a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 3244}
{"input": "int main ( ) { int i , a ; long long int m , n ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & m , & n ) ; long long int y = ( m * n ) ; while ( n > <int> ) { long long int r = m % n ; m = n ; n = r ; } printf ( <str> , m , ( y / m ) ) ; } return <int> ; }", "label": 0, "id": 3245}
{"input": "int main ( ) { int t ; long int a , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int arr [ n ] ; for ( a = <int> ; a < n ; a ++ ) scanf ( <str> , & arr [ a ] ) ; long int min = arr [ <int> ] ; for ( a = <int> ; a < n ; a ++ ) if ( arr [ a ] < min ) min = arr [ a ] ; printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 3246}
{"input": "int main ( ) { int t , n , cost , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] > arr [ i + <int> ] ) { cost += arr [ i + <int> ] ; for ( j = i + <int> ; j < n - <int> ; j ++ ) arr [ j - <int> ] = arr [ j ] ; } else { cost += arr [ i ] ; for ( j = i + <int> ; j < n - <int> ; j ++ ) arr [ j ] = arr [ j + <int> ] ; } } printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 3247}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; int n , i , j ; while ( t -- ) { scanf ( <str> , & n ) ; long long int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + max ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3248}
{"input": "void <unk> ( int * a , int j ) ; int max ( int a , int b ) ; int main ( ) { int t , n ; int i , j , k ; int sum_max ; int * a ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int num = ( ( n * ( n + <int> ) ) / <int> ) ; a = ( int * ) malloc ( num * sizeof ( int ) ) ; for ( j = <int> ; j < num ; j ++ ) { scanf ( <str> , a + j ) ; } for ( j = n - <int> ; j >= <int> ; j -- ) { <unk> ( a , j ) ; } printf ( <str> , * a ) ; free ( a ) ; } } void <unk> ( int * a , int j ) { int i ; int <unk> = ( j * ( j + <int> ) ) / <int> ; int <unk> = ( ( j + <int> ) * ( j + <int> ) ) / <int> ; for ( i = <int> ; i < j + <int> ; i ++ ) { * ( a + <unk> + i ) += max ( * ( a + <unk> + i ) , * ( a + <unk> + i + <int> ) ) ; } } int max ( int a , int b ) { return ( a > b ? a : b ) ; }", "label": 0, "id": 3249}
{"input": "long long int gcd ( int a , int b ) ; long long int lcm ( int a , int b ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; } long long int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } long long int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 3250}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , i , j , d , f , c , l , max , k ; scanf ( <str> , & c ) ; for ( k = <int> ; k <= c ; k ++ ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , a [ i ] [ j ] ) ; } } for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> && i == <int> ) b [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == <int> ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; else if ( j == i ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; else { d = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; f = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; if ( d >= f ) b [ i ] [ j ] = d ; else b [ i ] [ j ] = f ; } } } max = b [ l - <int> ] [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) { if ( b [ l - <int> ] [ i ] > max ) max = b [ l - <int> ] [ i ] ; } printf ( <str> , max ) ; } }", "label": 3, "id": 3251}
{"input": "int main ( ) { int t , x , n , i = <int> , j = <int> , temp1 , temp2 , k = <int> ; scanf ( <str> , & t ) ; int a [ t ] [ <int> ] [ <int> ] ; while ( k < t ) { scanf ( <str> , & n ) ; if ( n == <int> ) { scanf ( <str> , & x ) ; printf ( <str> , x ) ; return <int> ; } while ( i < n ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ k ] [ i ] [ j ] ) ; j ++ ; } i ++ ; } i = n - <int> ; while ( i >= <int> ) { j = i ; while ( j >= <int> ) { temp1 = a [ k ] [ i ] [ j ] + a [ k ] [ i + <int> ] [ j ] ; temp2 = a [ k ] [ i ] [ j ] + a [ k ] [ i + <int> ] [ j + <int> ] ; if ( temp1 >= temp2 ) a [ k ] [ i ] [ j ] = temp1 ; else a [ k ] [ i ] [ j ] = temp2 ; j -- ; } i -- ; } k ++ ; } k = <int> ; while ( k < t ) { printf ( <str> , a [ k ] [ <int> ] [ <int> ] ) ; k ++ ; } return <int> ; }", "label": 3, "id": 3252}
{"input": "main ( ) { int t , i , l , n , x , y , count [ <int> ] = { } ; int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; ++ i ) { scanf ( <str> , & n ) ; for ( l = <int> ; l < n ; ++ l ) scanf ( <str> , & a [ l ] ) ; for ( x = <int> ; x < n ; ++ x ) for ( y = x + <int> ; y < n ; ++ y ) { for ( l = x ; l <= y ; ++ l ) { if ( a [ l + <int> ] >= a [ l ] ) continue ; else break ; } if ( l == y + <int> ) ++ count [ i ] ; } count [ i ] += n ; } for ( i = <int> ; i < t ; ++ i ) printf ( <str> , count [ i ] ) ; }", "label": 3, "id": 3253}
{"input": "int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , c , d ; scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = ( a * b ) / c ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 1, "id": 3254}
{"input": "int main ( ) { unsigned int t ; unsigned long n , i , j ; long long int a [ <int> ] , sum , k , l ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; k = <int> ; l = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) l ++ ; else { k = k + l * ( l + <int> ) / <int> ; l = <int> ; } } k = k + l * ( l + <int> ) / <int> ; sum = k + n ; printf ( <str> , sum ) ; t -- ; } }", "label": 0, "id": 3255}
{"input": "int main ( void ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { int num ; scanf ( <str> , & num ) ; int ar [ num ] ; for ( i = <int> ; i < num ; i ++ ) scanf ( <str> , & ar [ i ] ) ; long int min = ar [ <int> ] ; for ( i = <int> ; i < num ; i ++ ) { if ( min > ar [ i ] ) min = ar [ i ] ; } printf ( <str> , min * ( num - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3256}
{"input": "long long int a [ <int> ] ; int main ( ) { int t , j , answer , i , k ; scanf ( <str> , & t ) ; while ( t -- ) { long long int count = <int> ; long long int n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] >= a [ j - <int> ] ) { count ++ ; } else { count = count + <int> ; break ; } } } printf ( <str> , count + n ) ; } }", "label": 3, "id": 3257}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] += arr [ i ] [ j + <int> ] ; else arr [ i - <int> ] [ j ] += arr [ i ] [ j ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3258}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , ar [ n ] , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ar [ i ] ) ; int min = ar [ <int> ] , ans ; for ( i = <int> ; i < n ; i ++ ) { if ( ar [ i ] < min ) min = ar [ i ] ; } ans = ( n - <int> ) * min ; printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 3259}
{"input": "int main ( ) { long long int i , t , j , gcd , lcm , a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( j = b ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; break ; } } } else { for ( j = a ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; break ; } } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3260}
{"input": "int main ( void ) { int a [ <int> ] [ <int> ] = { <int> } , s [ <int> ] [ <int> ] = { <int> } ; int i , j , t , max , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; max = s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else if ( s [ i - <int> ] [ j ] > s [ i - <int> ] [ j - <int> ] ) s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; if ( max < s [ i ] [ j ] ) max = s [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3261}
{"input": "int main ( ) { int t , n , i , sum , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & b ) ; if ( b > a ) sum = sum + a ; else { a = b ; sum = sum + b ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3262}
{"input": "int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int hcf , i , grt = <int> ; if ( a > b ) { grt = a ; } else { grt = b ; } for ( i = <int> ; i <= grt ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; } } printf ( <str> , hcf , ( a * b ) / hcf ) ; } return <int> ; }", "label": 2, "id": 3263}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , k , num = <int> ; int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & k ) ; a [ i ] [ j ] = k ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) ? a [ i + <int> ] [ j + <int> ] : a [ i + <int> ] [ j ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3264}
{"input": "int getint ( ) { char temp [ <int> ] , c ; int tmp = <int> , i , j ; c = getchar ( ) ; while ( c != <int> && c != <char> && c != <char> ) { tmp = tmp * <int> + c - <char> ; c = getchar ( ) ; } return tmp ; } int main ( ) { int N , n , i , j ; int cnt ; char temp [ <int> ] , c ; scanf ( <str> , & N ) ; while ( N -- ) { int * * arr , mxsum [ <int> ] ; scanf ( <str> , & n ) ; arr = ( int * * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { arr [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; } c = getchar ( ) ; for ( i = <int> ; i < n ; i ++ ) { cnt = <int> ; j = <int> ; while ( j <= i ) { arr [ i ] [ j ] = getint ( ) ; j ++ ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { int a ; a = ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; arr [ i ] [ j ] = arr [ i ] [ j ] + a ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { free ( arr [ i ] ) ; } free ( arr ) ; } }", "label": 3, "id": 3265}
{"input": "int main ( ) { int t , n , i , k , j , sum , sum1 = <int> ; scanf ( <str> , & t ) ; int b [ t ] ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; if ( n > <int> && n < <int> ) { for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } sum = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) sum = sum + a [ i + <int> ] [ j ] ; else sum = sum + a [ i + <int> ] [ j + <int> ] ; } if ( sum > sum1 ) { sum1 = sum ; sum = <int> ; } } b [ k ] = sum1 ; } } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , b [ i ] ) ; return <int> ; }", "label": 1, "id": 3266}
{"input": "int main ( ) { int i ; scanf ( <str> , & i ) ; while ( i -- ) { long long int small , i , N ; scanf ( <str> , & N ) ; long long int arr [ N ] ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & arr [ i ] ) ; small = arr [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( arr [ i ] < small ) small = arr [ i ] ; } printf ( <str> , small * ( N - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3267}
{"input": "int main ( ) { int k = <int> ; int i , l , j , T , N , arr [ <int> ] , soc [ <int> ] , min ; scanf ( <str> , & T ) ; for ( j = <int> ; j <= T ; j ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } soc [ k ] = ( N - <int> ) * min ; k ++ ; } for ( l = <int> ; l < T ; l ++ ) { printf ( <str> , soc [ l ] ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 3268}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int a [ n ] ; int i , p ; p = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { p = p + a [ i + <int> ] ; a [ i ] = a [ n - <int> ] ; n = n - <int> ; } else if ( a [ i + <int> ] > a [ i ] ) { p = p + a [ i ] ; a [ i + <int> ] = a [ n - <int> ] ; n = n - <int> ; } } printf ( <str> , p ) ; } return <int> ; }", "label": 1, "id": 3269}
{"input": "int main ( ) { long long int T , N , i , num , t , min ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; t = N ; min = <int> ; while ( N -- ) { scanf ( <str> , & num ) ; if ( num < min ) min = num ; } printf ( <str> , min * ( t - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3270}
{"input": "int main ( ) { int t , i , j , n , a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) t = a [ j ] ; } printf ( <str> , t * n ) ; } return <int> ; }", "label": 3, "id": 3271}
{"input": "int lcm ( int a , int b ) ; int main ( ) { int t , a , b , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , a * b / lcm ( a , b ) , lcm ( a , b ) ) ; } } int lcm ( int a , int b ) { int lcm ; lcm = ( a > b ) ? a : b ; while ( <int> ) { if ( lcm % a == <int> && lcm % b == <int> ) { return lcm ; } lcm ++ ; } }", "label": 2, "id": 3272}
{"input": "int main ( ) { long int t , i , n , min , max , count ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; count = <int> ; long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { count += arr [ i ] ; } if ( n == <int> ) { if ( arr [ <int> ] > arr [ <int> ] ) { printf ( <str> , arr [ <int> ] ) ; } else printf ( <str> , arr [ <int> ] ) ; } else { min = arr [ <int> ] ; max = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > arr [ i ] ) { min = arr [ i ] ; } if ( max < arr [ i ] ) { max = arr [ i ] ; } } printf ( <str> , count - min - max ) ; } } return <int> ; }", "label": 1, "id": 3273}
{"input": "int main ( ) { int t , n , i , j , ar [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n , & ar [ <int> ] ) ; int min = ar [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & ar [ j ] ) ; if ( min > ar [ j ] ) min = ar [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3274}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( void ) { int a , b , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { int hcf , lcm ; scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 3275}
{"input": "int main ( ) { int cases , rows , factor , factor2 ; int row [ <int> ] [ <int> ] ; register int i , j , k ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) row [ i ] [ j ] = <int> ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { factor = j % <int> ; factor2 = ( j + <int> ) % <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & row [ factor ] [ k ] ) ; if ( k == <int> ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else if ( k < ( j - <int> ) ) row [ factor ] [ k ] += row [ factor2 ] [ k - <int> ] ; else { if ( row [ factor2 ] [ k ] > row [ factor2 ] [ k - <int> ] ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else row [ factor ] [ k ] += row [ factor2 ] [ k - <int> ] ; } } } factor = ( rows + <int> ) % <int> ; factor2 = <int> ; for ( k = <int> ; k < rows ; k ++ ) if ( row [ factor ] [ k ] > factor2 ) factor2 = row [ factor ] [ k ] ; printf ( <str> , factor2 ) ; for ( j = <int> ; j < rows ; j ++ ) row [ <int> ] [ j ] = row [ <int> ] [ j ] = <int> ; } return <int> ; }", "label": 1, "id": 3276}
{"input": "int main ( void ) { int t , n , a , prev ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; int count = <int> ; n = n - <int> ; while ( n -- ) { prev = a ; scanf ( <str> , & a ) ; if ( a > prev ) { count = count + <int> ; } else { count = count + <int> ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 3277}
{"input": "int gcd ( int x , int y ) { if ( x < y ) { return gcd ( y , x ) ; } int c ; while ( y ) { c = x % y ; x = y ; y = c ; } return x ; } int main ( ) { int t , i , k , s [ <int> ] , r [ <int> ] , x , y ; scanf ( <str> , & t ) ; k = t ; while ( t ) { scanf ( <str> , & x , & y ) ; int hcf = gcd ( x , y ) ; int lcm = ( x * y ) / hcf ; s [ t - <int> ] = hcf ; r [ t - <int> ] = lcm ; t -- ; } for ( i = k - <int> ; i >= <int> ; i -- ) { printf ( <str> , s [ i ] , r [ i ] ) ; } }", "label": 1, "id": 3278}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , c [ <int> ] ; int n , i , j , k , m , x , p = <int> , v , t ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n - <int> ; i ++ ) { m = a [ i ] [ <int> ] + a [ i + <int> ] [ <int> ] ; k = m + a [ i + <int> ] [ <int> ] ; c [ p ] = m > k ? m : k ; p ++ ; } x = p ; v = c [ <int> ] ; for ( p = <int> ; p < x ; p ++ ) { if ( c [ p ] > v ) v = c [ p ] ; } printf ( <str> , v ) ; return <int> ; }", "label": 3, "id": 3279}
{"input": "int main ( ) { long int a [ <int> ] , n , mr , m1 , sum [ <int> ] = { } , t , b ; scanf ( <str> , & t ) ; for ( b = <int> ; b < t ; b ++ ) { scanf ( <str> , & n ) ; if ( n >= <int> && n <= <int> ) { for ( mr = <int> ; mr <= n - <int> ; mr ++ ) { scanf ( <str> , & a [ mr ] ) ; } while ( n != <int> ) { if ( a [ <int> ] > a [ <int> ] ) { sum [ b ] += a [ <int> ] ; for ( m1 = <int> ; m1 < n - <int> ; m1 ++ ) { a [ m1 ] = a [ m1 + <int> ] ; } n -- ; } else if ( a [ <int> ] < a [ <int> ] ) { sum [ b ] += a [ <int> ] ; for ( m1 = <int> ; m1 < n - <int> ; m1 ++ ) { a [ m1 ] = a [ m1 + <int> ] ; } n -- ; } } } } for ( b = <int> ; b < t ; b ++ ) { printf ( <str> , sum [ b ] ) ; } return <int> ; }", "label": 2, "id": 3280}
{"input": "int main ( ) { int t , num1 , num2 , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & num1 , & num2 ) ; x = num1 , y = num2 ; while ( num1 != num2 ) { if ( num1 > num2 ) num1 -= num2 ; else num2 -= num1 ; } printf ( <str> , num1 ) ; printf ( <str> , x * y / num1 ) ; } }", "label": 1, "id": 3281}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; return ( b , a % b ) ; } int main ( ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3282}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcm , i ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3283}
{"input": "int main ( ) { int a , b , num , den , rem , gcd , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 3284}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3285}
{"input": "int main ( ) { int t , i , m , n , j , gcd , a ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m , & n ) ; for ( j = <int> ; j <= m && j <= n ; ++ j ) { if ( m % j == <int> && n % j == <int> ) { gcd = j ; } } printf ( <str> , gcd , ( m * n ) / gcd ) ; } return <int> ; }", "label": 2, "id": 3286}
{"input": "int main ( int argc , char * argv [ ] ) { int t , i , j , x , n , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] , s [ n ] [ n ] , valid [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; valid [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { x = <int> ; if ( i > <int> && j > <int> && valid [ i - <int> ] [ j - <int> ] == <int> ) x = s [ i - <int> ] [ j - <int> ] ; if ( i > <int> && ( x < s [ i - <int> ] [ j ] ) && ( valid [ i - <int> ] [ j ] == <int> ) ) x = s [ i - <int> ] [ j ] ; s [ i ] [ j ] = a [ i ] [ j ] + x ; } } max = - <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( s [ i ] [ j ] > max ) max = s [ i ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3287}
{"input": "int main ( ) { int t , n , i , j , t1 , t2 ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( ; t ; -- t ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; ++ j ) for ( i = <int> ; i <= j ; ++ i ) scanf ( <str> , & a [ j ] [ i ] ) ; for ( i = n - <int> ; i > <int> ; -- i ) for ( j = <int> ; j < i ; ++ j ) { t1 = a [ i ] [ j ] ; t2 = a [ i ] [ j + <int> ] ; if ( t1 < t2 ) a [ i - <int> ] [ j ] += t2 ; else a [ i - <int> ] [ j ] += t1 ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 3288}
{"input": "int main ( ) { int T , A , B ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; printf ( <str> , A / A , A * B ) ; } return <int> ; }", "label": 1, "id": 3289}
{"input": "int gcd ( int a , int b ) { return ( b == <int> ? a : gcd ( b , a % b ) ) ; } int main ( void ) { int t ; int a ; int b ; int d ; freopen ( <str> , <str> , stdin ) ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; d = gcd ( a , b ) ; printf ( <str> , d , ( long long ) a / d * b ) ; } return <int> ; }", "label": 1, "id": 3290}
{"input": "int GCD ( int , int ) ; int main ( ) { int i , T , p = <int> ; int num1 [ <int> ] , num2 [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) scanf ( <str> , & num1 [ i ] , & num2 [ i ] ) ; for ( i = <int> ; i < T ; i ++ ) { p = GCD ( num1 [ i ] , num2 [ i ] ) ; printf ( <str> , GCD ( num1 [ i ] , num2 [ i ] ) , ( num1 [ i ] * num2 [ i ] ) / p ) ; } return <int> ; } int GCD ( int a , int b ) { if ( b == <int> ) return a ; return ( GCD ( b , a % b ) ) ; }", "label": 1, "id": 3291}
{"input": "int main ( ) { int a , t , i , b , c , m , n , g = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a <= b ) c = a ; else c = b ; m = a ; n = b ; for ( i = <int> ; i < c ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { a = a / i ; b = b / i ; g = i * g ; i -- ; } if ( a == <int> || b == <int> ) break ; } printf ( <str> , g , i , ( m * n ) / g ) ; } return <int> ; }", "label": 3, "id": 3292}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , j , min ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( min > a [ j ] ) min = a [ j ] ; printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 3293}
{"input": "int main ( ) { int * * ptr , i , j , ln , n ; scanf ( <str> , & n ) ; for ( ; n ; n -- ) { scanf ( <str> , & ln ) ; ptr = ( int * * ) malloc ( ln * sizeof ( int ) ) ; for ( i = <int> ; i < ln ; i ++ ) { ptr [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i < ln ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & ptr [ i ] [ j ] ) ; } } for ( i = ln - <int> ; i ; i -- ) { for ( j = i ; j ; j -- ) { ptr [ i - <int> ] [ j - <int> ] += MAX ( ptr [ i ] [ j ] , ptr [ i ] [ j - <int> ] ) ; } } printf ( <str> , ptr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3294}
{"input": "int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , gcd , lcm , min , max , prod ; scanf ( <str> , & a , & b ) ; min = a < b ? a : b ; max = a > b ? a : b ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } printf ( <str> , gcd ) ; printf ( <str> , a * b / gcd ) ; } return <int> ; }", "label": 2, "id": 3295}
{"input": "int gcd ( int x , int y ) { while ( x != y ) { if ( x > y ) return gcd ( x - y , y ) ; else return gcd ( x , y - x ) ; } return x ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , c , d ; scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = ( a * b ) / c ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 1, "id": 3296}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; n >= <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 3297}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return gcd ( a , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int r = gcd ( a , b ) ; printf ( <str> , r , ( a * b ) / r ) ; } return <int> ; }", "label": 1, "id": 3298}
{"input": "int main ( ) { int rem , t , gcd ; long int mx , mn , n1 , n2 , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { mx = n1 ; mn = n2 ; } else { mx = n2 ; mn = n1 ; } rem = mn ; while ( rem != <int> ) { mn = rem ; rem = mx % mn ; mx = mn ; } gcd = mn ; lcm = n1 * n2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 3299}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int n , j ; scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; int k = <int> , s = <int> ; while ( k < ( n - <int> ) ) { if ( a [ k ] < a [ k + <int> ] ) { a [ k + <int> ] = a [ k ] ; s = s + a [ k ] ; } else s = s + a [ k + <int> ] ; k ++ ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 3300}
{"input": "int sum ( int a [ <int> ] [ <int> ] , int n , int i , int j ) { int t1 , t2 , max , t ; if ( i > n ) return <int> ; t1 = sum ( a , n , i + <int> , j ) ; t2 = sum ( a , n , i + <int> , j + <int> ) ; if ( t1 > t2 ) max = t1 ; else max = t2 ; t = max + a [ i ] [ j ] ; return t ; } int main ( ) { int t , ans , i , j , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } ans = sum ( a , n , <int> , <int> ) ; printf ( <str> , ans ) ; } }", "label": 2, "id": 3301}
{"input": "int main ( ) { int i , j ; scanf ( <str> , & j ) ; for ( i = <int> ; i < j ; i ++ ) { int x , y , m , n ; scanf ( <str> , & x , & y ) ; m = gcd ( x , y ) ; n = lcm ( x , y ) ; printf ( <str> , m , n ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b % a == <int> ) return a ; else return gcd ( b % a , a ) ; } int lcm ( int a , int b ) { int k ; k = ( a * b ) / gcd ( a , b ) ; return ( k ) ; }", "label": 1, "id": 3302}
{"input": "int main ( void ) { int N , i , a [ <int> ] ; int count = <int> ; printf ( <str> ) ; scanf ( <str> , & N ) ; printf ( <str> ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < N ; i ++ ) { count ++ ; } for ( i = <int> ; i < N ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { count ++ ; } else { break ; } } printf ( <str> , count ) ; return <int> ; }", "label": 1, "id": 3303}
{"input": "void FASTWRITE ( long long int x ) { char str [ <int> ] ; int i = <int> ; if ( x < <int> ) { putchar_unlocked ( <char> ) ; x *= - <int> ; } do { str [ i ++ ] = x + <int> ; x /= <int> ; } while ( x != <int> ) ; for ( i -- ; i >= <int> ; i -- ) putchar_unlocked ( str [ i ] ) ; } long long int fastread ( ) { long long int input = <int> ; char c = getchar_unlocked ( ) ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { long long int t , a , b , i , j , num , dend , div , quo , rem = - <int> , gcd , lcm , k ; t = fastread ( ) ; while ( t -- ) { rem = - <int> ; a = fastread ( ) ; b = fastread ( ) ; if ( a > b ) { dend = a ; div = b ; } else { dend = b ; div = a ; } while ( rem != <int> ) { rem = dend % div ; dend = div ; div = rem ; } gcd = dend ; lcm = a * b / gcd ; FASTWRITE ( gcd ) ; putchar_unlocked ( <char> ) ; FASTWRITE ( lcm ) ; putchar_unlocked ( <char> ) ; } return <int> ; }", "label": 1, "id": 3304}
{"input": "int main ( ) { int i , j , k , r , suma , sumb , sum1 = <int> , sum2 = <int> ; for ( i = <int> ; i <= <int> ; i ++ ) { suma = <int> ; sumb = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & k ) ; if ( j == <int> ) { suma = suma + k ; } if ( j == i ) { sumb = sumb + k ; } } sum1 = suma + sum1 ; sum2 = sumb + sum2 ; } if ( sum2 > sum1 ) printf ( <str> , sum2 ) ; else printf ( <str> , sum1 ) ; return <int> ; }", "label": 1, "id": 3305}
{"input": "int solve ( int , int , int ) ; int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int main ( ) { int t , n , i , j ; long int max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = <int> ; } } max = <int> ; max = solve ( <int> , <int> , n ) ; printf ( <str> , max ) ; } return <int> ; } int solve ( int i , int j , int n ) { long int p , q , ans ; if ( i > n - <int> ) return <int> ; if ( b [ i ] [ j ] != <int> ) return b [ i ] [ j ] ; else { p = solve ( i + <int> , j , n ) ; q = solve ( i + <int> , j + <int> , n ) ; ans = p > q ? p : q ; ans += a [ i ] [ j ] ; b [ i ] [ j ] = ans ; return ans ; } }", "label": 0, "id": 3306}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] ; int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int temp ; int j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( arr [ i ] <= arr [ j ] ) { temp = arr [ j ] ; arr [ j ] = arr [ i ] ; arr [ i ] = temp ; } } } int helo ; helo = arr [ <int> ] * ( n - <int> ) ; printf ( <str> , helo ) ; } return <int> ; }", "label": 2, "id": 3307}
{"input": "int main ( ) { int n , sum1 , sum2 , i , j , k , a , b [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a ) ; i = <int> ; a = ( a * ( a + <int> ) ) / <int> ; while ( a -- ) { scanf ( <str> , & b [ i ] ) ; i ++ ; } sum1 = <int> ; for ( j = <int> ; j < i ; j ++ ) { sum1 = sum1 + b [ j ] ; sum2 = <int> ; for ( k = i - <int> ; k > j ; k -- ) { sum2 = sum2 + b [ k ] ; } if ( sum1 == sum2 ) break ; } printf ( <str> , sum1 ) ; } return <int> ; }", "label": 2, "id": 3308}
{"input": "int cal ( int arr [ ] [ <int> ] , int ) ; int max ( int , int , int ) ; void calll ( int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; calll ( t ) ; return <int> ; } void calll ( int t ) { int i , j , k , n , sum [ <int> ] ; int arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } sum [ i ] = cal ( arr , n ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , sum [ i ] ) ; } } int cal ( int arr [ ] [ <int> ] , int n ) { int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] = max ( arr [ i ] [ j ] , arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; } } return arr [ <int> ] [ <int> ] ; } int max ( int x , int y , int z ) { if ( x + y >= x + z ) return x + y ; else return x + z ; }", "label": 1, "id": 3309}
{"input": "int main ( ) { long int t , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long int n , c = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < c ) c = a [ j ] ; } long long int r ; r = c * ( n - <int> ) ; printf ( <str> , r ) ; } return <int> ; }", "label": 0, "id": 3310}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; long long int s = <int> , i , a , d ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < d ) d = a ; } s = d * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 3311}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] = { <int> } , s [ <int> ] [ <int> ] = { <int> } , abc [ <int> ] , max , i , j , m , b , n , c , sum1 = <int> , sum2 = <int> , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; for ( j = <int> ; j <= m ; j ++ ) { b = j ; c = <int> ; while ( c <= b ) { scanf ( <str> , & a [ j ] [ c ] ) ; c ++ ; } } s [ <int> ] [ <int> ] = sum1 + a [ <int> ] [ <int> ] ; max = s [ <int> ] [ <int> ] ; c = <int> ; for ( j = <int> ; j <= m ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( s [ j - <int> ] [ k ] > s [ j - <int> ] [ k - <int> ] ) s [ j ] [ k ] = s [ j - <int> ] [ k ] + a [ j ] [ k ] ; else s [ j ] [ k ] = s [ j - <int> ] [ k - <int> ] + a [ j ] [ k ] ; if ( s [ j ] [ k ] > max ) max = s [ j ] [ k ] ; } } abc [ i ] = max ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , abc [ i ] ) ; }", "label": 1, "id": 3312}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; long long int n ; for ( int j = <int> ; j <= t ; j ++ ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long long int min = a [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3313}
{"input": "long int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { gcd ( b , a % b ) ; } return <int> ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { long int a , b ; scanf ( <str> , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; puts ( <str> ) ; t -- ; } }", "label": 1, "id": 3314}
{"input": "int main ( ) { int buff [ <int> ] , t_case , n_row , i , j , <unk> , <unk> , ans ; scanf ( <str> , & t_case ) ; while ( t_case -- ) { <unk> = <int> ; <unk> = <int> ; scanf ( <str> , & n_row ) ; for ( i = <int> ; i <= n_row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { <unk> ++ ; scanf ( <str> , & buff [ <unk> ] ) ; if ( i == <int> ) { } else if ( j == <int> ) { buff [ <unk> ] = buff [ <unk> ] + buff [ <unk> ] ; } else if ( j == i ) { buff [ <unk> ] = buff [ <unk> ] + buff [ <unk> + j - <int> ] ; <unk> = <unk> + j - <int> ; } else { if ( buff [ <unk> + j - <int> ] >= buff [ <unk> + j - <int> ] ) { buff [ <unk> ] = buff [ <unk> + j - <int> ] + buff [ <unk> ] ; } else { buff [ <unk> ] = buff [ <unk> ] + buff [ <unk> + j - <int> ] ; } } } } i = n_row - <int> ; ans = buff [ <unk> ] ; while ( i -- ) { if ( ans < buff [ <unk> - <int> ] ) { ans = buff [ <unk> - <int> ] ; } <unk> -- ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 3315}
{"input": "long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , g , l ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 3316}
{"input": "int main ( ) { long t , a , b , i , lcm , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int max = ( a > b ) ? a : b ; while ( <int> ) { if ( max % a == <int> && max % b == <int> ) { gcd = max ; break ; } ++ max ; } lcm = ( a * b ) / gcd ; printf ( <str> , lcm , gcd ) ; } return <int> ; }", "label": 2, "id": 3317}
{"input": "int main ( ) { int n , i , j ; int a [ <int> ] [ <int> ] ; int t , k ; scanf ( <str> , & n ) ; for ( k = <int> ; k <= n ; k ++ ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = t - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) a [ i - <int> ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3318}
{"input": "int fun ( int a [ ] , int i , int n ) { if ( i >= n ) return <int> ; int l , r ; l = a [ i ] + fun ( a , <int> * i + <int> , n ) ; r = a [ i ] + fun ( a , <int> * i + <int> , n ) ; if ( l > r ) return l ; else return r ; } int main ( ) { int t , i , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m ) ; int n = ( m * ( m + <int> ) ) / <int> ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; printf ( <str> , fun ( a , <int> , n ) ) ; } return <int> ; }", "label": 1, "id": 3319}
{"input": "long int gcd ( int x , int y ) { if ( x < y ) { return gcd ( y , x ) ; } int c ; while ( y ) { c = x % y ; x = y ; y = c ; } return x ; } int main ( ) { int t , i , k , x , y ; long int s [ <int> ] , r [ <int> ] ; scanf ( <str> , & t ) ; k = t ; while ( t ) { scanf ( <str> , & x , & y ) ; long int hcf = gcd ( x , y ) ; long int lcm = ( x * y ) / hcf ; s [ t - <int> ] = hcf ; r [ t - <int> ] = lcm ; t -- ; } for ( i = k - <int> ; i >= <int> ; i -- ) { printf ( <str> , s [ i ] , r [ i ] ) ; } }", "label": 1, "id": 3320}
{"input": "int main ( void ) { long int a , b , hcf , min , temp = <int> , max ; int t , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; min = a >= b ? b : a ; max = a >= b ? a : b ; while ( <int> ) { if ( max % min == <int> ) { hcf = min ; break ; } else { temp = min ; min = max % min ; max = temp ; } } printf ( <str> , hcf ) ; printf ( <str> , ( ( a * b ) / hcf ) ) ; } return <int> ; }", "label": 1, "id": 3321}
{"input": "main ( ) { int no , count = <int> , pos , pos2 , results [ <int> ] ; short int arr [ <int> ] ; short int i , j , rows ; scanf ( <str> , & no ) ; while ( no ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; ++ i ) { pos = ( i * ( i + <int> ) ) >> <int> ; for ( j = <int> ; j <= i ; ++ j , ++ pos ) scanf ( <str> , & arr [ pos ] ) ; } for ( i = rows - <int> ; i >= <int> ; -- i ) { pos = ( i * ( i + <int> ) ) >> <int> ; pos2 = pos - i ; for ( j = <int> ; j < i ; ++ j , ++ pos , ++ pos2 ) arr [ pos2 ] += arr [ pos ] > arr [ pos + <int> ] ? arr [ pos ] : arr [ pos + <int> ] ; } results [ count ++ ] = * arr ; -- no ; } for ( i = <int> ; i < count ; ++ i ) printf ( <str> , results [ i ] ) ; return <int> ; }", "label": 3, "id": 3322}
{"input": "int main ( ) { int t , i , j , n , next , prev ; long ans ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int A [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & A [ j ] ) ; prev = <int> ; next = <int> , ans = <int> ; while ( next < n ) { if ( A [ prev ] > A [ next ] ) { ans += A [ next ] ; prev = next ; next ++ ; } else if ( A [ prev ] < A [ next ] ) { ans += A [ prev ] ; next ++ ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 3323}
{"input": "int max ( int a , int b ) { int maxval = a > b ? a : b ; return maxval ; } int main ( ) { int n , i , j , r , arr [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { arr [ i ] [ j ] = max ( arr [ i ] [ j ] + arr [ i + <int> ] [ j ] , arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; n -- ; } return <int> ; }", "label": 0, "id": 3324}
{"input": "int min ( int a , int b ) { return ( a < b ) ? a : b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int m = min ( a , b ) ; int i , j , k , g , l = <int> ; for ( i = m ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } } for ( j = <int> ; j <= m ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { l = j ; break ; } } if ( l == <int> ) l = a * b ; printf ( <str> , g , l ) ; } }", "label": 2, "id": 3325}
{"input": "int main ( ) { long long t , n , x , y , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & y ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; y = ( y > x ? x : y ) ; } i -- ; printf ( <str> , y * i ) ; } return <int> ; }", "label": 0, "id": 3326}
{"input": "int a [ <int> ] [ <int> ] , n , i , j ; int solve ( int i , int j ) { int t1 , t2 , t ; if ( i > n ) return <int> ; else { t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; } return t ; } int main ( ) { int t , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } s = solve ( <int> , <int> ) ; printf ( <str> , s ) ; } }", "label": 2, "id": 3327}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] , i , j , max , n , t ; while ( scanf ( <str> , & t ) != EOF ) { while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) arr [ i ] [ j ] += arr [ i - <int> ] [ j ] ; else if ( j == i ) arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; else { if ( arr [ i - <int> ] [ j ] >= arr [ i - <int> ] [ j - <int> ] ) arr [ i ] [ j ] += arr [ i - <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } } } for ( j = <int> ; j < n ; j ++ ) if ( arr [ n - <int> ] [ j ] > max ) max = arr [ n - <int> ] [ j ] ; printf ( <str> , max ) ; } } return <int> ; }", "label": 0, "id": 3328}
{"input": "int main ( void ) { int t ; int r , k , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; if ( y > x ) { r = x ; x = y ; y = r ; } r = x * y ; while ( y ) { k = x % y ; x = y ; y = k ; } printf ( <str> , x , r / x ) ; } return <int> ; }", "label": 1, "id": 3329}
{"input": "long int LCM ( int , int ) ; int GCD ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , GCD ( a , b ) , LCM ( a , b ) ) ; } } int GCD ( int a , int b ) { int c ; while ( b != <int> ) { c = a % b ; a = b ; b = c ; } return a ; } long int LCM ( int a , int b ) { int max ; max = ( a > b ) ? a : b ; while ( <int> ) { if ( ( max % a == <int> ) && ( max % b == <int> ) ) { return max ; } max ++ ; } }", "label": 2, "id": 3330}
{"input": "int main ( void ) { int t , i , j , k , sum ; int n [ <int> ] , r , h = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum = <int> ; scanf ( <str> , & r ) ; { for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & n [ h ] ) ; sum = sum + n [ h ] ; h ++ ; } } printf ( <str> , ( sum / <int> ) ) ; } } return <int> ; }", "label": 3, "id": 3331}
{"input": "int main ( ) { int t , m , n , h ; long l ; h = <int> ; t = <int> ; m = <int> ; n = <int> ; l = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m , & n ) ; for ( int i = <int> ; i <= m ; i ++ ) { if ( m % i == <int> && n % i == <int> ) h = h * i ; } l = ( m * n ) / h ; printf ( <str> , h , l ) ; h = <int> ; l = <int> ; } return <int> ; }", "label": 2, "id": 3332}
{"input": "int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n1 , n2 , g = <int> ; long long int lcm ; scanf ( <str> , & n1 , & n2 ) ; long long int i ; g = gcd ( n1 , n2 ) ; lcm = n1 * n2 / g ; printf ( <str> , g , lcm ) ; } }", "label": 0, "id": 3333}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , a , b , lcm , hcf ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 3334}
{"input": "void insertionsort ( long long int a [ ] , long long int n ) { int i , j , no ; for ( i = <int> ; i < n - <int> ; i ++ ) { no = a [ i + <int> ] ; for ( j = i ; j >= <int> ; j -- ) { if ( a [ j ] > no ) { a [ j + <int> ] = a [ j ] ; } else break ; } a [ j + <int> ] = no ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; long long int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } insertionsort ( a , n ) ; printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 3335}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else gcd ( b , a % b ) ; } void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int hcf = gcd ( a , b ) ; int lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } }", "label": 1, "id": 3336}
{"input": "int A [ <int> ] [ <int> ] = { <int> } , cache [ <int> ] [ <int> ] = { <int> } ; int max ( int i , int j ) { if ( i > j ) return ( i ) ; else return ( j ) ; } void initialize ( ) { int i , j ; for ( i = <int> ; i < <int> ; ++ i ) for ( j = <int> ; j < <int> ; j ++ ) cache [ i ] [ j ] = <int> ; } int sum ( int i , int j , int n ) { int t ; if ( cache [ i ] [ j ] != <int> ) return ( cache [ i ] [ j ] ) ; else { if ( i == n - <int> ) return ( A [ i ] [ j ] ) ; else { int t1 , t2 ; t1 = sum ( i + <int> , j , n ) ; t2 = sum ( i + <int> , j + <int> , n ) ; t = A [ i ] [ j ] + max ( t1 , t2 ) ; cache [ i ] [ j ] = t ; return ( t ) ; } } } int main ( ) { int t , l ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; ++ l ) { int n , i , j , s ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & A [ i ] [ j ] ) ; initialize ( ) ; s = sum ( <int> , <int> , n ) ; printf ( <str> , s ) ; } return ( <int> ) ; }", "label": 0, "id": 3337}
{"input": "int main ( ) { int t , p , s , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & p ) ; int array [ p ] ; for ( i = <int> ; i < p ; ++ i ) scanf ( <str> , & array [ i ] ) ; int smallest = array [ <int> ] ; for ( i = <int> ; i < p ; ++ i ) { if ( array [ i ] < smallest ) smallest = array [ i ] ; } printf ( <str> , ( long long int ) smallest * ( p - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3338}
{"input": "int main ( ) { int i , j , a [ <int> ] [ <int> ] , n , lines ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = lines - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] < a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } } return <int> ; }", "label": 1, "id": 3339}
{"input": "int max ( int t1 , int t2 ) ; int solve ( int i , int j ) ; int arr [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] , n ; int main ( ) { int a ; scanf ( <str> , & a ) ; while ( a -- ) { int t , i = <int> , j ; scanf ( <str> , & n ) ; for ( t = <int> ; t <= n ; t ++ ) { for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } i ++ ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { cache [ i ] [ j ] = <int> ; } } printf ( <str> , solve ( <int> , <int> ) ) ; } } int solve ( int i , int j ) { int t , t1 , t2 ; if ( i > n ) return <int> ; if ( cache [ i ] [ j ] != <int> ) return cache [ i ] [ j ] ; t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = arr [ i ] [ j ] + max ( t1 , t2 ) ; cache [ i ] [ j ] = t ; return t ; } int max ( int t1 , int t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; }", "label": 1, "id": 3340}
{"input": "int cmp ( int x , int y ) { if ( x >= y ) return x ; else return y ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + cmp ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3341}
{"input": "int main ( ) { int n , i , j , num ; scanf ( <str> , & num ) ; while ( num -- ) { scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i + <int> ] [ j ] = a [ i + <int> ] [ j ] + a [ i ] [ j ] ; } if ( j < i ) { if ( ( a [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ) < ( a [ i + <int> ] [ j + <int> ] + a [ i ] [ j + <int> ] ) ) { a [ i + <int> ] [ j + <int> ] = a [ i + <int> ] [ j + <int> ] + a [ i ] [ j + <int> ] ; } else { a [ i + <int> ] [ j + <int> ] = a [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ; } } else { a [ i + <int> ] [ j + <int> ] = a [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ; } } int max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ n - <int> ] [ i ] ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 3342}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 3343}
{"input": "int max , num [ <int> ] [ <int> ] , sum1 [ <int> ] [ <int> ] ; void sumintri ( int n , int i , int sum ) { if ( n == <int> ) { if ( sum + num [ n ] [ <int> ] > sum1 [ n ] [ <int> ] ) { max = sum + num [ n ] [ i ] ; sum1 [ n ] [ <int> ] = max ; } return ; } if ( i != <int> ) { if ( sum + num [ n ] [ i - <int> ] > sum1 [ n ] [ i - <int> ] ) { sum1 [ n ] [ i - <int> ] = sum + num [ n ] [ i - <int> ] ; sumintri ( n - <int> , i - <int> , sum + num [ n ] [ i - <int> ] ) ; } } if ( sum + num [ n ] [ i ] > sum1 [ n ] [ i ] ) { sum1 [ n ] [ i ] = sum + num [ n ] [ i ] ; sumintri ( n - <int> , i , sum + num [ n ] [ i ] ) ; } } int main ( ) { int t , n , i , j , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; sum1 [ i ] [ j ] = <int> ; } } sum = max = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { sum = num [ n - <int> ] [ i ] ; sum1 [ n - <int> ] [ i ] = sum ; sumintri ( n - <int> , i , sum ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , sum1 [ i ] [ j ] ) ; printf ( <str> ) ; } printf ( <str> , sum1 [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 3344}
{"input": "int main ( void ) { int test , i ; printf ( <str> ) ; scanf ( <str> , & test ) ; long * num1 = ( long * ) malloc ( test * sizeof ( long ) ) ; long * num2 = ( long * ) malloc ( test * sizeof ( long ) ) ; long * gcd = ( long * ) malloc ( test * sizeof ( long ) ) ; long * lcm = ( long * ) malloc ( test * sizeof ( long ) ) ; for ( i = <int> ; i < test ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & num1 [ i ] ) ; scanf ( <str> , & num2 [ i ] ) ; } for ( i = <int> ; i < test ; i ++ ) { long temp1 = num1 [ i ] ; long temp2 = num2 [ i ] ; while ( num1 [ i ] != num2 [ i ] ) { if ( num1 [ i ] > num2 [ i ] ) num1 [ i ] = num1 [ i ] - num2 [ i ] ; else if ( num2 [ i ] > num1 [ i ] ) num2 [ i ] = num2 [ i ] - num1 [ i ] ; } gcd [ i ] = num1 [ i ] ; lcm [ i ] = ( temp1 * temp2 ) / gcd [ i ] ; num1 [ i ] = temp1 ; num2 [ i ] = temp2 ; } for ( i = <int> ; i < test ; i ++ ) { printf ( <str> ) ; printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } return <int> ; }", "label": 1, "id": 3345}
{"input": "int main ( ) { int n , i , t , j , k , tmp ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= n - <int> ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + <int> ] ) { tmp = a [ j - <int> ] [ k ] + a [ j ] [ k ] ; a [ j - <int> ] [ k ] = tmp ; } else { tmp = a [ j - <int> ] [ k ] + a [ j ] [ k + <int> ] ; a [ j - <int> ] [ k ] = tmp ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 2, "id": 3346}
{"input": "int main ( ) { int t , a , b , h , l , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; h = hcf ( a , b ) ; l = ( a * b ) / h ; printf ( <str> , a , b ) ; } return <int> ; } int hcf ( int a , int b ) { if ( a % b == <int> ) { return b ; } else { return ( hcf ( a % b , b ) ) ; } }", "label": 3, "id": 3347}
{"input": "long int gcd ( long int a , long int b ) { while ( ( b % a ) != <int> ) { long int r = b % a ; b = a ; a = r ; } printf ( <str> , a ) ; } main ( ) { long int a , b , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } printf ( <str> , ( a * b ) / ( long int ) gcd ( a , b ) ) ; } }", "label": 1, "id": 3348}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int i ; for ( i = <int> ; i < T ; i ++ ) { long long int n ; scanf ( <str> , & n ) ; long long int arr [ n ] ; int j ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } long long int len = <int> ; long long int sum = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( arr [ j ] >= arr [ j - <int> ] ) { len ++ ; } else { sum += ( ( len * ( len + <int> ) ) / <int> ) ; len = <int> ; } } if ( len > <int> ) { sum += ( ( len * ( len + <int> ) ) / <int> ) ; } if ( n == <int> ) { sum = <int> ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3349}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , j , k , c = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; j = <int> ; while ( n > <int> ) { if ( a [ j ] > a [ j + <int> ] ) { c = c + a [ j + <int> ] ; for ( k = j ; k < n - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; n -- ; } else { c = c + a [ j ] ; for ( k = j + <int> ; k < n - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; n -- ; } j ++ ; } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 3350}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3351}
{"input": "int main ( ) { int tc , T ; scanf ( <str> , & T ) ; for ( tc = <int> ; tc < T ; tc ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 1, "id": 3352}
{"input": "int main ( ) { int A , B , lcm , gcd , i , T , min ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) min = B ; else if ( A < B ) min = A ; for ( i = <int> ; i <= min ; i ++ ) { if ( ( A % i == <int> ) && ( B % i == <int> ) ) gcd = i ; } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3353}
{"input": "int main ( ) { long long int t , n , x = <int> , i , l = <int> , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { x = <int> ; l = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] > a [ i ] ) l ++ ; else { x = x + ( l * ( l - <int> ) ) / <int> ; l = <int> ; } } if ( l > <int> ) { x = x + ( l * ( l - <int> ) ) / <int> ; } printf ( <str> , x + n ) ; } return <int> ; }", "label": 0, "id": 3354}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; long long int n ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long long int min = a [ <int> ] ; for ( int j = <int> ; j < n ; j ++ ) { if ( min > a [ j ] ) { min = a [ j ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3355}
{"input": "int main ( ) { long int T , a , b , m , i ; long int gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; m = ( a > b ? b : a ) ; gcd = <int> ; for ( i = m ; i > <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { gcd = i ; break ; } } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3356}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> && t <= <int> ) { int n , max = <int> , temp = <int> ; scanf ( <str> , & n ) ; if ( n > <int> && n <= <int> ) { int ar [ n ] ; int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( ar [ i + <int> ] - ar [ i ] > <int> ) temp ++ ; else temp = <int> ; if ( temp == <int> ) max += temp ; } printf ( <str> , n + max ) ; } t -- ; } return <int> ; }", "label": 1, "id": 3357}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , min = <int> , i , temp ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & temp ) ; if ( min > temp ) min = temp ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 3358}
{"input": "int max ( int i , int j ) { if ( i > j ) return i ; else return j ; } int main ( ) { int t , i , j , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = n - <int> ; j >= <int> ; j -- ) { a [ i ] [ j ] = max ( a [ i ] [ j ] + a [ i + <int> ] [ j ] , a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3359}
{"input": "int result [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int maxpath ( int i , int j , int n , int test_cases ) { if ( i > n ) return <int> ; if ( result [ i + test_cases ] [ j ] != <int> ) return result [ i + test_cases ] [ j ] ; int t1 , t2 , t ; t1 = maxpath ( i + <int> , j , n , test_cases ) ; t2 = maxpath ( i + <int> , j + <int> , n , test_cases ) ; t = t1 > t2 ? t1 : t2 ; t = t + a [ i ] [ j ] ; result [ i + test_cases ] [ j ] = t ; return t ; } int main ( ) { int i , j , test_cases , row , p ; printf ( <str> ) ; scanf ( <str> , & test_cases ) ; while ( test_cases > <int> ) { printf ( <str> ) ; scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } p = maxpath ( <int> , <int> , row , test_cases ) ; printf ( <str> , p ) ; test_cases -- ; } return <int> ; }", "label": 3, "id": 3360}
{"input": "int main ( void ) { int t , n ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; int x [ n ] , z [ n ] , a = <int> , p = <int> , i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x [ i ] ) ; z [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { if ( x [ i ] > x [ i - <int> ] ) z [ p ] ++ ; else p ++ ; } for ( i = <int> ; i < n ; i ++ ) { z [ i ] = ( ( z [ i ] ) * ( z [ i ] - <int> ) ) / <int> ; a = a + z [ i ] ; } printf ( <str> , a + n ) ; } }", "label": 0, "id": 3361}
{"input": "int main ( ) { int T , i , j , N , k ; scanf ( <str> , & T ) ; int maxi [ T ] ; for ( k = <int> ; k < T ; k ++ ) maxi [ k ] = <int> ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & N ) ; if ( N > <int> ) return <int> ; int a [ N ] ; for ( i = <int> ; i < N ; i ++ ) a [ i ] = <int> ; for ( i = <int> ; i < N ; i ++ ) { int b [ i + <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ j ] ) ; if ( b [ j ] >= <int> ) return <int> ; } for ( j = <int> ; j <= i ; j ++ ) { if ( b [ j ] < b [ j + <int> ] && j + <int> < i ) a [ j ] = a [ j ] + b [ j + <int> ] ; else a [ j ] = a [ j ] + b [ j ] ; } } for ( i = <int> ; i < N ; i ++ ) { if ( a [ i ] > maxi [ k ] ) maxi [ k ] = a [ i ] ; } } for ( k = <int> ; k < T ; k ++ ) printf ( <str> , maxi [ k ] ) ; return <int> ; }", "label": 1, "id": 3362}
{"input": "int optimal ( int a [ ] [ <int> ] , int s [ ] [ <int> ] , int , int , int ) ; int main ( ) { int a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] , r , sum , i , j , noc ; scanf ( <str> , & noc ) ; while ( noc ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; s [ i ] [ j ] = - <int> ; } sum = optimal ( a , s , <int> , <int> , r ) ; printf ( <str> , sum ) ; noc -- ; } return <int> ; } int optimal ( int a [ ] [ <int> ] , int s [ ] [ <int> ] , int row , int col , int r ) { if ( s [ row ] [ col ] > <int> ) return s [ row ] [ col ] ; if ( row == r ) return a [ row ] [ col ] ; if ( ( s [ row + <int> ] [ col ] = optimal ( a , s , row + <int> , col , r ) ) > ( s [ row + <int> ] [ col + <int> ] = optimal ( a , s , row + <int> , col + <int> , r ) ) ) return ( a [ row ] [ col ] + s [ row + <int> ] [ col ] ) ; else return ( a [ row ] [ col ] + s [ row + <int> ] [ col + <int> ] ) ; }", "label": 3, "id": 3363}
{"input": "int main ( void ) { int t , a , b , a1 , b1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int n = <int> ; a1 = a ; b1 = b ; while ( a1 % b1 != <int> ) { n = a1 % b1 ; a1 = b1 ; b1 = n ; } n = ( a * b ) / b1 ; printf ( <str> , b1 , n ) ; } return <int> ; }", "label": 1, "id": 3364}
{"input": "int gcd ( int x , int y ) { return y == <int> ? x : gcd ( y , x % y ) ; } int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int hcf , a , b , lcm ; scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 3365}
{"input": "int main ( ) { int A , B , gcd , lcm , remainder , numerator , denominator , T , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3366}
{"input": "int main ( ) { int j , k , b , sum = <int> , t , N , i , p , a [ max ] ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { for ( i = <int> ; i < t ; i ++ ) { sum = <int> ; scanf ( <str> , & N ) ; if ( N >= <int> && N <= <int> ) { for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & p ) ; if ( p >= <int> && p <= pow ( <int> , <int> ) ) { a [ j ] = p ; } } if ( a [ <int> ] < a [ <int> ] ) { b = a [ <int> ] ; sum = sum + b ; } else if ( a [ <int> ] < a [ <int> ] ) { b = a [ <int> ] ; sum = sum + b ; } for ( k = <int> ; k < N ; k ++ ) { if ( b < a [ k ] ) { sum = sum + b ; b = b ; } else if ( a [ k ] < b ) { b = a [ k ] ; sum = sum + b ; } } printf ( <str> , sum ) ; } } } return <int> ; }", "label": 1, "id": 3367}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned long long n , len = <int> , count , ans = <int> ; scanf ( <str> , & n ) ; unsigned long arr [ n ] ; for ( count = <int> ; count < n ; count ++ ) scanf ( <str> , & arr [ count ] ) ; for ( count = <int> ; count < n - <int> ; count ++ ) { if ( arr [ count + <int> ] >= arr [ count ] ) len ++ ; else { ans += ( len * ( len + <int> ) ) / <int> ; len = <int> ; } } ans += ( len * ( len + <int> ) ) / <int> ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 3368}
{"input": "int main ( void ) { long long int n , A [ <int> ] , i ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } long long int k = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( A [ i ] <= A [ k ] ) k = i ; } printf ( <str> , ( n - <int> ) * A [ k ] ) ; } return <int> ; }", "label": 0, "id": 3369}
{"input": "int tri [ <int> ] [ <int> ] ; int cache [ <int> ] [ <int> ] = { <int> } ; int sum_triangle ( int , int , int , int [ <int> ] [ <int> ] ) ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( ) { int t , i , j , n , k ; scanf ( <str> , & t ) ; int sum [ t ] ; for ( i = <int> ; i < t ; i ++ ) { memset ( cache , <int> , sizeof ( cache ) ) ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & tri [ j ] [ k ] ) ; sum [ i ] = sum_triangle ( <int> , <int> , n , tri ) ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , sum [ i ] ) ; return <int> ; } int sum_triangle ( int x , int y , int n , int tri [ <int> ] [ <int> ] ) { if ( x > n ) return <int> ; else { if ( cache [ x ] [ y ] ) return cache [ x ] [ y ] ; else { cache [ x ] [ y ] = max ( sum_triangle ( x + <int> , y , n , tri ) , sum_triangle ( x + <int> , y + <int> , n , tri ) ) + tri [ x ] [ y ] ; return cache [ x ] [ y ] ; } } }", "label": 0, "id": 3370}
{"input": "int main ( ) { long int a , b , c , d , e , gcd , lcm ; int f , g ; scanf ( <str> , & g ) ; for ( f = <int> ; f <= g ; f ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = a ; d = b ; } else { c = b ; d = a ; } e = c % d ; while ( e != <int> ) { c = d ; d = e ; e = c % d ; } gcd = d ; lcm = a * b / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 3371}
{"input": "int main ( ) { int n ; int i , j , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = ( n - <int> ) ; i >= <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? ( a [ i - <int> ] [ j ] = ( a [ i - <int> ] [ j ] + a [ i ] [ j ] ) ) : ( a [ i - <int> ] [ j ] = ( a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ) ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3372}
{"input": "int main ( ) { int arr [ <int> ] , k , i , n , j , t , sum = <int> , max ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; sum = n ; for ( j = <int> ; j < n ; j ++ ) { max = arr [ j ] ; for ( k = j + <int> ; k < n ; k ++ ) if ( arr [ k ] > max && k - j == <int> ) { max = arr [ k ] ; sum ++ ; } else break ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 3373}
{"input": "int main ( ) { int T ; int ans [ <int> ] ; int sums [ <int> ] ; int i , j ; int Tc ; int n ; int num [ <int> ] ; scanf ( <str> , & T ) ; Tc = T ; while ( Tc -- ) { memset ( ( void * ) sums , <int> , sizeof ( sums ) ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { scanf ( <str> , & num [ j ] ) ; } for ( j = i ; j >= <int> ; j -- ) { sums [ j ] = MAX ( sums [ j ] + num [ j ] , sums [ j - <int> ] + num [ j ] ) ; } sums [ <int> ] += num [ <int> ] ; } ans [ Tc ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { ans [ Tc ] = MAX ( sums [ i ] , ans [ Tc ] ) ; } } while ( T -- ) { printf ( <str> , ans [ T ] ) ; } return <int> ; }", "label": 3, "id": 3374}
{"input": "int main ( void ) { int t , i ; scanf ( <str> , & t ) ; unsigned int a , b , min , j , gcd , lcm ; for ( i = <int> ; i <= t - <int> ; i ++ ) { scanf ( <str> , & a , & b ) ; min = ( a >= b ? b : a ) ; for ( j = min ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; break ; } } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3375}
{"input": "int a [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] , l ; int solve ( int i , int j ) { int t , t1 , t2 ; if ( i > l - <int> ) return <int> ; else if ( cache [ i ] [ j ] != - <int> ) return cache [ i ] [ j ] ; else { t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; } return t ; } int main ( ) { int n , i , j , sum ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { cache [ i ] [ j ] = - <int> ; } } sum = solve ( <int> , <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3376}
{"input": "int main ( ) { int t ; long long a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long long x = a , y = b ; int temp , lcm ; while ( b != <int> ) { temp = a % b ; a = b ; b = temp ; } lcm = x * y / a ; printf ( <str> , a , lcm ) ; } return <int> ; }", "label": 1, "id": 3377}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n , max = - <int> , m = <int> , n1 = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { a [ i ] [ j ] = - <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] > max ) { m = i ; n1 = j ; max = a [ i ] [ j ] ; } } } int s = max , n2 ; if ( n1 == <int> ) { for ( i = <int> ; i < m ; i ++ ) s += a [ i ] [ <int> ] ; } else { n2 = n1 ; for ( i = m - <int> ; i >= <int> ; i -- ) { if ( a [ i ] [ n1 ] > a [ i ] [ n1 - <int> ] ) s += a [ i ] [ n1 ] ; else { s += a [ i ] [ n1 - <int> ] ; n1 -- ; } } n1 = n2 ; } for ( i = m + <int> ; i < n ; i ++ ) { if ( a [ i ] [ n1 + <int> ] > a [ i ] [ n1 ] ) { s += a [ i ] [ n1 + <int> ] ; n1 ++ ; } else s += a [ i ] [ n1 ] ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 3378}
{"input": "int main ( ) { int t , a , b , x , v , y , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { a = b = x = y = v = gcd = lcm = <int> ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { v = b ; b = a % b ; a = v ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3379}
{"input": "int main ( ) { int t , i , j , k , n ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3380}
{"input": "int main ( ) { int a , b , n , repeat ; long temp ; long gcd , lcm , tempa , tempb ; scanf ( <str> , & n ) ; for ( repeat = <int> ; repeat < n ; repeat ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { tempa = b ; tempb = a ; } else { tempa = a ; tempb = b ; } temp = a ; while ( b != <int> ) { a = b ; b = temp % b ; temp = a ; } gcd = a ; printf ( <str> , a ) ; a = tempa / gcd ; b = tempb / gcd ; lcm = gcd * a * b ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 3381}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , gcd , lcm , i , min , max ; scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } gcd = <int> ; for ( i = <int> ; i <= min ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; lcm = ( min * ( max / gcd ) ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3382}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] ; int i , c = <int> , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] > a [ i ] ) { c ++ ; } } printf ( <str> , c + n ) ; } return <int> ; }", "label": 3, "id": 3383}
{"input": "struct array { int a [ <int> ] ; } ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , l = <int> , c = <int> , x = <int> ; scanf ( <str> , & n ) ; struct array ar [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ar [ i ] <fp> a [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { c = c + ar [ i ] <fp> a [ <int> ] ; } for ( i = <int> ; i <= n ; i ++ ) { l = l + ar [ i ] <fp> a [ i ] ; } if ( l > c ) { c = l ; } printf ( <str> , c ) ; } }", "label": 1, "id": 3384}
{"input": "int max ( int num1 , int num2 ) { if ( num1 > num2 ) return num1 ; else if ( num1 == num2 ) return num1 ; else return num2 ; } int main ( ) { int t , n , i , j , temp ; scanf ( <str> , & t ) ; static int arr [ <int> ] [ <int> ] ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { temp = arr [ i ] [ j ] ; arr [ i ] [ j ] = temp + max ( ( arr [ i + <int> ] [ j ] ) , ( arr [ i + <int> ] [ j + <int> ] ) ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3385}
{"input": "int main ( ) { int t , i , j ; long int a ; long int n , min = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; min = <int> ; } return <int> ; }", "label": 0, "id": 3386}
{"input": "int main ( ) { int n1 , n2 , x , y , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } printf ( <str> , x , n1 * n2 / x ) ; } }", "label": 1, "id": 3387}
{"input": "int main ( ) { int a , b , c [ <int> ] [ <int> ] , d [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & b ) ; for ( i = <int> ; i < b ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & c [ i ] [ j ] ) ; } } for ( i = <int> ; i < b ; i ++ ) { d [ b - <int> ] [ i ] = c [ b - <int> ] [ i ] ; } for ( i = b - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( d [ i + <int> ] [ j ] >= d [ i + <int> ] [ j + <int> ] ) d [ i ] [ j ] = c [ i ] [ j ] + d [ i + <int> ] [ j ] ; else d [ i ] [ j ] = c [ i ] [ j ] + d [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , d [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3388}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , t ; scanf ( <str> , & n ) ; int arr [ n ] , i ; long long min ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( i == <int> ) min = arr [ i ] ; else if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( <str> , ( n - <int> ) * ( min ) ) ; } }", "label": 0, "id": 3389}
{"input": "void main ( ) { int a [ <int> ] , t , n , count , p , i , j ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( p = <int> ; p < t ; p ++ ) { count = <int> ; printf ( <str> , p + <int> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count += <int> ; } } printf ( <str> , count ) ; } }", "label": 3, "id": 3390}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 0, "id": 3391}
{"input": "int max ( int , int ) ; int main ( ) { int i , j , t , n , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] += max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , * * arr ) ; } return <int> ; } int max ( int a , int b ) { return ( a > b ) ? a : b ; }", "label": 1, "id": 3392}
{"input": "int main ( ) { int t , i , n , var ; long long int x ; scanf ( <str> , & t ) ; while ( t -- ) { x = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & var ) ; if ( x > var ) x = var ; } x = x * ( n - <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 3393}
{"input": "int main ( void ) { long long int t , i , n , a [ <int> ] , min ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; t -- ; } return <int> ; }", "label": 0, "id": 3394}
{"input": "main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { unsigned int a , b , k = <int> ; scanf ( <str> , & a , & b ) ; int j ; for ( j = <int> ; j <= ( a < b ? a : b ) ; j ++ ) { if ( a % j == <int> && b % j == <int> ) k = j ; } long long int c = ( a * b ) / k ; printf ( <str> , k , c ) ; } }", "label": 2, "id": 3395}
{"input": "int main ( ) { int m , i ; scanf ( <str> , & m ) ; for ( i = <int> ; i <= m ; i ++ ) { long int n ; scanf ( <str> , & n ) ; int j ; long int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; long int min = arr [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( min > arr [ j ] ) min = arr [ j ] ; } long int ans = ( n - <int> ) * min ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 3396}
{"input": "int main ( ) { int n , i , j , k , ans ; long int a [ <int> ] ; long int c ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < k - <int> ; i ++ ) { for ( j = i + <int> ; j < k ; j ++ ) { if ( a [ i ] > a [ j ] ) { c = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = c ; } } } ans = a [ <int> ] * ( k - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 3397}
{"input": "int main ( ) { int g , l , remainder , numerator , denominator , n , i ; long a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } g = denominator ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3398}
{"input": "int main ( ) { int t , n , i , j , min , key ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3399}
{"input": "int main ( ) { long int num1 , num2 , gcd , lcm , r , nr , t , dr ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { nr = num1 ; dr = num2 ; } else { nr = num2 ; dr = num1 ; } r = nr % dr ; while ( r != <int> ) { nr = dr ; dr = r ; r = nr % dr ; } gcd = dr ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 0, "id": 3400}
{"input": "int main ( ) { int t , i , a , b , gcd , lcm , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int n = a , m = b ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { d = i ; } lcm = ( n * m ) / gcd ; } gcd = d ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 3, "id": 3401}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; int a , b , gcd [ n ] , lcm [ n ] ; int i , j ; for ( j = <int> ; j < n ; j ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd [ j ] = i ; } lcm [ j ] = ( a * b ) / gcd [ j ] ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } }", "label": 1, "id": 3402}
{"input": "long long int hcf ( long long int e , long long int f ) { while ( e != f ) { if ( e > f ) e = e - f ; if ( f > e ) f = f - e ; } return e ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; gcd = hcf ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 3403}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , n1 , n2 , lcm , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; g = gcd ( n1 , n2 ) ; lcm = ( n1 * n2 ) / g ; printf ( <str> , g , lcm ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b == <int> ) return b ; return gcd ( b , a % b ) ; }", "label": 3, "id": 3404}
{"input": "int main ( ) { int t , k , i , j ; int rows , z [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & rows ) ; for ( k = <int> , i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & z [ i ] [ j ] ) ; } k ++ ; } for ( i = rows - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { z [ i ] [ j ] = z [ i ] [ j ] + ( ( z [ i + <int> ] [ j ] > z [ i + <int> ] [ j + <int> ] ) ? z [ i + <int> ] [ j ] : z [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , z [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3405}
{"input": "int arr [ <int> ] [ <int> ] = { <int> , <int> } ; int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int sz , i , j , hi ; scanf ( <str> , & sz ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < sz ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] = max ( arr [ i - <int> ] [ j ] , arr [ i - <int> ] [ j - <int> ] ) + arr [ i ] [ j ] ; } } hi = arr [ sz - <int> ] [ <int> ] ; for ( i = <int> ; i < sz ; i ++ ) { if ( arr [ sz - <int> ] [ i ] > hi ) hi = arr [ sz - <int> ] [ i ] ; } printf ( <str> , hi ) ; } return <int> ; }", "label": 0, "id": 3406}
{"input": "main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 2, "id": 3407}
{"input": "int fun ( int [ <int> ] [ <int> ] , int , int , int ) ; main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int ar [ <int> ] [ <int> ] = { <int> } , i , j , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } printf ( <str> , ar [ <int> ] [ <int> ] + fun ( ar , <int> , n , <int> ) ) ; } } int fun ( int ar [ <int> ] [ <int> ] , int i , int n , int k ) { int j ; if ( i >= n ) return <int> ; int q = - <int> ; for ( j = k ; j <= k + <int> ; j ++ ) { if ( q < ar [ i ] [ j ] + fun ( ar , i + <int> , n , j ) ) q = ar [ i ] [ j ] + fun ( ar , i + <int> , n , j ) ; } return q ; }", "label": 2, "id": 3408}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , prev , arr [ <int> ] , x ; long long int sum = <int> ; scanf ( <str> , & n , & prev ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; if ( prev > x ) { sum += x ; prev = x ; } else { sum += prev ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3409}
{"input": "int main ( void ) { int i , t , a , b , hcf = <int> , k ; long lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; k = ( a < b ) ? a : b ; for ( i = k ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; break ; } } b = b / i ; a = a / i ; lcm = a * b * i ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 3410}
{"input": "int main ( ) { int i , j , k , n , m ; scanf ( <str> , & n ) ; int s [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; int a [ m ] [ m ] ; for ( j = <int> ; j < m ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = m - <int> ; j >= <int> ; j -- ) { for ( k = m - <int> ; k >= <int> ; k -- ) { a [ j ] [ k ] += ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ? a [ j + <int> ] [ k ] : a [ j + <int> ] [ k + <int> ] ) ; } } s [ i ] = a [ <int> ] [ <int> ] ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , s [ i ] ) ; } return <int> ; }", "label": 0, "id": 3411}
{"input": "int main ( ) { int T , i ; int R , j , k , num , <unk> [ <int> ] , <unk> [ <int> ] , Answer ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & R ) ; Answer = <int> ; for ( j = <int> ; j < R ; j ++ ) { <unk> [ j ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & num ) ; if ( k != <int> ) <unk> [ k ] = <unk> [ k ] > <unk> [ k - <int> ] ? <unk> [ k ] + num : <unk> [ k - <int> ] + num ; else <unk> [ k ] = <unk> [ k ] + num ; } for ( k = <int> ; k <= j ; k ++ ) { <unk> [ k ] = <unk> [ k ] ; } } for ( j = <int> ; j < R ; j ++ ) if ( <unk> [ j ] > Answer ) Answer = <unk> [ j ] ; printf ( <str> , Answer ) ; } return <int> ; }", "label": 0, "id": 3412}
{"input": "void main ( ) { int t , n , max = - <int> ; int i , j , k ; int a [ <int> ] [ <int> ] ; int ta [ <int> ] ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = - <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; continue ; } if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) { a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } else { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } } } max = - <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j ] > max ) max = a [ n - <int> ] [ j ] ; } ta [ k ] = max ; } for ( k = <int> ; k < t ; k ++ ) { printf ( <str> , ta [ k ] ) ; } }", "label": 3, "id": 3413}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int l = <int> , i , j , sol ; scanf ( <str> , & l ) ; int a [ l ] [ l ] ; for ( i = <int> ; i != l ; i ++ ) { for ( j = <int> ; j != l ; j ++ ) { a [ i ] [ j ] = <int> ; } } scanf ( <str> , & a [ <int> ] [ <int> ] ) ; sol = a [ <int> ] [ <int> ] ; if ( l > <int> ) { for ( i = <int> ; i != l ; i ++ ) { for ( j = <int> ; j != l && j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; int t = a [ i - <int> ] [ j ] ; if ( j - <int> >= <int> ) { int tl = a [ i - <int> ] [ j - <int> ] ; a [ i ] [ j ] += ( tl > t ) ? tl : t ; } else a [ i ] [ j ] += t ; if ( a [ i ] [ j ] > sol ) { sol = a [ i ] [ j ] ; } } } } printf ( <str> , sol ) ; } return <int> ; }", "label": 0, "id": 3414}
{"input": "int main ( ) { int t , x , max ; scanf ( <str> , & t ) ; int a [ <int> ] [ <int> ] ; int s , s1 , s2 , i , j ; for ( x = <int> ; x < t ; x ++ ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } s1 = <int> ; s2 = <int> ; for ( i = s - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { s1 = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; s2 = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; if ( s1 > s2 ) a [ i ] [ j ] = s1 ; else a [ i ] [ j ] = s2 ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3415}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; unsigned long int A [ n ] , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; if ( A [ i ] < min ) min = A [ i ] ; } unsigned long long int ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; t -- ; } return <int> ; }", "label": 0, "id": 3416}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i , s , gcd , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) s = a ; else s = b ; for ( i = <int> ; i <= s ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { gcd = i ; } } printf ( <str> , gcd ) ; lcm = ( a * b ) / gcd ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 2, "id": 3417}
{"input": "main ( ) { int i , j , t , n , p [ <int> ] [ <int> ] ; s ( t ) ; while ( t -- ) { s ( n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) s ( p [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) p [ i ] [ j ] += p [ i + <int> ] [ j ] > p [ i + <int> ] [ j + <int> ] ? p [ i + <int> ] [ j ] : p [ i + <int> ] [ j + <int> ] ; printf ( <str> , p [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 3418}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } } int lcm ( int a , int b ) { return ( a * b ) / ( gcd ( a , b ) ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 3419}
{"input": "int retMax ( int , int , int ) ; int a [ <int> ] [ <int> ] ; int main ( ) { int ntestcases ; int sum , currptr , lvl , ht , i , j , k , n1 , n2 , p ; scanf ( <str> , & ntestcases ) ; for ( i = <int> ; i < ntestcases ; i ++ ) { scanf ( <str> , & ht ) ; sum = <int> ; currptr = <int> ; n1 = <int> ; n2 = <int> ; for ( j = <int> ; j < ht ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } sum = retMax ( <int> , <int> , ht ) ; } printf ( <str> , sum ) ; } } int retMax ( int currptr , int lvl , int ht ) { int n , n1 , n2 ; if ( lvl == ht ) { n1 = a [ lvl ] [ currptr ] ; n2 = a [ lvl ] [ currptr + <int> ] ; return n1 > n2 ? n1 : n2 ; } else { n1 = retMax ( currptr , lvl + <int> , ht ) ; n2 = retMax ( currptr + <int> , lvl + <int> , ht ) ; n = a [ lvl ] [ currptr ] ; return ( n + ( n1 > n2 ? n1 : n2 ) ) ; } }", "label": 2, "id": 3420}
{"input": "int main ( ) { long long int t , i , j , k , n [ <int> ] [ <int> ] , flag ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n [ i ] [ <int> ] ) ; for ( j = <int> ; j <= n [ i ] [ <int> ] ; j ++ ) scanf ( <str> , & n [ i ] [ j ] ) ; } for ( i = <int> ; i < t ; i ++ ) { j = <int> ; k = j + <int> ; while ( j <= n [ i ] [ <int> ] ) { if ( n [ i ] [ j ] < n [ i ] [ k ] ) flag ++ ; j ++ ; } flag = flag + n [ i ] [ <int> ] ; printf ( <str> , flag ) ; } return <int> ; }", "label": 1, "id": 3421}
{"input": "long gcd ( long x , long y ) { if ( y == <int> ) return <int> ; else gcd ( y , x % y ) ; } int main ( ) { long int i , t , a , b , g , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; lcm = a * b / g ; printf ( <str> , g , lcm ) ; } return <int> ; }", "label": 1, "id": 3422}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long int a , b , c , d , e , gcd , lcm ; scanf ( <str> , & a , & b ) ; c = a ; d = b ; while ( d != <int> ) { e = d ; d = c % d ; c = e ; } gcd = c ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 3423}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int a [ <int> ] [ <int> ] , n , i , j , k , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( i == <int> && j == <int> ) a [ i ] [ j ] = a [ i ] [ j ] ; else if ( i == j ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else if ( j == <int> && i != <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else a [ i ] [ j ] += max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } } k = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( a [ n - <int> ] [ i ] > k ) k = a [ n - <int> ] [ i ] ; printf ( <str> , k ) ; } }", "label": 1, "id": 3424}
{"input": "int main ( ) { int t , i , a , b , small , large , gcd , lcm , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { small = a ; large = b ; } else { small = b ; large = a ; } for ( j = small ; j <= b * a ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { lcm = j ; break ; } } for ( j = a * b ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; break ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3425}
{"input": "int main ( ) { int t ; long long d , r , s , x , y , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; lcm = x * y ; if ( x > y ) { d = x ; } else { d = y ; } if ( x < y ) { d = x ; } else { r = y ; } while ( d % r ) { d %= r ; s = d ; d = r ; r = s ; } gcd = r ; lcm = ( lcm / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 3, "id": 3426}
{"input": "int main ( ) { int t ; int x = <int> , y = <int> , i , z = <int> ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n , a [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } i = <int> ; while ( i < n - <int> ) { if ( a [ i ] > a [ i + <int> ] ) { x = x + a [ i + <int> ] ; } else { y = y + a [ i ] ; } i ++ ; } z = x + y ; printf ( <str> , z ) ; z = <int> ; x = <int> ; y = <int> ; } return <int> ; }", "label": 1, "id": 3427}
{"input": "main ( ) { int t , i , k ; long a , b , min , max ; scanf ( <str> , & t ) ; int hcf [ t ] , lcm [ t ] ; for ( i = <int> ; i < t ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; hcf [ i ] = <int> ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } if ( max % min == <int> ) { hcf [ i ] = min ; lcm [ i ] = max ; } else { for ( k = <int> ; k <= min / <int> ; k ++ ) { if ( min % k == <int> && max % k == <int> ) hcf [ i ] = k ; } lcm [ i ] = ( max * min ) / hcf [ i ] ; } } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> ) ; printf ( <str> , hcf [ i ] , lcm [ i ] ) ; } }", "label": 1, "id": 3428}
{"input": "int main ( ) { int min , a [ <int> ] , t , no , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < no ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( no - <int> ) ) ; } return <int> ; }", "label": 3, "id": 3429}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i , a [ n ] , t ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; t = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < t ) t = a [ i ] ; } t = t * ( n - <int> ) ; printf ( <str> , t ) ; } return <int> ; }", "label": 0, "id": 3430}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int max = <int> ; int n , i , j ; scanf ( <str> , & n ) ; int ar [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ar [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { int s = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ar [ i ] [ j ] ) ; s = s + ar [ i ] [ j ] ; } if ( s > max ) max = s ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 3431}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int get_max ( int arr [ ] , int len ) { int maximum = <int> , it ; for ( it = <int> ; it <= len ; it ++ ) { if ( maximum < arr [ it ] ) maximum = arr [ it ] ; } return maximum ; } int main ( ) { int it , <unk> , num , length , count , arr [ MAX ] ; scanf ( <str> , & count ) ; while ( count -- > <int> ) { scanf ( <str> , & length ) ; for ( it = <int> ; it <= length ; it ++ ) { arr [ it ] = <int> ; } for ( <unk> = <int> ; <unk> <= length ; <unk> ++ ) { for ( it = <unk> ; it >= <int> ; it -- ) { scanf ( <str> , & num ) ; if ( it == <int> ) { arr [ it ] += num ; } else { arr [ it ] = max ( ( arr [ it - <int> ] + num ) , ( arr [ it ] + num ) ) ; } } } printf ( <str> , get_max ( arr , length ) ) ; } return <int> ; }", "label": 0, "id": 3432}
{"input": "int main ( ) { int a , b , hcf , lcm , t , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( m != n ) { if ( m > n ) m = m - n ; else n = n - m ; } hcf = m ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 3433}
{"input": "int main ( ) { int t ; long n , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i != <int> ) { if ( min > a [ i ] ) min = a [ i ] ; } else min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3434}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int i , hcf ; for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; } } long long int lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 3435}
{"input": "main ( ) { int t , i , g , sm , <unk> ; scanf ( <str> , & t ) ; for ( g = <int> ; g <= t ; g ++ ) { int a , b , hcf , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) { sm = b ; <unk> = a ; } else { sm = a ; <unk> = b ; } for ( i = <int> ; i <= sm ; i ++ ) { if ( a % i == <int> && b % i == <int> ) hcf = i ; } for ( i = <unk> ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) { lcm = i ; break ; } } printf ( <str> , hcf , lcm ) ; } }", "label": 2, "id": 3436}
{"input": "int main ( ) { int n , i , j , m , p , hcf , lar , s , k ; long lcm ; scanf ( <str> , & n ) ; if ( n <= <int> ) { for ( i = <int> ; i <= n ; i ++ ) { hcf = <int> ; lcm = <int> ; scanf ( <str> , & m , & p ) ; if ( ( m <= <int> && m >= <int> ) && ( p < <int> && p >= <int> ) ) { lar = m ; s = p ; if ( p > lar ) { lar = p ; s = m ; } for ( j = lar ; <int> ; j += lar ) { if ( j % m == <int> && j % p == <int> ) { lcm = j ; break ; } } for ( k = s ; k > <int> ; k -- ) { if ( m % k == <int> && p % k == <int> ) { hcf = k ; break ; } } printf ( <str> , hcf , lcm ) ; } } } return <int> ; }", "label": 2, "id": 3437}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > - <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3438}
{"input": "int sum ( int ) ; int a [ <int> ] [ <int> ] ; int main ( ) { int k = <int> , t , n , i , j , c ; scanf ( <str> , & c ) ; t = c ; int ans [ c ] ; while ( c != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j > i ) a [ i ] [ j ] = <int> ; else if ( i > n - <int> ) a [ i ] [ j ] = <int> ; else scanf ( <str> , & a [ i ] [ j ] ) ; } } ans [ k ] = sum ( n - <int> ) ; c -- ; k ++ ; } k = <int> ; while ( k < t ) { printf ( <str> , ans [ k ] ) ; k ++ ; } } int sum ( int n ) { int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = n - <int> ; j >= <int> ; j -- ) { if ( ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) >= ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } } return a [ <int> ] [ <int> ] ; }", "label": 1, "id": 3439}
{"input": "int main ( ) { int n , l , k , i , j , t , p , max ; int arr [ <int> ] ; scanf ( <str> , & n , & l ) ; for ( p = <int> ; p <= n ; p ++ ) { for ( i = <int> , k = <int> ; i < l ; i ++ ) { for ( j = <int> , t = <int> ; j <= i ; j ++ ) { scanf ( <str> , & t ) ; k = k + t ; } arr [ i ] = k ; } for ( i = <int> , max = <int> ; i < l ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } printf ( <str> , max / <int> ) ; } return <int> ; }", "label": 1, "id": 3440}
{"input": "int main ( ) { int n , t , a [ <int> ] [ <int> ] , i , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j + <int> ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j ] ; max = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( a [ n - <int> ] [ j ] > max ) max = a [ n - <int> ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 3441}
{"input": "int main ( ) { int tc ; scanf ( <str> , & tc ) ; int n ; for ( int i = <int> ; i < tc ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( int j = <int> ; j < n ; j ++ ) for ( int k = <int> ; k <= i ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; int M = <int> , sum ; for ( int i = <int> ; i < n - <int> ; i ++ ) { int j = <int> , sum = <int> ; sum = a [ i ] [ j ] + a [ i + <int> ] [ j ] + a [ i + <int> ] [ j + <int> ] ; if ( sum > M ) M = sum ; } printf ( <str> , M ) ; } return <int> ; }", "label": 3, "id": 3442}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3443}
{"input": "int MAX ( int a , int b ) { return a > b ? a : b ; } int MIN ( int a , int b ) { return a < b ? a : b ; } int LCM ( int a , int b ) { int lcm ; for ( int i = <int> ; ; i ++ ) { if ( MAX ( a , b ) * i % MIN ( a , b ) == <int> ) { lcm = MAX ( a , b ) * i ; break ; } } return lcm ; } int HCF ( int a , int b ) { int hcf ; for ( int i = MIN ( a , b ) ; i > <int> ; i -- ) { if ( MAX ( a , b ) % i == <int> && MIN ( a , b ) % i == <int> ) { hcf = i ; break ; } } return hcf ; } int main ( ) { int n ; scanf ( <str> , & n ) ; for ( int i = <int> ; i <= n ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , HCF ( a , b ) , LCM ( a , b ) ) ; } return <int> ; }", "label": 2, "id": 3444}
{"input": "int gcd ( int a , int b ) { int r = a % b ; if ( r == <int> ) return b ; else return gcd ( b , r ) ; } int lcm ( int a , int b ) { long int r = ( a * b ) / gcd ( a , b ) ; return r ; } int main ( void ) { int t , a , b ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; long int l = lcm ( a , b ) ; printf ( <str> , g ) ; printf ( <str> , l ) ; } return <int> ; }", "label": 1, "id": 3445}
{"input": "short int e [ <int> ] , x [ <int> ] ; int main ( ) { short int a , b , c , i , k ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & b ) ; i = <int> ; c = b - <int> ; while ( b -- ) { if ( c == b - <int> ) { scanf ( <str> , & e [ <int> ] ) ; i ++ ; } else { scanf ( <str> , & e [ i ] , & e [ i + <int> ] ) ; i += <int> ; } } e [ -- i ] = - <int> ; i = <int> ; while ( e [ i ] != - <int> ) { if ( i == <int> ) x [ i ] = e [ i ] + e [ i + <int> ] + e [ i + <int> ] ; else { x [ i ] = e [ i ] + e [ i + <int> ] + e [ i + <int> ] ; } i ++ ; } x [ i ] = - <int> ; i = <int> , k = x [ <int> ] ; while ( x [ i ] != - <int> ) { if ( x [ i ] > k ) k = x [ i ] ; i ++ ; } printf ( <str> , k ) ; } return <int> ; }", "label": 1, "id": 3446}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int tc = <int> ; tc < t ; tc ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; long long int p = ( long long int ) a * b ; int temp ; if ( a > b ) { temp = a ; a = b ; b = temp ; } while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } long long int lcm = p / a ; printf ( <str> , a , lcm ) ; } return <int> ; }", "label": 0, "id": 3447}
{"input": "int max ( int n1 , int n2 ) { if ( n1 > n2 ) return n1 ; else return n2 ; } int main ( ) { int t , a [ <int> ] [ <int> ] , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3448}
{"input": "int main ( ) { int t , gcd , lcm , a , b , p , q ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; p = a , q = b ; lcm = ( a > b ? a : b ) ; while ( b > <int> ) { gcd = a % b ; a = b ; b = gcd ; } printf ( <str> , a ) ; while ( <int> ) { if ( lcm % p == <int> && lcm % q == <int> ) { printf ( <str> , lcm ) ; break ; } lcm ++ ; } } }", "label": 2, "id": 3449}
{"input": "int main ( ) { int t , s = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { long long n , i ; int a [ <int> ] , min ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 3450}
{"input": "main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int i , N ; scanf ( <str> , & N ) ; long A [ N ] , cost = <int> ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & A [ i ] ) ; for ( i = <int> ; i < N - <int> ; i ++ ) { if ( A [ i ] < A [ i + <int> ] ) { cost = cost + A [ i ] ; int t = A [ i ] ; A [ i ] = A [ i + <int> ] ; A [ i + <int> ] = t ; } else cost = cost + A [ i + <int> ] ; } printf ( <str> , cost ) ; } }", "label": 1, "id": 3451}
{"input": "int t , a [ <int> ] [ <int> ] , i , j , p1 , p2 , n ; int main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { p1 = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; p2 = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = ( p1 > p2 ) ? p1 : p2 ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3452}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , m , n , gcd , lcm , r ; scanf ( <str> , & a , & b ) ; if ( a > b ) { a = m ; b = n ; } else { a = n ; b = m ; } r = m % n ; while ( r != <int> ) { m = n ; n = r ; r = m % n ; } gcd = n ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3453}
{"input": "int main ( ) { int t , m , n , i , j , a ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; int s [ n ] [ n ] , b [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) s [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & b [ i ] [ j ] ) ; s [ <int> ] [ <int> ] = b [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) s [ i ] [ <int> ] = b [ i ] [ j ] + s [ i - <int> ] [ <int> ] ; else { s [ i ] [ j ] = ( s [ i - <int> ] [ j - <int> ] > s [ i - <int> ] [ j ] ) ? s [ i - <int> ] [ j - <int> ] : s [ i - <int> ] [ j ] ; s [ i ] [ j ] = s [ i ] [ j ] + b [ i ] [ j ] ; } } } m = s [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( m < s [ n - <int> ] [ j ] ) m = s [ n - <int> ] [ j ] ; } printf ( <str> , m ) ; t -- ; } return <int> ; }", "label": 1, "id": 3454}
{"input": "int gcd ( int x , int y ) { if ( y == <int> ) return x ; else return gcd ( y , x % y ) ; } int main ( ) { int n ; int a , b , c , d ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = a * b / c ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 1, "id": 3455}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n1 , n2 ; scanf ( <str> , & n1 , & n2 ) ; int x = n1 , y = n2 , i ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } printf ( <str> , n1 , x * y / n1 ) ; } }", "label": 1, "id": 3456}
{"input": "int main ( ) { int n , a , b , i , j , min , max , gcd , t , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { min = a ; max = b ; } for ( j = min ; j > <int> ; j -- ) { if ( max % j == <int> ) gcd = j ; else continue ; } lcm = max * min / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3457}
{"input": "int call ( int [ <int> ] [ <int> ] , int , int ) ; int main ( ) { int j , i , a [ <int> ] [ <int> ] , n , sum , test ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { a [ n ] [ i ] = - <int> ; } sum = call ( a , <int> , <int> ) ; printf ( <str> , sum ) ; } return <int> ; } int call ( int a [ <int> ] [ <int> ] , int i , int j ) { if ( a [ i + <int> ] [ j ] == - <int> ) return a [ i ] [ j ] ; else { return max ( a [ i ] [ j ] + call ( a , i + <int> , j ) , a [ i ] [ j ] + call ( a , i + <int> , j + <int> ) ) ; } }", "label": 2, "id": 3458}
{"input": "int main ( void ) { int t ; long long int i , min = <int> , cost = <int> , n ; long long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( a [ <int> ] < a [ <int> ] ) min = a [ <int> ] ; else min = a [ <int> ] ; cost = min ; for ( i = <int> ; i < n ; i ++ ) { if ( min < a [ i ] ) { cost = cost + min ; } else { min = a [ i ] ; cost = cost + min ; } } printf ( <str> , cost ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 3459}
{"input": "int n , k , ar [ <int> ] [ <int> ] , j , i , t ; int max ( int a , int b ) { return ( a >= b ? a : b ) ; } int funct ( int ar [ <int> ] [ <int> ] , int k , int l , int n ) { if ( k > n - <int> || l > n - <int> ) return <int> ; else return ( ar [ k ] [ l ] + max ( funct ( ar , k + <int> , l , n ) , funct ( ar , k + <int> , l + <int> , n ) ) ) ; } int main ( ) { int sum ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } sum = funct ( ar , <int> , <int> , n ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 3460}
{"input": "int gcd ( long int a , long int b ) { while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } return a ; } int main ( ) { int t ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 2, "id": 3461}
{"input": "int main ( void ) { int a , b , c , t ; float gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; c = a * b ; while ( b != <int> ) { t = a % b ; a = b ; b = t ; } gcd = a ; lcm = c / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 3462}
{"input": "int main ( void ) { long int T , i , a , b , LCM , GCD ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & a , & b ) ; while ( a != b ) { if ( a > b ) GCD = a - b ; else b = b - a ; } printf ( <str> , GCD ) ; LCM = ( a * b ) / GCD ; printf ( <str> , LCM ) ; } return <int> ; }", "label": 2, "id": 3463}
{"input": "int main ( ) { int t , i ; long long int a , b , temp , lcm , m , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { temp = m ; m = n ; n = temp % m ; } lcm = ( a * b ) / m ; printf ( <str> , m , lcm ) ; } return <int> ; }", "label": 1, "id": 3464}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] = { - <int> } , l , i , j , t , b [ <int> ] [ <int> ] = { - <int> } , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i <= l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else if ( i == j ) { b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { if ( b [ i - <int> ] [ j ] >= b [ i - <int> ] [ j - <int> ] ) b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; else b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } } } m = b [ l ] [ <int> ] ; for ( i = <int> ; i <= l ; i ++ ) { if ( b [ l ] [ i ] > m ) m = b [ l ] [ i ] ; } printf ( <str> , m ) ; } return <int> ; }", "label": 3, "id": 3465}
{"input": "int main ( ) { int n , a , b , numerator , denominator , gcd , lcm , remainder ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = b ; denominator = a ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; gcd = <int> ; lcm = <int> ; } return <int> ; }", "label": 1, "id": 3466}
{"input": "int main ( ) { long int i , t , n1 , n2 , x , y , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } lcm = ( n1 * n2 ) / x ; printf ( <str> , x , lcm ) ; } }", "label": 1, "id": 3467}
{"input": "int maxx ( int a , int b ) { if ( a > b ) return a ; return b ; } int scan ( ) { int n = <int> ; int ch = getchar_unlocked ( ) ; while ( ch < <char> || ch > <char> ) ch = getchar_unlocked ( ) ; while ( ch >= <char> && ch <= <char> ) { n = ( n << <int> ) + ( n << <int> ) + ch - <char> ; ch = getchar_unlocked ( ) ; } return n ; } int main ( ) { int t , i , j , n ; int arr [ <int> ] [ <int> ] ; t = scan ( ) ; while ( t -- ) { n = scan ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = scan ( ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = arr [ i ] [ j ] + maxx ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3468}
{"input": "int main ( void ) { int n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( int i = n - <int> ; i > <int> ; i -- ) for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3469}
{"input": "int p [ <int> ] [ <int> ] ; long long int st [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; return y ; } int s ( int i , int j , int n ) { int t1 , t2 , t ; if ( i > n ) return <int> ; if ( st [ i ] [ j ] == <int> ) { t1 = s ( i + <int> , j , n ) ; t2 = s ( i + <int> , j + <int> , n ) ; t = max ( t1 , t2 ) + p [ i ] [ j ] ; st [ i ] [ j ] = t ; } return st [ i ] [ j ] ; } int main ( ) { int l , z , n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) st [ i ] [ j ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & p [ i ] [ j ] ) ; z = s ( <int> , <int> , n ) ; printf ( <str> , z ) ; } return <int> ; }", "label": 0, "id": 3470}
{"input": "int gcd ( long int , long int ) ; void main ( ) { int n , i , g , l ; long int x , y ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x , & y ) ; g = gcd ( x , y ) ; l = ( ( x * y ) / g ) ; printf ( <str> , g , l ) ; } } int gcd ( long int m , long int n ) { if ( n == <int> ) return m ; else return gcd ( n , m % n ) ; }", "label": 1, "id": 3471}
{"input": "int main ( ) { int A , B , lcm , gcd , i , T , min ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) min = B ; else if ( A < B ) min = A ; for ( i = <int> ; i <= min ; i ++ ) { if ( ( A % i == <int> ) && ( B % i == <int> ) ) gcd = i ; } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3472}
{"input": "main ( ) { int T ; long int N , A [ <int> ] , min , i ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; if ( i == <int> ) min = A [ i ] ; else min = ( min < A [ i ] ? min : A [ i ] ) ; } printf ( <str> , ( min * ( N - <int> ) ) ) ; } }", "label": 0, "id": 3473}
{"input": "void main ( ) { int t , a , b , l , g , i ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; for ( i = a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } } l = ( a * b ) / g ; printf ( <str> , l , g ) ; t -- ; } }", "label": 2, "id": 3474}
{"input": "int findgcd ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , k , m , n ; unsigned long long int i ; scanf ( <str> , & a , & b ) ; m = a ; n = b ; k = findgcd ( a , b ) ; i = ( m * n ) ; printf ( <str> , k , i / k ) ; printf ( <str> ) ; } } int findgcd ( int a , int b ) { if ( a > b ) { if ( a % b == <int> ) return b ; else return findgcd ( b , a % b ) ; } else { if ( b % a == <int> ) return a ; else return findgcd ( b % a , a ) ; } }", "label": 1, "id": 3475}
{"input": "int main ( ) { long int i , j , big , m , t , n , p ; long int arr [ <int> ] , sum [ <int> ] , k [ <int> ] ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; k [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; m = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( j == <int> ) sum [ <int> ] = k [ <int> ] + arr [ <int> ] ; else if ( j == i ) sum [ m ++ ] = arr [ j ] + k [ j - <int> ] ; else for ( p = j - <int> ; p <= ( i + j - <int> ) ; p ++ ) sum [ m ++ ] = k [ p ] + arr [ j ] ; } for ( j = <int> ; j < m ; j ++ ) k [ j ] = sum [ j ] ; } big = <int> ; for ( i = <int> ; i < m ; i ++ ) if ( big < sum [ i ] ) big = sum [ i ] ; printf ( <str> , big ) ; t -- ; } return <int> ; }", "label": 3, "id": 3476}
{"input": "int main ( ) { long int test , n , i , j , k , arr [ <int> ] , min , sum ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } min = arr [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( arr [ k ] < min ) { min = arr [ k ] ; } } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } }", "label": 0, "id": 3477}
{"input": "int main ( void ) { int t , n , a [ <int> ] , i , j , cost = { <int> } , k , min ; si ( t ) ; for ( i = <int> ; i < t ; i ++ ) { si ( n ) ; for ( j = <int> ; j < n ; j ++ ) si ( a [ j ] ) ; cost = <int> ; min = <int> ; for ( j = <int> ; j < n ; j ++ ) if ( a [ j ] < a [ min ] ) min = j ; cost = a [ min ] * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 3478}
{"input": "int cache [ <int> ] ; int read_int ( ) { char c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; int ret = <int> ; while ( c >= <char> && c <= <char> ) { ret = <int> * ret + c - <char> ; c = gc ( ) ; } return ret ; } int solve ( int i , int j , int n , int a [ ] [ n ] ) { int t1 , t2 , t , temp ; temp = i * j ; if ( i > n - <int> ) return <int> ; else if ( cache [ temp ] != <int> ) return ( cache [ i * j ] ) ; t1 = solve ( i + <int> , j , n , a ) ; t2 = solve ( i + <int> , j + <int> , n , a ) ; if ( t1 >= t2 ) t = t1 + a [ i ] [ j ] ; else t = t2 + a [ i ] [ j ] ; cache [ temp ] = t ; return t ; } int main ( ) { int t , n , i , j , res ; t = read_int ( ) ; while ( t != <int> ) { n = read_int ( ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < <int> ; i ++ ) cache [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = read_int ( ) ; } } res = solve ( <int> , <int> , n , a ) ; printf ( <str> , res ) ; t -- ; } return <int> ; }", "label": 1, "id": 3479}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , a , min = INT_MAX ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3480}
{"input": "int gcd ( int m , int n ) { if ( n == <int> ) return m ; else return gcd ( n , m % n ) ; } int lcm ( int m , int n ) { int max ; if ( m > n ) max = m ; else max = n ; while ( <int> ) { if ( max % m == <int> && max % n == <int> ) { return max ; break ; } ++ max ; } } int main ( ) { long t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } }", "label": 2, "id": 3481}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 3482}
{"input": "int main ( void ) { int t , j ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { long int a , b , i , hcf = <int> ; scanf ( <str> , & a , & b ) ; i = b ; i = ( a > b ? b : a ) ; for ( ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; break ; } } printf ( <str> , hcf ) ; if ( hcf == <int> ) printf ( <str> ) ; else printf ( <str> , ( a * ( b / hcf ) ) ) ; } return <int> ; }", "label": 2, "id": 3483}
{"input": "int main ( ) { int t , n [ <int> ] , a [ <int> ] [ <int> ] , i , j , sum [ <int> ] , min ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n [ i ] ) ; for ( j = <int> ; j < n [ i ] ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> ) ; } for ( i = <int> ; i < t ; i ++ ) { sum [ i ] = <int> ; min = a [ i ] [ <int> ] ; for ( j = <int> ; j < n [ i ] ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; sum [ i ] = sum [ i ] + min ; } } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , sum [ i ] ) ; return <int> ; }", "label": 3, "id": 3484}
{"input": "int gcd ( int a , int b ) { int g = a ; if ( b != <int> ) { g = gcd ( b , a % b ) ; } return ( g ) ; } int main ( int argc , char * * argv ) { int t ; int i ; int res ; int a ; int b ; int g ; int lcm ; res = scanf ( <str> , & t ) ; assert ( res == <int> ) ; for ( i = <int> ; i < t ; i ++ ) { res = scanf ( <str> , & a , & b ) ; assert ( res == <int> ) ; g = gcd ( a , b ) ; lcm = a * b / g ; printf ( <str> , g , lcm ) ; } return <int> ; }", "label": 1, "id": 3485}
{"input": "int main ( ) { int t , g , a , b , i = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; while ( i <= a , i <= b ) { if ( a % i == <int> && b % i == <int> ) g = i ; } printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 2, "id": 3486}
{"input": "int main ( ) { long int t , i , j , k ; scanf ( <str> , & t ) ; long int a [ t ] , min [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] ) ; long int n [ a [ i ] ] ; for ( j = <int> ; j < a [ i ] ; j ++ ) { scanf ( <str> , & n [ j ] ) ; } min [ i ] = n [ <int> ] ; for ( j = <int> ; j < a [ i ] ; j ++ ) { if ( min [ i ] > n [ j ] ) min [ i ] = n [ j ] ; } } for ( i = <int> ; i < t ; i ++ ) { long long int temp = min [ i ] * ( a [ i ] - <int> ) ; printf ( <str> , temp ) ; } return <int> ; }", "label": 0, "id": 3487}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; if ( a > <int> && b > <int> ) { g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; t = t - <int> ; } } return <int> ; }", "label": 1, "id": 3488}
{"input": "int main ( ) { int i , n , j , sum = <int> , t ; int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } j = <int> ; while ( j != ( n ) ) { if ( a [ j ] > a [ j + <int> ] ) { a [ j ] = a [ j ] ; sum = sum + a [ j + <int> ] ; } else { a [ j + <int> ] = a [ j ] ; sum = sum + a [ j + <int> ] ; } j ++ ; } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 3, "id": 3489}
{"input": "int main ( ) { unsigned int n , l , t [ <int> ] , temp [ <int> ] ; int i , j , k , op , small , m = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l * ( l + <int> ) / <int> ; j ++ ) { scanf ( <str> , & t [ j ] ) ; for ( k = <int> ; k < j + <int> ; k ++ ) { if ( t [ j ] != t [ k ] ) { op = <int> ; } } if ( op == <int> ) { temp [ m ] = t [ j ] ; m = m + <int> ; op = <int> ; } } printf ( <str> , m ) ; } return <int> ; }", "label": 3, "id": 3490}
{"input": "int get_gcd ( int , int ) ; int main ( ) { int a , b , t , i ; int gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd = get_gcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int get_gcd ( int a , int b ) { return b == <int> ? a : get_gcd ( b , a % b ) ; }", "label": 1, "id": 3491}
{"input": "int main ( ) { long long m , n , a , i , min = <int> , cost ; scanf ( <str> , & m ) ; while ( m -- ) { scanf ( <str> , & n ) ; i = <int> ; while ( i < n ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; i ++ ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 3492}
{"input": "int main ( void ) { int t , a , b , i , lcm , gcd , num , deno , rem ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; deno = b ; } else { num = b ; deno = a ; } rem = num % deno ; while ( rem != <int> ) { num = deno ; deno = rem ; rem = num % deno ; } gcd = deno ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 3493}
{"input": "int main ( void ) { int t , a [ <int> ] , n , i , k , j ; scanf ( <str> , & t ) ; while ( t -- ) { int count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { j = i ; while ( j < n - <int> && a [ j ] < a [ j + <int> ] ) { count ++ ; if ( j != n - <int> ) j ++ ; else break ; } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 3, "id": 3494}
{"input": "int main ( ) { int t , i , j , A , B , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & A , & B ) ; g = ( A / A ) ; l = ( g * ( A * B ) ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3495}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , t , r , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; r = gcd ( a , b ) ; l = ( a * b ) / r ; printf ( <str> , r , l ) ; printf ( <str> ) ; } return <int> ; } int gcd ( int a , int b ) { if ( ( a % b ) == <int> ) return b ; else { return gcd ( b , ( a % b ) ) ; } }", "label": 1, "id": 3496}
{"input": "int main ( ) { int i , j , t , s = <int> , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { s = <int> ; scanf ( <str> , & n ) ; int a [ n ] , b [ n - <int> ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) b [ j ] = a [ j ] ; else b [ j ] = a [ j + <int> ] ; s += b [ j ] ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 3497}
{"input": "int main ( ) { int arr [ <int> ] , t , count , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; count = n ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { count ++ ; break ; } } } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 3498}
{"input": "int main ( ) { unsigned long T , A , B , tA , tB , i , temp , gcd , lcm ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; tA = A ; tB = B ; while ( tB ) { temp = tB ; tB = tA % tB ; tA = temp ; } gcd = tA ; lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 3499}
{"input": "int main ( ) { long int testc , a [ <int> ] , n , i , j , k , flag = <int> , s = <int> ; scanf ( <str> , & testc ) ; int sub [ <int> ] ; while ( s < testc ) { scanf ( <str> , & n ) ; sub [ s ] = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { flag = <int> ; if ( a [ i ] < a [ j ] ) { for ( k = i ; k < j ; k ++ ) { if ( ( a [ k ] < a [ i ] ) || ( a [ k ] > a [ j ] ) ) flag ++ ; } if ( flag == <int> ) sub [ s ] ++ ; } } } s ++ ; } printf ( <str> ) ; for ( i = <int> ; i < testc ; i ++ ) printf ( <str> , sub [ i ] ) ; return <int> ; }", "label": 3, "id": 3500}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int T , a [ <int> ] [ <int> ] = { <int> } , s [ <int> ] [ <int> ] = { <int> } , i , j , n , temp , k ; char c ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & n ) ; getchar ( ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { temp = <int> ; while ( <int> ) { c = getchar_unlocked ( ) ; if ( c >= <char> && c <= <char> ) temp = ( temp << <int> ) + ( temp << <int> ) + ( c - <char> ) ; else break ; } a [ i ] [ j ] = temp ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; else if ( j == <int> ) s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j ] ; else s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - <int> ] [ j - <int> ] , s [ i - <int> ] [ j ] ) ; } } k = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( s [ n - <int> ] [ i ] > k ) k = s [ n - <int> ] [ i ] ; printf ( <str> , k ) ; T -- ; } return <int> ; }", "label": 1, "id": 3501}
{"input": "long long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { long int t , a , b ; long long int l , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 3502}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , n ; scanf ( <str> , & n ) ; long long a [ <int> ] ; scanf ( <str> , & a [ <int> ] ) ; long long min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3503}
{"input": "unsigned int minind ( int a [ ] , int n ) { int index = <int> ; for ( int i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ <int> ] ) { index = i ; } } return index ; } int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { unsigned int n ; scanf ( <str> , & n ) ; unsigned int a [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } unsigned int min = a [ minind ( a , n ) ] ; printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3504}
{"input": "int main ( ) { int t ; int d , f ; int i , j , l ; int k ; int n ; int rows ; scanf ( <str> , & t ) ; int sum [ t ] ; for ( i = <int> ; i < t ; i ++ ) { sum [ i ] = <int> ; k = <int> ; scanf ( <str> , & rows ) ; n = ( rows * ( rows + <int> ) ) / <int> ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( l = <int> ; l < rows ; l ++ ) { sum [ i ] = sum [ i ] + a [ k ] ; d = a [ k + l + <int> ] - a [ k + l + <int> ] ; if ( k + <int> * l + <int> < n ) { f = a [ k + ( <int> * l ) + <int> ] - a [ k + l + <int> ] ; } else f = <int> ; if ( d > <int> || ( f > <int> ) ) { k = k + l + <int> ; } else if ( d <= <int> || ( f < <int> ) ) { k = k + l + <int> ; } } } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , sum [ i ] ) ; } return <int> ; }", "label": 1, "id": 3505}
{"input": "int sum ( int l , int mat [ ] [ l ] ) { int size = ( l * ( l + <int> ) ) / <int> ; int arr [ l ] [ l ] ; int i , j ; for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { arr [ i ] [ j ] = - <int> ; } } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { auxsum ( l , mat , arr , i , j ) ; } } return arr [ <int> ] [ <int> ] ; } int auxsum ( int l , int mat [ ] [ l ] , int arr [ ] [ l ] , int i , int j ) { if ( arr [ i ] [ j ] != - <int> ) return arr [ i ] [ j ] ; else if ( i == l - <int> ) { arr [ i ] [ j ] = mat [ i ] [ j ] ; return arr [ i ] [ j ] ; } else { arr [ i ] [ j ] = max ( auxsum ( l , mat , arr , i + <int> , j ) , auxsum ( l , mat , arr , i + <int> , j + <int> ) ) + mat [ i ] [ j ] ; return arr [ i ] [ j ] ; } } int main ( ) { int tc ; int l ; int i , j , k ; int d ; scanf ( <str> , & tc ) ; for ( i = <int> ; i < tc ; i ++ ) { scanf ( <str> , & l ) ; int mat [ l ] [ l ] ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & d ) ; mat [ j ] [ k ] = d ; } } printf ( <str> , sum ( l , mat ) ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 3506}
{"input": "int f1 ( int a [ ] [ <int> ] , int i , int j ) { int n_i , n_j ; if ( i == - <int> || j == - <int> ) { return ( <int> ) ; } else if ( j == <int> ) { return ( a [ i ] [ j ] + f1 ( a , i - <int> , j ) ) ; } else if ( i == <int> ) { return ( a [ i ] [ j ] ) ; } else { n_i = i - <int> ; if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) { n_j = j - <int> ; } else { n_j = j ; } return ( a [ i ] [ j ] + f1 ( a , n_i , n_j ) ) ; } } void m ( int a [ ] [ <int> ] , int l ) { int i , j ; for ( i = <int> ; i <= l - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = <int> ; } } } int main ( ) { int a [ <int> ] [ <int> ] ; int i , j , max = - <int> ; int i1 = <int> ; int l ; int t ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & l ) ; for ( i = <int> ; i <= l - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= l - <int> ; i ++ ) { if ( a [ l - <int> ] [ i ] > max ) { max = a [ l - <int> ] [ i ] ; i1 = i ; } } max = f1 ( a , l - <int> , i1 ) ; printf ( <str> , max ) ; max = <int> ; m ( a , l ) ; t -- ; } return <int> ; }", "label": 1, "id": 3507}
{"input": "main ( ) { int n1 , n2 , i , t , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( <str> ) ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 3508}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a % b == <int> ) return b ; else return ( gcd ( b , a % b ) ) ; } int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 3509}
{"input": "int findMax ( ) ; int matrix [ size ] [ size ] ; int result [ size ] [ size ] ; int main ( void ) { int testCase ; int lines ; int i , j ; int row , col ; int down , right ; int max [ <int> ] ; int itr = <int> ; scanf ( <str> , & testCase ) ; for ( i = <int> ; i < testCase ; i ++ ) { scanf ( <str> , & lines ) ; for ( row = <int> ; row < lines ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { scanf ( <str> , & matrix [ row ] [ col ] ) ; } } for ( row = lines - <int> ; row >= <int> ; row -- ) { for ( col = <int> ; col <= row ; col ++ ) { matrix [ row ] [ col ] = matrix [ row ] [ col ] + ( ( matrix [ row + <int> ] [ col ] > matrix [ row + <int> ] [ col + <int> ] ) ? matrix [ row + <int> ] [ col ] : matrix [ row + <int> ] [ col + <int> ] ) ; } } printf ( <str> , matrix [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3510}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int i , j , ar [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < n ; j ++ ) ar [ i ] [ j ] += ar [ i + <int> ] [ j ] > ar [ i + <int> ] [ j + <int> ] ? ar [ i + <int> ] [ j ] : ar [ i + <int> ] [ j + <int> ] ; printf ( <str> , ar [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 3511}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3512}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a > b ) { int temp = a ; a = b ; b = temp ; } while ( b % a != <int> ) { int t = a ; a = b % a ; b = t ; } return a ; } int main ( ) { int i , ntest ; scanf ( <str> , & ntest ) ; for ( i = <int> ; i < ntest ; i ++ ) { long long int a , b , lcm , hcf ; scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 3513}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int a , b , i ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i , a * b ) ; } } } return <int> ; }", "label": 1, "id": 3514}
{"input": "int main ( ) { int n , T , G , L , A , B , X ; scanf ( <str> , & T ) ; for ( n = <int> ; n <= T ; n ++ ) { if ( T >= <int> && T <= <int> ) { scanf ( <str> , & A , & B ) ; if ( A >= <int> && A <= <int> && B >= <int> && B <= <int> ) { if ( A < B ) { X = A ; } else { X = B ; } for ( ; X >= <int> ; X -- ) { if ( A % X == <int> && B % X == <int> ) { G = X ; L = ( A * B ) / G ; break ; } } printf ( <str> , G , L ) ; } break ; } } return <int> ; }", "label": 1, "id": 3515}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 3516}
{"input": "int main ( ) { int n , nn , i , j , max ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & nn ) ; int a [ <int> ] [ <int> ] ; a [ <int> ] [ <int> ] = <int> ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i <= nn ; i ++ ) { max = <int> ; a [ i ] [ <int> ] = <int> ; a [ i ] [ i + <int> ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } } printf ( <str> , max ) ; n -- ; } return <int> ; }", "label": 0, "id": 3517}
{"input": "void main ( ) { int a , b , t , rem , nr , dr , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { nr = a ; dr = b ; } else nr = b ; dr = a ; while ( dr != <int> ) { rem = nr % dr ; nr = dr ; rem = dr ; } gcd = nr ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 2, "id": 3518}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; } int gcd ( int a , int b ) { int i ; while ( b ) { i = a ; a = b % a ; b = i ; if ( a == <int> ) return i ; } } int lcm ( int a , int b ) { int i ; int p = ( a > b ) ? a : b ; i = p ; int q = ( a < b ) ? a : b ; while ( p > <int> ) { if ( p % q == <int> ) return p ; p = p + i ; } }", "label": 1, "id": 3519}
{"input": "int get ( ) { char c ; while ( c = getchar ( ) , ( c < <char> || c > <char> ) && ( c != <char> ) ) ; int flag = ( c == <char> ) ; if ( flag ) c = getchar ( ) ; int x = <int> ; while ( c >= <char> && c <= <char> ) { x = x * <int> + c - <int> ; c = getchar ( ) ; } return flag ? - x : x ; } int main ( ) { int n ; int i ; int j ; int alw ; n = get ( ) ; while ( n -- ) { alw = get ( ) ; int a [ alw ] [ alw ] ; for ( i = <int> ; i < alw ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = get ( ) ; } } for ( i = alw - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3520}
{"input": "int main ( ) { int n , c , d ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { c = a [ i ] [ j ] ; d = a [ i ] [ j + <int> ] ; if ( c > d ) { a [ i - <int> ] [ j ] += c ; } else { a [ i - <int> ] [ j ] += d ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 1, "id": 3521}
{"input": "int main ( ) { int n , a , b , num , den , gcd , lcm , rem ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; gcd = <int> ; lcm = <int> ; } return <int> ; }", "label": 1, "id": 3522}
{"input": "int main ( ) { int t , i , j , sum , ans , k , min ; long int n ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; min = <int> ; ans = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) { min = a [ i ] ; ans = i ; } } { for ( i = <int> ; i < n - <int> ; i ++ ) sum += min ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 3523}
{"input": "void main ( ) { int n , i , j , temp , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int ar [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) ar [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp ) ; ar [ i ] [ j ] = temp ; if ( ! j && ! i ) continue ; else if ( j == <int> ) ar [ i ] [ j ] += ar [ i - <int> ] [ j ] ; else if ( j == i ) ar [ i ] [ j ] += ar [ i - <int> ] [ j - <int> ] ; else ar [ i ] [ j ] += ( ar [ i - <int> ] [ j - <int> ] > ar [ i - <int> ] [ j ] ? ar [ i - <int> ] [ j - <int> ] : ar [ i - <int> ] [ j ] ) ; } } temp = ar [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) temp = ( temp > ar [ n - <int> ] [ i ] ? temp : ar [ n - <int> ] [ i ] ) ; printf ( <str> , temp ) ; } }", "label": 0, "id": 3524}
{"input": "int GCD ( int a , int b ) { return ( a == b ) ? a : ( a > b ) ? GCD ( a - b , b ) : GCD ( a , b - a ) ; } int LCM ( int a , int b ) { int temp = ( a > b ) ? a : b ; while ( ! ( temp % a == <int> && temp % b == <int> ) ) temp ++ ; return temp ; } int main ( ) { int * list , i , count , * list2 ; int a , b ; scanf ( <str> , & count ) ; list = malloc ( count * sizeof ( int ) ) ; list2 = malloc ( count * sizeof ( int ) ) ; for ( i = <int> ; i < count ; i ++ ) { scanf ( <str> , & a , & b ) ; list [ i ] = GCD ( a , b ) ; list2 [ i ] = LCM ( a , b ) ; } for ( i = <int> ; i < count ; i ++ ) { printf ( <str> , list [ i ] , list2 [ i ] ) ; } return <int> ; }", "label": 2, "id": 3525}
{"input": "int main ( ) { int t , i , n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int A [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } min = A [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > A [ i ] ) min = A [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3526}
{"input": "int findGcd ( int a , int b ) { if ( a == <int> ) return b ; while ( b != <int> ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = findGcd ( a , b ) ; int lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } getchar ( ) ; return <int> ; }", "label": 1, "id": 3527}
{"input": "int main ( ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int dup1 = a , dup2 = b ; if ( a < b ) { int t = a ; a = b ; b = t ; } while ( a % b != <int> ) { b = a % b ; a = b ; } printf ( <str> , b , ( dup1 * dup2 / b ) ) ; } return <int> ; }", "label": 1, "id": 3528}
{"input": "int main ( ) { int t , n , s [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & s [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; -- i ) for ( j = <int> ; j < n - <int> ; ++ j ) if ( s [ i + <int> ] [ j ] > s [ i + <int> ] [ j + <int> ] ) s [ i ] [ j ] += s [ i + <int> ] [ j ] ; else s [ i ] [ j ] += s [ i + <int> ] [ j + <int> ] ; printf ( <str> , s [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3529}
{"input": "int main ( ) { int t , i ; long long int min , cost ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( n < <int> ) { return <int> ; } if ( n == <int> ) { if ( a [ <int> ] > a [ <int> ] ) { cost = a [ <int> ] ; } else { cost = a [ <int> ] ; } } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } }", "label": 0, "id": 3530}
{"input": "int sumtran ( ) ; int sumtran ( ) { int n , i , j , a , b ; scanf ( <str> , & n ) ; int arr1 [ n ] [ n ] , arr2 [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr1 [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { arr2 [ n - <int> ] [ i ] = arr1 [ n - <int> ] [ i ] ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a = arr2 [ i + <int> ] [ j ] ; b = arr2 [ i + <int> ] [ j + <int> ] ; arr2 [ i ] [ j ] = arr1 [ i ] [ j ] + ( a > b ? a : b ) ; } } return arr2 [ <int> ] [ <int> ] ; } int main ( ) { int t , count ; scanf ( <str> , & t ) ; count = <int> ; int ar [ <int> ] ; while ( count <= t ) { ar [ count ] = sumtran ( ) ; count ++ ; } count = <int> ; while ( count <= t ) { printf ( <str> , ar [ count ] ) ; count ++ ; } }", "label": 0, "id": 3531}
{"input": "int main ( ) { long int cost ; int t , i , j , temp , n ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j + <int> < n && arr [ j ] > arr [ j + <int> ] ) { temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } } cost = arr [ <int> ] * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 3532}
{"input": "int main ( ) { int t , n , i , j , sum = <int> ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i <= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } ; printf ( <str> , a [ i ] [ j ] ) ; t -- ; } return <int> ; }", "label": 1, "id": 3533}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int A , B , GCD , LCM , remainder , numerator , denominator ; scanf ( <str> , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } GCD = denominator ; LCM = A * B / GCD ; printf ( <str> , GCD , LCM ) ; } }", "label": 1, "id": 3534}
{"input": "int main ( ) { long int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { long int sum = <int> ; long int m = <int> ; long int t ; scanf ( <str> , & t ) ; int * a = ( int * ) malloc ( sizeof ( int ) * ( ( t * ( t + <int> ) ) / <int> ) ) ; for ( j = <int> ; j < t ; j ++ ) { long int k = j + <int> ; while ( k != <int> ) { scanf ( <str> , & a [ m ] ) ; m ++ ; k -- ; } } long int index = <int> ; sum = sum + a [ index ] ; index = <int> ; j = <int> ; long int l = <int> ; while ( ( j != t ) ) { if ( a [ l + j ] > a [ l + j + <int> ] ) { sum = sum + a [ l + j ] ; l = l + j ; j ++ ; } else { sum = sum + a [ l + j + <int> ] ; l = l + j + <int> ; j ++ ; } } free ( a ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3535}
{"input": "int main ( ) { int t , i , j ; int test ; scanf ( <str> , & test ) ; while ( test > <int> ) { int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { arr [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } int max = <int> , sum ; for ( i = <int> ; i < t ; i ++ ) { sum = arr [ i ] [ <int> ] + arr [ i + <int> ] [ <int> ] + arr [ i + <int> ] [ <int> ] ; if ( sum > max ) { max = sum ; } } printf ( <str> , max ) ; test -- ; } return <int> ; }", "label": 1, "id": 3536}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int p = gcd ( a , b ) ; printf ( <str> , p ) ; printf ( <str> , ( a * b ) / p ) ; } return <int> ; }", "label": 1, "id": 3537}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int l , i ; scanf ( <str> , & l ) ; int a [ l ] ; i = <int> ; while ( i < l ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3538}
{"input": "int main ( void ) { int t , i ; long int a , j ; unsigned long int ans ; long int n , min = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; min = <int> ; ans = <int> ; } return <int> ; }", "label": 0, "id": 3539}
{"input": "int main ( void ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { int a , b , j , g ; scanf ( <str> , & a , & b ) ; for ( j = a ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) g = j ; } int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 3540}
{"input": "int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] [ n ] , i , j , s = <int> , y = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j <= i ) scanf ( <str> , & a [ i ] [ j ] ) ; else a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { s = <int> ; for ( j = <int> ; j < n ; j ++ ) { s = s + a [ j ] [ i ] ; } if ( y < s ) y = s ; } printf ( <str> , y + <int> ) ; } return <int> ; }", "label": 1, "id": 3541}
{"input": "main ( ) { int n , t , i , j , a [ <int> ] [ <int> ] , l , sum ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; sum = <int> ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < t ; i ++ ) { l = a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ <int> ] ) { l = a [ i ] [ j ] ; } } sum = sum + l ; } printf ( <str> , sum ) ; } }", "label": 3, "id": 3542}
{"input": "int main ( ) { long long T , A , B , tA , tB , i , temp , gcd , lcm ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; tA = A ; tB = B ; while ( tB != tA ) { if ( tA > tB ) tA = tA - tB ; else tB = tB - tA ; } gcd = tA ; lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 3543}
{"input": "int matrix [ <int> ] [ <int> ] ; int find_sum ( int , int , int ) ; int main ( ) { int count ; int lines ; int i , j ; scanf ( <str> , & count ) ; while ( count > <int> ) { i = <int> ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } } printf ( <str> , find_sum ( lines , <int> , <int> ) ) ; count -- ; } return <int> ; } int find_sum ( int lines , int i , int j ) { int sum = <int> ; int max_sum = <int> ; if ( i < lines && j <= i ) { max_sum = find_sum ( lines , i + <int> , j ) ; sum = find_sum ( lines , i + <int> , j + <int> ) ; if ( max_sum < sum ) max_sum = sum ; max_sum += matrix [ i ] [ j ] ; } return max_sum ; }", "label": 3, "id": 3544}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { long a , b ; scanf ( <str> , & a , & b ) ; long g , p , hcf , lcm ; p = a * b ; if ( a > b ) { g = b ; } else { g = a ; } if ( g % ( p / g ) == <int> ) { hcf = p / g ; } else { for ( long j = g ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { hcf = j ; break ; } } } lcm = p / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 3545}
{"input": "int main ( ) { int n , a [ <int> ] [ <int> ] , sum = <int> , t ; printf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } int q ; for ( int d = <int> ; d < n ; d ++ ) { if ( d == <int> ) { sum = sum + a [ <int> ] [ <int> ] ; q = <int> ; } else { if ( a [ d ] [ q + <int> ] > a [ d ] [ q ] ) { sum = sum + a [ d ] [ q + <int> ] ; q = q + <int> ; } else { sum = sum + a [ d ] [ q ] ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3546}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , j = <int> , i , k , k1 , k2 , l , z [ <int> ] ; scanf ( <str> , & t ) ; for ( l = <int> ; l <= t ; l ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( k = <int> ; k <= i ; k ++ ) scanf ( <str> , & a [ i ] [ k ] ) ; } while ( n > <int> ) { while ( j < i ) { k1 = a [ n - <int> ] [ j ] + a [ n - <int> ] [ j ] ; k2 = a [ n - <int> ] [ j + <int> ] + a [ n - <int> ] [ j ] ; if ( k1 > k2 ) a [ n - <int> ] [ j ] = k1 ; else if ( k1 <= k2 ) a [ n - <int> ] [ j ] = k2 ; j ++ ; } j = <int> ; n -- ; } z [ l - <int> ] = a [ <int> ] [ <int> ] ; } for ( l = <int> ; l <= t ; l ++ ) printf ( <str> , z [ l - <int> ] ) ; return <int> ; }", "label": 1, "id": 3547}
{"input": "int main ( ) { unsigned int t , a , b , i , g , x , f ; scanf ( <str> , & t ) ; while ( t -- ) { g = <int> ; f = <int> ; scanf ( <str> , & a , & b ) ; if ( a < b ) x = a ; else x = b ; for ( i = x ; i >= x / <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { f = <int> ; break ; } } if ( f == <int> ) g = i ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 1, "id": 3548}
{"input": "void main ( ) { int t , i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { int n , w = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { c = i ; w ++ ; for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ c ] >= a [ j ] ) break ; else c = j ; w ++ ; } } printf ( <str> , w ) ; } }", "label": 1, "id": 3549}
{"input": "int main ( ) { int A , B , T , C , D , remainder , gcd , lcm , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; if ( A > B ) { C = A ; D = B ; } else { C = B ; D = A ; } remainder = C % D ; while ( remainder != <int> ) { C = D ; D = remainder ; remainder = C % D ; } gcd = D ; lcm = A * B / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3550}
{"input": "void sort ( int a [ ] , int n , int m ) { int p = <int> ; if ( m > n ) { p = partation ( a , n , m ) ; sort ( a , n , p - <int> ) ; sort ( a , p + <int> , m ) ; } } int partation ( int a [ ] , int n , int m ) { int x = a [ m ] , h = n - <int> , k = <int> ; for ( k = n ; k <= m - <int> ; k ++ ) { if ( a [ k ] <= x ) { h = h + <int> ; swap ( & a [ h ] , & a [ k ] ) ; } } swap ( & a [ h + <int> ] , & a [ m ] ) ; return h + <int> ; } void swap ( int * a , int * b ) { int temp = <int> ; temp = * a ; * a = * b ; * b = temp ; } int main ( ) { int i , j , v ; scanf ( <str> , & v ) ; while ( v > <int> ) { scanf ( <str> , & i ) ; int a [ i ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } sort ( a , <int> , i - <int> ) ; for ( j = <int> ; j < i ; j ++ ) { printf ( <str> , a [ j ] ) ; } long long sum = <int> ; sum = a [ <int> ] * ( i - <int> ) ; printf ( <str> , sum ) ; v -- ; } return <int> ; }", "label": 2, "id": 3551}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } int min = <int> ; for ( int j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } int cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 3552}
{"input": "int gcd ( long long int , long long int ) ; int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long long int a , b , result ; scanf ( <str> , & a , & b ) ; result = gcd ( a , b ) ; printf ( <str> , result , ( a * b ) / ( result ) ) ; } } int gcd ( long long int a , long long int b ) { if ( a == <int> || b == <int> ) return <int> ; else { while ( a != b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } return a ; } }", "label": 0, "id": 3553}
{"input": "int hcf ( int n1 , int n2 ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , k ; scanf ( <str> , & a , & b ) ; k = hcf ( a , b ) ; printf ( <str> , k , ( a * b ) / k ) ; } return <int> ; } int hcf ( int n1 , int n2 ) { if ( n2 != <int> ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; }", "label": 1, "id": 3554}
{"input": "int Max ( int arr [ ] , int row ) { int i = <int> ; int max = <int> ; for ( i = <int> ; i < row ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } return max ; } int finalarr [ <int> ] ; int maxarr [ <int> ] ; int arr [ <int> ] [ <int> ] ; int main ( ) { int testcases ; scanf ( <str> , & testcases ) ; int i , r , c , j , p , q ; for ( i = <int> ; i < testcases ; i ++ ) { int rows ; scanf ( <str> , & rows ) ; for ( r = <int> ; r < rows ; r ++ ) { for ( c = <int> ; c < ( r + <int> ) ; c ++ ) { scanf ( <str> , & arr [ r ] [ c ] ) ; } } for ( c = <int> ; c < rows ; c ++ ) { int max1 = <int> , max2 = <int> ; for ( r = c ; r < rows ; r ++ ) { max1 += arr [ r ] [ c ] ; if ( r == ( rows - <int> ) && c != ( rows - <int> ) ) max2 = max1 + arr [ r ] [ c + <int> ] - arr [ r ] [ c ] ; } maxarr [ c ] = ( max1 > max2 ) ? max1 : max2 ; } finalarr [ i ] = Max ( maxarr , rows ) ; for ( j = <int> ; j < rows ; j ++ ) { maxarr [ j ] = <int> ; for ( q = j ; q < ( j + <int> ) ; q ++ ) { arr [ j ] [ q ] = <int> ; } } } for ( i = <int> ; i < testcases ; i ++ ) printf ( <str> , finalarr [ i ] ) ; system ( <str> ) ; }", "label": 1, "id": 3555}
{"input": "int main ( ) { int t ; long int a , b , lcm , hcf , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm = a * b ; while ( b != <int> ) { m = b ; b = a % b ; a = m ; } hcf = a ; lcm /= hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 3556}
{"input": "struct info { int id ; int age ; char name [ <int> ] ; struct info * next ; } * temp , * temp1 , * temp2 ; typedef struct info info ; void print ( info * , int ) ; int main ( void ) { int i , m , n , del , z ; info * head [ <int> ] ; scanf ( <str> , & z ) ; for ( i = <int> ; i < <int> ; i ++ ) { head [ i ] = NULL ; } for ( i = <int> ; i < z ; i ++ ) { int v1 , <unk> ; char v2 [ <int> ] ; scanf ( <str> , & v1 , v2 , & <unk> ) ; info * p = malloc ( sizeof ( info ) ) ; p -> id = v1 ; strcpy ( p -> name , v2 ) ; p -> age = <unk> ; m = v1 ; p -> next = head [ m ] ; head [ m ] = p ; } scanf ( <str> , & n ) ; scanf ( <str> , & del ) ; printf ( <str> ) ; for ( i = <int> ; i < <int> ; i ++ ) { print ( head [ i ] , i ) ; } printf ( <str> ) ; int search ; search = n ; printf ( <str> ) ; print ( head [ search ] , search ) ; printf ( <str> ) ; int <unk> , k = <int> ; <unk> = del ; temp2 = temp1 = head [ <unk> ] ; while ( temp2 -> id != del ) { temp2 = temp2 -> next ; k ++ ; } int u = k ; u -- ; while ( u > <int> ) { temp1 = temp1 -> next ; u -- ; } if ( k == <int> ) head [ <unk> ] = head [ <unk> ] -> next ; else if ( temp2 -> next == NULL ) temp1 -> next = NULL ; else temp1 -> next = temp2 -> next ; printf ( <str> ) ; print ( head [ <unk> ] , <unk> ) ; return <int> ; } void print ( info * temp , int i ) { if ( temp == NULL ) { printf ( <str> , i ) ; return ; } printf ( <str> , i ) ; while ( temp != NULL ) { printf ( <str> ) ; printf ( <str> , temp -> id , temp -> name , temp -> age ) ; temp = temp -> next ; } printf ( <str> ) ; printf ( <str> ) ; }", "label": 3, "id": 3557}
{"input": "int main ( void ) { int n1 , n2 , lcm , gcd ; printf ( <str> ) ; scanf ( <str> , & n1 , & n2 ) ; if ( n1 < n2 ) { gcd = n1 ; lcm = n2 ; } else { lcm = n1 ; gcd = n2 ; } while ( n1 % gcd != <int> || n2 % gcd != <int> ) { gcd -- ; } while ( lcm % n1 != <int> || lcm % n2 != <int> ) { lcm ++ ; } printf ( <str> , lcm , gcd ) ; return <int> ; }", "label": 1, "id": 3558}
{"input": "int main ( ) { int t , n1 , n2 , rem , num , den , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { num = n1 ; den = n2 ; } else { num = n2 ; den = n1 ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 3559}
{"input": "int main ( ) { unsigned t , a , b , lcm , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm = b ; while ( lcm % a != <int> ) lcm += b ; gcd = a ; while ( b % gcd != <int> || a % gcd != <int> ) gcd -- ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3560}
{"input": "int main ( ) { int t , a , b , g , l , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { { for ( i = b ; i >= <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } else continue ; } { if ( a % b == <int> ) l = a ; else l = a * b ; } } else if ( b > a ) { { for ( i = a ; i >= <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } else continue ; } { if ( b % a == <int> ) l = b ; else l = a * b ; } } else g = l = a ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 3561}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int out [ <int> ] , z = <int> ; int i , j , n , k = <int> , p , q ; scanf ( <str> , & n ) ; while ( k < n ) { scanf ( <str> , & j ) ; for ( p = <int> ; p < j ; p ++ ) { for ( q = <int> ; q <= p ; q ++ ) { scanf ( <str> , & a [ p ] [ q ] ) ; } } for ( p = j - <int> ; p >= <int> ; p -- ) { for ( q = <int> ; q <= p ; q ++ ) { if ( a [ p + <int> ] [ q ] > a [ p + <int> ] [ q + <int> ] ) { a [ p ] [ q ] = a [ p + <int> ] [ q ] + a [ p ] [ q ] ; } else { a [ p ] [ q ] = a [ p ] [ q ] + a [ p + <int> ] [ q + <int> ] ; } } } k ++ ; out [ z ++ ] = a [ <int> ] [ <int> ] ; } for ( i = <int> ; i < z ; i ++ ) { printf ( <str> , out [ i ] ) ; } return <int> ; }", "label": 3, "id": 3562}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , p , q , max = - <int> ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] , res [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; res [ i ] [ j ] = <int> ; } } res [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { res [ i ] [ j ] = res [ i - <int> ] [ j ] + arr [ i ] [ j ] ; } else if ( i == j ) { res [ i ] [ j ] = res [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ; } else { p = res [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ; q = res [ i - <int> ] [ j ] + arr [ i ] [ j ] ; if ( p > q ) { res [ i ] [ j ] = p ; } else { res [ i ] [ j ] = q ; } if ( i == n - <int> ) { if ( res [ i ] [ j ] > max ) { max = res [ i ] [ j ] ; } } } } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3563}
{"input": "int main ( void ) { int t , n , i , inner , outer , temp , cost ; char array [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & array [ i ] ) ; } for ( outer = <int> ; outer < n - <int> ; outer ++ ) { for ( inner = outer ; inner < n ; inner ++ ) { if ( array [ inner ] < array [ outer ] ) { temp = array [ inner ] ; array [ inner ] = array [ outer ] ; array [ outer ] = temp ; } } } cost = ( n - <int> ) * ( array [ <int> ] ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 3564}
{"input": "int n , max ; int a [ <int> ] [ <int> ] = { { <int> } } ; int path ( int i , int j ) { if ( i == n - <int> ) { return a [ i ] [ j ] ; } else { int p , q ; p = a [ i ] [ j ] + path ( i + <int> , j ) ; q = a [ i ] [ j ] + path ( i + <int> , j + <int> ) ; return p > q ? p : q ; } } int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; max = path ( <int> , <int> ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 3565}
{"input": "long _max ( long , long ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; long max = <int> ; long a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; if ( n == <int> ) { printf ( <str> , a [ <int> ] [ <int> ] ) ; continue ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j + <int> < i ) a [ i ] [ j ] += _max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j + <int> ] ) ; else { if ( i == j ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } } for ( i = <int> ; i < n ; i ++ ) max = a [ n - <int> ] [ i ] > max ? a [ n - <int> ] [ i ] : max ; printf ( <str> , max ) ; } return <int> ; } long _max ( long a , long b ) { return a > b ? a : b ; }", "label": 1, "id": 3566}
{"input": "unsigned long int gcd ( unsigned long int a , unsigned long int b ) { if ( b == <int> ) return a ; else { return gcd ( b , a % b ) ; } } unsigned long int lcm ( unsigned long int a , unsigned long int b ) { unsigned long int i ; for ( i = a ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) break ; } return i ; } int main ( ) { int t ; unsigned long int a , b , g , l ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { g = gcd ( a , b ) ; l = lcm ( a , b ) ; } else { g = gcd ( b , a ) ; l = lcm ( a , b ) ; } printf ( <str> , g , l ) ; t -- ; } return <int> ; }", "label": 2, "id": 3567}
{"input": "int main ( ) { int a [ <int> ] , i , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { a [ i + <int> ] = <char> ; } } printf ( <str> , a [ i ] ) ; } return <int> ; }", "label": 3, "id": 3568}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int i , j , k ; scanf ( <str> , & k ) ; int a [ k ] [ k ] ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = k - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3569}
{"input": "int main ( ) { int num ; int i , n1 , n2 ; scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; int m = n1 ; int n = n2 ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( n1 * n2 ) / m ) ; } return <int> ; }", "label": 1, "id": 3570}
{"input": "int maxi ( int a , int b ) { return a < b ? b : a ; } int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( <str> , & n ) ; int vec1 [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { vec1 [ i ] [ j ] = vec1 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else if ( j == i ) { vec1 [ i ] [ j ] = vec1 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } else if ( vec1 [ i - <int> ] [ j ] > vec1 [ i - <int> ] [ j - <int> ] ) { vec1 [ i ] [ j ] = vec1 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else { vec1 [ i ] [ j ] = vec1 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } } } max = vec1 [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( vec1 [ n - <int> ] [ i ] > max ) max = vec1 [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3571}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int m , x , tmp , total = <int> , cnt = <int> ; scanf ( <str> , & m ) ; scanf ( <str> , & x ) ; tmp = x ; m -- ; while ( m -- ) { scanf ( <str> , & x ) ; if ( tmp <= x ) cnt ++ ; else cnt = <int> ; tmp = x ; total += cnt ; } printf ( <str> , total ) ; } return <int> ; }", "label": 0, "id": 3572}
{"input": "int main ( ) { int t ; int i , j ; int curr , bel , belrt ; scanf ( <str> , & t ) ; while ( t -- ) { int level ; scanf ( <str> , & level ) ; int arr [ level ] [ level ] ; for ( i = <int> ; i < level ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = level - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { curr = arr [ i ] [ j ] ; bel = arr [ i + <int> ] [ j ] + curr ; belrt = arr [ i + <int> ] [ j + <int> ] + curr ; curr = bel >= belrt ? bel : belrt ; arr [ i ] [ j ] = curr ; } } for ( i = <int> ; i < level ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { printf ( <str> , arr [ i ] [ j ] ) ; } printf ( <str> ) ; } } }", "label": 1, "id": 3573}
{"input": "void merge ( int * a , int p , int q , int r ) { int n1 = q - p + <int> ; int n2 = r - q ; int * lt = ( int * ) malloc ( ( n1 + <int> ) * sizeof ( int ) ) ; int * rt = ( int * ) malloc ( ( n2 + <int> ) * sizeof ( int ) ) ; int i = <int> , j = <int> , k = p ; for ( i = <int> ; i < n1 ; i ++ ) { lt [ i ] = a [ p + i ] ; } for ( i = <int> ; i < n2 ; i ++ ) { rt [ i ] = a [ q + i + <int> ] ; } i = <int> ; lt [ n1 ] = INT_MAX ; rt [ n2 ] = INT_MAX ; while ( k <= r ) { if ( lt [ i ] <= rt [ j ] ) { a [ k ] = lt [ i ] ; i ++ ; } else { a [ k ] = rt [ j ] ; j ++ ; } k ++ ; } free ( lt ) ; free ( rt ) ; } void mergesort ( int * a , int p , int r ) { if ( p < r ) { int q = ( p + r ) / <int> ; mergesort ( a , p , q ) ; mergesort ( a , q + <int> , r ) ; merge ( a , p , q , r ) ; } } int main ( ) { int t = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { int n = <int> , i = <int> ; scanf ( <str> , & n ) ; int * arr = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; mergesort ( arr , <int> , n - <int> ) ; printf ( <str> , arr [ <int> ] * ( n - <int> ) ) ; free ( arr ) ; } return <int> ; }", "label": 0, "id": 3574}
{"input": "int main ( ) { long long int a [ <int> ] ; long long int i , j , k , min , t ; long long int n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = a [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( a [ k ] < min ) min = a [ k ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3575}
{"input": "void print ( long long x , long long y ) { long long hcf ; for ( long long a = x ; a >= <int> ; a -- ) { if ( y % a == <int> && x % a == <int> ) { hcf = a ; break ; } } printf ( <str> , hcf , x * y / hcf ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int x , y ; scanf ( <str> , & x , & y ) ; print ( x , y ) ; } }", "label": 2, "id": 3576}
{"input": "int main ( ) { int T , N ; int num , min , i , result ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; min = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & num ) ; if ( num < min ) min = num ; } result = min * ( N - <int> ) ; printf ( <str> , result ) ; } return <int> ; }", "label": 0, "id": 3577}
{"input": "int main ( ) { short t ; long n , a [ <int> ] , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i <= n ; i ++ ) if ( a [ i ] > a [ i + <int> ] ) a [ i ] = a [ i + <int> ] ; } return <int> ; }", "label": 1, "id": 3578}
{"input": "unsigned long int gcd ( unsigned long int a , unsigned long int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { unsigned long int a , b ; int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 3579}
{"input": "int main ( ) { int i , j , b , n , t , s , s1 = <int> , s2 , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( b = <int> ; b <= t ; b ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = <int> ; j <= <int> ; j ++ ) { for ( i = <int> ; i <= n ; i ++ ) { s1 = s1 + a [ i ] [ j ] ; } } for ( j = <int> ; j <= n ; j ++ ) { s2 = <int> ; for ( i = <int> ; i <= n ; i ++ ) { s2 = s2 + a [ i ] [ j ] ; } if ( s1 > s2 ) { s = s1 ; } else { s = s2 ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 3, "id": 3580}
{"input": "int hcf ( int n1 , int n2 ) ; int main ( ) { int gcd , n1 , n2 , lcm ; int t ; scanf ( <str> , t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; gcd = hcf ( n1 , n2 ) ; lcm = ( ( long long int ) n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int hcf ( int n1 , int n2 ) { if ( n2 != <int> ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; }", "label": 3, "id": 3581}
{"input": "int * * triangle , * * memory , totalRows ; void freeSquareArray ( int * * , int ) ; int * * getSquareArray ( int ) ; int getMaxSum ( int , int , int ) ; void <unk> ( int * * , int ) ; int main ( ) { int i , j , k ; int n , result ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & totalRows ) ; triangle = getSquareArray ( totalRows ) ; memory = getSquareArray ( totalRows ) ; <unk> ( memory , - <int> ) ; for ( j = <int> ; j < totalRows ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & triangle [ j ] [ k ] ) ; } } result = getMaxSum ( <int> , <int> , totalRows ) ; printf ( <str> , result ) ; freeSquareArray ( triangle , totalRows ) ; freeSquareArray ( memory , totalRows ) ; } return <int> ; } void <unk> ( int * * array , int x ) { int i , j ; for ( i = <int> ; i < totalRows ; i ++ ) for ( j = <int> ; j < totalRows ; j ++ ) array [ i ] [ j ] = x ; } int * * getSquareArray ( int size ) { int i , * * array ; array = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( i = <int> ; i < size ; i ++ ) { array [ i ] = ( int * ) malloc ( size * sizeof ( int ) ) ; } return array ; } void freeSquareArray ( int * * triangle , int size ) { int i ; for ( i = <int> ; i < size ; i ++ ) { free ( triangle [ i ] ) ; } free ( triangle ) ; } int getMaxSum ( int row , int col , int totalRows ) { int val1 , val2 ; if ( memory [ row ] [ col ] >= <int> ) { return memory [ row ] [ col ] ; } if ( ( row + <int> ) >= totalRows ) { memory [ row ] [ col ] = triangle [ row ] [ col ] ; return triangle [ row ] [ col ] ; } val1 = triangle [ row ] [ col ] + getMaxSum ( row + <int> , col , totalRows ) ; val2 = triangle [ row ] [ col ] + getMaxSum ( row + <int> , col + <int> , totalRows ) ; if ( val1 > val2 ) { memory [ row ] [ col ] = val1 ; return val1 ; } else { memory [ row ] [ col ] = val2 ; return val2 ; } }", "label": 0, "id": 3582}
{"input": "int main ( ) { int t , n , cost , array [ <int> ] , count , x , i ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & array [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( array [ i ] > array [ i + <int> ] ) count = count + array [ i + <int> ] ; else { count = count + array [ i ] ; x = array [ i ] ; array [ i ] = array [ i + <int> ] ; array [ i + <int> ] = x ; } } printf ( <str> , count ) ; } }", "label": 1, "id": 3583}
{"input": "int <unk> ( int a , int b ) { if ( a == <int> ) { return b ; } else { return <unk> ( b % a , a ) ; } } int main ( void ) { int a , b ; int n ; int lcm , gcd ; scanf ( <str> , & n ) ; int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd = <unk> ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3584}
{"input": "int gcd ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , c , d , y ; scanf ( <str> , & a , & b ) ; c = a ; d = b ; if ( a == <int> ) y = b ; else if ( b == <int> ) y = a ; else if ( a > b ) y = gcd ( a , b ) ; else y = gcd ( b , a ) ; printf ( <str> , y , ( ( c * d ) / y ) ) ; } return <int> ; } int gcd ( int x , int y ) { int z ; while ( y != <int> ) { z = x % y ; x = y ; y = z ; } return x ; }", "label": 1, "id": 3585}
{"input": "int main ( ) { int t , n , a [ max ] , i , j , temp , k ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) for ( k = i + <int> ; k < n ; k ++ ) { if ( a [ i ] > a [ k ] ) { temp = a [ i ] ; a [ i ] = a [ k ] ; a [ k ] = temp ; } } printf ( <str> , ( n - <int> ) * a [ <int> ] ) ; } }", "label": 2, "id": 3586}
{"input": "int main ( ) { int i , j , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3587}
{"input": "int a [ <int> ] ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int k , test , count = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( k = i ; k < n - <int> ; k ++ ) { if ( a [ k ] > a [ k + <int> ] ) { count ++ ; break ; } } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 1, "id": 3588}
{"input": "int main ( ) { int n = <int> , r = <int> , i = <int> , j = <int> ; scanf ( <str> , & n ) ; while ( n ) { scanf ( <str> , & r ) ; int a [ MAX ] [ MAX ] ; for ( i = <int> ; i <= r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = r ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; n -- ; } }", "label": 3, "id": 3589}
{"input": "int main ( ) { int c = <int> , n , r , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; printf ( <str> ) ; int a [ r ] [ r ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> ) ; } c = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < r - <int> ; i ++ ) { if ( a [ i + <int> ] [ i ] > a [ i + <int> ] [ i + <int> ] ) c = c + a [ i + <int> ] [ i ] ; else c = c + a [ i + <int> ] [ i + <int> ] ; } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 3590}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int z = n - <int> ; for ( i = z ; i >= <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else if ( a [ i ] [ j + <int> ] >= a [ i ] [ j ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 3591}
{"input": "int read_int ( ) { char c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; int ret = <int> ; while ( c >= <char> && c <= <char> ) { ret = <int> * ret + c - <int> ; c = gc ( ) ; } return ret ; } int main ( ) { int t ; t = read_int ( ) ; while ( t -- ) { int n ; n = read_int ( ) ; int a , i ; long long int min ; for ( i = <int> ; i < n ; i ++ ) { a = read_int ( ) ; if ( i == <int> ) { min = a ; } else if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3592}
{"input": "int main ( int argc , const char * argv [ ] ) { int testcase = <int> , i = <int> , j = <int> , k = <int> , row = <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & testcase ) ; for ( k = <int> ; k < testcase ; k ++ ) { scanf ( <str> , & i ) ; for ( row = <int> ; row < i ; row ++ ) { for ( j = <int> ; j <= row ; j ++ ) { scanf ( <str> , & a [ row ] [ j ] ) ; } } } for ( row = i - <int> ; row > <int> ; row -- ) { for ( j = <int> ; j < row ; j ++ ) { a [ row - <int> ] [ j ] = a [ row - <int> ] [ j ] + a [ row ] [ j ] > a [ row - <int> ] [ j ] + a [ row ] [ j + <int> ] ? a [ row - <int> ] [ j ] + a [ row ] [ j ] : a [ row - <int> ] [ j ] + a [ row ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 1, "id": 3593}
{"input": "int * * <unk> ( int n ) { int * * a , i ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = <int> ; i < n ; i ++ ) * ( a + i ) = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; return a ; } int main ( ) { int j , k , t , m , n , * * a , * * b , i ; scanf ( <str> , & m ) ; for ( i = <int> ; i <= m ; i ++ ) { scanf ( <str> , & n ) ; a = <unk> ( n ) ; b = <unk> ( n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( k = <int> ; k < n - <int> ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { t = a [ k + <int> ] [ j ] + b [ k ] [ j ] ; if ( t > b [ k + <int> ] [ j ] ) b [ k + <int> ] [ j ] = t ; t = a [ k + <int> ] [ j + <int> ] + b [ k ] [ j ] ; if ( t > b [ k + <int> ] [ j + <int> ] ) b [ k + <int> ] [ j + <int> ] = t ; } } t = <int> ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( b [ j ] [ k ] > t ) t = b [ j ] [ k ] ; } } printf ( <str> , t ) ; } return <int> ; }", "label": 0, "id": 3594}
{"input": "int main ( ) { int ar [ <int> ] [ <int> ] , i , j , t , l ; long long int k ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ar [ i ] [ j ] ) ; } } for ( i = l - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( ar [ i ] [ j ] > ar [ i ] [ j + <int> ] ) ar [ i - <int> ] [ j ] = ar [ i - <int> ] [ j ] + ar [ i ] [ j ] ; else ar [ i - <int> ] [ j ] = ar [ i - <int> ] [ j ] + ar [ i ] [ j + <int> ] ; } } printf ( <str> , ar [ <int> ] [ <int> ] ) ; t -- ; } return ( <int> ) ; }", "label": 0, "id": 3595}
{"input": "int sumtobase ( int * * intpyr , int row , int col , int size ) { if ( row == size ) return intpyr [ row ] [ col ] ; else { int way1 , way2 ; way1 = intpyr [ row ] [ col ] + sumtobase ( intpyr , row + <int> , col + <int> , size ) ; way2 = intpyr [ row ] [ col ] + sumtobase ( intpyr , row + <int> , col , size ) ; if ( way1 > way2 ) return way1 ; else return way2 ; } } int main ( ) { int itr ; int size ; int * * pyramid ; int * ans , i ; scanf ( <str> , & itr ) ; ans = ( int * ) malloc ( itr * sizeof ( int ) ) ; for ( i = <int> ; i < itr ; i ++ ) { int j , k = <int> ; char temp ; scanf ( <str> , & size ) ; pyramid = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( j = <int> ; j < size ; j ++ ) { pyramid [ j ] = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & pyramid [ j ] [ k ] ) ; } ans [ i ] = sumtobase ( pyramid , <int> , <int> , size - <int> ) ; } for ( i = <int> ; i < itr ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 2, "id": 3596}
{"input": "int add ( int * * , int , int , int ) ; int main ( ) { int m = <int> , n = <int> , i = <int> , j = <int> ; scanf ( <str> , & m ) ; while ( m -- ) { scanf ( <str> , & n ) ; int * * ar = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = <int> ; i <= n ; ++ i ) ar [ i - <int> ] = ( int * ) malloc ( sizeof ( int ) * i ) ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & ar [ i ] [ j ] ) ; printf ( <str> , add ( ar , <int> , <int> , n ) ) ; for ( i = <int> ; i < n ; ++ i ) { free ( ar [ i ] ) ; ar [ i ] = NULL ; } free ( ar ) ; ar = NULL ; } return <int> ; } int add ( int * * ar , int i , int j , int n ) { int <unk> = <int> , sumright = <int> ; if ( i == n ) return <int> ; else { <unk> = add ( ar , i + <int> , j , n ) ; sumright = add ( ar , i + <int> , j + <int> , n ) ; if ( <unk> >= sumright ) return ( <unk> + ar [ i ] [ j ] ) ; else return ( sumright + ar [ i ] [ j ] ) ; } }", "label": 2, "id": 3597}
{"input": "int compute ( int arr [ <int> ] [ <int> ] , int n ) { int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ) ; } } return arr [ <int> ] [ <int> ] ; } int main ( ) { int n , i , j , t , k ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } printf ( <str> , compute ( arr , n ) ) ; } return <int> ; }", "label": 0, "id": 3598}
{"input": "int dp [ <int> ] [ <int> ] = { - <int> } ; int arr [ <int> ] [ <int> ] = { - <int> } ; int main ( ) { int t ; scanf ( <str> , & t ) ; int n , ans ; int i , j ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( j = i + <int> ; j < n ; j ++ ) arr [ i ] [ j ] = - <int> ; } memset ( dp , - <int> , sizeof ( dp [ <int> ] [ <int> ] ) * <int> * <int> ) ; ans = solve ( <int> , <int> , n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; } int solve ( int row , int col , int n ) { if ( row == n ) { return arr [ row ] [ col ] ; } if ( dp [ row ] [ col ] != - <int> ) return dp [ row ] [ col ] ; return dp [ row ] [ col ] = arr [ row ] [ col ] + max ( solve ( row + <int> , col , n ) , solve ( row + <int> , col + <int> , n ) ) ; } int max ( int x , int y ) { if ( x > y ) return x ; return y ; }", "label": 0, "id": 3599}
{"input": "int main ( ) { int t , i , n , j , k , m , end ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; m = n * ( n + <int> ) / <int> ; int a [ m ] ; m -- ; end = m ; for ( j = <int> ; j <= m ; j ++ ) scanf ( <str> , & a [ j ] ) ; while ( n > <int> ) { m -= n ; n -- ; for ( k = <int> ; k <= n ; k ++ ) a [ m - k + <int> ] += a [ end - k ] > a [ end - k + <int> ] ? a [ end - k ] : a [ end - k + <int> ] ; end -= n + <int> ; } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3600}
{"input": "int gcd_lcm ( int x , int y ) { int a = x % y ; if ( a == <int> ) return y ; gcd_lcm ( y , a ) ; } int main ( ) { int t , swap , i , x , y , c , s ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x , & y ) ; if ( y > x ) { swap = x ; x = y ; y = swap ; } if ( x % y == <int> ) { c = ( x * y ) / y ; printf ( <str> , y , c ) ; } else { s = gcd_lcm ( x , y ) ; c = ( x * y ) / s ; printf ( <str> , s , c ) ; } } return <int> ; }", "label": 1, "id": 3601}
{"input": "int main ( ) { int test , i , a [ <int> ] [ <int> ] , j , k , n , max ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( j = <int> ; j < n ; j ++ ) { a [ j ] [ <int> ] += a [ j - <int> ] [ <int> ] ; a [ j ] [ j ] += a [ j - <int> ] [ j - <int> ] ; for ( k = <int> ; k <= j - <int> ; k ++ ) { if ( a [ j - <int> ] [ k ] > a [ j - <int> ] [ k - <int> ] ) a [ j ] [ k ] += a [ j - <int> ] [ k ] ; else a [ j ] [ k ] += a [ j - <int> ] [ k - <int> ] ; } } max = a [ n ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( a [ n ] [ j ] > max ) max = a [ n ] [ j ] ; printf ( <str> , max ) ; } return ( <int> ) ; }", "label": 1, "id": 3602}
{"input": "main ( ) { int i , j , a [ <int> ] [ <int> ] , b [ <int> ] , max , sum = <int> , n ; int T , k ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { max = a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( max < a [ i ] [ j ] ) max = a [ i ] [ j ] ; } sum = sum + max ; } b [ k ] = sum ; sum = <int> ; } for ( i = <int> ; i < T ; i ++ ) { b [ i ] = b [ i ] - a [ <int> ] [ <int> ] ; printf ( <str> , b [ i ] ) ; } }", "label": 1, "id": 3603}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) { return b ; } else { return gcd ( b % a , a ) ; } } main ( ) { int n , i , a , b , z ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; z = gcd ( a , b ) ; printf ( <str> , z , ( a * b ) / z ) ; } }", "label": 1, "id": 3604}
{"input": "int gcd_calc ( int * a , int * b ) { if ( * a < * b ) { int temp = * a ; * a = * b ; * b = temp ; } int rem , n1 , n2 ; n1 = * a ; n2 = * b ; while ( n2 != <int> ) { rem = n1 % n2 ; n1 = n2 ; n2 = rem ; } return n1 ; } int main ( ) { int t , a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; gcd = gcd_calc ( & a , & b ) ; lcm = a / gcd ; lcm = lcm * b ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3605}
{"input": "int sum_triangle ( int * * trdata , int r , int c , int n ) { int s1 , s2 ; if ( n == <int> ) return trdata [ r ] [ c ] ; else { s1 = trdata [ r ] [ c ] + sum_triangle ( trdata , r + <int> , c , n - <int> ) ; s2 = trdata [ r ] [ c ] + sum_triangle ( trdata , r + <int> , c + <int> , n - <int> ) ; return ( s1 > s2 ? s1 : s2 ) ; } } int main ( ) { int n , i , j , k , * trn , flag = <int> , * * * trdata , * sum , key ; scanf ( <str> , & n ) ; sum = ( int * ) malloc ( n * sizeof ( int ) ) ; trn = ( int * ) malloc ( n * sizeof ( int ) ) ; trdata = ( int * * * ) malloc ( n * sizeof ( int * * ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & trn [ i ] ) ; trdata [ i ] = ( int * * ) malloc ( trn [ i ] * sizeof ( int * ) ) ; for ( j = <int> ; j < trn [ i ] ; j ++ ) { flag = <int> ; for ( k = <int> ; k <= j ; k ++ ) { if ( flag ) { trdata [ i ] [ j ] = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; flag = <int> ; } scanf ( <str> , & trdata [ i ] [ j ] [ k ] ) ; } } } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , sum_triangle ( trdata [ i ] , <int> , <int> , trn [ i ] ) ) ; } }", "label": 2, "id": 3606}
{"input": "int main ( ) { int i , j , t , n , x , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3607}
{"input": "void input ( int a [ ] , int n ) { int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } } int countSubArrays ( int a [ ] , int n ) { int i , j , c = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { c ++ ; if ( a [ j ] == a [ n - <int> ] || a [ j ] > a [ j + <int> ] ) { break ; } } } return c ; } int main ( ) { int a1 [ MAX ] , a2 [ MAX ] , <unk> [ MAX ] , <unk> [ MAX ] , <unk> [ MAX ] , n , t ; scanf ( <str> , & t ) ; switch ( t ) { case <int> : scanf ( <str> , & n ) ; input ( a1 , n ) ; printf ( <str> , countSubArrays ( a1 , n ) ) ; break ; case <int> : scanf ( <str> , & n ) ; input ( a1 , n ) ; printf ( <str> , countSubArrays ( a1 , n ) ) ; scanf ( <str> , & n ) ; input ( a2 , n ) ; printf ( <str> , countSubArrays ( a2 , n ) ) ; break ; case <int> : scanf ( <str> , & n ) ; input ( a1 , n ) ; printf ( <str> , countSubArrays ( a1 , n ) ) ; scanf ( <str> , & n ) ; input ( a2 , n ) ; printf ( <str> , countSubArrays ( a2 , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; break ; case <int> : scanf ( <str> , & n ) ; input ( a1 , n ) ; printf ( <str> , countSubArrays ( a1 , n ) ) ; scanf ( <str> , & n ) ; input ( a2 , n ) ; printf ( <str> , countSubArrays ( a2 , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; break ; case <int> : scanf ( <str> , & n ) ; input ( a1 , n ) ; printf ( <str> , countSubArrays ( a1 , n ) ) ; scanf ( <str> , & n ) ; input ( a2 , n ) ; printf ( <str> , countSubArrays ( a2 , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; break ; } return <int> ; }", "label": 3, "id": 3608}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , c [ <int> ] , d [ <int> ] ; int i , j , q , z , x = <int> , w = <int> ; scanf ( <str> , & q ) ; for ( z = <int> ; z < q ; z ++ ) scanf ( <str> , & c [ z ] ) ; for ( z = <int> ; z < q ; z ++ ) { for ( i = <int> ; i < c [ z ] ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < c [ z ] ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , a [ i ] [ j ] ) ; printf ( <str> ) ; } x = x + a [ <int> ] [ <int> ] ; i = <int> ; j = <int> ; while ( i < c [ z ] - <int> && j <= i ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { x = x + a [ i + <int> ] [ j ] ; i += <int> ; } else { x = x + a [ i + <int> ] [ j + <int> ] ; i += <int> ; j += <int> ; } } d [ w ] = x ; w ++ ; x = <int> ; } for ( w = <int> ; w < q ; w ++ ) printf ( <str> , d [ w ] ) ; return <int> ; }", "label": 3, "id": 3609}
{"input": "int main ( ) { long long t , n , count = <int> ; scanf ( <str> , & t ) ; int i , j ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; count = <int> ; int pnum , cnum ; int inter = <int> ; scanf ( <str> , & pnum ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & cnum ) ; if ( cnum >= pnum ) { inter ++ ; } else { count += ( inter * ( inter + <int> ) ) / <int> ; inter = <int> ; } pnum = cnum ; } count += ( inter * ( inter + <int> ) ) / <int> ; printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 3610}
{"input": "static int maxval ; void setmax ( int ) ; int getmax ( short int , short int ) ; int main ( ) { short int arr [ <int> ] [ <int> ] , element , maxarr [ <int> ] [ <int> ] ; int tc , gmax = <int> , smax = <int> ; unsigned short int i = <int> , j = <int> , no = <int> ; scanf ( <str> , & tc ) ; while ( tc ) { maxval = <int> , gmax = <int> , smax = <int> ; scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & element ) ; arr [ i ] [ j ] = element ; if ( i == <int> ) { maxarr [ i ] [ j ] = gmax + arr [ i ] [ j ] ; } else { gmax = getmax ( maxarr [ i - <int> ] [ j - <int> ] , maxarr [ i - <int> ] [ j ] ) ; maxarr [ i ] [ j ] = gmax + arr [ i ] [ j ] ; } setmax ( maxarr [ i ] [ j ] ) ; } } printf ( <str> , maxval ) ; tc -- ; } return <int> ; } int getmax ( short int x , short int y ) { int maxi = <int> ; if ( x > y ) maxi = x ; else maxi = y ; return maxi ; } void setmax ( int x ) { if ( x > maxval ) maxval = x ; }", "label": 1, "id": 3611}
{"input": "int main ( ) { int T ; int x , y , a , b , t , gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3612}
{"input": "int main ( ) { int t = <int> , c = <int> ; scanf ( <str> , & t ) ; for ( c = <int> ; c < t ; c ++ ) { int a , b , t , l , p ; scanf ( <str> , & a , & b ) ; if ( a < b ) { t = a ; a = b ; b = t ; } p = a * b ; do { t = a % b ; a = b ; b = t ; } while ( b != <int> ) ; l = p / a ; printf ( <str> , a , l ) ; } return <int> ; }", "label": 1, "id": 3613}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , b [ n ] , i , r ; double l ; i = n ; while ( i -- ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; l = a [ i ] * b [ i ] ; do { r = a [ i ] % b [ i ] ; a [ i ] = b [ i ] ; b [ i ] = r ; } while ( r != <int> ) ; b [ i ] = l / a [ i ] ; } for ( i = n - <int> ; i >= <int> ; i -- ) { printf ( <str> , a [ i ] , b [ i ] ) ; } }", "label": 1, "id": 3614}
{"input": "int main ( ) { int i , n , a , b , j , gcd , lcm , max ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( j = b ; j >= <int> ; j -- ) { if ( ( a % j == <int> ) && ( b % j == <int> ) ) { gcd = j ; break ; } } max = a ; } else { for ( j = a ; j >= <int> ; j -- ) { if ( ( a % j == <int> ) && ( b % j == <int> ) ) { gcd = j ; break ; } } max = b ; } while ( <int> ) { if ( ( max % a == <int> ) && ( max % b == <int> ) ) { lcm = max ; break ; } max ++ ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3615}
{"input": "int main ( ) { int t , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { long long int count = <int> ; int i , j , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; if ( n == <int> ) count = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; ( i < n ) && ( a [ i ] >= a [ i - <int> ] ) ; i ++ , j ++ ) ; count += ( <int> << j ) - <int> ; } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 3616}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int count = <int> , ans = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) count ++ ; else { ans += ( count * ( count - <int> ) ) / <int> ; count = <int> ; } } ans += n ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 3617}
{"input": "int max ( int a , int b ) { if ( a > b ) return a - <int> ; else return b - <int> ; } int main ( ) { char path [ <int> ] [ <int> ] ; int n ; scanf ( <str> , & n ) ; int i , j , k ; for ( i = <int> ; i < n ; i ++ ) { int row ; scanf ( <str> , & row ) ; for ( j = <int> ; j < row ; j ++ ) scanf ( <str> , & path [ j ] ) ; for ( k = row - <int> ; k >= <int> ; k -- ) for ( j = k ; j >= <int> ; j -- ) path [ k ] [ j ] += max ( ( int ) path [ k + <int> ] [ j ] , ( int ) path [ k + <int> ] [ j + <int> ] ) ; printf ( <str> , path [ <int> ] [ <int> ] - <int> ) ; } return <int> ; }", "label": 3, "id": 3618}
{"input": "int main ( ) { long int test ; long int b , c , i , flag ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & b , & c ) ; flag = ( b > c ) ? c : b ; for ( i = <int> ; i < flag ; i ++ ) { if ( b % i == <int> && c % i == <int> ) { printf ( <str> , i , b * c / i ) ; break ; } } if ( i == flag ) { printf ( <str> , i , b * c / i ) ; } } return <int> ; }", "label": 2, "id": 3619}
{"input": "int main ( ) { int T ; long long a [ <int> ] , i , n , j , k , b [ <int> ] , t ; int count , s ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { count = <int> ; s = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( k = <int> ; k < n - <int> ; k ++ ) { if ( a [ k ] <= a [ k + <int> ] ) { count ++ ; s = s + count ; } else count = <int> ; } b [ i ] = s + n ; } for ( t = <int> ; t < T ; t ++ ) printf ( <str> , b [ t ] ) ; }", "label": 0, "id": 3620}
{"input": "int fastInput ( ) { int val = <int> ; char c = getchar_unlocked ( ) ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) val = ( val << <int> ) + ( val << <int> ) + ( c - <char> ) , c = getchar_unlocked ( ) ; return val ; } int main ( void ) { int i , t , n , min , temp ; t = fastInput ( ) ; while ( t -- ) { n = fastInput ( ) ; min = fastInput ( ) ; for ( i = <int> ; i < n ; i ++ ) { temp = fastInput ( ) ; if ( temp < min ) min = temp ; } long long int ans = ( long long int ) min * ( long long int ) ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 3621}
{"input": "int a [ <int> ] [ <int> ] , line ; int * max ( int * i , int * j ) ; int main ( ) { int cas , i , j , k ; int * ptr , * val ; for ( scanf ( <str> , & cas ) , i = <int> ; i < cas && cas > <int> ; i ++ ) { scanf ( <str> , & line ) ; for ( j = <int> ; j < line ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = line ; j > <int> ; j -- ) { for ( k = <int> ; k <= j - <int> ; k ++ ) { a [ j - <int> ] [ k ] += ( a [ j - <int> ] [ k ] + a [ j - <int> ] [ k + <int> ] ) ; } } a [ <int> ] [ <int> ] -= ( a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; ptr = & a [ <int> ] [ <int> ] ; for ( j = <int> ; j < line - <int> ; j ++ ) { val = ptr ; ptr = max ( ( ptr + <int> ) , ( ptr + <int> ) ) ; * ptr += * val ; } printf ( <str> , * ptr ) ; } return <int> ; } int * max ( int * i , int * j ) { if ( * i > * j ) { * i -= ( * ( i + <int> ) + * ( i + <int> ) ) ; return i ; } else if ( * j > * i ) { * j -= ( * ( j + <int> ) + * ( j + <int> ) ) ; return j ; } else if ( * i == * j ) { * i -= ( * ( i + <int> ) + * ( i + <int> ) ) ; * j -= ( * ( j + <int> ) + * ( j + <int> ) ) ; if ( * i > * j ) { return i ; } else if ( * j > * i ) { return j ; } else if ( * j == * i ) { return i ; } } }", "label": 1, "id": 3622}
{"input": "int main ( ) { long int t , k , a , b , r , a2 , b2 ; scanf ( <str> , & t ) ; while ( t -- ) { r = <int> ; scanf ( <str> , & a , & b ) ; b2 = b ; a2 = a ; if ( a < b ) { k = a2 ; a2 = b2 ; b2 = k ; } while ( r != <int> ) { r = a2 % b2 ; a2 = b2 ; b2 = r ; } printf ( <str> , a2 , ( a * b ) / a2 ) ; } return <int> ; }", "label": 0, "id": 3623}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , lcm , k , c ; scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; lcm = ( a * b ) / k ; printf ( <str> , k , lcm ) ; } int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { gcd ( b , b % a ) ; } }", "label": 1, "id": 3624}
{"input": "int main ( void ) { int t , r , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 3625}
{"input": "int s [ <int> * <int> ] ; int <unk> ( int arr [ ] , int k , int i , int j ) { int x1 , x2 ; if ( s [ i ] ) return s [ i ] ; if ( j == k ) return arr [ i ] ; else { x1 = arr [ i ] + <unk> ( arr , k , i + j , j + <int> ) ; x2 = arr [ i ] + <unk> ( arr , k , i + j + <int> , j + <int> ) ; if ( x1 > x2 ) s [ i ] = x1 ; else s [ i ] = x2 ; return s [ i ] ; } } int main ( ) { int k , t , arr [ <int> * <int> ] , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < ( k * ( k + <int> ) / <int> ) ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; s [ i ] = <int> ; } printf ( <str> , <unk> ( arr , k , <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 3626}
{"input": "int main ( ) { short t ; int a , b , in , out , r ; long long int lcm , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { max = b ; b = a ; } else { max = a ; } out = b ; in = max ; r = max % b ; while ( r != <int> ) { in = out ; out = r ; r = in % out ; } lcm = ( max / out ) * b ; printf ( <str> , out , lcm ) ; } return <int> ; }", "label": 0, "id": 3627}
{"input": "int main ( ) { int t , lines , i , j ; scanf ( <str> , & t ) ; int count = <int> ; while ( count < t ) { scanf ( <str> , & lines ) ; int arr [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } int sum1 = <int> , sum2 = <int> ; for ( i = lines - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { sum1 = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; sum2 = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; if ( sum1 >= sum2 ) { arr [ i ] [ j ] = sum1 ; } else { arr [ i ] [ j ] = sum2 ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; count ++ ; } }", "label": 0, "id": 3628}
{"input": "int main ( ) { int a [ <int> ] , n , i , t , sum , temp ; scanf ( <str> , & t ) ; while ( t != <int> ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) sum = sum + a [ i + <int> ] ; else { sum = sum + a [ i ] ; temp = a [ i ] ; a [ i ] = a [ i + <int> ] ; a [ i + <int> ] = temp ; } } t -- ; } return <int> ; }", "label": 3, "id": 3629}
{"input": "int main ( ) { int n , t , i , b , count = <int> , sum = <int> , great = <int> ; scanf ( <str> , & b ) ; for ( ; b > <int> ; b -- ) { scanf ( <str> , & n ) ; t = ( ( n ) * ( n + <int> ) ) / <int> ; int a [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } sum = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ count + great ] >= a [ count + great + <int> ] ) { sum = sum + a [ count + great ] ; count = count + great + <int> ; } else { sum = sum + a [ count + great + <int> ] ; count = count + great + <int> ; } great = great + <int> ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 3630}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] = { <int> } , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 3631}
{"input": "int main ( ) { int t , n , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] < min ) min = a [ i + <int> ] ; else continue ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3632}
{"input": "int main ( ) { int w ; scanf ( <str> , & w ) ; for ( int i = <int> ; i < w ; i ++ ) { long long x , y , z ; scanf ( <str> , & x , & y ) ; long long a = x , b = y ; while ( y != <int> ) { int temp = x % y ; x = y ; y = temp ; } printf ( <str> , x , a * b / x ) ; } return <int> ; }", "label": 0, "id": 3633}
{"input": "int main ( ) { int t , n , a [ <int> ] , j , i , smax , max , b [ <int> ] , sum , k , l ; scanf ( <str> , & t ) ; i = <int> ; while ( i < t ) { scanf ( <str> , & n ) ; smax = <int> ; k = <int> ; while ( k < n ) { for ( j = <int> ; j <= k ; j ++ ) scanf ( <str> , & a [ j ] ) ; sum = <int> ; for ( j = <int> ; j <= k ; j ++ ) sum = sum + a [ j ] ; max = sum ; if ( smax > max ) max = smax ; smax = sum ; k ++ ; } b [ i ] = max ; i ++ ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , b [ i ] ) ; return <int> ; }", "label": 1, "id": 3634}
{"input": "int main ( void ) { int t ; int i , temp ; long int num , n , count , k ; long long int sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { temp = <int> ; count = <int> ; sum = <int> ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & num ) ; if ( num >= temp ) { count ++ ; } else { sum = sum + ( count * ( count + <int> ) / <int> ) ; count = <int> ; } temp = num ; } sum = sum + ( count * ( count + <int> ) / <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 3635}
{"input": "int main ( ) { int n , t ; scanf ( <str> , & t ) ; while ( t -- ) { int i ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3636}
{"input": "int main ( ) { int m , j , i , h , n , t , a [ <int> ] , b [ <int> ] [ <int> ] , x [ <int> ] = { <int> } , k ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } if ( n == <int> ) { a [ <int> ] = <int> ; a [ <int> ] = b [ <int> ] [ <int> ] ; x [ <int> ] = a [ <int> ] ; } else { a [ <int> ] = <int> ; a [ <int> ] = b [ <int> ] [ <int> ] ; a [ <int> ] = b [ <int> ] [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = b [ <int> ] [ <int> ] + b [ <int> ] [ <int> ] ; k = <int> ; if ( a [ <int> ] > a [ <int> ] ) { x [ <int> ] = a [ <int> ] ; } else { x [ <int> ] = a [ <int> ] ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ k ] = b [ i ] [ j ] + a [ k - ( i - <int> ) * ( i - <int> ) - <int> ] ; ++ k ; } else if ( j == i ) { a [ k ] = b [ i ] [ j ] + a [ k - ( i * ( j - <int> ) + ( i - <int> ) * ( i - j ) + <int> ) ] ; ++ k ; } else { for ( h = <int> ; h <= i ; h ++ ) { a [ k ] = b [ i ] [ j ] + a [ k - ( i * ( j - <int> ) + ( i - <int> ) * ( i - j ) + <int> ) + h ] ; ++ k ; } } } } for ( i = <int> ; i < k ; i ++ ) { if ( x [ m ] < a [ i ] ) { x [ m ] = a [ i ] ; } } } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , x [ i ] ) ; } return <int> ; }", "label": 2, "id": 3637}
{"input": "int main ( ) { int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( <str> ) ; scanf ( <str> , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( <str> , A , B , gcd ) ; printf ( <str> , A , B , lcm ) ; return <int> ; }", "label": 1, "id": 3638}
{"input": "int maxm ( int , int ) ; int main ( ) { int n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int max , i , j , z ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i + <int> ] [ j ] += a [ i ] [ j ] ; } else if ( j == i ) { a [ i + <int> ] [ j + <int> ] += a [ i ] [ j ] ; } else { z = maxm ( a [ i ] [ j ] , a [ i ] [ j - <int> ] ) ; a [ i + <int> ] [ j ] += z ; } } } max = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ n - <int> ] [ i ] ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; } int maxm ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 1, "id": 3639}
{"input": "int main ( void ) { int n , t , i , a [ <int> ] , l = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) ; { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) l ++ ; } -- l ; } printf ( <str> , l + n ) ; return <int> ; }", "label": 2, "id": 3640}
{"input": "int main ( ) { int testcases , rows , i , j , * current_row , a [ <int> ] , * <unk> , b [ <int> ] , max_sum ; current_row = a ; <unk> = b ; scanf ( <str> , & testcases ) ; while ( testcases -- ) { scanf ( <str> , & rows ) ; <unk> [ <int> ] = <int> ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & current_row [ j ] ) ; if ( j == <int> ) { current_row [ j ] = current_row [ j ] + <unk> [ j ] ; } else if ( j == i ) { current_row [ j ] = current_row [ j ] + <unk> [ j - <int> ] ; } else { current_row [ j ] = current_row [ j ] + ( <unk> [ j ] > <unk> [ j - <int> ] ? <unk> [ j ] : <unk> [ j - <int> ] ) ; } } if ( current_row == a ) { current_row = b ; <unk> = a ; } else { current_row = a ; <unk> = b ; } } max_sum = <unk> [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) { if ( max_sum < <unk> [ i ] ) { max_sum = <unk> [ i ] ; } } printf ( <str> , max_sum ) ; } return <int> ; }", "label": 0, "id": 3641}
{"input": "int main ( ) { int cas , lines , i , j , k = <int> , arr [ <int> ] , b [ <int> ] , sum , l , max , flag , temp , na [ <int> ] , p ; scanf ( <str> , & cas ) ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < cas ; i ++ ) { for ( j = <int> ; j <= lines ; j ++ ) { flag = <int> ; sum = <int> ; for ( k = <int> ; k < j ; k ++ ) { scanf ( <str> , & arr [ k ] ) ; printf ( <str> ) ; if ( flag == j ) printf ( <str> ) ; flag ++ ; sum = sum + arr [ k ] ; } b [ j ] = sum ; } for ( j = <int> ; j <= lines ; j ++ ) { printf ( <str> , b [ j ] ) ; printf ( <str> ) ; } printf ( <str> ) ; max = b [ <int> ] ; for ( l = <int> ; l <= lines ; l ++ ) { if ( b [ l ] > max ) { temp = b [ l ] ; b [ l ] = max ; max = temp ; } } na [ i ] = max ; } for ( p = <int> ; p < cas ; p ++ ) { printf ( <str> , na [ p ] ) ; } return <int> ; }", "label": 3, "id": 3642}
{"input": "int main ( ) { long long int t , n , arr [ <int> ] , i , mini ; long long int cost ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; mini = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < arr [ mini ] ) { mini = i ; } } cost = ( n - <int> ) * arr [ mini ] ; printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 3643}
{"input": "void quick ( int a [ ] , int start , int end ) { int p , i ; if ( start < end ) { p = partition ( a , start , end ) ; quick ( a , start , p - <int> ) ; quick ( a , p + <int> , end ) ; } } int partition ( int a [ ] , int start , int end ) { int pivot , p , t , k , i ; pivot = a [ end ] ; p = start ; for ( i = start ; i <= end - <int> ; i ++ ) { if ( a [ i ] <= pivot ) { t = a [ i ] ; a [ i ] = a [ p ] ; a [ p ] = t ; p = p + <int> ; } } k = a [ p ] ; a [ p ] = a [ end ] ; a [ end ] = k ; return p ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; quick ( a , <int> , n - <int> ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ <int> ] != a [ i ] ) break ; } printf ( <str> , a [ <int> ] * ( n - i ) ) ; } return <int> ; }", "label": 1, "id": 3644}
{"input": "long gcd ( long a , long b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , la , lb ; scanf ( <str> , & t ) ; while ( t -- ) { long a , b ; scanf ( <str> , & a , & b ) ; long g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 0, "id": 3645}
{"input": "int main ( ) { int row , n ; scanf ( <str> , & row ) ; while ( row > <int> ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { arr [ i - <int> ] [ j ] += arr [ i ] [ j ] >= arr [ i ] [ j + <int> ] ? arr [ i ] [ j ] : arr [ i ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; row -- ; } system ( <str> ) ; return <int> ; }", "label": 1, "id": 3646}
{"input": "int scan_f ( int * location ) { register int digit ; register int result = <int> ; while ( ( digit = getchar ( ) ) >= <char> ) { result = ( result << <int> ) + ( result << <int> ) + digit - <char> ; } * location = result ; return <int> ; } int row , a [ <int> ] [ <int> ] ; int l ( int n , int m ) { int tlsum , trsum ; row == n ? <int> : ( ( tlsum = l ( n + <int> , m ) ) > ( trsum = l ( n + <int> , m + <int> ) ) ? tlsum : trsum ) ; } int main ( ) { int t , i , m , n , sum ; scan_f ( & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scan_f ( & row ) ; for ( n = <int> ; n < row ; n ++ ) { for ( m = <int> ; m <= n ; m ++ ) { scan_f ( ( * ( a + n ) + m ) ) ; } } sum = l ( <int> , <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 3647}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , ans , ans1 ; scanf ( <str> , & a , & b ) ; if ( a > b ) { ans = a % b ; if ( ans == <int> ) { printf ( <str> , ans , a ) ; } else printf ( <str> , a * b ) ; } else { ans = b % a ; if ( ans == <int> ) printf ( <str> , ans , b ) ; else printf ( <str> , a * b ) ; } } return <int> ; }", "label": 1, "id": 3648}
{"input": "int main ( ) { int t , n1 , n2 , r , b ; scanf ( <str> , & t ) ; while ( t -- ) { r = <int> ; scanf ( <str> , & n1 , & n2 ) ; while ( ( n1 * r ) % n2 != <int> ) { r ++ ; } printf ( <str> , ( n2 / r ) , n1 * r ) ; } return <int> ; }", "label": 1, "id": 3649}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; if ( a > b ) { int i ; for ( i = a ; ; i = i + a ) if ( i % b == <int> ) { printf ( <str> , ( a * b ) / i , i ) ; break ; } } else { int i ; for ( i = b ; ; i = i + b ) if ( i % a == <int> ) { printf ( <str> , ( a * b ) / i , i ) ; break ; } } } return <int> ; }", "label": 1, "id": 3650}
{"input": "int a [ <int> ] [ <int> ] ; int size ; int maxvalue ( int m , int n ) { if ( n > m ) return <int> ; if ( ( m == size - <int> ) && ( m <= n ) ) return a [ m ] [ n ] ; else return a [ m ] [ n ] + max ( maxvalue ( m + <int> , n ) , maxvalue ( m + <int> , n + <int> ) ) ; } int max ( int aa , int b ) { if ( aa > b ) return aa ; else return b ; } int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> , maxvalue ( <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 3651}
{"input": "int main ( ) { long long int a , b ; int n , i , c ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( i = <int> ; i <= a / <int> ; i ++ ) { if ( a % i == <int> && b % i == <int> ) c = i ; } } else { for ( i = <int> ; i <= b / <int> ; i ++ ) { if ( a % i == <int> && b % i == <int> ) c = i ; } } printf ( <str> , c , ( a * b ) / c ) ; } return <int> ; }", "label": 2, "id": 3652}
{"input": "int main ( ) { long int n , t , i , min , a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = mini ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3653}
{"input": "int main ( ) { int A [ <int> ] [ <int> ] , add , n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } add = A [ <int> ] [ <int> ] ; i = <int> , j = <int> ; while ( i != n || j != n ) { if ( A [ i + <int> ] [ j ] >= A [ i + <int> ] [ j + <int> ] ) { add = add + A [ i + <int> ] [ j ] ; i = i + <int> ; } else { add = add + A [ i + <int> ] [ j + <int> ] ; i = i + <int> ; j = j + <int> ; } } printf ( <str> , add ) ; return <int> ; }", "label": 3, "id": 3654}
{"input": "int main ( void ) { int iTest , iItr , iMin = <int> , iValue , iCost_oprtn , iArrLen ; fscanf ( stdin , <str> , & iTest ) ; while ( iTest -- ) { iCost_oprtn = <int> ; fscanf ( stdin , <str> , & iArrLen ) ; fscanf ( stdin , <str> , & iValue ) ; for ( iItr = <int> ; iItr < iArrLen ; iItr ++ ) { fscanf ( stdin , <str> , & iValue ) ; if ( iMin > iValue ) { iMin = iValue ; iCost_oprtn += <int> ; } iCost_oprtn ++ ; } fprintf ( stdout , <str> , iCost_oprtn ) ; } return <int> ; }", "label": 1, "id": 3655}
{"input": "short int a [ <int> ] ; int main ( ) { short int n ; char b , i ; long s ; scanf ( <str> , & n ) ; while ( n != <int> ) { scanf ( <str> , & b ) ; while ( b -- ) { if ( b > <int> ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } else { fflush ( stdin ) ; a [ i ] = - <int> ; scanf ( <str> , & a [ i + <int> ] , & a [ i + <int> ] ) ; } } a [ i + <int> ] = - <int> ; i = <int> , s = <int> ; while ( a [ i ] != - <int> ) { if ( a [ i ] != - <int> ) s = s + a [ i ] ; else { if ( a [ i + <int> ] > a [ i + <int> ] ) s = s + a [ i + <int> ] ; else s = s + a [ i + <int> ] ; i += <int> ; } i ++ ; } printf ( <str> , s ) ; n -- ; } return <int> ; }", "label": 3, "id": 3656}
{"input": "int main ( ) { int i , j , t , k = <int> ; long int N , count = <int> , n = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { n = <int> ; k = <int> ; scanf ( <str> , & N ) ; long int A [ N ] ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( i = <int> ; i < N ; i ++ ) { if ( A [ i ] > A [ i + <int> ] ) { count = i - k ; n += count * ( count + <int> ) / <int> ; k = i + <int> ; } } t -- ; printf ( <str> , n + N ) ; } return <int> ; }", "label": 1, "id": 3657}
{"input": "int main ( ) { int tcases = <int> , rows = <int> , k = <int> ; int i = <int> , j = <int> , arr [ <int> ] [ <int> ] = { <int> } , max = <int> ; scanf ( <str> , & tcases ) ; for ( k = <int> ; k <= tcases ; k ++ ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { arr [ i ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ; } else { arr [ i ] [ j ] = ( ( arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ) > ( arr [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ) ) ? ( arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ) : ( arr [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ) ; } max = ( max > arr [ i ] [ j ] ) ? max : arr [ i ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 3658}
{"input": "int main ( ) { int t , i , j , temp , n ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long long int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( arr [ j ] > arr [ j + <int> ] ) { temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( <str> , arr [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 3659}
{"input": "int main ( ) { long long int t , n , c , i , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; c = <int> ; s = <int> ; for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { c ++ ; s = s + c ; } else c = <int> ; } printf ( <str> , s + n ) ; } return <int> ; }", "label": 0, "id": 3660}
{"input": "int main ( void ) { int t , temp ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long int temp1 = a * b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } while ( b > <int> ) { temp = a % b ; if ( temp == <int> ) break ; a = b ; b = temp ; } printf ( <str> , b , temp1 / b ) ; } return <int> ; }", "label": 0, "id": 3661}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] + arr [ i - <int> ] [ j ] > arr [ i ] [ j + <int> ] + arr [ i - <int> ] [ j ] ) arr [ i - <int> ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; else arr [ i - <int> ] [ j ] = arr [ i ] [ j + <int> ] + arr [ i - <int> ] [ j ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 3662}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; int a [ n ] ; long int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 3663}
{"input": "int n , m ; int main ( ) { int test_cases ; int output [ <int> ] ; int a [ <int> ] [ <int> ] ; int i , j , k = <int> ; scanf ( <str> , & test_cases ) ; while ( test_cases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; output [ k ] = findmax ( a , <int> , <int> ) ; k ++ ; } while ( ++ test_cases < k ) { printf ( <str> , output [ test_cases ] ) ; } return <int> ; } int findmax ( int ( * a ) [ <int> ] , int x , int y ) { int i = n - <int> ; while ( i >= <int> ) { if ( i == <int> ) return a [ <int> ] [ <int> ] ; else { for ( m = <int> ; m <= i ; m ++ ) { if ( a [ i ] [ m ] > a [ i ] [ m + <int> ] ) a [ i - <int> ] [ m ] += a [ i ] [ m ] ; else a [ i - <int> ] [ m ] += a [ i ] [ m + <int> ] ; } } i -- ; } }", "label": 1, "id": 3664}
{"input": "int main ( ) { int t , i , j , k , n ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = ( n - <int> ) ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3665}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int r , n = a , m = b ; while ( m != <int> ) { r = n % m ; n = m ; m = r ; } long long k = ( a * b ) / n ; printf ( <str> , n , k ) ; } return <int> ; }", "label": 1, "id": 3666}
{"input": "long long int gcd ( long long int a , int b ) ; int main ( void ) { long long int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } long long int gcd ( long long int a , int b ) { if ( a == <int> || b == <int> ) { return <int> ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; }", "label": 0, "id": 3667}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { int a , b , m , n ; scanf ( <str> , & m , & n ) ; a = m ; b = n ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } int gcd = a ; int lcm = ( m * n ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3668}
{"input": "int main ( ) { short i , rows , j , no , k ; int array [ <int> ] [ <int> ] , final [ <int> ] ; scanf ( <str> , & no ) ; for ( k = <int> ; k < no ; k ++ ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( ( array [ i ] [ j ] + array [ i - <int> ] [ j - <int> ] ) > ( array [ i ] [ j - <int> ] + array [ i - <int> ] [ j - <int> ] ) ) array [ i - <int> ] [ j - <int> ] = array [ i ] [ j ] + array [ i - <int> ] [ j - <int> ] ; else array [ i - <int> ] [ j - <int> ] = array [ i ] [ j - <int> ] + array [ i - <int> ] [ j - <int> ] ; } } final [ k ] = array [ <int> ] [ <int> ] ; } for ( j = <int> ; j < no ; j ++ ) { printf ( <str> , final [ j ] ) ; } return <int> ; }", "label": 1, "id": 3669}
{"input": "int main ( ) { unsigned long long t , a , b , temp , i , lcm , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } for ( i = b ; ; i += b ) { if ( i % a == <int> ) { lcm = i ; break ; } } gcd = ( a * b ) / lcm ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3670}
{"input": "int gcd ( int a , int b ) { int hcf = <int> , i = <int> , p = <int> , min ; if ( a < b ) min = a ; else min = b ; while ( i <= min ) { if ( a % i == <int> && b % i == <int> ) { hcf *= i ; a /= i ; b /= i ; i = p ; min /= i ; } else { i ++ ; p = i ; } } return hcf ; } int main ( ) { int n ; scanf ( <str> , & n ) ; int i , g [ n ] , l [ n ] ; for ( i = <int> ; i < n ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; g [ i ] = gcd ( a , b ) ; l [ i ] = a * b / g [ i ] ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , g [ i ] , l [ i ] ) ; } return <int> ; }", "label": 1, "id": 3671}
{"input": "int main ( ) { int t ; long int n , i , temp , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & i ) ; temp = i ; for ( p = <int> ; p < n ; p ++ ) { scanf ( <str> , & i ) ; if ( i < temp ) temp = i ; } printf ( <str> , temp * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3672}
{"input": "int main ( ) { int i , j , k , l , m , n , c = <int> , arr [ <int> ] ; scanf ( <str> , & l ) ; scanf ( <str> , & n ) ; for ( k = <int> ; k < l ; l ++ ) { c = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { k = i ; for ( j = i ; j < n ; j ++ ) { if ( arr [ k ] <= arr [ j ] ) { c ++ ; k = j ; } else break ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 3673}
{"input": "void main ( ) { int p ; int num1 , num2 , remainder , numerator , denominator ; scanf ( <str> , & p ) ; int gcd [ p ] , lcm [ p ] ; int i ; for ( i = <int> ; i < p ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd [ i ] = denominator ; lcm [ i ] = num1 * num2 / gcd [ i ] ; } for ( i = <int> ; i < p ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } }", "label": 1, "id": 3674}
{"input": "int fastread ( ) { int t = <int> ; char ch = getchar_unlocked ( ) ; while ( ch < <int> ) ch = getchar_unlocked ( ) ; while ( ch > <int> ) { t = t * <int> + ch - <char> ; ch = getchar_unlocked ( ) ; } return t ; } int sumi ( int , int ) ; int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , n ; int main ( ) { int i , j , k , t ; t = fastread ( ) ; while ( t -- ) { n = fastread ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; b [ i ] [ j ] = - <int> ; } k = sumi ( <int> , <int> ) ; printf ( <str> , k ) ; } return <int> ; } int sumi ( int i , int j ) { int t1 , t2 ; if ( i == n ) return <int> ; if ( b [ i ] [ j ] != - <int> ) { printf ( <str> , b [ i ] [ j ] ) ; return b [ i ] [ j ] ; } t1 = sumi ( i + <int> , j ) ; t2 = sumi ( i + <int> , j + <int> ) ; b [ i ] [ j ] = max ( t1 , t2 ) + a [ i ] [ j ] ; return b [ i ] [ j ] ; }", "label": 1, "id": 3675}
{"input": "int * * make2darray ( int ) ; int choose ( int * * , int , int , int ) ; int main ( ) { int y ; scanf ( <str> , & y ) ; while ( y -- ) { int * * p , i , j , t ; scanf ( <str> , & t ) ; p = make2darray ( t ) ; for ( i = t - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { p [ i - <int> ] [ j ] += ( p [ i ] [ j ] > p [ i ] [ j + <int> ] ) ? p [ i ] [ j ] : p [ i ] [ j + <int> ] ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } } int * * make2darray ( int rows ) { int * * x , i , cols ; x = malloc ( rows * sizeof ( * x ) ) ; for ( i = <int> ; i < rows ; i ++ ) { cols = i + <int> ; x [ i ] = malloc ( cols * sizeof ( * * x ) ) ; int j ; for ( j = <int> ; j < cols ; j ++ ) { scanf ( <str> , & x [ i ] [ j ] ) ; } } return x ; }", "label": 1, "id": 3676}
{"input": "int main ( void ) { int i , j , t ; long int a , b , temp , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( j = <int> ; j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } } else { for ( j = <int> ; j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } } printf ( <str> , gcd , a * b / gcd ) ; } }", "label": 2, "id": 3677}
{"input": "int path ( int a [ <int> ] [ <int> ] , int k , int i , int row , int sum ) { int m , n ; if ( row == ( k - <int> ) ) { return ( a [ row ] [ i ] ) ; } else { m = path ( a , k , i , row + <int> , sum ) ; n = path ( a , k , i + <int> , row + <int> , sum ) ; if ( m > n ) return ( m + a [ row ] [ i ] ) ; else return ( n + a [ row ] [ i ] ) ; } } int main ( ) { int n , k , a [ <int> ] [ <int> ] , x , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } x = path ( a , k , <int> , <int> , <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 2, "id": 3678}
{"input": "long sum ( long c ) { long k , m = <int> ; for ( k = <int> ; k <= c ; k ++ ) m += k ; return m ; } int main ( ) { long t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long n , j , c = <int> ; scanf ( <str> , & n ) ; long t [ n ] ; long s = n ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & t [ j ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { if ( t [ j ] <= t [ j + <int> ] ) { c ++ ; } else { s += sum ( c ) ; c = <int> ; } } s += sum ( c ) ; printf ( <str> , s ) ; } }", "label": 0, "id": 3679}
{"input": "int main ( ) { int a , b , H , L , n ; scanf ( <str> , & n ) ; while ( n -- ) ; { scanf ( <str> , & a , & b ) ; for ( H = a < b ? a : b ; H >= <int> ; H -- ) if ( b % H == <int> && a % H == <int> ) break ; printf ( <str> , H ) ; for ( L = a > b ? a : b ; L <= a * b ; L ++ ) if ( L % a == <int> && L % b == <int> ) break ; printf ( <str> , L ) ; } return <int> ; }", "label": 1, "id": 3680}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int i , j , t , row ; scanf ( <str> , & t ) ; while ( t -- ) { arr [ <int> ] [ <int> ] = <int> ; scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = row - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) { arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; } else { arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 3681}
{"input": "int main ( ) { long int i , j , n , t ; long int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3682}
{"input": "int main ( ) { int t = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { long long int sum = <int> , n , m , beg , end , min , i ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( m = <int> ; m < n ; m ++ ) { scanf ( <str> , & a [ m ] ) ; } beg = <int> ; end = n - <int> ; min = a [ beg ] ; for ( i = beg + <int> ; i <= end ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( <str> , min * end ) ; } return <int> ; }", "label": 0, "id": 3683}
{"input": "int cache [ <int> ] [ <int> ] , a [ <int> ] [ <int> ] , n ; int solve ( int i , int j ) { int t1 , t2 , t , max ; if ( i > n ) return ( <int> ) ; if ( cache [ i ] [ j ] != - <int> ) return cache [ i ] [ j ] ; t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; if ( t1 >= t2 ) max = t1 ; else max = t2 ; t = max + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int tst , i , j ; scanf ( <str> , & tst ) ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) cache [ i ] [ j ] = - <int> ; a [ i ] [ j ] = <int> ; } while ( tst -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , solve ( <int> , <int> ) ) ; } return ( <int> ) ; }", "label": 1, "id": 3684}
{"input": "long long int hcf ( int a , int b ) { if ( b == <int> ) return a ; else return hcf ( b , a % b ) ; } int main ( ) { long long int t , a , b , max , min , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; max = a > b ? a : b ; min = a <= b ? a : b ; gcd = hcf ( max , min ) ; printf ( <str> , gcd ) ; lcm = ( a * b ) / gcd ; printf ( <str> , lcm ) ; } }", "label": 0, "id": 3685}
{"input": "int main ( ) { long long int t , n , s , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + <int> ] ) { s = s + arr [ i + <int> ] ; } else { s = s + arr [ i ] ; } } printf ( <str> , s ) ; s = <int> ; } }", "label": 1, "id": 3686}
{"input": "int main ( ) { int t ; int n , i , j , x ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; if ( t > <int> ) return <int> ; while ( t -- ) { scanf ( <str> , & n ) ; if ( ( n >= <int> ) | ( n < <int> ) ) return <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( ( a [ i ] [ j ] > <int> ) | ( a [ i ] [ j ] < <int> ) ) return <int> ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] >= a [ i - <int> ] [ j ] ) x = a [ i ] [ j ] ; else x = a [ i ] [ j + <int> ] ; a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + x ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3687}
{"input": "int main ( ) { int t , n , i , arr [ <int> ] , min = <int> , ans = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; min = <int> ; } return <int> ; }", "label": 0, "id": 3688}
{"input": "int main ( ) { int t , i , n , a [ <int> ] , sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) ; scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { sum = sum + a [ i ] ; a [ i + <int> ] = a [ i ] ; } else sum = sum + a [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 3689}
{"input": "int main ( ) { int t , i , j , n , sum , max , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { max = <int> ; sum = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & c ) ; if ( j > <int> && ( c > max ) ) max = c ; sum = sum + max ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3690}
{"input": "int a [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int solve ( int i , int j , int n ) { int t1 , t2 , t ; if ( i > n - <int> ) { return <int> ; } else { t1 = solve ( i + <int> , j , n ) ; t2 = solve ( i + <int> , j + <int> , n ) ; t = a [ i ] [ j ] + max ( t1 , t2 ) ; return t ; } } int main ( ) { int n , i , j , c , t ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = - <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } c = solve ( <int> , <int> , n ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 3691}
{"input": "static char _rbuf [ <int> * <int> ] ; static char * _rend = <int> ; static char * _rpos = <int> ; static int _getchar ( ) { int n = read ( <int> , _rbuf , sizeof _rbuf ) ; if ( n <= <int> ) { printf ( <str> , n ) ; exit ( <int> ) ; } _rend = _rbuf + n ; _rpos = _rbuf + <int> ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < <char> ) { } int n = c - <char> ; while ( ( ( c = mygetchar ( ) ) ) >= <char> ) { n = n * <int> + c - <char> ; } return n ; } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - <int> ; while ( <int> ) { buf [ bn -- ] = <char> + ( n ) ; n = n / <int> ; if ( n == <int> ) break ; } while ( bn < BSIZE - <int> ) putchar ( buf [ ++ bn ] ) ; putchar ( <char> ) ; } int main ( ) { int n = <int> ; int i = <int> ; int j = <int> ; int k = get_i ( ) ; while ( k -- ) { n = get_i ( ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = get_i ( ) ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i + <int> ; j ++ ) { if ( i > <int> && j > <int> && j != i ) { a [ i ] [ j ] += max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } else if ( i != <int> ) { if ( j == <int> ) { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } else if ( j == i ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } int max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ n - <int> ] [ i ] ) max = a [ n - <int> ] [ i ] ; } put_i ( max ) ; } return <int> ; }", "label": 1, "id": 3692}
{"input": "int main ( ) { int n , i ; int minimum = <int> , t , numb ; scanf ( <str> , & t ) ; while ( t != <int> ) { fflush ( stdin ) ; scanf ( <str> , & n ) ; i = n ; while ( n != <int> ) { fflush ( stdin ) ; scanf ( <str> , & numb ) ; if ( numb < minimum ) minimum = numb ; n -- ; } printf ( <str> , ( i - <int> ) * minimum ) ; t -- ; } return <int> ; }", "label": 2, "id": 3693}
{"input": "long long h ( long long a , long long b ) { while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; } int main ( ) { long long t , a , b , hcf , lcm ; scanf ( <str> , & t ) ; while ( t > <int> ) { t -- ; scanf ( <str> , & a , & b ) ; hcf = h ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 3694}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int A [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) A [ i ] [ j ] += ( ( A [ i + <int> ] [ j ] > A [ i + <int> ] [ j + <int> ] ) ? A [ i + <int> ] [ j ] : A [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3695}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; for ( int m = <int> ; m < t ; m ++ ) { int n , s = <int> ; scanf ( <str> , & n ) ; int a [ ( ( n * ( n + <int> ) ) / <int> ) ] ; for ( int l = <int> ; l < n ; l ++ ) { for ( int k = <int> ; k <= l ; k ++ ) scanf ( <str> , & a [ l + k ] ) ; } int i = <int> ; s = a [ i ] ; int j = <int> ; while ( j < n ) { if ( a [ i + j ] < a [ i + j + <int> ] ) { s = s + a [ i + j + <int> ] ; i = i + j + <int> ; j = j + <int> ; } else { s = s + a [ i + j ] ; i = i + j ; j = j + <int> ; } } printf ( <str> , s ) ; } }", "label": 1, "id": 3696}
{"input": "int cmpfunc ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , j ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; qsort ( a , n , sizeof ( int ) , cmpfunc ) ; int res ; res = a [ <int> ] * ( n - <int> ) ; printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 3697}
{"input": "int main ( ) { int t , m , n , h , l ; h = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m , & n ) ; for ( int i = <int> ; i <= m ; i ++ ) { if ( m % i == <int> && n % i == <int> ) h = h * i ; } l = ( m * n ) / h ; printf ( <str> , h , l ) ; h = <int> ; l = <int> ; } return <int> ; }", "label": 2, "id": 3698}
{"input": "int gcd ( ) ; void lcm ( ) ; int main ( ) { int T ; long long int a , b , r ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & a , & b ) ; r = gcd ( a , b ) ; printf ( <str> , r ) ; lcm ( a , b ) ; T -- ; } return <int> ; } int gcd ( x , y ) { if ( x >= y ) { if ( x % y == <int> ) return y ; else return ( gcd ( x - y , y ) ) ; } else { if ( x % y == <int> ) return y ; else return ( gcd ( x , y - x ) ) ; } } void lcm ( a , b ) { if ( a >= b ) { if ( a % b == <int> ) printf ( <str> , a ) ; else printf ( <str> , ( a * b ) ) ; } else { if ( b % a == <int> ) { printf ( <str> , b ) ; } else printf ( <str> , ( a * b ) ) ; } }", "label": 1, "id": 3699}
{"input": "void main ( ) { int t , n , i = <int> , j , max , sum = <int> ; long long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; i = <int> ; while ( i < n ) { j = i ; max = a [ i ] ; while ( a [ j ] >= max ) { max = a [ j ] ; j ++ ; } sum += ( ( j - i ) * ( j - i - <int> ) ) / <int> ; i = j ; } printf ( <str> , sum + n ) ; sum = <int> ; } }", "label": 1, "id": 3700}
{"input": "char buffer [ <int> ] , * buffer_cursor , * buffer_end ; int number [ <int> * <int> ] ; static unsigned long long int a [ <int> ] , b [ <int> ] , * cur , * old ; int c ; void puti ( unsigned long long int n ) { char temp [ <int> ] ; int i = <int> , j ; while ( n > <int> ) { temp [ i -- ] = n + <char> ; n /= <int> ; } j = i + <int> ; while ( j < <int> ) { putchar ( temp [ j ++ ] ) ; } } int main ( ) { static int i , t , n , i_f , j_f ; int x , j = <int> , k ; unsigned long long int mx = <int> ; c = fread ( buffer , <int> , <int> , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , <int> , <int> , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } if ( ( * buffer_cursor ++ ) < <char> ) break ; t = t * <int> + buffer_cursor [ - <int> ] - <char> ; } while ( <int> ) ; for ( i_f = <int> ; i_f < t ; i_f ++ ) { do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , <int> , <int> , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } if ( ( * buffer_cursor ++ ) < <char> ) break ; n = n * <int> + buffer_cursor [ - <int> ] - <char> ; } while ( <int> ) ; x = n * ( n + <int> ) / <int> ; for ( k = <int> ; k < x ; k ++ ) number [ k ] = <int> ; for ( i = <int> ; i < x ; i ++ ) { do { if ( buffer_cursor == buffer_end ) { c = fread ( buffer , <int> , <int> , stdin ) ; buffer_cursor = buffer ; buffer_end = buffer + c ; } if ( * ( buffer_cursor ++ ) < <char> ) break ; number [ i ] = number [ i ] * <int> + buffer_cursor [ - <int> ] - <char> ; } while ( <int> ) ; } for ( k = <int> ; k < ( n + <int> ) ; k ++ ) { a [ k ] = b [ k ] = <int> ; } cur = a ; old = b ; j_f = <int> ; a [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { cur [ <int> ] = number [ j_f ++ ] + old [ <int> ] ; j = <int> ; while ( j < i ) { cur [ j ] = number [ j_f ++ ] + max ( old [ j - <int> ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = number [ j_f ++ ] + old [ j - <int> ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } } mx = <int> ; for ( i = <int> ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; puti ( mx ) ; if ( ( i_f + <int> ) < t ) putchar ( <char> ) ; n = <int> ; } return <int> ; }", "label": 1, "id": 3701}
{"input": "int main ( ) { int t , i , sum , c ; long long int n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; sum = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { c = <int> ; while ( a [ i ] <= a [ i + <int> ] && i < n - <int> ) { c ++ ; i ++ ; } sum += ( c * ( c - <int> ) ) / <int> ; } printf ( <str> , sum + n ) ; } return <int> ; }", "label": 0, "id": 3702}
{"input": "void move ( int i , int j , int sum , int n ) ; int a [ <int> ] [ <int> ] , max ; int main ( ) { int i , j , n , test ; scanf ( <str> , & test ) ; while ( test ) { max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } move ( <int> , <int> , <int> , n ) ; printf ( <str> , max ) ; test -- ; } } void move ( int i , int j , int sum , int n ) { if ( i == n ) { if ( sum > max ) { max = sum ; } return ; } sum += a [ i ] [ j ] ; move ( i + <int> , j , sum , n ) ; move ( i + <int> , j + <int> , sum , n ) ; }", "label": 2, "id": 3703}
{"input": "int main ( int argc , char * argv [ ] ) { int num , line , t [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & num ) ; while ( num -- ) { scanf ( <str> , & line ) ; for ( i = <int> ; i < line ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & t [ i ] [ j ] ) ; } } for ( i = num - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( t [ i + <int> ] [ j ] > t [ i + <int> ] [ j + <int> ] ) { t [ i ] [ j ] += t [ i + <int> ] [ j ] ; } else t [ i ] [ j ] += t [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , t [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3704}
{"input": "int main ( ) { int n , a , b , i , s , g , l ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; s = a ; s = s < b ? s : b ; for ( i = s ; i != <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3705}
{"input": "int main ( ) { int t , a , b , num , den , rem , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) { num = a ; den = b ; } else if ( a < b ) { num = b ; den = a ; } else { num = den ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3706}
{"input": "void main ( ) { int t , i , j , num1 , num2 , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; for ( j = <int> ; j <= num1 || j <= num2 ; ++ j ) { if ( num1 % j == <int> && num2 % j == <int> ) gcd = j ; } lcm = num1 * num2 / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 2, "id": 3707}
{"input": "int main ( ) { int a , b , i = <int> , j = <int> , gcd , lcm , n , k ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> && ( a > <int> && b > <int> ) ) { gcd = i ; lcm = ( a * b ) / gcd ; } } if ( a == <int> || b == <int> ) { lcm = <int> ; if ( a == <int> ) { gcd = b ; } else { gcd = a ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3708}
{"input": "void main ( ) { long long int tri [ <int> ] [ <int> ] , i , j , r , c ; scanf ( <str> , & c ) ; while ( c > <int> ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; } for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , tri [ i ] [ j ] ) ; printf ( <str> ) ; } for ( i = r - <int> ; i > <int> ; i -- ) { for ( j = r - <int> ; j > <int> ; j -- ) { if ( tri [ i ] [ j ] >= tri [ i ] [ j - <int> ] ) tri [ i - <int> ] [ j - <int> ] = tri [ i ] [ j ] + tri [ i - <int> ] [ j - <int> ] ; else tri [ i - <int> ] [ j - <int> ] = tri [ i ] [ j - <int> ] + tri [ i - <int> ] [ j - <int> ] ; } } printf ( <str> , tri [ i ] [ j ] ) ; c -= <int> ; printf ( <str> ) ; } }", "label": 1, "id": 3709}
{"input": "int main ( ) { int tt ; scanf ( <str> , & tt ) ; while ( tt -- ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; memset ( arr , <int> , sizeof ( arr ) ) ; for ( int i = <int> ; i < n ; i ++ ) for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( int i = n - <int> ; i >= <int> ; i -- ) for ( int j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] += ( arr [ i + <int> ] [ j ] >= arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3710}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int triangle ( int size , int i , int j , int * * a ) { if ( i == size - <int> ) return a [ i ] [ j ] ; else return a [ i ] [ j ] + max ( triangle ( size , i + <int> , j , a ) , triangle ( size , i + <int> , j + <int> , a ) ) ; } int main ( ) { int i , j , n , k , l ; scanf ( <str> , & k ) ; for ( l = <int> ; l < k ; l ++ ) { scanf ( <str> , & n ) ; int * * a = ( int * * ) malloc ( ( sizeof ( int * ) * n ) ) ; for ( i = <int> ; i < n ; i ++ ) a [ i ] = ( int * ) malloc ( ( sizeof ( int ) ) * n ) ; for ( i = <int> ; i < n ; i ++ ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & ( a [ i ] [ j ] ) ) ; j ++ ; } } printf ( <str> , triangle ( n , <int> , <int> , a ) ) ; free ( a ) ; } return <int> ; }", "label": 2, "id": 3711}
{"input": "int n ; int arr [ <int> ] [ <int> ] ; int maxsum ( int i , int j ) { if ( j == - <int> || j > i ) return <int> ; return arr [ i ] [ j ] + maximum ( maxsum ( i - <int> , j ) , maxsum ( i - <int> , j - <int> ) ) ; } int maximum ( int i , int j ) { if ( i > j ) return i ; return j ; } int main ( ) { int t ; scanf ( <str> , & t ) ; int i , j ; int max ; while ( t -- != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } max = <int> ; for ( i = <int> ; i < n ; i ++ ) { max = maximum ( max , maxsum ( n - <int> , i ) ) ; } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 3712}
{"input": "int main ( ) { int t ; long int a , b , p , gcd , i , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; p = a * b ; for ( i = <int> ; i <= p ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; lcm = p / gcd ; printf ( <str> , gcd , lcm ) ; printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 3713}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int i , a , b , gcd = <int> , lcm ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i < a ; i ++ ) { if ( a % i == <int> ) { if ( b % i == <int> ) { gcd = i ; } } } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 3714}
{"input": "int main ( ) { long long int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; long long int small = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < small ) small = a [ j ] ; } printf ( <str> , small * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3715}
{"input": "int main ( ) { int a , b , x , y , t , num , i , gcd , lcm ; scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3716}
{"input": "int main ( ) { int n , rows , count , i , j ; int result [ <int> ] ; int store [ MAXSIZE ] [ MAXSIZE ] ; scanf ( <str> , & n ) ; for ( count = <int> ; count <= n ; count ++ ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & store [ i ] [ j ] ) ; } } for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( i != rows - <int> ) { store [ i ] [ j ] += ( store [ i + <int> ] [ j + <int> ] > store [ i + <int> ] [ j ] ? store [ i + <int> ] [ j + <int> ] : store [ i + <int> ] [ j ] ) ; } } } result [ count - <int> ] = store [ <int> ] [ <int> ] ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; }", "label": 0, "id": 3717}
{"input": "int main ( ) { int i , k , j , n , ln , row [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & ln ) ; for ( i = <int> ; i < ln ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & row [ i ] [ j ] ) ; } } for ( i = ln - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( row [ i ] [ j ] >= row [ i ] [ j + <int> ] ) row [ i - <int> ] [ j ] = row [ i - <int> ] [ j ] + row [ i ] [ j ] ; else row [ i - <int> ] [ j ] = row [ i - <int> ] [ j ] + row [ i ] [ j + <int> ] ; } } printf ( <str> , row [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3718}
{"input": "int read_int ( ) { char c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; int ret = <int> ; while ( c >= <char> && c <= <char> ) { ret = <int> * ret + c - <int> ; c = gc ( ) ; } return ret ; } int main ( ) { long long int t , n [ <int> ] , arr [ MAX ] , j , min [ <int> ] , i ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; ++ j ) { scanf ( <str> , & n [ j ] ) ; for ( i = <int> ; i < n [ j ] ; ++ i ) arr [ i ] = read_int ( ) ; min [ j ] = arr [ <int> ] ; for ( i = <int> ; i < n [ j ] ; ++ i ) min [ j ] = ( min [ j ] <= arr [ i ] ) ? min [ j ] : arr [ i ] ; } for ( j = <int> ; j < t ; ++ j ) { printf ( <str> , min [ j ] * ( n [ j ] - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3719}
{"input": "main ( ) { long int A , B , gcd , lcm , rem , T , nr , dr ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { nr = A ; dr = B ; } else { nr = B ; dr = A ; } while ( dr != <int> ) { rem = nr % dr ; nr = dr ; dr = rem ; } gcd = nr ; lcm = ( A * B ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 0, "id": 3720}
{"input": "int main ( ) { int t , c ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int x ; scanf ( <str> , & x ) ; int fact = <int> ; for ( int j = <int> ; j <= x ; j ++ ) { fact *= j ; } printf ( <str> , fact ) ; } }", "label": 1, "id": 3721}
{"input": "int main ( ) { int t , sum , min ; unsigned long int a ; unsigned int n , n1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; n1 = n ; sum = <int> ; min = <int> ; while ( n -- ) { scanf ( <str> , & a ) ; if ( n == n1 - <int> ) { min = a ; } else if ( a >= min ) { sum += min ; } else { sum += a ; min = a ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3722}
{"input": "int main ( ) { int i , j , t , n , a [ <int> ] [ <int> ] , l = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3723}
{"input": "int x = <int> , y = <int> ; int sum ( int m , int n , int p [ n + <int> ] [ n + <int> ] , int o ) { int i ; if ( m == ( n + <int> ) ) { if ( x > y ) { y = x ; } ; return <int> ; } else { for ( i = <int> ; i <= <int> ; i ++ ) { if ( i == <int> ) { x = x + p [ m ] [ o ] ; sum ( m + <int> , n , p , o ) ; x = x - p [ m ] [ o ] ; } else { x = x + p [ m ] [ o + <int> ] ; sum ( m + <int> , n , p , o + <int> ) ; x = x - p [ m ] [ o + <int> ] ; o = o - <int> ; } } } return <int> ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , l = <int> , c = <int> , x = <int> ; scanf ( <str> , & n ) ; int a [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum ( <int> , n , a , <int> ) ; y = y + a [ <int> ] [ <int> ] ; printf ( <str> , y ) ; } }", "label": 2, "id": 3724}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int a [ n ] , i , min ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ <int> ] ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 3725}
{"input": "int n ; int max ( int n1 , int n2 ) { if ( n1 > n2 ) return n1 ; return n2 ; } int solve ( int temp [ ] [ n + <int> ] , int a [ ] [ n ] , int i , int j , int n ) { if ( i >= n ) return <int> ; else { int t1 , t2 ; if ( temp [ i + <int> ] [ j ] == - <int> ) { t1 = solve ( temp , a , i + <int> , j , n ) ; temp [ i + <int> ] [ j ] = t1 ; } else { t1 = temp [ i + <int> ] [ j ] ; } if ( temp [ i + <int> ] [ j + <int> ] == - <int> ) { t2 = solve ( temp , a , i + <int> , j + <int> , n ) ; temp [ i + <int> ] [ j + <int> ] = t2 ; } else { t2 = temp [ i + <int> ] [ j + <int> ] ; } return max ( t1 , t2 ) + a [ i ] [ j ] ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { <unk> int n ; scanf ( <str> , & n ) ; int i , j ; int a [ n ] [ n ] ; int temp [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & a [ i ] [ j ] ) ; temp [ i ] [ j ] = - <int> ; } } for ( j = <int> ; j <= n ; ++ j ) { temp [ n ] [ j ] = <int> ; } printf ( <str> , solve ( temp , a , <int> , <int> , n ) ) ; } return <int> ; }", "label": 0, "id": 3726}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; int a , b , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 3727}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , temp ; long long int n , sum ; sum = <int> ; scanf ( <str> , & n ) ; long long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n - i - <int> ; j ++ ) { if ( arr [ j ] > arr [ j + <int> ] ) { temp = arr [ j ] ; arr [ j ] = arr [ j + <int> ] ; arr [ j + <int> ] = temp ; } } } sum = sum + ( arr [ <int> ] * ( n - <int> ) ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 3728}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; } int main ( ) { long long int t , i , a , b , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 3729}
{"input": "int gcd ( int a , int b ) { int divident = a >= b ? a : b ; int divisor = a <= b ? a : b ; while ( divisor != <int> ) { int remainder = divident % divisor ; divident = divisor ; divisor = remainder ; } return divident ; } int main ( ) { int a , y , lcm , A , B , i ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; y = gcd ( A , B ) ; lcm = ( A * B ) / y ; printf ( <str> , y , lcm ) ; } return <int> ; }", "label": 1, "id": 3730}
{"input": "void main ( ) { int t , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; while ( t -- ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 3731}
{"input": "int knownP [ <int> ] = { <int> } ; int rtTrg [ MAXL ] [ MAXL ] ; int maxPath ( int level , int offset , int maxlevel ) { int sum1 , sum2 ; if ( ( knownP [ level * <int> + offset ] != UNKNOWN ) && ( ! NOMOREDOWN ) ) { return knownP [ level * <int> + offset ] ; } if ( NOMOREDOWN ) { return knownP [ level * <int> + offset ] = rtTrg [ level ] [ offset ] ; } else { sum1 = maxPath ( level + <int> , offset , maxlevel ) ; sum2 = maxPath ( level + <int> , offset + <int> , maxlevel ) ; knownP [ level * <int> + offset ] = ( ( sum1 > sum2 ) ? sum1 : sum2 ) + rtTrg [ level ] [ offset ] ; return knownP [ level * <int> + offset ] ; } return ; } void fastread_D ( int * base ) { char c = <int> ; while ( c < <int> ) { c = getchar_unlocked ( ) ; } * base = <int> ; while ( c > <int> ) { * base = * base * <int> + c - <char> ; c = getchar_unlocked ( ) ; } } int main ( ) { int i , j , cases ; int totalLevels = <int> ; fastread_D ( & cases ) ; while ( cases -- ) { memset ( rtTrg , <int> , sizeof ( rtTrg ) ) ; memset ( knownP , UNKNOWN , sizeof ( knownP ) ) ; fastread_D ( & totalLevels ) ; for ( i = <int> ; i < totalLevels ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { fastread_D ( & rtTrg [ i ] [ j ] ) ; } } printf ( <str> , maxPath ( <int> , <int> , totalLevels - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3732}
{"input": "int main ( ) { int t , n , a [ <int> ] , i , j , k , c ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i <= n ; i ++ ) { if ( i == <int> ) c ++ ; if ( i != <int> && i == n - <int> ) c ++ ; for ( j = i ; j < n ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) { c ++ ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 3733}
{"input": "void mergesort ( long long int a [ ] , long int i , long int j ) ; void merge ( long long int a [ ] , long int i1 , long int j1 , long int i2 , long int j2 ) ; int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; long long int s = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } mergesort ( a , <int> , n - <int> ) ; s = a [ <int> ] * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; } void mergesort ( long long int a [ ] , long int i , long int j ) { int mid ; if ( i < j ) { mid = ( i + j ) / <int> ; mergesort ( a , i , mid ) ; mergesort ( a , mid + <int> , j ) ; merge ( a , i , mid , mid + <int> , j ) ; } } void merge ( long long int a [ ] , long int i1 , long int j1 , long int i2 , long int j2 ) { int temp [ <int> ] ; int i , j , k ; i = i1 ; j = i2 ; k = <int> ; while ( i <= j1 && j <= j2 ) { if ( a [ i ] < a [ j ] ) temp [ k ++ ] = a [ i ++ ] ; else temp [ k ++ ] = a [ j ++ ] ; } while ( i <= j1 ) temp [ k ++ ] = a [ i ++ ] ; while ( j <= j2 ) temp [ k ++ ] = a [ j ++ ] ; for ( i = i1 , j = <int> ; i <= j2 ; i ++ , j ++ ) a [ i ] = temp [ j ] ; }", "label": 3, "id": 3734}
{"input": "int min ( int , int ) ; int main ( ) { int test_cases , t ; int * arr , size ; int i , min ; int count ; scanf ( <str> , & test_cases ) ; for ( t = <int> ; t < test_cases ; t ++ ) { scanf ( <str> , & size ) ; arr = ( int * ) calloc ( size , sizeof ( int ) ) ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < size ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( <str> , min * ( size - <int> ) ) ; free ( arr ) ; } return <int> ; } int min ( int x , int y ) { if ( x <= y ) { return x ; } return y ; }", "label": 0, "id": 3735}
{"input": "int max , n ; int a [ <int> ] ; void traverse ( int k , int sum , int c ) { if ( k == n ) { if ( sum > max ) { max = sum ; } return ; } traverse ( k + <int> , sum + a [ c + k ] , c + k ) ; traverse ( k + <int> , sum + a [ c + k + <int> ] , c + k + <int> ) ; } int main ( ) { int res [ <int> ] ; int i , j , t , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n * ( n + <int> ) / <int> ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } traverse ( <int> , a [ <int> ] , <int> ) ; res [ i ] = max ; } for ( l = <int> ; l < t ; l ++ ) printf ( <str> , res [ l ] ) ; return <int> ; }", "label": 2, "id": 3736}
{"input": "int main ( ) { int i , t ; long int j , n ; long int pre ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { pre = <int> ; scanf ( <str> , & n ) ; long int A [ n + <int> ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & A [ j ] ) ; if ( pre > A [ j ] ) pre = A [ j ] ; } printf ( <str> , ( pre * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 3737}
{"input": "int gcd ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , gcd_res , lcm_res ; scanf ( <str> , & a , & b ) ; gcd_res = gcd ( a , b ) ; lcm_res = ( a * b ) / gcd_res ; printf ( <str> , gcd_res , lcm_res ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; }", "label": 0, "id": 3738}
{"input": "int hcf ( int n1 , int n2 ) ; int main ( ) { int gcd , n1 , n2 , lcm ; int t ; scanf ( <str> , t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; gcd = hcf ( n1 , n2 ) ; lcm = ( ( long int ) n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int hcf ( int n1 , int n2 ) { if ( n2 != <int> ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; }", "label": 3, "id": 3739}
{"input": "int n , m ; int main ( ) { int test_cases ; int a [ <int> ] [ <int> ] ; int i , j , k ; scanf ( <str> , & test_cases ) ; while ( test_cases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , findmax ( a , <int> , <int> ) ) ; } return <int> ; } int findmax ( int ( * a ) [ <int> ] , int x , int y ) { int left , right ; int i = x , j = y ; if ( i == n - <int> ) return a [ i ] [ j ] ; else { left = a [ i ] [ j ] + findmax ( a , i + <int> , j ) ; right = a [ i ] [ j ] + findmax ( a , i + <int> , j + <int> ) ; if ( left > right ) return left ; else return right ; } }", "label": 2, "id": 3740}
{"input": "int main ( ) { int t , i , j , e ; scanf ( <str> , & t ) ; int a [ t ] , b [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] ) ; scanf ( <str> , & b [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < b ; j ++ ) { if ( ( a [ i ] % j ) == <int> && ( b [ i ] % j ) == <int> ) e = j ; } printf ( <str> , e ) ; printf ( <str> , ( a [ i ] * b [ i ] ) / e ) ; } }", "label": 2, "id": 3741}
{"input": "int <unk> [ <int> ] [ <int> ] ; int A [ <int> ] [ <int> ] ; int <unk> ( int n , int x , int y ) { int t1 , t2 ; if ( x >= ( n ) ) return <int> ; if ( <unk> [ x ] [ y ] != - <int> ) return <unk> [ x ] [ y ] ; t1 = <unk> ( n , x + <int> , y ) ; t2 = <unk> ( n , x + <int> , y + <int> ) ; <unk> [ x ] [ y ] = A [ x ] [ y ] + ( t1 > t2 ? t1 : t2 ) ; return <unk> [ x ] [ y ] ; } int main ( ) { int t , i , n , j , k , sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & A [ j ] [ k ] ) ; <unk> [ j ] [ k ] = - <int> ; } } sum = <unk> ( n , <int> , <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3742}
{"input": "void sumtria ( int * a , int i , int count , int t , int * path , int len , int * maxi ) { int j , sum = <int> ; if ( count == t ) { for ( j = <int> ; j < count ; j ++ ) { sum += path [ j ] ; } if ( sum > ( * maxi ) ) * maxi = sum ; return ; } path [ len ] = a [ i ] ; len ++ ; count ++ ; sumtria ( a , i + count , count , t , path , len , maxi ) ; sumtria ( a , i + count + <int> , count , t , path , len , maxi ) ; } int main ( ) { int n , t , k , i , maxsum = <int> ; int * a , * path ; scanf ( <str> , & n ) ; while ( n -- ) { i = <int> ; scanf ( <str> , & t ) ; k = ( ( t * ( t + <int> ) ) / <int> ) ; path = ( int * ) malloc ( sizeof ( int ) * t ) ; a = ( int * ) malloc ( sizeof ( int ) * k ) ; while ( k -- ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } sumtria ( a , <int> , <int> , t , path , <int> , & maxsum ) ; printf ( <str> , maxsum ) ; } return <int> ; }", "label": 2, "id": 3743}
{"input": "int main ( ) { int x , y , r , h = - <int> , n ; scanf ( <str> , & n ) ; for ( int i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & x , & y ) ; r = <int> ; while ( <int> ) { r = x % y ; if ( r == <int> ) { h = y ; break ; } x = y ; y = r ; } printf ( <str> , h , ( x * y ) / h ) ; } return <int> ; }", "label": 1, "id": 3744}
{"input": "int main ( ) { int t , i , n , k , l , m , temp , key ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & a [ k ] ) ; } for ( l = <int> ; l < n - <int> ; l ++ ) { for ( m = <int> ; m < n - l - <int> ; m ++ ) { if ( a [ m ] > a [ m + <int> ] ) { temp = a [ m ] ; a [ m ] = a [ m + <int> ] ; a [ m + <int> ] = temp ; } } } key = a [ <int> ] ; printf ( <str> , key * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 3745}
{"input": "int * * a ; int max ( int a , int b ) { if ( a > b ) return ( a ) ; return ( b ) ; } int check ( int size ) { int sum ; int i = size - <int> , j ; while ( i > - <int> ) { j = i ; while ( j > - <int> ) { a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; j -- ; } i -- ; } return ( a [ <int> ] [ <int> ] ) ; } int main ( ) { int testcases , size , i , j , sum ; scanf ( <str> , & testcases ) ; while ( testcases != <int> ) { scanf ( <str> , & size ) ; a = ( int * * ) malloc ( size * ( sizeof ( int * ) ) ) ; for ( i = <int> ; i < size ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + <int> ) * ( sizeof ( int * ) ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = check ( size ) ; printf ( <str> , sum ) ; free ( a ) ; testcases -- ; } return ( <int> ) ; }", "label": 0, "id": 3746}
{"input": "int a [ <int> ] [ <int> ] ; int main ( void ) { int i , j , t , n ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } scanf ( <str> , & a [ i ] [ i ] ) ; } i = n - <int> ; while ( i >= <int> ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) > ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } i -- ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 3, "id": 3747}
{"input": "int main ( ) { int n , rows , a [ <int> ] [ <int> ] , <unk> , <unk> ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & rows ) ; if ( rows == <int> ) { scanf ( <str> , & a [ <int> ] [ <int> ] ) ; } else { { for ( <unk> = <int> ; <unk> < rows ; <unk> ++ ) { for ( <unk> = <int> ; <unk> <= <unk> ; <unk> ++ ) { scanf ( <str> , & a [ <unk> ] [ <unk> ] ) ; } } } int j = rows - <int> ; while ( j > <int> ) { int k = j ; while ( k > <int> ) { if ( a [ j ] [ k - <int> ] > a [ j ] [ k ] ) { a [ j - <int> ] [ k - <int> ] = a [ j - <int> ] [ k - <int> ] + a [ j ] [ k - <int> ] ; } else a [ j - <int> ] [ k - <int> ] = a [ j - <int> ] [ k - <int> ] + a [ j ] [ k ] ; k -- ; } j -- ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; n -- ; } return <int> ; }", "label": 0, "id": 3748}
{"input": "long fun ( int a , int b ) { if ( b == <int> ) return a ; else return fun ( b , a % b ) ; } int main ( ) { long a , b , h , l ; int s ; scanf ( <str> , & s ) ; while ( s -- ) { scanf ( <str> , & a , & b ) ; h = fun ( a , b ) ; l = ( a * b ) / fun ( a , b ) ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 0, "id": 3749}
{"input": "int tri [ <int> ] [ <int> ] ; int max ( int a , int b ) { return a > b ? a : b ; } int sumtrian ( int i , int j , int n ) { int <unk> , <unk> ; if ( i == n ) { return <int> ; } else { <unk> = sumtrian ( i + <int> , j , n ) ; <unk> = sumtrian ( i + <int> , j + <int> , n ) ; return tri [ i ] [ j ] + max ( <unk> , <unk> ) ; } } int main ( int argc , char const * argv [ ] ) { int i , j , t , n , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tri [ i ] [ j ] ) ; } } p = sumtrian ( <int> , <int> , n ) ; printf ( <str> , p ) ; } }", "label": 2, "id": 3750}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int prev = <int> , n , a [ <int> ] , ai , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) a [ i ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & ai ) ; if ( ai >= prev ) a [ i ] = a [ i - <int> ] + <int> ; prev = ai ; } for ( ai = <int> , i = <int> ; i <= n ; i ++ ) ai += a [ i ] ; printf ( <str> , ai ) ; } return <int> ; }", "label": 0, "id": 3751}
{"input": "int main ( ) { int t ; long n , count , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; count = n ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] != <int> ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ i ] ) { count += <int> ; a [ j ] = <int> ; break ; } } } } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 3752}
{"input": "int gcd ( long long int a , long long int b ) { long long int r ; r = a % b ; if ( r == <int> ) { return b ; } return ( gcd ( b , r ) ) ; } int main ( void ) { long long int t ; scanf ( <str> , & t ) ; long long int a , b ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; long long int g = gcd ( a , b ) ; long long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 3753}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int i , j , n , rows , max ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & rows ) ; arr [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] = max = <int> ; for ( i = <int> ; i <= rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ( arr [ ( i + <int> ) & <int> ] [ j ] ) ) ; arr [ ( i + <int> ) & <int> ] [ j ] += ( arr [ i & <int> ] [ j ] > arr [ i & <int> ] [ j - <int> ] ) ? arr [ i & <int> ] [ j ] : arr [ i & <int> ] [ j - <int> ] ; max = ( max > arr [ ( i + <int> ) & <int> ] [ j ] ) ? max : arr [ ( i + <int> ) & <int> ] [ j ] ; } arr [ ( i + <int> ) & <int> ] [ j ] = <int> ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3754}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j ; int x , a [ i ] [ j ] , p , q , m = <int> , l , o , y , s ; scanf ( <str> , & x ) ; x = i ; x = j ; for ( p = <int> ; p <= x ; p ++ ) { for ( q = <int> ; q <= m ; q ++ ) { scanf ( <str> , a [ p ] [ q ] ) ; } printf ( <str> ) ; m ++ ; } y = a [ <int> ] [ <int> ] ; l = <int> ; o = <int> ; s = o + <int> ; for ( p = <int> ; p <= x ; p ++ ) { if ( a [ l ] [ o ] > a [ l ] [ s ] ) { y = y + a [ l ] [ o ] ; l ++ ; } else { y = y + a [ l ] [ s ] ; l ++ ; o ++ ; } } printf ( <str> , y ) ; } return <int> ; }", "label": 1, "id": 3755}
{"input": "int main ( ) { int t , i , n , sum ; scanf ( <str> , & t ) ; while ( t > <int> ) { sum = <int> ; scanf ( <str> , & n ) ; long long int a [ n + <int> ] , b [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } b [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { b [ i ] = b [ i - <int> ] + <int> ; } else { b [ i ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { sum = sum + b [ i ] ; } printf ( <str> , sum ) ; t -- ; } }", "label": 0, "id": 3756}
{"input": "int main ( ) { int T , h , l ; scanf ( <str> , & T ) ; while ( T -- ) { int p , q ; scanf ( <str> , & p , & q ) ; h = hcf ( p , q ) ; l = ( p * q ) / h ; printf ( <str> , h , l ) ; } return <int> ; } int hcf ( int a , int b ) { while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } return a ; }", "label": 1, "id": 3757}
{"input": "int main ( ) { int t , n , i , j , x , sum , k , max ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum = <int> ; scanf ( <str> , & n ) ; int a [ n ] , b [ n - <int> ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } if ( n == <int> ) { if ( a [ <int> ] > a [ <int> ] ) { printf ( <str> , a [ <int> ] ) ; continue ; } else { printf ( <str> , a [ <int> ] ) ; continue ; } } for ( k = <int> ; k < n - <int> ; k ++ ) { for ( j = <int> ; j < n - k - <int> ; j ++ ) { b [ j ] = fabs ( a [ j ] - a [ j + <int> ] ) ; } max = b [ <int> ] ; for ( j = <int> ; j < n - k - <int> ; j ++ ) { if ( b [ j ] > max ) { max = b [ j ] ; x = j ; } } if ( a [ x ] > a [ x + <int> ] ) { sum = sum + a [ x + <int> ] ; for ( j = x ; j < n - k - <int> ; j ++ ) { a [ j ] = a [ j + <int> ] ; } } else { sum = sum + a [ x ] ; for ( j = x + <int> ; j < n - k - <int> ; j ++ ) { a [ j ] = a [ j + <int> ] ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 3758}
{"input": "long long int gcd ( long long int a , long long int b ) { long long int z ; while ( a % b ) { z = b ; b = a % b ; a = z ; } return b ; } long long int lcm ( long long int a , long long int b ) { return a * b / gcd ( a , b ) ; } int main ( void ) { int t , i ; long long int a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; else printf ( <str> , gcd ( b , a ) , lcm ( b , a ) ) ; } return <int> ; }", "label": 0, "id": 3759}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int N , min = INF , temp , i ; long long int ans = <int> ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < min ) min = temp ; } ans = min * ( N - <int> ) ; printf ( <str> , ans ) ; min = INF ; } return <int> ; }", "label": 1, "id": 3760}
{"input": "void fun ( long * , long * , long * ) ; int main ( ) { int t , i = <int> ; long n , a [ <int> ] , g , j = <int> , k = <int> ; long long cost = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; j = <int> ; k = <int> ; while ( j < n && k < n ) { if ( a [ k ] > a [ j ] ) { g = a [ j ] ; fun ( & a , & n , & k ) ; } else { g = a [ k ] ; fun ( & a , & n , & j ) ; } cost = cost + ( long long ) g ; } printf ( <str> , cost ) ; cost = <int> ; } return <int> ; } void fun ( long * p , long * q , long * r ) { long i = <int> ; for ( i = * r ; i < * q - <int> ; i ++ ) * ( p + i ) = * ( p + i + <int> ) ; * q = * q - <int> ; }", "label": 2, "id": 3761}
{"input": "int main ( ) { int numberOfLines , j , i , k , numberOfInputs , content , sum = <int> , max ; scanf ( <str> , & numberOfInputs ) ; for ( k = <int> ; k < numberOfInputs ; k ++ ) { sum = <int> ; scanf ( <str> , & numberOfLines ) ; for ( i = <int> ; i < numberOfLines ; i ++ ) { max = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & content ) ; if ( max < content ) { max = content ; } } sum += max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3762}
{"input": "main ( ) { int t , n , i , j ; long long int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 2, "id": 3763}
{"input": "int main ( ) { int t ; long int k , a , b , j , i ; scanf ( <str> , & t ) ; while ( t -- ) { k = <int> ; scanf ( <str> , & a , & b ) ; i = b ; while ( i > <int> ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) break ; i -- ; } printf ( <str> , i , a * b / i ) ; } return <int> ; }", "label": 2, "id": 3764}
{"input": "int main ( ) { int T , A , B , i , HCF , LCM ; printf ( <str> ) ; scanf ( <str> , & T ) ; while ( T -- ) { printf ( <str> ) ; scanf ( <str> , & A ) ; printf ( <str> ) ; scanf ( <str> , & B ) ; for ( i = <int> ; i <= A && i <= B ; i ++ ) { if ( A % i == <int> && B % i == <int> ) HCF = i ; } LCM = ( A * B ) / HCF ; printf ( <str> , HCF , LCM ) ; } return <int> ; }", "label": 1, "id": 3765}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( void ) { long long test , a , b ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & a , & b ) ; long long m = gcd ( a , b ) ; long long l = lcm ( a , b ) ; printf ( <str> , m , l ) ; } }", "label": 1, "id": 3766}
{"input": "int main ( ) { int a , b , t , i , g , l , r , n , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } g = d ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3767}
{"input": "int main ( ) { int t , a , b , l , m , r = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; l = a ; m = b ; while ( r != <int> ) { r = l % m ; l = m ; m = r ; } printf ( <str> , l , a * b ) ; r = <int> ; } }", "label": 1, "id": 3768}
{"input": "int a [ <int> ] [ <int> ] = { <int> } ; int max ( int a , int b ) { return a > b ? a : b ; } int calc ( int i , int j , int n ) { if ( i > n || j > n ) { return <int> ; } return max ( a [ i ] [ j ] + calc ( i + <int> , j , n ) , a [ i ] [ j ] + calc ( i + <int> , j + <int> , n ) ) ; } int main ( ) { int t = <int> ; int i = <int> ; int j = <int> ; int n = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , calc ( <int> , <int> , n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 3769}
{"input": "int main ( void ) { int a , b , l , g ; unsigned int j , i , t ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; l = a * b ; a = a > <int> ? a : - a ; b = b > <int> ? b : - b ; for ( j = <int> ; j <= a && j <= b ; j ++ ) { if ( j % a == <int> && j % b == <int> ) g = j ; } printf ( <str> , g , l / g ) ; } return <int> ; }", "label": 1, "id": 3770}
{"input": "int a [ <int> ] [ <int> ] = { <int> } ; int max ( int i , int j , int n ) { if ( i == n ) return a [ i ] [ j ] ; else { int sum1 = max ( i + <int> , j , n ) ; int sum2 = max ( i + <int> , j + <int> , n ) ; if ( sum1 > sum2 ) return ( a [ i ] [ j ] + sum1 ) ; else return ( a [ i ] [ j ] + sum2 ) ; } } int main ( void ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; int sum = max ( <int> , <int> , n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 3771}
{"input": "int GCD ( int a , int b ) { if ( b == <int> ) return a ; return GCD ( b , a % b ) ; } int main ( ) { int i , a , b , t , gcd ; scanf ( <str> , & t ) ; long long int pro ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd = GCD ( a , b ) ; pro = a * b ; pro = ( pro ) / gcd ; printf ( <str> , gcd , pro ) ; } return <int> ; }", "label": 1, "id": 3772}
{"input": "int n ; long int max ( long int a , long int b ) { if ( a > b ) return a ; else return b ; } long int <unk> ( long int a [ n ] [ n ] , long int b [ n ] [ n ] , long int i , long int j ) { if ( j == <int> ) return b [ i ] [ j ] ; else if ( i == j ) return b [ i ] [ j ] ; return ( a [ i ] [ j ] + max ( <unk> ( a , b , i - <int> , j ) , <unk> ( a , b , i - <int> , j - <int> ) ) ) ; } int main ( ) { long int i , j , k , ans = <int> ; scanf ( <str> , & n ) ; long int a [ n ] [ n ] , b [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } while ( j < n ) { a [ i ] [ j ] = <int> ; j ++ ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { b [ i ] [ <int> ] = a [ i ] [ <int> ] + b [ i - <int> ] [ <int> ] ; } for ( i = <int> ; i < n ; i ++ ) { b [ i ] [ i ] = a [ i ] [ i ] + b [ i - <int> ] [ i - <int> ] ; } for ( k = <int> ; k < n ; k ++ ) { b [ n - <int> ] [ k ] = <unk> ( a , b , n - <int> , k ) ; } for ( k = <int> ; k < n ; k ++ ) { ans = max ( b [ n - <int> ] [ k ] , ans ) ; } printf ( <str> , ans ) ; return <int> ; }", "label": 3, "id": 3773}
{"input": "int sun ( int , int , int ) ; int arr [ <int> ] [ <int> ] ; int main ( ) { int t , n , i , j , k , val ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } printf ( <str> , sum ( <int> , <int> , n ) ) ; } return ( <int> ) ; } int sum ( int j , int k , int n ) { int s1 , s2 ; if ( j == n - <int> ) return ( arr [ j ] [ k ] ) ; else { s1 = arr [ j ] [ k ] + sum ( j + <int> , k , n ) ; s2 = arr [ j ] [ k ] + sum ( j + <int> , k + <int> , n ) ; return ( s1 > s2 ? s1 : s2 ) ; } }", "label": 2, "id": 3774}
{"input": "int main ( void ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { unsigned int m , i ; scanf ( <str> , & m ) ; i = m - <int> ; long int q1 , q2 ; scanf ( <str> , & q1 ) ; while ( i -- ) { scanf ( <str> , & q2 ) ; if ( q1 > q2 ) { q1 = q2 ; } } printf ( <str> , q1 * ( m - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3775}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ n + <int> ] ; int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } long int ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } }", "label": 0, "id": 3776}
{"input": "int maxab ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int r , m , c , i , j ; int s [ <int> ] [ <int> ] ; scanf ( <str> , & c ) ; while ( c -- ) { scanf ( <str> , & r ) ; scanf ( <str> , & s [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < r ; i ++ ) { s [ i - <int> ] [ <int> ] = <int> ; s [ i - <int> ] [ i + <int> ] = <int> ; for ( j = <int> ; j <= i + <int> ; j ++ ) { scanf ( <str> , & s [ i ] [ j ] ) ; s [ i ] [ j ] += maxab ( s [ i - <int> ] [ j - <int> ] , s [ i - <int> ] [ j ] ) ; } } m = s [ r - <int> ] [ <int> ] ; for ( i = <int> ; i <= r ; i ++ ) m = maxab ( m , s [ r - <int> ] [ i ] ) ; printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 3777}
{"input": "int main ( ) { int gcd ( int x , int y ) ; int lcm ( int p , int q ) ; int n , f , s , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & f , & s ) ; printf ( <str> , gcd ( f , s ) , lcm ( f , s ) ) ; } return <int> ; } int gcd ( int x , int y ) { int z ; if ( x > y ) { while ( z != <int> ) { z = x % y ; if ( z == <int> ) { return y ; } x = y ; y = z ; } } else { while ( z != <int> ) { z = y % x ; if ( z == <int> ) { return x ; } y = x ; x = z ; } } } int lcm ( int p , int q ) { int i ; if ( p > q ) { for ( i = <int> ; i <= q ; i ++ ) { if ( q % i == <int> && p % i == <int> ) { return i ; break ; } } } else { for ( i = <int> ; i <= p ; i ++ ) { if ( q % i == <int> && p % i == <int> ) { return i ; break ; } } } return ( p * q ) ; }", "label": 1, "id": 3778}
{"input": "int main ( ) { int test_case ; long long int n , count , sum , i ; scanf ( <str> , & test_case ) ; while ( test_case -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; count = <int> ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) { count ++ ; } else { sum = sum + ( count * ( count + <int> ) / <int> ) ; count = <int> ; } } sum = sum + ( count * ( count + <int> ) / <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 3779}
{"input": "int main ( ) { int t , n , a [ <int> ] , c , s , i , k , x , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; c = <int> ; s = <int> ; for ( x = <int> ; x < n ; x ++ ) { scanf ( <str> , & a [ x ] ) ; c ++ ; } k = c ; while ( k > <int> ) { for ( i = <int> ; i < k ; i ++ ) { c = <int> ; if ( a [ i ] != a [ i + <int> ] ) { if ( a [ i ] > a [ i + <int> ] ) { s = s + a [ i + <int> ] ; for ( j = i ; j < k - <int> ; j ++ ) { a [ j ] = a [ j + <int> ] ; c ++ ; } } else { s = s + a [ i ] ; for ( j = i + <int> ; j < k - <int> ; j ++ ) { a [ j ] = a [ j + <int> ] ; c ++ ; } } k = c ; } } } printf ( <str> , s ) ; } return <int> ; }", "label": 3, "id": 3780}
{"input": "int main ( ) { int i , j , a [ <int> ] [ <int> ] , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3781}
{"input": "int main ( ) { int t , n , curr , curi , sum , * arr , * crr , i , a , b , c , d , e , ap ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; ap = ( n * ( n + <int> ) ) / <int> ; arr = ( int * ) calloc ( ap * n , sizeof ( int ) ) ; crr = arr ; i = <int> ; sum = <int> ; curr = <int> ; curi = <int> ; while ( ( i ++ ) <= ap ) { scanf ( <str> , & ( * crr ) ) ; crr ++ ; } while ( <int> ) { sum = sum + arr [ curi ] ; if ( curr < ( n - <int> ) ) { a = arr [ curi + curr ] ; b = arr [ curi + curr + <int> ] ; c = arr [ curi + curr + curr + <int> ] ; d = arr [ curi + curr + curr + <int> ] ; e = arr [ curi + curr + curr + <int> ] ; if ( ( ( a > b ) && ( ( a + c ) > ( b + e ) ) ) || ( ( a < b ) && ( ( a + c ) > ( b + d ) ) && ( ( a + c ) > ( b + e ) ) ) ) { curi = curi + curr ; curr ++ ; } else { curi = curi + curr + <int> ; curr ++ ; } } else if ( curr == ( n - <int> ) ) { a = arr [ curi + curr ] ; b = arr [ curi + curr + <int> ] ; if ( a > b ) { curi = curi + curr ; curr ++ ; } else { curi = curi + curr + <int> ; curr ++ ; } } else break ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 3782}
{"input": "int maximum ( int * * s , int row , int col ) { int i , j , m [ row ] [ col ] ; for ( i = <int> ; i < row ; ++ i ) { for ( j = <int> ; j < row ; ++ j ) { m [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) m [ i ] [ j ] = s [ i ] [ j ] ; else if ( j == <int> ) m [ i ] [ j ] = m [ i - <int> ] [ j ] + s [ i ] [ j ] ; else if ( m [ i - <int> ] [ j ] > m [ i - <int> ] [ j - <int> ] ) m [ i ] [ j ] = m [ i - <int> ] [ j ] + s [ i ] [ j ] ; else m [ i ] [ j ] = m [ i - <int> ] [ j - <int> ] + s [ i ] [ j ] ; } } for ( i = <int> ; i < row ; ++ i ) { for ( j = <int> ; j < row ; ++ j ) { } } int max = <int> ; for ( i = <int> ; i < row ; ++ i ) { if ( m [ row - <int> ] [ i ] > max ) max = m [ row - <int> ] [ i ] ; } return max ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , * p [ <int> ] , * * pf ; scanf ( <str> , & n ) ; int s [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { s [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & s [ i ] [ j ] ) ; } p [ i ] = s [ i ] ; } pf = p ; int sum = maximum ( ( int * * ) pf , n , n ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 3783}
{"input": "main ( ) { int N , n = <int> , t , m , a , sum = <int> , large = - <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & N ) ; while ( N -- ) { m = n ; while ( m > <int> ) { scanf ( <str> , & a ) ; if ( a > large ) { large = a ; } m -- ; } sum += large ; n ++ ; } printf ( <str> , sum ) ; sum = <int> ; large = - <int> ; m = n = <int> ; } return <int> ; }", "label": 1, "id": 3784}
{"input": "int main ( ) { long long t , n , x , y , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & y ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; y = ( y > x ? x : y ) ; } i -- ; printf ( <str> , y * i ) ; } return <int> ; }", "label": 0, "id": 3785}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int arr [ size ] ; int i , min ; for ( i = <int> ; i < size ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < size ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } min = min * ( size - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 1, "id": 3786}
{"input": "int main ( void ) { int test ; long int n , cnt , i , a [ <int> ] ; scanf ( <str> , & test ) ; long int min ; long long ans ; while ( test -- ) { min = <int> ; cnt = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { cnt = <int> ; min = a [ i ] ; } else if ( a [ i ] == min ) { cnt ++ ; } } ans = ( n - cnt ) * min ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 3787}
{"input": "long gcd ( long m , long n ) { int r = m % n ; if ( r == <int> ) { return n ; } else { return gcd ( n , r ) ; } } int main ( ) { int T ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; i ++ ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int x = gcd ( a , b ) ; long long int y = a * b / x ; printf ( <str> , x , y ) ; } }", "label": 0, "id": 3788}
{"input": "int main ( void ) { int T ; scanf ( <str> , & T ) ; while ( T > <int> ) { int A , B , R , <unk> , <unk> , LCM , GCD ; scanf ( <str> , & A , & B ) ; if ( A > B ) { <unk> = A ; <unk> = B ; } else { <unk> = B ; <unk> = A ; } R = <unk> % <unk> ; while ( R != <int> ) { <unk> = <unk> ; <unk> = R ; R = <unk> % <unk> ; } GCD = <unk> ; LCM = A * B / GCD ; printf ( <str> , GCD , LCM ) ; T -- ; } }", "label": 1, "id": 3789}
{"input": "hcf ( a , b ) { if ( a % b == <int> ) return b ; return hcf ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = hcf ( a , b ) ; int lcm = ( ( int ) a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 3790}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; long long int a , b ; long long ans1 , ans2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; ans1 = gcd ( a , b ) ; ans2 = ( a * b ) / ans1 ; printf ( <str> , ans1 , ans2 ) ; } }", "label": 0, "id": 3791}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int A , B , i , ans = <int> , k ; scanf ( <str> , & A , & B ) ; if ( A > B ) k = B ; else k = A ; for ( i = A - <int> ; i >= <int> ; i -- ) { if ( A % i == <int> && B % i == <int> ) break ; } printf ( <str> , i ) ; printf ( <str> , i * ( A / i ) * ( B / i ) ) ; } return <int> ; }", "label": 2, "id": 3792}
{"input": "int tri [ <int> ] [ <int> ] ; int max ( int x , int y ) { return x > y ? x : y ; } int main ( ) { int num_tests , nrows , i , j , k ; scanf ( <str> , & num_tests ) ; for ( i = <int> ; i < num_tests ; i ++ ) { scanf ( <str> , & nrows ) ; for ( j = <int> ; j < nrows ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & tri [ j ] [ k ] ) ; } } for ( j = nrows - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= i ; k ++ ) tri [ j ] [ k ] = tri [ j ] [ k ] + max ( tri [ j + <int> ] [ k ] , tri [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , tri [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 3793}
{"input": "int main ( ) { int testCases , sizeData , itrInner , itrOuter , max = <int> , addThis ; int data [ MAX ] [ MAX ] ; int maxPath [ MAX ] [ MAX ] ; scanf ( <str> , & testCases ) ; while ( testCases -- ) { scanf ( <str> , & sizeData ) ; for ( itrInner = <int> ; itrInner < sizeData ; itrInner ++ ) { for ( itrOuter = <int> ; itrOuter <= itrInner ; itrOuter ++ ) { scanf ( <str> , & data [ itrInner ] [ itrOuter ] ) ; } } max = <int> ; for ( itrInner = <int> ; itrInner < sizeData ; itrInner ++ ) { for ( itrOuter = <int> ; itrOuter <= itrInner ; itrOuter ++ ) { if ( itrInner != <int> && itrOuter != <int> ) { addThis = ( maxPath [ itrInner - <int> ] [ itrOuter ] >= maxPath [ itrInner - <int> ] [ itrOuter - <int> ] ) ? maxPath [ itrInner - <int> ] [ itrOuter ] : maxPath [ itrInner - <int> ] [ itrOuter - <int> ] ; } else if ( itrInner == <int> && itrOuter == <int> ) addThis = <int> ; else if ( itrInner != <int> && itrOuter == <int> ) { addThis = maxPath [ itrInner - <int> ] [ itrOuter ] ; } maxPath [ itrInner ] [ itrOuter ] = data [ itrInner ] [ itrOuter ] + addThis ; } } for ( itrInner = <int> ; itrInner < sizeData ; itrInner ++ ) { if ( max < maxPath [ sizeData - <int> ] [ itrInner ] ) max = maxPath [ sizeData - <int> ] [ itrInner ] ; } printf ( <str> , max ) ; } }", "label": 1, "id": 3794}
{"input": "int a [ <int> ] [ <int> ] ; int l ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & l ) ; for ( i = <int> ; i <= l - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = <int> ; scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + max ( a [ i ] [ j ] , a [ i ] [ j - <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t = t - <int> ; } return <int> ; }", "label": 0, "id": 3795}
{"input": "int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int s ( int i , int j ) { if ( b [ i ] [ j ] == - <int> ) b [ i ] [ j ] = a [ i ] [ j ] + max ( s ( i + <int> , j ) , s ( i + <int> , j + <int> ) ) ; return b [ i ] [ j ] ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = ( i == n - <int> ) ? a [ i ] [ j ] : - <int> ; } } printf ( <str> , s ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 3796}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , n , a [ <int> ] , s = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int j = <int> ; for ( i = j ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { s = s + a [ i ] ; j = i + <int> ; } else { s = s + a [ i + <int> ] ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 3797}
{"input": "int main ( void ) { int tc , a , b , i , hcf , lcm , min , j ; scanf ( <str> , & tc ) ; for ( i = <int> ; i < tc ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; min = a > b ? b : a ; hcf = <int> ; for ( j = min ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> && hcf % j != <int> ) hcf = hcf * j ; if ( ( j == min || ( a * b ) % j == <int> ) && a % j == <int> && b % j == <int> ) break ; } lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 3798}
{"input": "int main ( ) { int t , j , i , small , k ; long int sum ; scanf ( <str> , & t ) ; int n ; for ( j = <int> ; j <= t ; j ++ ) { scanf ( <str> , & n ) ; int a [ <int> ] = { } ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } small = a [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( small >= a [ k ] ) small = a [ k ] ; } n -- ; sum = small * n ; printf ( <str> , sum ) ; } }", "label": 0, "id": 3799}
{"input": "int cache [ <int> ] [ <int> ] ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int solve ( int ln , int i , int j , int arr [ ] [ <int> ] ) { int t , t1 , t2 ; if ( i > ln ) return <int> ; if ( cache [ i ] [ j ] >= <int> ) { return cache [ i ] [ j ] ; } t1 = solve ( ln , i + <int> , j , arr ) ; t2 = solve ( ln , i + <int> , j + <int> , arr ) ; t = max ( t1 , t2 ) + arr [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int x , y ; int n , ln ; short int i , j ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & ln ) ; for ( i = <int> ; i < ln ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( x = <int> ; x < ln ; x ++ ) { for ( y = <int> ; y <= x ; y ++ ) { cache [ x ] [ y ] = - <int> ; } } printf ( <str> , solve ( ln , <int> , <int> , arr ) ) ; } return <int> ; }", "label": 0, "id": 3800}
{"input": "int Calculate ( long long int * , long long int ) ; int main ( ) { long long int a [ <int> ] ; long long int i , t , n , j , count ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; count = Calculate ( a , n ) ; printf ( <str> , count ) ; } return <int> ; } int Calculate ( long long int * a , long long int n ) { int i , count = <int> , sum = <int> , temp = <int> , j , b [ <int> ] ; b [ temp ] = - <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { temp ++ ; b [ temp ] = i ; } } temp = temp + <int> ; b [ temp ] = i - <int> ; for ( i = <int> ; i <= temp ; i ++ ) { sum = b [ i ] - b [ i - <int> ] ; count += ( sum * ( sum + <int> ) ) / <int> ; } return count ; }", "label": 0, "id": 3801}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( long int n , long int m ) { if ( m == <int> ) return n ; if ( n == <int> ) return m ; else return gcd ( m , n % m ) ; }", "label": 0, "id": 3802}
{"input": "int sum ( int ) ; int main ( ) { int t , n , arr [ <int> ] = { } , i , j , count ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { j = <int> ; while ( ( arr [ i ] <= arr [ i + <int> ] ) && ( i + <int> < n ) ) { i ++ ; j ++ ; } count += sum ( j ) ; } printf ( <str> , count ) ; } return <int> ; } int sum ( int n ) { int i , s = <int> ; for ( i = <int> ; i <= n ; i ++ ) s += i ; return s ; }", "label": 0, "id": 3803}
{"input": "long long int gcd ( long long int x , long long int y ) { if ( x == y ) return ( x ) ; else { if ( x > y ) return ( gcd ( x - y , y ) ) ; else return ( gcd ( x , y - x ) ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int x , y , z ; scanf ( <str> , & x , & y ) ; z = gcd ( x , y ) ; printf ( <str> , z , ( x * y ) / z ) ; } return ( <int> ) ; }", "label": 0, "id": 3804}
{"input": "int main ( ) { int i , j , l = <int> , n , r , p = <int> , c , t [ <int> ] = { <int> } , a [ <int> ] = { <int> } , sum [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> , c = <int> ; i <= r ; i ++ ) { c += i ; if ( i != r ) { p *= <int> ; a [ i ] = i - <int> ; } } for ( i = <int> ; i <= c ; i ++ ) scanf ( <str> , & t [ i ] ) ; for ( i = <int> ; i <= p ; i ++ ) { sum [ i ] = t [ <int> ] ; for ( j = <int> , c = <int> ; j <= r - <int> ; j ++ ) { c += a [ j ] + <int> ; sum [ i ] += t [ c ] ; if ( l < sum [ i ] ) l = sum [ i ] ; } j -- ; while ( a [ j ] == j ) j -- ; a [ j ++ ] ++ ; while ( j <= r - <int> ) a [ j ++ ] -- ; } printf ( <str> , l ) ; } return <int> ; }", "label": 3, "id": 3805}
{"input": "int main ( ) { int t , n , a [ max ] [ max ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3806}
{"input": "int T ; int A [ <int> ] [ <int> ] ; int compute ( int A [ ] [ <int> ] , int n ) { int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { A [ i ] [ j ] += ( A [ i + <int> ] [ j ] > A [ i + <int> ] [ j + <int> ] ) ? A [ i + <int> ] [ j ] : A [ i + <int> ] [ j + <int> ] ; } } return A [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k ; scanf ( <str> , & T ) ; int n ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & A [ j ] [ k ] ) ; } printf ( <str> , compute ( A , n ) ) ; } return <int> ; }", "label": 0, "id": 3807}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int N ; scanf ( <str> , & N ) ; int a [ <int> ] ; int i , j ; for ( i = <int> ; i <= N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int count = <int> ; for ( i = <int> ; i <= N ; i ++ ) { for ( j = i ; j = i + <int> ; j ++ ) { if ( ( a [ i ] == a [ j ] ) || ( a [ i ] < a [ j + <int> ] ) ) { count ++ ; } } } printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 3808}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int i , j ; for ( i = <int> ; i < t ; i ++ ) { int a , b ; int lcm , gcd ; scanf ( <str> , & a , & b ) ; int mx = ( a > b ) ? a : b ; int mn = ( a > b ) ? b : a ; if ( mx % mn == <int> ) { lcm = mx ; } else { for ( j = <int> ; j <= mn ; j ++ ) { lcm = j * mx ; if ( lcm % mn == <int> ) break ; } } gcd = <int> ; for ( j = <int> ; j <= mn ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 3809}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int m , n ; scanf ( <str> , & m , & n ) ; printf ( <str> , gcd ( m , n ) ) ; printf ( <str> , ( m * n ) / gcd ( m , n ) ) ; } return <int> ; }", "label": 0, "id": 3810}
{"input": "int main ( ) { int a , b , g , l , m , n , r , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n != <int> ) { r = m % n ; m = n ; n = r ; if ( n == <int> ) { g = m ; break ; } } l = ( ( a * b ) / g ) ; printf ( <str> , g , l ) ; t -- ; } return <int> ; }", "label": 1, "id": 3811}
{"input": "int main ( ) { int i , j , T , N , A [ <int> ] , temp , count ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & A [ i ] ) ; count = <int> ; for ( i = <int> ; i < N ; i ++ ) { if ( A [ i ] < A [ <int> ] ) { temp = A [ i ] ; A [ i ] = A [ <int> ] ; A [ <int> ] = temp ; count = <int> ; } else if ( A [ i ] == A [ <int> ] ) { count ++ ; } } printf ( <str> , ( N - count ) * A [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3812}
{"input": "int main ( ) { long long int t , i , num1 , num2 , j , multi ; scanf ( <str> , & t ) ; double lc [ t ] , hc [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; for ( j = <int> ; j > <int> ; j ++ ) { multi = num1 * j ; if ( multi % num2 == <int> ) break ; } lc [ i ] = multi ; hc [ i ] = num1 * num2 / multi ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , hc [ i ] , lc [ i ] ) ; return <int> ; }", "label": 2, "id": 3813}
{"input": "int main ( ) { int t , T ; scanf ( <str> , & T ) ; for ( t = <int> ; t < T ; t ++ ) { int N , i , j ; scanf ( <str> , & N ) ; int dp [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & dp [ i ] [ j ] ) ; for ( i = N - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { dp [ i ] [ j ] += dp [ i + <int> ] [ j ] > dp [ i + <int> ] [ j + <int> ] ? dp [ i + <int> ] [ j ] : dp [ i + <int> ] [ j + <int> ] ; } printf ( <str> , dp [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3814}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , i = <int> , j = <int> ; scanf ( <str> , & n ) ; long long int ar [ n ] ; long long int ns = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ar [ i ] ) ; int counter = <int> ; long int pos = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( counter == <int> ) { counter = <int> ; j = pos + <int> ; } else j = i ; for ( ; j < n ; j ++ ) { if ( ar [ j ] >= ar [ pos ] ) { counter = <int> ; pos = j ; } else break ; } if ( counter == <int> ) { int temp = pos - i ; ns += ( temp * temp + <int> ) / <int> ; } } printf ( <str> , ns ) ; } return <int> ; }", "label": 1, "id": 3815}
{"input": "int main ( ) { long long int t , n , c , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int arr [ n ] ; scanf ( <str> , & arr [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( min > arr [ i ] ) min = arr [ i ] ; } c = min * ( n - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 3816}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] , count = <int> , i ; long long int ans = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) count ++ ; else { ans += count * ( count + <int> ) / <int> ; count = <int> ; } } ans += count * ( count + <int> ) / <int> ; ans += n ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 3817}
{"input": "int main ( ) { int t , n , i , j , k , l , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k < i ; k ++ ) { if ( a [ i ] [ k ] < a [ i ] [ k + <int> ] ) l = <int> ; else l = <int> ; a [ i - <int> ] [ k ] = a [ i - <int> ] [ k ] + a [ i ] [ k + l ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3818}
{"input": "int main ( void ) { int n , i , j , s ; long long int a , sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & s ) ; for ( j = <int> ; j < ( s * ( s + <int> ) ) / <int> ; j ++ ) { scanf ( <str> , & a ) ; sum += a ; } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 3819}
{"input": "main ( ) { int A , B , gcd , lcm , rem , T , nr , dr , i ; scanf ( <str> , & T ) ; for ( i = <int> ; T != <int> ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { nr = A ; dr = B ; } else { nr = B ; dr = A ; } rem = nr % dr ; while ( rem != <int> ) { nr = dr ; dr = rem ; rem = nr % dr ; } gcd = dr ; lcm = A * B / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; T -- ; } return <int> ; }", "label": 2, "id": 3820}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t , i , k , l ; scanf ( <str> , & t ) ; int a [ t ] , b [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { k = gcd ( a [ i ] , b [ i ] ) ; l = lcm ( a [ i ] , b [ i ] ) ; printf ( <str> , k , l ) ; } return <int> ; } int gcd ( int a , int b ) { int c , d ; c = a < b ? a : b ; d = a > b ? a : b ; if ( d % c == <int> ) return c ; else return gcd ( c , d % c ) ; } int lcm ( int a , int b ) { int i , c ; c = a > b ? a : b ; for ( i = c ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) break ; } return i ; }", "label": 2, "id": 3821}
{"input": "int main ( ) { int numTests = <int> , num1 = <int> , num2 = <int> , i = <int> , j = <int> , gcd = <int> , lcm = <int> ; static int gcds [ MAX ] , lcms [ MAX ] ; scanf ( <str> , & numTests ) ; for ( j = <int> ; j < numTests ; j ++ ) { scanf ( <str> , & num1 , & num2 ) ; while ( i <= num1 && i <= num2 ) { if ( num1 % i == <int> && num2 % i == <int> ) gcd = i ; i ++ ; } lcm = num1 * num2 / gcd ; gcds [ j ] = gcd ; lcms [ j ] = lcm ; } for ( i = <int> ; i < numTests ; i ++ ) printf ( <str> , gcds [ i ] , lcms [ i ] ) ; }", "label": 3, "id": 3822}
{"input": "unsigned int triangle_sums ( unsigned int num_lines ) { static unsigned int ar [ <int> ] ; unsigned int i , col , cur ; unsigned int max = <int> ; for ( i = <int> ; i < num_lines ; i ++ ) { ar [ i ] = <int> ; } for ( i = <int> ; i <= num_lines ; i ++ ) { for ( col = <int> ; col < i ; col ++ ) { scanf ( <str> , & cur ) ; ar [ col ] += cur ; if ( ar [ col ] > max ) { max = ar [ col ] ; } } for ( col = i ; col > <int> ; col -- ) { if ( ar [ col - <int> ] > ar [ col ] ) { ar [ col ] = ar [ col - <int> ] ; } } } return max ; } int main ( ) { unsigned int num_test_cases ; unsigned int num_tri_lines ; if ( scanf ( <str> , & num_test_cases ) != <int> ) { return <int> ; } for ( ; num_test_cases > <int> ; num_test_cases -- ) { if ( scanf ( <str> , & num_tri_lines ) != <int> ) { return <int> ; } printf ( <str> , triangle_sums ( num_tri_lines ) ) ; } return <int> ; }", "label": 0, "id": 3823}
{"input": "int main ( ) { int j , i , n1 , n2 , gcd , lcm , t ; scanf ( <str> , t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 && i <= n2 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 3, "id": 3824}
{"input": "int main ( ) { int t , n , i , j , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] += arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] += arr [ i ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 1, "id": 3825}
{"input": "void gcd ( long x , long y ) { int j ; long result = <int> ; for ( j = <int> ; j <= y ; j ++ ) { while ( x / j == <int> && y / j == <int> ) { result = result * j ; x %= j ; y %= j ; } } if ( x != y ) printf ( <str> , result , result * x * y ) ; else printf ( <str> , result , result ) ; } int main ( ) { int t , i ; long a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd ( a , b ) ; } return <int> ; }", "label": 2, "id": 3826}
{"input": "int main ( ) { int i , i1 , s , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { s = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & a [ i ] [ j ] ) ; } j = <int> ; for ( i1 = <int> ; i1 < n ; ++ i1 ) { s += a [ i1 ] [ j ] ; if ( i1 != n - <int> ) { if ( a [ i1 + <int> ] [ j + <int> ] > a [ i1 + <int> ] [ j ] ) j += <int> ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 3827}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { long long int x , y , l = <int> , g = <int> ; scanf ( <str> , & x , & y ) ; g = gcd ( x , y ) ; l = ( x * y ) / gcd ( x , y ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 3828}
{"input": "long long int a [ <int> ] [ <int> ] , k , c [ <int> ] [ <int> ] ; long long int f ( int i , int j ) { long long int sum , m1 , m2 ; if ( i < k ) { if ( ! c [ i ] [ j ] ) { m1 = f ( i + <int> , j ) ; m2 = f ( i + <int> , j + <int> ) ; sum = a [ i ] [ j ] + MAX ( m1 , m2 ) ; c [ i ] [ j ] = sum ; } return c [ i ] [ j ] ; } else return <int> ; } int main ( ) { long long int i , ii , j , l ; scanf ( <str> , & i ) ; while ( i -- ) { scanf ( <str> , & k ) ; for ( j = <int> ; j < k ; j ++ ) { for ( l = <int> ; l <= j ; l ++ ) { scanf ( <str> , & a [ j ] [ l ] ) ; c [ i ] [ j ] = <int> ; } } printf ( <str> , f ( <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 3829}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) { return <int> ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; } int main ( void ) { long long int a , b ; int t ; long long int g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g ) ; printf ( <str> , ( a * b ) / ( g ) ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 3830}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int u ; for ( u = <int> ; u < t ; u ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; int b [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { a [ i ] [ j ] = <int> ; b [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { b [ i ] [ <int> ] = b [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( b [ i - <int> ] [ j ] >= b [ i - <int> ] [ j - <int> ] ) { b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } } } int max = b [ n - <int> ] [ n - <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( b [ n - <int> ] [ i ] > max ) { max = b [ n - <int> ] [ i ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3831}
{"input": "int sum ( int a [ ] [ <int> ] , int n , int i ) { if ( n > <int> && i > <int> && i < n ) { int sum1 , sum2 ; sum1 = a [ n ] [ i ] + sum ( a , n - <int> , i ) ; sum2 = a [ n ] [ i ] + sum ( a , n - <int> , i - <int> ) ; if ( sum1 > sum2 ) return sum1 ; else return sum2 ; } if ( n > <int> && i == <int> ) return ( a [ n ] [ <int> ] + sum ( a , n - <int> , i ) ) ; if ( n > <int> && i == n ) return ( a [ n ] [ n ] + sum ( a , n - <int> , i - <int> ) ) ; if ( n == <int> && i == <int> ) return a [ <int> ] [ <int> ] ; } main ( ) { int t , n , j , i , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } int max = <int> , val ; for ( i = <int> ; i < n ; i ++ ) { val = sum ( a , n - <int> , i ) ; if ( max < val ) max = val ; } printf ( <str> , max ) ; } }", "label": 2, "id": 3832}
{"input": "int main ( ) { long int n1 , n2 , x , y , lcm ; int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } lcm = ( x * y ) / n1 ; printf ( <str> , n1 , lcm ) ; } }", "label": 1, "id": 3833}
{"input": "int main ( ) { int count ; int i , N ; int min ; int a ; int cost ; scanf ( <str> , & count ) ; while ( count -- ) { scanf ( <str> , & N ) ; min = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) { min = a ; } } if ( N == <int> ) { cost = min ; } else cost = min * ( N - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 3834}
{"input": "main ( ) { int a , b , n , i , max , l ; scanf ( <str> , & n ) ; while ( n > <int> ) { max = <int> ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { max = i ; } } printf ( <str> , max ) ; l = ( a * b ) / max ; printf ( <str> , l ) ; n -- ; } }", "label": 2, "id": 3835}
{"input": "int max ( a , b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , r , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; int array [ r ] [ r ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } for ( i = ( r - <int> ) ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { array [ i - <int> ] [ j - <int> ] += max ( array [ i ] [ j - <int> ] , array [ i ] [ j ] ) ; } } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3836}
{"input": "int main ( ) { int t , a , b , G , L , min ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; if ( a <= b ) min = a ; else min = b ; int i ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) G = i ; } L = ( a * b ) / G ; printf ( <str> , G , L ) ; t -- ; } return <int> ; }", "label": 1, "id": 3837}
{"input": "int main ( ) { int t , n , arr [ <int> ] , i , j , max , x ; long long sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; sum = <int> ; max = arr [ <int> ] ; x = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( arr [ i ] >= max ) { sum += x + <int> ; x ++ ; max = arr [ i ] ; } else { x = <int> ; max = arr [ i ] ; sum += <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 3838}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , n ; int tc ; scanf ( <str> , & tc ) ; while ( ( tc ) > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( i = <int> ; i < n ; i ++ ) { if ( a [ j + <int> ] [ i ] > a [ j + <int> ] [ i + <int> ] ) { a [ j ] [ i ] += a [ j + <int> ] [ i ] ; } else { a [ j ] [ i ] += a [ j + <int> ] [ i + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; tc -- ; } return <int> ; }", "label": 0, "id": 3839}
{"input": "int main ( int argc , char * * argv ) { int prev_row [ <unk> ] ; int <unk> ; scanf ( <str> , & <unk> ) ; getchar ( ) ; for ( ; <unk> != <int> ; <unk> -- ) { int row_count ; scanf ( <str> , & row_count ) ; getchar ( ) ; int row_number ; for ( row_number = <int> ; row_number < row_count ; row_number ++ ) { prev_row [ row_number ] = <int> ; int prev_left ; { int item ; scanf ( <str> , & item ) ; getchar ( ) ; prev_left = prev_row [ <int> ] ; prev_row [ <int> ] = prev_left + item ; } int <unk> ; for ( <unk> = <int> ; <unk> <= row_number ; <unk> ++ ) { int item ; scanf ( <str> , & item ) ; getchar ( ) ; int <unk> = prev_row [ <unk> ] ; prev_row [ <unk> ] = ( prev_left > <unk> ? prev_left : <unk> ) + item ; prev_left = <unk> ; } } int <unk> ; int max = <int> ; for ( <unk> = <int> ; <unk> != row_count ; <unk> ++ ) { int item = prev_row [ <unk> ] ; if ( item > max ) max = item ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3840}
{"input": "int input ( ) { char c = get ( ) ; int n = <int> ; while ( c < <char> || c > <char> ) c = get ( ) ; while ( c >= <char> && c <= <char> ) { n = ( n << <int> ) + ( n << <int> ) + ( c & <int> ) ; c = get ( ) ; } return n ; } int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , a , b ; t = input ( ) ; while ( t -- ) { a = input ( ) ; b = input ( ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 3841}
{"input": "int cmpfunc ( const void * a , const void * b ) { return * ( int * ) a - * ( int * ) b ; } int main ( ) { long long int n , a [ <int> ] , t , c , l , i , j , p = <int> ; ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; p = <int> ; l = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; if ( n == <int> ) c = <int> ; else { for ( i = <int> ; i < n ; i ++ ) { l = i ; while ( a [ l + <int> ] > a [ l ] ) l ++ ; if ( l > i ) c ++ ; if ( l == n - <int> ) break ; } qsort ( a , n , sizeof ( long long int ) , cmpfunc ) ; for ( i = <int> ; i < n ; i ++ ) { l = i ; while ( a [ l ] == a [ l + <int> ] ) l ++ ; if ( l > i ) c += l - i - <int> ; else c ++ ; if ( l == n - <int> ) break ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 3842}
{"input": "int main ( ) { int t , i , j , n ; long int a [ <int> ] [ <int> ] , sum = <int> , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { sum += a [ j ] [ i ] ; } sum = sum + a [ j ] [ i + <int> ] ; if ( max < sum ) max = sum ; sum = <int> ; } printf ( <str> , max ) ; } }", "label": 1, "id": 3843}
{"input": "int gcd ( int , int ) ; int main ( ) { int T , Ain , Bin ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & Ain , & Bin ) ; printf ( <str> , gcd ( Ain , Bin ) , Ain * Bin / gcd ( Ain , Bin ) ) ; T -- ; } return <int> ; } int gcd ( int n1 , int n2 ) { if ( n2 != <int> ) return gcd ( n2 , n1 % n2 ) ; else return n1 ; }", "label": 1, "id": 3844}
{"input": "int main ( ) { int n , i , y , x , j , lcm = <int> , hcf = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n - <int> ; i ++ ) { scanf ( <str> , & x ) ; scanf ( <str> , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; }", "label": 1, "id": 3845}
{"input": "main ( ) { int x [ <int> ] , y [ <int> ] , g [ <int> ] , l [ <int> ] , i , j , t , max ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x [ i ] , & y [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { for ( j = ( ( x [ i ] < y [ i ] ) ? x [ i ] : y [ i ] ) ; j > <int> ; -- j ) { if ( x [ i ] % j == <int> && y [ i ] % j == <int> ) { g [ i ] = j ; break ; } } max = ( x [ i ] > y [ i ] ) ? x [ i ] : y [ i ] ; while ( <int> ) { if ( max % x [ i ] == <int> && max % y [ i ] == <int> ) { l [ i ] = max ; break ; } ++ max ; } } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , g [ i ] , l [ i ] ) ; } return <int> ; }", "label": 2, "id": 3846}
{"input": "int main ( ) { long int t , n , a , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & a ) ; min = a ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3847}
{"input": "int main ( ) { int n = <int> ; int i = <int> ; int j = <int> ; int k ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i + <int> ; j ++ ) { if ( i > <int> && j > <int> && j != i ) { a [ i ] [ j ] += ( a [ i - <int> ] [ j ] >= a [ i - <int> ] [ j - <int> ] ) ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ; } else if ( i != <int> ) { if ( j == <int> ) { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } else if ( j == i ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } int max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ n - <int> ] [ i ] ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3848}
{"input": "int main ( ) { int i , a , b , t , n , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) n = b ; else n = a ; for ( i = n ; i >= <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3849}
{"input": "int max ( int x , int y ) { if ( x >= y ) return x ; else return y ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3850}
{"input": "void delete ( long int a [ ] , long int i , long int * n ) { long int c ; for ( c = i ; c < * n - <int> ; c ++ ) a [ c ] = a [ c + <int> ] ; ( * n ) -- ; } int main ( ) { int t ; long int i , n , a [ <int> ] , cost ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int i = <int> ; while ( i < n ) scanf ( <str> , & a [ i ++ ] ) ; i = <int> ; cost = <int> ; while ( i < n ) { if ( a [ i ] > a [ i - <int> ] ) { cost += a [ i - <int> ] ; delete ( a , i , & n ) ; } else { cost += a [ i ] ; delete ( a , i - <int> , & n ) ; } } printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 3851}
{"input": "int main ( ) { int test , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3852}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a [ <int> ] ; long long int i , n , count = <int> , n1 = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) n1 ++ ; else { count += ( ( n1 * n1 ) / <int> ) - ( n1 / <int> ) ; n1 = <int> ; } } count += ( ( n1 * n1 ) / <int> ) - ( n1 / <int> ) ; printf ( <str> , count + n ) ; } return <int> ; }", "label": 0, "id": 3853}
{"input": "int main ( void ) { int <unk> ; int test_cases ; scanf ( <str> , & <unk> ) ; int k ; for ( k = <int> ; k < <unk> ; k ++ ) { scanf ( <str> , & test_cases ) ; int num [ test_cases ] [ test_cases ] ; int i , j , sum = <int> ; for ( j = <int> ; j < test_cases ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) { scanf ( <str> , & num [ j ] [ i ] ) ; } } i = <int> ; int sumd , sumr , a , b ; sumd = sumr = num [ <int> ] [ <int> ] ; for ( j = <int> ; j < test_cases - <int> ; j ++ ) { for ( ; i < j ; i ++ ) { sumd = sumd + num [ j ] [ i ] ; sumr = sumr + num [ j ] [ i + <int> ] ; if ( sumd + num [ j + <int> ] [ i ] > sumd + num [ j + <int> ] [ i + <int> ] ) a = sumd + num [ j + <int> ] [ i ] ; else a = sumd + num [ j + <int> ] [ i + <int> ] ; if ( sumr + num [ j + <int> ] [ i + <int> ] > sumr + num [ j + <int> ] [ i + <int> ] ) b = sumr + num [ j + <int> ] [ i + <int> ] ; else b = sumr + num [ j + <int> ] [ i + <int> ] ; if ( a > b ) { sum = sumd ; break ; } else { sum = sumr ; i = i + <int> ; break ; } } } if ( num [ test_cases - <int> ] [ i ] > num [ test_cases - <int> ] [ i + <int> ] ) { sum = sum + num [ test_cases - <int> ] [ i ] ; printf ( <str> , sum ) ; } else { sum = sum + num [ test_cases - <int> ] [ i + <int> ] ; printf ( <str> , sum ) ; } } return <int> ; }", "label": 1, "id": 3854}
{"input": "int main ( void ) { int t , k , i ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { int n ; long p = <int> , q ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( int j = <int> ; j < n - <int> ; j ++ ) { if ( p > a [ j ] ) p = a [ j ] ; } q = ( long ) p * ( n - <int> ) ; printf ( <str> , q ) ; } return <int> ; }", "label": 0, "id": 3855}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int s ; scanf ( <str> , & s ) ; int a [ s ] ; for ( int i = <int> ; i <= s ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( int i = <int> ; i <= s ; i ++ ) { for ( int j = i + <int> ; j <= s ; j ++ ) { if ( a [ i ] > a [ j ] ) { int t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } } } if ( s == <int> ) printf ( <str> , a [ <int> ] ) ; else { int a1 = a [ <int> ] ; int sum = <int> , b ; for ( int i = <int> ; i <= s ; i ++ ) { b = a [ i ] ; if ( a1 > b ) { sum = sum + b ; a1 = b ; } else sum = sum + a1 ; } printf ( <str> , sum ) ; } } }", "label": 2, "id": 3856}
{"input": "void input ( long a [ ] , int n ) { int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } } int countSubArrays ( int a [ ] , int n ) { int i , j , c = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { c ++ ; if ( a [ j ] == a [ n - <int> ] || a [ j ] > a [ j + <int> ] ) { break ; } } } return c ; } int main ( ) { long a1 [ MAX ] , a2 [ MAX ] , <unk> [ MAX ] , <unk> [ MAX ] , <unk> [ MAX ] ; int n , t ; scanf ( <str> , & t ) ; switch ( t ) { case <int> : scanf ( <str> , & n ) ; input ( a1 , n ) ; printf ( <str> , countSubArrays ( a1 , n ) ) ; break ; case <int> : scanf ( <str> , & n ) ; input ( a1 , n ) ; printf ( <str> , countSubArrays ( a1 , n ) ) ; scanf ( <str> , & n ) ; input ( a2 , n ) ; printf ( <str> , countSubArrays ( a2 , n ) ) ; break ; case <int> : scanf ( <str> , & n ) ; input ( a1 , n ) ; printf ( <str> , countSubArrays ( a1 , n ) ) ; scanf ( <str> , & n ) ; input ( a2 , n ) ; printf ( <str> , countSubArrays ( a2 , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; break ; case <int> : scanf ( <str> , & n ) ; input ( a1 , n ) ; printf ( <str> , countSubArrays ( a1 , n ) ) ; scanf ( <str> , & n ) ; input ( a2 , n ) ; printf ( <str> , countSubArrays ( a2 , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; break ; case <int> : scanf ( <str> , & n ) ; input ( a1 , n ) ; printf ( <str> , countSubArrays ( a1 , n ) ) ; scanf ( <str> , & n ) ; input ( a2 , n ) ; printf ( <str> , countSubArrays ( a2 , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; scanf ( <str> , & n ) ; input ( <unk> , n ) ; printf ( <str> , countSubArrays ( <unk> , n ) ) ; break ; default : return <int> ; } return <int> ; }", "label": 3, "id": 3857}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , y , x ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < n - <int> ; j ++ ) { x = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; y = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = x > y ? x : y ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3858}
{"input": "int main ( ) { int m , r , tc , a , b , hcf ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & a , & b ) ; m = a * b ; while ( b > <int> ) { r = a % b ; a = b ; b = r ; } hcf = m / a ; printf ( <str> , a , hcf ) ; } return <int> ; }", "label": 1, "id": 3859}
{"input": "int main ( ) { int i , j , rows , array [ <int> ] [ <int> ] ; int loop , sum ; scanf ( <str> , & loop ) ; while ( loop -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i - <int> >= <int> && j <= i - <int> ) { if ( j - <int> >= <int> ) array [ i ] [ j ] += array [ i - <int> ] [ j ] >= array [ i - <int> ] [ j - <int> ] ? array [ i - <int> ] [ j ] : array [ i - <int> ] [ j - <int> ] ; else array [ i ] [ j ] += array [ i - <int> ] [ j ] ; } else if ( j - <int> >= <int> && i - <int> >= <int> ) array [ i ] [ j ] += array [ i - <int> ] [ j - <int> ] ; } sum = <int> ; for ( j = <int> ; j < rows ; j ++ ) sum = ( sum > array [ rows - <int> ] [ j ] ) ? sum : array [ rows - <int> ] [ j ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 3860}
{"input": "int small ( unsigned int temp [ ] , unsigned int t ) { int i , j , k ; k = temp [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { if ( k > temp [ i ] && temp [ i ] != <int> ) { k = temp [ i ] ; } } return k ; } void re ( unsigned int temp [ ] , unsigned int t ) { int i , j , k ; for ( i = <int> ; i < t ; i ++ ) { k = temp [ i ] ; for ( j = i + <int> ; j < t ; j ++ ) { if ( k == temp [ j ] ) { temp [ j ] = <int> ; } } } } int main ( ) { unsigned int n , s , temp [ <int> ] , t , k ; int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & t ) ; t = ( t * t + t ) / <int> ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & temp [ j ] ) ; } re ( temp , t ) ; k = small ( temp , t ) ; unsigned int sum = <int> ; for ( j = <int> ; j < t ; j ++ ) { sum = sum + temp [ j ] ; } sum = sum - k ; printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 3861}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , i , j , r , m ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i <= r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = r ; i - <int> ; i -- ) for ( j = i ; j - <int> ; j -- ) { if ( a [ i ] [ j ] < a [ i ] [ j - <int> ] ) m = a [ i ] [ j - <int> ] ; else m = a [ i ] [ j ] ; a [ i - <int> ] [ j - <int> ] += m ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3862}
{"input": "int num [ <int> ] [ <int> ] ; int main ( ) { int i , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int max [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & num [ i ] [ j ] ) ; max [ <int> ] [ <int> ] = num [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { max [ i ] [ <int> ] = num [ i ] [ <int> ] + max [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { max [ i ] [ j ] = maximum ( num [ i ] [ j ] + max [ i - <int> ] [ j ] , num [ i ] [ j ] + max [ i - <int> ] [ j - <int> ] ) ; } max [ i ] [ j ] = num [ i ] [ j ] + max [ i - <int> ] [ j - <int> ] ; } int l = max [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max [ n - <int> ] [ i ] > l ) l = max [ n - <int> ] [ i ] ; } printf ( <str> , l ) ; } return <int> ; }", "label": 0, "id": 3863}
{"input": "int Max ( int a , int b ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , s = <int> , z1 = <int> , z2 = <int> , temp = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } s = a [ <int> ] [ <int> ] ; for ( i = <int> , j = <int> ; i < n ; i ++ ) { if ( i == n - <int> ) { s = s + Max ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; } else { z1 = a [ i ] [ j ] + Max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; z2 = a [ i ] [ j + <int> ] + Max ( a [ i + <int> ] [ j + <int> ] , a [ i + <int> ] [ j + <int> + <int> ] ) ; if ( z1 > z2 ) temp = a [ i ] [ j ] ; else { temp = a [ i ] [ j + <int> ] ; j = j + <int> ; } s = s + temp ; } } printf ( <str> , s ) ; } return <int> ; } int Max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 1, "id": 3864}
{"input": "void main ( ) { int i , q , C , D , A , B , T , gcd [ <int> ] , lcm [ <int> ] , div , rem ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; C = A ; D = B ; while ( B % A != <int> ) { rem = B % A ; B = A ; A = rem ; } gcd [ i ] = A ; lcm [ i ] = ( C * D ) / gcd [ i ] ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , gcd [ i ] , lcm [ i ] ) ; }", "label": 3, "id": 3865}
{"input": "int main ( ) { int t , n , i , a , b , cost ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & b ) ; a = a < b ? a : b ; } printf ( <str> , a * n - <int> ) ; } return <int> ; }", "label": 1, "id": 3866}
{"input": "int main ( ) { int t , i ; long long int a , b , gcd , lcd , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else b = b - a ; } printf ( <str> , a , x * y / a ) ; } return <int> ; }", "label": 0, "id": 3867}
{"input": "int main ( ) { int t , n , min , i ; scanf ( <str> , & t ) ; int count = <int> ; while ( count < t ) { scanf ( <str> , & n ) ; min = <int> ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < min ) { min = arr [ i ] ; } } long cost ; cost = ( n - <int> ) * min ; printf ( <str> , cost ) ; count ++ ; } }", "label": 0, "id": 3868}
{"input": "int main ( ) { int t , n , min , val , i ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> << <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & val ) ; if ( min > val ) min = val ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 3869}
{"input": "int main ( ) { int i , j , t , n , max ; scanf ( <str> , & t ) ; while ( t -- ) { int arr [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } max = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( arr [ n - <int> ] [ j ] > arr [ n - <int> ] [ max ] ) max = j ; } int sum = arr [ n - <int> ] [ max ] ; int x = n - <int> ; while ( x >= <int> ) { if ( arr [ x ] [ max ] > arr [ x ] [ max - <int> ] ) sum = sum + arr [ x ] [ max ] ; else { sum = sum + arr [ x ] [ max - <int> ] ; max = max - <int> ; } x -- ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3870}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; gcd = getgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; printf ( <str> ) ; } return <int> ; } int getgcd ( int x , int y ) { if ( y != <int> ) { getgcd ( y , x % y ) ; } else { return ( x ) ; } }", "label": 1, "id": 3871}
{"input": "int sot ( int * arr , int i , int j , int n ) { if ( i >= n ) return <int> ; int x = sot ( arr , i + <int> , j , n ) ; int y = sot ( arr , i + <int> , j + <int> , n ) ; int m = ( x > y ? x : y ) ; return ( * ( arr + i * n + j ) + m ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; int sum = sot ( ( int * ) arr , <int> , <int> , n ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 3872}
{"input": "int main ( ) { int i , j , a , n , arr [ <int> ] [ <int> ] ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3873}
{"input": "int main ( ) { int t , i , j , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3874}
{"input": "main ( ) { int i , j , t , n , b [ <int> ] , m = - <int> ; scanf ( <str> , & t ) ; while ( t ) { int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } b [ ++ m ] = a [ <int> ] [ <int> ] ; t -- ; } for ( i = <int> ; i <= m ; i ++ ) printf ( <str> , b [ i ] ) ; }", "label": 0, "id": 3875}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int a [ <int> ] [ <int> ] , i , j , m ; scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3876}
{"input": "struct input { int num ; struct input * next ; } ; struct cache { int i , j , value ; struct cache * next ; } ; struct input * <unk> , * <unk> , * <unk> , * <unk> ; struct cache * <unk> , * <unk> , * <unk> , * <unk> ; int solveTrian ( int , int ) ; int t ; struct input * <unk> ( int ) ; void <unk> ( struct input * ) ; int <unk> ( int , int ) ; struct cache * <unk> ( int , int , int ) ; void <unk> ( struct cache * ) ; int <unk> ( int , int ) ; main ( ) { int row , col , <unk> ; scanf ( <str> , & t ) ; for ( row = <int> ; row <= t ; row ++ ) for ( col = <int> ; col <= row ; col ++ ) { scanf ( <str> , & <unk> ) ; <unk> = <unk> ( <unk> ) ; <unk> ( <unk> ) ; } printf ( <str> , solveTrian ( <int> , <int> ) ) ; } int solveTrian ( int i , int j ) { if ( i > t ) return <int> ; int <unk> = <unk> ( i , j ) ; if ( <unk> != - <int> ) return <unk> ; int temp1 = solveTrian ( i + <int> , j ) ; int temp2 = solveTrian ( i + <int> , j + <int> ) ; int t = ( ( temp1 >= temp2 ) ? temp1 : temp2 ) + <unk> ( i , j ) ; <unk> = <unk> ( i , j , t ) ; <unk> ( <unk> ) ; return t ; } struct input * <unk> ( int in ) { <unk> = ( struct input * ) malloc ( sizeof ( struct input ) ) ; <unk> -> next = NULL ; <unk> -> num = in ; return <unk> ; } void <unk> ( struct input * np ) { if ( <unk> == NULL ) <unk> = <unk> = np ; else { <unk> -> next = np ; <unk> = np ; } } int <unk> ( int rw , int cl ) { int sum = <int> ; while ( rw > <int> ) sum = sum + ( -- rw ) ; <unk> = <unk> ; sum = sum + ( -- cl ) ; while ( sum -- > <int> ) <unk> = <unk> -> next ; return <unk> -> num ; } struct cache * <unk> ( int r , int c , int in ) { <unk> = ( struct cache * ) malloc ( sizeof ( struct cache ) ) ; <unk> -> next = NULL ; <unk> -> value = in ; <unk> -> i = r ; <unk> -> j = c ; return <unk> ; } void <unk> ( struct cache * np ) { if ( <unk> == NULL ) <unk> = <unk> = np ; else { <unk> -> next = np ; <unk> = np ; } } int <unk> ( int r , int c ) { <unk> = <unk> ; while ( <unk> != NULL ) { if ( ( ( <unk> -> i ) == r ) && ( ( <unk> -> j ) == c ) ) return <unk> -> value ; <unk> = <unk> -> next ; } return - <int> ; }", "label": 2, "id": 3877}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else { return gcd ( b % a , a ) ; } } int main ( ) { int t , a , b , g , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 3878}
{"input": "int main ( ) { int n , i , j , k ; scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i + <int> ; j ++ ) if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 2, "id": 3879}
{"input": "int main ( ) { int t , i , j , n ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3880}
{"input": "int los ( int x [ ] , int max ) { int i = <int> , count = <int> ; int not = max - <int> ; int num , temp , j ; for ( j = <int> ; j < not ; j ++ ) { count ++ ; num = x [ i ] + x [ i + count ] + x [ count + i + <int> ] ; i = i + count ; if ( num > temp ) { temp = num ; } temp = num ; } return temp ; } int main ( ) { int non , i , j , k ; scanf ( <str> , & non ) ; int ar [ non ] ; for ( i = <int> ; i < non ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; if ( ar [ i ] > <int> ) exit ( <int> ) ; k = ( ar [ i ] * ( ar [ i ] + <int> ) ) / <int> ; int ar1 [ k ] ; for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & ar1 [ j ] ) ; if ( ar1 [ j ] > <int> || ar1 [ j ] < <int> ) exit ( <int> ) ; } ar [ i ] = los ( ar1 , ar [ i ] ) ; } for ( i = <int> ; i < non ; i ++ ) printf ( <str> , ar [ i ] ) ; return <int> ; }", "label": 1, "id": 3881}
{"input": "int gcd ( int , int ) ; int gcd ( int n , int m ) { if ( ( n >= m ) && ( ( n % m ) == <int> ) ) { return ( m ) ; } else { gcd ( m , ( n % m ) ) ; } } void main ( ) { int t , a , b , ans1 , ans2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; ans1 = gcd ( a , b ) ; ans2 = ( a * b ) / ( ans1 ) ; printf ( <str> , ans1 , ans2 ) ; } }", "label": 1, "id": 3882}
{"input": "int ar [ <int> ] ; int * * dp ; void print ( int * * arr , int n ) { int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) printf ( <str> , arr [ i ] [ j ] ) ; printf ( <str> ) ; } } int min ( int i , int j ) { int k , ans ; ans = ar [ i ] ; for ( k = i + <int> ; k < j ; k ++ ) ans = find_min ( ans , ar [ k ] ) ; return ans ; } int minmax ( int n ) { int i , j , k , p , cur ; dp = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = <int> ; i < n ; i ++ ) dp [ i ] = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) dp [ i ] [ i ] = <int> ; for ( k = <int> ; k < n ; k ++ ) { for ( i = <int> ; i < n - k ; i ++ ) { j = i + k ; dp [ i ] [ j ] = max_int ; for ( p = i ; p < j ; p ++ ) { cur = dp [ i ] [ p ] + dp [ p + <int> ] [ j ] + min ( i , j ) ; dp [ i ] [ j ] = find_min ( dp [ i ] [ j ] , cur ) ; } } } return dp [ <int> ] [ n - <int> ] ; } int main ( ) { int t , n , i , j , ans ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & ar [ j ] ) ; ans = minmax ( n ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 3883}
{"input": "int main ( void ) { int * * arr , t , n , i , j , maximum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; arr = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = <int> ; i <= n ; ++ i ) { arr [ i - <int> ] = ( int * ) malloc ( sizeof ( int ) * i ) ; } for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = <int> ; i < n ; ++ i ) arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) if ( i == j ) arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; else arr [ i ] [ j ] += max ( arr [ i - <int> ] [ j - <int> ] , arr [ i - <int> ] [ j ] ) ; maximum = arr [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; ++ i ) if ( arr [ n - <int> ] [ i ] > maximum ) maximum = arr [ n - <int> ] [ i ] ; printf ( <str> , maximum ) ; } return <int> ; }", "label": 0, "id": 3884}
{"input": "int hcf ( int a , int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; if ( a > b ) return hcf ( a % b , b ) ; if ( b > a ) return hcf ( a , b % a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i ; scanf ( <str> , & a , & b ) ; i = hcf ( a , b ) ; printf ( <str> , i , a * b / i ) ; } return <int> ; }", "label": 1, "id": 3885}
{"input": "int main ( void ) { int T ; do { scanf ( <str> , & T ) ; } while ( T < <int> || T > <int> ) ; while ( T -- ) { long long N ; do { scanf ( <str> , & N ) ; } while ( N < <int> || N > ( <int> ^ <int> ) ) ; long long A [ N ] ; long long i ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } A [ N ] = <int> ; long long y = <int> ; long long ans = <int> ; int temp = <int> ; for ( i = <int> ; i < N ; i ++ ) { if ( ( i + <int> ) < N ) { if ( A [ i ] <= A [ i + <int> ] ) { y ++ ; } else { ans = ans + ( ( y * ( y + <int> ) ) / <int> ) ; y = <int> ; temp ++ ; } } } if ( temp != <int> ) { ans = ans + ( ( y * ( y + <int> ) ) / <int> ) ; } if ( ( y == ( N ) ) && ( ans == <int> ) ) { ans = ( ( y * ( y + <int> ) ) / <int> ) ; } if ( N == <int> ) { printf ( <str> , N ) ; } else { printf ( <str> , ans ) ; } } return <int> ; }", "label": 2, "id": 3886}
{"input": "int t , n , a [ <int> ] [ <int> ] , store [ <int> ] [ <int> ] ; int findmax ( int , int [ <int> ] [ <int> ] , int , int ) ; int main ( ) { int i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) for ( k = <int> ; k < <int> ; k ++ ) store [ j ] [ k ] = - <int> ; scanf ( <str> , & n ) ; int result = <int> ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } result = findmax ( n , a , <int> , <int> ) ; printf ( <str> , result ) ; } return <int> ; } int findmax ( int m , int x [ <int> ] [ <int> ] , int i , int j ) { int y , z , retval ; if ( m == <int> ) return x [ <int> ] [ <int> ] ; if ( i == m - <int> ) if ( x [ i + <int> ] [ j ] - x [ i + <int> ] [ j + <int> ] >= <int> ) retval = x [ i ] [ j ] + x [ i + <int> ] [ j ] ; else retval = x [ i ] [ j ] + x [ i + <int> ] [ j + <int> ] ; else if ( i < m - <int> ) { if ( ( y = store [ i + <int> ] [ j ] ) == - <int> ) y = store [ i + <int> ] [ j ] = findmax ( m , x , i + <int> , j ) ; if ( ( z = store [ i + <int> ] [ j + <int> ] ) == - <int> ) z = store [ i + <int> ] [ j + <int> ] = findmax ( m , x , i + <int> , j + <int> ) ; if ( y - z >= <int> ) retval = x [ i ] [ j ] + y ; else retval = x [ i ] [ j ] + z ; } return retval ; }", "label": 0, "id": 3887}
{"input": "int main ( void ) { int num , n , rows , j , i , count ; scanf ( <str> , & n ) ; while ( n ) { scanf ( <str> , & rows ) ; int array [ rows ] [ rows ] ; for ( j = <int> ; j < rows ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) { scanf ( <str> , & array [ j ] [ i ] ) ; } } count = array [ <int> ] [ <int> ] ; i = <int> ; for ( j = <int> ; j < rows - <int> ; j ++ ) { if ( array [ j + <int> ] [ i ] > array [ j + <int> ] [ i + <int> ] ) { num = array [ j + <int> ] [ i ] ; } else { num = array [ j + <int> ] [ i + <int> ] ; i = i + <int> ; } count = count + num ; } printf ( <str> , count ) ; n = n - <int> ; } }", "label": 1, "id": 3888}
{"input": "int main ( ) { int a , b , g , l , remainder , numerator , denominator , n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { numerator = a ; denominator = b ; } else { numerator = a ; denominator = b ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } g = denominator ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 3889}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] = { { <int> , <int> } } , sum , temp = <int> , i , j , flag ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= ( i + <int> ) ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = <int> ; j <= n ; j += <int> ) { temp = <int> ; flag = j ; for ( i = n - <int> ; i > <int> ; i -- ) { if ( a [ i ] [ flag ] > a [ i ] [ flag - <int> ] ) { temp += a [ i ] [ flag ] ; } else { flag -- ; temp += a [ i ] [ flag ] ; } } if ( sum < temp ) sum = temp ; } printf ( <str> , ( sum + a [ <int> ] [ <int> ] ) ) ; } return <int> ; }", "label": 1, "id": 3890}
{"input": "int main ( ) { long int i , j , T , n , cost = <int> ; long int a [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { cost = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) { cost = cost + a [ j ] ; } if ( a [ j + <int> ] < a [ j ] ) { cost = cost + a [ j + <int> ] ; } } printf ( <str> , cost ) ; } }", "label": 3, "id": 3891}
{"input": "int main ( ) { int t , a , b , gcd , lcm , r , n , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3892}
{"input": "int main ( ) { int n , i , j , t , max = <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; scanf ( <str> , & n ) ; while ( t -- ) { for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n - i ; j ++ ) { if ( a [ n - i ] [ j ] > a [ n - i ] [ j + <int> ] ) max = a [ n - i ] [ j ] ; else max = a [ n - i ] [ j + <int> ] ; a [ n - i - <int> ] [ j ] = + max ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 3893}
{"input": "int r , x , n , i , j , ar [ <int> ] ; int main ( ) { scanf ( <str> , & r ) ; while ( r -- ) { scanf ( <str> , & n ) ; for ( x = <int> ; x < n ; x ++ ) { scanf ( <str> , & ar [ x ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= n - <int> ; j ++ ) { if ( ar [ i ] <= ar [ j ] ) { if ( j == n - <int> ) { printf ( <str> , ar [ i ] * ( n - <int> ) ) ; break ; } else continue ; } else break ; } } } return <int> ; }", "label": 3, "id": 3894}
{"input": "int main ( ) { int t , n , a [ <int> ] , i , j , k ; int flag = <int> ; int temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n ; j ++ ) { temp = a [ j ] ; for ( k = j ; k < n ; k ++ ) { if ( temp <= a [ k ] ) { flag ++ ; temp = a [ k ] ; } else break ; } } printf ( <str> , flag ) ; } return <int> ; }", "label": 3, "id": 3895}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } long long int lcm ( long long int a , long long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t = <int> ; long long int a = <int> , b = <int> ; long long int x = <int> , y = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = gcd ( a , b ) ; y = lcm ( a , b ) ; printf ( <str> , x , y ) ; } return <int> ; }", "label": 0, "id": 3896}
{"input": "void sub ( int [ ] , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; int i , n , j ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } sub ( a , n ) ; } return <int> ; } void sub ( int a [ ] , int n ) { int i , j , c = <int> , count = <int> , m ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { for ( m = i ; m < j ; m ++ ) { if ( a [ m ] < a [ m + <int> ] ) c ++ ; else break ; } if ( ( i + c ) == j ) { count ++ ; } c = <int> ; } } printf ( <str> , count ) ; }", "label": 2, "id": 3897}
{"input": "long gcd ( long , long ) ; int main ( ) { int T , i ; long x , y , lcm , hcf ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } long gcd ( long x , long y ) { if ( x == <int> ) { return y ; } while ( y != <int> ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; }", "label": 0, "id": 3898}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; t -- ; } return <int> ; }", "label": 0, "id": 3899}
{"input": "int main ( ) { long long int tc = <int> , notc , r , maxi , i , j ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & r ) ; long long int arr [ <int> ] [ <int> ] , max [ <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } max [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { max [ i ] [ <int> ] = max [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ; max [ i ] [ i ] = max [ i - <int> ] [ i - <int> ] + arr [ i ] [ i ] ; } for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( max [ i - <int> ] [ j - <int> ] >= max [ i - <int> ] [ j ] ) { max [ i ] [ j ] = max [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ; } else { max [ i ] [ j ] = max [ i - <int> ] [ j ] + arr [ i ] [ j ] ; } } } maxi = max [ r - <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { if ( max [ r - <int> ] [ <int> ] >= maxi ) { maxi = max [ r - <int> ] [ <int> ] ; } } printf ( <str> , maxi ) ; } return <int> ; }", "label": 1, "id": 3900}
{"input": "int main ( ) { int i , j , a [ <int> ] [ <int> ] , n , t , sum = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; sum = sum + a [ i ] [ j ] ; } } printf ( <str> , sum / <int> ) ; t -- ; } return <int> ; }", "label": 3, "id": 3901}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { long long int a , b , lcm , k , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; lcm = ( a * b ) / k ; printf ( <str> , k , lcm ) ; } } long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } }", "label": 1, "id": 3902}
{"input": "int main ( ) { long A , B , GCD , LCM ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; GCD = gcd ( A , B ) ; LCM = A * B / GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; } int gcd ( long A , long B ) { if ( B == <int> ) return A ; else gcd ( B , A % B ) ; }", "label": 0, "id": 3903}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( void ) { int hcf , lcm ; int t ; int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; hcf = gcd ( a , b ) ; printf ( <str> , hcf , a * b / hcf ) ; } }", "label": 1, "id": 3904}
{"input": "int main ( ) { int t , n1 , n2 , i , j , k , temp ; scanf ( <str> , & t ) ; int g [ t ] , l [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 == n2 ) { g [ i ] = n1 ; l [ i ] = n1 ; continue ; } if ( n1 < n2 ) { temp = n1 ; n1 = n2 ; n2 = temp ; } for ( j = <int> ; j <= n1 ; j ++ ) { if ( n1 % j == <int> && n2 % j == <int> ) g [ i ] = j ; l [ i ] = n1 * n2 / g [ i ] ; } } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , g [ i ] , l [ i ] ) ; return <int> ; }", "label": 2, "id": 3905}
{"input": "int main ( void ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long int n , j ; long long int num [ <int> ] ; scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) scanf ( <str> , & num [ j ] ) ; long long int answer = <int> ; long long int start = <int> ; long long int end = <int> ; j = <int> ; while ( j <= n ) { while ( ( num [ j ] <= num [ j + <int> ] ) && ( j < n ) ) { j ++ ; } end = j ; answer = answer + ( end - start + <int> ) * ( end - start + <int> ) / <int> ; j ++ ; start = j ; end = j ; } printf ( <str> , answer ) ; } return <int> ; }", "label": 0, "id": 3906}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; printf ( <str> , min ( a , n ) ) ; } } int min ( int a [ ] , int n ) { int m = a [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) if ( a [ i ] < m ) m = a [ i ] ; return m * ( n - <int> ) ; }", "label": 1, "id": 3907}
{"input": "main ( ) { long long int a [ <int> ] , i , j , n , m , t , s ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & m ) ; for ( j = <int> ; j <= m ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } t = a [ <int> ] ; for ( j = <int> ; j <= m - <int> ; j ++ ) { if ( a [ j + <int> ] < t ) { t = a [ j + <int> ] ; } } s = t * ( m - <int> ) ; printf ( <str> , s ) ; } }", "label": 3, "id": 3908}
{"input": "int main ( ) { int i , j , x , b , N , no [ <int> ] , T ; int a [ <int> ] [ <int> ] , sum = <int> ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; no [ i ] = N ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < T ; i ++ ) { sum = <int> ; for ( j = <int> ; j < no [ i ] - <int> ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { sum = sum + a [ i ] [ j + <int> ] ; for ( x = j ; x < j - no [ i ] - <int> ; x ++ ) { a [ i ] [ x ] = a [ i ] [ x + <int> ] ; } } else { sum = sum + a [ i ] [ j ] ; for ( x = j + <int> ; x < j - no [ i ] - <int> ; x ++ ) { a [ i ] [ x + <int> ] = a [ i ] [ x + <int> ] ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 3909}
{"input": "int main ( ) { int t , r , c , i , j , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= ( n - <int> ) ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = ( n - <int> ) ; i > <int> ; i -- ) { for ( j = <int> ; j < ( n - <int> ) ; j ++ ) { if ( a [ i ] [ j ] <= a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } }", "label": 3, "id": 3910}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int tc = <int> ; tc < t ; tc ++ ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( long long int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = a [ <int> ] ; for ( long long int i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3911}
{"input": "int main ( ) { int t , l , n , i , j , m ; int * a ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & l ) ; i = <int> ; n = l * ( l + <int> ) / <int> ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; while ( i < n ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } for ( i = l - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { n = ( i * ( i - <int> ) / <int> ) + j ; m = ( a [ ( i * ( i + <int> ) / <int> ) + j ] > a [ ( i * ( i + <int> ) / <int> ) + j + <int> ] ) ? a [ ( i * ( i + <int> ) / <int> ) + j ] : a [ ( i * ( i + <int> ) / <int> ) + j + <int> ] ; a [ n ] += m ; } } printf ( <str> , a [ <int> ] ) ; free ( a ) ; t -- ; } }", "label": 1, "id": 3912}
{"input": "int main ( ) { int A [ <int> ] , n , i , count = <int> , t ; unsigned long int cost = <int> ; scanf ( <str> , & t ) ; while ( count <= t ) { cost = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , A + i ) ; i = <int> ; while ( i < n - <int> ) { if ( A [ i ] > A [ i + <int> ] ) { cost += A [ i + <int> ] ; i ++ ; } else { cost += A [ i ] ; A [ i + <int> ] = A [ i ] ; i ++ ; } } printf ( <str> , cost ) ; count ++ ; } return <int> ; }", "label": 1, "id": 3913}
{"input": "long long A [ <int> ] ; long long dp [ <int> ] ; int main ( ) { long long int i , j , k ; long long int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( int i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; dp [ i ] = <int> ; } long long int sum = <int> ; for ( int i = n - <int> ; i > <int> ; i -- ) { if ( A [ i ] <= A [ i + <int> ] ) dp [ i ] = dp [ i + <int> ] + <int> ; } for ( int i = <int> ; i <= n ; i ++ ) sum = sum + dp [ i ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 3914}
{"input": "int main ( void ) { long long n ; int m , i ; scanf ( <str> , & m ) ; while ( m > <int> && m <= <int> ) for ( i = <int> ; i < m ; i ++ ) { scanf ( <str> , & n ) ; int A [ <int> ] , B , c = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } B = A [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( B < A [ i ] ) { c = c + B ; } else { c = c + A [ i ] ; B = A [ i ] ; } } printf ( <str> , c ) ; m -- ; } return <int> ; }", "label": 1, "id": 3915}
{"input": "struct node { int triangle [ <int> ] [ <int> ] ; struct node * next ; } ; typedef struct node * NODE ; NODE getnode ( void ) { return ( malloc ( sizeof ( struct node ) ) ) ; } int next ( int mask [ ] , int n ) { int i ; for ( i = <int> ; ( i < n ) && mask [ i ] ; ++ i ) mask [ i ] = <int> ; if ( i < n ) { mask [ i ] = <int> ; return <int> ; } return <int> ; } int main ( void ) { int rows ; int i , j , k , count ; int r , c ; int bin [ <int> ] ; int max [ <int> ] ; int sum = <int> ; int testcases ; NODE temp , head , cur ; printf ( <str> ) ; scanf ( <str> , & testcases ) ; for ( count = <int> ; count < testcases ; count ++ ) { temp = getnode ( ) ; scanf ( <str> , & rows ) ; for ( i = <int> ; i <= rows ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & temp -> triangle [ i - <int> ] [ j ] ) ; } if ( count == <int> ) { head = temp ; cur = head ; } else { cur -> next = temp ; cur = cur -> next ; } } cur = head ; for ( count = <int> ; count < testcases ; count ++ ) { max [ count ] = <int> ; for ( j = <int> ; j < rows ; j ++ ) { bin [ j ] = <int> ; max [ count ] += cur -> triangle [ j ] [ <int> ] ; } while ( next ( bin , rows - <int> ) ) { k = <int> ; r = <int> ; c = <int> ; sum = <int> ; for ( j = <int> ; j < rows ; j ++ ) { sum += cur -> triangle [ r ++ ] [ c ] ; c = c + bin [ k ++ ] ; } if ( sum > max [ count ] ) max [ count ] = sum ; } cur = cur -> next ; } printf ( <str> ) ; for ( count = <int> ; count < testcases ; count ++ ) printf ( <str> , max [ count ] ) ; }", "label": 2, "id": 3916}
{"input": "int main ( ) { int t ; int i , j ; long long int n , count = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] && ( i + <int> ) <= n ) count ++ ; } printf ( <str> , count + n ) ; count = <int> ; } return <int> ; }", "label": 1, "id": 3917}
{"input": "main ( ) { int largest , totalTestCases , rows , firstNum , x , i , j , num ; scanf ( <str> , & totalTestCases ) ; int result [ <int> ] [ <int> ] ; for ( x = <int> ; x < totalTestCases ; x ++ ) { scanf ( <str> , & rows ) ; ; largest = <int> ; scanf ( <str> , & firstNum ) ; if ( rows > <int> ) { for ( i = <int> ; i < <int> ; i ++ ) { scanf ( <str> , & ( result [ <int> ] [ i ] ) ) ; largest = ( largest > result [ <int> ] [ i ] ? largest : result [ <int> ] [ i ] ) ; } result [ <int> ] [ <int> ] = <int> ; } for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { result [ <int> ] [ j ] = ( j > <int> ? ( result [ <int> ] [ j ] > result [ <int> ] [ j - <int> ] ? result [ <int> ] [ j ] : result [ <int> ] [ j - <int> ] ) : result [ <int> ] [ j ] ) ; scanf ( <str> , & num ) ; result [ <int> ] [ j ] += num ; if ( i == rows - <int> ) { largest = ( largest > result [ <int> ] [ j ] ? largest : result [ <int> ] [ j ] ) ; } else if ( j > <int> ) { result [ <int> ] [ j - <int> ] = result [ <int> ] [ j - <int> ] ; } } result [ <int> ] [ i - <int> ] = result [ <int> ] [ i - <int> ] ; result [ <int> ] [ i ] = result [ <int> ] [ i ] ; result [ <int> ] [ i + <int> ] = <int> ; } printf ( <str> , ( largest + firstNum ) ) ; } }", "label": 0, "id": 3918}
{"input": "int max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int min ( int x , int y ) { if ( x < y ) return x ; else return y ; } int main ( void ) { int i , t , gcd , lcm , m , r ; long a , b , x , y ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a , y = b ; x = max ( a , b ) ; m = min ( a , b ) ; r = x % y ; while ( x % y ) { x = m , y = r ; if ( x % y == <int> ) { gcd = y ; break ; } else r = x % y ; m = min ( x , y ) ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 3919}
{"input": "int main ( ) { int i , j , a [ <int> ] [ <int> ] , k , l , t = <int> , m , n ; scanf ( <str> , & m ) ; for ( n = <int> ; n < m ; n ++ ) { scanf ( <str> , & i ) ; for ( j = <int> ; j < i ; j ++ ) { t ++ ; for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( l = t ; l > <int> ; l -- ) for ( k = <int> ; k < l ; k ++ ) { if ( a [ l ] [ k + <int> ] > a [ l ] [ k ] ) { a [ l - <int> ] [ k ] = a [ l - <int> ] [ k ] + a [ l ] [ k + <int> ] ; } else { a [ l - <int> ] [ k ] = a [ l - <int> ] [ k ] + a [ l ] [ k ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3920}
{"input": "int main ( void ) { int t , temp ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long int temp1 = a * b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } while ( b > <int> ) { temp = a % b ; if ( temp == <int> ) break ; a = b ; b = temp ; } printf ( <str> , b , temp1 / b ) ; } return <int> ; }", "label": 0, "id": 3921}
{"input": "int max ( int x , int y ) { return ( x > y ? x : y ) ; } int arr [ <int> ] [ <int> ] ; int sum , m ; int CalSum ( int i , int j ) { if ( i >= m ) return <int> ; sum = max ( CalSum ( i + <int> , j ) , CalSum ( i + <int> , j + <int> ) ) + arr [ i ] [ j ] ; return sum ; } int main ( ) { int n , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } } printf ( <str> , CalSum ( <int> , <int> ) ) ; return <int> ; }", "label": 2, "id": 3922}
{"input": "int main ( ) { int n ; int a [ <int> ] [ <int> ] = { <int> } ; int t , j , b , sum , i ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3923}
{"input": "int main ( ) { int i , j , t , a [ <int> ] [ <int> ] , r , s = <int> , min ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < r ; i ++ ) { min = a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( min > a [ i ] [ j + <int> ] ) { min = a [ i ] [ j + <int> ] ; } } s = s + min ; } printf ( <str> , & s ) ; t -- ; } return <int> ; }", "label": 1, "id": 3924}
{"input": "int a [ <int> ] [ <int> ] ; int maxsum ( int rowno , int <unk> , int n ) { if ( rowno == n - <int> ) { return a [ rowno ] [ <unk> ] ; } else { if ( maxsum ( rowno + <int> , <unk> , n ) > maxsum ( rowno + <int> , <unk> + <int> , n ) ) { return a [ rowno ] [ <unk> ] + maxsum ( rowno + <int> , <unk> , n ) ; } else return a [ rowno ] [ <unk> ] + maxsum ( rowno + <int> , <unk> + <int> , n ) ; } } int main ( ) { int i , t , n , r , c ; int arr [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( r = <int> ; r < n ; r ++ ) { for ( c = <int> ; c <= r ; c ++ ) { scanf ( <str> , & a [ r ] [ c ] ) ; } } arr [ i ] = maxsum ( <int> , <int> , n ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , arr [ i ] ) ; } return <int> ; }", "label": 2, "id": 3925}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; int i , a , b , x , y , t ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } while ( a % b != <int> ) { t = b ; b = a % b ; a = t ; } printf ( <str> , b , ( x * y ) / b ) ; } }", "label": 1, "id": 3926}
{"input": "int main ( void ) { int t , n , i ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) while ( t -- ) { int count = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { count += a [ i + <int> ] ; } else { count += a [ i ] ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 3927}
{"input": "int main ( ) { int tc ; scanf ( <str> , & tc ) ; for ( int t = <int> ; t < tc ; t ++ ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int n1 = a , n2 = b ; while ( b != <int> ) { int temp = a % b ; a = b ; b = temp ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 0, "id": 3928}
{"input": "int main ( void ) { long long int t , i , j , a [ <int> ] , min , c , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } c = min * ( n - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 3929}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 3930}
{"input": "int main ( ) { int t , d ; long int a , b , lcm , hcf ; scanf ( <str> , & t ) ; for ( d = <int> ; d < t ; d ++ ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = hcf * ( ( a / hcf ) * ( b / hcf ) ) ; printf ( <str> , hcf , lcm ) ; } return <int> ; } int gcd ( int x , int y ) { if ( y == <int> ) return x ; return gcd ( y , x % y ) ; }", "label": 0, "id": 3931}
{"input": "int main ( ) { int t , i , j , k , a [ <int> ] , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int n = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n ; j ++ ) { for ( k = j + <int> ; k < n ; k ++ ) { if ( a [ j ] > a [ k ] ) { temp = a [ j ] ; a [ j ] = a [ k ] ; a [ k ] = temp ; } } } printf ( <str> , ( n - <int> ) * a [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 3932}
{"input": "int p = <int> , count = <int> , a [ ( n ) * ( n + <int> ) / <int> ] , max [ ( n ) * ( n + <int> ) / <int> ] ; int main ( ) { int t = <int> , r = <int> , k = <int> , s = <int> , i = <int> , j = <int> , g = <int> , h = <int> , <unk> = <int> , total = <int> , lines = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & lines ) ; total = ( lines ) * ( lines + <int> ) / <int> ; <unk> = ( lines - <int> ) * ( lines ) / <int> ; for ( j = <int> ; j < total ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j >= <unk> ) max [ j ] = a [ j ] ; } count = lines - <int> ; p = count ; for ( k = <unk> - <int> ; k >= <int> ; k -- ) { if ( p == <int> ) { count -- ; p = count ; } r = a [ k ] + max [ k + count ] ; s = a [ k ] + max [ k + count + <int> ] ; if ( r > s ) max [ k ] = r ; else max [ k ] = s ; p -- ; } printf ( <str> , max [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3933}
{"input": "int n ; int findMaxOf ( int array [ ] ) { int max = <int> ; int i = <int> ; for ( i = <int> ; i < n ; i += <int> ) { if ( max < array [ i ] ) { max = array [ i ] ; } } return max ; } int main ( ) { int testcases = <int> ; scanf ( <str> , & testcases ) ; int testcase = <int> ; for ( ; testcase < testcases ; testcase += <int> ) { scanf ( <str> , & n ) ; int array [ n ] [ n ] ; int i = <int> , j = <int> ; for ( ; i < n ; i += <int> ) { for ( j = <int> ; j <= i ; j += <int> ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i += <int> ) { if ( i == <int> ) { continue ; } for ( j = <int> ; j < i ; j += <int> ) { if ( j == <int> ) { array [ i ] [ j ] += array [ i - <int> ] [ j ] ; } else { array [ i ] [ j ] += ( array [ i - <int> ] [ j ] > array [ i - <int> ] [ j - <int> ] ? array [ i - <int> ] [ j ] : array [ i - <int> ] [ j - <int> ] ) ; } } } printf ( <str> , findMaxOf ( array [ n - <int> ] ) ) ; } return <int> ; }", "label": 1, "id": 3934}
{"input": "int main ( ) { long long int T , i , N , M ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; long long int a [ N ] ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; M = N ; for ( i = <int> ; i < N - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) M = M + <int> ; } printf ( <str> , M ) ; } return <int> ; }", "label": 1, "id": 3935}
{"input": "int main ( ) { int T = <int> , N , count , i , temp ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { while ( T -- ) { count = <int> ; scanf ( <str> , & N ) ; temp = N ; if ( N >= <int> && N <= <int> ) { long int a [ N ] ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i > <int> ) { if ( a [ i - <int> ] < a [ i ] ) count ++ ; else if ( a [ i - <int> ] == a [ i ] ) { temp -- ; } } } } printf ( <str> , count + temp ) ; } } return <int> ; }", "label": 1, "id": 3936}
{"input": "int main ( ) { int t , n , currentele , prevele , count , i ; scanf ( <str> , & t ) ; while ( t -- ) { long long answer = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & currentele ) ; if ( i == <int> ) count = <int> ; else { if ( currentele >= prevele ) ++ count ; else count = <int> ; } answer += count ; prevele = currentele ; } printf ( <str> , answer ) ; } return <int> ; }", "label": 0, "id": 3937}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n1 , n2 ; scanf ( <str> , & n1 , & n2 ) ; long int a , b ; a = n1 , b = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } long int lcm = a * b / n1 ; printf ( <str> , n1 , lcm ) ; } }", "label": 0, "id": 3938}
{"input": "int main ( ) { int t , i , sum , n , min ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 3939}
{"input": "void maxsum ( int * * , int ) ; int main ( void ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int n , * * ptr ; scanf ( <str> , & n ) ; ptr = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) ptr [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , * ( ptr + i ) + j ) ; } maxsum ( ptr , n ) ; printf ( <str> , * * ptr ) ; free ( ( int * * ) ptr ) ; } return <int> ; } void maxsum ( int * * ptr , int n ) { int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( * ( * ( ptr + i ) + j ) > * ( * ( ptr + i ) + ( j - <int> ) ) ) * ( * ( ptr + ( i - <int> ) ) + ( j - <int> ) ) += * ( * ( ptr + i ) + j ) ; else * ( * ( ptr + ( i - <int> ) ) + ( j - <int> ) ) += * ( * ( ptr + i ) + ( j - <int> ) ) ; } } }", "label": 0, "id": 3940}
{"input": "int n ; long long int calc ( int x , int y , int a [ ] [ <int> ] , long long int large [ ] [ <int> ] ) { if ( y == n ) return a [ x ] [ n ] ; if ( x > n ) return <int> ; if ( y > n ) return <int> ; return large [ x ] [ y ] != <int> ? large [ x ] [ y ] : ( large [ x ] [ y ] = a [ x ] [ y ] + ( calc ( x + <int> , y + <int> , a , large ) > calc ( x , y + <int> , a , large ) ? calc ( x + <int> , y + <int> , a , large ) : calc ( x , y + <int> , a , large ) ) ) ; } int main ( ) { int t , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { long long int <unk> [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ j ] [ i ] ) ; } } printf ( <str> , calc ( <int> , <int> , a , <unk> ) ) ; } return <int> ; }", "label": 0, "id": 3941}
{"input": "int main ( ) { long long lcm , hcf , a , b , i , j , m , t , cn ; scanf ( <str> , & t ) ; for ( cn = <int> ; cn <= t ; cn ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) m = a ; else m = b ; for ( i = m ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; break ; } } lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 3942}
{"input": "int memo [ SIZE ] [ SIZE ] ; void initialise ( ) { int i , j ; for ( i = <int> ; i < SIZE ; i ++ ) for ( j = <int> ; j < SIZE ; j ++ ) memo [ i ] [ j ] = <int> ; } int path ( int a [ SIZE ] [ SIZE ] , int r , int i , int j ) { int p1 , p2 ; if ( memo [ i ] [ j ] ) return memo [ i ] [ j ] ; if ( i == r - <int> ) return memo [ i ] [ j ] = a [ i ] [ j ] ; else { return memo [ i ] [ j ] = a [ i ] [ j ] + max ( path ( a , r , i + <int> , j ) , path ( a , r , i + <int> , j + <int> ) ) ; } } int main ( ) { int n , r , i , j , a [ SIZE ] [ SIZE ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; initialise ( ) ; if ( r == <int> ) printf ( <str> ) ; else printf ( <str> , path ( a , r , <int> , <int> ) ) ; } return <int> ; }", "label": 1, "id": 3943}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , min ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] <= min ) { min = arr [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 3944}
{"input": "int tri [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int t = <int> , max = <int> , sum , i = <int> , j = <int> , ind = <int> , n ; scanf ( <str> , & t ) ; while ( t -- ) { n = <int> ; sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tri [ i ] [ j ] ) ; } } max = tri [ n ] [ <int> ] ; for ( j = <int> ; j <= n ; j ++ ) { if ( max < tri [ n ] [ j ] ) { max = tri [ n ] [ j ] ; ind = j ; } } i = n - <int> ; j = ind ; sum = max ; for ( i = n - <int> ; i >= <int> ; i -- ) { if ( j - <int> != <int> ) { if ( tri [ i ] [ j ] > tri [ i ] [ j - <int> ] ) { sum += tri [ i ] [ j ] ; } if ( tri [ i ] [ j ] < tri [ i ] [ j - <int> ] ) { sum += tri [ i ] [ j - <int> ] ; j = j - <int> ; } } else if ( j == <int> ) sum += tri [ i ] [ j ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3945}
{"input": "int gcd ( int a , int b ) ; int main ( int argc , const char * argv [ ] ) { int numOfCases ; int i , n1 , n2 ; scanf ( <str> , & numOfCases ) ; for ( i = <int> ; i < numOfCases ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; int temp = gcd ( n1 , n2 ) ; printf ( <str> , temp , ( n1 * n2 ) / temp ) ; } return <int> ; } int gcd ( int a , int b ) { int t ; if ( a < b ) { t = a ; a = b ; b = t ; } while ( b != <int> ) { t = b ; b = a % b ; a = t ; } return a ; }", "label": 1, "id": 3946}
{"input": "int main ( ) { long int t , n ; long int val , temp , cost , count , i ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; cost = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & val ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & temp ) ; if ( val > temp ) { val = temp ; } } printf ( <str> , val * ( n - <int> ) ) ; } }", "label": 0, "id": 3947}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3948}
{"input": "int main ( ) { int t , n , i , greater , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int s [ n ] [ n ] ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & s [ j ] [ k ] ) ; } } for ( j = n - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k < j ; k ++ ) { if ( s [ j ] [ k ] > s [ j ] [ k + <int> ] ) greater = s [ j ] [ k ] ; else greater = s [ j ] [ k + <int> ] ; s [ j - <int> ] [ k ] += greater ; } } printf ( <str> , s [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3949}
{"input": "int findSum ( int matrix [ <int> ] [ <int> ] , int x , int y , int dim ) ; int max ( int a , int b ) ; void initialize ( int lines ) ; int findSum ( int matrix [ <int> ] [ <int> ] , int x , int y , int dim ) { if ( y + <int> >= dim || x + <int> >= dim ) return matrix [ x ] [ y ] ; return matrix [ x ] [ y ] + max ( findSum ( matrix , x + <int> , y , dim ) , findSum ( matrix , x + <int> , y + <int> , dim ) ) ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; } void initialize ( int lines ) { int matrix [ <int> ] [ <int> ] ; int i , a = <int> ; int val = <int> ; for ( ; i < lines ; i ++ ) { for ( ; a < lines ; a ++ ) { if ( i > a ) matrix [ i ] [ a ] = <int> ; else scanf ( <str> , & matrix [ i ] [ a ] ) ; } a = <int> ; } val = findSum ( matrix , <int> , <int> , lines ) ; printf ( <str> , val ) ; } int main ( ) { int cases , lines , i = <int> ; puts ( <str> ) ; scanf ( <str> , & cases ) ; if ( lines < <int> || lines > <int> ) { return - <int> ; } for ( ; i < cases ; i ++ ) { scanf ( <str> , & lines ) ; initialize ( lines ) ; } return <int> ; }", "label": 3, "id": 3950}
{"input": "void element ( void ) ; int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { element ( ) ; } return <int> ; } void element ( void ) { int n , i , j , k , m ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] [ - <int> ] = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) { scanf ( <str> , & a [ i ] [ j ] ) ; k = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; m = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; if ( k > m ) a [ i ] [ j ] = k ; else { a [ i ] [ j ] = m ; } } else { a [ i ] [ j ] = <int> ; } } } for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j - <int> ] > a [ n - <int> ] [ j ] ) { a [ n - <int> ] [ j ] = a [ n - <int> ] [ j - <int> ] ; } } printf ( <str> , a [ n - <int> ] [ n - <int> ] ) ; }", "label": 0, "id": 3951}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , g , min , max , t ; long int l ; scanf ( <str> , a , b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } while ( min ) { g = min ; min = max % min ; max = g ; } t = max ; l = ( a * b ) / t ; printf ( <str> , t , l ) ; } return <int> ; }", "label": 3, "id": 3952}
{"input": "void main ( ) { int T , i , j , N , k ; long int a [ MAX ] , count = <int> ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; printf ( <str> ) ; i = <int> ; while ( i < N ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } j = <int> ; while ( j < N ) { k = <int> ; for ( i = j ; i <= j + <int> && i < N ; i ++ ) { if ( a [ j ] < a [ i ] ) k ++ ; else k ; } if ( k > <int> ) { count = count + <int> ; } else count = count + <int> ; j ++ ; } printf ( <str> , count ) ; count = <int> ; } }", "label": 1, "id": 3953}
{"input": "int main ( ) { int i = <int> , sum = <int> , p , x , k , l ; int A [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & p ) ; for ( i = <int> ; i < p ; i ++ ) { scanf ( <str> , & x ) ; sum = <int> , k = <int> , l = <int> ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < ( k + <int> ) ; l ++ ) { scanf ( <str> , & A [ k ] [ l ] ) ; } } k = <int> , l = <int> ; sum = A [ k ] [ l ] ; while ( k < x ) { if ( A [ k + <int> ] [ l ] > A [ k + <int> ] [ l + <int> ] ) { sum = sum + A [ k + <int> ] [ l ] ; k = k + <int> ; } else { sum = sum + A [ k + <int> ] [ l + <int> ] ; k = k + <int> ; l = l + <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 3954}
{"input": "int fun ( int [ <int> ] [ <int> ] , int , int , int , int s [ ] ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int ar [ <int> ] [ <int> ] = { <int> } , i , j , n , s [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) s [ i ] = - <int> ; printf ( <str> , ar [ <int> ] [ <int> ] + fun ( ar , <int> , n , <int> , s ) ) ; } return <int> ; } int fun ( int ar [ <int> ] [ <int> ] , int i , int n , int k , int s [ ] ) { int q , j = k , z , index = ( i * ( i + <int> ) ) / <int> + j ; if ( s [ index ] > <int> ) return s [ index ] ; q = - <int> ; for ( j ; j <= k + <int> ; j ++ ) { if ( i + <int> >= n ) z = ar [ i ] [ j ] ; else z = ar [ i ] [ j ] + fun ( ar , i + <int> , n , j , s ) ; if ( q < z ) q = z ; } s [ index ] = q ; return q ; }", "label": 1, "id": 3955}
{"input": "int a [ <int> ] ; int main ( ) { int t , j , answer , i , k ; scanf ( <str> , & t ) ; while ( t -- ) { int count = <int> ; int n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ j - <int> ] ) { count ++ ; } else { break ; } } } printf ( <str> , count + n ) ; } }", "label": 3, "id": 3956}
{"input": "int main ( ) { int t , i , n , j , max = <int> , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; fflush ( stdin ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] += max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3957}
{"input": "int a [ <int> ] [ <int> ] = { <int> } ; int max [ <int> ] [ <int> ] = { <int> } ; int maximum ( int b , int c ) ; int main ( ) { unsigned int i , j ; unsigned int n ; int k ; int t ; unsigned int max_value ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } max [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( j == <int> ) { max [ i ] [ j ] = a [ i ] [ j ] + max [ i - <int> ] [ j ] ; } else if ( j == i ) { max [ i ] [ j ] = a [ i ] [ j ] + max [ i - <int> ] [ j - <int> ] ; } else { max [ i ] [ j ] = a [ i ] [ j ] + maximum ( max [ i - <int> ] [ j ] , max [ i - <int> ] [ j - <int> ] ) ; } } } int l_r = n - <int> ; max_value = a [ l_r ] [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( max [ l_r ] [ k ] > max_value ) { max_value = max [ l_r ] [ k ] ; } } printf ( <str> , max_value ) ; } return <int> ; } int maximum ( int b , int c ) { if ( b > c ) { return b ; } else { return c ; } }", "label": 1, "id": 3958}
{"input": "int main ( ) { int t , a , b , lcm , rem ; lcm = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm = a * b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } while ( b != <int> ) { rem = a % b ; a = b ; b = rem ; } printf ( <str> , a , ( lcm / a ) ) ; } return <int> ; }", "label": 1, "id": 3959}
{"input": "int gcd ( int a , int b ) { if ( ! b ) return a ; return gcd ( b , a % b ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } }", "label": 0, "id": 3960}
{"input": "int main ( ) { int test ; long int a , b , c , d ; printf ( <str> ) ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & a , & b ) ; c = a ; d = b ; while ( a != b ) { if ( a < b ) { b = b - a ; } else a = a - b ; } printf ( <str> , a , ( c * d ) / a ) ; } return <int> ; }", "label": 1, "id": 3961}
{"input": "long gcd ( long a , long b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; long a , b , max , min , h , l ; int i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; min = a < b ? a : b ; max = a > b ? a : b ; h = gcd ( max , min ) ; l = a * b / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 0, "id": 3962}
{"input": "int main ( ) { int yo ; int row , col ; int i , j ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & yo ) ; while ( yo -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } i -- ; while ( row ) { col = <int> ; while ( col < i ) { if ( arr [ i ] [ col ] > arr [ i ] [ col + <int> ] ) arr [ i - <int> ] [ col ] += arr [ i ] [ col ] ; else arr [ i - <int> ] [ col ] += arr [ i ] [ col + <int> ] ; col ++ ; } i -- ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 3963}
{"input": "long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { long int t , a , b , hcf , lcm ; int arr [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 3964}
{"input": "int t ; int main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { long a , b , c , i , d , e , f = <int> , g , j = <int> ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) { c = b ; b = a ; a = c ; } for ( i = <int> ; i <= a ; i ++ ) { d = a % i ; e = b % i ; if ( d == <int> && e == <int> ) { f = i ; } } printf ( <str> , f ) ; for ( j = ( a * b ) ; j >= b ; j -- ) { d = j % a ; e = j % b ; if ( d == <int> && e == <int> ) { g = j ; } } printf ( <str> , g ) ; } }", "label": 2, "id": 3965}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int s = <int> , i , n , a [ <int> ] , dp [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; dp [ <int> ] = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] >= a [ i ] ) dp [ i + <int> ] = dp [ i ] + <int> ; else dp [ i + <int> ] = <int> ; s += dp [ i ] ; } s += dp [ n - <int> ] ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 3966}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int t , a , b , l , H ; scanf ( <str> , & a , & b ) ; for ( l = <int> ; l <= a * b ; l ++ ) if ( l % a == <int> && l % b == <int> ) break ; for ( H = a > b ? a : b ; H > <int> ; H -- ) if ( a % H == <int> && b % H == <int> ) break ; printf ( <str> , H , l ) ; } return <int> ; }", "label": 2, "id": 3967}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int sum ( int l , int mat [ ] [ l ] , int i , int j ) { if ( i == l - <int> ) { return mat [ i ] [ j ] ; } else return max ( sum ( l , mat , i + <int> , j ) , sum ( l , mat , i + <int> , j + <int> ) ) + mat [ i ] [ j ] ; } int main ( ) { int tc ; int l ; int i , j , k ; int d ; scanf ( <str> , & tc ) ; for ( i = <int> ; i < tc ; i ++ ) { scanf ( <str> , & l ) ; int mat [ l ] [ l ] ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & d ) ; mat [ j ] [ k ] = d ; } } printf ( <str> , sum ( l , mat , <int> , <int> ) ) ; printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 3968}
{"input": "int main ( ) { long t , i , n , min ; long long int sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; min = <int> ; for ( i = <int> ; i <= n - <int> ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 3969}
{"input": "int n , s [ <int> ] ; void input ( int i ) { int j , a [ <int> ] ; if ( i < n ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } input ( i + <int> ) ; for ( j = <int> ; j <= i ; j ++ ) { if ( ( s [ j ] + a [ j ] ) > ( s [ j + <int> ] + a [ j ] ) ) s [ j ] += a [ j ] ; else s [ j ] = s [ j + <int> ] + a [ j ] ; } } } int main ( ) { int c , max = <int> , t , ma [ <int> ] , p = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( c = <int> ; c < n ; c ++ ) s [ c ] = <int> ; input ( <int> ) ; for ( c = <int> ; c < n ; c ++ ) if ( max < s [ c ] ) max = s [ c ] ; ma [ p ] = max ; p ++ ; } for ( c = <int> ; c < p ; c ++ ) printf ( <str> , ma [ c ] ) ; }", "label": 1, "id": 3970}
{"input": "int main ( ) { int i , temp , T , j , k ; scanf ( <str> , & T ) ; int a , b , lcm , gcd ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } gcd = <int> ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; i = <int> ; gcd = <int> ; } return <int> ; }", "label": 1, "id": 3971}
{"input": "int main ( ) { int tc , T ; scanf ( <str> , & T ) ; for ( tc = <int> ; tc < T ; tc ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 1, "id": 3972}
{"input": "int main ( ) { long T , N , i , j , A [ <int> ] [ <int> ] , max ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N , & A [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] [ <int> ] ) ; A [ i ] [ <int> ] += A [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; A [ i ] [ j ] += ( A [ i - <int> ] [ j - <int> ] > A [ i - <int> ] [ j ] ) ? A [ i - <int> ] [ j - <int> ] : A [ i - <int> ] [ j ] ; } scanf ( <str> , & A [ i ] [ i ] ) ; A [ i ] [ i ] += A [ i - <int> ] [ i - <int> ] ; } for ( i = <int> ; i < N ; i ++ ) max = ( A [ N - <int> ] [ i ] > max ) ? A [ N - <int> ] [ i ] : max ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 3973}
{"input": "main ( ) { int test , i ; long long n ; long long c ; scanf ( <str> , & test ) ; while ( test -- ) { c = <int> ; scanf ( <str> , & n ) ; long long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) c ++ ; } printf ( <str> , ( c + n ) ) ; } }", "label": 1, "id": 3974}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , index = - <int> ; long long min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] <= min ) { min = a [ i ] ; index = i ; } } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 3975}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] = { <int> } , c [ <int> ] [ <int> ] = { <int> } , i , j , t ; int sum = <int> , n , k , max ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; sum = <int> ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = <int> ; j < n ; j ++ ) { sum += a [ <int> ] [ j ] ; c [ <int> ] [ j ] = sum ; } sum = <int> ; c [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; sum = a [ <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { if ( j == <int> && k == <int> ) continue ; if ( j == k ) { c [ j ] [ k ] = a [ j ] [ j ] + c [ j - <int> ] [ j - <int> ] ; } else if ( k == <int> ) c [ j ] [ k ] = c [ j - <int> ] [ k ] + a [ j ] [ k ] ; else if ( c [ j - <int> ] [ k ] > c [ j - <int> ] [ k - <int> ] ) { c [ j ] [ k ] = c [ j - <int> ] [ k ] + a [ j ] [ k ] ; } else c [ j ] [ k ] = c [ j - <int> ] [ k - <int> ] + a [ j ] [ k ] ; } } sum = c [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( c [ n - <int> ] [ j ] > max ) max = c [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 3976}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] , i , j , k , max , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = <int> ; j <= n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( j >= <int> ) { if ( k <= j - <int> ) { if ( s [ j - <int> ] [ k - <int> ] > s [ j - <int> ] [ k ] ) s [ j ] [ k ] = a [ j ] [ k ] + s [ j - <int> ] [ k - <int> ] ; else s [ j ] [ k ] = a [ j ] [ k ] + s [ j - <int> ] [ k ] ; } else s [ j ] [ k ] = a [ j ] [ k ] + s [ j - <int> ] [ k - <int> ] ; } else s [ j ] [ k ] = a [ j ] [ k ] ; } } max = <int> ; for ( j = <int> ; j <= n ; j ++ ) { if ( s [ n ] [ j ] > max ) max = s [ n ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 3977}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] , ind = - <int> ; long long min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] <= min ) { min = arr [ i ] ; ind = i ; } } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 3978}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , i , j , cost = <int> , min ; scanf ( <str> , & a ) ; int arr [ a ] ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( j = <int> ; j < a - <int> ; j ++ ) { if ( arr [ j ] < arr [ j + <int> ] ) min = arr [ j ] ; else min = arr [ j + <int> ] ; } cost = min * ( a - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 3979}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n ; scanf ( <str> , & n ) ; int i = <int> , a [ n ] , sum = <int> ; for ( ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { a [ i + <int> ] = a [ i ] ; sum = sum + a [ i ] ; } else sum = sum + a [ i + <int> ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 3980}
{"input": "long gcd ( long m , long n ) { if ( n == <int> ) return m ; return gcd ( n , m % n ) ; } int main ( ) { int T ; long m , n ; long l , g ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & m , & n ) ; g = gcd ( m , n ) ; l = ( m * n ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 3981}
{"input": "int dp ( int a [ <int> ] [ <int> ] , int s ) ; int main ( ) { int i , j , k , l , t ; scanf ( <str> , & t ) ; while ( t -- ) { int s ; scanf ( <str> , & s ) ; int a [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < s ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int res = dp ( a , s ) ; printf ( <str> , res ) ; } return <int> ; } int dp ( int a [ <int> ] [ <int> ] , int s ) { int arr [ <int> ] [ <int> ] = { <int> } , i , j ; arr [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < s ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { int x = arr [ i - <int> ] [ j ] + a [ i ] [ j ] ; int y = <int> ; if ( j - <int> >= <int> ) y = arr [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; if ( x > y ) arr [ i ] [ j ] = x ; else arr [ i ] [ j ] = y ; } } int max = <int> ; for ( i = s - <int> , j = <int> ; j <= i ; j ++ ) { if ( arr [ i ] [ j ] >= max ) max = arr [ i ] [ j ] ; } return max ; }", "label": 0, "id": 3982}
{"input": "int main ( ) { int ar [ <int> ] [ <int> ] , i , j , l , x ; scanf ( <str> , & x ) ; while ( x -- > <int> ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ar [ i + <int> ] [ j ] > ar [ i + <int> ] [ j + <int> ] ) ar [ i ] [ j ] = ar [ i ] [ j ] + ar [ i + <int> ] [ j ] ; else ar [ i ] [ j ] = ar [ i ] [ j ] + ar [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , ar [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3983}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int a , b , n , lcm ; scanf ( <str> , & a , & b ) ; n = gcd ( a , b ) ; lcm = a * b / n ; printf ( <str> , n ) ; printf ( <str> , lcm ) ; } } int gcd ( int x , int y ) { if ( x == <int> ) return y ; else if ( y == <int> ) return x ; else if ( x >= y ) { if ( x % y == <int> ) return y ; else return gcd ( y , x % y ) ; } else { if ( y % x == <int> ) return x ; else return ( x , y % x ) ; } }", "label": 1, "id": 3984}
{"input": "int main ( ) { int n , t , i , j , sum ; static int num [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n > <int> ) { sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & num [ i ] [ j ] ) ; for ( i = <int> ; i < t - <int> ; i ++ ) { num [ i + <int> ] [ <int> ] += num [ i ] [ <int> ] ; } for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( num [ i - <int> ] [ j - <int> ] > num [ i - <int> ] [ j ] ) num [ i ] [ j ] += num [ i - <int> ] [ j - <int> ] ; else num [ i ] [ j ] += num [ i - <int> ] [ j ] ; } for ( i = <int> ; i < t ; i ++ ) { if ( sum < num [ t - <int> ] [ i ] ) sum = num [ t - <int> ] [ i ] ; } printf ( <str> , sum ) ; n -- ; } return <int> ; }", "label": 0, "id": 3985}
{"input": "int fast ( ) { int val = <int> , c ; c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; while ( c >= <char> && c <= <char> ) { val = ( val << <int> ) + ( val << <int> ) + c - <char> ; c = gc ( ) ; } return val ; } int main ( ) { int min = <int> ; int i , n , x , t ; t = fast ( ) ; while ( t -- ) { n = fast ( ) ; for ( i = <int> ; i < n ; i ++ ) { x = fast ( ) ; if ( x < min ) min = x ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 3986}
{"input": "int fastInput ( ) { int val = <int> ; char c = getchar_unlocked ( ) ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) val = ( val << <int> ) + ( val << <int> ) + ( c - <char> ) , c = getchar_unlocked ( ) ; return val ; } int main ( void ) { int i , t , n , min , temp ; t = fastInput ( ) ; while ( t -- ) { n = fastInput ( ) ; min = fastInput ( ) ; for ( i = <int> ; i < n ; i ++ ) { temp = fastInput ( ) ; if ( temp < min ) min = temp ; } long long int ans = ( long long int ) min * ( long long int ) ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 3987}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , n , lcm , g ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & a , & b ) ; if ( a > b ) gcd ( a , b ) ; else gcd ( b , a ) ; g = gcd ( a , b ) ; printf ( <str> , g ) ; lcm = a * b / g ; printf ( <str> , lcm ) ; n -- ; } return <int> ; } int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 3988}
{"input": "int func ( int ( * arr ) [ <int> ] , int n , int i , int max ) { int j , m , a , b , c ; if ( i == <int> ) return max ; else { for ( j = <int> ; j <= i ; j ++ ) { a = * ( * ( arr + i ) + j ) ; b = * ( * ( arr + ( i - <int> ) ) + j ) ; if ( j > <int> ) { c = * ( * ( arr + ( i - <int> ) ) + ( j - <int> ) ) ; if ( ( ( a + b ) >= ( a + c ) ) && ( ( a + b ) > max ) ) { max = ( a + b ) ; m = j ; } if ( ( ( a + c ) >= ( a + b ) ) && ( ( a + c ) > max ) && ( j > <int> ) ) { max = ( a + c ) ; m = j - <int> ; } } else { if ( ( a + b ) > max ) { max = ( a + b ) ; m = j ; } } } * ( * ( arr + ( i - <int> ) ) + m ) = max ; func ( arr , n , i - <int> , max ) ; } } int main ( ) { int n , array [ <int> ] [ <int> ] , i , j , t , z ; scanf ( <str> , & t ) ; for ( z = <int> ; z < t ; z ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; } if ( n == <int> ) printf ( <str> , array [ <int> ] [ <int> ] ) ; else printf ( <str> , func ( array , n , n - <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 3989}
{"input": "int main ( ) { int a [ <int> ] , t , i ; long long int n ; scanf ( <str> , & t ) ; while ( t -- ) { long long int ans = <int> , count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( i == <int> ) count = <int> ; else { if ( a [ i ] >= a [ i - <int> ] ) ++ count ; else count = <int> ; } ans += count ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 3990}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; if ( t > <int> && t <= <int> ) { for ( int i = <int> ; i <= t ; i ++ ) { long long int n1 , n2 , gcd , lcm ; scanf ( <str> , & n1 , & n2 ) ; for ( int j = <int> ; j <= n1 && j <= n2 ; j ++ ) { if ( n1 % j == <int> && n2 % j == <int> ) gcd = j ; } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } } return <int> ; }", "label": 2, "id": 3991}
{"input": "int max ( int a , int b ) { if ( a < b ) return b ; else a ; } void main ( ) { int a [ <int> ] [ <int> ] , result [ <int> ] ; int i = <int> , j = <int> , n , m1 , k = <int> ; scanf ( <str> , & m1 ) ; for ( k = <int> ; k < m1 ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; j ++ ; } } j = <int> ; i = n - <int> ; while ( i >= <int> ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } i -- ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 3992}
{"input": "int main ( ) { long long int t , n , i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] == a [ i ] + <int> || a [ j ] == a [ i ] - <int> ) { if ( a [ j ] > a [ i ] ) { c = a [ i ] ; break ; } else { c = a [ j ] ; break ; } } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 3993}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3994}
{"input": "int main ( ) { int n , t , j , k , i , a [ <int> ] [ <int> ] , t1 , t2 ; scanf ( <str> , & t ) ; int ans [ t ] ; i = <int> ; while ( i < t ) { scanf ( <str> , & n ) ; j = <int> ; while ( j < n ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } j ++ ; } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { t1 = a [ j ] [ k ] + a [ j + <int> ] [ k ] ; t2 = a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ; a [ j ] [ k ] = t1 > t2 ? t1 : t2 ; } } ans [ i ] = a [ <int> ] [ <int> ] ; i ++ ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 1, "id": 3995}
{"input": "int main ( ) { short int t ; int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned long n , temp ; scanf ( <str> , & n ) ; unsigned long arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j + <int> < n && arr [ j ] > arr [ j + <int> ] ) { temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( <str> , arr [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 3996}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int * * a , * * max ; a = ( int * * ) malloc ( ( n + <int> ) * sizeof ( int * ) ) ; max = ( int * * ) malloc ( ( n + <int> ) * sizeof ( int * ) ) ; for ( i = <int> ; i <= n ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; max [ i ] = ( int * * ) malloc ( ( n + <int> ) * sizeof ( int * ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == n ) { max [ i ] [ j ] = a [ i ] [ j ] ; } else { if ( max [ i + <int> ] [ j ] >= max [ i + <int> ] [ j + <int> ] ) max [ i ] [ j ] = a [ i ] [ j ] + max [ i + <int> ] [ j ] ; else max [ i ] [ j ] = a [ i ] [ j ] + max [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , max [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 3997}
{"input": "int main ( ) { int a ; scanf ( <str> , & a ) ; int count = <int> ; for ( int i = <int> ; i < a ; i ++ ) { int n ; scanf ( <str> , & n ) ; int lenlist [ <int> ] ; for ( int j = <int> ; j < n + <int> ; j ++ ) { count = <int> ; for ( int k = <int> ; k < j ; k ++ ) { int var ; scanf ( <str> , & var ) ; lenlist [ k ] += var ; } } count = <int> ; for ( int j = <int> ; j < n ; j ++ ) { if ( lenlist [ j ] > count ) { count = lenlist [ j ] ; } } for ( int j = <int> ; j < <int> ; j ++ ) { lenlist [ j ] = <int> ; } printf ( <str> , count + <int> ) ; count = <int> ; } return <int> ; }", "label": 1, "id": 3998}
{"input": "int main ( ) { int triangle [ <int> ] [ <int> ] , t , n , i , j , sum1 , sum2 , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangle [ i ] [ j ] ) ; if ( i ) { if ( j == i ) sum2 = <int> ; else sum2 = triangle [ i ] [ j ] + triangle [ i - <int> ] [ j ] ; if ( j ) { sum1 = triangle [ i ] [ j ] + triangle [ i - <int> ] [ j - <int> ] ; } else sum1 = <int> ; triangle [ i ] [ j ] = sum1 > sum2 ? sum1 : sum2 ; } } } max = triangle [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) max = max < triangle [ n - <int> ] [ i ] ? triangle [ n - <int> ] [ i ] : max ; printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 3999}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , count = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] , b [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { b [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] <= a [ i ] ) b [ i ] = b [ i - <int> ] + b [ i ] ; } for ( i = <int> ; i < n ; i ++ ) { count = count + b [ i ] ; } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 4000}
{"input": "int gcd ( int , int ) ; int main ( ) { int x , y , g , lcm , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x , & y ) ; g = gcd ( x , y ) ; lcm = ( x * y ) / g ; printf ( <str> , g , lcm ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a > b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; } else if ( b % a == <int> ) return a ; else return gcd ( a , b % a ) ; }", "label": 1, "id": 4001}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4002}
{"input": "int hash [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int n ; void debug ( int i , int j ) { int p , q ; printf ( <str> , i , j ) ; for ( p = <int> ; p < n ; p ++ ) { for ( q = <int> ; q <= p ; q ++ ) { printf ( <str> , a [ p ] [ q ] ) ; } printf ( <str> ) ; } return ; } int func ( int i , int j ) { int p , q ; if ( i >= n ) { return <int> ; } else if ( hash [ i ] [ j ] == <int> ) { return a [ i ] [ j ] ; } else { p = func ( i + <int> , j ) ; q = func ( i + <int> , j + <int> ) ; a [ i ] [ j ] += p > q ? p : q ; hash [ i ] [ j ] = <int> ; return a [ i ] [ j ] ; } } int main ( ) { int i , j , ans , cases ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; hash [ i ] [ j ] = <int> ; } } ans = func ( <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 4003}
{"input": "int a [ <int> ] ; int main ( ) { int n , t , i ; scanf ( <str> , & n ) ; while ( n -- ) { int key ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) scanf ( <str> , & a [ i ] ) ; key = a [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { if ( key > a [ i ] ) key = a [ i ] ; } long int k = key * ( n - <int> ) ; printf ( <str> , k ) ; } return <int> ; }", "label": 1, "id": 4004}
{"input": "int gcd ( int x , int y ) { if ( y == <int> ) return x ; else { gcd ( y , x % y ) ; } } int main ( void ) { int no_of_times ; int a , b ; scanf ( <str> , & no_of_times ) ; for ( int i = <int> ; i < no_of_times ; i ++ ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 4005}
{"input": "long minimum ( long a , long b ) { if ( a > b ) return b ; else return a ; } int main ( ) { int n ; long a , b , min , hcf , lcm ; scanf ( <str> , n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; min = minimum ( a , b ) ; int i ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) hcf = i ; } lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 3, "id": 4006}
{"input": "long int gcd ( int , int ) ; long int lcm ( int , int ) ; int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; } long int gcd ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , a ) ; else return gcd ( a , b - a ) ; } long int lcm ( int a , int b ) { if ( a == b ) return a ; else return ( a * b ) / gcd ( a , b ) ; }", "label": 1, "id": 4007}
{"input": "void main ( ) { int i , j , k , sum = <int> , t , n , h = <int> , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } printf ( <str> ) ; } } sum = a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= t ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j ] [ k ] < a [ j ] [ k + <int> ] ) h = a [ j ] [ k + <int> ] ; else h = a [ j ] [ k ] ; sum += h ; } } printf ( <str> , sum ) ; } }", "label": 1, "id": 4008}
{"input": "int main ( ) { int a , b , rem , num , deno , lcm , gcd ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; deno = b ; } else { num = b ; deno = a ; } rem = num % deno ; while ( rem != <int> ) { num = deno ; deno = rem ; rem = num % deno ; } gcd = deno ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; return <int> ; }", "label": 1, "id": 4009}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] , count = <int> , ans = <int> , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) count ++ ; else { ans += count * ( count + <int> ) / <int> ; count = <int> ; } } ans += count * ( count + <int> ) / <int> ; ans += n ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 4010}
{"input": "int main ( ) { int a , b , x , y , t , c ; scanf ( <str> , & c ) ; while ( c -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } printf ( <str> , a , x * y / a ) ; } return <int> ; }", "label": 1, "id": 4011}
{"input": "int n ; int * * a ; int * * cache , * * visit ; int max ( int c , int d ) { return c > d ? c : d ; } int max_path ( int i , int j ) { int t1 , t2 , t ; if ( i >= n ) return <int> ; if ( visit [ i ] [ j ] == <int> ) return cache [ i ] [ j ] ; else t1 = max_path ( i + <int> , j ) ; t2 = max_path ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; visit [ i ] [ j ] = <int> ; return t ; } void printm ( ) { int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , a [ i ] [ j ] ) ; printf ( <str> ) ; } } int main ( ) { int i , j , t , m ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; cache = ( int * * ) malloc ( n * sizeof ( int * ) ) ; visit = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * n ) ; cache [ i ] = ( int * ) malloc ( sizeof ( int ) * n ) ; visit [ i ] = ( int * ) malloc ( sizeof ( int ) * n ) ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; visit [ i ] [ j ] = <int> ; cache [ i ] [ j ] = <int> ; } printf ( <str> , max_path ( <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 4012}
{"input": "int scan ( ) { int n = <int> ; int ch = getchar_unlocked ( ) ; while ( ch < <char> || ch > <char> ) ch = getchar_unlocked ( ) ; while ( ch >= <char> && ch <= <char> ) { n = ( n * <int> ) + ch - <char> ; ch = getchar_unlocked ( ) ; } return n ; } int main ( ) { int t , n , i , j ; t = scan ( ) ; while ( t -- ) { n = scan ( ) ; int arr [ <int> ] [ <int> ] = { { <int> } } ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = scan ( ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4013}
{"input": "int main ( ) { int t , i ; long long a , b , gcd , lcm , j , l , s , p ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a >= b ) { l = a ; s = b ; } else { l = b ; s = a ; } for ( j = s ; j >= <int> ; ) { if ( l % j == <int> && s % j == <int> ) { gcd = j ; break ; } else if ( s % j != <int> ) j = j - s % j ; else if ( l % j != <int> ) j = j - l % j ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4014}
{"input": "int finalarr [ <int> ] ; int maxarr [ <int> ] ; int i , r , c , j , p ; int arr [ <int> ] [ <int> ] ; int Max ( int arr [ ] , int row ) { int i = <int> ; int max = <int> ; for ( i = <int> ; i < row ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } return max ; } int main ( ) { int testcases ; scanf ( <str> , & testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) { int rows ; scanf ( <str> , & rows ) ; for ( r = <int> ; r < rows ; r ++ ) { for ( c = <int> ; c < ( r + <int> ) ; c ++ ) { scanf ( <str> , & arr [ r ] [ c ] ) ; } } for ( c = <int> ; c < rows ; c ++ ) { int max1 = <int> , max2 = <int> ; for ( r = c ; r < rows ; r ++ ) { max1 += arr [ r ] [ c ] ; if ( r == ( rows - <int> ) && c != ( rows - <int> ) ) max2 = max1 + arr [ r ] [ c + <int> ] - arr [ r ] [ c ] ; } maxarr [ c ] = ( max1 > max2 ) ? max1 : max2 ; } finalarr [ i ] = Max ( maxarr , rows ) ; for ( j = <int> ; j < rows ; j ++ ) { maxarr [ j ] = <int> ; } } for ( i = <int> ; i < testcases ; i ++ ) printf ( <str> , finalarr [ i ] ) ; system ( <str> ) ; }", "label": 1, "id": 4015}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; int t [ <int> ] ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } t [ i ] = solve ( x ) ; } for ( i = <int> ; i < j ; i ++ ) printf ( <str> , t [ i ] ) ; return <int> ; }", "label": 0, "id": 4016}
{"input": "int main ( void ) { int t , a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else b = b - a ; } printf ( <str> , a , m * n / a ) ; } return <int> ; }", "label": 1, "id": 4017}
{"input": "int main ( ) { int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } long int c [ n ] ; for ( i = <int> ; i < n ; i ++ ) c [ i ] = <int> ; for ( j = <int> ; j < n - <int> ; j ++ ) { for ( i = <int> ; i < n - <int> ; i ++ ) { c [ j ] += a [ i ] [ j ] ; } if ( a [ n - <int> ] [ j ] < a [ n - <int> ] [ j + <int> ] ) c [ j ] += a [ n - <int> ] [ j + <int> ] ; else c [ j ] += a [ n - <int> ] [ j ] ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( c [ i ] <= c [ i + <int> ] ) c [ i ] = c [ i + <int> ] ; else c [ i + <int> ] = c [ i ] ; } printf ( <str> , c [ n - <int> ] ) ; } return <int> ; }", "label": 1, "id": 4018}
{"input": "int main ( int argc , char const * argv [ ] ) { freopen ( <str> , <str> , stdin ) ; freopen ( <str> , <str> , stdout ) ; int i , k , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & k ) ; int array [ k ] [ k ] ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } for ( i = k - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( array [ i ] [ j ] > array [ i ] [ j + <int> ] ) array [ i - <int> ] [ j ] += array [ i ] [ j ] ; else array [ i - <int> ] [ j ] += array [ i ] [ j + <int> ] ; } } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4019}
{"input": "int main ( ) { int max_sum [ <int> ] [ <int> ] ; int flag_a = <int> ; int flag_b = <int> ; int result [ <int> ] = { <int> } ; int input , temp ; int total_cases , total_inputs ; int i , row , column , j , k ; scanf ( <str> , & total_cases ) ; for ( i = <int> ; i < total_cases ; i ++ ) { for ( k = <int> ; k < <int> ; k ++ ) { max_sum [ <int> ] [ k ] = <int> ; } scanf ( <str> , & total_inputs ) ; for ( row = <int> ; row <= total_inputs ; row ++ ) { for ( column = <int> ; column < row ; column ++ ) { scanf ( <str> , & input ) ; if ( row == <int> ) { max_sum [ flag_b ] [ column ] = input ; } else if ( column != <int> ) { if ( max_sum [ flag_a ] [ column ] > max_sum [ flag_a ] [ column - <int> ] ) max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column ] ; else max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column - <int> ] ; } else if ( column == <int> ) max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column ] ; } temp = flag_a ; flag_a = flag_b ; flag_b = temp ; } int max = <int> ; for ( j = <int> ; j < total_inputs ; j ++ ) { if ( max_sum [ flag_a ] [ j ] > max ) max = max_sum [ flag_a ] [ j ] ; } result [ i ] = max ; } for ( i = <int> ; i < total_cases ; i ++ ) { printf ( <str> , result [ i ] ) ; } return <int> ; }", "label": 1, "id": 4020}
{"input": "long long gcd ( long long a , long long b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long a , b ; scanf ( <str> , & a , & b ) ; long long g = gcd ( a , b ) ; long long l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 0, "id": 4021}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; for ( ; T > <int> ; T -- ) { int x , y , w , lcm , gcd , i , m , n ; scanf ( <str> , & m , & n ) ; if ( m > n ) { x = m ; y = n ; } else { x = n ; y = m ; } for ( i = <int> ; y > <int> ; i ++ ) { w = y ; y = x % y ; x = w ; } gcd = x ; lcm = ( m * n ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4022}
{"input": "void read_input ( ) ; void process ( ) ; void calculate ( int ) ; void print_input ( ) ; int num_test_cases ; typedef struct test_case { int num_lines ; int * * values ; } testcase ; testcase * t ; int main ( ) { read_input ( ) ; process ( ) ; return <int> ; } void read_input ( ) { char * s ; char * ipstring ; char * token ; int i , j , k , n , ipval ; s = ( char * ) malloc ( <int> * sizeof ( char ) ) ; gets ( s ) ; num_test_cases = atoi ( s ) ; t = ( testcase * ) malloc ( num_test_cases * sizeof ( struct test_case ) ) ; for ( i = <int> ; i < num_test_cases ; i ++ ) { gets ( s ) ; n = atoi ( s ) ; ( t + i ) -> num_lines = n ; ( t + i ) -> values = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( j = <int> ; j <= n ; j ++ ) { ( t + i ) -> values [ j - <int> ] = ( int * ) malloc ( j * sizeof ( int ) ) ; ipstring = ( char * ) malloc ( <int> * j * sizeof ( char ) ) ; gets ( ipstring ) ; token = strtok ( ipstring , <str> ) ; k = <int> ; while ( token != NULL ) { * ( ( ( t + i ) -> values [ j - <int> ] ) + ( k - <int> ) ) = atoi ( token ) ; token = strtok ( NULL , <str> ) ; k ++ ; } free ( ipstring ) ; } } } void process ( ) { int i ; for ( i = <int> ; i < num_test_cases ; i ++ ) { calculate ( i ) ; } } void calculate ( int n ) { int k , j ; int down , down_right ; int * * a = ( t + n ) -> values ; for ( k = ( t + n ) -> num_lines - <int> ; k >= <int> ; k -- ) { for ( j = <int> ; j < k ; j ++ ) { down = * ( a [ k ] + j ) ; down_right = * ( a [ k ] + ( j + <int> ) ) ; if ( down > down_right ) { * ( a [ k - <int> ] + j ) += down ; } else { * ( a [ k - <int> ] + j ) += down_right ; } } if ( k > <int> ) { free ( a [ k ] ) ; } } printf ( <str> , * ( a [ <int> ] + <int> ) ) ; }", "label": 0, "id": 4023}
{"input": "void main ( ) { int T , N , i , j , maxSum ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; int Triangle [ N ] [ N ] , SumTri [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & Triangle [ i ] [ j ] ) ; SumTri [ i ] [ j ] = <int> ; } SumTri [ <int> ] [ <int> ] = Triangle [ <int> ] [ <int> ] ; if ( N > <int> ) { SumTri [ <int> ] [ <int> ] = SumTri [ <int> ] [ <int> ] + Triangle [ <int> ] [ <int> ] ; SumTri [ <int> ] [ <int> ] = SumTri [ <int> ] [ <int> ] + Triangle [ <int> ] [ <int> ] ; } for ( i = <int> ; i < N ; i ++ ) { SumTri [ i ] [ <int> ] = SumTri [ i - <int> ] [ <int> ] + Triangle [ i ] [ <int> ] ; SumTri [ i ] [ i ] = SumTri [ i - <int> ] [ i - <int> ] + Triangle [ i ] [ i ] ; } for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( SumTri [ i - <int> ] [ j ] > SumTri [ i - <int> ] [ j - <int> ] ) SumTri [ i ] [ j ] = SumTri [ i - <int> ] [ j ] + Triangle [ i ] ; else SumTri [ i ] [ j ] = SumTri [ i - <int> ] [ j - <int> ] + Triangle [ i ] [ j ] ; } maxSum = SumTri [ N - <int> ] [ <int> ] ; for ( i = <int> ; i <= N ; i ++ ) if ( SumTri [ N - <int> ] [ i ] > maxSum ) maxSum = SumTri [ N - <int> ] [ i ] ; printf ( <str> , maxSum ) ; } }", "label": 1, "id": 4024}
{"input": "int main ( ) { int p , t , i , j , s = <int> , a , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int num [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & num [ j ] ) ; a = num [ j ] ; if ( a < s ) { s = a ; } } p = ( n - <int> ) * s ; printf ( <str> , & p ) ; } }", "label": 1, "id": 4025}
{"input": "int el [ <int> ] [ <int> ] , n ; int <unk> [ <int> ] [ <int> ] ; int Sum ( int i , int j ) { if ( i == n - <int> ) return el [ i ] [ j ] ; if ( <unk> [ i ] [ j ] != - <int> ) return <unk> [ i ] [ j ] ; <unk> [ i ] [ j ] = el [ i ] [ j ] + Max ( Sum ( i + <int> , j ) , Sum ( i + <int> , j + <int> ) ) ; return <unk> [ i ] [ j ] ; } int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j < i + <int> ; ++ j ) { scanf ( <str> , & el [ i ] [ j ] ) ; <unk> [ i ] [ j ] = - <int> ; } } printf ( <str> , Sum ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 4026}
{"input": "int main ( ) { int t ; int n ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int count = <int> ; for ( int i = <int> ; i < n ; i ++ ) { int temp = a [ i ] ; for ( int j = i ; j < n ; j ++ ) { if ( a [ j ] >= temp ) { count ++ ; temp = a [ j ] ; } else break ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 4027}
{"input": "int gcd ( a , b ) { if ( a % b == <int> ) return b ; if ( b % a == <int> ) return a ; if ( a > b ) return gcd ( b , a % b ) ; if ( b > a ) return gcd ( a , b % a ) ; } int lcm ( a , b ) { if ( a % b == <int> ) return a ; if ( b % a == <int> ) return b ; if ( a % b != <int> && b % a != <int> ) return ( a * b ) ; } main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 4028}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t = <int> , a = <int> , b = <int> ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( int x , int y ) { int dividend = <int> , divisor = <int> , rem = <int> ; if ( x > y ) { dividend = x ; divisor = y ; } else { dividend = y ; divisor = x ; } while ( divisor ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; } return dividend ; } int lcm ( int x , int y ) { int min = <int> , max = <int> , lc = <int> , a = <int> , i = <int> ; if ( x < y ) { min = x ; max = y ; } else { min = y ; max = x ; } for ( i = <int> ; i <= min ; i ++ ) { a = max * i ; if ( a % min == <int> ) { lc = a ; break ; } } return lc ; }", "label": 1, "id": 4029}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4030}
{"input": "int main ( ) { long long int t , a , b , x , i , j ; scanf ( <str> , & t ) ; long long int gcd , lcm ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; lcm = a * b ; if ( a == <int> ) gcd = a ; else if ( b == <int> ) gcd = b ; else { for ( j = <int> ; b != <int> ; j ++ ) { x = b ; b = a % b ; a = x ; } gcd = a ; } lcm = lcm / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 4031}
{"input": "int a [ <int> ] ; int b [ <int> ] ; int main ( ) { int n , r , i , j , max ; scanf ( <str> , & n ) ; while ( n -- ) { for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = <int> ; b [ i ] = <int> ; } scanf ( <str> , & r ) ; for ( i = <int> ; i <= r ; i ++ ) { if ( i % <int> ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & b [ j ] ) ; if ( j ) b [ j ] += ( ( a [ j ] > a [ j - <int> ] ) ? a [ j ] : a [ j - <int> ] ) ; else b [ j ] += a [ j ] ; } } else for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j ) a [ j ] += ( ( b [ j ] > b [ j - <int> ] ) ? b [ j ] : b [ j - <int> ] ) ; else a [ j ] += b [ j ] ; } } if ( ! ( r % <int> ) ) { max = a [ <int> ] ; while ( ( r -- ) - <int> ) { if ( a [ r - <int> ] > max ) max = a [ r - <int> ] ; } } else { max = b [ <int> ] ; while ( ( r -- ) - <int> ) { if ( b [ r - <int> ] > max ) max = b [ r - <int> ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4032}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , sum = <int> , i ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) sum += a [ i ] ; if ( a [ i ] > a [ i + <int> ] ) sum += a [ i + <int> ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4033}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int find ( int tri [ ] [ MAX ] , int best [ ] [ MAX ] , int i , int j , int rows ) { if ( i == rows - <int> ) return tri [ i ] [ j ] ; return best [ i ] [ j ] = ( tri [ i ] [ j ] + max ( find ( tri , best , i + <int> , j , rows ) , find ( tri , best , i + <int> , j + <int> , rows ) ) ) ; } int main ( ) { int t , rows , i , j ; int tri [ MAX ] [ MAX ] ; int best [ MAX ] [ MAX ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; printf ( <str> , find ( tri , best , <int> , <int> , rows ) ) ; } }", "label": 2, "id": 4034}
{"input": "int main ( void ) { int a , b , i , c , d , k ; scanf ( <str> , & d ) ; for ( k = <int> ; k <= d ; k ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; c = min ( a , b ) ; for ( i = c ; i = <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { printf ( <str> , i ) ; printf ( <str> , ( b * a ) / i ) ; break ; } } } return <int> ; }", "label": 1, "id": 4035}
{"input": "int arr [ MAX ] [ MAX ] ; int cache [ <int> ] [ <int> ] ; int sum ( int , int ) ; int max ( int , int ) ; void initialise ( ) ; int L ; int main ( ) { int T ; int i , j , max ; scanf ( <str> , & T ) ; while ( T -- ) { initialise ( ) ; scanf ( <str> , & L ) ; for ( i = <int> ; i < L ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; max = sum ( <int> , <int> ) ; printf ( <str> , max ) ; } return <int> ; } int sum ( int i , int j ) { int t1 , t2 , t3 ; if ( i >= L ) return <int> ; if ( cache [ i ] [ j ] != <int> ) return cache [ i ] [ j ] ; t1 = sum ( i + <int> , j ) ; t2 = sum ( i + <int> , j + <int> ) ; t3 = arr [ i ] [ j ] + max ( t1 , t2 ) ; cache [ i ] [ j ] = t3 ; return t3 ; } int max ( int i , int j ) { if ( i > j ) return i ; return j ; } void initialise ( ) { int i , j ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) cache [ i ] [ j ] = <int> ; }", "label": 0, "id": 4036}
{"input": "void quicksort ( long long x [ <int> ] , long long first , long long last ) { long long pivot , j , temp , i ; if ( first < last ) { pivot = first ; i = first ; j = last ; while ( i < j ) { while ( x [ i ] <= x [ pivot ] && i < last ) i ++ ; while ( x [ j ] > x [ pivot ] ) j -- ; if ( i < j ) { temp = x [ i ] ; x [ i ] = x [ j ] ; x [ j ] = temp ; } } temp = x [ pivot ] ; x [ pivot ] = x [ j ] ; x [ j ] = temp ; quicksort ( x , first , j - <int> ) ; quicksort ( x , j + <int> , last ) ; } } int main ( ) { long long n , <unk> [ <int> ] , i , money = <int> , count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & <unk> [ i ] ) ; } quicksort ( <unk> , <int> , n - <int> ) ; money = <unk> [ n / <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( <unk> [ i ] >= money ) { count += <int> ; } } printf ( <str> , money * count ) ; return <int> ; }", "label": 1, "id": 4037}
{"input": "int fastread ( ) { int input ; char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; input = <int> ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int i , j , t , n , max , a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] ; t = fastread ( ) ; while ( t -- ) { n = fastread ( ) ; a [ <int> ] [ <int> ] = fastread ( ) ; s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = s [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; if ( j == <int> ) { s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { if ( i == j ) { s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { if ( s [ i - <int> ] [ j ] > s [ i - <int> ] [ j - <int> ] ) { s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j - <int> ] ; } } } if ( s [ i ] [ j ] > max ) max = s [ i ] [ j ] ; } } printf ( <str> , max ) ; } }", "label": 0, "id": 4038}
{"input": "int total = <int> ; int tri ( int a [ ] , int index , int row , int lastrow , int sum ) { if ( sum > total ) { total = sum ; } if ( row > lastrow ) { return <int> ; } tri ( a , index + row , row + <int> , lastrow , sum + a [ index ] ) ; if ( ( row * ( row + <int> ) ) / <int> >= index ) { tri ( a , index + row + <int> , row + <int> , lastrow , sum + a [ index ] ) ; } } int main ( ) { int cases , lines , i , j , nos ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { scanf ( <str> , & lines ) ; nos = ( lines * ( lines + <int> ) ) / <int> ; int a [ nos + <int> ] ; for ( j = <int> ; j <= nos ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } tri ( a , <int> , <int> , lines , <int> ) ; printf ( <str> , total ) ; total = <int> ; } return <int> ; }", "label": 2, "id": 4039}
{"input": "int geter ( ) { char a ; int b = <int> ; fread ( & a , <int> , <int> , stdin ) ; while ( ! ( a >= <char> && a <= <char> ) ) { fread ( & a , <int> , <int> , stdin ) ; } while ( a >= <char> && a <= <char> ) { b = ( b << <int> ) + ( b << <int> ) + a - <char> ; fread ( & a , <int> , <int> , stdin ) ; } return b ; } int t , n , tot , g , in [ <int> ] , res [ <int> ] , ptr , k ; int main ( ) { t = geter ( ) ; while ( t > <int> ) { n = geter ( ) ; tot = ( ( n * ( n + <int> ) ) / <int> ) - <int> ; ptr = tot ; g = <int> ; while ( g <= tot ) { in [ g ] = geter ( ) ; g ++ ; } for ( g = n ; g >= <int> ; g -- ) { for ( k = g ; k > <int> ; k -- ) { if ( ptr + g > tot ) { res [ ptr ] = in [ ptr ] ; } else { if ( res [ ptr + g ] > res [ ptr + g + <int> ] ) { res [ ptr ] = res [ ptr + g ] + in [ ptr ] ; } else { res [ ptr ] = res [ ptr + g + <int> ] + in [ ptr ] ; } } ptr -- ; } } printf ( <str> , res [ <int> ] ) ; t -- ; } return <int> ; }", "label": 1, "id": 4040}
{"input": "main ( ) { int t , i , sum ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , d [ n ] ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } d [ n ] = <int> ; for ( i = n - <int> ; i <= <int> ; i -- ) { if ( a [ i ] <= a [ i + <int> ] ) { d [ i ] = d [ i + <int> ] + <int> ; } else { d [ i ] = <int> ; } } sum = <int> ; for ( i = <int> ; i <= n ; i ++ ) { sum = sum + d [ i ] ; } printf ( <str> , sum ) ; t -- ; } }", "label": 1, "id": 4041}
{"input": "long long int gcd ( long long int , long long int ) ; main ( ) { long long int t , a , b , g ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; t -- ; } return <int> ; } long long int gcd ( long long int x , long long int y ) { if ( x == <int> || y == <int> ) return <int> ; else if ( x == <int> || y == <int> ) return ( x == <int> ? y : x ) ; if ( x > y ) return gcd ( y , x % y ) ; else if ( x < y ) return ( x , y % x ) ; }", "label": 1, "id": 4042}
{"input": "int main ( ) { int a , b , t , c , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = a ; d = b ; } else { c = b ; d = a ; } while ( c % a != <int> || c % b != <int> ) c ++ ; while ( a % d != <int> || b % d != <int> ) d -- ; printf ( <str> , c , d ) ; } }", "label": 2, "id": 4043}
{"input": "int main ( ) { int t , i , j , h , k , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & h ) ; for ( j = <int> ; j < h ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = h - <int> ; j >= <int> ; j -- ) { for ( k = h - <int> ; k >= <int> ; k -- ) { a [ j ] [ k ] += a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ? a [ j + <int> ] [ k ] : a [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4044}
{"input": "int num [ <int> ] [ <int> ] ; int r , r1 ; int a [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int ans ( int num [ <int> ] [ <int> ] , int i , int j ) { if ( a [ i ] [ j ] != <int> ) return a [ i ] [ j ] ; if ( i < <int> || j < <int> ) return <int> ; if ( i == <int> && j == <int> ) { a [ i ] [ j ] = num [ i ] [ j ] ; return a [ i ] [ j ] ; } else { a [ i ] [ j ] = ( num [ i ] [ j ] + max ( ans ( num , i - <int> , j ) , ans ( num , i - <int> , j - <int> ) ) ) ; return a [ i ] [ j ] ; } } void fastRead ( ) { int i = <int> , p = <int> , q = <int> ; char s [ <int> ] ; char * string ; int bytesRead ; int nbytes = <int> ; string = ( char * ) malloc ( nbytes + <int> ) ; int u = <int> ; scanf ( <str> , & r ) ; r1 = r ; while ( r ) { bytesRead = getline ( & string , & nbytes , stdin ) ; while ( string [ i ] != <char> ) { if ( string [ i ] == <char> ) { num [ p ] [ q ] = u ; u = <int> ; i ++ ; q ++ ; } else { u = u * <int> + ( string [ i ] - <char> ) ; i ++ ; } } num [ p ] [ q ] = u ; u = <int> ; p ++ ; r -- ; q = <int> ; i = <int> ; } } int main ( int argc , char * * argv ) { int n , i , j , count = <int> , se ; int an [ <int> ] ; scanf ( <str> , & n ) ; while ( n ) { fastRead ( ) ; for ( i = <int> ; i <= <int> ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = <int> ; i = <int> ; se = ans ( num , r1 - <int> , i ) ; for ( i = <int> ; i < r1 ; i ++ ) { if ( ans ( num , r1 - <int> , i ) > se ) se = ans ( num , r1 - <int> , i ) ; } an [ count ] = se ; count ++ ; n -- ; } for ( i = <int> ; i < count ; i ++ ) printf ( <str> , an [ i ] ) ; return ( EXIT_SUCCESS ) ; }", "label": 3, "id": 4045}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int x , y , l = <int> , g = <int> ; scanf ( <str> , & x , & y ) ; g = gcd ( x , y ) ; l = ( x * y ) / gcd ( x , y ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 4046}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , r , c ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( r = <int> ; r < n ; ++ r ) { for ( c = <int> ; c <= r ; ++ c ) { scanf ( <str> , & arr [ r ] [ c ] ) ; } } for ( r = n - <int> ; r >= <int> ; -- r ) { for ( c = <int> ; c < r ; ++ c ) { if ( arr [ r ] [ c ] > arr [ r ] [ c + <int> ] ) arr [ r - <int> ] [ c ] += arr [ r ] [ c ] ; else arr [ r - <int> ] [ c ] += arr [ r ] [ c + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4047}
{"input": "int main ( ) { int t , n , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } x = arr [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < x ) { x = arr [ i ] ; } } printf ( <str> , x * ( n - <int> ) ) ; } }", "label": 0, "id": 4048}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , c , d ; scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = ( a * b ) / gcd ( a , b ) ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 0, "id": 4049}
{"input": "void lcm ( unsigned int a , unsigned int b ) { int x = a , y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , x * y / a ) ; } void gcd ( unsigned int a , unsigned int b ) { while ( a != b ) { if ( a > b - <int> ) a = a - b ; else b = b - a ; } printf ( <str> , a ) ; } int main ( ) { unsigned int t , a , b , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd ( a , b ) ; lcm ( a , b ) ; } }", "label": 1, "id": 4050}
{"input": "int main ( int argc , char * argv [ ] ) { int i , j , a [ <int> ] [ <int> ] , n , t ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } system ( <str> ) ; return <int> ; }", "label": 3, "id": 4051}
{"input": "int max ( int a , int b ) ; int cache [ <int> ] [ <int> ] ; int solution ( int arr [ ] [ <int> ] , int size , int i1 , int j1 ) ; int main ( ) { int i = <int> ; int j = <int> ; int k = <int> ; int arr1 [ <int> ] ; int a [ <int> ] [ <int> ] ; int choices = <int> ; int tlength = <int> ; scanf ( <str> , & choices ) ; for ( i = <int> ; i < choices ; ++ i ) { scanf ( <str> , & tlength ) ; for ( j = <int> ; j < tlength ; ++ j ) { for ( k = <int> ; k <= j ; ++ k ) { scanf ( <str> , & a [ j ] [ k ] ) ; cache [ i ] [ j ] = - <int> ; } } arr1 [ i ] = solution ( a , tlength , <int> , <int> ) ; } for ( j = <int> ; j < choices ; ++ j ) { printf ( <str> , arr1 [ j ] ) ; } return <int> ; } int solution ( int arr [ ] [ <int> ] , int size , int i1 , int j1 ) { int t1 = <int> ; int t2 = <int> ; int t = <int> ; if ( i1 > size - <int> ) return <int> ; if ( cache [ i1 ] [ j1 ] != - <int> ) return cache [ i1 ] [ j1 ] ; t1 = solution ( arr , size , i1 + <int> , j1 ) ; t2 = solution ( arr , size , i1 + <int> , j1 + <int> ) ; t = max ( t1 , t2 ) ; t = t + arr [ i1 ] [ j1 ] ; cache [ i1 ] [ j1 ] ; return t ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 2, "id": 4052}
{"input": "int memo [ <int> ] [ <int> ] ; int path ( int no [ <int> ] [ <int> ] , int row , int col , int tot ) { if ( memo [ row ] [ col ] != - <int> ) return memo [ row ] [ col ] ; if ( row == tot - <int> ) return no [ row ] [ col ] ; return ( no [ row ] [ col ] + max ( path ( no , row + <int> , col , tot ) , path ( no , row + <int> , col + <int> , tot ) ) ) ; } int main ( ) { int n , i ; memset ( memo , - <int> , sizeof ( memo ) ) ; scanf ( <str> , & n ) ; int ans [ n ] ; int no [ <int> ] [ <int> ] ; int k , j , lines ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & lines ) ; if ( lines <= <int> ) break ; for ( k = <int> ; k < lines ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & no [ k ] [ j ] ) ; } } ans [ i ] = path ( no , <int> , <int> , lines ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return <int> ; }", "label": 2, "id": 4053}
{"input": "int main ( ) { int i , j , n , t , a [ <int> ] [ <int> ] = { <int> , <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = n - <int> ; j > - <int> ; j -- ) { for ( i = <int> ; i < j ; i ++ ) { a [ j ] [ i ] = ( a [ j ] [ i ] >= a [ j ] [ i + <int> ] ? a [ j ] [ i ] : a [ j ] [ i + <int> ] ) ; a [ j - <int> ] [ i ] += a [ j ] [ i ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( i = n ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { a [ i ] [ j ] = <int> ; } } } return <int> ; }", "label": 3, "id": 4054}
{"input": "int main ( ) { int t , n , i , j , sum , * a ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { t = i ; for ( j = t + <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ t ] ) { sum ++ ; t = j ; } else break ; } } free ( a ) ; printf ( <str> , sum + n ) ; } return <int> ; }", "label": 2, "id": 4055}
{"input": "void cost ( long long int [ ] , long long int ) ; int main ( ) { long long int i , no , n ; scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) { scanf ( <str> , & n ) ; long long int a [ n ] ; cost ( a , n ) ; } return <int> ; } void cost ( long long int a [ ] , long long int n ) { long long int min , j , cst ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) { min = a [ j ] ; } } printf ( <str> , ( unsigned long long ) ( ( n - <int> ) * min ) ) ; return ; }", "label": 1, "id": 4056}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int a [ <int> ] [ <int> ] , temp , i , j , value , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { temp = a [ i ] [ j ] ; value = a [ i ] [ j + <int> ] ; if ( temp > value ) a [ i - <int> ] [ j ] += temp ; else a [ i - <int> ] [ j ] += value ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4057}
{"input": "long int lcm ( long int * a ) ; long int gcd ( long int * a ) ; int main ( ) { long int w , i , j , k , t , y , z , x ; long int a [ <int> ] ; scanf ( <str> , & w ) ; long int g [ w ] , l [ w ] ; for ( j = <int> ; j < w ; j ++ ) { for ( i = <int> ; i < <int> ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } g [ j ] = gcd ( a ) ; l [ j ] = lcm ( a ) ; } for ( j = <int> ; j < w ; j ++ ) { printf ( <str> , g [ j ] , l [ j ] ) ; } return ( <int> ) ; } long int lcm ( long int * a ) { long int i , z , t , y ; if ( a [ <int> ] < a [ <int> ] ) { for ( i = a [ <int> ] ; i <= a [ <int> ] * a [ <int> ] ; i ++ ) { t = i % a [ <int> ] ; y = i % a [ <int> ] ; if ( ( t == <int> ) && ( y == <int> ) ) { z = i ; break ; } } } else { for ( i = a [ <int> ] ; i <= a [ <int> ] * a [ <int> ] ; i ++ ) { t = i % a [ <int> ] ; y = i % a [ <int> ] ; if ( ( t == <int> ) && ( y == <int> ) ) { z = i ; break ; } } } return ( z ) ; } long int gcd ( long int * a ) { long int i , t , y , z ; if ( a [ <int> ] < a [ <int> ] ) for ( i = <int> ; i <= a [ <int> ] ; i ++ ) { t = a [ <int> ] % i ; y = a [ <int> ] % i ; if ( ( t == <int> ) && ( y == <int> ) ) { z = i ; } } else { for ( i = <int> ; i <= a [ <int> ] ; i ++ ) { t = a [ <int> ] % i ; y = a [ <int> ] % i ; if ( ( t == <int> ) && ( y == <int> ) ) { z = i ; } } } return ( z ) ; }", "label": 2, "id": 4058}
{"input": "int main ( ) { int t , rows , arr [ MAX ] [ MAX ] , i , j , k , max_sum ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i <= rows ; i ++ ) { for ( j = <int> ; j <= rows ; j ++ ) { arr [ i ] [ j ] = <int> ; } } for ( i = <int> ; i <= rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; if ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ) { arr [ i ] [ j ] += arr [ i - <int> ] [ j ] ; } else { arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } } } max_sum = <int> ; for ( i = <int> ; i <= rows ; i ++ ) { if ( max_sum < arr [ rows ] [ i ] ) { max_sum = arr [ rows ] [ i ] ; } } printf ( <str> , max_sum ) ; } }", "label": 3, "id": 4059}
{"input": "int sum ( int * * a , int n , int i , int j ) { if ( n == <int> ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { return a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } else { return a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } else { int s [ <int> ] ; int k ; for ( k = <int> ; k < <int> ; k ++ ) { s [ k ] = sum ( a , n - <int> , i + <int> , j + k ) ; } if ( s [ <int> ] > s [ <int> ] ) { return a [ i ] [ j ] + s [ <int> ] ; } else { return a [ i ] [ j ] + s [ <int> ] ; } } } int main ( ) { int w ; int n ; scanf ( <str> , & w ) ; int su [ <int> ] , z = <int> ; while ( z < w ) { scanf ( <str> , & n ) ; int * * a ; int k ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( k = <int> ; k < n ; k ++ ) { a [ k ] = ( int * ) malloc ( n * sizeof ( int ) ) ; } int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } su [ z ] = sum ( a , n , <int> , <int> ) ; z ++ ; } int i ; for ( i = <int> ; i < w ; i ++ ) { printf ( <str> , su [ i ] ) ; } }", "label": 2, "id": 4060}
{"input": "int a [ <int> ] , b [ <int> ] ; int main ( ) { int t , i , j ; long gcd [ <int> ] , lcm [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { gcd [ i ] = <int> ; lcm [ i ] = <int> ; scanf ( <str> , & a [ i ] , & b [ i ] ) ; if ( a [ i ] != <int> && b [ i ] != <int> ) { if ( a [ i ] < b [ i ] ) a [ i + <int> ] = a [ i ] ; else a [ i + <int> ] = b [ i ] ; for ( j = <int> ; j < a [ i + <int> ] ; j ++ ) if ( ( a [ i ] % j == <int> ) && ( b [ i ] % j == <int> ) ) gcd [ i ] = gcd [ i ] * j ; a [ i ] = a [ i ] / gcd [ i ] ; b [ i ] = b [ i ] / gcd [ i ] ; lcm [ i ] = gcd [ i ] * a [ i ] * b [ i ] ; } else { lcm [ i ] = <int> ; gcd [ i ] = <int> ; } } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , gcd [ i ] , lcm [ i ] ) ; return <int> ; }", "label": 2, "id": 4061}
{"input": "int main ( ) { int i , j , n , t ; scanf ( <str> , & t ) ; int a [ <int> ] [ <int> ] ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = n - <int> ; j > <int> ; j -- ) { a [ i - <int> ] [ j - <int> ] += ( a [ i ] [ j - <int> ] > a [ i ] [ j ] ) ? ( a [ i ] [ j - <int> ] ) : ( a [ i ] [ j ] ) ; } } printf ( <str> , a [ i ] [ j ] ) ; } return <int> ; }", "label": 0, "id": 4062}
{"input": "int main ( ) { long long int t , a , b , x , i , j ; scanf ( <str> , & t ) ; long long int gcd , lcm ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; lcm = a * b ; if ( a == <int> ) gcd = a ; else if ( b == <int> ) gcd = b ; else { for ( j = <int> ; b != <int> ; j ++ ) { x = b ; b = a % b ; a = x ; } gcd = a ; } lcm = lcm / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 4063}
{"input": "int main ( ) { int i , j , arr [ <int> ] [ <int> ] , temp , result , cases , lines , value ; scanf ( <str> , & cases ) ; while ( <int> ) { for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) arr [ i ] [ j ] = <int> ; result = <int> ; scanf ( <str> , & lines ) ; for ( i = <int> ; i <= lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & value ) ; arr [ i ] [ j ] = value + arr [ i - <int> ] [ j - <int> ] ; if ( result < arr [ i ] [ j ] ) result = arr [ i ] [ j ] ; temp = value + arr [ i - <int> ] [ j ] ; if ( temp > arr [ i ] [ j ] ) arr [ i ] [ j ] = temp ; if ( result < temp ) result = temp ; } } printf ( <str> , result ) ; if ( -- cases == <int> ) break ; } return <int> ; }", "label": 0, "id": 4064}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 4065}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int a , b , t , val , val1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; val = gcd ( a , b ) ; val1 = lcm ( a , b ) ; printf ( <str> , val , val1 ) ; } return <int> ; }", "label": 1, "id": 4066}
{"input": "void initialize ( int lines ) ; int findSum ( int matrix [ <int> ] [ <int> ] , int lines ) ; int max ( int a , int b ) ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int findSum ( int matrix [ <int> ] [ <int> ] , int lines ) { int i = <int> ; while ( lines > <int> ) { for ( ; i < lines - <int> ; i ++ ) { matrix [ lines - <int> ] [ i ] = matrix [ lines - <int> ] [ i ] + max ( matrix [ lines - <int> ] [ i ] , matrix [ lines - <int> ] [ i + <int> ] ) ; } for ( i = <int> ; i < lines - <int> ; i ++ ) { matrix [ lines - <int> ] [ i ] = <int> ; } lines -- ; } return matrix [ lines ] [ lines ] ; } void initialize ( int lines ) { int matrix [ <int> ] [ <int> ] ; int i = <int> ; int a = <int> ; int val = <int> ; for ( ; i < lines ; i ++ ) { for ( ; a < lines ; a ++ ) { if ( a > i ) matrix [ i ] [ a ] = <int> ; else { scanf ( <str> , & matrix [ i ] [ a ] ) ; if ( matrix [ i ] [ a ] > <int> || matrix [ i ] [ a ] < <int> ) return ; } } a = <int> ; } val = findSum ( matrix , lines ) ; printf ( <str> , val ) ; } int main ( ) { int cases = <int> ; int lines = <int> ; int i = <int> ; scanf ( <str> , & cases ) ; if ( lines < <int> || lines > <int> ) { return - <int> ; } for ( ; i < cases ; i ++ ) { scanf ( <str> , & lines ) ; initialize ( lines ) ; } return <int> ; }", "label": 1, "id": 4067}
{"input": "int main ( ) { int t ; long long int a , b , n , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; n = a ; l = b ; while ( a != b ) { a > b ? ( a = a - b ) : ( b = b - a ) ; } printf ( <str> , a , ( n * l ) / a ) ; } return <int> ; }", "label": 0, "id": 4068}
{"input": "int main ( ) { long long int t , a , b , gcd , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( ( a != <int> ) || ( b != <int> ) ) { a = a % b ; if ( a == <int> ) { gcd = b ; break ; } b = b % a ; if ( b == <int> ) { gcd = a ; break ; } } printf ( <str> , gcd , m * n / gcd ) ; } return <int> ; }", "label": 0, "id": 4069}
{"input": "int main ( ) { int t , i , a [ <int> ] ; long long int n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min >= a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4070}
{"input": "int ar [ <int> ] ; void quick ( int arr [ ] , int low , int up ) ; int partition ( int arr [ ] , int low , int up ) ; int main ( ) { int t , n , i , a , b ; long long int sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; } quick ( ar , <int> , n - <int> ) ; sum = ar [ <int> ] * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; } void quick ( int arr [ ] , int low , int up ) { int pivloc ; if ( low >= up ) return ; pivloc = partition ( arr , low , up ) ; quick ( arr , low , pivloc - <int> ) ; quick ( arr , pivloc + <int> , up ) ; } int partition ( int arr [ ] , int low , int up ) { int temp , i , j , pivot ; i = low + <int> ; j = up ; pivot = arr [ low ] ; while ( i <= j ) { while ( arr [ i ] < pivot && i < up ) i ++ ; while ( arr [ j ] > pivot ) j -- ; if ( i < j ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i ++ ; j -- ; } else i ++ ; } arr [ low ] = arr [ j ] ; arr [ j ] = pivot ; return j ; }", "label": 0, "id": 4071}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int n , i ; scanf ( <str> , & n ) ; long long int A [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } int c = <int> , sum = <int> , key , f = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { key = A [ i ] ; if ( key <= A [ i + <int> ] ) { c ++ ; key = A [ i + <int> ] ; f = i ; } else { sum = sum + ( c * ( c + <int> ) ) / <int> ; c = <int> ; } } if ( f == n - <int> && c != n - <int> ) { sum = sum + ( c * ( c + <int> ) ) / <int> ; } if ( c == n - <int> ) { sum = sum + ( c * ( c + <int> ) ) / <int> ; } printf ( <str> , sum + n ) ; } }", "label": 0, "id": 4072}
{"input": "int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , x , y , b ; scanf ( <str> , & x , & y ) ; b = gcd ( x , y ) ; a = ( x * y ) / b ; printf ( <str> , b , a ) ; } return <int> ; }", "label": 0, "id": 4073}
{"input": "void main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { int n , s = <int> , j ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } while ( n != <int> ) { if ( a [ <int> ] > a [ <int> ] ) { s = s + a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) a [ i ] = a [ i + <int> ] ; } else { s = s + a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) a [ i ] = a [ i + <int> ] ; } n = n - <int> ; } printf ( <str> , s ) ; } }", "label": 2, "id": 4074}
{"input": "int main ( void ) { int n , i , j , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int rows , a [ <int> ] [ <int> ] ; scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; if ( rows == <int> ) printf ( <str> , a [ <int> ] [ <int> ] ) ; else if ( rows == <int> ) { if ( a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] > a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) printf ( <str> , a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; else printf ( <str> , a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; } else { for ( j = rows - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k ] ; else a [ j ] [ k ] += a [ j + <int> ] [ k + <int> ] ; } } if ( a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] > a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) printf ( <str> , a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; else printf ( <str> , a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; } } return <int> ; }", "label": 0, "id": 4075}
{"input": "int main ( ) { int T , N , i , j , * * arr , * v , col , sum = <int> , max = <int> ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; arr = ( int * * ) malloc ( sizeof ( int ) * ( N + <int> ) ) ; v = ( int * ) malloc ( sizeof ( int ) * ( N + <int> ) ) ; for ( i = <int> ; i <= N ; i ++ ) { arr [ i ] = ( int * ) malloc ( sizeof ( int ) * N ) ; v [ i ] = <int> ; } for ( i = <int> ; i <= N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } col = N ; while ( <int> ) { sum = <int> ; for ( i = <int> ; i <= N ; i ++ ) { sum = sum + arr [ i ] [ v [ i ] ] ; } max = ( max < sum ) ? sum : max ; if ( col == <int> ) { col = N ; } if ( v [ col ] + <int> <= col ) { v [ col ] ++ ; col = col - <int> ; } else { if ( ( v [ <int> ] + <int> ) > <int> && ( v [ N ] + <int> ) > N ) { break ; } else { col -- ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 4076}
{"input": "long min ( long a , long b ) { return a < b ? a : b ; } int main ( ) { int t ; long n , i , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; m = min ( arr [ <int> ] , arr [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { m = min ( m , arr [ i ] ) ; } printf ( <str> , ( m * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 4077}
{"input": "int main ( ) { int T , i , min , n ; int * A ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; A = ( int * ) malloc ( n * sizeof ( int ) ) ; scanf ( <str> , & A [ <int> ] ) ; min = A [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; if ( min > A [ i ] ) min = A [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4078}
{"input": "int main ( ) { int t , r , s = <int> , temp = <int> , i , j ; long int data [ <int> ] [ <int> ] , maxsum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & data [ i ] [ j ] ) ; } } for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { data [ i ] [ j ] = data [ i - <int> ] [ j ] + data [ i ] [ j ] ; } else { if ( ( data [ i ] [ j ] + data [ i - <int> ] [ j ] ) > ( data [ i ] [ j ] + data [ i - <int> ] [ j - <int> ] ) ) data [ i ] [ j ] = data [ i ] [ j ] + data [ i - <int> ] [ j ] ; else data [ i ] [ j ] = data [ i ] [ j ] + data [ i - <int> ] [ j - <int> ] ; } } } for ( i = r - <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( maxsum < data [ i ] [ j ] ) maxsum = data [ i ] [ j ] ; } } printf ( <str> , maxsum ) ; r = s = temp = <int> ; } return <int> ; }", "label": 1, "id": 4079}
{"input": "int main ( ) { int a , b , gcd , i , j , n ; scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; printf ( <str> , gcd , ( a * b ) / gcd ) ; } } } return <int> ; }", "label": 2, "id": 4080}
{"input": "int main ( void ) { int t , a [ <int> ] [ <int> ] , row , i , j , max ; S ( d , t ) ; while ( t -- ) { S ( d , row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { S ( d , a [ i ] [ j ] ) ; } } for ( i = row - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { max = <int> ; max = ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; a [ i ] [ j ] += max ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4081}
{"input": "int main ( ) { int t , i , n , j , temp ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , cnt = <int> ; scanf ( <str> , & n ) ; int * arr = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( j = <int> ; j < n ; j ++ ) { if ( j + <int> < n && arr [ j ] > arr [ j + <int> ] ) cnt = cnt + arr [ j + <int> ] ; if ( j + <int> < n && arr [ j ] < arr [ j + <int> ] ) { cnt = cnt + arr [ j ] ; temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } printf ( <str> , cnt ) ; } return <int> ; }", "label": 1, "id": 4082}
{"input": "int gcd_fun ( int a , int b ) { int x , gcd ; if ( a > b ) { x = b ; } else { x = a ; } while ( x >= <int> ) { if ( a % x == <int> && b % x == <int> ) { gcd = x ; return gcd ; } x -- ; } return <int> ; } int main ( ) { int a , b , test , i , gc , lc ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & a , & b ) ; gc = gcd_fun ( a , b ) ; lc = ( a * b ) / gc ; printf ( <str> , gc , lc ) ; } return <int> ; }", "label": 1, "id": 4083}
{"input": "int main ( void ) { int sum [ <int> ] , t , arr [ <int> ] , n , i , j , big , k [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; k [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( j == <int> ) sum [ <int> ] = k [ <int> ] + arr [ <int> ] ; else { if ( k [ j ] > k [ j - <int> ] ) sum [ j ] = arr [ j ] + k [ j ] ; else sum [ j ] = arr [ j ] + k [ j - <int> ] ; } } for ( j = <int> ; j <= i ; j ++ ) k [ j ] = sum [ j ] ; } big = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( big < sum [ i ] ) big = sum [ i ] ; } printf ( <str> , big ) ; t -- ; } return <int> ; }", "label": 0, "id": 4084}
{"input": "int main ( void ) { int x , y , l , g ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; if ( x < y ) { g = x ; l = y ; } else { l = x ; g = y ; } while ( x % g != <int> || y % g != <int> ) { g -- ; } while ( l % x != <int> || l % y != <int> ) { l ++ ; } printf ( <str> , l , g ) ; return <int> ; }", "label": 1, "id": 4085}
{"input": "int main ( ) { int i , t ; unsigned long long int j , n ; unsigned long long int pre , in ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { pre = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & in ) ; if ( pre > in ) pre = in ; } printf ( <str> , ( pre * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 4086}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int z = n - <int> ; for ( i = z ; i >= <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else if ( a [ i ] [ j + <int> ] >= a [ i ] [ j ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 4087}
{"input": "int a [ <int> ] [ <int> ] , b [ <int> ] ; int fin ( ) { int x = <int> , c ; while ( ( c = getcx ) < <char> || c > <char> ) ; while ( c >= <char> && c <= <char> ) x = ( x << <int> ) + ( x << <int> ) + c - <int> , c = getcx ; return x ; } main ( ) { int T , n , c , s = <int> , i , j , k ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n - <int> ; j ++ ) for ( i = <int> ; i < <int> * ( n - <int> ) ; ) { c = fin ( ) ; for ( k = <int> ; k < <int> * ( n - j - <int> ) ; k ++ , i ++ ) a [ i ] [ j ] = c ; } for ( k = <int> ; k < n ; k ++ ) b [ k ] = fin ( ) ; ; for ( k = <int> ; k <= n / <int> ; k ++ ) { a [ <int> * k ] [ j ] = b [ k ] ; if ( k > <int> ) a [ <int> * k - <int> ] [ j ] = b [ k ] ; } a [ <int> * k - <int> ] [ j ] = b [ k ] ; for ( ; k <= n ; k ++ ) { a [ <int> * k ] [ j ] = b [ k - <int> ] ; a [ <int> * k + <int> ] [ j ] = b [ k ] ; } c = <int> ; for ( i = <int> ; i < <int> * ( n - <int> ) ; i ++ , s = <int> ) { for ( j = <int> ; j < n ; j ++ ) s += a [ i ] [ j ] ; if ( s > c ) c = s ; } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 4088}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , num ; long min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num ) ; if ( min > num ) min = num ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 1, "id": 4089}
{"input": "int main ( ) { int g , l , remainder , numerator , denominator , n , i ; double a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; numerator = a ; denominator = b ; remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } g = denominator ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 4090}
{"input": "void LcmHcf ( long x , long y ) { long a = x , b = y , t ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } printf ( <str> , ( a , ( x * y ) / a ) ) ; } int main ( ) { int n , i ; long a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; LcmHcf ( a , b ) ; } return <int> ; }", "label": 1, "id": 4091}
{"input": "int max_sum ( int triangle [ ] [ <int> ] , int row ) { int temp ; int i , j ; for ( i = <int> ; i < row ; i ++ ) { triangle [ i ] [ <int> ] += triangle [ i - <int> ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { temp = triangle [ i - <int> ] [ j ] > triangle [ i - <int> ] [ j - <int> ] ? triangle [ i - <int> ] [ j ] : triangle [ i - <int> ] [ j - <int> ] ; triangle [ i ] [ j ] += temp ; } } i -- ; temp = triangle [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( triangle [ i ] [ j ] > temp ) temp = triangle [ i ] [ j ] ; } return temp ; } int main ( ) { int test_cases ; int rows [ <int> ] ; char str [ <int> ] ; char * temp ; int i , j , num ; int triangle [ <int> ] [ <int> ] ; scanf ( <str> , & test_cases ) ; while ( test_cases -- ) { scanf ( <str> , & rows [ test_cases ] ) ; fflush ( stdin ) ; for ( i = <int> ; i < rows [ test_cases ] ; i ++ ) { gets ( str ) ; temp = strtok ( str , delimiter ) ; j = <int> ; while ( temp ) { sscanf ( temp , <str> , & triangle [ i ] [ j ] ) ; temp = strtok ( NULL , delimiter ) ; j ++ ; } } printf ( <str> , max_sum ( triangle , rows [ test_cases ] ) ) ; } return <int> ; }", "label": 1, "id": 4092}
{"input": "int max ( int a , int b ) ; int main ( ) { int n ; scanf ( <str> , & n ) ; int num1 [ n ] ; int num2 [ n ] ; int i ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & num1 [ i - <int> ] , & num2 [ i - <int> ] ) ; } int gcd [ n ] ; int lcm [ n ] ; int j ; int k ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= num1 [ i - <int> ] ; j ++ ) { if ( num1 [ i - <int> ] % j == <int> && num2 [ i - <int> ] % j == <int> ) gcd [ i - <int> ] = j ; } for ( k = max ( num1 [ i - <int> ] , num2 [ i - <int> ] ) ; k <= ( num1 [ i - <int> ] * num2 [ i - <int> ] ) ; k ++ ) { if ( k % num1 [ i - <int> ] == <int> && k % num2 [ i - <int> ] == <int> ) lcm [ i - <int> ] = k ; } printf ( <str> , gcd [ i - <int> ] , lcm [ i - <int> ] ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else if ( b > a ) return b ; else return a ; }", "label": 2, "id": 4093}
{"input": "int main ( ) { int testCases ; scanf ( <str> , & testCases ) ; while ( testCases -- ) { int num1 , num2 ; scanf ( <str> , & num1 , & num2 ) ; int gcd = GCD ( num1 , num2 ) ; printf ( <str> , gcd ) ; printf ( <str> , ( num1 * num2 ) / gcd ) ; } return <int> ; } int GCD ( int num1 , int num2 ) { if ( num2 == <int> ) return num1 ; return GCD ( num2 , num1 % num2 ) ; }", "label": 1, "id": 4094}
{"input": "void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { long long int a , b , n , min , max , t , gcd , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } t = min ; while ( ( max % min ) != <int> ) { min = ( max % min ) ; max = t ; t = min ; } gcd = min ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } if ( ( max % min ) == <int> ) { lcm = max ; } else lcm = max * min ; printf ( <str> , gcd , lcm ) ; t -- ; } }", "label": 2, "id": 4095}
{"input": "int main ( ) { int t ; long long int a , b , pro , tmp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; pro = a * b ; if ( b < a ) { tmp = a ; a = b ; b = tmp ; } while ( ( b % a ) != <int> ) { tmp = ( b % a ) ; b = a ; a = tmp ; } printf ( <str> , a , ( pro / a ) ) ; } return <int> ; }", "label": 0, "id": 4096}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4097}
{"input": "int gcd ( int m , int n ) { int r ; while ( n > <int> ) { r = m % n ; m = n ; n = r ; } return ( m ) ; } int main ( ) { int x , y , j , t , * ans ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & x , & y ) ; * ( ans + j * <int> ) = gcd ( x , y ) ; * ( ans + j * <int> + <int> ) = x * y / ( * ( ans + j * <int> ) ) ; } for ( j = <int> ; j < t ; j ++ ) { printf ( <str> , * ( ans + j * <int> ) , * ( ans + j * <int> + <int> ) ) ; } return <int> ; }", "label": 3, "id": 4098}
{"input": "int main ( ) { int i , t ; scanf ( <str> , & t ) ; while ( t -- ) { long long n ; scanf ( <str> , & n ) ; long long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; long long min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } long long s = min * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 4099}
{"input": "int a [ <int> ] [ <int> ] ; int answer [ <int> ] [ <int> ] ; int g , h ; int ans ( int a [ <int> ] [ <int> ] , int i , int j ) { if ( answer [ i ] [ j ] != <int> ) return answer [ i ] [ j ] ; if ( i < <int> || j < <int> ) return <int> ; if ( i == <int> && j == <int> ) { answer [ i ] [ j ] = a [ i ] [ j ] ; return answer [ i ] [ j ] ; } else { answer [ i ] [ j ] = ( a [ i ] [ j ] + max ( ans ( a , i - <int> , j ) , ans ( a , i - <int> , j - <int> ) ) ) ; return answer [ i ] [ j ] ; } } int main ( int argc , char * * argv ) { int n , r , i , j , count = <int> , se ; int an [ <int> ] ; for ( g = <int> ; g < <int> ; g ++ ) { for ( h = <int> ; h <= g ; h ++ ) { answer [ g ] [ h ] = <int> ; } } scanf ( <str> , & n ) ; while ( n ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } se = ans ( a , r - <int> , i ) ; for ( i = <int> ; i < r ; i ++ ) { if ( ans ( a , r - <int> , i ) > se ) se = ans ( a , r - <int> , i ) ; } an [ count ] = se ; count ++ ; n -- ; } for ( i = <int> ; i < count ; i ++ ) printf ( <str> , an [ i ] ) ; return ( EXIT_SUCCESS ) ; }", "label": 2, "id": 4100}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , <unk> [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & <unk> [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { <unk> [ i ] [ j ] += ( <unk> [ i + <int> ] [ j + <int> ] > <unk> [ i + <int> ] [ j ] ? <unk> [ i + <int> ] [ j + <int> ] : <unk> [ i + <int> ] [ j ] ) ; } } printf ( <str> , <unk> [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4101}
{"input": "int main ( ) { int A , B , x , i , T , GCD , LCM ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { x = B ; } else { x = A ; } for ( i = <int> ; i <= x ; ++ i ) { if ( A % i == <int> && B % i == <int> ) { GCD = i ; } } printf ( <str> , GCD ) ; LCM = A * B / GCD ; printf ( <str> , LCM ) ; } return <int> ; }", "label": 1, "id": 4102}
{"input": "int main ( ) { int t ; int n1 , n2 , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; m = n1 ; n = n2 ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( n1 * n2 ) / m ) ; } return <int> ; }", "label": 1, "id": 4103}
{"input": "short int sum [ <int> ] [ <int> ] ; short int curr [ <int> ] ; int main ( ) { int test , lines , i = <int> , prsnt = <int> , j = <int> ; scanf ( <str> , & test ) ; while ( test -- > <int> ) { prsnt = <int> ; j = <int> ; i = <int> ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < <int> ; i ++ ) { sum [ <int> ] [ i ] = sum [ <int> ] [ i ] = curr [ i ] = - <int> ; } while ( lines >= prsnt ) { for ( i = <int> ; curr [ i ] > - <int> ; i ++ ) { curr [ i ] = - <int> ; } for ( i = <int> ; i < prsnt ; i ++ ) scanf ( <str> , & curr [ i ] ) ; i = <int> ; if ( prsnt == <int> ) { while ( curr [ i ] != - <int> ) { sum [ <int> ] [ i ] = curr [ i ] ; i ++ ; } } else { j = <int> ; for ( i = <int> ; sum [ <int> ] [ i ] != - <int> ; i ++ ) { sum [ <int> ] [ j ] = sum [ <int> ] [ i ] + curr [ i ] ; j ++ ; sum [ <int> ] [ j ] = sum [ <int> ] [ i ] + curr [ i + <int> ] ; j ++ ; } } prsnt ++ ; for ( i = <int> ; sum [ <int> ] [ i ] != - <int> ; i ++ ) { sum [ <int> ] [ i ] = sum [ <int> ] [ i ] ; sum [ <int> ] [ i ] = - <int> ; } } int max = sum [ <int> ] [ <int> ] ; ; for ( i = <int> ; sum [ <int> ] [ i ] > - <int> ; i ++ ) { if ( sum [ <int> ] [ i ] > max ) max = sum [ <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 4104}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , x , sum ; scanf ( <str> , & n ) ; sum = <int> ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; x = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( x > a [ i ] ) x = a [ i ] ; } sum = x * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 4105}
{"input": "int main ( ) { int a [ n ] , b , t , i , j , m , sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & b ) ; for ( i = <int> ; i < b ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < b ; i ++ ) { m = i ; j = m + <int> ; if ( a [ i ] < a [ j ] ) { sum = sum + a [ i ] ; a [ j ] = a [ i ] ; } else if ( a [ i ] > a [ j ] ) sum = sum + a [ j ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4106}
{"input": "long int min = <int> ; int main ( void ) { int t , i ; long int n , arr [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] <= min ) min = arr [ i ] ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 1, "id": 4107}
{"input": "int sum ( int , char [ <int> ] [ <int> ] , int , int ) ; int max ( int , int ) ; int scanInt ( ) ; void printInt ( int ) ; int M [ <int> ] [ <int> ] ; int main ( ) { char a [ <int> ] [ <int> ] = { <int> } ; int n , r , o , p , q , temp ; n = scanInt ( n ) ; while ( n -- ) { r = scanInt ( ) ; for ( o = <int> ; o < r ; o ++ ) for ( q = <int> ; q <= o ; q ++ ) { a [ o ] [ q ] = ( char ) scanInt ( ) ; M [ o ] [ q ] = - <int> ; } printf ( <str> , sum ( r , a , <int> , <int> ) ) ; } } int sum ( int n , char a [ <int> ] [ <int> ] , int x , int y ) { char L1 [ <int> ] [ <int> ] , L2 [ <int> ] [ <int> ] ; int i , j , i1 , j1 , k , m = <int> ; if ( M [ x ] [ y ] >= <int> ) { return M [ x ] [ y ] ; } else { if ( n == <int> ) { M [ x ] [ y ] = a [ <int> ] [ <int> ] ; return M [ x ] [ y ] ; } else { for ( i = <int> , i1 = <int> ; i < n ; i ++ , i1 ++ ) for ( j = <int> , j1 = <int> ; j < i ; j ++ , j1 ++ ) { L1 [ i1 ] [ j1 ] = a [ i ] [ j ] ; } for ( i = <int> , i1 = <int> ; i < n ; i ++ , i1 ++ ) for ( j = <int> , j1 = <int> ; j <= i ; j1 ++ , j ++ ) { L2 [ i1 ] [ j1 ] = a [ i ] [ j ] ; } M [ x ] [ y ] = a [ <int> ] [ <int> ] + max ( sum ( n - <int> , L1 , x , y + <int> ) , sum ( n - <int> , L2 , x + <int> , y + <int> ) ) ; return M [ x ] [ y ] ; } } } int max ( int a , int b ) { return ( a > b ) ? a : b ; } int scanInt ( ) { int x = <int> ; char ch ; ch = getchar ( ) ; while ( ch > <char> || ch < <char> ) { ch = getchar ( ) ; } while ( ch <= <char> && ch >= <char> ) { x = ( x << <int> ) + ( x << <int> ) + ch - <char> ; ch = getchar ( ) ; } return x ; } void printInt ( int x ) { int i = <int> ; char ch [ <int> ] ; while ( x > <int> ) { ch [ i ++ ] = ( char ) ( <char> + x ) ; x /= <int> ; } while ( i -- ) { putchar ( ch [ i ] ) ; } }", "label": 2, "id": 4108}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; int test , count ; count = <int> ; printf ( <str> ) ; scanf ( <str> , & test ) ; while ( count < test ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; count ++ ; } }", "label": 1, "id": 4109}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , k , lcm ; scanf ( <str> , & i , & j ) ; for ( k = <int> ; k <= ( i * j ) ; k ++ ) { if ( k % i == <int> && k % j == <int> ) { lcm = k ; break ; } } int hcf ; hcf = ( i * j ) / lcm ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 4110}
{"input": "int read_int ( ) { char c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; int ret = <int> ; while ( c >= <char> && c <= <char> ) { ret = <int> * ret + c - <int> ; c = gc ( ) ; } return ret ; } int main ( ) { int t ; t = read_int ( ) ; while ( t -- ) { int n ; n = read_int ( ) ; int a , i ; long long int min ; for ( i = <int> ; i < n ; i ++ ) { a = read_int ( ) ; if ( i == <int> ) { min = a ; } else if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4111}
{"input": "int main ( ) { int count , i , j ; unsigned long long int x , N , T , A [ <int> ] ; scanf ( <str> , & T ) ; if ( T > <int> ) return ; while ( T -- ) { scanf ( <str> , & N ) ; count = N ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( i = <int> ; i < N ; i ++ ) { x = A [ i ] ; for ( j = i + <int> ; j < N ; j ++ ) { if ( x > A [ j ] ) { count ++ ; } x = A [ j ] ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 2, "id": 4112}
{"input": "int main ( ) { int c , z = <int> , k , n , i , m , j , a [ <int> ] [ <int> ] , churn = <int> , sum = <int> ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } k = m - <int> ; for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = z ; j <= k ; j ++ ) { if ( a [ i ] [ j ] > sum ) { sum = a [ i ] [ j ] ; c = j ; } } z = c - <int> ; k = z + <int> ; churn += sum ; sum = <int> ; } printf ( <str> , churn ) ; churn = <int> ; } return <int> ; }", "label": 1, "id": 4113}
{"input": "int main ( ) { int t ; long int n , a , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 4114}
{"input": "int main ( ) { int i , tcase , min ; scanf ( <str> , & tcase ) ; while ( tcase -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4115}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned int n , i ; scanf ( <str> , & n ) ; unsigned int a [ n ] , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4116}
{"input": "int main ( ) { int t , a , b , max , min , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } g = gcd ( max , min ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } } int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return ( b , a % b ) ; }", "label": 1, "id": 4117}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] = { <int> } ; int n , i = <int> , j = <int> ; scanf ( <str> , & n ) ; while ( ( i + j ) <= <int> * ( n - <int> ) ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } i ++ ; } i = <int> , j = <int> ; int sum = a [ <int> ] [ <int> ] ; if ( n == <int> ) printf ( <str> , sum ) ; else { while ( i < n - <int> ) { if ( ( ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) >= ( a [ i ] [ j + <int> ] + a [ i + <int> ] [ j + <int> ] ) ) && ( ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) >= ( a [ i ] [ j + <int> ] + a [ i + <int> ] [ j + <int> ] ) ) ) sum = sum + a [ i ] [ j ] ; else { sum = sum + a [ i ] [ j + <int> ] ; j = j + <int> ; } i ++ ; } } if ( n != <int> ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) sum = sum + a [ i ] [ j ] ; else sum = sum + a [ i ] [ j + <int> ] ; printf ( <str> , sum ) ; } } return <int> ; }", "label": 1, "id": 4118}
{"input": "int main ( void ) { long long int t , n , a [ <int> ] , i , cost ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { cost = cost + a [ i + <int> ] ; } else if ( a [ i ] < a [ i + <int> ] ) { cost = cost + a [ i ] ; a [ i + <int> ] = a [ i ] ; } } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 4119}
{"input": "main ( ) { int a [ <int> ] [ <int> ] ; int t , r , num ; scanf ( <str> , & t ) ; int i , p , q ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & r ) ; for ( p = <int> ; p < r ; p ++ ) { for ( q = <int> ; q <= p ; q ++ ) { a [ p ] [ q ] = <unk> ( ) ; } } printf ( <str> , <unk> ( a , r ) ) ; } } int <unk> ( ) { int input ; char c = <int> ; while ( c < <int> ) { scanf ( <str> , & c ) ; } input = <int> ; while ( c > <int> ) { input = <int> * input + c - <char> ; scanf ( <str> , & c ) ; } return input ; } int <unk> ( int a [ <int> ] [ <int> ] , int r ) { int i , j , max ; for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < r - <int> ; j ++ ) { max = findmax ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + max ; } } return a [ <int> ] [ <int> ] ; } int findmax ( int p , int q ) { return ( ( p > q ) ? p : q ) ; }", "label": 1, "id": 4120}
{"input": "int main ( ) { int noele [ <int> ] , count [ <int> ] , ele [ <int> ] [ <int> ] ; int T , N , A [ <int> ] ; int a , b ; scanf ( <str> , & T ) ; for ( a = <int> ; a < T ; a ++ ) { scanf ( <str> , & N ) ; noele [ a ] = N ; for ( b = <int> ; b < N ; b ++ ) { scanf ( <str> , & A [ b ] ) ; ele [ a ] [ b ] = A [ b ] ; } } for ( a = <int> ; a < T ; a ++ ) { count [ a ] = <int> ; for ( b = <int> ; b < noele [ a ] ; b ++ ) { while ( ele [ a ] [ b ] < ele [ a ] [ b + <int> ] ) { count [ a ] ++ ; b ++ ; } } printf ( <str> , count [ a ] ) ; } return <int> ; }", "label": 1, "id": 4121}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int find ( int tri [ ] [ MAX ] , int best [ ] [ MAX ] , int i , int j , int rows ) { if ( i == rows - <int> ) return tri [ i ] [ j ] ; else if ( best [ i ] [ j ] != <int> ) return best [ i ] [ j ] ; return best [ i ] [ j ] = ( tri [ i ] [ j ] + max ( find ( tri , best , i + <int> , j , rows ) , find ( tri , best , i + <int> , j + <int> , rows ) ) ) ; } int main ( ) { int t , rows , i , j ; int tri [ MAX ] [ MAX ] ; int best [ MAX ] [ MAX ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { best [ i ] [ j ] = <int> ; scanf ( <str> , & tri [ i ] [ j ] ) ; } printf ( <str> , find ( tri , best , <int> , <int> , rows ) ) ; } }", "label": 0, "id": 4122}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( void ) { int hcf , lcm ; int T ; int A , B ; scanf ( <str> , & T ) ; while ( T -- > <int> ) { scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; hcf = gcd ( A , B ) ; printf ( <str> , hcf , A * B / hcf ) ; } return <int> ; }", "label": 1, "id": 4123}
{"input": "int main ( ) { long long int T , A , B , i , LCM ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { if ( A % B == <int> ) { LCM = A ; } else { for ( i = <int> ; i <= <int> ; i ++ ) { if ( ( A * i ) % B == <int> ) { LCM = A * i ; break ; } } } } else { if ( B % A == <int> ) { LCM = B ; } else { for ( i = <int> ; i <= <int> ; i ++ ) { if ( ( B * i ) % A == <int> ) { LCM = B * i ; break ; } } } } printf ( <str> , ( A * B ) / LCM , LCM ) ; LCM = <int> ; } return <int> ; }", "label": 3, "id": 4124}
{"input": "unsigned long int gcd ( unsigned long int , unsigned long int ) ; unsigned long long int lcm ( unsigned long int , unsigned long int ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; unsigned long int a , b , temp ; unsigned long int hcf ; unsigned long long int <unk> ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } hcf = gcd ( a , b ) ; <unk> = lcm ( a , b ) ; printf ( <str> , hcf , <unk> ) ; } return <int> ; } unsigned long int gcd ( unsigned long int a , unsigned long int b ) { if ( a == <int> ) return b ; else { return gcd ( b % a , a ) ; } } unsigned long long int lcm ( unsigned long int a , unsigned long int b ) { int i ; for ( i = <int> ; ; ++ i ) { if ( ( b * i ) % a == <int> ) return b * i ; } }", "label": 2, "id": 4125}
{"input": "int main ( ) { int t , l , a [ <int> ] , b [ <int> ] , sum , n , i ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; a [ n ] = <int> ; b [ <int> ] = <int> ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] <= a [ i + <int> ] ) { b [ i + <int> ] = b [ i ] + <int> ; } else { b [ i + <int> ] = <int> ; } sum = sum + b [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4126}
{"input": "int main ( ) { int t , gcd , remainder , keep , temp ; scanf ( <str> , & t ) ; long long int product , lcm ; int a , b ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; product = ( a * b ) ; int small = ( a < b ) ? a : b ; int big = ( a > b ) ? a : b ; if ( ( big % small ) == <int> ) gcd = small ; else { remainder = ( big % small ) ; keep = small ; while ( remainder != <int> ) { temp = remainder ; remainder = ( keep % remainder ) ; keep = temp ; } gcd = keep ; } lcm = product / ( long long int ) gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 4127}
{"input": "int main ( ) { int s , j , r , temp , k , n ; long int a [ <int> ] ; scanf ( <str> , & s ) ; while ( s -- ) { r = <int> ; temp = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( k = <int> ; k < n ; k ++ ) { if ( a [ k ] > a [ k + <int> ] ) r = r + a [ k + <int> ] ; else { temp = a [ k ] ; a [ k ] = a [ k + <int> ] ; a [ k + <int> ] = temp ; r = r + a [ k + <int> ] ; } } printf ( <str> , r ) ; } return <int> ; }", "label": 1, "id": 4128}
{"input": "int max ( int a , int b ) ; int main ( ) { int n ; int t ; int i , j ; scanf ( <str> , & t ) ; int a [ <int> ] [ <int> ] ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int a , int b ) { return ( ( a > b ) ? a : b ) ; }", "label": 0, "id": 4129}
{"input": "int gl ( int , int ) ; int main ( ) { int num , i , j , y , l ; scanf ( <str> , & num ) ; int a [ num ] [ <int> ] ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } fflush ( stdin ) ; } for ( i = <int> ; i <= num - <int> ; i ++ ) { if ( a [ i ] [ <int> ] > a [ i ] [ <int> ] ) { y = gl ( a [ i ] [ <int> ] , a [ i ] [ <int> ] ) ; printf ( <str> , y ) ; } else { y = gl ( a [ i ] [ <int> ] , a [ i ] [ <int> ] ) ; printf ( <str> , y ) ; } l = ( a [ i ] [ <int> ] * a [ i ] [ <int> ] ) / y ; printf ( <str> , l ) ; } return <int> ; } int gl ( int a , int b ) { int k , x ; for ( k = <int> ; k <= a ; k ++ ) { if ( a % k == <int> && b % k == <int> ) { x = k ; } } return x ; }", "label": 2, "id": 4130}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , n , i , j , b , c ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ j ] [ i ] ) ; } } for ( j = <int> ; j < t ; j ++ ) { for ( b = <int> ; b < n - <int> ; b ++ ) { for ( i = <int> ; i < b - n - <int> ; i ++ ) { if ( a [ j ] [ i ] < a [ j ] [ i + <int> ] ) c = a [ j ] [ i ] ; a [ j ] [ i ] = a [ j ] [ i + <int> ] ; a [ j ] [ i + <int> ] = c ; } } } for ( j = <int> ; j < t ; j ++ ) printf ( <str> , a [ j ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 4131}
{"input": "int main ( ) { int n ; while ( n -- ) { int i , j ; for ( i = <int> ; i <= <int> ; i ++ ) { for ( j = <int> ; j <= <int> ; j ++ ) if ( j <= i ) printf ( i ++ ) ; else printf ( <str> ) ; } printf ( <str> ) ; } return <int> ; }", "label": 3, "id": 4132}
{"input": "int main ( ) { int i , a , b , gcd , lcm ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; a = abs ( a ) ; b = abs ( b ) ; if ( a == <int> || b == <int> ) lcm = <int> ; for ( i = <int> ; i <= a && i <= b ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4133}
{"input": "main ( ) { int t ; long long int i , n , ans ; scanf ( <str> , & t ) ; while ( t -- ) { ans = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } }", "label": 0, "id": 4134}
{"input": "int main ( ) { int t , x , max ; scanf ( <str> , & t ) ; int a [ <int> ] [ <int> ] ; int s , p , i , j ; for ( x = <int> ; x < t ; x ++ ) { scanf ( <str> , & s ) ; p = <int> ; for ( i = <int> ; i < s ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } max = a [ i ] [ <int> ] ; for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ <int> ] ) max = a [ i ] [ j ] ; } p = p + max ; } printf ( <str> , p - a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4135}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; int i , j , sum1 , sum2 , c ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] += arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] += arr [ i ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4136}
{"input": "int main ( ) { long long int t , g , a , b , i = <int> , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; while ( i <= a , i <= b ) { if ( a % i == <int> && b % i == <int> ) g = i ; } printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 2, "id": 4137}
{"input": "int main ( ) { int testCases = <int> , rows , * * arr , i , j , max ; scanf ( <str> , & testCases ) ; while ( testCases -- ) { scanf ( <str> , & rows ) ; arr = ( int * * ) malloc ( rows * sizeof ( int ) ) ; for ( i = <int> ; i < rows ; i ++ ) arr [ i ] = ( int * ) malloc ( rows * sizeof ( int ) ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; else if ( j == i ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; else arr [ i ] [ j ] = ( arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] > arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ) ? arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] : arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; } } max = arr [ rows - <int> ] [ <int> ] ; for ( j = <int> ; j < rows ; j ++ ) { if ( arr [ rows - <int> ] [ j ] > max ) max = arr [ rows - <int> ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 4138}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] += arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] += arr [ i ] [ j + <int> ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4139}
{"input": "int main ( void ) { long int i , x , j , T , y , A , B , k ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & A , & B ) ; x = A * B ; y = A > B ? B : A ; for ( k = y ; k >= <int> ; k -- ) { if ( A % k == <int> && B % k == <int> ) { printf ( <str> , k ) ; break ; } } for ( j = <int> ; j <= y ; j ++ ) { if ( A % j == <int> && B % j == <int> ) x = x / j ; } printf ( <str> , x ) ; } return <int> ; }", "label": 2, "id": 4140}
{"input": "int main ( ) { int n , i , j , a [ <int> ] , sum , b , k , f ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { sum = <int> ; scanf ( <str> , & b ) ; for ( j = <int> ; j < ( b * ( b + <int> ) * ( b + <int> ) ) / <int> ; j ++ ) scanf ( <str> , & a [ j ] ) ; k = a [ <int> ] ; for ( k = <int> ; k < j ; ) { if ( a [ k ] > a [ k + <int> ] ) { sum = sum + f + a [ k ] ; f = a [ k ] ; } else { sum = sum + f + a [ k + <int> ] ; f = a [ ++ k ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 4141}
{"input": "int main ( ) { long i , j , a [ <int> ] , n , count , k ; int t , m = <int> ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( m <= t ) { count = <int> ; printf ( <str> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { k = i ; for ( j = i ; j < n ; j ++ ) { if ( a [ k ] <= a [ j ] ) { count ++ ; k = j ; } else break ; } } printf ( <str> , count ) ; m ++ ; } return <int> ; }", "label": 3, "id": 4142}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , s = <int> , r = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { s = <int> ; for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) s ++ ; else ; break ; } r += s ; } printf ( <str> , r + <int> ) ; } }", "label": 1, "id": 4143}
{"input": "int main ( ) { int t , arr [ <int> ] [ <int> ] = { <int> } , i , n , j ; int max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) arr [ i ] [ j ] += arr [ i - <int> ] [ j ] ; else if ( j == i ) arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; else if ( ( arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ) > ( arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ) ) arr [ i ] [ j ] = arr [ i ] [ j ] + ( arr [ i - <int> ] [ j ] ) ; else arr [ i ] [ j ] = arr [ i ] [ j ] + ( arr [ i - <int> ] [ j - <int> ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { if ( max < arr [ n ] [ i ] ) max = arr [ n ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4144}
{"input": "int main ( void ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , min , max ; scanf ( <str> , & a ) ; min = max = a ; scanf ( <str> , & b ) ; min = min < b ? min : b ; max = max > b ? max : b ; for ( i = max ; i % a || i % b ; i ++ ) ; for ( j = min ; a % j || b % j ; j -- ) ; printf ( <str> , j , i ) ; } return <int> ; }", "label": 2, "id": 4145}
{"input": "int main ( ) { int t , x , y , a , b , lcm , gcd , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { c = b ; b = a % b ; a = c ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4146}
{"input": "int main ( ) { int i , j , n , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; while ( n > <int> ) { for ( i = n - <int> ; i > <int> ; i -- ) if ( a [ n - <int> ] [ i ] > a [ n - <int> ] [ i - <int> ] ) a [ n - <int> ] [ i - <int> ] += a [ n - <int> ] [ i ] ; else a [ n - <int> ] [ i - <int> ] += a [ n - <int> ] [ i - <int> ] ; n -- ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4147}
{"input": "int main ( ) { int t ; double a , b , c , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = <int> ; lcm = <int> ; c = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } gcd = a ; lcm = c / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4148}
{"input": "int maxi ( int a , int b ) { return a < b ? b : a ; } int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( <str> , & n ) ; int vec1 [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { vec1 [ i ] [ j ] = vec1 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else if ( j == i ) { vec1 [ i ] [ j ] = vec1 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } else if ( vec1 [ i - <int> ] [ j ] > vec1 [ i - <int> ] [ j - <int> ] ) { vec1 [ i ] [ j ] = vec1 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else { vec1 [ i ] [ j ] = vec1 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } } } max = vec1 [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( vec1 [ n ] [ i ] > max ) max = vec1 [ n ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4149}
{"input": "typedef struct queue { int f ; int r ; int <unk> ; int size ; int * arr ; } q ; q * <unk> ( int c ) { q * Q = ( q * ) malloc ( sizeof ( q ) ) ; Q -> f = - <int> ; Q -> r = - <int> ; Q -> <unk> = c ; Q -> size = <int> ; Q -> arr = ( int * ) malloc ( c * sizeof ( int ) ) ; return Q ; } void <unk> ( q * Q , int data ) { if ( Q -> f == - <int> && Q -> r == - <int> ) { Q -> f = <int> ; Q -> r = <int> ; Q -> arr [ Q -> f ] = data ; } else { Q -> arr [ ++ Q -> r ] = data ; } Q -> size ++ ; } int <unk> ( q * Q ) { return Q -> arr [ Q -> f ++ ] ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { q * Q = <unk> ( <int> ) ; int n , i , j , max ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { int a [ i ] ; for ( j = <int> ; j < i ; j ++ ) scanf ( <str> , & a [ j ] ) ; if ( i == <int> ) { <unk> ( Q , a [ <int> ] ) ; max = a [ <int> ] ; } else { for ( j = <int> ; j <= i - <int> ; j ++ ) { <unk> ( Q , Q -> arr [ Q -> f ] + a [ j - <int> ] ) ; } <unk> ( Q ) ; } } for ( i = Q -> f ; i < Q -> r ; i ++ ) { if ( max < Q -> arr [ i ] ) max = Q -> arr [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 4150}
{"input": "void getContent ( int size ) ; int returnGreater ( int a , int b ) ; int main ( ) { int n ; int numberOfLines ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & numberOfLines ) ; if ( numberOfLines <= MAX_DATA ) { getContent ( numberOfLines ) ; } } return <int> ; } void getContent ( int size ) { int x , y ; int content [ size ] [ size ] ; int a , b ; int temp_y = <int> ; for ( x = <int> ; x < size ; x ++ ) { for ( y = <int> ; y <= x ; y ++ ) { scanf ( <str> , & content [ x ] [ y ] ) ; } } temp_y = y ; for ( -- x ; x > <int> ; x -- ) { for ( y = -- temp_y ; y > <int> ; y -- ) { a = content [ x ] [ y ] ; b = content [ x ] [ y - <int> ] ; content [ x - <int> ] [ y - <int> ] = content [ x - <int> ] [ y - <int> ] + returnGreater ( a , b ) ; } } printf ( <str> , content [ <int> ] [ <int> ] ) ; } int returnGreater ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } }", "label": 1, "id": 4151}
{"input": "int main ( ) { long int A , g , l , x , T , i , B ; scanf ( <str> , & T ) ; printf ( <str> ) ; if ( ( T > <int> ) && ( T <= <int> ) ) { while ( T > <int> ) { scanf ( <str> , & A , & B ) ; if ( ( A > <int> ) && ( A <= <int> ) && ( B > <int> ) && ( B <= <int> ) ) { x = ( A < B ) ? A : B ; for ( i = x ; i >= <int> ; i -- ) { if ( ( A % i == <int> ) && ( B % i == <int> ) ) { g = i ; break ; } } l = ( A * ( B / g ) ) ; printf ( <str> , g , l ) ; } T -- ; } } return <int> ; }", "label": 2, "id": 4152}
{"input": "int max ( int a [ <int> ] [ <int> ] , int n , int i , int j ) { if ( i < n ) { int x , y ; x = a [ i ] [ j ] + max ( a , n , i + <int> , j ) ; y = a [ i ] [ j ] + max ( a , n , i + <int> , j + <int> ) ; if ( x > y ) return x ; return y ; } return a [ i ] [ j ] ; } main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , max ( a , n - <int> , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 4153}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- > <int> ) { int N ; scanf ( <str> , & N ) ; int Arr [ N ] ; for ( int i = <int> ; i < N ; i ++ ) { scanf ( <str> , & Arr [ i ] ) ; } int Prev = Arr [ <int> ] ; long Count = <int> ; long Ans = N ; for ( int i = <int> ; i < N ; i ++ ) { if ( Arr [ i ] >= Prev ) { Count ++ ; } else { Ans += ( Count * ( Count + <int> ) / <int> ) - Count ; Count = <int> ; } Prev = Arr [ i ] ; } Ans += ( Count * ( Count + <int> ) / <int> ) - Count ; printf ( <str> , Ans ) ; } return <int> ; }", "label": 0, "id": 4154}
{"input": "int main ( ) { int n , i , j , k , l , sum , max , num , m ; scanf ( <str> , & num ) ; int arr2 [ num ] ; for ( m = <int> ; m < num ; m ++ ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; int arr1 [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j <= i ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } else { arr [ i ] [ j ] = <int> ; } } } for ( j = <int> ; j < n ; j ++ ) { sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { sum = sum + arr [ i ] [ j ] ; } arr1 [ j ] = sum ; } max = arr1 [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max < arr1 [ i ] ) { max = arr1 [ i ] ; } } arr2 [ m ] = max ; } for ( m = <int> ; m < num ; m ++ ) { printf ( <str> , arr2 [ m ] ) ; } return <int> ; }", "label": 1, "id": 4155}
{"input": "int main ( void ) { long long int n , t , i , temp , count , num , ans , flag ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; count = <int> ; ans = <int> ; num = - <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp > num ) { num = temp ; count ++ ; flag = <int> ; } else { ans += ( ( count * ( count + <int> ) ) / <int> ) ; count = <int> ; flag = <int> ; } num = temp ; } ans += ( ( count * ( count + <int> ) ) / <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 4156}
{"input": "int main ( ) { int t , a , b , gcd , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= ( ( a > b ) ? b : a ) ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; printf ( <str> , gcd , a * b / gcd ) ; } return <int> ; }", "label": 2, "id": 4157}
{"input": "int main ( ) { int t , i , a , b , gcd , lcm , max , min ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a <= b ) { min = a ; max = b ; } else { min = b ; max = a ; } while ( <int> ) { if ( a % min == <int> && b % min == <int> ) { gcd = min ; break ; } min -- ; } while ( <int> ) { if ( max % a == <int> && max % b == <int> ) { lcm = max ; break ; } max ++ ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4158}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; int a [ n ] [ n ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ( a [ i ] [ j ] ) ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4159}
{"input": "void mergesort ( int a [ ] , int i , int j ) ; void merge ( int a [ ] , int i1 , int j1 , int i2 , int j2 ) ; int min ( int m , int n ) { if ( m < n ) return m ; else return n ; } int main ( ) { int test , i , p , s , sum = <int> , j , a ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & p ) ; int array [ p ] ; for ( i = <int> ; i < p ; i ++ ) scanf ( <str> , & array [ i ] ) ; mergesort ( array , <int> , p - <int> ) ; s = array [ <int> ] ; for ( i = <int> ; i < p ; i ++ ) { s = min ( s , array [ i ] ) ; sum = sum + s ; } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; } void mergesort ( int a [ ] , int i , int j ) { int mid ; if ( i < j ) { mid = ( i + j ) / <int> ; mergesort ( a , i , mid ) ; mergesort ( a , mid + <int> , j ) ; merge ( a , i , mid , mid + <int> , j ) ; } } void merge ( int a [ ] , int i1 , int j1 , int i2 , int j2 ) { int temp [ <int> ] ; int i , j , k ; i = i1 ; j = i2 ; k = <int> ; while ( i <= j1 && j <= j2 ) { if ( a [ i ] < a [ j ] ) temp [ k ++ ] = a [ i ++ ] ; else temp [ k ++ ] = a [ j ++ ] ; } while ( i <= j1 ) temp [ k ++ ] = a [ i ++ ] ; while ( j <= j2 ) temp [ k ++ ] = a [ j ++ ] ; for ( i = i1 , j = <int> ; i <= j2 ; i ++ , j ++ ) a [ i ] = temp [ j ] ; }", "label": 3, "id": 4160}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , y , x ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < n - <int> ; j ++ ) { x = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; y = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = x > y ? x : y ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4161}
{"input": "int tr [ <int> ] [ <int> ] , i , j ; int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) tr [ i ] [ j ] += tr [ i + <int> ] [ j ] > tr [ i + <int> ] [ j + <int> ] ? tr [ i + <int> ] [ j ] : tr [ i + <int> ] [ j + <int> ] ; printf ( <str> , tr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4162}
{"input": "int main ( ) { int T , A , B , x , a , b , d ; scanf ( <str> , T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; a = A ; b = B ; while ( B != <int> ) { x = B ; B = ( A % B ) ; A = x ; } d = ( ( a * b ) / x ) ; printf ( <str> , x , d ) ; } return <int> ; }", "label": 3, "id": 4163}
{"input": "typedef struct number { int A ; int B ; } number ; int gcd ( number C , int i ) { int j ; if ( C <fp> A > C <fp> B ) { for ( j = C <fp> B ; j >= <int> ; j -- ) { if ( C <fp> A % j == <int> && C <fp> B % j == <int> ) return j ; } } else { for ( j = C <fp> A ; j >= <int> ; j -- ) { if ( C <fp> A % j == <int> && C <fp> B % j == <int> ) return j ; } } } int lcm ( number C , int y , int i ) { return ( C <fp> A ) * ( C <fp> B ) / y ; } int main ( ) { int T , x , y , i ; scanf ( <str> , & T ) ; number C ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & C <fp> A , & C <fp> B ) ; y = gcd ( C , i ) ; x = lcm ( C , y , i ) ; printf ( <str> , y , x ) ; } return <int> ; }", "label": 1, "id": 4164}
{"input": "int arr [ <int> ] [ <int> ] ; int main ( ) { int j , i , lines , cases , maxv ; scanf ( <str> , & cases ) ; int rem = cases % <int> ; int <unk> = cases / <int> ; for ( ; rem ; rem -- ) { scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; } for ( ; <unk> ; <unk> -- ) { scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; } return <int> ; }", "label": 0, "id": 4165}
{"input": "int main ( ) { int i , t , j , a , b , z ; scanf ( <str> , & t ) ; int gcd [ t ] , lcm [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { z = a ; a = b ; b = z ; } for ( j = <int> ; j <= b / <int> ; j ++ ) { if ( b % i == <int> && b % i == <int> ) gcd [ i ] *= i ; } } return <int> ; }", "label": 3, "id": 4166}
{"input": "int GCD ( long int x , long int y ) { if ( x == <int> || y == <int> ) return <int> ; if ( x == y ) return x ; if ( x > y ) return ( GCD ( x - y , y ) ) ; return ( GCD ( x , y - x ) ) ; } int LCM ( long int x , long int y ) { long int temp = GCD ( x , y ) ; long int z = ( x * y ) / temp ; return ( z ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a , & b ) ; long int gcd = GCD ( a , b ) ; long int lcm = LCM ( a , b ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4167}
{"input": "int main ( ) { int i , j , k , t , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int A [ n ] [ n ] ; for ( k = <int> ; k < n ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & A [ k ] [ j ] ) ; } } for ( k = n - <int> ; k >= <int> ; k -- ) { for ( j = <int> ; j <= k ; j ++ ) { if ( A [ k ] [ j ] + A [ k + <int> ] [ j ] > A [ k ] [ j ] + A [ k + <int> ] [ j + <int> ] ) { A [ k ] [ j ] = A [ k + <int> ] [ j ] ; } else { A [ k ] [ j ] = A [ k + <int> ] [ j ] ; } } } printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4168}
{"input": "int main ( ) { int t , n , i ; long long ans , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long a [ n ] ; temp = ans = <int> ; for ( i = <int> ; i < n ; ++ i ) scanf ( <str> , & a [ i ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) { if ( a [ i ] > a [ i - <int> ] ) { temp ++ ; ans += temp ; } else { temp = <int> ; ans += <int> ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 4169}
{"input": "long int A [ <int> ] [ <int> ] ; int main ( ) { long int i , T , N , j , k , LAR ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; for ( j = <int> ; j <= N ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & A [ j ] [ k ] ) ; } } for ( j = <int> ; j <= N ; j ++ ) { A [ j ] [ <int> ] = A [ j ] [ <int> ] + A [ j - <int> ] [ <int> ] ; A [ j ] [ j ] = A [ j ] [ j ] + A [ j - <int> ] [ j - <int> ] ; } for ( j = <int> ; j <= N ; j ++ ) { for ( k = <int> ; k < j ; k ++ ) { A [ j ] [ k ] += ( A [ j - <int> ] [ k - <int> ] > A [ j - <int> ] [ k ] ) ? A [ j - <int> ] [ k - <int> ] : A [ j - <int> ] [ k ] ; } } LAR = A [ N ] [ <int> ] ; for ( j = <int> ; j <= N ; j ++ ) { if ( A [ N ] [ j ] > LAR ) LAR = A [ N ] [ j ] ; } printf ( <str> , LAR ) ; } return <int> ; }", "label": 0, "id": 4170}
{"input": "int main ( ) { int data [ <int> ] [ <int> ] , n , i , max , last_row , j , test_cases ; scanf ( <str> , & test_cases ) ; while ( test_cases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & data [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { data [ i ] [ <int> ] += data [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { if ( data [ i - <int> ] [ j ] > data [ i - <int> ] [ j - <int> ] ) { data [ i ] [ j ] += data [ i - <int> ] [ j ] ; } else { data [ i ] [ j ] += data [ i - <int> ] [ j - <int> ] ; } } data [ i ] [ i ] += data [ i - <int> ] [ i - <int> ] ; } last_row = n - <int> ; max = data [ last_row ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max < data [ last_row ] [ i ] ) { max = data [ last_row ] [ i ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4171}
{"input": "int main ( ) { int t , i ; long int gcd , lcm , a , b , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { gcd = <int> ; lcm = <int> ; scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= MIN ( a , b ) ; j ++ ) { if ( ( a % j ) == <int> && ( b % j ) == <int> ) gcd = j ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4172}
{"input": "long int gcd ( long a , long b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } long int lcm ( long int num1 , long int num2 ) { long int gcdnum = gcd ( num1 , num2 ) ; return ( num1 * num2 ) / gcdnum ; } int main ( ) { int nTestCases ; int nA , nB ; scanf ( <str> , & nTestCases ) ; while ( nTestCases -- ) { scanf ( <str> , & nA , & nB ) ; long int ll_lcm = <int> ; long int ll_gcd = <int> ; ll_lcm = lcm ( nA , nB ) ; ll_gcd = gcd ( nA , nB ) ; printf ( <str> , ll_gcd , ll_lcm ) ; } return <int> ; }", "label": 0, "id": 4173}
{"input": "int main ( void ) { int t , n1 , n2 , lcm , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; n = lcm = <int> ; n = gcd ( n1 , n2 ) ; lcm = ( n1 * n2 ) / n ; printf ( <str> , n , lcm ) ; } return <int> ; } int gcd ( int a , int b ) { int g ; if ( a % b == <int> ) return b ; else g = gcd ( b , a % b ) ; return g ; }", "label": 1, "id": 4174}
{"input": "long int <unk> ( long int a , long int b ) { if ( a == <int> ) { return b ; } else { return <unk> ( b % a , a ) ; } } int main ( void ) { long int a , b ; int n ; long int lcm , gcd ; scanf ( <str> , & n ) ; int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd = <unk> ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4175}
{"input": "long int gcd ( long int m , long int n ) { if ( m == <int> ) return n ; return gcd ( n % m , m ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; long int a , b ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 4176}
{"input": "long array [ <int> ] [ <int> ] ; int n ; long max ( int a , int b ) { return ( a > b ? a : b ) ; } long sum ( int i , int j ) { if ( i >= n - <int> ) return array [ i ] [ j ] ; else { return ( max ( array [ i ] [ j ] + sum ( i + <int> , j ) , array [ i ] [ j ] + sum ( i + <int> , j + <int> ) ) ) ; } } long sum_control ( ) { return ( max ( array [ <int> ] [ <int> ] + sum ( <int> , <int> ) , array [ <int> ] [ <int> ] + sum ( <int> , <int> ) ) ) ; } int main ( ) { int T , i , j , k ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & array [ j ] [ k ] ) ; } } printf ( <str> , sum_control ( ) ) ; } return <int> ; }", "label": 2, "id": 4177}
{"input": "int main ( ) { long long int i , j , k , n , t , count ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; long long int x [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & x [ j ] ) ; } count = <int> ; for ( j = <int> ; j <= n - <int> ; j ++ ) { for ( k = <int> ; k <= n - j - <int> ; k ++ ) { if ( x [ j + k ] <= x [ j + k + <int> ] ) { count ++ ; } else { break ; } } } if ( n == <int> ) { printf ( <str> , count + <int> ) ; } else { printf ( <str> , count + n - <int> ) ; } } }", "label": 1, "id": 4178}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , k [ <int> ] , i , j , sum ; scanf ( <str> , & n ) ; for ( j = n ; j > <int> ; j -- ) { int sum = <int> ; for ( i = <int> ; i <= j ; i ++ ) { scanf ( <str> , & k [ j - i ] ) ; } sum = sum + k [ j - i ] ; } printf ( <str> , sum / <int> ) ; } return <int> ; }", "label": 1, "id": 4179}
{"input": "int main ( void ) { int t , n , i , num , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num ) ; if ( num < min ) min = num ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 4180}
{"input": "long long A [ <int> ] ; int main ( ) { int i , j , k ; int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( int i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } long long int count = n ; for ( int i = n ; i > <int> ; i -- ) { for ( int j = i - <int> ; j >= <int> ; j -- ) { if ( A [ j ] <= A [ j + <int> ] ) count ++ ; else break ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 4181}
{"input": "int main ( ) { int t ; unsigned int a , b , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { printf ( <str> ) ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( x != y ) { if ( x > y ) x -= y ; else y -= x ; } printf ( <str> , x ) ; x = a ; y = b ; while ( x != y ) { if ( x < y ) x += a ; else y += b ; } printf ( <str> , x ) ; } return <int> ; }", "label": 2, "id": 4182}
{"input": "int main ( void ) { int n , i , r , c , sum , max = <int> ; scanf ( <str> , & n ) ; while ( n ) { scanf ( <str> , & i ) ; int arr [ i ] [ i ] ; for ( r = <int> ; r < i ; r ++ ) { for ( c = <int> ; c <= r ; c ++ ) { scanf ( <str> , & arr [ r ] [ c ] ) ; } } for ( r = i - <int> ; r > <int> ; r -- ) { for ( c = <int> ; c > <int> ; c -- ) { sum = arr [ r ] [ c ] + arr [ r ] [ c - <int> ] + arr [ r - <int> ] [ c - <int> ] ; if ( sum > max ) max = sum ; } } printf ( <str> , max ) ; n -- ; } return <int> ; }", "label": 1, "id": 4183}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int N ; scanf ( <str> , & N ) ; int min = INT_MAX , n = N ; while ( N -- ) { int x ; scanf ( <str> , & x ) ; if ( min > x ) min = x ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 4184}
{"input": "int main ( ) { long int i , j , n , t ; scanf ( <str> , & t ) ; scanf ( <str> , & n ) ; long int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } while ( t -- ) { for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4185}
{"input": "int main ( ) { int i , j , n , ctr = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int c ; for ( i = <int> ; i < n ; i ++ ) { c = i ; for ( j = i ; j < n ; j ++ ) { if ( a [ c ] <= a [ j ] ) { ctr ++ ; c = j ; } else break ; } } printf ( <str> , ctr ) ; }", "label": 1, "id": 4186}
{"input": "int main ( ) { long long int t , i , ans , n , a [ <int> ] , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; ans = <int> ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) { min = a [ i ] ; } } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 4187}
{"input": "int sum ( int a [ <int> ] [ <int> ] , int i , int j , int n , int b [ <int> ] [ <int> ] ) { if ( i > n ) { return a [ i ] [ j ] ; } if ( b [ i ] [ j ] != <int> ) { return b [ i ] [ j ] ; } int s1 = a [ i ] [ j ] + sum ( a , i + <int> , j , n , b ) ; int s2 = a [ i ] [ j ] + sum ( a , i + <int> , j + <int> , n , b ) ; if ( s1 > s2 ) { b [ i ] [ j ] = s1 ; return s1 ; } else { b [ i ] [ j ] = s2 ; return s2 ; } } int main ( void ) { int a [ <int> ] [ <int> ] , n , i , j , k , T , b [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { b [ i ] [ j ] = <int> ; } } int ans = sum ( a , <int> , <int> , n , b ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 4188}
{"input": "int lcm ( int , int ) ; int hcf ( int , int ) ; int main ( ) { int t , a , b , l , h ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; l = lcm ( a , b ) ; h = hcf ( a , b ) ; printf ( <str> , h , l ) ; printf ( <str> ) ; } return <int> ; } int lcm ( int x , int y ) { int z ; for ( z = x > y ? x : y ; z <= x * y ; z ++ ) { if ( z % x == <int> && z % y == <int> ) break ; } return ( z ) ; } int hcf ( int p , int q ) { int r ; for ( r = p < q ? p : q ; r >= <int> ; r -- ) { if ( p % r == <int> && q % r == <int> ) break ; } return ( r ) ; }", "label": 2, "id": 4189}
{"input": "int gcd ( int , int ) ; int main ( void ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int A , B , hcf , lcm ; scanf ( <str> , & A , & B ) ; hcf = gcd ( A , B ) ; printf ( <str> , hcf , ( A * B ) / hcf ) ; } return <int> ; } int gcd ( int x , int y ) { if ( x == <int> ) return y ; else return gcd ( y % x , x ) ; }", "label": 1, "id": 4190}
{"input": "int gcd ( int m , int n ) { if ( m < n ) return gcd ( n , m ) ; if ( n == <int> ) return m ; if ( m > n ) return gcd ( n , m % n ) ; } int main ( ) { int s , m , n , c ; scanf ( <str> , & s ) ; while ( s -- ) { scanf ( <str> , & m ) ; scanf ( <str> , & n ) ; c = gcd ( m , n ) ; printf ( <str> , c , ( m * n ) / c ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 4191}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4192}
{"input": "int <unk> ( int a , int b ) { if ( b == <int> ) return a ; else <unk> ( b , a % b ) ; } int main ( ) { int a , b , T , l ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & a , & b ) ; l = <unk> ( a , b ) ; printf ( <str> , l , ( a * b ) / l ) ; T -- ; } return <int> ; }", "label": 1, "id": 4193}
{"input": "long int gcd ( long int a , long int b ) ; long int lcm ( long int a , long int b ) ; int main ( ) { long int k , a , b , p , q ; scanf ( <str> , & k ) ; while ( k != <int> ) { scanf ( <str> , & a , & b ) ; p = gcd ( a , b ) ; q = lcm ( a , b ) ; printf ( <str> , p , q ) ; printf ( <str> ) ; k -- ; } return <int> ; } long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; }", "label": 0, "id": 4194}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; if ( test < <int> || test > <int> ) { return <int> ; } int ans [ <int> * test ] ; int t = <int> ; int j ; for ( j = <int> ; j < test ; j ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; if ( a < <int> || a > <int> || b < <int> || b > <int> ) { return <int> ; } int i ; int gcd = <int> , lcm = <int> ; if ( a > b ) { int temp = a ; a = b ; b = temp ; } int product = a * b ; int b1 ; for ( i = a ; i > <int> ; i = b1 % i ) { b1 = b ; if ( b % i == <int> ) { gcd = i ; } else { int temp = a ; a = b % i ; b = temp ; } } lcm = product / gcd ; ans [ t ++ ] = gcd ; ans [ t ++ ] = lcm ; } for ( t = <int> ; t < <int> * test ; t = t + <int> ) { printf ( <str> , ans [ t ] , ans [ t + <int> ] ) ; } return <int> ; }", "label": 1, "id": 4195}
{"input": "int main ( ) { int t , n , m , L , H ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n , & m ) ; for ( H = ( n < m ) ? n : m ; ( ! ( n % H == <int> && m % H == <int> ) ) ; H -- ) ; for ( L = ( n > m ) ? n : m ; ( ! ( L % n == <int> && L % m == <int> ) ) ; L ++ ) ; printf ( <str> , H , L ) ; t -- ; } return <int> ; }", "label": 2, "id": 4196}
{"input": "int gcd1 ( long long int a , long long int b ) { if ( b == <int> ) return a ; else return gcd1 ( b , a % b ) ; } int main ( ) { int t , gcd ; long long int a , b , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = gcd1 ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4197}
{"input": "int main ( ) { int i , n , a , b , lcm , gcd ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; { for ( i = <int> ; a % i == <int> && b % i == <int> ; i ++ ) gcd = i ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } } return <int> ; }", "label": 2, "id": 4198}
{"input": "int main ( ) { int t , m , i , j , arr [ <int> ] [ <int> ] , n ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { if ( arr [ i + <int> ] [ j + <int> ] > arr [ i + <int> ] [ j ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4199}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int i , k = <int> , x = <int> ; long int a [ <int> ] = { <int> } ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) k ++ ; else k = <int> ; if ( a [ i ] <= a [ i + <int> ] ) x = x + k ; } printf ( <str> , x + n ) ; } return <int> ; }", "label": 0, "id": 4200}
{"input": "int gcd ( int a , int b ) { int t ; while ( a != <int> ) { t = a ; a = a % b ; b = t ; } return b ; } int main ( ) { int t , h ; int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; h = gcd ( a , b ) ; printf ( <str> , h , ( a * b ) / h ) ; } }", "label": 1, "id": 4201}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , lcm , k , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; lcm = ( a * b ) / k ; printf ( <str> , k , lcm ) ; } } int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , b % a ) ; } }", "label": 1, "id": 4202}
{"input": "int i , j , k , T ; long long unsigned int a , n ; int main ( ) { scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; long long unsigned int N [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & N [ i ] ) ; } a = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( a > N [ j ] ) { a = N [ j ] ; } } printf ( <str> , a * ( n - <int> ) ) ; } }", "label": 1, "id": 4203}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int x [ <int> ] , i , j = <int> , y [ <int> ] , k , l = <int> , a1 , b1 ; long long a , b ; scanf ( <str> , & a , & b ) ; a1 = a ; b1 = b ; for ( i = <int> ; i <= <int> ; i ++ ) { if ( a1 % i == <int> ) { x [ j ] = i ; a1 = a1 / i ; i -- ; j ++ ; } if ( a1 == <int> ) break ; } for ( k = <int> ; k <= <int> ; k ++ ) { if ( b1 % k == <int> ) { y [ l ] = k ; b1 = b1 / k ; k -- ; l ++ ; } if ( b1 == <int> ) break ; } int r = <int> , m , n ; for ( m = <int> ; m < j ; m ++ ) { for ( n = <int> ; n < l ; n ++ ) { if ( x [ m ] == y [ n ] ) { r = r * x [ m ] ; y [ n ] == <int> ; break ; } } } long long g ; g = a * b ; g = g / r ; printf ( <str> , r , g ) ; } return <int> ; }", "label": 1, "id": 4204}
{"input": "int GCD ( int a , int b ) ; int main ( void ) { int T ; int lcm , gcd ; int a , b ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = ( int ) ( ( ( long long ) ( a * b ) ) / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int GCD ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) return GCD ( a - b , b ) ; else return GCD ( b - a , a ) ; }", "label": 1, "id": 4205}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int i = <int> , j = <int> , n , m1 , k = <int> ; scanf ( <str> , & m1 ) ; for ( k = <int> ; k < m1 ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4206}
{"input": "int main ( void ) { int n , i , r , t , z ; scanf ( <str> , & n ) ; while ( n > <int> ) { int x ; scanf ( <str> , & x ) ; int a [ x ] ; for ( i = <int> ; i < x ; i ++ ) scanf ( <str> , & a [ i ] ) ; t = a [ <int> ] ; z = <int> ; for ( i = <int> ; i < x ; i ++ ) { if ( t > a [ i ] ) { t = a [ i ] ; z = z + t ; } else { z = z + t ; } } printf ( <str> , z ) ; n -- ; } return <int> ; }", "label": 1, "id": 4207}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] , min , i = <int> , t ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } t = min * ( n - <int> ) ; printf ( <str> , t ) ; } return <int> ; }", "label": 0, "id": 4208}
{"input": "int main ( ) { int t ; unsigned int * a , c , i , n ; unsigned long int sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = ( unsigned int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; i = <int> ; sum = <int> ; if ( n > <int> ) sum = <int> ; while ( i < n ) { c = <int> ; while ( a [ i - <int> ] <= a [ i ] && ( i < n ) ) { i ++ ; c ++ ; } sum += ( c * ( c + <int> ) ) / <int> ; c = <int> ; i ++ ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4209}
{"input": "int main ( ) { int <unk> , j , k , n , i ; int p ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & <unk> ) ; for ( i = <int> ; i <= <unk> ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = n - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k < j ; k ++ ) { if ( a [ j ] [ k ] >= a [ j ] [ k + <int> ] ) p = a [ j ] [ k ] ; else p = a [ j ] [ k + <int> ] ; a [ j - <int> ] [ k ] = a [ j - <int> ] [ k ] + p ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return ( <int> ) ; }", "label": 0, "id": 4210}
{"input": "int main ( ) { int l , i , j , r , s , sum [ <int> ] , max , k [ <int> ] [ <int> ] ; scanf ( <str> , & l ) ; for ( s = <int> ; s < l ; s ++ ) { scanf ( <str> , & r ) ; if ( r > <int> && r <= <int> ) { sum [ s ] = <int> ; max = <int> ; scanf ( <str> , & k [ <int> ] [ <int> ] ) ; sum [ s ] = k [ <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & k [ i ] [ j ] ) ; if ( k [ i ] [ max ] >= k [ i ] [ max + <int> ] ) { sum [ s ] = sum [ s ] + k [ i ] [ max ] ; max = max ; } else { sum [ s ] = sum [ s ] + k [ i ] [ max + <int> ] ; max = max + <int> ; } } } } for ( i = <int> ; i < l ; i ++ ) printf ( <str> , sum [ i ] ) ; return <int> ; }", "label": 1, "id": 4211}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int i , q , n ; scanf ( <str> , & n ) ; long long int sum = <int> , count = <int> ; long long int a ; scanf ( <str> , & a ) ; count ++ ; q = a ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < q || a < q && i == n - <int> ) { if ( i == n - <int> && a < q ) sum ++ ; sum += ( count * ( count + <int> ) ) / <int> ; count = <int> ; q = a ; } else { count ++ ; q = a ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4212}
{"input": "int main ( ) { int a , b , x , gcd , lcm , i = <int> , d ; scanf ( <str> , & d ) ; while ( i <= d ) { scanf ( <str> , & a , & b ) ; if ( a < b ) x = a ; else x = b ; for ( ; x >= <int> ; x -- ) { if ( a % x == <int> && b % x == <int> ) { gcd = x ; break ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; i ++ ; } return <int> ; }", "label": 1, "id": 4213}
{"input": "int main ( ) { int k , n , a [ <int> ] , b , t , i , j = <int> , m , c = <int> , min , f = <int> ; ; float d ; char s [ <int> ] , l [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; c = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { c = c + a [ i ] ; } else if ( a [ i ] > a [ i + <int> ] ) { c = c + a [ i + <int> ] ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 4214}
{"input": "int main ( ) { int t ; long long int x , y , temp , l , n1 , n2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; n1 = x ; n2 = y ; while ( n2 != <int> ) { temp = n2 ; n2 = n1 % n2 ; n1 = temp ; } l = x * y / n1 ; printf ( <str> , n1 , l ) ; } }", "label": 0, "id": 4215}
{"input": "int main ( ) { int t , n , s = <int> , i , j ; scanf ( <str> , & t ) ; while ( t > <int> ) { s = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) { if ( i == ( n - <int> ) ) { s += a [ i ] [ <int> ] ; break ; } else { s += a [ i ] [ <int> ] ; break ; } } printf ( <str> , s ) ; t -- ; } return <int> ; }", "label": 1, "id": 4216}
{"input": "long int GCD ( long int x , long int y ) { if ( y == <int> ) return x ; else return GCD ( y , x % y ) ; } int main ( ) { long int n1 , n2 , i , LCM , gcd ; int T , I ; scanf ( <str> , & T ) ; if ( T < <int> || T > <int> ) return <int> ; long int ans [ T ] [ <int> ] ; for ( I = <int> ; I < T ; I ++ ) { LCM = <int> ; scanf ( <str> , & n1 , & n2 ) ; if ( n1 < <int> || n2 < <int> || n1 > <int> || n2 > <int> ) return <int> ; gcd = GCD ( n1 , n2 ) ; while ( n1 > <int> || n2 > <int> ) { for ( i = <int> ; i <= n1 || i <= n2 ; i ++ ) { if ( n1 % i == <int> && n2 % i == <int> ) { n1 /= i ; n2 /= i ; break ; } if ( n1 % i == <int> ) { n1 /= i ; break ; } if ( n2 % i == <int> ) { n2 /= i ; break ; } } LCM *= i ; } ans [ I ] [ <int> ] = gcd ; ans [ I ] [ <int> ] = LCM ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , ans [ i ] [ <int> ] , ans [ i ] [ <int> ] ) ; return <int> ; }", "label": 2, "id": 4217}
{"input": "long long int gcd ( long long int a , int b ) ; int main ( void ) { long long int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } long long int gcd ( long long int a , int b ) { if ( a == <int> || b == <int> ) { return <int> ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; }", "label": 0, "id": 4218}
{"input": "void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n , i , a [ <int> ] , j , k = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; while ( <int> ) { for ( i = <int> ; i < n - <int> ; i ++ ) if ( a [ i ] <= a [ i + <int> ] ) { k = k + a [ i ] ; for ( j = i + <int> ; j < n ; j ++ ) a [ j ] = a [ j + <int> ] ; n -- ; } else { k = k + a [ i + <int> ] ; for ( j = i ; j < n ; j ++ ) a [ j ] = a [ j + <int> ] ; n -- ; } if ( n == <int> ) { printf ( <str> , k ) ; break ; } } } return <int> ; }", "label": 2, "id": 4219}
{"input": "int hcf ( int a , int b ) { if ( b == <int> ) return a ; return hcf ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / hcf ( a , b ) ; } main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , hcf ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 4220}
{"input": "int max ( int x , int y ) { return x > y ? x : y ; } long <unk> ( int triangle [ ] [ MAXROWS ] , long best [ ] [ MAXROWS ] , int i , int j , int rows ) { if ( i == rows - <int> ) return ( long ) triangle [ i ] [ j ] ; else if ( best [ i ] [ j ] != <int> ) { return best [ i ] [ j ] ; } return best [ i ] [ j ] = ( long ) ( triangle [ i ] [ j ] + max ( <unk> ( triangle , best , i + <int> , j , rows ) , <unk> ( triangle , best , i + <int> , j + <int> , rows ) ) ) ; } int main ( ) { int t , n ; int triangle [ MAXROWS ] [ MAXROWS ] ; long best [ MAXROWS ] [ MAXROWS ] ; int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { best [ i ] [ j ] = <int> ; scanf ( <str> , & triangle [ i ] [ j ] ) ; } } printf ( <str> , <unk> ( triangle , best , <int> , <int> , n ) ) ; } return <int> ; }", "label": 0, "id": 4221}
{"input": "int main ( ) { int x , y , max , i , T , lcm , hcf ; scanf ( <str> , & x , & y ) ; if ( x > y ) { max = x ; } else { max = y ; } for ( i = <int> ; i <= max ; i ++ ) { if ( x % i == <int> && y % i == <int> ) { hcf = i ; } } for ( i = max ; i <= x * y ; i ++ ) { if ( i % x == <int> && i % y == <int> ) { lcm = i ; } } printf ( <str> , hcf , lcm ) ; }", "label": 1, "id": 4222}
{"input": "int main ( ) { int i , j , k , l , t , n , c = <int> , max = <int> , maxp = <int> , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( k = <int> ; k < n ; k ++ ) { if ( max > maxp ) maxp = max ; for ( max = <int> , i = n - <int> , j = k ; i >= <int> ; i -- ) { max = max + arr [ i ] [ j ] ; if ( j == <int> ) { } else if ( i == j ) j -- ; else if ( c == <int> ) { if ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ) { } else if ( arr [ i - <int> ] [ j ] < arr [ i - <int> ] [ j - <int> ] ) j -- ; else { c = <int> ; l = j ; } } else { c = <int> ; j = l - <int> ; } } } if ( max > maxp ) maxp = max ; printf ( <str> , maxp ) ; } return <int> ; }", "label": 3, "id": 4223}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long count = <int> ; int i , n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) count ++ ; } printf ( <str> , count + n ) ; } return <int> ; }", "label": 1, "id": 4224}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 0, "id": 4225}
{"input": "int gcd ( int a , int b ) ; int lcm ( int c , int d ) ; int main ( ) { int n1 , n2 , t , i , s1 , s2 ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; s1 = gcd ( n1 , n2 ) ; s2 = lcm ( n1 , n2 ) ; printf ( <str> , s1 , s2 ) ; } return <int> ; } int gcd ( int a , int b ) { int rem ; rem = a % b ; if ( rem == <int> ) return b ; else return ( gcd ( b , rem ) ) ; } int lcm ( int c , int d ) { int rem ; rem = c % d ; if ( rem != <int> ) return ( c * d ) ; else return c ; }", "label": 1, "id": 4226}
{"input": "int main ( ) { int min , a [ <int> ] , i , j , n , temp , t , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n - <int> - i ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) { temp = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = temp ; } } } min = a [ <int> ] * ( n - <int> ) ; printf ( <str> , min ) ; } }", "label": 3, "id": 4227}
{"input": "int main ( ) { int t ; int n , max , sum , x , k ; int a [ <int> ] [ <int> ] ; int i , j ; scanf ( <str> , & t ) ; if ( t > <int> || t < <int> ) return <int> ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; if ( n > <int> || n < <int> ) continue ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ i - <int> ] [ j ] ) ; if ( a [ i - <int> ] [ j ] > <int> || a [ i - <int> ] [ j ] < <int> ) return <int> ; } } for ( k = n - <int> ; k >= <int> ; k -- ) { for ( j = <int> ; j < k ; j ++ ) { sum = <int> ; for ( i = k ; i >= <int> ; i -- ) { if ( i == ( k ) ) { sum += a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; } else { x = j <= i ? <int> : ( j - i ) ; sum += a [ i ] [ j - x ] ; } } if ( sum > max ) max = sum ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 4228}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 4229}
{"input": "int main ( void ) { int a [ <int> ] , i , j , p , m , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & p ) ; for ( j = <int> ; j <= p ; j ++ ) scanf ( <str> , & a [ j ] ) ; m = <int> ; for ( j = <int> ; j <= p ; j + <int> ) { if ( a [ j ] < a [ j + <int> ] ) m = m + a [ j ] ; else m = m + a [ j + <int> ] ; } printf ( <str> , m ) ; } return <int> ; }", "label": 3, "id": 4230}
{"input": "int tri ( int num [ ] , int i ) ; int main ( ) { int n , r , num [ <int> ] , i , j , max = <int> ; scanf ( <str> , & n ) ; while ( n -- ) { max = <int> ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ j ] ) ; } if ( i == <int> ) continue ; else max = max + tri ( num , i ) ; } printf ( <str> , max ) ; } return <int> ; } int tri ( int num [ <int> ] , int i ) { int k , max ; max = num [ <int> ] ; for ( k = <int> ; k <= i ; k ++ ) { if ( max <= num [ k ] ) max = num [ k ] ; } return max ; }", "label": 1, "id": 4231}
{"input": "int a [ ROWS ] ; int <unk> ; int <unk> ; char buffer [ N ] ; int max ( index , n ) { if ( index >= <unk> && index <= <unk> ) { return a [ index ] ; } else { int offset = index - ( n - <int> ) * n / <int> ; int <unk> = n * ( n + <int> ) / <int> + offset ; int <unk> = <unk> + <int> ; int <unk> = max ( <unk> , n + <int> ) ; int <unk> = max ( <unk> , n + <int> ) ; return a [ index ] + ( <unk> > <unk> ? <unk> : <unk> ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; int lines ; int j ; int c ; int <unk> = <int> ; int n = <int> ; long <unk> = <int> ; long x = - <int> ; long q ; int temp = <int> ; do { c = read ( <int> , buffer , N ) ; for ( j = <int> ; j < c ; j ++ ) { if ( buffer [ j ] == <char> && <unk> ) { q = temp * ( temp + <int> ) / <int> ; n = temp ; temp = <int> ; <unk> = <int> ; } else if ( ( buffer [ j ] == <char> || buffer [ j ] == <char> ) && ! <unk> ) { x ++ ; a [ x ] = temp ; temp = <int> ; if ( ( x + <int> ) == q ) { <unk> ++ ; <unk> = <int> ; <unk> = ( n - <int> ) * n / <int> ; <unk> = ( n + <int> ) * n / <int> - <int> ; printf ( <str> , max ( <int> , <int> ) ) ; x = - <int> ; if ( <unk> == t ) break ; } } else { temp = temp * <int> + buffer [ j ] - <char> ; } } } while ( <unk> != t ) ; return <int> ; }", "label": 3, "id": 4232}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4233}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; printf ( <str> , gcd ( x , y ) , lcm ( x , y ) ) ; } return <int> ; }", "label": 1, "id": 4234}
{"input": "main ( ) { int T , i , a , b , d , j ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a && j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) d = j ; } printf ( <str> , d , ( a * b ) / d ) ; } }", "label": 1, "id": 4235}
{"input": "int main ( void ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , min = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 3, "id": 4236}
{"input": "int main ( ) { int t , max , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int j , i , k , a [ n ] [ n ] , s [ n ] ; max = <int> ; for ( i = <int> ; i < n ; i ++ ) s [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } if ( n % <int> != <int> ) { for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { for ( k = <int> ; k < n ; k ++ ) { if ( i - j == k ) { s [ k ] += a [ i ] [ j ] ; } } } for ( k = <int> ; k < n ; k ++ ) { if ( max < s [ k ] ) max = s [ k ] ; } } else { for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { for ( k = <int> ; k < n / <int> ; k ++ ) { if ( ( i - j ) / <int> == k ) { s [ k ] += a [ i ] [ j ] ; } } } for ( k = <int> ; k < n / <int> ; k ++ ) { if ( max < s [ k ] ) max = s [ k ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4237}
{"input": "int main ( ) { int t , n , i , cost , min = INT_MAX ; long long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 4238}
{"input": "void t_sums ( int sum , int i , int j ) ; int * * element , max , n ; int main ( void ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; element = ( int * * ) calloc ( n , sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) element [ i ] = ( int * ) calloc ( i + <int> , sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & element [ i ] [ j ] ) ; max = <int> ; t_sums ( <int> , <int> , <int> ) ; printf ( <str> , max ) ; for ( i = <int> ; i < n ; i ++ ) free ( element [ i ] ) ; free ( element ) ; } return <int> ; } void t_sums ( int sum , int i , int j ) { if ( i == n - <int> ) { sum += element [ i ] [ j ] ; if ( sum > max ) max = sum ; } else { t_sums ( sum + element [ i ] [ j ] , i + <int> , j ) ; t_sums ( sum + element [ i ] [ j ] , i + <int> , j + <int> ) ; } }", "label": 2, "id": 4239}
{"input": "int main ( ) { int numOfLines ; int triHeight ; int triangles [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & numOfLines ) ; while ( numOfLines > <int> ) { scanf ( <str> , & triHeight ) ; int i = <int> ; int j ; while ( i < triHeight ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangles [ i ] [ j ] ) ; } i ++ ; } triHeight -= <int> ; while ( triHeight >= <int> ) { for ( j = <int> ; j <= triHeight ; j ++ ) { int currentNumber = triangles [ triHeight ] [ j ] ; int leftBelow = triangles [ triHeight + <int> ] [ j ] + currentNumber ; int rightBelow = triangles [ triHeight + <int> ] [ j + <int> ] + currentNumber ; triangles [ triHeight ] [ j ] = leftBelow > rightBelow ? leftBelow : rightBelow ; } triHeight -- ; } printf ( <str> , triangles [ <int> ] [ <int> ] ) ; numOfLines -- ; } return <int> ; }", "label": 1, "id": 4240}
{"input": "int main ( void ) { int i , n ; long long sum , min ; long long a [ <int> ] ; long long t ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min < a [ i ] ) { } else { min = a [ i ] ; } sum = sum + min ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4241}
{"input": "int main ( ) { int t , N , i , c ; long a [ <int> ] , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; c = <int> ; s = <int> ; for ( i = <int> ; i < N - <int> ; i ++ ) { if ( a [ i + <int> ] > a [ i ] ) { c ++ ; s += c ; } else c = <int> ; } s += N ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 4242}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long unsigned int i , n ; scanf ( <str> , & n ) ; long unsigned int a [ n ] , cost = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) cost += a [ i ] ; else cost += a [ i + <int> ] ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 4243}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , t , n , x , y , lar ; scanf ( <str> , & t , & n ) ; while ( t -- ) { for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == i ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else if ( j == <int> ) a [ i ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else { y = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; x = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; if ( x > y ) a [ i ] [ j ] = x ; else a [ i ] [ j ] = y ; } } lar = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( lar < a [ n - <int> ] [ j + <int> ] ) lar = a [ n - <int> ] [ j + <int> ] ; } printf ( <str> , lar ) ; } }", "label": 1, "id": 4244}
{"input": "int main ( ) { int t , i , j , r , max = <int> , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < r ; i ++ ) { if ( i != ( r - <int> ) ) max += a [ i ] [ <int> ] ; else { if ( max + a [ i ] [ <int> ] > max + a [ i ] [ <int> ] ) max += a [ i ] [ <int> ] ; else max += a [ i ] [ <int> ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4245}
{"input": "int main ( ) { int t , a , b , m , n , rem ; long long int l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( a % b != <int> ) { rem = a % b ; a = b ; b = rem ; } l = ( ( long long int ) m * n ) / b ; printf ( <str> , b , l ) ; } }", "label": 0, "id": 4246}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , l , m , t , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( l = t - <int> ; l >= <int> ; l -- ) for ( m = <int> ; m <= l - <int> ; m ++ ) if ( a [ l ] [ m ] > a [ l ] [ m + <int> ] ) a [ l - <int> ] [ m ] = a [ l - <int> ] [ m ] + a [ l ] [ m ] ; else a [ l - <int> ] [ m ] = a [ l - <int> ] [ m ] + a [ l ] [ m + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4247}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ <int> ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( int i = n - <int> ; i >= <int> ; i -- ) { int k = <int> ; for ( int j = <int> ; j <= i ; j ++ ) { a [ i - <int> ] [ k ++ ] += a [ i ] [ j - <int> ] > a [ i ] [ j ] ? a [ i ] [ j - <int> ] : a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4248}
{"input": "int main ( ) { int test ; int line ; int mat [ <int> ] [ <int> ] ; int sum [ <int> ] = { <int> } ; int i , j , k ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & line ) ; k = <int> ; for ( j = <int> ; j < line ; j ++ ) { while ( k <= j ) { scanf ( <str> , & mat [ j ] [ k ] ) ; k ++ ; } } sum [ i ] = mat [ <int> ] [ <int> ] ; k = <int> ; for ( j = <int> ; j < line , k <= j ; j ++ ) { if ( mat [ j ] [ k ] > mat [ j ] [ k + <int> ] ) { sum [ i ] = sum [ i ] + mat [ j ] [ k ] ; } else { sum [ i ] = sum [ i ] + mat [ j ] [ k + <int> ] ; k = k + <int> ; } } } for ( i = <int> ; i < test ; i ++ ) printf ( <str> , sum [ i ] ) ; return <int> ; }", "label": 3, "id": 4249}
{"input": "int max_sum [ <int> ] ; int triangle [ <int> ] [ <int> ] ; int main ( ) { int cases ; int rows ; int i , ii ; scanf ( <str> , & cases ) ; int <unk> = cases ; while ( cases -- > <int> ) { scanf ( <str> , & rows ) ; int max_val = <int> ; for ( i = <int> ; i < rows ; i ++ ) for ( ii = <int> ; ii < ( i + <int> ) ; ii ++ ) scanf ( <str> , & triangle [ i ] [ ii ] ) ; for ( i = ( rows - <int> ) ; i >= <int> ; i -- ) for ( ii = <int> ; ii <= i ; ii ++ ) triangle [ i ] [ ii ] += ( ( triangle [ i + <int> ] [ ii ] > triangle [ i + <int> ] [ ii + <int> ] ) ? triangle [ i + <int> ] [ ii ] : triangle [ i + <int> ] [ ii + <int> ] ) ; max_sum [ ( <unk> - cases - <int> ) ] = triangle [ <int> ] [ <int> ] ; } for ( i = <int> ; i < <unk> ; i ++ ) printf ( <str> , max_sum [ i ] ) ; return <int> ; }", "label": 0, "id": 4250}
{"input": "int gcd ( int x , int y ) { if ( x == y ) return x ; if ( x > y ) return gcd ( x - y , y ) ; else return gcd ( x , y - x ) ; } int lcm ( int x , int y ) { return ( x * y ) / gcd ( x , y ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 4251}
{"input": "int gcd ( long int , long int ) ; int main ( void ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long int a , b ; long int gcd , lcm ; scanf ( <str> , & a , & b ) ; gcd = <unk> ( a , b ) ; printf ( <str> , gcd ) ; lcm = ( a * b ) / gcd ; printf ( <str> , lcm ) ; } return <int> ; } int <unk> ( long int a , long int b ) { if ( a == <int> || a % b == <int> ) return b ; else if ( b == <int> || b % a == <int> ) return a ; else if ( a > b ) <unk> ( a % b , b ) ; else <unk> ( a , b % a ) ; }", "label": 0, "id": 4252}
{"input": "int done [ <int> ] , chef [ <int> ] ; int main ( ) { int n = <int> , m = <int> , l , i , j , d , b = <int> , flag = <int> ; scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { b = <int> ; scanf ( <str> , & n , & m ) ; for ( j = <int> ; j < n ; j ++ ) { done [ j ] = <int> ; chef [ j ] = <int> ; } for ( j = <int> ; j < m ; j ++ ) { scanf ( <str> , & done [ j ] ) ; } for ( j = <int> ; j <= n ; j ++ ) { flag = <int> ; for ( d = <int> ; d < m ; d ++ ) { if ( j == done [ d ] ) flag = <int> ; } if ( flag == <int> ) { chef [ b ] = j ; b ++ ; } } for ( j = <int> ; j < ( n - m ) ; j += <int> ) { printf ( <str> , chef [ j ] ) ; } printf ( <str> ) ; for ( j = <int> ; j < ( n - m ) ; j += <int> ) { printf ( <str> , chef [ j ] ) ; } printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 4253}
{"input": "long gcd ( long a , long b ) { long c ; while ( a % b != <int> ) { c = a % b ; a = b ; b = c ; } return b ; } long long lcm ( long a , long b ) { return ( a * b / gcd ( a , b ) ) ; } int main ( void ) { int t ; long a , b , c , tmp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { tmp = a ; a = b ; b = tmp ; } printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 4254}
{"input": "int i ; int main ( ) { long long int t , a , b , v1 , v2 ; scanf ( <str> , & t ) ; printf ( <str> ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; v1 = a <= b ? a : b ; v2 = a >= b ? a : b ; v1 = v1 <= ( v2 - v1 ) ? v1 : ( v2 - v1 ) ; for ( i = v1 ; i >= <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { printf ( <str> , i ) ; break ; } } printf ( <str> , ( a * b ) / i ) ; } }", "label": 2, "id": 4255}
{"input": "main ( ) { int T , i ; scanf ( <str> , & T ) ; int k , j , temp , n ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & n ) ; int A [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & A [ j ] ) ; temp = A [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) if ( A [ k ] <= temp ) temp = A [ k ] ; printf ( <str> , ( n - <int> ) * temp ) ; } }", "label": 0, "id": 4256}
{"input": "int main ( void ) { int t , n , i , j ; long long ans , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; ans = <int> ; sum = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { sum ++ ; } else { ans += sum * ( sum + <int> ) / <int> ; sum = <int> ; } } ans += sum * ( sum + <int> ) / <int> ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 4257}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; return <int> ; }", "label": 1, "id": 4258}
{"input": "int main ( ) { int tcase , A , B , x , y , g , l ; scanf ( <str> , & tcase ) ; while ( tcase -- ) { scanf ( <str> , & A , & B ) ; x = A ; y = B ; while ( x != y ) { if ( x > y ) { x = x - y ; g = x ; } else { y = y - x ; g = y ; } } l = ( A * B ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 4259}
{"input": "int main ( ) { int i , p , q , t , n , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; i = n * ( n + <int> ) / <int> ; while ( i -- ) scanf ( <str> , & a [ i ] ) ; for ( i = n ; i > <int> ; i -- ) { p = i * ( i + <int> ) / <int> ; q = i * ( i - <int> ) / <int> ; while ( n > <int> ) { if ( a [ p ] > a [ p - <int> ] ) a [ q ] += a [ p ] ; else a [ q ] += a [ p - <int> ] ; p -- ; q -- ; n -- ; } } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4260}
{"input": "int maximum ( int x , int y ) { return x > y ? x : y ; } int main ( ) { int a [ <int> ] [ <int> ] , i , j , t , n , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = a [ i ] [ j ] + maximum ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } a [ i ] [ j + <int> ] = <int> ; } max = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ n - <int> ] [ i ] ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4261}
{"input": "long long gcd ( int , int ) ; int main ( ) { int t , a , b ; long long g , l ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g ) ; l = ( a * b ) / g ; printf ( <str> , l ) ; t -- ; } return ( <int> ) ; } long long gcd ( int x , int y ) { long long z ; int i ; z = <int> ; if ( x > y ) { for ( i = <int> ; i <= y ; i ++ ) { if ( x % i == <int> && y % i == <int> ) { z = z * i ; } } } else { for ( i = <int> ; i <= x ; i ++ ) { if ( x % i == <int> && y % i == <int> ) { z = z * i ; } } } return ( z ) ; }", "label": 1, "id": 4262}
{"input": "int inp [ <int> ] , out [ <int> ] ; char str [ BUFF ] ; int largR ( int N ) { int i , j , a , b ; for ( i = N - <int> ; i >= <int> ; i -- ) { a = ( i - <int> ) * i / <int> ; b = ( i + <int> ) * i / <int> ; for ( j = <int> ; j <= i ; j ++ ) inp [ a + j ] += inp [ b + j ] > inp [ b + j + <int> ] ? inp [ b + j ] : inp [ b + j + <int> ] ; } return inp [ <int> ] ; } int main ( ) { int T , i , row , incount , readint ; int N , Ma , num , k ; char cha ; scanf ( <str> , & T ) ; while ( cha = fgetc ( stdin ) ) { if ( cha == <char> ) break ; } N = Ma = row = readint = num = <int> ; while ( ( incount = fread ( str , <int> , BUFF , stdin ) ) > <int> ) { for ( i = <int> ; i < incount ; i ++ ) { if ( str [ i ] >= <char> && str [ i ] <= <char> ) { readint = <int> ; num = num * <int> + str [ i ] - <char> ; } else if ( readint ) { if ( ! Ma ) { N = num ; Ma = N * ( N + <int> ) / <int> ; k = <int> ; } else { inp [ k ++ ] = num ; if ( k > Ma ) { out [ row ++ ] = largR ( N ) ; Ma = <int> ; } } num = readint = <int> ; } } } for ( i = <int> ; i < row ; i ++ ) printf ( <str> , out [ i ] ) ; return <int> ; }", "label": 0, "id": 4263}
{"input": "main ( ) { int gcd , t , i ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } if ( b < a ) { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } printf ( <str> , gcd , ( a * b ) / gcd ) ; } return <int> ; }", "label": 2, "id": 4264}
{"input": "int ar [ <int> ] [ <int> ] ; long long int maxy [ <int> ] ; long long int max ; int n ; long long int a , q ; void sumtrian ( int i , int l , long long int p ) { static int r = <int> ; if ( l == n - <int> ) { q = p + ar [ a ] [ i ] ; if ( r == <int> ) max = q ; else if ( q > max ) { max = q ; maxy [ a ] = max ; } r ++ ; return ; } p += ar [ a ] [ i ] ; sumtrian ( i + l + <int> , l + <int> , p ) ; sumtrian ( i + l + <int> , l + <int> , p ) ; } int main ( ) { int t ; register int i , j , k ; scanf ( <str> , & t ) ; for ( a = <int> ; a < t ; a ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < ( ( n * ( n + <int> ) ) / <int> ) ; i ++ ) { scanf ( <str> , & ar [ a ] [ i ] ) ; } } printf ( <str> ) ; for ( a = <int> ; a < t ; a ++ ) { sumtrian ( <int> , <int> , <int> ) ; printf ( <str> , maxy [ a ] ) ; } }", "label": 2, "id": 4265}
{"input": "int main ( ) { int t , i , n , j , k , min ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( k == <int> ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j - <int> ] [ k ] ; else if ( k == j ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j - <int> ] [ k - <int> ] ; else { if ( a [ j - <int> ] [ k ] >= a [ j - <int> ] [ k - <int> ] ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j - <int> ] [ k ] ; else a [ j ] [ k ] = a [ j ] [ k ] + a [ j - <int> ] [ k - <int> ] ; } } } min = <int> ; for ( k = <int> ; k < n ; k ++ ) { if ( a [ n - <int> ] [ k ] > a [ n - <int> ] [ min ] ) min = k ; } printf ( <str> , a [ n - <int> ] [ min ] ) ; } return ( <int> ) ; }", "label": 0, "id": 4266}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int max_arr ( int arr [ ] ) { int i , max ; max = arr [ <int> ] ; for ( i = <int> ; i < <int> ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } return max ; } int main ( ) { int t , n , i , j ; int A [ <int> ] [ <int> ] ; int D [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= <int> ; i ++ ) { for ( j = <int> ; j <= <int> ; j ++ ) { A [ i ] [ j ] = <int> ; D [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } D [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { D [ i ] [ j ] = A [ i ] [ j ] + max ( D [ i - <int> ] [ j ] , D [ i - <int> ] [ j - <int> ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= <int> ; j ++ ) { printf ( <str> , D [ i ] [ j ] ) ; } printf ( <str> ) ; } int ans = max_arr ( D [ n - <int> ] ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 4267}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int a , min = INT_MAX ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a ) ; if ( min > a ) min = a ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 4268}
{"input": "int MAX ( int a , int b ) { if ( a >= b ) return a ; else return b ; } void SUMTRIAN ( int mat [ <int> ] [ <int> ] , int n ) { int i , j ; int sum [ <int> ] [ <int> ] ; sum [ <int> ] [ <int> ] = mat [ <int> ] [ <int> ] ; for ( i = <int> , j = <int> ; i < n ; i ++ ) sum [ i ] [ j ] = mat [ i ] [ j ] + sum [ i - <int> ] [ j ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { sum [ i ] [ j ] = MAX ( sum [ i - <int> ] [ j ] , sum [ i - <int> ] [ j - <int> ] ) + mat [ i ] [ j ] ; } } int ans = <int> ; for ( i = n - <int> , j = <int> ; j < n ; j ++ ) { ans = MAX ( sum [ i ] [ j ] , ans ) ; } printf ( <str> , ans ) ; } int main ( ) { int t , n , mat [ <int> ] [ <int> ] ; int i , j ; scanf ( <str> , & t ) ; int k ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; SUMTRIAN ( mat , n ) ; } return <int> ; }", "label": 1, "id": 4269}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int sol [ <int> ] [ <int> ] , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n - <int> ; i ++ ) { sol [ n - <int> ] [ i ] = a [ n - <int> ] [ i ] ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { sol [ i ] [ j ] = max ( sol [ i + <int> ] [ j ] , sol [ i + <int> ] [ j + <int> ] ) + a [ i ] [ j ] ; } } printf ( <str> , sol [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4270}
{"input": "main ( ) { printf ( <str> ) ; }", "label": 1, "id": 4271}
{"input": "int main ( ) { int t , i , j , k , n ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n ) ; int * * a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) a [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) for ( k = <int> ; k < n ; k ++ ) a [ i ] [ k ] = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( k = <int> ; k < i + <int> ; k ++ ) scanf ( <str> , & a [ i ] [ k ] ) ; int * * b = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) b [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) for ( k = <int> ; k < n ; k ++ ) b [ i ] [ k ] = <int> ; for ( i = <int> ; i < n ; i ++ ) b [ n - <int> ] [ i ] = a [ n - <int> ] [ i ] ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( k = <int> ; k <= i ; k ++ ) b [ i ] [ k ] = a [ i ] [ k ] + ( b [ i + <int> ] [ k ] >= b [ i + <int> ] [ k + <int> ] ? b [ i + <int> ] [ k ] : b [ i + <int> ] [ k + <int> ] ) ; printf ( <str> , b [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4272}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int t , n , i , j , ans ; int inp [ <int> ] [ <int> ] ; int <unk> [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & inp [ i ] [ j ] ) ; } } <unk> [ <int> ] [ <int> ] = inp [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j != i ) { <unk> [ i ] [ j ] = max ( <unk> [ i - <int> ] [ j - <int> ] , <unk> [ i - <int> ] [ j ] ) + inp [ i ] [ j ] ; } else { <unk> [ i ] [ j ] = <unk> [ i - <int> ] [ j - <int> ] + inp [ i ] [ j ] ; } } } ans = <unk> [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( <unk> [ n - <int> ] [ j ] > ans ) ans = <unk> [ n - <int> ] [ j ] ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 4273}
{"input": "long int gcd ( long int , long int ) ; int main ( void ) { int t ; long int a , b , g , temp , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } long int gcd ( long int a , long int b ) { long int min = a , max = b , temp ; while ( <int> ) { temp = min ; min = max % min ; max = temp ; if ( min == <int> ) return max ; } }", "label": 0, "id": 4274}
{"input": "int main ( ) { int T , i ; long long int A , B ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { int g , l ; scanf ( <str> , & A , & B ) ; g = GCD ( A , B ) ; l = LCM ( A , B ) ; printf ( <str> , g , l ) ; } return <int> ; } int GCD ( long long int a , long long int b ) { if ( b == <int> ) { return a ; } else { return GCD ( b , a % b ) ; } } int LCM ( long long int a , long long int b ) { return ( a * b ) / GCD ( a , b ) ; }", "label": 1, "id": 4275}
{"input": "int main ( ) { int a , b , m , n , t , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; m = b ; while ( n ) { m = m % n ; temp = m ; m = n ; n = temp ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 4276}
{"input": "int main ( ) { int t , i ; long long int a , b , gcd , lcm , p , q , d , j , c ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; p = a ; q = b ; if ( a - b > <int> ) { d = a ; a = b ; b = d ; } for ( j = <int> ; ; ) { c = b % a ; if ( c == <int> ) { gcd = a ; break ; } else { b = a ; a = c ; } } lcm = p * ( q / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4277}
{"input": "unsigned int i , j , t , temp , max , r , p , a [ <int> ] ; unsigned int getint ( ) { unsigned int c ; unsigned int x = <int> ; while ( ( ( c = gc ( ) ) - <char> ) >= <int> ) { if ( c == <char> ) return - getint ( ) ; } do { x = ( x << <int> ) + ( x << <int> ) + ( c - <char> ) ; } while ( ( ( c = gc ( ) ) - <char> ) < <int> ) ; return x ; } int main ( ) { t = getint ( ) ; while ( t -- ) { r = getint ( ) ; memset ( a , <int> , r ) ; temp = getint ( ) ; a [ <int> ] = temp ; for ( i = <int> ; i < r ; i ++ ) { temp = getint ( ) ; p = a [ <int> ] ; a [ <int> ] += temp ; for ( j = <int> ; j < i ; j ++ ) { temp = getint ( ) ; if ( p > a [ j ] ) max = p ; else max = a [ j ] ; p = a [ j ] ; a [ j ] = max + temp ; } temp = getint ( ) ; a [ j ] = temp + p ; } for ( i = <int> , max = <int> ; i < r ; i ++ ) if ( max < a [ i ] ) max = a [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4278}
{"input": "int main ( ) { int i , j , n , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] [ <int> ] ) ; t = a [ i ] [ <int> ] * ( a [ i ] [ <int> ] + <int> ) / <int> ; for ( j = <int> ; j <= t ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; while ( -- a [ i ] [ <int> ] > <int> ) for ( j = <int> , t = <int> + a [ i ] [ <int> ] * ( a [ i ] [ <int> ] - <int> ) / <int> ; j < a [ i ] [ <int> ] ; j ++ ) a [ i ] [ t + j ] += a [ i ] [ t + j + a [ i ] [ <int> ] ] > a [ i ] [ t + j + a [ i ] [ <int> ] + <int> ] ? a [ i ] [ t + j + a [ i ] [ <int> ] ] : a [ i ] [ t + j + a [ i ] [ <int> ] + <int> ] ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , & a [ i ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 4279}
{"input": "int main ( ) { int a [ <int> ] , x , n , t , m , temp , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; m = <int> ; temp = <int> ; a [ <int> ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < m ; j ++ ) { x = a [ j ] * i + temp ; a [ j ] = x ; temp = x / <int> ; } while ( temp != <int> ) { m ++ ; a [ m - <int> ] = temp ; temp = temp / <int> ; } } while ( m -- ) printf ( <str> , a [ m ] ) ; printf ( <str> ) ; } return <int> ; }", "label": 3, "id": 4280}
{"input": "int main ( ) { long long int T , A , B , hcf , i ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & A , & B ) ; for ( i = <int> ; i <= A || i <= B ; ++ i ) { if ( A % i == <int> && B % i == <int> ) hcf = i ; } printf ( <str> , hcf , ( A * B ) / ( hcf ) ) ; T -- ; } return <int> ; }", "label": 2, "id": 4281}
{"input": "void main ( ) { int n , i , j , temp , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int ar [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) ar [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp ) ; ar [ i ] [ j ] = temp ; if ( ! j && ! i ) continue ; else if ( ! ar [ i - <int> ] [ j ] ) ar [ i ] [ j ] += ar [ i - <int> ] [ j - <int> ] ; else ar [ i ] [ j ] += ( ar [ i - <int> ] [ j - <int> ] > ar [ i - <int> ] [ j ] ? ar [ i - <int> ] [ j - <int> ] : ar [ i - <int> ] [ j ] ) ; } } temp = ar [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) temp = ( temp > ar [ n - <int> ] [ i ] ? temp : ar [ n - <int> ] [ i ] ) ; printf ( <str> , temp ) ; } }", "label": 1, "id": 4282}
{"input": "int max , sum , i , t , k , j = <int> , f = <int> ; int q [ <int> ] ; void ser ( int , int ) ; int main ( void ) { fastRead ( & t ) ; while ( t -- ) { fastRead ( & k ) ; k = k * ( k + <int> ) / <int> ; max = <int> ; sum = <int> ; for ( i = <int> ; i < k ; i ++ ) { fastRead ( & q [ i ] ) ; } ser ( q [ <int> ] , <int> ) ; printf ( <str> , max ) ; } return <int> ; } void ser ( int old , int opos ) { sum += old ; j ++ ; if ( ( opos + j ) < k ) { ser ( q [ opos + j ] , opos + j ) ; f = <int> ; } else j -- ; max = maxf ( sum , max ) ; if ( f == <int> ) { f = <int> ; sum = sum - old ; ser ( q [ opos + <int> ] , opos + <int> ) ; j -- ; } else { sum = sum - old ; } } void inline fastRead ( int * a ) { register char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; * a = <int> ; while ( c > <int> ) { * a = * a * <int> + c - <char> ; c = getchar_unlocked ( ) ; } }", "label": 2, "id": 4283}
{"input": "int main ( ) { void calc ( int ) ; int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n ; scanf ( <str> , & n ) ; calc ( n ) ; t -- ; } return <int> ; } void calc ( int n ) { int a [ n ] ; int sum = <int> , i , t , j ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } i = <int> ; if ( n != <int> ) { int m = n - <int> ; while ( m > <int> ) { if ( a [ <int> ] > a [ <int> ] ) { a [ <int> ] = a [ <int> ] ; } for ( j = <int> ; j < m ; j ++ ) { a [ j ] = a [ j + <int> ] ; } sum = sum + a [ <int> ] ; m -- ; } } else sum = a [ <int> ] ; printf ( <str> , sum ) ; }", "label": 2, "id": 4284}
{"input": "int maxx ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j , tt , max = INT_MIN ; scanf ( <str> , & t ) ; if ( t > <int> || t < <int> ) return - <int> ; tt = t ; while ( t -- ) { max = INT_MIN ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] , brr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { arr [ i ] [ j ] = <int> ; } } brr [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) brr [ <int> ] [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) brr [ i ] [ <int> ] = brr [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { brr [ i ] [ j ] = maxx ( brr [ i - <int> ] [ j ] , brr [ i - <int> ] [ j - <int> ] ) + arr [ i ] [ j ] ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( brr [ i ] [ j ] > max ) max = brr [ i ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4285}
{"input": "int GCD ( int , int ) ; int main ( ) { int i , T , p ; int num1 [ <int> ] , num2 [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) scanf ( <str> , & num1 [ i ] , & num2 [ i ] ) ; for ( i = <int> ; i < T ; i ++ ) { p = GCD ( num1 [ i ] , num2 [ i ] ) ; printf ( <str> , p , ( num1 [ i ] * num2 [ i ] ) / p ) ; } return <int> ; } int GCD ( int a , int b ) { int i , smaller , max = <int> ; if ( a >= b ) smaller = b ; else smaller = a ; for ( i = <int> ; i <= smaller ; i ++ ) if ( ( a % i == <int> ) && ( b % i == <int> ) ) max = i ; return max ; }", "label": 1, "id": 4286}
{"input": "int main ( ) { long int a [ <int> ] ; long int i , j , k , min , t ; long int n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = a [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( a [ k ] < min ) min = a [ k ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 4287}
{"input": "int nt , nr , i , j , a [ <int> ] [ <int> ] ; int getSum ( int i , int j ) { int x , y ; if ( i == nr - <int> ) return a [ i ] [ j ] ; x = getSum ( i + <int> , j ) ; y = getSum ( i + <int> , j + <int> ) ; if ( x > y ) return a [ i ] [ j ] + x ; return a [ i ] [ j ] + y ; } int main ( ) { scanf ( <str> , & nt ) ; while ( nt -- ) { scanf ( <str> , & nr ) ; for ( i = <int> ; i < nr ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = nr - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4288}
{"input": "long long int gcdf ( long long int a , long long int b ) { long long int rem ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } for ( ; ( a % b ) != <int> ; ) { rem = a % b ; a = b ; b = rem ; } return b ; } long long int lcmf ( long long int a , long long int b ) { long long int i , lcm = <int> , n = b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } for ( i = <int> ; i <= n ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { a = a / i ; b = b / i ; lcm = lcm * i ; } } lcm = lcm * a * b ; return ( lcm ) ; } int main ( ) { long long int A , B , gcd , lcm ; int n , i ; scanf ( <str> , & n ) ; printf ( <str> ) ; if ( n >= <int> && n <= <int> ) { for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A >= <int> && A <= <int> && B >= <int> && B <= <int> ) { gcd = gcdf ( A , B ) ; lcm = lcmf ( A , B ) ; printf ( <str> , gcd , lcm ) ; } } } return <int> ; }", "label": 2, "id": 4289}
{"input": "void f ( int a [ ] [ <int> ] ) { static int i ; int j = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } i ++ ; } int main ( ) { int n = <int> ; int i = <int> ; int alw ; int chahiye ; int j ; scanf ( <str> , & n ) ; while ( n -- ) { alw = <int> ; scanf ( <str> , & alw ) ; chahiye = alw - <int> ; int a [ alw ] [ alw ] ; for ( i = <int> ; i < alw ; i ++ ) { for ( j = <int> ; j < alw ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < alw ; i ++ ) { f ( a ) ; } i = <int> ; for ( i = alw - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; } chahiye -- ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4290}
{"input": "int main ( ) { int t ; long long int a , b , c , d , r , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a ; d = b ; if ( b == <int> ) g = a ; else { while ( ( a % b != <int> ) ) { r = a % b ; a = b ; b = r ; } g = b ; } l = ( c * d ) / g ; printf ( <str> , g , l ) ; g = l = a = b = c = d = r = <int> ; } return <int> ; }", "label": 0, "id": 4291}
{"input": "void main ( ) { int min , max , i , gcd , lcm , j , tmp ; printf ( <str> ) ; scanf ( <str> , & min , & max ) ; if ( min > max ) { tmp = min ; min = max ; max = tmp ; } for ( i = min ; i >= <int> ; i -- ) { if ( ( min % i == <int> ) && ( max % i == <int> ) ) { break ; } } for ( j = <int> ; j <= max ; j ++ ) { lcm = min * j ; if ( lcm % max == <int> ) break ; } printf ( <str> , lcm , i ) ; }", "label": 1, "id": 4292}
{"input": "int scan ( ) { int n = <int> ; int ch = getchar_unlocked ( ) ; while ( ch < <char> || ch > <char> ) ch = getchar_unlocked ( ) ; while ( ch >= <char> && ch <= <char> ) { n = ( n * <int> ) + ch - <char> ; ch = getchar_unlocked ( ) ; } return n ; } int main ( ) { int t ; t = scan ( ) ; while ( t -- ) { int n , i , j ; int a [ <int> ] [ <int> ] ; n = scan ( ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = scan ( ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4293}
{"input": "int gcd ( int m , int n ) { if ( m == n ) { return m ; } else { if ( m > n ) return gcd ( m - n , n ) ; else return gcd ( m , n - m ) ; } } int lcm ( int m , int n ) { int x ; if ( m > n ) x = m ; else x = n ; while ( <int> ) { if ( m > n ) { if ( x % n == <int> ) { return x ; break ; } x += m ; } else { if ( x % m == <int> ) { return x ; break ; } x += n ; } } } main ( ) { int t , i , m , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m , & n ) ; printf ( <str> , gcd ( m , n ) , lcm ( m , n ) ) ; } }", "label": 1, "id": 4294}
{"input": "int main ( ) { long int a [ <int> ] , c , b , i , j , k , l , n , e , f , m ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } e = n ; c = <int> ; l = <int> ; for ( i = <int> ; i <= n ; i ++ ) { f = <int> ; e = n - c ; while ( f < e ) { m = <int> ; b = <int> ; k = <int> ; for ( j = i + <int> ; m <= f ; j ++ ) { if ( a [ i + b ] <= a [ j ] ) { k ++ ; } m ++ ; b ++ ; } f ++ ; if ( k == f - <int> ) l ++ ; } e -- ; c ++ ; } printf ( <str> , l + n ) ; return <int> ; }", "label": 1, "id": 4295}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , g ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 0, "id": 4296}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int n , num , i , j , colsum [ <int> ] , rowsum [ <int> ] , dsum [ <int> ] , max = <int> ; scanf ( <str> , & n ) ; for ( ; n ; n -- ) { scanf ( <str> , & num ) ; for ( i = <int> ; i < <int> ; i ++ ) colsum [ i ] = rowsum [ i ] = dsum [ i ] = <int> ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < num ; i ++ ) { for ( j = i ; j < num ; j ++ ) { colsum [ i ] += a [ j ] [ i ] ; } } for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { rowsum [ i ] += a [ i ] [ j ] ; } } for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j < num ; j ++ ) { dsum [ i ] += a [ j + i ] [ j ] ; } } max = colsum [ <int> ] ; for ( i = <int> ; i < num ; i ++ ) { if ( colsum [ i ] > max ) max = colsum [ i ] ; if ( rowsum [ i ] > max ) max = rowsum [ i ] ; if ( dsum [ i ] > max ) max = dsum [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 4297}
{"input": "int maxim ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int x , i , j , t , n , a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) { s [ i ] [ j ] = a [ i ] [ j ] ; } else if ( i != <int> && j == <int> ) { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j ] ; } else { s [ i ] [ j ] = a [ i ] [ j ] + maxim ( s [ i - <int> ] [ j ] , s [ i - <int> ] [ j - <int> ] ) ; } } } i = n - <int> ; x = s [ i ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( s [ i ] [ j ] > x ) x = s [ i ] [ j ] ; printf ( <str> , x ) ; } return <int> ; }", "label": 1, "id": 4298}
{"input": "int main ( ) { int t , max , min , n , i ; int * a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , a [ i ] ) ; max = a [ <int> ] ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; if ( a [ i ] > max ) max = a [ i ] ; } printf ( <str> , min ) ; } return <int> ; }", "label": 3, "id": 4299}
{"input": "long long int g ( long long int a , long long int b ) { long long int r = a % b ; if ( r == <int> ) return b ; else return g ( b , r ) ; } int main ( ) { long long int n , t , i , k , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n , & k ) ; gcd = g ( k , n ) ; lcm = ( n * k ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4300}
{"input": "int input ( int ) ; int <unk> ( int * , int ) ; int <unk> ( int * , int ) ; int main ( ) { int <unk> ; printf ( <str> ) ; scanf ( <str> , & <unk> ) ; assert ( <unk> >= <int> ) ; input ( <unk> ) ; return <int> ; } int input ( int <unk> ) { int <unk> [ <unk> ] ; int i ; for ( i = <int> ; i < <unk> ; i ++ ) { scanf ( <str> , & <unk> [ i ] ) ; } <unk> ( <unk> , <unk> ) ; } int <unk> ( int * <unk> , int <unk> ) { int i , j , max = <int> ; for ( i = <int> ; i < <unk> ; i ++ ) { for ( j = i + <int> ; j < <unk> ; j ++ ) { if ( <unk> [ i ] > <unk> [ j ] ) { max = <unk> [ i ] ; <unk> [ i ] = <unk> [ j ] ; <unk> [ j ] = max ; } } } <unk> ( <unk> , <unk> ) ; } int <unk> ( int * <unk> , int <unk> ) { int i , j , count = <int> ; for ( i = <int> ; i < <unk> ; i ++ ) { ++ <unk> [ i ] ; for ( j = i + <int> ; j < <unk> ; j ++ ) { if ( <unk> [ i ] == <unk> [ j ] ) count ++ ; } } printf ( <str> , count + <unk> ) ; }", "label": 1, "id": 4301}
{"input": "int main ( ) { int t = <int> , n = <int> , a = <int> , b = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int x [ n ] ; for ( a = <int> ; a < n ; a ++ ) { scanf ( <str> , & x [ a ] ) ; if ( b > x [ a ] ) { b = x [ a ] ; } } printf ( <str> , b * ( n - <int> ) ) ; b = <int> ; } return <int> ; }", "label": 0, "id": 4302}
{"input": "int main ( ) { int arr [ MAX ] [ MAX ] ; int n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] += ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4303}
{"input": "int cell [ <int> ] [ <int> ] ; int cache [ <int> ] [ <int> ] , n = <int> ; int max ( int t1 , int t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; } int sums ( int i , int j ) { if ( i > n && j > i ) return <int> ; if ( cache [ i ] [ j ] != - <int> ) return cache [ i ] [ j ] ; int t1 = sums ( i + <int> , j ) ; int t2 = sums ( i + <int> , j + <int> ) ; int t = max ( t1 , t2 ) + cell [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int testcases ; scanf ( <str> , & testcases ) ; int <unk> [ testcases ] ; int z = <int> ; while ( z < testcases ) { scanf ( <str> , & n ) ; int i = <int> , j = <int> , k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( k = <int> ; k < j ; k ++ ) { scanf ( <str> , & cell [ i ] [ k ] ) ; } j ++ ; } for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) cache [ i ] [ j ] = - <int> ; <unk> [ z ] = sums ( <int> , <int> ) ; z ++ ; } int i = <int> ; printf ( <str> ) ; for ( i = <int> ; i < testcases ; i ++ ) printf ( <str> , <unk> [ i ] ) ; return <int> ; }", "label": 0, "id": 4304}
{"input": "main ( ) { long long int a , b , t , i , x , y ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; y = a * b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } x = a % b ; while ( x != <int> ) { a = b ; b = x ; x = a % b ; } printf ( <str> , b , y / b ) ; } return <int> ; }", "label": 0, "id": 4305}
{"input": "int main ( ) { int i , t , k = <int> ; long int N , count = <int> , n = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & N ) ; long int A [ N ] ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( i = <int> ; i < N ; i ++ ) { k = i ; count = <int> ; while ( k + <int> < N ) { if ( A [ k ] <= A [ k + <int> ] ) { k ++ ; count ++ ; continue ; } else break ; } n = n + count ; } t -- ; printf ( <str> , n + N ) ; } return <int> ; }", "label": 1, "id": 4306}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; return b ; } int main ( ) { int t , n , i , j ; int a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) sum [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == <int> ) sum [ i ] [ j ] = a [ i ] [ j ] + sum [ i - <int> ] [ <int> ] ; else sum [ i ] [ j ] = a [ i ] [ j ] + max ( sum [ i - <int> ] [ j ] , sum [ i - <int> ] [ j - <int> ] ) ; } int max = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( sum [ n - <int> ] [ i ] >= max ) max = sum [ n - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4307}
{"input": "int n ; int a [ <int> ] [ <int> ] , max ; void sum ( int i , int j , int summ ) { if ( i == n ) { if ( summ > max ) max = summ ; return ; } sum ( i + <int> , j , summ + a [ i ] [ j ] ) ; sum ( i + <int> , j + <int> , summ + a [ i ] [ j ] ) ; } int main ( ) { int t , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; ++ i ) { scanf ( <str> , & n ) ; max = <int> ; for ( j = <int> ; j < n ; ++ j ) { for ( k = <int> ; k <= j ; ++ k ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( k ; k < n ; ++ k ) a [ j ] [ k ] = - <int> ; } sum ( <int> , <int> , <int> ) ; printf ( <str> , max ) ; } }", "label": 2, "id": 4308}
{"input": "int main ( ) { int t , i , n ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; int arr [ n ] ; scanf ( <str> , arr + <int> ) ; int min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , arr + i ) ; if ( * ( arr + i ) < min ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; t -- ; } return <int> ; }", "label": 0, "id": 4309}
{"input": "int fact ( int n ) { if ( n == <int> || n == <int> ) return <int> ; else return ( n * fact ( n - <int> ) ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] , i , count = <int> , temp = <int> , num = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( i == n - <int> && n > <int> && a [ i - <int> ] <= a [ i ] ) count = count + fact ( temp + <int> ) ; else if ( n == <int> ) count = <int> ; else if ( a [ i ] <= a [ i + <int> ] ) { num ++ ; temp ++ ; } else { count = count + fact ( temp + <int> ) ; temp = <int> ; } } count = count + ( n - num ) ; printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 4310}
{"input": "main ( ) { int n , a , l , x = <int> , i , j , arr [ <int> ] [ <int> ] , b [ <int> ] , k ; printf ( <str> ) ; scanf ( <str> , & n ) ; for ( a = <int> ; a < n ; a ++ ) { x = <int> ; printf ( <str> ) ; scanf ( <str> , & l ) ; printf ( <str> ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ j ] [ i ] ) ; } for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == j ) x = x + arr [ i ] [ j ] ; } } k = a ; b [ k ] = x ; } for ( k = <int> ; k < n ; k ++ ) printf ( <str> , b [ k ] ) ; }", "label": 3, "id": 4311}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , min = <int> ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4312}
{"input": "int main ( ) { long long int n , a [ <int> ] , sum , k = <int> , i , j , t ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; k = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) break ; else k ++ ; } } sum = k + n ; printf ( <str> , sum ) ; t -- ; } }", "label": 0, "id": 4313}
{"input": "int GCD ( int n1 , int n2 ) { if ( n2 != <int> ) { return ( GCD ( n2 , n1 % n2 ) ) ; } else { return n1 ; } } int main ( ) { int n , h , l , i , a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { h = GCD ( a , b ) ; } else { h = GCD ( b , a ) ; } l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 1, "id": 4314}
{"input": "int main ( ) { int size , test , z = <int> ; scanf ( <str> , & test ) ; int a [ <int> ] ; if ( test != <int> ) do { scanf ( <str> , & size ) ; int count , i , j ; count = <int> ; for ( i = <int> ; i < size ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < size ; i ++ ) { count ++ ; int k = i ; for ( j = k + <int> ; j < size ; j ++ ) { if ( a [ k ] < a [ j ] ) { count ++ ; k ++ ; } else break ; } } printf ( <str> , count ) ; z ++ ; } while ( z < test ) ; return <int> ; }", "label": 3, "id": 4315}
{"input": "int best_path ( int l , int tri [ <int> ] [ <int> ] , int r , int c ) { int i , j , k ; if ( r == l ) { return <int> ; } int max = MAX ( best_path ( l , tri , r + <int> , c ) , best_path ( l , tri , r + <int> , c + <int> ) ) ; return tri [ r ] [ c ] + max ; } int main ( ) { int n , i , j , k ; scanf ( <str> , & n ) ; int m [ n ] ; int tri [ n ] [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m [ i ] ) ; for ( j = <int> ; j < m [ i ] ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & tri [ i ] [ j ] [ k ] ) ; } } } int sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { sum = best_path ( m [ i ] , tri [ i ] , <int> , <int> ) ; printf ( <str> , sum ) ; } }", "label": 3, "id": 4316}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm , t , x ; scanf ( <str> , & t ) ; for ( x = <int> ; x < t ; x ++ ) { scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4317}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int min = arr [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( <str> , ( ( n - <int> ) * min ) ) ; } }", "label": 0, "id": 4318}
{"input": "int tcout [ <int> ] ; int count_subarray ( int A [ ] , int size ) { int i , j , c = <int> ; for ( j = <int> ; j < size ; j ++ ) { c ++ ; i = j ; while ( i < size - <int> && A [ i ] <= A [ ++ i ] ) { c ++ ; } } return c ; } int main ( ) { int T , N , i , j ; unsigned int a [ <int> ] ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } tcout [ j ] = count_subarray ( a , N ) ; } for ( j = <int> ; j < T ; j ++ ) { printf ( <str> , tcout [ j ] ) ; } return <int> ; }", "label": 0, "id": 4319}
{"input": "int gcd ( int x , int y ) { int t , a = x , b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } return a ; } int main ( ) { int t , a , b , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 4320}
{"input": "int main ( ) { int test , n , i , j ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4321}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , a [ <int> ] , i , m = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( m > a [ i ] ) m = a [ i ] ; } printf ( <str> , ( n - <int> ) * m ) ; } }", "label": 0, "id": 4322}
{"input": "int main ( ) { int t , n , i , x = <int> , j = <int> , sum , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j ; j <= i + x ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } x += i ; } j = <int> ; sum = a [ j ] ; i = <int> ; while ( i <= n + <int> ) { sum += ( a [ j + i ] > a [ j + i + <int> ] ) ? a [ j + i ] : a [ j + i + <int> ] ; i ++ ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 4323}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int sums ( int * * p , int n ) { int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) p [ i ] [ j ] = max ( p [ i + <int> ] [ j ] + p [ i ] [ j ] , p [ i + <int> ] [ j + <int> ] + p [ i ] [ j ] ) ; return p [ <int> ] [ <int> ] ; } int main ( ) { int i , n , t , j , count ; scanf ( <str> , & t ) ; int * * p ; while ( t -- ) { scanf ( <str> , & n ) ; p = ( int * * ) calloc ( n , sizeof ( int * ) ) ; for ( i = <int> ; i <= n ; i ++ ) p [ i ] = calloc ( i + <int> , sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & p [ i ] [ j ] ) ; printf ( <str> , sums ( p , n ) ) ; } }", "label": 0, "id": 4324}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { long long int n , i , cnt = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i + <int> ] < a [ i ] ) cnt = cnt + a [ i + <int> ] ; else if ( a [ i ] <= a [ i + <int> ] ) { cnt = cnt + a [ i ] ; a [ i + <int> ] = a [ i ] ; } } printf ( <str> , cnt ) ; t -- ; } }", "label": 1, "id": 4325}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long min , cost = <int> , i , n ; scanf ( <str> , & n ) ; long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 4326}
{"input": "int main ( ) { int m , n , i , d , j , k , l ; scanf ( <str> , & n ) ; int sum [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & d ) ; int ar [ d ] [ d ] ; for ( j = <int> ; j < d ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & ar [ j ] [ k ] ) ; } sum [ i ] = ar [ <int> ] [ <int> ] ; m = <int> ; for ( l = <int> ; l < d ; l ++ ) { if ( ar [ l ] [ m ] > ar [ l ] [ m + <int> ] ) sum [ i ] = sum [ i ] + ar [ l ] [ m ] ; else { sum [ i ] = sum [ i ] + ar [ l ] [ m + <int> ] ; m = m + <int> ; } } } for ( i = <int> ; i < n ; i ++ ) ; printf ( <str> , & sum [ i ] ) ; return <int> ; }", "label": 1, "id": 4327}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int i , j , k ; int n ; scanf ( <str> , & n ) ; while ( n -- ) { int nrows ; scanf ( <str> , & nrows ) ; int a [ nrows ] [ nrows ] ; for ( i = <int> ; i < nrows ; i ++ ) { for ( j = <int> ; j < nrows ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < nrows ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < nrows ; i ++ ) { a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; } for ( i = <int> ; i < nrows ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( i == j ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; continue ; } else a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i - <int> ] [ j - <int> ] , a [ i - <int> ] [ j ] ) ; } } int max = a [ nrows - <int> ] [ <int> ] ; for ( j = <int> ; j < nrows ; j ++ ) { if ( a [ nrows - <int> ] [ j ] > max ) max = a [ nrows - <int> ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4328}
{"input": "int main ( ) { int T ; long long int N ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; int ar [ N ] ; long long int min = <int> ; for ( int j = <int> ; j < N ; j ++ ) { scanf ( <str> , & ar [ j ] ) ; if ( min > ar [ j ] ) min = ar [ j ] ; } printf ( <str> , min ) ; long long cost = min * ( N - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 4329}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; else if ( a == b ) return a ; else { if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } } int main ( ) { int t ; long long int a , b , c , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; l = ( a * b ) / c ; printf ( <str> , c , l ) ; } return <int> ; }", "label": 0, "id": 4330}
{"input": "int gcd ( int a , int b ) ; int lcm ( int a , int b ) ; int main ( ) { int t , a , b , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b % a == <int> ) return a ; else return gcd ( b % a , a ) ; return <int> ; }", "label": 1, "id": 4331}
{"input": "int main ( ) { int n , a , b , l , r ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; l = a * b ; do { r = a % b ; a = b ; b = r ; } while ( r != <int> ) ; printf ( <str> , a , l / a ) ; } }", "label": 1, "id": 4332}
{"input": "int main ( ) { unsigned int n , t , temp [ <int> ] [ <int> ] = { <int> } , result [ <int> ] ; int i , j , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & temp [ j ] [ k ] ) ; } } for ( j = t - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( temp [ j ] [ k ] > temp [ j ] [ k + <int> ] ) { temp [ j - <int> ] [ k ] += temp [ j ] [ k ] ; } else { temp [ j - <int> ] [ k ] += temp [ j ] [ k + <int> ] ; } } } result [ i ] = temp [ <int> ] [ <int> ] ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; }", "label": 1, "id": 4333}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int m , n , i , h ; scanf ( <str> , & m , & n ) ; for ( i = <int> ; i <= m * n ; i ++ ) { if ( i % m == <int> && i % n == <int> ) break ; } for ( h = m < n ? m : n ; h >= <int> ; h -- ) { if ( m % h == <int> && n % h == <int> ) break ; } printf ( <str> , h , i ) ; } return <int> ; }", "label": 2, "id": 4334}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i , j , c = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) c ++ ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 4335}
{"input": "typedef long long int ll ; int main ( ) { ll a , b , t , i , c , d , k , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; c = a > b ? a : b ; d = a < b ? a : b ; while ( c % d != <int> ) { k = d ; d = c % d ; c = k ; } l = ( a * b ) / d ; printf ( <str> , d , l ) ; } }", "label": 0, "id": 4336}
{"input": "int main ( ) { int a ; scanf ( <str> , & a ) ; while ( a -- ) { long b , c , m , n ; scanf ( <str> , & b , & c ) ; m = b ; n = c ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( b * c ) / m ) ; } }", "label": 0, "id": 4337}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int t , n , i , j , max1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i < n + <int> ; i ++ ) { for ( j = <int> ; j < n + <int> ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n + <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n + <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } } max1 = <int> ; for ( i = <int> ; i < n + <int> ; i ++ ) { if ( a [ n ] [ i ] > max1 ) max1 = a [ n ] [ i ] ; } printf ( <str> , max1 ) ; } return <int> ; }", "label": 0, "id": 4338}
{"input": "long long int gcd ( long long int a , long long int b ) { long long int rem , div ; rem = a % b ; div = b ; if ( rem == <int> ) return div ; else gcd ( div , rem ) ; } int main ( ) { int t ; long long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } }", "label": 0, "id": 4339}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test > <int> ) { int i = <int> ; int rows ; scanf ( <str> , & rows ) ; int triangle [ rows ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) { int j = <int> ; for ( j = <int> ; j < <int> ; j ++ ) { triangle [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < rows ; i ++ ) { int j = <int> ; for ( j = <int> ; j <= i + <int> ; j ++ ) { int num ; scanf ( <str> , & num ) ; triangle [ i ] [ j ] = num ; } } int sum = <int> , k = rows - <int> ; int index = k + <int> ; int flag = <int> ; while ( k >= <int> ) { int max = triangle [ k ] [ <int> ] ; if ( flag == <int> ) { int l = <int> ; for ( l = <int> ; l <= index ; l ++ ) { if ( triangle [ k ] [ l ] > max ) { max = triangle [ k ] [ l ] ; index = l ; } } flag = <int> ; if ( index == k + <int> ) { index = index - <int> ; } sum = sum + max ; } else { if ( index == <int> ) { sum = sum + triangle [ k ] [ <int> ] ; } else if ( triangle [ k ] [ index - <int> ] > triangle [ k ] [ index ] ) { max = triangle [ k ] [ index - <int> ] ; sum = sum + max ; index = index - <int> ; } else { max = triangle [ k ] [ index ] ; sum = sum + max ; } } k -- ; } printf ( <str> , sum ) ; test -- ; } return <int> ; }", "label": 1, "id": 4340}
{"input": "int arr [ <int> ] [ <int> ] , indArr [ <int> ] ; int init ( ) { int i = <int> , j = <int> ; for ( ; i < <int> ; i ++ ) { for ( ; j < <int> ; j ++ ) arr [ i ] [ j ] = - <int> ; } for ( i = <int> ; i < <int> ; i ++ ) indArr [ i ] = - <int> ; indArr [ <int> ] = <int> ; } int findMax ( int index , int rowC ) { int indexM = <int> , i = <int> ; for ( ; i <= rowC ; i ++ ) { if ( arr [ index ] [ i ] > arr [ index ] [ indexM ] ) indexM = i ; } return indexM ; } int findMax2 ( int index , int rowC ) { if ( rowC == <int> ) return rowC ; else if ( arr [ index ] [ rowC ] == - <int> ) return rowC - <int> ; else { if ( arr [ index ] [ rowC ] > arr [ index ] [ rowC - <int> ] ) return rowC ; else return rowC - <int> ; } } void SumMaxLength ( int startI , int rowC ) { int sumMax = <int> , j = rowC - <int> , indexM = <int> ; indexM = findMax ( startI + rowC - <int> , rowC ) ; sumMax = arr [ startI + rowC - <int> ] [ indexM ] ; for ( ; j >= <int> ; j -- ) { indexM = findMax2 ( startI + j , indexM ) ; sumMax += arr [ startI + j ] [ indexM ] ; } printf ( <str> , sumMax ) ; } int main ( ) { int i = <int> , cnt = <int> , len = <int> , val , j = <int> , indarr = <int> ; scanf ( <str> , & cnt ) ; indArr [ indarr ++ ] = <int> ; while ( cnt -- ) { scanf ( <str> , & val ) ; indArr [ indarr ] = indArr [ indarr - <int> ] + val ; len = <int> ; while ( val -- ) { for ( j = <int> ; j < len ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; i ++ ; len ++ ; } SumMaxLength ( indArr [ indarr - <int> ] , indArr [ indarr ] - indArr [ indarr - <int> ] ) ; indarr ++ ; } return <int> ; }", "label": 1, "id": 4341}
{"input": "int main ( ) { int t , a , d , p , b , l , k , max , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; min = a > b ? b : a ; max = a > b ? a : b ; for ( l = max ; l <= a * b ; l ++ ) { if ( l % a == <int> && l % b == <int> ) { d = l ; printf ( <str> , l ) ; break ; } } p = a * b ; k = p / d ; printf ( <str> , k ) ; } return <int> ; }", "label": 2, "id": 4342}
{"input": "int main ( void ) { short t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i - <int> ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4343}
{"input": "int temp [ <int> ] [ <int> ] ; int max ( int , int ) ; int fun ( int a [ ] [ <int> ] , int i , int j , int n ) { if ( i == n - <int> ) { temp [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; return temp [ i ] [ j ] ; } if ( temp [ i ] [ j ] != - <int> ) return temp [ i ] [ j ] ; temp [ i ] [ j ] = a [ i ] [ j ] + max ( fun ( a , i + <int> , j , n ) , fun ( a , i + <int> , j + <int> , n ) ) ; return temp [ i ] [ j ] ; } int main ( ) { int j , i , t , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) temp [ i ] [ j ] = - <int> ; printf ( <str> , fun ( a , <int> , <int> , n - <int> ) ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 4344}
{"input": "int main ( ) { int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int mat [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( mat [ i ] [ j ] > mat [ i ] [ j + <int> ] ) mat [ i - <int> ] [ j ] = mat [ i ] [ j ] + mat [ i - <int> ] [ j ] ; else mat [ i - <int> ] [ j ] = mat [ i ] [ j + <int> ] + mat [ i - <int> ] [ j ] ; } printf ( <str> , mat [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4345}
{"input": "int readint ( ) { int n = <int> ; char c ; while ( c = getchar_unlocked ( ) ) { if ( c == <char> || c == <char> ) return n ; else n = n * <int> + c - <char> ; } return n ; } int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4346}
{"input": "int GCD ( int x , int y ) { if ( y == <int> ) { return x ; } return GCD ( y , x % y ) ; } int main ( ) { int t , i , a , b , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = GCD ( a , b ) ; l = ( int ) a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 4347}
{"input": "int gcm ( int , int ) ; int main ( ) { int g , nt , a , b ; scanf ( <str> , & nt ) ; while ( nt -- ) { g = <int> ; scanf ( <str> , & a , & b ) ; g = gcm ( a , b ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; } int gcm ( int x , int y ) { int i , g = <int> ; for ( i = <int> ; i <= ( x <= y ? x : y ) ; i ++ ) { if ( x % i == <int> && y % i == <int> ) g = i ; } return g ; }", "label": 2, "id": 4348}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm , T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 4349}
{"input": "int p [ <int> ] [ <int> ] ; int st [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int s ( int i , int j , int n ) { int t1 , t2 , t ; if ( i > n ) return <int> ; if ( st [ i ] [ j ] == <int> ) { t1 = s ( i + <int> , j , n ) ; t2 = s ( i + <int> , j + <int> , n ) ; t = max ( t1 , t2 ) + p [ i ] [ j ] ; st [ i ] [ j ] = t ; } return st [ i ] [ j ] ; } int main ( ) { int l , z , n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) st [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & p [ i ] [ j ] ) ; z = s ( <int> , <int> , n - <int> ) ; printf ( <str> , z ) ; } return <int> ; }", "label": 0, "id": 4350}
{"input": "int ar [ <int> ] [ <int> ] ; long long int max ; int n [ <int> ] ; void sumtrian ( int a , int i , int l , long long int p ) { int q ; if ( l == n [ a ] - <int> ) { q = p + ar [ a ] [ i ] ; if ( max <= <int> ) { max = q ; } if ( q > max ) { max = q ; } return ; } p += ar [ a ] [ i ] ; sumtrian ( a , i + l + <int> , l + <int> , p ) ; sumtrian ( a , i + l + <int> , l + <int> , p ) ; return ; } int main ( ) { int t ; register int i , a , k ; scanf ( <str> , & t ) ; for ( a = <int> ; a < t ; a ++ ) { scanf ( <str> , & n [ a ] ) ; for ( i = <int> ; i < ( ( n [ a ] * ( n [ a ] + <int> ) ) / <int> ) ; i ++ ) { scanf ( <str> , & ar [ a ] [ i ] ) ; } } for ( a = <int> ; a < t ; a ++ ) { max = ( <int> ) ; sumtrian ( a , <int> , <int> , <int> ) ; printf ( <str> , max ) ; } }", "label": 2, "id": 4351}
{"input": "int main ( ) { int n , m , i , j , s1 , s2 , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; s1 = <int> ; s2 = <int> ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } s1 += a [ i ] [ <int> ] ; s2 += a [ i ] [ i ] ; } if ( s1 > s2 ) printf ( <str> , s1 ) ; else printf ( <str> , s2 ) ; } return <int> ; }", "label": 1, "id": 4352}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , x , gcd , sum ; scanf ( <str> , & a , & b ) ; sum = a * b ; if ( a < b ) { x = b ; } else { x = a ; } for ( ; x >= <int> ; x ++ ) { if ( x % a == <int> && x % b == <int> ) { break ; } } sum = sum / x ; printf ( <str> , sum , x ) ; } return <int> ; }", "label": 2, "id": 4353}
{"input": "int main ( ) { int t , q ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long int sum = <int> , i = <int> ; while ( i <= n - <int> ) { int c = <int> ; while ( a [ i ] <= a [ i + <int> ] && ( i + <int> < n ) ) { c ++ ; i ++ ; } i ++ ; sum += ( c * ( c + <int> ) / <int> ) ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 4354}
{"input": "int main ( ) { int test_case , a , b , p ; scanf ( <str> , & test_case ) ; while ( test_case -- ) { scanf ( <str> , & a , & b ) ; p = a * b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } printf ( <str> , a , ( p / a ) ) ; } return <int> ; }", "label": 1, "id": 4355}
{"input": "int main ( ) { int len , i = <int> , min = <int> , j = <int> ; int b [ <int> ] ; int nc ; scanf ( <str> , & nc ) ; scanf ( <str> , & len ) ; while ( nc -- ) { for ( i = <int> ; i < len ; i ++ ) { scanf ( <str> , & b [ i ] ) ; } for ( j = <int> ; j < len ; j ++ ) { min = b [ <int> ] ; if ( b [ i ] < b [ <int> ] ) { min = b [ j ] ; } } printf ( <str> , ( len - <int> ) * min ) ; } return <int> ; }", "label": 3, "id": 4356}
{"input": "int max ( int a , int b ) { return ( ( a > b ) ? a : b ) ; } int s ( int i , int j , int a [ ] [ <int> ] , int n ) { if ( i == n - <int> || j == n - <int> ) { return a [ i ] [ j ] ; } return a [ i ] [ j ] + max ( s ( i + <int> , j , a , n ) , s ( i + <int> , j + <int> , a , n ) ) ; } int main ( ) { int t ; int n ; int i ; int j ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , s ( <int> , <int> , a , n ) ) ; } return <int> ; }", "label": 2, "id": 4357}
{"input": "int main ( ) { int a [ <int> ] , b [ <int> ] , i , j , n , t , s , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; if ( n == <int> ) { sum = a [ <int> ] ; printf ( <str> , sum ) ; } for ( i = <int> , sum = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & b [ j ] ) ; s = a [ <int> ] + b [ <int> ] + b [ <int> ] ; if ( s > sum ) sum = s ; for ( j = <int> ; j <= i ; ++ j ) a [ j ] = b [ j ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4358}
{"input": "int main ( ) { int n , i ; scanf ( <str> , & n ) ; int a [ n ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] [ <int> ] , & a [ i ] [ <int> ] ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) { int big , small ; if ( a [ i ] [ <int> ] > a [ i ] [ <int> ] ) { small = a [ i ] [ <int> ] ; big = a [ i ] [ <int> ] ; } else { big = a [ i ] [ <int> ] ; small = a [ i ] [ <int> ] ; } int rem = big % small ; while ( rem != <int> ) { big = small ; small = rem ; rem = big % small ; } int hcf = small ; long lcm = ( a [ i ] [ <int> ] * a [ i ] [ <int> ] ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 4359}
{"input": "int main ( ) { int i , j , n , k , p , arr [ <int> ] [ <int> ] ; ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p ) ; for ( j = <int> ; j < p ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } for ( j = p - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k < j ; k ++ ) { if ( arr [ j ] [ k ] > arr [ j ] [ k + <int> ] ) { arr [ j - <int> ] [ k ] += arr [ j ] [ k ] ; } else { arr [ j - <int> ] [ k ] += arr [ j ] [ k + <int> ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4360}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) return gcd ( ( a - b ) , b ) ; else return gcd ( a , ( b - a ) ) ; }", "label": 1, "id": 4361}
{"input": "int main ( ) { int i , j , k ; long long int n , t , a [ <int> ] , b [ <int> ] , l = <int> , s = <int> , c = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( k = <int> ; k < n - <int> ; k ++ ) { if ( a [ k ] == - <int> ) continue ; if ( a [ k ] > a [ k + <int> ] ) { b [ l ] = a [ k + <int> ] ; a [ k ] = - <int> ; } else if ( a [ k ] < a [ k + <int> ] ) { b [ l ] = a [ k ] ; a [ k + <int> ] = - <int> ; } l ++ ; c ++ ; } for ( k = <int> ; k < c ; k ++ ) { s = s + b [ k ] ; } printf ( <str> , s ) ; s = <int> ; l = <int> ; c = <int> ; } return ( <int> ) ; }", "label": 2, "id": 4362}
{"input": "int arr [ <int> ] [ <int> ] , a [ <int> ] [ <int> ] , row , col ; int find_max ( ) { int i , j , x , max ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j < col ; j ++ ) a [ i ] [ j ] = <int> ; } a [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i ] [ j ] = a [ i - <int> ] [ j ] + arr [ i ] [ j ] ; } else { x = ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ; a [ i ] [ j ] = arr [ i ] [ j ] + x ; } } } max = a [ row - <int> ] [ <int> ] ; for ( i = <int> ; i < col ; i ++ ) { if ( a [ row - <int> ] [ i ] > max ) max = a [ row - <int> ] [ i ] ; } return max ; } int main ( ) { int i , j , tot ; int p ; scanf ( <str> , & tot ) ; while ( tot > <int> ) { scanf ( <str> , & row ) ; col = row ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j < col ; j ++ ) { if ( j > i ) arr [ i ] [ j ] = <int> ; else scanf ( <str> , & arr [ i ] [ j ] ) ; } } p = find_max ( ) ; printf ( <str> , p ) ; tot -- ; } return <int> ; }", "label": 0, "id": 4363}
{"input": "int mat [ <int> ] [ <int> ] = { <int> } ; int l ; int maxi ( int a , int b ) { return ( a >= b ) ? a : b ; } long long int MS ( int i , int j , long long int max , long long int loc ) { loc += mat [ i ] [ j ] ; if ( loc > max ) { max = loc ; } if ( i == l || j == l ) return max ; else return maxi ( MS ( i + <int> , j , max , loc ) , MS ( i + <int> , j + <int> , max , loc ) ) ; } int main ( ) { int t , i , j , temp , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & mat [ i ] [ j ] ) ; } } printf ( <str> , MS ( <int> , <int> , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 4364}
{"input": "void main ( ) { int t , n , a [ <int> ] , r = <int> , i , m = <int> , j , k , u [ <int> ] ; scanf ( <str> , & t ) ; if ( t <= <int> ) { for ( k = <int> ; k < t ; k ++ ) { r = <int> ; scanf ( <str> , & n ) ; if ( n < <int> ) { for ( i = <int> ; i < n ; i ++ ) { m = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] > <int> && a [ j ] <= <int> ) if ( a [ j ] > m && i != <int> ) m = a [ j ] ; } r = m + r ; } } u [ k ] = r ; } for ( k = <int> ; k < t ; k ++ ) printf ( <str> , u [ k ] ) ; } }", "label": 1, "id": 4365}
{"input": "int main ( ) { int t , n , a [ n ] , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 4366}
{"input": "int main ( ) { int t ; int n , i , j , x ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; if ( ( n >= <int> ) | ( n < <int> ) ) return <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( ( a [ i ] [ j ] > <int> ) | ( a [ i ] [ j ] < <int> ) ) return <int> ; } } for ( i = n ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] >= a [ i - <int> ] [ j ] ) x = a [ i ] [ j ] ; else x = a [ i ] [ j + <int> ] ; a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + x ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4367}
{"input": "int main ( ) { int T , i , k ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { int n , m , j ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } i = <int> ; m = arr [ <int> ] [ <int> ] ; while ( i < n ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { arr [ i ] [ j ] += arr [ i - <int> ] [ <int> ] ; } else if ( j != i ) { arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } else { arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } if ( arr [ i ] [ j ] > m ) { m = arr [ i ] [ j ] ; } } i ++ ; } printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 4368}
{"input": "int gcd ( int x , int y ) { int divisor , dividend , rem ; divisor = x <= y ? x : y ; dividend = x >= y ? x : y ; while ( divisor != <int> ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; } return dividend ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int x , y , hcf , lcm ; scanf ( <str> , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 4369}
{"input": "long int max ( long int a , long int b ) ; int main ( ) { int a [ <int> ] [ <int> ] , i , j , n , row ; static long int s [ <int> ] [ <int> ] , val = <int> ; scanf ( <str> , & n ) ; while ( n -- ) { val = <int> ; scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> ) s [ i ] [ j ] = a [ i ] [ j ] ; else if ( i > <int> && j == <int> ) s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j ] ; else if ( i == j ) s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j - <int> ] ; else s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - <int> ] [ j ] , s [ i - <int> ] [ j - <int> ] ) ; } for ( j = <int> ; j < row ; j ++ ) { if ( s [ row - <int> ] [ j ] > val ) val = s [ row - <int> ] [ j ] ; } printf ( <str> , val ) ; } return <int> ; } long int max ( long int a , long int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 4370}
{"input": "int main ( ) { int a , b , i , d = <int> , n , m , k = <int> ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= ( a + b ) / <int> ; i ++ ) { if ( a % i == <int> && b % i == <int> ) d = i ; } n = a / d ; m = b / d ; k = d * n * m ; printf ( <str> , d , k ) ; return <int> ; }", "label": 1, "id": 4371}
{"input": "int maxx ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j , tt , max = INT_MIN ; scanf ( <str> , & t ) ; if ( t > <int> || t < <int> ) return - <int> ; tt = t ; while ( t -- ) { max = INT_MIN ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] , brr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j <= i ) scanf ( <str> , & arr [ i ] [ j ] ) ; else arr [ i ] [ j ] = <int> ; } } brr [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) brr [ <int> ] [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) brr [ i ] [ <int> ] = brr [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { brr [ i ] [ j ] = maxx ( brr [ i - <int> ] [ j ] , brr [ i - <int> ] [ j - <int> ] ) + arr [ i ] [ j ] ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( brr [ i ] [ j ] > max ) max = brr [ i ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4372}
{"input": "long long int fact ( int num ) { if ( num == <int> ) return <int> ; else return num * fact ( num - <int> ) ; } int main ( void ) { int t , n , i , top , lb , ub , * a ; long long int cnt ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; cnt = n ; top = lb = ub = <int> ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i > <int> && a [ i ] >= a [ i - <int> ] ) ub ++ ; else if ( lb != ub ) { cnt += fact ( ub - lb ) ; lb = ub = i ; } } if ( lb != ub ) cnt += fact ( ub - lb ) ; printf ( <str> , cnt ) ; free ( a ) ; } return <int> ; }", "label": 1, "id": 4373}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] = { <int> , <int> } ; int i , l , t , j , cases , ccnt ; scanf ( <str> , & cases ) ; for ( ccnt = <int> ; ccnt < cases ; ccnt ++ ) { scanf ( <str> , & l ) ; getchar ( ) ; for ( i = <int> ; i < l ; i ++ ) for ( t = <int> ; t <= i ; t ++ ) { a [ i ] [ t ] = getchar ( ) - <char> ; getchar ( ) ; } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( t = <int> ; t <= i ; t ++ ) { a [ i ] [ t ] += ( a [ i + <int> ] [ t ] >= a [ i + <int> ] [ t + <int> ] ) ? a [ i + <int> ] [ t ] : a [ i + <int> ] [ t + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4374}
{"input": "int main ( ) { int i , j , a [ <int> ] [ <int> ] , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4375}
{"input": "int main ( ) { int TestCases ; int N1 ; int N2 ; int LCM , GCD ; int <unk> ; scanf ( <str> , & TestCases ) ; while ( TestCases > <int> ) { scanf ( <str> , & N1 , & N2 ) ; for ( <unk> = <int> ; <unk> <= N2 / <int> ; <unk> ++ ) { if ( N1 % <unk> == <int> && N2 % <unk> == <int> ) { GCD = <unk> ; } } LCM = N1 * N2 / GCD ; printf ( <str> , GCD , LCM ) ; } }", "label": 2, "id": 4376}
{"input": "int main ( ) { int t , i , j , temp , n , x ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( arr [ j ] > arr [ j + <int> ] ) { temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } } x = arr [ <int> ] * ( n - <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 2, "id": 4377}
{"input": "int main ( ) { int a , b , gcd , n , m , c , T , A , B ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & a , & b ) ; m = a ; c = b ; while ( b != <int> ) { gcd = a % b ; a = b ; b = gcd ; } n = ( m * c ) / a ; A = a ; B = n ; printf ( <str> , A , B ) ; T -- ; } }", "label": 1, "id": 4378}
{"input": "int main ( ) { int t , k , i ; long m , x , y , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; if ( x < y ) m = y ; else m = x ; for ( i = m ; i >= <int> ; i -- ) if ( x % i == <int> && y % i == <int> ) gcd = i ; printf ( <str> , gcd , ( ( x * y ) / gcd ) ) ; } return <int> ; }", "label": 2, "id": 4379}
{"input": "void main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int A , B , GCD , LCM , remainder , numerator , denominator ; scanf ( <str> , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } GCD = denominator ; LCM = A * B / GCD ; printf ( <str> , GCD , LCM ) ; } }", "label": 1, "id": 4380}
{"input": "int main ( ) { int i , j , k , l , n , m , o , p , t ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( o = <int> ; o < t ; o ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] = arr [ i + <int> ] [ j + <int> ] + arr [ i ] [ j ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4381}
{"input": "int main ( ) { long int a , s , d , gcd , lcm ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & s ) ; for ( d = <int> ; d <= a && d <= s ; d ++ ) { if ( a % d == <int> && s % d == <int> ) gcd = d ; } lcm = ( a * s ) / gcd ; printf ( <str> , lcm ) ; printf ( <str> , gcd ) ; } return <int> ; }", "label": 2, "id": 4382}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i , s , gcd , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) s = a ; else s = b ; for ( i = <int> ; i <= s ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { gcd = i ; } } printf ( <str> , gcd ) ; lcm = ( a * b ) / gcd ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 2, "id": 4383}
{"input": "int main ( ) { int t , n , min , i , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & min ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < min ) { min = temp ; } } printf ( <str> , ( n - <int> ) * ( long long ) min ) ; } return <int> ; }", "label": 0, "id": 4384}
{"input": "int max , num [ <int> ] [ <int> ] , sum1 [ <int> ] [ <int> ] ; void sumintri ( int n , int i , int sum ) { if ( n == <int> ) { if ( sum + num [ n ] [ <int> ] > sum1 [ n ] [ <int> ] ) { max = sum + num [ n ] [ i ] ; sum1 [ n ] [ <int> ] = max ; } return ; } if ( i != <int> ) { if ( sum + num [ n ] [ i - <int> ] > sum1 [ n ] [ i - <int> ] ) { sum1 [ n ] [ i - <int> ] = sum + num [ n ] [ i - <int> ] ; sumintri ( n - <int> , i - <int> , sum + num [ n ] [ i - <int> ] ) ; } } if ( sum + num [ n ] [ i ] > sum1 [ n ] [ i ] ) { sum1 [ n ] [ i ] = sum + num [ n ] [ i ] ; sumintri ( n - <int> , i , sum + num [ n ] [ i ] ) ; } } int main ( ) { int t , n , i , j , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; sum1 [ i ] [ j ] = <int> ; } } sum = max = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { sum = num [ n - <int> ] [ i ] ; sum1 [ n - <int> ] [ i ] = sum ; sumintri ( n - <int> , i , sum ) ; } printf ( <str> , sum1 [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 4385}
{"input": "void main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 4386}
{"input": "int maxsum = <int> ; int arr [ <int> ] [ <int> ] ; int no_of_rows ; int main ( ) { int t , i , j , k ; scanf ( <str> , & t ) ; int result [ t ] ; i = <int> ; while ( i < t ) { scanf ( <str> , & no_of_rows ) ; j = <int> ; while ( j < no_of_rows ) { k = <int> ; while ( k <= j ) { scanf ( <str> , & arr [ j ] [ k ] ) ; k ++ ; } j ++ ; } func ( <int> , <int> , <int> ) ; printf ( <str> , maxsum ) ; maxsum = <int> ; i ++ ; } return <int> ; } int func ( int row , int col , int sum ) { if ( row < no_of_rows - <int> ) { sum = sum + arr [ row ] [ col ] ; func ( row + <int> , col , sum ) ; func ( row + <int> , col + <int> , sum ) ; } if ( row == no_of_rows - <int> ) { sum = sum + arr [ row ] [ col ] ; int s1 , s2 ; s1 = s2 = <int> ; s1 = sum + arr [ row + <int> ] [ col ] ; s2 = sum + arr [ row + <int> ] [ col + <int> ] ; if ( s1 >= s2 ) sum = s1 ; else sum = s2 ; if ( sum >= maxsum ) maxsum = sum ; } }", "label": 2, "id": 4387}
{"input": "int main ( ) { int n , num , mat [ <int> ] [ <int> ] , sum = <int> , i , j ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) mat [ i ] [ j ] = <int> ; } scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; } j = <int> ; for ( i = <int> ; i < num ; i ++ ) { if ( ( sum + mat [ i ] [ j ] ) < ( sum + mat [ i ] [ j + <int> ] ) ) { sum = ( sum + mat [ i ] [ j + <int> ] ) ; j = j + <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4388}
{"input": "int main ( ) { int t , n , min , i , res ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; res = <int> ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ <int> ] ) min = a [ i ] ; } res = min * ( n - <int> ) ; printf ( <str> , res ) ; } }", "label": 1, "id": 4389}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i , c ; long long int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & c ) ; if ( min > c ) min = c ; } long long int mul = min * ( n - <int> ) ; printf ( <str> , mul ) ; } return <int> ; }", "label": 0, "id": 4390}
{"input": "int gcd ( int a , int b ) ; int lcm ( int a , int b ) ; int main ( ) { int T , i , a , b , c , d ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = lcm ( a , b ) ; printf ( <str> , c , d ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } } int lcm ( int a , int b ) { int c ; c = ( a * b ) / ( gcd ( a , b ) ) ; return c ; }", "label": 1, "id": 4391}
{"input": "int main ( ) { int n , t , a , b , m , L , h ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; if ( b > a ) { t = b ; b = a ; a = t ; } h = ( a * b ) ; while ( b != <int> ) { m = a % b ; a = b ; b = m ; } L = h / a ; printf ( <str> , a , L ) ; } return <int> ; }", "label": 1, "id": 4392}
{"input": "int main ( ) { int a , b , t , n , s , k ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; s = <int> ; if ( n ) { scanf ( <str> , & a ) ; s ++ ; k = <int> ; while ( ( n - <int> ) > <int> ) { b = a ; scanf ( <str> , & a ) ; s ++ ; if ( a >= b ) k ++ ; if ( a < b ) { s += k * ( k + <int> ) / <int> ; k = <int> ; } n -- ; } s += k * ( k + <int> ) / <int> ; } printf ( <str> , s ) ; t -- ; } }", "label": 0, "id": 4393}
{"input": "int main ( ) { int testcase ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { int a [ <int> ] , i , n , j , k , sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int min = a [ <int> ] , max = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ i ] ) max = a [ i ] ; if ( min > a [ i ] ) min = a [ i ] ; sum = sum + min ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4394}
{"input": "int main ( ) { int n , i ; scanf ( <str> , & n ) ; printf ( <str> ) ; int ans [ n ] ; for ( i = <int> ; i < n ; i ++ ) { int sum = <int> ; int tsum = <int> ; int k , j , lines , no , column ; column = <int> ; scanf ( <str> , & lines ) ; printf ( <str> ) ; for ( k = <int> ; k <= lines ; k ++ ) { tsum = sum ; for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & no ) ; if ( column == j ) { tsum = sum + no ; } else if ( column + <int> == j ) { if ( sum + no > tsum ) { tsum = sum + no ; column ++ ; } } } sum = tsum ; printf ( <str> ) ; } ans [ i ] = sum ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return <int> ; }", "label": 1, "id": 4395}
{"input": "int main ( ) { int i , j , T , N , curr , c , d ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; int a [ N ] [ N ] ; for ( i = <int> ; i <= N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ N ] [ N ] ) ; } for ( i = N - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { curr = a [ i ] [ j ] ; c = a [ i + <int> ] [ j ] + curr ; d = a [ i + <int> ] [ j + <int> ] + curr ; curr = c >= d ? c : d ; a [ i ] [ j ] = curr ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4396}
{"input": "typedef struct node { int key ; struct node * left ; struct node * right ; } node ; node * queue [ SIZE ] ; int front , rear ; int maxsum ; void trav ( node * , int ) ; node * <unk> ( node * , int ) ; node * <unk> ( node * , int ) ; void enqueue ( node * ) ; void dequeue ( void ) ; int main ( void ) { node * root ; int testcases , num , i , j , val ; scanf ( <str> , & testcases ) ; while ( testcases -- ) { root = NULL ; maxsum = - <int> ; front = rear = - <int> ; scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & val ) ; if ( j == <int> || j == i ) { root = <unk> ( root , val ) ; } else { root = <unk> ( root , val ) ; } } } trav ( root , <int> ) ; printf ( <str> , maxsum ) ; } return <int> ; } void trav ( node * root , int sum ) { if ( root != NULL ) { sum += root -> key ; trav ( root -> left , sum ) ; trav ( root -> right , sum ) ; } else { if ( sum > maxsum ) maxsum = sum ; } } node * <unk> ( node * root , int val ) { node * ptr = malloc ( sizeof ( node ) ) ; ptr -> key = val ; ptr -> left = ptr -> right = NULL ; enqueue ( ptr ) ; node * temp = queue [ front ] ; if ( temp -> left == NULL ) temp -> left = ptr ; else if ( temp -> right == NULL ) temp -> right = ptr ; node * <unk> = queue [ front + <int> ] ; if ( <unk> -> left == NULL ) <unk> -> left = ptr ; else if ( <unk> -> right == NULL ) <unk> -> right = ptr ; if ( temp -> right != NULL && temp -> left != NULL ) dequeue ( ) ; if ( <unk> -> left != NULL && <unk> -> right != NULL ) dequeue ( ) ; return root ; } node * <unk> ( node * root , int val ) { node * ptr = malloc ( sizeof ( node ) ) ; ptr -> key = val ; ptr -> left = ptr -> right = NULL ; if ( front == - <int> ) { root = ptr ; enqueue ( ptr ) ; } else { node * temp = queue [ front ] ; if ( temp -> left == NULL ) temp -> left = ptr ; else if ( temp -> right == NULL ) temp -> right = ptr ; enqueue ( ptr ) ; if ( temp -> left != NULL && temp -> right != NULL ) dequeue ( ) ; } return root ; } void enqueue ( node * ptr ) { if ( front == - <int> ) front = rear = <int> ; else rear ++ ; queue [ rear ] = ptr ; } void dequeue ( void ) { if ( front == rear ) front = rear = - <int> ; else front ++ ; }", "label": 2, "id": 4397}
{"input": "int input ( ) { int val = <int> ; char c = getchar_unlocked ( ) ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) val = ( val << <int> ) + ( val << <int> ) + ( c - <char> ) , c = getchar_unlocked ( ) ; return val ; } int main ( ) { int t ; long long int n , cost ; t = input ( ) ; while ( t -- ) { long long int temp , min , i ; n = input ( ) ; min = input ( ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { temp = input ( ) ; if ( min > temp ) min = temp ; } cost = ( n - <int> ) * min ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 4398}
{"input": "int main ( ) { int i , j , d , in [ <int> ] [ <int> ] , tc , r , b ; scanf ( <str> , & tc ) ; while ( tc -- > <int> ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & in [ i ] [ j ] ) ; d = r - <int> ; while ( d > <int> ) { for ( i = <int> ; i < d ; i ++ ) { b = in [ d ] [ i ] < in [ d ] [ i + <int> ] ; in [ d - <int> ] [ i ] += in [ d ] [ i + b ] ; } -- d ; } printf ( <str> , in [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4399}
{"input": "main ( ) { int j , k , m , n , p , q ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; for ( j = <int> ; j <= m ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = m ; j > <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { p = a [ j ] [ k ] + a [ j - <int> ] [ k ] ; q = a [ j ] [ k + <int> ] + a [ j - <int> ] [ k ] ; if ( p > q ) { a [ j - <int> ] [ k ] = p ; } else { a [ j - <int> ] [ k ] = q ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4400}
{"input": "int calc ( int , int [ ] ) ; int main ( void ) { int T , N , q , i = <int> , p , a [ <int> ] ; scanf ( <str> , & T ) ; while ( i < T ) { scanf ( <str> , & N ) ; for ( p = <int> ; p < N ; p ++ ) { scanf ( <str> , & a [ p ] ) ; } printf ( <str> ) ; if ( N == <int> ) printf ( <str> , N ) ; else { q = calc ( N , a ) ; printf ( <str> , q ) ; } i ++ ; } return <int> ; } int calc ( int N , int b [ ] ) { int c = N ; int k , l ; for ( k = <int> ; k < N ; k ++ ) { for ( l = k + <int> ; l < N ; l ++ ) { if ( b [ k ] <= b [ l ] ) c ++ ; else break ; } } return c ; }", "label": 3, "id": 4401}
{"input": "int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , j , k ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long long int c = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { long long int s = a [ i ] ; for ( k = i + <int> ; k <= j ; k ++ ) { if ( a [ k ] < s ) break ; else s = a [ k ] ; } if ( k == j + <int> ) c ++ ; if ( a [ k ] < s ) break ; } } printf ( <str> , c + n ) ; } return <int> ; }", "label": 0, "id": 4402}
{"input": "int main ( ) { int t , n , d , r , a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4403}
{"input": "main ( ) { int t ; long int n , i ; long long int min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } }", "label": 0, "id": 4404}
{"input": "long long int gcd ( long long int x , long long int y ) { if ( y != <int> ) return gcd ( y , x % y ) ; else return x ; } int main ( ) { long long int t , a , b , x , y , z ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = gcd ( a , b ) ; z = a * b ; y = z / x ; printf ( <str> , x , y ) ; } return <int> ; }", "label": 0, "id": 4405}
{"input": "int k , * a [ <int> ] ; int fun ( int i , int j ) { int m , c , b ; if ( k == i + <int> ) return ( a [ i ] [ j ] ) ; m = a [ i ] [ j ] + ( ( c = fun ( i + <int> , j ) ) > ( b = fun ( i + <int> , j + <int> ) ) ? c : b ) ; return m ; } int main ( ) { int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = ( int * ) malloc ( i * sizeof ( int ) ) ; } while ( n ) { n -- ; scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; ; } } ; printf ( <str> , fun ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 4406}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] ; long long int x = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( x > a [ i ] ) { x = a [ i ] ; } } printf ( <str> , x ) ; } }", "label": 1, "id": 4407}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { int n1 , n2 , gcd , lcm ; scanf ( <str> , & n1 , & n2 ) ; for ( int j = <int> ; j <= n1 && j <= n2 ; ++ j ) { if ( n1 % j == <int> && n2 % j == <int> ) gcd = j ; } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4408}
{"input": "int main ( ) { int k , i , t , n , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j < i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ i - <int> ] [ j ] ) ; } } return <int> ; }", "label": 1, "id": 4409}
{"input": "int main ( ) { long long int a [ <int> ] , n ; int test , t , i , j ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } } } printf ( <str> , ( a [ <int> ] * ( n - <int> ) ) ) ; } }", "label": 3, "id": 4410}
{"input": "int main ( ) { int n , i , j , k , lines , temp ; scanf ( <str> , & n ) ; int Ans [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & lines ) ; int * * Arr = ( int * * ) malloc ( sizeof ( int * ) * lines ) ; for ( j = <int> ; j < lines ; j ++ ) { * ( Arr + j ) = ( int * ) malloc ( sizeof ( int ) * ( j + <int> ) ) ; } for ( j = <int> ; j < lines ; j ++ ) { for ( k = <int> ; k < ( j + <int> ) ; k ++ ) { scanf ( <str> , ( * ( Arr + j ) + k ) ) ; } } for ( j = lines - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k < j ; k ++ ) { if ( ( * ( * ( Arr + j ) + k ) ) < ( * ( * ( Arr + j ) + k + <int> ) ) ) temp = ( * ( * ( Arr + j ) + k + <int> ) ) ; else temp = ( * ( * ( Arr + j ) + k ) ) ; ( * ( * ( Arr + j - <int> ) + k ) ) += temp ; } } Ans [ i ] = * * Arr ; free ( Arr ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , Ans [ i ] ) ; } return <int> ; }", "label": 0, "id": 4411}
{"input": "int min ( long long int a , long long int b ) ; main ( ) { int t ; long long int n , i , c , e , f , j , temp ; scanf ( <str> , & t ) ; while ( t -- ) { f = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } c = min ( a [ <int> ] , a [ <int> ] ) ; e = c ; for ( i = <int> ; i < n ; i ++ ) { c = min ( c , a [ i ] ) ; f = f + c ; } printf ( <str> , f + e ) ; } return <int> ; } int min ( long long int a , long long int b ) { if ( a > b ) return ( b ) ; else return ( a ) ; }", "label": 2, "id": 4412}
{"input": "int main ( ) { long int n1 , n2 , x , y , lcm , t , i , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } gcd = n1 ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 4413}
{"input": "int main ( ) { int t ; long num1 , num2 , gcd , lcm , remainder , num , denom ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { num = num1 ; denom = num2 ; } else { num = num2 ; denom = num1 ; } remainder = num % denom ; while ( remainder != <int> ) { num = denom ; denom = remainder ; remainder = num % denom ; } gcd = denom ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 0, "id": 4414}
{"input": "int main ( ) { long int n , a [ <int> ] , i , j , temp ; int T ; scanf ( <str> , & T ) ; for ( ; T > <int> ; T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } if ( n == <int> ) printf ( <str> , a [ <int> ] ) ; else printf ( <str> , a [ n - <int> ] ) ; } return <int> ; }", "label": 2, "id": 4415}
{"input": "int path ( int no [ <int> ] [ <int> ] , int row , int col , int tot ) { if ( row == tot - <int> ) return no [ row ] [ col ] ; return ( no [ row ] [ col ] + max ( path ( no , row + <int> , col , tot ) , path ( no , row + <int> , col + <int> , tot ) ) ) ; } int main ( ) { int n , i ; scanf ( <str> , & n ) ; int ans [ n ] ; for ( i = <int> ; i < n ; i ++ ) { int k , j , lines ; scanf ( <str> , & lines ) ; if ( lines <= <int> ) break ; int no [ <int> ] [ <int> ] ; for ( k = <int> ; k < lines ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & no [ k ] [ j ] ) ; } } ans [ i ] = path ( no , <int> , <int> , lines ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return <int> ; }", "label": 2, "id": 4416}
{"input": "int main ( ) { }", "label": 1, "id": 4417}
{"input": "int main ( void ) { short int T ; scanf ( <str> , & T ) ; while ( T -- ) { int n ; int i , j = <int> ; long long int l ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( j > a [ i ] ) { j = a [ i ] ; } } l = j * ( n - <int> ) ; printf ( <str> , l ) ; } return <int> ; }", "label": 0, "id": 4418}
{"input": "int main ( ) { int n , lines , i , j , x ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & lines ) ; int a [ lines ] [ lines ] ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = lines - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 4419}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = n - <int> ; j >= <int> ; j -- ) a [ i - <int> ] [ j - <int> ] = max ( a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] , a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4420}
{"input": "int maxx ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int t , i , j , n ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = arr [ i ] [ j ] + maxx ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4421}
{"input": "int main ( ) { char s [ <int> ] ; int top = <int> , t , j , k , l = <int> ; scanf ( <str> , & t ) ; char e [ <int> ] , * e1 [ <int> ] ; while ( t -- ) { scanf ( <str> , e ) ; j = k = <int> ; while ( e [ j ] != <char> ) { if ( e [ j ] == <char> || e [ j ] == <char> || e [ j ] == <char> || e [ j ] == <char> || e [ j ] == <char> ) { s [ k ++ ] = e [ j ] ; } else if ( e [ j ] == <char> ) { e1 [ l ++ ] = s [ -- k ] ; } else if ( e [ j ] != <char> ) { e1 [ l ++ ] = e [ j ] ; } j ++ ; } e1 [ l ++ ] = <char> ; } e [ l ] = <char> ; j = <int> ; while ( e1 [ j ] != <char> ) { printf ( <str> , e1 [ j ++ ] ) ; } return <int> ; }", "label": 1, "id": 4422}
{"input": "int sum ( int , int [ <int> ] [ <int> ] ) ; int max ( int , int ) ; int scanInt ( ) ; int main ( ) { int n , r , o , p , q , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { r = scanInt ( ) ; for ( o = <int> ; o < r ; o ++ ) for ( q = <int> ; q <= o ; q ++ ) { a [ o ] [ q ] = scanInt ( ) ; } printf ( <str> , sum ( r , a ) ) ; } } int sum ( int n , int a [ <int> ] [ <int> ] ) { int i , j ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { a [ i - <int> ] [ j ] += max ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; } return a [ <int> ] [ <int> ] ; } int max ( int a , int b ) { return ( a > b ) ? a : b ; } int scanInt ( ) { int x = <int> ; char ch ; ch = getchar ( ) ; while ( ch > <char> || ch < <char> ) { ch = getchar ( ) ; } while ( ch <= <char> && ch >= <char> ) { x = ( x << <int> ) + ( x << <int> ) + ch - <char> ; ch = getchar ( ) ; } return x ; }", "label": 0, "id": 4423}
{"input": "int maximum ( int a , int b ) { int t = ( a > b ) ? a : b ; return t ; } int main ( ) { int rows , test_cases , max , i , j , k , c , t , a [ <int> ] [ <int> ] , d [ <int> ] [ <int> ] ; scanf ( <str> , & test_cases ) ; for ( i = <int> ; i <= test_cases ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } max = <int> ; d [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) { d [ i ] [ <int> ] = d [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; if ( i > <int> ) { for ( j = <int> ; j < i ; j ++ ) { d [ i ] [ j ] = a [ i ] [ j ] + maximum ( d [ i - <int> ] [ j ] , d [ i - <int> ] [ j - <int> ] ) ; } } d [ i ] [ i ] = a [ i ] [ i ] + d [ i - <int> ] [ i - <int> ] ; } for ( i = <int> ; i < rows ; i ++ ) { if ( d [ rows - <int> ] [ i ] > max ) max = d [ rows - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 4424}
{"input": "int a [ <int> ] ; int b [ <int> ] ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } b [ n - <int> ] = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( ( a [ i ] <= a [ j ] ) ) b [ i ] = b [ i ] + b [ j ] ; } b [ i ] ++ ; } long long int sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { sum += b [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 4425}
{"input": "int main ( ) { long int t , n , a [ <int> ] , i = <int> , j , k , sum ; scanf ( <str> , & t ) ; while ( i < t ) { sum = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> , k = <int> ; k < n ; k ++ ) { if ( a [ j ] > a [ k ] ) { j = k ; sum = sum + a [ j ] ; } else sum = sum + a [ j ] ; } printf ( <str> , sum ) ; i ++ ; } return <int> ; }", "label": 1, "id": 4426}
{"input": "int main ( ) { long long int a , b , lc , hf , c = <int> , d = <int> , i ; int t ; scanf ( <str> , & t ) ; int arr [ <int> ] ; while ( c < t ) { scanf ( <str> , & a , & b ) ; lc = ( a > b ) ? a : b ; hf = ( a > b ) ? a : b ; while ( hf > <int> ) { if ( a % hf == <int> && b % hf == <int> ) { arr [ d ] = hf ; ++ d ; break ; } -- hf ; } while ( <int> ) { if ( lc % a == <int> && lc % b == <int> ) { arr [ d ] = lc ; ++ d ; break ; } ++ lc ; } ++ c ; } for ( i = <int> ; i <= d - <int> ; ++ i ) { printf ( <str> , arr [ i ] , arr [ i + <int> ] ) ; ++ i ; } return <int> ; }", "label": 2, "id": 4427}
{"input": "int main ( ) { int t , a , b , gcd , lcm , temp1 , temp2 , temp3 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; temp1 = a ; temp2 = b ; while ( a % b != <int> ) { temp3 = a ; a = b ; b = temp3 % b ; } gcd = b ; lcm = temp1 * temp2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4428}
{"input": "int main ( ) { int t ; long int k , a , b , j , i ; scanf ( <str> , & t ) ; while ( t -- ) { k = <int> ; scanf ( <str> , & a , & b ) ; i = b ; while ( ( a % i != <int> ) && ( b % i != <int> ) ) i -- ; printf ( <str> , i , a * b / i ) ; } return <int> ; }", "label": 1, "id": 4429}
{"input": "int main ( ) { int i , t , n , num , r , j ; scanf ( <str> , & t ) ; while ( t -- ) { r = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) { for ( j = - <int> ; j < i ; j ++ ) scanf ( <str> , & num ) ; r += num ; } printf ( <str> , r ) ; } }", "label": 1, "id": 4430}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { unsigned int a , i , s , b , h , l ; scanf ( <str> , & a , & b ) ; if ( a < b ) { s = a ; } else s = b ; for ( i = <int> ; i <= s ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { h = i ; } } l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 1, "id": 4431}
{"input": "int sums [ <int> ] [ <int> ] = { - <int> } ; int main ( ) { int n , i , j , k , limit , max ; int array [ <int> ] [ <int> ] = { - <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { memset ( sums , - <int> , <int> ) ; scanf ( <str> , & limit ) ; for ( j = <int> ; j < limit ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & array [ j ] [ k ] ) ; printf ( <str> , sum ( array , limit , <int> , <int> ) ) ; } return <int> ; } int sum ( int array [ <int> ] [ <int> ] , int limit , int cur_row , int pos ) { if ( cur_row == limit ) return <int> ; int sum1 , sum2 ; if ( sums [ cur_row ] [ pos ] != - <int> ) return sums [ cur_row ] [ pos ] ; sum1 = array [ cur_row ] [ pos ] + sum ( array , limit , cur_row + <int> , pos ) ; sum2 = array [ cur_row ] [ pos ] + sum ( array , limit , cur_row + <int> , pos + <int> ) ; if ( sum1 > sum2 ) { sums [ cur_row ] [ pos ] = sum1 ; return sum1 ; } else { sums [ cur_row ] [ pos ] = sum2 ; return sum2 ; } }", "label": 1, "id": 4432}
{"input": "int hff ( int , int ) ; int main ( ) { int t ; long int a , b , hcf , lcf ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = hff ( a , b ) ; printf ( <str> , hcf , ( a * b / hcf ) ) ; } return <int> ; } hff ( int a , int b ) { if ( b == <int> ) return a ; else return hff ( b , a % b ) ; }", "label": 0, "id": 4433}
{"input": "void findmax ( int * a , int n , int * p ) { int temp = <int> , i , flag = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( temp == a [ i ] ) { if ( a [ * p - <int> ] > a [ i - <int> ] && a [ * p + <int> ] > a [ i - <int> ] && i + <int> < n ) { * p = i ; } else if ( a [ * p - <int> ] > a [ i + <int> ] && a [ * p + <int> ] > a [ i + <int> ] && i + <int> < n ) { * p = i ; } } else if ( temp < a [ i ] ) { temp = a [ i ] ; * p = i ; } } return ; } int main ( ) { int t , * a , n , i , * cost , p = <int> , x = <int> , ad = <int> , f , g , temp ; scanf ( <str> , & t ) ; cost = ( int * ) malloc ( t * sizeof ( int ) ) ; while ( t -- ) { cost [ p ] = <int> ; scanf ( <str> , & n ) ; x = n ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; temp = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( temp != a [ i ] ) { break ; } } if ( i == n ) { cost [ p ] += a [ <int> ] * ( n - <int> ) ; p ++ ; continue ; } for ( i = <int> ; x != <int> ; i ++ ) { findmax ( a , n , & ad ) ; if ( ( ad + <int> ) < n && ( ad - <int> ) >= <int> ) { for ( i = ad + <int> ; i < n ; i ++ ) { if ( a [ i ] != - <int> ) { f = i ; break ; } } for ( i = ad - <int> ; i >= <int> ; i -- ) { if ( a [ i ] != - <int> ) { g = i ; break ; } } if ( a [ g ] > a [ f ] ) { a [ ad ] = - <int> ; x -- ; cost [ p ] += a [ f ] ; } else { a [ ad ] = - <int> ; x -- ; cost [ p ] += a [ g ] ; } } else if ( ad + <int> < n ) { for ( i = ad + <int> ; i < n ; i ++ ) { if ( a [ i ] != - <int> ) { f = i ; break ; } } a [ ad ] = - <int> ; x -- ; cost [ p ] += a [ f ] ; } else { for ( i = ad - <int> ; i >= <int> ; i -- ) { if ( a [ i ] != - <int> ) { g = i ; break ; } } a [ ad ] = - <int> ; x -- ; cost [ p ] += a [ g ] ; } } p ++ ; } for ( i = <int> ; i < p ; i ++ ) printf ( <str> , cost [ i ] ) ; return <int> ; }", "label": 2, "id": 4434}
{"input": "int main ( ) { int a , b = <int> , c , d , e , f ; scanf ( <str> , & a ) ; while ( b <= a ) { scanf ( <str> , & c , & d ) ; if ( c < d ) e = c , f = d ; else e = d , f = c ; while ( ! ( c % e == <int> && d % e == <int> ) ) { e -- ; } printf ( <str> , e ) ; while ( ! ( f % c == <int> && f % d == <int> ) ) { f ++ ; } printf ( <str> , f ) ; b ++ ; } return <int> ; }", "label": 2, "id": 4435}
{"input": "int main ( ) { int t , n , a [ <int> ] , i , min ; long int cost ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min >= a [ i ] ) min = a [ i ] ; } cost = ( n - <int> ) * min ; printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 4436}
{"input": "void build_tringle ( ) ; int max ( int , int ) ; int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int main ( ) { int i , j , n , rows = <int> , sum = <int> ; scanf ( <str> , & n ) ; while ( n != <int> ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } build_tringle ( ) ; for ( i = <int> ; i < rows ; i ++ ) { if ( b [ rows - <int> ] [ i ] >= sum ) sum = b [ rows - <int> ] [ i ] ; } printf ( <str> , sum ) ; n -- ; } return <int> ; } void build_tringle ( ) { int sum , max_sum ; sum = max_sum = <int> ; int i , j ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == i ) { b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } b [ i ] [ j ] = max ( b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] , b [ i - <int> ] [ j ] + a [ i ] [ j ] ) ; } } } int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; }", "label": 1, "id": 4437}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } main ( ) { int arr [ <int> ] [ <int> ] ; int T , n , i , j , x ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & x ) ; for ( i = <int> ; i <= x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = x - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] = max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j + <int> ] ) + arr [ i ] [ j ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4438}
{"input": "int gcd ( int c , int d ) { if ( d == <int> ) { return c ; } else { return gcd ( d , c % d ) ; } } int main ( void ) { long long int t , a [ <int> ] , b [ <int> ] , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { int g , f ; g = gcd ( a [ i ] , b [ i ] ) ; f = ( a [ i ] * b [ i ] ) / g ; printf ( <str> , g , f ) ; } return <int> ; }", "label": 3, "id": 4439}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int arr [ t ] , i ; for ( i = <int> ; i < t ; i ++ ) scanf ( <str> , & arr [ i ] ) ; int j = <int> , k = <int> ; while ( k < t ) { int sum = <int> ; for ( i = <int> ; i < arr [ k ] ; i ++ ) { int flag = <int> ; int max ; for ( j = <int> ; j < i + <int> ; j ++ ) { int temp ; scanf ( <str> , & temp ) ; if ( flag ) { max = temp ; flag = <int> ; } else { if ( max < temp ) max = temp ; } } sum = sum + max ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , sum ) ; k ++ ; } return ( <int> ) ; }", "label": 1, "id": 4440}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , min = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) min = a [ i + <int> ] ; else min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 1, "id": 4441}
{"input": "int main ( ) { long int t , n , min , a [ <int> ] , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4442}
{"input": "void main ( ) { int a [ <int> ] [ <int> ] , i , k , j , t , ans ; scanf ( <str> , & t ) ; for ( t ; t > <int> ; t -- ) { scanf ( <str> , & i ) ; for ( k = <int> ; k < i ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) scanf ( <str> , & a [ k ] [ j ] ) ; } for ( k = i - <int> ; k >= <int> ; k -- ) for ( j = <int> ; j <= i ; j ++ ) a [ k ] [ j ] += a [ k + <int> ] [ j ] > a [ k + <int> ] [ j + <int> ] ? a [ k + <int> ] [ j ] : a [ k + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4443}
{"input": "int max ( int , int ) ; int main ( void ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) a [ i - <int> ] [ j - <int> ] = max ( ( a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ) , ( a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ) ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 4444}
{"input": "void printMat ( ) ; int findMax ( ) ; int matrix [ size ] [ size ] ; int result [ size ] [ size ] ; int main ( ) { int testCase ; int lines ; int i , j ; int row , col ; int item ; int down , right ; int max [ <int> ] ; int itr = <int> ; scanf ( <str> , & testCase ) ; for ( i = <int> ; i < testCase ; i ++ ) { scanf ( <str> , & lines ) ; for ( row = <int> ; row < lines ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { scanf ( <str> , & matrix [ row ] [ col ] ) ; } } result [ <int> ] [ <int> ] = matrix [ <int> ] [ <int> ] ; for ( row = <int> ; row < lines ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { item = matrix [ row ] [ col ] ; down = row + <int> ; right = col + <int> ; if ( result [ row ] [ col ] + matrix [ down ] [ col ] > result [ down ] [ col ] ) result [ down ] [ col ] = result [ row ] [ col ] + matrix [ down ] [ col ] ; if ( result [ row ] [ col ] + matrix [ down ] [ right ] > result [ down ] [ right ] ) result [ down ] [ right ] = result [ row ] [ col ] + matrix [ down ] [ right ] ; } } printf ( <str> , findMax ( ) ) ; for ( row = <int> ; matrix [ row ] [ <int> ] != <int> ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { matrix [ row ] [ col ] = <int> ; result [ row ] [ col ] = <int> ; } } } return ( <int> ) ; } void printMat ( ) { int row , col ; for ( row = <int> ; matrix [ row ] [ <int> ] != <int> ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { printf ( <str> , result [ row ] [ col ] ) ; } printf ( <str> ) ; } } int findMax ( ) { int row , col ; int max = <int> ; for ( row = <int> ; matrix [ row ] [ <int> ] != <int> ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { if ( result [ row ] [ col ] > max ) max = result [ row ] [ col ] ; } } return max ; }", "label": 3, "id": 4445}
{"input": "int lar , t ; void tri ( int a [ <int> ] [ <int> ] , int i , int j ) { static int sum = <int> ; sum += a [ i ] [ j ] ; if ( i == t - <int> ) { if ( lar < sum ) lar = sum ; if ( j == t - <int> ) printf ( <str> , lar ) ; return ; } tri ( a , i + <int> , j ) ; sum -= a [ i + <int> ] [ j ] ; tri ( a , i + <int> , j + <int> ) ; sum -= a [ i + <int> ] [ j + <int> ] ; } int main ( ) { int i , n , j ; scanf ( <str> , & n ) ; while ( n -- ) { int a [ <int> ] [ <int> ] , lar = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; tri ( a , <int> , <int> ) ; } return <int> ; }", "label": 2, "id": 4446}
{"input": "int nRows ; int sums [ <int> ] [ <int> ] = { <int> } ; int a [ <int> ] [ <int> ] = { <int> } ; int maxsum ( int row , int col ) { int * val = & sums [ row ] [ col ] ; if ( * val != <int> ) { return * val ; } * val = a [ row ] [ col ] ; if ( row < nRows ) { * val += max ( maxsum ( row + <int> , col ) , maxsum ( row + <int> , col + <int> ) ) ; } return * val ; } int main ( ) { int t ; int i , j ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & nRows ) ; for ( i = <int> ; i < nRows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , maxsum ( <int> , <int> ) ) ; memset ( sums , <int> , <int> * <int> ) ; } }", "label": 1, "id": 4447}
{"input": "int main ( ) { while ( <int> ) { int n1 , n2 , temp1 , temp2 , rem , gcd , lcm ; scanf ( <str> , & n1 , & n2 ) ; temp1 = n1 ; temp2 = n2 ; while ( temp2 != <int> ) { rem = temp1 % temp2 ; temp1 = temp2 ; temp2 = rem ; } gcd = temp1 ; lcm = n1 * n2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4448}
{"input": "int main ( void ) { int a , b , gcd , lcm , t , test = <int> ; scanf ( <str> , & t ) ; do { scanf ( <str> , & a , & b ) ; if ( a > b ) { gcd = a ; lcm = b ; } else { gcd = b ; lcm = a ; } while ( a % gcd != <int> || b % gcd != <int> ) gcd -- ; while ( lcm % a != <int> || lcm % b != <int> ) lcm ++ ; printf ( <str> , gcd , lcm ) ; test ++ ; } while ( test != t ) ; return <int> ; }", "label": 2, "id": 4449}
{"input": "int main ( ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int a , b , c , gcd , lcm , j ; scanf ( <str> , & a , & b ) ; if ( a > b ) c = b ; else c = a ; for ( j = <int> ; j < c ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4450}
{"input": "int main ( ) { int t , n , i , j , k ; int * * a , * * b ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; a = malloc ( sizeof ( int * ) * ( n + <int> ) ) ; b = malloc ( sizeof ( int * ) * ( n + <int> ) ) ; for ( i = <int> ; i <= n ; i ++ ) { * ( a + i ) = malloc ( sizeof ( int ) * ( n + <int> ) ) ; * ( b + i ) = malloc ( sizeof ( int ) * ( n + <int> ) ) ; } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = <int> ; } } for ( i = <int> ; i <= n ; i ++ ) b [ i ] [ <int> ] = a [ i ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) b [ i ] [ <int> ] = b [ i ] [ <int> ] + b [ i - <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( b [ i - <int> ] [ j ] + a [ i ] [ j ] > b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ) b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; else b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } } int max = b [ n ] [ <int> ] ; for ( j = <int> ; j <= n ; j ++ ) if ( b [ n ] [ j ] > max ) max = b [ n ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4451}
{"input": "int main ( ) { int tc , T ; scanf ( <str> , & T ) ; for ( tc = <int> ; tc < T ; tc ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 1, "id": 4452}
{"input": "int main ( ) { int n , i , e , count ; int a [ <int> ] ; int dp [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { count = <int> ; scanf ( <str> , & e ) ; for ( int i = <int> ; i < e ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } dp [ <int> ] = <int> ; for ( int i = <int> ; i < e ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) { dp [ i ] = <int> + dp [ i - <int> ] ; } else { dp [ i ] = <int> ; } } for ( int i = <int> ; i < e ; i ++ ) { count += dp [ i ] ; } printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 4453}
{"input": "int main ( ) { short t ; int a , b , in , out , r ; long long int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } out = b ; in = a ; r = a % b ; while ( r != <int> ) { in = out ; out = r ; r = in % out ; } printf ( <str> , out ) ; lcm = ( a / out ) * b ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 4454}
{"input": "main ( ) { int T , n , i , j , k = <int> , temp ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; int out [ T ] ; while ( T != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { arr [ i ] [ <int> ] = arr [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ; arr [ i ] [ i ] = arr [ i - <int> ] [ i - <int> ] + arr [ i ] [ i ] ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i - <int> ] [ j - <int> ] > arr [ i - <int> ] [ j ] ) { arr [ i ] [ j ] = arr [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ; } else { { arr [ i ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ; } } } temp = arr [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ n - <int> ] [ i + <int> ] > temp ) { temp = arr [ n - <int> ] [ i + <int> ] ; } } out [ k ] = temp ; k ++ ; T -- ; } for ( i = <int> ; i < k ; i ++ ) { printf ( <str> , out [ i ] ) ; } }", "label": 3, "id": 4455}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int cost , i ; cost = <int> ; long long int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , min * n ) ; } }", "label": 1, "id": 4456}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int l , t , a , b , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 4457}
{"input": "int main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int i , n , min ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ <int> ] ; else { if ( a [ i ] < min ) min = a [ i ] ; } } printf ( <str> , ( n - <int> ) * min ) ; } }", "label": 0, "id": 4458}
{"input": "int hcf ( int j , int k ) ; int main ( ) { int n , a , b , u , lcm ; scanf ( <str> , & n ) ; while ( n != <int> ) { scanf ( <str> , & a , & b ) ; u = hcf ( a , b ) ; lcm = ( a * b ) / u ; printf ( <str> , u , lcm ) ; n -- ; } return <int> ; } int hcf ( int j , int k ) { if ( j == <int> ) { return k ; } while ( k != <int> ) { if ( j > k ) { j = j - k ; } else { k = k - j ; } } return j ; }", "label": 1, "id": 4459}
{"input": "int main ( ) { int t ; long long int n , i , ans , num ; long long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t ) { ans = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; num = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { num = num + <int> ; } else { ans += ( num * ( num + <int> ) ) / <int> ; num = <int> ; } } num -- ; ans += ( num * ( num + <int> ) ) / <int> ; printf ( <str> , ans ) ; t -- ; } return <int> ; }", "label": 3, "id": 4460}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n , m ; scanf ( <str> , & n ) ; scanf ( <str> , & m ) ; long long int lcm , gcd = <int> , i = <int> ; while ( i <= n && i <= m ) { if ( n % i == <int> && m % i == <int> ) { gcd = i ; } i ++ ; } lcm = ( n * m ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4461}
{"input": "int scan_positive ( int * a ) { int x = <int> ; register int c = getchar_unlocked ( ) ; for ( ; c > <int> && c < <int> ; c = getchar_unlocked ( ) ) { x = ( x << <int> ) + ( x << <int> ) + c - <int> ; } * a = x ; } int main ( void ) { int t , n ; scan_positive ( & t ) ; while ( t -- ) { scan_positive ( & n ) ; int a [ n ] ; int mincost ; int i = <int> ; scan_positive ( & mincost ) ; for ( i = <int> ; i < n ; i ++ ) { scan_positive ( & a [ i ] ) ; if ( a [ i ] < mincost ) mincost = a [ i ] ; } printf ( <str> , ( ( long long ) mincost ) * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 4462}
{"input": "int main ( ) { int t , n1 , n2 , i , j , max , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; for ( j = <int> ; j < n1 || j < n2 ; j ++ ) { if ( n1 % j == <int> && n2 % j == <int> ) gcd = j ; } printf ( <str> , gcd ) ; max = n1 > n2 ? n1 : n2 ; while ( <int> ) { if ( max % n1 == <int> && max % n2 == <int> ) printf ( <str> , max ) ; break ; } max ++ ; } return <int> ; }", "label": 3, "id": 4463}
{"input": "int main ( ) { int T , j , i , N ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { int cost , small ; scanf ( <str> , & N ) ; int arr [ N ] ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } small = arr [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( arr [ i ] < small ) small = arr [ i ] ; } cost = small * ( N - <int> ) ; printf ( <str> , cost ) ; } }", "label": 0, "id": 4464}
{"input": "int * * a , n , l ; void large ( int r , int c ) { static int s = <int> ; if ( r == <int> ) s = <int> ; if ( r > n ) { if ( s > l ) l = s ; return ; } int m ; s = s + a [ r ] [ c ] ; m = s ; large ( r + <int> , c ) ; s = m ; large ( r + <int> , c + <int> ) ; } int main ( ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = ( int * * ) malloc ( ( n + <int> ) * sizeof ( int * ) ) ; for ( i = <int> ; i <= n ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } l = <int> ; large ( <int> , <int> ) ; printf ( <str> , l ) ; for ( i = <int> ; i <= n ; i ++ ) free ( a [ i ] ) ; free ( a ) ; } return <int> ; }", "label": 2, "id": 4465}
{"input": "long long int gcd ( long long int a , long long int b ) { long long int rem , div ; div = a / b ; rem = b ; b = a - ( div * b ) ; a = rem ; if ( b != <int> ) gcd ( a , b ) ; else return a ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int gc , lcm , a , b ; scanf ( <str> , & a , & b ) ; gc = gcd ( a , b ) ; lcm = ( a * b ) / gc ; printf ( <str> , gc , lcm ) ; } }", "label": 0, "id": 4466}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int num1 , num2 ; scanf ( <str> , & num1 , & num2 ) ; int x , y , t , gcd , lcm ; x = num1 ; y = num2 ; while ( y != <int> ) { t = y ; y = x % y ; x = t ; } gcd = x ; lcm = ( num1 * num2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 4467}
{"input": "int dis ( int a , int b ) { if ( a - b > <int> ) { return a - b ; } else { return b - a ; } } int main ( ) { int t , i , n , j , a , k , b , c ; char arr [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { a = <int> ; b = <int> ; c = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { for ( k = <int> ; k < n - <int> ; k ++ ) { if ( ( arr [ k ] != <char> ) && ( arr [ k + <int> ] != <char> ) ) { if ( a < dis ( arr [ k ] , arr [ k + <int> ] ) ) { a = dis ( arr [ k ] , arr [ k + <int> ] ) ; b = k ; } } } if ( arr [ b ] > arr [ b + <int> ] ) { arr [ b ] = <char> ; c = c + arr [ b + <int> ] ; } else { arr [ b + <int> ] = <char> ; c = c + arr [ b ] ; } } printf ( <str> , c ) ; } }", "label": 2, "id": 4468}
{"input": "int main ( ) { int x , n , a , y , z ; scanf ( <str> , & n ) ; while ( n -- > <int> ) { scanf ( <str> , & x , & a ) ; if ( a > x ) { y = x ; x = a ; a = y ; } z = x * a ; while ( x % a != <int> ) { y = a ; a = x % a ; x = y ; } printf ( <str> , a , z ) ; } return <int> ; }", "label": 1, "id": 4469}
{"input": "int main ( ) { int n , t ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; int a [ t ] [ t ] ; for ( int i = <int> ; i < t ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( int i = t - <int> ; i > <int> ; i -- ) for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4470}
{"input": "int main ( ) { long int testcases ; scanf ( <str> , & testcases ) ; for ( long int c = <int> ; c <= testcases ; c ++ ) { long int n , a , b ; scanf ( <str> , & n ) ; long int entry [ n ] , count = <int> ; for ( long int e = <int> ; e < n ; e ++ ) { scanf ( <str> , & entry [ e ] ) ; } long int index1 = - <int> , index2 = - <int> ; for ( a = <int> ; a < n - <int> ; a ++ ) { if ( entry [ a ] > entry [ a + <int> ] ) { index2 = a ; count = count + ( index2 - index1 ) * ( index2 - index1 + <int> ) / <int> ; index1 = a ; } } if ( index2 != ( n - <int> ) ) { index1 = index2 ; index2 = n - <int> ; count = count + ( index2 - index1 ) * ( index2 - index1 + <int> ) / <int> ; } printf ( <str> , count ) ; } }", "label": 0, "id": 4471}
{"input": "int hash [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int n ; int func ( int i , int j ) { int p , q ; if ( i >= n ) { return <int> ; } else if ( hash [ i ] [ j ] == <int> ) { return a [ i ] [ j ] ; } else { p = func ( i + <int> , j ) ; q = func ( i + <int> , j + <int> ) ; a [ i ] [ j ] += p > q ? p : q ; hash [ i ] [ j ] = <int> ; return a [ i ] [ j ] ; } } int main ( ) { int i , j , ans , cases ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; hash [ i ] [ j ] = <int> ; } } ans = func ( <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 4472}
{"input": "int main ( void ) { int n , a , b , p , q , k , c ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = a ; a = b ; b = c ; } p = a ; q = b ; while ( p != <int> ) { k = p ; p = q % p ; q = k ; } printf ( <str> , q , ( a * b ) / q ) ; } return <int> ; }", "label": 1, "id": 4473}
{"input": "typedef long int li ; li gcd ( li a , li b ) { return b == <int> ? a : gcd ( b , a % b ) ; } main ( ) { li t , a , b , c ; for ( scanf ( <str> , & t ) ; t > <int> ; scanf ( <str> , & a , & b ) , printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) , t -- ) ; }", "label": 0, "id": 4474}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i , gcd , lcm ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; for ( i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4475}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; int a , b , r ; long long int l ; while ( t -- ) { scanf ( <str> , & a , & b ) ; r = gcd ( a , b ) ; l = ( a * b ) / r ; printf ( <str> , r , l ) ; } return <int> ; }", "label": 1, "id": 4476}
{"input": "int main ( ) { unsigned int n , i , j , s1 , s2 , m ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; s1 = <int> ; s2 = <int> ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] > <int> || a [ i ] [ j ] < <int> ) exit ( <int> ) ; } s1 += a [ i ] [ <int> ] ; s2 += a [ i ] [ i ] ; } if ( s1 > s2 ) printf ( <str> , s1 ) ; else printf ( <str> , s2 ) ; } return <int> ; }", "label": 3, "id": 4477}
{"input": "main ( ) { int i , t , mm , n , j , k , b [ <int> ] , a [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) a [ i ] = <int> ; scanf ( <str> , & b [ <int> ] ) ; a [ <int> ] = b [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & b [ j ] ) ; a [ i ] = ( a [ i - <int> ] + b [ i ] ) ; for ( j = i - <int> ; j >= <int> ; j -- ) { a [ j ] = ( b [ j ] + ( max ( a [ j ] , a [ j - <int> ] ) ) ) ; } a [ <int> ] += b [ <int> ] ; } mm = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > mm ) mm = a [ i ] ; } printf ( <str> , mm ) ; } return <int> ; }", "label": 0, "id": 4478}
{"input": "int main ( ) { int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( <str> ) ; scanf ( <str> , & A , & B ) ; if ( A > B ) { denominator = A ; numerator = B ; } else { numerator = A ; denominator = B ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 4479}
{"input": "int main ( void ) { int n , * * a , nr , i , max = - <int> , up , dia , x , j ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & nr ) ; a = ( int * * ) malloc ( ( nr + <int> ) * sizeof ( int * ) ) ; for ( i = <int> ; i <= nr ; i ++ ) { a [ i ] = ( int * ) malloc ( ( nr + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i <= nr ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & x ) ; up = ( x + a [ i - <int> ] [ j ] ) ; dia = ( x + a [ i - <int> ] [ j - <int> ] ) ; a [ i ] [ j ] = ( up > dia ? up : dia ) ; } } for ( i = <int> ; i < nr ; i ++ ) { if ( a [ nr ] [ i ] > max ) max = a [ nr ] [ i ] ; } n -- ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4480}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , i , j , l = <int> , k , sum = <int> ; scanf ( <str> , & a ) ; int b [ <int> ] [ <int> ] ; for ( i = <int> ; i < a ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } for ( i = <int> ; i < a ; i ++ ) { if ( b [ i ] [ l ] >= b [ i ] [ l + <int> ] ) k = b [ i ] [ l ] ; else { l = l + <int> ; k = b [ i ] [ l ] ; } sum = sum + k ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4481}
{"input": "int main ( ) { long long int cost [ <int> ] , n [ <int> ] , a [ <int> ] [ <int> ] ; int T , temp ; int i , j ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & n [ j ] ) ; for ( i = <int> ; i < n [ j ] ; i ++ ) { scanf ( <str> , & a [ j ] [ i ] ) ; } } if ( T >= <int> && T <= <int> ) { for ( j = <int> ; j < T ; j ++ ) { cost [ j ] = <int> ; if ( n [ j ] >= <int> && n [ j ] <= <int> ) { for ( i = <int> ; i < n [ j ] - <int> ; i ++ ) { if ( a [ j ] [ i ] < a [ j ] [ i + <int> ] ) { cost [ j ] += a [ j ] [ i ] ; temp = a [ j ] [ i ] ; a [ j ] [ i ] = a [ j ] [ i + <int> ] ; a [ j ] [ i + <int> ] = temp ; } else if ( a [ j ] [ i ] > a [ j ] [ i + <int> ] ) { cost [ j ] += a [ j ] [ i + <int> ] ; } } printf ( <str> , cost [ j ] ) ; } } } return <int> ; }", "label": 3, "id": 4482}
{"input": "main ( ) { int a , b , c , d , e , f , g , x , y ; scanf ( <str> , & y ) ; for ( x = <int> ; x <= y ; x ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = a ; d = b ; } else { c = b ; d = a ; } e = c % d ; while ( e != <int> ) { c = d ; d = e ; e = c % d ; } f = d ; g = a * b / f ; printf ( <str> , f , g ) ; } }", "label": 1, "id": 4483}
{"input": "int main ( void ) { short int i , j , k , l , row , repeat_factor = <int> , arr [ <int> ] [ <int> ] ; int rowsum [ <int> ] , largestsum ; int N ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { largestsum = <int> ; scanf ( <str> , & row ) ; for ( j = <int> ; j < row ; j ++ ) { rowsum [ <int> * j ] = rowsum [ <int> * j + <int> ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } repeat_factor = <int> ; for ( j = row - <int> ; j >= <int> ; j -- ) { for ( l = j ; l >= <int> ; l -- ) { for ( k = repeat_factor - <int> ; k >= <int> ; k -- ) { rowsum [ repeat_factor * l + k ] += arr [ j ] [ l ] ; } } repeat_factor *= <int> ; } largestsum = rowsum [ <int> ] ; for ( l = <int> ; rowsum [ l ] != <int> ; l ++ ) largestsum = ( largestsum > rowsum [ l ] ) ? largestsum : rowsum [ l ] ; printf ( <str> , largestsum ) ; } return <int> ; }", "label": 3, "id": 4484}
{"input": "int min ( int a , int b ) { if ( a < b ) return a ; else return b ; } int max ( int a , int b ) { if ( a < b ) return b ; else return a ; } int main ( ) { int test , i = <int> , a , b , p , q ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & a , & b ) ; q = min ( a , b ) ; p = max ( a , b ) ; while ( i != <int> ) { i = p % q ; p = q ; q = i ; } printf ( <str> , p ) ; q = abs ( a * b ) / p ; printf ( <str> , q ) ; i = <int> ; } return <int> ; }", "label": 1, "id": 4485}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4486}
{"input": "int main ( void ) { int i , T ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { int A , temp , B , j ; scanf ( <str> , & A , & B ) ; if ( A < B ) { temp = A ; A = B ; B = temp ; } int g , l ; for ( j = <int> ; j <= B ; j ++ ) { if ( A % j == <int> && B % j == <int> ) { g = j ; } } l = A * B / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 4487}
{"input": "int main ( void ) { int x , y , n1 , n2 , result , gcd , lcm , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) { n1 = n1 - n2 ; } else { n2 = n2 - n1 ; } } gcd = n1 ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 4488}
{"input": "long long int gcd ( int n , int m ) { if ( n == <int> ) return m ; else if ( m == <int> ) return n ; else return gcd ( m , n % m ) ; } long long int lcm ( int n , int m ) { return n * m / gcd ( n , m ) ; } int main ( ) { int t , n , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & m ) ; printf ( <str> , gcd ( n , m ) , lcm ( n , m ) ) ; } return <int> ; }", "label": 1, "id": 4489}
{"input": "int max ( int x , int y ) ; int main ( ) { int t , n , i , j , m [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & m [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { m [ i ] [ j ] = max ( m [ i + <int> ] [ j ] + m [ i ] [ j ] , m [ i + <int> ] [ j + <int> ] + m [ i ] [ j ] ) ; } } printf ( <str> , m [ <int> ] [ <int> ] ) ; } ( t -- ) ; return <int> ; } int max ( int x , int y ) { if ( x > y ) return ( x ) ; else return ( y ) ; }", "label": 2, "id": 4490}
{"input": "int gcdf ( int , int ) ; int main ( ) { int t , i , a , b , d , lc ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; d = gcdf ( a , b ) ; lc = ( a * b ) / d ; printf ( <str> , d , lc ) ; } return <int> ; } int gcdf ( int x , int y ) { if ( y == <int> ) return x ; else return ( gcdf ( y , x % y ) ) ; }", "label": 1, "id": 4491}
{"input": "int main ( ) { int t , n , i , j , k , a [ <int> ] [ <int> ] , max , m1 , m2 ; scanf ( <str> , & t ) ; scanf ( <str> , & n ) ; while ( t -- ) { i = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> ) ; } max = <int> ; m1 = <int> ; m2 = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( max < a [ i ] [ j ] ) max = a [ i ] [ j ] ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] < max && a [ i ] [ j ] > m1 ) m1 = a [ i ] [ j ] ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] < m1 && a [ i ] [ j ] > m2 ) m2 = a [ i ] [ j ] ; } } printf ( <str> , max + m1 + m2 ) ; } }", "label": 1, "id": 4492}
{"input": "int main ( ) { int t , n , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , b [ n ] , i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } a [ n ] = a [ n - <int> ] + <int> ; b [ i ] = <int> ; sum = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { if ( a [ i + <int> ] >= a [ i ] ) { b [ i ] = b [ i + <int> ] + <int> ; } else { b [ i ] = <int> ; } sum = sum + b [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4493}
{"input": "void main ( ) { int t , i , j , c , z = <int> ; scanf ( <str> , & t ) ; while ( z != t ) { int n , w = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { c = i ; w ++ ; for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ c ] >= a [ j ] ) break ; else c = j ; w ++ ; } } printf ( <str> , w ) ; z ++ ; } }", "label": 1, "id": 4494}
{"input": "int main ( ) { long long int n , t , i , k , j , b , b1 , b2 , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n , & k ) ; b1 = n > k ? n : k ; b2 = n < k ? n : k ; b = ( b1 / <int> ) > b2 ? ( b1 / <int> ) : b2 ; for ( j = <int> ; j <= b ; j ++ ) { if ( n % j == <int> && k % j == <int> ) gcd = j ; } for ( j = <int> ; j <= b2 ; j ++ ) { b = ( b1 * j ) ; if ( b % b2 == <int> ) { lcm = b ; break ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4495}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int dp [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & dp [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { if ( dp [ i ] [ j ] > dp [ i ] [ j + <int> ] ) dp [ i - <int> ] [ j ] = dp [ i - <int> ] [ j ] + dp [ i ] [ j ] ; else dp [ i - <int> ] [ j ] = dp [ i - <int> ] [ j ] + dp [ i ] [ j + <int> ] ; } } printf ( <str> , dp [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4496}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int long long n , min = <int> ; int long long s ; scanf ( <str> , & n ) ; int long long a [ n + <int> ] ; int long long i ; int flag = <int> ; scanf ( <str> , & a [ <int> ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } s = min * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 4497}
{"input": "int main ( ) { int t , n , k , m , h , s = <int> , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < <int> ; i ++ ) { scanf ( <str> , & n ) ; m = <int> ; for ( j = <int> ; j < n ; j ++ ) { while ( m <= n ) { for ( k = m ; k > <int> ; k -- ) { scanf ( <str> , & h ) ; s += h ; } m ++ ; } } printf ( <str> , s / <int> ) ; s = <int> ; } return <int> ; }", "label": 1, "id": 4498}
{"input": "int max ( int b [ ] , int a ) ; int main ( ) { int i , j , k , mx , l , n , b [ <int> ] , r , count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & r ) ; if ( r > <int> && r < <int> ) { for ( j = <int> ; j <= r ; j ++ ) { k = j ; for ( l = <int> ; l < k ; l ++ ) { scanf ( <str> , & b [ l ] ) ; } if ( k == <int> ) continue ; mx = max ( b , l ) ; count = count + mx ; } printf ( <str> , count ) ; count = <int> ; } } return <int> ; } int max ( int b [ ] , int a ) { int mx ; int i ; mx = b [ <int> ] ; for ( i = <int> ; i < a ; i ++ ) { if ( mx < b [ i ] ) mx = b [ i ] ; } return mx ; }", "label": 1, "id": 4499}
{"input": "int gcd ( int a , int b ) ; int lcm ( int x , int y ) ; int main ( ) { int tc , a , b , gc , lc ; scanf ( <str> , & tc ) ; while ( tc != <int> ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { gc = gcd ( a , b ) ; lc = lcm ( a , b ) ; } else { gc = gcd ( b , a ) ; lc = lcm ( b , a ) ; } printf ( <str> , gc , lc ) ; tc -- ; } return <int> ; } gcd ( int a , int b ) { int c ; while ( a != <int> ) { c = a ; a = b % a ; b = c ; } return b ; } int lcm ( int x , int y ) { int max ; max = ( x > y ) ? x : y ; while ( <int> ) { if ( max % x == <int> && max % y == <int> ) { return max ; } ++ max ; } }", "label": 2, "id": 4500}
{"input": "int maxim ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + maxim ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4501}
{"input": "int main ( ) { int t , n , a , i , sum , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; min = a ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; sum += min ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4502}
{"input": "int main ( ) { int t ; long int i , n , a [ <int> ] , cost ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long min , i = <int> ; while ( i < n ) scanf ( <str> , & a [ i ++ ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4503}
{"input": "int main ( ) { int t , i ; long long int a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int temp ; long long int x = a , y = b ; while ( b ) { temp = a % b ; a = b ; b = temp ; } printf ( <str> , a ) ; printf ( <str> , ( x * y / a ) ) ; } return <int> ; }", "label": 1, "id": 4504}
{"input": "int main ( ) { int a , b , x , y , t , num , i , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , x , y , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4505}
{"input": "int arr [ <int> ] [ <int> ] = { <int> } ; int sum ( int row ) { if ( row < <int> ) return arr [ <int> ] [ <int> ] ; else { int col ; for ( col = <int> ; col <= row ; col ++ ) { if ( arr [ row + <int> ] [ col ] > arr [ row + <int> ] [ col + <int> ] ) arr [ row ] [ col ] += arr [ row + <int> ] [ col ] ; else arr [ row ] [ col ] += arr [ row + <int> ] [ col + <int> ] ; } return sum ( row - <int> ) ; } } int main ( ) { int t , n , j , i ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t -- ) { printf ( <str> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { if ( j < ( i + <int> ) ) scanf ( <str> , & arr [ i ] [ j ] ) ; else arr [ i ] [ j ] = <int> ; } } printf ( <str> , sum ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 4506}
{"input": "int find_gcd ( int a , int b ) { int max , min , temp ; max = a > b ? a : b ; min = a < b ? a : b ; while ( max % min ) { temp = min ; min = max % min ; max = temp ; } return min ; } int main ( ) { int t , n , a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = find_gcd ( a , b ) ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 4507}
{"input": "int main ( ) { int n , i , l , j , k , arr [ <int> ] [ <int> ] , sum ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & l ) ; if ( l > <int> && l < <int> ) { for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } } sum = arr [ <int> ] [ <int> ] ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( arr [ j + <int> ] [ k ] >= arr [ j ] [ k ] ) sum = sum + arr [ j + <int> ] [ k ] ; else if ( arr [ j + <int> ] [ k + <int> ] > arr [ j ] [ k ] ) sum = sum + arr [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4508}
{"input": "int main ( ) { int s , i , j , n , b ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( b = <int> ; b < n ; b ++ ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = s - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4509}
{"input": "int main ( ) { int num , i , j ; int trail ; scanf ( <str> , & trail ) ; while ( trail -- ) { int a [ <int> ] [ <int> ] ; scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = num - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4510}
{"input": "int GCD ( int q , int w ) { int i , c = <int> , s ; if ( q > w ) s = w ; else s = q ; for ( i = <int> ; i <= s ; i ++ ) { if ( ( q % i == <int> ) && ( w % i == <int> ) ) { if ( i == s ) { c = s ; break ; } else { c = i ; continue ; } } } return c ; } void main ( ) { int i , j , g , gcd , lcm , x , y ; short n ; scanf ( <str> , & n ) ; int a [ n ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { lcm = <int> ; x = a [ i ] [ <int> ] ; y = a [ i ] [ <int> ] ; g = GCD ( x , y ) ; gcd = g ; while ( gcd > <int> ) { x = x / gcd ; y = y / gcd ; lcm = lcm * gcd ; gcd = GCD ( x , y ) ; } if ( g == <int> ) lcm = x * y ; else lcm = lcm * x * y ; printf ( <str> , g , lcm ) ; } }", "label": 1, "id": 4511}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , x , y , temp , gcd , lcm ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4512}
{"input": "int main ( ) { int t , k , i , j ; int rows , z [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & rows ) ; for ( k = <int> , i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & z [ i ] [ j ] ) ; } k ++ ; } for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { z [ i ] [ j ] = z [ i ] [ j ] + ( ( z [ i + <int> ] [ j ] > z [ i + <int> ] [ j + <int> ] ) ? z [ i + <int> ] [ j ] : z [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , z [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4513}
{"input": "int main ( ) { int T , t ; long A , B , n , m , gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; n = A , m = B ; while ( B != <int> ) { t = B ; B = ( A % B ) ; A = t ; } gcd = A ; lcm = ( n * m ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4514}
{"input": "void main ( ) { long int T , A , B , i , gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; for ( i = <int> ; i <= A && i <= B ; i ++ ) { if ( A % i == <int> && B % i == <int> ) { gcd = i ; } } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 4515}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t ; int a , b , c , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = lcm ( a , b ) ; printf ( <str> , c , d ) ; } return <int> ; } int gcd ( int x , int y ) { if ( x % y == <int> ) return y ; else return gcd ( y , x % y ) ; } int lcm ( int x , int y ) { int a = x ; int b = y ; while ( x != y ) { if ( x > y ) y = b + y ; else x = a + x ; } return x ; }", "label": 2, "id": 4516}
{"input": "int main ( ) { int i , j , k , testc , nl ; scanf ( <str> , & testc ) ; for ( i = <int> ; i < testc ; i ++ ) { scanf ( <str> , & nl ) ; int numbers [ nl ] [ nl ] ; for ( j = <int> ; j < nl ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & numbers [ j ] [ k ] ) ; } } for ( j = nl - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k < j + <int> ; k ++ ) { if ( numbers [ j ] [ k ] > numbers [ j ] [ k + <int> ] ) { numbers [ j - <int> ] [ k ] += numbers [ j ] [ k ] ; } else { numbers [ j - <int> ] [ k ] += numbers [ j ] [ k + <int> ] ; } } } printf ( <str> , numbers [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4517}
{"input": "int gcd ( int x , int y ) { int z , w ; if ( x > y ) z = y ; else z = x ; w : if ( x % z == <int> && y % z == <int> ) return z ; else z -- ; goto w ; } int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int a , b , lcm , k , l ; scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; l = ( a * b ) / k ; printf ( <str> , k , l ) ; } return <int> ; }", "label": 1, "id": 4518}
{"input": "int n ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int <unk> ( int i , int j , int ( * arr1 ) [ <int> ] , int ( * table ) [ <int> ] , int n ) { if ( i == n || j == n ) return <int> ; if ( table [ i ] [ j ] != <int> ) return table [ i ] [ j ] ; return table [ i ] [ j ] = arr1 [ i ] [ j ] + max ( <unk> ( i + <int> , j , arr1 , table , n ) , <unk> ( i + <int> , j + <int> , arr1 , table , n ) ) ; } int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int n , i , j ; scanf ( <str> , & n ) ; int arr1 [ <int> ] [ <int> ] ; int table [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr1 [ i ] [ j ] ) ; printf ( <str> , <unk> ( <int> , <int> , arr1 , table , n ) ) ; } return <int> ; }", "label": 0, "id": 4519}
{"input": "int gcd ( int n1 , int n2 ) ; int main ( ) { int n1 , n2 , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; printf ( <str> , gcd ( n1 , n2 ) , ( n1 * n2 ) / gcd ( n1 , n2 ) ) ; } return <int> ; } int gcd ( int n1 , int n2 ) { if ( n2 == <int> ) return n1 ; else n2 = gcd ( n2 , n1 % n2 ) ; }", "label": 1, "id": 4520}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int m , x , tmp , total = <int> , cnt = <int> ; scanf ( <str> , & m ) ; scanf ( <str> , & x ) ; tmp = x ; m -- ; while ( m -- ) { scanf ( <str> , & x ) ; if ( tmp < x ) cnt ++ ; else cnt = <int> ; tmp = x ; total += cnt ; } printf ( <str> , total ) ; } return <int> ; }", "label": 0, "id": 4521}
{"input": "int main ( ) { int T , i = <int> ; long A , B , g [ <int> ] , l [ <int> ] , small , j ; scanf ( <str> , & T ) ; if ( T <= <int> ) { while ( <int> ) { scanf ( <str> , & A , & B ) ; if ( A <= <int> && B <= <int> ) { small = A < B ? A : B ; for ( j = small ; j >= <int> ; j -- ) { if ( A % j == <int> && B % j == <int> ) { g [ i ] = j ; break ; } else continue ; } l [ i ] = ( A * B ) / g [ i ] ; } i ++ ; if ( i == T ) break ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , g [ i ] , l [ i ] ) ; } return <int> ; }", "label": 2, "id": 4522}
{"input": "int gcd ( int x , int y ) { if ( x == y ) return x ; else if ( x > y ) return gcd ( x - y , y ) ; else return gcd ( x , y - x ) ; } int main ( void ) { int x , y , i , t , m , p , lcm ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & x , & y ) ; p = gcd ( x , y ) ; lcm = ( x * y ) / p ; printf ( <str> , p , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 4523}
{"input": "int main ( ) { long long int t , j , lcm ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { int a , b , i = <int> , d = <int> ; scanf ( <str> , & a , & b ) ; while ( i <= a && i <= b ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { d = d * i ; a = a / i ; b = b / i ; } else i = i + <int> ; } lcm = a * b * d ; printf ( <str> , d , lcm ) ; } return <int> ; }", "label": 1, "id": 4524}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , min = <int> , i ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4525}
{"input": "int a [ <unk> ] , mem [ <unk> ] ; int n , N ; int maxtraversalsum ( int i , int j ) { if ( mem [ i ] ) return mem [ i ] ; int sum = a [ i ] ; if ( j < n ) sum += MAX ( maxtraversalsum ( i + j , j + <int> ) , maxtraversalsum ( i + j + <int> , j + <int> ) ) ; return mem [ i ] = sum ; } int main ( void ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a [ <int> ] = <int> ; memset ( mem , <int> , ( N = ( n * ( n + <int> ) ) / <int> + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & ( a [ i ] ) ) ; printf ( <str> , maxtraversalsum ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 4526}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; int mid [ n ] [ n ] ; int i = <int> , j = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { mid [ i ] [ j ] = <int> ; scanf ( <str> , & arr [ i ] [ j ] ) ; } } mid [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ( mid [ i ] [ j ] + arr [ i + <int> ] [ j ] ) > mid [ i + <int> ] [ j ] ) mid [ i + <int> ] [ j ] = mid [ i ] [ j ] + arr [ i + <int> ] [ j ] ; if ( ( mid [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ) > mid [ i + <int> ] [ j + <int> ] ) mid [ i + <int> ] [ j + <int> ] = mid [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } } int max = <int> ; for ( i = <int> ; i < n ; i ++ ) max = max > mid [ n - <int> ] [ i ] ? max : mid [ n - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4527}
{"input": "int main ( ) { int n , size , min , i ; scanf ( <str> , & n ) ; while ( n -- ) { while ( ( getchar ( ) ) != <char> ) ; scanf ( <str> , & size ) ; int arr [ size ] ; min = INT_MAX ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , min * ( size - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4528}
{"input": "int maxvalue ( int arr [ ] [ <int> ] , int n , int i , int j ) { int a , b ; if ( i > n ) return <int> ; a = maxvalue ( arr , n , i + <int> , j ) ; b = maxvalue ( arr , n , i + <int> , j + <int> ) ; if ( a > b ) return ( arr [ i ] [ j ] + a ) ; else return ( arr [ i ] [ j ] + b ) ; } int main ( ) { int a [ <int> ] [ <int> ] ; int testcases , i , j , r , n ; scanf ( <str> , & testcases ) ; while ( testcases > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } r = maxvalue ( a , n , <int> , <int> ) ; printf ( <str> , r ) ; testcases -- ; } return <int> ; }", "label": 2, "id": 4529}
{"input": "long int t , a , i , c , d ; int main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { long int z = <int> ; scanf ( <str> , & a ) ; long int b [ a ] ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b [ i ] ) ; if ( b [ i ] < z ) { z = b [ i ] ; } } c = a - <int> ; d = ( z * c ) ; printf ( <str> , d ) ; } }", "label": 0, "id": 4530}
{"input": "main ( ) { int t , n , i , j ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 4531}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , index = - <int> ; long long min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] <= min ) { min = a [ i ] ; index = i ; } } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 4532}
{"input": "int main ( ) { long long int t , i , num1 , num2 , j , multi ; scanf ( <str> , & t ) ; double lc [ t ] , hc [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; for ( j = <int> ; j > <int> ; j ++ ) { multi = num1 * j ; if ( multi % num2 == <int> ) break ; } lc [ i ] = multi ; hc [ i ] = num1 * num2 / multi ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , hc [ i ] , lc [ i ] ) ; return <int> ; }", "label": 2, "id": 4533}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int memo [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int sum ( int i , int j , int n ) { if ( i >= n ) return <int> ; if ( memo [ i ] [ j ] != <int> ) return memo [ i ] [ j ] ; memo [ i ] [ j ] = max ( sum ( i + <int> , j , n ) , sum ( i + <int> , j + <int> , n ) ) + a [ i ] [ j ] ; return memo [ i ] [ j ] ; } int main ( ) { int t , i , j , n , ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) memo [ i ] [ j ] = <int> ; ans = sum ( <int> , <int> , n ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 4534}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t , n , i , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { i = <int> ; max = <int> ; scanf ( <str> , & n ) ; while ( i <= n ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) { a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } else { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } j ++ ; } i ++ ; } for ( j = <int> ; j <= n ; j ++ ) { if ( a [ n ] [ j ] > max ) { max = a [ n ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4535}
{"input": "int main ( ) { int T , i , j , row , Tri [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & Tri [ i ] [ j ] ) ; } } for ( i = row - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { Tri [ i ] [ j ] += Tri [ i + <int> ] [ j ] > Tri [ i + <int> ] [ j + <int> ] ? Tri [ i + <int> ] [ j ] : Tri [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , Tri [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4536}
{"input": "int solve ( int i , int j ) ; int max ( int , int ) ; int arr [ <int> ] [ <int> ] , n ; int main ( ) { int j = <int> , i , k , x ; scanf ( <str> , & x ) ; for ( k = <int> ; k <= x ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } printf ( <str> , solve ( <int> , <int> ) ) ; } return <int> ; } int solve ( int i , int j ) { int cost1 , cost2 , cost ; if ( i > n ) return <int> ; cost1 = solve ( i + <int> , j ) ; cost2 = solve ( i + <int> , j + <int> ) ; cost = max ( cost1 , cost2 ) + arr [ i ] [ j ] ; return cost ; } int max ( int cost1 , int cost2 ) { if ( cost1 > cost2 ) return cost1 ; else return cost2 ; }", "label": 2, "id": 4537}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 4538}
{"input": "int main ( ) { long long int t , n , j , i , sum = <int> , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int array [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & array [ j ] ) ; for ( j = <int> ; j < n ; j ++ ) { if ( array [ <int> ] > array [ j ] ) { temp = array [ j ] ; array [ j ] = array [ <int> ] ; array [ <int> ] = temp ; } } printf ( <str> , array [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4539}
{"input": "int main ( ) { int t , n , i , j , x , max = <int> , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & x ) ; if ( x > max ) { max = x ; } } sum = sum + max ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 4540}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , r , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4541}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; int k , l ; for ( k = n - <int> ; k > <int> ; k -- ) { for ( l = k ; l > <int> ; l -- ) { if ( a [ k ] [ l ] > a [ k ] [ l - <int> ] ) a [ k - <int> ] [ l - <int> ] += a [ k ] [ l ] ; else a [ k - <int> ] [ l - <int> ] += a [ k ] [ l - <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4542}
{"input": "int main ( ) { int a , b , x , lcm [ <int> ] , gcd [ <int> ] , i , n , j ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a , & b ) ; x = b * ( a > b ) + a * ( a < b ) ; for ( i = <int> ; i <= x ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd [ j ] = i ; } } x = b * ( a < b ) + a * ( a > b ) ; for ( i = x ; i <= ( a * b ) ; i ++ ) { if ( i % a == <int> && i % b == <int> ) { lcm [ j ] = i ; break ; } } } for ( j = <int> ; j < n ; j ++ ) { printf ( <str> , gcd [ j ] , lcm [ j ] ) ; } return <int> ; }", "label": 2, "id": 4543}
{"input": "int gcd ( int x , int y ) { if ( x == <int> ) return y ; if ( y == <int> ) return x ; if ( x == y ) return x ; if ( x > y ) return gcd ( x % y , y ) ; else return gcd ( y % x , x ) ; } int main ( ) { int a , b , i , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int g = <int> ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 4544}
{"input": "int a [ <int> ] [ <int> ] ; int dp [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , i , j , <unk> , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ( j - <int> ) >= <int> && j < i ) dp [ i ] [ j ] = max ( dp [ i - <int> ] [ j - <int> ] , dp [ i - <int> ] [ j ] ) + a [ i ] [ j ] ; else if ( j == i ) dp [ i ] [ j ] = dp [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else if ( j == <int> ) dp [ i ] [ j ] = dp [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } <unk> = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( <unk> < dp [ n - <int> ] [ i ] ) <unk> = dp [ n - <int> ] [ i ] ; } printf ( <str> , <unk> ) ; } return <int> ; }", "label": 0, "id": 4545}
{"input": "int main ( ) { int t , i , j , num [ <int> ] [ <int> ] , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( num [ i ] [ j ] > num [ i ] [ j + <int> ] ) num [ i - <int> ] [ j ] += num [ i ] [ j ] ; else num [ i - <int> ] [ j ] += num [ i ] [ j + <int> ] ; } } printf ( <str> , num [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4546}
{"input": "int main ( void ) { int i , j , k , l , row , repeat_factor = <int> , arr [ <int> ] [ <int> ] ; long int rowsum [ <int> ] , largestsum ; int N ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { largestsum = <int> ; scanf ( <str> , & row ) ; for ( j = <int> ; j < row ; j ++ ) { rowsum [ <int> * j ] = rowsum [ <int> * j + <int> ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } repeat_factor = <int> ; for ( j = row - <int> ; j >= <int> ; j -- ) { for ( l = j ; l >= <int> ; l -- ) { for ( k = <int> ; k < repeat_factor ; k ++ ) { rowsum [ repeat_factor * l + k ] += arr [ j ] [ l ] ; } } repeat_factor *= <int> ; } largestsum = rowsum [ <int> ] ; for ( l = <int> ; l < <int> * row ; l ++ ) largestsum = ( largestsum > rowsum [ l ] ) ? largestsum : rowsum [ l ] ; printf ( <str> , largestsum ) ; } return <int> ; }", "label": 3, "id": 4547}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int maxsum ( int a [ <int> ] [ <int> ] , int n , int r , int c , int sum ) ; int main ( ) { int t , i , j ; int n ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , maxsum ( a , n , <int> , <int> , a [ <int> ] [ <int> ] ) ) ; } return <int> ; } int maxsum ( int a [ <int> ] [ <int> ] , int n , int r , int c , int sum ) { if ( r >= n ) { return ( sum + <int> ) ; } else { return ( max ( maxsum ( a , n , r + <int> , c , ( sum + a [ r + <int> ] [ c ] ) ) , maxsum ( a , n , r + <int> , c + <int> , ( sum + a [ r + <int> ] [ c + <int> ] ) ) ) ) ; } }", "label": 2, "id": 4548}
{"input": "int main ( ) { int i , j , t , n , max ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else if ( j == i ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; } else { a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ? a [ i - <int> ] [ j - <int> ] : a [ i - <int> ] [ j ] ; } } } for ( i = <int> , max = <int> ; i < n ; i ++ ) { max = max > a [ n - <int> ] [ i ] ? max : a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4549}
{"input": "int main ( ) { int i , t ; int long n , a [ n ] , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; min = <int> ; } return <int> ; }", "label": 3, "id": 4550}
{"input": "void Qsort ( int data [ ] , int left , int right ) ; int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , sum [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } if ( i == <int> ) sum [ <int> ] = a [ <int> ] ; else { sum [ i ] = a [ i ] + sum [ i - <int> ] ; for ( j = i - <int> ; j > <int> ; j -- ) { if ( sum [ j ] > sum [ j - <int> ] ) sum [ j ] = sum [ j ] + a [ j ] ; else sum [ j ] = sum [ j - <int> ] + a [ j ] ; } sum [ <int> ] = sum [ <int> ] + a [ <int> ] ; } } Qsort ( sum , <int> , n - <int> ) ; printf ( <str> , sum [ n - <int> ] ) ; } return <int> ; } void Qsort ( int data [ ] , int left , int right ) { int mid , temp , i , j ; i = left ; j = right ; mid = data [ ( left + right ) / <int> ] ; while ( i <= j ) { while ( data [ i ] < mid ) i ++ ; while ( mid < data [ j ] ) j -- ; if ( i <= j ) { temp = data [ i ] ; data [ i ] = data [ j ] ; data [ j ] = temp ; i ++ ; j -- ; } } if ( left < j ) Qsort ( data , left , j ) ; if ( i < right ) Qsort ( data , i , right ) ; }", "label": 0, "id": 4551}
{"input": "int tree [ <int> ] ; int num_rows ; int solve ( int row , int pos ) { if ( row > num_rows ) return <int> ; int t1 = solve ( row + <int> , pos ) ; int t2 = solve ( row + <int> , pos + <int> ) ; int node = ( ( ( row - <int> ) * ( row ) ) >> <int> ) + pos ; if ( t2 > t1 ) return tree [ node ] + t2 ; return tree [ node ] + t1 ; } int main ( ) { int i , testcases ; scanf ( <str> , & testcases ) ; while ( testcases -- ) { i = <int> ; scanf ( <str> , & num_rows ) ; while ( i < ( ( num_rows * ( num_rows + <int> ) ) >> <int> ) ) { scanf ( <str> , & tree [ i ++ ] ) ; } printf ( <str> , solve ( <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 4552}
{"input": "int main ( ) { int tcase , A , B , x , y , g , l ; scanf ( <str> , & tcase ) ; while ( tcase -- ) { scanf ( <str> , & A , & B ) ; x = A ; y = B ; while ( x != y ) { if ( x > y ) { x = x - y ; g = x ; } else { y = y - x ; g = y ; } } l = ( A * B ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 4553}
{"input": "int main ( ) { long t , i , j , n , a [ <int> ] [ <int> ] , maxm = - <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += ( ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ) ; } } for ( j = <int> ; j < n ; j ++ ) if ( maxm < a [ n - <int> ] [ j ] ) maxm = a [ n - <int> ] [ j ] ; printf ( <str> , maxm ) ; } return <int> ; }", "label": 1, "id": 4554}
{"input": "int a [ <int> ] ; int main ( void ) { int t , n , i , j , C , c , x ; long long int s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> , C = <int> ; i < n ; i ++ ) { if ( a [ i ] == a [ <int> ] ) C ++ ; } for ( i = <int> , s = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> , x = <int> , c = <int> ; j < n ; j ++ ) { if ( a [ j ] >= a [ j - <int> ] ) c ++ ; else { x = <int> ; break ; } } if ( x ) { s = s + ( c * ( c + <int> ) ) / <int> ; i = j - <int> ; } else s = s + c ; } if ( C + <int> == n && n != <int> ) printf ( <str> , n + <int> ) ; else printf ( <str> , s + n ) ; } return <int> ; }", "label": 0, "id": 4555}
{"input": "int main ( ) { int a , b , i , d = <int> , n , m , k = <int> , j ; scanf ( <str> , & j ) ; while ( j > <int> ) { printf ( <str> ) ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) d = i ; } n = a / d ; m = b / d ; k = d * n * m ; printf ( <str> , d , k ) ; j -- ; } return <int> ; }", "label": 1, "id": 4556}
{"input": "int gcd ( int x , int y ) { int p , m = <int> ; if ( x < y ) { x = x + y ; y = x - y ; x = x - y ; } while ( m != <int> ) { m = x % y ; if ( m == <int> ) return y ; else x = y ; y = m ; } } int main ( ) { int T , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { int lcm , x , y , m ; scanf ( <str> , & x , & y ) ; m = gcd ( x , y ) ; lcm = x * y / m ; printf ( <str> , x , y , m , lcm ) ; } return <int> ; }", "label": 1, "id": 4557}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int T , N , i , k , j ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = N - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { k = ( a [ i ] [ j - <int> ] >= a [ i ] [ j ] ) ? a [ i ] [ j - <int> ] : a [ i ] [ j ] ; a [ i - <int> ] [ j - <int> ] += k ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; T -- ; } return <int> ; }", "label": 0, "id": 4558}
{"input": "int main ( ) { int a [ <int> ] , max , sum , i , j , k , t , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { max = <int> ; sum = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { sum = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ k ] ) ; sum = sum + a [ k ] ; } if ( max < sum ) { max = sum ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4559}
{"input": "int n ; int arr [ <int> ] [ <int> ] ; int dfs ( int i , int j , int sum ) { sum += arr [ i ] [ j ] ; if ( i == n ) { return sum ; } else { int s1 , s2 ; s1 = dfs ( i + <int> , j , sum ) ; s2 = dfs ( i + <int> , j + <int> , sum ) ; return ( s1 > s2 ? s1 : s2 ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int i , j ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } printf ( <str> , dfs ( <int> , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 4560}
{"input": "int main ( ) { int i , j , k , n , r , a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] , max ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( k = <int> ; k <= j ; k ++ ) { if ( ( j == <int> ) && ( k == <int> ) ) s [ j ] [ k ] = a [ j ] [ k ] ; else if ( k == <int> ) s [ j ] [ k ] = a [ j ] [ k ] + s [ j - <int> ] [ k ] ; else if ( k == j ) s [ j ] [ k ] = a [ j ] [ k ] + s [ j - <int> ] [ k - <int> ] ; else { if ( s [ j - <int> ] [ k ] > s [ j - <int> ] [ k - <int> ] ) max = s [ j - <int> ] [ k ] ; else max = s [ j - <int> ] [ k - <int> ] ; s [ j ] [ k ] = a [ j ] [ k ] + max ; } } } max = <int> ; for ( j = <int> ; j < r ; j ++ ) if ( s [ r - <int> ] [ j ] > max ) max = s [ r - <int> ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 4561}
{"input": "int triangle [ <int> ] [ <int> ] ; int lines , level , offset ; int indices [ <int> ] ; int sumtrian ( ) ; int bump ( ) ; int main ( ) { int testcases , i , j , k ; int sum , temp ; scanf ( <str> , & testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { indices [ j ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & triangle [ j ] [ k ] ) ; } } sum = <int> ; offset = <int> ; level = lines - <int> ; printf ( <str> , sum ) ; } return <int> ; } int sumtrian ( ) { int i , sum = <int> ; for ( i = <int> ; i < lines ; i ++ ) { sum += triangle [ i ] [ indices [ i ] ] ; } return sum ; } int bump ( ) { if ( level == <int> || offset > level ) { level = lines - <int> ; offset ++ ; indices [ lines - <int> ] = offset ; return offset == lines ; } else { indices [ level -- ] = offset ; return <int> ; } }", "label": 1, "id": 4562}
{"input": "int trgl [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int maxsum ( int row , int col , int tot ) { int x ; if ( row == tot - <int> ) return ( trgl [ row ] [ col ] ) ; x = ( trgl [ row ] [ col ] ) + max ( maxsum ( row + <int> , col , tot ) , maxsum ( row + <int> , col + <int> , tot ) ) ; return x ; } void triangle ( int number ) { int row , col ; for ( col = <int> ; col < number ; col ++ ) { for ( row = <int> ; row <= col ; row ++ ) { scanf ( <str> , & trgl [ col ] [ row ] ) ; printf ( <str> ) ; } } printf ( <str> , maxsum ( <int> , <int> , number ) ) ; } void do_it ( ) { int number ; scanf ( <str> , & number ) ; triangle ( number ) ; } int main ( ) { int x , n ; scanf ( <str> , & x ) ; for ( n = <int> ; n < x ; n ++ ) do_it ( ) ; return <int> ; }", "label": 2, "id": 4563}
{"input": "int main ( ) { int t , n , i , r , m , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & r ) ; if ( n < r ) m = n ; else m = r ; for ( i = <int> ; i <= m ; i ++ ) { if ( r % i == <int> && n % i == <int> ) { g = i ; } } printf ( <str> , g , ( r * n ) / g ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 4564}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long int N , A [ <int> ^ <int> ] ; scanf ( <str> , & N ) ; for ( long int i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } int c = <int> ; for ( int startPoint = <int> ; startPoint < N ; startPoint ++ ) { for ( int grps = startPoint ; grps < N ; grps ++ ) { if ( A [ startPoint ] == A [ grps ] || ( A [ grps ] - A [ startPoint ] == <int> ) ) c ++ ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 4565}
{"input": "int main ( ) { int t ; long int n , i , temp , * p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; i = n ; while ( n -- ) { scanf ( <str> , p ) ; p ++ ; } n = i ; while ( n -- ) { p -- ; } temp = * p ; p ++ ; n -- ; while ( n -- ) { if ( * p < temp ) temp = * p ; p ++ ; } n = i ; printf ( <str> , temp * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 4566}
{"input": "int a [ <int> ] ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , min ; scanf ( <str> , & n ) ; for ( int i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ <int> ] ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 4567}
{"input": "long long int a [ <int> ] [ <int> ] , m [ <int> ] [ <int> ] ; long long int max ( long long int a , long long int b ) { if ( a > b ) return a ; return b ; } int main ( ) { long long int t , n , i , j , k , l , r , c ; scanf ( <str> , & t ) ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( l = <int> ; l <= n ; l ++ ) m [ n ] [ l ] = a [ n ] [ l ] ; for ( r = n - <int> ; r >= <int> ; r -- ) { for ( c = <int> ; c <= r ; c ++ ) { m [ r ] [ c ] = a [ r ] [ c ] + max ( m [ r + <int> ] [ c ] , m [ r + <int> ] [ c + <int> ] ) ; } } printf ( <str> , m [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4568}
{"input": "int gcdlcm ( long int , long int ) ; int main ( void ) { long n , k , l , a ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & k , & l ) ; a = gcdlcm ( k , l ) ; printf ( <str> , a ) ; printf ( <str> , ( k * l ) / a ) ; } return <int> ; } int gcdlcm ( long int x , long int y ) { if ( x == y ) return x ; if ( x % y == <int> ) return y ; if ( x % y == <int> ) return x ; if ( x > y ) return gcdlcm ( x % y , y ) ; else return gcdlcm ( x , y % x ) ; }", "label": 3, "id": 4569}
{"input": "int main ( ) { long long int t , n , i , min , sum = <int> ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; sum = <int> ; t -- ; } }", "label": 2, "id": 4570}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] , cost , k , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { k = <int> , cost = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( l = k + <int> ; l < n ; l ++ ) { if ( a [ k ] > a [ l ] ) { cost = cost + a [ l ] ; k ++ ; } else { cost = cost + a [ k ] ; } } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 4571}
{"input": "int main ( ) { int a , b , max , i ; scanf ( <str> , & a , & b ) ; max = ( a < b ) ? a : b ; for ( i = max ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i ) ; break ; } } max = ( a > b ) ? a : b ; for ( i = max ; ; i ++ ) { if ( i % a == <int> && i % b == <int> ) { printf ( <str> , i ) ; break ; } } }", "label": 1, "id": 4572}
{"input": "long sumd ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) ; long sumr ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) ; int main ( ) { int arr [ <int> ] [ <int> ] ; int i , j , tc , go , row , k ; long sumrt = <int> , sumdn , sum ; scanf ( <str> , & tc ) ; for ( go = <int> ; go <= tc ; go ++ ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } sum = arr [ <int> ] [ <int> ] ; sumrt = sumr ( sum , row , <int> , <int> , arr ) ; sumdn = sumd ( sum , row , <int> , <int> , arr ) ; if ( sumrt > sumdn ) printf ( <str> , sumrt ) ; else printf ( <str> , sumdn ) ; } return <int> ; } long sumd ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) { long sumdn , sumrt ; s = s + arr [ i + <int> ] [ j ] ; if ( i < n - <int> ) { sumdn = sumd ( s , n , i + <int> , j , arr ) ; sumrt = sumr ( s , n , i + <int> , j + <int> , arr ) ; if ( sumrt > sumdn ) return sumrt ; else return sumdn ; } return s ; } long sumr ( long s , int n , int i , int j , int arr [ <int> ] [ <int> ] ) { long sumdn , sumrt ; s = s + arr [ i + <int> ] [ j + <int> ] ; if ( i < n - <int> ) { sumdn = sumd ( s , n , i + <int> , j , arr ) ; sumrt = sumr ( s , n , i + <int> , j + <int> , arr ) ; if ( sumrt > sumdn ) return sumrt ; else return sumdn ; } return s ; }", "label": 2, "id": 4573}
{"input": "long long int findgcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; return findgcd ( b , a % b ) ; } int main ( ) { long long int n ; scanf ( <str> , & n ) ; while ( n -- ) { long long int gcd , lcm , a , b , x , y ; scanf ( <str> , & a , & b ) ; gcd = findgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4574}
{"input": "int run ( ) ; int main ( ) { printf ( <str> ) ; int t , x ; scanf ( <str> , & t ) ; int * p ; x = t ; p = ( int * ) malloc ( sizeof ( int ) * t ) ; while ( x -- > <int> ) p [ x ] = run ( ) ; x = t ; printf ( <str> ) ; while ( x -- > <int> ) printf ( <str> , p [ t - x - <int> ] ) ; return <int> ; } int run ( ) { int c = <int> , y ; long int n ; scanf ( <str> , & n ) ; c = n ; long int * ar ; ar = ( long int * ) malloc ( sizeof ( long int ) * n ) ; int x = <int> ; while ( scanf ( <str> , & ar [ x ] ) != EOF ) x ++ ; fflush ( stdin ) ; for ( x = <int> ; x < n ; x ++ ) { for ( y = x ; y < n - <int> ; y ++ ) { if ( ar [ y ] <= ar [ y + <int> ] ) c ++ ; else break ; } } return c ; }", "label": 3, "id": 4575}
{"input": "int main ( ) { long long int min , n , i , k ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = INT_MAX ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4576}
{"input": "int main ( ) { int t , i , j , k , l , n [ <int> ] [ <int> ] , b = <int> , c = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & n [ j ] [ k ] ) ; } for ( k = <int> ; k < l ; k ++ ) { for ( j = <int> ; j < l ; j ++ ) b += n [ j ] [ k ] ; if ( b > c ) c = b ; b = <int> ; } printf ( <str> , c + <int> ) ; } return <int> ; }", "label": 1, "id": 4577}
{"input": "int main ( ) { int t , a , b , lcm , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm = b ; while ( lcm % a != <int> ) lcm += b ; gcd = a ; while ( b % gcd != <int> || a % gcd != <int> ) gcd -- ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4578}
{"input": "int <unk> ( ) { int i , j , max , rows , array [ <int> ] [ <int> ] ; scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) array [ i ] [ j ] += array [ i - <int> ] [ j ] ; else if ( i == j ) array [ i ] [ i ] += array [ i - <int> ] [ j - <int> ] ; else { if ( array [ i - <int> ] [ j - <int> ] > array [ i - <int> ] [ j ] ) array [ i ] [ j ] += array [ i - <int> ] [ j - <int> ] ; else array [ i ] [ j ] += array [ i - <int> ] [ j ] ; } } max = array [ rows - <int> ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) if ( array [ rows - <int> ] [ i ] > max ) max = array [ rows - <int> ] [ i ] ; return max ; } int main ( ) { int testcases , * ans , i ; scanf ( <str> , & testcases ) ; ans = ( int * ) malloc ( sizeof ( int ) * testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) ans [ i ] = <unk> ( ) ; for ( i = <int> ; i < testcases ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 0, "id": 4579}
{"input": "int maxsum = <int> ; void fun ( int arr [ <int> ] [ <int> ] , int i , int j , int sum , int n ) ; int main ( ) { int t , n , i , j , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ <int> ] [ <int> ] = { - <int> } ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } fun ( arr , <int> , <int> , <int> , n ) ; printf ( <str> , maxsum ) ; } } void fun ( int arr [ <int> ] [ <int> ] , int i , int j , int sum , int n ) { int k = <int> ; if ( i <= n - <int> ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + <int> ] ) { j = j + <int> ; k = <int> ; } sum = sum + arr [ i ] [ j ] ; fun ( arr , i + <int> , j , sum , n ) ; if ( maxsum < sum ) maxsum = sum ; } if ( i < n - <int> ) { if ( k == <int> ) { sum = sum - arr [ i ] [ j ] ; j = j - <int> ; } else { sum = sum - arr [ i ] [ j ] ; j = j + <int> ; } sum = sum + arr [ i ] [ j ] ; fun ( arr , i + <int> , j , sum , n ) ; } }", "label": 2, "id": 4580}
{"input": "int main ( ) { long long int i , t , n , a , b , j , c , l ; scanf ( <str> , & t ) ; for ( i = t ; i > <int> ; i -- ) { scanf ( <str> , & a , & b ) ; if ( a >= b ) { for ( j = b ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { c = j ; break ; } } } else { for ( j = a ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { c = j ; break ; } } } printf ( <str> , c , a * b / c ) ; } }", "label": 2, "id": 4581}
{"input": "void rec ( int , int ) ; int a [ <int> ] [ <int> ] = { <int> , <int> } , <unk> [ <int> ] [ <int> ] = { <int> , <int> } , save = <int> ; int main ( ) { int i , l , t , j , cases , ccnt ; scanf ( <str> , & cases ) ; for ( ccnt = <int> ; ccnt < cases ; ccnt ++ ) { scanf ( <str> , & l ) ; getchar ( ) ; for ( i = <int> ; i < l ; i ++ ) for ( t = <int> ; t <= i ; t ++ ) { a [ i ] [ t ] = getchar ( ) - <char> ; getchar ( ) ; <unk> [ i ] [ t ] = <int> ; } for ( j = <int> ; j <= l ; j ++ ) a [ i ] [ j ] = <int> ; rec ( <int> , <int> ) ; printf ( <str> , save ) ; save = <int> ; } return <int> ; } void rec ( int i , int j ) { static int sum = <int> ; if ( <unk> [ i ] [ j ] != <int> ) { sum = sum + <unk> [ i ] [ j ] ; if ( sum > save ) save = sum ; sum -= <unk> [ i ] [ j ] ; } else { sum = sum + a [ i ] [ j ] ; if ( a [ i + <int> ] [ j ] != <int> ) { rec ( i + <int> , j ) ; rec ( i + <int> , j + <int> ) ; sum -= a [ i ] [ j ] ; <unk> [ i ] [ j ] = save ; } else { if ( sum > save ) save = sum ; sum -= a [ i ] [ j ] ; } } }", "label": 2, "id": 4582}
{"input": "main ( ) { int n , length , i , j , c = <int> ; scanf ( <str> , & n ) ; while ( n -- != <int> ) { scanf ( <str> , & length ) ; int a [ length ] ; for ( i = <int> ; i < length ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { c ++ ; for ( j = i ; j < ( n - <int> ) ; j ++ ) { if ( a [ j + <int> ] >= a [ j ] ) c ++ ; else break ; } } printf ( <str> , c ) ; } }", "label": 1, "id": 4583}
{"input": "void swap ( long * a , long * b ) { long long temp = * a ; * a = * b ; * b = temp ; } long partition ( long arr [ ] , long low , long high ) { long pivot = arr [ high ] ; long i = ( low - <int> ) ; long j = <int> ; for ( j = low ; j <= high - <int> ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; swap ( & arr [ i ] , & arr [ j ] ) ; } } swap ( & arr [ i + <int> ] , & arr [ high ] ) ; return ( i + <int> ) ; } void quicksort ( long arr [ ] , long low , long high ) { if ( low < high ) { long p = partition ( arr , low , high ) ; quicksort ( arr , low , p - <int> ) ; quicksort ( arr , p + <int> , high ) ; } } int check ( long a [ ] , long t ) { int i ; for ( i = <int> ; i < t - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) return <int> ; } return <int> ; } int map ( long a [ ] , long t ) { int i ; for ( i = <int> ; i < t - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) return <int> ; } return <int> ; } int main ( ) { int n , t , j , i , k ; int x , y ; scanf ( <str> , & t ) ; long arr [ <int> ] , b [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { b [ i ] = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; x = check ( arr , n ) ; y = map ( arr , n ) ; if ( x == <int> && y == <int> ) quicksort ( arr , <int> , n - <int> ) ; else if ( y == <int> ) { for ( k = <int> ; k < n / <int> ; k ++ ) swap ( & arr [ k ] , & arr [ n - k - <int> ] ) ; } else ; b [ i ] = arr [ <int> ] * ( n - <int> ) ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , b [ i ] ) ; return <int> ; }", "label": 0, "id": 4584}
{"input": "int main ( ) { int t , flag ; long int n , num , min , i ; long long int r ; scanf ( <str> , & t ) ; while ( t -- ) { flag = <int> ; scanf ( <str> , & n ) ; if ( n < <int> ) continue ; scanf ( <str> , & min ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num ) ; if ( min > num ) min = num ; else if ( min == num ) { flag = <int> ; break ; } } if ( flag ) continue ; r = min * ( n - <int> ) ; printf ( <str> , r ) ; } return <int> ; }", "label": 1, "id": 4585}
{"input": "long min ( long a , long b ) { return a < b ? a : b ; } int main ( ) { int t ; long n , i , ans , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; m = min ( arr [ <int> ] , arr [ <int> ] ) ; ans = m ; for ( i = <int> ; i < n ; i ++ ) { m = min ( m , arr [ i ] ) ; ans = ans + m ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 4586}
{"input": "int main ( ) { int t , n , curr , curi , sum , * arr , * crr , i , a , b , c , d , e , ap ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; ap = ( n * ( n + <int> ) ) / <int> ; arr = ( int * ) calloc ( ap * n , sizeof ( int ) ) ; crr = arr ; i = <int> ; sum = <int> ; curr = <int> ; curi = <int> ; while ( ( i ++ ) <= ap ) { scanf ( <str> , & ( * crr ) ) ; crr ++ ; } while ( <int> ) { sum = sum + arr [ curi ] ; if ( curr < ( n - <int> ) ) { a = arr [ curi + curr ] ; b = arr [ curi + curr + <int> ] ; c = arr [ curi + curr + curr + <int> ] ; d = arr [ curi + curr + curr + <int> ] ; e = arr [ curi + curr + curr + <int> ] ; if ( ( ( a > b ) && ( ( a + c ) > ( b + e ) ) ) || ( ( a < b ) && ( ( a + c ) > ( b + d ) ) && ( ( a + c ) > ( b + e ) ) ) ) { curi = curi + curr ; curr ++ ; } else { curi = curi + curr + <int> ; curr ++ ; } } else if ( curr == ( n - <int> ) ) { a = arr [ curi + curr ] ; b = arr [ curi + curr + <int> ] ; if ( a > b ) { curi = curi + curr ; curr ++ ; } else { curi = curi + curr + <int> ; curr ++ ; } } else break ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 4587}
{"input": "long long int gcd ( int a , int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; return gcd ( b % a , a ) ; } int main ( ) { long long int g , a , b , tc ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g ) ; printf ( <str> , ( a * b ) / g ) ; } }", "label": 1, "id": 4588}
{"input": "int a [ <int> ] [ <int> ] ; int answer [ <int> ] [ <int> ] ; int g , h ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int ans ( int a [ <int> ] [ <int> ] , int i , int j ) { if ( answer [ i ] [ j ] != <int> ) return answer [ i ] [ j ] ; if ( i < <int> || j < <int> ) return <int> ; if ( i == <int> && j == <int> ) { answer [ i ] [ j ] = a [ i ] [ j ] ; return answer [ i ] [ j ] ; } else { answer [ i ] [ j ] = ( a [ i ] [ j ] + max ( ans ( a , i - <int> , j ) , ans ( a , i - <int> , j - <int> ) ) ) ; return answer [ i ] [ j ] ; } } int main ( ) { int n , r , i , j , count = <int> , se ; int an [ <int> ] ; for ( g = <int> ; g < <int> ; g ++ ) { for ( h = <int> ; h <= g ; h ++ ) { answer [ g ] [ h ] = <int> ; } } scanf ( <str> , & n ) ; while ( n ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } se = ans ( a , r - <int> , i ) ; for ( i = <int> ; i < r ; i ++ ) { if ( ans ( a , r - <int> , i ) > se ) se = ans ( a , r - <int> , i ) ; } an [ count ] = se ; count ++ ; n -- ; } for ( i = <int> ; i < count ; i ++ ) printf ( <str> , an [ i ] ) ; return <int> ; }", "label": 2, "id": 4589}
{"input": "int main ( void ) { int t , n , a [ <int> ] , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 4590}
{"input": "int gcd ( ) ; int main ( ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) return gcd ( ( a - b ) , b ) ; else if ( b > a ) return gcd ( a , ( b - a ) ) ; }", "label": 1, "id": 4591}
{"input": "int main ( ) { int t , n , i , j , k , l , m , lim ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( k = n - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= i ; l ++ ) a [ k ] [ l ] += a [ k + <int> ] [ l + <int> ] > a [ k + <int> ] [ l ] ? a [ k + <int> ] [ l + <int> ] : a [ k + <int> ] [ l ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4592}
{"input": "int main ( ) { long int a , b , d , e , c ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; d = a ; e = b ; while ( b != <int> ) { c = b ; b = a % b ; a = c ; } printf ( <str> , a , ( d * e ) / c ) ; } return <int> ; }", "label": 0, "id": 4593}
{"input": "int main ( ) { int t ; long a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long p = a * b ; gcd = a ; while ( a != b ) { if ( a > b ) { a = a - b ; } else if ( b > a ) b = b - a ; else if ( a == b ) ; gcd = a ; lcm = p / gcd ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4594}
{"input": "int GCD ( int a , int b ) { int c ; while ( b ) { c = b ; b = a % b ; a = c ; } return a ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4595}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , a [ <int> ] , c , j ; scanf ( <str> , & n ) ; c = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( ( a [ i ] + <int> == a [ j ] ) && ( j > i ) ) { c ++ ; break ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 4596}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , i , j , d , f , c , l , max , k ; scanf ( <str> , & c ) ; for ( k = <int> ; k <= c ; k ++ ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , a [ i ] [ j ] ) ; } } for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> && i == <int> ) b [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == <int> ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; else if ( j == i ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; else { d = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; f = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; if ( d >= f ) b [ i ] [ j ] = d ; else b [ i ] [ j ] = f ; } } } max = b [ l - <int> ] [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) { if ( b [ l - <int> ] [ i ] > max ) max = b [ l - <int> ] [ i ] ; } printf ( <str> , max ) ; } }", "label": 3, "id": 4597}
{"input": "int main ( ) { int t , i , x , y , j , gcd , lcm , n1 , n2 ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & x , & y ) ; n1 = x ; n2 = y ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } gcd = x ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4598}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { int a , b , k ; scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; printf ( <str> , k , ( a * b ) / k ) ; t -- ; } return <int> ; }", "label": 1, "id": 4599}
{"input": "int main ( ) { int e , x , y , c , a , b , gcd , lcm , t ; scanf ( <str> , & e ) ; while ( e != <int> ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } }", "label": 2, "id": 4600}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( ) { int t , a , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = max ( a , b ) ; printf ( <str> , c , a + b ) ; } return <int> ; }", "label": 1, "id": 4601}
{"input": "int main ( ) { int t , n , arr [ <int> ] , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( arr [ i ] < min ) min = arr [ i ] ; printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4602}
{"input": "int main ( ) { long long int t , n , c , i , j , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; c = <int> ; for ( i = <int> ; i < n ; i ++ ) { p = a [ i ] ; for ( j = i ; j < n ; j ++ ) { if ( a [ j ] >= p ) c ++ ; else break ; p = a [ j ] ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 4603}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , row , sum [ <int> ] [ <int> ] , maxvalue , hmtimes , k ; scanf ( <str> , & hmtimes ) ; for ( k = <int> ; k < hmtimes ; k ++ ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < row ; i ++ ) for ( j = i + <int> ; j < row ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j != <int> ) { if ( sum [ i - <int> ] [ j - <int> ] > sum [ i - <int> ] [ j ] ) sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; } maxvalue = sum [ row - <int> ] [ <int> ] ; for ( j = <int> ; j < row ; j ++ ) { if ( sum [ row - <int> ] [ j ] > maxvalue ) maxvalue = sum [ row - <int> ] [ j ] ; } printf ( <str> , maxvalue ) ; } return <int> ; }", "label": 1, "id": 4604}
{"input": "int main ( ) { int r , a , b ; int x , y , lcm , t ; int i = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { r = a % b ; a = b ; b = r ; } lcm = ( x * y ) ; printf ( <str> , a , lcm ) ; } }", "label": 1, "id": 4605}
{"input": "int main ( void ) { int t , * p , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int min = <int> ; scanf ( <str> , & n ) ; p = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p [ i ] ) ; } min = * p ; for ( j = <int> ; j < n ; j ++ ) { if ( p [ j ] < p [ j + <int> ] ) min = p [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; free ( p ) ; } return <int> ; }", "label": 1, "id": 4606}
{"input": "static inline int getInt ( void ) { int ch , r = <int> ; while ( ! isdigit ( ch = <unk> ( ) ) && ch != <char> ) { if ( ch == <char> ) { while ( isdigit ( ch = <unk> ( ) ) ) r = r * <int> + ( ch - <char> ) ; if ( ch != EOF ) ungetc ( ch , stdin ) ; return - r ; } if ( ch == EOF ) exit ( <int> ) ; } r = ch - <char> ; while ( isdigit ( ch = <unk> ( ) ) ) r = r * <int> + ( ch - <char> ) ; if ( ch != EOF ) ungetc ( ch , stdin ) ; return r ; } static inline void <unk> ( int x ) { if ( x < <int> ) { x = - x ; <unk> ( <char> ) ; } if ( x >= <int> ) { <unk> ( x / <int> + <char> ) ; x %= <int> ; } if ( x >= <int> ) { <unk> ( x / <int> + <char> ) ; x %= <int> ; } if ( x >= <int> ) { <unk> ( x / <int> + <char> ) ; x %= <int> ; } if ( x >= <int> ) { <unk> ( x / <int> + <char> ) ; x %= <int> ; } if ( x >= <int> ) { <unk> ( x / <int> + <char> ) ; x %= <int> ; } if ( x >= <int> ) { <unk> ( x / <int> + <char> ) ; x %= <int> ; } if ( x >= <int> ) { <unk> ( x / <int> + <char> ) ; x %= <int> ; } if ( x >= <int> ) { <unk> ( x / <int> + <char> ) ; x %= <int> ; } if ( x >= <int> ) { <unk> ( x / <int> + <char> ) ; x %= <int> ; } <unk> ( x + <char> ) ; } int main ( void ) { int t = getInt ( ) ; while ( t -- ) { int h = getInt ( ) ; int rw [ <int> ] [ <int> ] ; int r , c , x , y ; int ip = <int> , op = <int> ; rw [ op ] [ <int> ] = getInt ( ) ; for ( r = <int> ; r < h ; r ++ ) { op = ip ; ip = ! ip ; y = rw [ ip ] [ <int> ] ; rw [ op ] [ <int> ] = y + getInt ( ) ; for ( c = <int> ; c < r ; c ++ ) { x = y ; y = rw [ ip ] [ c ] ; rw [ op ] [ c ] = ( x > y ? x : y ) + getInt ( ) ; } rw [ op ] [ c ] = y + getInt ( ) ; } for ( c = <int> , x = rw [ op ] [ <int> ] ; c < h ; c ++ ) if ( rw [ op ] [ c ] > x ) x = rw [ op ] [ c ] ; <unk> ( x ) ; <unk> ( <char> ) ; } return <int> ; }", "label": 1, "id": 4607}
{"input": "int main ( ) { int T , t , a , b ; scanf ( <str> , & T ) ; t = T ; int a1 [ T ] , a2 [ T ] ; while ( T -- ) { scanf ( <str> , & a , & b ) ; int gc ; if ( a > b ) gc = b ; else gc = a ; while ( <int> ) { if ( a % gc == <int> && b % gc == <int> ) break ; else gc -- ; } a1 [ T ] = gc ; a2 [ T ] = a * b / gc ; } while ( t -- ) { printf ( <str> , a1 [ t ] , a2 [ t ] ) ; } return <int> ; }", "label": 2, "id": 4608}
{"input": "int main ( ) { int k , l , r ; scanf ( <str> , & l ) ; int total [ l ] ; for ( r = <int> ; r < l ; r ++ ) { int m = <int> , j , i , sum = <int> , sum1 = <int> ; scanf ( <str> , & k ) ; int a [ k ] [ k ] ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } total [ r ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < k ; i ++ ) { sum = total [ r ] + a [ i ] [ m ] ; sum1 = total [ r ] + a [ i ] [ m + <int> ] ; if ( sum > sum1 ) total [ r ] = total [ r ] + a [ i ] [ m ] ; else { total [ r ] = total [ r ] + a [ i ] [ m + <int> ] ; m = m + <int> ; } } } for ( r = <int> ; r < l ; r ++ ) { printf ( <str> , total [ r ] ) ; } return <int> ; }", "label": 1, "id": 4609}
{"input": "int main ( ) { int x , y , i , r , divn , divs , rem , s , t , c ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { scanf ( <str> , & x , & y ) ; s = x < y ? x : y ; t = x > y ? x : y ; divn = t ; divs = s ; rem = divn % divs ; while ( rem != <int> ) { divn = divs ; divs = rem ; rem = divn % divs ; } c = ( ( x * y ) / divs ) ; printf ( <str> , divs , c ) ; } }", "label": 1, "id": 4610}
{"input": "int main ( ) { int t , n , i , j , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; -- i ) for ( j = <int> ; j <= i ; ++ j ) { if ( arr [ i + <int> ] [ j ] + arr [ i ] [ j ] > arr [ i + <int> ] [ j + <int> ] + arr [ i ] [ j ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4611}
{"input": "int hcf ( int n1 , int n2 ) { if ( n2 != <int> ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int A [ <int> ] , B [ <int> ] , C [ <int> ] , D [ <int> ] , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & A [ i ] , & B [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { C [ i ] = hcf ( A [ i ] , B [ i ] ) ; D [ i ] = ( A [ i ] * B [ i ] ) / C [ i ] ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , C [ i ] , D [ i ] ) ; } return <int> ; }", "label": 1, "id": 4612}
{"input": "long long max ( long long a , long long b ) { if ( a > b ) return a ; return b ; } int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int row , i , j , k ; long long arr [ <int> ] , dp [ <int> ] [ <int> ] , res = <int> ; scanf ( <str> , & row ) ; dp [ <int> ] [ <int> ] = dp [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < row ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & arr [ j ] ) ; for ( j = <int> ; j <= i ; ++ j ) { if ( j == <int> ) { dp [ j ] [ <int> ] = dp [ j ] [ <int> ] + arr [ j ] ; if ( dp [ j ] [ <int> ] > res ) res = dp [ j ] [ <int> ] ; continue ; } if ( j == i ) { dp [ j ] [ <int> ] = dp [ j - <int> ] [ <int> ] + arr [ j ] ; if ( dp [ j ] [ <int> ] > res ) res = dp [ j ] [ <int> ] ; continue ; } dp [ j ] [ <int> ] = arr [ j ] + max ( dp [ j ] [ <int> ] , dp [ j - <int> ] [ <int> ] ) ; if ( dp [ j ] [ <int> ] > res ) res = dp [ j ] [ <int> ] ; } for ( j = <int> ; j <= i ; ++ j ) dp [ j ] [ <int> ] = dp [ j ] [ <int> ] ; } printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 4613}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] ; int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; s [ i ] [ j ] = a [ i ] [ j ] ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( s [ i + <int> ] [ j ] > s [ i + <int> ] [ j + <int> ] ) s [ i ] [ j ] += s [ i + <int> ] [ j ] ; else s [ i ] [ j ] += s [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , s [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4614}
{"input": "unsigned long long int g ; unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } } unsigned long long int lcm ( unsigned long long int a , unsigned long long int b ) { return ( ( a * b ) / g ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned long long int a , b ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , lcm ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 4615}
{"input": "int main ( void ) { int n , m , i ; scanf ( <str> , & m ) ; while ( m > <int> ) for ( i = <int> ; i < m ; i ++ ) { scanf ( <str> , & n ) ; int A [ <int> ] , B , c = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } B = A [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( B < A [ i ] ) { c = c + B ; } else { c = c + A [ i ] ; B = A [ i ] ; } } printf ( <str> , c ) ; m -- ; } return <int> ; }", "label": 1, "id": 4616}
{"input": "int sum ( int a [ <int> ] , int i , int j , int n ) { int m = i * ( i - <int> ) / <int> + j , max = - <int> , k , v1 , v2 ; if ( i == n - <int> ) if ( a [ m + i ] > a [ m + i + <int> ] ) return a [ m ] + a [ m + i ] ; else return a [ m ] + a [ m + i + <int> ] ; v1 = a [ m ] + sum ( a , i + <int> , j , n ) ; v2 = a [ m ] + sum ( a , i + <int> , j + <int> , n ) ; if ( v1 > v2 ) return v1 ; else return v2 ; } int main ( void ) { int t , n , a [ <int> ] , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n * ( n + <int> ) / <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; printf ( <str> , sum ( a , <int> , <int> , n ) ) ; } return <int> ; }", "label": 2, "id": 4617}
{"input": "int gcd ( int a , int b ) { int c ; if ( a < b ) { int temp = a ; a = b ; b = temp ; } while ( a > <int> ) { c = a ; a = b % a ; b = c ; } return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int hcf = gcd ( a , b ) ; long long int lcm = ( ( long long int ) a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 4618}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { int n , min = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4619}
{"input": "int main ( ) { int nTestCases ; long long nArrIntegers [ <int> ] , nIntegerCount , nMinCost ; long long i , nSmallestInt = <int> ; scanf ( <str> , & nTestCases ) ; while ( nTestCases != <int> ) { scanf ( <str> , & nIntegerCount ) ; PRINTD ( <str> , nIntegerCount ) ; for ( i = <int> ; i <= nIntegerCount - <int> ; i ++ ) { scanf ( <str> , & nArrIntegers [ i ] ) ; PRINTD ( <str> , nArrIntegers [ i ] ) ; if ( nArrIntegers [ i ] < nSmallestInt ) { nSmallestInt = nArrIntegers [ i ] ; } } nMinCost = nSmallestInt * ( nIntegerCount - <int> ) ; printf ( <str> , nMinCost ) ; nTestCases -- ; } return <int> ; }", "label": 1, "id": 4620}
{"input": "int main ( void ) { int i , a , b , c , d , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( i = <int> ; i < a ; i ++ ) if ( ( a % i ) || ( b % i ) == <int> ) c = i ; } else if ( b > a ) { for ( i = <int> ; i < b ; i ++ ) if ( ( a % i ) || ( b % i ) == <int> ) c = i ; } d = a * b ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 1, "id": 4621}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { long int x , y , g , lcm , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x , & y ) ; g = gcd ( x , y ) ; lcm = ( x * y ) / g ; printf ( <str> , g , lcm ) ; } return <int> ; } long int gcd ( long int a , long int b ) { if ( a > b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; } else if ( b % a == <int> ) return a ; else return gcd ( a , b % a ) ; }", "label": 0, "id": 4622}
{"input": "long int a [ <int> ] ; main ( ) { long int t , n , i , c , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } c = min * ( n - <int> ) ; printf ( <str> , c ) ; } }", "label": 0, "id": 4623}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int t ; if ( a >= b ) t = b ; else t = a ; int i , hcf = <int> ; for ( i = t ; i > <int> ; i -- ) { if ( ( a % t == <int> ) && ( b % t == <int> ) ) { hcf = t ; break ; } } printf ( <str> , hcf ) ; printf ( <str> , <int> ) ; printf ( <str> , ( a * b ) / hcf ) ; } return <int> ; }", "label": 2, "id": 4624}
{"input": "int main ( ) { int rounds ; scanf ( <str> , & rounds ) ; for ( ; rounds > <int> ; rounds -- ) { int n , n1 ; int i , temp = <int> , max ; int num [ <int> ] [ <int> ] = { ( <int> , <int> ) } , ans [ <int> ] ; scanf ( <str> , & n ) ; n1 = n ; for ( ; n > <int> ; n -- ) { i = temp ; for ( ; i >= <int> ; i -- ) { scanf ( <str> , & num [ temp ] [ temp - i ] ) ; } temp ++ ; } ans [ <int> ] = num [ <int> ] [ <int> ] ; for ( i = <int> ; i < n1 ; i ++ ) { for ( n = <int> ; n <= i ; n ++ ) { if ( n == i ) { num [ i ] [ n ] += num [ i - <int> ] [ n - <int> ] ; break ; } if ( n == <int> ) { num [ i ] [ <int> ] += num [ i - <int> ] [ <int> ] ; break ; } if ( num [ i ] [ n ] + num [ i - <int> ] [ n - <int> ] > num [ i ] [ n ] + num [ i - <int> ] [ n ] ) num [ i ] [ n ] = num [ i ] [ n ] + num [ i - <int> ] [ n - <int> ] ; else num [ i ] [ n ] = num [ i ] [ n ] + num [ i - <int> ] [ n - <int> ] ; } } max = num [ n1 - <int> ] [ <int> ] ; for ( i = <int> ; i < n1 ; i ++ ) { if ( max < num [ n1 - <int> ] [ i ] ) max = num [ n1 - <int> ] [ i ] ; } printf ( <str> , max + num [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4625}
{"input": "int main ( ) { int t , b , a , i , s , g = <int> , l = <int> , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) s = a ; else s = b ; for ( j = <int> ; j <= s ; j ++ ) { if ( a % j == <int> && b % j == <int> ) g = j ; } for ( j = s ; j <= ( a * b ) ; j = j + s ) { if ( j % a == <int> && j % b == <int> ) { l = j ; break ; } } printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 4626}
{"input": "int main ( ) { long long int n , x , a ; int i , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & x ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < x ) a = x ; } printf ( <str> , a * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 4627}
{"input": "int * * arr ; int * * dp ; int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; arr = ( int * * ) malloc ( sizeof ( int * ) * n ) ; dp = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = <int> ; i < n ; i ++ ) { arr [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; dp [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; dp [ i ] [ j ] = <int> ; } } dp [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) dp [ i ] [ j ] = dp [ i - <int> ] [ j ] + arr [ i ] [ j ] ; else if ( j == i ) dp [ i ] [ j ] = dp [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ; else dp [ i ] [ j ] = max ( dp [ i - <int> ] [ j ] , dp [ i - <int> ] [ j - <int> ] ) + arr [ i ] [ j ] ; } } int maxi = dp [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( dp [ n - <int> ] [ i ] > maxi ) maxi = dp [ n - <int> ] [ i ] ; } printf ( <str> , maxi ) ; } return <int> ; }", "label": 0, "id": 4628}
{"input": "void print ( long long x , long long y ) { long long lcm , hcf ; if ( x > y ) x ^= y ^= x ^= y ; for ( long long a = x ; a >= <int> ; a -- ) { if ( y % a == <int> && x % a == <int> ) { hcf = a ; break ; } } lcm = x * y / hcf ; printf ( <str> , hcf , lcm ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int x , y ; scanf ( <str> , & x , & y ) ; print ( x , y ) ; } }", "label": 2, "id": 4629}
{"input": "int main ( ) { int T , A , B , i , j , LCM , GCD , s ; scanf ( <str> , & T ) ; while ( T > <int> ) { s = <int> ; scanf ( <str> , & A , & B ) ; for ( i = A * B ; i > <int> ; i -- ) if ( i % A == <int> && i % B == <int> ) LCM = i ; if ( A % B != <int> && B % A != <int> ) GCD = <int> ; else { for ( i = <int> ; i < <int> ; i ++ ) if ( A % i == <int> && B % i == <int> ) GCD = i ; } printf ( <str> , GCD , LCM ) ; T -- ; } return <int> ; }", "label": 2, "id": 4630}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int calcsum ( int arr [ ] , int <unk> , int n , int <unk> , int currentrow , int sum ) { if ( currentrow == n ) { sum = sum + <unk> ; return sum ; } sum = sum + arr [ <unk> - <int> ] + max ( calcsum ( arr , <unk> , n , <unk> + currentrow , currentrow + <int> , sum ) , calcsum ( arr , <unk> , n , <unk> + currentrow + <int> , currentrow + <int> , sum ) ) ; } int main ( ) { int t ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int <unk> = ( n * ( n + <int> ) ) / <int> ; int i , arr [ <unk> ] ; for ( i = <int> ; i < <unk> ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int maxsum = <int> ; maxsum = calcsum ( arr , <unk> , n , <int> , <int> , <int> ) ; printf ( <str> , maxsum ) ; } return <int> ; }", "label": 1, "id": 4631}
{"input": "unsigned long compute ( unsigned long count ) ; unsigned long C ( unsigned long n , unsigned long r ) ; int main ( ) { int m , t ; scanf ( <str> , & t ) ; char * <unk> = NULL ; unsigned long ch = EOF ; <unk> = ( char * ) malloc ( sizeof ( char ) ) ; unsigned long count = <int> ; unsigned long answer = <int> ; for ( m = <int> ; m < t ; m ++ ) { count = <int> ; answer = <int> ; ch = EOF ; while ( <int> ) { ch = getc ( stdin ) ; if ( ch != <char> ) { if ( ch != <int> ) { if ( ( ch - <int> ) > atoi ( <unk> ) ) { <unk> [ <int> ] = ch ; count ++ ; } else { answer += compute ( count ) ; <unk> [ <int> ] = ch ; count = <int> ; } } } else { answer += compute ( count ) ; <unk> [ <int> ] = <int> ; break ; } } printf ( <str> , answer ) ; } return <int> ; } unsigned long compute ( unsigned long count ) { unsigned long i , total = <int> ; for ( i = <int> ; i <= count ; i ++ ) { total += C ( count , i ) ; } return total ; } unsigned long C ( unsigned long n , unsigned long r ) { if ( r > n / <int> ) r = n - r ; unsigned long ans = <int> ; unsigned long i ; for ( i = <int> ; i <= r ; i ++ ) { ans *= n - r + i ; ans /= i ; } return ans ; }", "label": 1, "id": 4632}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long n ; scanf ( <str> , & n ) ; long long i , min , q ; scanf ( <str> , & q ) ; min = q ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & q ) ; if ( q < min ) { min = q ; } } long long s ; s = min * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 4633}
{"input": "int main ( ) { int i , n , a , b , lcm , gcd ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; { for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4634}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t ) { int a [ <int> ] [ <int> ] , i , j , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 4635}
{"input": "int main ( ) { int n , a , b , i , gcd , min , lcm ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; min = a > b ? a : b ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4636}
{"input": "int fastinput ( ) { char c = <int> ; int input = <int> ; while ( c < <int> ) c = getchar ( ) ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar ( ) ; } return ( int ) input ; } int main ( void ) { int a [ <int> ] [ <int> ] , b [ <int> ] , i , j , n , t , x ; t = fastinput ( ) ; for ( x = <int> ; x < t ; x ++ ) b [ x ] = fastinput ( ) ; for ( x = <int> ; x < t ; x ++ ) { for ( i = <int> ; i < b [ x ] ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = fastinput ( ) ; for ( i = b [ x ] - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4637}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n ; i > <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i - <int> ] [ j ] += ( ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4638}
{"input": "int main ( ) { int i , j , k , t , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; int s = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; s = s + a [ i ] [ j ] ; } } printf ( <str> , s / <int> ) ; } return <int> ; }", "label": 1, "id": 4639}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , i , a , b , c ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; c = a * b ; printf ( <str> , gcd ( a , b ) ) ; printf ( <str> , c / gcd ( a , b ) ) ; } } int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; }", "label": 1, "id": 4640}
{"input": "void longest_path ( ) { int n , a [ <int> ] , i , j , k , l , max ; scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; for ( l = <int> ; l < n ; l ++ ) { int l = i ; for ( k = <int> ; k <= l ; k ++ ) { scanf ( <str> , & a [ i ] ) ; for ( j = <int> ; j < i ; j ++ ) { if ( j == k || j == ( k - <int> ) ) if ( ( a [ i ] + a [ j ] ) > a [ i ] ) a [ i ] += a [ j ] ; } i ++ ; } for ( j = l ; j < i ; j ++ ) { a [ j - l ] = a [ j ] ; a [ j ] = <int> ; } } max = a [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) if ( max < a [ i ] ) max = a [ i ] ; printf ( <str> , max ) ; } void main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) longest_path ( ) ; }", "label": 3, "id": 4641}
{"input": "int main ( void ) { int t ; long i , n , x , temp ; long long sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = <int> ; x = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < x ) x = temp ; } sum = ( long long int ) ( n - <int> ) * ( long long int ) x ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 4642}
{"input": "int main ( void ) { int t , i , j , n , k ; scanf ( <str> , & t ) ; for ( j = <int> ; j <= t ; j ++ ) { scanf ( <str> , & n ) ; int ar [ n ] ; int c = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; } for ( i = <int> , k = <int> ; i < n ; i ++ , k ++ ) { if ( ar [ k ] < ar [ i - <int> ] ) { c += ar [ k ] ; k -- ; } else c += ar [ i - <int> ] ; } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 4643}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int gcd ( int a , int b ) { if ( a == b ) return b ; if ( a % b == <int> ) return b ; if ( b % a == <int> ) return b ; if ( a > b ) return ( gcd ( a % b , b ) ) ; return ( gcd ( a , b % a ) ) ; } int lcm ( int a , int b ) { int l ; for ( l = ( a > b ? a : b ) ; l < a * b ; l = l + ( a > b ? a : b ) ) if ( l % a == <int> && l % b == <int> ) break ; return ( l ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) ) ; printf ( <str> , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 4644}
{"input": "main ( ) { long int a [ <int> ] , min , t , s , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( <str> , min ) ; } return <int> ; }", "label": 1, "id": 4645}
{"input": "void main ( ) { int i , n , j , sum = <int> , t ; int * ptr ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; ptr = malloc ( n * sizeof ( n ) ) ; for ( j = <int> ; j <= n ; j ++ ) { scanf ( <str> , ptr + j ) ; } j = <int> ; while ( j != ( n ) ) { if ( ptr + j > ptr + j + <int> ) { * ( ptr + j ) = * ( ptr + j ) ; sum = sum + ( * ( ptr + j + <int> ) ) ; } else { * ( ptr + j + <int> ) = * ( ptr + j ) ; sum = sum + ( * ( ptr + j + <int> ) ) ; } j ++ ; } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 4646}
{"input": "typedef unsigned long long ll ; int main ( ) { int t , n , a , i , min = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; min = ( min < a ? min : a ) ; } printf ( <str> , ( ll ) min * ( ll ) ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 4647}
{"input": "long long int gcd ( long long int a , long long int b ) ; int main ( ) { int T , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { long long int A , B , C ; scanf ( <str> , & A , & B ) ; if ( A < B ) { A = A + B ; B = A - B ; A = A - B ; } C = gcd ( A , B ) ; printf ( <str> , C , ( A / C ) * B ) ; } return <int> ; } long long int gcd ( long long int a , long long int b ) { long long int rem ; rem = a % b ; if ( rem == <int> ) return b ; else return ( gcd ( b , rem ) ) ; }", "label": 0, "id": 4648}
{"input": "int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int main ( ) { int t , n , max , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) b [ i ] [ j ] = <int> ; } scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] + b [ i ] [ j ] > b [ i + <int> ] [ j ] ) b [ i + <int> ] [ j ] = a [ i + <int> ] [ j ] + b [ i ] [ j ] ; if ( a [ i + <int> ] [ j + <int> ] + b [ i ] [ j ] > b [ i + <int> ] [ j + <int> ] ) b [ i + <int> ] [ j + <int> ] = a [ i + <int> ] [ j ] + b [ i ] [ j ] ; } } max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( max < b [ n - <int> ] [ i ] ) max = b [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4649}
{"input": "int main ( ) { int n , i = <int> ; int arr [ <int> ] [ <int> ] ; for ( scanf ( <str> , & n ) ; i < n ; i ++ ) { int m , j = <int> , max = <int> ; for ( scanf ( <str> , & m ) ; j < m ; j ++ ) { int k ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; if ( j > <int> ) { int tmp2 = <int> ; int tmp = arr [ j ] [ k ] + arr [ j - <int> ] [ k ] ; if ( k > <int> ) { tmp2 = arr [ j ] [ k ] + arr [ j - <int> ] [ k - <int> ] ; } arr [ j ] [ k ] = ( tmp2 > tmp ) ? tmp2 : tmp ; } if ( j == m - <int> && arr [ j ] [ k ] > max ) { max = arr [ j ] [ k ] ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4650}
{"input": "int main ( ) { int t , cost , i , n , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) if ( a [ i ] < a [ i + <int> ] ) { cost = cost + a [ i ] ; a [ i + <int> ] = a [ i ] ; } else { cost = cost + a [ i + <int> ] ; a [ i + <int> ] = a [ i + <int> ] ; } printf ( <str> , cost ) ; cost = <int> ; } return <int> ; }", "label": 3, "id": 4651}
{"input": "int main ( ) { int t , input [ <int> ] [ <int> ] , n , i , j , s , s1 ; scanf ( <str> , & t ) ; int res [ t ] , k = <int> ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & input [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { s = input [ i ] [ j ] + input [ i - <int> ] [ j ] ; s1 = input [ i ] [ j + <int> ] + input [ i - <int> ] [ j ] ; if ( s >= s1 ) input [ i - <int> ] [ j ] = s ; else input [ i - <int> ] [ j ] = s1 ; } } res [ k ++ ] = input [ <int> ] [ <int> ] ; } i = <int> ; while ( i < k ) { printf ( <str> , res [ i ] ) ; i = i + <int> ; } return <int> ; }", "label": 0, "id": 4652}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , min = <int> , i , cost ; scanf ( <str> , & n ) ; long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] <= min ) min = arr [ i ] ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } }", "label": 0, "id": 4653}
{"input": "int main ( ) { int t ; long long int n , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4654}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , r , i , j , gr ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i <= r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) gr = a [ i + <int> ] [ j ] ; else gr = a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = a [ i ] [ j ] + gr ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4655}
{"input": "typedef struct triangle_ { int elements [ <int> ] ; int tam ; } triangle ; void sum_last_triangle ( triangle * t ) { int i , max , tindex , rindex ; tindex = t -> tam * ( t -> tam - <int> ) / <int> ; t -> tam -- ; rindex = t -> tam * ( t -> tam - <int> ) / <int> ; for ( i = <int> ; i < t -> tam ; i ++ ) { max = t -> elements [ i + tindex ] > t -> elements [ i + tindex + <int> ] ? t -> elements [ i + tindex ] : t -> elements [ i + tindex + <int> ] ; t -> elements [ i + rindex ] += max ; } } int max_sum_triangle ( triangle t ) { int result ; while ( t <fp> tam >= <int> ) { sum_last_triangle ( & t ) ; } result = ( t <fp> elements [ <int> ] > t <fp> elements [ <int> ] ) ? t <fp> elements [ <int> ] : t <fp> elements [ <int> ] ; result += t <fp> elements [ <int> ] ; return result ; } void test ( ) { int i , tam ; triangle t ; scanf ( <str> , & t <fp> tam ) ; tam = t <fp> tam ; for ( i = <int> ; i < tam * ( tam + <int> ) / <int> ; i ++ ) { scanf ( <str> , & t <fp> elements [ i ] ) ; } printf ( <str> , max_sum_triangle ( t ) ) ; } int main ( ) { int testcases , i ; scanf ( <str> , & testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) { test ( ) ; } return <int> ; }", "label": 0, "id": 4656}
{"input": "int main ( ) { int num , * * ptr , i , j , n ; scanf ( <str> , & num ) ; for ( ; num ; num -- ) { scanf ( <str> , & n ) ; ptr = ( int * * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { ptr [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ptr [ i ] [ j ] ) ; } for ( i = n - <int> ; i ; i -- ) { for ( j = i ; j ; j -- ) { ptr [ i - <int> ] [ j - <int> ] += MAX ( ptr [ i ] [ j ] , ptr [ i ] [ j - <int> ] ) ; } } printf ( <str> , ptr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4657}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , min , max , rem ; scanf ( <str> , & a , & b ) ; min = a < b ? a : b ; max = a > b ? a : b ; while ( min != <int> ) { rem = max % min ; max = min ; min = rem ; } printf ( <str> , max , a * b / max ) ; } return <int> ; }", "label": 1, "id": 4658}
{"input": "int tree [ <int> ] ; unsigned long sum [ <int> ] ; int n ; unsigned long find_sum ( int i , int j ) { int l , r , c ; c = cal ( i ) + j ; if ( c >= n ) return <int> ; if ( sum [ c ] != - <int> ) return sum [ c ] ; l = find_sum ( i + <int> , j ) ; r = find_sum ( i + <int> , j + <int> ) ; return sum [ c ] = tree [ c ] + ( l > r ? l : r ) ; } int main ( int argc , char const * argv [ ] ) { int i , j , T ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; ++ j ) { scanf ( <str> , & n ) ; n = cal ( n ) ; for ( i = <int> ; i < n ; ++ i ) scanf ( <str> , & tree [ i ] ) ; for ( i = <int> ; i < n ; ++ i ) sum [ i ] = - <int> ; printf ( <str> , find_sum ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 4659}
{"input": "int main ( ) { int num , prevnum = - <int> , t , n , cursize = <int> , i ; long long count = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; cursize = <int> ; for ( i = <int> ; i < n ; ++ i ) { scanf ( <str> , & num ) ; count ++ ; if ( num >= prevnum ) { count += cursize ; cursize ++ ; } else { cursize = <int> ; } prevnum = num ; } printf ( <str> , count ) ; } }", "label": 1, "id": 4660}
{"input": "Merge_Sort ( int a [ ] , int p , int r ) { int q , i ; if ( p < r ) { q = ( p + r ) / <int> ; Merge_Sort ( a , p , q ) ; Merge_Sort ( a , q + <int> , r ) ; Merge ( a , p , q , r ) ; } } Merge ( int a [ ] , int p , int q , int r ) { int n1 , n2 , i , j , k , t1 , k1 ; n1 = q - p + <int> ; n2 = r - q ; int L [ n1 ] ; int R [ n2 ] ; for ( i = <int> ; i <= n1 ; i ++ ) L [ i ] = a [ p + i - <int> ] ; for ( j = <int> ; j <= n2 ; j ++ ) R [ j ] = a [ q + j ] ; i = <int> ; j = <int> ; for ( k = p ; k <= r ; k ++ ) { if ( L [ i ] <= R [ j ] ) { a [ k ] = L [ i ] ; i ++ ; if ( i > q ) { t1 = <int> ; break ; } } else { a [ k ] = R [ j ] ; j ++ ; if ( ( j + q ) > r ) { t1 = <int> ; break ; } } } if ( t1 == <int> ) { for ( k1 = k + <int> ; k1 <= r ; k1 ++ ) { a [ k1 ] = R [ j ] ; j ++ ; } } else { for ( k1 = k + <int> ; k1 <= r ; k1 ++ ) { a [ k1 ] = L [ i ] ; i ++ ; } } } int main ( void ) { int t , i ; int n ; long long int ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( n == <int> ) printf ( <str> , a [ <int> ] ) ; else { Merge_Sort ( a , <int> , n ) ; ans = ( long long ) a [ <int> ] * ( long long ) ( n - <int> ) ; printf ( <str> , ans ) ; } } return <int> ; }", "label": 2, "id": 4661}
{"input": "int main ( ) { int t , i ; long long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int g = <int> ; long long int l = <int> ; if ( a > b ) { for ( i = <int> ; i <= ( a / <int> ) ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = g * i ; } } else { for ( i = <int> ; i <= ( b / <int> ) ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = g * i ; } } l = ( ( a * b ) / g ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 4662}
{"input": "long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; else return gcd ( a , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , hcf , lcm ; scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 4663}
{"input": "int main ( ) { int t , gcd , lcm , i , j , a , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a * b ; int r [ c ] ; for ( i = <int> ; i <= a * b ; i ++ ) { if ( ( i % a == <int> ) && ( i % b == <int> ) ) { r [ c ] = i ; } if ( ( a % j == <int> ) && ( b % j == <int> ) ) { gcd = i ; } } printf ( <str> , gcd , r [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4664}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int a , b , n , m , i , gcd ; while ( t -- ) { scanf ( <str> , & n , & m ) ; a = n ; b = m ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n * m ) / a ) ; } return <int> ; }", "label": 1, "id": 4665}
{"input": "int main ( ) { int i , j , k , n , c , m , l , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; int a [ m ] ; for ( j = <int> ; j < m ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } b = a [ <int> ] ; for ( j = <int> ; j < m - <int> ; j ++ ) { if ( b < a [ j + <int> ] ) { c = b ; b = a [ j + <int> ] ; } if ( b > a [ j + <int> ] ) { c = a [ j + <int> ] ; } } printf ( <str> , c ) ; } }", "label": 1, "id": 4666}
{"input": "long int gcd ( long int a , long int b ) { long int temp ; if ( a % b == <int> ) return b ; else { temp = b ; b = a % b ; a = temp ; gcd ( a , b ) ; } } int main ( void ) { long int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 4667}
{"input": "main ( ) { int n , i , j , x , s = <int> , max = - <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j < x ; j ++ ) a [ i ] [ j ] = <int> ; } for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( j = <int> ; j < x ; j ++ ) { s = <int> ; for ( i = <int> ; i < x ; i ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) s = s + a [ i ] [ j + <int> ] ; else { s = s + a [ i ] [ j ] ; } printf ( <str> , s ) ; } printf ( <str> , s ) ; if ( s > max ) max = s ; } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 4668}
{"input": "long long int gcd ( long long int a , int b ) ; int main ( void ) { long long int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } long long int gcd ( long long int a , int b ) { if ( a == <int> || b == <int> ) { return <int> ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; }", "label": 0, "id": 4669}
{"input": "int gcd ( long a , long b ) ; int main ( ) { int t , i ; long int a , b , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( long a , long b ) { if ( b == <int> ) return a ; else gcd ( b , a % b ) ; }", "label": 0, "id": 4670}
{"input": "int solution [ <int> ] [ <int> ] ; int findpathsum ( int triangle [ ] [ <int> ] , int i , int j ) { int val1 , val2 ; if ( triangle [ i ] [ j ] == - <int> ) return <int> ; if ( solution [ i + <int> ] [ j ] == - <int> ) { val1 = findpathsum ( triangle , i + <int> , j ) ; solution [ i + <int> ] [ j ] = val1 ; } else { val1 = solution [ i + <int> ] [ j ] ; } if ( solution [ i + <int> ] [ j + <int> ] == - <int> ) { val2 = findpathsum ( triangle , i + <int> , j + <int> ) ; solution [ i + <int> ] [ j + <int> ] = val2 ; } else { val2 = solution [ i + <int> ] [ j + <int> ] ; } if ( val1 > val2 ) return triangle [ i ] [ j ] + val1 ; else return triangle [ i ] [ j ] + val2 ; } int main ( ) { int nt , nr ; int i , j , k ; int triangle [ <int> ] [ <int> ] ; int sol [ <int> ] , sol_i ; sol_i = <int> ; scanf ( <str> , & nt ) ; for ( i = <int> ; i < nt ; i ++ ) { scanf ( <str> , & nr ) ; for ( j = <int> ; j < nr ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & triangle [ j ] [ k ] ) ; solution [ j ] [ k ] = - <int> ; } } for ( k = <int> ; k <= j ; k ++ ) triangle [ j ] [ k ] = - <int> ; sol [ sol_i ++ ] = findpathsum ( triangle , <int> , <int> ) ; } for ( i = <int> ; i < sol_i ; i ++ ) printf ( <str> , sol [ i ] ) ; return <int> ; }", "label": 0, "id": 4671}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b [ <int> ] , i ; scanf ( <str> , & a ) ; for ( i = <int> ; i <= a ; i ++ ) { scanf ( <str> , & b [ i ] ) ; } long long int min , s = <int> ; min = b [ <int> ] ; for ( i = <int> ; i <= a ; i ++ ) { if ( min > b [ i ] ) min = b [ i ] ; s = s + min ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 4672}
{"input": "int main ( ) { int testcase ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { int a , b , i , gcd , lcm ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4673}
{"input": "void read ( int [ <int> ] [ <int> ] , int ) ; void higest ( int [ <int> ] [ <int> ] , int ) ; int main ( ) { int n , l , i ; scanf ( <str> , & l ) ; int a [ <int> ] [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) { scanf ( <str> , & n ) ; read ( a , n ) ; higest ( a , n ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } void read ( int a [ <int> ] [ <int> ] , int n ) { int i , j ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } void higest ( int a [ <int> ] [ <int> ] , int n ) { int i , j ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; }", "label": 3, "id": 4674}
{"input": "int main ( ) { int T , i = <int> , A , B , GCD [ <int> ] , LCM [ <int> ] , small , j ; scanf ( <str> , & T ) ; if ( T <= <int> && T >= <int> ) { while ( <int> ) { scanf ( <str> , & A , & B ) ; if ( A <= <int> && B <= <int> && B >= <int> && A >= <int> ) { small = A < B ? A : B ; for ( j = small ; j >= <int> ; j -- ) { if ( A % j == <int> && B % j == <int> ) { GCD [ i ] = j ; break ; } else continue ; } LCM [ i ] = ( A * B ) / ( GCD [ i ] ) ; i ++ ; if ( i == T ) break ; } } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , GCD [ i ] , LCM [ i ] ) ; } return <int> ; }", "label": 1, "id": 4675}
{"input": "int main ( ) { int t , i , a [ <int> ] [ <int> ] , n , j , k , sum , x , y ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } sum = a [ <int> ] [ <int> ] ; x = <int> ; y = <int> ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ x + <int> ] [ y ] > a [ x + <int> ] [ y + <int> ] ) { sum = sum + a [ x + <int> ] [ y ] ; x = x + <int> ; y = y ; } else if ( a [ x + <int> ] [ y ] < a [ x + <int> ] [ y + <int> ] ) { sum = sum + a [ x + <int> ] [ y + <int> ] ; x = x + <int> ; y = y + <int> ; } } if ( a [ x + <int> ] [ y ] > a [ x + <int> ] [ y + <int> ] ) sum = sum + a [ x + <int> ] [ y ] ; else if ( a [ x + <int> ] [ y ] < a [ x + <int> ] [ y + <int> ] ) sum = sum + a [ x + <int> ] [ y + <int> ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4676}
{"input": "main ( ) { int no , count = <int> , pos , pos2 , * results , * arr = ( int ) malloc ( <int> ) ; short int i , j , rows ; scanf ( <str> , & no ) ; results = ( int ) malloc ( <int> * no ) ; while ( no ) { scanf ( <str> , & rows ) ; realloc ( arr , ( rows * ( rows + <int> ) ) ) ; for ( i = <int> ; i < rows ; ++ i ) { pos = ( i * ( i + <int> ) ) >> <int> ; for ( j = <int> ; j <= i ; ++ j , ++ pos ) scanf ( <str> , & arr [ pos ] ) ; } for ( i = rows - <int> ; i >= <int> ; -- i ) { pos = ( i * ( i + <int> ) ) >> <int> ; pos2 = pos - i ; for ( j = <int> ; j < i ; ++ j , ++ pos , ++ pos2 ) arr [ pos2 ] += arr [ pos ] > arr [ pos + <int> ] ? arr [ pos ] : arr [ pos + <int> ] ; } results [ count ++ ] = * arr ; -- no ; } for ( i = <int> ; i < count ; ++ i ) printf ( <str> , results [ i ] ) ; }", "label": 3, "id": 4677}
{"input": "long int cmpfunc ( const void * a , const void * b ) { return ( * ( long int * ) a - * ( long int * ) b ) ; } int main ( ) { int T , i ; long int A [ <int> ] , N ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & A [ i ] ) ; qsort ( A , N , sizeof ( int ) , cmpfunc ) ; printf ( <str> , ( A [ <int> ] * ( N - <int> ) ) ) ; T -- ; } return <int> ; }", "label": 1, "id": 4678}
{"input": "long int gcd ( int n1 , int n2 ) { if ( n2 == <int> ) return n1 ; else return gcd ( n2 , n1 % n2 ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n1 , n2 ; scanf ( <str> , & n1 , & n2 ) ; long int res = gcd ( n1 , n2 ) ; long int res1 = ( n1 * n2 ) / res ; printf ( <str> , res , res1 ) ; } return <int> ; }", "label": 0, "id": 4679}
{"input": "int main ( ) { long long int n , max , z , i , t ; long long int ans ; scanf ( <str> , & t ) ; while ( t -- ) { ans = <int> ; max = LLONG_MAX ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & z ) ; if ( max > z ) { max = z ; } } ans = max * ( n - <int> ) ; printf ( <str> , ans ) ; } }", "label": 0, "id": 4680}
{"input": "int a [ <int> ] [ <int> ] , line ; int * max ( int * i , int * j ) ; int main ( ) { int cas , i , j , k , * ptr , * val ; scanf ( <str> , & cas ) ; for ( i = <int> ; i < cas ; i ++ ) { scanf ( <str> , & line ) ; for ( j = <int> ; j < line ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = line ; j > <int> ; j -- ) { for ( k = <int> ; k <= j - <int> ; k ++ ) { a [ j - <int> ] [ k ] += ( a [ j - <int> ] [ k ] + a [ j - <int> ] [ k + <int> ] ) ; } } a [ <int> ] [ <int> ] -= ( a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; ptr = & a [ <int> ] [ <int> ] ; for ( j = <int> ; j < line ; j ++ ) { val = ptr ; ptr = max ( ( ptr + <int> ) , ( ptr + <int> ) ) ; * ptr += * val ; } printf ( <str> , * ptr ) ; } return <int> ; } int * max ( int * i , int * j ) { if ( * i >= * j ) { * i -= ( * ( i + <int> ) + * ( i + <int> ) ) ; return i ; } else if ( * j > * i ) { * j -= ( * ( j + <int> ) + * ( j + <int> ) ) ; return j ; } }", "label": 3, "id": 4681}
{"input": "int cal ( int a , int b ) { int i = <int> , c ; c = a ; while ( c % b != <int> ) { c = a * i ; i ++ ; } return c ; } int main ( ) { int t , lcm , gcd , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm = cal ( a , b ) ; gcd = ( a * b ) / lcm ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4682}
{"input": "int main ( ) { int t , t0 ; scanf ( <str> , & t ) ; for ( t0 = <int> ; t0 < t ; t0 ++ ) { int n , m , i , j , k = <int> ; scanf ( <str> , & n ) ; m = ( n * ( n + <int> ) ) / <int> ; int a [ m ] ; for ( i = <int> ; i < m ; i ++ ) { scanf ( <str> , a + i ) ; } j = n ; for ( i = m - <int> ; i > <int> ; i -- ) { k ++ ; if ( a [ i ] > a [ i - <int> ] ) { a [ i - j ] += a [ i ] ; } else a [ i - j ] += a [ i - <int> ] ; if ( k == j - <int> ) { k = <int> , j -- , i -- ; } } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4683}
{"input": "int main ( ) { int t , a , b , gcd , lcm , min ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; } else { min = a ; } for ( ; min >= <int> ; min -- ) { if ( a % min == <int> && b % min == <int> ) { gcd = min ; break ; } } printf ( <str> , gcd ) ; lcm = ( a * b ) / ( gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 4684}
{"input": "int main ( ) { int t , i ; long long int a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int temp ; long long int x = a , y = b ; while ( b ) { temp = a % b ; a = b ; b = temp ; } printf ( <str> , a ) ; printf ( <str> , ( x * y / a ) ) ; } return <int> ; }", "label": 1, "id": 4685}
{"input": "int main ( void ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { long int min = <int> ; scanf ( <str> , & n ) ; long int arr [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 4686}
{"input": "int main ( ) { int A [ <int> ] [ <int> ] , i , j , t , n , min ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } for ( i = <int> ; i < t ; i ++ ) { min = A [ i ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( A [ i ] [ j ] < min ) { min = A [ i ] [ j ] ; } } printf ( <str> , min ) ; } return <int> ; }", "label": 3, "id": 4687}
{"input": "int main ( ) { int t , m , m1 , n1 , n , gcd = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m , & n ) ; m1 = m , n1 = n ; while ( n1 != <int> ) { gcd = ( m1 % n1 ) ; m1 = n1 ; n1 = gcd ; } printf ( <str> , m1 , ( m * n ) / m1 ) ; } return <int> ; }", "label": 1, "id": 4688}
{"input": "main ( ) { int t = <int> ; int i = <int> , j = <int> ; int a = <int> , b = <int> ; int gcd = <int> , lcm = <int> ; int <unk> = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; } } <unk> = a * b ; for ( j = b ; j <= <unk> ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { lcm = j ; } } printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 4689}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , s , min ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } s = min * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 4690}
{"input": "void sums ( int arr [ <int> ] [ <int> ] , int n ) { int i , j ; for ( i = n ; i > <int> ; i -- ) { for ( j = n ; j > <int> ; j -- ) { arr [ i - <int> ] [ j - <int> ] += ( arr [ i ] [ j - <int> ] > arr [ i ] [ j ] ? arr [ i ] [ j - <int> ] : arr [ i ] [ j ] ) ; } } printf ( <str> , arr [ i ] [ j ] ) ; } int main ( ) { int arr [ <int> ] [ <int> ] , n , t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } sums ( arr , n ) ; } return <int> ; }", "label": 1, "id": 4691}
{"input": "int main ( ) { int t ; long long int divisor , dividend , a , b , product , rem ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; product = a * b ; if ( a > b ) { divisor = b ; dividend = a ; } else { divisor = a ; dividend = b ; } while ( divisor ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; } printf ( <str> , dividend , product / dividend ) ; } return <int> ; }", "label": 0, "id": 4692}
{"input": "int main ( void ) { int T , A , B , c , A1 , B1 ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A1 , & B1 ) ; A = A1 ; B = B1 ; while ( B ) { A = A % B ; A ^= B ^= A ^= B ; } printf ( <str> , A , A1 * ( B1 / A ) ) ; } return <int> ; }", "label": 1, "id": 4693}
{"input": "int main ( ) { int n , l , i , j , max ; int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { max = a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = a [ i ] [ j ] + max ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; n -- ; } return <int> ; }", "label": 0, "id": 4694}
{"input": "int a [ <int> ] [ <int> ] , line ; int max ( int * i , int * j ) ; int main ( ) { int cas , i , j , k , * ptr , val ; scanf ( <str> , & cas ) ; for ( i = <int> ; i < cas ; i ++ ) { scanf ( <str> , & line ) ; for ( j = <int> ; j < line ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = line ; j > <int> ; j -- ) { a [ <int> ] [ j - <int> ] += a [ <int> ] [ j ] ; a [ j - <int> ] [ j - <int> ] += a [ j ] [ j ] ; } for ( k = <int> , j = line ; k < line - <int> , j > <int> ; k ++ , j -- ) { a [ k - <int> ] [ j - <int> ] += a [ k ] [ j ] ; a [ k ] [ j - <int> ] += a [ k ] [ j ] ; } a [ <int> ] [ <int> ] -= ( a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; ptr = & a [ <int> ] [ <int> ] ; for ( j = <int> , k = <int> ; j < line , k < line ; j ++ , k ++ ) { * ptr += max ( & a [ j + <int> ] [ k ] , & a [ j + <int> ] [ k + <int> ] ) ; } val = * ptr ; printf ( <str> , val ) ; } return <int> ; } int max ( int * i , int * j ) { if ( * i >= * j ) { * i -= ( * ( i + line ) + * ( i + line + <int> ) ) ; return * i ; } else if ( * j > * i ) { j -= ( * ( j + line ) + * ( i + line + <int> ) ) ; return * j ; } }", "label": 3, "id": 4695}
{"input": "int main ( ) { int t , n , i , j , k , l , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k < i ; k ++ ) { if ( a [ i ] [ k ] < a [ i ] [ k + <int> ] ) l = <int> ; else l = <int> ; a [ i - <int> ] [ k ] = a [ i - <int> ] [ k ] + a [ i ] [ k + l ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4696}
{"input": "int main ( ) { int t , r , s = <int> , temp = <int> , i , j ; long int data [ <int> ] [ <int> ] , maxsum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & data [ i ] [ j ] ) ; } } for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { data [ i ] [ j ] = data [ i - <int> ] [ j ] + data [ i ] [ j ] ; } else { if ( ( data [ i ] [ j ] + data [ i - <int> ] [ j ] ) > ( data [ i ] [ j ] + data [ i - <int> ] [ j - <int> ] ) ) data [ i ] [ j ] = data [ i ] [ j ] + data [ i - <int> ] [ j ] ; else data [ i ] [ j ] = data [ i ] [ j ] + data [ i - <int> ] [ j - <int> ] ; } } } for ( i = r - <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( maxsum < data [ i ] [ j ] ) maxsum = data [ i ] [ j ] ; } } printf ( <str> , maxsum ) ; r = s = temp = maxsum = <int> ; } return <int> ; }", "label": 1, "id": 4697}
{"input": "int main ( ) { int n , lcm , gcd ; scanf ( <str> , & n ) ; for ( int j = <int> ; j <= n ; j ++ ) { int n1 , n2 ; scanf ( <str> , & n1 , & n2 ) ; for ( int i = <int> ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4698}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int i , a , <unk> = <int> , prev = <int> , n , count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( i == n - <int> && a > prev && n != <int> ) { count ++ ; break ; } if ( a > prev ) { <unk> = prev ; prev = a ; continue ; } if ( <unk> < prev ) count ++ ; <unk> = prev ; prev = a ; } count += n ; printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 4699}
{"input": "void out ( long int a , long int b , long int x ) { long int i ; long long int y , g = <int> ; for ( i = <int> ; i <= x ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) g = i ; } printf ( <str> , g ) ; y = ( a * b ) / g ; printf ( <str> , y ) ; } int main ( ) { long int n , x ; scanf ( <str> , & n ) ; long int i , a , b ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a >= b ) x = b ; else x = a ; out ( a , b , x ) ; } return <int> ; }", "label": 2, "id": 4700}
{"input": "int main ( ) { int t , n , i , j , arr , sum , largest ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = <int> ; for ( i = <int> ; i <= n ; i ++ ) { largest = - <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr ) ; if ( largest < arr ) largest = arr ; } printf ( <str> ) ; sum += largest ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 4701}
{"input": "int main ( ) { int t , n , count ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { count = <int> ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } while ( n != <int> ) { int x = <int> ; if ( arr [ <int> ] > arr [ <int> ] ) { count += arr [ <int> ] ; while ( x < n - <int> ) { arr [ x ] = arr [ x + <int> ] ; x ++ ; } n -- ; } else { count += arr [ <int> ] ; x = <int> ; while ( x < n - <int> ) { arr [ x ] = arr [ x + <int> ] ; x ++ ; } n -- ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 2, "id": 4702}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , k , i , j , l = <int> , sum = <int> ; scanf ( <str> , & n ) ; for ( j = n ; j > <int> ; j -- ) { for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & k ) ; sum = sum + k ; } l = l + sum ; } printf ( <str> , l / <int> ) ; } return <int> ; }", "label": 1, "id": 4703}
{"input": "int main ( ) { int a , b , gcd = <int> , f , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( ( a * b ) != <int> && ( a != b ) ) { for ( int i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } } f = ( a * b ) / gcd ; printf ( <str> , gcd , f ) ; } return <int> ; }", "label": 1, "id": 4704}
{"input": "main ( ) { int test , n , i , sum ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; int a [ n ] ; int ans [ n ] ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } ans [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] <= a [ i ] ) ans [ i ] = ans [ i - <int> ] + <int> ; else ans [ i ] = <int> ; sum += ans [ i ] ; } printf ( <str> , sum + <int> ) ; } }", "label": 0, "id": 4705}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int maxsum ( int a [ <int> ] [ <int> ] , int n , int r , int c , int sum ) ; int main ( ) { int t , i , j ; int n ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , maxsum ( a , n , <int> , <int> , a [ <int> ] [ <int> ] ) ) ; } return <int> ; } int maxsum ( int a [ <int> ] [ <int> ] , int n , int r , int c , int sum ) { if ( r >= n ) { return ( sum + <int> ) ; } else { return ( max ( maxsum ( a , n , r + <int> , c , ( sum + a [ r + <int> ] [ c ] ) ) , maxsum ( a , n , r + <int> , c + <int> , ( sum + a [ r + <int> ] [ c + <int> ] ) ) ) ) ; } }", "label": 2, "id": 4706}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , a [ <int> ] [ <int> ] = { <int> } , count = <int> , k = <int> ; scanf ( <str> , & n ) ; int row = <int> , coloumn = <int> , max = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( max < a [ i ] [ j ] ) { max = a [ i ] [ j ] ; row = i ; coloumn = j ; k = j ; } } } for ( i = row ; i >= <int> ; i -- ) { if ( coloumn == <int> || a [ i ] [ coloumn ] >= a [ i ] [ coloumn - <int> ] ) count = count + a [ i ] [ coloumn ] ; else { count = count + a [ i ] [ coloumn - <int> ] ; coloumn = coloumn - <int> ; } } for ( i = row + <int> ; i < n ; i ++ ) { if ( k == n - <int> || a [ i ] [ k ] >= a [ i ] [ k + <int> ] ) { count = count + a [ i ] [ k ] ; } else { count = count + a [ i ] [ k + <int> ] ; k = k + <int> ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 4707}
{"input": "int main ( ) { int c , t , n , sum = <int> , i , j ; scanf ( <str> , & t ) ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } scanf ( <str> , & c ) ; j = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) sum += a [ i ] [ j ] ; else if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) { sum += a [ i ] [ j + <int> ] ; j ++ ; } } printf ( <str> , sum ) ; scanf ( <str> , & c ) ; return <int> ; }", "label": 1, "id": 4708}
{"input": "int main ( ) { int T , N , a , b , i , j , c = <int> , x ; int A [ <int> ] ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( a = <int> ; a < T ; a ++ ) { scanf ( <str> , & N ) ; if ( N >= <int> && N <= <int> ) { x = N ; for ( b = <int> ; b < N ; b ++ ) { scanf ( <str> , & A [ b ] ) ; } for ( i = <int> ; i < N ; i ++ ) { if ( A [ i ] >= A [ i - <int> ] ) c ++ ; } x = x + c ; c = <int> ; } printf ( <str> , x ) ; } } return <int> ; }", "label": 1, "id": 4709}
{"input": "int main ( ) { long int a , b , x , y , t , gcd , lcm ; int s ; scanf ( <str> , & s ) ; for ( int i = <int> ; i < s ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 0, "id": 4710}
{"input": "int gcd ( int a , int b ) { int temp ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( void ) { int t ; int a , b , g , l ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 1, "id": 4711}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { long int m = <int> ; scanf ( <str> , & n ) ; long int arr [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < m ) m = arr [ i ] ; } printf ( <str> , ( m * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 4712}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; if ( n == <int> ) printf ( <str> ) ; else { int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int b [ n ] ; for ( i = <int> ; i < n ; i ++ ) b [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) b [ i ] = b [ i - <int> ] + <int> ; else b [ i ] = <int> ; } int sum = <int> ; for ( i = <int> ; i < n ; i ++ ) sum += b [ i ] ; printf ( <str> , sum ) ; } } return <int> ; }", "label": 0, "id": 4713}
{"input": "int main ( void ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int n , i , min ; int arr [ MAX ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min >= arr [ i ] ) min = arr [ i ] ; } int val = min * ( n - <int> ) ; printf ( <str> , val ) ; } return <int> ; }", "label": 0, "id": 4714}
{"input": "int max ( int * a , int i , int k ) { int j , l ; if ( a [ <int> ] == <int> ) return a [ <int> ] ; else if ( k < a [ <int> ] ) { j = ( j = max ( a , i + k , k + <int> ) ) > ( l = max ( a , i + k + <int> , k + <int> ) ) ? j : l ; return j + a [ i ] ; } else return <int> ; } int main ( ) { int a [ <int> ] , b [ <int> ] , i , t , j = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { t -- ; scanf ( <str> , & a [ <int> ] ) ; a [ <int> ] = a [ <int> ] * ( a [ <int> ] + <int> ) / <int> ; for ( i = <int> ; i <= a [ <int> ] ; i ++ ) scanf ( <str> , & a [ i ] ) ; b [ j ] = max ( a , <int> , <int> ) ; j ++ ; } for ( i = <int> ; i < j ; i ++ ) printf ( <str> , b [ i ] ) ; return <int> ; }", "label": 3, "id": 4715}
{"input": "int main ( ) { int t , i1 ; scanf ( <str> , & t ) ; for ( i1 = <int> ; i1 < t ; i1 ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int j = <int> , small , max = <int> ; if ( a > b ) small = b ; else small = a ; int lcm , <unk> = <int> ; if ( a == b ) printf ( <str> , a , b ) ; else if ( a == <int> || b == <int> ) printf ( <str> , <unk> , ( a * b ) ) ; else { for ( j = <int> ; j <= small ; j ++ ) { if ( a % j == <int> && b % j == <int> && j > max ) max = j ; } printf ( <str> , max , ( ( a * b ) / max ) ) ; } } return <int> ; }", "label": 1, "id": 4716}
{"input": "int main ( ) { int t , i , a , b , n1 , n2 , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 >= n2 ) { a = n1 ; b = n2 ; } else { a = n2 ; b = n1 ; } int j = b ; for ( j = b ; j > <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { g = j ; j = <int> ; } } for ( j = a ; j <= a * b ; j ++ ) { if ( j % a == <int> && ( j % b ) == <int> ) { l = j ; j = a * b + <int> ; } } printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 4717}
{"input": "int maxsum ( int i , int j , int * * a , int p ) { if ( i == p - <int> ) return a [ i ] [ j ] ; int s1 = maxsum ( i + <int> , j , a , p ) ; int s2 = maxsum ( i + <int> , j + <int> , a , p ) ; if ( s1 > s2 ) return a [ i ] [ j ] + s1 ; else return a [ i ] [ j ] + s2 ; } int main ( ) { int n , p , * * a , i , j , s ; scanf ( <str> , & n ) ; while ( n > <int> ) { s = <int> ; scanf ( <str> , & p ) ; a = ( int * * ) malloc ( p * sizeof ( int * ) ) ; for ( i = <int> ; i < p ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i < p ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; s = maxsum ( <int> , <int> , a , p ) ; printf ( <str> , s ) ; n -- ; } return <int> ; }", "label": 2, "id": 4718}
{"input": "int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; long int n , p ; long long int arr [ <int> ] , a ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } a = arr [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a > arr [ j ] ) { a = arr [ j ] ; } } printf ( <str> , a * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4719}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , arr [ <int> ] , smallest = <int> , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } smallest = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < smallest ) { smallest = arr [ i ] ; } } printf ( <str> , smallest * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4720}
{"input": "int main ( ) { int T , i , A , B , Q , R , j , k , product , LCM ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A >= <int> && A <= <int> && B >= <int> && B <= <int> ) { if ( A > B ) { product = A * B ; for ( j = <int> ; ; j ++ ) { Q = A / B ; R = A % B ; if ( R == <int> ) { break ; } A = B ; B = R ; } LCM = product / B ; printf ( <str> , B , LCM ) ; } else if ( B > A ) { product = A * B ; for ( k = <int> ; ; k ++ ) { Q = B / A ; R = B % A ; if ( R == <int> ) { break ; } B = A ; A = R ; } LCM = product / A ; printf ( <str> , A , LCM ) ; } } } } return <int> ; }", "label": 1, "id": 4721}
{"input": "int main ( ) { int t , n , i , j , k , c , s ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( j = n - <int> ; j >= <int> ; j -- ) { scanf ( <str> , & a [ j ] ) ; } for ( k = n - <int> ; k >= <int> ; k -- ) { if ( a [ k - <int> ] > a [ k ] ) { c = a [ k ] ; a [ k ] = a [ k - <int> ] ; a [ k - <int> ] = c ; } } s = a [ <int> ] * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 4722}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i , c = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) c ++ ; } c = c + n ; printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 4723}
{"input": "int main ( ) { int no , a , b ; scanf ( <str> , no ) ; while ( no ) { int gcd , lcm , x , y , temp ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { temp = y ; y = x % y ; x = temp ; } gcd = y ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; no -- ; } return <int> ; }", "label": 3, "id": 4724}
{"input": "long long gcd ( long long a , long long b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { long long t ; scanf ( <str> , & t ) ; while ( t -- ) { long long a , b , k ; scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; printf ( <str> , k , ( a * b ) / k ) ; } return <int> ; }", "label": 0, "id": 4725}
{"input": "int main ( void ) { int temp , cost , i , t , n , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; cost = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; temp = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( temp > a [ i ] ) temp = a [ i ] ; cost = cost + temp ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 3, "id": 4726}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j != <int> && j != i ) { if ( a [ i - <int> ] [ j ] >= a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } else if ( j == <int> && i != <int> ) a [ i ] [ j ] += a [ i - <int> ] [ <int> ] ; else if ( i == j && i != <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ <int> ] < a [ n - <int> ] [ i ] ) a [ n - <int> ] [ <int> ] = a [ n - <int> ] [ i ] ; } printf ( <str> , a [ n - <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4727}
{"input": "int main ( ) { int t , n , i , j ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4728}
{"input": "int main ( ) { long long int N , T , t , i , sum ; scanf ( <str> , & T ) ; for ( t = <int> ; t < T ; t ++ ) { scanf ( <str> , & N ) ; long long int * array = ( long long int * ) malloc ( sizeof ( long long int ) * N ) ; long long int * dp = ( long long int * ) malloc ( sizeof ( long long int ) * N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & array [ i ] ) ; dp [ i ] = <int> ; } sum = dp [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( array [ i ] >= array [ i - <int> ] ) { dp [ i ] = dp [ i - <int> ] + <int> ; } sum += dp [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 4729}
{"input": "int max_sum ; void calc_sum ( int * * arr , int * * sum , int i , int j , int running_sum , int size ) ; int main ( ) { int num_tests ; int n ; scanf ( <str> , & num_tests ) ; int * test_results = ( int * ) calloc ( num_tests , sizeof ( int ) ) ; int k = <int> ; while ( k != num_tests ) { int size ; scanf ( <str> , & size ) ; int * * tri_arr = ( int * * ) calloc ( size , sizeof ( int * ) ) ; int * * sum_arr = ( int * * ) calloc ( size , sizeof ( int * ) ) ; int i , j ; for ( i = <int> ; i != size ; ++ i ) { tri_arr [ i ] = ( int * ) calloc ( size , sizeof ( int ) ) ; sum_arr [ i ] = ( int * ) calloc ( size , sizeof ( int ) ) ; } int val ; int row , col ; for ( row = <int> ; row != size ; ++ row ) { for ( col = <int> ; col <= row ; ++ col ) { scanf ( <str> , & val ) ; tri_arr [ row ] [ col ] = val ; } } max_sum = <int> ; calc_sum ( tri_arr , sum_arr , <int> , <int> , <int> , size ) ; test_results [ k ] = max_sum ; for ( i = <int> ; i != size ; ++ i ) { free ( tri_arr [ i ] ) ; free ( sum_arr [ i ] ) ; } free ( tri_arr ) ; free ( sum_arr ) ; ++ k ; } for ( k = <int> ; k != num_tests ; ++ k ) { printf ( <str> , test_results [ k ] ) ; } free ( test_results ) ; return <int> ; } void calc_sum ( int * * arr , int * * sum , int i , int j , int running_sum , int size ) { int _sum_ = running_sum + arr [ i ] [ j ] ; if ( _sum_ > sum [ i ] [ j ] ) sum [ i ] [ j ] = _sum_ ; if ( _sum_ > max_sum ) max_sum = _sum_ ; if ( i == size - <int> ) return ; if ( j == size - <int> ) return ; calc_sum ( arr , sum , i + <int> , j , sum [ i ] [ j ] , size ) ; calc_sum ( arr , sum , i + <int> , j + <int> , sum [ i ] [ j ] , size ) ; }", "label": 2, "id": 4730}
{"input": "main ( ) { int i , j , a [ <int> ] [ <int> ] , b [ <int> ] , max , sum = <int> , n ; int T , k ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { max = a [ i ] [ <int> ] ; for ( j = <int> ; j < i + <int> ; j ++ ) { if ( max < a [ i ] [ j ] ) max = a [ i ] [ j ] ; } sum = sum + max ; } b [ k ] = sum ; sum = <int> ; } printf ( <str> ) ; for ( i = <int> ; i < T ; i ++ ) { b [ i ] = b [ i ] - a [ <int> ] [ <int> ] ; printf ( <str> , b [ i ] ) ; } }", "label": 1, "id": 4731}
{"input": "long long int gcd ( int a , int b ) { if ( b == <int> || a == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } main ( ) { int t , a , b ; long long int gcd1 , lcm1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd1 = gcd ( a , b ) ; lcm1 = lcm ( a , b ) ; printf ( <str> , gcd1 ) ; printf ( <str> ) ; printf ( <str> , lcm1 ) ; } }", "label": 1, "id": 4732}
{"input": "int u , v [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] ; int solve ( int i , int j ) { if ( i > u ) return <int> ; if ( cache [ i ] [ j ] > <int> ) return cache [ i ] [ j ] ; int t1 = solve ( i + <int> , j ) ; int t2 = solve ( i + <int> , j + <int> ) ; int t = ( ( t1 ) > ( t2 ) ? ( t1 ) : ( t2 ) ) + v [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int n , i , j , w ; scanf ( <str> , & n ) ; w = n ; int sum [ <int> ] ; int k = <int> ; while ( n -- ) { scanf ( <str> , & u ) ; for ( i = <int> ; i < u ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & v [ i ] [ j ] ) ; } for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) cache [ i ] [ j ] = <int> ; sum [ k ] += solve ( <int> , <int> ) ; k ++ ; } i = <int> ; while ( i < w ) { printf ( <str> , sum [ i ] ) ; i ++ ; } return <int> ; }", "label": 1, "id": 4733}
{"input": "int gcd ( int x , int y ) { if ( x == <int> || y == <int> ) { return <int> ; } if ( x == y ) { return x ; } if ( x > y ) { return gcd ( x - y , y ) ; } return gcd ( x , y - x ) ; } int main ( void ) { int t , a , b , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a == <int> || b == <int> ) { printf ( <str> ) ; } else { g = gcd ( a , b ) ; printf ( <str> , g ) ; printf ( <str> , ( a * b ) / g ) ; printf ( <str> ) ; } } return <int> ; }", "label": 1, "id": 4734}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test > <int> ) { long int i , j , n , count = <int> , a [ <int> ] , megacount = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } count = <int> ; for ( j = <int> ; j <= n ; j ++ ) { if ( a [ j ] >= a [ j - <int> ] ) { count ++ ; } else { megacount = megacount + ( ( count * ( count + <int> ) ) / <int> ) ; count = <int> ; } if ( j == n && a [ j ] >= a [ j - <int> ] ) { megacount = megacount + ( ( count * ( count + <int> ) ) / <int> ) ; } else if ( j == n && a [ j ] < a [ j - <int> ] ) megacount = megacount + <int> ; } if ( a [ <int> ] > a [ <int> ] ) megacount = megacount + <int> ; if ( n > <int> ) printf ( <str> , megacount ) ; else printf ( <str> ) ; test -- ; } return <int> ; }", "label": 1, "id": 4735}
{"input": "int main ( void ) { int t , a , b , hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } int gcd ( int x , int y ) { if ( y == <int> ) { return x ; } else { return gcd ( y , x % y ) ; } }", "label": 1, "id": 4736}
{"input": "int arr [ <int> ] [ <int> ] ; int main ( ) { int j , i , lines , cases , maxv ; scanf ( <str> , & cases ) ; int rem = cases % <int> ; int <unk> = cases / <int> ; for ( ; rem ; rem -- ) { scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; } for ( ; <unk> ; <unk> -- ) { scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; scanf ( <str> , & lines ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] ) ; arr [ i ] [ <int> ] += arr [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } maxv = arr [ lines ] [ <int> ] ; for ( i = <int> ; i <= lines ; i ++ ) if ( arr [ lines ] [ i ] > maxv ) maxv = arr [ lines ] [ i ] ; printf ( <str> , maxv ) ; } return <int> ; }", "label": 0, "id": 4737}
{"input": "int main ( ) { int t ; long a , b , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( a != b ) { if ( a > b ) { a -= b ; } else { b -= a ; } } printf ( <str> , a , ( x * y ) / a ) ; } }", "label": 0, "id": 4738}
{"input": "unsigned int t [ <int> ] [ <int> ] ; unsigned int tri [ <int> ] ; unsigned int r [ <int> ] [ <int> ] ; int count ; int main ( ) { unsigned int a , b , c , d , e , max , f ; count = <int> ; scanf ( <str> , & a ) ; for ( b = <int> ; b <= a ; b ++ ) { scanf ( <str> , & c ) ; if ( ( c > <int> ) && ( c < <int> ) ) { for ( d = <int> ; d <= c ; d ++ ) { for ( e = <int> ; e <= d ; e ++ ) { scanf ( <str> , & f ) ; if ( ( f > <int> ) && ( f < <int> ) ) t [ d ] [ e ] = f ; } } r [ <int> ] [ <int> ] = t [ <int> ] [ <int> ] ; for ( d = <int> ; d < c ; d ++ ) { for ( e = <int> ; e <= d ; e ++ ) { max = r [ d ] [ e ] + t [ d + <int> ] [ e ] ; if ( max > r [ d + <int> ] [ e ] ) { r [ d + <int> ] [ e ] = max ; if ( max > tri [ count ] ) tri [ count ] = max ; } max = r [ d ] [ e ] + t [ d + <int> ] [ e + <int> ] ; if ( max > r [ d + <int> ] [ e + <int> ] ) { r [ d + <int> ] [ e + <int> ] = max ; if ( max > tri [ count ] ) tri [ count ] = max ; } } } for ( d = <int> ; d <= c ; d ++ ) { for ( e = <int> ; e <= d ; e ++ ) { r [ d ] [ e ] = <int> ; } } count ++ ; } } for ( b = <int> ; b <= a ; b ++ ) printf ( <str> , tri [ b ] ) ; return <int> ; }", "label": 3, "id": 4739}
{"input": "int main ( ) { int a , b , rem = <int> , gcd , l , s , t ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a , & b ) ; l = a > b ? a : b ; s = a < b ? a : b ; while ( rem != <int> ) { rem = l % s ; if ( rem == <int> ) gcd = s ; l = s ; s = rem ; } printf ( <str> , gcd , a * b / gcd ) ; t -- ; gcd = <int> ; rem = <int> ; } return <int> ; }", "label": 3, "id": 4740}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int a , b , t , product , lcm ; while ( t -- ) { scanf ( <str> , & a , & b ) ; product = a * b ; a = gcd ( a , b ) ; lcm = product / a ; printf ( <str> , a , lcm ) ; t -- ; } } int gcd ( int a , int b ) { if ( ( a == <int> ) && ( b == <int> ) ) { return - <int> ; } if ( a == <int> ) { return b ; } else if ( b == <int> ) { return a ; } else { return gcd ( ( b % a ) , a ) ; } }", "label": 1, "id": 4741}
{"input": "int main ( ) { int t ; long long int n , i , ans , num ; long long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t ) { ans = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; num = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { num = num + <int> ; } else { ans += ( num * ( num + <int> ) ) / <int> ; num = <int> ; } } num -- ; ans += ( num * ( num + <int> ) ) / <int> ; printf ( <str> , ans ) ; t -- ; } return <int> ; }", "label": 3, "id": 4742}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , r = <int> , pdt = <int> , lcm = <int> , temp = <int> ; scanf ( <str> , & a , & b ) ; pdt = a * b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } while ( b != <int> ) { r = a % b ; a = b ; b = r ; } lcm = pdt / b ; printf ( <str> , b , lcm ) ; } }", "label": 3, "id": 4743}
{"input": "int main ( ) { int t , i , j , k , max ; int test_case [ <int> ] , arr [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int maxa [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & test_case [ i ] ) ; for ( j = <int> ; j < test_case [ i ] ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } b [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( j = <int> ; j < test_case [ i ] ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( k == <int> ) { b [ j ] [ k ] = arr [ j ] [ k ] + b [ j - <int> ] [ k ] ; } else { if ( arr [ j ] [ k ] + b [ j - <int> ] [ k - <int> ] > arr [ j ] [ k ] + b [ j - <int> ] [ k ] ) { b [ j ] [ k ] = arr [ j ] [ k ] + b [ j - <int> ] [ k - <int> ] ; } else { b [ j ] [ k ] = arr [ j ] [ k ] + b [ j - <int> ] [ k ] ; } } } } j = test_case [ i ] - <int> ; max = b [ j ] [ <int> ] ; for ( k = <int> ; k < j ; k ++ ) { if ( b [ j ] [ k ] > max ) { max = b [ j ] [ k ] ; } } maxa [ i ] = max ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , maxa [ i ] ) ; } return <int> ; }", "label": 1, "id": 4744}
{"input": "int mat [ <int> ] [ <int> ] ; void <unk> ( int i , int j , int n , int sum , int * max ) { if ( j >= n ) return ; if ( i >= n ) { if ( * max < sum ) * max = sum ; return ; } sum = sum + mat [ i ] [ j ] ; <unk> ( i + <int> , j , n , sum , max ) ; <unk> ( i + <int> , j + <int> , n , sum , max ) ; } int main ( ) { int testcase , n , i , sum = <int> , max = <int> , j , k ; scanf ( <str> , & testcase ) ; for ( i = <int> ; i < testcase ; i ++ ) { sum = <int> ; max = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < n ; k ++ ) { if ( k <= j ) scanf ( <str> , & mat [ j ] [ k ] ) ; else mat [ j ] [ k ] = <int> ; } } <unk> ( <int> , <int> , n , sum , & max ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 4745}
{"input": "int * * allocate2DArea ( int n ) { int * * ptr ; int i ; ptr = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { * ( ptr + i ) = ( int * ) malloc ( n * sizeof ( int ) ) ; } return ptr ; } void readTriangle ( int n , int * * multiarray ) { int i = <int> ; int j = <int> ; int num ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num ) ; multiarray [ i ] [ j ] = num ; } } } int findMax ( int a , int b ) { if ( a > b ) return a ; else return b ; } void calculateMultisum ( int n , int * * multiarray , int * * multisum ) { int row , col , max ; for ( row = <int> ; row < n ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { if ( row == <int> ) multisum [ <int> ] [ <int> ] = multiarray [ <int> ] [ <int> ] ; else if ( col == <int> ) multisum [ row ] [ col ] = multisum [ row - <int> ] [ col ] + multiarray [ row ] [ col ] ; else { max = findMax ( multisum [ row - <int> ] [ col ] , multisum [ row - <int> ] [ col - <int> ] ) ; multisum [ row ] [ col ] = max + multiarray [ row ] [ col ] ; } } } } void printMultisum ( int n , int * * multisum ) { int col ; int max = multisum [ n - <int> ] [ <int> ] ; for ( col = <int> ; col < n ; col ++ ) { if ( max < multisum [ n - <int> ] [ col ] ) max = multisum [ n - <int> ] [ col ] ; } printf ( <str> , max ) ; } void freeAll2DMatrix ( int n , int * * array2D ) { int i ; for ( i = <int> ; i < n ; i ++ ) free ( * ( array2D + i ) ) ; free ( array2D ) ; } int main ( ) { int n ; int * * multiarray , * * multisum ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; multiarray = allocate2DArea ( n ) ; multisum = allocate2DArea ( n ) ; readTriangle ( n , multiarray ) ; calculateMultisum ( n , multiarray , multisum ) ; printMultisum ( n , multisum ) ; freeAll2DMatrix ( n , multiarray ) ; freeAll2DMatrix ( n , multisum ) ; } return <int> ; }", "label": 1, "id": 4746}
{"input": "int main ( ) { int t , i , j , n , next , prev ; long long int ans ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int A [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & A [ j ] ) ; prev = <int> ; next = <int> , ans = <int> ; while ( next < n ) { if ( A [ prev ] > A [ next ] ) { ans += A [ next ] ; prev = next ; next ++ ; } else if ( A [ prev ] < A [ next ] ) { ans += A [ prev ] ; next ++ ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 4747}
{"input": "int main ( ) { int t , i , a [ <int> ] , n , sum = <int> , pos = <int> , j ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < ( n * ( n + <int> ) ) / <int> ; i ++ ) a [ i ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < ( n * ( n + <int> ) ) / <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; sum = a [ <int> ] ; pos = <int> ; for ( j = <int> ; j < n ; j ++ ) { pos += j ; if ( a [ pos ] > a [ pos + <int> ] ) sum += a [ pos ] ; else sum += a [ ++ pos ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4748}
{"input": "main ( ) { int t , i , n1 , n2 , temp1 , temp2 , hcf ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; temp1 = n1 ; temp2 = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) { n1 = n1 - n2 ; hcf = n1 ; } else { n2 = n2 - n1 ; hcf = n2 ; } } printf ( <str> , hcf , ( temp1 * temp2 ) / hcf ) ; } }", "label": 1, "id": 4749}
{"input": "int main ( ) { int gcd , i , t , m , n , small , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m , & n ) ; if ( m == <int> && n == <int> ) printf ( <str> ) ; else { if ( m <= n ) small = m ; else small = n ; for ( i = small ; i >= <int> ; i -- ) { if ( m % i == <int> && n % i == <int> ) { gcd = i ; break ; } } printf ( <str> , gcd , ( m * n ) / gcd ) ; } } return <int> ; }", "label": 1, "id": 4750}
{"input": "main ( ) { int a , b ; int temp , gcd ; long lcm , product ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; product = a * b ; while ( a > <int> ) { if ( a < b ) { temp = a ; a = b ; b = temp ; } a = a % b ; } gcd = b ; lcm = product / gcd ; printf ( <str> ) ; printf ( <str> , gcd , lcm ) ; }", "label": 1, "id": 4751}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , t , l , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4752}
{"input": "int main ( ) { int t , a , b , c , d , e ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = b ; d = a ; } else { c = a ; d = b ; } if ( d % c == <int> ) printf ( <str> , c , d ) ; else { while ( c != <int> ) { e = c ; c = d % c ; d = e ; } printf ( <str> , d , ( a * b ) / d ) ; } } return <int> ; }", "label": 1, "id": 4753}
{"input": "int main ( ) { int n , i , t , j , k , sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & t ) ; int x [ t ] [ t ] ; for ( j = <int> ; j <= t ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & x [ j ] [ k ] ) ; if ( j > <int> && k >= <int> ) { if ( sum <= ( x [ j - <int> ] [ k - <int> ] + x [ j ] [ k - <int> ] + x [ j ] [ k ] ) ) sum = x [ j - <int> ] [ k - <int> ] + x [ j ] [ k - <int> ] + x [ j ] [ k ] ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4754}
{"input": "int main ( ) { int n , m , sum = <int> , i , j , * b , k = <int> , temp1 = <int> , temp2 = <int> , l = <int> ; scanf ( <str> , & n ) ; int ar [ <int> ] [ <int> ] ; for ( ; n > <int> ; n -- ) { scanf ( <str> , & m ) ; b = calloc ( m , sizeof ( int ) ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } for ( i = <int> ; i < m ; i ++ ) { sum += ar [ i ] [ <int> ] ; l += ar [ i ] [ i ] ; } temp1 = temp2 = sum ; for ( j = m - <int> ; j > k ; ) { if ( b [ j ] == b [ j - <int> ] ) { temp1 = temp1 - ar [ j ] [ b [ j ] ] + ar [ j ] [ <int> + b [ j ] ] ; b [ j ] ++ ; if ( sum < temp1 ) sum = temp1 ; j = m - <int> ; } if ( b [ j ] == j ) { k ++ ; j = m - <int> ; } if ( ( b [ j ] - <int> ) == b [ j - <int> ] ) j -- ; } b = calloc ( m , sizeof ( int ) ) ; k = <int> ; for ( j = m - <int> ; j > k ; j -- ) { if ( b [ j ] == b [ j - <int> ] || ( b [ j ] - <int> ) == b [ j - <int> ] ) { temp2 = temp2 - ar [ j ] [ b [ j ] ] + ar [ j ] [ <int> + b [ j ] ] ; b [ j ] ++ ; if ( sum < temp2 ) sum = temp2 ; } if ( b [ j ] == j ) { k ++ ; j = m - <int> ; } } if ( sum < l ) sum = l ; printf ( <str> , sum ) ; sum = temp1 = temp2 = k = l = <int> ; } return <int> ; }", "label": 2, "id": 4755}
{"input": "int main ( ) { int a [ <int> ] , b [ <int> ] , x [ <int> ] , y [ <int> ] ; int i , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; x [ i ] = a [ i ] ; y [ i ] = b [ i ] ; while ( a [ i ] != b [ i ] ) { if ( a [ i ] > b [ i ] ) a [ i ] -= b [ i ] ; else b [ i ] -= a [ i ] ; } printf ( <str> , a [ i ] ) ; printf ( <str> ) ; printf ( <str> , x [ i ] * y [ i ] / a [ i ] ) ; printf ( <str> ) ; } return <int> ; }", "label": 3, "id": 4756}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int x , i , j ; scanf ( <str> , & x ) ; int a [ x ] [ x ] ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = x - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4757}
{"input": "int main ( ) { int n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int current , previous ; long long int count = <int> , r = <int> ; scanf ( <str> , & previous ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & current ) ; if ( current >= previous ) { r ++ ; } else { count = count + r * r + <int> / <int> ; r = <int> ; } previous = current ; } count = count + ( r * ( r + <int> ) ) / <int> ; printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 4758}
{"input": "int main ( ) { int maxim , n , line , i , j ; int Arr [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & line ) ; i = <int> ; for ( i ; i < line ; i ++ ) { j = <int> ; for ( j ; j <= i ; j ++ ) { scanf ( <str> , & Arr [ i ] [ j ] ) ; } } if ( line == <int> ) printf ( <str> , Arr [ <int> ] [ <int> ] ) ; else for ( i = <int> ; i < line ; i ++ ) { j = <int> ; for ( j ; j <= i ; j ++ ) { Arr [ i ] [ j ] += max ( Arr [ i - <int> ] [ j - <int> ] , Arr [ i - <int> ] [ j ] ) ; } } j = <int> ; maxim = <int> ; for ( j ; j < line ; j ++ ) { printf ( <str> , Arr [ line - <int> ] [ j ] ) ; if ( Arr [ line - <int> ] [ j ] > maxim ) maxim = Arr [ line - <int> ] [ j ] ; } printf ( <str> , maxim ) ; } return <int> ; } int max ( int a , int b ) { return ( a > b ? a : b ) ; }", "label": 1, "id": 4759}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; ++ i ) { long int A , B , hcf = <int> ; scanf ( <str> , & A , & B ) ; long int smaller = A < B ? A : B ; long int tempA = A , tempB = B ; for ( long int j = <int> ; j <= smaller ; ++ j ) { while ( A % j == <int> && B % j == <int> ) { hcf *= j ; A /= j ; B /= j ; } } long long int lcm = A * B / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 4760}
{"input": "int a [ <int> ] ; int b [ <int> ] ; int main ( ) { int n , r , i , j , max ; scanf ( <str> , & n ) ; while ( n -- ) { for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = <int> ; b [ i ] = <int> ; } scanf ( <str> , & r ) ; for ( i = <int> ; i <= r ; i ++ ) { if ( i % <int> ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & b [ j ] ) ; if ( j ) b [ j ] += ( ( a [ j ] > a [ j - <int> ] ) ? a [ j ] : a [ j - <int> ] ) ; else b [ j ] += a [ j ] ; } } else for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j ) a [ j ] += ( ( b [ j ] > b [ j - <int> ] ) ? b [ j ] : b [ j - <int> ] ) ; else a [ j ] += b [ j ] ; } } if ( ! ( r % <int> ) ) { max = a [ <int> ] ; while ( ( r -- ) - <int> ) { if ( a [ r - <int> ] > max ) max = a [ r - <int> ] ; } } else { max = b [ <int> ] ; while ( ( r -- ) - <int> ) { if ( b [ r - <int> ] > max ) max = b [ r - <int> ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4761}
{"input": "int main ( ) { int n , r , i , j , k , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( ; j > <int> ; j -- ) { for ( k = j ; k > <int> ; k -- ) { if ( a [ j ] [ k ] > a [ j ] [ k - <int> ] ) { a [ j - <int> ] [ k - <int> ] = a [ j - <int> ] [ k - <int> ] + a [ j ] [ k ] ; } else { a [ j - <int> ] [ k - <int> ] = a [ j - <int> ] [ k - <int> ] + a [ j ] [ k - <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4762}
{"input": "int solution [ <int> ] [ <int> ] ; int findpathsum ( int triangle [ ] [ <int> ] , int i , int j ) { int val1 , val2 ; if ( triangle [ i ] [ j ] == - <int> ) return <int> ; if ( solution [ i + <int> ] [ j ] == - <int> ) { val1 = findpathsum ( triangle , i + <int> , j ) ; solution [ i + <int> ] [ j ] = val1 ; } else { val1 = solution [ i + <int> ] [ j ] ; } if ( solution [ i + <int> ] [ j + <int> ] == - <int> ) { val2 = findpathsum ( triangle , i + <int> , j + <int> ) ; solution [ i + <int> ] [ j + <int> ] = val2 ; } else { val2 = solution [ i + <int> ] [ j + <int> ] ; } if ( val1 > val2 ) return triangle [ i ] [ j ] + val1 ; else return triangle [ i ] [ j ] + val2 ; } int main ( ) { int nt , nr ; int i , j , k ; int triangle [ <int> ] [ <int> ] ; int sol [ <int> ] , sol_i ; sol_i = <int> ; scanf ( <str> , & nt ) ; for ( i = <int> ; i < nt ; i ++ ) { scanf ( <str> , & nr ) ; for ( j = <int> ; j < nr ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & triangle [ j ] [ k ] ) ; solution [ j ] [ k ] = - <int> ; } } for ( k = <int> ; k <= j ; k ++ ) triangle [ j ] [ k ] = - <int> ; sol [ sol_i ++ ] = findpathsum ( triangle , <int> , <int> ) ; } for ( i = <int> ; i < sol_i ; i ++ ) printf ( <str> , sol [ i ] ) ; return <int> ; }", "label": 0, "id": 4763}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , n , k ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = k - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) > ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ? ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) : ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; n -- ; } return <int> ; }", "label": 0, "id": 4764}
{"input": "main ( ) { int t , g , l , a , b , m , n , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; l = <int> ; m = a ; n = b ; j = <int> ; while ( a != <int> || b != <int> ) { if ( a % j == <int> && b % j == <int> ) { l = l * j ; a = a / j ; b = b / j ; } else if ( a % j == <int> ) { l = l * j ; a = a / j ; } else if ( b % j == <int> ) { l = l * j ; b = b / j ; } else j ++ ; } g = m * n / l ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 4765}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int x , y , z ; x = a , y = b ; while ( y != <int> ) { z = y ; y = x % y ; x = z ; } if ( b > a ) { int temp = a ; a = b ; b = temp ; } int p = a ; long long int lcm = ( a * b ) / x ; printf ( <str> , x , lcm ) ; } return <int> ; }", "label": 1, "id": 4766}
{"input": "int main ( ) { int t ; int a , b , UCLN , BCNN , chay ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; chay = <int> ; while ( chay <= a && chay <= b ) { if ( ( a % chay == <int> ) && ( b % chay == <int> ) ) { UCLN = chay ; } chay ++ ; } chay = a ; while ( chay ++ ) { if ( ( chay % a == <int> ) && ( chay % b == <int> ) ) { BCNN = chay ; break ; } } printf ( <str> , UCLN , BCNN ) ; } return <int> ; }", "label": 2, "id": 4767}
{"input": "int main ( ) { int t ; long a , b , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( a != b ) { if ( a > b ) { a -= b ; } else { b -= a ; } } printf ( <str> , a , ( ( long long ) x * y ) / a ) ; } }", "label": 0, "id": 4768}
{"input": "int main ( ) { int n , i , j , p , q , t ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; int a [ t ] [ t ] , b [ t ] [ t ] ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = <int> ; j < t ; j ++ ) { b [ t - <int> ] [ j ] = a [ t - <int> ] [ j ] ; } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { p = b [ i + <int> ] [ j ] ; q = b [ i + <int> ] [ j + <int> ] ; if ( p > q ) b [ i ] [ j ] = p + a [ i ] [ j ] ; else b [ i ] [ j ] = q + a [ i ] [ j ] ; } } printf ( <str> , b [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4769}
{"input": "long long gcd ( long long a , long long b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } long long lcm ( long long a , long long b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 0, "id": 4770}
{"input": "int main ( ) { int t , n , a , i = <int> , c = <int> , p , b , l ; scanf ( <str> , & t ) ; for ( b = <int> ; b <= t ; b ++ ) { scanf ( <str> , & n ) ; int z [ n ] , s [ n ] ; i = <int> ; c = <int> ; for ( a = <int> ; a < n ; a ++ ) { scanf ( <str> , & z [ a ] ) ; s [ a ] = z [ a ] ; } p = <int> ; while ( n - <int> > i ) { if ( s [ p ] > s [ p + <int> ] ) { c = s [ p + <int> ] + c ; i = i + <int> ; a = s [ p + i + <int> ] ; s [ p ] = a ; } else { c = s [ p ] + c ; i = i + <int> ; l = s [ p + i + <int> ] ; s [ p + <int> ] = l ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 4771}
{"input": "main ( ) { int i , j , n ; scanf ( <str> , & n ) ; int array [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( array [ i + <int> ] [ j + <int> ] > array [ i + <int> ] [ j ] ) array [ i ] [ j ] += array [ i + <int> ] [ j + <int> ] ; else { array [ i ] [ j ] += array [ i + <int> ] [ j ] ; } } } printf ( <str> , array [ <int> ] [ <int> ] ) ; }", "label": 1, "id": 4772}
{"input": "int main ( ) { int t , i , j , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 4773}
{"input": "int a [ <int> ] [ <int> ] ; int spath [ <int> ] [ <int> ] ; int path ( int i , int j , int n ) { int temp1 , temp2 , temp3 ; if ( spath [ i ] [ j ] == - <int> ) { if ( i == n - <int> ) temp3 = a [ i ] [ j ] ; else { temp1 = path ( i + <int> , j , n ) ; temp2 = path ( i + <int> , j + <int> , n ) ; if ( temp1 > temp2 ) temp3 = a [ i ] [ j ] + temp1 ; else temp3 = a [ i ] [ j ] + temp2 ; } spath [ i ] [ j ] = temp3 ; return temp3 ; } else return spath [ i ] [ j ] ; } int main ( ) { int i , j , n , t , m = <int> ; scanf ( <str> , & t ) ; int r [ t ] ; while ( t -- ) { for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) spath [ i ] [ j ] = - <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; r [ m ++ ] = path ( <int> , <int> , n ) ; } for ( i = <int> ; i < m ; i ++ ) printf ( <str> , r [ i ] ) ; return <int> ; }", "label": 1, "id": 4774}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , r = <int> , pdt = <int> , lcm = <int> , temp = <int> ; scanf ( <str> , & a , & b ) ; pdt = a * b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } else { a = a ; b = b ; } while ( b != <int> ) { r = a % b ; a = b ; b = r ; } lcm = pdt / a ; printf ( <str> , a , lcm ) ; } }", "label": 0, "id": 4775}
{"input": "int main ( ) { long long int t = <int> , n = <int> , a = <int> , b = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int x [ n ] ; for ( a = <int> ; a < n ; a ++ ) { scanf ( <str> , & x [ a ] ) ; if ( b > x [ a ] ) { b = x [ a ] ; } } printf ( <str> , b * ( n - <int> ) ) ; b = <int> ; } return <int> ; }", "label": 0, "id": 4776}
{"input": "int main ( ) { int A , B ; int gcd , lcm , remainder , numerator , denominator ; int T , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4777}
{"input": "int main ( void ) { int i , j , k , l , row , repeat_factor = <int> , arr [ <int> ] [ <int> ] ; long int rowsum [ <int> ] , largestsum ; int N ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { largestsum = <int> ; scanf ( <str> , & row ) ; for ( j = <int> ; j < row ; j ++ ) { rowsum [ <int> * j ] = rowsum [ <int> * j + <int> ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } repeat_factor = <int> ; for ( j = row - <int> ; j >= <int> ; j -- ) { for ( l = j ; l >= <int> ; l -- ) { for ( k = <int> ; k < repeat_factor ; k ++ ) { rowsum [ repeat_factor * j + k ] += arr [ j ] [ l ] ; } } repeat_factor *= <int> ; } largestsum = rowsum [ <int> ] ; for ( l = <int> ; l < <int> * row ; l ++ ) largestsum = ( largestsum > rowsum [ l ] ) ? largestsum : rowsum [ l ] ; printf ( <str> , largestsum ) ; } return <int> ; }", "label": 3, "id": 4778}
{"input": "int main ( ) { long int t , a [ <int> ] , i , n , sum , comp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; comp = a [ <int> ] ; a [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= comp ) { comp = a [ i ] ; a [ i ] = a [ i - <int> ] + <int> ; } else { comp = a [ i ] ; a [ i ] = <int> ; } } sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { sum += a [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 4779}
{"input": "int * <unk> ( int n ) ; int num ; int * * arr ; int main ( ) { int <unk> ; scanf ( <str> , & <unk> ) ; for ( int i = <int> ; i < <unk> ; i ++ ) { scanf ( <str> , & num ) ; arr = ( int * * ) malloc ( num * sizeof ( int * ) ) ; printf ( <str> , <unk> ( <int> ) [ <int> ] ) ; } } int * <unk> ( int n ) { arr [ n ] = ( int * ) malloc ( ( n + <int> ) * sizeof ( int ) ) ; for ( int i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & arr [ n ] [ i ] ) ; } if ( n == num - <int> ) { for ( int i = <int> ; i < n ; i ++ ) { if ( arr [ n ] [ i ] > arr [ n ] [ i + <int> ] ) ; else arr [ n ] [ i ] = arr [ n ] [ i + <int> ] ; } return arr [ n ] ; } int * <unk> = <unk> ( n + <int> ) ; int <unk> = <int> ; int <unk> = n ; if ( n == <int> ) <unk> = <int> ; for ( int i = <int> ; i < <unk> ; i ++ ) { if ( <unk> [ i ] + arr [ n ] [ i ] >= <unk> [ i + <int> ] + arr [ n ] [ i + <int> ] ) <unk> [ i ] = <unk> [ i ] + arr [ n ] [ i ] ; else <unk> [ i ] = <unk> [ i + <int> ] + arr [ n ] [ i + <int> ] ; } return <unk> ; }", "label": 0, "id": 4780}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i , l = <int> , g = <int> ; scanf ( <str> , & a , & b ) ; if ( a > b ) { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { g = i ; } } printf ( <str> , g ) ; } else { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { g = i ; } } printf ( <str> , g ) ; } if ( a > b ) { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { l = l * i ; a = a / i ; b = b / i ; } } l = l * a * b ; printf ( <str> , l ) ; } else { for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { l = l * i ; a = a / i ; b = b / i ; } } l = l * a * b ; printf ( <str> , l ) ; } } return <int> ; }", "label": 2, "id": 4781}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int n , i , j , r ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4782}
{"input": "int read ( ) { char c ; int d ; d = <int> ; c = getchar ( ) ; while ( <int> ) { if ( c == <char> || c == <char> ) break ; d = d * <int> + c - <char> ; c = getchar ( ) ; } return d ; } int main ( ) { int n , T , i , j ; T = read ( ) ; while ( T -- ) { int a [ <int> ] [ <int> ] = { <int> } ; int sum [ <int> ] [ <int> ] = { <int> } ; n = read ( ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = read ( ) ; } for ( i = <int> ; i < n ; i ++ ) { sum [ n - <int> ] [ i ] = a [ n - <int> ] [ i ] ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( sum [ i + <int> ] [ j ] > sum [ i + <int> ] [ j + <int> ] ) { sum [ i ] [ j ] = sum [ i + <int> ] [ j ] + a [ i ] [ j ] ; } else { sum [ i ] [ j ] = sum [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ; } } } printf ( <str> , sum [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4783}
{"input": "int main ( ) { int t , n , i , j , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } } for ( i = ( n - <int> ) ; i >= <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j && a [ i ] [ j ] < a [ i ] [ j + <int> ] ) m = a [ i ] [ j + <int> ] ; else m = a [ i ] [ j ] ; a [ i - <int> ] [ j ] += m ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4784}
{"input": "int main ( void ) { int t , gcd , lcm ; scanf ( <str> , & t ) ; for ( int z = <int> ; z < t ; z ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; for ( int i = <int> ; i <= a * b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; if ( i % a == <int> && i % b == <int> ) { lcm = i ; break ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4785}
{"input": "unsigned long cost ; void func ( unsigned long arr [ ] , unsigned long size ) { unsigned long count = <int> ; int i ; if ( size == <int> ) { return ; } for ( i = <int> ; i < size ; ) { if ( ( size % <int> ) != <int> && ( i + <int> ) == size ) { arr [ count ] == arr [ i ] ; } else if ( arr [ i ] > arr [ i + <int> ] ) { cost = cost + arr [ i + <int> ] ; arr [ count ] = arr [ i + <int> ] ; } else { cost = cost + arr [ i ] ; arr [ count ] = arr [ i ] ; } count ++ ; i = i + <int> ; } if ( ( count + <int> ) > <int> ) { func ( arr , count ) ; } return ; } int main ( void ) { int t , i ; unsigned long size ; unsigned long arr [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; scanf ( <str> , & size ) ; int arr [ size ] ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } func ( arr , size ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 4786}
{"input": "int getMax ( int * data , int row , int pos , int maxRows ) ; int main ( int argc , char * argv [ ] ) { int cases , i , j , rows , sum , c , len ; scanf ( <str> , & cases ) ; int result [ cases ] ; for ( i = <int> ; i < cases ; i ++ ) { scanf ( <str> , & rows ) ; len = rows * ( rows + <int> ) / <int> ; int numbers [ len ] ; for ( j = <int> ; j < len ; j ++ ) { scanf ( <str> , & c ) ; numbers [ j ] = c ; } result [ i ] = getMax ( numbers , <int> , <int> , rows ) ; } for ( i = <int> ; i < cases ; i ++ ) { printf ( <str> , result [ i ] ) ; } return <int> ; } int getMax ( int * data , int row , int pos , int maxRows ) { int sum1 = <int> , sum2 = <int> ; if ( row < maxRows ) { sum1 = getMax ( data , row + <int> , pos + row , maxRows ) ; sum2 = getMax ( data , row + <int> , pos + row + <int> , maxRows ) ; if ( sum1 > sum2 ) { return data [ pos ] + sum1 ; } else { return data [ pos ] + sum2 ; } } else { return data [ pos ] ; } }", "label": 2, "id": 4787}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { long long int A , B , GCD ; scanf ( <str> , & A , & B ) ; for ( i = ( A >= B ) ? B : A ; i > <int> ; i -- ) { if ( A % i == <int> && B % i == <int> ) { printf ( <str> , i ) ; GCD = i ; break ; } } printf ( <str> , ( A * B ) / GCD ) ; } }", "label": 2, "id": 4788}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = a [ <int> ] ; for ( int i = <int> ; i <= n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 4789}
{"input": "int main ( ) { int T ; int ans [ <int> ] ; int sums [ <int> ] ; int i , j ; int Tc ; int n ; int num [ <int> ] ; scanf ( <str> , & T ) ; Tc = T ; while ( Tc -- ) { scanf ( <str> , & n ) ; memset ( ( void * ) sums , <int> , n * sizeof ( sums [ <int> ] ) ) ; if ( n > sizeof ( sums ) / sizeof ( sums [ <int> ] ) ) { return <int> ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { scanf ( <str> , & num [ j ] ) ; } for ( j = i ; j >= <int> ; j -- ) { sums [ j ] = MAX ( sums [ j ] + num [ j ] , sums [ j - <int> ] + num [ j ] ) ; } sums [ <int> ] += num [ <int> ] ; } ans [ Tc ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { ans [ Tc ] = MAX ( sums [ i ] , ans [ Tc ] ) ; } } while ( T -- ) { printf ( <str> , ans [ T ] ) ; } return <int> ; }", "label": 3, "id": 4790}
{"input": "void second ( ) { int size , i , j , p , count = <int> ; scanf ( <str> , & size ) ; int prime [ size ] ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & prime [ i ] ) ; } for ( i = <int> ; i < size - <int> ; i ++ ) { p = i ; for ( j = i + <int> ; j < size ; j ++ ) { if ( prime [ j ] > prime [ p ] ) { count ++ ; p = j ; } else { break ; } } } printf ( <str> , size + count ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { second ( ) ; printf ( <str> ) ; } }", "label": 0, "id": 4791}
{"input": "int main ( ) { int t , k , i , j , n , p , q ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( p = <int> ; p < n ; p ++ ) { for ( q = <int> ; q <= p ; q ++ ) { scanf ( <str> , & a [ p ] [ q ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4792}
{"input": "typedef long long int ll ; int main ( ) { ll a , b , t , i , c , d , k , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; c = a > b ? a : b ; d = a < b ? a : b ; while ( c != d ) { if ( c > d ) c = c - d ; else d = d - c ; } l = ( a * b ) / d ; printf ( <str> , d , l ) ; } }", "label": 0, "id": 4793}
{"input": "int gcd ( int a , int b ) { if ( a % b != <int> ) return gcd ( b , a % b ) ; return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int m , n , g , l ; scanf ( <str> , & m , & n ) ; if ( m > n ) g = gcd ( m , n ) ; else g = gcd ( n , m ) ; l = m * n / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 4794}
{"input": "int GCD ( int a , int b ) ; int main ( ) { int n , i , j , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & j , & k ) ; printf ( <str> , GCD ( j , k ) , j * k / GCD ( j , k ) ) ; } return <int> ; } int GCD ( int a , int b ) { int e ; int f ; int gcd ; int g ; if ( a > b ) { e = a ; f = b ; } else if ( a < b ) { e = b ; f = a ; } else { gcd = a ; } if ( e % f == <int> ) { gcd = f ; } while ( e % f != <int> ) { g = e % f ; e = f ; f = g ; if ( e % f == <int> ) { gcd = f ; } } return gcd ; }", "label": 1, "id": 4795}
{"input": "short int e [ <int> ] , x [ <int> ] ; int main ( ) { short int a , b , c , i , k ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & b ) ; i = <int> ; c = b - <int> ; while ( b -- ) { if ( c == b - <int> ) { scanf ( <str> , & e [ <int> ] ) ; i ++ ; } else { scanf ( <str> , & e [ i ] , & e [ i + <int> ] ) ; i += <int> ; } } e [ -- i ] = - <int> ; i = <int> ; while ( e [ i ] != - <int> ) { if ( i == <int> ) x [ i ] = e [ i ] + e [ i + <int> ] + e [ i + <int> ] ; else { x [ i ] = e [ i ] + e [ i + <int> ] + e [ i + <int> ] ; } i ++ ; } x [ i ] = - <int> ; i = <int> , k = x [ <int> ] ; while ( x [ i ] != - <int> ) { if ( x [ i ] > k ) k = x [ i ] ; i ++ ; } printf ( <str> , k ) ; } return <int> ; }", "label": 1, "id": 4796}
{"input": "int main ( ) { int a , b , c , d , e [ <int> ] [ <int> ] ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & b ) ; for ( c = <int> ; c < b ; ++ c ) for ( d = <int> ; d <= c ; ++ d ) scanf ( <str> , & e [ c ] [ d ] ) ; b -= <int> ; while ( b -- ) { for ( c = <int> ; c <= b ; ++ c ) if ( e [ b + <int> ] [ c ] > e [ b + <int> ] [ c + <int> ] ) e [ b ] [ c ] += e [ b + <int> ] [ c ] ; else e [ b ] [ c ] += e [ b + <int> ] [ c + <int> ] ; } printf ( <str> , e [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4797}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; } int main ( ) { int t , i , n , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & i , & j ) ; n = ( i > j ) ? gcd ( i , j ) : gcd ( j , i ) ; printf ( <str> , n , ( i / n ) * j ) ; } return <int> ; }", "label": 1, "id": 4798}
{"input": "int main ( ) { int t , n , i , min ; int * p , * ptr ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; p = ( int * ) malloc ( n * sizeof ( int ) ) ; ptr = p ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , p ) ; p ++ ; } min = * ptr ; ptr ++ ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( * ptr < min ) min = * ptr ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; free ( p ) ; } return <int> ; }", "label": 3, "id": 4799}
{"input": "void max ( int a [ <int> ] [ <int> ] , int b ) { int i = <int> , j = <int> ; for ( i = b - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } int main ( int argc , char * argv [ ] ) { int a , b , i , j , k ; int t [ <int> ] [ <int> ] ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b ) ; for ( j = <int> ; j < b ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & t [ j ] [ k ] ) ; } } max ( t , b ) ; } }", "label": 1, "id": 4800}
{"input": "long <unk> ( long A , long B ) { long i , L , mul = <int> ; if ( A > B ) L = A ; else L = B ; for ( i = <int> ; i <= L ; ) { if ( ( A % i == <int> ) && ( B % i == <int> ) ) { A = A / i ; B = B / i ; mul = mul * i ; } else if ( A % i == <int> ) { A = A / i ; mul = mul * i ; } else if ( B % i == <int> ) { B = B / i ; mul = mul * i ; } else { i ++ ; } } return mul ; } long <unk> ( long A , long B ) { long i , S ; if ( A < B ) S = A ; else S = B ; for ( i = S ; i >= <int> ; i -- ) { if ( ( A % i == <int> ) && ( B % i == <int> ) ) break ; } return i ; } int main ( ) { long t , A , B , GCD , LCM ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & A , & B ) ; LCM = <unk> ( A , B ) ; GCD = <unk> ( A , B ) ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 2, "id": 4801}
{"input": "int main ( ) { int testcase ; int min , value , i , distinctInt ; long int cost ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { scanf ( <str> , & distinctInt ) ; scanf ( <str> , & value ) ; min = value ; for ( i = <int> ; i < distinctInt ; i ++ ) { scanf ( <str> , & value ) ; if ( value < min ) { min = value ; } } cost = min * ( distinctInt - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 4802}
{"input": "int main ( void ) { int N , T , A [ <int> ] , i , c ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & A [ i ] ) ; c = N ; for ( i = <int> ; i < N - <int> ; i ++ ) { if ( A [ i ] < A [ i + <int> ] ) c ++ ; } printf ( <str> , c ) ; printf ( <str> ) ; T -- ; } return <int> ; }", "label": 1, "id": 4803}
{"input": "void gcd ( int , int ) ; void lcm ( int , int ) ; int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd ( a , b ) ; lcm ( a , b ) ; } return <int> ; } void lcm ( int x , int y ) { int a , b ; a = x ; b = y ; while ( x != y ) { if ( x > y ) y = b + y ; else x = a + x ; } printf ( <str> , x ) ; } void gcd ( int x , int y ) { while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } printf ( <str> , x ) ; }", "label": 2, "id": 4804}
{"input": "int main ( ) { int t , i , j , k , l , m = <int> , count = <int> ; scanf ( <str> , & t ) ; if ( t <= <int> ) { while ( t -- ) { scanf ( <str> , & i ) ; if ( i < <int> ) { for ( j = <int> ; j <= i ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & l ) ; if ( m < l && l < <int> && j != <int> ) { m = l ; } } count += m ; m = <int> ; } printf ( <str> , count ) ; count = <int> ; } } } return <int> ; }", "label": 1, "id": 4805}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a ; scanf ( <str> , & a ) ; long int b [ <int> ] ; long int i ; int l , k ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b [ i ] ) ; } if ( b [ <int> ] > b [ <int> ] ) { k = b [ <int> ] ; } else { k = b [ <int> ] ; } for ( i = <int> ; i < a ; i ++ ) { if ( b [ i ] < k ) { k = b [ i ] ; } } l = ( a - <int> ) * k ; printf ( <str> , l ) ; } return <int> ; }", "label": 0, "id": 4806}
{"input": "main ( ) { int t , i , a [ <int> ] , s , n ; scanf ( <str> , & t ) ; while ( t -- ) { s = <int> ; a [ <int> ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { s = s + a [ i ] ; } else { s = s + a [ i + <int> ] ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 4807}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int tc = <int> ; tc < t ; tc ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int c = <int> ; int j ; for ( int i = <int> ; i < n ; i ++ ) { j = i + <int> ; if ( j < n && a [ i ] <= a [ j ] ) { c ++ ; while ( a [ j ] <= a [ j + <int> ] && j + <int> < n ) { c ++ ; j ++ ; } } } long long int res = c + n ; printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 4808}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int x , y , l = <int> , g = <int> ; scanf ( <str> , & x , & y ) ; if ( x > y ) g = gcd ( x , y ) ; else g = gcd ( y , x ) ; l = ( x * y ) / g ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 4809}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , l , g ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 4810}
{"input": "int main ( ) { int t , n , sum , arr [ <int> ] [ <int> ] , i , j , pos , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; max = - <int> ; pos = - <int> ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; if ( i == n - <int> ) { if ( arr [ i ] [ j ] > max ) { max = arr [ i ] [ j ] ; pos = j ; } else max = max ; } } i = n - <int> ; sum = arr [ i ] [ pos ] ; while ( i > <int> ) { if ( arr [ i - <int> ] [ pos ] > arr [ i - <int> ] [ pos - <int> ] ) { sum += arr [ i - <int> ] [ pos ] ; } else { sum += arr [ i - <int> ] [ pos - <int> ] ; pos = pos - <int> ; } i = i - <int> ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4811}
{"input": "main ( ) { int t , n , i , j , A [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) if ( A [ i + <int> ] [ j ] >= A [ i + <int> ] [ j + <int> ] ) A [ i ] [ j ] += A [ i + <int> ] [ j ] ; else A [ i ] [ j ] += A [ i + <int> ] [ j + <int> ] ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4812}
{"input": "int main ( ) { int x , n , a , y , z , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x , & a ) ; if ( a > x ) { y = x ; x = a ; a = y ; } z = x * a ; while ( x % a != <int> ) { y = a ; a = x % a ; x = y ; } printf ( <str> , a , z / a ) ; } return <int> ; }", "label": 1, "id": 4813}
{"input": "main ( ) { int t , t1 , i , k , a , b , min , max ; scanf ( <str> , & t ) ; int hcf [ t ] , lcm [ t ] ; for ( i = <int> ; i < t ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } for ( ; ; ) { if ( max % min == <int> ) { hcf [ i ] = min ; break ; } t1 = min ; min = max / min ; max = t1 ; } lcm [ i ] = ( a * b ) / hcf [ i ] ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> ) ; printf ( <str> , hcf [ i ] , lcm [ i ] ) ; } }", "label": 3, "id": 4814}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , i ; scanf ( <str> , & n ) ; long int A [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & A [ i ] ) ; long int min ; min = A [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > A [ i ] ) min = A [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4815}
{"input": "int main ( void ) { int t , g ; long long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; } int gcd ( long long int a , long long int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; }", "label": 0, "id": 4816}
{"input": "int max ( int x , int y ) { if ( x >= y ) return x ; else return y ; } int sum ( int r ) { int a [ r ] [ r ] , s [ r ] [ r ] , d ; int i , j ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < r ; j ++ ) { a [ i ] [ j ] = <int> ; s [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) if ( ( a [ i ] [ j ] > <int> ) && ( a [ i ] [ j ] < <int> ) ) scanf ( <str> , & a [ i ] [ j ] ) ; } s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) s [ i ] [ j ] = a [ i ] [ j ] + ( s [ i - <int> ] [ j ] ) ; else s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - <int> ] [ j ] , s [ i - <int> ] [ j - <int> ] ) ; } } d = s [ r - <int> ] [ <int> ] ; for ( j = <int> ; j < r ; j ++ ) { if ( s [ r - <int> ] [ j ] > d ) d = s [ r - <int> ] [ j ] ; } return d ; } void main ( ) { int t , r ; scanf ( <str> , & t ) ; if ( ( t > <int> ) && ( t < <int> ) ) { while ( t -- ) { if ( ( r > <int> ) && ( r < <int> ) ) scanf ( <str> , & r ) ; printf ( <str> , sum ( r ) ) ; } } }", "label": 1, "id": 4817}
{"input": "int main ( ) { int t , m , i , j , arr [ <int> ] [ <int> ] , n ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { if ( arr [ i + <int> ] [ j + <int> ] > arr [ i + <int> ] [ j ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 4818}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int n , j , k , p = <int> ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( j = <int> ; j <= n ; j ++ ) for ( k = <int> ; k < j ; k ++ ) scanf ( <str> , & arr [ j - <int> ] [ k ] ) ; for ( j = n - <int> ; j >= <int> ; j -- ) for ( k = <int> ; k < j ; k ++ ) { if ( arr [ j ] [ k ] > arr [ j ] [ k + <int> ] ) arr [ j - <int> ] [ k ] += arr [ j ] [ k ] ; else arr [ j - <int> ] [ k ] += arr [ j ] [ k + <int> ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4819}
{"input": "int main ( ) { int n , a , b , x , y ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a ) ; a = x ; b = y ; while ( a != b ) { if ( a < b ) a = a + x ; else b = b + y ; } printf ( <str> , a ) ; } return <int> ; }", "label": 2, "id": 4820}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , n , gcd , lcm ; scanf ( <str> , & a , & b ) ; n = a > b ? a : b ; for ( int i = <int> ; i <= n ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4821}
{"input": "int main ( int argc , char * argv [ ] ) { int * results ; int * sums = malloc ( MAX_SIZE * sizeof ( int ) ) ; int * prev_sums = malloc ( MAX_SIZE * sizeof ( int ) ) ; int round , rounds ; int line , width ; int i , tmp , max ; scanf ( <str> , & rounds ) ; results = calloc ( rounds , sizeof ( int ) ) ; for ( round = <int> ; round < rounds ; ++ round ) { scanf ( <str> , & width ) ; for ( i = <int> ; i < width ; ++ i ) sums [ i ] = prev_sums [ i ] = <int> ; for ( line = <int> ; line < width ; ++ line ) { for ( i = <int> ; i < ( line + <int> ) ; ++ i ) { scanf ( <str> , & tmp ) ; if ( i == <int> ) { sums [ i ] = prev_sums [ i ] + tmp ; } else { sums [ i ] = prev_sums [ i ] > prev_sums [ i - <int> ] ? prev_sums [ i ] + tmp : prev_sums [ i - <int> ] + tmp ; } } for ( i = <int> ; i < ( line + <int> ) ; ++ i ) prev_sums [ i ] = sums [ i ] ; } for ( max = i = <int> ; i < line + <int> ; ++ i ) { if ( max < sums [ i ] ) { max = sums [ i ] ; } } printf ( <str> , max ) ; } free ( prev_sums ) ; free ( sums ) ; free ( results ) ; return <int> ; }", "label": 0, "id": 4822}
{"input": "int sumtobase ( int * * intpyr , int row , int col , int size ) { if ( row == size ) return intpyr [ row ] [ col ] ; else { int way1 , way2 ; way1 = intpyr [ row ] [ col ] + sumtobase ( intpyr , row + <int> , col + <int> , size ) ; way2 = intpyr [ row ] [ col ] + sumtobase ( intpyr , row + <int> , col , size ) ; if ( way1 > way2 ) return way1 ; else return way2 ; } } int main ( ) { int itr ; int size ; int * * pyramid ; int * ans , i ; scanf ( <str> , & itr ) ; ans = ( int * ) malloc ( itr * sizeof ( int ) ) ; for ( i = <int> ; i < itr ; i ++ ) { int j , k = <int> ; char temp ; scanf ( <str> , & size ) ; pyramid = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( j = <int> ; j < size ; j ++ ) { pyramid [ j ] = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) pyramid [ j ] [ k ] = <int> ; k = - <int> ; fflush ( stdin ) ; while ( ( temp = getchar ( ) ) != <char> ) { if ( ( temp >= <char> ) && ( temp <= <char> ) ) { if ( k < <int> ) k = <int> ; pyramid [ j ] [ k ] = <int> * pyramid [ j ] [ k ] + ( temp - <char> ) ; } else if ( temp == <char> ) { if ( k >= <int> ) k ++ ; } } } ans [ i ] = sumtobase ( pyramid , <int> , <int> , size - <int> ) ; } for ( i = <int> ; i < itr ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 2, "id": 4823}
{"input": "void cost ( long long int [ ] , long long int ) ; int main ( ) { long long int i , no , n ; long long int a [ <int> ] ; scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) { scanf ( <str> , & n ) ; cost ( a , n ) ; } return <int> ; } void cost ( long long int a [ ] , long long int n ) { long long int min , j , cst ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } cst = ( unsigned long long ) ( n - <int> ) * min ; printf ( <str> , cst ) ; return ; }", "label": 3, "id": 4824}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , c = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] , dp [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) dp [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] <= a [ i ] ) { dp [ i ] = dp [ i - <int> ] + <int> ; } else { dp [ i ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { c = c + dp [ i ] ; } printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 4825}
{"input": "int max ( int a , int b ) ; int main ( ) { int t , n , i , j , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } if ( i == <int> ) b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; else { b [ i ] [ <int> ] = a [ i ] [ <int> ] + b [ i - <int> ] [ <int> ] ; b [ i ] [ i ] = a [ i ] [ i ] + b [ i - <int> ] [ i - <int> ] ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { b [ i ] [ j ] = a [ i ] [ j ] + max ( b [ i - <int> ] [ j ] , b [ i - <int> ] [ j - <int> ] ) ; } } m = <int> ; for ( i = <int> ; i < n ; i ++ ) { m = max ( m , b [ n - <int> ] [ i ] ) ; } printf ( <str> , m ) ; } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 4826}
{"input": "int main ( ) { int t , N , A [ <int> ] , i , j , k , sum , product , count , flag ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & A [ i ] ) ; count = <int> ; for ( i = <int> ; i < N ; i ++ ) { for ( j = i ; j < N ; j ++ ) { flag = <int> ; for ( k = i ; k < j ; k ++ ) { if ( A [ k ] > A [ k + <int> ] ) { flag = <int> ; break ; } } if ( flag == <int> ) count ++ ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 4827}
{"input": "int main ( ) { int t , a , b , i , j , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = b ; j > <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; break ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 4828}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , l , i , j , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k ] ; else a [ j ] [ k ] += a [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , & a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 4829}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j ; int arr [ <int> ] [ <int> ] ; int len , high = <int> ; scanf ( <str> , & len ) ; for ( i = <int> ; i < len ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j + <int> ] = <int> ; } } for ( i = <int> ; i < len ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { arr [ i ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ; } else { arr [ i ] [ j ] = max ( arr [ i - <int> ] [ j ] , arr [ i - <int> ] [ j - <int> ] ) + arr [ i ] [ j ] ; } high = max ( high , arr [ i ] [ j ] ) ; } } printf ( <str> , high ) ; } return <int> ; }", "label": 0, "id": 4830}
{"input": "int solve ( int a [ ] [ <int> ] , int n , int i , int j ) ; int max ( int x , int y ) ; int main ( void ) { int a [ <int> ] [ <int> ] , i , j , t , n , res , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { res = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } res = solve ( a , n , <int> , <int> ) ; printf ( <str> , res ) ; } return <int> ; } int solve ( int a [ ] [ <int> ] , int n , int i , int j ) { int cache [ <int> ] [ <int> ] , t1 , t2 , t ; if ( i > n ) return <int> ; else { if ( cache [ i ] [ j ] && <int> ) return cache [ i ] [ j ] ; else { t1 = solve ( a , n , i + <int> , j ) ; t2 = solve ( a , n , i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } } } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; }", "label": 3, "id": 4831}
{"input": "int main ( int argc , char * argv [ ] ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int i , n , tmp , min ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & tmp ) ; if ( i == <int> ) min = tmp ; if ( tmp < min ) min = tmp ; } long long int ans = ( long long ) min * ( long long ) ( i - <int> ) ; fprintf ( stdout , <str> , ans ) ; } }", "label": 0, "id": 4832}
{"input": "int main ( ) { long int a [ <int> ] , n , mr , m1 , sum = <int> , t , b ; scanf ( <str> , & t ) ; for ( b = <int> ; b < t ; b ++ ) { scanf ( <str> , & n ) ; if ( n >= <int> && n <= <int> ) { for ( mr = <int> ; mr <= n - <int> ; mr ++ ) { scanf ( <str> , & a [ mr ] ) ; } while ( n != <int> ) { if ( a [ <int> ] > a [ <int> ] ) { sum += a [ <int> ] ; for ( m1 = <int> ; m1 < n - <int> ; m1 ++ ) { a [ m1 ] = a [ m1 + <int> ] ; } n -- ; } else if ( a [ <int> ] < a [ <int> ] ) { sum += a [ <int> ] ; for ( m1 = <int> ; m1 < n - <int> ; m1 ++ ) { a [ m1 ] = a [ m1 + <int> ] ; } n -- ; } } printf ( <str> , sum ) ; sum = <int> ; } } return <int> ; }", "label": 2, "id": 4833}
{"input": "long long sum ; int main ( ) { int t ; long n , ar [ <int> ] , i , min , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ar [ i ] ) ; sum = <int> ; min = ar [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( ar [ i ] < min ) min = ar [ i ] ; } m = n - <int> ; sum = min * m ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 4834}
{"input": "int main ( ) { int i , j , t , n , a [ <int> ] [ <int> ] ; int x , y , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , a [ i ] [ j ] ) ; } } for ( int i = n - <int> ; i <= <int> ; i -- ) { for ( j = i ; j <= <int> ; j -- ) { x = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; y = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; if ( x > y ) a [ i ] [ j ] = x ; else a [ i ] [ j ] = y ; } } printf ( <str> , a [ i ] [ j ] ) ; } return <int> ; }", "label": 1, "id": 4835}
{"input": "int main ( ) { int k , t , a , count ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & a ) ; count += a ; } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 4836}
{"input": "main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long int a , b ; scanf ( <str> , & a , & b ) ; int j , k = <int> ; for ( j = <int> ; j <= ( a < b ? a : b ) ; j ++ ) { if ( a % j == <int> && b % j == <int> ) k = j ; } long long int c = ( a * b ) / k ; printf ( <str> , k , c ) ; } }", "label": 2, "id": 4837}
{"input": "int p [ <int> ] [ <int> ] ; int finds_sum ( int ) ; void reset ( void ) ; int max ( int , int ) ; int main ( ) { int n ; int test_case ; int rows ; int i , j ; int k ; scanf ( <str> , & test_case ) ; for ( k = <int> ; k < test_case ; k ++ ) { scanf ( <str> , & rows ) ; { reset ( ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & p [ i ] [ j ] ) ; } printf ( <str> , find_sum ( rows ) ) ; } } return <int> ; } int find_sum ( int rows ) { int i , j ; int result = <int> ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) p [ i ] [ j ] = p [ i ] [ j ] ; else p [ i ] [ j ] = max ( p [ i - <int> ] [ j ] + p [ i ] [ j ] , p [ i - <int> ] [ j - <int> ] + p [ i ] [ j ] ) ; } for ( i = <int> ; i < rows ; i ++ ) if ( p [ rows - <int> ] [ i ] > result ) result = p [ rows - <int> ] [ i ] ; return result ; } void reset ( ) { int i ; int j ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) { p [ i ] [ j ] = <int> ; } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 4838}
{"input": "int main ( ) { int T , N , i , a [ <int> ] , p = <int> ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < N - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { p = p + a [ i + <int> ] ; a [ i + <int> ] = a [ i ] ; } else p = p + a [ i ] ; } printf ( <str> , p ) ; } return <int> ; }", "label": 1, "id": 4839}
{"input": "int main ( void ) { int T , N , i ; int a , b ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; scanf ( <str> , & a , & b ) ; if ( a > b ) { a = b ; } for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & b ) ; if ( a > b ) { a = b ; } } if ( N > <int> ) { printf ( <str> , ( N - <int> ) * ( long long ) a ) ; } else { printf ( <str> , ( N - <int> ) * a ) ; } } return <int> ; }", "label": 0, "id": 4840}
{"input": "int main ( ) { int t ; long long n , s , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } s = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < s ) { s = a [ i ] ; } } printf ( <str> , s * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4841}
{"input": "int main ( ) { int t , i , n , j ; int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4842}
{"input": "int main ( ) { long long int T , N , i , A , min ; scanf ( <str> , & T ) ; while ( T -- ) { min = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A ) ; if ( A < min ) min = A ; } printf ( <str> , min * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 4843}
{"input": "int main ( ) { int t ; long long int n , k , a , i ; scanf ( <str> , & t ) ; while ( t -- ) { long long int b = <int> ; scanf ( <str> , & n , & k ) ; for ( i = <int> ; i <= k ; i ++ ) { if ( n % i > b ) b = n % i ; } printf ( <str> , b ) ; } return <int> ; }", "label": 2, "id": 4844}
{"input": "int main ( ) { int n , T , G , L , A , B , X ; scanf ( <str> , & T ) ; for ( n = <int> ; n <= T ; n ++ ) { if ( T >= <int> && T <= <int> ) { scanf ( <str> , & A , & B ) ; if ( A >= <int> && A <= <int> && B >= <int> && B <= <int> ) { if ( A < B ) { X = A ; } else { X = B ; } for ( ; X >= <int> ; X -- ) { if ( A % X == <int> && B % X == <int> ) { G = X ; L = A * B / G ; break ; } } printf ( <str> , G , L ) ; } break ; } } return <int> ; }", "label": 1, "id": 4845}
{"input": "void main ( ) { int i , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = arr [ i ] [ j ] + ( ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 4846}
{"input": "void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int m , i ; scanf ( <str> , & m ) ; long long int a [ m ] ; for ( i = <int> ; i < m ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < m - <int> ; i ++ ) a [ i ] = ( a [ i ] < a [ i + <int> ] ) ? a [ i ] : a [ i + <int> ] ; printf ( <str> , a [ m - <int> ] ) ; } }", "label": 1, "id": 4847}
{"input": "int main ( ) { int T , N , k , i , j , m , a [ <int> ] [ <int> ] , s ; scanf ( <str> , & T ) ; if ( <int> <= T && T <= <int> ) { int A [ T ] ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & N ) ; if ( <int> < N && N < <int> ) { for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & m ) ; if ( <int> <= m && m <= <int> ) a [ i ] [ j ] = m ; } } for ( i = N - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) s = a [ i ] [ j ] ; else s = a [ i ] [ j + <int> ] ; a [ i - <int> ] [ j ] += s ; } } A [ k ] = a [ <int> ] [ <int> ] ; } } for ( k = <int> ; k < T ; k ++ ) { printf ( <str> , A [ k ] ) ; } } return <int> ; }", "label": 1, "id": 4848}
{"input": "int <unk> ( int arr [ ] , int len ) { int <unk> [ len ] , j , n , count , flag ; <unk> [ <int> ] = arr [ <int> ] ; count = <int> ; for ( j = <int> ; j <= len - <int> ; ++ j ) { flag = <int> ; ; for ( n = <int> ; n < count ; ++ n ) { if ( arr [ j ] == <unk> [ n ] ) { flag = <int> ; } } if ( flag == <int> ) { ++ count ; <unk> [ count - <int> ] = arr [ j ] ; } } return count ; } int main ( void ) { int t , j ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { int i , n , a [ <int> ] = { <int> } , cnt = <int> , m ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { cnt ++ ; } else { continue ; } } m = <unk> ( a , n ) ; cnt = cnt + m ; printf ( <str> , cnt ) ; } return <int> ; }", "label": 3, "id": 4849}
{"input": "int sum ( int a [ ] [ <int> ] , int i , int j , int n , int b [ ] [ <int> ] ) { if ( i > n ) return <int> ; if ( b [ i ] [ j ] != <int> ) return b [ i ] [ j ] ; int s1 = a [ i ] [ j ] + sum ( a , i + <int> , j , n , b ) ; int s2 = a [ i ] [ j ] + sum ( a , i + <int> , j + <int> , n , b ) ; if ( s1 > s2 ) { b [ i ] [ j ] = s1 ; return s1 ; } else { b [ i ] [ j ] = s2 ; return s2 ; } } int main ( void ) { int a [ <int> ] [ <int> ] , n , i , j , no , t , b [ <int> ] [ <int> ] ; scanf ( <str> , & no ) ; for ( t = <int> ; t < no ; t ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } scanf ( <str> ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { b [ i ] [ j ] = <int> ; } } int ans = sum ( a , <int> , <int> , n , b ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 4850}
{"input": "int arr [ <int> ] [ <int> ] ; int result [ <int> ] ; int r = <int> ; int main ( ) { int t , n , l = <int> , i , j , max , p , q , sum , k ; scanf ( <str> , & t ) ; while ( t > <int> ) { max = <int> ; sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( k = <int> ; k < n ; k ++ ) { p = n - <int> ; q = n - <int> - k ; sum = arr [ p ] [ q ] ; while ( p >= <int> ) { if ( arr [ p - <int> ] [ q ] > arr [ p - <int> ] [ q - <int> ] ) { sum = sum + arr [ p - <int> ] [ q ] ; p -- ; } else { sum = sum + arr [ p - <int> ] [ q - <int> ] ; p -- ; q -- ; } } if ( max < sum ) max = sum ; } result [ l ] = max ; l ++ ; t -- ; } l -- ; for ( ; r <= l ; r ++ ) printf ( <str> , result [ r ] ) ; return <int> ; }", "label": 1, "id": 4851}
{"input": "int main ( ) { int t , n , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } x = arr [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < x ) { x = arr [ i ] ; } } printf ( <str> , x * ( n - <int> ) ) ; } }", "label": 0, "id": 4852}
{"input": "int main ( ) { long int t , n , a [ <int> ] , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 1, "id": 4853}
{"input": "main ( ) { int t , i , j , k = <int> , flag = <int> ; long long int count = <int> , ans ; int n ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } count = <int> ; i = <int> ; while ( i < n - <int> ) { if ( a [ i ] > a [ i + <int> ] ) i ++ ; else { j = i ; k = <int> ; while ( j < n - <int> ) { if ( a [ j ] <= a [ j + <int> ] ) { count ++ ; j ++ ; k ++ ; } else break ; } flag = k ; while ( k -- ) { count = count + k ; } i = i + flag ; } } ans = count + n ; printf ( <str> , ans ) ; } }", "label": 1, "id": 4854}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4855}
{"input": "void main ( ) { int T , i , A , B , j , G , L , p ; printf ( <str> ) ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; G = <int> ; L = <int> ; p = A * B ; if ( A > B ) { for ( j = <int> ; j <= B ; j ++ ) { if ( B % j == <int> && A % j == <int> ) { G = G * j ; B = B / j ; A = A / j ; j = <int> ; } } L = p / G ; printf ( <str> , G , L ) ; } else if ( B > A ) { for ( j = <int> ; j <= A ; j ++ ) { if ( B % j == <int> && A % j == <int> ) { G = G * j ; B = B / j ; A = A / j ; j = <int> ; } } L = p / G ; printf ( <str> , G , L ) ; } else { printf ( <str> , A , B ) ; } } }", "label": 1, "id": 4856}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i ; int a [ n ] , length [ n ] ; int count = <int> , len ; int ans = n ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; length [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) { len = <int> ; while ( a [ i ] >= a [ i - <int> ] ) { i ++ ; len ++ ; } length [ count ] = len ; count ++ ; } } for ( i = <int> ; i < count ; i ++ ) { ans = ans + ( length [ i ] * ( length [ i ] - <int> ) ) / <int> ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 4857}
{"input": "main ( ) { int a ; int i , j , n ; scanf ( <str> , & a ) ; int num = a ; int r [ a ] ; while ( a > <int> ) { int sum = <int> ; int b [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int m = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; if ( b [ i ] [ j ] > m ) m = b [ i ] [ j ] ; } sum = sum + m ; } r [ a - <int> ] = sum ; a -- ; } for ( i = num - <int> ; i >= <int> ; i -- ) printf ( <str> , r [ i ] ) ; }", "label": 1, "id": 4858}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int A , B , GCD , LCM , x , y , r ; scanf ( <str> , & A , & B ) ; x = A ; y = B ; while ( B != <int> ) { r = A % B ; A = B ; B = r ; } GCD = A ; LCM = ( x * y ) / GCD ; printf ( <str> , GCD , LCM ) ; } }", "label": 1, "id": 4859}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , t , max , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) a [ i ] [ <int> ] = a [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == j ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else { if ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } } max = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( a [ n - <int> ] [ i ] > max ) max = a [ n - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4860}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , n ; scanf ( <str> , & n ) ; while ( n -- ) { for ( i = <int> ; i > n ; i -- ) for ( j = <int> ; j < i - <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i > n ; i -- ) { for ( j = <int> ; j < i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } printf ( <str> , a [ i ] [ j ] ) ; } } } }", "label": 1, "id": 4861}
{"input": "int max ( int x , int y ) { return x >= y ? x : y ; } int main ( ) { int t ; int curr [ MAX ] = { <int> } ; int new [ MAX ] = { <int> } ; int n ; int i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & new [ j ] ) ; for ( j = i ; j >= <int> ; j -- ) curr [ j ] = new [ j ] + max ( curr [ j ] , curr [ j - <int> ] ) ; curr [ <int> ] += new [ <int> ] ; } c = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( curr [ c ] < curr [ i ] ) c = i ; printf ( <str> , curr [ c ] ) ; } return <int> ; }", "label": 1, "id": 4862}
{"input": "int main ( ) { int t ; long long int a , b , gcd , lcm , x , y , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y ) { temp = x ; x = y ; y = temp % y ; } gcd = x ; lcm = ( a / x ) * b ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4863}
{"input": "void main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , s = <int> , min = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 4864}
{"input": "int max , x [ <int> ] [ <int> ] , r ; int func ( int , int ) ; int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & x [ i ] [ j ] ) ; } } max = <int> ; max = func ( <int> , <int> ) ; printf ( <str> , max ) ; } return <int> ; } int func ( int rt , int ct ) { int s ; if ( rt == r - <int> ) { return x [ rt ] [ ct ] ; } s = func ( rt + <int> , ct + <int> ) > func ( rt + <int> , ct ) ? func ( rt + <int> , ct + <int> ) : func ( rt + <int> , ct ) ; s = s + x [ rt ] [ ct ] ; return s ; }", "label": 2, "id": 4865}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int z = <int> ; z < t ; z ++ ) { int a , b ; unsigned long long int lcm , gcd ; scanf ( <str> , & a , & b ) ; for ( unsigned long long int i = <int> ; i <= a * b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; if ( i % a == <int> && i % b == <int> ) { lcm = i ; break ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4866}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , a , b , j , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; j = gcd ( a , b ) ; printf ( <str> , j , a * b / j ) ; } return <int> ; }", "label": 1, "id": 4867}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i , j ; scanf ( <str> , & a , & b ) ; for ( i = a > b ? b : a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { break ; } } for ( j = a > b ? a : b ; j <= a * b ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { break ; } } printf ( <str> , i , j ) ; } return <int> ; }", "label": 2, "id": 4868}
{"input": "int main ( ) { int a , b , c , m , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m , & n ) ; a = m ; b = n ; while ( ( a % b ) != <int> ) { c = b ; b = a % b ; a = c ; } printf ( <str> , b , ( m * n ) / b ) ; } return <int> ; }", "label": 1, "id": 4869}
{"input": "int main ( ) { int i , t , num1 , num2 , remainder , denominator , numerator , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; numerator = num1 ; denominator = num2 ; remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( num1 * num2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4870}
{"input": "int main ( ) { int t , a , b , lcm , gcd , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a || i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4871}
{"input": "int gcd ( int a , int b ) { int i ; i = ( a - <int> ) / <int> ; for ( ; i >= <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) return i ; } } int lcm ( int a , int b ) { int k , o ; o = gcd ( a , b ) ; k = ( b / o ) * a ; return k ; } int main ( ) { int t , a , b , l , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a == b ) { printf ( <str> , a , a ) ; break ; } else if ( a > b ) { l = gcd ( b , a ) ; m = lcm ( b , a ) ; } else { l = gcd ( a , b ) ; m = lcm ( a , b ) ; } printf ( <str> , l , m ) ; } return <int> ; }", "label": 1, "id": 4872}
{"input": "long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , g , l ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 4873}
{"input": "int gcd ( int m , int n ) { if ( m == <int> || n == <int> ) { return <int> ; } if ( m % n == <int> ) { return n ; } else { return gcd ( n , m % n ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; int m , n , c , d ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m , & n ) ; c = gcd ( m , n ) ; d = ( m * n ) / c ; printf ( <str> , c , d ) ; } }", "label": 1, "id": 4874}
{"input": "int main ( ) { int T , A , B , gcd , lcm , i ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; for ( i = <int> ; i <= A && i <= B ; ++ i ) { if ( A % i == <int> && B % i == <int> ) gcd = i ; } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4875}
{"input": "int main ( ) { int T , A , B , tmp ; double GCD , LCM ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; LCM = A * B * <fp> ; while ( B != <int> ) { tmp = A % B ; A = B ; B = tmp ; } GCD = A ; LCM /= GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 1, "id": 4876}
{"input": "int main ( ) { long long int s , c , i , p = <int> ; long long int N , T ; long int A [ <int> ] ; scanf ( <str> , & T ) ; while ( T -- ) { int m = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & A [ i ] ) ; s = <int> ; c = N ; for ( i = <int> ; i < N ; i ++ ) { if ( A [ i ] <= A [ i + <int> ] ) { c = c + s ; s = s ++ ; } else s = <int> ; } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 4877}
{"input": "main ( ) { int i , n , a , b , x , y , t , gcd , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , a , lcm ) ; } }", "label": 1, "id": 4878}
{"input": "int check ( int n ) { if ( n > <int> ) return n + check ( n - <int> ) ; else return <int> ; } int main ( ) { int t , n , i , j , sum , * a = NULL , tl , temp ; scanf ( <str> , & tl ) ; while ( tl -- ) { sum = <int> ; scanf ( <str> , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { temp = <int> ; for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ i ] ) { temp ++ ; i = j ; } else break ; } sum = sum + check ( temp ) ; } free ( a ) ; a = NULL ; printf ( <str> , sum + n ) ; } return <int> ; }", "label": 0, "id": 4879}
{"input": "void main ( ) { long int t , i , j , n , a [ <int> ] [ <int> ] , temp ; long int sum = <int> , max , k , loc [ <int> ] , loc1 [ <int> ] , var = <int> , var1 = <int> ; int calc [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } j = n - <int> ; max = a [ j ] [ <int> ] ; for ( k = <int> ; k < j + <int> ; k ++ ) { if ( a [ j ] [ k ] > max ) { max = a [ j ] [ k ] ; } } for ( k = <int> ; k < j + <int> ; k ++ ) { if ( max == a [ j ] [ k ] ) { loc1 [ var ] = k ; var ++ ; } } sum += max ; while ( j != <int> ) { var1 = <int> ; k = <int> ; j -- ; while ( k < var ) { temp = loc1 [ k ++ ] ; if ( temp == <int> ) { calc [ var1 ] = a [ j ] [ <int> ] ; loc [ var1 ++ ] = <int> ; } else if ( temp == j ) { calc [ var1 ] = a [ j ] [ j ] ; loc [ var1 ++ ] = j ; } else { if ( a [ j ] [ temp ] > a [ j ] [ temp - <int> ] ) { calc [ var1 ] = a [ j ] [ temp ] ; loc [ var1 ++ ] = temp ; } else if ( a [ j ] [ temp ] < a [ j ] [ temp - <int> ] ) { calc [ var1 ] = a [ j ] [ temp - <int> ] ; loc [ var1 ++ ] = temp - <int> ; } else { calc [ var1 ] = a [ j ] [ temp - <int> ] ; loc [ var1 ++ ] = temp - <int> ; calc [ var1 ] = a [ j ] [ temp ] ; calc [ var1 ++ ] = temp ; } } } max = calc [ <int> ] ; for ( k = <int> ; k < var1 ; k ++ ) { if ( calc [ k ] > max ) { max = calc [ k ] ; } } var = <int> ; for ( k = <int> ; k < var1 ; k ++ ) { if ( max == calc [ k ] ) { loc1 [ var ] = loc [ k ] ; var ++ ; } } sum += max ; } printf ( <str> , sum ) ; sum = <int> ; } }", "label": 1, "id": 4880}
{"input": "int main ( ) { int t ; sf ( <str> , & t ) ; while ( t -- ) { int a , b , n , m ; sf ( <str> , & a , & b ) ; n = a ; m = b ; while ( a % b != <int> ) { int t = a % b ; a = b ; b = t ; } pf ( <str> , b , ( n * m ) / b ) ; } return <int> ; }", "label": 1, "id": 4881}
{"input": "int main ( ) { int j , t ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { int n1 , n2 ; long long int l ; scanf ( <str> , & n1 , & n2 ) ; int a , b ; a = n1 ; b = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } l = ( ( a * b ) / n1 ) ; printf ( <str> , n1 , l ) ; } return <int> ; }", "label": 1, "id": 4882}
{"input": "int main ( ) { int a [ <int> ] ; int b , i = <int> , j , d , c ; scanf ( <str> , & b ) ; while ( i < b ) { scanf ( <str> , & a [ <int> ] ) ; scanf ( <str> , & a [ <int> ] ) ; j = <int> ; if ( a [ <int> ] > a [ <int> ] ) { d = a [ <int> ] , c = a [ <int> ] ; } else { d = a [ <int> ] , c = a [ <int> ] ; } while ( j != <int> ) { j = d % c ; d = c ; c = j ; } printf ( <str> , d ) ; printf ( <str> , ( ( a [ <int> ] * a [ <int> ] ) / d ) ) ; i = i + <int> ; } return <int> ; }", "label": 1, "id": 4883}
{"input": "int a [ ROWS ] ; int <unk> ; int <unk> ; int max ( index , n ) { if ( index >= <unk> && index <= <unk> ) { return a [ index ] ; } else { int offset = index - ( n - <int> ) * n / <int> ; int <unk> = n * ( n + <int> ) / <int> + offset ; int <unk> = <unk> + <int> ; int <unk> = max ( <unk> , n + <int> ) ; int <unk> = max ( <unk> , n + <int> ) ; return a [ index ] + ( <unk> > <unk> ? <unk> : <unk> ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; int lines ; int i ; while ( t -- ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines * ( lines + <int> ) / <int> ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } <unk> = ( lines - <int> ) * lines / <int> ; <unk> = ( lines + <int> ) * lines / <int> - <int> ; printf ( <str> , max ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 4884}
{"input": "main ( ) { int t , a , b , g , l , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } r = a ; while ( b % a != <int> ) { a = b % a ; } g = a ; l = r * b / g ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 4885}
{"input": "int gcd ( int m , int n ) { if ( n == <int> ) return m ; else return gcd ( n , m % n ) ; } int lcm ( int m , int n ) { return ( m * n ) / gcd ( m , n ) ; } int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int m , n , gc , lc ; scanf ( <str> , & m ) ; scanf ( <str> , & n ) ; gc = gcd ( m , n ) ; lc = lcm ( m , n ) ; printf ( <str> , gc ) ; printf ( <str> , lc ) ; } }", "label": 1, "id": 4886}
{"input": "int main ( ) { int number1 , number2 , test , i , x , a , b , c ; int gcd [ <int> ] ; int lcm [ <int> ] ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & number1 , & number2 ) ; a = number1 ; b = number2 ; while ( b != <int> ) { x = b ; b = a % x ; a = x ; } gcd [ i ] = a ; c = number1 / gcd [ i ] ; lcm [ i ] = number2 * c ; } for ( i = <int> ; i < test ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } return <int> ; }", "label": 1, "id": 4887}
{"input": "int main ( ) { int a , b , c , t , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( a != <int> ) { c = a ; a = b % a ; b = c ; } printf ( <str> , b , ( m * n ) / b ) ; } return <int> ; }", "label": 1, "id": 4888}
{"input": "char rbuffer [ rbuffer_size ] ; int rfptr = rbuffer_size ; char wbuffer [ wbuffer_size ] ; int wfptr = <int> ; int readno = <int> ; void rd ( ) { rfptr = <int> ; readno = read ( <int> , rbuffer , rbuffer_size ) ; } int get_i ( ) { int sum = <int> ; char c ; int sign = <int> ; while ( <int> ) { if ( ( rfptr >= rbuffer_size ) || ( rfptr >= readno ) ) rd ( ) ; c = rbuffer [ rfptr ++ ] ; if ( c == <char> ) { sign = - <int> ; } else { if ( c == <char> || c == <char> ) return sum * sign ; else sum = sum * <int> + c - <char> ; } } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int t , n , i ; int * * p ; int k ; int tempval ; t = get_i ( ) ; while ( t -- > <int> ) { n = get_i ( ) ; p = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= i ; k ++ ) { p [ i ] [ k ] = get_i ( ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k <= i ; k ++ ) { p [ i ] [ k ] += max ( p [ i + <int> ] [ k ] , p [ i + <int> ] [ k + <int> ] ) ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 4889}
{"input": "int max ( a , b ) { if ( a > b ) return a ; return b ; } int main ( ) { int t , i , k , * * j , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; j = ( int * * ) malloc ( l * sizeof ( int * ) ) ; for ( i = <int> ; i < l ; i ++ ) j [ i ] = ( int * ) malloc ( i * sizeof ( int ) ) ; for ( i = <int> ; i < l ; i ++ ) for ( k = <int> ; k <= i ; k ++ ) scanf ( <str> , & j [ i ] [ k ] ) ; for ( i = l - <int> ; i >= <int> ; i -- ) for ( k = <int> ; k <= i ; k ++ ) j [ i ] [ k ] += max ( j [ i + <int> ] [ k ] , j [ i + <int> ] [ k + <int> ] ) ; printf ( <str> , j [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4890}
{"input": "int main ( void ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 4891}
{"input": "char _str [ <int> ] ; int main ( void ) { int i , min , n , t , x ; READ_INT ( t ) ; while ( t -- ) { READ_INT ( n ) ; READ_INT ( min ) ; for ( i = <int> ; i < n ; i ++ ) { READ_INT ( x ) ; if ( x < min ) min = x ; } WRITE_INT ( ( n - <int> ) * ( long long ) min ) ; putchar_unlocked ( <char> ) ; } return <int> ; }", "label": 0, "id": 4892}
{"input": "int main ( void ) { int m , n , gcd = <int> , num , lcm = <int> , m1 , n1 ; scanf ( <str> , & num ) ; while ( num -- ) { scanf ( <str> , & m , & n ) ; m1 = m ; n1 = n ; while ( m != n ) { if ( m > n ) { m = m - n ; } else if ( m < n ) { n = n - m ; } else gcd = m ; } lcm = ( m1 * n1 ) / gcd ; printf ( <str> , gcd , lcm ) ; gcd = <int> ; lcm = <int> ; } return <int> ; }", "label": 3, "id": 4893}
{"input": "int main ( ) { int a [ <int> ] , i , j , k , c , t , n , l ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { j = i + <int> ; k = i ; while ( j < n ) { if ( a [ k ] <= a [ j ] ) { c ++ ; j ++ ; k ++ ; } else break ; } } printf ( <str> , n + c ) ; } return <int> ; }", "label": 3, "id": 4894}
{"input": "int Partition ( long long int A [ ] , int p , int r ) { long long int x = A [ r ] , temp ; int i = p - <int> , j ; for ( j = p ; j < r ; j ++ ) { if ( A [ j ] <= x ) { i = i + <int> ; temp = A [ i ] ; A [ i ] = A [ j ] ; A [ j ] = temp ; } } temp = A [ i + <int> ] ; A [ i + <int> ] = A [ r ] ; A [ r ] = temp ; return ( i + <int> ) ; } void QuickSort ( long long int A [ ] , int p , int r ) { if ( p < r ) { int q = Partition ( A , p , r ) ; QuickSort ( A , p , q - <int> ) ; QuickSort ( A , q + <int> , r ) ; } return ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; long long int A [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & A [ i ] ) ; QuickSort ( A , <int> , n - <int> ) ; printf ( <str> , ( ( n - <int> ) * A [ <int> ] ) ) ; } }", "label": 0, "id": 4895}
{"input": "int a [ <int> ] [ <int> ] , n ; int cache [ <int> ] [ <int> ] ; max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int fun ( int i , int j ) { int t ; if ( i + <int> == n ) { t = max ( a [ i ] [ j ] + a [ i + <int> ] [ j ] , a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ; cache [ i ] [ j ] = t ; return t ; } else if ( cache [ i ] [ j ] != <int> ) { return cache [ i ] [ j ] ; } else { t = a [ i ] [ j ] + max ( fun ( i + <int> , j ) , fun ( i + <int> , j + <int> ) ) ; cache [ i ] [ j ] = t ; return t ; } } int main ( ) { int t , ans , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; cache [ i ] [ j ] = <int> ; } n -- ; ans = fun ( <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 4896}
{"input": "long sum ( long ) ; int main ( ) { long t , n , arr [ <int> ] = { } , i , j , count ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { j = <int> ; while ( ( arr [ i ] <= arr [ i + <int> ] ) && ( i + <int> < n ) ) { i ++ ; j ++ ; } count += sum ( j ) ; } printf ( <str> , count ) ; } return <int> ; } long sum ( long n ) { long long s ; s = n * ( n + <int> ) / <int> ; return s ; }", "label": 0, "id": 4897}
{"input": "int main ( ) { int n , a , b , r ; double l ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; l = a * b ; do { r = a % b ; a = b ; b = r ; } while ( r != <int> ) ; printf ( <str> , a , l / a ) ; } }", "label": 1, "id": 4898}
{"input": "int main ( void ) { int i , t , n , * arr ; long long int small = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; arr = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( small > arr [ i ] ) small = arr [ i ] ; } printf ( <str> , ( small * ( n - <int> ) ) ) ; t -- ; } return <int> ; }", "label": 1, "id": 4899}
{"input": "int maxnum ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , a [ <int> ] [ <int> ] , max , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = maxnum ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } a [ i ] [ j + <int> ] = <int> ; } a [ n - <int> ] [ <int> ] = max ; for ( i = <int> ; i < n ; i ++ ) if ( a [ n - <int> ] [ i ] > max ) max = a [ n - <int> ] [ i ] ; printf ( <str> , max ) ; max = <int> ; } return ( <int> ) ; }", "label": 0, "id": 4900}
{"input": "int gcd ( int , int ) ; int main ( ) { int a [ <int> ] , b [ <int> ] ; int t , i , m , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { m = gcd ( a [ i ] , b [ i ] ) ; n = ( a [ i ] * b [ i ] ) / m ; printf ( <str> , m , n ) ; } return <int> ; } int gcd ( int a , int b ) { while ( a % b != <int> ) { int x = a % b ; a = b ; b = x ; } return b ; }", "label": 1, "id": 4901}
{"input": "int main ( ) { long int a [ <int> ] , b [ <int> ] , k ; long int i , j , n , max , min ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & a [ i ] , & b [ i ] ) ; for ( i = <int> ; i <= n ; i ++ ) { if ( a [ i ] > b [ i ] ) { max = a [ i ] ; min = b [ i ] ; } else { max = b [ i ] ; min = a [ i ] ; } if ( max % min == <int> ) printf ( <str> , min ) ; else { for ( j = min - <int> ; j > <int> ; j -- ) { if ( ( max % j == <int> ) && ( min % j == <int> ) ) break ; } printf ( <str> , j ) ; } if ( max % min == <int> ) printf ( <str> , min ) ; else { k = max + <int> ; do { k = k + <int> ; } while ( ( k % max != <int> ) || ( k % min != <int> ) ) ; printf ( <str> , k ) ; } printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 4902}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { long int a , b , i , min , gcd ; scanf ( <str> , & a , & b ) ; min = a < b ? a : b ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } printf ( <str> , gcd , a * b / gcd ) ; } return <int> ; }", "label": 2, "id": 4903}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; else if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } int main ( ) { int a , b , t , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 4904}
{"input": "int main ( void ) { int n , a , b , c , d ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a == <int> ) c = b ; else if ( b == <int> ) c = a ; if ( a > b ) d = b ; else d = a ; int i ; for ( i = <int> ; i <= d ; i ++ ) { if ( a % i == <int> && b % i == <int> ) c = i ; } printf ( <str> , c , ( a * b ) / c ) ; n -- ; } return <int> ; }", "label": 1, "id": 4905}
{"input": "int main ( ) { int t , N , i ; long long * a , mini ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & N ) ; a = ( long long * ) malloc ( N * sizeof ( long long ) ) ; mini = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < mini ) { mini = a [ i ] ; } } printf ( <str> , mini * ( N - <int> ) ) ; free ( a ) ; } }", "label": 0, "id": 4906}
{"input": "int main ( ) { int t ; long int k , a , b , j , i ; scanf ( <str> , & t ) ; while ( t -- ) { k = <int> ; scanf ( <str> , & a , & b ) ; i = b ; while ( i > <int> ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) break ; i -- ; } printf ( <str> , i , a * b / i ) ; } return <int> ; }", "label": 2, "id": 4907}
{"input": "int main ( ) { int t , n , i , j ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4908}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] , i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int m = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( m > arr [ i ] ) m = arr [ i ] ; } printf ( <str> , m * ( n - <int> ) ) ; } }", "label": 0, "id": 4909}
{"input": "int main ( ) { long long int t , i , a , x , b , min , max , j , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; min = a < b ? a : b ; gcd = <int> ; for ( j = <int> ; j <= min ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; } } max = a > b ? a : b ; j = max ; x = a * b ; while ( j <= x ) { if ( j % a == <int> && j % b == <int> ) { lcm = j ; break ; } j = j + max ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 4910}
{"input": "int main ( ) { int t , sum , i , j , n , max ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n - <int> ; i ++ ) { max = a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } sum += max ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 4911}
{"input": "int main ( ) { int t , r , j , i , a [ <int> ] [ <int> ] , sum ; scanf ( <str> , & t ) ; while ( t > <int> ) { sum = <int> ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = a [ <int> ] [ <int> ] ; i = <int> ; j = <int> ; while ( i < r ) { if ( a [ i ] [ j + <int> ] >= a [ i + <int> ] [ j ] ) { sum = sum + a [ i ] [ j + <int> ] ; j = j + <int> ; } else { sum = sum + a [ i + <int> ] [ j ] ; i = i + <int> ; } } printf ( <str> , sum ) ; t -- ; } }", "label": 1, "id": 4912}
{"input": "int <unk> ( int f , int s ) ; int <unk> ( int a ) ; main ( ) { int t , n , i , cnt = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; cnt = <unk> ( n ) ; printf ( <str> , cnt + n ) ; } } int <unk> ( n ) { int a = n , ar [ n ] , i , j , t , b = <int> , c = <int> ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; } for ( i = <int> ; i < a - <int> ; i ++ ) for ( j = i + <int> ; j < a ; j ++ ) if ( ar [ i ] >= ar [ j ] ) { t = ar [ i ] ; ar [ i ] = ar [ j ] ; ar [ j ] = t ; } for ( i = <int> ; i < a ; i ++ ) { c = <unk> ( ar [ i ] , ar [ i + <int> ] ) ; b = b + c ; } return b ; } int <unk> ( int f , int s ) { if ( f == s ) return <int> ; else if ( ( f + <int> ) == s ) return <int> ; else return <int> ; }", "label": 2, "id": 4913}
{"input": "int main ( void ) { int t = <int> ; int a = <int> , b = <int> , temp = <int> ; int lcm = <int> , gcd = <int> , i = <int> , j = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { lcm = gcd = <int> ; temp = <int> ; scanf ( <str> , & a , & b ) ; i = a ; j = b ; if ( b > a ) { temp = b ; b = a ; a = temp ; } temp = <int> ; while ( b != <int> ) { a %= b ; if ( b > a ) { temp = b ; b = a ; a = temp ; } } gcd = a ; lcm = printf ( <str> , gcd , gcd * ( i / gcd ) * ( j / gcd ) ) ; } return <int> ; }", "label": 1, "id": 4914}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { long unsigned int n ; scanf ( <str> , & n ) ; long unsigned int m = n ; long unsigned int a = <int> , b ; scanf ( <str> , & b ) ; while ( -- n > <int> ) { scanf ( <str> , & a ) ; b = a < b ? a : b ; } printf ( <str> , ( -- m ) * b ) ; -- t ; } return <int> ; }", "label": 0, "id": 4915}
{"input": "int main ( ) { int n , l , i , j , a [ <int> ] [ <int> ] , sum = <int> ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i <= l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> ) ; i = j = <int> ; sum = a [ i ] [ j ] ; while ( i <= l ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { sum += a [ i + <int> ] [ j ] ; i ++ ; } else { sum += a [ i + <int> ] [ j + <int> ] ; i ++ ; j ++ ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 4916}
{"input": "int main ( ) { int T , n , i , j , k , val , a [ <int> ] [ <int> ] = { <int> } , max ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( k == <int> ) a [ j ] [ k ] += a [ j - <int> ] [ k ] ; else if ( k == j ) a [ j ] [ k ] += a [ j - <int> ] [ k - <int> ] ; else { if ( a [ j - <int> ] [ k ] > a [ j - <int> ] [ k - <int> ] ) a [ j ] [ k ] += a [ j - <int> ] [ k ] ; else a [ j ] [ k ] += a [ j - <int> ] [ k - <int> ] ; } } } max = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) if ( a [ n - <int> ] [ j ] > max ) max = a [ n - <int> ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4917}
{"input": "int main ( void ) { int t , n , i , j , maxm ; int a [ <int> ] [ <int> ] ; int ans [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; ans [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; maxm = ans [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { ans [ i ] [ <int> ] = ans [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; if ( maxm < ans [ i ] [ <int> ] ) maxm = ans [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { ans [ i ] [ j ] = max ( ans [ i - <int> ] [ j ] , ans [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; if ( maxm < ans [ i ] [ j ] ) { maxm = ans [ i ] [ j ] ; } } } printf ( <str> , maxm ) ; } return <int> ; }", "label": 1, "id": 4918}
{"input": "int main ( ) { int test , tri [ SIZE ] [ SIZE ] , n , i , j , max ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j > <int> && j < i ) tri [ i ] [ j ] += ( ( tri [ i - <int> ] [ j ] > tri [ i - <int> ] [ j - <int> ] ) ? tri [ i - <int> ] [ j ] : tri [ i - <int> ] [ j - <int> ] ) ; else if ( j == <int> ) tri [ i ] [ j ] += tri [ i - <int> ] [ j ] ; else tri [ i ] [ j ] += tri [ i - <int> ] [ j - <int> ] ; } } max = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( max < tri [ n - <int> ] [ j ] ) max = tri [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4919}
{"input": "int main ( ) { int a , b , gcd , i , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; printf ( <str> , gcd , ( a * b ) / gcd ) ; } } } return <int> ; }", "label": 1, "id": 4920}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } } int gcd ( int x , int y ) { if ( x == <int> && y == <int> ) return ( <int> ) ; if ( x == y ) return ( x ) ; if ( x > y ) return gcd ( x - y , y ) ; return gcd ( x , y - x ) ; } int lcm ( int x , int y ) { int l ; l = ( x * y ) / gcd ( x , y ) ; return ( l ) ; }", "label": 1, "id": 4921}
{"input": "int main ( ) { int t , i , c , g , sum = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { c = <int> ; i = <int> ; sum = <int> ; g = <int> ; t -- ; scanf ( <str> , & i ) ; int a [ i ] ; g = i ; for ( c = <int> ; c < i ; c ++ ) { scanf ( <str> , & a [ c ] ) ; } for ( c = <int> ; c < i - <int> ; c ++ ) { if ( a [ <int> ] < a [ <int> ] ) { a [ <int> ] = a [ g - <int> ] ; sum = sum + a [ <int> ] ; g -- ; } else { sum = sum + a [ <int> ] ; a [ <int> ] = a [ g - <int> ] ; g -- ; } } printf ( <str> , sum ) ; if ( t > <int> ) { printf ( <str> ) ; } } return <int> ; }", "label": 1, "id": 4922}
{"input": "int main ( ) { int t , n , i , j , k = <int> ; scanf ( <str> , & t ) ; int arr [ <int> ] [ <int> ] ; int sum [ t ] ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( arr [ i + <int> ] [ j + <int> ] > arr [ i + <int> ] [ j ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; } } sum [ k ++ ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) arr [ i ] [ j ] = <int> ; } for ( i = <int> ; i < k ; i ++ ) printf ( <str> , sum [ i ] ) ; return <int> ; }", "label": 0, "id": 4923}
{"input": "int main ( ) { int test , row , i , k , j , t ; scanf ( <str> , & test ) ; for ( t = <int> ; t < test ; t ++ ) { scanf ( <str> , & row ) ; int a [ row ] [ row ] ; for ( k = <int> ; k < row ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & a [ k ] [ j ] ) ; } } for ( i = row - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < row - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4924}
{"input": "int main ( ) { long int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4925}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , arr [ <int> ] , i , min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( min > arr [ i ] ) min = arr [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 4926}
{"input": "int gcdf ( int a , int b ) { int m ; if ( ( a % b ) == <int> ) { return b ; } else { m = gcdf ( b , a % b ) ; } return m ; } int main ( ) { int T , N1 , N2 , i , gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N1 , & N2 ) ; gcd = lcm = <int> ; gcd = gcdf ( N1 , N2 ) ; lcm = ( N1 * N2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 4927}
{"input": "int main ( ) { int t ; long long int i , n , cost = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i - <int> ] ) { cost = cost + a [ i - <int> ] ; } else { cost = cost + a [ i ] ; } } printf ( <str> , cost ) ; cost = <int> ; } return <int> ; }", "label": 1, "id": 4928}
{"input": "int main ( ) { int a , b , c , m , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m , & n ) ; a = m ; b = n ; while ( c != <int> ) { c = a % b ; a = b ; b = c ; } printf ( <str> , a , ( m * n ) / a ) ; } return <int> ; }", "label": 1, "id": 4929}
{"input": "int a [ <int> ] [ <int> ] , mem [ <int> ] [ <int> ] ; int max ( int r , int c , int length ) { if ( r < length ) { if ( mem [ r ] [ c ] == - <int> ) { int s1 , s2 ; s1 = max ( r + <int> , c , length ) ; s2 = max ( r + <int> , c + <int> , length ) ; mem [ r ] [ c ] = a [ r ] [ c ] + ( s1 > s2 ? s1 : s2 ) ; } return mem [ r ] [ c ] ; } return <int> ; } int main ( ) { int t , l , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { mem [ i ] [ j ] = - <int> ; scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> , max ( <int> , <int> , l ) ) ; } return <int> ; }", "label": 1, "id": 4930}
{"input": "int main ( ) { int t , l , n , i , j , m ; int * a ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & l ) ; i = <int> ; n = l * ( l + <int> ) / <int> ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; while ( i <= n ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } for ( i = l - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i + <int> ; j ++ ) { n = ( i * ( i - <int> ) / <int> ) + j ; m = ( a [ ( i * ( i + <int> ) / <int> ) + j ] > a [ ( i * ( i + <int> ) / <int> ) + j + <int> ] ) ? a [ ( i * ( i + <int> ) / <int> ) + j ] : a [ ( i * ( i + <int> ) / <int> ) + j + <int> ] ; a [ n ] += m ; } } printf ( <str> , a [ <int> ] ) ; free ( a ) ; t -- ; } }", "label": 3, "id": 4931}
{"input": "int gcd ( int a , int b ) { if ( a == b ) { return a ; } if ( a == <int> || b == <int> ) { return <int> ; } if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; ++ i ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 4932}
{"input": "int n ; int max ( int n1 , int n2 ) { if ( n1 > n2 ) return n1 ; return n2 ; } int solve ( int a [ ] [ n ] , int i , int j ) { if ( i >= n ) return <int> ; else { int t1 , t2 ; t1 = solve ( a , i + <int> , j ) ; t2 = solve ( a , i + <int> , j + <int> ) ; return max ( t1 , t2 ) + a [ i ] [ j ] ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int i , j ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , solve ( a , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 4933}
{"input": "typedef struct node { struct node * left ; struct node * right ; int data ; } node ; int ans = <int> ; void <unk> ( node * p , int a [ <int> ] [ <int> ] , int l , int i , int j ) { if ( i <= l - <int> && j <= l - <int> ) { p -> data = a [ i ] [ j ] ; node * <unk> = ( node * ) malloc ( sizeof ( node ) ) ; node * <unk> = ( node * ) malloc ( sizeof ( node ) ) ; p -> left = <unk> ; p -> right = <unk> ; <unk> ( <unk> , a , l , i + <int> , j ) ; <unk> ( <unk> , a , l , i + <int> , j + <int> ) ; } else { p -> data = a [ i ] [ j ] ; p -> left = NULL ; p -> right = NULL ; } } <unk> ( node * p ) { if ( p == NULL ) return ; else { printf ( <str> , p -> data ) ; <unk> ( p -> left ) ; <unk> ( p -> right ) ; } } void compute ( node * p , int max ) { if ( p == NULL ) { if ( max > ans ) ans = max ; } else { max += ( p -> data ) ; compute ( p -> left , max ) ; compute ( p -> right , max ) ; } } int main ( ) { int a [ <int> ] [ <int> ] , n , j , l , i ; scanf ( <str> , & n ) ; while ( n != <int> ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } ans = <int> ; node * p = ( node * ) malloc ( sizeof ( node ) ) ; <unk> ( p , a , l , <int> , <int> ) ; compute ( p , <int> ) ; printf ( <str> , ans ) ; n -- ; } return <int> ; }", "label": 2, "id": 4934}
{"input": "int count_subarray ( int A [ ] , int size ) { int i , j , c = <int> ; for ( j = <int> ; j < size ; j ++ ) { c ++ ; i = j ; while ( i < size - <int> && A [ i ] <= A [ ++ i ] ) { c ++ ; } } return c ; } int main ( ) { int T , N , i , j ; unsigned int a [ <int> ] ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } printf ( <str> , count_subarray ( a , N ) ) ; } return <int> ; }", "label": 0, "id": 4935}
{"input": "int main ( ) { long a , b , i , t , c , n , j = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( b < a ) { t = b ; b = a ; a = t ; } while ( j > <int> ) { c = b * j ; if ( c % a == <int> ) { break ; } j ++ ; } printf ( <str> , ( a * b / c ) , c ) ; j = <int> ; } }", "label": 2, "id": 4936}
{"input": "main ( ) { long int i , n , min , <unk> ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( min > a [ i ] ) min = a [ i ] ; <unk> = min * ( n - <int> ) ; printf ( <str> , <unk> ) ; } }", "label": 0, "id": 4937}
{"input": "int main ( void ) { int T ; int n , i , j ; int len ; scanf ( <str> , & T ) ; int arr [ <int> ] ; while ( T -- ) { scanf ( <str> , & n ) ; len = ( n * ( n + <int> ) ) / <int> ; arr [ <int> ] = <int> ; i = <int> ; j = <int> ; for ( i = <int> ; i <= len ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { int l = ( i * ( i - <int> ) ) / <int> + <int> ; int l2 = l + i ; for ( j = l ; j < l2 ; j ++ ) { if ( j - i > l - i && j - i + <int> < l ) { if ( arr [ j - i ] >= arr [ j - i + <int> ] ) { arr [ j ] += arr [ j - i ] ; } else { arr [ j ] += arr [ j - i + <int> ] ; } } else if ( j - i + <int> < l ) { arr [ j ] += arr [ j - i + <int> ] ; } else if ( j - i > l - i ) { arr [ j ] += arr [ j - i ] ; } } } int max = <int> ; for ( i = len ; i >= len - n + <int> ; i -- ) { if ( max < arr [ i ] ) { max = arr [ i ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 4938}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int b [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int m , n , i , j ; int a [ <int> ] [ <int> ] , d [ <int> ] [ <int> ] ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { if ( j <= i ) scanf ( <str> , & a [ i ] [ j ] ) ; else a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { if ( i == <int> ) d [ i ] [ j ] = a [ i ] [ j ] ; if ( j == <int> && i != <int> ) d [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; d [ i ] [ j ] = a [ i ] [ j ] + max ( d [ i - <int> ] [ j - <int> ] , d [ i - <int> ] [ j ] ) ; } } int max = d [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( max < d [ n ] [ i ] ) max = d [ n ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4939}
{"input": "int gcd ( int a , int b ) { int r ; while ( b > <int> ) { r = a % b ; a = b ; b = r ; } return a ; } int main ( ) { int T , a , b , GCD , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; GCD = gcd ( a , b ) ; lcm = ( a * b ) / GCD ; printf ( <str> , GCD , lcm ) ; } return <int> ; }", "label": 1, "id": 4940}
{"input": "int findgcd ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , k ; unsigned long long int i ; scanf ( <str> , & a , & b ) ; k = findgcd ( a , b ) ; i = ( a * b ) ; printf ( <str> , k , i / k ) ; printf ( <str> ) ; } } int findgcd ( int a , int b ) { if ( a > b ) { if ( a % b == <int> ) return b ; else return findgcd ( b , a % b ) ; } else { if ( b % a == <int> ) return a ; else return findgcd ( b % a , a ) ; } }", "label": 1, "id": 4941}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int sum ( int * * A , int i , int j , int * * MEMO , int n ) { if ( i == n - <int> ) { MEMO [ i ] [ j ] = A [ i ] [ j ] ; return MEMO [ i ] [ j ] ; } if ( MEMO [ i + <int> ] [ j ] == - <int> && MEMO [ i + <int> ] [ j + <int> ] == - <int> ) MEMO [ i ] [ j ] = A [ i ] [ j ] + max ( sum ( A , i + <int> , j , MEMO , n ) , sum ( A , i + <int> , j + <int> , MEMO , n ) ) ; else if ( MEMO [ i + <int> ] [ j ] != - <int> && MEMO [ i + <int> ] [ j + <int> ] != - <int> ) MEMO [ i ] [ j ] = A [ i ] [ j ] + max ( MEMO [ i + <int> ] [ j ] , MEMO [ i + <int> ] [ j + <int> ] ) ; else if ( MEMO [ i + <int> ] [ j ] == - <int> ) MEMO [ i ] [ j ] = A [ i ] [ j ] + max ( sum ( A , i + <int> , j , MEMO , n ) , MEMO [ i + <int> ] [ j + <int> ] ) ; else if ( MEMO [ i + <int> ] [ j + <int> ] == - <int> ) MEMO [ i ] [ j ] = A [ i ] [ j ] + max ( sum ( A , i + <int> , j + <int> , MEMO , n ) , MEMO [ i + <int> ] [ j ] ) ; return MEMO [ i ] [ j ] ; } int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int n ; scanf ( <str> , & n ) ; int size = n ; int * * A = ( int * * ) malloc ( n * sizeof ( int * ) ) ; int * * MEMO = ( int * * ) malloc ( n * sizeof ( int * ) ) ; int i = <int> , j = <int> ; int level = <int> ; for ( i = <int> ; i < size ; i ++ ) { A [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; MEMO [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; memset ( A [ i ] , <int> , n * sizeof ( int ) ) ; memset ( MEMO [ i ] , - <int> , n * sizeof ( int ) ) ; } for ( i = <int> ; i < n ; i ++ ) { level ++ ; for ( j = <int> ; j < level && j < n ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } printf ( <str> , sum ( A , <int> , <int> , MEMO , size ) ) ; } }", "label": 0, "id": 4942}
{"input": "main ( ) { int a ; int i , j , n ; scanf ( <str> , & a ) ; int num = a ; int r [ a ] ; while ( a > <int> ) { int sum = <int> ; int b [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int m = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; if ( b [ i ] [ j ] > m ) m = b [ i ] [ j ] ; } sum = sum + m ; } r [ a - <int> ] = sum ; a -- ; } for ( i = num - <int> ; i >= <int> ; i -- ) printf ( <str> , r [ i ] ) ; }", "label": 1, "id": 4943}
{"input": "int a [ <int> ] [ <int> ] ; static int memsum [ <int> ] [ <int> ] ; int max ( int , int ) ; int sum ( int , int , int ) ; int main ( ) { int i , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { memsum [ i ] [ j ] = - <int> ; scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , sum ( <int> , <int> , n ) ) ; } return <int> ; } int max ( int x , int y ) { int max = <int> ; if ( x > y ) max = x ; else max = y ; return max ; } int sum ( int r , int c , int num ) { if ( r < num ) { if ( memsum [ r ] [ c ] == - <int> ) { memsum [ r ] [ c ] = a [ r ] [ c ] + max ( sum ( r + <int> , c , num ) , sum ( r + <int> , c + <int> , num ) ) ; } } return memsum [ r ] [ c ] ; }", "label": 0, "id": 4944}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , j , k , temp ; scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { for ( k = <int> ; k < ( n - j ) - <int> ; k ++ ) { if ( a [ k ] > a [ k + <int> ] ) { temp = a [ k ] ; a [ k ] = a [ k + <int> ] ; a [ k + <int> ] = temp ; } } } int cost = ( n - <int> ) * a [ <int> ] ; printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 4945}
{"input": "int main ( ) { int i , j , t , n , a [ <int> ] [ <int> ] ; int x , y , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( int i = n - <int> ; i <= <int> ; i -- ) { for ( j = i ; j <= <int> ; j -- ) { x = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; y = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; if ( x > y ) a [ i ] [ j ] = x ; else a [ i ] [ j ] = y ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 4946}
{"input": "int highest = <int> ; int trianglesum ( int * * array , int sum , int <unk> , int rowno , int maxrow ) { sum += array [ rowno ] [ <unk> ] ; if ( rowno == maxrow ) { if ( sum > highest ) { highest = sum ; } return <int> ; } trianglesum ( array , sum , <unk> , rowno + <int> , maxrow ) ; trianglesum ( array , sum , <unk> + <int> , rowno + <int> , maxrow ) ; return <int> ; } int main ( ) { int tests ; int rows ; int i , j , k ; int * * triangle ; scanf ( <str> , & tests ) ; for ( i = <int> ; i < tests ; i ++ ) { scanf ( <str> , & rows ) ; triangle = malloc ( sizeof ( int * ) * rows ) ; for ( j = <int> ; j < rows ; j ++ ) { triangle [ j ] = malloc ( sizeof ( int ) * ( j + <int> ) ) ; for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & ( triangle [ j ] [ k ] ) ) ; } } trianglesum ( triangle , <int> , <int> , <int> , rows - <int> ) ; printf ( <str> , highest ) ; } }", "label": 2, "id": 4947}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a == <int> || b == <int> ) { break ; } printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 4948}
{"input": "int main ( ) { int i , T , gcd , lcm , j ; long int A , B ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; for ( j = <int> ; j <= A && j <= B ; j ++ ) { if ( ( A % j == <int> ) && ( B % j == <int> ) ) gcd = j ; } lcm = A * B / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 4949}
{"input": "int max ( int i , int j ) { if ( i > j ) return i ; else return j ; } int main ( ) { int i , j , k , l , m , n , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int * a = ( int * ) malloc ( n * ( n + <int> ) / <int> * sizeof ( int ) ) ; int * dp = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n * ( n + <int> ) / <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; dp [ <int> ] = a [ <int> ] ; j = <int> ; for ( i = <int> ; i < n ; i ++ ) { dp [ i ] = dp [ i - <int> ] + max ( a [ i + j ] , a [ i + j + <int> ] ) ; j ++ ; } printf ( <str> , dp [ n - <int> ] ) ; } }", "label": 1, "id": 4950}
{"input": "void ans ( ) ; int main ( ) { int k , i ; scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) ans ( ) ; return <int> ; } void ans ( ) { int i , a [ <int> ] , j , count = <int> , ans , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ i ] ) { count ++ ; i = j ; } else break ; } ans = n + count ; printf ( <str> , ans ) ; }", "label": 3, "id": 4951}
{"input": "int compare ( const void * a , const void * b ) { return ( * ( long int * ) a - * ( long int * ) b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; long int a [ n ] ; long long int k ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } qsort ( a , n , sizeof ( long int ) , compare ) ; k = a [ <int> ] * ( n - <int> ) ; printf ( <str> , k ) ; } return <int> ; }", "label": 0, "id": 4952}
{"input": "long int gcd ( long int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; else if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( b - a , a ) ; } int main ( ) { int t ; long int a , b , gc , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gc = gcd ( a , b ) ; lcm = ( a * b ) / gc ; printf ( <str> , gc , lcm ) ; } }", "label": 0, "id": 4953}
{"input": "int fact ( int n ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; int a [ n + <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( n == <int> ) { printf ( <str> , n ) ; } else { int num = <int> , count = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( i == n - <int> ) { count = count + fact ( num ) ; } else if ( a [ i ] <= a [ i + <int> ] ) { num ++ ; } else if ( a [ i ] > a [ i + <int> ] ) { count = count + fact ( num ) ; num = <int> ; } } if ( count == <int> ) { printf ( <str> , count + <int> ) ; } else { printf ( <str> , count ) ; } } } } int fact ( int n ) { if ( n == <int> ) { return <int> ; } return n * fact ( n - <int> ) ; }", "label": 1, "id": 4954}
{"input": "int main ( ) { int t , i , n , j , pre ; long co = <int> , * a ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t > <int> && t <= <int> ) { printf ( <str> ) ; scanf ( <str> , & n ) ; if ( n < <int> || n > <int> ) break ; a = ( long int * ) malloc ( sizeof ( long int ) * n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] > alimit || a [ i ] < <int> ) exit ( <int> ) ; } for ( i = <int> ; i < n ; i ++ ) { pre = i ; for ( j = i ; j < n ; j ++ ) { if ( a [ j ] >= a [ pre ] ) co ++ ; if ( j != i ) pre = j ; } } printf ( <str> , co ) ; t -- ; } return <int> ; }", "label": 2, "id": 4955}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int arr [ <int> ] ; int n ; int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int count = <int> , flag = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] ) count ++ ; } printf ( <str> , ( count + n ) ) ; } return <int> ; }", "label": 1, "id": 4956}
{"input": "int main ( ) { int size , num , i , j , max ; int * data , * inp ; scanf ( <str> , & size ) ; for ( size ; size > <int> ; size -- ) { scanf ( <str> , & num ) ; data = ( int * ) malloc ( sizeof ( int ) * num ) ; inp = ( int * ) malloc ( sizeof ( int ) * num ) ; for ( i = <int> ; i < num ; i ++ ) data [ i ] = <int> ; for ( i = <int> ; i <= num ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) scanf ( <str> , & inp [ j ] ) ; if ( i > <int> ) { data [ i - <int> ] = data [ i - <int> ] + inp [ i - <int> ] ; } for ( j = i - <int> ; j >= <int> ; j -- ) { data [ j ] = data [ j ] > data [ j - <int> ] ? data [ j ] + inp [ j ] : data [ j - <int> ] + inp [ j ] ; } data [ <int> ] += inp [ <int> ] ; } max = data [ <int> ] ; for ( i = <int> ; i < num ; i ++ ) if ( max < data [ i ] ) max = data [ i ] ; printf ( <str> , max ) ; free ( inp ) ; free ( data ) ; } return <int> ; }", "label": 0, "id": 4957}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int temp [ t ] [ <int> ] ; int i , j ; for ( i = <int> ; i < t ; i ++ ) { int a , b , x , lcm , hcf ; scanf ( <str> , & a , & b ) ; x = a > b ? a : b ; for ( j = x ; j <= a * b ; j ++ ) { if ( j % a == <int> && j % b == <int> ) break ; } temp [ i ] [ <int> ] = j ; x = a < b ? a : b ; for ( j = x ; j >= <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) break ; } temp [ i ] [ <int> ] = j ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , temp [ i ] [ <int> ] , temp [ i ] [ <int> ] ) ; } }", "label": 2, "id": 4958}
{"input": "void main ( ) { int i , j , k = <int> , t , l = <int> , a [ <int> ] , n , temp = <int> ; ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( n >= <int> ) { for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { k = a [ i ] ; temp = a [ i ] ; a [ i ] = a [ i + <int> ] ; a [ i + <int> ] = temp ; } else k = a [ i + <int> ] ; l = l + k ; } } printf ( <str> , l ) ; l = <int> ; t -- ; } }", "label": 1, "id": 4959}
{"input": "int temp ; int getNum ( ) { temp = <int> ; int c = gc ( ) ; while ( c < <char> ) c = gc ( ) ; while ( c >= <char> ) { temp = temp * <int> + ( c - <char> ) ; c = gc ( ) ; } return temp ; } int main ( ) { int Matrix [ <int> ] [ <int> ] ; int outerloop = getNum ( ) ; int innerloop = <int> , i = <int> , j = <int> ; while ( ( outerloop -- ) > <int> ) { innerloop = getNum ( ) ; for ( i = <int> ; i < innerloop ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { Matrix [ i ] [ j ] = getNum ( ) ; } } for ( i = innerloop - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { Matrix [ i ] [ j ] += ( ( Matrix [ i + <int> ] [ j ] > Matrix [ i + <int> ] [ j + <int> ] ) ? Matrix [ i + <int> ] [ j ] : Matrix [ i + <int> ] [ j + <int> ] ) ; } } <unk> ( Matrix , sizeof ( int ) , <int> , stdout ) ; } }", "label": 1, "id": 4960}
{"input": "int i , j , k ; int main ( ) { int test , n ; scanf ( <str> , & test ) ; for ( k = <int> ; k < test ; k ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] , s [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( j = <int> ; j < n ; j ++ ) s [ n - <int> ] [ j ] = a [ n - <int> ] [ j ] ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( s [ i + <int> ] [ j ] > s [ i + <int> ] [ j + <int> ] ) s [ i ] [ j ] = a [ i ] [ j ] + s [ i + <int> ] [ j ] ; else s [ i ] [ j ] = a [ i ] [ j ] + s [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , s [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4961}
{"input": "int main ( ) { int t ; long long a , b , g , c , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = a ; c = b % a ; while ( c ) { d = c ; c = g % c ; g = d ; } printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 0, "id": 4962}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } if ( n == <int> ) printf ( <str> , a [ <int> ] [ <int> ] ) ; else { for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) a [ i ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; } } } max = a [ n - <int> ] [ <int> ] ; for ( i = n - <int> , j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j ] > max ) max = a [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; } } return <int> ; }", "label": 1, "id": 4963}
{"input": "void swap ( int * x , int * y ) ; int main ( ) { int t , n , i , j , min , key ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { key = a [ i ] ; for ( j = i - <int> ; j >= <int> ; j -- ) { if ( key < a [ j ] ) a [ j + <int> ] = a [ j ] ; else break ; } a [ j + <int> ] = key ; } printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; } void swap ( int * x , int * y ) { int temp = * x ; * x = * y ; * y = temp ; }", "label": 2, "id": 4964}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; int long total = <int> ; scanf ( <str> , & n ) ; int long a [ <int> ] ; int long d [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { d [ i ] = <int> ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] >= a [ i ] ) d [ i + <int> ] = d [ i ] + <int> ; } for ( i = <int> ; i < n ; i ++ ) { total = total + d [ i ] ; } printf ( <str> , total ) ; } }", "label": 0, "id": 4965}
{"input": "int gcd ( int a , int b ) { if ( a > b ) { if ( a % b == <int> ) return b ; else gcd ( b , a - b ) ; } else { if ( b % a == <int> ) return a ; else gcd ( a , b - a ) ; } } void main ( ) { int t , a , b , g ; long long l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( long long ) a * b / g ) ; } ; }", "label": 0, "id": 4966}
{"input": "int maxatnode ( int * * a , int i , int j , int n ) { if ( i == n ) return <int> ; int sum ; int ml = maxatnode ( a , i + <int> , j , n ) ; int mr = maxatnode ( a , i + <int> , j + <int> , n ) ; sum = * ( * ( a + i ) + j ) + ( ml < mr ? mr : ml ) ; return sum ; } int main ( ) { int N , k ; scanf ( <str> , & N ) ; for ( k = <int> ; k < N ; k ++ ) { int n , i , j ; scanf ( <str> , & n ) ; int * * a ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { * ( a + i ) = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , * ( a + i ) + j ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , * * a ) ; for ( i = <int> ; i < n ; i ++ ) { free ( * ( a + i ) ) ; } free ( a ) ; } return <int> ; }", "label": 0, "id": 4967}
{"input": "int main ( ) { int t , k ; long int a , b , i , x , y , c ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) for ( i = a ; i >= <int> ; i -- ) { x = a % i ; y = b % i ; if ( x == <int> && y == <int> ) { printf ( <str> , i ) ; break ; } } else for ( i = b ; i >= <int> ; i -- ) { x = a % i ; y = b % i ; if ( x == <int> && y == <int> ) { printf ( <str> , i ) ; break ; } } c = a * b / i ; printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 4968}
{"input": "int main ( ) { int t , i , a , b , x , y , lcm , hcf , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i = i + <int> ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { m = b ; b = a % b ; a = m ; } hcf = a ; lcm = x * y / hcf ; printf ( <str> , hcf , lcm ) ; } }", "label": 1, "id": 4969}
{"input": "main ( ) { int a , b , num , den , rem , t , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a < b ) { num = b ; den = a ; } else { num = a ; den = b ; } rem = ( a ) % ( b ) ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } lcm = ( a * b ) / den ; printf ( <str> , den , lcm ) ; } return <int> ; }", "label": 1, "id": 4970}
{"input": "void getint ( int * a ) ; int main ( ) { int n , l , i , j , a [ <int> ] [ <int> ] ; getint ( & n ) ; while ( n -- ) { getint ( & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { getint ( & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= ( l - i - <int> ) ; j ++ ) { a [ l - i - <int> ] [ j ] += ( a [ l - i ] [ j ] > a [ l - i ] [ j + <int> ] ) ? a [ l - i ] [ j ] : a [ l - i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } void getint ( int * a ) { int c , num = <int> ; while ( ( c = getchar_unlocked ( ) ) != <char> && c != <char> && c != EOF ) { num = ( num << <int> ) + ( num << <int> ) + ( c - <char> ) ; } * a = num ; }", "label": 1, "id": 4971}
{"input": "int main ( void ) { int t , n , i , j , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { s = max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; a [ i ] [ j ] = a [ i ] [ j ] + s ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int a , int b ) { int s ; if ( a == b ) s = a ; if ( a > b ) s = a ; else s = b ; return s ; }", "label": 0, "id": 4972}
{"input": "int main ( ) { int n , a [ <int> ] , t , i , j , k , b [ <int> ] , <unk> , sum ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ i ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ j ] > <int> ) { b [ k ] = a [ j ] ; k ++ ; } while ( k != <int> ) { <unk> = b [ k ] ; sum = <unk> ; if ( <unk> != b [ k - <int> ] ) sum = sum + b [ k - <int> ] ; k -- ; } } } printf ( <str> , sum ) ; t -- ; } return <int> ; }", "label": 3, "id": 4973}
{"input": "long int gcd ( long int a , long int b ) { if ( a == <int> ) { return b ; } else { return gcd ( b % a , a ) ; } } unsigned long long int lcm ( long int a , long int b ) { long int g ; g = gcd ( a , b ) ; if ( g == <int> ) { return a * b ; } else { return g * lcm ( a / g , b / g ) ; } } int main ( void ) { unsigned long long int T , A , B , i , g , l ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; g = gcd ( A , B ) ; l = lcm ( A , B ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 4974}
{"input": "int main ( ) { long long t = <int> , a = <int> , b = <int> , temp = <int> , gcd = <int> , lcm = <int> , num1 = <int> , num2 = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; num1 = a ; num2 = b ; while ( b > <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 4975}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i ] [ <int> ] = a [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; } else if ( j == i ) { a [ i ] [ j ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { b = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; c = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; ( b > c ) ? ( a [ i ] [ j ] = b ) : ( a [ i ] [ j ] = c ) ; } } } int max = a [ n - <int> ] [ <int> ] ; for ( int j = <int> ; j < n ; j ++ ) { if ( max < a [ n - <int> ] [ j ] ) { max = a [ n - <int> ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 4976}
{"input": "long gcd ( long a , long b ) { while ( a != <int> && b != <int> ) { if ( a > b ) a %= b ; else b %= a ; } return ( a > b ? a : b ) ; } int main ( ) { long t ; scanf ( <str> , & t ) ; while ( t -- ) { long n1 , n2 , c ; scanf ( <str> , & n2 , & n1 ) ; c = gcd ( n1 , n2 ) ; printf ( <str> , c , n1 * n2 / c ) ; } }", "label": 0, "id": 4977}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] = { <int> } , b [ <int> ] = { <int> } , i , j = <int> , sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ , j ++ ) { if ( a [ i ] < a [ i + <int> ] ) b [ j ] = a [ i ] ; else b [ j ] = a [ i + <int> ] ; } for ( i = <int> ; i < j ; i ++ ) sum += b [ i ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4978}
{"input": "int T , i , n , j , k , max , sum , carry ; int check ( int b [ ] , int n ) { for ( i = <int> ; i < n - <int> ; i ++ ) if ( b [ i ] == <int> ) return <int> ; return <int> ; } int main ( ) { scanf ( <str> , & T ) ; int a [ <int> ] [ <int> ] ; int b [ <int> ] ; for ( k = <int> ; k < T ; k ++ ) { max = - <int> ; sum = carry = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] = <int> ; } b [ n - <int> ] = - <int> ; do { carry = b [ n - <int> ] + <int> ; b [ n - <int> ] = carry ; carry /= <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { carry += b [ i ] ; b [ i ] = carry ; carry /= <int> ; } sum = a [ <int> ] [ <int> ] ; j = <int> ; for ( i = <int> ; i < n ; i ++ ) sum += ( ( b [ i - <int> ] == <int> ) ? a [ i ] [ j ] : a [ i ] [ ++ j ] ) ; if ( max < sum ) max = sum ; } while ( check ( b , n ) ) ; printf ( <str> , max ) ; system ( <str> ) ; } }", "label": 2, "id": 4979}
{"input": "long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; long int a , b , g ; long long int l ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) ; l /= ( long long int ) g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 4980}
{"input": "int t ; long n , a [ <int> ] , i ; long long min ; main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; else if ( min > a [ i ] ) min = a [ i ] ; } min *= ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 4981}
{"input": "int arr [ <int> ] [ <int> ] , indArr [ <int> ] ; int init ( ) { int i = <int> , j = <int> ; for ( ; i < <int> ; i ++ ) { indArr [ i ] = - <int> ; for ( ; j < <int> ; j ++ ) arr [ i ] [ j ] = - <int> ; } indArr [ <int> ] = <int> ; } int findMax ( int index , int rowC ) { int indexM = <int> , i = <int> ; for ( ; i <= rowC ; i ++ ) { if ( arr [ index ] [ i ] > arr [ index ] [ indexM ] ) indexM = i ; } return indexM ; } int findMax2 ( int index , int rowC ) { if ( rowC == <int> ) return rowC ; else if ( arr [ index ] [ rowC ] == - <int> ) return rowC - <int> ; else { if ( arr [ index ] [ rowC ] > arr [ index ] [ rowC - <int> ] ) return rowC ; else return rowC - <int> ; } } void SumMaxLength ( int startI , int rowC ) { int sumMax = <int> , j = rowC - <int> , indexM = <int> ; indexM = findMax ( startI + rowC - <int> , rowC ) ; sumMax = arr [ startI + rowC - <int> ] [ indexM ] ; for ( ; j >= <int> ; j -- ) { indexM = findMax2 ( startI + j , indexM ) ; sumMax += arr [ startI + j ] [ indexM ] ; } printf ( <str> , sumMax ) ; } int main ( ) { int i = <int> , cnt = <int> , len = <int> , val , j = <int> , indarr = <int> ; scanf ( <str> , & cnt ) ; indArr [ indarr ++ ] = <int> ; while ( cnt -- ) { scanf ( <str> , & val ) ; indArr [ indarr ] = indArr [ indarr - <int> ] + val ; len = <int> ; while ( val -- ) { for ( j = <int> ; j < len ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; i ++ ; len ++ ; } SumMaxLength ( indArr [ indarr - <int> ] , indArr [ indarr ] - indArr [ indarr - <int> ] ) ; indarr ++ ; } return <int> ; }", "label": 3, "id": 4982}
{"input": "int main ( ) { int i , j , k ; for ( i = <int> ; i <= <int> ; i ++ ) { k = <int> + i ; for ( j = <int> ; j <= <int> ; j ++ ) { if ( j <= i ) printf ( <str> ) ; else printf ( <str> ) ; } printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 4983}
{"input": "int main ( ) { int t , i , j , line ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & line ) ; int a [ line ] [ line ] ; for ( i = <int> ; i < line ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } int sum = <int> ; for ( i = <int> ; i < line ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == j ) sum += a [ i ] [ j ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 4984}
{"input": "int main ( ) { int s , i , j , n , b ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( b = <int> ; b < n ; b ++ ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = s - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 4985}
{"input": "int main ( ) { int n , i , count , n1 , arr [ <int> ] ; scanf ( <str> , & n1 ) ; while ( n1 -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; count = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) count += arr [ i ] > arr [ i + <int> ] ? arr [ i + <int> ] : arr [ i ] ; printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 4986}
{"input": "int main ( void ) { int n , a ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a ) ; int t [ a ] [ a ] , dp [ a ] [ a ] , i , j ; for ( i = <int> ; i < a ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & t [ i ] [ j ] ) ; } long int max = <int> ; for ( i = <int> ; i < a ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { if ( i == <int> ) dp [ i ] [ j ] = t [ i ] [ j ] ; else dp [ i ] [ j ] = t [ i ] [ j ] + dp [ i - <int> ] [ j ] ; } else if ( j == i ) { dp [ i ] [ j ] = t [ i ] [ j ] + dp [ i - <int> ] [ j - <int> ] ; } else { if ( t [ i - <int> ] [ j - <int> ] > t [ i - <int> ] [ j ] ) dp [ i ] [ j ] = t [ i ] [ j ] + dp [ i - <int> ] [ j - <int> ] ; else dp [ i ] [ j ] = t [ i ] [ j ] + dp [ i - <int> ] [ j ] ; } if ( i == a - <int> ) { if ( dp [ i ] [ j ] > max ) max = dp [ i ] [ j ] ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 4987}
{"input": "int GCD ( int a , int b ) { int t ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } return a ; } int main ( ) { int a , b , c , t , lcm ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; c = GCD ( a , b ) ; lcm = a * b / c ; printf ( <str> , c , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 4988}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( void ) { int a , b , n , i ; unsigned long long int lcm = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd ( a , b ) ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( <str> , gcd ( a , b ) , lcm ) ; } return <int> ; }", "label": 1, "id": 4989}
{"input": "int gcd ( int l , int s ) { int p ; p = l % s ; if ( p == <int> ) return s ; else p = gcd ( s , p ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , m ; scanf ( <str> , & n , & m ) ; int g ; if ( n > m ) g = gcd ( n , m ) ; else g = gcd ( m , n ) ; printf ( <str> , g , m * n / g ) ; } return <int> ; }", "label": 1, "id": 4990}
{"input": "int main ( ) { long long t , n , x , y , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & y ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; y = ( y > x ? x : y ) ; } i -- ; printf ( <str> , y * i ) ; } return <int> ; }", "label": 0, "id": 4991}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , i , min = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ; printf ( <str> , ( min * ( n - <int> ) ) ) ; } }", "label": 0, "id": 4992}
{"input": "struct node { int triangle [ <int> ] [ <int> ] ; int max ; struct node * next ; } ; typedef struct node * NODE ; NODE getnode ( void ) { return ( malloc ( sizeof ( struct node ) ) ) ; } int next ( int mask [ ] , int n ) { int i ; for ( i = <int> ; ( i < n ) && mask [ i ] ; ++ i ) mask [ i ] = <int> ; if ( i < n ) { mask [ i ] = <int> ; return <int> ; } return <int> ; } int main ( void ) { int rows ; int i , j , k , count ; int r , c ; int bin [ <int> ] ; int sum = <int> ; int testcases ; NODE temp , head , cur ; scanf ( <str> , & testcases ) ; for ( count = <int> ; count < testcases ; count ++ ) { temp = getnode ( ) ; scanf ( <str> , & rows ) ; if ( rows <= <int> || rows > <int> ) exit ( <int> ) ; for ( i = <int> ; i <= rows ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & temp -> triangle [ i - <int> ] [ j ] ) ; if ( temp -> triangle [ i - <int> ] [ j ] <= <int> || temp -> triangle [ i - <int> ] [ j ] > <int> ) exit ( <int> ) ; } if ( count == <int> ) { head = temp ; cur = head ; } else { cur -> next = temp ; cur = cur -> next ; } } cur = head ; for ( count = <int> ; count < testcases ; count ++ ) { cur -> max = <int> ; for ( j = <int> ; j < rows ; j ++ ) { bin [ j ] = <int> ; cur -> max += cur -> triangle [ j ] [ <int> ] ; } while ( next ( bin , rows - <int> ) ) { k = <int> ; r = <int> ; c = <int> ; sum = <int> ; for ( j = <int> ; j < rows ; j ++ ) { sum += cur -> triangle [ r ++ ] [ c ] ; c = c + bin [ k ++ ] ; } if ( sum > cur -> max ) cur -> max = sum ; } cur = cur -> next ; } printf ( <str> ) ; cur = head ; while ( cur != NULL ) { printf ( <str> , cur -> max ) ; cur = cur -> next ; } return <int> ; }", "label": 3, "id": 4993}
{"input": "int triangle [ MAXSIZE ] ; char buffer [ <int> ] ; int main ( void ) { int t , N , n , index = <int> , num = <int> , i , j , k , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & N ) ; n = N ; while ( n -- ) { read ( <int> , buffer , <int> ) ; i = <int> ; while ( buffer [ i ] != <char> ) { if ( buffer [ i ] == <char> ) { triangle [ index ] = num ; num = <int> ; index ++ ; } else { num = num * <int> + ( buffer [ i ] - <int> ) ; } i ++ ; } triangle [ index ] = num ; num = <int> ; index ++ ; } k = N - <int> ; while ( k >= <int> ) { m = k * ( k + <int> ) / <int> ; for ( j = <int> ; j <= k ; j ++ ) { triangle [ m + j ] = ( ( ( triangle [ m + j ] + triangle [ m + j + k + <int> ] ) > ( triangle [ m + j ] + triangle [ m + j + k + <int> ] ) ) ? ( triangle [ m + j ] + triangle [ m + j + k + <int> ] ) : ( triangle [ m + j ] + triangle [ m + j + k + <int> ] ) ) ; } k -- ; } printf ( <str> , triangle [ <int> ] ) ; index = <int> ; } return <int> ; }", "label": 1, "id": 4994}
{"input": "int maxsum ( int n , int arr ) ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int i , j , n , a ; printf ( <str> ) ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { a = max ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; i -- ; arr [ i ] [ j ] = a + arr [ i ] [ j ] ; i ++ ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 1, "id": 4995}
{"input": "int arr [ <int> ] ; void merge ( int arr [ ] , int l , int m , int r ) { int i , j , k ; int n1 = m - l + <int> ; int n2 = r - m ; int L [ n1 ] , R [ n2 ] ; for ( i = <int> ; i < n1 ; i ++ ) L [ i ] = arr [ l + i ] ; for ( j = <int> ; j < n2 ; j ++ ) R [ j ] = arr [ m + <int> + j ] ; i = <int> ; j = <int> ; k = l ; while ( i < n1 && j < n2 ) { if ( L [ i ] <= R [ j ] ) { arr [ k ] = L [ i ] ; i ++ ; } else { arr [ k ] = R [ j ] ; j ++ ; } k ++ ; } while ( i < n1 ) { arr [ k ] = L [ i ] ; i ++ ; k ++ ; } while ( j < n2 ) { arr [ k ] = R [ j ] ; j ++ ; k ++ ; } } void mergeSort ( int arr [ ] , int l , int r ) { if ( l < r ) { int m = l + ( r - l ) / <int> ; mergeSort ( arr , l , m ) ; mergeSort ( arr , m + <int> , r ) ; merge ( arr , l , m , r ) ; } } int main ( ) { int i , n , T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; mergeSort ( arr , <int> , n - <int> ) ; printf ( <str> , arr [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 4996}
{"input": "int findd ( int , int ) ; int arr [ <int> ] [ <int> ] , n ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , res ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } res = findd ( <int> , <int> ) ; printf ( <str> , res ) ; printf ( <str> ) ; } getchar ( ) ; return <int> ; } int findd ( int i , int j ) { int t1 , t2 , t ; if ( i > n ) { return <int> ; } t1 = findd ( i + <int> , j ) ; t2 = findd ( i + <int> , j + <int> ) ; t = arr [ i ] [ j ] + ( t1 > t2 ? t1 : t2 ) ; return t ; }", "label": 2, "id": 4997}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } } int gcd ( int x , int y ) { if ( x == <int> && y == <int> ) return ( <int> ) ; if ( x == y ) return ( x ) ; if ( x > y ) return gcd ( x - y , y ) ; return gcd ( x , y - x ) ; } int lcm ( int x , int y ) { int i , max ; max = x > y ? x : y ; for ( i = max ; i <= x * y ; i ++ ) { if ( i % x == <int> && i % y == <int> ) break ; } return ( i ) ; }", "label": 2, "id": 4998}
{"input": "int chck ( int a [ ] , int l , int u ) { int flag = <int> , i ; for ( i = l ; i < u ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) flag = <int> ; } return flag ; } int main ( void ) { int t , i , j , n , c , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = i ; j < n ; j ++ ) if ( i == j ) c ++ ; else if ( chck ( a , i , j ) ) c ++ ; printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 4999}
{"input": "int gcd ( int n1 , int n2 ) { if ( n2 != <int> ) return gcd ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int t , a , b , a2 , b2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; a2 = a ; b2 = b ; printf ( <str> , gcd ( a , b ) , a2 * b2 / gcd ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 5000}
{"input": "int main ( ) { long int t , n , i , num , min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num ) ; if ( num < min ) min = num ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5001}
{"input": "int main ( ) { int a , t ; scanf ( <str> , & a ) ; int i , j , d [ a ] , e [ a ] , f [ a ] , g [ a ] , lcm [ a ] ; for ( i = <int> ; i <= a ; i ++ ) { scanf ( <str> , & d [ i ] , & e [ i ] ) ; f [ i ] = d [ i ] ; g [ i ] = e [ i ] ; } for ( i = <int> ; i <= a ; i ++ ) { while ( e [ i ] != <int> ) { t = e [ i ] ; e [ i ] = d [ i ] % e [ i ] ; d [ i ] = t ; } lcm [ i ] = f [ i ] * g [ i ] / d [ i ] ; printf ( <str> , d [ i ] , lcm [ i ] ) ; } return <int> ; }", "label": 1, "id": 5002}
{"input": "int main ( ) { int t , n , i , j ; char a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - i ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5003}
{"input": "int main ( ) { int t , l , arr [ <int> ] [ <int> ] = { <int> } , i , sum [ <int> ] = { <int> } , j , k ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = l - <int> ; i >= <int> ; i -- ) { sum [ i ] = <int> ; j = l - <int> ; k = i ; sum [ i ] += arr [ j ] [ k ] ; while ( j >= <int> && k >= <int> ) { if ( arr [ j - <int> ] [ k ] > arr [ j - <int> ] [ k - <int> ] ) sum [ i ] += arr [ j - <int> ] [ k ] ; else { sum [ i ] += arr [ j - <int> ] [ k - <int> ] ; k = k - <int> ; } j -- ; } } int max = sum [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( <str> , max ) ; t -- ; } return <int> ; }", "label": 1, "id": 5004}
{"input": "int main ( void ) { int t , n , i , k , j , sum = <int> , flag = <int> , num ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { j = <int> ; k = <int> ; while ( j <= i ) { scanf ( <str> , & num ) ; if ( num == <int> ) flag = <int> ; if ( num > k ) { k = num ; } j ++ ; } sum = sum + k ; } if ( flag = <int> ) printf ( <str> , sum - <int> ) ; else printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5005}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int a , b ; scanf ( <str> , & a , & b ) ; int min ; if ( a > b ) { min = b ; } else { min = a ; } int num ; for ( int i = min ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { num = i ; break ; } } int sum1 = a ; int sum2 = b ; while ( <int> ) { if ( sum1 == sum2 ) { break ; } else if ( sum1 > sum2 ) { sum2 = sum2 + b ; } else if ( sum2 > sum1 ) { sum1 = sum1 + a ; } } printf ( <str> , num , sum1 ) ; t -- ; } return <int> ; }", "label": 2, "id": 5006}
{"input": "int read_int ( ) { char c = gc ( ) ; while ( c < <char> || c > <char> ) c = gc ( ) ; int ret = <int> ; while ( c >= <char> && c <= <char> ) { ret = <int> * ret + c - <int> ; c = gc ( ) ; } return ret ; } int main ( void ) { int i , j , n , c ; int t ; t = read_int ( ) ; while ( t -- ) { n = read_int ( ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = read_int ( ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { c = a [ i + <int> ] [ j ] ; } else { c = a [ i + <int> ] [ j + <int> ] ; } a [ i ] [ j ] = a [ i ] [ j ] + c ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5007}
{"input": "int main ( ) { int t , a , b , i , j ; scanf ( <str> , & t ) ; if ( t <= <int> && t >= <int> ) while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a <= <int> && a >= <int> && b <= <int> && b >= <int> ) { if ( a > b ) i = b ; else i = a ; for ( ; ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) printf ( <str> , i ) ; break ; } j = a * b / i ; printf ( <str> , j ) ; } else break ; } return <int> ; }", "label": 1, "id": 5008}
{"input": "int main ( ) { int t , n , i , j , c ; long long int r ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; c ++ ; } for ( i = <int> ; i < n ; i ++ ) { r = a [ i ] ; for ( j = i + <int> ; j <= n ; j ++ ) { if ( r < a [ j ] ) { c ++ ; r = a [ j ] ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 5009}
{"input": "int myfunc ( int , int ) ; int a [ <int> ] [ <int> ] , n , aux [ <int> ] [ <int> ] ; int main ( ) { int t , i , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i ; j ++ ) a [ i - <int> ] [ j ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j < i ; j ++ ) scanf ( <str> , & a [ i - <int> ] [ j ] ) ; max = myfunc ( <int> , <int> ) ; printf ( <str> , max ) ; } return ( <int> ) ; } int myfunc ( int r , int c ) { int i , j ; for ( j = <int> ; j < n ; j ++ ) aux [ n - <int> ] [ j ] = a [ n - <int> ] [ j ] ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( aux [ i + <int> ] [ j + <int> ] > aux [ i + <int> ] [ j ] ) aux [ i ] [ j ] = a [ i ] [ j ] + aux [ i + <int> ] [ j + <int> ] ; else aux [ i ] [ j ] = a [ i ] [ j ] + aux [ i + <int> ] [ j ] ; } } return ( aux [ <int> ] [ <int> ] ) ; }", "label": 0, "id": 5010}
{"input": "int main ( ) { int T , A , B , x , a , b ; scanf ( <str> , T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; a = A ; b = B ; while ( B != <int> ) { x = B ; B = A % B ; A = x ; } printf ( <str> , x , ( a * b ) / x ) ; } return <int> ; }", "label": 3, "id": 5011}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t , i , j , n , max ; scanf ( <str> , & t ) ; while ( t ) { max = - <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { a [ i ] [ j ] = - <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else if ( a [ i - <int> ] [ j ] = - <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] += ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ) ; } } for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j ] > max ) max = a [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; t -- ; } return <int> ; }", "label": 1, "id": 5012}
{"input": "int max ( int a , int b ) { return a >= b ? a : b ; } int a [ <int> ] [ <int> ] ; int main ( void ) { int t , n , i , j , k , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = - <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; if ( n == <int> ) { printf ( <str> , a [ <int> ] [ <int> ] ) ; continue ; } for ( i = <int> ; i < n ; i ++ ) { a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; if ( a [ i ] [ <int> ] > sum ) sum = a [ i ] [ <int> ] ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( i == j ) a [ i ] [ j ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else a [ i ] [ j ] = max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; if ( a [ i ] [ j ] > sum ) sum = a [ i ] [ j ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 5013}
{"input": "int main ( ) { int t , min , i ; long long int n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] < min ) min = a [ i + <int> ] ; else continue ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5014}
{"input": "int main ( void ) { int m , c , a [ <int> ] , t , n , j ; long b , q ; scanf ( <str> , & t ) ; for ( m = <int> ; m <= t ; m ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } b = a [ <int> ] ; for ( c = <int> ; c < n ; c ++ ) { if ( a [ c ] < b ) { b = a [ c ] ; } } q = ( long ) ( n - <int> ) * b ; printf ( <str> , q ) ; } return <int> ; }", "label": 0, "id": 5015}
{"input": "int main ( ) { int n = <int> , m = <int> , i = <int> , j = <int> , k = <int> , t = <int> , u = <int> , h = <int> , l = <int> , g = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; u = <int> ; l = <int> ; for ( j = <int> ; j < m ; j ++ ) { l = g ; h = g = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & t ) ; if ( ( k == l || k == l + <int> ) && h < t ) { g = k ; h = t ; } } u = u + h ; printf ( <str> ) ; } printf ( <str> , u ) ; } return <int> ; }", "label": 1, "id": 5016}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long int N ; scanf ( <str> , & N ) ; long int a [ N ] , i , s = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } i = <int> ; while ( i < N - <int> ) { if ( a [ i ] < a [ i + <int> ] ) { s = s + a [ i ] ; } else if ( a [ i + <int> ] < a [ i ] ) { s = s + a [ i + <int> ] ; } else { } i = i + <int> ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 5017}
{"input": "int main ( ) { int t , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5018}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; for ( int i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } int max = ( a > b ) ? a : b ; while ( <int> ) { if ( max % a == <int> && max % b == <int> ) { lcm = max ; } } printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 5019}
{"input": "int a [ <int> ] [ <int> ] = { <int> } , l ; int sum ( int i , int j ) { int sum1 , sum2 ; if ( i < l && j < l ) { sum1 = sum ( i + <int> , j ) + a [ i ] [ j ] ; sum2 = sum ( i + <int> , j + <int> ) + a [ i ] [ j ] ; if ( sum1 > sum2 ) return sum1 ; else return sum2 ; } return <int> ; } int main ( ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , sum ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 5020}
{"input": "int largest = <int> ; void largest_sum ( int * , int , int , int , int ) ; int main ( ) { int t , n , * m , s ; int i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; s = ( n * ( n + <int> ) ) / <int> ; m = ( int * ) malloc ( sizeof ( int ) * s + <int> ) ; for ( i = <int> ; i < s ; i ++ ) scanf ( <str> , & m [ i ] ) ; largest_sum ( m , <int> , <int> , <int> , n ) ; printf ( <str> , largest ) ; free ( m ) ; } return <int> ; } void largest_sum ( int * m , int sum , int l , int c , int n ) { int cstart = ( l * ( l + <int> ) ) / <int> ; if ( l < n ) { largest_sum ( m + l + <int> , sum + m [ c ] , l + <int> , c , n ) ; if ( l != <int> ) largest_sum ( m + l + <int> , sum + m [ c + <int> ] , l + <int> , c + <int> , n ) ; } if ( l == n ) if ( largest < sum ) largest = sum ; }", "label": 2, "id": 5021}
{"input": "int main ( ) { int t , a , b , r , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a * b ; while ( a != <int> ) { r = b % a ; b = a ; a = r ; } printf ( <str> , b , x / b ) ; } }", "label": 1, "id": 5022}
{"input": "int main ( ) { int c , t ; scanf ( <str> , & t ) ; for ( c = <int> ; c < t ; c ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int n1 , n2 ; n1 = a ; n2 = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 1, "id": 5023}
{"input": "int main ( ) { long int t , n , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int A [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } min = A [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( A [ i ] < min ) { min = A [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5024}
{"input": "int main ( ) { int t ; long int n ; int min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int a [ <int> ] ; int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int j ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j + <int> ] > a [ j ] ) { a [ j + <int> ] = a [ j ] ; j ++ ; } } printf ( <str> , ( a [ n - <int> ] * ( n - <int> ) ) ) ; } }", "label": 1, "id": 5025}
{"input": "int main ( ) { int t ; long int n , i , j ; long long int a [ <int> ] , min , k ; scanf ( <str> , & t ) ; while ( t -- ) { { scanf ( <str> , & n ) ; } for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; j = n ; while ( -- n ) { if ( min > a [ n ] ) { k = min ; min = a [ n ] ; a [ n ] = k ; } } printf ( <str> , ( j * min - min ) ) ; } return <int> ; }", "label": 0, "id": 5026}
{"input": "int maxi ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; long int ar [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } long int max = - <int> ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) ar [ i ] [ j ] += ar [ i - <int> ] [ j ] ; else if ( i == j ) ar [ i ] [ j ] += ar [ i - <int> ] [ j - <int> ] ; else ar [ i ] [ j ] += maxi ( ar [ i - <int> ] [ j ] , ar [ i - <int> ] [ j - <int> ] ) ; } } for ( int i = <int> ; i < n ; i ++ ) { if ( ar [ n - <int> ] [ i ] > max ) max = ar [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5027}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else if ( a == <int> ) return b ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 5028}
{"input": "int range , r ; int A [ <int> ] ; int max_path ( ) ; int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; range = ( r * ( r + <int> ) ) >> <int> ; for ( i = <int> ; i < range ; ++ i ) scanf ( <str> , ( A + i ) ) ; printf ( <str> , max_path ( ) ) ; } return <int> ; } int max_path ( ) { int i = <int> , j = <int> , k = <int> , delta = <int> , max ; while ( i < r ) { j = <int> ; A [ k ] += A [ k - delta ] ; ++ j ; ++ k ; while ( j < i ) { if ( A [ k - delta ] > A [ k - delta - <int> ] ) max = k - delta ; else max = k - delta - <int> ; A [ k ] += A [ max ] ; ++ k ; ++ j ; } A [ k ] += A [ k - delta - <int> ] ; ++ k ; ++ delta ; ++ i ; } -- i ; k = ( i * ( i + <int> ) ) >> <int> ; max = A [ k ] ; for ( ; k < range ; ++ k ) { if ( A [ k ] > max ) max = A [ k ] ; } return max ; }", "label": 0, "id": 5029}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] = { <int> } , s [ <int> ] [ <int> ] = { <int> } , abc [ <int> ] , max , i , j , m , b , n , c , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; for ( j = <int> ; j <= m ; j ++ ) { b = j ; c = <int> ; while ( c <= b ) { scanf ( <str> , & a [ j ] [ c ] ) ; c ++ ; } } s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = s [ <int> ] [ <int> ] ; c = <int> ; for ( j = <int> ; j <= m ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( s [ j - <int> ] [ k ] >= s [ j - <int> ] [ k - <int> ] ) s [ j ] [ k ] = s [ j - <int> ] [ k ] + a [ j ] [ k ] ; else s [ j ] [ k ] = s [ j - <int> ] [ k - <int> ] + a [ j ] [ k ] ; if ( s [ j ] [ k ] > max ) max = s [ j ] [ k ] ; } } abc [ i ] = max ; printf ( <str> , abc [ i ] ) ; } return ( <int> ) ; }", "label": 0, "id": 5030}
{"input": "int main ( ) { int t , n , i , x = <int> , j , sum , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { j = <int> , x = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j ; j <= i + x ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } x += i ; } j = <int> ; sum = a [ j ] ; i = <int> ; while ( i <= n - <int> ) { sum += ( a [ j + i ] > a [ j + i + <int> ] ) ? a [ j + i ] : a [ j + i + <int> ] ; j = ( a [ j + i ] > a [ j + i + <int> ] ) ? a [ j + i ] : a [ j + i + <int> ] ; i ++ ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 5031}
{"input": "int gcd ( int a , int b ) { return ( a % b == <int> ) ? b : gcd ( b , a % b ) ; } int main ( ) { int t , k , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; printf ( <str> , k , a * b / k ) ; } return <int> ; }", "label": 1, "id": 5032}
{"input": "int main ( ) { int t , n , i , count ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { while ( a [ i ] < a [ i + <int> ] ) i ++ ; count ++ ; } printf ( <str> , count + n ) ; } return <int> ; }", "label": 1, "id": 5033}
{"input": "int maxsum = <int> ; void calcsum ( int * * arr , int sum , int row , int col , int rows ) { if ( row < rows ) { sum = sum + arr [ row ] [ col ] ; if ( sum > maxsum ) { maxsum = sum ; } calcsum ( arr , sum , row + <int> , col , rows ) ; calcsum ( arr , sum , row + <int> , col + <int> , rows ) ; } } int main ( ) { int n , rows , i = <int> , j ; int * arr [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i <= rows ; i ++ ) { arr [ i - <int> ] = malloc ( sizeof ( int ) * i ) ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & arr [ i - <int> ] [ j ] ) ; } } maxsum = <int> ; calcsum ( arr , <int> , <int> , <int> , rows ) ; printf ( <str> , maxsum ) ; } return <int> ; }", "label": 2, "id": 5034}
{"input": "int * * j , arr [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a >= b ) return a ; return b ; } int maxpath ( int k , int i , int v ) { int sum = <int> ; if ( i > k - <int> ) return <int> ; else if ( arr [ i ] [ v ] != <int> ) return arr [ i ] [ v ] ; else sum = j [ i ] [ v ] + max ( maxpath ( k , i + <int> , v ) , maxpath ( k , i + <int> , v + <int> ) ) ; arr [ i ] [ v ] = sum ; return sum ; } int main ( ) { int g , h , n , i , k , l , a , * b , c = <int> ; scanf ( <str> , & n ) ; b = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & k ) ; j = ( int * * ) malloc ( k * sizeof ( int * ) ) ; for ( l = <int> ; l < k ; l ++ ) { j [ l ] = ( int * ) malloc ( ( l + <int> ) * sizeof ( int ) ) ; for ( a = <int> ; a <= l ; a ++ ) scanf ( <str> , & j [ l ] [ a ] ) ; } for ( g = <int> ; g < <int> ; g ++ ) { for ( h = <int> ; h < <int> ; h ++ ) arr [ g ] [ h ] = <int> ; } b [ c ++ ] = maxpath ( k , <int> , <int> ) ; for ( a = <int> ; a < n ; a ++ ) free ( ( void * ) j [ a ] ) ; free ( ( void * ) j ) ; } printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) printf ( <str> , b [ i ] ) ; free ( ( void * ) b ) ; return <int> ; }", "label": 3, "id": 5035}
{"input": "int gcd ( int a , int b ) { int x ; if ( b == <int> ) return a ; else { x = gcd ( b , a % b ) ; } return x ; } int main ( ) { int a , b , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 5036}
{"input": "int main ( ) { int a , b , t , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int p = a , q = b , lcm ; while ( b % a != <int> ) { r = b % a ; b = a ; a = r ; } printf ( <str> , a ) ; lcm = ( p * q ) / a ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 5037}
{"input": "int gcd ( int max , int min ) { if ( max % min == <int> ) return min ; else return ( gcd ( min , ( max % min ) ) ) ; } int main ( ) { long int t , n , i , a , b ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long int p = <int> , q = <int> , max , min , j ; scanf ( <str> , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } p += gcd ( max , min ) ; q += ( ( a * b ) / p ) ; printf ( <str> , p , q ) ; } return <int> ; }", "label": 0, "id": 5038}
{"input": "int main ( void ) { int test ; long int n , i , a [ <int> ] ; scanf ( <str> , & test ) ; long int min ; long long int ans ; while ( test -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } else if ( a [ i ] == min ) { } } ans = ( n - <int> ) * min ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5039}
{"input": "int main ( void ) { int t , flag , m ; long int a , b , g , i , l ; while ( t -- ) { int x [ <int> ] ; flag = <int> ; scanf ( <str> , & a , & b ) ; if ( a < b ) { m = a , a = b , b = m ; } for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { flag ++ ; break ; } } if ( flag == <int> ) { g = i ; } else { g = <int> ; } printf ( <str> , g ) ; } return <int> ; }", "label": 1, "id": 5040}
{"input": "int memo [ <int> ] [ <int> ] = { <int> } ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int findSum ( int a [ <int> ] [ <int> ] , int i , int j , int row ) { int sum = a [ i ] [ j ] ; if ( row == <int> ) return a [ i ] [ j ] ; else { if ( memo [ i + <int> ] [ j ] < <int> ) memo [ i + <int> ] [ j ] = findSum ( a , i + <int> , j , row - <int> ) ; if ( memo [ i + <int> ] [ j + <int> ] < <int> ) memo [ i + <int> ] [ j + <int> ] = findSum ( a , i + <int> , j + <int> , row - <int> ) ; sum += max ( memo [ i + <int> ] [ j ] , memo [ i + <int> ] [ j + <int> ] ) ; return sum ; } } int main ( ) { int T , r , n , i , j , max ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; while ( T != <int> ) { max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; memo [ i ] [ j ] = - <int> ; } } max = findSum ( a , <int> , <int> , n ) ; printf ( <str> , max ) ; T -- ; } return <int> ; }", "label": 0, "id": 5041}
{"input": "int maxInt ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int _case ; scanf ( <str> , & _case ) ; int row , max ; int d [ <int> ] [ <int> ] ; int i , j , k ; int pre , cur ; while ( _case -- ) { scanf ( <str> , & row ) ; scanf ( <str> , & d [ <int> ] [ <int> ] ) ; max = <int> ; for ( i = <int> ; i < row ; i ++ ) { pre = ( i - <int> ) & <int> ; cur = i & <int> ; scanf ( <str> , & d [ cur ] [ <int> ] ) ; d [ cur ] [ <int> ] += d [ pre ] [ <int> ] ; max = d [ cur ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { k = maxInt ( d [ pre ] [ j - <int> ] , d [ pre ] [ j ] ) ; scanf ( <str> , & d [ cur ] [ j ] ) ; d [ cur ] [ j ] += k ; if ( d [ cur ] [ j ] > max ) max = d [ cur ] [ j ] ; } scanf ( <str> , & d [ cur ] [ i ] ) ; d [ cur ] [ i ] += d [ pre ] [ i - <int> ] ; if ( d [ cur ] [ i ] > max ) max = d [ cur ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5042}
{"input": "int main ( ) { long int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long int min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5043}
{"input": "int main ( ) { long long int i , j , A [ <int> ] , N , T , count , sum = <int> , m ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { count = <int> ; sum = <int> ; scanf ( <str> , & N ) ; m = N ; for ( j = <int> ; j < N ; j ++ ) scanf ( <str> , & A [ j ] ) ; for ( j = <int> ; j < N ; j ++ ) { count = <int> ; while ( A [ j - <int> ] <= A [ j ] ) { count ++ ; j ++ ; } sum += ( ( count ) * ( count + <int> ) ) / <int> ; } if ( N == <int> ) sum = <int> ; printf ( <str> , sum ) ; } }", "label": 1, "id": 5044}
{"input": "int main ( ) { int count , t , n , i , j ; long long int a [ <int> ] [ <int> ] ; long long int <unk> [ <int> ] ; int <unk> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { count = <int> ; <unk> = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { count ++ ; if ( a [ i ] [ j + <int> ] > a [ i ] [ j ] ) { count = count + <unk> ; <unk> ++ ; } else <unk> = <int> ; } count ++ ; <unk> [ i ] = count ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , <unk> [ i ] ) ; }", "label": 1, "id": 5045}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , amount = <int> ; scanf ( <str> , & n ) ; int arr [ n ] ; int least = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < least ) least = arr [ i ] ; } amount = least * ( n - <int> ) ; printf ( <str> , amount ) ; } return <int> ; }", "label": 1, "id": 5046}
{"input": "long max ( long a , long b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long a , b , g = <int> , m , i ; scanf ( <str> , & a , & b ) ; long long l ; for ( i = <int> ; i <= a , i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = i ; } m = max ( a , b ) ; long long r = m ; while ( m % a != <int> || m % b != <int> ) m = m + r ; l = m ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 5047}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { call ( ) ; t -- ; } return <int> ; } call ( ) { long long int a [ <int> ] , c = <int> , n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n + <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; i = <int> ; while ( i < n + <int> ) { j = <int> ; while ( j < n - i ) { if ( a [ i + j ] <= a [ i + j + <int> ] ) j ++ ; else break ; } c += ( j + <int> ) * ( j + <int> ) / <int> ; i = i + j + <int> ; } printf ( <str> , c ) ; }", "label": 0, "id": 5048}
{"input": "int main ( ) { long long t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long long n , j , k = <int> , l , a ; scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; for ( j = <int> ; j < n ; j ++ ) { long long b ; scanf ( <str> , & b ) ; if ( a > b ) a = b ; } k = a * ( n - <int> ) ; printf ( <str> , k ) ; } return <int> ; }", "label": 0, "id": 5049}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , c = <int> , d , e ; scanf ( <str> , & a , & b ) ; d = gcd ( b , a ) ; e = d ; while ( d != <int> ) { c = c * d ; d = gcd ( a , b ) ; a = a / d ; b = b / d ; } if ( c != <int> ) printf ( <str> , e , c ) ; else if ( d == <int> ) printf ( <str> , e , a * b ) ; } return <int> ; }", "label": 1, "id": 5050}
{"input": "int Partition ( long int A [ ] , int p , int r ) { long int x = A [ r ] , temp ; int i = p - <int> , j ; for ( j = p ; j < r ; j ++ ) { if ( A [ j ] <= x ) { i = i + <int> ; temp = A [ i ] ; A [ i ] = A [ j ] ; A [ j ] = temp ; } } temp = A [ i + <int> ] ; A [ i + <int> ] = A [ r ] ; A [ r ] = temp ; return ( i + <int> ) ; } void QuickSort ( long int A [ ] , int p , int r ) { if ( p < r ) { int q = Partition ( A , p , r ) ; QuickSort ( A , p , q - <int> ) ; QuickSort ( A , q + <int> , r ) ; } return ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; long int A [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & A [ i ] ) ; QuickSort ( A , <int> , n - <int> ) ; printf ( <str> , ( ( n - <int> ) * A [ <int> ] ) ) ; } }", "label": 0, "id": 5051}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , i , a , b , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) ) ; lcm = ( a * b ) / gcd ( a , b ) ; printf ( <str> , lcm ) ; } } int gcd ( int a , int b ) { if ( b != <int> ) return ( gcd ( b , a % b ) ) ; else return ( <int> ) ; }", "label": 1, "id": 5052}
{"input": "int main ( ) { int n , t , arr [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { int min , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5053}
{"input": "int max ( int ele1 , int ele2 ) { if ( ele1 > ele2 ) return ele1 ; else return ele2 ; } int main ( ) { int i , nor , not , a [ <int> ] [ <int> ] , sum , n , j ; scanf ( <str> , & not ) ; for ( n = <int> ; n < not ; n ++ ) { scanf ( <str> , & nor ) ; sum = <int> ; for ( i = <int> ; i <= nor ; i ++ ) sum = sum + i ; for ( i = <int> ; i < sum ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = nor - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } } }", "label": 3, "id": 5054}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , hcf , lcm , x , y ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; hcf = gcd ( a , b ) ; printf ( <str> , hcf ) ; lcm = ( x * y ) / hcf ; printf ( <str> , lcm ) ; } } int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; }", "label": 1, "id": 5055}
{"input": "int main ( void ) { int a [ <int> ] [ <int> ] ; int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) a [ i ] [ j ] += MAX ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5056}
{"input": "int main ( ) { long int n , m , k , gcd , temp , lcm , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & m ) ; lcm = n * m ; k = <int> ; if ( n > m ) { temp = n ; n = m ; m = temp ; } gcd = n ; if ( m % n == <int> ) gcd = gcd ; else { while ( m % gcd != <int> ) { k = gcd ; gcd = m % gcd ; m = k ; } } printf ( <str> , gcd , lcm / gcd ) ; } }", "label": 0, "id": 5057}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) a [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int count = <int> , ans = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) count ++ ; else { ans += ( count * ( count - <int> ) ) / <int> ; count = <int> ; } } ans += ( ( count * ( count - <int> ) ) / <int> ) ; ans += n ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5058}
{"input": "int gcd ( int x , int y ) { int temp ; while ( y != <int> ) { temp = y ; y = x % y ; x = temp ; } return x ; } void main ( ) { int a , b , t , res ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; res = gcd ( a , b ) ; printf ( <str> , res , ( a * b ) / res ) ; } }", "label": 1, "id": 5059}
{"input": "int main ( ) { int t ; int n , max , sum , x , k ; int a [ <int> ] [ <int> ] ; int i , j ; scanf ( <str> , & t ) ; if ( t > <int> || t < <int> ) return <int> ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; if ( n > <int> || n < <int> ) continue ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ i - <int> ] [ j ] ) ; if ( a [ i - <int> ] [ j ] > <int> || a [ i - <int> ] [ j ] < <int> ) return <int> ; } } if ( n == <int> ) { printf ( <str> , a [ <int> ] [ <int> ] ) ; continue ; } for ( k = n - <int> ; k >= <int> ; k -- ) { for ( j = <int> ; j < k ; j ++ ) { sum = <int> ; for ( i = k ; i >= <int> ; i -- ) { if ( i == k ) { sum += a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; } else { x = j <= i ? <int> : ( j - i ) ; sum += a [ i ] [ j - x ] ; } } if ( sum > max ) max = sum ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 5060}
{"input": "int main ( void ) { int tc ; scanf ( <str> , & tc ) ; int i , j , s , t , k ; int n [ tc ] , * * arr ; t = <int> ; s = <int> ; arr = ( int * * ) malloc ( sizeof ( int ) * tc ) ; for ( i = <int> ; i < tc ; i ++ ) { scanf ( <str> , & n [ i ] ) ; arr [ i ] = ( int * ) malloc ( sizeof ( int ) * n [ i ] ) ; for ( j = <int> ; j < n [ i ] ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( k = <int> ; k < tc ; k ++ ) { s = <int> ; for ( i = <int> ; i < n [ k ] ; i ++ ) { t = <int> ; for ( j = i ; j < n [ k ] ; j ++ ) { if ( arr [ k ] [ j ] < arr [ k ] [ j + <int> ] ) { t ++ ; } else { break ; } } s = s + t + <int> ; } printf ( <str> , s ) ; } return <int> ; }", "label": 3, "id": 5061}
{"input": "int main ( ) { int i , j , T , k , lines ; int a [ <int> ] [ <int> ] , maxsum [ <int> ] [ <int> ] , x ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = lines - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( j == lines - <int> ) { maxsum [ j ] [ k ] = a [ j ] [ k ] ; } else { if ( maxsum [ j + <int> ] [ k ] > maxsum [ j + <int> ] [ k + <int> ] ) x = maxsum [ j + <int> ] [ k ] ; else x = maxsum [ j + <int> ] [ k + <int> ] ; maxsum [ j ] [ k ] = a [ j ] [ k ] + x ; } } } printf ( <str> , maxsum [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5062}
{"input": "int main ( ) { unsigned int t , m , e , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; m = MAX_AI ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & e ) ; if ( m > e ) m = e ; } printf ( <str> , m * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5063}
{"input": "long long int gcd ( long long int n , long long int m ) { if ( m == <int> ) return n ; return gcd ( m , n % m ) ; } int main ( ) { long long int n , m , y , x ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & m ) ; if ( n < m ) { n = n + m ; m = n - m ; n = n - m ; } x = gcd ( n , m ) ; y = n * m / x ; printf ( <str> , x , y ) ; } return <int> ; }", "label": 0, "id": 5064}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , k , count , sum = <int> , n ; scanf ( <str> , & count ) ; for ( k = <int> ; k < count ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) { sum = a [ i ] [ j + <int> ] ; } else { sum = a [ i ] [ j ] ; } a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + sum ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5065}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int i , j , g , l ; long int * p , * q , y ; scanf ( <str> , & i ) ; for ( y = <int> ; y < <int> ; y ++ ) { } for ( y = <int> ; y < <int> ; y ++ ) { } for ( y = <int> ; y < <int> ; y ++ ) { } p = ( long int * ) malloc ( i * sizeof ( int ) ) ; q = ( long int * ) malloc ( i * sizeof ( int ) ) ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & p [ j ] , & q [ j ] ) ; } for ( j = <int> ; j < i ; j ++ ) { g = gcd ( p [ j ] , q [ j ] ) ; l = lcm ( p [ j ] , q [ j ] ) ; printf ( <str> , g , l ) ; } } int gcd ( int a , int b ) { if ( a > b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } else { { if ( a == <int> ) return b ; else return gcd ( a , b % a ) ; } } } int lcm ( int a , int b ) { return ( ( a * b ) / gcd ( a , b ) ) ; }", "label": 1, "id": 5066}
{"input": "int gcd ( int a , int b ) { while ( b > <int> ) { int r = a % b ; a = b ; b = r ; } return a ; } int lcm ( int a , int b , int g ) { return a * b / g ; } int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int l = lcm ( a , b , g ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 5067}
{"input": "int main ( ) { int aa [ <int> ] [ <int> ] ; int i , j , n , k ; scanf ( <str> , & n ) ; if ( n != <int> ) while ( n -- ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , aa [ i ] [ j ] ) ; } for ( i = k - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < k - <int> ; j ++ ) { if ( aa [ i ] [ j ] < aa [ i ] [ j + <int> ] ) aa [ i - <int> ] [ j ] = aa [ i ] [ j + <int> ] + aa [ i - <int> ] [ j ] ; else aa [ i - <int> ] [ j ] = aa [ i ] [ j ] + aa [ i - <int> ] [ j ] ; } printf ( <str> , aa [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5068}
{"input": "int main ( ) { int t , n , j , i ; int arr [ <int> ] ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { int min ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 5069}
{"input": "long long int gcd ( long long int a , long long int b ) { long long int temp ; if ( a > b ) { temp = a ; a = b ; b = temp ; } for ( ; ; ) { if ( b % a == <int> ) return a ; temp = a ; a = b % a ; b = temp ; } } int main ( ) { long long int hcf [ <int> ] , lcm [ <int> ] ; long long int a , b , i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; hcf [ i ] = gcd ( a , b ) ; lcm [ i ] = a * b / hcf [ i ] ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , hcf [ i ] , lcm [ i ] ) ; } }", "label": 0, "id": 5070}
{"input": "int main ( ) { long long int t , n , n1 , i , j , l = <int> , m = <int> , count = <int> , max , count1 ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a [ <int> ] [ <int> ] = { <int> } ; count = <int> ; max = <int> ; scanf ( <str> , & n ) ; n1 = n ; m = <int> ; for ( i = <int> ; i < n1 ; i ++ ) { for ( l = <int> ; l < m ; l ++ ) { scanf ( <str> , & a [ i ] [ l ] ) ; } m ++ ; } count = a [ <int> ] [ <int> ] ; count1 = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j != <int> ) { count = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; count1 = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; if ( count > count1 ) a [ i ] [ j ] = count ; else a [ i ] [ j ] = count1 ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } } } max = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] > max ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5071}
{"input": "int main ( int argc , char * * argv ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; int j ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } int x = n , k , sum = <int> ; while ( x > <int> ) { if ( a [ <int> ] > a [ <int> ] ) { sum = sum + a [ <int> ] ; for ( k = <int> ; k < n - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; } else if ( a [ <int> ] > a [ <int> ] ) { sum = sum + a [ <int> ] ; for ( k = <int> ; k < n - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; } x -- ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 5072}
{"input": "int main ( ) { int t , a , c ; float b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b , & c ) ; if ( a > <int> && b < <fp> && c > <int> ) { printf ( <str> ) ; } else if ( a > <int> && b < <fp> && c < <int> ) { printf ( <str> ) ; } else if ( a < <int> && b < <fp> && c > <int> ) { printf ( <str> ) ; } else if ( a > <int> && b > <fp> && c > <int> ) { printf ( <str> ) ; } else if ( a > <int> && b > <fp> && c < <int> || a < <int> && b < <fp> && c < <int> || a < <int> && b > <fp> && c > <int> ) { printf ( <str> ) ; } else if ( ! ( a > <int> && b < <fp> && c > <int> ) ) printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 5073}
{"input": "int main ( ) { int c , t , a , b , h , i ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a >= <int> && a <= <int> && b >= <int> && b <= <int> ) { if ( a == b ) { h = a ; } else { c = a < b ? a : b ; for ( i = c ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { h = i ; break ; } } } printf ( <str> , h , ( a * b ) / h ) ; } } } return <int> ; }", "label": 1, "id": 5074}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; return gcd ( b , a % b ) ; } int main ( ) { int T , A , B , GCD , LCM ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; GCD = gcd ( A , B ) ; printf ( <str> , GCD ) ; LCM = ( A * B ) / GCD ; printf ( <str> , LCM ) ; } return <int> ; }", "label": 1, "id": 5075}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int m , j , p , k , i , s , n , x ; scanf ( <str> , & m ) ; x = ( m * m - m ) / <int> + m ; int a [ x ] ; for ( i = <int> ; i < x ; i ++ ) scanf ( <str> , & a [ i ] ) ; j = m - <int> ; p = j ; k = ( m * m - m ) / <int> - <int> ; n = k ; for ( i = <int> ; i < j ; i ++ ) { for ( s = <int> ; s < ( j - i ) ; s ++ ) { a [ n ] = a [ n ] + max ( a [ n + p ] , a [ n + p + <int> ] ) ; n -- ; } p -- ; } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5076}
{"input": "int gcd ( int a , int b ) { int x ; if ( a == <int> ) return b ; else if ( b == <int> ) return a ; else { while ( b != <int> ) { x = a % b ; a = b ; b = x ; } return a ; } } int lcm ( int x , int y , int z ) { int g = y / x ; return z * g ; } int main ( ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( g , a , b ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 5077}
{"input": "int main ( void ) { int t , i , j = <int> ; long int a , b , min ; scanf ( <str> , & t ) ; while ( j < t ) { long long int gcd ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) min = b ; else min = a ; for ( i = min ; i > <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { gcd = i ; break ; } printf ( <str> , gcd , ( ( a * b ) / gcd ) ) ; j ++ ; } return <int> ; }", "label": 2, "id": 5078}
{"input": "int main ( ) { long long int * a , n , sum , min , ans [ <int> ] ; int i , t , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; a = ( int * ) malloc ( n * sizeof ( unsigned int ) ) ; scanf ( <str> , & a [ <int> ] ) ; min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ j ] < min ) min = a [ j ] ; } ans [ i ] = ( n - <int> ) * min ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 3, "id": 5079}
{"input": "int hcf ( int a , int b ) { while ( a != b ) { if ( a > b ) { a -= b ; } else { b -= a ; } } return a ; } int main ( ) { int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int c , d ; scanf ( <str> , & c , & d ) ; printf ( <str> , hcf ( c , d ) , ( c * d ) / hcf ( c , d ) ) ; } }", "label": 1, "id": 5080}
{"input": "int max ( int a , int b ) { if ( a < b ) return b ; else a ; } void main ( ) { int a [ <int> ] [ <int> ] , m [ <int> ] [ <int> ] , result [ <int> ] ; int i = <int> , j = <int> , n , m1 , k = <int> ; scanf ( <str> , & m1 ) ; for ( k = <int> ; k < m1 ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; j ++ ; } } for ( j = <int> ; j < n ; j ++ ) { m [ n - <int> ] [ j ] = a [ n - <int> ] [ j ] ; } j = <int> ; i = n - <int> ; while ( i >= <int> ) { m [ i ] [ <int> ] = a [ i ] [ <int> ] + max ( m [ i + <int> ] [ <int> ] , m [ i + <int> ] [ <int> ] ) ; for ( j = <int> ; j <= i ; j ++ ) { m [ i ] [ j ] = max ( a [ i ] [ j ] + max ( m [ i + <int> ] [ j ] , m [ i + <int> ] [ j + <int> ] ) , m [ i + <int> ] [ j - <int> ] ) ; } i -- ; } result [ k ] = m [ <int> ] [ <int> ] ; } for ( k = <int> ; k < m1 ; k ++ ) { printf ( <str> , result [ k ] ) ; } }", "label": 1, "id": 5081}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , n , max , x , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; max = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { j = <int> ; x = a [ i ] [ j ] + a [ i + <int> ] [ j ] + a [ i + <int> ] [ j + <int> ] ; if ( x > max ) max = x ; } printf ( <str> , max ) ; } }", "label": 1, "id": 5082}
{"input": "int pos ; int func ( int a [ <int> ] [ <int> ] , int r , int p ) { int j , max = a [ r ] [ <int> ] , temp ; for ( j = r ; j <= p ; j ++ ) { if ( a [ r ] [ j ] > max ) { temp = a [ r ] [ j ] ; a [ r ] [ j ] = max ; max = temp ; } pos = j ; } return max ; } int main ( void ) { int n , l , i , j , maxi [ <int> ] , sum , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { sum = <int> ; scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; sum = a [ <int> ] [ <int> ] ; int k = <int> ; for ( i = <int> ; i < l ; i ++ ) { maxi [ i ] = func ( a , i , k + <int> ) ; k = pos ; sum = sum + maxi [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5083}
{"input": "int main ( ) { long long int n , a [ <int> ] , i , c , sum ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; c = <int> ; sum = n ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i ) { if ( a [ i ] > a [ i - <int> ] ) { c = <int> ; } else { c ++ ; sum = sum + c ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5084}
{"input": "int Gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { Gcd ( b , a % b ) ; } } int main ( ) { int k , a , b , i , j , c , l ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & b , & a ) ; if ( a < b ) { l = Gcd ( b , a ) ; } else { l = Gcd ( a , b ) ; } if ( l == <int> ) { c = b * a ; } else { c = l * ( b / l ) * ( a / l ) ; } printf ( <str> , l , c ) ; } return <int> ; }", "label": 1, "id": 5085}
{"input": "int main ( ) { int i , j , k , n , l , t , s ; int a [ <int> ] , b [ <int> ] , c [ <int> ] ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; a [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( k = <int> ; k <= i ; k ++ ) { scanf ( <str> , & b [ k ] ) ; } c [ <int> ] = a [ <int> ] + b [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { c [ j ] = ( a [ j - <int> ] > a [ j ] ? a [ j - <int> ] : a [ j ] ) + b [ j ] ; } for ( j = <int> ; j <= i ; j ++ ) { a [ j ] = c [ j ] ; } a [ j ] = <int> ; } s = c [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( s < c [ j ] ) { s = c [ j ] ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 5086}
{"input": "int main ( ) { int T ; long int a , b , c , x , y , temp ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; if ( b > a ) { temp = a ; a = b ; b = temp ; } c = a % b ; while ( c > <int> ) { a = b ; b = c ; c = a % b ; } printf ( <str> , b , ( x * y ) / b ) ; } }", "label": 1, "id": 5087}
{"input": "int main ( void ) { int n , i , n1 , n2 , p , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; p = gcd ( n1 , n2 ) ; lcm = ( n1 * n2 ) / p ; printf ( <str> , p , lcm ) ; } return <int> ; } int gcd ( int n , int m ) { if ( m == <int> ) return n ; else return gcd ( m , n % m ) ; }", "label": 1, "id": 5088}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; long int gcd = ( a < b ) ? a : b ; long int lcm = ( a > b ) ? a : b ; for ( long int i = gcd ; i > <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { gcd = i ; break ; } } for ( long int i = lcm ; i < <int> ; i ++ ) { if ( ( i % a == <int> ) && ( i % b == <int> ) ) { lcm = i ; break ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 5089}
{"input": "int main ( ) { int t , n , i , j , large , larger , <unk> , sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; large = <int> ; scanf ( <str> , & n ) ; int * tri [ n ] ; for ( i = <int> ; i < n ; i ++ ) { tri [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & tri [ i ] [ j ] ) ; if ( large < tri [ i ] [ j ] ) { large = tri [ i ] [ j ] ; larger = i ; <unk> = j ; } } } for ( i = larger , j = <unk> ; i >= <int> ; i -- ) { if ( j == <int> ) { sum += tri [ i ] [ j ] ; } else if ( j == i ) { sum += tri [ i ] [ j -- ] ; } else { sum += tri [ i ] [ j ] ; if ( tri [ i - <int> ] [ j ] < tri [ i - <int> ] [ j - <int> ] ) j -- ; } } for ( i = larger + <int> , j = ( tri [ larger + <int> ] [ <unk> ] < tri [ larger + <int> ] [ <unk> + <int> ] ? <unk> + <int> : <unk> ) ; i < n ; i ++ ) { sum += tri [ i ] [ j ] ; if ( tri [ i + <int> ] [ j ] < tri [ i + <int> ] [ j + <int> ] ) j ++ ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5090}
{"input": "main ( ) { int t ; long long int r , a , b , x , y , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = ( x > y ) ? x : y ; b = ( x < y ) ? x : y ; r = b ; while ( a % b != <int> ) { r = a % b ; a = b ; b = r ; } l = ( x * y ) / r ; printf ( <str> , r , l ) ; } }", "label": 0, "id": 5091}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int t , n , i , j , r , c , sum ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; sum = <int> ; r = n - <int> ; c = <int> ; while ( r >= <int> ) { c = <int> ; while ( c <= r ) { if ( a [ r + <int> ] [ c ] > a [ r + <int> ] [ c + <int> ] ) a [ r ] [ c ] = a [ r + <int> ] [ c ] + a [ r ] [ c ] ; else a [ r ] [ c ] = a [ r ] [ c ] + a [ r + <int> ] [ c + <int> ] ; c ++ ; } r -- ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 5092}
{"input": "int main ( ) { int l , t , k , a = <int> , m , n , o , p = <int> ; register int i , j , sum = <int> , summax = <int> , q ; int arr [ <int> ] [ <int> ] , arr2 [ <int> ] , * p2 ; p2 = arr2 ; scanf ( <str> , & k ) ; for ( q = <int> ; q < k ; q ++ ) { sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> , j = <int> ; i < t ; i ++ ) { p2 [ i ] = <int> ; sum = sum + arr [ i ] [ j ] ; summax = sum ; } for ( l = <int> ; p2 [ t - <int> ] != ( t - <int> ) ; l ++ ) { a = <int> ; sum = <int> ; m = p2 [ t - <int> ] ; o = m ; p = <int> ; n = t - m - <int> ; if ( m > <int> ) { for ( i = t - <int> ; ( p2 [ i ] - p2 [ i - <int> ] ) == <int> ; i -- ) { p ++ ; } if ( ( p > <int> ) && ( p2 [ t - p - <int> ] == p2 [ t - p - <int> ] ) && ( p2 [ t - p - <int> ] != <int> ) ) { for ( i = t - <int> ; i >= ( t - p - <int> ) ; i -- ) { p2 [ i ] = p2 [ t - p ] ; j = p2 [ i ] ; sum = sum + arr [ i ] [ j ] ; } for ( i = t - p - <int> ; i >= <int> ; i -- ) { j = p2 [ i ] ; sum = sum + arr [ i ] [ j ] ; } goto step1 ; } } if ( ( m > <int> ) && ( p2 [ n ] == <int> ) ) { for ( i = t - <int> ; o >= <int> ; o -- , i -- ) { p2 [ i ] = p2 [ n ] + <int> ; } for ( i = t - <int> ; i >= <int> ; i -- ) { j = p2 [ i ] ; sum = sum + arr [ i ] [ j ] ; } } else { for ( i = t - <int> ; i >= <int> ; i -- ) { j = p2 [ i ] ; if ( ( p2 [ i ] < ( t - <int> ) ) && ( p2 [ i ] == p2 [ i - <int> ] ) && ( a == <int> ) ) { j ++ ; a ++ ; p2 [ i ] = j ; sum = sum + arr [ i ] [ j ] ; } else { j = p2 [ i ] ; sum = sum + arr [ i ] [ j ] ; } } } if ( sum > summax ) { summax = sum ; } step1 : ; } printf ( <str> , summax ) ; } return <int> ; }", "label": 2, "id": 5093}
{"input": "long int gcd ( long int a , long int b ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a , & b ) ; long int i , x ; i = gcd ( a , b ) ; x = ( a * b ) / i ; printf ( <str> , i , x ) ; } } long int gcd ( long int a , long int b ) { if ( a == <int> || b == <int> ) return <int> ; else if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; }", "label": 0, "id": 5094}
{"input": "int main ( ) { int t ; int i , j ; int count = <int> ; long long int n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] ) count ++ ; } printf ( <str> , count + n ) ; count = <int> ; } return <int> ; }", "label": 1, "id": 5095}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int i = <int> ; int x , y ; while ( i ++ < T ) { int a , b ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) { a = a - b ; } else if ( b > a ) { b = b - a ; } } printf ( <str> , a ) ; printf ( <str> , ( x * y ) / a ) ; } return <int> ; }", "label": 1, "id": 5096}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int lines , i , j , arr [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = lines - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j >= i + <int> ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; } else { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } } } for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { printf ( <str> , arr [ i ] [ j ] ) ; } printf ( <str> ) ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5097}
{"input": "int main ( ) { int t , lines , i , j ; scanf ( <str> , & t ) ; int count = <int> ; while ( count < t ) { scanf ( <str> , & lines ) ; int arr [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } int sum1 = <int> , sum2 = <int> ; for ( i = lines - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { sum1 = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; sum2 = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; if ( sum1 >= sum2 ) { arr [ i ] [ j ] = sum1 ; } else { arr [ i ] [ j ] = sum2 ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; count ++ ; } }", "label": 0, "id": 5098}
{"input": "main ( ) { int a [ <int> ] [ <int> ] = { <int> } , i = <int> , j = <int> , n = <int> , k = <int> , p = <int> , h = <int> ; scanf ( <str> , & k ) ; for ( p = <int> ; p < k ; p ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i + <int> ] [ j ] += a [ i ] [ j ] ; if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { a [ i + <int> ] [ j + <int> ] += a [ i ] [ j ] ; } } else { if ( a [ i ] [ j ] >= a [ i ] [ j - <int> ] ) { a [ i + <int> ] [ j ] += a [ i ] [ j ] ; } if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { a [ i + <int> ] [ j + <int> ] += a [ i ] [ j ] ; } } } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > h ) { h = a [ i ] [ j ] ; } } } printf ( <str> , h ) ; } return <int> ; }", "label": 3, "id": 5099}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int num ; scanf ( <str> , & num ) ; long int * array = ( int * ) malloc ( num * sizeof ( long int ) ) ; int index = <int> ; while ( index < num ) { scanf ( <str> , array + index ) ; index ++ ; } index = <int> ; long int cont = <int> ; long int cur_sum = <int> ; long int sum = <int> ; for ( ; index < num ; index ++ ) { if ( array [ index ] <= array [ index + <int> ] ) { cont += <int> ; cur_sum = cont * ( cont + <int> ) / <int> ; continue ; } else { cont = <int> ; sum += cur_sum ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5100}
{"input": "int main ( ) { int t , i ; long long int a , b , n1 , n2 , temp , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; a = n1 ; b = n2 ; while ( b != <int> ) { temp = a % b ; a = b ; b = temp ; } gcd = a ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 5101}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; int n ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = a [ <int> ] ; for ( int j = <int> ; j < n ; j ++ ) { if ( min > a [ j ] ) { min = a [ j ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5102}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; for ( int ti = <int> ; ti < T ; ti ++ ) { int N ; scanf ( <str> , & N ) ; int a [ N ] ; for ( int i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; int min = a [ <int> ] ; for ( int i = <int> ; i < N ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5103}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int l ; scanf ( <str> , & l ) ; int tri [ l ] [ l ] ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tri [ i ] [ j ] ) ; } } int dp [ l ] [ l ] ; dp [ <int> ] [ <int> ] = tri [ <int> ] [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { dp [ i ] [ j ] = tri [ i ] [ j ] + dp [ i - <int> ] [ j ] ; } else if ( j == i ) { dp [ i ] [ j ] = tri [ i ] [ j ] + dp [ i - <int> ] [ j - <int> ] ; } else { dp [ i ] [ j ] = max ( tri [ i ] [ j ] + dp [ i - <int> ] [ j ] , tri [ i ] [ j ] + dp [ i - <int> ] [ j - <int> ] ) ; } } } int m = dp [ l - <int> ] [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) { if ( dp [ l - <int> ] [ i ] > m ) { m = dp [ l - <int> ] [ i ] ; } } printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 5104}
{"input": "int matrix [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int n , number ; scanf ( <str> , & number ) ; while ( number -- ) { scanf ( <str> , & n ) ; int i , j , sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } if ( i - <int> >= <int> && i >= j ) { if ( j - <int> >= <int> ) { if ( matrix [ i - <int> ] [ j ] > matrix [ i - <int> ] [ j - <int> ] ) { matrix [ i ] [ j ] = matrix [ i ] [ j ] + matrix [ i - <int> ] [ j ] ; } else { matrix [ i ] [ j ] = matrix [ i ] [ j ] + matrix [ i - <int> ] [ j - <int> ] ; } } else { matrix [ i ] [ j ] = matrix [ i ] [ j ] + matrix [ i - <int> ] [ j ] ; } } } } for ( i = <int> ; i < n ; i ++ ) { if ( sum < matrix [ n - <int> ] [ i ] ) { sum = matrix [ n - <int> ] [ i ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 5105}
{"input": "int costofarray ( long long int a [ ] , long long int n ) { int i = <int> ; int min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } int x = min * ( n - <int> ) ; return x ; } int main ( ) { int t , i ; long long int arr [ <int> ] , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } long long int cost = costofarray ( arr , n ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 5106}
{"input": "int arr [ <int> ] ; int adds ( int t ) { int s = <int> ; while ( t > <int> ) { s = s + t ; t -- ; } return s ; } int main ( ) { int n ; int t ; int x ; int cnt = <int> , i , j ; int c = <int> , sum = <int> , sum1 = <int> ; scanf ( <str> , & n ) ; while ( n > <int> ) { n -- ; scanf ( <str> , & t ) ; c = adds ( t ) ; for ( i = <int> ; i < c ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> , j = <int> ; ( i + <int> + cnt ) < c ; ) { j = i + <int> + cnt ; sum = arr [ i ] + arr [ j ] + arr [ j + <int> ] ; i = j ; cnt ++ ; if ( sum > sum1 ) sum1 = sum ; } printf ( <str> , sum1 ) ; } }", "label": 3, "id": 5107}
{"input": "int main ( ) { int n , t ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; int a [ t ] [ t ] ; for ( int i = <int> ; i < t ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( int i = t - <int> ; i > <int> ; i -- ) for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5108}
{"input": "int main ( ) { long int a [ <int> ] ; int i , j , n , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int count = <int> , len = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j + <int> ] >= a [ j ] ) len ++ ; else { count = count + ( len * ( len - <int> ) ) / <int> ; len = <int> ; } } if ( len > <int> ) count = count + ( len * ( len - <int> ) ) / <int> ; printf ( <str> , n + count ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 5109}
{"input": "int main ( ) { int t , n , i , j , k , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( j = n - <int> ; j >= <int> ; j -- ) for ( k = <int> ; k <= i ; k ++ ) if ( a [ j + <int> ] [ k ] < a [ j + <int> ] [ k + <int> ] ) a [ j ] [ k ] += a [ j + <int> ] [ k + <int> ] ; else a [ j ] [ k ] += a [ j + <int> ] [ k ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5110}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , min ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5111}
{"input": "int main ( ) { int i , temp , T , j , k ; scanf ( <str> , & T ) ; long int a , b , lcm , gcd ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } gcd = <int> ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; i = <int> ; gcd = <int> ; } return <int> ; }", "label": 2, "id": 5112}
{"input": "int tree [ <int> ] ; int n ; int find_sum ( int root ) { int l , r ; if ( root >= n ) { return <int> ; } l = root * <int> + <int> ; r = l + <int> ; if ( root * <int> + <int> < n ) { l = tree [ l ] + find_sum ( l ) ; r = tree [ r ] + find_sum ( r ) ; return l > r ? l : r ; } return <int> ; } int main ( int argc , char const * argv [ ] ) { int i , j , T ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; ++ j ) { scanf ( <str> , & n ) ; n = n * ( ( <int> + n ) / <int> ) ; for ( i = <int> ; i < n ; ++ i ) scanf ( <str> , & tree [ i ] ) ; printf ( <str> , tree [ <int> ] + find_sum ( <int> ) ) ; } return <int> ; }", "label": 1, "id": 5113}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , i , j , k ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5114}
{"input": "int main ( ) { long int i , j , n , sub , t , fact , k ; long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { sub = <int> ; fact = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; i = <int> ; while ( i < n - <int> ) { j = i ; while ( j < n - <int> && a [ j ] <= a [ j + <int> ] ) j += <int> ; for ( k = <int> ; k <= ( j - i ) ; k ++ ) fact = fact * k ; sub = sub + fact ; i = j + <int> ; } sub += n ; printf ( <str> , sub ) ; } return <int> ; }", "label": 1, "id": 5115}
{"input": "int max ( int , int ) ; int t = <int> ; int s ; int main ( ) { int n , i , j , k ; scanf ( <str> , & n ) ; int r [ n ] ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & s ) ; int a [ s ] [ s ] ; for ( i = <int> ; i < s ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; r [ k ] = cache ( a , <int> , <int> , s ) ; } for ( k = <int> ; k < n ; k ++ ) printf ( <str> , r [ k ] ) ; return <int> ; } int cache ( int a [ s ] [ s ] , int i , int j , int s ) { int p , q , c [ s ] [ s ] ; for ( p = <int> ; p < s ; p ++ ) for ( q = <int> ; q < s ; q ++ ) c [ p ] [ q ] = - <int> ; return solve ( c , a , i , j , s ) ; } int solve ( int c [ s ] [ s ] , int a [ s ] [ s ] , int i , int j , int s ) { int t1 , t2 ; if ( i == s ) return <int> ; if ( c [ i ] [ j ] >= <int> ) return c [ i ] [ j ] ; t1 = solve ( c , a , i + <int> , j , s ) ; t2 = solve ( c , a , i + <int> , j + <int> , s ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; c [ i ] [ j ] = t ; return t ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 5116}
{"input": "int main ( ) { int a , b , t , i , c , gcd , lcm , j = <int> , p , q , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; { if ( a > b ) x = a ; else x = b ; for ( ; x >= <int> ; x -- ) { if ( a % x == <int> && b % x == <int> ) { gcd = x ; break ; } } } { do { p = a * j ; q = b * j ; if ( p = q ) { lcm = p ; break ; } } while ( j ++ ) ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 5117}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long x , y , a , b , t , g , l ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } g = a ; l = x * y / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 5118}
{"input": "void main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int n ; scanf ( <str> , & n ) ; long int a [ n ] ; int i , j , count = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) count += <int> ; else break ; } } printf ( <str> , count ) ; } }", "label": 0, "id": 5119}
{"input": "int main ( ) { int t = <int> , n = <int> , tri [ <int> ] [ <int> ] , sum = <int> , temp [ <int> ] , i = <int> , j = <int> , c = <int> , tsum = <int> , x = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < <int> ; i ++ ) temp [ i ] = <int> ; while ( t > <int> ) { scanf ( <str> , & n ) ; c = n ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tri [ i ] [ ( j - <int> ) ] ) ; } scanf ( <str> , & tri [ i ] [ i ] ) ; } while ( temp [ <int> ] == <int> ) { tsum = <int> ; for ( i = <int> ; i < n ; i ++ ) tsum = tsum + tri [ i ] [ ( temp [ ( i + <int> ) ] ) ] ; if ( tsum > sum ) sum = tsum ; for ( i = c ; i > <int> ; i -- ) { if ( temp [ i ] == temp [ ( i - <int> ) ] ) { x = ++ temp [ i ] ; for ( j = i ; j <= n ; j ++ ) temp [ j ] = x ; break ; } } } printf ( <str> , sum ) ; for ( i = <int> ; i <= n ; i ++ ) temp [ i ] = <int> ; sum = <int> ; t -- ; } return <int> ; }", "label": 2, "id": 5120}
{"input": "int main ( void ) { int a , b , i , c , d , k ; scanf ( <str> , & d ) ; for ( k = <int> ; k <= d ; k ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; c = a ; c = min ( a , b ) ; for ( i = c ; i = <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { printf ( <str> , i ) ; printf ( <str> , ( b * a ) / i ) ; break ; } } } return <int> ; }", "label": 1, "id": 5121}
{"input": "int dp [ <int> ] [ <int> ] ; int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & dp [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { if ( dp [ i + <int> ] [ j ] > dp [ i + <int> ] [ j + <int> ] ) dp [ i ] [ j ] += dp [ i + <int> ] [ j ] ; else dp [ i ] [ j ] += dp [ i + <int> ] [ j + <int> ] ; } printf ( <str> , dp [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5122}
{"input": "int isgreater ( int a , int b ) { if ( a > b ) return <int> ; else return <int> ; } int main ( ) { int t , n , * a , i , cost ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { while ( t -- ) { scanf ( <str> , & n ) ; if ( n >= <int> && n <= <int> ) { cost = <int> ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , a + i ) ; for ( i = <int> ; i < n ; i ++ ) { if ( isgreater ( * ( a + i ) , * ( a + i + <int> ) ) ) { cost += * ( a + i + <int> ) ; * ( a + i ) = <int> ; } else { cost += * ( a + i ) ; * ( a + i + <int> ) = <int> ; } } printf ( <str> , cost ) ; } } } return <int> ; }", "label": 1, "id": 5123}
{"input": "int main ( ) { long int t , i , j , a [ <int> ] [ <int> ] , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i <= m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = m - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5124}
{"input": "int tree [ <int> ] [ <int> ] ; int tree_length ; int greater_sum ( int , int ) ; int main ( int argc , char * argv ) { int n , i , j , k ; for ( scanf ( <str> , & n ) , i = <int> ; n > <int> ; n -- , i ++ ) { scanf ( <str> , & tree_length ) ; for ( j = <int> ; j <= tree_length ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & tree [ j ] [ k ] ) ; } } printf ( <str> , greater_sum ( <int> , <int> ) ) ; } } int greater_sum ( int i , int j ) { int m , n ; if ( i == tree_length ) { return ( tree [ i ] [ j ] ) ; } else { if ( ( m = greater_sum ( i + <int> , j ) ) > ( n = greater_sum ( i + <int> , j + <int> ) ) ) { return ( tree [ i ] [ j ] + m ) ; } else { return ( tree [ i ] [ j ] + n ) ; } } }", "label": 2, "id": 5125}
{"input": "int n ; int matrix [ <int> ] [ <int> ] ; int cache [ <int> ] [ <int> ] ; void fillzero ( ) { int i , j ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) cache [ i ] [ j ] = - <int> ; } long int max ( long int a , long int b ) { return a > b ? a : b ; } long int trav ( int i , int j ) { if ( i == n - <int> ) return matrix [ i ] [ j ] ; if ( cache [ i ] [ j ] != - <int> ) return cache [ i ] [ j ] ; cache [ i ] [ j ] = max ( trav ( i + <int> , j ) , trav ( i + <int> , j + <int> ) ) + matrix [ i ] [ j ] ; return cache [ i ] [ j ] ; } void start ( ) { int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & matrix [ i ] [ j ] ) ; printf ( <str> , trav ( <int> , <int> ) ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { fillzero ( ) ; scanf ( <str> , & n ) ; start ( ) ; } return <int> ; }", "label": 0, "id": 5126}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { unsigned int a , i , s , b , h , l ; scanf ( <str> , & a , & b ) ; if ( a <= b ) { s = a ; } else s = b ; for ( i = <int> ; i <= s ; i ++ ) { if ( a % i == <int> && b % i == <int> ) h = i ; } l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 1, "id": 5127}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t ) { printf ( <str> ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 3, "id": 5128}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( int x , int y ) { if ( x == <int> || y == <int> ) return <int> ; if ( x > y ) return gcd ( x - y , y ) ; if ( x < y ) return gcd ( x , y - x ) ; if ( x == y ) return x ; }", "label": 1, "id": 5129}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long r = <int> , l = <int> ; int n , p ; scanf ( <str> , & n , & p ) ; for ( int i = <int> ; i < n ; ++ i ) { int x ; scanf ( <str> , & x ) ; if ( x < p ) { r += l * ( l + <int> ) / <int> ; l = <int> ; } else ++ l ; p = x ; } r += l * ( l + <int> ) / <int> ; printf ( <str> , r ) ; } }", "label": 0, "id": 5130}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5131}
{"input": "int main ( ) { int a [ <int> ] , t , n , count , p , i , j ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( p = <int> ; p < t ; p ++ ) { count = <int> ; printf ( <str> , p + <int> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count += <int> ; } } printf ( <str> , count ) ; return count ; } }", "label": 3, "id": 5132}
{"input": "int main ( ) { int T , i , N , j ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; int arr [ N ] , d ; for ( i = <int> ; i < N ; ++ i ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < N ; ++ i ) { for ( j = i + <int> ; j < N ; ++ j ) { if ( arr [ i ] > arr [ j ] ) { d = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = d ; } } } printf ( <str> , arr [ N - <int> ] ) ; } return <int> ; }", "label": 2, "id": 5133}
{"input": "int gcd ( int a , int b ) { if ( ! b ) return a ; return gcd ( b , a % b ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } }", "label": 1, "id": 5134}
{"input": "int main ( ) { int i , p , q , t , n , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; i = n * ( n + <int> ) / <int> ; while ( i -- ) scanf ( <str> , & a [ i - <int> ] ) ; for ( i = n ; i > <int> ; i -- ) { p = i * ( i + <int> ) / <int> ; q = i * ( i - <int> ) / <int> ; while ( n > <int> ) { if ( a [ p ] > a [ p - <int> ] ) a [ q ] += a [ p ] ; else a [ q ] += a [ p - <int> ] ; p -- ; q -- ; n -- ; } } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5135}
{"input": "int getpathmax ( int * * a , int n , int val , int i , int j ) { static int p ; if ( i == n - <int> ) { if ( val > p ) { p = val ; } return ; } else { int s1 = getpathmax ( a , n , val + a [ i + <int> ] [ j ] , i + <int> , j ) ; int s2 = getpathmax ( a , n , val + a [ i + <int> ] [ j + <int> ] , i + <int> , j + <int> ) ; } return p ; } int main ( ) { int t , n , * * a , i , j , max = <int> , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; if ( n == <int> ) { scanf ( <str> , & max ) ; printf ( <str> , max ) ; } else { a = ( int * * ) malloc ( sizeof ( int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } max = getpathmax ( a , n , a [ <int> ] [ <int> ] , <int> , <int> ) ; printf ( <str> , max ) ; free ( a ) ; } } return <int> ; }", "label": 2, "id": 5136}
{"input": "int output , arr [ <int> ] ; int main ( ) { int testcase , test , total_row , i , start , end , output1 [ <int> ] ; scanf ( <str> , & testcase ) ; end = - <int> ; for ( test = <int> ; test <= testcase ; test ++ ) { scanf ( <str> , & total_row ) ; start = end + <int> ; end = start + total_row * ( total_row + <int> ) / <int> - <int> ; for ( i = start ; i <= end ; i ++ ) scanf ( <str> , & arr [ i ] ) ; output = arr [ start ] ; total ( total_row , <int> , start ) ; output1 [ test - <int> ] = output ; } for ( i = <int> ; i < testcase ; i ++ ) printf ( <str> , output1 [ i ] ) ; return ( <int> ) ; } int total ( int total_row , int row , int index ) { if ( row == total_row ) return ; int below , row_end ; below = row + index ; row_end = ( row * ( row + <int> ) % <int> ) - <int> ; if ( below - <int> == row_end ) index = maxof2 ( below , below + <int> ) ; else index = maxof3 ( below - <int> , below , below + <int> ) ; output += arr [ index ] ; total ( total_row , row + <int> , index ) ; } int maxof2 ( int a , int b ) { if ( arr [ a ] > arr [ b ] ) return ( a ) ; else return ( b ) ; } int maxof3 ( int a , int b , int c ) { int d = maxof2 ( a , b ) ; return ( maxof2 ( d , c ) ) ; }", "label": 3, "id": 5137}
{"input": "int main ( ) { int a , b , t , i , j , n , sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { scanf ( <str> , & b ) ; if ( a > b ) { sum += b ; a = b ; } else { sum += a ; } } printf ( <str> , sum ) ; } }", "label": 1, "id": 5138}
{"input": "int a [ <int> ] [ <int> ] ; main ( ) { int n1 ; while ( scanf ( <str> , & n1 ) != - <int> ) { int n , i = <int> , j ; scanf ( <str> , & n ) ; for ( ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , s ( <int> , <int> , n ) ) ; } return <int> ; } int s ( int i , int j , int n ) { int t1 , t2 ; if ( i >= n ) return <int> ; t1 = s ( i + <int> , j , n ) ; t2 = s ( i + <int> , j + <int> , n ) ; return t1 > t2 ? t1 : t2 + a [ i ] [ j ] ; }", "label": 2, "id": 5139}
{"input": "int main ( ) { int t , a , b , hcf , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( a % b != <int> ) { a = a % b ; hcf = a ; a = b ; b = hcf ; } printf ( <str> , b , ( x * y ) / b ) ; } return <int> ; }", "label": 1, "id": 5140}
{"input": "void main ( ) { int a [ <int> ] , k , t , i , j , count , n ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { for ( i = <int> ; k < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } scanf ( <str> , & n ) ; for ( i = <int> , j = i + <int> ; i < n ; i ++ ) { while ( a [ j ] > a [ j - <int> ] && j < n ) { count ++ ; j ++ ; } } count += n ; } }", "label": 3, "id": 5141}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5142}
{"input": "int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int i = <int> , p = <int> ; long int l = <int> ; while ( ! ( i > a || i > b ) ) { while ( a % i == <int> && b % i == <int> ) { a /= i ; b /= i ; l *= i ; p *= i ; } i ++ ; } l *= a * b ; printf ( <str> , p , l ) ; } return <int> ; }", "label": 1, "id": 5143}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , r , i , t , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; r = gcd ( a , b ) ; l = ( a * b ) / gcd ( a , b ) ; printf ( <str> , r , l ) ; } return <int> ; } int gcd ( int x , int y ) { int rem ; rem = x % y ; if ( rem == <int> ) return y ; else return ( gcd ( y , rem ) ) ; }", "label": 1, "id": 5144}
{"input": "int main ( ) { int i , j , k , a , op1 , op2 ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & a ) ; int p [ a + <int> ] [ a + <int> ] ; for ( i = <int> ; i <= a ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & p [ i ] [ j ] ) ; } } for ( i = a ; i > <int> ; i -- ) { op1 = <int> ; op2 = <int> ; for ( j = i ; j >= <int> ; j -- ) { op1 = p [ i + <int> ] [ j ] + p [ i ] [ j ] ; op2 = p [ i + <int> ] [ j + <int> ] + p [ i ] [ j ] ; if ( op1 >= op2 ) p [ i ] [ j ] = op1 ; else p [ i ] [ j ] = op2 ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5145}
{"input": "int main ( ) { int tc ; scanf ( <str> , & tc ) ; for ( int t = <int> ; t < tc ; t ++ ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int n1 = a , n2 = b ; while ( b != <int> ) { int temp = a % b ; a = b ; b = temp ; } printf ( <str> , a , ( n1 * n2 ) / a ) ; } return <int> ; }", "label": 0, "id": 5146}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int tc , i , j , n ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5147}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int n ; scanf ( <str> , & n ) ; int ar [ n ] ; int i ; long long int count = <int> , sum = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ar [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { count ++ ; if ( i == n - <int> || ar [ i ] > ar [ i + <int> ] ) { sum += ( count ) * ( count + <int> ) / <int> ; count = <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 5148}
{"input": "int main ( ) { int i , j , k , n , b , c , m ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; int a [ m ] ; for ( j = <int> ; j < m ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( k = <int> ; k < m ; k ++ ) { if ( a [ <int> ] > a [ k ] ) { c = a [ <int> ] ; a [ <int> ] = a [ k ] ; a [ k ] = c ; } } b = m - <int> ; printf ( <str> , a [ <int> ] * b ) ; } }", "label": 0, "id": 5149}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , l , H ; scanf ( <str> , & a , & b ) ; for ( l = <int> ; l <= a * b ; l ++ ) if ( l % a == <int> && l % b == <int> ) break ; for ( H = a > b ? a : b ; H > <int> ; H -- ) if ( a % H == <int> && b % H == <int> ) break ; printf ( <str> , H , l ) ; } return <int> ; }", "label": 2, "id": 5150}
{"input": "int main ( ) { int t , n , sum , max = <int> , m , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) { sum = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , m ) ; sum += m ; } if ( sum > max ) max = sum ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 5151}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int j , i , ma = <int> , n , t ; int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { ma = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } a [ <int> ] [ <int> ] = b [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) a [ i ] [ j ] = b [ i ] [ j ] + a [ i - <int> ] [ j ] ; else if ( i == j ) a [ i ] [ j ] = b [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i ] [ j ] = b [ i ] [ j ] + max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { ma = max ( ma , a [ n - <int> ] [ i ] ) ; } printf ( <str> , ma ) ; } }", "label": 0, "id": 5152}
{"input": "int max ( int * a , int l ) { int max , i ; max = * ( a + i ) ; for ( i = <int> ; i < l ; i ++ ) { if ( max < * ( a + i ) ) max = * ( a + i ) ; } return max ; } int main ( ) { int n , l , i , j ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & l ) ; int a [ l ] [ l ] , b [ l ] [ l ] ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = <int> ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j < l ; j ++ ) { if ( j == <int> ) { b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else if ( i == j ) { b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] > b [ i - <int> ] [ j ] ? b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] : b [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } } printf ( <str> , max ( b [ l - <int> ] , l ) ) ; n -- ; } return <int> ; }", "label": 3, "id": 5153}
{"input": "int main ( ) { int i , j , t , n , k , p , q , r , s ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( r = <int> ; r < n ; r ++ ) for ( s = <int> ; s <= r ; s ++ ) { scanf ( <str> , & a [ r ] [ s ] ) ; } for ( p = ( n - <int> ) ; p >= <int> ; p -- ) for ( q = <int> ; q <= p ; q ++ ) { if ( a [ p ] [ q ] + a [ p + <int> ] [ q ] >= a [ p ] [ q ] + a [ p + <int> ] [ q + <int> ] ) a [ p ] [ q ] = a [ p ] [ q ] + a [ p + <int> ] [ q ] ; else a [ p ] [ q ] = a [ p ] [ q ] + a [ p + <int> ] [ q + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5154}
{"input": "int main ( ) { int t , n , i , min ; long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( i == <int> ) min = a [ i ] ; else if ( a [ i ] < min ) min = a [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } }", "label": 0, "id": 5155}
{"input": "int gcd ( int a , int b ) { if ( b != <int> ) return gcd ( b , a % b ) ; else return a ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 5156}
{"input": "int a [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int i , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> && i == <int> ) { continue ; } else if ( j == <int> ) { a [ i ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i ] [ j ] = ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) ? a [ i ] [ j ] + a [ i - <int> ] [ j ] : a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; } } } int maxi = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j ] > maxi ) maxi = a [ n - <int> ] [ j ] ; } printf ( <str> , maxi ) ; } return <int> ; }", "label": 0, "id": 5157}
{"input": "main ( ) { int T , n , i , j , k , R [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & R [ j ] [ k ] ) ; } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) R [ j ] [ k ] += R [ j + <int> ] [ k ] > R [ j + <int> ] [ k + <int> ] ? R [ j + <int> ] [ k ] : R [ j + <int> ] [ k + <int> ] ; } printf ( <str> , R [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5158}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- > <int> ) { int nlevel ; scanf ( <str> , & nlevel ) ; int arr [ nlevel ] [ nlevel ] ; int i , j ; int n = <int> ; while ( n < nlevel ) { for ( i = <int> ; i <= n ; ++ i ) scanf ( <str> , & arr [ n ] [ i ] ) ; n ++ ; } for ( i = nlevel - <int> ; i >= <int> ; -- i ) for ( j = <int> ; j <= i ; ++ j ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5159}
{"input": "int main ( ) { int t , i , j ; long int a [ <int> ] ; long int n , min = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 5160}
{"input": "int max ( int a , int b ) ; int main ( ) { int a [ <int> ] [ <int> ] , t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= n ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = max ( a [ i - <int> ] [ j - <int> ] , a [ i - <int> ] [ j ] ) + a [ i ] [ j ] ; } j = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( a [ n ] [ i ] > j ) j = a [ n ] [ i ] ; else continue ; } printf ( <str> , j ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 5161}
{"input": "int <unk> ( long long int * arr , long long int n ) { long long int i = <int> , j = <int> , min , max ; if ( arr [ <int> ] > arr [ <int> ] ) { max = arr [ <int> ] ; min = arr [ <int> ] ; } else { max = arr [ <int> ] ; min = arr [ <int> ] ; } i = <int> ; while ( i < n ) { if ( max < arr [ i ] ) { min = max ; max = arr [ i ] ; } else { min = arr [ i ] ; } i ++ ; } printf ( <str> , min ) ; return <int> ; } int input ( long long int n ) { long long int arr [ n ] , i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } <unk> ( arr , n ) ; return <int> ; } int number_line ( ) { long long int n ; scanf ( <str> , & n ) ; input ( n ) ; return <int> ; } int test_case ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { number_line ( ) ; } return <int> ; } int main ( ) { test_case ( ) ; return <int> ; }", "label": 1, "id": 5162}
{"input": "int n ; long long int max ( long long int a , long long int b ) { if ( b > a ) return b ; else return a ; } long long int sot ( long long int a [ ] [ <int> ] , int r , int c , long long int b [ ] [ <int> ] ) { if ( r >= n || c >= n ) return <int> ; if ( r == ( n - <int> ) || c == ( n - <int> ) ) { b [ r ] [ c ] = a [ r ] [ c ] ; return a [ r ] [ c ] ; } else { if ( b [ r ] [ c ] == <int> ) b [ r ] [ c ] = a [ r ] [ c ] + max ( sot ( a , r + <int> , c + <int> , b ) , sot ( a , r + <int> , c + <int> , b ) ) ; if ( b [ r + <int> ] [ c ] == <int> ) b [ r + <int> ] [ c ] = a [ r + <int> ] [ c ] + max ( sot ( a , r + <int> , c + <int> , b ) , sot ( a , r + <int> , c , b ) ) ; if ( b [ r + <int> ] [ c + <int> ] == <int> ) b [ r + <int> ] [ c + <int> ] = a [ r + <int> ] [ c + <int> ] + max ( sot ( a , r + <int> , c + <int> , b ) , sot ( a , r + <int> , c + <int> , b ) ) ; return ( a [ r ] [ c ] + max ( b [ r + <int> ] [ c ] , b [ r + <int> ] [ c + <int> ] ) ) ; } } int main ( ) { int t , i , j ; long long int b [ <int> ] [ <int> ] ; long long int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = <int> ; } } printf ( <str> , sot ( a , <int> , <int> , b ) ) ; } return <int> ; }", "label": 1, "id": 5163}
{"input": "int main ( void ) { int t , n , i , j , pos ; long long int sum , pro , count ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; count = <int> ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i += pos ) { pos = <int> ; for ( j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) { pos ++ ; } else break ; } count += pos * ( pos + <int> ) / <int> ; } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 5164}
{"input": "struct node { int triangle [ <int> ] [ <int> ] ; int max ; struct node * next ; } ; typedef struct node * NODE ; NODE getnode ( void ) { return ( malloc ( sizeof ( struct node ) ) ) ; } int next ( int mask [ ] , int n ) { int i ; for ( i = <int> ; ( i < n ) && mask [ i ] ; ++ i ) mask [ i ] = <int> ; if ( i < n ) { mask [ i ] = <int> ; return <int> ; } return <int> ; } int main ( ) { int rows ; int i , j , k , count ; int r , c ; int bin [ <int> ] ; int sum = <int> ; int testcases ; NODE temp , head , cur ; scanf ( <str> , & testcases ) ; for ( count = <int> ; count < testcases ; count ++ ) { temp = getnode ( ) ; scanf ( <str> , & rows ) ; if ( rows <= <int> || rows > <int> ) exit ( <int> ) ; for ( i = <int> ; i <= rows ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & temp -> triangle [ i - <int> ] [ j ] ) ; if ( temp -> triangle [ i - <int> ] [ j ] <= <int> || temp -> triangle [ i - <int> ] [ j ] > <int> ) exit ( <int> ) ; } if ( count == <int> ) { head = temp ; cur = head ; } else { cur -> next = temp ; cur = cur -> next ; } } cur = head ; for ( count = <int> ; count < testcases ; count ++ ) { cur -> max = <int> ; for ( j = <int> ; j < rows ; j ++ ) { bin [ j ] = <int> ; cur -> max += cur -> triangle [ j ] [ <int> ] ; } while ( next ( bin , rows - <int> ) ) { k = <int> ; r = <int> ; c = <int> ; sum = <int> ; for ( j = <int> ; j < rows ; j ++ ) { sum += cur -> triangle [ r ++ ] [ c ] ; c = c + bin [ k ++ ] ; } if ( sum > cur -> max ) cur -> max = sum ; } cur = cur -> next ; } printf ( <str> ) ; cur = head ; while ( cur != NULL ) { printf ( <str> , cur -> max ) ; cur = cur -> next ; } return <int> ; }", "label": 3, "id": 5165}
{"input": "int main ( ) { int t , a , b , GCD , LCM , i , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = ( a < b ) ? a : b ; for ( i = <int> ; i <= c ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { GCD = i ; LCM = ( a * b ) / GCD ; } } printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 1, "id": 5166}
{"input": "int main ( ) { int n , t ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; int a [ t ] [ t ] ; for ( int i = <int> ; i < t ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( int i = t - <int> ; i > <int> ; i -- ) for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5167}
{"input": "int main ( ) { long long int i , j , a , b , k , l , m , n , o , c [ <int> ] , d [ <int> ] ; scanf ( <str> , & i ) ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a , & b ) ; l = <int> ; if ( a < b ) k = a ; else k = b ; for ( m = <int> ; m <= k ; m ++ ) { if ( ( a % m == <int> ) && ( b % m == <int> ) ) l = <int> ; n = m ; } if ( l == <int> ) n = <int> ; c [ j ] = n ; if ( a > b ) k = a ; else k = b ; for ( m = k ; m <= a * b ; m ++ ) { if ( ( m % a == <int> ) && ( m % b == <int> ) ) { o = m ; break ; } } d [ j ] = o ; } for ( j = <int> ; j < i ; j ++ ) { printf ( <str> , c [ j ] , d [ j ] ) ; printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 5168}
{"input": "int main ( ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { printf ( <str> , a [ i ] [ j ] ) ; } printf ( <str> ) ; } int max = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { int sum = <int> ; for ( j = <int> ; j <= i ; j ++ ) { sum = sum + a [ i ] [ j ] ; } if ( max < sum ) ; { max = sum ; } } printf ( <str> , max ) ; return <int> ; }", "label": 1, "id": 5169}
{"input": "long int gcd ( long int a , long int b ) ; main ( ) { long int a , b , d , l , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; d = gcd ( a , b ) ; l = ( a * b ) / d ; printf ( <str> , d , l ) ; } return <int> ; } long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 1, "id": 5170}
{"input": "int main ( ) { int i , j , a [ <int> ] [ <int> ] , n ; printf ( <str> ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = ( n - <int> ) ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 5171}
{"input": "unsigned int funcRec ( unsigned int arr [ <int> ] [ <int> ] , unsigned int rowNum , unsigned int colNum , unsigned int maxRow ) { if ( rowNum == maxRow ) return arr [ rowNum ] [ colNum ] ; else { unsigned int r1 = funcRec ( arr , rowNum + <int> , colNum , maxRow ) ; unsigned int r2 = funcRec ( arr , rowNum + <int> , colNum + <int> , maxRow ) ; if ( r1 > r2 ) return r1 + arr [ rowNum ] [ colNum ] ; else return r2 + arr [ rowNum ] [ colNum ] ; } } main ( ) { unsigned int arr [ <int> ] [ <int> ] [ <int> ] ; int arrTest [ <int> ] ; int arrTestCount = <int> ; int testCases ; scanf ( <str> , & testCases ) ; int temp = <int> ; int arrSize ; int i ; int j ; while ( temp < testCases ) { i = <int> ; j = <int> ; scanf ( <str> , & arrSize ) ; arrTest [ arrTestCount ] = arrSize - <int> ; arrTestCount ++ ; for ( ; i < arrSize ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ temp ] [ i ] [ j ] ) ; } temp ++ ; } for ( i = <int> ; i < testCases ; i ++ ) { printf ( <str> , funcRec ( arr [ i ] , <int> , <int> , arrTest [ i ] ) ) ; } }", "label": 3, "id": 5172}
{"input": "void main ( ) { int a , b , g , l , i ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i < a && i < b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = i ; } l = a * b / g ; printf ( <str> , g , l ) ; }", "label": 1, "id": 5173}
{"input": "int main ( ) { int t , i , n , sum , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) { if ( a [ i - <int> ] > a [ i ] ) { a [ i - <int> ] = a [ i ] ; sum += a [ i ] ; a [ i ] = <int> ; } else { sum += a [ i - <int> ] ; a [ i ] = <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5174}
{"input": "int main ( ) { int i , j , n , t , temp = <int> ; scanf ( <str> , & t ) ; int b [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; temp = <int> ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) temp += a [ j + <int> ] ; else temp += a [ j ] ; } b [ i ] = temp ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , b [ i ] ) ; return ( <int> ) ; }", "label": 1, "id": 5175}
{"input": "int main ( void ) { int T , n , i , j , B [ <int> ] , sum ; long long m ; scanf ( <str> , & T ) ; while ( T -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & m ) ; if ( ( j == <int> ) && ( i != n - <int> ) ) sum += m ; else if ( ( i == n - <int> ) && ( j == <int> ) ) B [ <int> ] = m ; else if ( ( i == n - <int> ) && ( j == <int> ) ) B [ <int> ] = m ; } } if ( B [ <int> ] > B [ <int> ] ) sum += B [ <int> ] ; else sum += B [ <int> ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5176}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( void ) { int hcf , lcm ; int T ; int A , B ; scanf ( <str> , & T ) ; while ( T -- > <int> ) { scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; hcf = gcd ( A , B ) ; printf ( <str> , hcf , A * B / hcf ) ; } return <int> ; }", "label": 1, "id": 5177}
{"input": "main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int a , j , b ; scanf ( <str> , & a , & b ) ; int s = <int> , n ; if ( a > b ) n = b ; else n = a ; for ( j = <int> ; j <= n ; j ++ ) { if ( a % j == <int> && b % j == <int> ) s = j ; } long long int c = a * b / s ; printf ( <str> , s , c ) ; } }", "label": 1, "id": 5178}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T ) { int a , b ; scanf ( <str> , & a , & b ) ; int p , q ; if ( a > b ) { p = a ; q = b ; } else { p = b ; q = a ; } while ( q ) { int tmp = p % q ; p = q ; q = tmp ; } printf ( <str> , p , a * b / p ) ; if ( T != <int> ) printf ( <str> ) ; T -- ; } return <int> ; }", "label": 1, "id": 5179}
{"input": "int print ( int data [ <int> ] [ <int> ] , int n , char * <unk> ) { printf ( <str> , <unk> ) ; int i , j ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) printf ( <str> , data [ i ] [ j ] ) ; printf ( <str> ) ; } } int max ( int i , int j ) { if ( i > j ) return i ; else return j ; } int value ( int i , int j , int data [ <int> ] [ <int> ] ) { if ( i < <int> || j < <int> ) return <int> ; return data [ i ] [ j ] ; } int solve ( int data [ <int> ] [ <int> ] , int n ) { int sol [ <int> ] [ <int> ] ; int i , j ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) sol [ i ] [ j ] = data [ i ] [ j ] + max ( value ( i - <int> , j , sol ) , value ( i - <int> , j - <int> , sol ) ) ; int maxpath = <int> ; for ( j = <int> ; j < n ; ++ j ) { maxpath = max ( maxpath , sol [ n - <int> ] [ j ] ) ; } return maxpath ; } int main ( ) { int test_cases , lines , i , j ; int data [ <int> ] [ <int> ] ; scanf ( <str> , & test_cases ) ; while ( test_cases > <int> ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & data [ i ] [ j ] ) ; printf ( <str> , solve ( data , lines ) ) ; -- test_cases ; } }", "label": 1, "id": 5180}
{"input": "int main ( ) { int t , i , j , n , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; n = ( n * ( n + <int> ) ) / <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & j ) ; sum = sum + j ; } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 5181}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , N ; scanf ( <str> , & n ) ; N = n ; if ( ( N > <int> && N < <int> ) || ( N > <int> && N <= <int> ) || ( N > <int> && N <= <int> ) ) { int a [ n ] ; while ( n -- ) { scanf ( <str> , & a [ N - n ] ) ; } printf ( <str> , N + <int> ) ; } } return <int> ; }", "label": 1, "id": 5182}
{"input": "int max ( int a , int b ) { return a >= b ? a : b ; } int main ( void ) { int t , n , i , j , k , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = - <int> ; int * * a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } if ( n == <int> ) { printf ( <str> , a [ <int> ] [ <int> ] ) ; continue ; } int * * dp = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) dp [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) dp [ i ] [ <int> ] = a [ i ] [ <int> ] ; if ( dp [ <int> ] [ <int> ] > sum ) sum = dp [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { dp [ i ] [ <int> ] += dp [ i - <int> ] [ <int> ] ; if ( dp [ i ] [ <int> ] > sum ) sum = dp [ i ] [ <int> ] ; } dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] + dp [ <int> ] [ <int> ] ; if ( dp [ <int> ] [ <int> ] > sum ) sum = dp [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( i == j ) dp [ i ] [ j ] = dp [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else dp [ i ] [ j ] = max ( dp [ i - <int> ] [ j ] , dp [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; if ( dp [ i ] [ j ] > sum ) sum = dp [ i ] [ j ] ; } } printf ( <str> , sum ) ; free ( a ) ; free ( dp ) ; } return <int> ; }", "label": 0, "id": 5183}
{"input": "int main ( ) { int t , n1 , n2 , j , i , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; j = <int> ; gcd = <int> ; while ( j <= n1 && j <= n2 ) { if ( n1 % j == <int> && n2 % j == <int> ) { gcd = gcd * j ; n1 /= j ; n2 /= j ; continue ; } if ( j > <int> ) j += <int> ; if ( j == <int> ) ++ j ; } printf ( <str> , gcd , gcd * n1 * n2 ) ; } return <int> ; }", "label": 1, "id": 5184}
{"input": "int main ( ) { int i , t , j , n , a , b , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { gcd = <int> ; scanf ( <str> , & a , & b ) ; if ( a > b ) n = b ; else n = a ; for ( j = <int> ; j <= n ; j ++ ) { if ( a % j == <int> && b % j == <int> && j > gcd ) gcd = j ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 5185}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i > <int> ) { if ( j == <int> ) a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; else if ( j == i ) a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; else if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } } int max = a [ n - <int> ] [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( max < a [ n - <int> ] [ i ] ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5186}
{"input": "int main ( ) { int tc ; scanf ( <str> , & tc ) ; for ( int t = <int> ; t < tc ; t ++ ) { int n ; scanf ( <str> , & n ) ; int min = INT_MAX ; for ( int i = <int> ; i < n ; i ++ ) { int temp ; scanf ( <str> , & temp ) ; if ( temp < min ) { min = temp ; } } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 5187}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , i , j , d , f , c , l , max , k ; scanf ( <str> , & c ) ; for ( k = <int> ; k <= c ; k ++ ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , a [ i ] [ j ] ) ; } } for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> && i == <int> ) b [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == <int> ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; else if ( j == i ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; else { d = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; f = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; if ( d >= f ) b [ i ] [ j ] = d ; else b [ i ] [ j ] = f ; } } } max = b [ l - <int> ] [ <int> ] ; for ( i = <int> ; i < l ; i ++ ) { if ( b [ l - <int> ] [ i ] > max ) max = b [ l - <int> ] [ i ] ; } printf ( <str> , max ) ; } }", "label": 3, "id": 5188}
{"input": "int main ( void ) { int i , j , t , n , max , a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else if ( sum [ i - <int> ] [ j ] > sum [ i - <int> ] [ j - <int> ] ) sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5189}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , r , i , k , tri [ <int> ] [ <int> ] , j , sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & r ) ; for ( k = <int> ; k < r ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & tri [ k ] [ j ] ) ; } } for ( k = <int> ; k < r ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { if ( j == <int> ) { tri [ k ] [ j ] = tri [ k ] [ j ] + tri [ k - <int> ] [ j ] ; } else if ( j == i ) { tri [ k ] [ j ] = tri [ k ] [ j ] + tri [ k - <int> ] [ j - <int> ] ; } else { tri [ k ] [ j ] = tri [ k ] [ j ] + max ( tri [ k - <int> ] [ j ] , tri [ k - <int> ] [ j - <int> ] ) ; } } } for ( j = <int> ; j < r ; j ++ ) { if ( tri [ r - <int> ] [ j ] > tri [ r - <int> ] [ j + <int> ] ) sum = tri [ r - <int> ] [ j ] ; else sum = tri [ r - <int> ] [ j + <int> ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5190}
{"input": "int main ( ) { unsigned int a , b , i , t , n , j , e ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( b < a ) { t = b ; b = a ; a = t ; } for ( j = <int> ; j <= a ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { e = j ; } } printf ( <str> , e , a * b / e ) ; } }", "label": 2, "id": 5191}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5192}
{"input": "int main ( ) { int i , j , t , n ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5193}
{"input": "long int a [ <int> ] ; int main ( void ) { long int t , n , i , mn ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; mn = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < mn ) mn = a [ i ] ; } printf ( <str> , ( mn * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 5194}
{"input": "int main ( ) { int t , n , i , j , m , s , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } s = <int> ; for ( i = <int> ; i < n ; i ++ ) { m = a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( m < a [ i ] [ j ] ) m = a [ i ] [ j ] ; } s = s + m ; } printf ( <str> , s ) ; } }", "label": 1, "id": 5195}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; long long int A [ n ] ; int i , j , count = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { if ( A [ j ] <= A [ j + <int> ] ) { count ++ ; } else { break ; } } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 0, "id": 5196}
{"input": "int main ( ) { int n ; int mat [ <int> ] [ <int> ] = { <int> } ; int max ; int i , j , k ; int rows ; scanf ( <str> , & n ) ; for ( k = n ; k > <int> ; k -- ) { max = <int> ; scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; i ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; } if ( rows != <int> ) { for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) if ( ! j ) { mat [ i ] [ j ] = mat [ i - <int> ] [ j ] ; } else if ( mat [ i - <int> ] [ j ] > mat [ i - j ] [ j - <int> ] ) { mat [ i ] [ j ] += mat [ i - <int> ] [ j ] ; } else { mat [ i ] [ j ] += mat [ i - <int> ] [ j - <int> ] ; } for ( j = <int> ; j < i ; j ++ ) { if ( max <= mat [ i ] [ j ] ) max = mat [ i ] [ j ] ; } } } else { max = mat [ <int> ] [ <int> ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 5197}
{"input": "int main ( ) { int t , n , i , x = <int> , j = <int> , sum , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j ; j <= i + x ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } x += i ; } j = <int> ; sum = a [ j ] ; i = <int> ; while ( i <= n + <int> ) { sum += ( a [ j + i ] > a [ j + i + <int> ] ) ? a [ j + i ] : a [ j + i + <int> ] ; i ++ ; } printf ( <str> , sum ) ; } }", "label": 3, "id": 5198}
{"input": "int main ( ) { int t , b , a , i , s , g , l , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a < b ) s = a ; else s = b ; for ( j = <int> ; j <= s ; j ++ ) { if ( a % i == <int> && b % i == <int> ) g = i ; } for ( j = s ; j < ( a * b ) ; j += s ) { if ( i % a == <int> && i % b == <int> ) { l = i ; break ; } } printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 5199}
{"input": "int main ( ) { int t , sum , min ; unsigned long int a ; unsigned int n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = <int> ; min = <int> ; while ( n -- ) { scanf ( <str> , & a ) ; if ( a >= min ) { sum += min ; min = a ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5200}
{"input": "int Gcd ( int m , int n ) { if ( m == <int> ) return n ; if ( n == <int> ) return m ; Gcd ( n , m % n ) ; } int main ( ) { int t ; int i ; scanf ( <str> , & t ) ; int n , m ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m , & n ) ; int k = Gcd ( m , n ) ; printf ( <str> , k , ( m * n / k ) ) ; } }", "label": 1, "id": 5201}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int k ; scanf ( <str> , & k ) ; long int ans , c , i , min = <int> ; for ( i = <int> ; i < k ; i ++ ) { scanf ( <str> , & c ) ; if ( c < min ) min = c ; } ans = min * ( k - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5202}
{"input": "int main ( ) { int i , t , count , n , sub ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> , sub = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) count ++ ; else { sub += ( count * ( count + <int> ) / <int> ) ; count = <int> ; } } printf ( <str> , sub + n ) ; } return <int> ; }", "label": 1, "id": 5203}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5204}
{"input": "int main ( ) { int i , j , c = <int> , n , t , k ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( k = <int> ; k < n ; k ++ ) { for ( j = k ; j < n - <int> ; j ++ ) { if ( a [ j ] * a [ j + <int> ] < <int> ) { c ++ ; } else { break ; } } printf ( <str> , c ) ; c = <int> ; } t -- ; } return <int> ; }", "label": 1, "id": 5205}
{"input": "int funt ( int , int ) ; int main ( void ) { int t , a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = funt ( a , b ) ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int funt ( int a , int b ) { if ( b == <int> || a == <int> ) { return <int> ; } if ( a == b ) { return a ; } else { if ( a > b ) { a = a - b ; } else { b = b - a ; } return ( funt ( a , b ) ) ; } }", "label": 1, "id": 5206}
{"input": "int calculate_largest ( int triangle [ <int> ] [ <int> ] , int n ) ; int max ( int a , int b ) ; int main ( ) { int n , i , j , max_sum , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int triangle [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangle [ i ] [ j ] ) ; } } max_sum = calculate_largest ( triangle , n ) ; printf ( <str> , max_sum ) ; } return <int> ; } int max ( int a , int b ) { return ( a > b ) ? a : b ; } int calculate_largest ( int triangle [ <int> ] [ <int> ] , int n ) { int temp [ <int> ] [ <int> ] ; int i , j ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { temp [ i ] [ j ] = max ( triangle [ i + <int> ] [ j ] , triangle [ i + <int> ] [ j + <int> ] ) + triangle [ i ] [ j ] ; triangle [ i ] [ j ] = temp [ i ] [ j ] ; } } return temp [ <int> ] [ <int> ] ; }", "label": 0, "id": 5207}
{"input": "int gcd ( long int a , long int b ) { if ( a == b ) { return a ; } else if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , ans ; scanf ( <str> , & a , & b ) ; ans = gcd ( a , b ) ; printf ( <str> , ans ) ; printf ( <str> , ( a * b ) / ans ) ; } return <int> ; }", "label": 0, "id": 5208}
{"input": "int main ( ) { long int T , lcm , gcd ; scanf ( <str> , & T ) ; long int a [ T ] , b [ T ] ; for ( long int i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( long int i = <int> ; i < T ; i ++ ) { for ( long int j = <int> ; j <= b [ i ] && j <= a [ i ] ; j ++ ) { if ( a [ i ] % j == <int> && b [ i ] % j == <int> ) gcd = j ; } lcm = ( a [ i ] * b [ i ] ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 5209}
{"input": "int triangle [ N ] [ N ] = { { <int> } } ; int main ( ) { int number = <int> ; scanf ( <str> , & number ) ; while ( number -- ) { int line = <int> ; scanf ( <str> , & line ) ; for ( int i = <int> ; i < line ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { int t = <int> ; scanf ( <str> , & t ) ; triangle [ i ] [ j ] = t ; } } int max = <int> ; for ( int i = line - <int> ; i > <int> ; i -- ) { int <unk> = <int> ; for ( int j = <int> ; j < line - <int> ; j ++ ) { if ( triangle [ i ] [ j ] > triangle [ i ] [ j + <int> ] ) <unk> = triangle [ i ] [ j ] ; else <unk> = triangle [ i ] [ j + <int> ] ; triangle [ i - <int> ] [ j ] = triangle [ i - <int> ] [ j ] + <unk> ; } } max = triangle [ <int> ] [ <int> ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5210}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } } t -- ; } return ( <int> ) ; }", "label": 1, "id": 5211}
{"input": "struct array { int row ; int col ; struct array * next , * prev ; } ; int n , i ; int j , cost [ <int> ] [ <int> ] , n1 , o = <int> , f = <int> , dist [ <int> ] [ <int> ] ; struct array * head = NULL , * temp ; void main ( ) { scanf ( <str> , & n ) ; while ( o < n ) { int h , n2 = <int> , t = <int> ; scanf ( <str> , & n1 ) ; while ( n2 < n1 ) { for ( i = <int> ; i <= n2 ; i ++ ) { scanf ( <str> , & cost [ n2 ] [ i ] ) ; dist [ n2 ] [ i ] = cost [ n2 ] [ i ] ; if ( head == NULL ) { head = ( struct array * ) malloc ( sizeof ( struct array ) ) ; head -> row = ( ( ( n2 ) * n1 ) + i ) ; head -> col = ( ( ( n2 + <int> ) * n1 ) + i ) ; head -> next = NULL ; head -> prev = NULL ; } else { temp = ( struct array * ) malloc ( sizeof ( struct array ) ) ; temp -> row = ( ( ( n2 ) * n1 ) + i ) ; temp -> col = ( ( ( n2 + <int> ) * n1 ) + i ) ; temp -> next = head ; head -> prev = temp ; head = temp ; } temp = ( struct array * ) malloc ( sizeof ( struct array ) ) ; temp -> row = ( ( ( n2 ) * n1 ) + i ) ; temp -> col = ( ( ( n2 + <int> ) * n1 ) + i + <int> ) ; temp -> next = head ; head -> prev = temp ; head = temp ; } n2 ++ ; t ++ ; } h = func ( t ) ; printf ( <str> , h ) ; o ++ ; } } int func ( int t ) { while ( temp -> next != NULL ) { temp = temp -> next ; } while ( temp -> row != ( ( n1 * n1 ) - n1 ) ) { if ( ( ( temp -> row ) ) % n1 == <int> && f % <int> == <int> ) { for ( j = <int> ; j < n1 ; j ++ ) { cost [ ( ( temp -> row ) / n1 ) ] [ j ] = dist [ ( ( temp -> row ) / n1 ) ] [ j ] ; } } if ( ( ( temp -> row ) ) % n1 == <int> ) f ++ ; if ( dist [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] < cost [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] + cost [ ( temp -> row ) / n1 ] [ ( temp -> row ) % n1 ] ) dist [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] = cost [ ( temp -> col ) / n1 ] [ ( temp -> col ) % n1 ] + cost [ ( temp -> row ) / n1 ] [ ( temp -> row ) % n1 ] ; temp = temp -> prev ; } int max1 = - <int> ; for ( i = ( ( n1 * n1 ) - n1 ) ; i < ( n1 * n1 ) ; i ++ ) { if ( dist [ i / n1 ] [ i % n1 ] > max1 ) max1 = dist [ i / n1 ] [ i % n1 ] ; } return max1 ; }", "label": 2, "id": 5212}
{"input": "int a [ <int> ] [ <int> ] ; void print ( ) ; int n ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int sum ( ) { int i = <int> , j = <int> ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) a [ i - <int> ] [ j ] += max ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } void print ( ) { int i = <int> , j = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { printf ( <str> , a [ i ] [ j ] ) ; } printf ( <str> ) ; } } int main ( ) { int t = <int> , i = <int> , j = <int> ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum ( ) ; } }", "label": 1, "id": 5213}
{"input": "int n , a [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int maxpathsum ( int i , int j ) { if ( i == n || j == n ) return a [ i ] [ j ] ; return a [ i ] [ j ] + max ( maxpathsum ( i + <int> , j ) , maxpathsum ( i + <int> , j + <int> ) ) ; } int main ( ) { int t , i , j , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) a [ i ] [ j ] = <int> ; } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } m = maxpathsum ( <int> , <int> ) ; printf ( <str> , m ) ; } return <int> ; }", "label": 2, "id": 5214}
{"input": "int gcd ( int i , int j ) { if ( j == <int> ) return i ; else return gcd ( j , i % j ) ; } int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int a , b , i ; scanf ( <str> , & a , & b ) ; i = gcd ( a , b ) ; printf ( <str> , i , ( a * b ) / i ) ; } return <int> ; }", "label": 1, "id": 5215}
{"input": "void main ( ) { int n ; scanf ( <str> , & n ) ; long long int gcd [ n ] , lcm [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) { long long int num1 = <int> , num2 = <int> , remainder = <int> , numerator = <int> , denominator = <int> ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd [ i ] = denominator ; lcm [ i ] = num1 * num2 / gcd [ i ] ; } printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; printf ( <str> ) ; } }", "label": 0, "id": 5216}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int n , tot_n ; scanf ( <str> , & n ) ; tot_n = n * ( n + <int> ) / <int> ; int tri [ tot_n ] ; for ( int j = <int> ; j < tot_n ; j ++ ) { scanf ( <str> , & tri [ j ] ) ; } for ( int j = n - <int> ; j > <int> ; j -- ) { int c = j * ( j - <int> ) / <int> ; for ( int k = c ; k < c + j ; k ++ ) { if ( tri [ k + j ] > tri [ k + j + <int> ] ) tri [ k ] += tri [ k + j ] ; else tri [ k ] += tri [ k + j + <int> ] ; } } printf ( <str> , tri [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5217}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int a , b , gcd , lcm , large ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( int i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 5218}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] += ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5219}
{"input": "int a [ <int> ] [ <int> ] ; int main ( void ) { int n , rows , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } while ( rows -- ) { for ( j = <int> ; j <= rows - <int> ; j ++ ) { a [ rows - <int> ] [ j ] += a [ rows ] [ j ] > a [ rows ] [ j + <int> ] ? a [ rows ] [ j ] : a [ rows ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5220}
{"input": "int main ( ) { int a , b , i , j , k , t , T ; long long x , y ; scanf ( <str> , & T ) ; for ( t = <int> ; t <= T ; t ++ ) { scanf ( <str> , & a , & b ) ; j = a > b ? a : b ; k = a <= b ? a : b ; for ( i = <int> ; i <= k ; i ++ ) { if ( ( long long ) j * i % k == <int> ) { x = ( long long ) j * i ; break ; } } y = ( ( long long ) k * j ) / x ; printf ( <str> , y ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 2, "id": 5221}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { call ( ) ; t -- ; } return <int> ; } call ( ) { long long int a [ <int> ] , c = <int> , n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n + <int> ; i ++ ) scanf ( <str> , & a [ i ] ) ; i = <int> ; while ( i < n + <int> ) { j = <int> ; while ( j < n - i ) { if ( a [ i + j ] <= a [ i + j + <int> ] ) j ++ ; else break ; } c += ( j + <int> ) * ( j + <int> ) / <int> ; i = i + j + <int> ; } printf ( <str> , c ) ; }", "label": 0, "id": 5222}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; int x = <int> , y ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; int max = - <int> ; while ( x < n ) { for ( int i = <int> ; i <= x ; i ++ ) { scanf ( <str> , & y ) ; if ( i == <int> ) { arr [ x ] [ <int> ] = y + arr [ x - <int> ] [ <int> ] ; } else if ( i == x ) { arr [ x ] [ x ] = y + arr [ x - <int> ] [ x - <int> ] ; } else { int p = arr [ x - <int> ] [ i - <int> ] + y ; int q = arr [ x - <int> ] [ i ] + y ; if ( p > q ) { arr [ x ] [ i ] = p ; } else { arr [ x ] [ i ] = q ; } } if ( x == n - <int> ) { if ( arr [ x ] [ i ] > max ) { max = arr [ x ] [ i ] ; } } } x ++ ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5223}
{"input": "int gcd ( int num1 , int num2 ) { if ( num2 = <int> ) { return num1 ; } else { gcd ( num2 , num1 % num2 ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int num1 , num2 , hcf , lcm ; scanf ( <str> , & num1 , & num2 ) ; hcf = gcd ( num1 , num2 ) ; lcm = ( num1 * num2 ) / hcf ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 3, "id": 5224}
{"input": "int findGcd ( int a , int b ) { if ( a < b ) { int t = a ; a = b ; b = t ; } if ( b == <int> ) return a ; else return findGcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = findGcd ( a , b ) ; printf ( <str> , gcd , ( ( long long int ) a * b ) / gcd ) ; } return <int> ; }", "label": 0, "id": 5225}
{"input": "long long int fun ( long long int , long long int ) ; int main ( ) { int n , i ; long long int l , h , a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a , & b ) ; h = fun ( a , b ) ; l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; } long long int fun ( long long int a , long long int b ) { if ( b == <int> ) return a ; else return fun ( b , a % b ) ; }", "label": 0, "id": 5226}
{"input": "int main ( ) { int t , a , b , g , i , l ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { { scanf ( <str> , & a , & b ) ; } a = ( ( a > b ) ? b : a ) ; for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { g = i ; } } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 5227}
{"input": "int Calculate ( int * , int ) ; int main ( ) { int a [ <int> ] , i , t , n , j , count ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ i ] ) ; count = Calculate ( a , n ) ; printf ( <str> , count ) ; } return <int> ; } int Calculate ( int * a , int n ) { int i , count = <int> , j ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { count ++ ; } } } return count ; }", "label": 3, "id": 5228}
{"input": "int gcd ( int n1 , int n2 ) { if ( n2 != <int> ) return gcd ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int n1 , n2 , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; printf ( <str> , gcd ( n1 , n2 ) , ( n1 * n2 ) / gcd ( n1 , n2 ) ) ; } return <int> ; }", "label": 1, "id": 5229}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; gcd = GCD ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int GCD ( int a , int b ) { int c ; while ( b ) { c = b ; b = a % b ; a = c ; } return a ; }", "label": 0, "id": 5230}
{"input": "int maxi ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int cases , sz , i , j , grph [ <int> ] [ <int> ] ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & sz ) ; for ( i = <int> ; i < sz ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & grph [ i ] [ j ] ) ; } } for ( i = sz - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { grph [ i ] [ j ] += maxi ( grph [ i + <int> ] [ j + <int> ] , grph [ i + <int> ] [ j ] ) ; } } printf ( <str> , grph [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5231}
{"input": "int main ( ) { int n , a , b , h , m , i , l ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) m = b ; else m = a ; for ( i = <int> ; i <= m ; i ++ ) { if ( a % i == <int> && b % i == <int> ) h = i ; } l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 1, "id": 5232}
{"input": "int main ( ) { int t , n , a , i ; long long int amin ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; amin = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < amin ) amin = a ; } printf ( <str> , amin * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5233}
{"input": "int main ( void ) { long t = <int> , n = <int> , a [ MAX ] , i = <int> ; long long min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; if ( n <= <int> ) { break ; } else { for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } } min *= ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 5234}
{"input": "int a [ max ] [ max ] ; int main ( ) { int c , d , t = <int> , e , n , m , f , g , h , i ; scanf ( <str> , & c ) ; for ( d = <int> ; d <= c ; d ++ ) { scanf ( <str> , & e ) ; for ( m = <int> ; m < e ; m ++ ) { for ( n = <int> ; n <= m ; n ++ ) scanf ( <str> , & a [ m ] [ n ] ) ; } for ( f = e - <int> ; f > <int> ; f -- ) { for ( g = <int> ; g < f ; g ++ ) { h = a [ f ] [ g ] + a [ f - <int> ] [ g ] ; i = a [ f ] [ g + <int> ] + a [ f - <int> ] [ g ] ; if ( h > i ) a [ f - <int> ] [ g ] = h ; else a [ f - <int> ] [ g ] = i ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t ++ ; } return <int> ; }", "label": 0, "id": 5235}
{"input": "int main ( ) { int num_cases , n , triangle [ <int> ] [ <int> ] , i , j , temp , idx = <int> , copy ; scanf ( <str> , & num_cases ) ; int answers [ num_cases ] ; copy = num_cases ; while ( copy -- > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangle [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { temp = triangle [ i ] [ j ] + triangle [ i + <int> ] [ j ] ; if ( temp < triangle [ i ] [ j ] + triangle [ i + <int> ] [ j + <int> ] ) temp = triangle [ i ] [ j ] + triangle [ i + <int> ] [ j + <int> ] ; triangle [ i ] [ j ] = temp ; } } answers [ idx ++ ] = triangle [ <int> ] [ <int> ] ; } for ( i = <int> ; i < num_cases ; i ++ ) { printf ( <str> , answers [ i ] ) ; } }", "label": 0, "id": 5236}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) a [ i - <int> ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 1, "id": 5237}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; int a , b ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int t1 = a , t2 = b ; while ( b != <int> ) { int r = a % b ; a = b ; b = r ; } printf ( <str> , a ) ; t1 = t1 * t2 / a ; printf ( <str> , t1 ) ; } return <int> ; }", "label": 1, "id": 5238}
{"input": "int main ( void ) { int t , a , b , prod , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; prod = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; gcd = a ; if ( b > a ) b = b - a ; gcd = b ; } lcm = prod / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5239}
{"input": "int main ( ) { int i , j , p , q , t , n , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; i = n * ( n + <int> ) / <int> ; for ( j = <int> ; j < i ; j ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = n ; i > <int> ; i -- ) { p = i * ( i + <int> ) / <int> ; q = i * ( i - <int> ) / <int> ; while ( n > <int> ) { if ( a [ p ] > a [ p - <int> ] ) a [ q ] += a [ p ] ; else a [ q ] += a [ p - <int> ] ; p -- ; q -- ; n -- ; } } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5240}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i , gcd , lcm ; gcd = lcm = <int> ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5241}
{"input": "int main ( ) { int n , size , i , cost , min_cost = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & size ) ; int a [ size ] ; for ( i = <int> ; i < size ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { while ( size != <int> ) { if ( a [ i ] < a [ i + <int> ] ) for ( i = <int> ; i < size ; i ++ ) { a [ i ] = a [ i + <int> ] ; size = size - <int> ; cost = i ; } else for ( i = <int> ; i < size ; i ++ ) { a [ i + <int> ] = a [ i + <int> ] ; size = size - <int> ; cost = i + <int> ; } min_cost += cost ; } printf ( <str> , min_cost ) ; } }", "label": 1, "id": 5242}
{"input": "int main ( void ) { int iTestCases , iTotalElts , iMin , iElement , iSum ; fscanf ( stdin , <str> , & iTestCases ) ; for ( ; iTestCases > <int> ; iTestCases -- ) { iSum = <int> ; fscanf ( stdin , <str> , & iTotalElts ) ; iSum = iTotalElts - <int> ; if ( iTotalElts > <int> ) { fscanf ( stdin , <str> , & iElement ) ; iMin = iElement ; iTotalElts -- ; } for ( ; iTotalElts > <int> ; iTotalElts -- ) { fscanf ( stdin , <str> , & iElement ) ; ( iMin > iElement ) ? ( iMin = iElement ) : ( iMin = iMin ) ; } fprintf ( stdout , <str> , iSum * iMin ) ; } return <int> ; }", "label": 0, "id": 5243}
{"input": "int main ( ) { int i , j , t , n , max , a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else if ( sum [ i - <int> ] [ j ] > sum [ i - <int> ] [ j - <int> ] ) sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5244}
{"input": "long gcd ( long a , long b ) ; int main ( void ) { int t ; long a , b ; unsigned long long g , l , i ; scanf ( <str> , & t ) ; while ( t -- ) { i = <int> ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } long gcd ( long a , long b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; }", "label": 0, "id": 5245}
{"input": "int max ( int p , int q ) { if ( p > q ) return p ; else return q ; } int main ( ) { int cases , i , j ; scanf ( <str> , & cases ) ; while ( cases -- ) { int n ; scanf ( <str> , & n ) ; int array [ <int> ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) array [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; if ( i != <int> ) { if ( j == <int> ) array [ i ] [ j ] += array [ i - <int> ] [ j ] ; else array [ i ] [ j ] += max ( array [ i - <int> ] [ j ] , array [ i - <int> ] [ j - <int> ] ) ; } } } int max = array [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max < array [ n - <int> ] [ i ] ) max = array [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5246}
{"input": "int a [ <int> ] [ <int> ] ; int c [ <int> ] [ <int> ] ; int <unk> ( int a [ ] [ <int> ] , int n ) { int i , j ; for ( j = <int> ; j < n ; j ++ ) { c [ n - <int> ] [ j ] = a [ n - <int> ] [ j ] ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { c [ i ] [ j ] = a [ i ] [ j ] ; if ( c [ i + <int> ] [ j ] > c [ i + <int> ] [ j + <int> ] ) { c [ i ] [ j ] += c [ i + <int> ] [ j ] ; } else { c [ i ] [ j ] += c [ i + <int> ] [ j + <int> ] ; } } } return c [ <int> ] [ <int> ] ; } int main ( ) { int t , n , i , j , k , sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } sum = <unk> ( a , n ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 5247}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int a , b , lcm , hcf ; scanf ( <str> , & a , & b ) ; int x = a , y = b ; if ( y > x ) { while ( x != <int> ) { int z = y % x ; y = x ; hcf = x ; x = z ; } } else { while ( y != <int> ) { int z = x % y ; x = y ; hcf = y ; y = z ; } } if ( a > b ) { if ( a % b == <int> ) lcm = a ; else { int i = <int> ; int m = a ; while ( a % b != <int> ) { a = m * i ; i ++ ; lcm = a ; } } } else { if ( b % a == <int> ) lcm = b ; else { int i = <int> , m = b ; while ( b % a != <int> ) { b = m * i ; i ++ ; lcm = b ; } } } printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 5248}
{"input": "int main ( ) { int i , j , n , t , sum , sum1 ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & t ) ; int * a [ t ] ; for ( i = <int> ; i < t ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + <int> ) * ( sizeof ( int ) ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = <int> ; for ( i = <int> ; i < t ; i ++ ) { a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; a [ i ] [ i ] += a [ i - <int> ] [ i - <int> ] ; for ( j = <int> ; j < i ; j ++ ) { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } for ( i = <int> ; i < t ; i ++ ) { if ( a [ t - <int> ] [ i ] > sum ) sum = a [ t - <int> ] [ i ] ; } printf ( <str> , sum ) ; } n -- ; }", "label": 2, "id": 5249}
{"input": "int main ( void ) { int t , a , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = <int> ; LOOP : for ( int i = b ; i > <int> ; i -- ) { if ( b % i == <int> && a % i == <int> ) { b = b / i ; a = a / i ; c = c * i ; goto LOOP ; } } } if ( a < b ) { c = <int> ; LOOP1 : for ( int i = a ; i > <int> ; i -- ) { if ( b % i == <int> && a % i == <int> ) { b = b / i ; a = a / i ; c = c * i ; goto LOOP1 ; } } } if ( a == b ) { printf ( <str> , a ) ; break ; } printf ( <str> , c , a * b / c ) ; } }", "label": 1, "id": 5250}
{"input": "int main ( ) { int t ; long a , b , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long p = a * b ; gcd = a ; while ( a != b ) { if ( a > b ) { a = a - b ; } else if ( b > a ) b = b - a ; else if ( a == b ) ; gcd = a ; lcm = p / gcd ; } printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 5251}
{"input": "void play ( int n1 , int n2 , int num1 , int num2 , int rem , int GCD , int LCM ) { if ( n2 != <int> ) { rem = n1 % n2 ; n1 = n2 ; n2 = rem ; play ( n1 , n2 , num1 , num2 , rem , GCD , LCM ) ; } else { GCD = n1 ; LCM = ( num1 * num2 ) / GCD ; printf ( <str> , GCD , LCM ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n1 , n2 , num1 , num2 , rem , GCD , LCM ; scanf ( <str> , & num1 , & num2 ) ; n1 = num1 , n2 = num2 ; play ( n1 , n2 , num1 , num2 , rem , GCD , LCM ) ; } }", "label": 1, "id": 5252}
{"input": "int getData ( void ) ; void <unk> ( void ) ; void <unk> ( void ) ; int T [ SIZE ] [ SIZE ] ; int r ; int main ( void ) { int testCases = getData ( ) ; while ( testCases > <int> ) { r = getData ( ) ; <unk> ( ) ; <unk> ( ) ; printf ( <str> , T [ <int> ] [ <int> ] ) ; testCases -- ; } return <int> ; } int getData ( void ) { int num ; scanf ( <str> , & num ) ; return num ; } void <unk> ( void ) { int i , j ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) T [ i ] [ j ] = getData ( ) ; } void <unk> ( void ) { int i , j ; for ( i = r - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) T [ i ] [ j ] += MAX ( T [ i + <int> ] [ j ] , T [ i + <int> ] [ j + <int> ] ) ; }", "label": 0, "id": 5253}
{"input": "int main ( ) { long long T , count , N , i , val , ans ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; long long A [ N + <int> ] , dp [ N + <int> ] ; A [ <int> ] = <int> ; for ( i = <int> ; i < N + <int> ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } dp [ <int> ] = <int> ; for ( i = <int> , ans = <int> , count = <int> ; i < N + <int> ; i ++ ) { if ( A [ i ] < A [ i - <int> ] ) count = <int> ; else count ++ ; dp [ i ] = dp [ i - <int> ] + count ; } printf ( <str> , dp [ N ] ) ; } return <int> ; }", "label": 0, "id": 5254}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int cache [ <int> ] ; int trianglesum ( int n , int arr [ ] [ <int> ] , int i , int j ) { if ( i > n ) return <int> ; if ( cache [ i ] == <int> ) { int a1 = trianglesum ( n , arr , i + <int> , j ) + arr [ i ] [ j ] ; int a2 = trianglesum ( n , arr , i + <int> , j + <int> ) + arr [ i ] [ j ] ; cache [ i ] = max ( a1 , a2 ) ; } return cache [ i ] ; } void inputarray ( int n , int arr [ ] [ <int> ] ) { int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } int main ( ) { int arr [ <int> ] [ <int> ] , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; memset ( arr , <int> , sizeof ( arr [ <int> ] [ <int> ] ) * <int> * <int> ) ; memset ( cache , <int> , <int> ) ; inputarray ( n , arr ) ; printf ( <str> , trianglesum ( n , arr , <int> , <int> ) + <int> ) ; } return <int> ; }", "label": 1, "id": 5255}
{"input": "int main ( ) { long long int t , test_cases , i , n , val ; scanf ( <str> , & test_cases ) ; for ( t = <int> ; t < test_cases ; t ++ ) { scanf ( <str> , & n ) ; long long int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & val ) ; if ( val < min ) min = val ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5256}
{"input": "int main ( ) { int n , i , j , k ; long long int a , b ; scanf ( <str> , & k ) ; for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & a , & b ) ; n = ( a <= b ) ? a : b ; for ( i = n ; i > <int> ; i -- ) { if ( ( a % i ) == <int> && ( b % i ) == <int> ) { printf ( <str> , i , ( a / i ) * ( b / i ) * i ) ; break ; } } } }", "label": 2, "id": 5257}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , c = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] , dp [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) dp [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] <= a [ i ] ) { dp [ i ] = dp [ i - <int> ] + <int> ; } else { dp [ i ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { c = c + dp [ i ] ; } printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 5258}
{"input": "int main ( ) { int T , N , j , i ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; int a [ N ] , sum = N , k ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < N - <int> ; i ++ ) { for ( k = i + <int> ; k < N ; k ++ ) { if ( a [ k ] >= a [ k - <int> ] ) sum = sum + <int> ; else break ; } } printf ( <str> , sum ) ; } } }", "label": 0, "id": 5259}
{"input": "int main ( ) { int t , n , a [ <int> ] , i , j , k ; int flag = <int> ; int temp ; scanf ( <str> , & t ) ; if ( t > <int> ) exit ( <int> ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n ; j ++ ) { temp = a [ j ] ; for ( k = j ; k < n ; k ++ ) { if ( temp <= a [ k ] ) { flag ++ ; temp = a [ k ] ; } else break ; } } printf ( <str> , flag ) ; } return <int> ; }", "label": 3, "id": 5260}
{"input": "int main ( ) { unsigned long int n , cost ; int t , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { cost = <int> ; scanf ( <str> , & n ) ; unsigned long int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) cost = a [ j + <int> ] + cost ; else cost = a [ j ] + cost ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 5261}
{"input": "int main ( ) { int a , b , n , i , j = <int> , k , lcm = <int> , gcd = <int> , x , y , p , q ; int s [ <int> ] ; int count [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( y = <int> ; y < n ; y ++ ) { scanf ( <str> , & a , & b ) ; p = a ; q = b ; if ( a > b ) k = a ; else k = b ; for ( i = <int> ; i <= k ; i ++ ) { if ( a % i == <int> || b % i == <int> ) { while ( a % i != <int> && b % i != <int> ) { if ( a % i == <int> ) a = a / i ; else b = b / i ; count [ j ] = count [ j ] + <int> ; } s [ j ] = i ; j ++ ; } } while ( x >= <int> ) { x = j - <int> ; if ( p % s [ x ] == <int> && q % s [ x ] == <int> ) { gcd = gcd * s [ x ] ; lcm = lcm * s [ x ] * count [ x ] ; } else if ( p % s [ x ] != <int> && q % s [ x ] == <int> || p % s [ x ] == <int> && q % s [ x ] != <int> ) lcm = lcm * s [ x ] * count [ x ] ; x -- ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 3, "id": 5262}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] , n , c = <int> , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i + <int> ] > a [ i ] ) c ++ ; } printf ( <str> , c + n ) ; } }", "label": 1, "id": 5263}
{"input": "long findmax ( long a [ ] , long check [ ] , long n ) { long max = <int> , i , j , k , idx , count = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( check [ i ] == <int> ) count ++ ; } if ( count == <int> ) return <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( check [ i ] == <int> && a [ i ] >= max ) { max = a [ i ] ; idx = i ; } } check [ idx ] = <int> ; j = idx - <int> ; k = idx + <int> ; if ( j < <int> ) { for ( i = k ; i < n ; i ++ ) { if ( check [ i ] == <int> ) return a [ i ] ; } } if ( k >= n ) { for ( i = j ; i >= <int> ; i -- ) { if ( check [ i ] == <int> ) return a [ i ] ; } } while ( j >= <int> && k < n ) { if ( check [ j ] == <int> && check [ k ] == <int> ) { if ( a [ j ] <= a [ k ] ) return a [ j ] ; else return a [ k ] ; } else if ( check [ j ] == <int> && check [ k ] == <int> ) { k ++ ; } else if ( check [ j ] == <int> && check [ k ] == <int> ) { j -- ; } else { j -- ; k ++ ; } } return a [ idx ] ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long n , i ; scanf ( <str> , & n ) ; long a [ n + <int> ] , sum ; long check [ n + <int> ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) check [ i ] = <int> ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { sum += findmax ( a , check , n ) ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 5264}
{"input": "int main ( ) { int i , j , arr [ <int> ] [ <int> ] , temp , result , cases , lines , value ; scanf ( <str> , & cases ) ; while ( <int> ) { result = <int> ; arr [ <int> ] [ <int> ] = <int> ; scanf ( <str> , & lines ) ; for ( i = <int> ; i <= lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & value ) ; arr [ i ] [ j ] = value + arr [ i - <int> ] [ j - <int> ] ; if ( result < arr [ i ] [ j ] ) result = arr [ i ] [ j ] ; temp = value + arr [ i - <int> ] [ j ] ; if ( temp > arr [ i ] [ j ] ) arr [ i ] [ j ] = temp ; if ( result < temp ) result = temp ; } } printf ( <str> , result ) ; if ( -- cases == <int> ) break ; } return <int> ; }", "label": 1, "id": 5265}
{"input": "int main ( void ) { int test , rows , i , j , largest ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = <int> ; scanf ( <str> , & a [ i ] [ j ] ) ; if ( i > <int> ) { if ( j == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ? a [ i - <int> ] [ j - <int> ] : a [ i - <int> ] [ j ] ) ; } } } largest = <int> ; i = rows - <int> ; for ( j = <int> ; j < rows ; j ++ ) { if ( a [ i ] [ j ] > largest ) largest = a [ i ] [ j ] ; } printf ( <str> , largest ) ; } return <int> ; }", "label": 1, "id": 5266}
{"input": "int main ( ) { int T , i ; scanf ( <str> , & T ) ; while ( T -- ) { int A , B , GCD , LCM ; scanf ( <str> , & A , & B ) ; for ( i = <int> ; i <= A && i <= B ; i ++ ) { if ( A % i == <int> && B % i == <int> ) GCD = i ; } LCM = ( A * B ) / GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 1, "id": 5267}
{"input": "int main ( ) { int T , t , a [ <int> ] , n , i , sum [ <int> ] ; scanf ( <str> , & t ) ; T = t ; while ( t > <int> ) { sum [ t ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) sum [ t ] = sum [ t ] + a [ i + <int> ] ; else sum [ t ] = sum [ t ] + a [ i ] ; } t -- ; } for ( t = T ; t > <int> ; t -- ) printf ( <str> , sum [ t ] ) ; return <int> ; }", "label": 3, "id": 5268}
{"input": "int main ( ) { int t , l , sum = <int> , i , j ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l + <int> ; i ++ ) for ( j = <int> ; j < l + <int> ; j ++ ) arr [ i ] [ j ] = <int> ; for ( i = <int> ; i < l + <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] += ( ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ) ? arr [ i - <int> ] [ j ] : arr [ i - <int> ] [ j - <int> ] ) ; } } for ( i = <int> ; i < l + <int> ; i ++ ) if ( sum < arr [ l ] [ i ] ) sum = arr [ l ] [ i ] ; printf ( <str> , sum ) ; } }", "label": 1, "id": 5269}
{"input": "int main ( ) { int test , tri [ <int> ] [ <int> ] , n , i , j ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = n - <int> ; j >= <int> ; j -- ) tri [ i ] [ j ] = tri [ i ] [ j ] + max ( tri [ i + <int> ] [ j ] , tri [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , tri [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5270}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , n , a [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } unsigned long long int ans = ( min * ( n - <int> ) ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5271}
{"input": "int lcm ( int , int , int ) ; int gcd ( int , int ) ; int main ( ) { int a , b , c , t , i = <int> ; int d ; scanf ( <str> , & t ) ; while ( i <= t ) { scanf ( <str> , & a , & b ) ; c = lcm ( a , b , <int> ) ; if ( a > b ) d = gcd ( a , b ) ; else d = gcd ( b , a ) ; printf ( <str> , d , c ) ; i ++ ; } return <int> ; getch ( ) ; } int lcm ( int a , int b , int c ) { if ( a == <int> && b == <int> ) return <int> ; else { if ( ( a % c == <int> ) && ( b % c == <int> ) ) return c * lcm ( a / c , b / c , c ) ; else if ( a % c == <int> ) return c * lcm ( a / c , b , c ) ; else if ( b % c == <int> ) return c * lcm ( a , b / c , c ) ; else return lcm ( a , b , c + <int> ) ; } } int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; }", "label": 3, "id": 5272}
{"input": "long int hcf ( long int , long int ) ; int main ( ) { int t ; long long int lcm ; long int g , no1 , no2 , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) no1 = b , no2 = a ; else no1 = a , no2 = b ; g = hcf ( no1 , no2 ) ; lcm = ( a * b ) / g ; printf ( <str> , g , lcm ) ; } return <int> ; } long int hcf ( long int a , long int b ) { if ( a == <int> ) return b ; return hcf ( b % a , a ) ; }", "label": 0, "id": 5273}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { int l , s = <int> ; scanf ( <str> , & l ) ; int p [ l * ( l + <int> ) / <int> ] ; for ( i = <int> ; i < l * ( l + <int> ) / <int> ; i ++ ) { scanf ( <str> , & p [ i ] ) ; s = s + p [ i ] ; } printf ( <str> , s / <int> ) ; } return <int> ; }", "label": 1, "id": 5274}
{"input": "int main ( ) { int T , a , b , m , n , temp ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( a % b != <int> ) { temp = a ; a = b ; b = a % b ; } printf ( <str> , b , m * n / b ) ; } return <int> ; }", "label": 3, "id": 5275}
{"input": "int max ( int a , int b ) ; int main ( ) { int a , g = <int> , r , b , z , o , ans [ <int> ] , n , m , l ; scanf ( <str> , & n ) ; z = n ; while ( n -- ) { scanf ( <str> , & l ) ; int ar [ l ] [ <int> ] ; for ( a = <int> ; a <= l ; a ++ ) { for ( b = <int> ; b < a ; b ++ ) scanf ( <str> , ar [ a - <int> ] + b ) ; } for ( r = l - <int> ; r > <int> ; r -- ) { for ( m = l - <int> ; m > <int> ; m -- ) ar [ r - <int> ] [ m - <int> ] += max ( ar [ r ] [ m ] , ar [ r ] [ m - <int> ] ) ; } ans [ g ] = ar [ <int> ] [ <int> ] ; g ++ ; } for ( o = <int> ; o < z ; o ++ ) printf ( <str> , ans [ o ] ) ; return <int> ; } int max ( int a , int b ) { return ( a > b ? a : b ) ; }", "label": 0, "id": 5276}
{"input": "int count_subarray ( int a [ ] , int l , int r ) { int mid , count = <int> ; if ( l < r ) { mid = ( l + r ) / <int> ; count += count_subarray ( a , l , mid ) ; count = count + count_subarray ( a , mid + <int> , r ) ; if ( a [ mid ] <= a [ mid + <int> ] ) count ++ ; } return count ; } int main ( ) { int t , n , i , j , count ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; count = n + count_subarray ( a , <int> , n - <int> ) ; printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 5277}
{"input": "int t , n , i , j , a [ <int> ] [ <int> ] , m , p ; long int sum [ <int> ] [ <int> ] , temp [ <int> ] , maxi ; int main ( ) { scanf ( <str> , & t ) ; for ( t ; t > <int> ; -- t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & a [ i ] [ j ] ) ; sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; ++ i ) { sum [ i ] [ <int> ] = sum [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; sum [ i ] [ i ] = sum [ i - <int> ] [ i ] + a [ i ] [ i ] ; } for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j < i ; ++ j ) { temp [ <int> ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; temp [ <int> ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; if ( temp [ <int> ] > temp [ <int> ] ) sum [ i ] [ j ] = temp [ <int> ] ; else sum [ i ] [ j ] = temp [ <int> ] ; } } maxi = sum [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; ++ i ) { if ( maxi < sum [ n - <int> ] [ i ] ) maxi = sum [ n - <int> ] [ i ] ; } printf ( <str> , maxi ) ; } return <int> ; }", "label": 1, "id": 5278}
{"input": "int main ( ) { int t , n , sum , i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } c = <int> ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] && i != n - <int> ) { c ++ ; } else { sum += c * ( c - <int> ) / <int> ; c = <int> ; } } printf ( <str> , sum + n ) ; } return <int> ; }", "label": 0, "id": 5279}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( long int n , long int m ) { if ( m == <int> ) return n ; if ( n == <int> ) return m ; else return gcd ( m , n % m ) ; }", "label": 0, "id": 5280}
{"input": "int main ( ) { int A [ <int> ] = { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; int i , large , small , <unk> ; large = small = A [ <int> ] ; for ( i = <int> ; i < <int> ; i ++ ) { if ( A [ i ] < small ) small = A [ i ] ; } <unk> = small * <int> ; printf ( <str> , <unk> ) ; return <int> ; }", "label": 1, "id": 5281}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , min = <int> ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5282}
{"input": "int s ( int a , int b ) { if ( a > b ) return b ; else return a ; } int main ( void ) { int p , q , t , i , l , w ; scanf ( <str> , & t ) ; while ( t ) { l = <int> ; scanf ( <str> , & p , & q ) ; i = s ( p , q ) ; w = <int> ; while ( i > <int> ) { if ( p % i == <int> && q % i == <int> ) { printf ( <str> , i ) ; w = <int> ; p = p / i ; q = q / i ; l = l * i ; } else i -- ; } if ( i == <int> && w == <int> ) printf ( <str> , i ) ; printf ( <str> , l * p * q ) ; t -- ; } return <int> ; }", "label": 1, "id": 5283}
{"input": "int main ( ) { int t , i , m , n , j , gcd , a ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m , & n ) ; for ( j = <int> ; j <= m && j <= n ; j ++ ) { if ( m % j == <int> && n % j == <int> ) { gcd = j ; } } a = ( m * n ) / gcd ; printf ( <str> , gcd , a ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 5284}
{"input": "static int map [ <int> ] [ <int> ] ; int path ( const int max , int row , int col , int value ) { value += map [ row ] [ col ] ; if ( row >= max ) return value ; int leftval = path ( max , row + <int> , col , value ) ; int rightval = path ( max , row + <int> , col + <int> , value ) ; return ( ( leftval > rightval ) ? leftval : rightval ) ; } int main ( void ) { int tris ; scanf ( <str> , & tris ) ; int i ; for ( i = <int> ; i < tris ; ++ i ) { int rows ; scanf ( <str> , & rows ) ; memset ( map , <int> , <int> * <int> ) ; int j ; for ( j = <int> ; j < rows ; ++ j ) { int k ; for ( k = <int> ; k <= j ; ++ k ) { scanf ( <str> , & ( map [ j ] [ k ] ) ) ; } } printf ( <str> , path ( rows - <int> , <int> , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 5285}
{"input": "void comp ( long int b [ <int> ] [ <int> ] , int base ) ; int main ( ) { long int a [ <int> ] [ <int> ] ; int i = <int> , j = <int> ; int t = <int> , n = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j < i + <int> ; ++ j ) scanf ( <str> , & a [ i ] [ j ] ) ; comp ( a , n - <int> ) ; putchar ( <char> ) ; } return <int> ; } void comp ( long int b [ <int> ] [ <int> ] , int base ) { int i = <int> ; if ( base == <int> ) printf ( <str> , b [ <int> ] [ <int> ] ) ; else { for ( i = <int> ; i < base ; ++ i ) b [ base - <int> ] [ i ] += max ( b [ base ] [ i ] , b [ base ] [ i + <int> ] ) ; comp ( b , base - <int> ) ; } }", "label": 0, "id": 5286}
{"input": "int main ( ) { int t , r , j , i , a [ <int> ] [ <int> ] , sum ; scanf ( <str> , & t ) ; while ( t > <int> ) { sum = <int> ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = a [ <int> ] [ <int> ] ; i = <int> ; j = <int> ; while ( i < r ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) { sum = sum + a [ i + <int> ] [ j + <int> ] ; i = i + <int> ; j = j + <int> ; } else { sum = sum + a [ i + <int> ] [ j ] ; i = i + <int> ; } } printf ( <str> , sum ) ; t -- ; } }", "label": 1, "id": 5287}
{"input": "int main ( ) { int inputs , i , j , k , size , max , ans , l ; scanf ( <str> , & inputs ) ; for ( l = <int> ; l < inputs ; l ++ ) { ans = <int> ; scanf ( <str> , & size ) ; for ( i = <int> ; i <= size ; i ++ ) { max = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & k ) ; if ( k > max ) { max = k ; } } ans = ans + max ; } printf ( <str> , ans - <int> ) ; } return <int> ; }", "label": 1, "id": 5288}
{"input": "int main ( ) { int n , i , l , arr [ <int> ] [ <int> ] , j , k , temp ; scanf ( <str> , & n ) ; if ( <int> <= n <= <int> ) { for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & l ) ; if ( <int> <= l < <int> ) { for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } temp = arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] ; for ( j = <int> ; j < l - <int> ; j ++ ) { if ( temp < ( arr [ j ] [ <int> ] + arr [ j + <int> ] [ <int> ] + arr [ j + <int> ] [ <int> ] ) ) { temp = arr [ j ] [ <int> ] + arr [ j + <int> ] [ <int> ] + arr [ j + <int> ] [ <int> ] ; } } printf ( <str> , temp ) ; } } } return <int> ; }", "label": 1, "id": 5289}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int a , b , x , y ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { int temp = y ; y = x % y ; x = temp ; } int gcd = x ; int lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5290}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long a , b , x , y ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , ( x * y ) / a ) ; } }", "label": 0, "id": 5291}
{"input": "int main ( ) { int k , n , b , c , l ; int temp1 , temp2 ; int j = <int> ; int i ; int temp ; scanf ( <str> , & k ) ; for ( l = <int> ; l < k ; l ++ ) { scanf ( <str> , & n ) ; int a [ n - <int> ] [ n - <int> ] ; for ( b = <int> ; b < n ; b ++ ) { for ( c = <int> ; c <= b ; c ++ ) { scanf ( <str> , & a [ b ] [ c ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { temp = a [ i ] [ j ] < a [ i ] [ j + <int> ] ; a [ i - <int> ] [ j ] = a [ i ] [ temp + j ] + a [ i - <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5292}
{"input": "int main ( ) { int t , n , i , j , sum , ans ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { sum = <int> ; ans = <int> ; scanf ( <str> , & n ) ; if ( n < <int> ) { int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] ) ; sum = sum + arr [ i ] ; ans = sum / <int> ; } } printf ( <str> , ans ) ; } } return <int> ; }", "label": 1, "id": 5293}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int i , c , d , a , b , m , n ; scanf ( <str> , & i ) ; while ( i -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; m = a / c ; n = b / c ; d = c * m * n ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 1, "id": 5294}
{"input": "int main ( ) { long int n , * p , i , c = <int> ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; p = ( long int * ) malloc ( sizeof ( long int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( p [ i ] <= p [ i + <int> ] ) c ++ ; } printf ( <str> , c + n ) ; } return ( <int> ) ; }", "label": 1, "id": 5295}
{"input": "int main ( ) { int t , a , b , min , i , hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) min = a ; else min = b ; for ( i = min ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; break ; } } lcm = ( a / hcf ) * b ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 5296}
{"input": "int n ; int min ( int a [ n ] ) { int i , b = <int> ; for ( i = <int> ; i < n ; i ++ ) if ( b > a [ i ] ) b = a [ i ] ; return b ; } int main ( void ) { int t , i , a [ <int> ] , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { k = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; k = min ( a ) ; printf ( <str> , k * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5297}
{"input": "main ( ) { int arr [ <int> ] [ <int> ] , sum , i , j , pos , rows , max , test ; scanf ( <str> , & test ) ; while ( test != <int> ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } arr [ rows ] [ <int> ] = <int> ; pos = <int> ; sum = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) { max = ( ( ( arr [ i ] [ pos + <int> ] - arr [ i ] [ pos ] ) > arr [ i + <int> ] [ pos ] ) ? arr [ i ] [ pos = pos + <int> ] : arr [ i ] [ pos = pos ] ) ; sum = sum + max ; } printf ( <str> , sum ) ; test -- ; } return <int> ; }", "label": 1, "id": 5298}
{"input": "int main ( ) { int t , i , a [ <int> ] ; long long int n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; else if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5299}
{"input": "int tcout [ <int> ] ; int count_subarray ( int A [ ] , int size ) { int i , j , c ; for ( j = <int> ; j < size ; j ++ ) { c ++ ; i = j ; while ( i < size - <int> && A [ i ] <= A [ ++ i ] ) { c ++ ; } } return c ; } int main ( ) { int T , N , i , j ; unsigned int a [ <int> ] ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } tcout [ j ] = count_subarray ( a , N ) ; } for ( j = <int> ; j < T ; j ++ ) { printf ( <str> , tcout [ j ] ) ; } return <int> ; }", "label": 3, "id": 5300}
{"input": "int main ( ) { int t , r , i , a , b , x , y , m , c ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { x = <int> ; if ( a < b ) { r = a ; a = b ; b = r ; } scanf ( <str> , & a , & b ) ; for ( m = <int> ; m <= b / <int> ; m ++ ) { if ( a % m == <int> && b % m == <int> ) { if ( m > x ) x = m ; } } y = a * b / x ; printf ( <str> , x , y ) ; } return <int> ; }", "label": 1, "id": 5301}
{"input": "int main ( ) { int i , n , j , sum = <int> , t ; int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j <= n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } j = <int> ; while ( j != n ) { if ( a [ j ] > a [ j + <int> ] ) { sum = sum + a [ j + <int> ] ; } else { a [ j + <int> ] = a [ j ] ; sum = sum + a [ j + <int> ] ; } j ++ ; } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 3, "id": 5302}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] , max ; long long int k , i , j , p ; scanf ( <str> , & t ) ; while ( t -- ) { max = - <int> ; k = <int> ; p = <int> ; sum [ <int> ] [ <int> ] = <int> ; a [ <int> ] [ <int> ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; if ( n < <int> ) { printf ( <str> , sum [ <int> ] [ <int> ] ) ; } else { for ( i = <int> ; i < n ; i ++ ) { p = p * <int> ; for ( j = <int> ; j < p ; j ++ ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j / <int> ] + a [ i ] [ j / <int> ] ; if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } } printf ( <str> , max ) ; } } return <int> ; }", "label": 3, "id": 5303}
{"input": "int n ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int * a ; scanf ( <str> , & n ) ; int i ; a = ( int * ) malloc ( ( n + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min , j ; min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) { min = a [ j ] ; } } printf ( <str> , min * ( n - <int> ) ) ; free ( a ) ; } return <int> ; }", "label": 0, "id": 5304}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i ; scanf ( <str> , & n ) ; long long int a [ n ] , b [ n ] , count = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { b [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i - <int> ] ) b [ i ] = b [ i ] + b [ i - <int> ] ; } for ( i = <int> ; i < n ; i ++ ) { count = count + b [ i ] ; } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 5305}
{"input": "static inline int sum ( int * a , int n ) ; int main ( ) { int * a ; int * s ; int n , i , j , t ; scanf ( <str> , & t ) ; s = ( int * ) malloc ( t * sizeof ( int ) ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n ) ; a = ( int * ) malloc ( n * ( n + <int> ) / <int> * sizeof ( int ) ) ; for ( i = <int> ; i < n * ( n + <int> ) / <int> ; i ++ ) scanf ( <str> , a + i ) ; * ( s + j ) = sum ( a , n ) ; free ( a ) ; } for ( j = <int> ; j < t ; j ++ ) printf ( <str> , * ( s + j ) ) ; return <int> ; } static inline int sum ( int * a , int n ) { int i ; if ( n == <int> ) return * a ; else { for ( i = ( n * ( n - <int> ) / <int> ) - <int> ; i >= ( n - <int> ) * ( n - <int> ) / <int> ; i -- ) * ( a + i ) = * ( a + i ) + ( * ( a + i + n ) >= * ( a + i + n - <int> ) ? * ( a + i + n ) : * ( a + i + n - <int> ) ) ; return ( sum ( a , n - <int> ) ) ; } }", "label": 0, "id": 5306}
{"input": "int main ( int argc , char * * argv ) { int n , array [ <int> ] [ <int> ] , row , i , j , q = <int> ; ; scanf ( <str> , & n ) ; while ( q < n ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; for ( i = row - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( array [ i + <int> ] [ j ] > array [ i + <int> ] [ j + <int> ] ) array [ i ] [ j ] += array [ i + <int> ] [ j ] ; else array [ i ] [ j ] += array [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 5307}
{"input": "int main ( ) { int t , a , b , i , m ; scanf ( <str> , & t ) ; int gcd = <int> , lcm = <int> ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } m = a * b ; lcm = m / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5308}
{"input": "void handleCase ( ) ; void sum ( int * * triangle , int numLines , int currentLine , int column , int sum , int * largestSum ) ; int main ( int argc , char * argv [ ] ) { int numCases ; scanf ( <str> , & numCases ) ; int i ; for ( i = <int> ; i < numCases ; i ++ ) handleCase ( ) ; return <int> ; } void handleCase ( ) { int numLines ; scanf ( <str> , & numLines ) ; int * * triangle = ( int * * ) calloc ( numLines , sizeof ( int * ) ) ; int i , j ; for ( i = <int> ; i < numLines ; i ++ ) { triangle [ i ] = ( int * ) calloc ( ( i + <int> ) , sizeof ( int ) ) ; for ( j = <int> ; j < ( i + <int> ) ; j ++ ) scanf ( <str> , & triangle [ i ] [ j ] ) ; } int largestSum = <int> ; sum ( triangle , numLines , <int> , <int> , <int> , & largestSum ) ; printf ( <str> , largestSum ) ; } void sum ( int * * triangle , int numLines , int currentLine , int column , int currentSum , int * largestSum ) { currentSum += triangle [ currentLine - <int> ] [ column - <int> ] ; if ( currentLine == numLines ) { * largestSum = ( currentSum >= * largestSum ) ? currentSum : * largestSum ; } else { sum ( triangle , numLines , currentLine + <int> , column , currentSum , largestSum ) ; sum ( triangle , numLines , currentLine + <int> , column + <int> , currentSum , largestSum ) ; } }", "label": 2, "id": 5309}
{"input": "int sub ( int a [ ] , int e , int e1 ) { int j , c1 = <int> ; for ( j = e ; j < e1 ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) { c1 ++ ; } } if ( c1 == ( e1 - e ) ) { return <int> ; } else { return <int> ; } } int main ( void ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int m , c = <int> , s = <int> , k , b ; scanf ( <str> , & m ) ; int a [ m ] , i ; for ( i = <int> ; i < m ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( m == <int> ) { c ++ ; printf ( <str> , <int> ) ; } for ( k = <int> ; k <= ( m - <int> ) ; k ++ ) { for ( i = <int> ; i < m ; i ++ ) { if ( ( i + k ) < m ) { b = sub ( a , i , i + k ) ; s = s + b ; } } } if ( c == <int> ) { printf ( <str> , s + m ) ; } } return <int> ; }", "label": 2, "id": 5310}
{"input": "int main ( ) { int i , q , a [ <int> ] [ <int> ] , j , k , n , max ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & k ) ; for ( q = <int> ; q < k ; q ++ ) { for ( j = <int> ; j <= q ; j ++ ) { scanf ( <str> , & a [ q ] [ j ] ) ; } } for ( q = <int> ; q < k ; q ++ ) { for ( j = <int> ; j <= q ; j ++ ) { if ( q > <int> && j == <int> ) { a [ q ] [ j ] = a [ q - <int> ] [ j ] + a [ q ] [ j ] ; } if ( q > <int> && j > <int> && j <= q - <int> ) { if ( a [ q - <int> ] [ j - <int> ] > a [ q - <int> ] [ j ] ) { a [ q ] [ j ] = a [ q - <int> ] [ j - <int> ] + a [ q ] [ j ] ; } else { a [ q ] [ j ] = a [ q - <int> ] [ j ] + a [ q ] [ j ] ; } } if ( q > <int> && j == q ) { a [ q ] [ j ] = a [ q ] [ j ] + a [ q - <int> ] [ j - <int> ] ; } } } max = a [ k - <int> ] [ <int> ] ; for ( q = <int> ; q < k ; q ++ ) { if ( max < a [ k - <int> ] [ q ] ) { max = a [ k - <int> ] [ q ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5311}
{"input": "int n ; void bub ( int a [ ] ) { int i , j ; for ( i = <int> ; i < n - <int> ; ++ i ) for ( j = <int> ; j < n - <int> - i ; ++ j ) if ( a [ j ] > a [ j + <int> ] ) a [ j ] = a [ j ] + a [ j + <int> ] - ( a [ j + <int> ] = a [ j ] ) ; } int main ( ) { int t , i , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; m = <int> ; for ( i = <int> ; i < n ; ++ i ) { scanf ( <str> , a + i ) ; if ( a [ i ] < m ) m = a [ i ] ; } printf ( <str> , m * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5312}
{"input": "int main ( ) { int T , N , A [ <int> ] , i , j , small , sum = <int> ; printf ( <str> ) ; scanf ( <str> , & T ) ; for ( j = <int> ; j <= T ; j ++ ) { printf ( <str> ) ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & A [ i ] ) ; } small = A [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( A [ i ] < small ) small = A [ i ] ; } for ( i = <int> ; i < N - <int> ; i ++ ) { sum = sum + small ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 5313}
{"input": "int main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int m , n , p , q , r ; scanf ( <str> , & m , & n ) ; p = m ; q = n ; while ( n != <int> ) { r = m % n ; m = n ; n = r ; } printf ( <str> , m , ( p * q ) / m ) ; } return <int> ; }", "label": 1, "id": 5314}
{"input": "int a [ <int> ] [ <int> ] ; int n ; int bestsum ( int i , int j ) { if ( i == n - <int> ) return a [ i ] [ j ] ; int t1 = a [ i ] [ j ] + bestsum ( i + <int> , j ) ; int t2 = a [ i ] [ j ] + bestsum ( i + <int> , j + <int> ) ; return t1 > t2 ? t1 : t2 ; } main ( ) { int t ; scanf ( <str> , & t ) ; int i , j ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , bestsum ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 5315}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int arr [ <int> ] [ <int> ] = { <int> } ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } int max_sum , sum ; for ( i = n - <int> ; i >= <int> ; i -- ) { sum = arr [ i ] [ j ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i - <int> ] [ j ] > arr [ i - <int> ] [ j - <int> ] ) sum = sum + arr [ i - <int> ] [ j ] ; else sum = sum + arr [ i - <int> ] [ j - <int> ] ; } if ( sum > max_sum ) max_sum = sum ; } printf ( <str> , max_sum ) ; } }", "label": 1, "id": 5316}
{"input": "int gcd ( int num1 , int num2 ) { int temp ; temp = num1 % num2 ; if ( temp == <int> ) return num2 ; else gcd ( num2 , temp ) ; } int main ( ) { int T , i , k , l , A [ <int> ] , B [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A [ i ] , & B [ i ] ) ; } for ( i = <int> ; i < T ; i ++ ) { k = gcd ( A [ i ] , B [ i ] ) ; l = ( A [ i ] * B [ i ] ) / k ; printf ( <str> , k , l ) ; } return <int> ; }", "label": 1, "id": 5317}
{"input": "int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int sum_in_tri ( int i , int j , int q ) { if ( i >= q ) return <int> ; if ( b [ i ] [ j ] != - <int> ) { return b [ i ] [ j ] ; } else { int temp = sum_in_tri ( i + <int> , j , q ) ; int temp2 = sum_in_tri ( i + <int> , j + <int> , q ) ; int k = temp > temp2 ? ( temp + a [ i ] [ j ] ) : ( temp2 + a [ i ] [ j ] ) ; b [ i ] [ j ] = k ; return k ; } } int main ( ) { int n , k , i , j , ans ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j < k ; j ++ ) { b [ i ] [ j ] = - <int> ; } } for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } ans = sum_in_tri ( <int> , <int> , k ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5318}
{"input": "int sumt ( int [ <int> ] [ <int> ] , int , int ) ; int main ( ) { int a [ <int> ] [ <int> ] ; int t , n , j , k ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } printf ( <str> , sumt ( a , n , <int> ) ) ; } } int sumt ( int a [ ] [ <int> ] , int n , int r ) { int i , j ; int q = <int> , b = <int> ; if ( n == <int> ) { if ( a [ <int> ] [ <int> + r ] > a [ <int> ] [ <int> + r ] ) return a [ <int> ] [ <int> + r ] ; else return a [ <int> ] [ <int> + r ] ; } q = q + a [ <int> ] [ <int> + r ] + sumt ( & a [ <int> ] [ <int> ] , n - <int> , r ) ; r ++ ; b = b + a [ <int> ] [ <int> + r ] + sumt ( & a [ <int> ] [ <int> ] , n - <int> , r ) ; if ( q > b ) return q ; else return b ; }", "label": 2, "id": 5319}
{"input": "void <unk> ( int * numbers , int count ) { if ( count == <int> ) return ; int i ; int <unk> = ( count * ( count - <int> ) ) / <int> ; int <unk> = count - <int> ; int <unk> = <unk> - <unk> ; numbers [ <unk> ] += numbers [ <unk> ] ; numbers [ <unk> + count - <int> ] += numbers [ <unk> + <unk> - <int> ] ; for ( i = <unk> + <int> ; i < <unk> + count - <int> ; i ++ , <unk> ++ ) { int n1 = numbers [ <unk> ] ; int n2 = numbers [ <unk> + <int> ] ; int <unk> = n1 > n2 ? n1 : n2 ; numbers [ i ] += <unk> ; } } int main ( ) { int nCases , i , j , nLines , <unk> ; scanf ( <str> , & nCases ) ; for ( i = <int> ; i < nCases ; i ++ ) { scanf ( <str> , & nLines ) ; <unk> = ( nLines * ( nLines + <int> ) ) / <int> ; int numbers [ <unk> ] ; for ( j = <int> ; j < <unk> ; j ++ ) scanf ( <str> , & numbers [ j ] ) ; int index = <int> , count = <int> ; while ( index != <unk> ) { <unk> ( numbers , count ) ; index = index + count ; count ++ ; } int max = numbers [ <int> ] ; for ( j = <unk> - nLines ; j < <unk> ; j ++ ) { if ( numbers [ j ] > max ) max = numbers [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5320}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int min ; scanf ( <str> , & min ) ; for ( int i = <int> ; i < n ; i ++ ) { int temp ; scanf ( <str> , & temp ) ; if ( temp < min ) min = temp ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5321}
{"input": "int main ( ) { int t , i ; long long int n ; int x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; x = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < x ) x = a [ i ] ; } x = x * ( n - <int> ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 0, "id": 5322}
{"input": "int a [ <int> ] = { <int> } ; int main ( ) { int t , i , n , min = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ <int> ] ; else { if ( min > a [ i ] ) min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5323}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { int c ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } c = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( c > a [ i ] ) { c = a [ i ] ; } } printf ( <str> , c * ( n - <int> ) ) ; } }", "label": 0, "id": 5324}
{"input": "int main ( ) { int tri [ <int> ] , t , n , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < ( n * ( n + <int> ) ) / <int> ; j ++ ) scanf ( <str> , & tri [ j ] ) ; int len = j ; int base = n ; int step = base - <int> ; int stepc = <int> ; int i ; for ( i = len - base - <int> ; i >= <int> ; -- i ) { tri [ i ] += max ( tri [ i + step ] , tri [ i + step + <int> ] ) ; if ( ++ stepc == step ) { step -- ; stepc = <int> ; } } printf ( <str> , tri [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5325}
{"input": "int main ( ) { int t , i , d [ <int> ] , e [ <int> ] , j ; unsigned long long int a , b , c , s , q ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( b > a ) { c = a ; a = b ; b = c ; } for ( j = <int> ; j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) s = j ; } d [ i - <int> ] = s ; s = <int> ; for ( j = <int> ; ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { q = j ; break ; } } e [ i - <int> ] = q ; q = <int> ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , d [ i ] , e [ i ] ) ; } return <int> ; }", "label": 2, "id": 5326}
{"input": "int main ( ) { int t , i ; long long unsigned int arr [ <int> ] ; long unsigned int p , j , g , h , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int sum = <int> ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } for ( g = <int> ; g < n ; g ++ ) { for ( h = g + <int> ; h < n ; h ++ ) { if ( arr [ g ] > arr [ h ] ) { p = arr [ g ] ; arr [ g ] = arr [ h ] ; arr [ h ] = p ; } } } sum = arr [ <int> ] * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 5327}
{"input": "int main ( ) { int a , b , x ; int lcm , i , j ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; i = a ; j = b ; while ( b != <int> ) { x = a ; a = b ; b = x % b ; } lcm = i * j / a ; printf ( <str> , a , lcm ) ; } }", "label": 1, "id": 5328}
{"input": "int main ( ) { while ( <int> ) { } return <int> ; }", "label": 2, "id": 5329}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5330}
{"input": "int max = - <int> ; int summ ( int mt [ ] [ MAX ] , int t , int row , int col ) ; void initialise ( int mt [ ] [ MAX ] ) ; int main ( ) { int i , j , k , d ; int n ; int mat [ MAX ] [ MAX ] ; scanf ( <str> , & n ) ; if ( n <= <int> || n > <int> ) return <int> ; int t ; initialise ( mat ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & t ) ; if ( t >= <int> ) return <int> ; for ( j = <int> ; j < t ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & mat [ j ] [ k ] ) ; if ( ! ( mat [ j ] [ k ] >= <int> && mat [ j ] [ k ] <= <int> ) ) return <int> ; } } d = summ ( mat , t , <int> , <int> ) ; printf ( <str> , max ) ; max = - <int> ; initialise ( mat ) ; } return <int> ; } void initialise ( int mt [ ] [ MAX ] ) { int i , j ; for ( i = <int> ; i < MAX ; i ++ ) { for ( j = <int> ; j < MAX ; j ++ ) mt [ i ] [ j ] = <int> ; } } int summ ( int mt [ ] [ MAX ] , int t , int row , int col ) { int array [ <int> * MAX ] ; int ct = <int> ; int dupct , i , count ; for ( i = <int> ; i < <int> * MAX ; i ++ ) array [ i ] = <int> ; array [ <int> ] = mt [ <int> ] [ <int> ] ; dupct = <int> ; for ( i = <int> ; i < t ; i ++ ) { count = i + <int> ; while ( count > <int> ) { array [ ct + <int> ] = array [ dupct ] + mt [ row + <int> ] [ col ] ; array [ ct + <int> ] = array [ dupct ] + mt [ row + <int> ] [ col + <int> ] ; count = count - <int> ; ct = ct + <int> ; col ++ ; dupct = dupct + <int> ; } row = row + <int> ; col = <int> ; } for ( i = <int> ; array [ i ] != <int> ; i ++ ) { if ( array [ i ] > max ) max = array [ i ] ; } printf ( <str> ) ; return max ; }", "label": 1, "id": 5331}
{"input": "int max_sum ; short int rows , arr [ <int> ] [ <int> ] ; void <unk> ( short int cur_row , short int cur_col , int sum ) { sum += arr [ cur_row ] [ cur_col ] ; if ( cur_row == rows ) { if ( sum > max_sum ) max_sum = sum ; } else { <unk> ( cur_row + <int> , cur_col , sum ) ; <unk> ( cur_row + <int> , cur_col + <int> , sum ) ; } } main ( ) { int no ; short int count = <int> , i , j ; scanf ( <str> , & no ) ; int * results = ( int ) malloc ( <int> * no ) ; while ( no ) { scanf ( <str> , & rows ) ; max_sum = <int> ; for ( i = <int> ; i < rows ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & arr [ i ] [ j ] ) ; } <unk> ( <int> , <int> , <int> ) ; results [ count ++ ] = max_sum ; -- no ; } for ( i = <int> ; i < count ; ++ i ) printf ( <str> , results [ i ] ) ; }", "label": 2, "id": 5332}
{"input": "int main ( ) { int n , i , j ; int lines ; int max , max1 = <int> ; int arr [ <int> ] [ <int> ] ; int res [ <int> ] ; int cnt = <int> ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & lines ) ; max = <int> ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; max1 = <int> ; if ( ( i > <int> ) && ( j > <int> ) ) { max1 = arr [ i - <int> ] [ j ] ; if ( arr [ i - <int> ] [ j - <int> ] > arr [ i - <int> ] [ j ] ) { max1 = arr [ i - <int> ] [ j - <int> ] ; } } arr [ i ] [ j ] += max1 ; if ( i == lines - <int> ) { if ( arr [ i ] [ j ] > max ) { max = arr [ i ] [ j ] ; } } } } n -- ; res [ cnt ++ ] = max ; } for ( i = <int> ; i < cnt ; i ++ ) { printf ( <str> , res [ i ] ) ; } }", "label": 1, "id": 5333}
{"input": "int gcd ( int a , int b ) { if ( b > a ) { return gcd ( b , a ) ; } else if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , l , g ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 5334}
{"input": "long int scan ( ) { long int c = gc ( ) , n = <int> ; while ( c < <char> || c > <char> ) c = gc ( ) ; while ( c >= <char> && c <= <char> ) n = ( n << <int> ) + ( n << <int> ) + c - <char> , c = gc ( ) ; return n ; } int main ( ) { long int t , j , min , ans ; long long int i , n ; t = scan ( ) ; while ( t -- ) { n = scan ( ) ; min = scan ( ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { ans = scan ( ) ; if ( ans < min ) min = ans ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5335}
{"input": "main ( ) { int no , count = <int> , pos , pos2 , * results ; short int arr [ <int> ] ; short int i , j , rows ; scanf ( <str> , & no ) ; results = ( int ) malloc ( <int> * no ) ; while ( no ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; ++ i ) { pos = ( i * ( i + <int> ) ) >> <int> ; for ( j = <int> ; j <= i ; ++ j , ++ pos ) scanf ( <str> , & arr [ pos ] ) ; } for ( i = rows - <int> ; i >= <int> ; -- i ) { pos = ( i * ( i + <int> ) ) >> <int> ; pos2 = pos - i ; for ( j = <int> ; j < i ; ++ j , ++ pos , ++ pos2 ) arr [ pos2 ] += arr [ pos ] > arr [ pos + <int> ] ? arr [ pos ] : arr [ pos + <int> ] ; } results [ count ++ ] = * arr ; -- no ; } for ( i = <int> ; i < count ; ++ i ) printf ( <str> , results [ i ] ) ; free ( results ) ; return <int> ; }", "label": 3, "id": 5336}
{"input": "int greater ( int x , int y ) { if ( x > y ) return x ; else return y ; } int find_num ( int a [ <int> ] [ <int> ] , int p1 , int p2 , int r1 , int r2 ) { if ( p1 == r1 && p2 == r2 ) return ( a [ p1 ] [ p2 ] ) ; else return ( a [ p1 ] [ p2 ] + greater ( find_num ( a , p1 + <int> , p2 , r1 , r2 - <int> ) , find_num ( a , p1 + <int> , p2 + <int> , r1 , r2 ) ) ) ; } int main ( ) { int t ; int a [ <int> ] [ <int> ] , i , j , n , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , find_num ( a , <int> , <int> , n , n ) ) ; } return <int> ; }", "label": 2, "id": 5337}
{"input": "int x ( int m , int n ) { if ( m > n ) return m ; else return n ; } int a [ <int> ] [ <int> ] , u [ <int> ] [ <int> ] , t , n , s , i , j ; main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { s = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i == <int> ) { u [ i ] [ j ] = a [ i ] [ j ] ; } else { if ( j == <int> ) { u [ i ] [ j ] = a [ i ] [ j ] + u [ i - <int> ] [ j ] ; } else if ( j == i ) { u [ i ] [ j ] = a [ i ] [ j ] + u [ i - <int> ] [ j - <int> ] ; } else u [ i ] [ j ] = a [ i ] [ j ] + x ( u [ i - <int> ] [ j ] , u [ i - <int> ] [ j - <int> ] ) ; } } } for ( i = <int> ; i < n ; i ++ ) { s = x ( s , u [ n - <int> ] [ i ] ) ; } printf ( <str> , s ) ; } }", "label": 0, "id": 5338}
{"input": "int main ( void ) { int t , n ; long int x [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int i , j , min ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x [ i ] ) ; } min = x [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( x [ j ] < min ) { min = x [ j ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5339}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int n , k , temp ; scanf ( <str> , & n , & k ) ; int p = n * k ; if ( n > k ) { while ( n % k != <int> ) { temp = n ; n = k ; k = temp % k ; } printf ( <str> , k , p / k ) ; } else { while ( k % n != <int> ) { temp = k ; k = n ; n = temp % n ; } printf ( <str> , n , p / n ) ; } } return <int> ; }", "label": 1, "id": 5340}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int T ; long long int A , B ; int lcm , hcf ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; hcf = gcd ( A , B ) ; lcm = ( A * B ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 5341}
{"input": "int main ( ) { long int a [ <int> ] , n , i , small ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { small = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i ) { if ( small > a [ i ] ) small = a [ i ] ; } else small = a [ <int> ] ; } printf ( <str> , small * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5342}
{"input": "long int findhcf ( long int A , long int B ) { if ( B == <int> ) { return A ; } else { return findhcf ( B , A % B ) ; } } long int findlcm ( long int A , long int B , long int y ) { long int x ; x = findhcf ( A , B ) ; if ( x == <int> ) { return A * B * y ; } else { y = y * x ; return findlcm ( A / x , B / x , y ) ; } } int main ( ) { int T , i ; long int A , B , gcd , lcm , y ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { y = <int> ; scanf ( <str> , & A , & B ) ; gcd = findhcf ( A , B ) ; lcm = findlcm ( A , B , y ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 5343}
{"input": "long int euclid ( long int m , long int n ) { if ( m % n == <int> ) return n ; else return euclid ( n , m % n ) ; } int main ( ) { int i , j ; long int n ; long int gcd , lcm ; scanf ( <str> , & n ) ; long int arr [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= <int> ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } printf ( <str> ) ; for ( i = <int> ; i <= n ; i ++ ) { gcd = euclid ( arr [ i ] [ <int> ] , arr [ i ] [ <int> ] ) ; lcm = ( arr [ i ] [ <int> ] * arr [ i ] [ <int> ] ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 0, "id": 5344}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( long long int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int s = a [ <int> ] ; long long int sum = <int> ; for ( long long int i = <int> ; i < n ; i ++ ) { if ( s > a [ i ] ) { s = a [ i ] ; } } sum = s * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 5345}
{"input": "void main ( ) { int x , t , n , j ; scanf ( <str> , & t ) ; for ( ; t > <int> ; t -- ) { scanf ( <str> , & n ) ; int i , a [ n + <int> ] ; a [ <int> ] = <int> ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( j = <int> ; j < n ; ) { if ( a [ j ] > a [ j + <int> ] ) { a [ <int> ] = a [ <int> ] + a [ j + <int> ] ; j ++ ; } else if ( a [ j ] < a [ j + <int> ] ) { a [ <int> ] = a [ <int> ] + a [ j ] ; x = a [ j + <int> ] ; a [ j + <int> ] = a [ j + <int> ] ; j ++ ; } } printf ( <str> , a [ <int> ] ) ; } }", "label": 2, "id": 5346}
{"input": "int GCD ( int x , int y ) { if ( y == <int> ) { return x ; } return GCD ( y , x % y ) ; } int main ( ) { int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = GCD ( a , b ) ; l = ( int ) a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 5347}
{"input": "int gcd1 ( int a , int b ) { if ( b == <int> ) return a ; return gcd1 ( b , a % b ) ; } int lcm1 ( int a , int b ) { return ( a * b / gcd1 ( a , b ) ) ; } main ( ) { int t , a , b , c , i , gcd , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd1 ( a , b ) ) ; printf ( <str> , lcm1 ( a , b ) ) ; printf ( <str> ) ; } }", "label": 1, "id": 5348}
{"input": "int fastread ( ) { int input ; char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; input = <int> ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return input ; } int main ( ) { int n , t , i , j ; int a [ <int> ] [ <int> ] ; n = fastread ( ) ; while ( n -- ) { t = fastread ( ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5349}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ( a [ i ] [ j ] ) ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5350}
{"input": "int main ( ) { int t ; long int k , a , b , j , i ; scanf ( <str> , & t ) ; { while ( t -- ) { k = <int> ; scanf ( <str> , & a , & b ) ; i = b ; while ( ( a % i != <int> ) && ( b % i != <int> ) ) i -- ; printf ( <str> , i ) ; j = <int> ; while ( j < b ) { while ( ( a % j == <int> ) && ( b % j == <int> ) ) { k = k * j ; a = a / j ; b = b / j ; } j ++ ; } printf ( <str> , k * a * b ) ; } } return <int> ; }", "label": 2, "id": 5351}
{"input": "int main ( ) { long int t , n , i , a [ <int> ] , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { sum += a [ i + <int> ] ; } else { sum += a [ i ] ; } } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 5352}
{"input": "int sum_max = <int> ; int a [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> ) ; } int sum = <int> , count = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { int temp = a [ i + <int> ] [ j + <int> ] ; if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) temp = a [ i + <int> ] [ j ] ; a [ i ] [ j ] += temp ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5353}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( void ) { int test , a , b ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & a , & b ) ; int m = gcd ( a , b ) ; int l = lcm ( a , b ) ; printf ( <str> , m , l ) ; } return <int> ; }", "label": 1, "id": 5354}
{"input": "main ( ) { int t ; long long int r , a , b , x , y , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = ( x > y ) ? x : y ; b = ( x < y ) ? x : y ; r = b ; while ( a % b != <int> ) { r = a % b ; a = b ; b = r ; } l = ( x > y ) ? x : y ; while ( <int> ) { if ( l % x == <int> && l % y == <int> ) break ; ++ l ; } printf ( <str> , r , l ) ; } }", "label": 2, "id": 5355}
{"input": "void main ( ) { int n , i , t , arr [ <int> ] ; long long int min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( min > arr [ i ] ) min = arr [ i ] ; printf ( <str> , ( n - <int> ) * min ) ; } }", "label": 1, "id": 5356}
{"input": "int main ( ) { int i , triangle [ <int> ] [ <int> ] = { { <int> } } , t , n , j , k , sum [ <int> ] [ <int> ] = { { <int> } } , m0 , m1 , max ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & triangle [ j ] [ k ] ) ; } for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( j == <int> ) sum [ j ] [ k ] = triangle [ j ] [ k ] ; else if ( k == <int> ) sum [ j ] [ k ] = triangle [ j ] [ k ] + sum [ j - <int> ] [ k ] ; else if ( k == j ) sum [ j ] [ k ] = triangle [ j ] [ k ] + sum [ j - <int> ] [ k - <int> ] ; else { m0 = sum [ j - <int> ] [ k ] ; m1 = sum [ j - <int> ] [ k - <int> ] ; if ( m0 > m1 ) sum [ j ] [ k ] = triangle [ j ] [ k ] + m0 ; else sum [ j ] [ k ] = m1 + triangle [ j ] [ k ] ; } } } max = sum [ n - <int> ] [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( max < sum [ n - <int> ] [ k ] ) max = sum [ n - <int> ] [ k ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5357}
{"input": "int sum ( int * * a , int n , int i , int j ) { if ( n == <int> ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { return a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } else { return a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } else { int s [ <int> ] ; int k ; for ( k = <int> ; k < <int> ; k ++ ) { s [ k ] = sum ( a , n - <int> , i + <int> , j + k ) ; } if ( s [ <int> ] > s [ <int> ] ) { return a [ i ] [ j ] + s [ <int> ] ; } else { return a [ i ] [ j ] + s [ <int> ] ; } } } int main ( ) { int n ; scanf ( <str> , & n ) ; int * * a ; int k ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( k = <int> ; k < n ; k ++ ) { a [ k ] = ( int * ) malloc ( n * sizeof ( int ) ) ; } int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , sum ( a , n , <int> , <int> ) ) ; }", "label": 2, "id": 5358}
{"input": "long long gcd ( long long a , long long b ) ; int main ( void ) { int t , i ; long long a , b , c , d , hcf , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; c = a ; d = b ; hcf = gcd ( c , d ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } long long gcd ( long long a , long long b ) { while ( a != b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } return a ; }", "label": 0, "id": 5359}
{"input": "int main ( ) { int t ; int num ; int a [ <int> ] [ <int> ] ; int i , j ; int p , q ; int max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) for ( j = <int> ; j < num ; j ++ ) a [ i ] [ j ] = - <int> ; for ( i = <int> ; i < num ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { p = a [ i - <int> ] [ j - <int> ] ; q = a [ i - <int> ] [ j ] ; if ( i - <int> < <int> ) q = <int> ; if ( j - <int> < <int> ) p = <int> ; a [ i ] [ j ] = max ( p + a [ i ] [ j ] , q + a [ i ] [ j ] ) ; } } max = <int> ; for ( j = <int> ; j < num ; j ++ ) if ( a [ num - <int> ] [ j ] > max ) max = a [ num - <int> ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5360}
{"input": "int func ( int ( * arr ) [ <int> ] , int n , int i , int max ) { int j , m , a , b , c ; if ( i == <int> ) return max ; else { for ( j = <int> ; j <= i ; j ++ ) { a = * ( * ( arr + i ) + j ) ; b = * ( * ( arr + ( i - <int> ) ) + j ) ; if ( j > <int> ) { c = * ( * ( arr + ( i - <int> ) ) + ( j - <int> ) ) ; if ( ( ( a + b ) >= ( a + c ) ) && ( ( a + b ) > max ) ) { max = ( a + b ) ; m = j ; } if ( ( ( a + c ) >= ( a + b ) ) && ( ( a + c ) > max ) && ( j > <int> ) ) { max = ( a + c ) ; m = j - <int> ; } } else { if ( ( a + b ) > max ) { max = ( a + b ) ; m = j ; } } } * ( * ( arr + ( i - <int> ) ) + m ) = max ; func ( arr , n , i - <int> , max ) ; } } int main ( ) { int n , array [ <int> ] [ <int> ] , i , j , t , z ; scanf ( <str> , & t ) ; for ( z = <int> ; z < t ; z ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; } printf ( <str> , func ( array , n , n - <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 5361}
{"input": "int main ( ) { int n , i , j , r , sum ; scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) { scanf ( <str> , & n ) ; int a [ <int> ] ; scanf ( <str> , & a [ <int> ] , & a [ <int> ] ) ; if ( a [ <int> ] > a [ <int> ] ) a [ <int> ] = a [ <int> ] ; sum = a [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & a [ <int> ] ) ; if ( a [ <int> ] > a [ <int> ] ) a [ <int> ] = a [ <int> ] ; sum = sum + a [ <int> ] ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 5362}
{"input": "int num [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { num [ i ] [ j ] = num [ i ] [ j ] + max ( num [ i + <int> ] [ j ] , num [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , num [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5363}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) > ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ i + <int> ] [ j - <int> ] ) ; -- t ; } return <int> ; }", "label": 1, "id": 5364}
{"input": "int gdc ( int , int ) ; int main ( ) { int s , t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; s = gdc ( a , b ) ; printf ( <str> , s , ( a * b ) / s ) ; } return <int> ; } int gdc ( int a , int b ) { int p ; while ( b != <int> ) { p = b ; b = a % b ; a = p ; } return a ; }", "label": 1, "id": 5365}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , x , y , r , gcd , lcm ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { r = x % y ; x = y ; y = r ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 5366}
{"input": "int main ( ) { long long int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , min ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = min + a [ i ] ; a [ i ] = min - a [ i ] ; min = min - a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5367}
{"input": "int main ( void ) { long long t , count , i , j , a [ <int> ] , n ; scanf ( <str> , & t ) ; while ( t -- != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; count = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] && a [ j ] > a [ j - <int> ] ) { count ++ ; } else break ; } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 0, "id": 5368}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; long int a , b , lcm , gcd , num , den , rem ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 5369}
{"input": "int main ( ) { int w ; scanf ( <str> , & w ) ; for ( int i = <int> ; i < w ; i ++ ) { int x , y , z ; scanf ( <str> , & x , & y ) ; int a = x , b = y ; int gcd ; while ( y != <int> ) { int temp = x % y ; x = y ; y = temp ; } printf ( <str> , x , a * b / x ) ; } return <int> ; }", "label": 1, "id": 5370}
{"input": "main ( ) { int t ; long int i , j , k , l ; long int A [ <int> ] ; long int B [ <int> ] ; long int gcd [ <int> ] ; long int lcm [ <int> ] ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { int n = <int> , m = <int> ; scanf ( <str> , & A [ j ] , & B [ j ] ) ; for ( i = <int> ; i <= A [ j ] && i <= B [ j ] ; i ++ ) { if ( A [ j ] % i == <int> && B [ j ] % i == <int> ) { gcd [ j ] = i ; } } lcm [ j ] = A [ j ] * B [ j ] / gcd [ j ] ; } for ( k = <int> ; k < t ; k ++ ) { printf ( <str> , gcd [ k ] , lcm [ k ] ) ; } }", "label": 2, "id": 5371}
{"input": "void main ( ) { int i , j , x , b , N , no [ <int> ] , T ; int a [ <int> ] [ <int> ] , sum = <int> ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; no [ i ] = N ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < T ; i ++ ) { sum = <int> ; for ( j = <int> ; j < no [ i ] - <int> ; j ++ ) { if ( a [ i ] [ j ] >= a [ i ] [ j + <int> ] ) { sum = sum + a [ i ] [ j + <int> ] ; for ( x = j ; x < j - no [ i ] - <int> ; x ++ ) { a [ i ] [ x ] = a [ i ] [ x + <int> ] ; } } else { sum = sum + a [ i ] [ j ] ; for ( x = j + <int> ; x < j - no [ i ] - <int> ; x ++ ) { a [ i ] [ x + <int> ] = a [ i ] [ x + <int> ] ; } } } printf ( <str> , sum ) ; } }", "label": 3, "id": 5372}
{"input": "int main ( ) { int t ; long long a , b , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { for ( j = a ; j != <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) break ; } } else if ( b < a ) { for ( j = b ; j != <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) break ; } } printf ( <str> , j , ( a * b ) / j ) ; } return <int> ; }", "label": 2, "id": 5373}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; int GCD = gcd ( a , b ) ; int LCM = lcm ( a , b ) ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 1, "id": 5374}
{"input": "int triangle [ <int> ] [ <int> ] ; int lines , level , offset ; int indices [ <int> ] ; int sumtrian ( ) ; int bump ( ) ; int main ( ) { int testcases , i , j , k ; int sum , temp ; scanf ( <str> , & testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { indices [ j ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & triangle [ j ] [ k ] ) ; } } sum = <int> ; offset = <int> ; level = lines - <int> ; sumtrian ( ) ; printf ( <str> , sum ) ; } return <int> ; } int sumtrian ( ) { int i , sum = <int> ; for ( i = <int> ; i < lines ; i ++ ) { sum += triangle [ i ] [ indices [ i ] ] ; } return sum ; } int bump ( ) { if ( level == <int> || offset > level ) { level = lines - <int> ; offset ++ ; indices [ lines - <int> ] = offset ; return offset == lines ; } else { indices [ level -- ] = offset ; return <int> ; } }", "label": 1, "id": 5375}
{"input": "int main ( ) { int n , lines , i , j , k = <int> ; scanf ( <str> , & n ) ; while ( k ++ < n ) { scanf ( <str> , & lines ) ; int * * arr = ( int * * ) malloc ( lines * sizeof ( int * ) ) ; for ( i = <int> ; i < lines ; i ++ ) { arr [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = lines - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) { arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; } else { arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < lines ; i ++ ) { free ( arr [ i ] ) ; } free ( arr ) ; if ( k != n ) printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 5376}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5377}
{"input": "int main ( ) { int t , a , b , lcm , hcf , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { temp = b ; b = a ; a = temp ; } if ( a % b == <int> ) { lcm = a ; hcf = b ; } else { hcf = <int> ; lcm = a * b ; } printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 5378}
{"input": "int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int x , y ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } if ( a == b ) printf ( <str> , a , ( x * y ) / a ) ; } return <int> ; }", "label": 1, "id": 5379}
{"input": "main ( ) { int n , t , i , j , a [ <int> ] [ <int> ] , l , sum ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; sum = <int> ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < t ; i ++ ) { l = a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ <int> ] ) { l = a [ i ] [ j ] ; } } sum = sum + l ; } printf ( <str> , sum ) ; } }", "label": 3, "id": 5380}
{"input": "int getGCD ( int a , int b ) { long int diff ; long int m , n ; if ( a > b ) { m = a ; n = b ; } else { m = b ; n = a ; } if ( m % n == <int> ) return n ; else { diff = m - n ; return getGCD ( n , diff ) ; } } int main ( ) { int t ; long int gcd , lcm ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = getGCD ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 5381}
{"input": "int main ( ) { int t , g ; int s , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l , & s ) ; if ( l < s ) l = ( l + s ) - ( s = l ) ; g = s ; while ( ( l % g != <int> ) || ( s % g != <int> ) ) { -- g ; } printf ( <str> , g , l * s / g ) ; } return <int> ; }", "label": 1, "id": 5382}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , a , min , i ; scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } long long int score ; score = min * ( n - <int> ) ; printf ( <str> , score ) ; } return <int> ; }", "label": 0, "id": 5383}
{"input": "int main ( ) { int n , s , i , j , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & s ) ; int a [ n ] [ n ] ; for ( j = <int> ; j <= s ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = s - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j ] [ k ] + a [ j - <int> ] [ k ] >= a [ j ] [ k + <int> ] + a [ j - <int> ] [ k ] ) { a [ j - <int> ] [ k ] = a [ j ] [ k ] + a [ j - <int> ] [ k ] ; } else if ( a [ j ] [ k ] + a [ j - <int> ] [ k ] < a [ j ] [ k + <int> ] + a [ j - <int> ] [ k ] ) { a [ j - <int> ] [ k ] = a [ j ] [ k ] + a [ j ] [ k + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5384}
{"input": "int main ( ) { int t , i , a , b , x , y , lcm , hcf , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i = i + <int> ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { m = b ; b = a % b ; a = m ; } hcf = a ; lcm = x * y / hcf ; printf ( <str> , hcf , lcm ) ; } }", "label": 1, "id": 5385}
{"input": "int main ( ) { int a , b , gcd , lcm , t , rem , n1 , n2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; n1 = a ; n2 = b ; rem = n1 % n2 ; while ( rem != <int> ) { n1 = n2 ; n2 = rem ; rem = n1 % n2 ; } printf ( <str> , n2 , ( a * b ) / n2 ) ; } }", "label": 1, "id": 5386}
{"input": "int main ( ) { long long int t , i , cost = <int> , min , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; scanf ( <str> , & a [ <int> ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 5387}
{"input": "int newsum [ <int> ] ; int sum [ <int> ] ; void max ( int * a , int i , int n ) { int j ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } newsum [ <int> ] = sum [ <int> ] + a [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { if ( sum [ j - <int> ] > sum [ j ] ) newsum [ j ] = sum [ j - <int> ] + a [ j ] ; else newsum [ j ] = sum [ j ] + a [ j ] ; } newsum [ i ] = a [ i ] + sum [ i - <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { sum [ j ] = newsum [ j ] ; } } int main ( ) { int trial , n , i ; scanf ( <str> , & trial ) ; while ( trial -- ) { scanf ( <str> , & n ) ; int a [ n ] ; scanf ( <str> , & a [ <int> ] ) ; sum [ <int> ] = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) sum [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { max ( a , i , n ) ; } int m = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( sum [ i ] > m ) { m = sum [ i ] ; } } printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 5388}
{"input": "int main ( ) { char arr [ <int> ] [ <int> ] ; int n , i , j , rslt = <int> , s ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = s - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5389}
{"input": "int main ( ) { int a , b , n , t , w , gcd , lcm , i , x , y ; scanf ( <str> , & w ) ; for ( i = <int> ; i < w ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 5390}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; if ( a > b ) return gcd ( a % b , b ) ; if ( b > a ) return gcd ( b % a , a ) ; if ( a == b ) return a ; } int main ( ) { int t , g , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 5391}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a [ <int> ] ; long long int i , n , count = <int> , n1 = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) n1 ++ ; else { count += ( n1 * ( n1 - <int> ) ) / <int> ; n1 = <int> ; } } count += ( n1 * ( n1 - <int> ) ) / <int> ; printf ( <str> , count + n ) ; } return <int> ; }", "label": 0, "id": 5392}
{"input": "static char buf [ BUF_SIZE ] ; static long pos = <int> ; static long len = <int> ; static int readC ( ) { if ( pos >= len ) { len = read ( <int> , buf , BUF_SIZE ) ; if ( len < <int> ) return - <int> ; pos = <int> ; } return buf [ pos ++ ] ; } int readInt ( ) { int c , ve = <int> , i = <int> ; do { c = readC ( ) ; } while ( ( c < <char> || c > <char> ) ) ; do { i = ( i << <int> + i << <int> ) + c - <char> ; c = readC ( ) ; } while ( c >= <char> && c <= <char> ) ; return i * ve ; } int main ( ) { int T , n , i , j ; T = readInt ( ) ; while ( T -- ) { n = readInt ( ) ; int A [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] = readInt ( ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] += MAX ( A [ i + <int> ] [ j ] , A [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5393}
{"input": "int main ( ) { long long int arr [ <int> ] ; int t ; long int i , m ; long long int c , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < m ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } c = min * ( m - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 5394}
{"input": "int main ( ) { int t1 ; scanf ( <str> , & t1 ) ; unsigned long long p , lcm , x , y , a , b , t , gcd ; while ( t1 -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; p = x * y ; lcm = ( p ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5395}
{"input": "int main ( ) { int T , j , r ; int y , numb = <int> , i , A [ <int> ] , k , sum = <int> , B [ <int> ] , s [ <int> ] , c , x , e , n = <int> , u = <int> , N ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; y = numb + N ; c = numb ; for ( i = numb ; i < y ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( k = c ; k < y ; k ++ ) { scanf ( <str> , & B [ k ] ) ; } numb = y ; s [ j ] = N ; } for ( r = <int> ; r < T ; r ++ ) { x = u ; n = n + s [ r ] ; if ( A [ x ] >= B [ x ] ) { sum ++ ; } for ( e = x + <int> ; e < n ; e ++ ) { if ( ( A [ e ] - A [ e - <int> ] ) >= B [ e ] ) { sum ++ ; } } printf ( <str> , sum ) ; u = n ; sum = <int> ; } }", "label": 3, "id": 5396}
{"input": "int main ( void ) { long long a , b , k , i , t , j , num , nam ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; j = <int> ; k = <int> ; num = a ; nam = b ; while ( a != <int> || b != <int> ) { if ( a % j == <int> || b % j == <int> ) { if ( a % j == <int> ) a = a / j ; if ( b % j == <int> ) b = b / j ; k = k * j ; } else j ++ ; } printf ( <str> , ( num * nam ) / k , k ) ; } return <int> ; }", "label": 2, "id": 5397}
{"input": "int main ( ) { int t , a , b , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd = b ; while ( gcd != <int> ) { if ( a % gcd == <int> && b % gcd == <int> ) break ; gcd -- ; } printf ( <str> , gcd , a * b / gcd ) ; } return <int> ; }", "label": 2, "id": 5398}
{"input": "int a [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] ; int visited [ <int> ] [ <int> ] ; int n , nl ; int solve ( int i , int j ) { int t , t1 , t2 ; if ( i > n ) return <int> ; if ( visited [ i ] [ j ] == <int> ) return cache [ i ] [ j ] ; t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = a [ i ] [ j ] + ( ( t1 > t2 ) ? t1 : t2 ) ; cache [ i ] [ j ] = t ; visited [ i ] [ j ] = <int> ; return t ; } int main ( ) { int i , j , max = <int> ; scanf ( <str> , & n ) ; while ( n != <int> ) { scanf ( <str> , & nl ) ; for ( i = <int> ; i < nl ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; visited [ i ] [ j ] = <int> ; } } max = solve ( <int> , <int> ) ; printf ( <str> , max ) ; n -- ; } }", "label": 3, "id": 5399}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; int min ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j == <int> ) min = a [ j ] ; else if ( min > a [ j ] ) min = a [ j ] ; } long long int h = min * ( n - <int> ) ; printf ( <str> , h ) ; } return <int> ; }", "label": 0, "id": 5400}
{"input": "int main ( ) { int t ; long int i , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , c ; scanf ( <str> , & n ) ; c = n ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { int flag = <int> ; for ( k = i ; k < j ; k ++ ) { if ( a [ k ] > a [ k + <int> ] ) { flag = <int> ; break ; } } if ( flag == <int> ) c ++ ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 5401}
{"input": "int main ( ) { long int t , n , a [ <int> ] , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 5402}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , n , i , j , m ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i + <int> ; j ++ ) { a [ i ] [ j ] += max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } } i -- ; m = a [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) m = max ( m , a [ i ] [ j ] ) ; printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 5403}
{"input": "int main ( ) { int i , T , A , B , r , n1 , n2 , gcd , lcm , l , s ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { l = A ; s = B ; } else { l = B ; s = A ; } r = l % s ; while ( r != <int> ) { l = s ; s = r ; r = l % s ; } gcd = s ; lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5404}
{"input": "int main ( ) { unsigned short int testcase , i , distinctInt ; int min , value ; unsigned long long int cost ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { scanf ( <str> , & distinctInt ) ; min = <int> ; for ( i = <int> ; i <= distinctInt ; i ++ ) { scanf ( <str> , & value ) ; if ( value < min ) { min = value ; } } cost = min * ( distinctInt - <int> ) ; printf ( <str> , cost ) ; } }", "label": 0, "id": 5405}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n ; while ( test -- > <int> ) { scanf ( <str> , & n ) ; int vec1 [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( vec1 [ i + <int> ] [ j ] >= vec1 [ i + <int> ] [ j + <int> ] ) vec1 [ i ] [ j ] = vec1 [ i ] [ j ] + vec1 [ i + <int> ] [ j ] ; else vec1 [ i ] [ j ] = vec1 [ i ] [ j ] + vec1 [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , vec1 [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5406}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int a [ <int> ] [ <int> ] ; int i , j ; int m , sum , final ; int n ; scanf ( <str> , & sum ) ; while ( sum -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5407}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test ) { int n , i = <int> , j , max = <int> ; scanf ( <str> , & n ) ; int arr [ <int> ] [ n ] ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < n ; j ++ ) arr [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ <int> ] [ j ] ) ; if ( i == <int> ) arr [ <int> ] [ i ] = arr [ <int> ] [ i ] ; for ( j = <int> ; j <= i - <int> ; j ++ ) { int c ; if ( arr [ <int> ] [ j ] < arr [ <int> ] [ j ] + arr [ <int> ] [ j ] ) arr [ <int> ] [ j ] = arr [ <int> ] [ j ] + arr [ <int> ] [ j ] ; if ( arr [ <int> ] [ j ] < arr [ <int> ] [ j ] + arr [ <int> ] [ j + <int> ] ) arr [ <int> ] [ j ] = arr [ <int> ] [ j ] + arr [ <int> ] [ j + <int> ] ; if ( arr [ <int> ] [ j ] > max ) max = arr [ <int> ] [ j ] ; } for ( j = <int> ; j <= i ; j ++ ) arr [ <int> ] [ j ] = arr [ <int> ] [ j ] ; } printf ( <str> , max ) ; test -- ; } return <int> ; }", "label": 1, "id": 5408}
{"input": "int main ( ) { int t , m , n , i , j , x , k , y , z , flag , min , max , gcd , lcm ; float p , q , r , s ; char ch ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n , & x ) ; y = n ; z = x ; while ( z != <int> ) { m = z ; z = y % z ; y = m ; } gcd = y ; lcm = ( n * x ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5409}
{"input": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; int test , count ; count = <int> ; printf ( <str> ) ; scanf ( <str> , & test ) ; while ( count < test ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; count ++ ; } }", "label": 1, "id": 5410}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , l , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5411}
{"input": "int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; void <unk> ( int n ) { int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) b [ i ] [ j ] = - <int> ; } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int sum ( int i , int j , int n ) { int t , x , y ; if ( i > n - <int> ) return <int> ; else { if ( b [ i ] [ j ] > - <int> ) t = b [ i ] [ j ] ; else { x = sum ( i + <int> , j , n ) ; y = sum ( i + <int> , j + <int> , n ) ; t = max ( x , y ) + a [ i ] [ j ] ; b [ i ] [ j ] = t ; } return t ; } } int main ( ) { int t , i , j , n ; int ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } <unk> ( n ) ; ans = sum ( <int> , <int> , n ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5412}
{"input": "int sums [ <int> ] [ <int> ] = { - <int> } ; int main ( ) { int n , i , j , k , limit , max ; int array [ <int> ] [ <int> ] = { - <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { memset ( sums , - <int> , <int> ) ; scanf ( <str> , & limit ) ; for ( j = <int> ; j < limit ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & array [ j ] [ k ] ) ; printf ( <str> , sum ( array , limit , <int> , <int> ) ) ; } return <int> ; } int sum ( int array [ <int> ] [ <int> ] , int limit , int cur_row , int pos ) { if ( cur_row + <int> == limit ) { if ( array [ cur_row ] [ pos ] > array [ cur_row ] [ pos + <int> ] ) return array [ cur_row ] [ pos ] ; return array [ cur_row ] [ pos + <int> ] ; } int sum1 , sum2 ; if ( sums [ cur_row ] [ pos ] != - <int> ) return sums [ cur_row ] [ pos ] ; sum1 = array [ cur_row ] [ pos ] + sum ( array , limit , cur_row + <int> , pos ) ; sum2 = array [ cur_row ] [ pos ] + sum ( array , limit , cur_row + <int> , pos + <int> ) ; if ( sum1 > sum2 ) { sums [ cur_row ] [ pos ] = sum1 ; return sum1 ; } else { sums [ cur_row ] [ pos ] = sum2 ; return sum2 ; } }", "label": 1, "id": 5413}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i ; long long int c = <int> , k = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) c ++ ; else { k = k + ( ( c * ( c + <int> ) ) / <int> ) ; c = <int> ; } } k = k + ( ( c * ( c + <int> ) ) / <int> ) ; printf ( <str> , k ) ; } return <int> ; }", "label": 0, "id": 5414}
{"input": "int main ( ) { int t , n1 , n2 , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { lcm = <int> ; scanf ( <str> , & n1 , & n2 ) ; int n ; n = n1 >= n2 ? n1 : n2 ; for ( i = <int> ; i < n ; i ++ ) { if ( ( n1 % i == <int> ) && ( n2 % i == <int> ) ) { gcd = i ; } if ( ( n1 % i == <int> ) && ( n2 % i == <int> ) ) { lcm = lcm * i ; n1 = n1 / i ; n2 = n2 / i ; } else if ( ( n1 % i == <int> ) && ( n2 % i != <int> ) ) { lcm = lcm * i ; n1 = n1 / i ; } else if ( ( n1 % i != <int> ) && ( n2 % i == <int> ) ) { lcm = lcm * i ; n2 = n2 / i ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 5415}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long long int a , b , j , s , x , min ; scanf ( <str> , & a , & b ) ; if ( a < b ) min = a ; else min = b ; for ( j = <int> ; j <= min ; j ++ ) { if ( a % j == <int> && b % j == <int> ) x = j ; } s = ( a * b ) / x ; printf ( <str> , x , s ) ; } return <int> ; }", "label": 2, "id": 5416}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } long long int lcm ( long long int a , long long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { long long int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 5417}
{"input": "int gcd ( int a , int b ) { while ( <int> ) { if ( a >= b ) { if ( a % b == <int> ) return b ; else a = a - b ; } else { if ( b % a == <int> ) return a ; else b = b - a ; } } } int main ( ) { int t ; int a , b , d ; int c ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; d = gcd ( a , b ) ; c = ( a * b ) / d ; printf ( <str> , d ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 5418}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( void ) { int t , a , b , hcf ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; printf ( <str> , hcf , ( hcf * ( a / hcf ) * ( b / hcf ) ) ) ; } return <int> ; }", "label": 1, "id": 5419}
{"input": "int GCD ( int a , int b ) ; void main ( ) { int t , n , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & m ) ; printf ( <str> , GCD ( n , m ) , ( ( n * m ) / GCD ( n , m ) ) ) ; } } int GCD ( int a , int b ) { if ( a % b == <int> ) return b ; else return GCD ( b , a % b ) ; }", "label": 1, "id": 5420}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; gcd ( b , a % b ) ; } int main ( ) { int t , n , i , j , k ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n , & k ) ; i = gcd ( n , k ) ; j = ( n * k ) / i ; printf ( <str> , i , j ) ; t -- ; } return <int> ; }", "label": 1, "id": 5421}
{"input": "main ( ) { int row , i , j , test ; int * * ar ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & row ) ; ar = ( int * * ) malloc ( sizeof ( * ar ) * row ) ; for ( i = <int> ; i < row ; i ++ ) ar [ i ] = ( int * ) malloc ( sizeof ( * * ar ) * ( i + <int> ) ) ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; for ( i = row - <int> ; i >= <int> ; i -- ) for ( j = i ; j > <int> ; j -- ) { if ( ar [ i ] [ j ] > ar [ i ] [ j - <int> ] ) ar [ i - <int> ] [ j - <int> ] += ar [ i ] [ j ] ; else ar [ i - <int> ] [ j - <int> ] += ar [ i ] [ j - <int> ] ; } printf ( <str> , ar [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5422}
{"input": "int main ( ) { int test ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , test ) ; while ( test -- ) { int i , j , num ; scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = num - <int> ; i >= <int> ; i ++ ) { for ( j = i ; j >= <int> ; j ++ ) { if ( arr [ j + <int> ] [ i ] > arr [ j ] [ i ] ) { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i ] [ j + <int> ] ; } else { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5423}
{"input": "int main ( ) { long long int T , A , B ; scanf ( <str> , & T ) ; while ( T -- ) { long long int p = <int> , q = <int> , l = <int> ; scanf ( <str> , & A , & B ) ; if ( A > B ) { p = A ; q = B ; } else { p = B ; q = A ; } l = p % q ; while ( l > <int> ) { p = q ; q = l ; l = p % q ; } long long int GCD = q ; long long int LCM = ( A * B ) / GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 0, "id": 5424}
{"input": "int hcf ( int a , int b ) { if ( b == <int> ) return a ; else return hcf ( b , a % b ) ; } int main ( ) { int n ; int a [ <int> ] ; scanf ( <str> , & n ) ; int gcd ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j < <int> ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } gcd = hcf ( a [ <int> ] , a [ <int> ] ) ; printf ( <str> , gcd , a [ <int> ] * a [ <int> ] / gcd ) ; } }", "label": 1, "id": 5425}
{"input": "int main ( ) { int n , t , j , k , i , a [ <int> ] [ <int> ] , t1 , t2 ; scanf ( <str> , & t ) ; int ans [ t ] ; i = <int> ; while ( i < t ) { scanf ( <str> , & n ) ; j = <int> ; while ( j < n ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } j ++ ; } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { t1 = a [ j ] [ k ] + a [ j + <int> ] [ k ] ; t2 = a [ j ] [ k ] + a [ j + <int> ] [ k + <int> ] ; a [ j ] [ k ] = t1 > t2 ? t1 : t2 ; } } ans [ i ] = a [ <int> ] [ <int> ] ; i ++ ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 0, "id": 5426}
{"input": "void fun ( long * , long * , long * ) ; int main ( ) { int t , i = <int> ; long n , a [ <int> ] , j = <int> , k , cost = <int> , g = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> , k = <int> ; j < n && k < n ; ) { if ( a [ j ] > a [ k ] ) { fun ( & a , & n , & j ) ; g = a [ k ] ; } else { fun ( & a , & n , & k ) ; g = a [ j ] ; } cost = cost + g ; } printf ( <str> , cost ) ; printf ( <str> ) ; cost = <int> ; } return <int> ; } void fun ( long * p , long * q , long * r ) { long i = <int> ; for ( i = * r ; i < * q - <int> ; i ++ ) * ( p + i ) = * ( p + i + <int> ) ; * q = * q - <int> ; }", "label": 2, "id": 5427}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int q = <int> ; int main ( ) { int t , i , a , b , rgcd , rlcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; rgcd = gcd ( a , b ) ; rlcm = lcm ( a , b ) ; printf ( <str> , rgcd , rlcm ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == <int> ) { return b ; } return gcd ( b % a , a ) ; } int lcm ( int a , int b ) { if ( q % a == <int> && q % b == <int> ) { return q ; } q ++ ; lcm ( a , b ) ; return q ; }", "label": 3, "id": 5428}
{"input": "int fastinput ( ) { char c = <int> ; int input = <int> ; while ( c < <int> ) c = getchar ( ) ; while ( c > <int> ) { input = input * <int> + c - <char> ; c = getchar ( ) ; } return ( int ) input ; } int main ( void ) { int t ; t = fastinput ( ) ; while ( t -- ) { int n ; n = fastinput ( ) ; int a [ <int> ] [ <int> ] , i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = fastinput ( ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5429}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) { return <int> ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; a = <int> ; b = <int> ; } return <int> ; }", "label": 1, "id": 5430}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int i , j , k , count ; int h [ t ] ; for ( count = <int> ; count < t ; count ++ ) { int l ; scanf ( <str> , & l ) ; int a [ l ] [ l ] ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j < l ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i <= l ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { int m ; scanf ( <str> , & m ) ; a [ i - <int> ] [ j ] = m ; } } int ms [ l ] ; int curr_r = <int> ; int curr_c = <int> ; ms [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < l - <int> ; i ++ ) { if ( a [ curr_r + <int> ] [ curr_c ] > a [ curr_r + <int> ] [ curr_c + <int> ] ) { curr_r = curr_r + <int> ; ms [ i + <int> ] = a [ curr_r ] [ curr_c ] ; } else { curr_r = curr_r + <int> ; curr_c = curr_c + <int> ; ms [ i + <int> ] = a [ curr_r ] [ curr_c ] ; } } int sum = <int> ; for ( k = <int> ; k < l ; k ++ ) sum = sum + ms [ k ] ; h [ count ] = sum ; } for ( j = <int> ; j < t ; j ++ ) printf ( <str> , h [ j ] ) ; }", "label": 1, "id": 5431}
{"input": "int main ( void ) { int n ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { long long int k ; scanf ( <str> , & k ) ; long long int a [ k ] ; int f = <int> , count = k ; for ( int j = <int> ; j < k ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( int j = <int> ; j < k ; j ++ ) { int s = j ; while ( a [ s + <int> ] >= a [ s ] && s < k - <int> ) { count ++ ; s ++ ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 5432}
{"input": "long long int gcd ( long long int x , long long int y ) { long long int rem ; rem = x % y ; if ( rem == <int> ) return y ; else return ( gcd ( y , rem ) ) ; } int main ( ) { long long int a , b , i , lcm , hcf ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 5433}
{"input": "int main ( void ) { long long int n , i , p , q ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & p , & q ) ; printf ( <str> , gcd ( p , q ) , p * q / gcd ( p , q ) ) ; } return <int> ; } int gcd ( long long int a , long long int b ) { while ( a != b ) { if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } return a ; }", "label": 0, "id": 5434}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n1 , n2 , n = <int> , d = <int> , gcd = <int> , lcm = <int> , r = <int> ; scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { n = n1 ; d = n2 ; } else { n = n2 ; d = n1 ; } r = n1 % n2 ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5435}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n , i ; long long int sum = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int d [ n ] ; d [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] <= a [ i ] ) { d [ i ] = d [ i - <int> ] + <int> ; } else { d [ i ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { sum = sum + d [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 5436}
{"input": "main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int a , b , i , s , gcd ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= b && i <= a ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; printf ( <str> , gcd , a * b / gcd ) ; } }", "label": 1, "id": 5437}
{"input": "main ( ) { int i , t , m ; int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i < a && i < b && a % i == <int> && b % i == <int> ; i ++ ) { m = i ; } printf ( <str> , m , ( a * b ) / m ) ; } }", "label": 1, "id": 5438}
{"input": "int main ( ) { int t , n , m , j ; int * * p ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; m = <int> ; p = ( int * * ) malloc ( sizeof ( int * ) * n ) ; while ( m < n ) { p [ m ] = ( int * ) malloc ( sizeof ( int ) * ( m + <int> ) ) ; m ++ ; } for ( m = <int> ; m < n ; m ++ ) { for ( j = <int> ; j < m + <int> ; j ++ ) { scanf ( <str> , & p [ m ] [ j ] ) ; } } for ( m = n - <int> ; m > <int> ; m -- ) { for ( j = <int> ; j < m ; j ++ ) { if ( p [ m ] [ j ] > p [ m ] [ j + <int> ] ) { p [ m - <int> ] [ j ] += p [ m ] [ j ] ; } else { p [ m - <int> ] [ j ] += p [ m ] [ j + <int> ] ; } } } printf ( <str> , p [ <int> ] [ <int> ] ) ; m = <int> ; while ( m < n ) { free ( p [ m ] ) ; m ++ ; } free ( p ) ; t -- ; } }", "label": 0, "id": 5439}
{"input": "int main ( ) { int cases ; scanf ( <str> , & cases ) ; int l ; for ( l = <int> ; l < cases ; l ++ ) { int c ; scanf ( <str> , & c ) ; int * * nums = ( int * * ) malloc ( c * sizeof ( int * ) ) ; int i , j ; for ( i = <int> ; i < c ; i ++ ) nums [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < c ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & nums [ i ] [ j ] ) ; for ( i = c - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { nums [ i ] [ j ] = nums [ i ] [ j ] + ( MIN ( nums [ i + <int> ] [ j ] , nums [ i + <int> ] [ j + <int> ] ) ) ; } } printf ( <str> , nums [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < c ; i ++ ) free ( nums [ i ] ) ; free ( nums ) ; } return <int> ; }", "label": 0, "id": 5440}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int solve ( int value [ ] [ <int> ] , int sex [ ] [ <int> ] , int i , int j , int n ) { if ( i > n ) return <int> ; int ans , t1 , t2 ; if ( sex [ i + <int> ] [ j ] == - <int> ) t1 = solve ( value , sex , i + <int> , j , n ) ; else t1 = sex [ i + <int> ] [ j ] ; if ( sex [ i + <int> ] [ j + <int> ] == - <int> ) t2 = solve ( value , sex , i + <int> , j + <int> , n ) ; else t2 = sex [ i + <int> ] [ j + <int> ] ; ans = value [ i ] [ j ] + max ( t1 , t2 ) ; sex [ i ] [ j ] = ans ; return ans ; } main ( ) { int n , value [ <int> ] [ <int> ] , i , j , k , ans , sex [ <int> ] [ <int> ] , t ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { sex [ i ] [ j ] = - <int> ; } } scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & value [ i ] [ j ] ) ; } } ans = solve ( value , sex , <int> , <int> , n ) ; printf ( <str> , ans ) ; } }", "label": 1, "id": 5441}
{"input": "int main ( ) { int t , i ; long a , b , u , v , x , lcm , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; u = a ; v = b ; while ( <int> ) { x = a % b ; a = b ; b = x ; if ( x == <int> ) { gcd = a ; break ; } } lcm = ( u * v ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 5442}
{"input": "void main ( ) { int a , b , x , y , n , t , gcd , lcm ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 5443}
{"input": "int main ( ) { int cases , * * triangle , i , j , rows , k ; scanf ( <str> , & cases ) ; for ( k = <int> ; k < cases ; k ++ ) { scanf ( <str> , & rows ) ; triangle = ( int * * ) malloc ( sizeof ( int * ) * rows ) ; for ( i = <int> ; i < rows ; i ++ ) triangle [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & triangle [ i ] [ j ] ) ; for ( i = rows - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( triangle [ i ] [ j ] > triangle [ i ] [ j + <int> ] ) triangle [ i - <int> ] [ j ] += triangle [ i ] [ j ] ; else triangle [ i - <int> ] [ j ] += triangle [ i ] [ j + <int> ] ; } } printf ( <str> , * * triangle ) ; } return <int> ; }", "label": 0, "id": 5444}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int y , i ; for ( i = <int> ; i <= a && i <= b ; i ++ ) if ( a % i == <int> && b % i == <int> ) y = i ; printf ( <str> , y , a * b / y ) ; } }", "label": 1, "id": 5445}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; long long int a [ <int> ] ; scanf ( <str> , & n ) ; int i ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int m = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ m ] ) m = i ; } printf ( <str> , a [ m ] * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5446}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , small , i , a [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , a + i ) ; small = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < small ) small = a [ i ] ; } printf ( <str> , small * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5447}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int i ; int s1 [ t ] , s2 [ t ] , s3 [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & s1 [ i ] , & s2 [ i ] , s3 [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { if ( s1 [ i ] + s2 [ i ] + s3 [ i ] == <int> ) { printf ( <str> ) ; } else printf ( <str> ) ; } return <int> ; }", "label": 3, "id": 5448}
{"input": "int main ( void ) { int t ; long long n , min , i , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { long long cost = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } }", "label": 0, "id": 5449}
{"input": "int main ( ) { int a , b , max , t , m , i , x , y ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { m = a ; a = b ; b = m ; } x = a ; y = b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } while ( b != <int> ) { m = a ; a = b ; b = m % b ; } printf ( <str> , a , x * y / a ) ; } return <int> ; }", "label": 1, "id": 5450}
{"input": "int main ( void ) { int t ; unsigned long int a , b , n1 , n2 , temp ; unsigned long long int gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; n1 = a ; n2 = b ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = n1 * n2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 5451}
{"input": "int main ( ) { int n , i , h , l ; scanf ( <str> , & n ) ; int a [ <int> ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ <int> ] [ i ] , & a [ <int> ] [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( h = a [ <int> ] [ i ] < a [ <int> ] [ i ] ? a [ <int> ] [ i ] : a [ <int> ] [ i ] ; h >= <int> ; h -- ) { if ( a [ <int> ] [ i ] % h == <int> && a [ <int> ] [ i ] % h == <int> ) break ; } printf ( <str> , h ) ; for ( l = a [ <int> ] [ i ] > a [ <int> ] [ i ] ? a [ <int> ] [ i ] : a [ <int> ] [ i ] ; l <= a [ <int> ] [ i ] * a [ <int> ] [ i ] ; l += ( a [ <int> ] [ i ] > a [ <int> ] [ i ] ? a [ <int> ] [ i ] : a [ <int> ] [ i ] ) ) if ( l % a [ <int> ] [ i ] == <int> && l % a [ <int> ] [ i ] == <int> ) break ; printf ( <str> , l ) ; } return <int> ; }", "label": 2, "id": 5452}
{"input": "int main ( ) { int t ; long long int a , b , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; i = <int> ; if ( a != <int> && b != <int> ) { for ( i = <int> ; i <= a || i <= b ; i ++ ) { if ( b % i == <int> && a % i == <int> ) { break ; } } printf ( <str> , i , ( a * b ) / i ) ; } } return <int> ; }", "label": 1, "id": 5453}
{"input": "int main ( ) { int i , j , t , n , c = <int> , e = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; int d , a [ n ] ; d = n ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j + <int> ] >= a [ j ] ) { c ++ ; d = d + c ; } else { c = <int> ; } } printf ( <str> , d ) ; t -- ; } return <int> ; }", "label": 0, "id": 5454}
{"input": "void sums ( int arr [ <int> ] [ <int> ] , int n ) { int i , j ; for ( i = n ; i > <int> ; i -- ) { for ( j = n ; j > <int> ; j -- ) { arr [ i - <int> ] [ j - <int> ] += ( arr [ i ] [ j - <int> ] > arr [ i ] [ j ] ? arr [ i ] [ j - <int> ] : arr [ i ] [ j ] ) ; } } printf ( <str> , arr [ i ] [ j ] ) ; } int main ( ) { int arr [ <int> ] [ <int> ] , n , t , i , j , k , u ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } sums ( arr , n ) ; for ( k = <int> ; k < <int> ; k ++ ) { for ( u = <int> ; u < <int> ; u ++ ) arr [ k ] [ u ] = <int> ; } } return <int> ; }", "label": 1, "id": 5455}
{"input": "void input ( int [ <int> ] [ <int> ] , int ) ; int <unk> ( int [ <int> ] [ <int> ] , int ) ; int main ( ) { int t , number , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & number ) ; input ( a , number ) ; printf ( <str> , <unk> ( a , number ) ) ; t -- ; } return <int> ; } void input ( int a [ <int> ] [ <int> ] , int size ) { int i , j ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } } int <unk> ( int a [ <int> ] [ <int> ] , int size ) { int i = size - <int> ; while ( i > - <int> ) { int j = - <int> ; while ( j < i - <int> ) { if ( a [ i ] [ j + <int> ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j + <int> ] += a [ i ] [ j + <int> ] ; } else { a [ i - <int> ] [ j + <int> ] += a [ i ] [ j + <int> ] ; } j ++ ; } i -- ; } return a [ <int> ] [ <int> ] ; }", "label": 0, "id": 5456}
{"input": "void solve ( int a [ <int> ] [ <int> ] , int i , int j , int sum , int * ans , int n ) { sum = sum + a [ i ] [ j ] ; if ( i == n - <int> ) { if ( ( * ans ) <= sum ) ( * ans ) = sum ; return ; } if ( i <= n - <int> ) { solve ( a , i + <int> , j , sum , ans , n ) ; } if ( i <= n - <int> ) { solve ( a , i + <int> , j + <int> , sum , ans , n ) ; } } int main ( ) { int a [ <int> ] [ <int> ] ; int i , j , k , l , n , m , sum , ans , t , z ; scanf ( <str> , & t ) ; for ( z = <int> ; z <= t ; z ++ ) { ans = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } solve ( a , <int> , <int> , <int> , & ans , n ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 5457}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5458}
{"input": "int maxRow ; typedef struct Node { int sum ; int row ; int column ; struct Node * left ; struct Node * right ; struct Node * parent ; } node ; typedef struct BinaryTree { struct Node * root ; } binaryTree ; node * createNode ( int sum , int row , int column ) { node * x = malloc ( sizeof ( node ) ) ; x -> sum = sum ; x -> row = row ; x -> column = column ; x -> left = NULL ; x -> right = NULL ; x -> parent = NULL ; return x ; } int findMaxSum ( int * a , int row , int column , int sum ) { int nodeSum = a [ ( ( row - <int> ) * row / <int> ) + column ] + sum ; if ( row + <int> <= maxRow ) { int sumLeft = findMaxSum ( a , row + <int> , column , nodeSum ) ; int sumRight = findMaxSum ( a , row + <int> , column + <int> , nodeSum ) ; if ( sumLeft > sumRight ) return sumLeft ; else return sumRight ; } else { return nodeSum ; } } int main ( ) { int n , i , j , k , m ; scanf ( <str> , & n ) ; int output [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; maxRow = m ; int * input = malloc ( sizeof ( int ) * ( ( m * ( m + <int> ) / <int> ) + <int> ) ) ; for ( j = <int> ; j <= m * ( m + <int> ) / <int> ; j ++ ) { scanf ( <str> , & input [ j ] ) ; } output [ i ] = findMaxSum ( input , <int> , <int> , <int> ) ; free ( input ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , output [ i ] ) ; } }", "label": 2, "id": 5459}
{"input": "int <unk> ( int * a , int f , int l , int i , int n ) { if ( i >= n ) return f ; return <unk> ( a , f + ( a [ l + i ] > a [ l + i + <int> ] ? a [ l + i ] : a [ l + i + <int> ] ) , ( a [ l + i ] > a [ l + i + <int> ] ? l + i : l + i + <int> ) , i + <int> , n ) ; } int main ( ) { int t , n , s , j = - <int> , * a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; s = ( n * ( n + <int> ) ) / <int> ; a = ( int * ) malloc ( sizeof ( int * ) * s ) ; while ( j ++ < s - <int> ) { scanf ( <str> , & a [ j ] ) ; } printf ( <str> , <unk> ( a , a [ <int> ] , <int> , <int> , n ) ) ; free ( a ) ; } }", "label": 1, "id": 5460}
{"input": "int main ( ) { int n = <int> ; scanf ( <str> , & n ) ; int i = <int> , row = <int> , column = <int> , size , numRows = <int> , num = <int> , sum1 = <int> ; int parent1 = - <int> , parent2 = - <int> , sum2 = <int> , max = <int> , index = <int> , parentIndex = <int> ; int * sum = NULL ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & numRows ) ; if ( size < numRows * ( numRows + <int> ) / <int> ) { size = numRows * ( numRows + <int> ) / <int> ; sum = ( int * ) realloc ( sum , sizeof ( int ) * size ) ; } parent1 = - <int> ; parent2 = - <int> ; parentIndex = <int> ; for ( row = <int> ; row <= numRows ; row ++ ) { for ( column = <int> ; column <= row ; column ++ ) { scanf ( <str> , & num ) ; sum1 = parent1 > - <int> ? sum [ parent1 ] : <int> ; sum2 = parent2 > - <int> ? sum [ parent2 ] : <int> ; max = sum1 > sum2 ? sum1 : sum2 ; sum [ index ++ ] = max + num ; parent1 = parent2 ; if ( column == ( row - <int> ) ) { parent2 = - <int> ; } else { parent2 = parentIndex ++ ; } } } } for ( column = index - numRows ; column < index ; column ++ ) { max = max > sum [ column ] ? max : sum [ column ] ; } printf ( <str> , max ) ; return <int> ; }", "label": 3, "id": 5461}
{"input": "int main ( ) { int t , i , j , l , k , sum = <int> ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { unsigned int n ; scanf ( <str> , & n ) ; int A [ <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < n ; k ++ ) A [ j ] [ k ] = <int> ; } for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & A [ j ] [ k ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j == <int> ) A [ i ] [ j ] += A [ i - <int> ] [ j ] ; else A [ i ] [ j ] += ( A [ i - <int> ] [ j - <int> ] > A [ i - <int> ] [ j ] ? A [ i - <int> ] [ j - <int> ] : A [ i - <int> ] [ j ] ) ; if ( A [ i ] [ j ] > sum ) sum = A [ i ] [ j ] ; } } printf ( <str> , sum ) ; } }", "label": 1, "id": 5462}
{"input": "void code ( ) { int n , i , k ; k = <int> ; long long int ans = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] >= a [ i ] ) k ++ ; else { k = ( k * ( k + <int> ) ) / <int> ; ans = ans + k ; k = <int> ; } } k = ( k * ( k + <int> ) ) / <int> ; ans = ans + k ; printf ( <str> , ans ) ; return ; } int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { code ( ) ; } return <int> ; }", "label": 0, "id": 5463}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] = { <int> } , k ; long int max , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } max = <int> ; sum = <int> ; for ( j = <int> ; j <= n ; j ++ ) { k = j ; sum = a [ n ] [ j ] ; for ( i = n - <int> ; i > <int> ; i -- ) { if ( k == <int> ) { for ( k = i ; k >= <int> ; k -- ) sum += a [ k ] [ <int> ] ; break ; } if ( k == i ) { sum += a [ i ] [ k - <int> ] ; k = k - <int> ; continue ; } else { if ( a [ i ] [ k ] > a [ i ] [ k - <int> ] ) sum += a [ i ] [ k ] ; else { sum += a [ i ] [ k - <int> ] ; k = k - <int> ; } } } if ( max < sum ) max = sum ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 5464}
{"input": "int a [ <int> ] [ <int> ] , n1 ; long int max = <int> ; void sum1 ( int sum , int n ) { int i ; if ( n == ( n1 - <int> ) ) { for ( i = <int> ; i <= n ; i ++ ) { if ( max < ( sum + a [ n ] [ i ] ) ) max = sum + a [ n ] [ i ] ; } return ; } else { for ( i = <int> ; i <= n ; i ++ ) sum1 ( sum + a [ n ] [ i ] , n + <int> ) ; } } int main ( ) { int i , j , t , sum , ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 ) ; for ( i = <int> ; i < n1 ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } sum = a [ <int> ] [ <int> ] ; sum1 ( sum , <int> ) ; printf ( <str> , max - <int> ) ; } return <int> ; }", "label": 2, "id": 5465}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , t , i , p ; scanf ( <str> , & a , & b ) ; if ( a < b ) t = a ; else t = b ; p = a * b ; for ( i = t ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i , p / i ) ; break ; } } } return <int> ; }", "label": 1, "id": 5466}
{"input": "int main ( ) { long int i , n , t ; long int * a , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = ( long int * ) malloc ( n * sizeof ( long int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , a + i ) ; } s = * ( a + <int> ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( * ( a + i ) < s ) { s = * ( a + i ) ; } } printf ( <str> , s * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5467}
{"input": "int main ( void ) { int t , i , j , k , sum ; int n [ <int> ] , r , h = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum = <int> ; scanf ( <str> , & r ) ; { for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & n [ h ] ) ; sum = sum + n [ h ] ; h ++ ; } } printf ( <str> , ( sum / <int> ) ) ; } } return <int> ; }", "label": 3, "id": 5468}
{"input": "int maxSum ( int * * a , int rows ) { int i , j , k , max = <int> ; int * * <unk> ; <unk> = ( int * * ) malloc ( rows * sizeof ( int ) ) ; for ( i = <int> ; i < rows ; i ++ ) <unk> [ i ] = malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) <unk> [ i ] [ j ] = <int> ; <unk> [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) { for ( k = <int> ; k < i ; k ++ ) for ( j = <int> ; j <= <int> ; j ++ ) { if ( j + k <= i && <unk> [ i ] [ j + k ] < ( a [ i ] [ j + k ] + <unk> [ i - <int> ] [ k ] ) ) <unk> [ i ] [ j + k ] = a [ i ] [ j + k ] + <unk> [ i - <int> ] [ k ] ; } } for ( i = <int> ; i < rows ; i ++ ) max = ( max > <unk> [ rows - <int> ] [ i ] ) ? max : <unk> [ rows - <int> ] [ i ] ; for ( i = <int> ; i < rows ; i ++ ) free ( <unk> [ i ] ) ; free ( <unk> ) ; return max ; } int main ( ) { int n , i , j , k ; int * rows ; int * * * arr ; scanf ( <str> , & n ) ; arr = ( int * * * ) malloc ( n * sizeof ( int * * * ) ) ; rows = malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & rows [ i ] ) ; arr [ i ] = ( int * * ) malloc ( rows [ i ] * sizeof ( int * * ) ) ; for ( j = <int> ; j < rows [ i ] ; j ++ ) arr [ i ] [ j ] = malloc ( ( j + <int> ) * sizeof ( int * ) ) ; for ( j = <int> ; j < rows [ i ] ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ i ] [ j ] [ k ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < rows [ i ] ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) printf ( <str> , arr [ i ] [ j ] [ k ] ) ; printf ( <str> ) ; } printf ( <str> ) ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , maxSum ( arr [ i ] , rows [ i ] ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < rows [ i ] ; j ++ ) free ( arr [ i ] [ j ] ) ; free ( arr [ i ] ) ; } free ( arr ) ; free ( rows ) ; return <int> ; }", "label": 2, "id": 5469}
{"input": "int main ( ) { int A , B , lcm , gcd , i , T , min ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) min = B ; else if ( A < B ) min = A ; for ( i = <int> ; i <= min ; i ++ ) { if ( ( A % i == <int> ) && ( B % i == <int> ) ) gcd = i ; } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5470}
{"input": "void perform ( ) { unsigned int n , i ; scanf ( <str> , & n ) ; int l , a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } l = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < l ) l = a [ i ] ; } printf ( <str> , ( n - <int> ) * l ) ; } int main ( ) { int nooftestcases , i ; scanf ( <str> , & nooftestcases ) ; for ( i = <int> ; i < nooftestcases ; i ++ ) { perform ( ) ; } return <int> ; }", "label": 0, "id": 5471}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; for ( int i = <int> ; i < test ; i ++ ) { int n ; scanf ( <str> , & n ) ; int ar [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & ar [ j ] ) ; } int sum = <int> ; for ( int j = <int> ; j < n - <int> ; j ++ ) { if ( ar [ j ] > ar [ j + <int> ] ) { sum = sum + ar [ j + <int> ] ; } else if ( ar [ j ] < ar [ j + <int> ] ) { sum = sum + ar [ j ] ; } else { sum = sum + ar [ j ] ; } } printf ( <str> , sum ) ; } }", "label": 1, "id": 5472}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > - <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5473}
{"input": "void main ( ) { int t , a , b , l , i , a1 , b1 ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; a1 = a ; b1 = b ; while ( a != b ) { a > b ? a = a - b : ( b = b - a ) ; } l = ( a1 * b1 ) / a ; printf ( <str> , a , l ) ; } }", "label": 1, "id": 5474}
{"input": "int max_sum ; void calc_sum ( int * * arr , int * * sum , int i , int j , int running_sum , int size ) ; int main ( ) { int num_tests ; int n ; scanf ( <str> , & num_tests ) ; int * test_results = ( int * ) calloc ( num_tests , sizeof ( int ) ) ; int k = <int> ; while ( k != num_tests ) { int size ; scanf ( <str> , & size ) ; int * * tri_arr = ( int * * ) calloc ( size , sizeof ( int * ) ) ; int * * sum_arr = ( int * * ) calloc ( size , sizeof ( int * ) ) ; int i , j ; for ( i = <int> ; i != size ; ++ i ) { tri_arr [ i ] = ( int * ) calloc ( size , sizeof ( int ) ) ; sum_arr [ i ] = ( int * ) calloc ( size , sizeof ( int ) ) ; } int val ; int row , col ; for ( row = <int> ; row != size ; ++ row ) { for ( col = <int> ; col <= row ; ++ col ) { scanf ( <str> , & val ) ; tri_arr [ row ] [ col ] = val ; } } max_sum = <int> ; calc_sum ( tri_arr , sum_arr , <int> , <int> , <int> , size ) ; test_results [ k ] = max_sum ; for ( i = <int> ; i != size ; ++ i ) { free ( tri_arr [ i ] ) ; free ( sum_arr [ i ] ) ; } free ( tri_arr ) ; ++ k ; } for ( k = <int> ; k != num_tests ; ++ k ) { printf ( <str> , test_results [ k ] ) ; } free ( test_results ) ; return <int> ; } void calc_sum ( int * * arr , int * * sum , int i , int j , int running_sum , int size ) { if ( i == size ) return ; if ( j == size ) return ; int _sum_ = running_sum + arr [ i ] [ j ] ; if ( _sum_ > sum [ i ] [ j ] ) sum [ i ] [ j ] = _sum_ ; if ( _sum_ > max_sum ) max_sum = _sum_ ; calc_sum ( arr , sum , i + <int> , j , sum [ i ] [ j ] , size ) ; calc_sum ( arr , sum , i + <int> , j + <int> , sum [ i ] [ j ] , size ) ; }", "label": 2, "id": 5475}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int g , l , i , p , q ; scanf ( <str> , & p , & q ) ; g = gcd ( p , q ) ; l = ( p * q ) / g ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 5476}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; long long int a , b ; long long ans1 , ans2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; ans1 = gcd ( a , b ) ; ans2 = ( a * b ) / ans1 ; printf ( <str> , ans1 , ans2 ) ; } }", "label": 0, "id": 5477}
{"input": "int prob [ <int> ] [ <int> ] = { <int> } ; int maxsum [ <int> ] [ <int> ] = { <int> } ; int getmaxsum ( int x , int y ) { if ( maxsum [ x ] [ y ] ) return maxsum [ x ] [ y ] ; else { if ( x == <int> ) return <int> ; else if ( y == <int> ) maxsum [ x ] [ y ] = getmaxsum ( x - <int> , y ) + prob [ x - <int> ] [ y ] ; else maxsum [ x ] [ y ] = max ( getmaxsum ( x - <int> , y - <int> ) + prob [ x - <int> ] [ y - <int> ] , getmaxsum ( x - <int> , y ) + prob [ x - <int> ] [ y ] ) ; return maxsum [ x ] [ y ] ; } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int max , t , i , j ; int size ; int testcases ; scanf ( <str> , & testcases ) ; while ( testcases ) { scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & prob [ i ] [ j ] ) ; maxsum [ i ] [ j ] = <int> ; } } size -- ; max = getmaxsum ( size , <int> ) + prob [ size ] [ <int> ] ; for ( i = <int> ; i <= size ; i ++ ) { t = getmaxsum ( size , i ) + prob [ size ] [ i ] ; if ( t > max ) max = t ; } printf ( <str> , max ) ; testcases -- ; } return <int> ; }", "label": 2, "id": 5478}
{"input": "int numbers [ maxim ] [ maxim ] ; int lines ; int calculate ( int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j = <int> , k ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & numbers [ i ] [ k ] ) ; j ++ ; } printf ( <str> , calculate ( lines ) ) ; } return <int> ; } int calculate ( int lines ) { int i , j ; for ( i = lines - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { int sum1 = numbers [ i ] [ j ] + numbers [ i + <int> ] [ j ] ; int sum2 = numbers [ i ] [ j ] + numbers [ i + <int> ] [ j + <int> ] ; if ( sum1 > sum2 ) numbers [ i ] [ j ] = sum1 ; else numbers [ i ] [ j ] = sum2 ; } return numbers [ <int> ] [ <int> ] ; }", "label": 1, "id": 5479}
{"input": "void main ( ) { int t , n , i , j ; int arr [ <int> ] [ <int> ] , maxs [ <int> ] [ <int> ] = { <int> } , max = <int> ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } maxs [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { maxs [ i ] [ <int> ] = arr [ i ] [ j ] + maxs [ i - <int> ] [ <int> ] ; } else if ( j == i ) { maxs [ i ] [ j ] = arr [ i ] [ j ] + maxs [ i - <int> ] [ j - <int> ] ; } else { if ( maxs [ i - <int> ] [ j - <int> ] >= maxs [ i - <int> ] [ j ] ) { maxs [ i ] [ j ] = arr [ i ] [ j ] + maxs [ i - <int> ] [ j - <int> ] ; } else { maxs [ i ] [ j ] = arr [ i ] [ j ] + maxs [ i - <int> ] [ j ] ; } } } } max = maxs [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( maxs [ n - <int> ] [ j ] > max ) max = maxs [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; t -- ; } system ( <str> ) ; }", "label": 0, "id": 5480}
{"input": "int main ( ) { int t , b , i = <int> ; float g , h , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & b ) ; if ( b > <int> ) { h = <int> ; d = <fp> * b ; } else { h = <fp> * b ; d = <fp> * b ; } g = ( float ) b + h + d ; printf ( <str> , g ) ; } return <int> ; }", "label": 1, "id": 5481}
{"input": "int gcd ( long int a , long int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { long int a , b , t , val , val1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; val = gcd ( a , b ) ; val1 = lcm ( a , b ) ; printf ( <str> , val , val1 ) ; } return <int> ; }", "label": 1, "id": 5482}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int r , i , j ; scanf ( <str> , & r ) ; int a [ r ] [ r ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = r - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i - <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5483}
{"input": "int main ( ) { int s , i , j , n , b ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( b = <int> ; b < n ; b ++ ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = s - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5484}
{"input": "int main ( ) { int t , a , b , temp , lcm , gcd , x , y ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return ( <int> ) ; }", "label": 1, "id": 5485}
{"input": "int main ( ) { long long int t , n , i , j , sum = <int> , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; sum = a [ <int> ] [ <int> ] ; j = <int> ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) a [ i - <int> ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5486}
{"input": "int main ( int argc , char * argv [ ] ) { int t , i , j , n , max , temp ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } i = n - <int> ; while ( i > <int> ) { if ( a [ i ] > a [ i - <int> ] ) { max = max + a [ i - <int> ] ; a [ i ] = - <int> ; i -- ; } else if ( a [ i ] < a [ i - <int> ] ) { max = max + a [ i ] ; temp = a [ i ] ; a [ i ] = a [ i - <int> ] ; a [ i - <int> ] = temp ; i -- ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 5487}
{"input": "int main ( ) { long int i , j , t , a , b , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) x = i ; } printf ( <str> , x ) ; long int y = <int> ; if ( a % <int> == <int> && b % <int> == <int> ) { while ( a != <int> && b != <int> ) { a = a / <int> ; b = b / <int> ; y = y * <int> ; } } for ( i = <int> ; i <= a && i <= b ; i = i + <int> ) { if ( a % i == <int> && b % i == <int> ) { while ( a != <int> && b != <int> ) { a = a / i ; b = b / i ; y = y * i ; } } } if ( a >= <int> ) y = y * a ; if ( b >= <int> ) y = y * b ; printf ( <str> , y ) ; } return <int> ; }", "label": 2, "id": 5488}
{"input": "int main ( ) { int n , a , b , i = <int> , j , hcf , lcm ; scanf ( <str> , & n ) ; while ( ++ i <= n ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a ; j ++ ) if ( a % j == <int> && b % j == <int> ) hcf = j ; lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 5489}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , k , l , m , n , o , p ; scanf ( <str> , & o ) ; while ( o != <int> ) { o -- ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5490}
{"input": "int maxx ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , n , i , j , tt , max = INT_MIN ; scanf ( <str> , & t ) ; if ( t > <int> || t < <int> ) return - <int> ; tt = t ; while ( t -- ) { max = INT_MIN ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] , brr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j <= i ) scanf ( <str> , & arr [ i ] [ j ] ) ; else arr [ i ] [ j ] = <int> ; } } brr [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) brr [ <int> ] [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) brr [ i ] [ <int> ] = brr [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { brr [ i ] [ j ] = maxx ( brr [ i - <int> ] [ j ] , brr [ i - <int> ] [ j - <int> ] ) + arr [ i ] [ j ] ; if ( brr [ i ] [ j ] > max ) max = brr [ i ] [ j ] ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( brr [ i ] [ j ] > max ) max = brr [ i ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5491}
{"input": "int main ( ) { int t , i , j , n , a [ <int> ] [ <int> ] , v [ <int> ] [ <int> ] , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; v [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) v [ i ] [ <int> ] = v [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == i ) v [ i ] [ j ] = a [ i ] [ j ] ; else { if ( v [ i - <int> ] [ j ] > v [ i - <int> ] [ j - <int> ] ) v [ i ] [ j ] = v [ i - <int> ] [ j ] + a [ i ] [ j ] ; else v [ i ] [ j ] = v [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } } for ( i = <int> ; i < n ; i ++ ) { if ( v [ n - <int> ] [ i ] > max ) max = v [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 5492}
{"input": "int main ( ) { int i , j , n , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - <int> ] ? a [ i ] [ j ] : a [ i ] [ j - <int> ] ; a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + max ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5493}
{"input": "int getgcd ( int x , int y ) { if ( x % y == <int> ) return y ; else return getgcd ( y , x % y ) ; } int main ( ) { long int t , x , y , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; gcd = getgcd ( x , y ) ; printf ( <str> , gcd , ( x * y ) / gcd ) ; } return <int> ; }", "label": 0, "id": 5494}
{"input": "main ( ) { int n , i , j , k = <int> , x , s = <int> , max = - <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( k < n ) { scanf ( <str> , & x ) ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j < x ; j ++ ) a [ i ] [ j ] = <int> ; } for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( j = <int> ; j < x ; j ++ ) { s = <int> ; for ( i = <int> ; i < x ; i ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) s = s + a [ i ] [ j + <int> ] ; else { s = s + a [ i ] [ j ] ; } } if ( s > max ) max = s ; } printf ( <str> , max ) ; k ++ ; } return <int> ; }", "label": 1, "id": 5495}
{"input": "int main ( ) { int t , i , j , r , array [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & array [ i ] [ j ] ) ; if ( r == <int> ) printf ( <str> , array [ <int> ] [ <int> ] ) ; else if ( r == <int> ) printf ( <str> , ( array [ <int> ] [ <int> ] > array [ <int> ] [ <int> ] ) ? ( array [ <int> ] [ <int> ] + array [ <int> ] [ <int> ] ) : ( array [ <int> ] [ <int> ] + array [ <int> ] [ <int> ] ) ) ; else { for ( i = r - <int> ; i > <int> ; -- i ) for ( j = i ; j >= <int> ; -- j ) array [ i ] [ j ] += ( ( array [ i + <int> ] [ j ] > array [ i + <int> ] [ j + <int> ] ) ? array [ i + <int> ] [ j ] : array [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , ( array [ <int> ] [ <int> ] > array [ <int> ] [ <int> ] ) ? ( array [ <int> ] [ <int> ] + array [ <int> ] [ <int> ] ) : ( array [ <int> ] [ <int> ] + array [ <int> ] [ <int> ] ) ) ; } } return <int> ; }", "label": 0, "id": 5496}
{"input": "int max_sum ( int * , int , int , int ) ; int max ( int , int ) ; int main ( ) { int tests , i , lines , j = <int> ; scanf ( <str> , & tests ) ; int * output = ( int * ) malloc ( sizeof ( int ) * tests ) ; for ( i = <int> ; i < tests ; i ++ ) { scanf ( <str> , & lines ) ; int size = ( lines * ( lines + <int> ) ) / <int> ; int * nos = ( int * ) malloc ( sizeof ( int ) * size ) ; while ( j < size ) scanf ( <str> , & nos [ j ++ ] ) ; j = <int> ; output [ i ] = max_sum ( nos , lines , <int> , <int> ) ; free ( nos ) ; } for ( i = <int> ; i < tests ; i ++ ) printf ( <str> , output [ i ] ) ; free ( output ) ; return <int> ; } int max_sum ( int * nos , int lines , int line_no , int index ) { if ( line_no == lines ) return <int> ; if ( index > line_no ) return <int> ; return nos [ ( line_no * ( line_no + <int> ) ) / <int> + index ] + max ( max_sum ( nos , lines , line_no + <int> , index ) , max_sum ( nos , lines , line_no + <int> , index + <int> ) ) ; } int max ( int a , int b ) { return a > b ? a : b ; }", "label": 2, "id": 5497}
{"input": "int main ( ) { int t ; int r , k , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; if ( y > x ) { r = x ; x = y ; y = r ; } r = x * y ; while ( y ) { k = x % y ; x = y ; y = k ; } printf ( <str> , x , r / x ) ; } return <int> ; }", "label": 1, "id": 5498}
{"input": "int findsmallest ( int num [ ] , int size ) ; int main ( ) { int test ; scanf ( <str> , & test ) ; int ans [ test ] ; int i ; int size [ test ] ; for ( i = <int> ; i < test ; ++ i ) { int j ; scanf ( <str> , & size [ i ] ) ; int arr [ size [ i ] ] ; for ( j = <int> ; j < size [ i ] ; ++ j ) { scanf ( <str> , & arr [ j ] ) ; } ans [ i ] = ( size [ i ] - <int> ) * findsmallest ( arr , size [ i ] ) ; } for ( i = <int> ; i < test ; ++ i ) { printf ( <str> , ans [ i ] ) ; } return <int> ; } int findsmallest ( int num [ ] , int size ) { int i ; int smallest = num [ <int> ] ; for ( i = <int> ; i < size ; ++ i ) { if ( smallest > num [ i ] ) smallest = num [ i ] ; } return smallest ; }", "label": 0, "id": 5499}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int i , j , k , n ; for ( k = <int> ; k < T ; k ++ ) { scanf ( <str> , & n ) ; int tri [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & tri [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( tri [ i + <int> ] [ j ] > tri [ i + <int> ] [ j + <int> ] ) tri [ i ] [ j ] += tri [ i + <int> ] [ j ] ; else tri [ i ] [ j ] += tri [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , tri [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5500}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n , i ; scanf ( <str> , & n ) ; long long int a [ n ] , min ; scanf ( <str> , & a [ <int> ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 5501}
{"input": "int main ( ) { int n , a , b , i , lcm , ca , cb , rem ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; ca = a ; cb = b ; while ( a != <int> && b != <int> ) { rem = b % a ; b = a ; a = rem ; lcm = ( ca * cb ) / a ; } printf ( <str> , a , lcm ) ; } return ( <int> ) ; }", "label": 3, "id": 5502}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , n , m , gcd ; int big = <int> , small = <int> ; long lcm ; scanf ( <str> , & a , & b ) ; n = a , m = b ; while ( n != m ) { if ( n > m ) n -= m ; else m -= n ; } gcd = n ; printf ( <str> , gcd ) ; lcm = ( a * b ) / gcd ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 5503}
{"input": "int sumt ( int [ <int> ] [ <int> ] , int ) ; int main ( ) { int a [ <int> ] [ <int> ] ; int t , n , j , k ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } printf ( <str> , sumt ( a , n ) ) ; } } int sumt ( int a [ ] [ <int> ] , int n ) { int i , j ; int q = <int> , b = <int> , x [ <int> ] [ <int> ] , y [ <int> ] [ <int> ] ; if ( n == <int> ) { if ( a [ <int> ] [ <int> ] > a [ <int> ] [ <int> ] ) return a [ <int> ] [ <int> ] ; else return a [ <int> ] [ <int> ] ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { x [ i - <int> ] [ j ] = a [ i ] [ j ] ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { y [ i - <int> ] [ j - <int> ] = a [ i ] [ j ] ; } } q = q + a [ <int> ] [ <int> ] + sumt ( x , n - <int> ) ; b = b + a [ <int> ] [ <int> ] + sumt ( y , n - <int> ) ; if ( q > b ) return q ; else return b ; }", "label": 2, "id": 5504}
{"input": "int main ( ) { int n , l , i , j , k , sum = <int> , maxsum = <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } k = l - <int> ; j = l - <int> ; while ( k >= <int> ) { i = l - <int> ; while ( i >= <int> ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) { sum = sum + a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; j -- ; } else { sum = sum + a [ i ] [ j ] + a [ i + <int> ] [ j ] ; j -- ; } i -- ; } if ( maxsum < sum ) { maxsum = sum ; } j = k -- ; k -- ; } printf ( <str> , maxsum ) ; n -- ; } return <int> ; }", "label": 1, "id": 5505}
{"input": "int main ( ) { int a , b , c , i ; scanf ( <str> , & a ) ; for ( b = <int> ; b < a ; b ++ ) { scanf ( <str> , & c ) ; int n [ c ] , sum = <int> ; for ( i = <int> ; i < c ; i ++ ) scanf ( <str> , & n [ i ] ) ; for ( i = <int> ; i < c - <int> ; i ++ ) { if ( n [ i ] > n [ i + <int> ] ) { sum = sum + n [ i + <int> ] ; } else { sum = sum + n [ i ] ; n [ i + <int> ] = n [ i ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5506}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; int a [ n ] , m ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } m = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( m > a [ i ] ) { m = a [ i ] ; } } printf ( <str> , m * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5507}
{"input": "int main ( ) { int a , i , b , t , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { m = b ; } else { m = a ; } for ( i = m ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i ) ; break ; } } printf ( <str> , ( a * b ) / i ) ; } }", "label": 1, "id": 5508}
{"input": "int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int no , n , ans , tm [ <int> ] [ <int> ] = { <int> } , i , j ; scanf ( <str> , & no ) ; no ++ ; while ( no -- ) { ans = - <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tm [ i ] [ j ] ) ; if ( j != <int> && i != <int> ) tm [ i ] [ j ] = tm [ i ] [ j ] + max ( tm [ i - <int> ] [ j ] , tm [ i - <int> ] [ j - <int> ] ) ; if ( j == <int> && i != <int> ) tm [ i ] [ j ] = tm [ i ] [ j ] + tm [ i - <int> ] [ j ] ; if ( i == n - <int> ) { if ( tm [ i ] [ j ] > ans ) ans = tm [ i ] [ j ] ; } } } printf ( <str> , ans ) ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) tm [ i ] [ j ] = <int> ; } } return <int> ; }", "label": 1, "id": 5509}
{"input": "int main ( ) { int T , N , i , temp , cost ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; int A [ N ] ; int min = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < min ) { min = temp ; } } cost = ( N - <int> ) * min ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 5510}
{"input": "static char IBUF [ MAXBUFFER ] ; static char <unk> [ <int> ] ; int main ( ) { int t = <int> , n , ar [ <int> ] [ <int> ] , x , i , j ; unsigned int bi = <int> , <unk> = <int> ; fgets ( IBUF , MAXBUFFER , stdin ) ; while ( IBUF [ bi ] != <char> && IBUF [ bi ] != <char> ) { t *= <int> ; t += ( IBUF [ bi ] - <char> ) ; ++ bi ; } for ( x = <int> ; x < t ; ++ x ) { n = <int> ; bi = <int> ; fgets ( IBUF , MAXBUFFER , stdin ) ; while ( IBUF [ bi ] != <char> && IBUF [ bi ] != <char> ) { n *= <int> ; n += IBUF [ bi ] - <char> ; ++ bi ; } for ( i = <int> ; i < n ; ++ i ) { fgets ( IBUF , MAXBUFFER , stdin ) ; bi = <int> ; for ( j = <int> ; j <= i ; ++ j ) { ar [ i ] [ j ] = <int> ; while ( IBUF [ bi ] != <char> && IBUF [ bi ] != <char> && IBUF [ bi ] != <char> ) { ar [ i ] [ j ] *= <int> ; ar [ i ] [ j ] += ( IBUF [ bi ] - <char> ) ; bi ++ ; } ++ bi ; } } for ( i = n - <int> ; i >= <int> && n > <int> ; -- i ) { for ( j = <int> ; j <= i ; ++ j ) { ar [ i ] [ j ] += ( ( ar [ i + <int> ] [ j ] > ar [ i + <int> ] [ j + <int> ] ) ? ar [ i + <int> ] [ j ] : ar [ i + <int> ] [ j + <int> ] ) ; } } if ( ar [ <int> ] [ <int> ] < <int> ) { if ( ar [ <int> ] [ <int> ] < <int> ) { if ( ar [ <int> ] [ <int> ] < <int> ) { if ( ar [ <int> ] [ <int> ] < <int> ) { <unk> = <int> ; } else <unk> = <int> ; } else <unk> = <int> ; } else <unk> = <int> ; } else <unk> = <int> ; bi = <unk> ; <unk> [ <unk> -- ] = <char> ; while ( <unk> >= <int> && ar [ <int> ] [ <int> ] != <int> ) { if ( ar [ <int> ] [ <int> ] != <int> ) { <unk> [ <unk> ] = ( ar [ <int> ] [ <int> ] + <char> ) ; ar [ <int> ] [ <int> ] /= <int> ; } else { <unk> [ <unk> ] = <char> ; } <unk> -- ; } fwrite ( <unk> , sizeof ( char ) , bi + <int> , stdout ) ; } }", "label": 1, "id": 5511}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a ; int cnt [ <int> ] = { <int> } ; int min = INT_MAX ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; cnt [ a ] ++ ; if ( min > a ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 5512}
{"input": "int main ( void ) { int arr [ <int> ] , n , c , i , j ; scanf ( <str> , & n ) ; c = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; arr [ j ] <= arr [ j + <int> ] ; j ++ ) c ++ ; } printf ( <str> , c ) ; return <int> ; }", "label": 1, "id": 5513}
{"input": "int main ( ) { int array [ <int> ] , finalArray [ <int> ] ; int i = <int> , j = <int> , k = <int> ; int noOfTestCases = <int> , totalNoOfElements = <int> , noOfLines = <int> ; scanf ( <str> , & noOfTestCases ) ; for ( k = <int> ; k < noOfTestCases ; k ++ ) { scanf ( <str> , & noOfLines ) ; totalNoOfElements = ( noOfLines * ( noOfLines + <int> ) ) / <int> ; printf ( <str> , totalNoOfElements ) ; for ( i = <int> ; i < totalNoOfElements ; i ++ ) { scanf ( <str> , & array [ i ] ) ; } for ( ; noOfLines > <int> ; -- noOfLines ) { for ( i = ( ( totalNoOfElements - noOfLines ) - ( noOfLines - <int> ) ) , j = <int> ; j < noOfLines ; i ++ , j ++ ) { if ( array [ i + noOfLines - <int> ] > array [ i + noOfLines ] ) { array [ i ] = array [ i ] + array [ i + noOfLines - <int> ] ; } else { array [ i ] = array [ i ] + array [ i + noOfLines ] ; } } totalNoOfElements = totalNoOfElements - noOfLines ; } finalArray [ k ] = array [ <int> ] ; } for ( k = <int> ; k < noOfTestCases ; k ++ ) { printf ( <str> , finalArray [ k ] ) ; } return <int> ; }", "label": 1, "id": 5514}
{"input": "int main ( ) { int T , n , x , y ; scanf ( <str> , & T ) ; int a [ T - <int> ] , b [ T - <int> ] , g [ T - <int> ] , l [ T - <int> ] ; for ( n = <int> ; n <= T - <int> ; n ++ ) { scanf ( <str> , & a [ n ] , & b [ n ] ) ; } for ( n = <int> ; n <= T - <int> ; n ++ ) { x = ( a [ n ] > b [ n ] ) ? a [ n ] : b [ n ] ; y = ( a [ n ] < b [ n ] ) ? a [ n ] : b [ n ] ; q : if ( a [ n ] % y == <int> && b [ n ] % y == <int> ) g [ n ] = y ; else { y -- ; goto q ; } p : if ( x % a [ n ] == <int> && x % b [ n ] == <int> ) l [ n ] = x ; else { x ++ ; goto p ; } } printf ( <str> ) ; for ( n = <int> ; n <= T - <int> ; n ++ ) printf ( <str> , g [ n ] , l [ n ] ) ; }", "label": 2, "id": 5515}
{"input": "int main ( ) { int i , a , b , gcd = <int> , lcm ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = gcd * i ; } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; return <int> ; }", "label": 1, "id": 5516}
{"input": "int main ( ) { int t , l , a [ <int> ] , b [ <int> ] , sum , n , i ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; a [ n ] = <int> ; b [ <int> ] = <int> ; sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] <= a [ i + <int> ] ) { b [ i + <int> ] = b [ i ] + <int> ; } else { b [ i + <int> ] = <int> ; } sum = sum + b [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5517}
{"input": "int main ( void ) { int t , a [ <int> ] , n , min , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i = <int> ) min = a [ i ] ; else if ( a [ i ] < min ) min = a [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 2, "id": 5518}
{"input": "int gcd ( int a , int b ) ; int lcm ( int a , int b ) ; int main ( ) { int t ; long long int a , b ; long long int g ; scanf ( <str> , & t ) ; if ( t > <int> || t < <int> ) return <int> ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < <int> || b < <int> || a > <int> || b > <int> ) return <int> ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b % a == <int> ) return a ; else return gcd ( b % a , a ) ; return <int> ; }", "label": 0, "id": 5519}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm , j , n , f , a ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { f = <int> ; scanf ( <str> , & n1 , & n2 ) ; a = ( n1 < n2 ) ? n1 : n2 ; for ( j = <int> ; j <= a / <int> ; j ++ ) { if ( n1 % j == <int> && n2 % j == <int> ) { gcd = j ; f = <int> ; break ; } } if ( f = <int> ) gcd = <int> ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5520}
{"input": "int hcf ( int a , int b ) { if ( a > b ) { int t ; t = a ; a = b ; b = t ; } if ( b % a == <int> ) return a ; else return hcf ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int A , B , l ; scanf ( <str> , & A , & B ) ; l = hcf ( A , B ) ; printf ( <str> , l , ( A * B ) / l ) ; } }", "label": 1, "id": 5521}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5522}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; else if ( a == <int> ) return b ; else if ( b == <int> ) return a ; else if ( a > b ) return gcd ( b , a % b ) ; else return gcd ( a , b % a ) ; } int main ( ) { long long int a , b ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long long int g = gcd ( a , b ) ; long long int lcm = ( a * b ) / g ; printf ( <str> , g , lcm ) ; } return <int> ; }", "label": 0, "id": 5523}
{"input": "int main ( ) { long n , i , h , l ; scanf ( <str> , & n ) ; int a [ <int> ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ <int> ] [ i ] , & a [ <int> ] [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( h = a [ <int> ] [ i ] < a [ <int> ] [ i ] ? a [ <int> ] [ i ] : a [ <int> ] [ i ] ; h >= <int> ; h -- ) { if ( a [ <int> ] [ i ] % h == <int> && a [ <int> ] [ i ] % h == <int> ) break ; } printf ( <str> , h ) ; for ( l = a [ <int> ] [ i ] > a [ <int> ] [ i ] ? a [ <int> ] [ i ] : a [ <int> ] [ i ] ; l <= a [ <int> ] [ i ] * a [ <int> ] [ i ] ; l += ( a [ <int> ] [ i ] > a [ <int> ] [ i ] ? a [ <int> ] [ i ] : a [ <int> ] [ i ] ) ) if ( l % a [ <int> ] [ i ] == <int> && l % a [ <int> ] [ i ] == <int> ) break ; printf ( <str> , l ) ; } return <int> ; }", "label": 2, "id": 5524}
{"input": "int main ( void ) { int T = <int> , i = <int> ; int a = <int> , b = <int> , n = <int> , count = <int> ; long int ans = <int> ; scanf ( <str> , & T ) ; while ( T -- ) { count = <int> ; a = <int> ; b = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { if ( i == <int> ) { scanf ( <str> , & a ) ; count = <int> ; ans += count ; } else { scanf ( <str> , & b ) ; if ( a <= b ) { count ++ ; } else { count = <int> ; } ans += count ; a = b ; } } printf ( <str> , ans ) ; ans = <int> ; } }", "label": 1, "id": 5525}
{"input": "int main ( ) { int a , b , i , c , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = a ; a = b ; b = c ; } for ( i = a ; i >= <int> ; i -- ) { if ( b % i == <int> && a % i == <int> ) { printf ( <str> , i ) ; break ; } } j = b ; while ( j ) { if ( j % a == <int> && j % b == <int> ) { printf ( <str> , j ) ; break ; } j ++ ; } } }", "label": 2, "id": 5526}
{"input": "int max ( int , int ) ; int solve ( int ) ; int mat [ <int> ] [ <int> ] ; int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int rows ; scanf ( <str> , & rows ) ; for ( int k = <int> ; k < rows ; k ++ ) { for ( int col = <int> ; col < k + <int> ; k ++ ) { scanf ( <str> , & mat [ k ] [ col ] ) ; } } printf ( <str> , solve ( rows ) ) ; } return <int> ; } int solve ( int x ) { int k , l ; if ( x == <int> ) { return mat [ <int> ] [ <int> ] ; } for ( int i = x - <int> ; i >= <int> ; i -- ) { for ( int j = <int> ; j <= i ; j ++ ) { mat [ i ] [ j ] = max ( mat [ i + <int> ] [ j ] , mat [ i + <int> ] [ j + <int> ] ) ; } } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 3, "id": 5527}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; gcd ( b , a % b ) ; } int main ( void ) { int a , b , t , ans , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; ans = gcd ( a , b ) ; lcm = a * b / ans ; printf ( <str> , ans , lcm ) ; } return <int> ; }", "label": 1, "id": 5528}
{"input": "int main ( void ) { int limit ; int <unk> ; int i , j , index ; int maxSum , <unk> , <unk> ; int <unk> ; int input ; int sum [ MAX ] ; scanf ( <str> , & limit ) ; for ( index = <int> ; index < limit ; index ++ ) { scanf ( <str> , & <unk> ) ; maxSum = <unk> = <unk> = <unk> = <int> ; for ( i = <int> ; i < <unk> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & input ) ; if ( j == <unk> ) { <unk> = maxSum + input ; } else if ( j == <unk> + <int> ) { <unk> = maxSum + input ; } } if ( <unk> > <unk> ) { <unk> += <int> ; maxSum = <unk> ; } else { maxSum = <unk> ; } } sum [ index ] = maxSum ; } for ( index = <int> ; index < limit ; index ++ ) { printf ( <str> , sum [ index ] ) ; } return <int> ; }", "label": 1, "id": 5529}
{"input": "int main ( ) { int a , i , b , min , j ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b ) ; int c [ b ] ; scanf ( <str> , & c [ <int> ] ) ; min = c [ <int> ] ; for ( j = <int> ; j < b ; j ++ ) { scanf ( <str> , & c [ j ] ) ; if ( c [ j ] < min ) min = c [ j ] ; } printf ( <str> , min * ( b - <int> ) ) ; } }", "label": 1, "id": 5530}
{"input": "int main ( ) { int T , i , j ; long int A , B , LCM , temp ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; LCM = A * B ; while ( B > <int> ) { if ( A < B ) { temp = A ; A = B ; B = temp ; } temp = A % B ; A = B ; B = temp ; } printf ( <str> , B , LCM / B ) ; } return <int> ; }", "label": 3, "id": 5531}
{"input": "main ( ) { int gcd , t , a , b , i , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = a * b / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 5532}
{"input": "int main ( ) { long int swap , n , i , j ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n - i - <int> ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) { swap = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = swap ; } } } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , a [ i ] ) ; } return <int> ; }", "label": 1, "id": 5533}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; int rem = b % a ; while ( rem != <int> ) { b = a ; a = rem ; rem = b % a ; } gcd = a ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5534}
{"input": "typedef unsigned uint ; int main ( ) { uint t = <int> , lines = <int> , entry = <int> , max = <int> ; uint i = <int> , j = <int> ; uint * arr = NULL , * tmp = NULL , * tmp2 = NULL ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & lines ) ; arr = ( uint * ) calloc ( lines + <int> , sizeof ( uint ) ) ; max = <int> ; for ( i = <int> ; i <= lines ; i ++ ) { tmp = arr + lines - i ; tmp2 = arr + lines - i + <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & entry ) ; if ( j == <int> ) { * tmp = * tmp2 + entry ; } else { if ( * tmp2 > * ( tmp2 + <int> ) ) { * tmp = * tmp2 + entry ; } else { * tmp = * ( tmp2 + <int> ) + entry ; } tmp2 ++ ; } if ( i == lines && max < * tmp ) { max = * tmp ; } tmp ++ ; } } printf ( <str> , max ) ; free ( arr ) ; } return <int> ; }", "label": 0, "id": 5535}
{"input": "int main ( ) { int i , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5536}
{"input": "void main ( ) { int n , arr , i , j ; int test ; int cost = <int> ; scanf ( <str> , & test ) ; for ( j = <int> ; j <= test ; j ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr ) ; if ( cost > arr ) { cost = arr ; } } printf ( <str> , cost * ( n - <int> ) ) ; cost = <int> ; } }", "label": 1, "id": 5537}
{"input": "int GCD ( int a , int b ) ; main ( ) { int a , b , t , i , k ; long int x ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; k = GCD ( a , b ) ; x = ( long ) a * b / GCD ( a , b ) ; printf ( <str> , GCD ( a , b ) , x ) ; } } int GCD ( int a , int b ) { if ( b == <int> ) return a ; return GCD ( b % a , b ) ; }", "label": 3, "id": 5538}
{"input": "int GCD ( int n1 , int n2 ) { while ( n1 != n2 ) { if ( n1 == <int> || n2 == <int> ) return <int> ; if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } return n1 ; } int main ( ) { int gcd , lcm , t , n1 , n2 ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n1 ) ; scanf ( <str> , & n2 ) ; gcd = GCD ( n1 , n2 ) ; lcm = n1 * n2 / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 5539}
{"input": "int main ( ) { int T , A , B , i , j , gcd ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; for ( j = <int> ; j <= A ; j ++ ) if ( A % j == <int> && B % j == <int> ) gcd = j ; printf ( <str> , gcd , ( A * B ) / gcd ) ; } } return <int> ; }", "label": 2, "id": 5540}
{"input": "int sum ( int ) ; int sum ( int n ) { if ( n == <int> ) return <int> ; else if ( n == <int> ) return <int> ; else return ( n + sum ( n - <int> ) ) ; } int main ( ) { int t , * brr , n , i , tt , sum1 = <int> , j = <int> , k = <int> , sum2 , * arr ; scanf ( <str> , & t ) ; tt = t ; brr = malloc ( sizeof ( int ) * t ) ; while ( t -- ) { sum1 = <int> , sum2 = <int> , k = <int> ; scanf ( <str> , & n ) ; if ( n > <int> ) return <int> ; arr = malloc ( sizeof ( int ) * sum ( n ) ) ; for ( i = <int> ; i < sum ( n ) ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } while ( k < n ) { sum1 = sum1 + arr [ sum ( k ++ ) ] ; } sum2 = sum1 - arr [ sum ( n - <int> ) ] + arr [ ( sum ( n - <int> ) + <int> ) ] ; if ( sum2 > sum1 ) brr [ j ++ ] = sum2 ; else brr [ j ++ ] = sum1 ; } for ( i = <int> ; i < tt ; i ++ ) printf ( <str> , brr [ i ] ) ; return <int> ; }", "label": 2, "id": 5541}
{"input": "int main ( ) { int t , d ; long int a , b , p , q , gcd , lcm ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a , & b ) ; p = a ; q = b ; while ( q != <int> ) { d = q ; q = p % q ; p = d ; } gcd = p ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 0, "id": 5542}
{"input": "int main ( ) { int i , j , k , t , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5543}
{"input": "int main ( ) { int f , n , i , j , k , p , big , q = <int> ; int A [ <int> ] [ <int> ] ; int sum ; scanf ( <str> , & f ) ; while ( q < f ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; for ( j = i + <int> ; j <= n ; j ++ ) A [ i ] [ j ] = <int> ; } big = A [ n ] [ <int> ] ; for ( k = <int> ; k <= n ; k ++ ) { if ( big < A [ n ] [ k ] ) { big = A [ n ] [ k ] ; p = k ; } } sum = big ; while ( n > <int> ) { if ( p > <int> ) { if ( A [ n - <int> ] [ p - <int> ] >= A [ n - <int> ] [ p ] ) { sum = sum + A [ n - <int> ] [ p - <int> ] ; p -- ; } else sum = sum + A [ n - <int> ] [ p ] ; } else sum = sum + A [ n - <int> ] [ p ] ; n -- ; } q ++ ; printf ( <str> , sum ) ; } }", "label": 3, "id": 5544}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return a ; if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , lcm ; scanf ( <str> , & a , & b ) ; int k = gcd ( a , b ) ; printf ( <str> , k ) ; lcm = ( a > b ) ? a : b ; while ( <int> ) { if ( lcm % a == <int> && lcm % b == <int> ) { printf ( <str> , lcm ) ; break ; } ++ lcm ; } } return <int> ; }", "label": 2, "id": 5545}
{"input": "int main ( ) { long long int t , i , j ; scanf ( <str> , & t ) ; while ( t > <int> ) { long long int x , y , z , l = <int> , p = <int> ; scanf ( <str> , & x ) ; long long int a [ <int> ] ; for ( i = <int> ; i < x ; i ++ ) { scanf ( <str> , & a [ i ] ) ; p ++ ; if ( i > <int> ) { if ( a [ i ] > a [ i - <int> ] ) { l ++ ; } if ( a [ i ] < a [ i - <int> ] ) { p += ( ( l ) * ( l + <int> ) ) / <int> ; l = <int> ; } } } p += ( ( l ) * ( l + <int> ) ) / <int> ; printf ( <str> , p ) ; t -- ; } }", "label": 0, "id": 5546}
{"input": "main ( ) { int a ; int i , j , n ; int tem ; int sum ; scanf ( <str> , & a ) ; int num = a ; int r [ a ] ; while ( a -- ) { int b [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } if ( n != <int> ) { sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { j = <int> ; while ( j != i ) { if ( b [ i ] [ j + <int> ] > b [ i ] [ j ] ) tem = b [ i ] [ j + <int> ] ; else tem = b [ i ] [ j ] ; j ++ ; } sum = sum + tem ; } sum = sum + b [ <int> ] [ <int> ] ; } else sum = b [ <int> ] [ <int> ] ; r [ a ] = sum ; } for ( i = num ; i > <int> ; i -- ) { printf ( <str> , r [ i ] ) ; printf ( <str> ) ; } }", "label": 1, "id": 5547}
{"input": "int a [ <int> ] [ <int> ] , mark [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] , row ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int calc ( int i , int j ) { if ( mark [ i ] [ j ] != - <int> ) { return sum [ i ] [ j ] ; } else if ( i + <int> >= row ) { sum [ i ] [ j ] = a [ i ] [ j ] ; mark [ i ] [ j ] = <int> ; return sum [ i ] [ j ] ; } else { sum [ i ] [ j ] = a [ i ] [ j ] + max ( calc ( i + <int> , j ) , calc ( i + <int> , j + <int> ) ) ; mark [ i ] [ j ] = <int> ; return sum [ i ] [ j ] ; } } int main ( ) { int cases , ans [ <int> ] ; int i , j , k ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { scanf ( <str> , & row ) ; for ( j = <int> ; j < row ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = <int> ; j < row ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { mark [ j ] [ k ] = - <int> ; } } ans [ i ] = calc ( <int> , <int> ) ; } for ( i = <int> ; i < cases ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return <int> ; }", "label": 0, "id": 5548}
{"input": "int main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { int k , gcd ; long a , b , lcm ; scanf ( <str> , & a , & b ) ; for ( k = <int> ; k <= a && k <= b ; ++ k ) { if ( a % k == <int> && b % k == <int> ) gcd = k ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 5549}
{"input": "int main ( ) { int t , n , sum , a , b , temp , i ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } sum += a ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5550}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int i , j , h ; int sum ; int n ; scanf ( <str> , & n ) ; while ( n -- ) { sum = <int> ; scanf ( <str> , & h ) ; for ( i = <int> ; i < h ; i ++ ) for ( j = <int> ; j < h ; j ++ ) if ( j <= i ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , <unk> ( <int> , <int> , h ) ) ; } return <int> ; } int <unk> ( int x , int y , int h ) { if ( y == h - <int> ) return a [ x ] [ y ] ; else { if ( <unk> ( x + <int> , y + <int> , h ) > <unk> ( x , y + <int> , h ) ) return a [ x ] [ y ] + <unk> ( x + <int> , y + <int> , h ) ; else return a [ x ] [ y ] + <unk> ( x , y + <int> , h ) ; } }", "label": 2, "id": 5551}
{"input": "int main ( ) { int n , i , j , max , t1 , t2 , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } max = arr [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ n - <int> ] [ i ] > max ) { max = arr [ n - <int> ] [ i ] ; j = i ; } } i = n - <int> ; while ( i > <int> ) { if ( j != <int> && i != j ) { t1 = max + arr [ i - <int> ] [ j ] ; t2 = max + arr [ i - <int> ] [ j - <int> ] ; if ( t1 > t2 ) { j = j ; i = i - <int> ; max = t1 ; } else { j = j - <int> ; i = i - <int> ; max = t2 ; } } else if ( j == <int> ) { t1 = max + arr [ i - <int> ] [ <int> ] ; i = i - <int> ; max = t1 ; } else if ( i == j ) { t1 = max + arr [ i - <int> ] [ j - <int> ] ; j = j - <int> ; i = i - <int> ; max = t1 ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 5552}
{"input": "int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; int min ; long long int n ; long long int ptr [ <int> ] ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ptr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { min = ptr [ <int> ] ; if ( ptr [ i ] < min ) min = ptr [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 1, "id": 5553}
{"input": "int findmax ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int cases ; scanf ( <str> , & cases ) ; while ( cases > <int> ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] , b [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i == n - <int> ) { b [ i ] [ j ] = a [ i ] [ j ] ; } } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { int x = findmax ( b [ i + <int> ] [ j ] , b [ i + <int> ] [ j + <int> ] ) ; b [ i ] [ j ] = a [ i ] [ j ] + x ; } } printf ( <str> , b [ <int> ] [ <int> ] ) ; cases -- ; } return <int> ; }", "label": 0, "id": 5554}
{"input": "int main ( void ) { int a , b , c , m , n , t ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; m = a ; n = b ; while ( b % a != <int> ) { c = a ; a = b % a ; b = a ; } printf ( <str> , a , ( ( m * n ) / a ) ) ; t -- ; } return <int> ; }", "label": 1, "id": 5555}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , p , min = <int> , lc ; scanf ( <str> , & n ) ; for ( lc = <int> ; lc < n ; lc ++ ) { scanf ( <str> , & p ) ; if ( p <= min ) min = p ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5556}
{"input": "int max ( int a , int b ) ; int min ( int a , int b ) ; int main ( ) { long int T ; int i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { long int A , B ; long int j = <int> , t = <int> , g = <int> ; scanf ( <str> , & A , & B ) ; if ( max ( A , B ) % min ( A , B ) == <int> ) g = min ( A , B ) ; else { for ( j = min ( A , B ) ; j >= <int> ; j -- ) { if ( max ( A , B ) % j == <int> && min ( A , B ) % j == <int> ) { g = j ; break ; } } } t = ( A * B ) / g ; printf ( <str> , g , t ) ; } return <int> ; } int max ( int a , int b ) { return ( a > b ? a : b ) ; } int min ( int a , int b ) { return ( a < b ? a : b ) ; }", "label": 2, "id": 5557}
{"input": "int main ( ) { int t , i , n , a , min ; long long int cost ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) { min = a ; } } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 5558}
{"input": "int main ( ) { int r , i , j , t ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = r - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5559}
{"input": "int main ( ) { long long a , b , x , y , t , gcd , lcm , test ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 5560}
{"input": "int main ( ) { int numOfTriangles = <int> , numOfLines , i , j , a , x , y , max = <int> ; scanf ( <str> , & numOfTriangles ) ; while ( numOfTriangles > <int> ) { scanf ( <str> , & numOfLines ) ; int * * base = ( int * * ) malloc ( numOfLines * sizeof ( int * ) ) ; for ( i = <int> ; i < numOfLines ; i ++ ) { base [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; j = <int> ; while ( j <= i ) { scanf ( <str> , & a ) ; if ( i == <int> ) base [ i ] [ j ] = a ; else if ( j == <int> ) base [ i ] [ j ] = a + base [ i - <int> ] [ j ] ; else if ( j == numOfLines - <int> ) base [ i ] [ j ] = a + base [ i - <int> ] [ j - <int> ] ; else { x = a + base [ i - <int> ] [ j ] ; y = a + base [ i - <int> ] [ j - <int> ] ; if ( x > y ) base [ i ] [ j ] = x ; else base [ i ] [ j ] = y ; } j ++ ; } } max = <int> ; for ( j = <int> ; j < numOfLines ; j ++ ) { if ( max < base [ numOfLines - <int> ] [ j ] ) max = base [ numOfLines - <int> ] [ j ] ; } printf ( <str> , max ) ; free ( base ) ; numOfTriangles -- ; } return <int> ; }", "label": 0, "id": 5561}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return b ; if ( a == <int> || b == <int> ) return <int> ; if ( a > b ) return ( gcd ( a - b , b ) ) ; return ( gcd ( a , b - a ) ) ; } int lcm ( int a , int b ) { int l ; for ( l = ( a > b ? a : b ) ; l < a * b ; l = l + ( a > b ? a : b ) ) if ( l % a == <int> && l % b == <int> ) break ; return ( l ) ; } main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) ) ; printf ( <str> , lcm ( a , b ) ) ; } }", "label": 1, "id": 5562}
{"input": "int main ( ) { unsigned i , n , small ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; small = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < small ) small = a [ i ] ; } printf ( <str> , ( ( n - <int> ) * small ) ) ; } return <int> ; }", "label": 0, "id": 5563}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , q = - <int> , t , N , i , j ; s ( t ) ; while ( t -- ) { s ( N ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) s ( a [ i ] [ j ] ) ; for ( i = <int> ; i < N ; i ++ ) { a [ i ] [ <int> ] += a [ i - <int> ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += m ( a [ i - <int> ] [ j - <int> ] , a [ i - <int> ] [ j ] ) ; q = m ( a [ i ] [ j ] , q ) ; } } printf ( <str> , q ) ; } return <int> ; }", "label": 3, "id": 5564}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , s ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } i = <int> , j = <int> ; s = a [ i ] [ j ] ; while ( i < n ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) s += a [ i + <int> ] [ j ] ; else s += a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , s ) ; return <int> ; } }", "label": 2, "id": 5565}
{"input": "int main ( ) { long long int n , t , i , min , arr [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5566}
{"input": "int main ( ) { int nodes [ <int> ] ; int results [ <int> ] ; int i , j , k , temp ; char line [ <int> ] ; int testcases ; int maxlevel ; scanf ( <str> , & testcases ) ; int testcases1 = testcases ; while ( testcases1 > <int> ) { scanf ( <str> , & maxlevel ) ; getchar ( ) ; j = <int> , temp = <int> ; for ( k = <int> ; k < maxlevel ; k ++ ) { gets ( line ) ; for ( i = <int> ; i < strlen ( line ) + <int> ; i ++ ) { if ( line [ i ] != <char> && line [ i ] != <int> ) { temp = ( temp * <int> ) + ( line [ i ] - <int> ) ; } else { nodes [ j ] = temp ; temp = <int> ; j ++ ; } } } j = ( ( maxlevel * ( maxlevel - <int> ) ) / <int> ) - <int> ; for ( i = <int> ; i < maxlevel ; i ++ ) { for ( k = <int> ; k < maxlevel - i ; k ++ ) { nodes [ j ] += nodes [ j + maxlevel - i ] >= nodes [ j + maxlevel - i + <int> ] ? nodes [ j + maxlevel - i ] : nodes [ j + maxlevel - i + <int> ] ; j -- ; } } results [ testcases1 ] = nodes [ <int> ] ; testcases1 -- ; } while ( testcases > <int> ) { printf ( <str> , results [ testcases ] ) ; testcases -- ; } return <int> ; }", "label": 1, "id": 5567}
{"input": "static inline int uscan ( ) { int c , x ; for ( c = GC ( ) ; ( c < <int> || c > <int> ) ; c = GC ( ) ) ; for ( x = <int> ; c > <int> && c < <int> ; c = GC ( ) ) { x = ( x << <int> ) + ( x << <int> ) + c - <int> ; } return x ; } static inline int scan ( ) { int c , x , neg = <int> ; for ( c = GC ( ) ; ( ( c < <int> || c > <int> ) && c != <char> ) ; c = GC ( ) ) ; if ( c == <char> ) { neg = <int> ; c = GC ( ) ; } for ( x = <int> ; c > <int> && c < <int> ; c = GC ( ) ) { x = ( x << <int> ) + ( x << <int> ) + c - <int> ; } if ( neg ) x = - x ; return x ; } static inline int gcd ( int a , int b ) { int _a ; while ( b ) { _a = a ; a = b ; b = _a % b ; } return a ; } int main ( ) { int a , b , g ; for ( int _t = uscan ( ) ; _t ; _t -- ) { a = uscan ( ) ; b = uscan ( ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a / g ) * ( b ) ) ; } }", "label": 1, "id": 5568}
{"input": "int main ( int argc , char * argv [ ] ) { int i , l , c , s1 , s2 ; int n ; int mat [ MAX ] [ MAX ] ; scanf ( <str> , & n ) ; for ( i = n ; i > <int> ; -- i ) { scanf ( <str> , & n ) ; for ( l = <int> ; l < n ; l ++ ) for ( c = <int> ; c <= l ; c ++ ) scanf ( <str> , & mat [ l ] [ c ] ) ; for ( l = n - <int> ; l >= <int> ; l -- ) for ( c = <int> ; c <= l ; c ++ ) { s1 = mat [ l ] [ c ] + mat [ l + <int> ] [ c ] ; s2 = mat [ l ] [ c ] + mat [ l + <int> ] [ c + <int> ] ; mat [ l ] [ c ] = s1 > s2 ? s1 : s2 ; } printf ( <str> , mat [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5569}
{"input": "typedef struct triangle { int n_rows ; int * * content ; } Triangle ; int max ( int , int ) ; void inicializar ( Triangle * ) ; Triangle subTriangle ( Triangle , int , int ) ; int max_path ( Triangle ) ; int max ( int a , int b ) { if ( b > a ) return b ; else return a ; } void inicializar ( Triangle * T ) { int i ; int j ; scanf ( <str> , & ( T -> n_rows ) ) ; T -> content = ( int * * ) malloc ( T -> n_rows * sizeof ( int * ) ) ; for ( i = <int> ; i < T -> n_rows ; i ++ ) { T -> content [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ( T -> content [ i ] [ j ] ) ) ; } } } Triangle subTriangle ( Triangle T , int x , int y ) { Triangle subT ; subT <fp> n_rows = T <fp> n_rows - <int> ; subT <fp> content = ( int * * ) malloc ( subT <fp> n_rows * sizeof ( int ) ) ; int i ; int j ; for ( i = <int> ; i < subT <fp> n_rows ; i ++ ) { subT <fp> content [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) { subT <fp> content [ i ] [ j ] = T <fp> content [ x + i ] [ y + j ] ; } } return subT ; } int max_path ( Triangle T ) { if ( T <fp> n_rows == <int> ) { return T <fp> content [ <int> ] [ <int> ] ; } else { Triangle T1 = subTriangle ( T , <int> , <int> ) ; Triangle T2 = subTriangle ( T , <int> , <int> ) ; return T <fp> content [ <int> ] [ <int> ] + max ( max_path ( T1 ) , max_path ( T2 ) ) ; } } int main ( ) { int n ; int i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { Triangle T ; inicializar ( & T ) ; printf ( <str> , max_path ( T ) ) ; } return <int> ; }", "label": 2, "id": 5570}
{"input": "typedef long int li ; li gcd ( li a , li b ) { return b == <int> ? a : gcd ( b , a % b ) ; } main ( ) { li t , a , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } }", "label": 0, "id": 5571}
{"input": "int hcf ( int a , int b ) ; int main ( ) { int test , a , b , i , c , d ; scanf ( <str> , & test ) ; printf ( <str> ) ; for ( i = <int> ; i ++ < test ; ) { scanf ( <str> , & a , & b ) ; c = hcf ( a , b ) ; printf ( <str> , c , ( a * b ) / c ) ; } return <int> ; } int hcf ( int a , int b ) { int c ; if ( a < b ) { c = a ; a = b ; b = c ; } if ( b == <int> ) { return a ; } else { return hcf ( b , a % b ) ; } }", "label": 1, "id": 5572}
{"input": "int main ( ) { int t , n , a , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; min = a ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5573}
{"input": "main ( ) { int a [ <int> ] [ <int> ] ; int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j - <int> ] ) a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j - <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5574}
{"input": "int main ( void ) { int grt , n , m , k , i , j ; scanf ( <str> , & n ) ; if ( n > <int> ) return <int> ; while ( n != <int> ) { scanf ( <str> , & m ) ; if ( m != <int> ) { int a [ m ] [ m ] ; int b [ m + <int> ] [ <int> * m ] ; for ( i = <int> ; i < m + <int> ; i ++ ) { for ( j = <int> ; j < <int> * m ; j ++ ) { if ( i <= m - <int> && j <= m - <int> ) a [ i ] [ j ] = <int> ; b [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < m - <int> ; i ++ ) { k = <int> ; for ( j = <int> ; j <= i ; j ++ ) { b [ i + <int> ] [ k ++ ] = b [ i ] [ j ] + a [ i + <int> ] [ j ] ; b [ i + <int> ] [ k ++ ] = b [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } grt = b [ m - <int> ] [ <int> ] ; for ( j = <int> ; j < <int> * m ; j ++ ) { if ( grt < b [ m - <int> ] [ j ] ) grt = b [ m - <int> ] [ j ] ; } if ( n == <int> ) printf ( <str> , grt ) ; else printf ( <str> , grt ) ; n -- ; } } return <int> ; }", "label": 1, "id": 5575}
{"input": "int main ( ) { long int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int m , j , c ; scanf ( <str> , & m ) ; int a [ m ] ; for ( j = <int> ; j < m ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } c = a [ <int> ] ; for ( j = <int> ; j < m ; j ++ ) { if ( a [ j ] < c ) c = a [ j ] ; } printf ( <str> , c * ( m - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5576}
{"input": "int main ( ) { int T ; long int N ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; int ar [ N ] ; long int min = <int> ; for ( int j = <int> ; j < N ; j ++ ) { scanf ( <str> , & ar [ j ] ) ; if ( min > ar [ j ] ) min = ar [ j ] ; } printf ( <str> , min ) ; long cost = min * ( N - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 5577}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int i , j , r , t , k ; scanf ( <str> , & t ) ; scanf ( <str> , & r ) ; for ( k = <int> ; k <= t ; k ++ ) { for ( i = <int> ; i <= r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = r ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] += arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] += arr [ i ] [ j + <int> ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 3, "id": 5578}
{"input": "int main ( ) { int t , n , a [ <int> ] , z = <int> , i , j , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( a [ j ] < z ) { z = a [ j ] ; } } x = z * ( n - <int> ) ; printf ( <str> , x ) ; z = <int> ; } }", "label": 0, "id": 5579}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5580}
{"input": "int getgcd ( int x , int y ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , lcm , gcd ; scanf ( <str> , & a , & b ) ; gcd = getgcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int getgcd ( int x , int y ) { if ( y != <int> ) { getgcd ( y , x % y ) ; } else { return ( x ) ; } }", "label": 1, "id": 5581}
{"input": "int main ( ) { int t , i ; unsigned long long int gcd , lcm , a , b , small , big ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) { small = b ; big = a ; } else { small = a ; big = b ; } if ( a % small == <int> && b % small == <int> ) { gcd = small ; } else { gcd = ( small + <int> ) / <int> ; while ( a % gcd != <int> || b % gcd != <int> ) { gcd = gcd - <int> ; } } if ( gcd == small ) { lcm = big ; } else { lcm = ( a * b ) / gcd ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 5582}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; long long int a [ n ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) for ( int j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; for ( int i = <int> ; i < n ; i ++ ) { int k = ( n - i - <int> ) ; for ( int j = <int> ; j < ( n - k ) ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( int i = n - <int> ; i >= <int> ; i -- ) { for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5583}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; int maxi = - <int> ; scanf ( <str> , & n ) ; int a [ n + <int> ] [ n + <int> ] , b [ n + <int> ] [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = <int> ; } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) b [ i ] [ j ] = max ( b [ i ] [ j ] , b [ i - <int> ] [ j ] + a [ i ] [ j ] ) ; else if ( j == i ) b [ i ] [ j ] = max ( b [ i ] [ j ] , b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ) ; else { b [ i ] [ j ] = max ( b [ i ] [ j ] , b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ) ; b [ i ] [ j ] = max ( b [ i ] [ j ] , b [ i - <int> ] [ j ] + a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { if ( b [ n ] [ i ] > maxi ) maxi = b [ n ] [ i ] ; } printf ( <str> , maxi ) ; } return <int> ; }", "label": 0, "id": 5584}
{"input": "int main ( ) { int t , n , i , j , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; t -- ) { scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } } for ( i = ( n - <int> ) ; i >= <int> ; i -- ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j && a [ i ] [ j ] < a [ i ] [ j + <int> ] ) m = a [ i ] [ j + <int> ] ; else m = a [ i ] [ j ] ; a [ i - <int> ] [ j ] += m ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5585}
{"input": "int main ( ) { int t , k , a [ <int> ] [ <int> ] , p , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int max = <int> ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = <int> ; scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { p = i ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i ; i >= <int> ; i -- ) { if ( p == i ) continue ; else { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5586}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int sum = <int> , i , n , arr [ <int> ] , min ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5587}
{"input": "int main ( ) { long a , c , m , n , b , hcf ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = <int> ; m = a ; n = b ; while ( b ) { if ( a % b == <int> ) { hcf = b ; break ; } c = a ; a = b ; b = c % b ; } printf ( <str> , hcf , ( m * n ) / hcf ) ; } return <int> ; }", "label": 0, "id": 5588}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , min , i , j , k = <int> , lcm = <int> , hcf ; scanf ( <str> , & a , & b ) ; if ( a > b ) min = b ; else min = a ; for ( j = min ; j > <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { lcm = lcm * j ; a = a / j ; b = b / j ; if ( k == <int> ) hcf = j ; k ++ ; } } lcm = lcm * a * b ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 5589}
{"input": "int gcd ( long long int a , long long int b ) { long long int r ; r = a % b ; if ( r == <int> ) { return b ; } return ( gcd ( b , r ) ) ; } int main ( void ) { long long int t ; scanf ( <str> , & t ) ; long long int a , b ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; long long int g = gcd ( a , b ) ; long long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 5590}
{"input": "int gcd ( int a , int b ) { int g ; for ( int i = <int> ; i <= a && i <= b ; i ++ ) { ; if ( ( a % i == <int> ) && ( b % i == <int> ) ) { g = i ; printf ( <str> , g ) ; } } return g ; } int main ( ) { int a , b , t , r ; long int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; r = gcd ( a , b ) ; lcm = ( a * b ) / r ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 5591}
{"input": "int main ( ) { int a , b , min , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; min = ( a > b ) ? a : b ; for ( i = min ; i >= <int> ; -- i ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i ) ; break ; } } j = ( a * b ) / i ; printf ( <str> , j ) ; } }", "label": 2, "id": 5592}
{"input": "int hcf ( int a , int b ) { if ( a == <int> ) return b ; if ( b == <int> ) return a ; if ( a > b ) return hcf ( a % b , b ) ; if ( b > a ) return hcf ( b % a , a ) ; if ( a == b ) return a ; } int main ( ) { int t , i , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; i = hcf ( a , b ) ; printf ( <str> , i , a * b / i ) ; } return <int> ; }", "label": 1, "id": 5593}
{"input": "int main ( ) { int n1 , n2 , max , lcm , i ; scanf ( <str> , & n1 ) ; scanf ( <str> , & n2 ) ; max = ( n1 > n2 ) ? n1 : n2 ; i = max ; for ( ; ; ) { if ( i % n1 == <int> && i % n2 == <int> ) { lcm = i ; break ; i = i + max ; } printf ( <str> , lcm ) ; } return <int> ; }", "label": 2, "id": 5594}
{"input": "int main ( ) { int t ; int n ; int arr [ max ] ; int i ; int x ; int y ; int check = <int> ; int count = <int> ; int j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } count = <int> ; for ( i = <int> ; i < n ; i ++ ) { x = arr [ i ] ; check = <int> ; for ( j = i + <int> ; j < n ; j ++ ) { if ( x <= arr [ j ] ) { x = arr [ j ] ; check = <int> ; } else break ; } if ( check == <int> ) count ++ ; } printf ( <str> , n + count ) ; } return <int> ; }", "label": 3, "id": 5595}
{"input": "int main ( ) { int n , i , i2 , i3 , j , k , a = <int> ; scanf ( <str> , & n ) ; int sum [ n ] ; for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; scanf ( <str> , & j ) ; for ( i2 = <int> ; i2 <= j ; i2 ++ ) { for ( i3 = <int> ; i3 <= i2 ; i3 ++ ) { int s ; scanf ( <str> , & k ) ; s = a + k ; if ( s >= sum [ i ] && i3 >= ( i2 - <int> ) ) { sum [ i ] = s ; a = sum [ i ] ; } } } printf ( <str> , sum [ i ] ) ; } return <int> ; }", "label": 1, "id": 5596}
{"input": "int main ( ) { int j , l , a [ <int> ] [ <int> ] , s , sm , t , n ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n + <int> ; j ++ ) { scanf ( <str> , & l ) ; while ( l > <int> ) { scanf ( <str> , & l ) ; } for ( s = <int> ; s <= ( l * ( l + <int> ) ) / <int> ; s ++ ) { scanf ( <str> , & a [ j ] [ s ] ) ; while ( a [ j ] [ s ] > <int> ) { scanf ( <str> , & a [ j ] [ s ] ) ; } } int so = <int> ; for ( t = <int> ; t < l + <int> ; t ++ ) { so = so + a [ j ] [ t ] ; } sm = so ; for ( t = l + <int> ; t <= ( l * ( l + <int> ) ) / <int> ; t ++ ) { so = so - a [ j ] [ t - l ] + a [ j ] [ t ] ; if ( so > sm ) { sm = so ; } } printf ( <str> , sm ) ; } return ( <int> ) ; }", "label": 3, "id": 5597}
{"input": "int num_lines ; int max ( int a , int b ) { return a >= b ? a : b ; } int find_sum ( int arr [ ] [ num_lines ] , int num_lines ) { int trav1 ; int trav2 ; for ( trav1 = <int> ; trav1 < num_lines ; trav1 ++ ) { arr [ trav1 ] [ <int> ] += arr [ trav1 - <int> ] [ <int> ] ; arr [ trav1 ] [ trav1 ] += arr [ trav1 - <int> ] [ trav1 - <int> ] ; } for ( trav1 = <int> ; trav1 < num_lines ; trav1 ++ ) { for ( trav2 = <int> ; trav2 < trav1 ; trav2 ++ ) { arr [ trav1 ] [ trav2 ] += max ( arr [ trav1 - <int> ] [ trav2 ] , arr [ trav1 - <int> ] [ trav2 - <int> ] ) ; } } int max = <int> ; for ( trav1 = <int> ; trav1 < num_lines ; trav1 ++ ) { if ( arr [ num_lines - <int> ] [ trav1 ] > max ) max = arr [ num_lines - <int> ] [ trav1 ] ; } return max ; } int main ( ) { int num_test ; scanf ( <str> , & num_test ) ; int trav ; int line ; int data ; for ( trav = <int> ; trav < num_test ; trav ++ ) { scanf ( <str> , & num_lines ) ; int tot = ( num_lines * ( num_lines - <int> ) ) ; int trav1 ; int tt ; int res [ num_lines ] [ num_lines ] ; for ( line = <int> ; line < num_lines ; line ++ ) { for ( trav1 = <int> ; trav1 <= line ; trav1 ++ ) { scanf ( <str> , & tt ) ; res [ line ] [ trav1 ] = tt ; } } int result = find_sum ( res , num_lines ) ; printf ( <str> , result ) ; } return <int> ; }", "label": 0, "id": 5598}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int i , j , n ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; long long int l = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = i ; j < n ; j ++ ) { if ( a [ j ] >= a [ i ] && a [ j ] >= a [ j - <int> ] ) l ++ ; } printf ( <str> , l ) ; } }", "label": 2, "id": 5599}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; int a [ n ] ; long int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 5600}
{"input": "int main ( ) { int <unk> , j , k , n , i ; int p ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & <unk> ) ; for ( i = <int> ; i <= <unk> ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = n - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k < j ; k ++ ) { if ( a [ j ] [ k ] >= a [ j ] [ k + <int> ] ) p = a [ j ] [ k ] ; else p = a [ j ] [ k + <int> ] ; a [ j - <int> ] [ k ] = a [ j - <int> ] [ k ] + p ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return ( <int> ) ; }", "label": 1, "id": 5601}
{"input": "void gcd ( int c , int d ) { int a , b , r , temp ; a = ( c > d ) ? c : d ; b = ( c < d ) ? c : d ; r = ( a % b ) ; if ( r == <int> ) printf ( <str> , b ) ; else { while ( r != <int> ) { temp = r ; r = ( b % r ) ; b = temp ; } printf ( <str> , b ) ; } return ; } void lcm ( int c , int d ) { int a , b , i , k ; a = ( c > d ) ? c : d ; b = ( c < d ) ? c : d ; for ( i = <int> ; i <= b ; i ++ ) { k = a * i ; if ( k % b == <int> ) { printf ( <str> , k ) ; break ; } } return ; } int main ( void ) { int c , d , t ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & c , & d ) ; gcd ( c , d ) ; lcm ( c , d ) ; t -- ; } return <int> ; }", "label": 1, "id": 5602}
{"input": "int main ( ) { int n , i , m , t , j , x = <int> , a [ <int> ] [ <int> ] = { <int> } , churn = <int> , sum = <int> ; scanf ( <str> , & n ) ; for ( t = <int> ; t < n ; t ++ ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } int c , z = <int> , k = m - <int> ; for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = z ; j <= k ; j ++ ) { if ( a [ i ] [ j ] > sum ) { sum = a [ i ] [ j ] ; c = j ; } } z = c - <int> ; k = z + <int> ; churn += sum ; sum = <int> ; } } printf ( <str> , churn ) ; return <int> ; }", "label": 1, "id": 5603}
{"input": "int gcd ( int a , int b ) { int t ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } return a ; } int main ( ) { int t , a , b , c , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = a * b ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 1, "id": 5604}
{"input": "int main ( ) { int k , y , x , a [ <int> ] [ <int> ] , j , i , m ; scanf ( <str> , & y ) ; for ( k = <int> ; k < y ; k ++ ) { scanf ( <str> , & x ) ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } { if ( x >= <int> ) { for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; } a [ i ] [ <int> ] = a [ i ] [ <int> ] + a [ i - <int> ] [ <int> ] ; a [ i ] [ i ] = a [ i - <int> ] [ j - <int> ] ; } } m = <int> ; for ( j = <int> ; j < x ; j ++ ) { if ( m < a [ x - <int> ] [ j ] ) m = a [ x - <int> ] [ j ] ; } printf ( <str> , m ) ; } if ( x = <int> ) { if ( ( a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) > ( a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ) printf ( <str> , a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; else printf ( <str> , a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; } if ( x = <int> ) printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5605}
{"input": "int input ( ) ; int main ( ) { int i , t , j , k , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { n = input ( ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; } inline int input ( ) { int a = <int> ; char c ; c = getchar_unlocked ( ) ; while ( c < <int> ) { c = getchar_unlocked ( ) ; } while ( c >= <int> ) { a = ( a << <int> ) + ( a << <int> ) + ( c - <char> ) ; c = getchar_unlocked ( ) ; } return a ; } ;", "label": 2, "id": 5606}
{"input": "int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int main ( ) { int n , t , i , j , min , max , sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; else { if ( i == j ) b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else { min = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; max = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; if ( max > min ) b [ i ] [ j ] = max ; else b [ i ] [ j ] = min ; } } if ( b [ i ] [ j ] > sum ) sum = b [ i ] [ j ] ; } } printf ( <str> , sum ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 5607}
{"input": "int main ( ) { long long int test ; scanf ( <str> , & test ) ; while ( test -- ) { long long int n , i ; scanf ( <str> , & n ) ; long long int array [ n ] , answer = <int> , dp [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & array [ i ] ) ; dp [ i ] = <int> ; } answer += dp [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( array [ i ] >= array [ i - <int> ] ) dp [ i ] += dp [ i - <int> ] ; answer += dp [ i ] ; } printf ( <str> , answer ) ; } }", "label": 0, "id": 5608}
{"input": "int main ( ) { int d , a , b , ans , p , lcm ; ; int gcd ( int , int ) ; scanf ( <str> , & d ) ; while ( d -- ) { scanf ( <str> , & a , & b ) ; p = a * b ; ans = gcd ( a , b ) ; lcm = p / ans ; printf ( <str> , ans , lcm ) ; } return <int> ; } int gcd ( int a , int b ) { int c ; if ( a % b == <int> ) return ( b ) ; else c = gcd ( b , a % b ) ; return ( c ) ; }", "label": 1, "id": 5609}
{"input": "int bin ( int no ) { int m = <int> ; while ( no > <int> ) { no = no / <int> ; m = m + <int> ; } if ( m > <int> ) return m ; else return <int> ; } int binary ( int n ) { int k = <int> , h = <int> , b , c , i ; while ( n > <int> ) { k = bin ( n ) ; b = <int> ; for ( i = <int> ; i < k ; i ++ ) b = <int> * b ; h = h + b ; c = <int> ; for ( i = <int> ; i < k ; i ++ ) c = <int> * c ; n = n - c ; } return h ; } int main ( ) { int n , i , j , a [ <int> ] [ <int> ] , t , s , d , b , y , x , c , q , w ; scanf ( <str> , & q ) ; for ( w = <int> ; w < q ; w ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } t = <int> ; for ( i = <int> ; i < n ; i ++ ) t = t * <int> ; d = <int> ; for ( i = <int> ; i < t ; i ++ ) { s = a [ <int> ] [ <int> ] ; b = binary ( i ) ; y = <int> ; for ( x = <int> ; x < n ; x ++ ) { c = b ; b = b / <int> ; y = y + c ; s = s + a [ x ] [ y ] ; } if ( s > d ) d = s ; } printf ( <str> , d ) ; } return <int> ; }", "label": 3, "id": 5610}
{"input": "typedef struct node { int value ; struct node * next ; } node ; int main ( ) { int t , num , r , i , j , largest ; node * start [ <int> ] , * ptr , * new_node , * p , * q ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { start [ i ] = NULL ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num ) ; new_node = ( node * ) malloc ( sizeof ( node ) ) ; new_node -> value = num ; if ( start [ i ] == NULL ) { start [ i ] = new_node ; ptr = new_node ; ptr -> next = NULL ; } else { ptr -> next = new_node ; ptr = new_node ; ptr -> next = NULL ; } } } p = q = ( node * ) malloc ( sizeof ( node ) ) ; p -> value = start [ <int> ] -> value ; for ( i = <int> ; i < r - <int> ; i ++ ) { ptr = start [ i + <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { new_node = ( node * ) malloc ( sizeof ( node ) ) ; q -> next = new_node ; new_node -> next = NULL ; q = new_node ; q -> value = ptr -> value + p -> value ; ptr = ptr -> next ; new_node = ( node * ) malloc ( sizeof ( node ) ) ; q -> next = new_node ; new_node -> next = NULL ; q = new_node ; q -> value = ptr -> value + p -> value ; p = p -> next ; } } largest = p -> value ; do { p = p -> next ; if ( largest < p -> value ) largest = p -> value ; } while ( p != q ) ; printf ( <str> , largest ) ; t -- ; } return <int> ; }", "label": 1, "id": 5611}
{"input": "int lcm ( int , int ) ; int gcd ( int , int ) ; int main ( ) { int T ; long long int A , B , x , y ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; x = gcd ( A , B ) ; y = ( A * B ) / x ; printf ( <str> , x , y ) ; } return <int> ; } int gcd ( int m , int n ) { long long int i , gcd ; for ( i = <int> ; i <= m && i <= n ; ++ i ) { if ( m % i == <int> && n % i == <int> ) { gcd = i ; } } return ( gcd ) ; }", "label": 2, "id": 5612}
{"input": "int main ( ) { int t , i , n , * a , j , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; ++ i ) { x = <int> ; scanf ( <str> , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( j = <int> ; j < n ; ++ j ) scanf ( <str> , a + j ) ; for ( j = <int> ; j < n - <int> ; ++ j ) { if ( * ( a + j ) < * ( a + j + <int> ) ) { while ( * ( a + j ) < * ( a + j + <int> ) ) ++ j ; ++ x ; } } printf ( <str> , n + x ) ; } }", "label": 1, "id": 5613}
{"input": "int main ( ) { int testcase ; int input ; int b ; int m , n ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { scanf ( <str> , & input ) ; int cell [ input ] [ input ] ; for ( m = <int> ; m < input ; m ++ ) { for ( n = <int> ; n <= m ; n ++ ) { scanf ( <str> , & b ) ; cell [ m ] [ n ] = b ; } } for ( m = input - <int> ; m >= <int> ; m -- ) { for ( n = m ; n >= <int> ; n -- ) { cell [ m ] [ n ] = cell [ m ] [ n ] + max ( cell [ m + <int> ] [ n ] , cell [ m + <int> ] [ n + <int> ] ) ; } } int ans = cell [ <int> ] [ <int> ] ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5614}
{"input": "int main ( ) { int n , i , t , a ; long int min = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) min = a ; } min *= ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 5615}
{"input": "long long int t , n , a [ <int> ] , i , j , k , tmp , c = <int> ; int main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = n / <int> ; i > <int> ; i = i / <int> ) { for ( j = i ; j < n ; j ++ ) { for ( k = j - i ; k >= <int> ; k = k - i ) { if ( a [ k + i ] >= a [ k ] ) break ; else { tmp = a [ k ] ; a [ k ] = a [ k + i ] ; a [ k + i ] = tmp ; } } } } c = ( a [ <int> ] ) * ( n - <int> ) ; printf ( <str> , c ) ; c = <int> ; } return <int> ; }", "label": 2, "id": 5616}
{"input": "int a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] , n ; int sum ( int i , int j ) { int temp ; if ( i < n ) { if ( s [ i ] [ j ] == - <int> ) { temp = ( sum ( i + <int> , j ) > sum ( i + <int> , j + <int> ) ? sum ( i + <int> , j ) : sum ( i + <int> , j + <int> ) ) ; s [ i ] [ j ] = temp + a [ i ] [ j ] ; } return s [ i ] [ j ] ; } return <int> ; } int main ( ) { int i , j , t , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { i = <int> ; scanf ( <str> , & n ) ; while ( i < n ) { j = <int> ; while ( j <= i ) { s [ i ] [ j ] = - <int> ; scanf ( <str> , & a [ i ] [ j ] ) ; j ++ ; } i ++ ; } printf ( <str> , sum ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 5617}
{"input": "int main ( ) { int n , gcd , lcm , i , x , y , n1 , n2 ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x , & y ) ; n1 = x ; n2 = y ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } gcd = n1 ; lcm = x * y / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5618}
{"input": "int main ( ) { long int n1 , n2 , x , y , lcm ; int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } lcm = ( n1 * n2 ) / x ; printf ( <str> , x , lcm ) ; } }", "label": 1, "id": 5619}
{"input": "int main ( void ) { int n ; int a , b , r , k , prod ; scanf ( <str> , & n ) ; while ( n -- ) { printf ( <str> ) ; scanf ( <str> , a , b ) ; if ( b > a ) { r = a ; a = b ; b = a ; } prod = a * b ; while ( b ) { k = a % b ; a = b ; b = k ; } printf ( <str> , a , prod / a ) ; } return <int> ; }", "label": 3, "id": 5620}
{"input": "int main ( ) { int t , i , min , a , b , x , y , j , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x , b = y ; min = a < b ? a : b ; int gcd = <int> ; if ( min == <int> ) gcd = <int> ; else { int pi , pj , pk = <int> , psize ; int p [ min ] ; for ( pi = <int> ; pi <= min / <int> ; pi ++ ) { int prime = <int> ; for ( pj = <int> ; pj <= pi / <int> ; pj ++ ) { if ( pi % pj == <int> ) { prime = <int> ; break ; } } if ( prime == <int> ) p [ pk ++ ] = pi ; psize = pk ; } int k = <int> ; while ( a > p [ k ] ) { if ( a % p [ k ] != <int> || b % p [ k ] != <int> ) { k ++ ; if ( k == psize ) break ; } else { gcd *= p [ k ] ; a /= p [ k ] ; b /= p [ k ] ; } } } a = x , b = y ; int max = a > b ? a : b ; long long int lcm = <int> ; if ( max % min == <int> ) lcm = max ; else { for ( j = <int> ; ; j ++ ) { m = j * min ; if ( m % max == <int> ) { lcm = m ; break ; } } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 5621}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t ; scanf ( <str> , & t ) ; int i , j , n , s1 , s2 ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5622}
{"input": "int main ( void ) { int n ; scanf ( <str> , & n ) ; while ( n ) { int a [ n ] ; for ( int i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( int i = <int> ; i <= n ; i ++ ) { if ( a [ a [ i ] ] != i ) { printf ( <str> ) ; break ; } if ( i == n ) { printf ( <str> ) ; } } scanf ( <str> , & n ) ; } return <int> ; }", "label": 3, "id": 5623}
{"input": "long gcd ( int , int ) ; int main ( ) { int t , a , b = <int> ; long r , l = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; r = gcd ( a , b ) ; l = a / r * b ; printf ( <str> , r , l ) ; } return <int> ; } long gcd ( int i1 , int i2 ) { int a , b ; if ( i1 > i2 ) { a = i1 ; b = i2 ; } else { a = i2 ; b = i1 ; } long result ; int c = a % b ; if ( c > <int> ) result = gcd ( b , c ) ; else result = b ; return result ; }", "label": 0, "id": 5624}
{"input": "unsigned long count ( int a [ <int> ] [ <int> ] , int i , int j , int n ) ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int n , i = - <int> , k , j , a [ <int> ] [ <int> ] , b ; unsigned long ans [ <int> ] ; scanf ( <str> , & n ) ; while ( ++ i < n ) { scanf ( <str> , & b ) ; for ( j = <int> ; j < b ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } ans [ i ] = count ( a , <int> , <int> , b ) ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , ans [ i ] ) ; } unsigned long count ( int a [ <int> ] [ <int> ] , int i , int j , int n ) { int DP [ <int> ] [ <int> ] , index , <unk> ; unsigned long <unk> ; DP [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) DP [ i ] [ j ] = DP [ i - <int> ] [ j ] + a [ i ] [ j ] ; else DP [ i ] [ j ] = max ( DP [ i - <int> ] [ j ] , DP [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } <unk> = DP [ n - <int> ] [ <int> ] ; if ( n % <int> != <int> ) { index = <int> ; <unk> = DP [ n - <int> ] [ <int> ] ; } else { index = <int> ; <unk> = max ( DP [ n - <int> ] [ <int> ] , DP [ n - <int> ] [ <int> ] ) ; } for ( j = <int> ; j < n ; j += <int> ) { <unk> = max ( DP [ n - <int> ] [ j ] , DP [ n - <int> ] [ j + <int> ] ) ; if ( <unk> > <unk> ) <unk> = <unk> ; } return <unk> ; }", "label": 1, "id": 5625}
{"input": "static int sum [ <int> ] [ <int> ] , num [ <int> ] [ <int> ] , check , row , max = <int> ; int main ( void ) { int t , i , j , ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; } } sum [ <int> ] [ <int> ] = num [ <int> ] [ <int> ] ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + num [ i ] [ j ] ; } else if ( j == i ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + num [ i ] [ j ] ; } else { if ( sum [ i - <int> ] [ j - <int> ] > sum [ i - <int> ] [ j ] ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + num [ i ] [ j ] ; } else { sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + num [ i ] [ j ] ; } } } } for ( j = <int> ; j < row ; j ++ ) { if ( max < sum [ row - <int> ] [ j ] ) { max = sum [ row - <int> ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 5626}
{"input": "int main ( ) { int i , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5627}
{"input": "int path ( int a [ ] [ MAX ] , int i , int j , int maxrow ) { if ( i == maxrow ) return a [ i ] [ j ] ; return ( a [ i ] [ j ] + max ( path ( a , i + <int> , j , maxrow ) , path ( a , i + <int> , j + <int> , maxrow ) ) ) ; } int main ( ) { int a [ MAX ] [ MAX ] , n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , path ( a , <int> , <int> , n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 5628}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5629}
{"input": "int gcd ( int a , int b ) { if ( a % b ) gcd ( b , a % b ) ; else return b ; } int main ( ) { int t ; int g , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) g = gcd ( a , b ) ; else g = gcd ( b , a ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 5630}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5631}
{"input": "int main ( ) { int n , T , G , L , A , B , X ; scanf ( <str> , & T ) ; for ( n = <int> ; n <= T ; n ++ ) { if ( T < <int> ) { scanf ( <str> , & A , & B ) ; if ( A <= <int> && B <= <int> ) { if ( A < B ) { X = A ; } else { X = B ; } for ( ; X >= <int> ; X -- ) { if ( A % X == <int> && B % X == <int> ) { G = X ; L = ( A * B ) / G ; break ; } } printf ( <str> , G , L ) ; } break ; } } return <int> ; }", "label": 1, "id": 5632}
{"input": "long long int gcd ( long long int , long long int ) ; int main ( ) { long long int t , a , b , min , max , lcm , hcf ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; max = ( a > b ) ? a : b ; min = ( a < b ) ? a : b ; hcf = gcd ( max , min ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } long long int gcd ( long long int a , long long int b ) { if ( a % b == <int> ) { return b ; } else { return gcd ( b , a % b ) ; } }", "label": 0, "id": 5633}
{"input": "int a [ <int> ] [ <int> ] ; int b [ <int> ] [ <int> ] = { <int> } ; int max ( int a , int b ) { if ( a > b ) { return a ; } return b ; } int sum ( int i , int j , int n ) { if ( b [ i ] [ j ] != <int> ) { return b [ i ] [ j ] ; } if ( i == n - <int> ) { return a [ i ] [ j ] ; } else { b [ i ] [ j ] = a [ i ] [ j ] + max ( sum ( i + <int> , j , n ) , sum ( i + <int> , j + <int> , n ) ) ; return a [ i ] [ j ] + max ( sum ( i + <int> , j , n ) , sum ( i + <int> , j + <int> , n ) ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i = <int> , j ; while ( i < n ) { j = <int> ; while ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; j += <int> ; } i += <int> ; } int ans = sum ( <int> , <int> , n ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 5634}
{"input": "int main ( ) { int T ; int ans [ <int> ] ; int sums [ <int> ] ; int i , j ; int Tc ; int n ; int num [ <int> ] ; scanf ( <str> , & T ) ; Tc = T ; while ( Tc -- ) { scanf ( <str> , & n ) ; memset ( ( void * ) sums , <int> , n * sizeof ( sums [ <int> ] ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { scanf ( <str> , & num [ j ] ) ; } for ( j = i ; j >= <int> ; j -- ) { sums [ j ] = MAX ( sums [ j ] + num [ j ] , sums [ j - <int> ] + num [ j ] ) ; } sums [ <int> ] += num [ <int> ] ; } ans [ Tc ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { ans [ Tc ] = MAX ( sums [ i ] , ans [ Tc ] ) ; } } while ( T -- ) { printf ( <str> , ans [ T ] ) ; } return <int> ; }", "label": 3, "id": 5635}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , m , i , j , max , t ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { printf ( <str> ) ; for ( j = <int> ; j < m ; j ++ ) { if ( j > i ) a [ i ] [ j ] = <int> ; else scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < m ; i ++ ) { printf ( <str> ) ; for ( j = <int> ; j < m ; j ++ ) printf ( <str> , a [ i ] [ j ] ) ; } for ( j = <int> ; j < m ; j ++ ) { for ( i = <int> ; i < m ; i ++ ) { if ( j == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; else a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; } } i = m ; max = <int> ; for ( j = <int> ; j < m ; j ++ ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } printf ( <str> , max ) ; t -- ; } return ( <int> ) ; }", "label": 2, "id": 5636}
{"input": "int main ( ) { int s [ <int> ] [ <int> ] , a [ <int> ] [ <int> ] , i , j , n , t , max ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; else if ( j == <int> ) s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; else { if ( s [ i - <int> ] [ j ] > s [ i - <int> ] [ j - <int> ] ) s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j ] ; else s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j - <int> ] ; } } for ( i = <int> ; i < n ; i ++ ) if ( s [ n - <int> ] [ i ] > max ) max = s [ n - <int> ] [ i ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5637}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , i , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5638}
{"input": "int main ( ) { int i , a ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = num1 % num2 ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 5639}
{"input": "int main ( ) { int n , i , min , ans , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int A [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } min = A [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( A [ i ] < min ) { min = A [ i ] ; } } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5640}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int n ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5641}
{"input": "int matrix [ <int> ] [ <int> ] , lines ; int <unk> [ <int> ] [ <int> ] ; void function ( int , int , int ) ; int main ( int argc , char * argv [ ] ) { int test , i , j , count , temp , k , x , max ; matrix [ <int> ] [ <int> ] = <int> ; scanf ( <str> , & test ) ; while ( test > <int> ) { max = <int> ; scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & temp ) ; matrix [ i ] [ j ] = temp ; } } for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ! i ) <unk> [ i ] [ j ] = matrix [ i ] [ j ] ; else if ( j == i ) <unk> [ i ] [ j ] = matrix [ i ] [ j ] + <unk> [ i - <int> ] [ j - <int> ] ; else { if ( ! j ) <unk> [ i ] [ j ] = <unk> [ i - <int> ] [ j ] + matrix [ i ] [ j ] ; else { x = ( <unk> [ i - <int> ] [ j - <int> ] > <unk> [ i - <int> ] [ j ] ? <unk> [ i - <int> ] [ j - <int> ] : <unk> [ i - <int> ] [ j ] ) ; <unk> [ i ] [ j ] = x + matrix [ i ] [ j ] ; } } if ( <unk> [ i ] [ j ] > max ) max = <unk> [ i ] [ j ] ; } } printf ( <str> , max ) ; test -- ; } return <int> ; } void function ( int n , int row , int col ) { if ( row == lines ) { printf ( <str> ) ; return ; } printf ( <str> , matrix [ row ] [ col ] ) ; function ( n , row + <int> , col ) ; if ( col == lines ) { printf ( <str> ) ; return ; } printf ( <str> , matrix [ row ] [ col ] ) ; function ( n , row , col + <int> ) ; }", "label": 0, "id": 5642}
{"input": "long int gcd ( long int a , long int b ) { if ( b == <int> || b == a ) return a ; if ( b > a ) return gcd ( b , a ) ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; long int a , b , g ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 0, "id": 5643}
{"input": "int main ( ) { int ic , ir , r , n , a [ <int> ] [ <int> ] , max , i , b , br , c , colast , icol ; int s , paths ; scanf ( <str> , & c ) ; for ( ic = <int> ; ic < c + <int> ; ic ++ ) { scanf ( <str> , & n ) ; for ( ir = <int> ; ir < n + <int> ; ir ++ ) { for ( icol = <int> ; icol < ir + <int> ; icol ++ ) { scanf ( <str> , & a [ ir ] [ icol ] ) ; } } max = <int> ; paths = <int> ; for ( i = <int> ; i < n + <int> ; i ++ ) { paths = paths * <int> ; } for ( i = <int> ; i < paths ; i ++ ) { colast = <int> ; s = a [ <int> ] [ <int> ] ; br = i ; for ( ir = <int> ; ir < n + <int> ; ir ++ ) { b = br - <int> * ( br / <int> ) ; br = br / <int> ; c = colast + b ; colast = c ; s = s + a [ ir ] [ c ] ; } if ( s > max ) max = s ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 5644}
{"input": "int gcdf ( int a , int b ) { int m ; if ( ( a % b ) == <int> ) { return b ; } else { m = gcdf ( b , a % b ) ; } return m ; } int main ( ) { int T , N1 , N2 , i , gcd , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N1 , & N2 ) ; gcd = lcm = <int> ; gcd = gcdf ( N1 , N2 ) ; lcm = ( N1 * N2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5645}
{"input": "int main ( ) { int t , n , p , c , i ; long long total , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & p ) ; r = <int> ; total = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & c ) ; if ( p <= c ) { r ++ ; } else { r = r * ( r + <int> ) / <int> ; total = total + r ; r = <int> ; } p = c ; } r = r * ( r + <int> ) / <int> ; total = total + r ; printf ( <str> , total ) ; } return <int> ; }", "label": 0, "id": 5646}
{"input": "int main ( ) { int t ; long long int a [ <int> ] , n , temp , i , k ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ <int> ] > a [ i ] ) { temp = a [ <int> ] ; a [ <int> ] = a [ i ] ; a [ i ] = temp ; } } k = a [ <int> ] * ( n - <int> ) ; printf ( <str> , k ) ; t -- ; } return <int> ; }", "label": 3, "id": 5647}
{"input": "int main ( ) { long t , n , min , x , c , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & x ) ; if ( x < min ) { min = x ; } } c = min * ( n - <int> ) ; printf ( <str> , c ) ; t -- ; } return ( <int> ) ; }", "label": 2, "id": 5648}
{"input": "int main ( void ) { int n , i , a , b , gcd , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) gcd = a ; else gcd = b ; while ( a % gcd != <int> || b % gcd != <int> ) gcd -- ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5649}
{"input": "int main ( ) { long int n1 , n2 , x , y , lcm ; int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } lcm = ( x * y ) / n1 ; printf ( <str> , n1 , lcm ) ; } }", "label": 1, "id": 5650}
{"input": "int main ( ) { int i , j , t , a , min1 , p ; double y ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & min1 ) ; for ( j = <int> ; j < a ; j ++ ) { scanf ( <str> , & p ) ; if ( min1 > p ) { min1 = p ; } } y = min1 * ( a - <int> ) ; printf ( <str> , y ) ; } return <int> ; }", "label": 1, "id": 5651}
{"input": "int n ; int get_max ( int col_sum [ ] , int row , int col , int * ecount ) { int i , max , pos = col ; max = col_sum [ col ] ; for ( i = col + <int> ; i < ( n - row + col ) ; i ++ ) { if ( col_sum [ i ] > max ) pos = i ; else if ( col_sum [ i ] == max ) ( * ecount ) ++ ; } return pos ; } void column_sum ( int a [ n ] [ n ] , int col_sum [ ] , int row , int col ) { int i , j ; col_sum [ col ] = <int> ; for ( i = row + <int> ; i < n ; i ++ ) col_sum [ col ] += a [ i ] [ col ] ; for ( j = col + <int> ; j < n ; j ++ ) { col_sum [ j ] = <int> ; for ( i = j + <int> ; i < n ; i ++ ) col_sum [ j ] += a [ i ] [ j ] ; } } int main ( ) { int i , row , col , t , sum , max , ecount ; scanf ( <str> , & t ) ; int res [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; int col_sum [ n ] ; for ( row = <int> ; row < n ; row ++ ) for ( col = <int> ; col <= row ; col ++ ) scanf ( <str> , & a [ row ] [ col ] ) ; sum = a [ <int> ] [ <int> ] ; row = <int> , col = <int> ; while ( row < n - <int> && col < n - <int> ) { ecount = <int> ; column_sum ( a , col_sum , row , col ) ; max = get_max ( col_sum , row , col , & ecount ) ; if ( ecount == n - row - <int> ) { if ( a [ row + <int> ] [ col ] > a [ row + <int> ] [ col + <int> ] ) row ++ ; else row ++ , col ++ ; sum += a [ row ] [ col ] ; } else { if ( col == max ) { row ++ ; sum += a [ row ] [ col ] ; } while ( col < max ) { col ++ , row ++ ; sum += a [ row ] [ col ] ; } } } res [ i ] = sum ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , res [ i ] ) ; return <int> ; }", "label": 1, "id": 5652}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; long long int i , j , temp ; long long int n ; long long int * a ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; a = ( long long int * ) malloc ( sizeof ( long long int ) * n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } temp = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( temp > a [ j ] ) { temp = a [ j ] ; } } printf ( <str> , temp * ( n - <int> ) ) ; free ( a ) ; } }", "label": 0, "id": 5653}
{"input": "int main ( ) { int a , b , c , k , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int k ; k = a * b ; while ( a % b != <int> ) { c = a % b ; a = b ; b = c ; } printf ( <str> , c , k / c ) ; printf ( <str> ) ; } return <int> ; }", "label": 3, "id": 5654}
{"input": "int main ( ) { int n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5655}
{"input": "int main ( ) { int i , j , t , a [ <int> ] , l , cnt , n ; scanf ( <str> , & t ) ; while ( t -- ) { cnt = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { l = a [ i ] ; for ( j = <int> + i ; j < n ; j ++ ) { if ( l <= a [ j ] ) { cnt ++ ; l = a [ j ] ; } else break ; } } printf ( <str> , cnt + n ) ; } return <int> ; }", "label": 0, "id": 5656}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int c = a , d = b ; while ( a != b ) { if ( a > b ) { a -= b ; } else { b -= a ; } } if ( a == <int> ) { printf ( <str> , a , c * d ) ; } else { long long int lcm = c * d / a ; printf ( <str> , a , lcm ) ; } } return <int> ; }", "label": 1, "id": 5657}
{"input": "int main ( ) { int t ; long long a [ <int> ] , s , i , n , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; s = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < s ) s = a [ i ] ; } r = s * ( n - <int> ) ; printf ( <str> , r ) ; } return <int> ; }", "label": 1, "id": 5658}
{"input": "int n , a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int sum ( int row , int col ) { int t1 , t2 , t ; if ( row > n - <int> ) return <int> ; else { if ( b [ row ] [ col ] != - <int> ) t = b [ row ] [ col ] ; else { t1 = sum ( row + <int> , col ) ; t2 = sum ( row + <int> , col + <int> ) ; if ( t1 >= t2 ) t = t1 + a [ row ] [ col ] ; else t = t2 + a [ row ] [ col ] ; b [ row ] [ col ] = t ; } return t ; } } int main ( ) { int t , i , j , k , total ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= k ; j ++ ) { b [ i ] [ j ] = - <int> ; scanf ( <str> , & a [ i ] [ j ] ) ; } k ++ ; } total = sum ( <int> , <int> ) ; printf ( <str> , total ) ; } return <int> ; }", "label": 0, "id": 5659}
{"input": "main ( ) { long int A , B , t , k ; scanf ( <str> , & t ) ; for ( long int i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( B < A ) { long int tt = B ; B = A ; A = tt ; } for ( long int j = <int> ; j <= A ; j ++ ) if ( A % j == <int> && B % j == <int> ) { k = j ; } printf ( <str> , k , A * B / k ) ; } }", "label": 2, "id": 5660}
{"input": "void main ( ) { int t , n , i = <int> , j = <int> ; long long int count = <int> , a [ <int> ] , max = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { t -- ; n = <int> , i = <int> , j = <int> ; scanf ( <str> , & n ) ; while ( i < n ) { scanf ( <str> , & a [ i ] ) ; i ++ ; } i = <int> ; if ( a [ <int> ] >= n ) count ++ ; if ( a [ <int> ] == <int> ) count ++ ; while ( i < n ) { j = a [ i ] ; while ( j < n ) { if ( a [ j - <int> ] >= max ) count ++ ; else break ; j ++ ; } max = <int> ; i ++ ; } printf ( <str> , count ) ; count = <int> ; } }", "label": 1, "id": 5661}
{"input": "long long int gcd ( long long int , long long int ) ; long long int lcm ( long long int , long long int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int g = gcd ( a , b ) ; long long int l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } return <int> ; } long long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; else if ( a == <int> ) return b ; else return gcd ( b , a % b ) ; } long long int lcm ( long long int a , long long int b ) { long long int l ; l = ( a * b ) / gcd ( a , b ) ; return l ; }", "label": 0, "id": 5662}
{"input": "int main ( ) { int a , b , test , counter ; scanf ( <str> , & test ) ; for ( counter = <int> ; counter <= test ; counter ++ ) { scanf ( <str> , & a , & b ) ; int hcf , lcm ; int i , min ; min = b ; if ( min >= a ) { min = a ; } hcf = <int> ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; } } lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 5663}
{"input": "int main ( ) { int i , j ; scanf ( <str> , & i ) ; for ( j = <int> ; j < i ; j ++ ) { int k , n , p , l ; int * v ; scanf ( <str> , & k ) ; n = k * ( k + <int> ) / <int> ; v = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( l = <int> ; l < n ; l ++ ) { scanf ( <str> , & v [ l ] ) ; } for ( p = k - <int> ; p > <int> ; p -- ) { int z ; for ( z = <int> ; z < p ; z ++ ) { int x , y ; x = v [ ( p * ( p - <int> ) / <int> ) + z ] + v [ ( p * ( p - <int> ) / <int> ) + z + p ] ; y = v [ ( p * ( p - <int> ) / <int> ) + z ] + v [ ( p * ( p - <int> ) / <int> ) + z + p + <int> ] ; if ( x > y ) { v [ ( p * ( p - <int> ) / <int> ) + z ] = x ; } else { v [ ( p * ( p - <int> ) / <int> ) + z ] = y ; } } } printf ( <str> , v [ <int> ] ) ; free ( v ) ; } return <int> ; }", "label": 0, "id": 5664}
{"input": "int arr [ <int> ] [ <int> ] ; int sum ( int ) ; int sum ( int row ) { if ( row < <int> ) return arr [ <int> ] [ <int> ] ; else { int col ; for ( col = <int> ; col <= row ; col ++ ) { if ( arr [ row + <int> ] [ col ] > arr [ row + <int> ] [ col + <int> ] ) arr [ row ] [ col ] += arr [ row + <int> ] [ col ] ; else arr [ row ] [ col ] += arr [ row + <int> ] [ col + <int> ] ; } return sum ( row - <int> ) ; } } int main ( ) { int t , n , j , i ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t -- ) { printf ( <str> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= n ; j ++ ) { if ( j <= i ) scanf ( <str> , & arr [ i ] [ j ] ) ; else arr [ i ] [ j ] = <int> ; } } printf ( <str> , sum ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 5665}
{"input": "int arr [ <int> ] [ <int> ] ; int result [ <int> ] ; int r = <int> ; int main ( ) { int t , n , l = <int> , i , j , max , p , q , sum , k ; scanf ( <str> , & t ) ; while ( t > <int> ) { max = <int> ; sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( k = <int> ; k < n ; k ++ ) { if ( max < arr [ n - <int> ] [ k ] ) { max = arr [ n - <int> ] [ k ] ; p = n - <int> ; q = k ; } } sum = max ; for ( k = n - <int> ; k >= <int> ; k -- ) { if ( arr [ p - <int> ] [ q ] > arr [ p - <int> ] [ q - <int> ] ) { sum = sum + arr [ p - <int> ] [ q ] ; p -- ; } else { sum = sum + arr [ p - <int> ] [ q - <int> ] ; p -- ; q -- ; } } result [ l ] = sum ; l ++ ; t -- ; } l -- ; for ( ; r <= l ; r ++ ) printf ( <str> , result [ r ] ) ; return <int> ; }", "label": 1, "id": 5666}
{"input": "int no_of_lines ; int find ( short unsigned matrix [ <int> ] [ <int> ] , int l , int x ) { if ( l == no_of_lines - <int> ) return matrix [ l ] [ x ] ; else { int sum1 , sum2 , total1 , total2 ; sum1 = find ( matrix , l + <int> , x ) ; sum2 = find ( matrix , l + <int> , x + <int> ) ; total1 = sum1 + matrix [ l ] [ x ] ; total2 = sum2 + matrix [ l ] [ x ] ; return total1 > total2 ? total1 : total2 ; } } int main ( ) { int test , i , j , k ; unsigned short input [ <int> ] [ <int> ] ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & no_of_lines ) ; for ( j = <int> ; j < no_of_lines ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & input [ j ] [ k ] ) ; printf ( <str> , find ( input , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 5667}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , d , a , b , r = <int> ; scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } while ( r > <int> ) { d = r ; n = d ; r = n % d ; } int gcd = d ; int lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5668}
{"input": "int n , a [ <int> ] [ <int> ] ; int sum ( int i , int j ) { int t1 , t2 ; if ( i >= n || j >= n ) { return <int> ; } t1 = sum ( i + <int> , j ) ; t2 = sum ( i + <int> , j + <int> ) ; if ( t1 > t2 ) return t1 + a [ i ] [ j ] ; else return t2 + a [ i ] [ j ] ; } int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; for ( ; t ; -- t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; ++ i ) for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , sum ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 5669}
{"input": "int * arr , n ; int * save ; int findmax ( int index , int i ) { int temp , sum ; if ( i == n - <int> ) { save [ index ] = arr [ index ] ; return save [ index ] ; } else if ( save [ index ] != <int> ) { return ( save [ index ] ) ; } i ++ ; temp = findmax ( index + i , i ) ; sum = findmax ( index + i + <int> , i ) ; if ( temp >= sum ) { save [ index ] = temp + arr [ index ] ; return save [ index ] ; } else { save [ index ] = sum + arr [ index ] ; return save [ index ] ; } } int main ( ) { int index = <int> , i = <int> , j ; int y , t , * sum1 ; scanf ( <str> , & t ) ; sum1 = ( int * ) malloc ( t * sizeof ( int ) ) ; memset ( sum1 , <int> , sizeof ( sum1 ) ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n ) ; arr = ( int * ) malloc ( ( n * ( n + <int> ) ) / <int> * sizeof ( int ) ) ; save = ( int * ) malloc ( ( n * ( n + <int> ) ) / <int> * sizeof ( int ) ) ; memset ( save , <int> , sizeof ( save ) ) ; for ( i = <int> ; i < ( n * ( n + <int> ) ) / <int> ; i ++ ) scanf ( <str> , & arr [ i ] ) ; sum1 [ j ] = findmax ( <int> , <int> ) ; } printf ( <str> ) ; for ( j = <int> ; j < t ; j ++ ) printf ( <str> , sum1 [ j ] ) ; return <int> ; }", "label": 0, "id": 5670}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 1, "id": 5671}
{"input": "int max ( int a , int b ) { if ( a <= b ) return b ; else return a ; } int main ( ) { int T ; scanf ( <str> , & T ) ; int n , a [ <int> ] [ <int> ] , i , j , k ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { k = max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; a [ i ] [ j ] = a [ i ] [ j ] + k ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5672}
{"input": "int main ( ) { int * * o , max ; int t , r , x , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { max = - <int> ; scanf ( <str> , & r ) ; o = ( int * * ) malloc ( ( r + <int> ) * sizeof ( int * ) ) ; for ( i = <int> ; i <= r ; i ++ ) { o [ i ] = ( int * ) malloc ( ( r + <int> ) * sizeof ( int ) ) ; memset ( o [ i ] , <int> , ( r + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i <= r ; i ++ ) { for ( j = <int> ; j <= r ; j ++ ) { printf ( <str> , o [ i ] [ j ] ) ; } printf ( <str> ) ; } printf ( <str> ) ; for ( i = <int> ; i <= r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & x ) ; o [ i ] [ j ] = x + ( o [ i - <int> ] [ j - <int> ] > o [ i - <int> ] [ j ] ? o [ i - <int> ] [ j - <int> ] : o [ i - <int> ] [ j ] ) ; } } for ( j = <int> ; j <= r ; j ++ ) { if ( o [ r ] [ j ] > max ) max = o [ r ] [ j ] ; } for ( i = <int> ; i <= r ; i ++ ) free ( o [ i ] ) ; free ( o ) ; printf ( <str> , max ) ; } }", "label": 2, "id": 5673}
{"input": "int a [ <int> ] [ <int> ] , n ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int f ( int i , int j ) { if ( i < n ) return ( a [ i ] [ j ] + max ( f ( i + <int> , j ) , f ( i + <int> , j + <int> ) ) ) ; else return ( a [ i ] [ j ] ) ; } int main ( ) { int t , i , j , ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; ans = f ( <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 5674}
{"input": "void swap ( int * a , int * b ) ; main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; int l , g ; scanf ( <str> , & a , & b ) ; l = lcm ( a , b ) ; g = gcd ( a , b ) ; printf ( <str> , g , l ) ; } } int gcd ( int a , int b ) { if ( a < b ) swap ( & a , & b ) ; if ( a % b == <int> ) return b ; else gcd ( b , a % b ) ; } int lcm ( int a , int b ) { int m = <int> ; if ( a < b ) swap ( & a , & b ) ; int i ; for ( i = <int> ; i <= a * b ; i ++ ) { if ( a % i == <int> || b % i == <int> ) { if ( a % i == <int> && b % i == <int> ) { a = a / i ; b = b / i ; m = m * i ; } else { if ( a % i == <int> ) { a = a / i ; m = m * i ; } if ( b % i == <int> ) { b = b / i ; m = m * i ; } } } } return m ; } void swap ( int * a , int * b ) { int t ; t = * a ; * a = * b ; * b = t ; }", "label": 1, "id": 5675}
{"input": "int main ( ) { int a [ <int> ] ; int b , i = <int> , j , d , c ; scanf ( <str> , & b ) ; while ( i < b ) { scanf ( <str> , & a [ <int> ] ) ; scanf ( <str> , & a [ <int> ] ) ; j = <int> ; if ( a [ <int> ] > a [ <int> ] ) { d = a [ <int> ] , c = a [ <int> ] ; } else { d = a [ <int> ] , c = a [ <int> ] ; } while ( j != <int> ) { j = d % c ; d = c ; c = j ; } printf ( <str> , & d ) ; printf ( <str> , ( ( a [ <int> ] * a [ <int> ] ) / d ) ) ; i = i + <int> ; } return <int> ; }", "label": 1, "id": 5676}
{"input": "static char _rbuf [ BUF_SIZE ] ; static char * _rpos = <int> ; static int len = <int> ; static char * _rend = <int> ; static int _readC ( ) { if ( _rpos >= _rend ) { len = read ( <int> , _rbuf , sizeof _rbuf ) ; if ( len < <int> ) return - <int> ; _rend = _rbuf + len ; _rpos = _rbuf ; } return * _rpos ++ ; } int readInt ( ) { int c , ve = <int> , i = <int> ; do { c = _readC ( ) ; } while ( ( c < <char> || c > <char> ) ) ; do { i = ( i << <int> + i << <int> ) + c - <char> ; c = _readC ( ) ; } while ( c >= <char> && c <= <char> ) ; return i * ve ; } int main ( ) { int T , n , i , j , A [ <int> ] [ <int> ] ; T = readInt ( ) ; while ( T -- ) { n = readInt ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] = readInt ( ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] += MAX ( A [ i + <int> ] [ j ] , A [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5677}
{"input": "int main ( ) { long long int t , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { long long int n , i , j , c = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long long int dp [ n ] ; for ( i = <int> ; i < n ; i ++ ) { dp [ i ] = <int> ; } for ( i = n - <int> ; i >= <int> ; i -- ) { if ( a [ i ] <= a [ i + <int> ] ) dp [ i ] = dp [ i ] + dp [ i + <int> ] ; else dp [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { c = c + dp [ i ] ; } printf ( <str> , c ) ; t -- ; } return <int> ; }", "label": 0, "id": 5678}
{"input": "int main ( ) { int t , i , j , max , k , n , a [ <int> ] [ <int> ] , M [ <int> ] [ <int> ] = { <int> } , q ; char space ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] , & space ) ; } M [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { if ( k == <int> ) M [ j ] [ k ] = M [ j - <int> ] [ k ] + a [ j ] [ k ] ; else { if ( ( M [ j - <int> ] [ k ] + a [ j ] [ k ] ) > ( M [ j - <int> ] [ k - <int> ] + a [ j ] [ k ] ) ) M [ j ] [ k ] = M [ j - <int> ] [ k ] + a [ j ] [ k ] ; else M [ j ] [ k ] = M [ j - <int> ] [ k - <int> ] + a [ j ] [ k ] ; } } } max = M [ n - <int> ] [ <int> ] ; for ( q = <int> ; q < n ; q ++ ) { if ( max < M [ n - <int> ] [ q ] ) max = M [ n - <int> ] [ q ] ; } printf ( <str> , max ) ; } }", "label": 0, "id": 5679}
{"input": "int main ( ) { int i , j , k , max , max2 , n , line , test ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { printf ( <str> , a [ i ] [ j ] ) ; } printf ( <str> ) ; } while ( n != <int> ) { for ( i = n - <int> , k = i , j = <int> ; k >= <int> ; k -- , j ++ ) { max = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; max2 = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; if ( max2 > max ) max = max2 ; a [ i ] [ j ] = max ; } n -- ; } printf ( <str> , max ) ; } }", "label": 3, "id": 5680}
{"input": "int main ( void ) { int t , a , b , c , a1 , b1 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a1 , & b1 ) ; a = a1 ; b = b1 ; while ( b ) { a = a % b ; a ^= b ^= a ^= b ; } printf ( <str> , a , ( a1 * b1 ) / a ) ; } return <int> ; }", "label": 1, "id": 5681}
{"input": "int main ( ) { int t , i , j , k , n ; scanf ( <str> , & t ) ; int s [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = n - <int> ; k >= <int> ; k -- ) { a [ j ] [ k ] += ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ? a [ j + <int> ] [ k ] : a [ j + <int> ] [ k + <int> ] ) ; } } s [ i ] = a [ <int> ] [ <int> ] ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , s [ i ] ) ; } return <int> ; }", "label": 1, "id": 5682}
{"input": "int main ( ) { long int t , k , a , b , r , a2 , b2 ; scanf ( <str> , & t ) ; while ( t -- ) { r = <int> ; scanf ( <str> , & a , & b ) ; b2 = b ; a2 = a ; if ( a < b ) { k = a2 ; a2 = b2 ; b2 = k ; } while ( r != <int> ) { r = a2 % b2 ; a2 = b2 ; b2 = r ; } printf ( <str> , a2 , ( a * b ) / a2 ) ; } return <int> ; }", "label": 0, "id": 5683}
{"input": "int m , gcd ; int fun1 ( int , int ) ; int fun1 ( int r , int A ) { m = A % r ; if ( m == <int> ) gcd = r ; else fun1 ( m , r ) ; } int main ( ) { int r , T , A , B , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A < B ) { r = B % A ; if ( r == <int> ) gcd = A ; else fun1 ( r , A ) ; } else { r = A % B ; if ( r == <int> ) gcd = B ; else fun1 ( r , B ) ; } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5684}
{"input": "int main ( ) { int t ; long long int i , a , b , max , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= b / <int> ; i ++ ) { if ( a % i == <int> && b % i == <int> ) max = i ; } printf ( <str> , max , ( a * b ) / max ) ; } }", "label": 2, "id": 5685}
{"input": "int sum ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , r , * * p , i , j , k , s ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & r ) ; p = ( int * * ) malloc ( r * sizeof ( int * ) ) ; for ( j = <int> ; j < r ; j ++ ) { p [ j ] = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & p [ j ] [ k ] ) ; } } for ( i = r - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { p [ i ] [ j ] += sum ( p [ i + <int> ] [ j ] , p [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 5686}
{"input": "int max1 ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int i , j , k , temp , num , rows , t , max ; int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { max = - <int> ; scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) b [ i ] [ <int> ] = b [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) b [ i ] [ i ] = b [ i - <int> ] [ i - <int> ] + a [ i ] [ i ] ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j < i ; j ++ ) b [ i ] [ j ] = max1 ( b [ i - <int> ] [ j ] , b [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; for ( i = <int> ; i < rows ; i ++ ) { if ( b [ rows - <int> ] [ i ] > max ) max = b [ rows - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 5687}
{"input": "int main ( ) { int a , b , x , y , t , i , j , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , x , y , gcd ) ; printf ( <str> , x , y , lcm ) ; return <int> ; }", "label": 1, "id": 5688}
{"input": "int n ; int <unk> ( int a [ <int> ] [ <int> ] , int i , int j , int prev ) { int sum = <int> , sum1 , sum2 ; if ( i == n - <int> ) { return prev + a [ i ] [ j ] ; } prev += a [ i ] [ j ] ; sum1 = <unk> ( a , i + <int> , j , prev ) ; sum2 = <unk> ( a , i + <int> , j + <int> , prev ) ; if ( sum1 > sum2 ) sum = sum1 ; else sum = sum2 ; return sum ; } int main ( ) { int t , arr [ <int> ] [ <int> ] , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ j ] [ k ] ) ; } printf ( <str> , <unk> ( arr , <int> , <int> , <int> ) ) ; } }", "label": 2, "id": 5689}
{"input": "int main ( ) { int t , n , triangle [ MAX ] ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & n ) ; int i , j , temp1 , temp2 ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , triangle + ( ( i * ( i + <int> ) ) / <int> ) + j ) ; } if ( n == <int> ) printf ( <str> , triangle [ <int> ] ) ; else { triangle [ <int> ] += triangle [ <int> ] ; triangle [ <int> ] += triangle [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) triangle [ ( i * ( i + <int> ) ) / <int> ] += triangle [ ( i * ( i - <int> ) ) / <int> ] ; else if ( j != i ) { temp1 = triangle [ ( i * ( i + <int> ) ) / <int> + j ] + triangle [ ( i * ( i - <int> ) ) / <int> + j - <int> ] ; temp2 = triangle [ ( i * ( i + <int> ) ) / <int> + j ] + triangle [ ( i * ( i - <int> ) ) / <int> + j ] ; triangle [ ( i * ( i + <int> ) ) / <int> + j ] = ( temp1 > temp2 ) ? temp1 : temp2 ; } else triangle [ ( i * ( i + <int> ) ) / <int> + j ] += triangle [ ( i * ( i - <int> ) ) / <int> + j - <int> ] ; } } } int max = triangle [ <int> ] ; i = ( n * ( n - <int> ) ) / <int> ; j = ( n * ( n + <int> ) ) / <int> ; for ( ; i < j ; i ++ ) max = ( max > triangle [ i ] ) ? max : triangle [ i ] ; printf ( <str> , max ) ; } }", "label": 3, "id": 5690}
{"input": "int main ( ) { int t , i , j , n ; int a [ <int> ] ; long long int count = <int> , p = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; p = <int> ; scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] > a [ i - <int> ] || a [ i ] == a [ i - <int> ] ) p ++ ; else { count += ( p * ( p + <int> ) ) / <int> - p ; p = <int> ; } } if ( i == n ) count += ( p * ( p + <int> ) ) / <int> - p ; count += n ; printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 5691}
{"input": "int main ( ) { int test = <int> , i , j , t , array [ <int> ] [ <int> ] , R = <int> ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & R ) ; for ( i = <int> ; i < R ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; for ( i = R - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { t = array [ i ] [ j ] < array [ i ] [ j + <int> ] ; array [ i - <int> ] [ j ] += array [ i ] [ j + t ] ; } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return ( <int> ) ; }", "label": 0, "id": 5692}
{"input": "int main ( void ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int input , i , smallest = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & input ) ; if ( input < smallest ) smallest = input ; } printf ( <str> , ( n - <int> ) * smallest ) ; } return <int> ; }", "label": 0, "id": 5693}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; int a [ n ] ; long int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 5694}
{"input": "void element ( void ) ; int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { element ( ) ; } return <int> ; } void element ( void ) { int n , i , j , k , m ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) { scanf ( <str> , & a [ i ] [ j ] ) ; k = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; m = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; if ( k > m ) a [ i ] [ j ] = k ; else { a [ i ] [ j ] = m ; } } else { a [ i ] [ j ] = <int> ; } } } for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j - <int> ] > a [ n - <int> ] [ j ] ) { a [ n - <int> ] [ j ] = a [ n - <int> ] [ j - <int> ] ; } } printf ( <str> , a [ n - <int> ] [ n - <int> ] ) ; }", "label": 0, "id": 5695}
{"input": "char * tri = <int> ; char rows ; int size [ ] = { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; void create ( ) { scanf ( <str> , & rows ) ; free ( tri ) ; tri = malloc ( size [ rows + <int> ] ) ; int i , j ; for ( i = <int> ; i < size [ rows + <int> ] ; i ++ ) { scanf ( <str> , tri + i ) ; } } void max ( ) { int i , j ; for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = size [ i ] ; j < size [ i + <int> ] ; j ++ ) { tri [ j ] += MAX ( tri [ size [ i ] - size [ i - <int> ] + j + <int> ] , tri [ size [ i ] - size [ i - <int> ] + j + <int> ] ) ; } } } void pr ( ) { int i , j ; for ( i = <int> ; i <= rows ; i ++ ) { for ( j = size [ i ] ; j < size [ i + <int> ] ; j ++ ) { printf ( <str> , tri [ j ] ) ; } printf ( <str> ) ; } } main ( ) { int n ; scanf ( <str> , & n ) ; for ( ; n >= <int> ; n -- ) { create ( ) ; max ( ) ; printf ( <str> , tri [ <int> ] ) ; } }", "label": 1, "id": 5696}
{"input": "int main ( ) { int t ; long a , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( b > a ) { b = b + a ; a = b - a ; b = b - a ; } while ( a % b != <int> ) { g = a % b ; a = b ; b = g ; } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 5697}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned long long int n ; scanf ( <str> , & n ) ; unsigned long long int a [ n ] , min , ans , i , j ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; i = <int> ; min = i ; for ( j = i + <int> ; j < n ; j ++ ) if ( a [ j ] < a [ min ] ) min = j ; ans = a [ min ] * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5698}
{"input": "int main ( ) { int n , t , value [ <int> ] [ <int> ] , i , j , no , greatest ; scanf ( <str> , & t ) ; for ( i = <int> ; i < <int> ; i ++ ) { value [ i ] [ <int> ] = <int> ; value [ i ] [ i + <int> ] = <int> ; } while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & value [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & no ) ; if ( value [ i - <int> ] [ j ] > value [ i - <int> ] [ j - <int> ] ) { value [ i ] [ j ] = value [ i - <int> ] [ j ] + no ; } else { value [ i ] [ j ] = value [ i - <int> ] [ j - <int> ] + no ; } } } greatest = value [ n ] [ <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { if ( value [ n ] [ i ] > greatest ) { greatest = value [ n ] [ i ] ; } } printf ( <str> , greatest ) ; } return <int> ; }", "label": 0, "id": 5699}
{"input": "int main ( ) { int t , no , a [ <int> ] [ <int> ] , i , j , sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & no ) ; a [ no ] ; for ( i = <int> ; i < no ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < no ; i ++ ) { if ( i == no - <int> ) { sum = sum + a [ i ] [ <int> ] ; } else { sum = sum + a [ i ] [ <int> ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5700}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int j , i , ma = <int> , n , t ; int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } a [ <int> ] [ <int> ] = b [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j > <int> ) { a [ i ] [ j ] = b [ i ] [ j ] + max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } else { a [ i ] [ j ] = b [ i ] [ j ] + a [ i - <int> ] [ j ] ; } } } for ( i = <int> ; i < n ; i ++ ) { ma = max ( ma , a [ n - <int> ] [ i ] ) ; } printf ( <str> , ma ) ; } }", "label": 1, "id": 5701}
{"input": "int main ( ) { int n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5702}
{"input": "void main ( ) { int t , n , i , j ; int arr [ <int> ] [ <int> ] , maxs [ <int> ] [ <int> ] = { <int> } , max = <int> ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } maxs [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { maxs [ i ] [ <int> ] = arr [ i ] [ j ] + maxs [ i - <int> ] [ <int> ] ; } else if ( j == i ) { maxs [ i ] [ j ] = arr [ i ] [ j ] + maxs [ i - <int> ] [ j ] ; } else { if ( maxs [ i - <int> ] [ j - <int> ] > maxs [ i - <int> ] [ j ] ) maxs [ i ] [ j ] = arr [ i ] [ j ] + maxs [ i - <int> ] [ j - <int> ] ; else maxs [ i ] [ j ] = arr [ i ] [ j ] + maxs [ i - <int> ] [ j ] ; } } } max = maxs [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( maxs [ n - <int> ] [ j ] > max ) max = maxs [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; t -- ; } system ( <str> ) ; }", "label": 1, "id": 5703}
{"input": "int a [ <int> ] ; int main ( void ) { int t , n , i , j , c , x ; int s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> , s = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> , c = <int> ; j < n ; j ++ ) { if ( a [ j ] >= a [ j - <int> ] ) c ++ ; else { x = <int> ; break ; } } if ( x ) { s = s + ( c * ( c + <int> ) ) / <int> ; i = j - <int> ; } else s = s + c ; } printf ( <str> , s + n ) ; } return <int> ; }", "label": 0, "id": 5704}
{"input": "int main ( ) { int t , n , i , min ; long long int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( i == <int> ) min = a [ i ] ; else if ( a [ i ] < min ) min = a [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } }", "label": 0, "id": 5705}
{"input": "int main ( void ) { long int i , t , a , b , j , max , s , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; max = ( a > b ) ? a : b ; while ( <int> ) { if ( max % a == <int> && max % b == <int> ) { break ; } ++ max ; } gcd = ( a * b ) / max ; printf ( <str> , gcd , max ) ; } return <int> ; }", "label": 2, "id": 5706}
{"input": "int main ( ) { int testcase ; scanf ( <str> , & testcase ) ; while ( testcase -- ) { int i , num , j , arr [ <int> ] [ <int> ] , sum = <int> ; scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = <int> ; i < num ; i ++ ) { for ( j = i - <int> ; j < i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ) sum = sum + arr [ i ] [ j ] ; else sum = sum + arr [ i ] [ j + <int> ] ; } } sum = sum + arr [ <int> ] [ <int> ] ; printf ( <str> , sum ) ; } return ( <int> ) ; }", "label": 1, "id": 5707}
{"input": "main ( ) { int a [ <int> ] [ <int> ] , r , c , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( r = <int> ; r < n ; r ++ ) for ( c = <int> ; c <= r ; c ++ ) scanf ( <str> , & a [ r ] [ c ] ) ; for ( r = n - <int> ; r >= <int> ; r -- ) for ( c = <int> ; c <= r ; c ++ ) a [ r ] [ c ] += a [ r + <int> ] [ c ] > a [ r + <int> ] [ c + <int> ] ? a [ r + <int> ] [ c ] : a [ r + <int> ] [ c + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5708}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int a , b , j , gcd = <int> ; scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= ( ( a < b ) ? a : b ) ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } printf ( <str> , gcd , a * b ) ; } }", "label": 1, "id": 5709}
{"input": "int fastread ( ) { int i = <int> ; char c = <int> ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) { i = i * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return i ; } int main ( ) { int t , n , a [ <int> ] [ <int> ] ; t = fastread ( ) ; while ( t -- ) { n = fastread ( ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = fastread ( ) ; } } for ( int i = n - <int> ; i >= <int> ; i -- ) { for ( int j = <int> ; j <= i ; j ++ ) { a [ i - <int> ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5710}
{"input": "int main ( ) { int s , i , j , n , b ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( b = <int> ; b < n ; b ++ ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = s - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5711}
{"input": "int ele [ <int> ] , sum [ <int> ] = { <int> } ; int main ( void ) { int n ; int r ; int b ; scanf ( <str> , & n ) ; scanf ( <str> , & r ) ; int i , j , z , h ; int max ; for ( h = <int> ; h < n ; h ++ ) { for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ele [ j ] ) ; } for ( z = i ; z >= <int> ; z -- ) { if ( z > <int> ) { sum [ z ] = sum [ i - <int> ] + ele [ z ] ; } else { sum [ z ] = sum [ z ] + ele [ z ] ; } } } max = sum [ <int> ] ; for ( b = <int> ; b < r ; b ++ ) { if ( sum [ b ] > max ) { max = sum [ b ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 5712}
{"input": "void <unk> ( long a [ ] , int n , int pos ) { int i ; for ( i = pos ; i < n - <int> ; i ++ ) { a [ i ] = a [ i + <int> ] ; } } long find_min ( long a [ ] , int n ) { int i ; long min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } return min ; } int main ( ) { int i , t , n ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( n == <int> ) { if ( a [ <int> ] < a [ <int> ] ) { printf ( <str> , a [ <int> ] ) ; } else { printf ( <str> , a [ <int> ] ) ; } } else { if ( a [ <int> ] > a [ <int> ] ) { <unk> ( a , n , <int> ) ; } else { <unk> ( a , n , <int> ) ; } n -- ; printf ( <str> , find_min ( a , n ) ) ; } t -- ; } return <int> ; }", "label": 1, "id": 5713}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long int A , B ; scanf ( <str> , & A , & B ) ; int i ; int c = <int> ; for ( i = <int> ; i <= <int> ; i ++ ) { if ( ( i % A == <int> ) && ( i % B == <int> ) ) { c ++ ; break ; } } if ( c == <int> ) { printf ( <str> , i , ( A * B ) ) ; } else { printf ( <str> , ( A * B ) ) ; } } return <int> ; }", "label": 1, "id": 5714}
{"input": "int main ( ) { int A , B , T , i , max , min , lcm , gcd , j ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; max = ( A > B ) ? A : B ; min = ( A > B ) ? B : A ; while ( <int> ) { if ( max % A == <int> && max % B == <int> ) { lcm = max ; break ; } ++ max ; } for ( j = min ; j >= <int> ; -- j ) { if ( A % j == <int> && B % j == <int> ) { gcd = j ; break ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 5715}
{"input": "int main ( ) { int a , lcm , hcf , i , d , j ; scanf ( <str> , & a ) ; int arr [ a ] [ <int> ] ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & arr [ i ] [ <int> ] , & arr [ i ] [ <int> ] ) ; } for ( i = <int> ; i < a ; i ++ ) { if ( arr [ i ] [ <int> ] >= arr [ i ] [ <int> ] ) d = arr [ i ] [ <int> ] ; else d = arr [ i ] [ <int> ] ; for ( j = d ; j >= <int> ; j -- ) { if ( arr [ i ] [ <int> ] % j == <int> && arr [ i ] [ <int> ] % j == <int> ) { lcm = j ; break ; } } hcf = ( arr [ i ] [ <int> ] * arr [ i ] [ <int> ] ) / lcm ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 5716}
{"input": "int gcd ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; long long lcm = ( a * b ) / gcd ( a , b ) ; printf ( <str> , gcd ( a , b ) , lcm ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 1, "id": 5717}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int i = <int> , j = <int> ; int n = <int> ; int rows = <int> ; int num = <int> ; int k = <int> ; int maxSum = <int> ; int matrix [ <int> ] [ <int> ] ; for ( j = <int> ; j < <int> ; j ++ ) { matrix [ j ] [ j + <int> ] = <int> ; } scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { maxSum = <int> ; scanf ( <str> , & rows ) ; if ( rows != <int> ) { scanf ( <str> , & num ) ; maxSum = num ; matrix [ <int> ] [ <int> ] = num ; } for ( j = <int> ; j < rows ; j ++ ) { scanf ( <str> , & num ) ; matrix [ j ] [ <int> ] = matrix [ j - <int> ] [ <int> ] + num ; maxSum = matrix [ j ] [ <int> ] > maxSum ? matrix [ j ] [ <int> ] : maxSum ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & num ) ; matrix [ j ] [ k ] = max ( matrix [ j - <int> ] [ k ] + num , matrix [ j - <int> ] [ k - <int> ] + num ) ; maxSum = matrix [ j ] [ k ] > maxSum ? matrix [ j ] [ k ] : maxSum ; } } printf ( <str> , maxSum ) ; } return <int> ; }", "label": 0, "id": 5718}
{"input": "int main ( ) { int i , a , b , x , y , r , t ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { r = a % b ; a = b ; b = r ; } printf ( <str> , a , ( x * y ) / a ) ; } return <int> ; }", "label": 1, "id": 5719}
{"input": "int main ( ) { int t , x , y , gcd , lcm , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5720}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; gcd ( b % a , a ) ; } int lcm ( int a , int b ) { return a * b / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 1, "id": 5721}
{"input": "main ( ) { int a , b ; scanf ( <str> , & a , & b ) ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a ) ; }", "label": 1, "id": 5722}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , n1 , n2 , lcm ) ; return <int> ; }", "label": 1, "id": 5723}
{"input": "main ( ) { int t , i , p , first , j , k , max ; int sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { sum = <int> ; scanf ( <str> , & p ) ; for ( j = <int> ; j <= p ; j ++ ) { int n [ j ] ; for ( k = <int> ; k < j ; k ++ ) { scanf ( <str> , & n [ k ] ) ; } max = n [ <int> ] ; for ( k = <int> ; k < j ; k ++ ) { if ( max < n [ k ] ) max = n [ k ] ; } sum = sum + max ; } printf ( <str> , sum ) ; } }", "label": 1, "id": 5724}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , n , m ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5725}
{"input": "int main ( ) { int t , g ; long int s , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l , & s ) ; if ( l < s ) l = ( l + s ) - ( s = l ) ; g = s ; while ( ( l % g != <int> ) || ( s % g != <int> ) ) { -- g ; } printf ( <str> , g , l * s / g ) ; } return <int> ; }", "label": 2, "id": 5726}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int h ; scanf ( <str> , & h ) ; int arr [ h ] [ h ] ; int j , k ; int max = <int> ; for ( j = <int> ; j < h ; j ++ ) { for ( k = <int> ; k < h ; k ++ ) { if ( k <= j ) scanf ( <str> , & arr [ j ] [ k ] ) ; else arr [ j ] [ k ] = <int> ; } for ( k = <int> ; k <= j ; k ++ ) { if ( ! k && j ) { arr [ j ] [ k ] += arr [ j - <int> ] [ k ] ; } else if ( j ) { arr [ j ] [ k ] += ( arr [ j - <int> ] [ k ] > arr [ j - <int> ] [ k - <int> ] ) ? arr [ j - <int> ] [ k ] : arr [ j - <int> ] [ k - <int> ] ; } } if ( j == h - <int> ) { for ( k = <int> ; k <= j ; k ++ ) if ( arr [ j ] [ k ] > max ) max = arr [ j ] [ k ] ; } } printf ( <str> , max ) ; } }", "label": 0, "id": 5727}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , j , min ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5728}
{"input": "void main ( ) { int i , tc , a , b , l , h , low , high , r , j , k ; scanf ( <str> , & tc ) ; for ( j = <int> ; j < tc ; j ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { l = a ; low = a ; h = b ; high = b ; } else { l = b ; h = a ; low = b ; high = a ; } k = high ; while ( <int> ) { r = h % l ; if ( r == <int> ) { printf ( <str> , l ) ; break ; } h = l ; l = r ; } while ( <int> ) { if ( k % low == <int> && k % high == <int> ) { printf ( <str> , k ) ; break ; } k = k + high ; } } }", "label": 2, "id": 5729}
{"input": "long int gcd ( long int m , long int n ) { long int rem , a , b ; if ( m > n ) { a = m ; b = n ; } else { a = n ; b = m ; } if ( ( a >= <int> ) && ( b >= <int> ) ) { while ( a % b != <int> ) { rem = a % b ; a = b ; b = rem ; } } return ( b ) ; } int main ( ) { long int m , n , res , i , t , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & m , & n ) ; if ( n > <int> ) { res = gcd ( m , n ) ; lcm = ( m * n ) / res ; printf ( <str> , res , lcm ) ; } else printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 5730}
{"input": "main ( ) { int <unk> [ <int> ] [ <int> ] , fall , n , x , y , max , z ; scanf ( <str> , & fall ) ; while ( fall -- ) { scanf ( <str> , & n ) ; for ( y = <int> ; y <= n ; y ++ ) for ( x = <int> ; x <= y ; x ++ ) scanf ( <str> , & <unk> [ y ] [ x ] ) ; for ( y = <int> ; y <= n ; y ++ ) { <unk> [ y ] [ <int> ] = <unk> [ y ] [ <int> ] + <unk> [ y - <int> ] [ <int> ] ; <unk> [ y ] [ y ] = <unk> [ y ] [ y ] + <unk> [ y - <int> ] [ y - <int> ] ; for ( x = <int> ; x <= y - <int> ; x ++ ) if ( <unk> [ y - <int> ] [ x - <int> ] > <unk> [ y - <int> ] [ x ] ) <unk> [ y ] [ x ] = <unk> [ y ] [ x ] + <unk> [ y - <int> ] [ x - <int> ] ; else <unk> [ y ] [ x ] = <unk> [ y ] [ x ] + <unk> [ y - <int> ] [ x ] ; } max = <unk> [ n ] [ <int> ] ; for ( x = <int> ; x <= n ; x ++ ) if ( <unk> [ n ] [ x ] > max ) max = <unk> [ n ] [ x ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5731}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] , i , min , n ; long long int min_cost ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } min_cost = ( min * ( n - <int> ) ) ; printf ( <str> , min_cost ) ; } }", "label": 0, "id": 5732}
{"input": "int a [ <int> ] [ <int> ] ; main ( ) { int m = <int> ; int k , l , n ; int test ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { for ( l = <int> ; l <= k ; l ++ ) { scanf ( <str> , & a [ k ] [ l ] ) ; } } for ( k = <int> ; k < n ; k ++ ) { m = findmax ( m , tri ( <int> , n , k ) ) ; } printf ( <str> , m ) ; } } int findmax ( int a , int b ) { return ( a > b ? a : b ) ; } int tri ( int sum , int i , int j ) { if ( i == <int> ) return ( sum ) ; if ( j == <int> ) { sum = sum + a [ i - <int> ] [ <int> ] ; i -- ; tri ( sum , i , j ) ; } else { int x = findmax ( a [ i - <int> ] [ j - <int> ] , a [ i - <int> ] [ j ] ) ; if ( x == a [ i - <int> ] [ j - <int> ] ) { i -- ; j -- ; } else { i -- ; } sum = sum + x ; tri ( sum , i , j ) ; } }", "label": 3, "id": 5733}
{"input": "int main ( ) { long long n , a , i , sum , min ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; min = a ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 5734}
{"input": "int main ( ) { int n , k , i , j ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & k ) ; int a [ k ] [ k ] ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = k - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; n -- ; } }", "label": 0, "id": 5735}
{"input": "int main ( ) { int t ; long a [ <int> ] , n , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ <int> ] ; else { if ( a [ i ] < min ) min = a [ i ] ; } } if ( n >= <int> && n <= <int> ) { i = min * ( n - <int> ) ; printf ( <str> , i ) ; } else if ( n > <int> && n <= <int> ) { i = min * ( n - <int> ) ; printf ( <str> , i ) ; } else if ( n > <int> && n <= <int> ) { i = min * ( n - <int> ) ; printf ( <str> , i ) ; } } return <int> ; }", "label": 0, "id": 5736}
{"input": "long int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int tc = <int> ; tc < t ; tc ++ ) { long int a , b ; scanf ( <str> , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 5737}
{"input": "int main ( ) { int i , j , a [ <int> ] , b [ <int> ] , k , l , m , n , o ; scanf ( <str> , & i ) ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] , & b [ j ] ) ; } for ( j = <int> ; j < i ; j ++ ) { l = <int> ; if ( a [ j ] < b [ j ] ) k = a [ j ] ; else k = b [ j ] ; for ( m = <int> ; m <= k ; m ++ ) { if ( ( a [ j ] % m == <int> ) && ( b [ j ] % m == <int> ) ) l = <int> ; n = m ; } if ( l == <int> ) n = <int> ; k = a [ j ] ; for ( m = k ; m <= a [ j ] * b [ j ] ; m ++ ) { if ( ( m % a [ j ] == <int> ) && ( m % b [ j ] == <int> ) ) { o = m ; break ; } } printf ( <str> , n , o ) ; printf ( <str> ) ; } return <int> ; }", "label": 2, "id": 5738}
{"input": "int max ( int i , int j ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int r , i , j ; scanf ( <str> , & r ) ; int arr [ r ] [ r ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = r - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + max ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int i , int j ) { int k ; i > j ? ( k = i ) : ( k = j ) ; return k ; }", "label": 0, "id": 5739}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int l , i , j ; scanf ( <str> , & l ) ; int a [ l ] [ l ] ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5740}
{"input": "int main ( ) { int n , j ; int i , t , min ; int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j == <int> ) { min = a [ j ] ; } if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5741}
{"input": "int main ( ) { int total , n , i , j ; scanf ( <str> , & total ) ; while ( total -- ) { scanf ( <str> , & n ) ; int temp [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & temp [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { temp [ i ] [ j ] += Max ( temp [ i + <int> ] [ j ] , temp [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , temp [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5742}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int t , i , j , l ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = l - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 5743}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int i ; for ( i = <int> ; i < T ; i ++ ) { int n ; scanf ( <str> , & n ) ; long long int arr [ n ] ; int j ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } int len = <int> ; int sum = <int> ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( arr [ j + <int> ] >= arr [ j ] ) { len ++ ; } else { sum += ( ( len * ( len - <int> ) ) / <int> ) ; len = <int> ; } } if ( len > <int> ) { sum += ( ( len * ( len - <int> ) ) / <int> ) ; } printf ( <str> , sum + n ) ; } return <int> ; }", "label": 0, "id": 5744}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int n , j ; scanf ( <str> , & n ) ; int a [ n ] , b [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; int k = <int> , s = <int> ; while ( k < ( n - <int> ) ) { if ( a [ k ] < a [ k + <int> ] ) { a [ k + <int> ] = a [ k ] ; s = s + a [ k ] ; } else { s = s + a [ k + <int> ] ; } k ++ ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 5745}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int j , lines , k ; scanf ( <str> , & lines ) ; int ar [ lines ] [ lines ] ; for ( j = <int> ; j < lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & ar [ j ] [ k ] ) ; } } for ( j = lines - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { ar [ j ] [ k ] += max ( ar [ j + <int> ] [ k ] , ar [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , ar [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5746}
{"input": "int main ( ) { int m , n , q , ans ; int t , i , j ; int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = m - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = <int> ; } return <int> ; }", "label": 0, "id": 5747}
{"input": "int main ( void ) { int t , a , b , prod , gcd , lcm ; scanf ( <str> , & t ) ; while ( ( t >= <int> ) && ( t <= <int> ) ) { scanf ( <str> , & a , & b ) ; prod = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; gcd = b ; if ( b > a ) b = b - a ; gcd = b ; lcm = prod / gcd ; } printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 5748}
{"input": "long long int ar [ <int> ] ; void quick ( long long int arr [ ] , long long int low , long long int up ) ; long long int partition ( long long int arr [ ] , long long int low , long long int up ) ; int main ( ) { int t , i ; long long int n ; long long int sum ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; } quick ( ar , <int> , n - <int> ) ; sum = ar [ <int> ] * ( n - <int> ) ; printf ( <str> , sum ) ; } return <int> ; } void quick ( long long int arr [ ] , long long int low , long long int up ) { long long int pivloc ; if ( low >= up ) return ; pivloc = partition ( arr , low , up ) ; quick ( arr , low , pivloc - <int> ) ; quick ( arr , pivloc + <int> , up ) ; } long long int partition ( long long int arr [ ] , long long int low , long long int up ) { long long int temp , i , j , pivot ; i = low + <int> ; j = up ; pivot = arr [ low ] ; while ( i <= j ) { while ( arr [ i ] < pivot && i < up ) i ++ ; while ( arr [ j ] > pivot ) j -- ; if ( i < j ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i ++ ; j -- ; } else i ++ ; } arr [ low ] = arr [ j ] ; arr [ j ] = pivot ; return j ; }", "label": 0, "id": 5749}
{"input": "int main ( void ) { int t , i , j , n , k ; scanf ( <str> , & t ) ; for ( j = <int> ; j <= t ; j ++ ) { scanf ( <str> , & n ) ; int ar [ n ] ; int c = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( ar [ i ] < ar [ i - <int> ] ) { c += ar [ i ] ; } else { ar [ i ] = ar [ i - <int> ] ; c += ar [ i ] ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 5750}
{"input": "int main ( ) { int i , j , arr [ <int> ] [ <int> ] , max = <int> , row , k , col , l = <int> , m ; scanf ( <str> , & m ) ; while ( l < m ) { col = <int> ; max = <int> ; scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; arr [ i ] [ j ] = <int> ; } for ( k = <int> ; k <= j + <int> ; k ++ ) arr [ i ] [ k ] = <int> ; max = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < row - <int> ; i ++ ) { if ( ( arr [ i + <int> ] [ col ] + arr [ i + <int> ] [ col ] ) > ( arr [ i + <int> ] [ col + <int> ] + arr [ i + <int> ] [ col + <int> ] ) ) { max += arr [ i + <int> ] [ col ] ; col = <int> ; } else { max += arr [ i + <int> ] [ col + <int> ] ; col = col + <int> ; } } printf ( <str> , max ) ; l ++ ; } return ( <int> ) ; }", "label": 1, "id": 5751}
{"input": "int max ( int , int ) ; int main ( int argc , char * * argv ) { int n , t , i , j , k = <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } k ++ ; } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } return EXIT_SUCCESS ; } int max ( int m , int l ) { if ( m > l ) { return m ; } else { return l ; } }", "label": 0, "id": 5752}
{"input": "int main ( ) { int m ; long long n , a , i , min = <int> ; scanf ( <str> , & m ) ; while ( m -- ) { scanf ( <str> , & n ) ; i = <int> ; while ( i < n ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; i ++ ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 5753}
{"input": "int hcf ( int b , int c ) ; int lcm ( int b , int c ) ; int main ( ) { int a , i , b , c , d , e ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b , & c ) ; d = hcf ( b , c ) ; e = lcm ( b , c ) ; printf ( <str> , d , e ) ; } } int hcf ( int b , int c ) { int min , j ; if ( b < c ) min = b ; else min = c ; if ( b % min == <int> && c % min == <int> ) return min ; for ( j = min / <int> ; j >= <int> ; j -- ) { if ( b % j == <int> && c % j == <int> ) return j ; } return <int> ; } int lcm ( int b , int c ) { int max , j , lcm = <int> ; if ( b > c ) max = b ; else max = c ; for ( j = <int> ; j <= max ; j ++ ) { while ( b % j == <int> || c % j == <int> ) { if ( b % j == <int> ) b = b / j ; if ( c % j == <int> ) c = c / j ; lcm = lcm * j ; } } return lcm ; }", "label": 2, "id": 5754}
{"input": "int main ( ) { int n , a , a1 , i , count , c , n1 , arr [ <int> ] ; scanf ( <str> , & n1 ) ; while ( n1 -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; count = <int> ; c = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( c >= arr [ i ] ) c = arr [ i ] ; count += c ; } printf ( <str> , count - arr [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5755}
{"input": "void main ( ) { int t , l , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; int arr [ l ] [ l ] ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5756}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int num = <int> , k = <int> , m = <int> , i = <int> , j = <int> ; scanf ( <str> , & num ) ; for ( m = <int> ; m < num ; m ++ ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = k - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { int c = a [ i ] [ j ] ; int d = a [ i ] [ j + <int> ] ; if ( c > d ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + c ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + d ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5757}
{"input": "int main ( ) { int test ; int a , b ; int hcf , lcm ; int rem ; int a1 , b1 ; scanf ( <str> , & test ) ; while ( test ) { scanf ( <str> , & a , & b ) ; a1 = a ; b1 = b ; while ( a1 != b1 ) { if ( a1 > b1 ) a1 -= b1 ; else b1 -= a1 ; } hcf = a1 ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; test -- ; } return <int> ; }", "label": 1, "id": 5758}
{"input": "int main ( ) { int n , c , i , j ; int t , k ; scanf ( <str> , & t ) ; int ans [ t ] ; for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & n ) ; int ar [ n ] ; for ( i = <int> ; i <= n - <int> ; i ++ ) scanf ( <str> , & ar [ i ] ) ; c = <int> ; for ( i = <int> ; i <= n - <int> ; i ++ ) { c ++ ; for ( j = i + <int> ; j <= n - <int> ; j ++ ) { if ( ar [ j ] > ar [ j - <int> ] ) c ++ ; else break ; } } ans [ k - <int> ] = c ; } for ( i = <int> ; i <= t - <int> ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 0, "id": 5759}
{"input": "int main ( void ) { long int a = <int> , b , c , t , n , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & b ) ; if ( a > b ) a = b ; } c = a * ( n - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 5760}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; int j , c = <int> ; long long int a [ n ] ; for ( j = <int> ; j <= n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = i ; j <= n - <int> ; j ++ ) { if ( ( a [ j ] < a [ j + <int> ] ) || ( a [ j ] == a [ j + <int> ] ) ) c ++ ; else break ; } } printf ( <str> , n + c ) ; } return <int> ; }", "label": 2, "id": 5761}
{"input": "int main ( ) { int i , j , n , nol , input [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & nol ) ; for ( i = <int> ; i < nol ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & input [ i ] [ j ] ) ; } for ( i = nol - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ( input [ i ] [ j ] + input [ i + <int> ] [ j ] ) >= ( input [ i ] [ j ] + input [ i + <int> ] [ j + <int> ] ) ) input [ i ] [ j ] = input [ i ] [ j ] + input [ i + <int> ] [ j ] ; else input [ i ] [ j ] = input [ i ] [ j ] + input [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , input [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 5762}
{"input": "int main ( ) { long long int i , min , T , j , n , arr ; scanf ( <str> , & T ) ; for ( j = <int> ; j <= T ; j ++ ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr ) ; if ( arr < min ) min = arr ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 5763}
{"input": "int a [ <int> ] [ <int> ] , soln [ <int> ] [ <int> ] , size ; int main ( void ) { int case_count , i , j ; scanf ( <str> , & case_count ) ; while ( case_count ) { scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) soln [ i ] [ j ] = <int> ; for ( i = <int> ; i < size ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , calc_max ( <int> , <int> ) ) ; case_count -- ; } } int calc_max ( int i , int j ) { int c , b ; if ( i == size - <int> ) return a [ i ] [ j ] ; else { if ( soln [ i + <int> ] [ j ] != <int> ) c = soln [ i + <int> ] [ j ] ; else c = calc_max ( i + <int> , j ) ; if ( soln [ i + <int> ] [ j + <int> ] != <int> ) b = soln [ <int> + i ] [ j + <int> ] ; else b = calc_max ( i + <int> , j + <int> ) ; soln [ i ] [ j ] = ( c > b ? c : b ) + a [ i ] [ j ] ; return soln [ i ] [ j ] ; } }", "label": 0, "id": 5764}
{"input": "int main ( ) { int t ; long long a , b , i , mul , gcd , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; mul = a * b ; if ( a < b ) { for ( ; a != <int> ; ) { x = a ; a = b % a ; b = x ; } gcd = b ; } else if ( b < a ) { for ( ; b != <int> ; ) { x = b ; b = a % b ; a = x ; } gcd = a ; } printf ( <str> , gcd , mul / gcd ) ; } return <int> ; }", "label": 0, "id": 5765}
{"input": "int main ( ) { int t , n , i = <int> , k , a [ <int> ] , count = <int> ; long long int sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( count = <int> , i = <int> ; count < n ; i ++ , count ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) { if ( a [ i - <int> ] < a [ i ] ) { k = a [ i - <int> ] ; sum = sum + a [ i - <int> ] ; } else { k = a [ i ] ; sum = sum + a [ i ] ; } i = <int> ; a [ i ] = k ; } } count = <int> ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5766}
{"input": "int sum ( int , int [ <int> ] [ <int> ] ) ; int main ( ) { int n , r , o , p , q , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & r ) ; for ( o = <int> ; o < r ; o ++ ) for ( q = <int> ; q <= o ; q ++ ) { scanf ( <str> , & a [ o ] [ q ] ) ; } printf ( <str> , sum ( r , a ) ) ; } } int sum ( int n , int a [ <int> ] [ <int> ] ) { int i , j ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { a [ i - <int> ] [ j ] += max ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; } return a [ <int> ] [ <int> ] ; }", "label": 0, "id": 5767}
{"input": "int greater1 ( int i , int j ) { if ( i > j ) return ( i ) ; else return ( j ) ; } int find_sum ( int a [ ] [ <int> ] , int a_len ) { int i , j ; for ( i = a_len ; i > <int> ; i -- ) { for ( j = <int> ; j <= ( i - <int> ) ; j ++ ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + greater1 ( a [ i ] [ j ] , a [ i ] [ j + <int> ] ) ; } } return ( a [ <int> ] [ <int> ] ) ; } int main ( ) { int n , t , ans ; int a [ <int> ] [ <int> ] , i , j , k ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i - <int> ] [ j - <int> ] ) ; } ans = find_sum ( a , n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5768}
{"input": "int main ( ) { int sum , temp , j , t , n , i , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t != <int> ) { t -- ; sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } if ( n % <int> != <int> ) for ( i = <int> ; i < n / <int> ; i ++ ) sum = sum + ( a [ i ] * <int> ) ; else { for ( i = <int> ; i < ( n / <int> ) - <int> ; i ++ ) sum = sum + ( a [ i ] * <int> ) ; sum = sum + a [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 5769}
{"input": "int a [ <int> ] ; int main ( ) { int n , t , i ; scanf ( <str> , & n ) ; while ( n -- ) { int key ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) scanf ( <str> , & a [ i ] ) ; key = a [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { if ( key > a [ i ] ) key = a [ i ] ; } long int k = key * ( t - <int> ) ; printf ( <str> , k ) ; } return <int> ; }", "label": 0, "id": 5770}
{"input": "int main ( ) { int i , t , count , n , sub ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> , sub = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) count ++ ; else { sub += ( count * ( count + <int> ) / <int> ) ; count = <int> ; } } printf ( <str> , sub + n ) ; } return <int> ; }", "label": 1, "id": 5771}
{"input": "int main ( ) { long a [ <int> ] , n , i , j , k , min , b , l , m ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & m ) ; for ( j = <int> ; j < m ; j ++ ) { scanf ( <str> , & b ) ; a [ j ] = b ; } min = a [ <int> ] ; for ( k = <int> ; k < m ; k ++ ) { if ( min > a [ k ] ) min = a [ k ] ; } l = min * ( m - <int> ) ; printf ( <str> , l ) ; } return <int> ; }", "label": 1, "id": 5772}
{"input": "int main ( void ) { int i , n , j , k , test , matrix [ <int> ] , smallest ; scanf ( <str> , & test ) ; for ( i = <int> ; i <= test ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & matrix [ j ] ) ; } smallest = matrix [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( matrix [ k ] < smallest ) { smallest = matrix [ k ] ; } } printf ( <str> , ( smallest * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 5773}
{"input": "int max ( int t1 , int t2 ) ; int solve ( int i , int j ) ; int arr [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] , n ; int main ( ) { int a ; scanf ( <str> , & a ) ; while ( a -- ) { int t , i = <int> , j ; scanf ( <str> , & n ) ; for ( t = <int> ; t <= n ; t ++ ) { for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } i ++ ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { cache [ i ] [ j ] = <int> ; } } printf ( <str> , solve ( <int> , <int> ) ) ; } } int solve ( int i , int j ) { int t , t1 , t2 ; if ( i > n ) return <int> ; if ( cache [ i ] [ j ] != <int> ) return cache [ i ] [ j ] ; t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = arr [ i ] [ j ] + max ( t1 , t2 ) ; cache [ i ] [ j ] = t ; return t ; } int max ( int t1 , int t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; }", "label": 1, "id": 5774}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) { int temp = a ; a = b ; b = temp ; } for ( int i = a ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; break ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 5775}
{"input": "int main ( void ) { int a [ <int> ] , i , j , p , m , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & p ) ; for ( j = <int> ; j <= p ; j ++ ) scanf ( <str> , & a [ j ] ) ; m = <int> ; for ( j = <int> ; j <= p ; j + <int> ) { if ( a [ j ] < a [ j + <int> ] ) m = m + a [ j ] ; else m = m + a [ j + <int> ] ; } printf ( <str> , m ) ; } return <int> ; }", "label": 3, "id": 5776}
{"input": "int main ( ) { int testcases , row , i , k , array [ <int> ] [ <int> ] ; scanf ( <str> , & testcases ) ; while ( testcases -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( k = <int> ; k <= i ; k ++ ) { scanf ( <str> , & array [ i ] [ k ] ) ; } } for ( i = row - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k <= i ; k ++ ) { array [ i ] [ k ] = array [ i + <int> ] [ k ] >= array [ i + <int> ] [ k + <int> ] ? array [ i + <int> ] [ k ] + array [ i ] [ k ] : array [ i + <int> ] [ k + <int> ] + array [ i ] [ k ] ; } } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5777}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , k , ans = <int> , l , m ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( k = <int> ; k <= i ; k ++ ) scanf ( <str> , & a [ i ] [ k ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( k = <int> ; k <= i ; k ++ ) { if ( a [ i + <int> ] [ k ] > a [ i + <int> ] [ k + <int> ] ) a [ i ] [ k ] += a [ i + <int> ] [ k ] ; else a [ i ] [ k ] += a [ i + <int> ] [ k + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5778}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5779}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( long int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } long int min = <int> ; for ( long int j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 5780}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , c ; scanf ( <str> , & a , & b ) ; c = a * b ; if ( a < b ) { int temp = a ; a = b ; b = temp ; } while ( b != <int> ) { int rem = a % b ; a = b ; b = rem ; } printf ( <str> , a , c / a ) ; } return <int> ; }", "label": 1, "id": 5781}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 5782}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; int n , i , j ; int a [ <int> ] [ <int> ] ; while ( test > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) > ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ? ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) : ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; test -- ; } return <int> ; }", "label": 0, "id": 5783}
{"input": "int main ( ) { int triangle [ <int> ] [ <int> ] ; int max = - <int> ; int i , j ; int T , N ; int temp1 , temp2 ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i <= N ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangle [ i ] [ j ] ) ; temp1 = triangle [ i ] [ j ] + triangle [ i - <int> ] [ j - <int> ] ; temp2 = triangle [ i ] [ j ] + triangle [ i - <int> ] [ j ] ; if ( temp1 > temp2 ) { triangle [ i ] [ j ] = temp1 ; if ( temp1 >= max ) { max = temp1 ; } } else { triangle [ i ] [ j ] = temp2 ; if ( temp2 > max ) { max = temp2 ; } } } } printf ( <str> , max ) ; max = - <int> ; } return <int> ; }", "label": 1, "id": 5784}
{"input": "int gcd ( int a , int b ) { if ( b % a == <int> ) return a ; else return gcd ( b % a , a ) ; return <int> ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; long long int g ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 1, "id": 5785}
{"input": "int main ( ) { long t , n , min , x , c , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & x ) ; if ( x < min ) { min = x ; } } c = min * ( n - <int> ) ; printf ( <str> , c ) ; t -- ; } return ( <int> ) ; }", "label": 2, "id": 5786}
{"input": "int n , i , j , k , l , T , n ; long long unsigned int a , b , c ; int main ( ) { scanf ( <str> , & T ) ; long long unsigned int M [ T ] [ <int> ] ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a , & b ) ; c = b ; while ( a % c != <int> || b % c != <int> ) { while ( a % c != <int> ) { c = a % c ; } while ( b % c != <int> ) { c = b % c ; } } M [ i ] [ <int> ] = c ; M [ i ] [ <int> ] = ( a * b ) ; } for ( l = <int> ; l < T ; l ++ ) { printf ( <str> , M [ l ] [ <int> ] , M [ l ] [ <int> ] ) ; } }", "label": 1, "id": 5787}
{"input": "int hcf ( int n1 , int n2 ) { if ( n1 == <int> ) return n2 ; return hcf ( n2 % n1 , n1 ) ; } int main ( ) { int a , b , t ; int c , d , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = hcf ( a , b ) ; printf ( <str> , c , ( a * b ) / c ) ; } return <int> ; }", "label": 1, "id": 5788}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { max = ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = a [ i ] [ j ] + max ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5789}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] , i , j , s = <int> , y = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j <= i ) scanf ( <str> , & a [ i ] [ j ] ) ; else a [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { s = <int> ; for ( j = <int> ; j < n ; j ++ ) { s = s + a [ j ] [ i ] ; } if ( y < s ) y = s ; } printf ( <str> , y + <int> ) ; } return <int> ; }", "label": 1, "id": 5790}
{"input": "main ( ) { int t , a , b , g , l , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } r = a ; while ( b % a != <int> ) { a = b % a ; } g = a ; l = r * b / g ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 5791}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int arr2 [ <int> ] [ <int> ] ; int temp = <int> , input , x , i = <int> , j = <int> ; scanf ( <str> , & input ) ; while ( input != <int> ) { scanf ( <str> , & x ) ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { arr2 [ i ] [ j ] = <int> ; arr [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; arr2 [ i ] [ j ] = arr [ i ] [ j ] ; } } for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] < ( arr2 [ i + <int> ] [ j ] + arr [ i ] [ j ] ) ) arr [ i + <int> ] [ j ] = arr2 [ i + <int> ] [ j ] + arr [ i ] [ j ] ; if ( arr [ i + <int> ] [ j + <int> ] < ( arr2 [ i + <int> ] [ j + <int> ] + arr [ i ] [ j ] ) ) arr [ i + <int> ] [ j + <int> ] = arr2 [ i + <int> ] [ j + <int> ] + arr [ i ] [ j ] ; if ( temp < arr [ i ] [ j ] ) temp = arr [ i ] [ j ] ; } } printf ( <str> , temp ) ; input -- ; } return <int> ; }", "label": 1, "id": 5792}
{"input": "int main ( ) { int a , b , t , temp1 , dividend , divisor , gcd , i , rem ; long long int temp , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; temp = a * b ; if ( a < b ) { temp1 = a ; a = b ; b = temp1 ; } dividend = a ; divisor = b ; while ( rem > <int> ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; } gcd = rem ; lcm = temp / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 3, "id": 5793}
{"input": "int main ( ) { long long t , n , x , y , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & y ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; y = ( y > x ? x : y ) ; } i -- ; printf ( <str> , y * i ) ; } return <int> ; }", "label": 0, "id": 5794}
{"input": "int main ( ) { int t , i , a [ <int> ] ; long long int n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) min = a [ i ] ; else if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5795}
{"input": "int main ( void ) { int t ; int i ; long long int num , n , count , k , temp ; long long int sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { temp = <int> ; count = <int> ; sum = <int> ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { scanf ( <str> , & num ) ; if ( num >= temp ) { count ++ ; } else { sum = sum + ( count * ( count + <int> ) / <int> ) ; count = <int> ; } temp = num ; } sum = sum + ( count * ( count + <int> ) / <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 5796}
{"input": "int main ( ) { long long int t , n , x = <int> , i , l = <int> , a [ <int> ^ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { x = <int> ; l = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i + <int> ] > a [ i ] ) l ++ ; else { x = x + ( l * ( l - <int> ) ) / <int> ; l = <int> ; } } printf ( <str> , x + n ) ; } return <int> ; }", "label": 3, "id": 5797}
{"input": "void func ( int a , int b ) ; void maxmin ( int a , int b , int c ) ; void merge ( int a , int b ) ; int s = <int> , c = <int> , row ; int b [ <int> ] ; int a [ <int> ] ; int main ( ) { int n , t , flag ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & row ) ; t = ( row * ( row + <int> ) ) / <int> ; for ( flag = <int> ; flag <= t ; flag ++ ) scanf ( <str> , & a [ flag ] ) ; func ( <int> , <int> ) ; int yu , x ; yu = <int> , x = c ; merge ( yu , x ) ; printf ( <str> , b [ x ] ) ; n -- ; } return <int> ; } void func ( int i , int r ) { s += a [ i ] ; if ( a [ i + r ] != <int> ) { func ( ( i + r ) , ( r + <int> ) ) ; func ( ( i + r + <int> ) , ( r + <int> ) ) ; } if ( r == row ) { c ++ ; b [ c ] = s ; } s = s - a [ i ] ; } void maxmin ( int p , int q , int r ) { int temp = <int> ; if ( b [ p ] > b [ q + <int> ] ) { temp = b [ p ] ; b [ p ] = b [ q + <int> ] ; b [ q + <int> ] = temp ; } if ( b [ q ] > b [ r ] ) { temp = b [ q ] ; b [ q ] = b [ r ] ; b [ r ] = temp ; } } void merge ( int p , int r ) { int q ; if ( p < r ) { q = ( p + r ) / <int> ; merge ( p , q ) ; merge ( q + <int> , r ) ; maxmin ( p , q , r ) ; } }", "label": 2, "id": 5798}
{"input": "int arr [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int trial ; scanf ( <str> , trial ) ; while ( trial -- ) { int sz , i , j , val , hi ; scanf ( <str> , & sz ) ; scanf ( <str> , & arr [ <int> ] [ <int> ] ) ; for ( i = <int> ; i < sz ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & val ) ; arr [ i ] [ j ] = max ( val + arr [ i - <int> ] [ j ] , val + arr [ i - <int> ] [ j - <int> ] ) ; } } hi = arr [ sz - <int> ] [ <int> ] ; for ( i = <int> ; i < sz ; i ++ ) if ( arr [ sz - <int> ] [ i ] > hi ) hi = arr [ sz - <int> ] [ i ] ; printf ( <str> , hi ) ; } return <int> ; }", "label": 3, "id": 5799}
{"input": "void main ( ) { int t , i , j , c , <unk> , <unk> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & <unk> ) ; int arr [ <unk> ] ; c = <int> ; <unk> = <int> ; scanf ( <str> , & arr [ <int> ] ) ; for ( j = <int> ; j < <unk> ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( arr [ j ] >= arr [ j - <int> ] ) { c ++ ; <unk> += c ; } else { c = <int> ; <unk> ++ ; } } printf ( <str> , <unk> ) ; } }", "label": 0, "id": 5800}
{"input": "int main ( void ) { int t , n , i , num , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num ) ; if ( num < min ) min = num ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 5801}
{"input": "int main ( ) { int a , b , c , i , j , k , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; int num [ a + <int> ] [ a + <int> ] ; for ( i = <int> ; i <= a ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; } } int sum [ a + <int> ] [ a + <int> ] ; for ( i = <int> ; i <= a ; i ++ ) { for ( j = <int> ; j <= a ; j ++ ) { sum [ i ] [ j ] = <int> ; } } int q = <int> ; for ( j = <int> ; j <= a ; j ++ ) { sum [ a ] [ j ] = num [ a ] [ j ] ; } for ( i = a - <int> ; i > <int> ; i -- ) { q = <int> ; for ( j = <int> ; j <= i ; j ++ ) { sum [ i ] [ j ] = num [ i ] [ j ] ; if ( sum [ i + <int> ] [ j + <int> ] < sum [ i + <int> ] [ j ] ) q = sum [ i + <int> ] [ j ] ; else q = sum [ i + <int> ] [ j + <int> ] ; sum [ i ] [ j ] = q + sum [ i ] [ j ] ; } } printf ( <str> , sum [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5802}
{"input": "int main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5803}
{"input": "int main ( ) { int t , n , i , j , m ; scanf ( <str> , & t ) ; while ( t -- ) { int arr [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } scanf ( <str> , & m ) ; return <int> ; }", "label": 3, "id": 5804}
{"input": "int main ( ) { int test ; long int a , b , c , d ; printf ( <str> ) ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & a , & b ) ; c = a ; d = b ; while ( a != b ) { if ( a < b ) { b = b - a ; } else a = a - b ; } printf ( <str> , a , ( c * d ) / a ) ; } return <int> ; }", "label": 1, "id": 5805}
{"input": "int main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator , i , t ; scanf ( <str> , t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 3, "id": 5806}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long unsigned int a , b , temp , l ; scanf ( <str> , & a , & b ) ; double lcm = a * b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } while ( a % b != <int> ) { temp = b ; b = a % b ; a = temp ; } lcm = lcm / b ; printf ( <str> , b , ( long long unsigned int ) lcm ) ; } return <int> ; }", "label": 0, "id": 5807}
{"input": "int main ( void ) { int t , i , j ; long int a , b , min ; scanf ( <str> , & t ) ; while ( j < t ) { long long int gcd ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) min = b ; else min = a ; for ( i = min ; i > <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { gcd = i ; break ; } printf ( <str> , gcd , ( ( a * b ) / gcd ) ) ; j ++ ; } return <int> ; }", "label": 2, "id": 5808}
{"input": "int main ( void ) { int matrix [ <int> ] [ <int> ] , t = <int> , sum = <int> , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & matrix [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( ( j <= i - <int> ) && j > <int> ) matrix [ i ] [ j ] = ( matrix [ i - <int> ] [ j ] + matrix [ i ] [ j ] ) > ( matrix [ i - <int> ] [ j - <int> ] + matrix [ i ] [ j ] ) ? matrix [ i - <int> ] [ j ] + matrix [ i ] [ j ] : matrix [ i - <int> ] [ j - <int> ] + matrix [ i ] [ j ] ; else if ( j == <int> ) matrix [ i ] [ j ] = matrix [ i - <int> ] [ j ] + matrix [ i ] [ j ] ; else matrix [ i ] [ j ] = matrix [ i - <int> ] [ j - <int> ] + matrix [ i ] [ j ] ; } } for ( j = <int> ; j < n - <int> ; j ++ ) if ( matrix [ n - <int> ] [ j ] > sum ) sum = matrix [ n - <int> ] [ j ] ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5809}
{"input": "main ( ) { long unsigned int i , j , x , y , k , sum = <int> ; scanf ( <str> , & i ) ; for ( j = <int> ; j <= i ; j ++ ) { printf ( <str> ) ; scanf ( <str> , & x , & y ) ; for ( ; ; ) { sum = sum + x ; if ( sum % y == <int> ) { break ; } } for ( ; ; ) { if ( x % y == <int> ) break ; else { k = x % y ; x = y ; y = k ; } } printf ( <str> , y , sum ) ; sum = <int> ; } return <int> ; }", "label": 2, "id": 5810}
{"input": "int main ( ) { int t ; long long a , b , c , d , ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; ans = <int> ; a -- ; d = <int> ; while ( a -- ) { scanf ( <str> , & c ) ; if ( b < c ) { ans = ans + d ; d ++ ; } else { ans ++ ; d = <int> ; } b = c ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 5811}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { return ( gcd ( b , a % b ) ) ; } } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( ( a * b ) / gcd ( a , b ) ) ) ; t -- ; } return <int> ; }", "label": 1, "id": 5812}
{"input": "int main ( void ) { int curr [ <int> ] , prev [ <int> ] ; int input , i , j , t , n , max ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & prev [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & input ) ; if ( j == <int> ) curr [ j ] = input + prev [ j ] ; else if ( j == i ) curr [ j ] = input + prev [ j - <int> ] ; else if ( prev [ j ] > prev [ j - <int> ] ) curr [ j ] = input + prev [ j ] ; else curr [ j ] = input + prev [ j - <int> ] ; } for ( j = <int> ; j <= i ; j ++ ) prev [ j ] = curr [ j ] ; } for ( j = <int> , max = <int> ; j < n ; j ++ ) { if ( curr [ max ] < curr [ j ] ) max = j ; } printf ( <str> , curr [ max ] ) ; } return <int> ; }", "label": 0, "id": 5813}
{"input": "int main ( ) { int t , c , i , j , k ; long n ; int a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; c = <int> ; for ( i = <int> ; i < n ; i ++ ) { c ++ ; scanf ( <str> , & a [ i ] ) ; } for ( k = <int> ; k < n - <int> ; k ++ ) { j = k ; while ( j <= n ) { if ( a [ j ] < a [ j + <int> ] ) { c ++ ; j ++ ; } else break ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 5814}
{"input": "int main ( ) { unsigned long long int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { unsigned long long int a , l = <int> , c , j ; scanf ( <str> , & a ) ; unsigned long long int arr [ a ] ; for ( j = <int> ; j < a ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( arr [ j ] < l ) { l = arr [ j ] ; } } c = l * ( a - <int> ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 5815}
{"input": "int main ( ) { long int t , n , i , a [ <int> ] ; long long int r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] ) ; r = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( r > a [ i ] ) r = a [ i ] ; } r = r * ( n - <int> ) ; printf ( <str> , r ) ; } return <int> ; }", "label": 1, "id": 5816}
{"input": "long int gcd ( long int a , long int b ) { if ( b != <int> ) return gcd ( b , a % b ) ; else return a ; } long long int lcm ( int a , int b ) { return ( ( a * b ) / gcd ( a , b ) ) ; } int main ( ) { int n , i ; long long int a [ <int> ] , b [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , gcd ( a [ i ] , b [ i ] ) , lcm ( a [ i ] , b [ i ] ) ) ; } return <int> ; }", "label": 1, "id": 5817}
{"input": "int main ( ) { int i , j , max , val , idx , N , NN , sum , tempidx ; scanf ( <str> , & N ) ; while ( N -- ) { scanf ( <str> , & NN ) ; sum = <int> ; scanf ( <str> , & val ) ; sum += val ; idx = <int> ; for ( i = <int> ; i < NN ; i ++ ) { max = <int> ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & val ) ; if ( val > max && ( ( j == idx ) || ( j == idx + <int> ) ) ) { max = val ; tempidx = j ; } } idx = tempidx ; sum += max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5818}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , n , i , j , x , k ; int a [ <int> ] [ <int> ] , s [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; for ( x = <int> ; x < t ; x ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) { s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; } else if ( j == <int> ) { s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j ] ; } else { s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - <int> ] [ j ] , s [ i - <int> ] [ j - <int> ] ) ; } } } for ( i = <int> ; i < n ; i ++ ) { if ( s [ n - <int> ] [ i ] > k ) k = s [ n - <int> ] [ i ] ; } printf ( <str> , k ) ; } return <int> ; }", "label": 0, "id": 5819}
{"input": "int main ( void ) { int a , b , gcd , lcm , p , i , test ; scanf ( <str> , & test ) ; for ( i = <int> ; i <= test ; i ++ ) { scanf ( <str> , & a , & b ) ; p = a * b ; while ( a != b ) { if ( a > b ) { a -= b ; } else { b -= a ; } } gcd = a ; lcm = p / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5820}
{"input": "int gcd ( int a , int b ) { return b == <int> ? a : gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( ; t > <int> ; -- t ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) ) ; printf ( <str> , lcm ( a , b ) ) ; } }", "label": 1, "id": 5821}
{"input": "void main ( ) { int tcase , arr [ <int> ] , N , i , j , count ; scanf ( <str> , & tcase ) ; while ( tcase -- ) { count = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = i ; j < N ; j ++ ) if ( arr [ i ] == arr [ j ] ) count ++ ; printf ( <str> , count ) ; } }", "label": 3, "id": 5822}
{"input": "int main ( ) { int t , i , j , n , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & arr [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j + <int> < n && arr [ j ] > arr [ j + <int> ] ) { temp = arr [ j + <int> ] ; arr [ j + <int> ] = arr [ j ] ; arr [ j ] = temp ; } } } printf ( <str> , arr [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 5823}
{"input": "int main ( ) { int i , a , b , t , n , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) n = b ; else n = a ; for ( i = n ; i >= <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 5824}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int a , b , i ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i , a * b ) ; } } } return <int> ; }", "label": 1, "id": 5825}
{"input": "int main ( ) { int t , n , i , k , p ; scanf ( <str> , & t ) ; while ( t -- ) { k = <int> ; p = <int> ; scanf ( <str> , & n ) ; long long a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] >= a [ i - <int> ] ) k ++ ; else { p = p + ( k * ( k + <int> ) ) / <int> ; k = <int> ; } } if ( k != <int> ) p = p + ( k * ( k + <int> ) ) / <int> ; printf ( <str> , p ) ; } return <int> ; }", "label": 1, "id": 5826}
{"input": "int main ( ) { long int t , n , i , a [ <int> ] , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } p = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) p = a [ i + <int> ] + p ; else p = a [ i ] + p ; } printf ( <str> , p ) ; } return <int> ; }", "label": 1, "id": 5827}
{"input": "int main ( ) { long long int cases , i , u , temp1 = <int> , temp4 = <int> , temp3 = <int> , temp6 , n , k ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { scanf ( <str> , & n ) ; for ( u = <int> ; u <= n ; u ++ ) { temp4 = <int> ; for ( k = <int> ; k < u ; k ++ ) { scanf ( <str> , & temp6 ) ; temp3 = temp6 ; if ( k == <int> ) { temp4 = temp3 ; } if ( temp4 < temp3 ) { temp4 = temp3 ; } temp3 = <int> ; } temp1 += temp4 ; } printf ( <str> , temp1 - <int> ) ; temp1 = <int> ; } return <int> ; }", "label": 1, "id": 5828}
{"input": "int a [ <int> ] ; int main ( void ) { int t , n , i , j , c , x ; long long int s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> , s = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> , c = <int> ; j < n ; j ++ ) { if ( a [ j ] >= a [ j - <int> ] ) c ++ ; else { x = <int> ; break ; } } if ( x ) { s = s + ( c * ( c + <int> ) ) / <int> ; i = j - <int> ; } else s = s + c ; } printf ( <str> , s + n ) ; } return <int> ; }", "label": 0, "id": 5829}
{"input": "int findmax ( int n , int tri [ ] , int loc , int c_row ) { if ( c_row == n ) return tri [ loc ] ; int v1 , v2 ; v1 = findmax ( n , tri , loc + c_row , c_row + <int> ) ; v2 = findmax ( n , tri , loc + c_row + <int> , c_row + <int> ) ; if ( v1 > v2 ) return v1 + tri [ loc ] ; else return v2 + tri [ loc ] ; } int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int n , tot_n ; scanf ( <str> , & n ) ; tot_n = n * ( n + <int> ) / <int> ; int tri [ tot_n ] ; for ( int j = <int> ; j < tot_n ; j ++ ) { scanf ( <str> , & tri [ j ] ) ; } printf ( <str> , findmax ( n , tri , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 5830}
{"input": "int main ( ) { long long int t , n , i , min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 5831}
{"input": "int main ( ) { int i , j , n , t , s , sum , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } s = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { sum = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] + arr [ i ] [ j + <int> ] ; if ( sum > s ) { s = sum ; } } } printf ( <str> , s ) ; t = t - <int> ; } return ( <int> ) ; }", "label": 3, "id": 5832}
{"input": "int main ( ) { int t , i , j ; long n , * a , min , * result ; scanf ( <str> , & t ) ; result = malloc ( sizeof ( long ) * t ) ; for ( i = <int> ; i <= t && i <= <int> ; i ++ ) { scanf ( <str> , & n ) ; a = malloc ( sizeof ( long ) * n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> , min = a [ <int> ] ; i < n ; j ++ , n -- ) if ( min > a [ j ] && min > a [ n - <int> ] ) if ( a [ j ] < a [ n - <int> ] ) min = a [ j ] ; else min = a [ n - <int> ] ; result [ i - <int> ] = min ; } for ( i = <int> ; i < t && i < <int> ; i ++ ) printf ( <str> , result [ i ] ) ; return ( <int> ) ; }", "label": 1, "id": 5833}
{"input": "int main ( ) { int a [ <int> ] , n , s [ <int> ] , i , j , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { s [ <int> ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ j ] ) ; s [ i ] = s [ i - <int> ] + a [ i ] ; for ( j = i - <int> ; j > <int> ; j -- ) { if ( s [ j - <int> ] > s [ j ] ) s [ j ] = s [ j - <int> ] + a [ j ] ; else s [ j ] += a [ j ] ; } } for ( j = <int> , n = <int> ; j <= i ; j ++ ) if ( s [ j ] > n ) n = s [ j ] ; printf ( <str> , n ) ; t -- ; } return <int> ; }", "label": 1, "id": 5834}
{"input": "int gcd ( ) ; void lcm ( ) ; int main ( ) { int a , b , r , T ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & a , & b ) ; r = gcd ( a , b ) ; printf ( <str> , r ) ; lcm ( a , b ) ; T -- ; } return <int> ; } int gcd ( x , y ) { if ( x >= y ) { if ( x % y == <int> ) return y ; else return ( gcd ( x - y , y ) ) ; } else { if ( x % y == <int> ) return y ; else return ( gcd ( x , y - x ) ) ; } } void lcm ( a , b ) { if ( a >= b ) { if ( a % b == <int> ) printf ( <str> , a ) ; else printf ( <str> , ( a * b ) ) ; } else { if ( b % a == <int> ) { printf ( <str> , b ) ; } else printf ( <str> , ( a * b ) ) ; } }", "label": 1, "id": 5835}
{"input": "main ( ) { long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b , i ; scanf ( <str> , & a , & b ) ; if ( a < b ) { for ( i = a ; i >= <int> ; i -- ) { if ( ( ( a % i ) == <int> ) && ( ( b % i ) == <int> ) ) { printf ( <str> , i ) ; break ; } } } else { for ( i = b ; i >= <int> ; i -- ) { if ( ( ( a % i ) == <int> ) && ( ( b % i ) == <int> ) ) { printf ( <str> , i ) ; break ; } } } printf ( <str> , ( a * b ) / i ) ; } }", "label": 2, "id": 5836}
{"input": "int main ( ) { int n , max , i , j , tc , c , rows , k , p ; int sum [ <int> ] ; int a [ <int> ] [ <int> ] ; max = sum [ <int> ] ; sum [ <int> ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & tc ) ; for ( j = <int> ; j < tc ; j ++ ) { scanf ( <str> , & rows ) ; for ( k = <int> ; k < rows ; k ++ ) { for ( c = <int> ; c < rows ; c ++ ) { sum [ k ] = sum [ k ] + a [ k ] [ c ] ; } for ( p = <int> ; p < rows ; p ++ ) { if ( max < sum [ p ] ) max = sum [ p ] ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 5837}
{"input": "int main ( ) { int a , b , T , rem , i , j , lcd ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & b , & a ) ; rem = a ; i = a ; j = b ; while ( rem > <int> ) { rem = b % a ; b = a ; a = rem ; } lcd = i * j / rem ; printf ( <str> , a , lcd ) ; T -- ; } return <int> ; }", "label": 3, "id": 5838}
{"input": "void main ( ) { int T , N , i , j , maxSum ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; int Triangle [ N ] [ N ] , SumTri [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & Triangle [ i ] [ j ] ) ; SumTri [ i ] [ j ] = <int> ; } SumTri [ <int> ] [ <int> ] = Triangle [ <int> ] [ <int> ] ; if ( N > <int> ) { SumTri [ <int> ] [ <int> ] = SumTri [ <int> ] [ <int> ] + Triangle [ <int> ] [ <int> ] ; SumTri [ <int> ] [ <int> ] = SumTri [ <int> ] [ <int> ] + Triangle [ <int> ] [ <int> ] ; } for ( i = <int> ; i < N ; i ++ ) SumTri [ i ] [ <int> ] = SumTri [ i - <int> ] [ <int> ] + Triangle [ i ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( Triangle [ i - <int> ] [ j ] > Triangle [ i - <int> ] [ j - <int> ] ) SumTri [ i ] [ j ] = SumTri [ i - <int> ] [ j ] + Triangle [ i ] ; else SumTri [ i ] [ j ] = SumTri [ i - <int> ] [ j - <int> ] + Triangle [ i ] [ j ] ; } int maxSum = SumTri [ N - <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) if ( SumTri [ N - <int> ] [ i ] > maxSum ) maxSum = SumTri [ N - <int> ] [ i ] ; printf ( <str> , maxSum ) ; } }", "label": 1, "id": 5839}
{"input": "int main ( ) { unsigned long long int i , j , t , k ; scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { scanf ( <str> , & t ) ; unsigned long long int a [ t ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = t - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 2, "id": 5840}
{"input": "int main ( void ) { int T , i , j , k ; long int A , B ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( ( A >= <int> && A <= <int> ) && ( B >= <int> && B <= <int> ) ) { if ( A > B ) { k = <int> ; for ( j = A ; j >= <int> ; j -- ) { if ( A % j == <int> && B % j == <int> ) break ; } printf ( <str> , j ) ; while ( ( A * k ) % B ) k ++ ; printf ( <str> , A * k ) ; } } printf ( <str> ) ; } } return ( <int> ) ; }", "label": 2, "id": 5841}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; void main ( ) { int a , b , n , i , g , l ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } } int gcd ( int a , int b ) { if ( a < b ) gcd ( a , b - a ) ; else if ( a > b ) gcd ( a - b , b ) ; else return a ; } int lcm ( int a , int b ) { return ( a * b ) / ( gcd ( a , b ) ) ; }", "label": 1, "id": 5842}
{"input": "int main ( void ) { int testCase ; int a , b , x , y , t , gcd , lcm ; scanf ( <str> , & testCase ) ; while ( testCase -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5843}
{"input": "int MAX ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int t , i , j , c , n , f = <int> , s , x [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( c = <int> ; c <= j ; c ++ ) { scanf ( <str> , & x [ j ] [ c ] ) ; } } for ( j = n - <int> ; j > <int> ; j -- ) { for ( c = <int> ; c <= j ; c ++ ) { x [ j - <int> ] [ c - <int> ] += MAX ( x [ j ] [ c - <int> ] , x [ j ] [ c ] ) ; } } printf ( <str> , x [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5844}
{"input": "int array [ <int> ] [ <int> ] , memoization [ <int> ] ; int length ; int path ( int row , int column ) { if ( row == length - <int> || column == length - <int> ) { return array [ row ] [ column ] ; } if ( memoization [ row + column ] != - <int> ) return memoization [ row + column ] ; if ( path ( row + <int> , column ) > path ( row + <int> , column + <int> ) ) { memoization [ row + column ] = path ( row + <int> , column ) + array [ row ] [ column ] ; return memoization [ row + column ] ; } else { memoization [ row + column ] = path ( row + <int> , column + <int> ) + array [ row ] [ column ] ; return memoization [ row + column ] ; } } int main ( void ) { int i , j , t , r ; scanf ( <str> , & t ) ; for ( r = <int> ; r < t ; r ++ ) { scanf ( <str> , & length ) ; for ( i = <int> ; i < <int> ; i ++ ) { memoization [ i ] = - <int> ; } for ( i = <int> ; i <= length ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i - <int> ] [ j - <int> ] ) ; } } printf ( <str> , path ( <int> , <int> ) ) ; for ( i = <int> ; i < <int> * length ; i ++ ) { memoization [ i ] = - <int> ; } } return <int> ; }", "label": 1, "id": 5845}
{"input": "int main ( void ) { long long t , n , a [ <int> ] , i , j , cost = { <int> } , k , min ; si ( t ) ; for ( i = <int> ; i < t ; i ++ ) { si ( n ) ; for ( j = <int> ; j < n ; j ++ ) si ( a [ j ] ) ; cost = <int> ; min = <int> ; while ( n != <int> ) { min = <int> ; for ( j = <int> ; j < n ; j ++ ) if ( a [ j ] < a [ min ] ) min = j ; cost += a [ min ] ; if ( min != n - <int> || min != <int> ) if ( a [ min - <int> ] >= a [ min + <int> ] ) n = deletion ( a , n , ( min - <int> ) ) ; else n = deletion ( a , n , ( min + <int> ) ) ; else if ( min == <int> ) n = deletion ( a , n , <int> ) ; else n = deletion ( a , n , ( n - <int> ) ) ; } printf ( <str> , cost ) ; } return <int> ; } int deletion ( int a [ ] , int n , int pos ) { int i ; for ( i = pos ; i < n - <int> ; i ++ ) { a [ i ] = a [ i + <int> ] ; } n -- ; return n ; }", "label": 2, "id": 5846}
{"input": "int main ( ) { int i , j ; int r , k , iter , no , t , n , l ; scanf ( <str> , & t ) ; int maxsum , c ; int sum [ <int> ] [ <int> ] ; for ( k = <int> ; k < t ; k ++ ) { c = <int> ; char c1 ; maxsum = <int> ; scanf ( <str> , & n ) ; iter = ( n * ( n + <int> ) ) / <int> ; i = j = r = c = <int> ; scanf ( <str> , & no ) ; sum [ r ] [ c ] = maxsum = no ; i ++ ; j = <int> ; r ++ ; c = <int> ; for ( l = <int> ; l < iter ; l ++ ) { scanf ( <str> , & no ) ; c1 = getchar ( ) ; if ( j == <int> ) { sum [ r ] [ c ] = sum [ r - <int> ] [ <int> ] + no ; if ( sum [ r ] [ c ] > maxsum ) maxsum = sum [ r ] [ c ] ; c ++ ; } else if ( i == j ) { if ( i == <int> ) sum [ r ] [ c ] = sum [ <int> ] [ <int> ] + no ; else sum [ r ] [ c ] = sum [ r - <int> ] [ c - <int> ] + no ; if ( sum [ r ] [ c ] > maxsum ) maxsum = sum [ r ] [ c ] ; c ++ ; } else { sum [ r ] [ c ] = sum [ r - <int> ] [ c - <int> ] + no ; if ( sum [ r ] [ c ] > maxsum ) maxsum = sum [ r ] [ c ] ; c ++ ; sum [ r ] [ c ] = sum [ r - <int> ] [ c - <int> ] + no ; if ( sum [ r ] [ c ] > maxsum ) maxsum = sum [ r ] [ c ] ; c ++ ; } j ++ ; if ( c1 == <char> ) { j = <int> ; i ++ ; c = <int> ; r ++ ; } } printf ( <str> , maxsum ) ; } return <int> ; }", "label": 1, "id": 5847}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; int x = gcd ( a , b ) ; printf ( <str> , x ) ; int lcm = ( a * b ) / x ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 5848}
{"input": "int gcd ( long int a , long int b ) ; int main ( ) { long int t , a , b , hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } int gcd ( long int a , long int b ) { int dividend = a >= b ? a : b ; int divisor = a <= b ? a : b ; while ( divisor != <int> ) { int remainder = dividend % divisor ; dividend = divisor ; divisor = remainder ; } return dividend ; }", "label": 0, "id": 5849}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long long int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 5850}
{"input": "long gcd ( long a , long b ) { if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; } int main ( ) { int t ; long a , b ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 5851}
{"input": "long gcd ( long a , long b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int t , la , lb ; scanf ( <str> , & t ) ; while ( t -- ) { long a , b ; scanf ( <str> , & a , & b ) ; long g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 0, "id": 5852}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 5853}
{"input": "int main ( ) { int t , k ; scanf ( <str> , & t ) ; int s [ t ] ; for ( k = <int> ; k <= t ; k ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] , i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) { a [ i ] [ j ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } int sum = a [ <int> ] [ <int> ] , sumbottom = <int> , sumright = <int> , val = <int> ; for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { sumbottom = <int> ; sumright = <int> ; for ( j = i + <int> ; j < n ; j ++ ) { sumbottom += a [ j ] [ val ] ; ( val <= j ) ? ( sumright += a [ j ] [ val + <int> ] ) : ( sumright = <int> ) ; } printf ( <str> , sumbottom , sumright ) ; if ( sumright > sumbottom ) { sum += a [ i + <int> ] [ val + <int> ] ; val += <int> ; } else sum += a [ i + <int> ] [ val ] ; } s [ k ] = sum ; } for ( k = <int> ; k <= t ; k ++ ) { printf ( <str> , s [ k ] ) ; } return <int> ; }", "label": 1, "id": 5854}
{"input": "int main ( ) { int input [ <int> ] [ <int> ] , t ; scanf ( <str> , & t ) ; while ( t -- ) { int i = <int> , j = <int> , n , count = <int> , x , a = <int> , b = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & input [ i ] [ j ] ) ; } } x = input [ <int> ] [ <int> ] ; do { if ( input [ a + <int> ] [ b ] > input [ a + <int> ] [ b + <int> ] ) { x = x + input [ a + <int> ] [ b ] ; a = a + <int> ; count ++ ; } else { x = x + input [ a + <int> ] [ b + <int> ] ; a = a + <int> ; b = b + <int> ; count ++ ; } } while ( count != n ) ; printf ( <str> , x ) ; } return <int> ; }", "label": 3, "id": 5855}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; if ( test > <int> ) return - <int> ; int len [ test ] , i , res [ test ] ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & len [ i ] ) ; int j , k , arr [ len [ i ] ] [ len [ i ] ] ; for ( j = <int> ; j < len [ i ] ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } for ( j = len [ i ] - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( arr [ j + <int> ] [ k ] > arr [ j + <int> ] [ k + <int> ] ) arr [ j ] [ k ] += arr [ j + <int> ] [ k ] ; else arr [ j ] [ k ] += arr [ j + <int> ] [ k + <int> ] ; } } res [ i ] = arr [ <int> ] [ <int> ] ; } for ( i = <int> ; i < test ; i ++ ) printf ( <str> , res [ i ] ) ; return <int> ; }", "label": 3, "id": 5856}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return ( gcd ( b , a % b ) ) ; } void main ( ) { int t , x , y , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = gcd ( a , b ) ; y = ( a * b ) / x ; printf ( <str> , x , y ) ; } }", "label": 1, "id": 5857}
{"input": "void function ( void ) ; void function ( void ) { long long int i , a , b , j , z = <int> , c ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b ) ; if ( b <= <int> ) { z = z + b ; } } } c = z / <int> ; printf ( <str> , c ) ; z = <int> ; c = <int> ; } int main ( void ) { int i , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { function ( ) ; } return <int> ; }", "label": 1, "id": 5858}
{"input": "int main ( ) { int p , i , j ; long int n ; scanf ( <str> , & p ) ; while ( p -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n - <int> - i ; j ++ ) { if ( a [ j ] >= a [ j + <int> ] ) { int t = a [ j ] ; a [ j ] = a [ j + <int> ] ; a [ j + <int> ] = t ; } } } printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 5859}
{"input": "int lcm ( int , int ) ; int gcd ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; } int lcm ( int a , int b ) { int no ; no = MAX ( a , b ) ; while ( no < a * b ) { if ( no % b == <int> ) { return no ; } no += a ; } return a * b ; } int gcd ( int a , int b ) { if ( b ) return gcd ( b , a % b ) ; else return a ; }", "label": 1, "id": 5860}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long a , b , g ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 0, "id": 5861}
{"input": "int Count ( int * , int ) ; int main ( ) { int j , i , t , a [ <int> ] , count , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; count = Count ( a , n ) ; printf ( <str> , count ) ; } return <int> ; } int Count ( int * a , int n ) { int count = <int> ; int i , j , temp , temp1 ; for ( i = <int> ; i < n ; i ++ ) { j = i + <int> ; if ( a [ i ] < a [ j ] ) temp = <int> ; else temp1 = <int> ; if ( temp == <int> && temp1 == <int> ) { count ++ ; temp = temp1 = - <int> ; } } return n + count ; }", "label": 3, "id": 5862}
{"input": "int main ( ) { long long int num1 , num2 , gcd , lcm , rem , a , b , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { a = num1 ; b = num2 ; } else { a = num2 ; b = num1 ; } rem = a % b ; while ( rem != <int> ) { a = b ; b = rem ; rem = a % b ; } gcd = b ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 5863}
{"input": "int a [ <int> ] [ <int> ] , n , i , j , t , x , y ; main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; ) scanf ( <str> , & a [ i ] [ j ++ ] ) ; for ( i -= <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; ) { x = a [ i + <int> ] [ j ] ; y = a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ++ ] += ( x > y ) ? x : y ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5864}
{"input": "int main ( ) { int count ; int row ; int numbers [ <int> ] ; int i , m ; int sum [ <int> ] = { <int> } ; int max_number ; int a , b , c ; scanf ( <str> , & count ) ; while ( count > <int> ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < <int> ; i ++ ) { sum [ i ] = <int> ; } for ( i = <int> ; i < row ; i ++ ) { m = <int> ; while ( m < i + <int> && ( scanf ( <str> , & numbers [ m ] ) ) == <int> ) { m ++ ; } for ( m = <int> ; m <= i ; m ++ ) { if ( m - <int> >= <int> ) a = numbers [ m - <int> ] + sum [ m ] ; else a = <int> ; b = numbers [ m ] + sum [ m ] ; if ( m + <int> < i ) c = numbers [ m + <int> ] + sum [ m ] ; else c = <int> ; max_number = a ; if ( b > max_number ) max_number = b ; if ( c > max_number ) max_number = c ; sum [ m ] = max_number ; } } max_number = <int> ; for ( i = <int> ; i < row ; i ++ ) { if ( sum [ i ] > max_number ) max_number = sum [ i ] ; } printf ( <str> , max_number ) ; count -- ; } return <int> ; }", "label": 1, "id": 5865}
{"input": "int main ( ) { long long int i , j , A [ <int> ] , N , T , count , sum = <int> , m ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { count = <int> ; sum = <int> ; scanf ( <str> , & N ) ; m = N ; for ( j = <int> ; j < N ; j ++ ) scanf ( <str> , & A [ j ] ) ; for ( j = <int> ; j < N ; j ++ ) { count = <int> ; while ( A [ j - <int> ] <= A [ j ] ) { count ++ ; j ++ ; } sum += ( ( count ) * ( count + <int> ) ) / <int> ; } if ( N == <int> ) sum = <int> ; printf ( <str> , sum ) ; } }", "label": 1, "id": 5866}
{"input": "int main ( void ) { int T ; long int A , B , r , C , D ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; C = A ; D = B ; while ( B != <int> ) { r = A % B ; A = B ; B = r ; } printf ( <str> , A , ( C / A ) * B ) ; } return <int> ; }", "label": 1, "id": 5867}
{"input": "int main ( ) { int numberOfLines , j , i , k , numberOfInputs , content , sum = <int> , max ; scanf ( <str> , & numberOfInputs ) ; for ( k = <int> ; k < numberOfInputs ; k ++ ) { sum = <int> ; scanf ( <str> , & numberOfLines ) ; for ( i = <int> ; i < numberOfLines ; i ++ ) { max = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & content ) ; if ( max < content ) { max = content ; } } sum += max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5868}
{"input": "int main ( ) { int a ; scanf ( <str> , & a ) ; while ( a -- ) { long long unsigned int p , k = <int> , sum = <int> ; scanf ( <str> , & p ) ; long long unsigned int s [ p ] ; for ( int i = <int> ; i < p ; i ++ ) { scanf ( <str> , & s [ i ] ) ; } for ( int i = <int> ; i < p - <int> ; i ++ ) { if ( s [ i ] <= s [ i + <int> ] ) { k ++ ; continue ; } if ( k > <int> ) { for ( int i = <int> ; i <= k + <int> ; i ++ ) { sum += ( k + <int> - i ) ; k = <int> ; } } } for ( int i = <int> ; i <= k + <int> ; i ++ ) { sum += ( k + <int> - i ) ; } sum += p ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5869}
{"input": "int main ( ) { int n , o = <int> ; scanf ( <str> , & n ) ; for ( o = <int> ; o < n ; o ++ ) { int k , u , j , i , l ; scanf ( <str> , & k ) ; int * p [ k ] ; for ( u = <int> ; u < k ; u ++ ) { p [ u ] = ( int * ) malloc ( ( u + <int> ) * sizeof ( int ) ) ; for ( l = <int> ; l <= u ; l ++ ) scanf ( <str> , & p [ u ] [ l ] ) ; } for ( j = k - <int> ; j >= <int> ; j -- ) { for ( i = <int> ; i <= j + <int> ; i ++ ) { if ( p [ j + <int> ] [ i ] > p [ j + <int> ] [ i + <int> ] ) p [ j ] [ i ] = p [ j ] [ i ] + p [ j + <int> ] [ i ] ; else p [ j ] [ i ] = p [ j ] [ i ] + p [ j + <int> ] [ i + <int> ] ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 5870}
{"input": "int actsum = <int> ; int maxsum ( int * a , int i , int j , int sum ) { sum = sum + a [ i ] ; if ( j * ( j + <int> ) / <int> < a [ <int> ] ) { maxsum ( a , i + j , j + <int> , sum ) ; maxsum ( a , i + j + <int> , j + <int> , sum ) ; } else if ( actsum < sum ) actsum = sum ; return actsum ; } int input ( ) { int a [ <int> ] , sum = <int> , i , j ; scanf ( <str> , & a [ <int> ] ) ; a [ <int> ] = ( a [ <int> ] * ( a [ <int> ] + <int> ) ) / <int> ; for ( i = <int> ; i <= a [ <int> ] ; i ++ ) scanf ( <str> , & a [ i ] ) ; return maxsum ( a , <int> , <int> , <int> ) ; } int main ( ) { int t , b [ <int> ] , i = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { actsum = <int> ; b [ i ] = input ( ) ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , b [ i ] ) ; return <int> ; }", "label": 2, "id": 5871}
{"input": "short int max_sum ( short int * , short int ) ; int main ( ) { short int i , j , line , n , size ; short int * arr ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & line ) ; size = line * ( line + <int> ) / <int> ; arr = ( short int * ) malloc ( sizeof ( short int ) * size ) ; for ( j = <int> ; j < size ; j ++ ) scanf ( <str> , & arr [ j ] ) ; printf ( <str> , max_sum ( arr , size ) ) ; free ( arr ) ; } return <int> ; } short int max_sum ( short int arr [ ] , short int size ) { short int count , i , index , j , lower , max , upper ; short int * sum ; sum = ( short int * ) malloc ( sizeof ( short int ) * size ) ; sum [ <int> ] = arr [ <int> ] ; j = <int> ; i = lower = <int> ; count = upper = <int> ; while ( i < size ) { while ( i <= upper ) { if ( ( i == lower ) || ( j == <int> ) ) sum [ i ] = arr [ i ] + sum [ j ] ; else if ( i == upper ) sum [ i ] = arr [ i ] + sum [ j - <int> ] ; else { if ( sum [ j ] > sum [ j - <int> ] ) sum [ i ] = arr [ i ] + sum [ j ] ; else sum [ i ] = arr [ i ] + sum [ j - <int> ] ; } i ++ ; if ( i != upper ) j ++ ; } lower += count ; count ++ ; upper += count ; } index = lower - count + <int> ; max = sum [ index ] ; for ( i = index + <int> ; i < size ; i ++ ) if ( sum [ i ] > max ) max = sum [ i ] ; free ( sum ) ; return max ; }", "label": 1, "id": 5872}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) { return <int> ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( ( a - b ) , b ) ; } return gcd ( a , ( b - a ) ) ; } int main ( void ) { int t ; long int g , a , b ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g ) ; printf ( <str> , ( a * b ) / g ) ; } return <int> ; }", "label": 0, "id": 5873}
{"input": "typedef unsigned uint ; int main ( ) { uint t = <int> , lines = <int> , entry = <int> , max = <int> ; uint i = <int> , j = <int> ; uint * arr = NULL , * tmp = NULL , * tmp2 = NULL ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & lines ) ; arr = ( uint * ) calloc ( lines + <int> , sizeof ( uint ) ) ; arr [ lines ] = <int> ; arr [ lines + <int> ] = <int> ; for ( i = <int> ; i <= lines ; i ++ ) { tmp = arr + lines - i ; tmp2 = arr + lines - i + <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & entry ) ; if ( j == <int> ) { * tmp = * tmp2 + entry ; } else { if ( * tmp2 > * ( tmp2 + <int> ) ) { * tmp = * tmp2 + entry ; } else { * tmp = * ( tmp2 + <int> ) + entry ; } tmp2 ++ ; } if ( i == lines && max < * tmp ) { max = * tmp ; } tmp ++ ; } } printf ( <str> , max ) ; free ( arr ) ; } return <int> ; }", "label": 1, "id": 5874}
{"input": "int main ( ) { int i , j , T , k , lines ; int a [ <int> ] [ <int> ] , maxsum [ <int> ] [ <int> ] , x ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & lines ) ; for ( j = <int> ; j < lines ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = lines - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { if ( j == lines - <int> ) { maxsum [ j ] [ k ] = a [ j ] [ k ] ; } else { if ( maxsum [ j + <int> ] [ k ] > maxsum [ j + <int> ] [ k + <int> ] ) x = maxsum [ j + <int> ] [ k ] ; else x = maxsum [ j + <int> ] [ k + <int> ] ; maxsum [ j ] [ k ] = a [ j ] [ k ] + x ; } } } printf ( <str> , maxsum [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5875}
{"input": "int main ( void ) { long int t , n , a , b , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & b ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < b ) b = a ; } n -- ; printf ( <str> , b * n ) ; } return <int> ; }", "label": 0, "id": 5876}
{"input": "long long int matrix [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] , n ; int max ( long long int a , long long int b ) { if ( a > b ) return a ; else return b ; } long long int solve ( int i , int j ) { long long int t1 , t2 , t ; if ( i == n ) { return <int> ; } if ( cache [ i ] [ j ] < <int> ) { return cache [ i ] [ j ] ; } t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + matrix [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int test , i , j , t ; long long int ans ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) { cache [ i ] [ j ] = <int> ; } } scanf ( <str> , & test ) ; for ( t = <int> ; t < test ; t ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } } ans = solve ( <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 5877}
{"input": "int main ( void ) { int t , i ; int n ; long long int ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int sml = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < sml ) sml = a [ i ] ; } if ( n == <int> ) printf ( <str> , a [ <int> ] ) ; else { ans = ( long long ) sml * ( long long ) ( n - <int> ) ; printf ( <str> , ans ) ; } } return <int> ; }", "label": 0, "id": 5878}
{"input": "int Sum_of_triangle ( int * * arr , int j , int i , int n ) { if ( i == n ) return <int> ; int a , b ; a = Sum_of_triangle ( arr , j , i + <int> , n ) ; b = Sum_of_triangle ( arr , <int> + j , i + <int> , n ) ; if ( a > b ) return arr [ i ] [ j ] + a ; else return arr [ i ] [ j ] + b ; } int main ( ) { int t , n , * * arr ; int i , j ; scanf ( <str> , & t ) ; while ( t -- ) { i = <int> ; scanf ( <str> , & n ) ; arr = ( int * * ) malloc ( sizeof ( int * ) * n ) ; while ( i < n ) { arr [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; i ++ ; } i = <int> ; while ( i < n ) { j = <int> ; while ( j < i + <int> ) { scanf ( <str> , & arr [ i ] [ j ] ) ; j ++ ; } i ++ ; } printf ( <str> , Sum_of_triangle ( arr , <int> , <int> , n ) ) ; free ( arr ) ; } return <int> ; }", "label": 2, "id": 5879}
{"input": "int calc ( int a [ ] [ <int> ] , int x , int y , int n , int prev_sum ) ; int main ( ) { int t , n , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } j = calc ( a , <int> , <int> , n , <int> ) ; printf ( <str> , j ) ; } return <int> ; } int calc ( int a [ ] [ <int> ] , int x , int y , int n , int prev_sum ) { if ( x == n - <int> ) { return a [ x ] [ y ] + prev_sum ; } int max1 , max2 ; max1 = calc ( a , x + <int> , y , n , prev_sum + a [ x ] [ y ] ) ; max2 = calc ( a , x + <int> , y + <int> , n , prev_sum + a [ x ] [ y ] ) ; if ( max1 > max2 ) { return max1 ; } else { return max2 ; } }", "label": 2, "id": 5880}
{"input": "int gcd ( int a , int b ) { int t ; while ( b ) { t = a % b ; a = b ; b = t ; } return a ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; long long int x = ( a * b ) / g ; printf ( <str> , g , x ) ; } return <int> ; }", "label": 1, "id": 5881}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int i , ip , j , n , k , a ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & ip ) ; for ( k = <int> ; k < ip ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { a = max ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; i -- ; arr [ i ] [ j ] = a + arr [ i ] [ j ] ; i ++ ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5882}
{"input": "int main ( ) { int t , n , i , j , sum , ans ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { sum = <int> ; ans = <int> ; scanf ( <str> , & n ) ; if ( n > <int> ) exit ( <int> ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] ) ; sum = sum + arr [ i ] ; ans = sum / <int> ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 5883}
{"input": "int a [ <int> ] ; int main ( ) { int t , n , i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { int s = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; s = s + n ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] - a [ i - <int> ] >= <int> ) s ++ ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 5884}
{"input": "int main ( ) { int a , b , i , d , n , m , k ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= ( a + b ) / <int> ; i ++ ) { if ( a % i == <int> && b % i == <int> ) d = i ; } n = a / d ; m = b / d ; k = d * n * m ; printf ( <str> , d , k ) ; return <int> ; }", "label": 1, "id": 5885}
{"input": "int main ( ) { long long int a , b , i , * x , c = <int> , d = <int> ; scanf ( <str> , & a ) ; for ( i = <int> ; i <= a ; i ++ ) { scanf ( <str> , & b ) ; x = ( long long int * ) malloc ( sizeof ( long long int ) * b ) ; for ( i = <int> ; i < b ; i ++ ) { scanf ( <str> , & ( * ( x + i ) ) ) ; } for ( i = <int> ; i <= ( b - <int> ) ; i ++ ) { if ( ( * ( x + i ) ) > ( * ( x + ( i + <int> ) ) ) ) { c = ( * ( x + ( i + <int> ) ) ) + c ; } else { d = ( * ( x + i ) ) + d ; } } printf ( <str> , c + d ) ; d = <int> ; c = <int> ; } return <int> ; }", "label": 1, "id": 5886}
{"input": "long int gcd ( long int a , long int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; long int a , b ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; long int c = gcd ( a , b ) ; printf ( <str> , c , ( a * b ) / c ) ; } return <int> ; }", "label": 0, "id": 5887}
{"input": "int A [ <int> ] [ <int> ] ; int sum ( int n , int i , int j ) { int s ; if ( i == n ) s = A [ i ] [ j ] ; else if ( sum ( n , i + <int> , j ) >= sum ( n , i + <int> , j + <int> ) ) s = sum ( n , i + <int> , j ) + A [ i ] [ j ] ; else s = sum ( n , i + <int> , j + <int> ) + A [ i ] [ j ] ; return s ; } int main ( ) { int t , k , x , y , n ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( x = <int> ; x < n ; x ++ ) { for ( y = <int> ; y < n ; y ++ ) { if ( x >= y ) scanf ( <str> , & A [ x ] [ y ] ) ; } } printf ( <str> , sum ( n , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 5888}
{"input": "int arr [ <int> ] [ <int> ] = { <int> } ; int main ( ) { int aa , k = <int> , temp , i , n , <unk> , j , a [ <int> ] = { <int> } ; scanf ( <str> , & <unk> ) ; aa = <unk> ; while ( <unk> > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i + <int> ; j > <int> ; j -- ) { temp = max ( arr [ i + <int> ] [ j ] , arr [ i + <int> ] [ j - <int> ] ) ; arr [ i ] [ j - <int> ] += temp ; } } a [ k ++ ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) arr [ i ] [ j ] = <int> ; <unk> -- ; } for ( i = <int> ; i < aa ; i ++ ) printf ( <str> , a [ i ] ) ; return <int> ; }", "label": 0, "id": 5889}
{"input": "int main ( ) { int T , N , i , j , s , min ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { min = <int> ; scanf ( <str> , & N ) ; int arr [ N ] ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( arr [ j ] < min ) { min = arr [ j ] ; } } s = min * ( N - <int> ) ; printf ( <str> , s ) ; s = <int> ; } return <int> ; }", "label": 0, "id": 5890}
{"input": "int max ( int A [ <int> ] [ <int> ] , int B [ <int> ] [ <int> ] , int N , int j , int k ) ; int main ( ) { int T , i , j , k , N ; int A [ <int> ] [ <int> ] , B [ <int> ] [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; for ( j = <int> ; j < N ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) B [ j ] [ k ] = - <int> ; for ( j = <int> ; j < N ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & A [ j ] [ k ] ) ; printf ( <str> , max ( A , B , N , <int> , <int> ) ) ; } return <int> ; } int max ( int A [ <int> ] [ <int> ] , int B [ <int> ] [ <int> ] , int N , int j , int k ) { int lsum , rsum ; if ( j >= N || k >= N ) return <int> ; if ( B [ j ] [ k ] != - <int> ) return B [ j ] [ k ] ; lsum = max ( A , B , N , j + <int> , k ) ; rsum = max ( A , B , N , j + <int> , k + <int> ) ; if ( lsum > rsum ) B [ j ] [ k ] = A [ j ] [ k ] + lsum ; else B [ j ] [ k ] = A [ j ] [ k ] + rsum ; return B [ j ] [ k ] ; }", "label": 0, "id": 5891}
{"input": "int main ( ) { int t ; long long int a , b , gcd , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; i = <int> ; while ( a / i > <int> && b / i > <int> ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; i ++ ; } printf ( <str> , gcd , a * b / gcd ) ; } return <int> ; }", "label": 2, "id": 5892}
{"input": "int main ( ) { int t , k , a , b , x , y , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { k = y ; y = x % y ; x = k ; } gcd = x ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5893}
{"input": "int gcd ( int m , int n ) { if ( n == <int> ) return m ; else return gcd ( n , m % n ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , temp , l ; scanf ( <str> , & a , & b ) ; int lcm = a * b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } temp = gcd ( a , b ) ; lcm = lcm / temp ; printf ( <str> , temp , ( int ) lcm ) ; } return <int> ; }", "label": 1, "id": 5894}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , p , min = <int> , lc ; scanf ( <str> , & n ) ; for ( lc = <int> ; lc < n ; lc ++ ) { scanf ( <str> , & p ) ; if ( p < min ) min = p ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5895}
{"input": "int buyuk ( int a , int b ) ; int main ( ) { int t , a , b , buy , kuc ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; buy = buyuk ( a , b ) ; kuc = ( a * b ) / buy ; printf ( <str> , buy , kuc ) ; } return <int> ; } int buyuk ( int a , int b ) { if ( b == <int> ) return a ; else return buyuk ( b , a % b ) ; }", "label": 1, "id": 5896}
{"input": "typedef long int ll ; int main ( ) { ll t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; ll a [ n ] ; ll min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } }", "label": 0, "id": 5897}
{"input": "main ( ) { int no , count = <int> , pos , pos2 , * results , * arr = ( int ) malloc ( <int> ) ; short int i , j , rows ; scanf ( <str> , & no ) ; results = ( int ) malloc ( <int> * no ) ; while ( no ) { scanf ( <str> , & rows ) ; realloc ( arr , ( rows * ( rows + <int> ) >> <int> ) ) ; for ( i = <int> ; i < rows ; ++ i ) { pos = ( i * ( i + <int> ) ) >> <int> ; for ( j = <int> ; j <= i ; ++ j , ++ pos ) scanf ( <str> , & arr [ pos ] ) ; } for ( i = rows - <int> ; i >= <int> ; -- i ) { pos = ( i * ( i + <int> ) ) >> <int> ; pos2 = pos - i ; for ( j = <int> ; j < i ; ++ j , ++ pos , ++ pos2 ) arr [ pos2 ] += arr [ pos ] > arr [ pos + <int> ] ? arr [ pos ] : arr [ pos + <int> ] ; } results [ count ++ ] = * arr ; -- no ; } for ( i = <int> ; i < count ; ++ i ) printf ( <str> , results [ i ] ) ; }", "label": 3, "id": 5898}
{"input": "int main ( ) { int t , r , j , i , a [ <int> ] [ <int> ] , sum ; scanf ( <str> , & t ) ; while ( t > <int> ) { sum = <int> ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = a [ <int> ] [ <int> ] ; i = <int> ; j = <int> ; while ( i < r ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) { sum = sum + a [ i + <int> ] [ j ] ; i = i + <int> ; } else { sum = sum + a [ i + <int> ] [ j + <int> ] ; i = i + <int> ; j = j + <int> ; } } printf ( <str> , sum ) ; t -- ; } }", "label": 1, "id": 5899}
{"input": "int tri [ <int> ] [ <int> ] ; int sum_triangle ( int , int , int , int [ <int> ] [ <int> ] ) ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int main ( ) { int t , i , j , n , k ; scanf ( <str> , & t ) ; int sum [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & tri [ j ] [ k ] ) ; sum [ i ] = sum_triangle ( <int> , <int> , n , tri ) ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , sum [ i ] ) ; return <int> ; } int sum_triangle ( int x , int y , int n , int tri [ <int> ] [ <int> ] ) { if ( x > n ) return <int> ; else { return max ( sum_triangle ( x + <int> , y , n , tri ) , sum_triangle ( x + <int> , y + <int> , n , tri ) ) + tri [ x ] [ y ] ; } }", "label": 2, "id": 5900}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; long long int a [ n ] [ n ] ; int j , i ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > - <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) >= ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5901}
{"input": "unsigned long long int gcd ( unsigned long int u , unsigned long long int v ) { if ( u == v ) return u ; if ( u == <int> ) return v ; if ( v == <int> ) return u ; if ( ~ u & <int> ) { if ( v & <int> ) return gcd ( u >> <int> , v ) ; else return gcd ( u >> <int> , v >> <int> ) << <int> ; } if ( ~ v & <int> ) return gcd ( u , v >> <int> ) ; if ( u > v ) return gcd ( ( u - v ) >> <int> , v ) ; return gcd ( ( v - u ) >> <int> , u ) ; } int main ( ) { int i , n ; unsigned long long int a , b , Gcd , lcm ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; Gcd = gcd ( a , b ) ; lcm = ( a * b ) / Gcd ; printf ( <str> , Gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 5902}
{"input": "int main ( void ) { int grt , n , m , k , i , j ; scanf ( <str> , & n ) ; while ( n != <int> ) { scanf ( <str> , & m ) ; int a [ m ] [ m ] ; int b [ m + <int> ] [ <int> * m ] ; for ( i = <int> ; i < m + <int> ; i ++ ) { for ( j = <int> ; j < <int> * m ; j ++ ) { if ( i <= m - <int> && j <= m - <int> ) a [ i ] [ j ] = <int> ; b [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < m - <int> ; i ++ ) { k = <int> ; for ( j = <int> ; j <= i ; j ++ ) { b [ i + <int> ] [ k ++ ] = b [ i ] [ j ] + a [ i + <int> ] [ j ] ; b [ i + <int> ] [ k ++ ] = b [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } grt = b [ m - <int> ] [ <int> ] ; for ( j = <int> ; j < <int> * m ; j ++ ) { if ( grt < b [ m - <int> ] [ j ] ) { grt = b [ m - <int> ] [ j ] ; } } if ( n == <int> ) printf ( <str> , grt ) ; else printf ( <str> , grt ) ; n -- ; } return <int> ; }", "label": 1, "id": 5903}
{"input": "int main ( void ) { int i , j , t , n , max , a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else if ( sum [ i - <int> ] [ j ] > sum [ i - <int> ] [ j - <int> ] ) sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; else sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5904}
{"input": "int input [ <int> ] ; int max_sum ; int sum [ <int> ] [ <int> ] ; void sumtrian ( ) { int problem_size ; int input_lines_size ; int i , j , k , l , m ; scanf ( <str> , & problem_size ) ; for ( i = <int> ; i < problem_size ; i ++ ) { max_sum = <int> ; for ( l = <int> ; l < <int> ; l ++ ) { for ( m = <int> ; m < <int> ; m ++ ) { sum [ l ] [ m ] = <int> ; } } scanf ( <str> , & input_lines_size ) ; for ( j = <int> ; j < input_lines_size ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & input [ k ] ) ; if ( j > <int> ) { if ( k == <int> ) { sum [ j ] [ k ] = sum [ j - <int> ] [ k ] + input [ k ] ; } else { sum [ j ] [ k ] = input [ k ] + ( ( sum [ j - <int> ] [ k - <int> ] > sum [ j - <int> ] [ k ] ) ? ( sum [ j - <int> ] [ k - <int> ] ) : sum [ j - <int> ] [ k ] ) ; } } else sum [ j ] [ k ] = input [ k ] ; if ( sum [ j ] [ k ] > max_sum ) max_sum = sum [ j ] [ k ] ; } } printf ( <str> , max_sum ) ; } } int main ( ) { sumtrian ( ) ; return <int> ; }", "label": 0, "id": 5905}
{"input": "struct node { int wt ; int row ; } tri [ SZ ] ; int main ( void ) { int n ; int num_rows , num_elem , last_row_index ; int i , row , j ; int max_sum , sum , chosen , chosen1 , chosen2 ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & num_rows ) ; num_elem = ( num_rows * ( num_rows + <int> ) ) / <int> ; last_row_index = ( ( num_rows - <int> ) * num_rows ) / <int> ; for ( i = <int> , row = <int> , j = row ; i < num_elem ; i ++ ) { scanf ( <str> , & tri [ i ] <fp> wt ) ; tri [ i ] <fp> row = row ; j -- ; if ( j < <int> ) { row ++ ; j = row ; } } row -= <int> ; max_sum = - <int> ; for ( i = num_elem - <int> ; i >= last_row_index ; i -- ) { sum = tri [ i ] <fp> wt ; chosen = i ; for ( j = row ; j > <int> ; j -- ) { chosen1 = chosen - j + <int> ; chosen2 = chosen - j ; chosen = chosen1 ; if ( ( tri [ chosen1 ] <fp> row != j - <int> ) || ( ( chosen2 > <int> ) && ( tri [ chosen2 ] <fp> row == j - <int> ) && ( tri [ chosen ] <fp> wt < tri [ chosen2 ] <fp> wt ) ) ) { chosen = chosen2 ; } sum += tri [ chosen ] <fp> wt ; } if ( sum > max_sum ) { max_sum = sum ; } } printf ( <str> , max_sum ) ; n -- ; } }", "label": 1, "id": 5906}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , i , k ; scanf ( <str> , & t ) ; int p [ t ] , q [ t ] ; for ( i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; long long lcm = ( a * b ) / k ; p [ i ] = k ; q [ i ] = lcm ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , p [ i ] , q [ i ] ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 1, "id": 5907}
{"input": "void cost ( long unsigned int [ ] , long unsigned int ) ; int main ( ) { long unsigned int a [ <int> ] ; long unsigned int i , no , n ; scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) { scanf ( <str> , & n ) ; cost ( a , n ) ; } return <int> ; } void cost ( long unsigned int a [ ] , long unsigned int n ) { long unsigned int min , j ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } printf ( <str> , ( n - <int> ) * min ) ; return ; }", "label": 3, "id": 5908}
{"input": "int main ( ) { long long int q , w , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & q ) ; for ( w = <int> ; w < q ; w ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5909}
{"input": "void input ( int n , int array [ n ] ) ; void count ( int n , int array [ n ] ) ; int main ( ) { int i = <int> , testcase ; scanf ( <str> , & testcase ) ; while ( i < testcase ) { int n ; i ++ ; scanf ( <str> , & n ) ; int array [ n ] ; input ( n , array ) ; count ( n , array ) ; } return <int> ; } void input ( int n , int array [ n ] ) { int i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & array [ i ] ) ; } return ; } void count ( int n , int array [ n ] ) { int i , j , count = <int> ; for ( i = <int> ; i < n ; i ++ ) { int index = i ; int subcount = <int> ; while ( index < n - <int> ) { if ( array [ index ] <= array [ index + <int> ] ) { subcount ++ ; index ++ ; } else break ; } count = count + subcount ; } printf ( <str> , count ) ; return ; }", "label": 1, "id": 5910}
{"input": "void inp ( int * x ) { register int c = getchar ( ) ; * x = <int> ; for ( ; ( c < <int> || c > <int> ) ; c = getchar ( ) ) ; for ( ; c > <int> && c < <int> ; c = getchar ( ) ) { * x = ( ( * x ) << <int> ) + ( ( * x ) << <int> ) + c - <int> ; } } int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; inp ( & t ) ; while ( t -- ) { inp ( & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { inp ( & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] > a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ) a [ i - <int> ] [ j - <int> ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i - <int> ] [ j - <int> ] = a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5911}
{"input": "void main ( ) { int a [ <int> ] , t , n , count , p , i , j ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( p = <int> ; p < t ; p ++ ) { count = <int> ; printf ( <str> , p + <int> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count += <int> ; } } printf ( <str> , count ) ; } }", "label": 3, "id": 5912}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int LCM ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int T ; long long int A , B ; int lcm , hcf ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; hcf = gcd ( A , B ) ; lcm = LCM ( A , B ) ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 5913}
{"input": "int main ( int argc , char const * argv [ ] ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( long long int i = <int> ; i < n ; ++ i ) { scanf ( <str> , & a [ i ] ) ; } long long int dp [ n ] ; dp [ <int> ] = <int> ; int c = <int> ; for ( int i = <int> ; i < n ; ++ i ) { if ( a [ i ] >= a [ i - <int> ] ) { dp [ i ] = dp [ i - <int> ] + <int> + c ; c ++ ; } else { dp [ i ] = dp [ i - <int> ] + <int> ; c = <int> ; } } printf ( <str> , dp [ n - <int> ] ) ; } return <int> ; }", "label": 0, "id": 5914}
{"input": "int cal_Gcd ( int a , int b ) { if ( b == <int> ) return a ; else return cal_Gcd ( b , a % b ) ; } int main ( ) { int tc ; scanf ( <str> , & tc ) ; int a , b , rem , gcd , lcm ; int num , dem ; while ( tc -- ) { scanf ( <str> , & a , & b ) ; gcd = cal_Gcd ( a , b ) ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5915}
{"input": "int arr [ <int> ] [ <int> ] = { <int> } ; void sum_triangle ( ) { int i , j , row , ele ; scanf ( <str> , & row ) ; ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ele ) ; if ( i == <int> ) arr [ i ] [ j ] = ele ; else { if ( j == <int> ) arr [ i ] [ j ] = ele + arr [ i - <int> ] [ j ] ; else { if ( arr [ i - <int> ] [ j - <int> ] + ele > arr [ i - <int> ] [ j ] + ele ) arr [ i ] [ j ] = arr [ i - <int> ] [ j - <int> ] + ele ; else arr [ i ] [ j ] = arr [ i - <int> ] [ j ] + ele ; } } } } int max = <int> ; for ( i = <int> ; i <= row - <int> ; i ++ ) { if ( arr [ row - <int> ] [ i ] > max ) max = arr [ row - <int> ] [ i ] ; } printf ( <str> , max ) ; } int max ( int i , int j ) { if ( i > j ) return i ; else return j ; } int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; t ++ ) { sum_triangle ( ) ; } return <int> ; }", "label": 2, "id": 5916}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5917}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int s ; scanf ( <str> , & s ) ; int a [ s ] ; for ( int i = <int> ; i <= s ; i ++ ) scanf ( <str> , & a [ i ] ) ; if ( s == <int> ) printf ( <str> , a [ <int> ] ) ; else { int a1 = a [ <int> ] ; int sum = <int> , b ; for ( int i = <int> ; i <= s ; i ++ ) { b = a [ i ] ; if ( a1 > b ) { sum = sum + b ; a1 = b ; } else sum = sum + a1 ; } printf ( <str> , sum ) ; } } }", "label": 1, "id": 5918}
{"input": "int main ( ) { int i , j , k , t , n , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; } } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = j ; k >= <int> ; k -- ) { if ( arr [ j + <int> ] [ k + <int> ] > arr [ j + <int> ] [ k ] ) { arr [ j ] [ k ] += arr [ j + <int> ] [ k + <int> ] ; } else { arr [ j ] [ k ] += arr [ j + <int> ] [ k ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5919}
{"input": "int gcd ( int x , int y ) { int GCD ; if ( x < y ) GCD = x ; else GCD = y ; while ( x % GCD != <int> || y % GCD != <int> ) GCD -- ; return GCD ; } int main ( ) { int t , i , result1 , result2 ; scanf ( <str> , & t ) ; int no1 [ <int> ] , no2 [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & no1 [ i ] ) ; scanf ( <str> , & no2 [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { result1 = gcd ( no1 [ i ] , no2 [ i ] ) ; result2 = ( no1 [ i ] * no2 [ i ] ) / result1 ; printf ( <str> , result1 , result2 ) ; } return <int> ; }", "label": 1, "id": 5920}
{"input": "int find ( int * * , int , int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , ans = <int> ; scanf ( <str> , & n ) ; int * * ar = ( int * * ) ( malloc ( n * ( sizeof ( int * ) ) ) ) ; for ( i = <int> ; i < n ; i ++ ) { ar [ i ] = ( int * ) ( malloc ( ( i + <int> ) * ( sizeof ( int ) ) ) ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & ar [ i ] [ j ] ) ; } } ans = find ( ar , <int> , <int> , n ) ; printf ( <str> , ans ) ; } return <int> ; } int find ( int * * ar , int i , int j , int n ) { int max = <int> ; if ( i != n - <int> ) { int a1 = find ( ar , i + <int> , j , n ) ; int a2 = find ( ar , i + <int> , j + <int> , n ) ; max = a1 > a2 ? a1 : a2 ; return ( max + ar [ i ] [ j ] ) ; } else return ar [ i ] [ j ] ; }", "label": 2, "id": 5921}
{"input": "int main ( int argc , char * argv [ ] ) { int * sums = malloc ( MAX_SIZE * sizeof ( int ) ) ; int * prev_sums = malloc ( MAX_SIZE * sizeof ( int ) ) ; int round , rounds ; int line , width ; int i , tmp , max ; scanf ( <str> , & rounds ) ; for ( round = <int> ; round < rounds ; ++ round ) { scanf ( <str> , & width ) ; memset ( prev_sums , <int> , MAX_SIZE * sizeof ( int ) ) ; for ( max = line = <int> ; line < width ; ++ line ) { for ( i = <int> ; i < ( line + <int> ) ; ++ i ) { scanf ( <str> , & tmp ) ; if ( i == <int> ) { sums [ i ] = prev_sums [ i ] + tmp ; } else { sums [ i ] = ( prev_sums [ i ] > prev_sums [ i - <int> ] ) ? ( prev_sums [ i ] + tmp ) : ( prev_sums [ i - <int> ] + tmp ) ; if ( max < sums [ i ] ) max = sums [ i ] ; } } for ( i = <int> ; i < ( line + <int> ) ; ++ i ) prev_sums [ i ] = sums [ i ] ; } printf ( <str> , max ) ; } free ( prev_sums ) ; free ( sums ) ; return <int> ; }", "label": 0, "id": 5922}
{"input": "int subinc ( ) { int n ; scanf ( <str> , & n ) ; long long int arr [ n ] ; int i = <int> , j = <int> , count = n , flag = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } i = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { j = <int> ; flag = <int> ; while ( arr [ i ] <= arr [ i + j ] && flag == <int> ) { if ( j > <int> ) { count ++ ; flag = <int> ; } j ++ ; } } return count ; } int main ( ) { int t ; scanf ( <str> , & t ) ; int i , count ; int arr [ t ] ; for ( i = <int> ; i <= t ; i ++ ) { count = subinc ( ) ; arr [ i - <int> ] = count ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , arr [ i ] ) ; } return <int> ; }", "label": 1, "id": 5923}
{"input": "int main ( void ) { int t ; long long int n ; long long int i , min , j ; scanf ( <str> , & t ) ; printf ( <str> ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & j ) ; printf ( <str> , j ) ; if ( i ) { if ( min < j ) min = j ; } else min = j ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } }", "label": 1, "id": 5924}
{"input": "int main ( ) { int array [ <int> ] [ <int> ] = { <int> } ; char string [ <int> ] ; int <unk> = <int> , <unk> = <int> ; int i = <int> , j = <int> , k = <int> , max = <int> ; int l = <int> , m = <int> , x = <int> ; scanf ( <str> , & <unk> ) ; for ( i = <int> ; i < <unk> ; i ++ ) { scanf ( <str> , & <unk> ) ; fflush ( stdin ) ; for ( l = <int> ; l < <unk> ; l ++ ) { gets ( string ) ; for ( k = <int> , m = <int> ; string [ m ] != <char> ; m ++ ) { if ( string [ m ] != <int> ) { if ( x != <int> ) x = x * <int> + string [ m ] - <int> ; else x = string [ m ] - <int> ; } else { array [ l ] [ k ++ ] = x ; x = <int> ; } } array [ l ] [ k ++ ] = x ; x = <int> ; } for ( j = <int> ; j < <unk> ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) array [ j ] [ k ] += array [ j - <int> ] [ k ] > array [ j - <int> ] [ k - <int> ] ? array [ j - <int> ] [ k ] : array [ j - <int> ] [ k - <int> ] ; } for ( -- j , k = <int> ; k < j + <int> ; k ++ ) { if ( max < array [ j ] [ k ] ) { max = array [ j ] [ k ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 5925}
{"input": "int arr [ <int> ] [ <int> ] ; int recurse ( int row ) { int i = row - <int> , j , sum = <int> ; while ( i > <int> ) { for ( j = row ; j >= <int> ; j -- ) { sum = <int> ; sum = arr [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ; if ( sum < ( arr [ i ] [ j - <int> ] + arr [ i - <int> ] [ j - <int> ] ) ) { sum = ( arr [ i - <int> ] [ j - <int> ] + arr [ i ] [ j - <int> ] ) ; } arr [ i - <int> ] [ j - <int> ] = sum ; } i -- ; } arr [ i ] [ j ] = sum ; return sum ; } int main ( ) { int i , j , k , n , n1 ; scanf ( <str> , & n1 ) ; while ( n1 -- && n1 <= <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } printf ( <str> , recurse ( n ) ) ; } return <int> ; }", "label": 1, "id": 5926}
{"input": "int main ( ) { int test , i , num1 , num2 , temp , flag , a , lcm ; scanf ( <str> , & test ) ; for ( i = <int> ; i <= test ; i ++ ) { temp = <int> ; flag = <int> ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 < num2 ) { temp = num2 ; num2 = num1 ; num1 = temp ; } a = num1 * num2 ; while ( num1 % num2 != <int> ) { flag = num2 ; num2 = num1 % num2 ; num1 = flag ; } lcm = a / num2 ; printf ( <str> , num2 , lcm ) ; } }", "label": 1, "id": 5927}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , k ; scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; printf ( <str> , k , ( a * b ) / k ) ; } return <int> ; }", "label": 1, "id": 5928}
{"input": "struct node { int triangle [ <int> ] [ <int> ] ; int max ; struct node * next ; } ; typedef struct node * NODE ; NODE getnode ( void ) { return ( malloc ( sizeof ( struct node ) ) ) ; } int next ( int mask [ ] , int n ) { int i ; for ( i = <int> ; ( i < n ) && mask [ i ] ; ++ i ) mask [ i ] = <int> ; if ( i < n ) { mask [ i ] = <int> ; return <int> ; } return <int> ; } int main ( void ) { int rows ; int i , j , k , count ; int r , c ; int bin [ <int> ] ; int sum = <int> ; int testcases ; NODE temp , head , cur ; scanf ( <str> , & testcases ) ; for ( count = <int> ; count < testcases ; count ++ ) { temp = getnode ( ) ; scanf ( <str> , & rows ) ; for ( i = <int> ; i <= rows ; i ++ ) for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & temp -> triangle [ i - <int> ] [ j ] ) ; } if ( count == <int> ) { head = temp ; cur = head ; } else { cur -> next = temp ; cur = cur -> next ; } } cur = head ; for ( count = <int> ; count < testcases ; count ++ ) { cur -> max = <int> ; for ( j = <int> ; j < rows ; j ++ ) { bin [ j ] = <int> ; cur -> max += cur -> triangle [ j ] [ <int> ] ; } while ( next ( bin , rows - <int> ) ) { k = <int> ; r = <int> ; c = <int> ; sum = <int> ; for ( j = <int> ; j < rows ; j ++ ) { sum += cur -> triangle [ r ++ ] [ c ] ; c = c + bin [ k ++ ] ; } if ( sum > cur -> max ) cur -> max = sum ; } cur = cur -> next ; } cur = head ; while ( cur != NULL ) { printf ( <str> , cur -> max ) ; cur = cur -> next ; } }", "label": 2, "id": 5929}
{"input": "int main ( ) { int b [ <int> ] [ <int> ] , a [ <int> ] , i , j , n , k = <int> , x [ <int> ] , t , m ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { x [ i ] = <int> ; } for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & b [ i ] [ j ] ) ; } } a [ <int> ] = b [ <int> ] [ <int> ] ; a [ <int> ] = b [ <int> ] [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = b [ <int> ] [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; a [ <int> ] = a [ <int> ] + b [ <int> ] [ <int> ] ; k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { a [ k ] = b [ i ] [ j ] + a [ ( i - <int> ) * ( i - <int> ) - i + j + <int> ] ; ++ k ; a [ k ] = b [ i ] [ j + <int> ] + a [ ( i - <int> ) * ( i - <int> ) - i + j + <int> ] ; ++ k ; } } for ( i = <int> ; i < ( ( n * n ) ) ; i ++ ) { if ( x [ m ] < a [ i ] ) { x [ m ] = a [ i ] ; } } } i = <int> ; while ( i < t ) { printf ( <str> , x [ i ] ) ; i ++ ; } return <int> ; }", "label": 1, "id": 5930}
{"input": "int gd ( int x , int y ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int x , y , gcd , lcm ; scanf ( <str> , & x , & y ) ; gcd = gd ( x , y ) ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int gd ( int x , int y ) { if ( y != <int> ) { gd ( y , x % y ) ; } else { return ( x ) ; } }", "label": 1, "id": 5931}
{"input": "int main ( ) { int g ; scanf ( <str> , & g ) ; while ( g -- ) { int n ; scanf ( <str> , & n ) ; int i , j , a [ n ] [ n ] , c , d ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } if ( i == <int> ) a [ i ] [ j ] = a [ i ] [ j ] + <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else if ( j == i ) { a [ i ] [ j ] = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } else { c = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; d = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; if ( d > c ) a [ i ] [ j ] = d ; else if ( c > d ) a [ i ] [ j ] = c ; } } } int t = <int> ; for ( i = <int> ; i <= n - <int> ; i ++ ) { if ( t <= a [ n - <int> ] [ i ] ) t = a [ n - <int> ] [ i ] ; } printf ( <str> , t ) ; } }", "label": 1, "id": 5932}
{"input": "int main ( ) { int t , m , i , j , arr [ <int> ] [ <int> ] , n ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = i ; j >= <int> ; j -- ) { if ( arr [ i + <int> ] [ j + <int> ] > arr [ i + <int> ] [ j ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 5933}
{"input": "int main ( ) { int input_no , i ; int function ( ) ; scanf ( <str> , & input_no ) ; int result [ input_no - <int> ] ; if ( input_no <= <int> ) { for ( i = <int> ; i < input_no ; i ++ ) result [ i ] = function ( ) ; for ( i = <int> ; i < input_no ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; } } int function ( ) { int n , i , j , a [ MAX ] [ MAX ] , greatest ; scanf ( <str> , & n ) ; if ( n > <int> && n < <int> ) { int solution ( int i , int j , int n , int a [ ] [ MAX ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] > <int> && a [ i ] [ j ] < <int> ) continue ; } greatest = solution ( <int> , <int> , n , a ) ; return greatest ; } } int solution ( int i , int j , int n , int a [ ] [ MAX ] ) { int t , t1 , t2 , b , v [ MAX ] [ MAX ] , c [ MAX ] [ MAX ] ; if ( i > ( n - <int> ) ) return <int> ; else { if ( v [ i ] [ j ] == <int> ) return c [ i ] [ j ] ; else { t1 = solution ( i + <int> , j , n , a ) ; t2 = solution ( i + <int> , j + <int> , n , a ) ; b = ( t1 > t2 ) ? t1 : t2 ; t = a [ i ] [ j ] + b ; t = c [ i ] [ j ] ; v [ i ] [ j ] = <int> ; return t ; } } }", "label": 1, "id": 5934}
{"input": "int main ( ) { int i , j , r , k , a [ <int> ] , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & r ) ; k = <int> ; for ( i = <int> ; i <= r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ k ++ ] ) ; } } j = <int> ; for ( i = <int> ; i < k ; i ++ ) { j = j + a [ i ] ; } printf ( <str> , ( j / <int> ) ) ; t -- ; } return <int> ; }", "label": 3, "id": 5935}
{"input": "int a [ <int> ] [ <int> ] = { <int> } ; int b [ <int> ] [ <int> ] = { <int> } ; int max ( int a , int b ) { return a > b ? a : b ; } void init ( int n ) { int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) b [ i ] [ j ] = <int> ; } int calc ( int i , int j , int n ) { if ( i > n || j > n ) { return <int> ; } if ( b [ i ] [ j ] > <int> ) return b [ i ] [ j ] ; b [ i ] [ j ] = max ( a [ i ] [ j ] + calc ( i + <int> , j , n ) , a [ i ] [ j ] + calc ( i + <int> , j + <int> , n ) ) ; return b [ i ] [ j ] ; } int main ( ) { int t = <int> ; int i = <int> ; int j = <int> ; int n = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; init ( n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , calc ( <int> , <int> , n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5936}
{"input": "int main ( ) { int t , n , max , i , j ; int dp [ <int> ] [ <int> ] , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; dp [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = dp [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( j == <int> ) dp [ i ] [ j ] = dp [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) dp [ i ] [ j ] = dp [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else { if ( dp [ i - <int> ] [ j ] > dp [ i - <int> ] [ j - <int> ] ) dp [ i ] [ j ] = dp [ i - <int> ] [ j ] + a [ i ] [ j ] ; else dp [ i ] [ j ] = dp [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } if ( max < dp [ i ] [ j ] ) max = dp [ i ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 5937}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int n , i ; long long int sum = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( n > <int> ) { int d [ n ] ; d [ n - <int> ] = <int> ; for ( i = n - <int> ; i >= <int> ; i -- ) { if ( a [ i ] <= a [ i + <int> ] ) { d [ i ] = d [ i + <int> ] + <int> ; } else { d [ i ] = d [ i + <int> ] ; } } printf ( <str> , d [ <int> ] + n ) ; } else { printf ( <str> , n ) ; } } return <int> ; }", "label": 1, "id": 5938}
{"input": "int main ( ) { int t , n , arr [ <int> ] , i , mini ; long long int cost ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; mini = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] < arr [ mini ] ) { mini = i ; } } cost = ( n - <int> ) * arr [ mini ] ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 5939}
{"input": "int * * make2darray ( int ) ; int choose ( int * * , int , int , int ) ; int main ( ) { int y ; scanf ( <str> , & y ) ; while ( y -- ) { int t , j , i , * * a ; scanf ( <str> , & t ) ; a = make2darray ( t ) ; int sum = a [ <int> ] [ <int> ] ; j = <int> ; for ( i = <int> ; i < t - <int> ; ) { j = choose ( a , i , j , t ) ; i ++ ; sum += a [ i ] [ j ] ; } printf ( <str> , sum ) ; } } int * * make2darray ( int rows ) { int * * x , i , cols ; x = malloc ( rows * sizeof ( * x ) ) ; for ( i = <int> ; i < rows ; i ++ ) { cols = i + <int> ; x [ i ] = malloc ( cols * sizeof ( * * x ) ) ; int j ; for ( j = <int> ; j < cols ; j ++ ) { scanf ( <str> , & x [ i ] [ j ] ) ; } } return x ; } int choose ( int * * x , int i , int j , int t ) { int a = <int> , b = <int> , w , e ; int k = j ; for ( w = i + <int> ; w < t ; w ++ ) { a += x [ w ] [ j ] ; } for ( w = i + <int> ; w < t ; w ++ ) { k ++ ; b += x [ w ] [ k ] ; } int g = ( a > b ) ? j : j + <int> ; return g ; }", "label": 1, "id": 5940}
{"input": "int main ( ) { long long int t , i , p , n , m , max , l , k ; scanf ( <str> , & t ) ; k = <int> ; while ( k < t ) { k ++ ; scanf ( <str> , & n , & m ) ; p = n * m ; if ( n > m ) max = n ; else max = m ; for ( i = <int> ; i < max ; i ++ ) { if ( n % i == <int> && m % i == <int> ) max = i ; } l = p / max ; printf ( <str> , max , l ) ; } return <int> ; }", "label": 1, "id": 5941}
{"input": "int main ( ) { int t , i , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; printf ( <str> , n / <int> + <int> ) ; } return <int> ; }", "label": 1, "id": 5942}
{"input": "int main ( ) { int A , B , i , T , x , GCD , LCM ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A < B ) { x = A ; } else { x = B ; } for ( ; x >= <int> ; x -- ) { if ( A % x == <int> && B % x == <int> ) { GCD = x ; break ; } } LCM = ( A * B ) / GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 1, "id": 5943}
{"input": "int a [ <int> ] [ <int> ] ; int max ( int a , int b ) { int tem ; if ( a > b ) tem = a ; else tem = b ; return tem ; } int main ( ) { int t , i , j , n , temp ; scanf ( <str> , & t ) ; while ( t ) { temp = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } for ( j = <int> ; j <= n ; j ++ ) { if ( temp < a [ n ] [ j ] ) temp = a [ n ] [ j ] ; else continue ; } printf ( <str> , temp ) ; t -- ; } }", "label": 0, "id": 5944}
{"input": "int main ( ) { int t , n , m , h , l ; long int x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & m ) ; x = ( long int ) n ; y = ( long int ) m ; h = <int> ; l = <int> ; while ( n != m ) { if ( n > m ) n = n - m ; else m = m - n ; } h = n ; l = ( x * y ) / h ; printf ( <str> , h , l ) ; } }", "label": 1, "id": 5945}
{"input": "int tr [ <int> ] [ <int> ] ; int main ( ) { int tc , i , l , j , k ; scanf ( <str> , & tc ) ; for ( i = <int> ; i <= tc ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & tr [ j ] [ k ] ) ; } } for ( j = l - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { tr [ j ] [ k ] += MAX ( tr [ j + <int> ] [ k ] , tr [ j + <int> ] [ k + <int> ] ) ; } } printf ( <str> , tr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5946}
{"input": "int main ( ) { int t , a , b , m , n , r , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; ++ i ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; m = a ; n = b ; while ( m % n != <int> ) { r = m % n ; m = n ; n = r ; } printf ( <str> , n , a * b / n ) ; } return <int> ; }", "label": 1, "id": 5947}
{"input": "main ( ) { int t , n , i , j , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = - <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] < <int> || a [ i ] [ j ] > <int> ) return <int> ; } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 5948}
{"input": "void printMat ( ) ; int findMax ( ) ; int matrix [ size ] [ size ] ; int result [ size ] [ size ] ; int main ( ) { int testCase ; int lines ; int i , j ; int row , col ; int down , right ; int max [ <int> ] ; int itr = <int> ; scanf ( <str> , & testCase ) ; for ( i = <int> ; i < testCase ; i ++ ) { scanf ( <str> , & lines ) ; for ( row = <int> ; row < lines ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { scanf ( <str> , & matrix [ row ] [ col ] ) ; } } result [ <int> ] [ <int> ] = matrix [ <int> ] [ <int> ] ; for ( row = <int> ; row < lines ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { down = row + <int> ; right = col + <int> ; if ( result [ row ] [ col ] + matrix [ down ] [ col ] > result [ down ] [ col ] ) result [ down ] [ col ] = result [ row ] [ col ] + matrix [ down ] [ col ] ; if ( result [ row ] [ col ] + matrix [ down ] [ right ] > result [ down ] [ right ] ) result [ down ] [ right ] = result [ row ] [ col ] + matrix [ down ] [ right ] ; } } printf ( <str> , findMax ( ) ) ; for ( row = <int> ; row < size ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { matrix [ row ] [ col ] = <int> ; result [ row ] [ col ] = <int> ; } } } return ( <int> ) ; } void printMat ( ) { int row , col ; for ( row = <int> ; matrix [ row ] [ <int> ] != <int> ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { printf ( <str> , result [ row ] [ col ] ) ; } printf ( <str> ) ; } } int findMax ( ) { int row , col ; int max = <int> ; for ( row = <int> ; matrix [ row ] [ <int> ] != <int> ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { if ( result [ row ] [ col ] > max ) max = result [ row ] [ col ] ; } } return max ; }", "label": 1, "id": 5949}
{"input": "int GCD ( int , int ) ; int LCM ( int , int ) ; int main ( ) { int n1 , n2 , T , res1 , res2 ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n1 , & n2 ) ; res1 = GCD ( n1 , n2 ) ; res2 = LCM ( n1 , n2 ) ; printf ( <str> , res1 , res2 ) ; } return <int> ; } int GCD ( int a , int b ) { int c = <int> , i , r1 = <int> ; if ( a == b ) { return a ; } if ( a > b ) { c = b ; } if ( b > a ) { c = a ; } for ( i = <int> ; i <= c ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { r1 = i ; } } return r1 ; } int LCM ( int a , int b ) { if ( a % b == <int> ) { return a ; } else if ( b % a == <int> ) { return b ; } else { return a * b ; } }", "label": 1, "id": 5950}
{"input": "int main ( ) { int n , i = <int> , j = <int> , max1 = <int> , max2 = <int> , max , t ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; int A [ <int> ] [ <int> ] ; int m [ <int> ] [ <int> ] ; scanf ( <str> , & A [ <int> ] [ <int> ] ) ; m [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; m [ i ] [ <int> ] = m [ i - <int> ] [ <int> ] + A [ i ] [ <int> ] ; } max = m [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == j ) m [ i ] [ j ] = m [ i - <int> ] [ j - <int> ] + A [ i ] [ j ] ; else { max1 = m [ i - <int> ] [ j ] + A [ i ] [ j ] ; max2 = m [ i - <int> ] [ j - <int> ] + A [ i ] [ j ] ; if ( max1 > max2 ) m [ i ] [ j ] = max1 ; else m [ i ] [ j ] = max2 ; } if ( max < m [ i ] [ j ] ) max = m [ i ] [ j ] ; } } printf ( <str> , max ) ; t -- ; } return <int> ; }", "label": 0, "id": 5951}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int a , c , b , lcm , gcd , i ; gcd = <int> ; lcm = <int> ; scanf ( <str> , & a , & b ) ; ( a > b ) ? ( a = a + b , b = a - b , a = a - b ) : ( a ) ; for ( i = <int> ; i <= a / <int> ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; if ( b % a == <int> ) gcd = a ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 5952}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , small , i , a [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , a + i ) ; small = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < small ) small = a [ i ] ; } printf ( <str> , small * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 5953}
{"input": "int main ( ) { int t ; long n1 , n2 , gcd , lcm , d , i , g , h ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n1 , & n2 ) ; d = n1 > n2 ? n2 : n1 ; h = n1 > n2 ? n1 : n2 ; for ( i = <int> ; i <= h ; i ++ ) { g = d * i ; if ( g % h == <int> ) lcm = h ; break ; } gcd = ( n1 * n2 ) / lcm ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 5954}
{"input": "void scan_f ( int * a ) { char c = <int> ; while ( c < <int> ) c = getc ( stdin ) ; * a = <int> ; while ( c > <int> ) { ( * a ) = ( * a ) * <int> + c - <char> ; c = getc ( stdin ) ; } } int getmax ( int * a , int n ) { int i , max = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ i ] ) { max = a [ i ] ; } } return max ; } int maxsum ( int data [ <int> ] [ <int> ] , int n , int i , int j ) { if ( i == n - <int> ) { return data [ i ] [ j ] ; } else { int a [ <int> ] = { <int> } , k , flag = <int> , count = <int> ; for ( k = <int> ; k < <int> * ( i + <int> ) ; k ++ ) { if ( flag ) { a [ count ++ ] = maxsum ( data , n , i + <int> , j ) ; flag = <int> ; } else { a [ count ++ ] = maxsum ( data , n , i + <int> , j + <int> ) ; flag = <int> ; } } return getmax ( a , count - <int> ) + data [ i ] [ j ] ; } } int main ( ) { int t ; scan_f ( & t ) ; while ( t -- ) { int n , j , i , data [ <int> ] [ <int> ] = { { <int> } } ; scan_f ( & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scan_f ( & data [ i ] [ j ] ) ; } } printf ( <str> , maxsum ( data , n , <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 5955}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int A , B , GCD , LCM , i , x , y , L , M ; scanf ( <str> , & A , & B ) ; if ( A >= B ) { for ( i = A ; i <= A * B ; i ++ ) { x = i % A ; y = i % B ; if ( ( x == <int> ) && ( y == <int> ) ) { LCM = i ; break ; } } } else { for ( i = B ; i <= A * B ; i ++ ) { L = i % A ; M = i % B ; if ( ( L == <int> ) && ( M == <int> ) ) { LCM = i ; break ; } } } GCD = ( A * B ) / LCM ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 2, "id": 5956}
{"input": "int main ( ) { int hcf , t , a , b , x , y , lcm , temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { temp = b ; b %= a ; a = temp ; } hcf = a ; lcm = x * y / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 5957}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , v , u , i , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) { u = b ; } else { u = a ; } int aa = a , bb = b ; v = <int> ; i = <int> ; while ( u >= i ) { if ( a % i == <int> && b % i == <int> ) { a = a / i ; b = b / i ; v = v * i ; i -- ; } if ( i > a || i > b ) break ; i ++ ; } printf ( <str> , v ) ; lcm = ( ( aa * bb ) / v ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 5958}
{"input": "long hcf ( long a , long b ) { if ( a % b == <int> ) return b ; else return hcf ( b , a % b ) ; } int main ( void ) { int t ; long a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long h = hcf ( a , b ) ; long l = ( a * b ) / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 0, "id": 5959}
{"input": "int lcm ( int a , int b ) { int i = a ; while ( <int> ) { if ( i % a == <int> && i % b == <int> ) break ; i ++ ; } return i ; } int gcd ( int a , int b ) { int x , y ; for ( x = <int> ; x <= a && x <= b ; x ++ ) { if ( a % x == <int> && b % x == <int> ) { y = x ; } } return y ; } int main ( ) { int a , b , t , l , g ; int i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { l = lcm ( a , b ) ; } else { l = lcm ( b , a ) ; } g = gcd ( a , b ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 2, "id": 5960}
{"input": "int main ( ) { int * x , * y , i , max = <int> , k , j , input ; int testcases , rows ; scanf ( <str> , & testcases ) ; y = malloc ( ( <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < testcases ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { x = malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & input ) ; x [ k ] = input + best ( y , k , j ) ; } free ( y ) ; y = x ; } for ( j = <int> ; j < rows ; j ++ ) { if ( max < y [ j ] ) max = y [ j ] ; } printf ( <str> , max ) ; } } int best ( int * prevRow , int rowIndex , int currentRowSize ) { int best = <int> ; if ( rowIndex > <int> && best < prevRow [ rowIndex - <int> ] ) best = prevRow [ rowIndex - <int> ] ; if ( rowIndex < currentRowSize && best < prevRow [ rowIndex ] ) best = prevRow [ rowIndex ] ; return best ; }", "label": 1, "id": 5961}
{"input": "int main ( ) { int test , n , * a , k , i , j , count = <int> ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } count = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) { break ; } } if ( j > i ) { count ++ ; } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 1, "id": 5962}
{"input": "int main ( ) { int t ; long i , n , num , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & min ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num ) ; min = ( num < min ) ? num : min ; } printf ( <str> , ( long long ) ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 5963}
{"input": "int main ( ) { int i , j , k , ns , nl , a [ <int> ] [ <int> ] , t ; scanf ( <str> , & ns ) ; while ( ns -- ) { scanf ( <str> , & nl ) ; for ( j = <int> ; j <= nl ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } printf ( <str> ) ; for ( j = nl ; j > <int> ; j -- ) { for ( k = <int> ; k < j ; k ++ ) { t = a [ j ] [ k ] < a [ j ] [ k + <int> ] ; a [ j - <int> ] [ k ] = a [ j - <int> ] [ k ] + a [ j ] [ k + t ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 5964}
{"input": "int main ( ) { int n , i , j , k ; long long int a , b ; scanf ( <str> , & k ) ; for ( j = <int> ; j < k ; j ++ ) { scanf ( <str> , & a , & b ) ; n = ( a >= b ) ? a : b ; for ( i = n ; i > <int> ; i -- ) { if ( ( a % i ) == <int> && ( b % i ) == <int> ) { printf ( <str> , i , ( a / i ) * ( b / i ) * i ) ; break ; } } } }", "label": 2, "id": 5965}
{"input": "void calculate ( ) ; int mylog ( int num ) ; int main ( int argc , char * argv [ ] ) { int triangleCount ; scanf ( <str> , & triangleCount ) ; while ( triangleCount > <int> ) { calculate ( ) ; triangleCount -- ; } return EXIT_SUCCESS ; } void calculate ( ) { int lineCount , lineNum , sumLen , i , max , size ; scanf ( <str> , & lineCount ) ; int line [ lineCount ] ; int sum [ <int> ] ; lineNum = <int> ; sumLen = <int> ; max = <int> ; while ( lineCount > <int> ) { int i ; lineNum ++ ; for ( i = <int> ; i < lineNum ; i ++ ) scanf ( <str> , & line [ i ] ) ; if ( lineNum == <int> ) { sum [ <int> ] = line [ <int> ] ; sumLen = <int> ; } else { for ( i = sumLen ; i > <int> ; i -- ) { int lineC = mylog ( i ) ; sum [ ( <int> * i ) - <int> ] = sum [ i - <int> ] + line [ lineC + <int> ] ; sum [ ( <int> * i ) - <int> ] = sum [ i - <int> ] + line [ lineC ] ; } sumLen *= <int> ; } lineCount -- ; } for ( i = <int> ; i < sumLen ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( <str> , max ) ; } int mylog ( int num ) { int count = <int> ; while ( num > <int> ) { num = num / <int> ; count ++ ; } return count - <int> ; }", "label": 3, "id": 5966}
{"input": "int main ( void ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; } else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5967}
{"input": "int main ( ) { int N = <int> , A [ <int> ] = { <int> } , i = <int> , T = <int> ; long long int count = <int> , val = <int> ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( i = <int> ; i < ( N - <int> ) ; i ++ ) { while ( A [ i ] < A [ i + <int> ] ) { count ++ ; ++ i ; } val += ( count * ( count + <int> ) ) / <int> ; count = <int> ; } if ( N == <int> ) { val = <int> ; } printf ( <str> , val ) ; memset ( ( void * ) A , <int> , sizeof ( A ) ) ; val = <int> ; count = <int> ; } return ( <int> ) ; }", "label": 1, "id": 5968}
{"input": "int gcd ( int x , int y ) { int a ; a = y % x ; if ( a == <int> ) return x ; gcd ( a , x ) ; } int main ( ) { int a , b , swap , c , d , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { swap = a ; a = b ; b = swap ; } if ( b % a == <int> ) { d = ( a * b ) / a ; printf ( <str> , a , d ) ; } else { c = gcd ( a , b ) ; d = ( a * b ) / c ; printf ( <str> , c , d ) ; } } return <int> ; }", "label": 1, "id": 5969}
{"input": "int main ( ) { int t , n , min , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ <int> ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 1, "id": 5970}
{"input": "int main ( void ) { int n , i , t , j , k ; int x [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & t ) ; for ( j = <int> ; j <= t ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & x [ j ] [ k ] ) ; } } for ( j = t - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { x [ j ] [ k ] = x [ j ] [ k ] + ( x [ j + <int> ] [ k ] > x [ j + <int> ] [ k + <int> ] ) ? x [ j + <int> ] [ k ] : x [ j + <int> ] [ k + <int> ] ; } } printf ( <str> , x [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 5971}
{"input": "int main ( ) { int i , j , k , a = <int> , b , arr [ <int> ] [ <int> ] ; int l , m ; scanf ( <str> , & a ) ; if ( a < <int> ) { for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b ) ; if ( b < <int> ) { for ( j = <int> ; j < b ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ j ] [ k ] ) ; printf ( <str> ) ; } } for ( l = b - <int> ; l >= <int> ; l -- ) { for ( m = <int> ; m <= l ; m ++ ) { arr [ l ] [ m ] += ( ( arr [ l + <int> ] [ m ] > arr [ l + <int> ] [ m + <int> ] ) ? arr [ l + <int> ] [ m ] : arr [ l + <int> ] [ m + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } else { printf ( <str> ) ; } } } else { printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 5972}
{"input": "int main ( ) { long int a , b , x , y , t , gcd , lcm , n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 0, "id": 5973}
{"input": "int main ( ) { int num1 , num2 , temp1 , temp2 , t , l ; float lcm ; int n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & num1 , & num2 ) ; temp1 = num1 ; temp2 = num2 ; while ( num1 != num2 ) { if ( num1 > num2 ) num1 = num1 - num2 ; else num2 = num2 - num1 ; } l = ( temp1 * temp2 ) / num1 ; printf ( <str> , num1 , l ) ; } return <int> ; }", "label": 1, "id": 5974}
{"input": "int main ( ) { int t , a , b , l , g , i , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a / <int> ; } else { n = b / <int> ; } g = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { if ( g <= i ) { g = i ; } } } l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 5975}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return ( a ) ; if ( a % b == <int> ) return ( b ) ; if ( b % a == <int> ) return ( a ) ; if ( a > b ) return ( gcd ( a % b , b ) ) ; if ( b > a ) return ( gcd ( a , b % a ) ) ; } int main ( ) { int a , b , t , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; printf ( <str> , g , a * b / g ) ; } return <int> ; }", "label": 1, "id": 5976}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int findmax ( void * a , int i , int j , int size ) { if ( i > size || j > size ) return <int> ; else return ( * ( ( ( int * ) a ) + ( size * i ) + j ) + max ( findmax ( a , i + <int> , j , size ) , findmax ( a , i + <int> , j + <int> , size ) ) ) ; } int main ( ) { int i = <int> , j = <int> ; int testcases = <int> ; int lineno = <int> ; int pathsum = <int> ; scanf ( <str> , & testcases ) ; while ( testcases >= <int> ) { scanf ( <str> , & lineno ) ; int a [ lineno ] [ lineno ] ; for ( i = <int> ; i <= lineno ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { * ( * ( a + i ) + j ) = <int> ; } } for ( i = <int> ; i <= lineno ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , ( * ( a + i ) + j ) ) ; } } pathsum = findmax ( a , <int> , <int> , lineno ) ; printf ( <str> , pathsum ) ; testcases -- ; } return <int> ; }", "label": 1, "id": 5977}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcd , i ; scanf ( <str> , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } for ( i = a ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; lcd = ( a * b ) / gcd ; break ; } } printf ( <str> , gcd , lcd ) ; } }", "label": 1, "id": 5978}
{"input": "int main ( ) { long long int a , b , i , j , g , l , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i != <int> ) ; else if ( b % i != <int> ) ; else j = i ; } printf ( <str> , j , ( ( a * b ) / j ) ) ; } return <int> ; }", "label": 2, "id": 5979}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , num , den , rem , gcd , lcm ; scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } return <int> ; }", "label": 1, "id": 5980}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i , j , c = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int r = <int> ; for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { if ( a [ i + <int> ] >= a [ i ] ) r ++ ; else { c += ( r * ( r + <int> ) ) / <int> ; r = <int> ; } } c += ( r * ( r + <int> ) ) / <int> ; printf ( <str> , c ) ; } return <int> ; }", "label": 0, "id": 5981}
{"input": "int <unk> [ <int> ] [ <int> ] , arr [ <int> ] [ <int> ] ; int sum ( int i , int j , int n ) { int c = <int> ; if ( i == n ) return arr [ i ] [ j ] ; if ( <unk> [ i ] [ j ] >= <int> ) return <unk> [ i ] [ j ] ; c = arr [ i ] [ j ] + MAX ( sum ( ( i + <int> ) , j , n ) , sum ( ( i + <int> ) , ( j + <int> ) , n ) ) ; <unk> [ i ] [ j ] = c ; return c ; } int main ( ) { int t , i , j , p , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; <unk> [ i ] [ j ] = - <int> ; } } p = sum ( <int> , <int> , n - <int> ) ; printf ( <str> , p ) ; } return <int> ; }", "label": 0, "id": 5982}
{"input": "int main ( ) { int t ; int n ; int num ; int i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int small = INT_MAX ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num ) ; if ( num < small ) small = num ; } printf ( <str> , ( n - <int> ) * small ) ; } return <int> ; }", "label": 0, "id": 5983}
{"input": "int main ( ) { int j , i , a [ <int> ] [ <int> ] , n , test ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5984}
{"input": "int memo [ <int> ] [ <int> ] ; int path ( int no [ <int> ] [ <int> ] , int row , int col , int tot ) { if ( memo [ row ] [ col ] != - <int> ) return memo [ row ] [ col ] ; if ( row == tot - <int> ) return no [ row ] [ col ] ; return ( no [ row ] [ col ] + max ( path ( no , row + <int> , col , tot ) , path ( no , row + <int> , col + <int> , tot ) ) ) ; } int main ( ) { int n , i ; memset ( memo , - <int> , sizeof ( memo ) ) ; scanf ( <str> , & n ) ; int ans [ n ] ; for ( i = <int> ; i < n ; i ++ ) { int k , j , lines ; scanf ( <str> , & lines ) ; if ( lines <= <int> ) break ; int no [ <int> ] [ <int> ] ; for ( k = <int> ; k < lines ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & no [ k ] [ j ] ) ; } } ans [ i ] = path ( no , <int> , <int> , lines ) ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , ans [ i ] ) ; } return <int> ; }", "label": 2, "id": 5985}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , index = - <int> ; long long min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] <= min ) { min = a [ i ] ; index = i ; } } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 5986}
{"input": "int main ( void ) { int numberOfCases , i , numberOfLines , rowNumber , colNumber , maxSum = <int> , tempSum = <int> , tempCol ; scanf ( <str> , & numberOfCases ) ; for ( i = <int> ; i <= numberOfCases ; i ++ ) { scanf ( <str> , & numberOfLines ) ; int values [ numberOfLines ] [ numberOfLines ] ; for ( rowNumber = <int> ; rowNumber < numberOfLines ; rowNumber ++ ) { for ( colNumber = <int> ; colNumber <= rowNumber ; colNumber ++ ) { scanf ( <str> , & values [ rowNumber ] [ colNumber ] ) ; } } for ( colNumber = <int> ; colNumber < numberOfLines ; colNumber ++ ) { tempSum = <int> ; for ( rowNumber = colNumber ; rowNumber < numberOfLines ; rowNumber ++ ) { tempSum += values [ rowNumber ] [ colNumber ] ; } if ( tempSum > maxSum ) { maxSum = tempSum ; } } for ( colNumber = <int> ; colNumber < numberOfLines ; colNumber ++ ) { tempCol = colNumber ; tempSum = <int> ; for ( rowNumber = colNumber ; rowNumber < numberOfLines ; rowNumber ++ , tempCol ++ ) { tempSum += values [ rowNumber ] [ tempCol ] ; } if ( tempSum > maxSum ) { maxSum = tempSum ; } } printf ( <str> , maxSum ) ; } return <int> ; }", "label": 1, "id": 5987}
{"input": "int main ( void ) { int a , b , gcd = <int> , lcm = <int> , n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a % b == <int> || b % a == <int> ) { if ( a % b == <int> ) gcd = a / b ; else if ( b % a == <int> ) gcd = b / a ; } else gcd = <int> ; lcm = a * b ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 5988}
{"input": "int main ( ) { int t , m , s ; scanf ( <str> , & t ) ; while ( t -- ) { long long int s = <int> ; long int n , i ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] >= a [ i + <int> ] ) s = s + a [ i + <int> ] ; else { m = a [ i ] ; a [ i ] = a [ i + <int> ] ; a [ i + <int> ] = m ; s = s + a [ i + <int> ] ; } } printf ( <str> , s ) ; } }", "label": 1, "id": 5989}
{"input": "int arr [ <int> ] [ <int> ] , n , i , j ; int main ( ) { int sum = <int> , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } j = <int> ; i = <int> ; sum = sum + arr [ i ] [ j ] ; while ( i < n ) { if ( arr [ i + <int> ] [ j ] >= arr [ i + <int> ] [ j + <int> ] ) sum = sum + arr [ i + <int> ] [ j ] ; else { sum = sum + arr [ i + <int> ] [ j + <int> ] ; j = j + <int> ; } i ++ ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 5990}
{"input": "int maxi ( int a , int b ) { if ( a > b ) return a ; else return b ; } int func ( int , int ) ; int arr [ <int> ] [ <int> ] = { <int> } , record [ <int> ] [ <int> ] , row ; int main ( ) { int tc ; scanf ( <str> , & tc ) ; while ( tc -- ) { int i , j ; scanf ( <str> , & row ) ; for ( j = <int> ; j < row ; j ++ ) for ( i = <int> ; i <= j ; i ++ ) scanf ( <str> , & arr [ j ] [ i ] ) ; for ( j = <int> ; j < <int> ; j ++ ) for ( i = <int> ; i < <int> ; i ++ ) record [ j ] [ i ] = - <int> ; printf ( <str> , arr [ <int> ] [ <int> ] + maxi ( func ( <int> , <int> ) , func ( <int> , <int> ) ) ) ; } return <int> ; } int func ( int crow , int ccoloumn ) { if ( crow > row - <int> ) { return <int> ; } if ( record [ crow ] [ ccoloumn ] == - <int> ) { record [ crow ] [ ccoloumn ] = arr [ crow ] [ ccoloumn ] + maxi ( func ( crow + <int> , ccoloumn ) , func ( crow + <int> , ccoloumn + <int> ) ) ; } return record [ crow ] [ ccoloumn ] ; }", "label": 0, "id": 5991}
{"input": "int gcd ( int a , int b ) { int c ; if ( a == <int> ) return b ; else return ( gcd ( b % a , a ) ) ; return b ; } int main ( ) { int x , y , a , b ; int T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; x = gcd ( a , b ) ; y = a * b / x ; printf ( <str> , x , y ) ; } return <int> ; }", "label": 1, "id": 5992}
{"input": "int trisum ( int * , int , int ) ; int main ( ) { int n , t , i , a [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < ( ( t * ( t + <int> ) ) / <int> ) ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } printf ( <str> , trisum ( a , <int> , t ) ) ; } return <int> ; } int trisum ( int * a , int i , int n ) { int sum1 = <int> , sum2 ; if ( i < n ) { sum1 = trisum ( a + i , i + <int> , n ) ; sum2 = trisum ( a + i + <int> , i + <int> , n ) ; sum1 = ( sum1 > sum2 ) ? sum1 : sum2 ; } return * a + sum1 ; }", "label": 2, "id": 5993}
{"input": "void input ( int * * a , int n ) { int i , j ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int maxPath ( int * * a , int i , int j , int n ) { if ( i == n || j == n ) return a [ i ] [ j ] ; else if ( i == j && i != <int> ) return a [ i ] [ j ] ; else return a [ i ] [ j ] + max ( maxPath ( a , i + <int> , j , n ) , maxPath ( a , i + <int> , j + <int> , n ) ) ; } int main ( ) { int tc , n , i , * * a ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & n ) ; a = ( int * * ) calloc ( n , sizeof ( int * ) ) ; for ( i = <int> ; i <= n ; i ++ ) a [ i ] = ( int * ) calloc ( n , sizeof ( int ) ) ; input ( a , n ) ; printf ( <str> , maxPath ( a , <int> , <int> , n ) ) ; } return <int> ; }", "label": 2, "id": 5994}
{"input": "int main ( ) { long long int t , a , b , x , i , j ; scanf ( <str> , & t ) ; long long int gcd , lcm ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; lcm = a * b ; if ( a == <int> ) gcd = a ; else if ( b == <int> ) gcd = b ; else { for ( j = <int> ; b != <int> ; j ++ ) { x = b ; b = a % b ; a = x ; } gcd = a ; } lcm = lcm / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 0, "id": 5995}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , maxx = - <int> , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i > <int> ) { if ( j == <int> ) { a [ i ] [ j ] += a [ i - <int> ] [ j ] ; } else a [ i ] [ j ] += ( a [ i - <int> ] [ j - <int> ] > a [ i - <int> ] [ j ] ) ? a [ i - <int> ] [ j - <int> ] : a [ i - <int> ] [ j ] ; } } } for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] > maxx ) { maxx = a [ n - <int> ] [ i ] ; } } printf ( <str> , maxx ) ; } return <int> ; }", "label": 0, "id": 5996}
{"input": "int GCD ( int A , int B ) { if ( A % B ) GCD ( B , A % B ) ; else return B ; } int main ( ) { int t ; int G , A , B ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) G = GCD ( A , B ) ; else G = GCD ( B , A ) ; printf ( <str> , G , A * B / G ) ; } return <int> ; }", "label": 1, "id": 5997}
{"input": "long pow ( int b , int p ) { long ans = <int> ; while ( p -- ) ans *= b ; return ans ; } int main ( ) { int t , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; int max = r * ( r + <int> ) / <int> ; int j = <int> , i = <int> ; int now [ <int> ] ; int * prev = NULL , * next = NULL ; int maxn = <int> ; while ( j <= r ) { i = <int> ; while ( i < j ) { scanf ( <str> , & now [ i ] ) ; i ++ ; } next = ( int * ) malloc ( sizeof ( int ) * pow ( <int> , j - <int> ) ) ; int k = <int> ; int l = <int> ; i = <int> ; unsigned long power = pow ( <int> , j - <int> ) ; while ( l < power ) { if ( j != <int> ) next [ l ] = prev [ k ] + now [ i ] ; else next [ l ] = now [ i ] ; if ( maxn < next [ l ] ) maxn = next [ l ] ; l ++ ; i ++ ; if ( l >= power ) break ; next [ l ] = prev [ k ] + now [ i ] ; if ( maxn < next [ l ] ) maxn = next [ l ] ; l ++ ; k ++ ; } j ++ ; i = <int> ; prev = ( int * ) realloc ( prev , <int> ) ; prev = next ; } printf ( <str> , maxn ) ; } return <int> ; }", "label": 3, "id": 5998}
{"input": "int main ( ) { int s , i , j , n , b ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( b = <int> ; b < n ; b ++ ) { scanf ( <str> , & s ) ; for ( i = <int> ; i < s ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = s - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 5999}
{"input": "int n , max = <int> ; void trian ( int a [ ] [ n ] , int len , int x , int sum ) { sum = sum + a [ len ] [ x ] ; if ( len == n - <int> ) { if ( max < sum ) { max = sum ; } } else { trian ( a , len + <int> , x , sum ) ; trian ( a , len + <int> , x + <int> , sum ) ; } } void main ( ) { int i , k , t , h = <int> ; scanf ( <str> , & k ) ; int c [ k ] ; while ( k ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; t = <int> ; while ( t < n ) { for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a [ t ] [ i ] ) ; } for ( i = t + <int> ; i < n ; i ++ ) { a [ t ] [ i ] = - <int> ; } t ++ ; } max = <int> ; trian ( a , <int> , <int> , <int> ) ; c [ h ] = max ; h ++ ; k -- ; } for ( i = <int> ; i < h ; i ++ ) { if ( i == h - <int> ) printf ( <str> , c [ i ] ) ; else printf ( <str> , c [ i ] ) ; } }", "label": 2, "id": 6000}
{"input": "int gcd ( int a , int b ) ; int lcm ( int a , int b ) ; int main ( void ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; }", "label": 1, "id": 6001}
{"input": "int max ( int a , int b ) { int max = a ; if ( max < b ) { max = b ; } return max ; } int GCD ( int a , int b ) { if ( b == <int> ) return a ; int m = max ( a , b ) ; int n = a + b - max ( a , b ) ; int x = m % n ; m = n ; n = x ; GCD ( m , n ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , GCD ( a , b ) , a * b / ( GCD ( a , b ) ) ) ; } return <int> ; }", "label": 1, "id": 6002}
{"input": "int gcd ( long long int x , long long int y ) ; main ( ) { long long int t ; long long int a , b , g , l , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long long int c [ a + <int> ] , d [ b + <int> ] ; g = gcd ( a , b ) ; printf ( <str> , g ) ; for ( i = <int> ; i <= a ; i ++ ) { c [ i ] = b * i ; } for ( i = <int> ; i <= b ; i ++ ) { d [ i ] = a * i ; } for ( i = <int> ; i <= a ; i ++ ) { for ( j = <int> ; j <= b ; j ++ ) { if ( c [ i ] == d [ j ] ) { goto end ; } } } end : printf ( <str> , c [ i ] ) ; } return <int> ; } int gcd ( long long int x , long long int y ) { if ( y == <int> ) return ( x ) ; else return ( gcd ( y , x % y ) ) ; }", "label": 3, "id": 6003}
{"input": "int main ( ) { int t , n , i , j , s1 , s2 , ar [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & ar [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { s1 = ar [ i ] [ j ] + ar [ i + <int> ] [ j + <int> ] ; s2 = ar [ i ] [ j ] + ar [ i + <int> ] [ j ] ; if ( s1 > s2 ) { ar [ i ] [ j ] = s1 ; } else { ar [ i ] [ j ] = s2 ; } } } printf ( <str> , ar [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 6004}
{"input": "main ( ) { int gcd ( int , int ) ; int test , i , a , b ; int lcm , hcf ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; if ( a % b == <int> ) { lcm = a ; } else { lcm = a * b / hcf ; } printf ( <str> , hcf , lcm ) ; } } int gcd ( int x , int y ) { if ( x % y == <int> ) return y ; else return gcd ( y , x % y ) ; }", "label": 1, "id": 6005}
{"input": "int main ( ) { int t ; long int a , b , gcd , lcm , n , d , r ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { n = a ; d = b ; } else { n = b ; d = a ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6006}
{"input": "int main ( void ) { int temp , cost , i , t , n , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; cost = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; temp = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( temp > a [ i ] ) temp = a [ i ] ; cost = cost + temp ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 6007}
{"input": "int main ( ) { int t , a , b , max , min , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; max = a > b ? a : b ; min = a < b ? a : b ; int i = <int> ; do { lcm = max * i ; i ++ ; } while ( lcm % min != <int> ) ; gcd = a * b / lcm ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6008}
{"input": "int main ( ) { int sum , t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 6009}
{"input": "int main ( ) { int data [ <int> ] [ <int> ] , tcases , rows , max [ <int> ] [ <int> ] , i , j , out , z ; printf ( <str> ) ; scanf ( <str> , & tcases ) ; for ( z = <int> ; z < tcases ; z ++ ) { printf ( <str> , z ) ; scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & data [ i ] [ j ] ) ; } } max [ <int> ] [ <int> ] = data [ <int> ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j != <int> ) { if ( max [ i - <int> ] [ j ] > max [ i - <int> ] [ j - <int> ] ) max [ i ] [ j ] = data [ i ] [ j ] + max [ i - <int> ] [ j ] ; else max [ i ] [ j ] = data [ i ] [ j ] + max [ i - <int> ] [ j - <int> ] ; } else max [ i ] [ j ] = data [ i ] [ j ] + max [ i - <int> ] [ j ] ; } } out = <int> ; for ( i = <int> ; i < rows ; i ++ ) { if ( out < max [ rows - <int> ] [ i ] ) out = max [ rows - <int> ] [ i ] ; } printf ( <str> , out ) ; } }", "label": 1, "id": 6010}
{"input": "int main ( ) { int n , i , j ; int lines ; int max , max1 = <int> ; int arr [ <int> ] [ <int> ] ; int res [ <int> ] ; int cnt = <int> ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & lines ) ; max = <int> ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; max1 = <int> ; if ( i - <int> >= <int> ) { max1 = arr [ i - <int> ] [ j ] ; if ( j - <int> >= <int> ) { if ( arr [ i - <int> ] [ j - <int> ] > arr [ i - <int> ] [ j ] ) { max1 = arr [ i - <int> ] [ j - <int> ] ; } } } arr [ i ] [ j ] += max1 ; if ( i == lines - <int> ) { if ( arr [ i ] [ j ] > max ) { max = arr [ i ] [ j ] ; } } } } n -- ; res [ cnt ++ ] = max ; } for ( i = <int> ; i < cnt ; i ++ ) { printf ( <str> , res [ i ] ) ; } return <int> ; }", "label": 1, "id": 6011}
{"input": "int main ( ) { long long int A , B , gcd , j , lcm , a , b , rem , n ; int T , i ; scanf ( <str> , & T ) ; printf ( <str> ) ; if ( T >= <int> && T <= <int> ) { for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A >= <int> && A <= <int> && B >= <int> && B <= <int> ) { a = A ; b = B ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } for ( ; ( a % b ) != <int> ; ) { rem = a % b ; a = b ; b = rem ; } gcd = b ; a = A ; b = B ; lcm = <int> ; n = b ; if ( a < b ) { a = a + b ; b = a - b ; a = a - b ; } for ( j = <int> ; j <= pow ( n , <int> / <int> ) ; ) { if ( a % j == <int> && b % j == <int> ) { a = a / j ; b = b / j ; lcm = lcm * j ; } else { if ( ( j + <int> ) % <int> == <int> ) j += <int> ; else j ++ ; } } lcm = lcm * a * b ; printf ( <str> , gcd , lcm ) ; } } } return <int> ; }", "label": 1, "id": 6012}
{"input": "int main ( void ) { int n , a [ <int> ] [ <int> ] , t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] > a [ i ] [ j + <int> ] ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6013}
{"input": "long int gcd ( long int x , long int y ) { if ( y == <int> ) return x ; else return gcd ( y , x % y ) ; } int main ( ) { int n ; long int a , b , gc , lc ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; gc = gcd ( a , b ) ; lc = a * b / gc ; printf ( <str> , gc , lc ) ; } return <int> ; }", "label": 0, "id": 6014}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) { return b ; } else { return gcd ( b % a , a ) ; } } int main ( ) { int a , b , hcf , lcm , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return ( <int> ) ; }", "label": 1, "id": 6015}
{"input": "int main ( ) { int t , a , b , temp , t1 , x , y , lcm , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } while ( a % b != <int> ) { t1 = b ; b = a % b ; a = t1 ; } lcm = ( x * y ) / b ; printf ( <str> , b , lcm ) ; } }", "label": 1, "id": 6016}
{"input": "int main ( int argc , char * argv [ ] ) { int t , j , max ; int n , i , a , b , c , index , no_need ; int sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; max = b = c = a = no_need = i = j = index = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { if ( i == <int> ) { scanf ( <str> , & a ) ; max = a ; index = <int> ; } else { for ( j = <int> ; j < index ; j ++ ) scanf ( <str> , & no_need ) ; scanf ( <str> , & b , & c ) ; if ( b > c ) max = b ; else { max = c ; index ++ ; } for ( j = index + <int> ; j < i ; j ++ ) scanf ( <str> , & no_need ) ; } sum += max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6017}
{"input": "int main ( ) { int z , t , i , j ; scanf ( <str> , & z ) ; while ( z -- ) { scanf ( <str> , & t ) ; int arr [ t ] [ t ] ; for ( i = <int> ; i < t ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( j = i + <int> ; j < t ; ++ j ) arr [ i ] [ j ] = <int> ; } for ( i = t - <int> ; i >= <int> ; -- i ) { for ( j = <int> ; j < i ; ++ j ) { arr [ i - <int> ] [ j ] += max ( arr [ i ] [ j ] , arr [ i ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6018}
{"input": "int main ( ) { int T , i , n , j , x , y , count , flag = <int> ; int ar [ <int> ] ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & ar [ j ] ) ; count = <int> ; for ( x = <int> ; x < n ; x ++ ) { for ( j = x ; j < n ; j ++ ) { flag = <int> ; for ( y = x ; y < j ; y ++ ) { if ( ar [ y ] <= ar [ y + <int> ] ) flag ++ ; else { flag = <int> ; break ; } } if ( flag > <int> ) count ++ ; } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 2, "id": 6019}
{"input": "int main ( ) { int n , i , sum , k , a [ <int> ] [ <int> ] , m = <int> , l = <int> , j ; scanf ( <str> , & k ) ; while ( m <= k ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n - <int> ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; sum = <int> ; for ( i = <int> ; i <= n - <int> ; i ++ ) for ( j = <int> ; j <= i - i ; j ++ ) { sum = sum + ( max ( a [ i ] [ j ] , a [ i ] [ l + <int> ] ) ) ; if ( a [ i ] [ j ] < a [ i ] [ l + <int> ] ) l ++ ; } printf ( <str> , sum ) ; m ++ ; } return <int> ; }", "label": 3, "id": 6020}
{"input": "int main ( void ) { int tcs , m , i , j ; scanf ( <str> , & tcs ) ; int mat [ <int> ] [ <int> ] ; while ( tcs > <int> ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i + <int> ; j ++ ) if ( j != i ) mat [ i ] [ j ] = - <int> ; } for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , mat [ i ] [ j ] ) ; } int largest = - <int> ; int temp1 , temp2 = <int> ; for ( i = <int> ; i < m - <int> ; i ++ ) { for ( j = <int> ; mat [ i ] [ j ] != - <int> ; j ++ ) { if ( j == <int> ) temp1 = mat [ i + <int> ] [ j ] ; else temp1 = temp2 ; mat [ i + <int> ] [ j ] = mat [ i ] [ j ] + temp1 ; if ( mat [ i + <int> ] [ j ] > largest ) largest = mat [ i + <int> ] [ j ] ; temp2 = mat [ i + <int> ] [ j + <int> ] ; mat [ i + <int> ] [ j + <int> ] = mat [ i ] [ j ] + temp2 ; if ( mat [ i + <int> ] [ j + <int> ] > largest ) largest = mat [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , largest ) ; tcs -- ; } return <int> ; }", "label": 3, "id": 6021}
{"input": "void cost ( long long int [ ] , long long int ) ; int main ( ) { long long int i , no , n ; long long int a [ <int> ] ; scanf ( <str> , & no ) ; for ( i = <int> ; i < no ; i ++ ) { scanf ( <str> , & n ) ; cost ( a , n ) ; } return <int> ; } void cost ( long long int a [ ] , long long int n ) { long long int min , j , cst ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) { min = a [ j ] ; } } printf ( <str> , ( unsigned long long ) ( ( n - <int> ) * min ) ) ; return ; }", "label": 3, "id": 6022}
{"input": "long int gcd ( long int a , long int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } long int lcm ( long int a , long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { long int a , b ; int n , i ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } }", "label": 3, "id": 6023}
{"input": "int a [ <int> ] ; int main ( ) { int t , n , i , a , b , temp , ctr ; scanf ( <str> , & t ) ; while ( t -- ) { temp = <int> ; ctr = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( i == <int> ) { temp = <int> ; b = a ; } if ( a >= b ) { temp ++ ; b = a ; } else { ctr ++ ; temp = <int> ; } } printf ( <str> , ctr + n ) ; } return <int> ; }", "label": 1, "id": 6024}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , s = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) if ( a [ i ] < a [ i + <int> ] ) if ( a [ i ] < s ) s = a [ i ] ; printf ( <str> , s * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6025}
{"input": "int a [ <int> ] [ <int> ] ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j - i ] ) a [ i - <int> ] [ j - <int> ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j - <int> ] += a [ i ] [ j - <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6026}
{"input": "int max ( int , int ) ; int main ( ) { int n , no ; int a [ <int> ] [ <int> ] = { <int> } ; int i , j , k ; int val [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & no ) ; for ( j = <int> ; j < no ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = <int> ; j < no ; j ++ ) { val [ no ] [ j ] = a [ no ] [ j ] ; } for ( j = no - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j ; k ++ ) { val [ j ] [ k ] = max ( val [ j + <int> ] [ k ] , val [ j + <int> ] [ k + <int> ] ) + a [ j ] [ k ] ; } } printf ( <str> , val [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int x , int y ) { int d = ( x > y ) ? x : y ; return d ; }", "label": 0, "id": 6027}
{"input": "int a [ <int> ] [ <int> ] ; int sum ( int ) ; int main ( ) { int t , i , j , n ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , sum ( n ) ) ; t -- ; } return <int> ; } int sum ( int n ) { int k = <int> , i , j = <int> , m = - <int> ; int s [ <int> ] [ <int> ] = { <int> } ; s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= i + <int> ; j ++ ) { if ( j == <int> ) s [ i + <int> ] [ j ] = s [ i ] [ <int> ] + a [ i + <int> ] [ j ] ; k = s [ i ] [ j - <int> ] + a [ i + <int> ] [ j ] ; if ( k < ( s [ i ] [ j ] + a [ i + <int> ] [ j ] ) ) s [ i + <int> ] [ j ] = s [ i ] [ j ] + a [ i + <int> ] [ j ] ; else s [ i + <int> ] [ j ] = k ; } } for ( i = <int> ; i < n ; i ++ ) { if ( s [ n - <int> ] [ i ] > m ) m = s [ n - <int> ] [ i ] ; } return m ; }", "label": 1, "id": 6028}
{"input": "int HCF ( int , int ) ; int LCM ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , HCF ( a , b ) , LCM ( a , b ) ) ; } return <int> ; } int HCF ( int n , int m ) { if ( n > m ) return HCF ( n - m , m ) ; else if ( n < m ) return HCF ( n , m - n ) ; else return n ; } int LCM ( int p , int q ) { int i = <int> ; if ( p > q ) { while ( ( p * i ) % q != <int> ) i ++ ; return p * i ; } else if ( q > p ) { while ( ( q * i ) % p != <int> ) i ++ ; return q * i ; } else if ( p == q ) return p ; }", "label": 1, "id": 6029}
{"input": "int main ( void ) { int i , j , n , t ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6030}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int s , x = <int> ; int n ; scanf ( <str> , & n ) ; scanf ( <str> , & s ) ; s = <int> ; for ( int j = <int> ; j <= n ; j ++ ) { int max = <int> ; for ( int i = <int> ; i <= j ; i ++ ) { int a ; scanf ( <str> , & a ) ; if ( max < a ) max = a ; } s = s + max ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 6031}
{"input": "int min ( int a , int b ) { if ( a < b ) return a ; else return b ; } int main ( ) { long long int t , i , n , j , temp ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; long long int cnt = <int> ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; long long int min = arr [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( arr [ j ] < min ) min = arr [ j ] ; } cnt = min * ( n - <int> ) ; printf ( <str> , cnt ) ; } return <int> ; }", "label": 0, "id": 6032}
{"input": "int main ( void ) { int t ; long int a , b , i , gcd ; double lcm ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 2, "id": 6033}
{"input": "long gcd ( long a , long b ) { while ( <int> ) { if ( a >= b ) { if ( a % b == <int> ) return b ; else a = a - b ; } else { if ( b % a == <int> ) return a ; else b = b - a ; } } } int main ( ) { long t ; long a , b , d ; long c ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; d = gcd ( a , b ) ; c = ( a * b ) / d ; printf ( <str> , d ) ; printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 6034}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; long long int min = a [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6035}
{"input": "int main ( ) { int tcase ; scanf ( <str> , & tcase ) ; while ( tcase -- ) { int n , i , cost = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i - <int> ] > a [ i ] ) cost += a [ i ] ; else cost += a [ i - <int> ] ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 6036}
{"input": "main ( ) { int k , j , i ; int nt , nl ; int a [ <int> ] [ <int> ] ; int p = <int> ; scanf ( <str> , & nt ) ; int op [ nt ] ; for ( k = <int> ; k < nt ; k ++ ) { scanf ( <str> , & nl ) ; for ( i = <int> ; i < nl ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = nl - <int> ; i >= <int> ; i -- ) { printf ( <str> ) ; for ( j = <int> ; j <= i ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i + <int> ] [ j ] ) > ( a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } op [ k ] = a [ <int> ] [ <int> ] ; } } for ( k = <int> ; k < nt ; k ++ ) printf ( <str> , op [ k ] ) ; return <int> ; }", "label": 0, "id": 6037}
{"input": "int main ( ) { int a , b , n , t , g , i , j , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) n = a ; else n = b ; for ( j = <int> ; j <= n ; j ++ ) { if ( a % j == <int> && b % j == <int> ) g = j ; } l = a * b / g ; printf ( <str> , g , l ) ; } }", "label": 1, "id": 6038}
{"input": "main ( ) { int z , i , t , a [ <int> ] , n , small , k ; scanf ( <str> , & t ) ; for ( int j = <int> ; j < t ; j ++ ) { k = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } small = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < small ) { small = a [ i ] ; } } for ( int i = <int> ; i < n ; i ++ ) { if ( a [ i ] > small ) { k ++ ; } } z = small * k ; printf ( <str> , z ) ; printf ( <str> ) ; } }", "label": 1, "id": 6039}
{"input": "int main ( ) { long int i , j , n , t ; long int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6040}
{"input": "int triangulo [ <int> ] [ <int> ] , <unk> [ <int> ] [ <int> ] ; int sum ( int i , int j ) { if ( <unk> [ i ] [ j ] == - <int> ) { if ( triangulo [ i + <int> ] [ j ] == - <int> && triangulo [ i + <int> ] [ j + <int> ] == - <int> ) <unk> [ i ] [ j ] = triangulo [ i ] [ j ] ; else if ( sum ( i + <int> , j ) > sum ( i + <int> , j + <int> ) ) <unk> [ i ] [ j ] = triangulo [ i ] [ j ] + sum ( i + <int> , j ) ; else <unk> [ i ] [ j ] = triangulo [ i ] [ j ] + sum ( i + <int> , j + <int> ) ; } return <unk> [ i ] [ j ] ; } int main ( ) { int a , i , j , inst , tam ; scanf ( <str> , & inst ) ; for ( a = <int> ; a < inst ; a ++ ) { for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) { triangulo [ i ] [ j ] = - <int> ; <unk> [ i ] [ j ] = - <int> ; } scanf ( <str> , & tam ) ; for ( i = <int> ; i < tam ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & triangulo [ i ] [ j ] ) ; int y = sum ( <int> , <int> ) ; printf ( <str> , y ) ; } return <int> ; }", "label": 0, "id": 6041}
{"input": "int mul ( int * a , int n , int m ) { int t = <int> , x , i = <int> ; while ( t || ( i < m ) ) { x = a [ i ] * n + t ; a [ i ] = x ; t = x / <int> ; i ++ ; } return i ; } int main ( ) { int t , n , m , i ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; a [ <int> ] = n ; m = <int> ; while ( -- n ) { m = mul ( a , n , m ) ; } for ( i = m - <int> ; i >= <int> ; i -- ) { printf ( <str> , a [ i ] ) ; } printf ( <str> ) ; } return <int> ; }", "label": 3, "id": 6042}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , i , min , cost = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } while ( n > <int> ) { for ( i = n - <int> ; i >= <int> ; i -- ) { if ( a [ i ] < a [ i - <int> ] ) { cost = cost + a [ i ] ; a [ i - <int> ] = a [ i ] ; n -- ; } else { cost = cost + a [ i - <int> ] ; n -- ; } } } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 6043}
{"input": "int main ( ) { int i , j , big , m , t , n ; int arr [ <int> ] , sum [ <int> ] , k [ <int> ] ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; k [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; m = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( j == <int> ) sum [ <int> ] = k [ <int> ] + arr [ <int> ] ; else { if ( j != <int> ) sum [ m ++ ] = k [ j - <int> ] + arr [ j - <int> ] ; sum [ m ++ ] = k [ j - <int> ] + arr [ j ] ; } } for ( j = <int> ; j < m ; j ++ ) k [ j ] = sum [ j ] ; } big = <int> ; for ( i = <int> ; i < m ; i ++ ) if ( big < sum [ i ] ) big = sum [ i ] ; printf ( <str> , big ) ; t -- ; } return <int> ; }", "label": 3, "id": 6044}
{"input": "int main ( ) { int t , i , a [ <int> ] ; long long int n , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min >= a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6045}
{"input": "int main ( ) { int n , i ; long long int a , b , gcd , lcm ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 6046}
{"input": "int main ( ) { int T , A , B , x , y , r , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; x = A ; y = B ; while ( y != <int> ) { r = x % y ; x = y ; y = r ; } printf ( <str> , x , ( A * B ) / x ) ; } return <int> ; }", "label": 1, "id": 6047}
{"input": "int main ( void ) { int ipMat [ <int> ] , iTest , iRowLen , iItr , iItr1 , indx , iItr2 , max , iPivotIndx ; fscanf ( stdin , <str> , & iTest ) ; for ( iItr = <int> ; iItr < iTest ; iItr ++ ) { fscanf ( stdin , <str> , & iRowLen ) ; for ( iItr1 = <int> ; iItr1 < iRowLen ; iItr1 ++ ) { for ( iItr2 = <int> ; iItr2 <= iItr1 ; iItr2 ++ ) { fscanf ( stdin , <str> , & ipMat [ iItr2 ] ) ; } if ( iItr1 == <int> ) { max = ipMat [ <int> ] ; iPivotIndx = <int> ; } else { iPivotIndx = ipMat [ iPivotIndx ] > ipMat [ iPivotIndx + <int> ] ? iPivotIndx : iPivotIndx + <int> ; max += ipMat [ iPivotIndx ] ; } } fprintf ( stdout , <str> , max ) ; } return <int> ; }", "label": 1, "id": 6048}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; int rows , i , j , l , * * x , k , var ; for ( l = <int> ; l < n ; l ++ ) { scanf ( <str> , & rows ) ; x = ( int * * ) malloc ( rows * sizeof ( int * ) ) ; for ( j = <int> ; j <= rows ; j ++ ) { x [ j - <int> ] = ( int * ) malloc ( j * sizeof ( int ) ) ; } for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & var ) ; x [ i ] [ j ] = var ; } } for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k <= i ; k ++ ) { if ( x [ i + <int> ] [ k ] > x [ i + <int> ] [ k + <int> ] ) { x [ i ] [ k ] += x [ i + <int> ] [ k ] ; } else { x [ i ] [ k ] += x [ i + <int> ] [ k + <int> ] ; } } } printf ( <str> , x [ <int> ] [ <int> ] ) ; for ( j = <int> ; j <= rows ; j ++ ) { free ( x [ j - <int> ] ) ; } free ( x ) ; } return <int> ; }", "label": 0, "id": 6049}
{"input": "int main ( ) { int t , i , n , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , count = <int> , p = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] >= a [ j - <int> ] ) { p ++ ; } else { count += p * ( p + <int> ) / <int> ; p = <int> ; } } count += p * ( p + <int> ) / <int> ; printf ( <str> , count ) ; } return <int> ; }", "label": 0, "id": 6050}
{"input": "int gcd ( int , int ) ; int main ( void ) { int t , a , b , h , l , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; p = a * b ; h = gcd ( a , b ) ; l = p / h ; printf ( <str> , h , l ) ; } return <int> ; } int gcd ( int a , int b ) { int r = <int> ; while ( r ) { if ( b % a == <int> ) return a ; else { r = b % a ; b = a ; a = r ; } } }", "label": 1, "id": 6051}
{"input": "int main ( ) { int t , i , min = <int> , j = <int> , temp ; long int n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } temp = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < temp ) temp = a [ j ] ; } printf ( <str> , temp * ( n - <int> ) ) ; printf ( <str> ) ; } }", "label": 0, "id": 6052}
{"input": "int inp [ <int> ] , out [ <int> ] ; char str [ BUFF ] ; int largR ( int N ) { int i , j , a , b ; for ( i = N - <int> ; i >= <int> ; i -- ) { a = ( i - <int> ) * i / <int> ; b = ( i + <int> ) * i / <int> ; for ( j = <int> ; j <= i ; j ++ ) inp [ a + j ] += inp [ b + j ] > inp [ b + j + <int> ] ? inp [ b + j ] : inp [ b + j + <int> ] ; } return inp [ <int> ] ; } int main ( ) { int T , i , row , incount , readint ; int N , Ma , num , k ; char cha ; scanf ( <str> , & T ) ; while ( cha = fgetc ( stdin ) ) { if ( cha == <char> ) break ; } N = Ma = row = readint = num = <int> ; while ( ( incount = fread ( str , <int> , BUFF , stdin ) ) > <int> ) { for ( i = <int> ; i < incount ; i ++ ) { if ( str [ i ] >= <char> && str [ i ] <= <char> ) { readint = <int> ; num = num * <int> + str [ i ] - <char> ; } else if ( readint ) { if ( ! Ma ) { N = num ; Ma = N * ( N + <int> ) / <int> ; k = <int> ; } else { inp [ k ++ ] = num ; if ( k > Ma ) { out [ row ++ ] = largR ( N ) ; Ma = <int> ; } } num = readint = <int> ; } } } for ( i = <int> ; i < row ; i ++ ) printf ( <str> , out [ i ] ) ; return <int> ; }", "label": 0, "id": 6053}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; long long min = INT_MAX ; scanf ( <str> , & n ) ; long long a ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 6054}
{"input": "int main ( ) { int t , n , i , j , k , mat [ <int> ] [ <int> ] , sum = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & mat [ j ] [ k ] ) ; } } sum = mat [ <int> ] [ <int> ] ; k = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( mat [ j ] [ k ] > mat [ j ] [ k + <int> ] ) { sum = sum + mat [ j ] [ k ] ; } else { sum = sum + mat [ j ] [ k + <int> ] ; k = k + <int> ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6055}
{"input": "int main ( ) { long long int a , b , i , t , n , j , e ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = b ; j > <int> ; j -- ) { if ( a % j == <int> && b % j == <int> ) { printf ( <str> , j , a * b / j ) ; break ; } } } }", "label": 2, "id": 6056}
{"input": "int gcd ( long long int num1 , long long int num2 ) { if ( num1 % num2 == <int> ) return num2 ; else return gcd ( num2 , num1 % num2 ) ; } int main ( ) { long long int a , b , c , hcf , lcm ; scanf ( <str> , & a ) ; for ( int i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b , & c ) ; hcf = gcd ( b , c ) ; lcm = ( b * c ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 0, "id": 6057}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6058}
{"input": "int m , a [ <int> ] [ <int> ] ; int max ( int j , int k ) { if ( j > k ) return ( j ) ; else return ( k ) ; } int f ( int n , int j ) { if ( n == ( m + <int> ) ) return ( <int> ) ; else if ( j == ( n + <int> ) ) return <int> ; else return ( a [ n ] [ j ] + max ( f ( n + <int> , j + <int> ) , f ( n + <int> , j ) ) ) ; } int main ( ) { int t , s = <int> , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i <= m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } s = f ( <int> , <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 2, "id": 6059}
{"input": "int a [ <int> ] [ <int> ] ; int size ; int value ( int m , int n ) { if ( m > size - <int> ) return <int> ; if ( m == ( size - <int> ) ) return a [ m ] [ n ] ; else { if ( value ( m + <int> , n ) > value ( m + <int> , n + <int> ) ) return a [ m ] [ n ] + value ( m + <int> , n ) ; else return a [ m ] [ n ] + value ( m + <int> , n + <int> ) ; } } int main ( ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> , value ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 6060}
{"input": "int main ( void ) { int r , n1 , n2 , d , n , t , gcd = <int> , lcm = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { n = n1 ; d = n2 ; } else { n = n2 ; d = n1 ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = n1 * n2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6061}
{"input": "int main ( void ) { int i , j , t , n , min , * a , * optr ; scanf ( <str> , & t ) ; optr = ( int * ) malloc ( t * sizeof ( int ) ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( ! j ) min = a [ j ] ; else if ( a [ j ] < min ) min = a [ j ] ; } optr [ i ] = min * ( n - <int> ) ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , optr [ i ] ) ; return <int> ; }", "label": 0, "id": 6062}
{"input": "int main ( ) { int i , j , arr [ <int> ] [ <int> ] , temp , result , cases , lines , value ; scanf ( <str> , & cases ) ; while ( <int> ) { result = <int> ; arr [ <int> ] [ <int> ] = <int> ; scanf ( <str> , & lines ) ; for ( i = <int> ; i <= lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ <int> ] = <int> ; scanf ( <str> , & value ) ; arr [ i ] [ j ] = value + arr [ i - <int> ] [ j - <int> ] ; if ( result < arr [ i ] [ j ] ) result = arr [ i ] [ j ] ; temp = value + arr [ i - <int> ] [ j ] ; if ( temp > arr [ i ] [ j ] ) arr [ i ] [ j ] = temp ; if ( result < temp ) result = temp ; } } printf ( <str> , result ) ; if ( -- cases == <int> ) break ; } return <int> ; }", "label": 1, "id": 6063}
{"input": "int val , s1 , s2 , a [ <int> ] [ <int> ] ; int triangle ( int i , int j , int n ) { if ( i >= ( n - <int> ) ) { return a [ i ] [ j ] ; } else { s1 = triangle ( i + <int> , j , n ) + a [ i ] [ j ] ; s2 = triangle ( i + <int> , j + <int> , n ) + a [ i ] [ j ] ; val = s1 >= s2 ? s1 : s2 ; return val ; } } int main ( ) { int n , m , k , l , t , sum ; scanf ( <str> , & m ) ; for ( t = <int> ; t <= m ; t ++ ) { scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { for ( l = <int> ; l <= k ; l ++ ) scanf ( <str> , & a [ k ] [ l ] ) ; } sum = triangle ( <int> , <int> , n ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 6064}
{"input": "int max1 ( int a , int b ) { if ( a > b ) return a ; return b ; } int a [ <int> ] [ <int> ] ; int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + max1 ( a [ i ] [ j - <int> ] , a [ i ] [ j ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6065}
{"input": "int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int min = a [ <int> ] ; int sum = <int> ; for ( int i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6066}
{"input": "int main ( ) { long int x , y , a , b , gcd , lcm ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 6067}
{"input": "int main ( ) { long int t , i , j , a [ <int> ] [ <int> ] , sum = <int> , n ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; sum += a [ i ] [ j ] ; } printf ( <str> , sum / <int> ) ; } return <int> ; }", "label": 3, "id": 6068}
{"input": "long int min ( long int * array , long int n ) ; int main ( int argc , char const * argv [ ] ) { long int test , i , N , M , K ; scanf ( <str> , & test ) ; long int array [ max ] = { <int> } ; while ( test -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; ++ i ) { scanf ( <str> , & array [ i ] ) ; } printf ( <str> , min ( array , N ) * ( N - <int> ) ) ; } return <int> ; } long int min ( long int * array , long int n ) { long int i , min ; min = array [ <int> ] ; for ( i = <int> ; i < n ; ++ i ) { if ( array [ i ] <= min ) { min = array [ i ] ; } } return min ; }", "label": 0, "id": 6069}
{"input": "int a [ <int> ] [ <int> ] ; int c [ <int> ] [ <int> ] ; int n ; int solve ( int i , int j ) ; int main ( void ) { int t , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int m ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; c [ i ] [ j ] = <int> ; } m = solve ( <int> , <int> ) ; printf ( <str> , m ) ; } return <int> ; } int solve ( int i , int j ) { if ( i > n ) return <int> ; else { if ( c [ i ] [ j ] > <int> ) { return c [ i ] [ j ] ; } else { int t1 , t2 , t ; t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; if ( t1 >= t2 ) t = t1 + a [ i ] [ j ] ; else t = t2 + a [ i ] [ j ] ; c [ i ] [ j ] = t ; return t ; } } }", "label": 0, "id": 6070}
{"input": "int main ( ) { int t , n1 , n2 , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { for ( i = <int> ; i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } } else { for ( i = <int> ; i <= n1 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } } lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6071}
{"input": "int main ( ) { int n , a , b , c , d ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; c = a , d = b ; while ( a != b ) { if ( a < b ) b = b - a ; else a = a - b ; } printf ( <str> , a , c * d / a ) ; } return <int> ; }", "label": 1, "id": 6072}
{"input": "int main ( ) { int i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; long long a [ n ] [ n ] , max ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i == <int> && j == <int> ) continue ; if ( j == <int> && i != <int> ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; continue ; } if ( i == j && i != <int> ) { a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] ; continue ; } a [ i - <int> ] [ j - <int> ] >= a [ i - <int> ] [ j ] ? a [ i ] [ j ] += a [ i - <int> ] [ j - <int> ] : ( a [ i ] [ j ] += a [ i - <int> ] [ j ] ) ; } max = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j ] > max ) max = a [ n - <int> ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6073}
{"input": "int main ( ) { int n , s , m , i , j ; scanf ( <str> , & n ) ; while ( n > <int> ) { scanf ( <str> , & s ) ; int a [ <int> ] [ <int> ] ; for ( i = <int> ; i < s ; i ++ ) { printf ( <str> ) ; for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int sum = <int> ; for ( i = <int> ; i < s ; i ++ ) { int max = a [ i ] [ <int> ] ; for ( j = <int> ; j < i + <int> ; j ++ ) { if ( max < a [ i ] [ j ] ) max = a [ i ] [ j ] ; } sum = sum + max ; } printf ( <str> , sum ) ; n -- ; } return <int> ; }", "label": 3, "id": 6074}
{"input": "int main ( ) { int i , k , j , max , sum , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = <int> ; for ( i = <int> ; i <= n ; i ++ ) { max = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & k ) ; if ( max < k ) { max = k ; } } sum += max ; } printf ( <str> , sum - <int> ) ; } }", "label": 1, "id": 6075}
{"input": "int main ( ) { int t , a , b , max , min , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; max = a > b ? a : b ; min = a < b ? a : b ; int i = <int> ; do { lcm = max * i ; i ++ ; } while ( lcm % min != <int> ) ; gcd = a * b / lcm ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6076}
{"input": "main ( ) { int a , b , t , i , o ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; o = gcd ( a , b ) ; printf ( <str> , o , ( a * b ) / o ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a < b ) { b = b - a ; gcd ( a , b ) ; } else if ( b < a ) { a = a - b ; gcd ( a , b ) ; } else { return a ; } }", "label": 1, "id": 6077}
{"input": "int main ( void ) { int tc , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & tc ) ; while ( tc -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] > a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ) a [ i - <int> ] [ j - <int> ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i - <int> ] [ j - <int> ] = a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 6078}
{"input": "int main ( void ) { int t , a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 6079}
{"input": "int CountNonDecSubarray ( int * , int ) ; int main ( ) { int t , i , a [ <int> ] , n , s , j , flag ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & s ) ; for ( j = <int> ; j < s ; j ++ ) scanf ( <str> , & a [ j ] ) ; flag = CountNonDecSubarray ( a , s ) ; printf ( <str> , flag ) ; } return <int> ; } int CountNonDecSubarray ( int * a , int s ) { int i , j , k , count = <int> ; for ( i = <int> ; i < s - <int> ; ) { k = <int> ; for ( j = i + <int> ; j < s ; j ++ , i ++ ) { if ( a [ i ] > a [ j ] ) break ; else k ++ ; } if ( k > <int> ) { count ++ ; i = j ; } } return count + s ; }", "label": 3, "id": 6080}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; int a , b ; int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int hcf = gcd ( a , b ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 6081}
{"input": "int main ( void ) { int t , a , b , max , min , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; max = ( a > b ) ? a : b ; min = ( a < b ) ? a : b ; for ( i = min ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; break ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6082}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 6083}
{"input": "int main ( ) { int test , i , j , index , max , smax , num , arr [ <int> ] ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & num ) ; for ( j = <int> ; j < num ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } max = arr [ <int> ] ; index = <int> ; for ( j = <int> ; j < num ; j ++ ) { if ( arr [ j ] > max ) { max = arr [ j ] ; index = j ; } } if ( index != <int> ) smax = arr [ <int> ] ; else smax = arr [ <int> ] ; for ( j = <int> ; j < num ; j ++ ) { if ( j != index ) if ( smax < arr [ j ] ) smax = arr [ j ] ; } printf ( <str> , smax ) ; } }", "label": 1, "id": 6084}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; int i = <int> , min = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } long long int sum = min * ( n - <int> ) ; printf ( <str> , sum ) ; t -- ; } return <int> ; }", "label": 0, "id": 6085}
{"input": "int main ( ) { int q , t , a , b , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= t ; j ++ ) { if ( a % j == <int> && b % j == <int> ) printf ( <str> , j ) ; } if ( b > a ) { q = a ; a = b ; b = q ; } for ( j = <int> ; ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { printf ( <str> , j ) ; break ; } } } return <int> ; }", "label": 2, "id": 6086}
{"input": "int main ( ) { int i , t ; long long int sum ; long int n , min ; scanf ( <str> , & t ) ; while ( t -- ) { sum = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } sum = ( n - <int> ) * min ; printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 6087}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , min , a [ <int> ] ; long long int cost = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) { min = a [ i ] ; } } cost = ( n - <int> ) * min ; printf ( <str> , cost ) ; } }", "label": 0, "id": 6088}
{"input": "int compare ( int arr [ ] , int i , int size ) { if ( ( i + <int> ) < size ) { if ( arr [ i ] < arr [ i + <int> ] ) return ( <int> + compare ( arr , i + <int> , size ) ) ; else return <int> ; } else return <int> ; } int main ( ) { int size , i , t , n , mm ; scanf ( <str> , & n ) ; for ( mm = <int> ; mm < n ; mm ++ ) { scanf ( <str> , & size ) ; long arr [ size ] ; for ( i = <int> ; i < size ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } int sum = <int> ; for ( i = <int> ; i < size - <int> ; i ++ ) { t = compare ( arr , i , size ) ; sum += t ; } printf ( <str> , size + sum ) ; } return <int> ; }", "label": 1, "id": 6089}
{"input": "int main ( ) { int t , n , i , j , a [ n ] [ n ] , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = <int> ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == n && a [ j ] [ <int> ] < a [ j ] [ <int> ] ) sum += a [ i ] [ <int> ] ; else sum += a [ i ] [ <int> ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 6090}
{"input": "int cntarr ( long long int a [ ] , long long int size ) { int count = <int> , i ; for ( i = <int> ; i < size - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) count = count + <int> ; else count ++ ; } count ++ ; return count ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int p = cntarr ( a , n ) ; printf ( <str> , p ) ; } return <int> ; }", "label": 1, "id": 6091}
{"input": "int main ( ) { long long max = <int> ; int t , n , i , j , a [ <int> ] [ <int> ] = { <int> } , s [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) s [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == <int> ) s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j ] ; else { if ( s [ i - <int> ] [ j - <int> ] > s [ i - <int> ] [ j ] ) s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } for ( j = <int> ; j < n ; j ++ ) if ( s [ n - <int> ] [ j ] > max ) max = s [ n - <int> ] [ j ] ; printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 6092}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int x = a * b ; printf ( <str> , gcd ( a , b ) , x / gcd ( a , b ) ) ; } return <int> ; }", "label": 0, "id": 6093}
{"input": "int main ( ) { int t , a , b , hcf , j , i , ctr = <int> ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; for ( j = <int> ; ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { hcf = j ; break ; } } printf ( <str> , hcf ) ; for ( i = <int> ; i <= ( a * b ) ; i ++ ) { if ( i % a == <int> && i % b == <int> && ctr == <int> ) { printf ( <str> , i ) ; ctr ++ ; } } t -- ; ctr = <int> ; hcf = <int> ; a = <int> ; b = <int> ; } }", "label": 2, "id": 6094}
{"input": "int <unk> [ <int> ] ; int <unk> ; int N ; int temp ; int max ( int x , int y ) { return ( x > y ) ? x : y ; } int findMaxSum ( int level , int num , int sum ) { if ( level == N ) return sum + <unk> [ level * ( level - <int> ) / <int> + num - <int> ] ; return max ( findMaxSum ( level + <int> , num , <unk> [ level * ( level - <int> ) / <int> + num - <int> ] + sum ) , findMaxSum ( level + <int> , num + <int> , <unk> [ level * ( level - <int> ) / <int> + num - <int> ] + sum ) ) ; } void print_array ( int N ) { int i ; for ( i = <int> ; i < N ; i ++ ) puti ( <unk> [ i ] ) ; } int main ( ) { int T ; int X ; int i , j ; int max ; <unk> ( T ) ; while ( T -- ) { <unk> = <int> ; <unk> ( N ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) <unk> ( <unk> [ <unk> ++ ] ) ; max = findMaxSum ( <int> , <int> , <int> ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 6095}
{"input": "int fastint ( ) { int r = <int> ; char c = getchar ( ) ; while ( c == <char> || c == <char> ) c = getchar ( ) ; while ( c != <char> && c != <char> ) { r = ( r * <int> ) + ( c - <char> ) ; c = getchar ( ) ; } return r ; } void getTriangle ( int buffer [ <int> ] [ <int> ] , int limit ) { int i , j ; for ( i = <int> ; i <= limit ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) buffer [ i ] [ j ] = fastint ( ) ; } } void printTriangle ( int buffer [ <int> ] [ <int> ] , int limit ) { int i , j ; for ( i = <int> ; i <= limit ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) printf ( <str> , buffer [ i ] [ j ] ) ; printf ( <str> ) ; } } void zeroTriangle ( int buffer [ <int> ] [ <int> ] , int limit ) { int i , j ; for ( i = <int> ; i <= limit ; i ++ ) for ( j = <int> ; j < i ; j ++ ) buffer [ i ] [ j ] = <int> ; } int tsum_mr ( int buffer [ <int> ] [ <int> ] , int limit ) { int i , j ; for ( i = limit ; i >= <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { buffer [ i - <int> ] [ j ] = max ( ( buffer [ i ] [ j ] + buffer [ i - <int> ] [ j ] ) , ( buffer [ i ] [ j + <int> ] + buffer [ i - <int> ] [ j ] ) ) ; } return buffer [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k ; i = fastint ( ) ; int buffer [ <int> ] [ <int> ] ; while ( i ) { k = fastint ( ) ; getTriangle ( buffer , k ) ; printf ( <str> , tsum_mr ( buffer , k ) ) ; i -- ; } return <int> ; }", "label": 3, "id": 6096}
{"input": "int gcd ( long long int a , long long int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , m , G , L ; scanf ( <str> , & n , & m ) ; G = gcd ( n , m ) ; L = ( n * m ) / G ; printf ( <str> , G , L ) ; } return <int> ; }", "label": 0, "id": 6097}
{"input": "long int max ( long int a , long int b ) { if ( a > b ) { return a ; } else { return b ; } } long int gcd ( long int c , long int d ) { long int temp ; while ( c % d ) { temp = d ; d = c % d ; c = temp ; } return d ; } long int lcm ( long int c , long int d ) { return c * d ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; long int c = max ( a , b ) ; long int d = a + b - c ; printf ( <str> , gcd ( c , d ) ) ; printf ( <str> , ( a * b ) / gcd ( c , d ) ) ; } return <int> ; }", "label": 0, "id": 6098}
{"input": "int a [ <int> ] [ <int> ] ; int numinput ( int * n ) { * n = <int> ; char ch ; ch = getchar_unlocked ( ) ; while ( ch >= <char> && ch <= <char> ) { * n = ( * n << <int> ) + ( * n << <int> ) + ch - <char> ; ch = getchar_unlocked ( ) ; } } int main ( ) { int t , i , j , n ; numinput ( & t ) ; while ( t -- ) { numinput ( & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) numinput ( & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6099}
{"input": "int gcd ( long int a , long int b ) { if ( b == <int> ) { return a ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; long int l = ( a * b ) / g ; printf ( <str> , g , l ) ; } }", "label": 0, "id": 6100}
{"input": "int gcd ( int x , int y ) { if ( y > x ) { y = y + x ; x = y - x ; y = y - x ; } if ( ! ( x % y ) ) { return y ; } else { gcd ( y , x % y ) ; } } int main ( ) { int tst , i , j ; scanf ( <str> , & tst ) ; for ( i = <int> ; i < tst ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; long int hcf = gcd ( a , b ) ; long int lcm = a * ( b / hcf ) ; printf ( <str> , hcf , lcm ) ; } }", "label": 0, "id": 6101}
{"input": "int gcd ( ) ; int main ( ) { int t , c ; long int a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; printf ( <str> , c , ( a * b ) / c ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; }", "label": 1, "id": 6102}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int x [ <int> ] , i , j = <int> , y [ <int> ] , k , l = <int> , a1 , b1 ; long long a , b ; scanf ( <str> , & a , & b ) ; a1 = a ; b1 = b ; for ( i = <int> ; i <= <int> ; i ++ ) { if ( a1 % i == <int> ) { x [ j ] = i ; a1 = a1 / i ; i -- ; j ++ ; } if ( a1 == <int> ) break ; } for ( k = <int> ; k <= <int> ; k ++ ) { if ( b1 % k == <int> ) { y [ l ] = k ; b1 = b1 / k ; k -- ; l ++ ; } if ( b1 == <int> ) break ; } int r = <int> , m , n ; for ( m = <int> ; m < j ; m ++ ) { for ( n = <int> ; n < l ; n ++ ) { if ( x [ m ] == y [ n ] ) { r = r * x [ m ] ; y [ n ] == <int> ; break ; } } } long long g ; g = a * b ; g = g / r ; printf ( <str> , r , g ) ; } return <int> ; }", "label": 1, "id": 6103}
{"input": "void swap ( long int * , long int * ) ; int main ( ) { int t_cases ; long int <unk> , <unk> , temp1 , temp2 , gcd , lcm ; scanf ( <str> , & t_cases ) ; while ( t_cases -- ) { scanf ( <str> , & <unk> ) ; scanf ( <str> , & <unk> ) ; temp1 = <unk> ; temp2 = <unk> ; if ( temp1 > temp2 ) swap ( & temp1 , & temp2 ) ; while ( temp1 > <int> ) { temp2 %= temp1 ; swap ( & temp1 , & temp2 ) ; } gcd = temp2 ; lcm = ( <unk> / gcd ) * <unk> ; printf ( <str> , gcd , lcm ) ; } return <int> ; } void swap ( long int * first , long int * second ) { int temp ; temp = * first ; * first = * second ; * second = temp ; }", "label": 0, "id": 6104}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int nCases ; scanf ( <str> , & nCases ) ; int cnt ; for ( cnt = <int> ; cnt < nCases ; cnt ++ ) { int n ; scanf ( <str> , & n ) ; int num [ n ] [ n ] ; int i , j ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { num [ i ] [ j ] = num [ i ] [ j ] + num [ i - <int> ] [ j ] ; continue ; } if ( i == j ) { num [ i ] [ j ] = num [ i ] [ j ] + num [ i - <int> ] [ j - <int> ] ; continue ; } num [ i ] [ j ] = max ( num [ i ] [ j ] + num [ i - <int> ] [ j - <int> ] , num [ i ] [ j ] + num [ i - <int> ] [ j ] ) ; } int max = <int> ; for ( i = n - <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( num [ i ] [ j ] > max ) max = num [ i ] [ j ] ; } } printf ( <str> , max ) ; } }", "label": 0, "id": 6105}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; int N ; while ( T -- ) { scanf ( <str> , & N ) ; int <unk> [ N ] [ N ] ; int i , j ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & <unk> [ i ] [ j ] ) ; for ( i = N - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( <unk> [ i ] [ j ] + <unk> [ i + <int> ] [ j ] > <unk> [ i ] [ j ] + <unk> [ i + <int> ] [ j + <int> ] ) <unk> [ i ] [ j ] = <unk> [ i ] [ j ] + <unk> [ i + <int> ] [ j ] ; else <unk> [ i ] [ j ] = <unk> [ i ] [ j ] + <unk> [ i + <int> ] [ j + <int> ] ; } printf ( <str> , <unk> [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6106}
{"input": "int main ( void ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int n ; scanf ( <str> , & n ) ; long long int x ; scanf ( <str> , & x ) ; long long int min = x ; for ( long long int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; if ( x < min ) min = x ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6107}
{"input": "long long gcd ( long long a , long long b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { long long t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , k ; scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; printf ( <str> , k , ( a * b ) / k ) ; } return <int> ; }", "label": 1, "id": 6108}
{"input": "int main ( ) { int t , n , i , j , max = <int> ; int a [ <int> ] [ <int> ] = { <int> } , s [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) s [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == <int> ) s [ i ] [ j ] = a [ i ] [ j ] + s [ i - <int> ] [ j ] ; else { if ( s [ i - <int> ] [ j - <int> ] > s [ i - <int> ] [ j ] ) s [ i ] [ j ] = s [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else s [ i ] [ j ] = s [ i - <int> ] [ j ] + a [ i ] [ j ] ; } if ( s [ i ] [ j ] > max ) max = s [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 6109}
{"input": "main ( ) { int t , i , n , a [ <int> ] , sml , cost ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } sml = a [ i ] ; cost = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i + <int> ] < sml ) { sml = a [ i + <int> ] ; cost = cost + sml ; } } printf ( <str> , cost ) ; } }", "label": 1, "id": 6110}
{"input": "int main ( ) { int n , gcd , lcm , a , x , b , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) x = a ; else x = b ; for ( j = <int> ; j <= x ; j ++ ) if ( a % j == <int> && b % j == <int> ) gcd = j ; printf ( <str> , gcd , ( a * b ) / gcd ) ; } return <int> ; }", "label": 1, "id": 6111}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j ; int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6112}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , n , i , j , b , c , ans = <int> ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ j ] [ i ] ) ; } for ( b = <int> ; b < n - <int> ; b ++ ) { for ( i = <int> ; i < n - b - <int> ; i ++ ) { if ( a [ j ] [ i ] > a [ j ] [ i + <int> ] ) { c = a [ j ] [ i ] ; a [ j ] [ i ] = a [ j ] [ i + <int> ] ; a [ j ] [ i + <int> ] = c ; } } } ans = a [ j ] [ <int> ] * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 3, "id": 6113}
{"input": "int maxi ( int a , int b ) { return a < b ? b : a ; } int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n , max ; while ( test -- ) { scanf ( <str> , & n ) ; int vec1 [ n ] [ n ] ; int vec2 [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; vec2 [ <int> ] [ <int> ] = vec1 [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else if ( j == i ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } else if ( vec2 [ i - <int> ] [ j ] > vec2 [ i - <int> ] [ j - <int> ] ) { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j ] + vec1 [ i ] [ j ] ; } else { vec2 [ i ] [ j ] = vec2 [ i - <int> ] [ j - <int> ] + vec1 [ i ] [ j ] ; } } } max = vec2 [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( vec2 [ n - <int> ] [ i ] > max ) max = vec2 [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6114}
{"input": "int main ( ) { int no_test_cases , nos_in_line [ <int> ] , i , j , no_of_row = <int> , sel_j = <int> , sel_var1 = <int> ; int max_sum = <int> ; scanf ( <str> , & no_test_cases ) ; while ( no_test_cases -- ) { scanf ( <str> , & no_of_row ) ; for ( i = <int> ; i <= no_of_row ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & nos_in_line [ j ] ) ; if ( j == sel_j ) { sel_var1 = nos_in_line [ j ] ; } else if ( ( j == ( sel_j + <int> ) ) && ( sel_var1 < nos_in_line [ j ] ) ) { sel_var1 = nos_in_line [ j ] ; sel_j = j ; } } max_sum = max_sum + sel_var1 ; } printf ( <str> , max_sum ) ; } return <int> ; }", "label": 1, "id": 6115}
{"input": "int main ( ) { long int arr [ <int> ] [ <int> ] ; long int i , j , n , test , k = <int> ; scanf ( <str> , & test ) ; do { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { arr [ i ] [ <int> ] = arr [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ; } for ( i = <int> ; i <= n ; i ++ ) { arr [ i ] [ i ] = arr [ i ] [ i ] + arr [ i - <int> ] [ i - <int> ] ; } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { if ( arr [ i - <int> ] [ j - <int> ] > arr [ i - <int> ] [ j ] ) { arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; } else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; } } long int max = - <int> ; for ( j = <int> ; j <= n ; j ++ ) { if ( arr [ n ] [ j ] > max ) max = arr [ n ] [ j ] ; } printf ( <str> , max ) ; k ++ ; } while ( k <= test ) ; return <int> ; }", "label": 0, "id": 6116}
{"input": "int gcd ( long int a , long int b ) { if ( a == <int> ) return b ; else if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b ; scanf ( <str> , & a , & b ) ; long int g = gcd ( a , b ) ; long int l = ( ( a * b ) / g ) ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 6117}
{"input": "int main ( ) { int t ; long long int a , b , c , d ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = a ; d = b ; } else { c = b ; d = a ; } while ( c % d != <int> ) { c = c - d ; if ( c < d ) { c = c + d ; d = c - d ; c = c - d ; } } c = ( a * b ) / d ; printf ( <str> , d , c ) ; } return <int> ; }", "label": 0, "id": 6118}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 6119}
{"input": "int main ( ) { static int n , r , i , j , k , a [ <int> ] , t , tl , max ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & r ) ; int b [ <int> ] [ <int> ] ; for ( j = <int> ; j <= r ; j ++ ) for ( k = <int> ; k < j ; k ++ ) scanf ( <str> , & b [ j ] [ k ] ) ; for ( j = <int> ; j <= r ; j ++ ) { for ( k = <int> ; k < j ; k ++ ) { if ( k == <int> && j != <int> ) b [ j ] [ k ] = b [ j - <int> ] [ k ] + b [ j ] [ k ] ; else { t = b [ j - <int> ] [ k ] ; tl = b [ j - <int> ] [ k - <int> ] ; if ( t > tl ) b [ j ] [ k ] = b [ j ] [ k ] + t ; else b [ j ] [ k ] = b [ j ] [ k ] + tl ; } } } max = b [ r ] [ <int> ] ; for ( k = <int> ; k < r ; k ++ ) { if ( max < b [ r ] [ k ] ) max = b [ r ] [ k ] ; } a [ i ] = max ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , a [ i ] ) ; } return <int> ; }", "label": 3, "id": 6120}
{"input": "int main ( void ) { int t , a [ <int> ] , b [ <int> ] , small , big , i , hcf , lcm , k ; scanf ( <str> , & t ) ; if ( t >= <int> && t <= <int> ) { for ( k = <int> ; k <= t ; k ++ ) { scanf ( <str> , & a [ k ] , & b [ k ] ) ; } for ( k = <int> ; k <= t ; k ++ ) { if ( a [ k ] >= <int> && a [ k ] <= <int> && b [ k ] >= <int> && b [ k ] <= <int> ) { big = ( a [ k ] > b [ k ] ) ? a [ k ] : b [ k ] ; small = ( a [ k ] < b [ k ] ) ? a [ k ] : b [ k ] ; for ( i = <int> ; i <= small ; i ++ ) { if ( a [ k ] % i == <int> && b [ k ] % i == <int> ) hcf = i ; } for ( i = big ; ; i ++ ) { if ( i % a [ k ] == <int> && i % b [ k ] == <int> ) { lcm = i ; break ; } } printf ( <str> , hcf , lcm ) ; } } } return <int> ; }", "label": 2, "id": 6121}
{"input": "int main ( ) { long long int a [ <int> ] ; int p , i , j , n , t ; scanf ( <str> , & p ) ; while ( p -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } } } printf ( <str> , a [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 6122}
{"input": "int comp ( int * * x , int i , int j , int a ) { int suml , sumr , summax ; if ( i == a - <int> ) return x [ i ] [ j ] ; else { suml = comp ( x , i + <int> , j , a ) ; sumr = comp ( x , i + <int> , j + <int> , a ) ; summax = suml ; if ( sumr > summax ) summax = sumr ; return ( summax + x [ i ] [ j ] ) ; } } int main ( ) { int n , i , a , j , sum ; int * * x ; scanf ( <str> , & n ) ; while ( n -- ) { sum = <int> ; scanf ( <str> , & a ) ; x = ( int * * ) malloc ( sizeof ( int * ) * a ) ; for ( i = <int> ; i < a ; i ++ ) { x [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { scanf ( <str> , & x [ i ] [ j ] ) ; } } sum = comp ( x , <int> , <int> , a ) ; printf ( <str> , sum ) ; } free ( x ) ; return <int> ; }", "label": 2, "id": 6123}
{"input": "int main ( ) { int t , n , i , j , max ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { a [ i ] [ j ] = <int> ; if ( j <= i ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i >= <int> ) { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; } if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6124}
{"input": "int lcm ( int a , int b ) ; int gcd ( int a , int b ) { if ( b != <int> ) return gcd ( b , a % b ) ; else return a ; } int lcm ( int a , int b ) { int l = ( a * b ) / gcd ( a , b ) ; return l ; } int main ( ) { int t ; scanf ( <str> , & t ) ; int n [ t ] [ <int> ] , i , j = t ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) { scanf ( <str> , & n [ t ] [ i ] ) ; } int a = n [ t ] [ <int> ] ; n [ t ] [ <int> ] = gcd ( a , n [ t ] [ <int> ] ) ; n [ t ] [ <int> ] = lcm ( a , n [ t ] [ <int> ] ) ; } while ( j -- ) { printf ( <str> , n [ j ] [ <int> ] , n [ j ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6125}
{"input": "int main ( ) { int t , n , i , num , min ; long long int p ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & num ) ; if ( num < min ) min = num ; } p = ( long long ) ( min * ( n - <int> ) ) ; printf ( <str> , p ) ; } return <int> ; }", "label": 0, "id": 6126}
{"input": "int main ( ) { int a , t , i , b , max , j , gcd , k = <int> , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; ++ i ) { k = <int> ; max = <int> ; scanf ( <str> , & a , & b ) ; max = ( a > b ) ? a : b ; for ( j = <int> ; j < max ; ++ j ) { if ( a % j == <int> && b % j == <int> ) { gcd = j ; } } for ( j = <int> ; k != <int> ; ++ k , ++ j ) { if ( ( a * j ) == ( b * j ) ) { lcm = a * j ; break ; } } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 3, "id": 6127}
{"input": "main ( ) { int n , m , i , j , num , sum ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; int a [ m ] [ m ] ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } num = <int> ; sum = <int> ; for ( i = <int> ; i < m ; i ++ ) { sum = sum + a [ i ] [ <int> ] ; num = num + a [ i ] [ i ] ; } if ( num > sum ) printf ( <str> , num ) ; else printf ( <str> , sum ) ; } }", "label": 1, "id": 6128}
{"input": "int main ( ) { int i , t , n , min , temp , a [ <int> ] ; int ans ; scanf ( <str> , & t ) ; while ( t -- ) { min = MAX ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < min ) min = temp ; } ans = min * ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 6129}
{"input": "int maxCal ( int * , int , int , int ) ; int sum_M [ <int> ] = { <int> } ; int main ( ) { int a [ <int> ] ; int n , i = <int> , row , j = <int> , tot = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & row ) ; tot = row * ( row + <int> ) / <int> ; for ( j = <int> ; j < tot ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } printf ( <str> , maxCal ( a , row , <int> , <int> ) ) ; } return <int> ; } int maxCal ( int * a , int n , int in , int nl ) { int sum = <int> , sum1 = <int> , temp = <int> ; if ( nl == n ) return a [ in ] ; temp = in + nl ; nl = nl + <int> ; if ( sum_M [ in ] == <int> ) { sum1 = a [ in ] + maxCal ( a , n , temp , nl ) ; sum = a [ in ] + maxCal ( a , n , temp + <int> , nl ) ; if ( sum > sum1 ) { sum_M [ in ] = sum ; return sum ; } sum_M [ in ] = sum1 ; return sum1 ; } else { return sum_M [ in ] ; } }", "label": 3, "id": 6130}
{"input": "int co = <int> ; int arrayremove ( int * A , int n ) { int i , max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( A [ max ] < A [ i ] ) max = i ; } if ( ( A [ max - <int> ] ) > ( A [ max + <int> ] ) && ( max != n - <int> ) ) { co = A [ max - <int> ] + co ; } else if ( ( A [ max - <int> ] ) < ( A [ max + <int> ] ) && ( max != n - <int> ) ) { co = A [ max + <int> ] + co ; } else { co = A [ max - <int> ] + co ; } for ( i = max ; i < n ; i ++ ) { A [ i ] = A [ i + <int> ] ; } n = n - <int> ; if ( n != <int> ) arrayremove ( A , n ) ; else return co ; } int main ( ) { int A [ <int> ] , t , n , i , cost ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } cost = arrayremove ( A , n ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 2, "id": 6131}
{"input": "int main ( ) { int a , b , t , i , c , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) c = func ( a , b ) ; else c = func ( b , a ) ; d = ( a * b ) / c ; printf ( <str> , c , d ) ; } return <int> ; } int func ( int x , int y ) { if ( y % x == <int> ) return x ; else return func ( y % x , x ) ; }", "label": 1, "id": 6132}
{"input": "int gcd ( int A , int B ) ; int main ( ) { int T , A , B , X ; long Y ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; X = gcd ( A , B ) ; Y = ( A * B ) / X ; printf ( <str> , X , Y ) ; } return <int> ; } int gcd ( int A , int B ) { if ( B == <int> ) return ( A ) ; else return gcd ( B , ( A % B ) ) ; }", "label": 1, "id": 6133}
{"input": "int main ( ) { int i , t , a , b , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; temp = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , temp / a ) ; } return <int> ; }", "label": 1, "id": 6134}
{"input": "int main ( ) { int t , i , n , j ; long co = <int> , * a ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t > <int> && t <= <int> ) { int a [ max ] ; printf ( <str> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( a [ j ] >= a [ j + <int> ] ) co ++ ; } } printf ( <str> , co ) ; t -- ; } return <int> ; }", "label": 2, "id": 6135}
{"input": "void create ( ) ; void max ( ) ; void pr ( ) ; char tri [ <int> ] ; char rows ; int size [ ] = { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; void create ( ) { scanf ( <str> , & rows ) ; int i , j ; for ( i = <int> ; i < size [ rows + <int> ] ; i ++ ) { scanf ( <str> , tri + i ) ; } } void max ( ) { int i , j ; for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = size [ i ] ; j < size [ i + <int> ] ; j ++ ) { tri [ j ] += MAX ( tri [ size [ i ] - size [ i - <int> ] + j + <int> ] , tri [ size [ i ] - size [ i - <int> ] + j + <int> ] ) ; } } } void pr ( ) { int i , j ; for ( i = <int> ; i <= rows ; i ++ ) { for ( j = size [ i ] ; j < size [ i + <int> ] ; j ++ ) { printf ( <str> , tri [ j ] ) ; } printf ( <str> ) ; } } int main ( ) { int n ; scanf ( <str> , & n ) ; for ( ; n >= <int> ; n -- ) { create ( ) ; max ( ) ; if ( n != <int> ) printf ( <str> , tri [ <int> ] ) ; else printf ( <str> , tri [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6136}
{"input": "int main ( ) { long long int n , t , i , j , c , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; c = n ; for ( i = <int> ; i < n - <int> ; i ++ ) { k = <int> ; while ( a [ i + <int> ] > a [ i ] && i < n - <int> ) { k ++ ; i ++ ; } c += k * ( k + <int> ) / <int> ; } printf ( <str> , c ) ; } }", "label": 0, "id": 6137}
{"input": "int main ( ) { int no , a , b ; scanf ( <str> , & no ) ; while ( no ) { int gcd , lcm , x , y , temp ; scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { temp = y ; y = x % y ; x = temp ; } gcd = y ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; no -- ; } return <int> ; }", "label": 3, "id": 6138}
{"input": "main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { long long a , b ; scanf ( <str> , & a , & b ) ; long long c , i , z ; c = ( a >= b ) ? b : a ; for ( i = <int> ; i <= c ; i ++ ) { if ( a % i == <int> && b % i == <int> ) z = i ; } printf ( <str> , z , ( a * b ) / z ) ; } }", "label": 2, "id": 6139}
{"input": "int main ( ) { int t ; long long int i , small , N , a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a ) ; if ( i == <int> ) small = a ; if ( small > a ) small = a ; } printf ( <str> , ( N - <int> ) * small ) ; } return <int> ; }", "label": 0, "id": 6140}
{"input": "int main ( ) { int a [ <int> ] , t , o = <int> , i , k , s = <int> , p ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & p ) ; while ( p ) { for ( k = <int> ; k < o ; k ++ ) { scanf ( <str> , & a [ k ] ) ; s += a [ k ] ; } o ++ ; p -- ; } printf ( <str> , s / <int> ) ; s = <int> ; o = <int> ; } return <int> ; }", "label": 3, "id": 6141}
{"input": "int main ( ) { int t , a , b , x , y , hcf ; long long int lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; x = a ; y = b ; while ( a != b ) { if ( a > b ) a -= b ; else b -= a ; } hcf = a ; lcm = ( x * y ) / hcf ; printf ( <str> , hcf , lcm ) ; } }", "label": 1, "id": 6142}
{"input": "long int a [ <int> ] ; main ( ) { long long int t , n , i , c , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } c = min * ( n - <int> ) ; printf ( <str> , c ) ; } }", "label": 0, "id": 6143}
{"input": "int main ( ) { int tc ; scanf ( <str> , & tc ) ; for ( int t = <int> ; t < tc ; t ++ ) { int a , b , rem ; scanf ( <str> , & a , & b ) ; int gcd ; int lcm ; while ( b != <int> ) { rem = a % b ; if ( rem == <int> ) { gcd = b ; break ; } a = b ; b = rem ; } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 6144}
{"input": "struct <unk> { int data ; struct <unk> * left ; struct <unk> * right ; } ; struct <unk> * root = NULL ; int maxsum = <int> ; void <unk> ( struct <unk> * ptr , int sum ) { if ( ptr != NULL ) { sum = sum + ptr -> data ; if ( ptr -> left == NULL && ptr -> right == NULL ) { if ( sum > maxsum ) maxsum = sum ; } <unk> ( ptr -> left , sum ) ; <unk> ( ptr -> right , sum ) ; } } void <unk> ( struct <unk> * ptr , int * * a , int n , int i , int j ) { if ( i < n - <int> && j <= i ) { ptr -> left = ( struct <unk> * ) malloc ( sizeof ( struct <unk> ) ) ; ptr -> left -> left = NULL ; ptr -> left -> right = NULL ; ptr -> left -> data = * ( * ( a + i + <int> ) + j ) ; <unk> ( ptr -> left , a , n , i + <int> , j ) ; ptr -> right = ( struct <unk> * ) malloc ( sizeof ( struct <unk> ) ) ; ptr -> right -> left = NULL ; ptr -> right -> right = NULL ; ptr -> right -> data = * ( * ( a + i + <int> ) + ( j + <int> ) ) ; <unk> ( ptr -> right , a , n , i + <int> , j + <int> ) ; } } int main ( ) { int m , * * a , i , j , n , k , d ; printf ( <str> ) ; scanf ( <str> , & n ) ; if ( n > <int> || n < <int> ) { printf ( <str> ) ; exit ( <int> ) ; } for ( k = <int> ; k <= n ; k ++ ) { printf ( <str> ) ; scanf ( <str> , & m ) ; if ( m < <int> || m > <int> ) { printf ( <str> ) ; exit ( <int> ) ; } maxsum = <int> ; root = NULL ; a = ( int * * ) malloc ( m * sizeof ( int * ) ) ; printf ( <str> ) ; for ( i = <int> ; i < m ; i ++ ) a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < m ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , ( * ( a + i ) + j ) ) ; d = * ( * ( a + i ) + j ) ; if ( d < <int> || d > <int> ) { printf ( <str> ) ; exit ( <int> ) ; } } for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , * ( * ( a + i ) + j ) ) ; printf ( <str> ) ; } root = * a ; root -> data = * ( * ( a + <int> ) + <int> ) ; if ( m == <int> ) maxsum = root -> data ; else { <unk> ( root , a , m , <int> , <int> ) ; <unk> ( root , <int> ) ; free ( root ) ; } printf ( <str> , maxsum ) ; free ( * a ) ; } return <int> ; }", "label": 1, "id": 6145}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , max ; scanf ( <str> , & n ) ; int i , a [ n ] , count = <int> , j ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { max = a [ i ] ; for ( j = i ; j < n ; j ++ ) { if ( a [ i ] <= a [ j ] ) { if ( max > a [ j ] ) break ; count ++ ; max = a [ j ] ; } } } printf ( <str> , count ) ; } }", "label": 1, "id": 6146}
{"input": "int main ( ) { int t , c , b , i , j , n ; int A [ <int> ] ; scanf ( <str> , & t ) ; for ( c = <int> ; c < t ; c ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( A [ i ] < A [ j ] ) { b = A [ j ] ; A [ j ] = A [ i ] ; A [ i ] = b ; } } } printf ( <str> , A [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 6147}
{"input": "int main ( ) { int t , m , n , b , a , p , q ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & m , & n ) ; p = m ; q = n ; while ( m % n != <int> ) { a = m % n ; m = n ; n = a ; } b = ( p * q ) / a ; printf ( <str> , a , b ) ; } return <int> ; }", "label": 1, "id": 6148}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; } int main ( ) { int t , a , b , h ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; h = gcd ( a , b ) ; printf ( <str> , h , ( a * b ) / h ) ; } return <int> ; }", "label": 1, "id": 6149}
{"input": "int main ( ) { int T , a , b , t ; int a_ , b_ ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; if ( a >= b ) { a_ = a ; b_ = b ; } else { a_ = b ; b_ = a ; } while ( b_ != <int> ) { t = a_ % b_ ; a_ = b_ ; b_ = t ; } printf ( <str> , a_ , a * b / a_ ) ; } return <int> ; }", "label": 1, "id": 6150}
{"input": "int max_sum ( int * triangle [ ] , int row ) { int temp ; int i , j , prev_row ; int * curr_row_ptr ; int * prev_row_ptr ; for ( i = <int> , prev_row = <int> ; i < row ; i ++ , prev_row ++ ) { curr_row_ptr = triangle [ i ] ; prev_row_ptr = triangle [ prev_row ] ; * curr_row_ptr += * prev_row_ptr ; for ( j = <int> ; j < i ; j ++ ) { temp = * ( prev_row_ptr + j ) > * ( prev_row_ptr + j - <int> ) ? * ( prev_row_ptr + j ) : * ( prev_row_ptr + j - <int> ) ; * ( curr_row_ptr + j ) += temp ; } * ( curr_row_ptr + j ) += * ( prev_row_ptr + j - <int> ) ; } i -- ; curr_row_ptr = triangle [ i ] ; temp = * curr_row_ptr ; ; for ( j = <int> ; j <= i ; j ++ ) { if ( * ( curr_row_ptr + j ) > temp ) temp = * ( curr_row_ptr + j ) ; } return temp ; } int main ( ) { int test_cases ; int rows ; char str [ <int> ] ; char * temp ; int i , j , num ; int * triangle [ <int> ] = { NULL } ; int * row_ptr ; scanf ( <str> , & test_cases ) ; while ( test_cases -- ) { scanf ( <str> , & rows ) ; fflush ( stdin ) ; for ( i = <int> ; i < rows ; i ++ ) { if ( triangle [ i ] == NULL ) triangle [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; j = <int> ; row_ptr = triangle [ i ] ; while ( j <= i ) { scanf ( <str> , row_ptr ++ ) ; j ++ ; } } printf ( <str> , max_sum ( triangle , rows ) ) ; } return <int> ; }", "label": 0, "id": 6151}
{"input": "void main ( ) { int t_cases , count ; long int n ; scanf ( <str> , & t_cases ) ; int f [ t_cases ] , c = <int> ; while ( c != t_cases ) { scanf ( <str> , & n ) ; long long int a [ n ] ; count = n ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) { count ++ ; } else break ; } } f [ c ] = count ; c ++ ; } for ( int i = <int> ; i < t_cases ; i ++ ) printf ( <str> , f [ i ] ) ; }", "label": 0, "id": 6152}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] = { <int> } ; int i , j , k , n , m ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < m - <int> ; i ++ ) { j = <int> ; k = <int> ; while ( j <= i ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { k = k + a [ i + <int> ] [ j ] ; } else { k = k + a [ i + <int> ] [ j + <int> ] ; j ++ ; } } printf ( <str> , k + a [ <int> ] [ <int> ] ) ; } } return <int> ; }", "label": 2, "id": 6153}
{"input": "int main ( ) { int t , i , j , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int mat [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; for ( i = n ; i > <int> ; i -- ) for ( j = <int> ; j < i - <int> ; j ++ ) { if ( mat [ i ] [ j ] > mat [ i ] [ j + <int> ] ) mat [ i - <int> ] [ j ] = mat [ i ] [ j ] + mat [ i - <int> ] [ j ] ; else mat [ i - <int> ] [ j ] = mat [ i ] [ j + <int> ] + mat [ i - <int> ] [ j ] ; } printf ( <str> , mat [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6154}
{"input": "int main ( int argc , const char * argv [ ] ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { unsigned int m , n , a , r ; scanf ( <str> , & m , & n ) ; a = m ; r = n ; while ( r != <int> ) { int tmp = r ; r = a % r ; a = tmp ; } printf ( <str> , a , ( m * n ) / a ) ; } return <int> ; }", "label": 1, "id": 6155}
{"input": "int max ( int a , int b ) { if ( a > b ) { return ( a ) ; } return ( b ) ; } int main ( ) { int t , n , a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { int m = - <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { b [ i ] [ <int> ] = b [ i - <int> ] [ <int> ] + a [ i ] [ <int> ] ; b [ i ] [ n - <int> ] = b [ i - <int> ] [ n - <int> ] + a [ i ] [ n - <int> ] ; for ( j = <int> ; j < n - <int> ; j ++ ) { b [ i ] [ j ] = a [ i ] [ j ] + max ( b [ i - <int> ] [ j ] , b [ i - <int> ] [ j - <int> ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { m = max ( m , b [ n - <int> ] [ i ] ) ; } printf ( <str> , m ) ; } return ( <int> ) ; }", "label": 0, "id": 6156}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , k , a [ <int> ] , f , min , c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = i ; j < n ; j ++ ) { f = <int> ; for ( k = i ; k <= j ; k ++ ) { if ( k == i ) { min = a [ k ] ; } else if ( min > a [ k ] ) { f = <int> ; break ; } else { min = a [ k ] ; } } if ( f == <int> ) { c ++ ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 6157}
{"input": "int main ( void ) { int t , a , b , max , ta , tb ; long int gcd , hcf ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a % b == <int> || b % a == <int> ) { if ( a > b ) gcd = a ; else gcd = b ; } else if ( a == <int> || b == <int> ) { if ( a == <int> ) gcd = b ; else gcd = a ; } else { ta = a ; tb = b ; max = <int> ; gcd = <int> ; while ( ta != <int> || tb != <int> ) { if ( ta % max == <int> && tb % max != <int> ) { while ( ta % max == <int> ) { gcd = gcd * max ; ta = ta / max ; } } else if ( tb % max == <int> && ta % max != <int> ) { while ( tb % max == <int> ) { gcd = gcd * max ; tb = tb / max ; } } else if ( ta % max == <int> && tb % max == <int> ) { while ( ta % max == <int> && tb % max == <int> ) { ta = ta / max ; tb = tb / max ; gcd = gcd * max ; } } if ( ta % max > <int> && tb % max > <int> ) max ++ ; } } hcf = ( a * b ) / gcd ; printf ( <str> , hcf , gcd ) ; } return <int> ; }", "label": 2, "id": 6158}
{"input": "int max ( int x , int y ) { return ( x > y ) ? x : y ; } int fun ( int ar [ MAX ] [ MAX ] , int i , int j , int n , int list [ MAX ] [ MAX ] ) { int m ; if ( i == n ) return <int> ; else m = max ( ( ar [ i ] [ j ] + fun ( ar , i + <int> , j , n , list ) ) , ( ar [ i ] [ j ] + fun ( ar , i + <int> , j + <int> , n , list ) ) ) ; list [ i ] [ j ] = m ; return m ; } int main ( ) { int ar [ MAX ] [ MAX ] ; static int list [ MAX ] [ MAX ] ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } printf ( <str> , fun ( ar , <int> , <int> , n , list ) ) ; } }", "label": 2, "id": 6159}
{"input": "int main ( ) { int i , t , smallest , cost = <int> ; long long int n ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } smallest = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < smallest ) { smallest = a [ i ] ; } } cost = ( n - <int> ) * smallest ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 6160}
{"input": "int main ( ) { int t , n , i , j , k , a [ <int> ] [ <int> ] , s ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } k = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) s = s + a [ j ] [ k ] ; else { s = s + a [ j ] [ k ] ; k = k + <int> ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 6161}
{"input": "int main ( ) { int n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6162}
{"input": "int main ( ) { int n , row , mat [ <int> ] [ <int> ] , i , j , tmp [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & mat [ i ] [ j ] ) ; for ( i = <int> ; i < row ; i ++ ) tmp [ i ] = mat [ row - <int> ] [ i ] ; for ( i = row - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( tmp [ j ] > tmp [ j + <int> ] ) tmp [ j ] += mat [ i ] [ j ] ; else tmp [ j ] = tmp [ j + <int> ] + mat [ i ] [ j ] ; } printf ( <str> , tmp [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6163}
{"input": "int gcd ( int , int ) ; int main ( ) { long long int a , t , b , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == b ) { return a ; } else if ( a > b ) { return ( gcd ( ( a - b ) , b ) ) ; } else { return ( gcd ( a , ( b - a ) ) ) ; } }", "label": 1, "id": 6164}
{"input": "int main ( ) { int t , i , n , sum ; scanf ( <str> , & t ) ; while ( t > <int> ) { sum = <int> ; scanf ( <str> , & n ) ; int a [ n + <int> ] , b [ n + <int> ] ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } b [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { b [ i ] = b [ i - <int> ] + <int> ; } else { b [ i ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { sum = sum + b [ i ] ; } printf ( <str> , sum ) ; t -- ; } }", "label": 0, "id": 6165}
{"input": "int main ( ) { int t ; sf ( <str> , & t ) ; while ( t -- ) { int a , b , n , m ; sf ( <str> , & a , & b ) ; n = a ; m = b ; while ( a % b != <int> ) { int t = a % b ; a = b ; b = t ; } pf ( <str> , b , ( n * m ) / b ) ; } return <int> ; }", "label": 1, "id": 6166}
{"input": "int main ( ) { int t , n , i , j ; int ar [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { get ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { ar [ i - <int> ] [ j ] += max ( ar [ i ] [ j ] , ar [ i ] [ j + <int> ] ) ; } } printf ( <str> , ar [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 6167}
{"input": "int main ( ) { int n , nor , i , j , ar [ <int> ] [ <int> ] , r , c , rows ; scanf ( <str> , & n ) ; if ( n <= <int> ) { while ( n -- > <int> ) { scanf ( <str> , & rows ) ; nor = rows ; if ( nor >= <int> && nor <= <int> ) { for ( i = <int> ; i < nor ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } r = rows - <int> ; while ( r >= <int> ) { c = <int> ; while ( c <= r ) { ar [ r ] [ c ] += ( ar [ r + <int> ] [ c ] > ar [ r + <int> ] [ c + <int> ] ? ar [ r + <int> ] [ c ] : ar [ r + <int> ] [ c + <int> ] ) ; c ++ ; } r -- ; } printf ( <str> , ar [ <int> ] [ <int> ] ) ; } } return <int> ; }", "label": 3, "id": 6168}
{"input": "int i ; int gcd ( int a , int b ) { i = a % b ; if ( i == <int> ) return b ; gcd ( b , i ) ; } int main ( ) { int t , n , k , g , lcm , temp ; scanf ( <str> , & t ) ; while ( t -- ) { i = <int> ; scanf ( <str> , & n , & k ) ; g = gcd ( n , k ) ; printf ( <str> , g , ( n * k ) / g ) ; } return <int> ; }", "label": 1, "id": 6169}
{"input": "int max ( int x , int y ) { return ( x > y ? x : y ) ; } int main ( ) { int data [ <int> ] [ <int> ] , t , i , j , rows , columns , largest = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { largest = <int> ; scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { for ( columns = <int> ; columns <= j ; columns ++ ) { scanf ( <str> , & ( data [ j ] [ columns ] ) ) ; if ( j != <int> ) { if ( columns == <int> ) { data [ j ] [ columns ] += data [ j - <int> ] [ columns ] ; } else if ( columns == j ) { data [ j ] [ columns ] += data [ j - <int> ] [ columns - <int> ] ; } else { data [ j ] [ columns ] += max ( data [ j - <int> ] [ columns ] , data [ j - <int> ] [ columns - <int> ] ) ; } if ( data [ j ] [ columns ] > largest ) { largest = data [ j ] [ columns ] ; } } else { largest = data [ j ] [ columns ] ; } } } printf ( <str> , largest ) ; } }", "label": 0, "id": 6170}
{"input": "int bigsum ( int l ) ; int max , lines = <int> , matrix [ <int> ] [ <int> ] = { <int> } ; int main ( void ) { int i , j , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & matrix [ i ] [ j ] ) ; max = bigsum ( lines ) ; printf ( <str> , max ) ; } return <int> ; } int bigsum ( int l ) { int i , j , a , b ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a = matrix [ i ] [ j ] + matrix [ i - <int> ] [ j - <int> ] ; b = matrix [ i - <int> ] [ j ] + matrix [ i ] [ j ] ; if ( j == <int> ) { matrix [ i ] [ j ] = b ; } else if ( j == i ) { matrix [ i ] [ j ] = a ; } else { matrix [ i ] [ j ] = a ; if ( matrix [ i ] [ j ] < a ) { matrix [ i ] [ j ] = b ; } } } } max = <int> ; i = l - <int> ; for ( j = <int> ; j <= i ; j ++ ) { if ( matrix [ i ] [ j ] > max ) max = matrix [ i ] [ j ] ; } return max ; }", "label": 1, "id": 6171}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , s = <int> ; scanf ( <str> , & n ) ; int a [ n ] , i ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { s = s + a [ i + <int> ] ; } else { s = s + a [ i ] ; } } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 6172}
{"input": "int static max_val ; int * * buf ; void max_cal ( int sum , int row , int column , int m ) { if ( row == m ) { if ( max_val < sum + buf [ row ] [ column ] ) max_val = sum + buf [ row ] [ column ] ; } else { max_cal ( sum + buf [ row ] [ column ] , row + <int> , column + <int> , m ) ; max_cal ( sum + buf [ row ] [ column ] , row + <int> , column , m ) ; } } void mvp ( int m ) { max_val = <int> ; max_cal ( <int> , <int> , <int> , m ) ; } int main ( void ) { int i , j , k , m ; buf = ( int * * ) malloc ( sizeof ( int * ) * <int> ) ; for ( i = <int> ; i < <int> ; i ++ ) buf [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; int n , max ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; for ( j = <int> ; j < m ; j ++ ) for ( k = <int> ; k < j + <int> ; k ++ ) scanf ( <str> , & buf [ j ] [ k ] ) ; max = - <int> ; mvp ( m ) ; if ( max < max_val ) max = max_val ; printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 6173}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; return <int> ; }", "label": 1, "id": 6174}
{"input": "int main ( ) { long long int n , a [ <int> ] , sum , k = <int> , i , j , t ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; k = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { if ( a [ j ] > a [ j + <int> ] ) break ; else k ++ ; } } sum = k + n ; printf ( <str> , sum ) ; t -- ; } }", "label": 0, "id": 6175}
{"input": "int main ( ) { int t , p , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & p ) ; for ( i = <int> ; i < p ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = p ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6176}
{"input": "long long int gcd ( long long int a , long long b ) ; long long int lcm ( long long int a , long long int b , long long int d ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i <= t ; i ++ ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int d = gcd ( a , b ) ; long long int l = lcm ( a , b , d ) ; printf ( <str> , d , l ) ; } return <int> ; } long long int gcd ( long long int a , long long int b ) { if ( a < b ) { long long int c = a ; a = b ; b = c ; } long long int n = a % b ; if ( n == <int> ) return b ; else return ( gcd ( b , n ) ) ; } long long int lcm ( long long int a , long long int b , long long int d ) { long long int l = ( a * b ) / d ; return l ; }", "label": 0, "id": 6177}
{"input": "int main ( ) { int n1 , n2 , i , gcd , lcm , t , z ; scanf ( <str> , & t ) ; for ( z = <int> ; z < t ; z ++ ) { scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n1 && i <= n2 ; ++ i ) { if ( n1 % i == <int> && n2 % i == <int> ) gcd = i ; } lcm = ( n1 * n2 ) / gcd ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 -= n2 ; else n2 -= n1 ; } printf ( <str> , n1 , lcm ) ; } return <int> ; }", "label": 1, "id": 6178}
{"input": "long int max ( long int a , long int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { unsigned long o [ <int> ] , temp [ <int> ] , t , i , j , l , m ; for ( i = <int> ; i < <int> ; i ++ ) { o [ i ] = <int> ; temp [ i ] = <int> ; } scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp [ j ] ) ; } temp [ <int> ] += o [ <int> ] ; if ( i > <int> ) temp [ i ] += o [ i - <int> ] ; for ( j = <int> ; j < i ; j ++ ) { temp [ j ] = temp [ j ] + max ( o [ j - <int> ] , o [ j ] ) ; } for ( j = <int> ; j <= i ; j ++ ) { o [ j ] = temp [ j ] ; } } m = o [ <int> ] ; for ( i = <int> ; i <= ( l - <int> ) ; i ++ ) { if ( m < o [ i ] ) m = o [ i ] ; } printf ( <str> , m ) ; for ( i = <int> ; i < <int> ; i ++ ) { o [ i ] = <int> ; temp [ i ] = <int> ; } } return <int> ; }", "label": 0, "id": 6179}
{"input": "int main ( ) { int n1 , n2 , n , gcd , lcm , r , numer , denom ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { numer = n1 ; denom = n2 ; } else { numer = n2 ; denom = n1 ; } r = numer % denom ; while ( r != <int> ) { numer = denom ; denom = r ; r = numer % denom ; } gcd = denom ; lcm = n1 * n2 / gcd ; printf ( <str> , lcm , gcd ) ; } return <int> ; }", "label": 1, "id": 6180}
{"input": "int top = - <int> , stack [ <int> ] ; void push ( int value ) { stack [ top ++ ] = value ; } int pop ( ) { return stack [ top -- ] ; } void findSum ( int * * triangle , int height , int sum , int i , int j ) { if ( i == height - <int> ) { push ( sum + triangle [ i ] [ j ] ) ; return ; } findSum ( triangle , height , sum + triangle [ i ] [ j ] , i + <int> , j ) ; findSum ( triangle , height , sum + triangle [ i ] [ j ] , i + <int> , j + <int> ) ; } int findLargestSum ( int * * triangle , int height ) { int largest , temp ; findSum ( triangle , height , <int> , <int> , <int> ) ; while ( top >= <int> ) { temp = pop ( ) ; if ( largest < temp ) largest = temp ; } return largest ; } int main ( void ) { int N , height , i , j , * * triangle ; scanf ( <str> , & N ) ; while ( N -- ) { scanf ( <str> , & height ) ; triangle = ( int * * ) malloc ( height * sizeof ( int * ) ) ; for ( i = <int> ; i < height ; i ++ ) { triangle [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i < height ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & triangle [ i ] [ j ] ) ; } } printf ( <str> , findLargestSum ( triangle , height ) ) ; } return <int> ; }", "label": 3, "id": 6181}
{"input": "long max ( long a , long b ) { return ( ( a > b ) ? a : b ) ; } long process ( long * * triangle , long rows ) { long * * temp , i , j , k , maxval ; temp = ( long * * ) malloc ( ( rows + <int> ) * sizeof ( long * ) ) ; for ( i = <int> ; i < ( rows + <int> ) ; i ++ ) temp [ i ] = ( long * ) malloc ( ( rows + <int> ) * sizeof ( long ) ) ; for ( i = <int> ; i < ( rows + <int> ) ; i ++ ) { temp [ <int> ] [ i ] = <int> ; temp [ i ] [ <int> ] = <int> ; } for ( i = <int> ; i < ( rows + <int> ) ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { temp [ i ] [ j ] = max ( temp [ i - <int> ] [ j - <int> ] , temp [ i - <int> ] [ j ] ) + triangle [ i - <int> ] [ j - <int> ] ; } for ( k = j ; k < rows + <int> ; k ++ ) temp [ i ] [ k ] = <int> ; } maxval = temp [ rows ] [ <int> ] ; for ( i = <int> ; i < ( rows + <int> ) ; i ++ ) { maxval = ( temp [ rows ] [ i ] > maxval ) ? temp [ rows ] [ i ] : maxval ; } return maxval ; } int main ( ) { long testcases , rows , * * triangle , i , j , k , result ; scanf ( <str> , & testcases ) ; for ( k = <int> ; k < testcases ; k ++ ) { scanf ( <str> , & rows ) ; triangle = ( long * * ) malloc ( rows * sizeof ( long * ) ) ; for ( i = <int> ; i < rows ; i ++ ) { triangle [ i ] = ( long * ) malloc ( ( i + <int> ) * sizeof ( long ) ) ; for ( j = <int> ; j < ( i + <int> ) ; j ++ ) scanf ( <str> , & triangle [ i ] [ j ] ) ; } result = process ( triangle , rows ) ; printf ( <str> , result ) ; for ( i = <int> ; i < rows ; i ++ ) { free ( triangle [ i ] ) ; triangle [ i ] = NULL ; } free ( triangle ) ; } return <int> ; }", "label": 0, "id": 6182}
{"input": "int main ( ) { int k = <int> , t = <int> , j = <int> , line = <int> , tot = <int> , s1 = <int> , s2 = <int> , s = sizeof ( int ) , count = <int> , n = <int> , i = <int> , * a = NULL , * max = NULL ; scanf ( <str> , & t ) ; while ( ++ j <= t ) { scanf ( <str> , & n ) ; tot = ( n * ( n + <int> ) ) / <int> ; a = ( int * ) malloc ( s * tot ) ; max = ( int * ) malloc ( s * tot ) ; if ( max == NULL || a == NULL ) { printf ( <str> ) ; exit ( - <int> ) ; } for ( i = <int> ; i < tot ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } i = tot - <int> ; line = n ; for ( ; i >= <int> ; i -- ) { if ( line == n ) { max [ i ] = a [ i ] ; } else { s1 = a [ i ] + max [ i + line ] ; s2 = a [ i ] + max [ i + <int> + line ] ; if ( s1 >= s2 ) { max [ i ] = s1 ; } else max [ i ] = s2 ; } count ++ ; if ( count == line ) { count = <int> ; line -- ; } free ( a ) ; free ( max ) ; count = <int> ; } for ( k = <int> ; k < tot ; k ++ ) printf ( <str> , k , a [ k ] ) ; printf ( <str> ) ; for ( k = <int> ; k < tot ; k ++ ) printf ( <str> , k , max [ k ] ) ; } return <int> ; }", "label": 3, "id": 6183}
{"input": "int a [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int max_sum ( int i , int j , int n ) { int t1 , t2 , t ; if ( i >= n ) return <int> ; else { t1 = max_sum ( i + <int> , j , n ) ; t2 = max_sum ( i + <int> , j + <int> , n ) ; t = max ( t1 , t2 ) + a [ i ] [ j ] ; return t ; } } int main ( ) { int t , n , i , j , k ; int temp = <int> ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } temp = max_sum ( <int> , <int> , n ) ; printf ( <str> , temp ) ; } return <int> ; }", "label": 2, "id": 6184}
{"input": "int main ( void ) { int t , n , j , arr ; unsigned long long int min = <int> ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { min = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr ) ; if ( min > arr ) min = arr ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 6185}
{"input": "int main ( ) { int T , A , B , a , b , gcd , lcm , n = <int> ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { a = A ; b = B ; } else { a = B ; b = A ; } while ( n ) { n = a % b ; a = b ; b = n ; } gcd = a ; lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 6186}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; long long int max ; scanf ( <str> , & t ) ; while ( t -- ) { max = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i > <int> && j == <int> ) a [ i ] [ j ] += a [ i - <int> ] [ j ] ; if ( i > <int> && j > <int> ) a [ i ] [ j ] += ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ? a [ i - <int> ] [ j ] : a [ i - <int> ] [ j - <int> ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ n - <int> ] [ i ] ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 6187}
{"input": "int main ( ) { int t , a , b , lcm , rem ; lcm = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm = a * b ; if ( a < b ) { rem = a ; a = b ; b = rem ; } while ( b ) { rem = a % b ; a = b ; b = rem ; } printf ( <str> , a , ( lcm / a ) ) ; } return <int> ; }", "label": 1, "id": 6188}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int n , t , a [ <int> ] [ <int> ] = { <int> } , b [ <int> ] [ <int> ] = { <int> } , key , i , j ; scanf ( <str> , & n ) ; while ( ( n -- ) > <int> ) { scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) b [ i ] [ j ] = a [ i ] [ j ] ; else if ( j == <int> ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; else b [ i ] [ j ] = a [ i ] [ j ] + max ( b [ i - <int> ] [ j ] , b [ i - <int> ] [ j - <int> ] ) ; } } key = a [ t - <int> ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) if ( key < b [ t - <int> ] [ i ] ) key = b [ t - <int> ] [ i ] ; printf ( <str> , key ) ; } return <int> ; }", "label": 0, "id": 6189}
{"input": "int T , N ; int arr [ <int> ] [ <int> ] ; int memo_arr [ <int> ] [ <int> ] = { <int> } ; int max ( int t1 , int t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; } int solve ( int i , int j ) { int t , t1 , t2 ; if ( i >= N ) return <int> ; if ( memo_arr [ i ] [ j ] != <int> ) return memo_arr [ i ] [ j ] ; t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + arr [ i ] [ j ] ; memo_arr [ i ] [ j ] = t ; return t ; } int main ( void ) { int i , j ; scanf ( <str> , & T ) ; while ( T ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; printf ( <str> , solve ( <int> , <int> ) ) ; T -- ; } return <int> ; }", "label": 1, "id": 6190}
{"input": "int a [ <int> ] [ <int> ] ; int sumtrian ( int row , int col , int n ) ; int main ( ) { int i , j , n , sum ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = sumtrian ( <int> , <int> , n ) ; printf ( <str> , sum ) ; return <int> ; } int sumtrian ( int row , int col , int n ) { int sum1 , sum2 ; if ( row == n - <int> ) { return a [ row ] [ col ] ; } else { sum1 = a [ row ] [ col ] + sumtrian ( row + <int> , col , n ) ; sum2 = a [ row ] [ col ] + sumtrian ( row + <int> , col + <int> , n ) ; } return sum1 > sum2 ? sum1 : sum2 ; }", "label": 3, "id": 6191}
{"input": "int gcd ( ) ; int lcm ( ) ; int main ( ) { int n , a , b , c , i , d ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; d = lcm ( a , b ) ; printf ( <str> , c , d ) ; } return <int> ; } int gcd ( int n , int m ) { if ( n % m == <int> ) { return m ; } else { gcd ( n = m , n % m ) ; } } int lcm ( int a , int b ) { int i , j , n , m , flag = <int> ; for ( i = <int> ; i <= <int> ; i ++ ) { n = a * i ; for ( j = <int> ; j <= <int> ; j ++ ) { m = b * j ; if ( n == m ) { flag = <int> ; break ; } } if ( flag == <int> ) { break ; } } return m ; }", "label": 2, "id": 6192}
{"input": "int main ( ) { int t ; long int n , i , s ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> ) s = a [ i ] ; else if ( a [ i ] < s ) s = a [ i ] ; } s = s * ( n - <int> ) ; printf ( <str> , s ) ; t -- ; } return <int> ; }", "label": 0, "id": 6193}
{"input": "int matrix [ <int> ] [ <int> ] , n ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int solve ( int i , int j ) { int t1 , t2 , t ; if ( i == n ) { return <int> ; } t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + matrix [ i ] [ j ] ; return t ; } int main ( ) { int test , i , j , t , ans ; scanf ( <str> , & test ) ; for ( t = <int> ; t < test ; t ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } } ans = solve ( <int> , <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 2, "id": 6194}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6195}
{"input": "int main ( ) { int t , i , max1 ; long long n , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n , & k ) ; if ( k > n ) printf ( <str> , n ) ; else { long long a [ k ] ; for ( i = <int> ; i <= k ; i ++ ) { a [ i ] = n % i ; } max1 = a [ <int> ] ; for ( i = <int> ; i <= k ; i ++ ) { if ( a [ i ] > max1 ) { max1 = a [ i ] ; } } printf ( <str> , max1 ) ; } } return <int> ; }", "label": 2, "id": 6196}
{"input": "main ( ) { int gcd , t , a , b , i , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = a * b / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 6197}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { unsigned int n , i ; scanf ( <str> , & n ) ; unsigned int a [ n ] , min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6198}
{"input": "unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ) ; int main ( ) { unsigned long long int t , a , b , g , l ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a / g ) * b ; printf ( <str> , g , l ) ; t -- ; } return <int> ; } unsigned long long int gcd ( unsigned long long int a , unsigned long long int b ) { unsigned long long int t ; while ( b != <int> ) { t = a % b ; a = b ; b = t ; } return a ; }", "label": 0, "id": 6199}
{"input": "int main ( ) { int t , i , n ; long int * a , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; a = ( long int * ) malloc ( sizeof ( long int ) * n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; min = min < a [ i ] ? min : a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6200}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return ( b , a % b ) ; } int main ( ) { int m , a , b , l , g ; scanf ( <str> , & m ) ; while ( m -- ) { scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 6201}
{"input": "int gcd ( int a , int b ) { int r = a % b ; while ( r != <int> ) { a = b ; b = r ; r = a % b ; } return b ; } int main ( void ) { int a , b , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; int c = gcd ( a , b ) ; int d = a * b / c ; printf ( <str> , c , d ) ; t -- ; } return <int> ; }", "label": 1, "id": 6202}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int a , b , i , k ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) break ; } for ( k = a < b ? a : b ; k >= <int> ; k -- ) { if ( a % k == <int> && b % k == <int> ) break ; } printf ( <str> , k , i ) ; } return <int> ; }", "label": 2, "id": 6203}
{"input": "void fun ( long * , long * , long * ) ; int main ( ) { int t , i = <int> ; long n , j = <int> , k , g = <int> , h = <int> , o , r , key ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; long a [ <int> ] ; for ( j = <int> ; j <= n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j <= n ; j ++ ) { for ( k = j ; k <= n ; k ++ ) { if ( a [ k ] >= a [ j ] ) { for ( o = j ; o <= k ; o ++ ) { if ( ( o != k ) && ( o < k ) ) { r = o + <int> ; if ( a [ r ] < a [ o ] ) h ++ ; } } if ( h == <int> ) { g ++ ; } h = <int> ; } } } printf ( <str> , g ) ; g = <int> ; } return <int> ; }", "label": 2, "id": 6204}
{"input": "int a [ <int> ] ; int main ( ) { int t = <int> , s = <int> , i = <int> , j = <int> , n = <int> , <unk> = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; s = n * ( n + <int> ) / <int> ; for ( i = <int> ; i < s ; i ++ ) scanf ( <str> , & a [ i ] ) ; j = s - n - <int> ; <unk> = n ; while ( -- n ) { for ( i = <int> ; i < <unk> ; i ++ ) { a [ j ] += ( a [ j + <unk> ] > a [ j + <unk> - <int> ] ? a [ j + <unk> ] : a [ j + <unk> - <int> ] ) ; j -- ; } <unk> -- ; } printf ( <str> , a [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6205}
{"input": "int main ( ) { int x , y , i , j , p = <int> ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & x ) ; while ( x -- ) { scanf ( <str> , & y ) ; for ( i = <int> ; i < y ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < y - <int> ; i ++ ) { p = p + a [ i ] [ <int> ] ; } printf ( <str> , p + a [ y - <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6206}
{"input": "int main ( ) { int t , a = <int> , b = <int> , c = <int> , e , f ; scanf ( <str> , & t ) ; int gcd [ t ] , lcm [ t ] ; while ( a < t ) { int i = <int> ; scanf ( <str> , & e , & f ) ; int j = ( e > f ) ? f : e ; int x = ( e > f ) ? e : f ; int z = e * f ; while ( i <= j ) { if ( e % i == <int> && f % i == <int> ) { gcd [ a ] = i ; } ++ i ; } while ( j <= z ) { if ( j % e == <int> && j % f == <int> ) { lcm [ a ] = j ; break ; } ++ j ; } a ++ ; } while ( c < t ) { printf ( <str> , gcd [ c ] , lcm [ c ] ) ; ++ c ; } return <int> ; }", "label": 2, "id": 6207}
{"input": "int main ( ) { int n , i , j , t , a [ <int> ] [ <int> ] , largest , m = <int> , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } m = <int> ; largest = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( largest < a [ n - <int> ] [ j ] ) { largest = a [ n - <int> ] [ j ] ; m ++ ; } } sum = largest ; for ( i = n - <int> ; i >= <int> ; i -- ) { if ( m == <int> ) { sum = sum + a [ i ] [ <int> ] ; } else if ( m == n - <int> ) { sum = sum + a [ i ] [ ( m - <int> ) ] ; m -- ; } else if ( m != <int> || m != n - <int> ) { if ( a [ i ] [ m ] > a [ i ] [ m - <int> ] ) { sum = sum + a [ i ] [ m ] ; } else { sum = sum + a [ i ] [ m - <int> ] ; m -- ; } } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6208}
{"input": "int Call ( int x , int y ) { int a , b , t , gc , lc ; a = x ; b = y ; if ( b == <int> ) { return <int> ; } while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gc = a ; lc = ( x * y ) / gc ; printf ( <str> , gc , lc ) ; } int main ( void ) { int n ; long A , B , gcd , lcm ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A , & B ) ; Call ( A , B ) ; } return <int> ; }", "label": 1, "id": 6209}
{"input": "int main ( ) { int A [ <int> ] [ <int> ] ; int <unk> , i , j , k , sum , col , t , n , max ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; max = <int> ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; if ( j == <int> ) { max = max + A [ i ] [ j ] ; } } } <unk> = <int> ; for ( i = <int> ; i <= n ; i ++ ) { <unk> = <unk> + A [ i - <int> ] [ i - <int> ] ; for ( j = i ; j <= n ; j ++ ) { sum = <unk> ; col = i - <int> ; for ( k = <int> ; k <= n ; k ++ ) { if ( k == j ) { col = col + <int> ; } sum = sum + A [ k ] [ col ] ; } printf ( <str> , sum ) ; if ( sum > max ) { max = sum ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 6210}
{"input": "void code ( ) { int n , i , j ; int k ; k = <int> ; long long int ans = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i + <int> ] >= a [ i ] ) k ++ ; else { k = k * ( k + <int> ) / <int> ; ans = ans + k ; k = <int> ; } } printf ( <str> , ans ) ; return ; } int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { code ( ) ; } return <int> ; }", "label": 1, "id": 6211}
{"input": "int n , arr [ <int> ] [ <int> ] ; int maximum ( int a , int b ) { if ( a > b ) return a ; else return b ; } int max ( int x , int y ) { if ( x < n - <int> ) return arr [ x ] [ y ] + maximum ( max ( x + <int> , y ) , max ( x + <int> , y + <int> ) ) ; else return maximum ( arr [ x ] [ y ] , arr [ x ] [ y + <int> ] ) ; } int main ( ) { int i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; printf ( <str> , max ( <int> , <int> ) ) ; }", "label": 3, "id": 6212}
{"input": "int gcd ( int , int ) ; int main ( ) { int a , b , lcm , k , c ; scanf ( <str> , & a , & b ) ; k = gcd ( a , b ) ; lcm = ( a * b ) / k ; printf ( <str> , k , lcm ) ; } int gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { gcd ( b , b % a ) ; } }", "label": 1, "id": 6213}
{"input": "int main ( ) { int t , n , d , r , num1 , num2 , gcd , lcm ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { n = num1 ; d = num2 ; } else { n = num2 ; d = num1 ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6214}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , s = <int> ; int a [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; while ( n != <int> ) { if ( a [ <int> ] > a [ <int> ] ) { s = s + a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) a [ i - <int> ] = a [ i ] ; n = n - <int> ; } else { s = s + a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) a [ i - <int> ] = a [ i ] ; n = n - <int> ; } } if ( a [ <int> ] > a [ <int> ] ) { s = s + a [ <int> ] ; a [ <int> ] = a [ <int> ] ; n = n - <int> ; } else { s = s + a [ <int> ] ; n = n - <int> ; } printf ( <str> , s ) ; } }", "label": 2, "id": 6215}
{"input": "int main ( ) { int t , sum [ <int> ] , rows , a , i , j , k , max ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < rows ; j ++ ) { sum [ j ] = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a ) ; sum [ j ] += a ; } } max = sum [ <int> ] ; for ( j = <int> ; j < rows ; j ++ ) { if ( max < sum [ j ] ) max = sum [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 6216}
{"input": "int get_gcd ( int a , int b ) { return b == <int> ? a : get_gcd ( b , a % b ) ; } int main ( ) { int a , b , t , i ; int gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; gcd = get_gcd ( a , b ) ; lcm = ( a * b ) / ( gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6217}
{"input": "void main ( ) { int y ; scanf ( <str> , & y ) ; for ( ; y > <int> ; -- y ) { long int a , b , j , c , i , q = <int> ; scanf ( <str> , & a , & b ) ; if ( a > b ) { j = a ; c = b ; } else { c = a ; j = b ; } for ( ; q > <int> ; ) { q = j % c ; j = c ; c = q ; } printf ( <str> , j , a * b / j ) ; } }", "label": 0, "id": 6218}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { long int num1 , num2 , i , min , max ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) min = num2 ; max = num1 ; for ( i = min ; i > <int> ; i -- ) { if ( num1 % i == <int> && num2 % i == <int> ) { printf ( <str> , i ) ; } } for ( i = <int> ; i <= num1 * num2 ; i ++ ) { if ( i % num1 == <int> && i % num2 == <int> ) { printf ( <str> , i ) ; } } } return <int> ; }", "label": 2, "id": 6219}
{"input": "int main ( ) { int m , n , i , t , rem , lcm , temp ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & m , & n ) ; temp = n ; while ( n > <int> ) { rem = m % n ; m = n ; n = rem ; } lcm = ( m * temp ) / n ; printf ( <str> , n , lcm ) ; } return <int> ; }", "label": 3, "id": 6220}
{"input": "int a [ <int> ] [ <int> ] , k , c [ <int> ] [ <int> ] ; int f ( int i , int j ) { int sum , m1 , m2 ; if ( i < k ) { if ( ! c [ i ] [ j ] ) { m1 = f ( i + <int> , j ) ; m2 = f ( i + <int> , j + <int> ) ; sum = a [ i ] [ j ] + MAX ( m1 , m2 ) ; c [ i ] [ j ] = sum ; } return c [ i ] [ j ] ; } else return <int> ; } int main ( ) { int i , ii , j , l ; scanf ( <str> , & i ) ; while ( i -- ) { scanf ( <str> , & k ) ; for ( j = <int> ; j < k ; j ++ ) { for ( l = <int> ; l <= j ; l ++ ) { scanf ( <str> , & a [ j ] [ l ] ) ; c [ j ] [ l ] = <int> ; } } printf ( <str> , f ( <int> , <int> ) ) ; } return <int> ; }", "label": 0, "id": 6221}
{"input": "int main ( ) { int t , i , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , temp = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < temp ) temp = a [ i ] ; } printf ( <str> , temp * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6222}
{"input": "int euclid ( int x , int y ) ; int lcm ( int a , int b ) ; int main ( ) { int T , a , b , res ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & a , & b ) ; int ans = euclid ( a , b ) ; res = lcm ( a , b ) ; printf ( <str> , ans , res ) ; -- T ; } } int euclid ( int x , int y ) { while ( x != y ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } return x ; } int lcm ( int a , int b ) { return ( ( a * b ) / euclid ( a , b ) ) ; }", "label": 1, "id": 6223}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { long a , b ; scanf ( <str> , & a , & b ) ; long i , tmp = b ; long gcd , lcm ; if ( a < b ) { tmp = a ; } for ( i = tmp ; i > <int> ; i -- ) { if ( ( a % i ) == <int> && ( b % i ) == <int> ) { gcd = i ; break ; } } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 2, "id": 6224}
{"input": "int max_sum ( int * triangle [ ] , int row ) { int temp ; int i , j , prev_row ; int * curr_row_ptr ; int * prev_row_ptr ; for ( i = <int> , prev_row = <int> ; i < row ; i ++ , prev_row ++ ) { curr_row_ptr = triangle [ i ] ; prev_row_ptr = triangle [ prev_row ] ; * curr_row_ptr += * prev_row_ptr ; for ( j = <int> ; j <= i ; j ++ ) { temp = * ( prev_row_ptr + j ) > * ( prev_row_ptr + j - <int> ) ? * ( prev_row_ptr + j ) : * ( prev_row_ptr + j - <int> ) ; * ( curr_row_ptr + j ) += temp ; } } i -- ; curr_row_ptr = triangle [ i ] ; temp = * curr_row_ptr ; ; for ( j = <int> ; j <= i ; j ++ ) { if ( * ( curr_row_ptr + j ) > temp ) temp = * ( curr_row_ptr + j ) ; } return temp ; } int main ( ) { int test_cases ; int rows ; char str [ <int> ] ; char * temp ; int i , j , num ; int * triangle [ <int> ] = { NULL } ; int * row_ptr ; scanf ( <str> , & test_cases ) ; while ( test_cases -- ) { scanf ( <str> , & rows ) ; fflush ( stdin ) ; for ( i = <int> ; i < rows ; i ++ ) { if ( triangle [ i ] == NULL ) triangle [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; j = <int> ; row_ptr = triangle [ i ] ; while ( j <= i ) { scanf ( <str> , row_ptr ++ ) ; j ++ ; } } printf ( <str> , max_sum ( triangle , rows ) ) ; } return <int> ; }", "label": 0, "id": 6225}
{"input": "int main ( ) { int T , i , a , sum [ <int> ] , max = <int> , m = <int> , n , k , j ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a ) ; for ( j = <int> ; j <= a ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & n ) ; sum [ m ] = sum [ m ] + n ; } m ++ ; } } for ( i = <int> ; i <= a - <int> ; i ++ ) { if ( sum [ i ] > sum [ i + <int> ] ) ; max = sum [ i ] ; } printf ( <str> , max ) ; return <int> ; }", "label": 3, "id": 6226}
{"input": "int main ( void ) { int T , A , B , c , A1 , B1 ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A1 , & B1 ) ; if ( A1 < B1 ) { A = B1 ; B = A1 ; } else { A = A1 ; B = B1 ; } while ( B ) { c = B ; B = A % B ; A = c ; } printf ( <str> , A , A1 * ( B1 / A ) ) ; } return <int> ; }", "label": 1, "id": 6227}
{"input": "int main ( ) { int t , n [ <int> ] , i , j , sum [ <int> ] , min , a [ <int> ] [ <int> ] ; printf ( <str> ) ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n [ i ] ) ; for ( j = <int> ; j < n [ i ] ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } printf ( <str> ) ; } for ( i = <int> ; i < t ; i ++ ) { sum [ i ] = <int> ; min = a [ i ] [ <int> ] ; for ( j = <int> ; j < n [ i ] ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; sum [ i ] = sum [ i ] + min ; } } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , sum [ i ] ) ; return <int> ; }", "label": 3, "id": 6228}
{"input": "static int a [ <int> ] [ <int> ] ; int main ( ) { int n , t ; scanf ( <str> , & n ) ; while ( n -- ) { int i , j ; scanf ( <str> , & t ) ; fflush ( stdin ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { a [ i ] [ j ] += maxx ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6229}
{"input": "int main ( ) { int test , i , j , line ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & line ) ; int array [ line ] [ line ] ; for ( i = <int> ; i < line ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & array [ i ] [ j ] ) ; } for ( i = line - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { array [ i ] [ j ] += ( array [ i + <int> ] [ j ] >= array [ i + <int> ] [ j + <int> ] ) ? array [ i + <int> ] [ j ] : array [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6230}
{"input": "int main ( ) { int n , t , i , j , num , tmp1 ; int a [ <int> ] [ <int> ] , tot [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { tot [ i ] [ i ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) { if ( ( i - <int> ) != <int> ) { tot [ i ] [ j ] = tot [ i - <int> ] [ j ] + a [ i ] [ j ] ; tmp1 = tot [ i ] [ j ] ; if ( ( j - <int> ) != <int> ) { tot [ i ] [ j ] = tot [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; if ( tmp1 > tot [ i ] [ j ] ) { tot [ i ] [ j ] = tmp1 ; } } } } printf ( <str> ) ; } i = tot [ n ] [ <int> ] ; for ( j = <int> ; j <= n ; j ++ ) { if ( tot [ n ] [ j ] > i ) { i = tot [ n ] [ j ] ; } } printf ( <str> , i + a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 6231}
{"input": "int main ( ) { int T , i , arr [ <int> ] , sum , n ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; sum = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( arr [ i ] < arr [ i + <int> ] ) sum += arr [ i ] ; else sum += arr [ i + <int> ] ; } printf ( <str> , sum ) ; T -- ; } return ( <int> ) ; }", "label": 3, "id": 6232}
{"input": "int main ( ) { int cases , rows , factor , factor2 ; int row [ <int> ] [ <int> ] ; register int i , j , k ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { scanf ( <str> , & rows ) ; for ( j = <int> ; j < <int> ; j ++ ) row [ <int> ] [ j ] = row [ <int> ] [ j ] = <int> ; for ( j = <int> ; j < rows ; j ++ ) { factor = j % <int> ; factor2 = ( j + <int> ) % <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & row [ factor ] [ k ] ) ; if ( <unk> ) printf ( <str> ) ; if ( k == <int> ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else if ( k == j ) row [ factor ] [ k ] += row [ factor2 ] [ k - <int> ] ; else { if ( row [ factor2 ] [ k ] > row [ factor2 ] [ k - <int> ] ) row [ factor ] [ k ] += row [ factor2 ] [ k ] ; else row [ factor ] [ k ] += row [ factor2 ] [ k - <int> ] ; } } if ( <unk> ) { for ( k = <int> ; k < rows ; k ++ ) printf ( <str> , row [ <int> ] [ k ] , row [ <int> ] [ k ] ) ; printf ( <str> ) ; } } factor = ( rows + <int> ) % <int> ; factor2 = - <int> ; for ( k = <int> ; k < rows ; k ++ ) if ( row [ factor ] [ k ] > factor2 ) factor2 = row [ factor ] [ k ] ; printf ( <str> , factor2 ) ; } return <int> ; }", "label": 0, "id": 6233}
{"input": "void display_triangle ( int * * triangle , int rows ) { int i , j ; for ( i = <int> ; i < rows ; i ++ ) { printf ( <str> ) ; for ( j = <int> ; j < i + <int> ; j ++ ) { printf ( <str> , triangle [ i ] [ j ] ) ; } } } void free_triangle ( int * * triangle , int rows ) { int i ; for ( i = <int> ; i < rows ; i ++ ) { free ( triangle [ i ] ) ; } free ( triangle ) ; } int <unk> ( int * * triangle , int columns , int rows , int temp_sum ) { static int max_sum ; int cur_sum , i ; if ( columns == rows ) { return temp_sum ; } for ( i = <int> ; i < columns + <int> ; i ++ ) { cur_sum = find_max_triangle ( triangle , columns + <int> , rows , temp_sum + triangle [ columns ] [ i ] ) ; if ( max_sum < cur_sum ) max_sum = cur_sum ; } return max_sum ; } int find_max_triangle ( int * * triangle , int start , int columns , int rows , int temp_sum ) { static int max_sum ; int cur_sum , i ; if ( columns == rows ) { return temp_sum ; } for ( i = start ; i < columns + <int> && i < start + <int> ; i ++ ) { cur_sum = find_max_triangle ( triangle , i , columns + <int> , rows , temp_sum + triangle [ columns ] [ i ] ) ; if ( max_sum < cur_sum ) max_sum = cur_sum ; } return max_sum ; } int main ( void ) { int * * triangle = NULL ; int n , rows , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & rows ) ; triangle = ( int * * ) malloc ( rows * sizeof ( int ) ) ; for ( i = <int> ; i < rows ; i ++ ) { triangle [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( j = <int> ; j < ( i + <int> ) ; j ++ ) scanf ( <str> , & triangle [ i ] [ j ] ) ; } printf ( <str> , find_max_triangle ( triangle , <int> , <int> , rows , <int> ) ) ; } return <int> ; }", "label": 2, "id": 6234}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; long long int n1 , n2 , x , y , gcd , lcm ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } gcd = n1 ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 6235}
{"input": "void main ( ) { int a [ <int> ] , i , t , n , j , k , min , minp , cost [ <int> ] , rem , l ; for ( i = <int> ; i < <int> ; i ++ ) a [ i ] = <char> ; for ( i = <int> ; i < <int> ; i ++ ) cost [ i ] = <char> ; entert : scanf ( <str> , & t ) ; if ( ! ( t >= <int> && t <= <int> ) ) { goto entert ; } for ( i = <int> ; i < t ; i ++ ) { entern : scanf ( <str> , & n ) ; if ( ! ( n >= <int> && n <= <int> ) ) { goto entern ; } for ( j = <int> ; j < n ; j ++ ) { entera : scanf ( <str> , & a [ j ] ) ; if ( ! ( a [ j ] >= <int> ) ) { goto entera ; } } for ( l = <int> ; l < n ; l ++ ) { min = a [ <int> ] ; minp = <int> ; for ( k = <int> ; k < n - l + <int> ; k ++ ) if ( a [ k ] < min ) { min = a [ k ] ; minp = k ; } if ( a [ minp + <int> ] < a [ minp - <int> ] ) rem = minp - <int> ; else rem = minp + <int> ; cost [ i ] = cost [ i ] + min ; for ( k = rem ; k < n ; k ++ ) a [ k ] = a [ k + <int> ] ; } a [ <int> ] = <char> ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , cost [ i ] ) ; scanf ( <str> , & t ) ; printf ( <str> ) ; }", "label": 1, "id": 6236}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; for ( int tc = <int> ; tc < t ; tc ++ ) { int n ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int c = <int> ; for ( int i = <int> ; i + <int> < n && i < n ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) c ++ ; } printf ( <str> , c + n ) ; } return <int> ; }", "label": 1, "id": 6237}
{"input": "int main ( void ) { int t , i , n ; long long int s ; scanf ( <str> , & t ) ; while ( t -- ) { s = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; int b [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { b [ i ] = <int> ; } b [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i - <int> ] ) { b [ <int> ] = i ; break ; } } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= a [ i - <int> ] ) b [ i ] = b [ i - <int> ] + <int> ; else b [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) s += b [ i ] ; printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 6238}
{"input": "int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } return a ; } int main ( ) { long int x , y , * ans ; int j , t ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & x , & y ) ; * ( ans + j * <int> ) = gcd ( x , y ) ; * ( ans + j * <int> + <int> ) = x * y / ( * ( ans + j * <int> ) ) ; } for ( j = <int> ; j < t ; j ++ ) { printf ( <str> , * ( ans + j * <int> ) , * ( ans + j * <int> + <int> ) ) ; } return <int> ; }", "label": 3, "id": 6239}
{"input": "int main ( ) { int t , i , j , l ; long long int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = l - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6240}
{"input": "int main ( void ) { int n , m , i , j , p [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- > <int> ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & p [ i ] [ j ] ) ; } } for ( i = m - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( p [ i ] [ j ] > p [ i ] [ j + <int> ] ) p [ i - <int> ] [ j ] += p [ i ] [ j ] ; else p [ i - <int> ] [ j ] += p [ i ] [ j + <int> ] ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 6241}
{"input": "int hcf ( int a , int b ) { if ( a > b ) { int c = b ; b = a ; a = c ; } while ( a != <int> ) { int d ; d = b % a ; b = a ; a = d ; } return b ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int gcd = hcf ( a , b ) ; printf ( <str> , gcd , ( a * b ) / gcd ) ; } return ( <int> ) ; }", "label": 1, "id": 6242}
{"input": "int main ( ) { int t , i , j ; long n , * a , min , * result ; scanf ( <str> , & t ) ; result = malloc ( sizeof ( long ) * t ) ; for ( i = <int> ; i <= t && i <= <int> ; i ++ ) { scanf ( <str> , & n ) ; a = malloc ( sizeof ( long ) * n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> , min = a [ <int> ] ; i < n ; j ++ , n -- ) if ( min > a [ j ] && min > a [ n - <int> ] ) if ( a [ j ] < a [ n - <int> ] ) min = a [ j ] ; else min = a [ n - <int> ] ; result [ i - <int> ] = min ; } for ( i = <int> ; i < t && i < <int> ; i ++ ) printf ( <str> , result [ i ] ) ; return ( <int> ) ; }", "label": 1, "id": 6243}
{"input": "int gcd ( int a , int b ) { if ( a % b != <int> ) { return gcd ( b , a % b ) ; } else { return b ; } } int main ( ) { int n ; scanf ( <str> , & n ) ; int a , b ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , a * b / gcd ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 6244}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t ; long long int a , b , min = <int> , max = <int> , hcf = <int> , lcm = <int> ; scanf ( <str> , & t ) ; while ( t -- != <int> ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } hcf = gcd ( min , max ) ; lcm = ( a * b / hcf ) ; printf ( <str> , hcf , lcm ) ; } return <int> ; } long int gcd ( long int a , long int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; }", "label": 0, "id": 6245}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { long a , temp [ <int> ] = { <int> } , min = INT_MAX ; scanf ( <str> , & n ) ; for ( long i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; temp [ a ] ++ ; if ( min > a ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 3, "id": 6246}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { int sum = <int> ; long long n , test [ <int> ] = { <int> } ; scanf ( <str> , & n ) ; long long arr [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i - <int> ] < arr [ i ] ) { test [ i ] = test [ i - <int> ] + <int> ; } else { test [ i ] = <int> ; } } for ( i = <int> ; i < n ; i ++ ) { sum = sum + test [ i ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 0, "id": 6247}
{"input": "main ( ) { int a [ <int> ] , i , c , n , k = <int> , m , j , l ; printf ( <str> ) ; scanf ( <str> , & m ) ; for ( l = <int> ; l <= m ; l ++ ) { printf ( <str> ) ; scanf ( <str> , & n ) ; c = n ; printf ( <str> ) ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) { if ( ( i == <int> ) && ( ( j + <int> ) == n ) ) c = c ; else c = c + <int> ; } else break ; } } printf ( <str> , c ) ; } }", "label": 3, "id": 6248}
{"input": "int main ( ) { long long int a ; int i , t , n , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & x ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < x ) a = x ; } printf ( <str> , a * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 6249}
{"input": "void sort ( int a [ ] , int n , int m ) { int p = <int> ; if ( m > n ) { p = partation ( a , n , m ) ; sort ( a , n , p - <int> ) ; sort ( a , p + <int> , m ) ; } } int partation ( int a [ ] , int n , int m ) { int x = a [ m ] , h = n - <int> , k = <int> ; for ( k = n ; k <= m - <int> ; k ++ ) { if ( a [ k ] <= x ) { h = h + <int> ; swap ( & a [ h ] , & a [ k ] ) ; } } swap ( & a [ h + <int> ] , & a [ m ] ) ; return h + <int> ; } void swap ( int * a , int * b ) { int temp = <int> ; temp = * a ; * a = * b ; * b = temp ; } int main ( ) { int v ; long long int sum = <int> , i , j ; scanf ( <str> , & v ) ; while ( v > <int> ) { scanf ( <str> , & i ) ; int a [ i ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } sort ( a , <int> , i - <int> ) ; sum = a [ <int> ] * ( i - <int> ) ; printf ( <str> , sum ) ; v -- ; } return <int> ; }", "label": 1, "id": 6250}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long a , b , i , lcm , gcd ; scanf ( <str> , & a , & b ) ; lcm = a * b * <fp> ; for ( i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 6251}
{"input": "int main ( ) { int n , i , j , max , sum = <int> , flag , t , no ; scanf ( <str> , & t ) ; if ( t <= <int> ) { while ( t != <int> ) { scanf ( <str> , & n ) ; if ( n > <int> && n < <int> ) { int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & no ) ; if ( no >= <int> && no <= <int> ) a [ i ] [ j ] = no ; else exit ( <int> ) ; } } max = a [ <int> ] [ <int> ] ; sum = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { flag = i ; for ( j = <int> ; flag == i ; j ++ ) { sum = a [ i ] [ j ] + a [ i + <int> ] [ j ] + a [ i + <int> ] [ j + <int> ] ; flag ++ ; if ( sum > max ) { max = sum ; } } } printf ( <str> , max ) ; t -- ; } else exit ( <int> ) ; } } return <int> ; }", "label": 1, "id": 6252}
{"input": "int main ( void ) { int T , i , j ; scanf ( <str> , & T ) ; while ( T -- ) { int arr [ <int> ] [ <int> ] , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6253}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , count = <int> , j , k , x ; scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { for ( k = j ; k < n - <int> ; k ++ ) { if ( a [ k ] < a [ k + <int> ] ) { count ++ ; } else break ; } } printf ( <str> , ( count + n ) ) ; } return <int> ; }", "label": 0, "id": 6254}
{"input": "int main ( void ) { int i , t , a , b , c ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = a ; a = b ; b = c ; } if ( b % a == <int> ) printf ( <str> , a , b ) ; else printf ( <str> , a * b ) ; } return <int> ; }", "label": 1, "id": 6255}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { int m = <int> , i , j , n , d , e , q , p ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; d = a [ i - <int> ] [ j - <int> ] ; e = a [ i - <int> ] [ j ] ; p = a [ i ] [ j ] += d >= e ? d : e ; m = m >= p ? m : p ; } } printf ( <str> , m ) ; } }", "label": 1, "id": 6256}
{"input": "main ( ) { int a [ <int> ] , b [ <int> ] , i , j , e , c , d , k , t , n , f ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { c = d = e = <int> ; scanf ( <str> , & n ) ; for ( k = <int> ; k < n ; k ++ ) { for ( j = <int> ; j < k + <int> ; j ++ ) { scanf ( <str> , & c ) ; if ( j == <int> ) b [ j ] = c + a [ j ] ; else { d = c + a [ j ] ; e = c + a [ j - <int> ] ; if ( d >= e ) b [ j ] = d ; else b [ j ] = e ; } } for ( j = <int> ; j < k ; j ++ ) a [ j ] = b [ j ] ; } f = a [ <int> ] ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( f < a [ j + <int> ] ) f = a [ j + <int> ] ; } printf ( <str> , f ) ; } return ( <int> ) ; }", "label": 1, "id": 6257}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int size , * arr , min , i ; scanf ( <str> , & size ) ; arr = ( int * ) calloc ( size , sizeof ( int ) ) ; min = arr [ <int> ] ; for ( i = <int> ; i < size ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } printf ( <str> , min * ( size - <int> ) ) ; } return <int> ; }", "label": 1, "id": 6258}
{"input": "int hcf ( int a , int b ) { int t ; if ( a < b ) { t = a ; a = b ; b = t ; } if ( a % b == <int> ) return b ; a = a % b ; return hcf ( a , b ) ; } int main ( ) { int a , b , h , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; h = hcf ( a , b ) ; printf ( <str> , h , a / h * b ) ; } return <int> ; }", "label": 1, "id": 6259}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { long long int x , a , b , i , j , gcd , lcm ; scanf ( <str> , & a , & b ) ; i = ( a > b ? b : a ) ; j = ( a > b ? a : b ) ; while ( i != <int> ) { x = i ; i = ( j % i ) ; j = x ; } gcd = j ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 6260}
{"input": "int hcf ( int n1 , int n2 ) { if ( n2 != <int> ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; } int main ( ) { int testcases , a , b , i ; int h , l ; scanf ( <str> , & testcases ) ; for ( i = <int> ; i < testcases ; i ++ ) { scanf ( <str> , & a , & b ) ; h = hcf ( a , b ) ; l = a * b / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 1, "id": 6261}
{"input": "int main ( ) { int t , a , b , s , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) s = b ; else s = a ; for ( i = s ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i ) ; break ; } } printf ( <str> , ( a * b ) / i ) ; } }", "label": 1, "id": 6262}
{"input": "int main ( ) { int i , j , t , n , count ; int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; count = n ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) { count ++ ; } } printf ( <str> , count ) ; } }", "label": 1, "id": 6263}
{"input": "int main ( ) { int t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , i , sum = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < ( n - <int> ) ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { sum = sum + a [ i + <int> ] ; } else { sum = sum + a [ i ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6264}
{"input": "int main ( ) { int T , A , B , i , c ; scanf ( <str> , & T , & A , & B ) ; for ( i = <int> ; i < A && i < B ; i ++ ) { if ( A % i && B % i == <int> ) { c = c * i ; } } printf ( <str> , c ) ; return <int> ; }", "label": 3, "id": 6265}
{"input": "unsigned int numRows = <int> ; void ReadInput ( char * data , int num ) { int i = <int> ; for ( i = <int> ; i < num ; i ++ ) { scanf ( <str> , & data [ i ] ) ; fflush ( stdin ) ; } } int AnalyseData ( ) { int * sum = NULL ; char * data = NULL ; int i = <int> , j = <int> ; int max = <int> ; scanf ( <str> , & numRows ) ; fflush ( stdin ) ; sum = ( int * ) malloc ( numRows * sizeof ( int ) ) ; data = ( char * ) malloc ( numRows * sizeof ( char ) ) ; for ( i = <int> ; i < numRows ; i ++ ) { ReadInput ( data , i + <int> ) ; for ( j = <int> ; j < i ; j ++ ) { if ( data [ j ] > data [ j + <int> ] ) sum [ j ] += data [ j ] ; else sum [ j ] += data [ j + <int> ] ; } sum [ i ] = data [ i ] ; } for ( i = <int> ; i < numRows ; i ++ ) { if ( max < sum [ i ] ) max = sum [ i ] ; } free ( sum ) ; free ( data ) ; printf ( <str> , max ) ; } int main ( ) { unsigned int numTestCases = <int> ; int i = <int> , j = <int> ; scanf ( <str> , & numTestCases ) ; fflush ( stdin ) ; for ( i = <int> ; i < numTestCases ; i ++ ) { AnalyseData ( ) ; numRows = <int> ; } }", "label": 2, "id": 6266}
{"input": "int main ( ) { int t , gcd , lcm , a , b , s , c , k , n1 , n2 , p ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a , & b ) ; n1 = a , n2 = b , k = <int> ; while ( k != <int> ) { s = a % b ; printf ( <str> , s ) ; if ( s == <int> ) { gcd = b ; k = <int> ; } else { c = b ; b = s ; a = c ; } } p = n1 * n2 ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , p ) ; t = t - <int> ; } return <int> ; }", "label": 1, "id": 6267}
{"input": "typedef long long int ll ; int GCD ( ll a , ll b ) { if ( b == <int> ) return a ; return GCD ( b , a % b ) ; } int LCM ( ll a , ll b ) { return b * a / GCD ( a , b ) ; } int main ( ) { long long int a , b ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , GCD ( a , b ) ) ; printf ( <str> , LCM ( a , b ) ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 6268}
{"input": "int main ( ) { long int t , n , i , j ; long long int r , c ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i <= n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; c ++ ; } for ( i = <int> ; i < n ; i ++ ) { r = a [ i ] ; for ( j = i + <int> ; j <= n ; j ++ ) { if ( r < a [ j ] ) { c ++ ; r = a [ j ] ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 2, "id": 6269}
{"input": "int main ( ) { long int T , N , i , temp ; long long int cost ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; int * A = ( int * ) calloc ( N , sizeof ( long int ) ) ; int min = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < min ) { min = temp ; } } cost = ( N - <int> ) * min ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 6270}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , j , max = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += a [ i - <int> ] [ j / <int> ] ; } } max = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] >= max ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 6271}
{"input": "int main ( ) { int t ; long long int a , b , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a * b ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a , m / a ) ; } }", "label": 0, "id": 6272}
{"input": "void main ( ) { int n , i , j , temp , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int ar [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) ar [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & temp ) ; ar [ i ] [ j ] = temp ; if ( ! j && ! i ) continue ; else if ( j == <int> ) ar [ i ] [ j ] += ar [ i - <int> ] [ j ] ; else if ( j == i ) ar [ i ] [ j ] += ar [ i - <int> ] [ j - <int> ] ; else ar [ i ] [ j ] += ( ar [ i - <int> ] [ j - <int> ] > ar [ i - <int> ] [ j ] ? ar [ i - <int> ] [ j - <int> ] : ar [ i - <int> ] [ j ] ) ; } } temp = ar [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) temp = ( temp > ar [ n - <int> ] [ i ] ? temp : ar [ n - <int> ] [ i ] ) ; printf ( <str> , temp ) ; } }", "label": 0, "id": 6273}
{"input": "int main ( void ) { long int t , n , num [ <int> ] , min , i , j , k , c ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { num [ j ] = <int> ; } for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & num [ j ] ) ; } min = num [ <int> ] ; c = n ; for ( k = <int> ; k < c ; k ++ ) { if ( num [ k ] < min ) min = num [ k ] ; c -- ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 6274}
{"input": "int main ( ) { int i = <int> , j = <int> , k = <int> , tc = <int> , <unk> = <int> , cost = <int> ; scanf ( <str> , & tc ) ; for ( i = <int> ; i < tc ; i ++ ) { scanf ( <str> , & <unk> ) ; int arr [ <unk> ] ; for ( j = <int> ; j < <unk> ; j ++ ) scanf ( <str> , & arr [ j ] ) ; for ( k = <int> ; k < ( <unk> - <int> ) ; k ++ ) { if ( arr [ k ] >= arr [ k + <int> ] ) cost = cost + arr [ k + <int> ] ; else { cost = cost + arr [ k ] ; arr [ k + <int> ] = arr [ k ] ; } } printf ( <str> , cost ) ; cost = <int> ; } return <int> ; }", "label": 1, "id": 6275}
{"input": "int main ( ) { int n , num , i , a [ <int> ] , count = <int> , k [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & num ) ; for ( i = <int> ; i < num ; i ++ ) { scanf ( <str> , & k [ i ] ) ; if ( a [ i ] > a [ i + <int> ] ) { count = count + a [ i + <int> ] ; printf ( <str> , count ) ; } else { count = count + a [ i ] ; printf ( <str> , count ) ; } } } return <int> ; }", "label": 3, "id": 6276}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n > <int> ) { int lines , i , largest , j ; int array [ <int> ] [ <int> ] ; scanf ( <str> , & lines ) ; scanf ( <str> , & array [ <int> ] [ <int> ] ) ; for ( i = <int> ; i <= lines ; i ++ ) { scanf ( <str> , & array [ i ] [ <int> ] ) ; array [ i ] [ <int> ] += array [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; array [ i ] [ j ] = ( array [ i - <int> ] [ j - <int> ] > array [ i - <int> ] [ j ] ) ? ( array [ i ] [ j ] + array [ i - <int> ] [ j - <int> ] ) : ( array [ i ] [ j ] + array [ i - <int> ] [ j ] ) ; } scanf ( <str> , & array [ i ] [ i ] ) ; array [ i ] [ i ] += array [ i - <int> ] [ i - <int> ] ; } largest = - <int> ; for ( i = <int> ; i <= lines ; i ++ ) { if ( array [ lines ] [ i ] > largest ) largest = array [ lines ] [ i ] ; } printf ( <str> , largest ) ; n -- ; } return <int> ; }", "label": 0, "id": 6277}
{"input": "int main ( ) { int t ; int a , b , gcd , keep , temp ; int small , big , remainder ; long long int product , lcm ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & a , & b ) ; product = ( a * b ) ; small = ( a < b ) ? a : b ; big = ( a > b ) ? a : b ; if ( big % small == <int> ) gcd = small ; else { remainder = ( big % small ) ; keep = small ; while ( remainder != <int> ) { temp = remainder ; remainder = keep % remainder ; keep = temp ; } gcd = keep ; } lcm = product / ( long long int ) gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 6278}
{"input": "int main ( ) { int t ; unsigned long int a , b , temp , lcm ; int r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; lcm = a * b ; if ( a < b ) { temp = a ; a = b ; b = temp ; } r = a % b ; while ( r != <int> ) { a = b ; b = r ; r = a % b ; } printf ( <str> , b ) ; printf ( <str> , lcm / b ) ; } return <int> ; }", "label": 0, "id": 6279}
{"input": "int main ( void ) { long long int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { long long int num ; scanf ( <str> , & num ) ; long long int ar [ num ] ; for ( i = <int> ; i < num ; i ++ ) scanf ( <str> , & ar [ i ] ) ; long int min = ar [ <int> ] ; for ( i = <int> ; i < num ; i ++ ) { if ( min > ar [ i ] ) min = ar [ i ] ; } printf ( <str> , min * ( num - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6280}
{"input": "int main ( ) { int t , a , b , min , max , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { min = a ; max = b ; } else { min = b ; max = a ; } for ( i = <int> ; i <= min ; i ++ ) if ( a % i == <int> && b % i == <int> ) gcd = i ; for ( i = max ; i <= a * b ; i ++ ) if ( i % a == <int> && i % b == <int> ) { lcm = i ; break ; } printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 6281}
{"input": "void gl ( int p , int q ) { int i , big ; ( p > q ) ? ( big = q ) : ( big = p ) ; for ( i = big ; i > <int> ; i -- ) { if ( ( p % i ) == <int> && ( q % i ) == <int> ) { printf ( <str> , i ) ; break ; } } printf ( <str> , ( p * q ) / i ) ; } int main ( ) { int t ; int i , big , p , q ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & q ) ; scanf ( <str> , & p ) ; gl ( p , q ) ; } return <int> ; }", "label": 1, "id": 6282}
{"input": "int main ( ) { int t , a , b , i , min , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; } else { min = a ; } for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6283}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] ; int n , i ; long min = <int> , res ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } res = min * ( n - <int> ) ; printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 6284}
{"input": "main ( ) { int test , i , a , b ; int gcd ( int a , int b ) ; scanf ( <str> , & test ) ; long unsigned int lcm [ test ] , hcf [ test ] ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & a , & b ) ; hcf [ i ] = gcd ( a , b ) ; lcm [ i ] = a * b / hcf [ i ] ; } for ( i = <int> ; i < test ; i ++ ) printf ( <str> , hcf [ i ] , lcm [ i ] ) ; } int gcd ( int x , int y ) { if ( x % y == <int> ) return y ; else return gcd ( y , x % y ) ; }", "label": 1, "id": 6285}
{"input": "int m , i , j , k , l , t , n , * p , * q , s , b [ <int> ] ; int z ( int a , int b ) { return a > b ? a : b ; } void f ( ) { p ++ , i ++ , k ++ ; if ( k == j ) k = <int> , j ++ , p -- ; q = p - <int> ; } int main ( ) { scanf ( <str> , & m ) ; while ( m -- ) { scanf ( <str> , & n ) ; for ( i = k = l = <int> , j = <int> , p = b ; i < ( n * n + n ) / <int> ; f ( ) ) { t = scanf ( <str> , & s ) ; l = z ( l , ( b [ i ] = s + ( ( <int> < i ) ? ( ( <int> < k ) ? ( ( k < j - <int> ) ? z ( * p , * q ) : * q ) : * p ) : <int> ) ) ) ; } printf ( <str> , l ) ; } }", "label": 0, "id": 6286}
{"input": "int inp ( ) { int val = <int> ; char c = getchar_unlocked ( ) ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) val = ( val << <int> ) + ( val << <int> ) + ( c - <char> ) , c = getchar_unlocked ( ) ; return val ; } int main ( ) { int t , n , i , ii , min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ii ) ; if ( ii < min ) min = ii ; } long long int r = ( long long int ) min * ( long long int ) ( n - <int> ) ; printf ( <str> , r ) ; } return <int> ; }", "label": 0, "id": 6287}
{"input": "int main ( ) { int i = <int> , j = <int> , k , m , n = <int> , p , a [ <int> ] [ <int> ] ; scanf ( <str> , & k ) ; while ( n < k ) { scanf ( <str> , & m ) ; for ( i = <int> ; i < m ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } p = m - <int> ; while ( p > <int> ) { j = <int> ; while ( j <= p - <int> ) { if ( a [ p ] [ j ] > a [ p ] [ j + <int> ] ) a [ p - <int> ] [ j ] = a [ p - <int> ] [ j ] + a [ p ] [ j ] ; else a [ p - <int> ] [ j ] = a [ p - <int> ] [ j ] + a [ p ] [ j + <int> ] ; j ++ ; } p -- ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; n ++ ; } return <int> ; }", "label": 0, "id": 6288}
{"input": "int main ( ) { int t [ <int> ] [ <int> ] , n , N , i , j ; scanf ( <str> , & N ) ; while ( N -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & t [ i ] [ j ] ) ; for ( i = ( n - <int> ) ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) t [ i ] [ j ] += t [ i + <int> ] [ j ] > t [ i + <int> ] [ j + <int> ] ? t [ i + <int> ] [ j ] : t [ i + <int> ] [ j + <int> ] ; printf ( <str> , t [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6289}
{"input": "int main ( void ) { int t , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; return <int> ; } }", "label": 1, "id": 6290}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { int min = ( a > b ) ? a : b ; while ( <int> ) { if ( min % a == <int> && min % b == <int> ) { return min ; } min ++ ; } } void main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , g , l ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( a , b ) ; printf ( <str> , g , l ) ; } }", "label": 2, "id": 6291}
{"input": "int main ( void ) { int t , a , b , c ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { c = <int> ; LOOP : for ( int i = b ; i > <int> ; i -- ) { if ( b % i == <int> && a % i == <int> ) { b = b / i ; a = a / i ; c = c * i ; goto LOOP ; } } } if ( a < b ) { c = <int> ; LOOP1 : for ( int i = a ; i > <int> ; i -- ) { if ( b % i == <int> && a % i == <int> ) { b = b / i ; a = a / i ; c = c * i ; goto LOOP1 ; } } } if ( a == b ) { printf ( <str> , a , a ) ; break ; } printf ( <str> , c , a * b / c ) ; } }", "label": 1, "id": 6292}
{"input": "int main ( ) { long long int i , a , b , r ; long long int l ; scanf ( <str> , & i ) ; while ( i -- ) { scanf ( <str> , & a , & b ) ; l = a * b ; do { r = a % b ; a = b ; b = r ; } while ( r != <int> ) ; printf ( <str> , a , l / a ) ; } return <int> ; }", "label": 0, "id": 6293}
{"input": "int hcf ( int a , int b ) { int i = <int> , p = <int> ; if ( a >= b ) { for ( ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) p *= i ; } return p ; } else { for ( ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) p *= i ; } return p ; } } int lcm ( int a , int b ) { int l = <int> , i = <int> ; while ( a != <int> || b != <int> ) { while ( a % i == <int> && b % i == <int> ) { a /= i ; b /= i ; l *= i ; } while ( a % i == <int> ) { a /= i ; l *= i ; } while ( b % i == <int> ) { b /= i ; l *= i ; } i ++ ; } return l ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; int l = lcm ( a , b ) ; int h = hcf ( a , b ) ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 2, "id": 6294}
{"input": "int mat [ <int> ] [ <int> ] ; int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } } int solve ( int x ) { int k , l ; if ( x == <int> ) { return mat [ <int> ] [ <int> ] ; } for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; }", "label": 0, "id": 6295}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int min , ans , i , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ans ) ; if ( ans < min ) { min = ans ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 6296}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { int numTests = <int> ; int m = <int> , n = <int> ; int <unk> = <int> ; long lcm = <int> ; scanf ( <str> , & numTests ) ; while ( numTests -- ) { scanf ( <str> , & m , & n ) ; <unk> = gcd ( m , n ) ; lcm = ( m * n ) / <unk> ; printf ( <str> , <unk> , lcm ) ; } return <int> ; }", "label": 1, "id": 6297}
{"input": "void main ( ) { int T , N , i , j , maxSum ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; int Triangle [ N ] [ N ] , SumTri [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & Triangle [ i ] [ j ] ) ; SumTri [ i ] [ j ] = <int> ; } SumTri [ <int> ] [ <int> ] = Triangle [ <int> ] [ <int> ] ; if ( N > <int> ) { SumTri [ <int> ] [ <int> ] = SumTri [ <int> ] [ <int> ] + Triangle [ <int> ] [ <int> ] ; SumTri [ <int> ] [ <int> ] = SumTri [ <int> ] [ <int> ] + Triangle [ <int> ] [ <int> ] ; } for ( i = <int> ; i < N ; i ++ ) { SumTri [ i ] [ <int> ] = SumTri [ i - <int> ] [ <int> ] + Triangle [ i ] [ <int> ] ; SumTri [ i ] [ i ] = SumTri [ i - <int> ] [ i - <int> ] + Triangle [ i ] [ i ] ; } for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( Triangle [ i - <int> ] [ j ] > Triangle [ i - <int> ] [ j - <int> ] ) SumTri [ i ] [ j ] = SumTri [ i - <int> ] [ j ] + Triangle [ i ] ; else SumTri [ i ] [ j ] = SumTri [ i - <int> ] [ j - <int> ] + Triangle [ i ] [ j ] ; } maxSum = SumTri [ N - <int> ] [ <int> ] ; for ( i = <int> ; i <= N ; i ++ ) if ( SumTri [ N - <int> ] [ i ] > maxSum ) maxSum = SumTri [ N - <int> ] [ i ] ; printf ( <str> , maxSum ) ; } }", "label": 1, "id": 6298}
{"input": "int gcd ( int a , int b ) { int g ; if ( a > b ) { if ( a % b == <int> ) g = b ; else g = gcd ( b , a % b ) ; } else { if ( b % a == <int> ) g = a ; else g = gcd ( a , b % a ) ; } return g ; } int least ( int a , int b ) { int l , g ; g = gcd ( a , b ) ; l = ( a / g * b / g ) ; return l ; } int main ( ) { int t , i , j , a , b ; scanf ( <str> , & t ) ; int hcf [ t ] , lcm [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; hcf [ i ] = gcd ( a , b ) ; lcm [ i ] = least ( a , b ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , hcf [ i ] , lcm [ i ] ) ; } return <int> ; }", "label": 1, "id": 6299}
{"input": "int gcd ( long int , long int ) ; void main ( ) { int n , i , g , l ; long int x , y ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x , & y ) ; g = gcd ( x , y ) ; l = ( ( x * y ) / g ) ; printf ( <str> , g , l ) ; } } int gcd ( long int m , long int n ) { if ( n == <int> ) return m ; else return gcd ( n , m % n ) ; }", "label": 1, "id": 6300}
{"input": "int main ( ) { long long int * a , n , sum , min , ans [ <int> ] ; int i , t , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; a = ( int * ) malloc ( n * sizeof ( long long int ) ) ; scanf ( <str> , & a [ <int> ] ) ; min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ j ] < min ) min = a [ j ] ; } ans [ i ] = ( n - <int> ) * min ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 1, "id": 6301}
{"input": "int main ( ) { int i , j , t , n , x , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } else { a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6302}
{"input": "int main ( ) { int t , n , i , a [ <int> ] , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; c = n ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) break ; } if ( j == n ) c ++ ; } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 6303}
{"input": "int main ( void ) { int n , i , t , j , max ; int a [ n ] [ n ] ; scanf ( <str> , t ) ; while ( t -- ) { max = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , a [ i ] [ j ] ) ; if ( i >= <int> ) { max = a [ i - <int> ] [ j ] ; if ( j >= <int> ) { if ( a [ i - <int> ] [ j - <int> ] > max ) max = a [ i - <int> ] [ j - <int> ] ; } } a [ i ] [ j ] += max ; } max = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ n - <int> ] [ i ] ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 6304}
{"input": "int max ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , i , j ; int ar [ <int> ] ; int row [ <int> ] ; int cases ; int size ; scanf ( <str> , & cases ) ; for ( t = <int> ; t < cases ; t ++ ) { ar [ <int> ] = <int> ; scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & row [ j ] ) ; for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) row [ j ] += ar [ j ] ; else if ( j == i ) row [ j ] += ar [ j - <int> ] ; else row [ j ] += max ( ar [ j ] , ar [ j - <int> ] ) ; } for ( j = <int> ; j <= i ; j ++ ) ar [ j ] = row [ j ] ; } j = ar [ <int> ] ; for ( i = <int> ; i < size ; i ++ ) j = max ( j , ar [ i ] ) ; printf ( <str> , j ) ; } return <int> ; }", "label": 0, "id": 6305}
{"input": "int main ( ) { long int t , n , i , ar [ <int> ] , min , cost ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & ar [ i ] ) ; min = ar [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( ar [ i ] < min ) min = ar [ i ] ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; t -- ; } return <int> ; }", "label": 0, "id": 6306}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , total ; long long int j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & j ) ; if ( i == <int> || j < total ) total = j ; } printf ( <str> , total * ( n - <int> ) ) ; } return ( <int> ) ; }", "label": 1, "id": 6307}
{"input": "int main ( void ) { int n ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { int k ; scanf ( <str> , & k ) ; int a [ k ] , count = k ; for ( int j = <int> ; j < k ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( int j = <int> ; j < k - <int> ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) count ++ ; } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 6308}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t , n1 , n2 , lcm , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; int min , max ; min = n1 > n2 ? n2 : n1 ; max = n1 > n2 ? n1 : n2 ; g = gcd ( min , max ) ; lcm = ( n1 * n2 ) / g ; printf ( <str> , g , lcm ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == <int> ) return b ; return gcd ( b % a , a ) ; }", "label": 1, "id": 6309}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] , T , rows = <int> , i , j ; scanf ( <str> , & T ) ; for ( ; T > <int> ; T -- ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = rows - <int> ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { if ( arr [ i ] [ j ] >= arr [ i ] [ j - <int> ] ) arr [ i - <int> ] [ j - <int> ] = arr [ i - <int> ] [ j - <int> ] + arr [ i ] [ j ] ; else arr [ i - <int> ] [ j - <int> ] = arr [ i - <int> ] [ j - <int> ] + arr [ i ] [ j - <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6310}
{"input": "int input ( ) { int a = <int> ; char c ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) { a = a * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return a ; } int main ( ) { int t , n , i , j , k , l ; int a [ <int> ] [ <int> ] ; t = input ( ) ; while ( t -- ) { n = input ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = input ( ) ; } for ( k = n - <int> ; k >= <int> ; k -- ) for ( l = <int> ; l <= i ; l ++ ) { a [ k ] [ l ] += ( ( a [ k + <int> ] [ l ] > a [ k + <int> ] [ l + <int> ] ) ? a [ k + <int> ] [ l ] : a [ k + <int> ] [ l + <int> ] ) ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6311}
{"input": "int sum1 = <int> ; int arr [ <int> ] [ <int> ] ; rec ( int i , int j , int sum , int row ) { if ( i == row - <int> ) { sum = sum + arr [ i ] [ j ] ; if ( sum1 < sum ) sum1 = sum ; return ; } else { while ( j <= i ) { sum = sum + arr [ i ] [ j ] ; rec ( i + <int> , j , sum , row ) ; rec ( i + <int> , j + <int> , sum , row ) ; sum = sum - arr [ i ] [ j ] ; j ++ ; if ( j >= <int> ) return ; } } } int main ( ) { int n , row ; int i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } rec ( <int> , <int> , <int> , row ) ; printf ( <str> , sum1 ) ; } return <int> ; }", "label": 2, "id": 6312}
{"input": "int a [ <int> ] ; void merge ( int a [ ] , int st , int mid , int end ) { int i , j , k ; int n = mid - st + <int> ; int m = end - mid ; int l [ n ] , r [ m ] ; for ( i = <int> ; i < n ; i ++ ) l [ i ] = a [ st + i ] ; for ( j = <int> ; j < m ; j ++ ) r [ j ] = a [ mid + <int> + j ] ; i = <int> ; j = <int> ; k = st ; while ( i < n && j < m ) { if ( l [ i ] < r [ j ] ) { a [ k ] = l [ i ] ; i ++ ; k ++ ; } else { a [ k ] = r [ j ] ; j ++ ; k ++ ; } } while ( i < n ) { a [ k ] = l [ i ] ; k ++ ; i ++ ; } while ( j < m ) { a [ k ] = r [ j ] ; k ++ ; j ++ ; } } void sort ( int a [ ] , int st , int end ) { int mid ; if ( st < end ) { mid = st + ( ( end - st ) / <int> ) ; sort ( a , st , mid ) ; sort ( a , mid + <int> , end ) ; merge ( a , st , mid , end ) ; } } int main ( ) { int t , i , n , min ; long long int cost ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } sort ( a , <int> , n - <int> ) ; cost = a [ <int> ] * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 6313}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n ) { int z = <int> , t ; scanf ( <str> , & t ) ; int a , sum = <int> ; while ( z <= t ) { for ( int i = <int> ; i <= z ; i ++ ) { scanf ( <str> , & a ) ; if ( ( i == <int> ) && ( z != t ) ) sum += a ; if ( ( z == t ) && ( i == <int> ) ) sum += a ; } z ++ ; } printf ( <str> , sum ) ; n -- ; } return <int> ; }", "label": 1, "id": 6314}
{"input": "int main ( ) { int t , n , i , sum = <int> ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) sum = sum * a [ i + <int> ] ; else sum = sum * a [ i ] ; } printf ( <str> , sum ) ; sum = <int> ; t -- ; } }", "label": 1, "id": 6315}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , i , j ; scanf ( <str> , & n ) ; long int arr [ n ] , count = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { if ( arr [ j ] <= arr [ j + <int> ] ) count ++ ; else break ; } } printf ( <str> , count + n ) ; } return <int> ; }", "label": 0, "id": 6316}
{"input": "int max ( int x , int y ) ; int main ( int argc , char * argv [ ] ) { int a [ <int> ] [ <int> ] , i , j , n , t , maximum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < n ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; } a [ i ] [ j + <int> ] = <int> ; } maximum = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; ++ i ) { if ( a [ n - <int> ] [ i ] > maximum ) maximum = a [ n - <int> ] [ i ] ; } printf ( <str> , maximum ) ; } return <int> ; } int max ( int x , int y ) { if ( x > y ) return x ; else return y ; }", "label": 1, "id": 6317}
{"input": "int main ( ) { long t , n , min , x , c , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; if ( x < min ) { min = x ; } } c = min * ( n - <int> ) ; printf ( <str> , c ) ; t -- ; } return <int> ; }", "label": 2, "id": 6318}
{"input": "int main ( ) { int t ; long int a , b , gcd , lcm , num , den , rem ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * b / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 6319}
{"input": "int main ( ) { int t , n1 , n2 , GCD = <int> , LCM , i , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; for ( j = <int> ; j <= n1 ; j ++ ) { if ( n1 % j == <int> && n2 % j == <int> ) { GCD = j ; continue ; } } printf ( <str> , GCD ) ; for ( k = n1 || n2 ; k < ( n1 * n2 ) ; k ++ ) { if ( k % n1 == <int> && k % n2 == <int> ) { LCM = k ; break ; } else { LCM = n1 * n2 ; } } printf ( <str> , LCM ) ; } return <int> ; }", "label": 2, "id": 6320}
{"input": "int main ( ) { int t ; long long int i , a , b , p , gcd ; scanf ( <str> , & t ) ; if ( <int> <= t <= <int> ) { while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( <int> <= a <= <int> && <int> <= b <= <int> ) { if ( b >= a ) { int p = a ; a = b ; b = p ; } for ( i = <int> ; i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { gcd = i ; } } } printf ( <str> , gcd ) ; printf ( <str> , a * b / gcd ) ; } } }", "label": 2, "id": 6321}
{"input": "int find_path ( int a [ ] [ <int> ] , int p , int q , int n , int div [ ] [ <int> ] ) { int val1 , val2 ; if ( p > n ) return ( <int> ) ; if ( div [ p ] [ q ] != <int> ) return ( div [ p ] [ q ] ) ; val1 = find_path ( a , p + <int> , q , n , div ) ; div [ p + <int> ] [ q ] = <int> ; val2 = find_path ( a , p + <int> , q + <int> , n , div ) ; div [ p + <int> ] [ q + <int> ] = <int> ; if ( val1 > a [ p ] [ q ] ) { return ( a [ p ] [ q ] + val1 ) ; div [ p ] [ q ] = a [ p ] [ q ] + val1 ; } else { return ( a [ p ] [ q ] + val2 ) ; div [ p ] [ q ] = a [ p ] [ q ] + val2 ; } } int main ( ) { int i = <int> , j = <int> , k , num , rowmax , val , count , m = <int> ; int tri [ <int> ] [ <int> ] , div [ <int> ] [ <int> ] ; int result [ <int> ] ; scanf ( <str> , & num ) ; while ( m < num ) { for ( k = <int> ; k < <int> ; k ++ ) { for ( count = <int> ; count < <int> ; count ++ ) { div [ k ] [ count ] = <int> ; } } scanf ( <str> , & rowmax ) ; for ( k = <int> ; k < rowmax ; k ++ ) { for ( count = <int> ; count <= k ; count ++ ) { scanf ( <str> , & tri [ k ] [ count ] ) ; } } val = find_path ( tri , i , j , k , div ) ; printf ( <str> , val ) ; m ++ ; } return ( <int> ) ; }", "label": 3, "id": 6322}
{"input": "void main ( ) { int N ; int T ; int t [ <int> ] ; int * a ; int i ; int j ; scanf ( <str> , & T ) ; int c = <int> ; int k = <int> ; while ( T > <int> ) { scanf ( <str> , & N ) ; a = ( int * ) malloc ( ( N + <int> ) * sizeof ( int ) ) ; c = <int> ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int length = <int> ; for ( i = <int> ; i < N ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) { length ++ ; if ( i + <int> == N ) { c += ( length ) * ( length - <int> ) / <int> ; } } else { length ++ ; c += ( length ) * ( length - <int> ) / <int> ; length = <int> ; } } c += N ; printf ( <str> , c ) ; T -- ; } }", "label": 1, "id": 6323}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int sum ( int * * A , int i , int j , int * * MEMO , int n ) { if ( i == n - <int> ) { MEMO [ i ] [ j ] = A [ i ] [ j ] ; return MEMO [ i ] [ j ] ; } if ( MEMO [ i + <int> ] [ j ] == <int> && MEMO [ i + <int> ] [ j + <int> ] == <int> ) MEMO [ i ] [ j ] = A [ i ] [ j ] + max ( sum ( A , i + <int> , j , MEMO , n ) , sum ( A , i + <int> , j + <int> , MEMO , n ) ) ; if ( MEMO [ i + <int> ] [ j ] != <int> && MEMO [ i + <int> ] [ j + <int> ] != <int> ) MEMO [ i ] [ j ] = max ( A [ i ] [ j ] + MEMO [ i + <int> ] [ j ] , A [ i ] [ j ] + MEMO [ i + <int> ] [ j + <int> ] ) ; if ( MEMO [ i + <int> ] [ j ] == <int> ) MEMO [ i ] [ j ] = A [ i ] [ j ] + max ( sum ( A , i + <int> , j , MEMO , n ) , MEMO [ i + <int> ] [ j + <int> ] ) ; if ( MEMO [ i + <int> ] [ j + <int> ] == <int> ) MEMO [ i ] [ j ] = A [ i ] [ j ] + max ( sum ( A , i + <int> , j + <int> , MEMO , n ) , MEMO [ i + <int> ] [ j + <int> ] ) ; return MEMO [ i ] [ j ] ; } int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int n ; scanf ( <str> , & n ) ; int size = n ; int * * A = ( int * * ) malloc ( sizeof ( int ) * ( n ) ) ; int * * MEMO = ( int * * ) malloc ( sizeof ( int ) * ( n ) ) ; int i = <int> , j = <int> ; int level = <int> ; for ( i = <int> ; i < size ; i ++ ) { A [ i ] = ( int * ) malloc ( sizeof ( int ) * ( n ) ) ; MEMO [ i ] = ( int * ) malloc ( sizeof ( int ) * ( n ) ) ; memset ( A [ i ] , <int> , sizeof ( A [ i ] ) ) ; memset ( MEMO [ i ] , <int> , sizeof ( MEMO [ i ] ) ) ; } for ( i = <int> ; i < n ; i ++ ) { level ++ ; for ( j = <int> ; j < level ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } printf ( <str> , sum ( A , <int> , <int> , MEMO , size ) ) ; } }", "label": 1, "id": 6324}
{"input": "void insert ( int , int , int ) ; struct node { int info , pos , opos ; struct node * next ; } * start [ <int> ] ; void main ( ) { int a = <int> , b , c , i , k , row , j , sum , t , count ; long max = <int> , max1 = <int> ; struct node * r , * s ; scanf ( <str> , & t ) ; while ( count <= <int> ) { max = <int> ; max1 = <int> ; scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i + <int> ; j ++ ) { scanf ( <str> , & a ) ; insert ( a , j , i ) ; } } for ( k = <int> ; k < row ; k ++ ) { r = start [ k ] ; i = <int> ; while ( r != NULL ) { r -> pos = i ; r = r -> next ; i ++ ; } } for ( i = <int> ; i < row ; i ++ ) { r = start [ i ] ; sum = <int> ; for ( j = i ; j >= <int> ; j -- ) { s = start [ j ] ; if ( j == i ) { sum = sum + r -> info ; continue ; } else { a = r -> opos ; b = r -> opos - <int> ; while ( s -> opos != a && s -> opos != b ) { s = s -> next ; } sum = sum + s -> info ; r = s ; } } r = start [ i ] ; for ( j = i + <int> ; j < row ; j ++ ) { s = start [ j ] ; if ( j > i ) { a = r -> opos ; b = r -> opos + <int> ; while ( s -> opos != a && s -> opos != b ) { s = s -> next ; } sum = sum + s -> info ; r = s ; } } if ( sum > max1 ) { max1 = sum ; max = max1 + start [ <int> ] -> info ; } } printf ( <str> , max ) ; count ++ ; } } void insert ( int a , int b , int c ) { struct node * temp , * r , * s ; temp = ( struct node * ) malloc ( sizeof ( struct node ) ) ; temp -> next = NULL ; temp -> info = a ; temp -> opos = b ; if ( start [ c ] == NULL ) { start [ c ] = temp ; } else { r = start [ c ] ; while ( a <= r -> info && r != NULL ) { s = r ; r = r -> next ; } if ( r == start [ c ] ) { temp -> next = start [ c ] ; start [ c ] = temp ; } else if ( s -> next == NULL ) s -> next = temp ; else { s -> next = temp ; temp -> next = r ; } } }", "label": 3, "id": 6325}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j , k , r = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; long long int z = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { j = i ; r = <int> ; while ( a [ j + <int> ] >= a [ j ] && ( j + <int> ) < n ) { r ++ ; j ++ ; } for ( k = <int> ; k <= r ; k ++ ) { z = z + k ; } i = j ; } printf ( <str> , z ) ; } }", "label": 0, "id": 6326}
{"input": "int main ( void ) { int n , i , j , t , a [ <int> ] , min ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { min = <int> ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( min > a [ j ] ) min = a [ j ] ; } printf ( <str> , min * ( t - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6327}
{"input": "static char buf [ BUF_SIZE ] ; static int pos = <int> ; static int len = <int> ; int A [ <int> ] [ <int> ] ; int isSpaceChar ( char c ) { return c == <char> || c == <char> || c == <char> || c == <char> || c == - <int> ; } char readC ( ) { if ( pos >= len ) { len = read ( <int> , buf , BUF_SIZE ) ; if ( len < <int> ) return - <int> ; pos = <int> ; } return buf [ pos ++ ] ; } int readInt ( ) { int c , ve = <int> , i = <int> ; do { c = readC ( ) ; } while ( isSpaceChar ( c ) ) ; if ( c == <char> ) { ve = - <int> ; c = readC ( ) ; } do { i = ( i << <int> + i << <int> ) + c - <char> ; c = readC ( ) ; } while ( ! isSpaceChar ( c ) ) ; return i * ve ; } int main ( ) { int T , n , i , j ; T = readInt ( ) ; while ( T -- ) { n = readInt ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] = readInt ( ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] += MAX ( A [ i + <int> ] [ j ] , A [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 6328}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; long int min ; min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6329}
{"input": "int main ( ) { int n ; int a , b , max , min , temp ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; a > b ? ( max = a , min = b ) : ( max = b , min = a ) ; while ( min != <int> ) { temp = min ; min = max % min ; max = temp ; } min = a * b / max ; printf ( <str> , max , min ) ; } return <int> ; }", "label": 1, "id": 6330}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , h , l ; scanf ( <str> , & a , & b ) ; h = gcd ( a , b ) ; l = ( a * b ) / h ; printf ( <str> , h , l ) ; } } long int gcd ( long int x , long int y ) { if ( x % y == <int> ) { return y ; } else { return gcd ( y , x % y ) ; } }", "label": 0, "id": 6331}
{"input": "int gcd ( int , int ) ; int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a * b != <int> ) { int c = gcd ( a , b ) ; int LCM = ( a * b ) / c ; printf ( <str> , c , LCM ) ; } } } int gcd ( int a , int b ) { if ( b == <int> ) return a ; gcd ( b , a % b ) ; }", "label": 1, "id": 6332}
{"input": "int main ( ) { int num , max = <int> , i , j , n ; scanf ( <str> , & num ) ; while ( num -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } a [ <int> ] [ <int> ] += a [ <int> ] [ <int> ] ; a [ <int> ] [ <int> ] += a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { j = <int> ; a [ i + <int> ] [ j ] += a [ i ] [ j ] ; for ( j = <int> ; j < i ; j ++ ) ; { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i + <int> ] [ j + <int> ] += a [ i ] [ j ] ; else a [ i + <int> ] [ j + <int> ] += a [ i ] [ j + <int> ] ; } a [ i + <int> ] [ j + <int> ] += a [ i ] [ j ] ; } max = <int> ; for ( j = <int> , i = n - <int> ; j < n - <int> ; j ++ ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 6333}
{"input": "int main ( ) { int t , i , j , n ; scanf ( <str> , & n ) ; while ( n ) { scanf ( <str> , & t ) ; int a [ t ] [ t ] ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; n ++ ; } return <int> ; }", "label": 2, "id": 6334}
{"input": "int main ( ) { int t , T ; scanf ( <str> , & T ) ; for ( t = <int> ; t < T ; t ++ ) { int N , i , j ; scanf ( <str> , & N ) ; int dp [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & dp [ i ] [ j ] ) ; for ( i = N - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { dp [ i ] [ j ] += ( dp [ i + <int> ] [ j ] > dp [ i + <int> ] [ j + <int> ] ? dp [ i + <int> ] [ j ] : dp [ i + <int> ] [ j + <int> ] ) ; } printf ( <str> , dp [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6335}
{"input": "int main ( int argc , char * argv [ ] ) { int t ; scanf ( <str> , & t ) ; int i ; for ( i = <int> ; i < t ; i ++ ) { int n , min = <int> ; scanf ( <str> , & n ) ; int j , arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( min > arr [ j ] ) min = arr [ j ] ; } printf ( <str> , ( n - <int> ) * min ) ; } return <int> ; }", "label": 1, "id": 6336}
{"input": "int main ( ) { int t , n ; int val , temp , cost , count ; scanf ( <str> , & t ) ; while ( t -- ) { count = <int> ; cost = <int> ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & temp ) ; if ( count == <int> ) { if ( val >= temp ) { cost += temp ; val = temp ; } else { cost += val ; } count = <int> ; } else if ( count == <int> ) { val = temp ; count += <int> ; } } printf ( <str> , cost ) ; } }", "label": 1, "id": 6337}
{"input": "int main ( ) { int t ; long long a , b , i , min , s ; scanf ( <str> , & t ) ; while ( t ) { t -- ; scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; } else { min = a ; } s = <int> ; for ( i = min ; i >= <int> ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { s = a / i ; break ; } } printf ( <str> , s , ( a * b ) / s ) ; } return <int> ; }", "label": 2, "id": 6338}
{"input": "int main ( ) { int i , j , k , t , a ; long long int n , sum ; int arr [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } a = arr [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( a > arr [ k ] ) { a = arr [ k ] ; } } sum = a * ( n - <int> ) ; printf ( <str> , sum ) ; } }", "label": 0, "id": 6339}
{"input": "int main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int max = <int> , r , j , k , a [ <int> ] [ <int> ] ; scanf ( <str> , & r ) ; for ( j = <int> ; j < r ; j ++ ) for ( k = <int> ; k < j + <int> ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; for ( j = <int> ; j < r ; j ++ ) a [ j ] [ <int> ] += a [ j - <int> ] [ <int> ] ; for ( j = <int> , k = <int> ; j < r ; j ++ , k ++ ) a [ j ] [ k ] = a [ j ] [ k ] + a [ j - <int> ] [ k - <int> ] ; for ( j = <int> ; j < r ; j ++ ) { for ( k = <int> ; k < j ; k ++ ) { if ( a [ j - <int> ] [ k ] > a [ j - <int> ] [ k - <int> ] ) a [ j ] [ k ] += a [ j - <int> ] [ k ] ; else a [ j ] [ k ] += a [ j - <int> ] [ k - <int> ] ; } } for ( j = <int> ; j < r ; j ++ ) { if ( a [ r - <int> ] [ j ] > max ) max = a [ r - <int> ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6340}
{"input": "int main ( ) { int i , T ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { int A , B , H , L ; scanf ( <str> , & A , & B ) ; { for ( H = A < B ? A : B ; H >= <int> ; H -- ) if ( A % H == <int> && B % H == <int> ) break ; } { for ( L = A > B ? A : B ; L >= <int> ; L ++ ) if ( L % A == <int> && L % B == <int> ) break ; } printf ( <str> , H , L ) ; } return <int> ; }", "label": 2, "id": 6341}
{"input": "int main ( ) { int i , j ; int n ; scanf ( <str> , & n ) ; int * * a ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; int * size ; size = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; ++ i ) { scanf ( <str> , & size [ i ] ) ; a [ i ] = ( int * ) malloc ( size [ i ] * sizeof ( int ) ) ; for ( j = <int> ; j < size [ i ] ; ++ j ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } int * count ; count = ( int * ) calloc ( n , sizeof ( int ) ) ; int * * b ; b = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; ++ i ) { b [ i ] = ( int * ) calloc ( size [ i ] , sizeof ( int ) ) ; } for ( i = <int> ; i < n ; ++ i ) { b [ i ] [ <int> ] = <int> ; for ( j = <int> ; j < size [ i ] ; ++ j ) { if ( a [ i ] [ j ] >= a [ i ] [ j - <int> ] ) { b [ i ] [ j ] = b [ i ] [ j - <int> ] + <int> ; } else b [ i ] [ j ] = <int> ; } for ( j = <int> ; j < size [ i ] ; ++ j ) { count [ i ] += b [ i ] [ j ] ; } printf ( <str> , count [ i ] ) ; } return <int> ; }", "label": 0, "id": 6342}
{"input": "short buf [ SIZE ] [ SIZE ] ; int main ( int argc , char const * argv [ ] ) { int n , t , max , i , j ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & t ) ; buf [ <int> ] [ <int> ] = buf [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i <= t ; ++ i ) { buf [ i ] [ <int> ] = <int> ; for ( j = <int> ; j <= i ; ++ j ) { scanf ( <str> , & ( buf [ i ] [ j ] ) ) ; buf [ i ] [ j ] += MAX ( buf [ i - <int> ] [ j - <int> ] , buf [ i - <int> ] [ j ] ) ; } } max = <int> ; for ( i = <int> ; i <= t ; ++ i ) { max = MAX ( max , buf [ t ] [ i ] ) ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6343}
{"input": "int main ( void ) { int t , j ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { int i , n , a [ <int> ] = { <int> } , cnt = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { cnt ++ ; } else { continue ; } } cnt = cnt + n ; printf ( <str> , cnt ) ; } return <int> ; }", "label": 3, "id": 6344}
{"input": "int main ( ) { int t , n , a [ <int> ] , sum = <int> , i , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; m = ( n * ( n + <int> ) ) / <int> ; for ( i = <int> ; i < m ; i ++ ) { scanf ( <str> , & a [ i ] ) ; sum += a [ i ] ; } printf ( <str> , sum / <int> ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 6345}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int i , j , r , t ; scanf ( <str> , & t ) ; scanf ( <str> , & r ) ; for ( j = <int> ; j <= t ; j ++ ) { for ( i = <int> ; i <= r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = r ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ) arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j ] ; else arr [ i - <int> ] [ j ] = arr [ i - <int> ] [ j ] + arr [ i ] [ j + <int> ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 2, "id": 6346}
{"input": "int main ( ) { int n , a , b , t ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; t = a * b ; int c ; while ( a != <int> ) { c = a ; a = b % a ; b = c ; } printf ( <str> , b , t / b ) ; } return <int> ; }", "label": 1, "id": 6347}
{"input": "int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = max ( a [ i ] [ j ] + a [ i + <int> ] [ j ] , a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6348}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int l , b , m , lcm , hcf ; scanf ( <str> , & b , & l ) ; for ( m = b ; m >= b || m >= l ; m ++ ) { if ( m % b == <int> && m % l == <int> ) { lcm = m ; break ; } } for ( m = <int> ; m <= b || m <= l ; ++ m ) { if ( l % m == <int> && b % m == <int> ) hcf = m ; } printf ( <str> , hcf , lcm ) ; t -- ; } return <int> ; }", "label": 2, "id": 6349}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , temp ; scanf ( <str> , & n ) ; int a [ n ] ; for ( int i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; int min = a [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6350}
{"input": "int main ( ) { int T , A , B , i , j , LCM , GCD , s ; scanf ( <str> , & T ) ; while ( T > <int> ) { s = <int> ; scanf ( <str> , & A , & B ) ; for ( i = <int> ; i <= B ; i ++ ) for ( j = <int> ; j <= A ; j ++ ) if ( A * i == B * j && s == <int> ) { LCM = A * i ; s ++ ; } if ( A % B != <int> && B % A != <int> ) GCD = <int> ; else { for ( i = <int> ; i < <int> ; i ++ ) if ( A % i == <int> && B % i == <int> ) GCD = i ; } printf ( <str> , GCD , LCM ) ; T -- ; } return <int> ; }", "label": 2, "id": 6351}
{"input": "int main ( ) { int a , b , min , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; min = ( a > b ) ? a : b ; for ( i = min ; i >= <int> ; -- i ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i ) ; break ; } } j = ( a * b ) / i ; printf ( <str> , j ) ; } }", "label": 2, "id": 6352}
{"input": "int m , gcd ; int fun1 ( int , int ) ; int fun1 ( int r , int A ) { m = A % r ; if ( m == <int> ) gcd = r ; else fun1 ( m , r ) ; } int main ( ) { int r , T , A , B , lcm ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A < B ) { r = B % A ; if ( r == <int> ) gcd = A ; else fun1 ( r , A ) ; } else { r = A % B ; if ( r == <int> ) gcd = B ; else fun1 ( r , B ) ; } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6353}
{"input": "int main ( ) { int test ; long unsigned gcd , lcm , a , b ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & a , & b ) ; lcm = a * b ; gcd = ( ( a * b ) / lcm ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6354}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] , s = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { s ++ ; j = i ; for ( ; j < n - <int> ; j ++ ) { if ( a [ j ] <= a [ j + <int> ] ) s ++ ; else break ; } } printf ( <str> , s + <int> ) ; } }", "label": 0, "id": 6355}
{"input": "int main ( ) { long int N , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & N ) ; long int A [ N ] , min , i ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } min = A [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( A [ i ] < min ) { min = A [ i ] ; } } printf ( <str> , min * ( N - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6356}
{"input": "int main ( ) { int t ; int <unk> ( int , int ) ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , i , gcd = <int> , lcm ; scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd *= i ; } lcm = <unk> ( a , b ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; } int <unk> ( int a , int b ) { if ( a > b ) { int c = a ; while ( <int> ) { if ( a % b == <int> ) return a ; else a += c ; } } else { int c = b ; while ( <int> ) { if ( b % a == <int> ) return b ; else b += c ; } } }", "label": 2, "id": 6357}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int b [ t ] ; int row ; int n ; int x , y ; int i , j , k ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & row ) ; n = ( row * ( row + <int> ) ) / <int> ; int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = row - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k < j ; k ++ ) { x = a [ ( j * j + j + <int> * k ) / <int> ] + a [ ( j * j - j + <int> * k ) / <int> ] ; y = a [ ( j * j + j + <int> + <int> * k ) / <int> ] + a [ ( j * j - j + <int> * k ) / <int> ] ; if ( x > y ) { a [ ( j * j - j + <int> * k ) / <int> ] = x ; } else { a [ ( j * j - j + <int> * k ) / <int> ] = y ; } } } b [ i ] = a [ <int> ] ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , b [ i ] ) ; } return <int> ; }", "label": 0, "id": 6358}
{"input": "int n , buff [ <int> ] , cache [ <int> ] ; int main ( ) { int i , j , t ; t = in ( ) ; while ( t -- ) { n = in ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) buff ( i , j ) = in ( ) ; for ( i = <int> ; i < <int> ; i ++ ) cache [ i ] = - <int> ; printf ( <str> , sum ( <int> , <int> ) ) ; } return <int> ; } int in ( ) { int a = <int> ; char c ; while ( ( c = getchar ( ) ) < <char> || c > <char> ) ; a = ( a << <int> ) + ( a << <int> ) + ( c - <char> ) ; while ( ( c = getchar ( ) ) >= <char> && c <= <char> ) a = ( a << <int> ) + ( a << <int> ) + ( c - <char> ) ; return a ; } int sum ( int i , int j ) { int a , b ; if ( i == n ) return buff ( i , j ) ; if ( cache ( i , j ) != - <int> ) return cache ( i , j ) ; a = sum ( i + <int> , j ) ; b = sum ( i + <int> , j + <int> ) ; cache ( i , j ) = buff ( i , j ) + max ( a , b ) ; return cache ( i , j ) ; }", "label": 1, "id": 6359}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , y , b , i , j , c , p = <int> , sum = <int> , dum = <int> , t ; scanf ( <str> , & t ) ; for ( y = <int> ; y <= t ; y ++ ) { sum = <int> , dum = <int> ; scanf ( <str> , & b ) ; for ( i = <int> ; i < b ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < b ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , a [ i ] [ j ] ) ; printf ( <str> ) ; } for ( i = <int> ; i < b ; i ++ ) { for ( j = <int> ; j < b ; j ++ ) { if ( a [ i ] [ p ] < a [ i ] [ p + <int> ] ) { sum = sum + a [ i ] [ p + <int> ] ; p ++ ; goto pp ; } else { sum = sum + a [ i ] [ p ] ; goto pp ; } } pp : printf ( <str> ) ; } printf ( <str> ) ; for ( i = <int> ; i < b ; i ++ ) { for ( j = <int> ; j < b ; j ++ ) { if ( a [ i ] [ p ] > a [ i ] [ p + <int> ] ) { dum = dum + a [ i ] [ p ] ; goto dd ; } else { dum = dum + a [ i ] [ p + <int> ] ; p ++ ; goto dd ; } } dd : printf ( <str> ) ; } printf ( <str> ) ; if ( sum >= dum ) printf ( <str> , sum + a [ <int> ] [ <int> ] ) ; else printf ( <str> , dum + a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 6360}
{"input": "int gcd ( int , int ) ; int main ( ) { long long int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long long int c = gcd ( a , b ) ; long long int LCM = ( a * b ) / c ; printf ( <str> , c , LCM ) ; } } int gcd ( int a , int b ) { if ( b == <int> ) return a ; gcd ( b , a % b ) ; }", "label": 0, "id": 6361}
{"input": "int main ( ) { int t , i , min , n ; long int c ; scanf ( <str> , & t ) ; while ( t > <int> ) { c = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } c = ( n - <int> ) * min ; printf ( <str> , c ) ; t -- ; } return <int> ; }", "label": 0, "id": 6362}
{"input": "int main ( ) { int a , b , i , gcd = <int> , l = <int> , n ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } l = ( a * b ) / gcd ; printf ( <str> , gcd , l ) ; } }", "label": 1, "id": 6363}
{"input": "int fastInput ( ) { int val = <int> ; char c = getchar_unlocked ( ) ; while ( c < <int> ) c = getchar_unlocked ( ) ; while ( c > <int> ) val = ( val << <int> ) + ( val << <int> ) + ( c - <char> ) , c = getchar_unlocked ( ) ; return val ; } int main ( void ) { int i , t , n , min , temp ; t = fastInput ( ) ; while ( t -- ) { n = fastInput ( ) ; min = fastInput ( ) ; for ( i = <int> ; i < n ; i ++ ) { temp = fastInput ( ) ; if ( temp < min ) min = temp ; } long long int ans = ( long long int ) min * ( long long int ) ( n - <int> ) ; printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 6364}
{"input": "int cost ( int n ) ; int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T >= <int> ) { int n ; scanf ( <str> , & n ) ; printf ( <str> , cost ( n ) ) ; T -- ; } return <int> ; } int cost ( int n ) { int a [ n ] , top = <int> , i , delele , sum = <int> , b = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; do { delele = a [ b ] > a [ b + <int> ] ? a [ b ] : a [ b + <int> ] ; if ( delele == a [ b ] ) { sum = sum + a [ b + <int> ] ; top ++ ; } else { sum = sum + a [ b ] ; a [ b ] = a [ b ] + a [ b + <int> ] ; a [ b + <int> ] = a [ b ] - a [ b + <int> ] ; a [ b ] = a [ b ] - a [ b + <int> ] ; top ++ ; } b ++ ; } while ( top != n - <int> ) ; return sum ; }", "label": 1, "id": 6365}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , i , s1 , s2 , d , j , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j < <int> ; j ++ ) a [ i ] [ j ] = - <int> ; } while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < ( i + <int> ) ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { a [ i ] [ <int> ] = a [ i ] [ <int> ] + a [ i - <int> ] [ <int> ] ; for ( j = <int> ; j < ( i + <int> ) ; j ++ ) { s1 = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; s2 = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; if ( s1 > s2 ) a [ i ] [ j ] = s1 ; else a [ i ] [ j ] = s2 ; } } d = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] > d ) d = a [ n - <int> ] [ i ] ; } printf ( <str> , d ) ; } }", "label": 0, "id": 6366}
{"input": "int main ( ) { int cf , cf2 , n , i , * p , x , ch ; long int count ; scanf ( <str> , & ch ) ; while ( ch != <int> ) { scanf ( <str> , & n ) ; p = ( int * ) malloc ( n * sizeof ( int ) ) ; i = <int> ; count = <int> ; while ( i != n ) { scanf ( <str> , & p [ i ] ) ; i ++ ; } cf = n - <int> ; while ( cf != <int> ) { x = <int> ; while ( x < ( n - cf ) ) { i = x ; cf2 = <int> ; while ( i <= ( cf + x - <int> ) ) { if ( p [ i ] <= p [ i + <int> ] ) cf2 ++ ; i ++ ; } if ( cf == cf2 ) count ++ ; x ++ ; } cf -- ; } printf ( <str> , ( count + n ) ) ; free ( p ) ; ch -- ; } return <int> ; }", "label": 2, "id": 6367}
{"input": "int main ( ) { int t , a [ <int> ] [ <int> ] , n , i , j , b [ <int> ] , c = <int> , sum , s , lar , k ; scanf ( <str> , & t ) ; while ( t ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = <int> ; j < n ; j ++ ) { for ( i = j ; i < n ; i ++ ) { sum = sum + a [ i ] [ j ] ; } b [ c ] = sum ; c ++ ; sum = <int> ; } sum = <int> ; for ( k = <int> ; k < n ; k ++ ) { for ( j = <int> ; j < n ; j ++ ) { s = j ; for ( i = j ; i < n ; i ++ ) { if ( ( i == ( j + k ) ) && ( n - j != <int> ) ) s = j ++ ; sum = sum + a [ i ] [ s ] ; } b [ c ] = sum ; c ++ ; sum = <int> ; } } lar = b [ <int> ] ; for ( i = <int> ; i < c ; i ++ ) { if ( b [ i ] > lar ) lar = b [ i ] ; } printf ( <str> , lar ) ; t -- ; } return <int> ; }", "label": 3, "id": 6368}
{"input": "int main ( ) { int t , x , y , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( x != y ) { if ( x > y ) x = x - y ; else y = y - x ; } printf ( <str> , x , ( a * b ) / y ) ; } return <int> ; }", "label": 1, "id": 6369}
{"input": "int main ( ) { long long int a , b , c , l , s , r ; scanf ( <str> , & a ) ; for ( long long int i = <int> ; i <= a ; i ++ ) { scanf ( <str> , & b , & c ) ; if ( b > c ) { l = b ; s = c ; } else { l = c ; s = b ; } while ( s != <int> ) { r = l % s ; l = s ; s = r ; } printf ( <str> , l , ( b * c ) / l ) ; } }", "label": 0, "id": 6370}
{"input": "int main ( ) { int nt , x , y , g , l , i ; scanf ( <str> , & nt ) ; while ( nt -- ) { g = <int> , l = <int> ; scanf ( <str> , & x , & y ) ; for ( i = <int> ; i <= ( x <= y ? x : y ) ; i ++ ) { if ( x % i == <int> && y % i == <int> ) g = i ; } l = ( x * y ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 6371}
{"input": "int main ( ) { int a , b , test , counter ; scanf ( <str> , & test ) ; for ( counter = <int> ; counter <= test ; counter ++ ) { scanf ( <str> , & a , & b ) ; int hcf , lcm ; int i , min ; min = b ; if ( min >= a ) { min = a ; } hcf = <int> ; for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; } } lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } }", "label": 1, "id": 6372}
{"input": "long int max ( int a [ <int> ] [ <int> ] , int x , int y , long int m [ <int> ] [ <int> ] ) { if ( a [ x ] [ y ] < <int> ) return <int> ; if ( m [ x ] [ y ] >= <int> ) return m [ x ] [ y ] ; long int b , r ; b = max ( a , x + <int> , y , m ) ; r = max ( a , x + <int> , y + <int> , m ) ; if ( b < r ) m [ x ] [ y ] = a [ x ] [ y ] + r ; else m [ x ] [ y ] = a [ x ] [ y ] + b ; return m [ x ] [ y ] ; } int main ( ) { int a [ <int> ] [ <int> ] ; long int m [ <int> ] [ <int> ] ; int t ; long int res [ <int> ] ; scanf ( <str> , & t ) ; int i , j , n , k ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , a [ j ] + k ) ; } } for ( j = <int> ; j < n + <int> ; j ++ ) { a [ n ] [ j ] = - <int> ; } for ( j = <int> ; j < <int> ; j ++ ) { for ( k = <int> ; k < <int> ; k ++ ) { m [ j ] [ k ] = - <int> ; } } res [ i ] = max ( a , <int> , <int> , m ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , res [ i ] ) ; } return <int> ; }", "label": 0, "id": 6373}
{"input": "int a [ <int> ] [ <int> ] ; int numinput ( int * n ) { * n = <int> ; char ch ; ch = getchar_unlocked ( ) ; while ( ch >= <char> && ch <= <char> ) { * n = ( * n << <int> ) + ( * n << <int> ) + ch - <char> ; ch = getchar_unlocked ( ) ; } } int main ( ) { int t , i , j , n ; scanf ( <str> , t ) ; while ( t -- ) { scanf ( <str> , n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] >= a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 6374}
{"input": "int main ( ) { int i , t , n , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , a [ i ] [ j ] ) ; printf ( <str> ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] > a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ) a [ i - <int> ] [ j - <int> ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else a [ i - <int> ] [ j - <int> ] = a [ i ] [ j - <int> ] + a [ i - <int> ] [ j - <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 6375}
{"input": "int a [ <int> ] [ <int> ] , i , k ; int sum ( int a [ i ] [ k ] , int m ) { int i , k , j = <int> , c = i , d = k , l ; l = a [ c ] [ k ] ; for ( i ; i < m ; i ++ ) { j += a [ i ] [ k ] ; } for ( k ; k < m ; k ++ ) { l += a [ c + <int> ] [ k + <int> ] ; } if ( l > j ) { return a [ c + <int> ] [ d + <int> ] ; } else if ( j > l ) { return a [ c ] [ k + <int> ] ; } } int main ( void ) { int cas , line , i , j , k , l ; scanf ( <str> , & cas ) ; for ( i = <int> ; i < cas ; i ++ ) { scanf ( <str> , & line ) ; for ( j = <int> ; j < line ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { printf ( <str> , <char> ) ; } printf ( <str> ) ; } } for ( ; ; ) ; return <int> ; }", "label": 2, "id": 6376}
{"input": "int main ( void ) { int a ; long int b , c , gcd , temp , big , small , lcm ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & b , & c ) ; if ( b >= c ) { big = b ; small = c ; } else { big = c ; small = b ; } for ( temp = small ; temp > <int> ; temp -- ) { if ( ( ( small % temp ) == <int> ) && ( big % temp ) == <int> ) { gcd = temp ; break ; } } lcm = b * c / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 2, "id": 6377}
{"input": "int maxrows , maxcolumns , * * result1 , * * array1 ; int sumTriangles ( int rowpos , int colpos ) { int value1 , value2 ; if ( rowpos == maxrows || colpos == maxcolumns ) return array1 [ rowpos ] [ colpos ] ; if ( result1 [ rowpos + <int> ] [ colpos ] == - <int> ) { value1 = sumTriangles ( rowpos + <int> , colpos ) ; result1 [ rowpos + <int> ] [ colpos ] = value1 ; } else value1 = result1 [ rowpos + <int> ] [ colpos ] ; if ( result1 [ rowpos + <int> ] [ colpos + <int> ] == - <int> ) { value2 = sumTriangles ( rowpos + <int> , colpos + <int> ) ; result1 [ rowpos + <int> ] [ colpos + <int> ] = value2 ; } else value2 = result1 [ rowpos + <int> ] [ colpos + <int> ] ; if ( value1 > value2 ) return value1 + array1 [ rowpos ] [ colpos ] ; else return value2 + array1 [ rowpos ] [ colpos ] ; } int main ( ) { int noIter , i , j , k , nrows , ncolumns = <int> , * results ; scanf ( <str> , & noIter ) ; results = ( int * ) malloc ( noIter * sizeof ( int ) ) ; for ( i = <int> ; i < noIter ; i ++ ) { scanf ( <str> , & nrows ) ; array1 = ( int * * ) malloc ( nrows * sizeof ( int * ) ) ; result1 = ( int * * ) malloc ( nrows * sizeof ( int * ) ) ; ncolumns = <int> ; for ( j = <int> ; j < nrows ; j ++ ) { array1 [ j ] = ( int * ) malloc ( ncolumns * sizeof ( int ) ) ; result1 [ j ] = ( int * ) malloc ( ncolumns * sizeof ( int ) ) ; for ( k = <int> ; k < ncolumns ; k ++ ) { result1 [ j ] [ k ] = - <int> ; scanf ( <str> , & array1 [ j ] [ k ] ) ; } ncolumns ++ ; } maxrows = nrows - <int> ; maxcolumns = nrows - <int> ; results [ i ] = sumTriangles ( <int> , <int> ) ; for ( j = <int> ; j < nrows ; j ++ ) { free ( array1 [ j ] ) ; } free ( array1 ) ; } for ( i = <int> ; i < noIter ; i ++ ) { printf ( <str> , results [ i ] ) ; } return <int> ; }", "label": 0, "id": 6378}
{"input": "int a [ <int> ] [ <int> ] ; int maxsum ( int n , int r , int c , int sum ) ; int main ( ) { int t , i , j ; int n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } printf ( <str> , maxsum ( n , <int> , <int> , a [ <int> ] [ <int> ] ) ) ; } return <int> ; } int maxsum ( int n , int r , int c , int sum ) { if ( r >= n ) { return ( sum + <int> ) ; } else { return ( max ( maxsum ( n , r + <int> , c , ( sum + a [ r + <int> ] [ c ] ) ) , maxsum ( n , r + <int> , c + <int> , ( sum + a [ r + <int> ] [ c + <int> ] ) ) ) ) ; } }", "label": 2, "id": 6379}
{"input": "int main ( ) { int i , T , HCF ; long a , b , temp , LCM , m ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & a , & b ) ; m = a * b ; while ( a > <int> || b > <int> ) { b = b % a ; if ( b == <int> ) { HCF = a ; break ; } a = a % b ; if ( a == <int> ) { HCF = b ; break ; } } LCM = m / HCF ; printf ( <str> , HCF , LCM ) ; printf ( <str> ) ; } }", "label": 0, "id": 6380}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int t , i , j ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = t - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( a [ i + <int> ] [ j + <int> ] > a [ i + <int> ] [ j ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 6381}
{"input": "int main ( ) { int t , l ; scanf ( <str> , & t ) ; for ( l = <int> ; l < t ; l ++ ) { int n , i , j , k , g ; scanf ( <str> , & n ) ; j = ( ( n + <int> ) * n ) / <int> ; int a [ j ] ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int <unk> = a [ <int> ] , <unk> = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { k = ( i * ( i + <int> ) ) / <int> ; g = k + i ; <unk> = <unk> + a [ k ] ; <unk> = <unk> + a [ g ] ; } if ( <unk> >= <unk> ) { printf ( <str> , <unk> ) ; } else { printf ( <str> , <unk> ) ; } } }", "label": 1, "id": 6382}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int i , j , rows ; scanf ( <str> , & rows ) ; int a [ rows ] [ rows ] ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = rows - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6383}
{"input": "int main ( ) { int i , j , n , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n ; i > <int> ; i -- ) { for ( j = i ; j > <int> ; j -- ) { int max = a [ i ] [ j ] > a [ i ] [ j - <int> ] ? a [ i ] [ j ] : a [ i ] [ j - <int> ] ; a [ i - <int> ] [ j - <int> ] = a [ i - <int> ] [ j - <int> ] + max ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6384}
{"input": "int main ( ) { int a , b , x , y , t , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { t = b ; b = a % b ; a = t ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , x , y , gcd ) ; printf ( <str> , x , y , lcm ) ; return <int> ; }", "label": 1, "id": 6385}
{"input": "main ( ) { int a , b , x , a1 , b1 ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; a1 = a ; b1 = b ; while ( b != <int> ) { x = a % b ; a = b ; b = x ; } printf ( <str> , a ) ; printf ( <str> , ( a1 * b1 ) / a ) ; }", "label": 1, "id": 6386}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] ; int i , j , r , k , n ; scanf ( <str> , & n ) ; for ( k = <int> ; k <= n ; k ++ ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = r - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } else a [ i - <int> ] [ j ] += a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 6387}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int min = INT_MAX ; for ( int i = <int> ; i < n ; i ++ ) { int a ; scanf ( <str> , & a ) ; if ( min > a ) min = a ; } printf ( <str> , ( min * ( n - <int> ) ) ) ; } return <int> ; }", "label": 0, "id": 6388}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int n , min ; scanf ( <str> , & n ) ; min = INT_MAX ; int j ; int * a = ( int * ) malloc ( n * sizeof ( n ) ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( min > a [ j ] ) min = a [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6389}
{"input": "int main ( ) { long i , j , T , n , a , min ; long cost = <int> ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & n ) ; min = <int> ; cost = <int> ; for ( j = <int> ; j <= n ; j ++ ) { scanf ( <str> , & a ) ; if ( a < min ) min = a ; } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 6390}
{"input": "int main ( ) { int t , i , a , b , t1 , t2 , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; t1 = a ; t2 = b ; while ( t1 != t2 ) { if ( t1 > t2 ) { t1 = t1 - t2 ; } else { t2 = t2 - t1 ; } } gcd = t1 ; lcm = ( a * b ) / gcd ; printf ( <str> , lcm , gcd ) ; } return <int> ; }", "label": 1, "id": 6391}
{"input": "int main ( ) { int testcases , rows , i , j , * current_row , a [ <int> ] , * <unk> , b [ <int> ] , max_sum ; current_row = a ; <unk> = b ; scanf ( <str> , & testcases ) ; while ( testcases -- ) { scanf ( <str> , & rows ) ; <unk> [ <int> ] = <int> ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & current_row [ j ] ) ; if ( j == <int> ) { current_row [ j ] = current_row [ j ] + <unk> [ j ] ; } else if ( j == i ) { current_row [ j ] = current_row [ j ] + <unk> [ j - <int> ] ; } else { current_row [ j ] = current_row [ j ] + ( <unk> [ j ] > <unk> [ j - <int> ] ? <unk> [ j ] : <unk> [ j - <int> ] ) ; } } if ( current_row == a ) { current_row = b ; <unk> = a ; } else { current_row = a ; <unk> = b ; } } max_sum = <unk> [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) { if ( max_sum < <unk> [ i ] ) { max_sum = <unk> [ i ] ; } } printf ( <str> , max_sum ) ; } return <int> ; }", "label": 0, "id": 6392}
{"input": "int gcd ( int a , int b ) { int i , j ; for ( i = a ; i > <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { j = i ; break ; } return j ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int num1 , num2 , i , k ; scanf ( <str> , & num1 , & num2 ) ; i = gcd ( num1 , num2 ) ; printf ( <str> , i , ( num1 * num2 ) / i ) ; } }", "label": 2, "id": 6393}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 6394}
{"input": "int main ( ) { int t , a = <int> , b = <int> , c = <int> , e , f ; scanf ( <str> , & t ) ; int gcd , lcm ; while ( a < t ) { int i = <int> ; scanf ( <str> , & e , & f ) ; int j = ( e > f ) ? f : e ; int x = ( e > f ) ? e : f ; int z = e * f ; while ( i <= j ) { if ( e % i == <int> && f % i == <int> ) { gcd = i ; } ++ i ; } lcm = ( e * f ) / gcd ; a ++ ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6395}
{"input": "int main ( ) { long long int t , n , a [ <int> ] , c , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; c = <int> ; scanf ( <str> , & a [ <int> ] ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ <int> ] ) ; if ( a [ <int> ] > a [ <int> ] ) { a [ <int> ] = a [ <int> ] ; c = c + a [ <int> ] ; } else { c = c + a [ <int> ] ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 6396}
{"input": "void sums ( void ) { int tests ; scanf ( <str> , & tests ) ; while ( tests -- ) { int num_lines ; int array [ <int> ] [ <int> ] ; int <unk> [ <int> ] [ <int> ] ; int i ; int j ; scanf ( <str> , & num_lines ) ; for ( i = <int> ; i < num_lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } <unk> [ <int> ] [ <int> ] = array [ <int> ] [ <int> ] ; for ( i = <int> ; i < num_lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { <unk> [ i ] [ j ] = array [ i ] [ j ] + <unk> [ i - <int> ] [ j ] ; } else { int best = <unk> [ i - <int> ] [ j ] ; if ( <unk> [ i - <int> ] [ j - <int> ] > best ) { best = <unk> [ i - <int> ] [ j - <int> ] ; } <unk> [ i ] [ j ] = array [ i ] [ j ] + best ; } } } int max = <int> ; for ( j = <int> ; j < num_lines ; j ++ ) { if ( <unk> [ num_lines - <int> ] [ j ] > max ) { max = <unk> [ num_lines - <int> ] [ j ] ; } } printf ( <str> , max ) ; } } int main ( int argc , char * * argv ) { sums ( ) ; return <int> ; }", "label": 1, "id": 6397}
{"input": "int main ( ) { int T , c ; long int a [ <int> ] , i , N , min ; scanf ( <str> , & T ) ; while ( T -- ) { c = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } for ( i = <int> ; i < N ; i ++ ) { if ( a [ i ] > min ) c ++ ; } printf ( <str> , ( c * min ) ) ; } return <int> ; }", "label": 1, "id": 6398}
{"input": "int main ( ) { int t , n , i , j , k , max ; int * a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & k ) ; n = k * ( k + <int> ) / <int> ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } max = <int> ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { k = a [ i ] + a [ j ] ; if ( k > max ) { max = k ; } } } printf ( <str> , max ) ; } return <int> ; }", "label": 2, "id": 6399}
{"input": "int main ( ) { int t ; int n ; int m ; int a ; int b ; int temp ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & m ) ; if ( n > m ) { temp = m ; m = n ; n = temp ; } a = n ; b = m ; while ( n > <int> ) { if ( m % n == <int> ) { break ; } temp = m % n ; m = n ; n = temp ; } temp = b ; while ( b % a != <int> ) { b = b + temp ; } printf ( <str> , n , b ) ; } return <int> ; }", "label": 1, "id": 6400}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , d , j , k ; scanf ( <str> , & d ) ; int T [ <int> ] [ <int> ] ; for ( i = <int> ; i <= d - <int> ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & T [ i ] [ j ] ) ; int sum ; for ( i = <int> , sum = <int> ; i <= d - <int> ; i ++ ) { for ( j = <int> , k = <int> ; j <= i ; j ++ ) { if ( T [ i ] [ j ] > k ) k = T [ i ] [ j ] ; } sum = sum + k ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6401}
{"input": "int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } return a ; } int main ( void ) { int s , a , b , c ; scanf ( <str> , & s ) ; while ( s -- ) { scanf ( <str> , & a , & b ) ; c = gcd ( a , b ) ; printf ( <str> , c , ( a * b / c ) ) ; } return <int> ; }", "label": 1, "id": 6402}
{"input": "int main ( ) { int T , t , N , tmp , min , n ; scanf ( <str> , & T ) ; for ( t = <int> ; t < T ; t ++ ) { scanf ( <str> , & N ) ; scanf ( <str> , & min ) ; for ( n = <int> ; n < N ; n ++ ) { scanf ( <str> , & tmp ) ; if ( tmp < min ) { min = tmp ; } } printf ( <str> , ( N - <int> ) * min ) ; } return <int> ; }", "label": 0, "id": 6403}
{"input": "long int gcdf ( long int , long int ) ; long int lcmf ( long int , long int ) ; int main ( ) { long int t , a , b , i , lc , gc ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; lc = lcmf ( a , b ) ; gc = gcdf ( a , b ) ; printf ( <str> , gc , lc ) ; } } long int gcdf ( long int m , long int n ) { long int temp ; if ( m < n ) { temp = m ; m = n ; n = temp ; } while ( ( m % n ) != <int> ) { temp = m ; m = n ; n = temp % n ; } return n ; } long int lcmf ( long int m , long int n ) { long int temp , d = <int> , k ; if ( m < n ) { temp = m ; m = n ; n = temp ; } d = <int> ; k = m ; while ( k % n != <int> ) { d ++ ; k = m * d ; } return k ; }", "label": 2, "id": 6404}
{"input": "int main ( ) { int x , y , i ; int min = <int> ; scanf ( <str> , & x ) ; while ( x > <int> ) { scanf ( <str> , & y ) ; int a [ y ] ; for ( i = <int> ; i < y ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , min * ( y - <int> ) ) ; x -- ; } return <int> ; }", "label": 1, "id": 6405}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t , T ; scanf ( <str> , & T ) ; for ( t = <int> ; t < T ; t ++ ) { int N ; scanf ( <str> , & N ) ; long long int A [ N ] [ N ] ; int i , j ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } long long int sum [ N ] [ N ] ; for ( i = <int> ; i < N ; i ++ ) { for ( j = <int> ; j < N ; j ++ ) sum [ i ] [ j ] = <int> ; } sum [ <int> ] [ <int> ] = A [ <int> ] [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { sum [ i ] [ <int> ] = A [ i ] [ <int> ] + sum [ i - <int> ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { sum [ i ] [ j ] = max ( sum [ i - <int> ] [ j ] , sum [ i - <int> ] [ j - <int> ] ) + A [ i ] [ j ] ; } } long long int max = sum [ N - <int> ] [ <int> ] ; for ( i = <int> ; i < N - <int> ; i ++ ) { if ( sum [ N - <int> ] [ i ] > max ) max = sum [ N - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6406}
{"input": "int main ( ) { int T , A , B , i ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { long long int j , m ; scanf ( <str> , & A , & B ) ; for ( j = A ; j > <int> ; j -- ) { if ( A % j == <int> && B % j == <int> ) break ; } for ( m = A ; m >= A ; m ++ ) { if ( m % A == <int> && m % B == <int> ) break ; } printf ( <str> , j , m ) ; } return <int> ; }", "label": 2, "id": 6407}
{"input": "int main ( ) { int A , B , gcd , lcm , remainder , numerator , denominator , T ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6408}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b [ <int> ] , i ; scanf ( <str> , & a ) ; for ( i = <int> ; i <= a ; i ++ ) { scanf ( <str> , & b [ i ] ) ; } long long int min , s = <int> ; min = b [ <int> ] ; for ( i = <int> ; i <= a ; i ++ ) { if ( min > b [ i ] ) min = b [ i ] ; s = ( a - <int> ) * min ; } printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 6409}
{"input": "int main ( ) { int t , n , i , j ; int sol [ <int> ] = { <int> } , a [ <int> ] , solp [ <int> ] ; scanf ( <str> , & t ) ; int largest ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ j ] ) ; if ( i == <int> ) { sol [ i ] = a [ i ] ; } else { solp [ <int> ] = sol [ <int> ] ; sol [ <int> ] += a [ <int> ] ; } for ( j = <int> ; j < i ; j ++ ) { solp [ j ] = sol [ j ] ; sol [ j ] = max ( solp [ j - <int> ] + a [ j ] , solp [ j ] + a [ j ] ) ; } sol [ j ] = solp [ j - <int> ] + a [ j ] ; } largest = sol [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( sol [ i ] > largest ) largest = sol [ i ] ; printf ( <str> , largest ) ; t -- ; } return <int> ; }", "label": 0, "id": 6410}
{"input": "int main ( ) { int num [ <int> ] [ <int> ] , i , j , len , kases ; scanf ( <str> , & kases ) ; while ( kases -- ) { scanf ( <str> , & len ) ; for ( i = <int> , j = <int> ; i < len , j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; if ( i == j ) { i ++ ; j = ( i == len ) ? i : - <int> ; } } for ( i = len - <int> , j = <int> ; i > <int> , j <= i - <int> ; j ++ ) { int l = ( num [ i - <int> ] [ j ] + num [ i ] [ j ] ) ; int m = ( num [ i - <int> ] [ j ] + num [ i ] [ j + <int> ] ) ; num [ i - <int> ] [ j ] = ( l >= m ) ? l : m ; if ( j == i - <int> ) { i -- ; j = - <int> ; } } printf ( <str> , num [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6411}
{"input": "int main ( ) { long N , t ; scanf ( <str> , & t ) ; int i , j , sum = <int> , min ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & N ) ; int a [ N ] ; for ( j = <int> ; j < N ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = a [ <int> ] ; for ( j = <int> ; j < N ; j ++ ) { if ( a [ j ] < min ) { min = a [ j ] ; } } sum = min * ( N - <int> ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6412}
{"input": "int arr [ <int> ] [ <int> ] ; int main ( ) { int i , j , t , n , x , s , k , l ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t -- ) { printf ( <str> ) ; scanf ( <str> , & n ) ; if ( n > <int> && n < <int> ) { for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } s = arr [ <int> ] [ <int> ] ; l = <int> ; for ( k = <int> ; k < n ; k ++ ) { if ( arr [ k ] [ l ] > arr [ k ] [ l + <int> ] ) { x = l ; } else x = l + <int> ; s += arr [ k ] [ l ] ; l = x ; } printf ( <str> , s ) ; } } return <int> ; }", "label": 2, "id": 6413}
{"input": "int max_sum ( int * triangle [ ] , int row ) { int temp , temp1 ; int i , j , prev_row ; int * curr_row_ptr ; int * prev_row_ptr ; for ( i = <int> , prev_row = <int> ; i < row ; i ++ , prev_row ++ ) { curr_row_ptr = triangle [ i ] ; prev_row_ptr = triangle [ prev_row ] ; * curr_row_ptr += * prev_row_ptr ; for ( j = <int> ; j <= i ; j ++ ) { temp = * ( prev_row_ptr + j ) ; temp1 = * ( prev_row_ptr + j - <int> ) ; if ( temp1 > temp ) temp = temp1 ; * ( curr_row_ptr + j ) += temp ; } } temp = * prev_row_ptr ; ; for ( j = <int> ; j <= i ; j ++ ) { if ( * ( prev_row_ptr + j ) > temp ) temp = * ( prev_row_ptr + j ) ; } return temp ; } int main ( ) { int test_cases ; int rows ; char str [ <int> ] ; char * temp ; int i , j , num ; int * triangle [ <int> ] = { NULL } ; int * row_ptr ; scanf ( <str> , & test_cases ) ; while ( test_cases -- ) { scanf ( <str> , & rows ) ; fflush ( stdin ) ; for ( i = <int> ; i < rows ; i ++ ) { gets ( str ) ; if ( triangle [ i ] == NULL ) triangle [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + <int> ) ) ; row_ptr = triangle [ i ] ; temp = strtok ( str , <str> ) ; while ( temp ) { sscanf ( temp , <str> , row_ptr ++ ) ; temp = strtok ( NULL , <str> ) ; } } printf ( <str> , max_sum ( triangle , rows ) ) ; } return <int> ; }", "label": 3, "id": 6414}
{"input": "long GCD ( long a , long b ) { if ( a == <int> ) return b ; return GCD ( b % a , a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; long a , b ; while ( t -- ) { scanf ( <str> , & a , & b ) ; long gcd = GCD ( a , b ) ; printf ( <str> , gcd , ( a * b ) / gcd ) ; } return <int> ; }", "label": 0, "id": 6415}
{"input": "int gcd ( int num1 , int num2 ) { int rem ; rem = num1 % num2 ; while ( rem != <int> ) { num1 = num2 ; num2 = rem ; rem = num1 % num2 ; } return num2 ; } int lcm ( int num1 , int num2 ) { int n = gcd ( num1 , num2 ) ; return num1 * num2 / n ; } int main ( ) { int t , num1 , num2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & num1 , & num2 ) ; printf ( <str> , gcd ( num1 , num2 ) , lcm ( num1 , num2 ) ) ; } return <int> ; }", "label": 1, "id": 6416}
{"input": "long long int A [ <int> ] , B [ <int> ] ; int main ( ) { long long int i , j , t , n , k , d , z , s , o , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; z = <int> ; o = <int> ; s = <int> ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & A [ j ] ) ; for ( j = <int> ; j < ( n - <int> ) ; j ++ ) { if ( A [ j + <int> ] >= A [ j ] ) { o = o + <int> ; for ( k = j + <int> ; k < ( n - <int> ) ; k ++ ) { if ( A [ k + <int> ] >= A [ k ] ) z = z + <int> ; else break ; } B [ j ] = z ; } else B [ j ] = <int> ; if ( o == <int> ) { x = z ; for ( k = j ; k <= ( j + x - <int> ) ; k ++ ) { B [ k ] = z ; z = z - <int> ; } } if ( o == <int> ) j = k - <int> ; z = <int> ; o = <int> ; } B [ n - <int> ] = <int> ; for ( j = <int> ; j < n ; j ++ ) s = s + B [ j ] ; printf ( <str> , s ) ; for ( j = <int> ; j < n ; j ++ ) A [ j ] = B [ j ] = <int> ; } return <int> ; }", "label": 0, "id": 6417}
{"input": "gcd ( int a , int b ) { if ( b % a == <int> ) return a ; else return ( gcd ( b % a , a ) ) ; } int main ( ) { int t , l , a , b , g ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) g = gcd ( b , a ) ; else g = gcd ( a , b ) ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 6418}
{"input": "long long gcd ( long long a , long long b ) { long long t ; while ( b ) { t = a % b ; a = b ; b = t ; } return a ; } int main ( ) { long long int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b ; scanf ( <str> , & a , & b ) ; long long int g = gcd ( a , b ) ; printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 0, "id": 6419}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , a [ <int> ] [ <int> ] = { <int> } , sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } j = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) sum += a [ i ] [ j ] ; else sum += a [ i ] [ ++ j ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6420}
{"input": "int arr [ <int> ] [ <int> ] , a [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int dp ( int i , int j , int n ) { int d , d1 ; if ( i == n - <int> ) return a [ i ] [ j ] = arr [ i ] [ j ] ; else if ( a [ i ] [ j ] != <int> ) return a [ i ] [ j ] ; else { d = dp ( i + <int> , j , n ) ; d1 = dp ( i + <int> , j + <int> , n ) ; if ( d > d1 ) { a [ i ] [ j ] = d + arr [ i ] [ j ] ; return a [ i ] [ j ] ; } else { a [ i ] [ j ] = d1 + arr [ i ] [ j ] ; return a [ i ] [ j ] ; } } } int main ( ) { int i , j , n , res , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = <int> ; scanf ( <str> , & arr [ i ] [ j ] ) ; } } res = dp ( <int> , <int> , n ) ; printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 6421}
{"input": "int main ( ) { int arr [ <int> ] [ <int> ] ; int i , j , tc , go , row , k ; long sum = <int> , max = <int> ; scanf ( <str> , & tc ) ; for ( go = <int> ; go <= tc ; go ++ ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> ; i < row ; i ++ ) { sum = <int> ; k = i ; for ( j = i ; k < row ; k ++ ) { sum = sum + arr [ k ] [ j ] ; } sum = sum + arr [ k - <int> ] [ j + <int> ] ; if ( sum > max ) max = sum ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 6422}
{"input": "int main ( ) { long int t , a , b , p , q , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a >= b ) { p = a ; q = b ; } else { p = b ; q = a ; } r = q ; while ( r > <int> ) { q = r ; r = p % q ; p = q ; } printf ( <str> , q , ( ( a * b ) / q ) ) ; } return <int> ; }", "label": 0, "id": 6423}
{"input": "int main ( ) { int * ptr , T , i , lcm , hcf , j , a , b ; scanf ( <str> , & T ) ; ptr = ( int * ) malloc ( <int> * T * sizeof ( int ) ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { for ( j = a ; j <= a * b ; j ++ ) { if ( j % a == <int> && j % b == <int> ) break ; } lcm = j ; hcf = ( a * b ) / j ; } else { for ( j = b ; j < a * b ; j ++ ) { if ( j % a == <int> && j % b == <int> ) break ; } lcm = j ; hcf = ( a * b ) / j ; } ptr [ <int> * i ] = lcm ; ptr [ <int> * i + <int> ] = hcf ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , ptr [ <int> * i ] , ptr [ <int> * i + <int> ] ) ; return <int> ; }", "label": 2, "id": 6424}
{"input": "int main ( ) { int test , counter , i , row , j ; scanf ( <str> , & test ) ; for ( counter = <int> ; counter < test ; counter ++ ) { int row_d [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & row_d [ i ] [ j ] ) ; } } for ( i = row - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i - <int> ; j ++ ) { row_d [ i - <int> ] [ j ] += ( row_d [ i ] [ j ] > row_d [ i ] [ j + <int> ] ? row_d [ i ] [ j ] : row_d [ i ] [ j + <int> ] ) ; } } printf ( <str> , row_d [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 6425}
{"input": "int gcdlcm ( long int x , long int y ) { if ( x == y ) return ( x ) ; if ( x % y == <int> ) return ( y ) ; if ( y % x == <int> ) return ( x ) ; if ( x > y ) return ( gcdlcm ( x % y , y ) ) ; else return ( gcdlcm ( x , y % x ) ) ; } main ( ) { long int a , b , c , d , e , f , g ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & b , & c ) ; e = gcdlcm ( b , c ) ; printf ( <str> , e ) ; g = ( c * b ) / e ; printf ( <str> , g ) ; } }", "label": 0, "id": 6426}
{"input": "int main ( ) { int t , r , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; int a [ r ] [ r ] ; for ( i = <int> ; i < r ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = r - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + ( max ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6427}
{"input": "int main ( void ) { unsigned long long int t , n , q , k = <int> ; unsigned long long int sum = <int> , current , element ; scanf ( <str> , & t ) ; for ( q = t ; q > <int> ; q -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & current ) ; unsigned long long int i ; for ( i = <int> ; i < n - <int> ; i ++ ) { scanf ( <str> , & element ) ; if ( element >= current ) { k ++ ; current = element ; } else { k = <int> ; current = element ; } sum = sum + k ; } printf ( <str> , sum ) ; sum = <int> ; k = <int> ; } return <int> ; }", "label": 0, "id": 6428}
{"input": "int main ( ) { int tc , a [ <int> ] , ans [ <int> ] ; int i , j , k , r , p , q , suml , sumr , it = <int> , flag ; scanf ( <str> , & tc ) ; for ( i = <int> ; i < tc ; i ++ ) { r = <int> ; scanf ( <str> , & a [ <int> ] ) ; for ( j = <int> ; j <= a [ <int> ] ; j ++ ) for ( k = <int> ; k < j ; k ++ ) scanf ( <str> , & a [ ++ r ] ) ; flag = <int> ; it = <int> ; while ( flag ) { suml = <int> ; sumr = <int> ; for ( p = <int> ; p <= it ; p ++ ) suml += a [ p ] ; for ( q = r ; q > it ; q -- ) sumr += a [ q ] ; it ++ ; if ( suml >= sumr ) { flag = <int> ; ans [ i ] = suml ; } } } for ( i = <int> ; i < tc ; i ++ ) printf ( <str> , ans [ i ] ) ; return <int> ; }", "label": 2, "id": 6429}
{"input": "int maxSum ( int * * a , int rows ) { int i , j , k , max = <int> ; int * * <unk> ; <unk> = ( int * * ) malloc ( rows * sizeof ( int ) ) ; for ( i = <int> ; i < rows ; i ++ ) <unk> [ i ] = malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( i = <int> ; i < rows ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) <unk> [ i ] [ j ] = <int> ; <unk> [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < rows ; i ++ ) { for ( k = <int> ; k < i ; k ++ ) for ( j = <int> ; j <= <int> ; j ++ ) { if ( j + k <= i && <unk> [ i ] [ j + k ] < ( a [ i ] [ j + k ] + <unk> [ i - <int> ] [ k ] ) ) <unk> [ i ] [ j + k ] = a [ i ] [ j + k ] + <unk> [ i - <int> ] [ k ] ; } } for ( i = <int> ; i < rows ; i ++ ) max = ( max > <unk> [ rows - <int> ] [ i ] ) ? max : <unk> [ rows - <int> ] [ i ] ; for ( i = <int> ; i < rows ; i ++ ) free ( <unk> [ i ] ) ; free ( <unk> ) ; return max ; } int main ( ) { int n , i , j , k ; int * rows ; int * * * arr ; scanf ( <str> , & n ) ; arr = ( int * * * ) malloc ( n * sizeof ( int * * * ) ) ; rows = malloc ( n * sizeof ( int ) ) ; for ( i = <int> ; i < n ; i ++ ) { printf ( <str> ) ; scanf ( <str> , & rows [ i ] ) ; arr [ i ] = ( int * * ) malloc ( rows [ i ] * sizeof ( int * * ) ) ; for ( j = <int> ; j < rows [ i ] ; j ++ ) arr [ i ] [ j ] = malloc ( ( j + <int> ) * sizeof ( int * ) ) ; for ( j = <int> ; j < rows [ i ] ; j ++ ) for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & arr [ i ] [ j ] [ k ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < rows [ i ] ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) printf ( <str> , arr [ i ] [ j ] [ k ] ) ; printf ( <str> ) ; } printf ( <str> ) ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , maxSum ( arr [ i ] , rows [ i ] ) ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < rows [ i ] ; j ++ ) free ( arr [ i ] [ j ] ) ; free ( arr [ i ] ) ; } free ( arr ) ; free ( rows ) ; return <int> ; }", "label": 3, "id": 6430}
{"input": "int main ( void ) { int t , i , a , b , x , y , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; x = a , y = b ; while ( x != y ) { if ( x > y ) { x = x - y ; } else { y = y - x ; } } g = x ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 6431}
{"input": "long main ( ) { int t ; long a , b , c , gcd , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b ) { c = b ; b = a % c ; a = c ; } gcd = a ; printf ( <str> , gcd , ( x * y ) / gcd ) ; } return <int> ; }", "label": 0, "id": 6432}
{"input": "int main ( void ) { long int T , i , a , b , LCM , t ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & a , & b ) ; t = a ; while ( a != b ) { if ( a > b ) a = a - b ; else b = b - a ; } printf ( <str> , a ) ; LCM = ( t * b ) / a ; printf ( <str> , LCM ) ; } return <int> ; }", "label": 1, "id": 6433}
{"input": "int main ( ) { int a , b , c , e , i , f , num1 , num2 ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b , & c ) ; if ( b > c ) { num1 = b ; num2 = c ; } if ( b == c ) { printf ( <str> , b , c ) ; } else { num1 = c ; num2 = b ; } e = ( num1 % num2 ) ; while ( e != <int> ) { num1 = num2 ; num2 = e ; e = ( num1 % num2 ) ; } f = ( b * c ) / num2 ; printf ( <str> , num2 , f ) ; } return <int> ; }", "label": 1, "id": 6434}
{"input": "int hcf ( int n , int a , int b ) { if ( a % n != <int> || b % n != <int> ) hcf ( n - <int> , a , b ) ; else return n ; } int main ( ) { int t , i ; long int a , b , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; n = ( a > b ? b : a ) ; n = hcf ( n , a , b ) ; printf ( <str> , n , ( a * b ) / n ) ; } return <int> ; }", "label": 3, "id": 6435}
{"input": "int main ( ) { int num , i , j , n , max ; scanf ( <str> , & num ) ; while ( num -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } a [ <int> ] [ <int> ] += a [ <int> ] [ <int> ] ; a [ <int> ] [ <int> ] += a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { j = <int> ; a [ i + <int> ] [ j ] += a [ i ] [ j ] ; for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i + <int> ] [ j + <int> ] += a [ i ] [ j ] ; else a [ i + <int> ] [ j + <int> ] += a [ i ] [ j + <int> ] ; } a [ i + <int> ] [ j + <int> ] += a [ i ] [ j ] ; } max = <int> ; for ( i = n - <int> , j = <int> ; j <= n - <int> ; j ++ ) { if ( a [ i ] [ j ] > max ) max = a [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6436}
{"input": "int main ( ) { int k , i , j , inc , a [ <int> ] , n , tot , max [ <int> ] , sum , test ; scanf ( <str> , & test ) ; for ( k = <int> ; k < test ; k ++ ) { max [ k ] = INT_MIN ; printf ( <str> ) ; scanf ( <str> , & n ) ; tot = n * ( n + <int> ) / <int> ; for ( i = <int> ; i < tot ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } if ( tot > <int> ) { for ( i = <int> , inc = <int> ; ; ) { sum = <int> ; j = i + inc ; sum = a [ i ] + a [ j ] + a [ j + <int> ] ; if ( max [ k ] < sum ) max [ k ] = sum ; i = i + inc ; inc ++ ; if ( j + inc >= tot ) break ; } } else max [ k ] = a [ <int> ] ; } for ( k = <int> ; k < test ; k ++ ) printf ( <str> , max [ k ] ) ; }", "label": 3, "id": 6437}
{"input": "int gcd ( int a , int b ) { int r = a % b ; if ( r == <int> ) return b ; else return gcd ( b , r ) ; } int lcm ( int a , int b ) { long int r = ( a * b ) / gcd ( a , b ) ; return r ; } int main ( void ) { int t , a , b ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; long int l = lcm ( a , b ) ; printf ( <str> , g ) ; printf ( <str> , l ) ; } return <int> ; }", "label": 1, "id": 6438}
{"input": "void main ( ) { int t , a [ <int> ] , i , n , d = <int> , count = <int> , j , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } d = <int> ; count = <int> ; for ( j = <int> ; j < n ; j ++ ) { if ( n > <int> ) { d = d + count ; count = <int> ; for ( k = j ; k < n ; k ++ ) { if ( a [ k ] < a [ k + <int> ] ) count ++ ; else break ; } } else d = <int> ; } printf ( <str> , d ) ; } }", "label": 3, "id": 6439}
{"input": "int main ( ) { int n , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i > <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6440}
{"input": "void main ( ) { int i , k , x , n , t , sum , a [ <int> ] ; scanf ( <str> , & t ) ; for ( x = <int> ; x <= t ; x ++ ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; n -- ) { if ( a [ i ] >= a [ i + <int> ] ) { sum = sum + a [ i + <int> ] ; for ( k = i ; k < n ; k ++ ) { a [ k ] = a [ k + <int> ] ; } } else { sum = sum + a [ i ] ; for ( k = i + <int> ; k < n ; k ++ ) { a [ k ] = a [ k + <int> ] ; } } } printf ( <str> , sum ) ; } }", "label": 2, "id": 6441}
{"input": "int main ( ) { int t , i , j , r ; scanf ( <str> , & t ) ; while ( t -- ) { int arr [ <int> ] [ <int> ] ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } if ( r == <int> ) printf ( <str> , arr [ <int> ] [ <int> ] ) ; if ( r == <int> ) printf ( <str> , ( arr [ <int> ] [ <int> ] > arr [ <int> ] [ <int> ] ) ? arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] : arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] ) ; else for ( i = r - <int> ; i > <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { arr [ i ] [ j ] += ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , ( arr [ <int> ] [ <int> ] > arr [ <int> ] [ <int> ] ) ? arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] : arr [ <int> ] [ <int> ] + arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6442}
{"input": "int hcf ( int n1 , int n2 ) { if ( n2 != <int> ) return hcf ( n2 , n1 % n2 ) ; else return n1 ; } int lcm ( int n1 , int n2 ) { int l = <int> ; if ( l % n1 == <int> && l % n2 == <int> ) return l ; l ++ ; lcm ( n1 , n2 ) ; return l ; } int main ( ) { int A [ <int> ] , B [ <int> ] , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & A [ i ] , & B [ i ] ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , hcf ( A [ i ] , B [ i ] ) , lcm ( A [ i ] , B [ i ] ) ) ; } return <int> ; }", "label": 3, "id": 6443}
{"input": "int main ( ) { int t ; long long int x , y , a , b , m , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { m = b ; b = a % b ; a = m ; } gcd = a ; lcm = ( x * y ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 6444}
{"input": "int main ( ) { long int t , n , i ; scanf ( <str> , & t ) ; if ( t <= <int> ) { for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; printf ( <str> , calc ( n ) ) ; } } return <int> ; } int calc ( long int n ) { long int a [ n ] , i , c = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) c ++ ; } return c ; }", "label": 1, "id": 6445}
{"input": "int main ( ) { long unsigned int k = <int> ; int n = <int> , i = <int> , j = <int> , t ; int arr [ <int> ] [ <int> ] ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] = arr [ i + <int> ] [ j ] + arr [ i ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; t = t - <int> ; } return <int> ; }", "label": 1, "id": 6446}
{"input": "int main ( ) { int T , N [ <int> ] , i , j , a [ <int> ] , max , c [ <int> ] , k ; scanf ( <str> , & T ) ; for ( k = <int> ; k < T ; k ++ ) { c [ k ] = <int> ; scanf ( <str> , & N [ k ] ) ; for ( j = <int> ; j < N [ k ] ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( i = <int> ; i < N [ k ] - <int> ; i ++ ) { max = a [ i ] ; for ( j = i + <int> ; j < N [ k ] ; j ++ ) { if ( a [ j ] >= max ) { c [ k ] ++ ; max = a [ j ] ; } else if ( a [ j ] > max ) break ; } } if ( c [ k ] == <int> ) c [ k ] = <int> ; } for ( k = <int> ; k < T ; k ++ ) printf ( <str> , c [ k ] ) ; return <int> ; }", "label": 3, "id": 6447}
{"input": "main ( ) { int t , q ; scanf ( <str> , & t ) ; for ( q = <int> ; q < t ; q ++ ) { int n , i , j , max = <int> ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { a [ i ] [ j ] = - <int> ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( i >= j ) scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( a [ i ] [ j ] != - <int> ) { if ( i < n && j < n ) { if ( j == <int> ) { a [ i + <int> ] [ j ] = a [ i + <int> ] [ j ] + a [ i ] [ j ] ; } if ( j == i ) { a [ i + <int> ] [ j + <int> ] = a [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ; } if ( j != <int> ) { int e = a [ i + <int> ] [ j ] + a [ i ] [ j - <int> ] ; int f = a [ i + <int> ] [ j ] + a [ i ] [ j ] ; if ( e > f ) a [ i + <int> ] [ j ] = e ; else a [ i + <int> ] [ j ] = f ; } } } } } for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] > max ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } }", "label": 0, "id": 6448}
{"input": "int main ( ) { int t , i , temp , hcf , lcm , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; if ( a > b ) { temp = a ; a = b ; b = temp ; } for ( i = a ; i > <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { hcf = i ; break ; } } lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 6449}
{"input": "int main ( ) { int t , n , i , j , sum ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; sum = n ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; i = <int> ; j = <int> ; while ( i < n - <int> && j < n ) { if ( a [ j - <int> ] <= a [ j ] ) { sum ++ ; j ++ ; } else { sum = sum + j - i - <int> ; i = j ; j ++ ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6450}
{"input": "typedef long long int ll ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int arr [ <int> ] ; int i , j ; ll ans = <int> , x = <int> ; for ( i = <int> ; i <= n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; for ( i = <int> ; i <= n ; i ++ ) { int flag = <int> ; for ( j = i ; j < n && flag ; j ++ ) { if ( arr [ j ] <= arr [ j + <int> ] ) x ++ ; else { ans += ( x * ( x + <int> ) ) / <int> ; i = j ; x = <int> ; flag = <int> ; } } } printf ( <str> , ans + n ) ; } }", "label": 1, "id": 6451}
{"input": "static int sum [ <int> ] [ <int> ] , num [ <int> ] [ <int> ] , check , row , max ; int main ( void ) { int t , i , j , ans ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; } } max = <int> ; sum [ <int> ] [ <int> ] = num [ <int> ] [ <int> ] ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + num [ i ] [ j ] ; } else if ( j == i ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + num [ i ] [ j ] ; } else { if ( sum [ i - <int> ] [ j - <int> ] > sum [ i - <int> ] [ j ] ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + num [ i ] [ j ] ; } else { sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + num [ i ] [ j ] ; } } } } for ( j = <int> ; j < row ; j ++ ) { if ( max < sum [ row - <int> ] [ j ] ) { max = sum [ row - <int> ] [ j ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 6452}
{"input": "int main ( ) { int t ; long int a , b , r , x , y , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( y != <int> ) { r = x % y ; x = y ; y = r ; } g = x ; l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 6453}
{"input": "int main ( ) { int t , i , n , m , a , b , gcd , lcm ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n , & m ) ; a = n ; b = m ; while ( n != m ) { if ( n < m ) m = m - n ; else if ( n > m ) n = n - m ; else if ( n == m ) break ; } gcd = n ; lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6454}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a , b , i , ans = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= n ; i ++ ) { ans ^= i ; } printf ( <str> , ans ) ; } }", "label": 2, "id": 6455}
{"input": "int n , m ; int main ( ) { int test_cases ; int a [ <int> ] [ <int> ] ; int i , j , k ; scanf ( <str> , & test_cases ) ; while ( test_cases -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; printf ( <str> , findmax ( a , <int> , <int> ) ) ; } return <int> ; } int findmax ( int ( * a ) [ <int> ] , int x , int y ) { while ( n >= <int> ) { if ( n == <int> ) return a [ <int> ] [ <int> ] ; else { for ( m = <int> ; m <= n ; m ++ ) { if ( a [ n ] [ m ] > a [ n ] [ m + <int> ] ) a [ n - <int> ] [ m ] += a [ n ] [ m ] ; else a [ n - <int> ] [ m ] += a [ n ] [ m + <int> ] ; } } n -- ; } }", "label": 1, "id": 6456}
{"input": "int fastint ( ) { char c ; int num = <int> ; c = getchar_unlocked ( ) ; while ( c == <char> || c == <char> ) c = getchar_unlocked ( ) ; while ( c >= <int> && c <= <int> ) { num = num * <int> + c - <char> ; c = getchar_unlocked ( ) ; } return num ; } int main ( ) { int tc , n , i , j ; tc = fastint ( ) ; int ar [ <int> ] [ <int> ] ; while ( tc > <int> ) { for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) ar [ i ] [ j ] = <int> ; n = fastint ( ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { ar [ i ] [ j ] = fastint ( ) ; } } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { int mx = ar [ i - <int> ] [ j - <int> ] > ar [ i - <int> ] [ j ] ? ar [ i - <int> ] [ j - <int> ] : ar [ i - <int> ] [ j ] ; ar [ i ] [ j ] += mx ; } } int mx = <int> ; for ( i = <int> ; i <= n ; i ++ ) { if ( ar [ n ] [ i ] > mx ) mx = ar [ n ] [ i ] ; } printf ( <str> , mx ) ; tc -- ; } return <int> ; }", "label": 0, "id": 6457}
{"input": "int main ( ) { int i , j , t , n ; int arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] + ( ( arr [ i + <int> ] [ j ] ) > ( arr [ i + <int> ] [ j + <int> ] ) ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6458}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b , mul , result = <int> ; scanf ( <str> , & a , & b ) ; result = gcd ( a , b ) ; mul = a * b ; printf ( <str> , result , ( mul / result ) ) ; } return <int> ; }", "label": 1, "id": 6459}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n , c = <int> , a [ <int> ] , i , j , flag = <int> , min ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { c ++ ; min = a [ i ] ; for ( j = i + <int> ; j < n ; j ++ ) { if ( min <= a [ j ] ) { c ++ ; min = a [ j ] ; } else { break ; } } } printf ( <str> , c ) ; } }", "label": 0, "id": 6460}
{"input": "int main ( ) { int i , j , A [ <int> ] [ <int> ] , T , N ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; for ( i = N - <int> ; i > - <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] += A [ i + <int> ] [ j ] > A [ i + <int> ] [ j + <int> ] ? A [ i + <int> ] [ j ] : A [ i + <int> ] [ j + <int> ] ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6461}
{"input": "int main ( void ) { int t , k = <int> , sum = <int> , i , first ; long a [ <int> ] , n ; scanf ( <str> , & t ) ; while ( k < t ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; first = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < first ) { sum = sum + a [ i ] ; first = a [ i ] ; } else sum = sum + first ; } printf ( <str> , sum ) ; k ++ ; } return <int> ; }", "label": 1, "id": 6462}
{"input": "int main ( void ) { int n , arr [ <int> ] [ <int> ] , i , j , row ; scanf ( <str> , & n ) ; for ( ; n > <int> ; n -- ) { scanf ( <str> , & row ) ; for ( i = <int> ; i < row ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; for ( i = row - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ) arr [ i ] [ j ] += arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] += arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 6463}
{"input": "int cell [ <int> ] [ <int> ] ; int cache [ <int> ] [ <int> ] , n = <int> ; int max ( int t1 , int t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; } int solve ( int i , int j ) { if ( i >= n ) return <int> ; if ( cache [ i ] [ j ] > - <int> ) return cache [ i ] [ j ] ; int t1 = solve ( i + <int> , j ) ; int t2 = solve ( i + <int> , j + <int> ) ; int t = max ( t1 , t2 ) + cell [ i ] [ j ] ; cache [ i ] [ j ] = t ; return t ; } int main ( ) { int testcases ; scanf ( <str> , & testcases ) ; int solved [ testcases ] ; int z = <int> ; z = <int> ; while ( z < testcases ) { scanf ( <str> , & n ) ; int i = <int> , j = <int> , k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( k = <int> ; k < j ; k ++ ) { scanf ( <str> , & cell [ i ] [ k ] ) ; } j ++ ; } for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) cache [ i ] [ j ] = - <int> ; solved [ z ] = solve ( <int> , <int> ) ; z ++ ; } int i = <int> ; for ( i = <int> ; i < testcases ; i ++ ) printf ( <str> , solved [ i ] ) ; return <int> ; }", "label": 0, "id": 6464}
{"input": "int GCD ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return GCD ( a - b , b ) ; return GCD ( a , b - a ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; int x , y , gcd ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & x , & y ) ; gcd = GCD ( x , y ) ; printf ( <str> , gcd , ( x * y ) / gcd ) ; gcd = <int> ; } }", "label": 1, "id": 6465}
{"input": "int main ( void ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] , b [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; int sum = a [ <int> ] [ <int> ] , max = <int> , k = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( i == n - <int> ) { max = a [ i ] [ k ] > a [ i ] [ k + <int> ] ? a [ i ] [ k ] : a [ i ] [ k + <int> ] ; sum += max ; break ; } if ( ( ( a [ i + <int> ] [ k ] + a [ i ] [ k ] ) > ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) && ( a [ i + <int> ] [ k ] + a [ i ] [ k ] ) > ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) ) || ( ( a [ i ] [ k ] + a [ i + <int> ] [ k + <int> ] ) > ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) && ( a [ i ] [ k ] + a [ i + <int> ] [ k + <int> ] ) > ( a [ i + <int> ] [ k + <int> ] + a [ i ] [ k + <int> ] ) ) ) { max = a [ i ] [ k ] ; } else { max = a [ i ] [ k + <int> ] ; ++ k ; } sum = sum + max ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6466}
{"input": "int main ( ) { setbuf ( stdin , NULL ) ; int t , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & b ) ; printf ( <str> , <unk> ( b ) ) ; } return <int> ; } int <unk> ( b ) { int <unk> = <int> ; if ( b < <int> ) { return <int> ; } else { <unk> = b / <int> ; b -= <unk> * <int> ; <unk> = <unk> * <unk> ; return <unk> + <int> * <unk> ( b ) ; } }", "label": 1, "id": 6467}
{"input": "int main ( ) { int n , k , l , i , j , a [ <int> ] [ <int> ] , max , ans [ <int> ] ; scanf ( <str> , & k ) ; for ( l = <int> ; l <= k ; l ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) a [ i + <int> ] [ j ] += a [ i ] [ j ] ; if ( j == i ) a [ i + <int> ] [ j + <int> ] += a [ i ] [ j ] ; if ( j < i ) a [ i + <int> ] [ j + <int> ] += ( ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ) ; } } max = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( max < a [ n - <int> ] [ i ] ) max = a [ n - <int> ] [ i ] ; } ans [ l ] = max ; } for ( i = <int> ; i < k ; i ++ ) printf ( <str> , ans [ i ] ) ; printf ( <str> ) ; return <int> ; }", "label": 1, "id": 6468}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) ) ; printf ( <str> , lcm ( a , b ) ) ; } return <int> ; } int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( ( a * b ) / gcd ( a , b ) ) ; }", "label": 1, "id": 6469}
{"input": "int main ( ) { int t , a [ <int> ] , s , max , n , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { s = <int> ; max = - <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( max < a [ j ] ) max = a [ j ] ; s = s + a [ j ] ; } printf ( <str> , s - max ) ; } return <int> ; }", "label": 1, "id": 6470}
{"input": "int main ( void ) { int n , i ; scanf ( <str> , & n ) ; unsigned long long int a , b , gcd , lcm , rem , num , den ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } gcd = den ; lcm = a * ( b / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 6471}
{"input": "long long deletion ( long long [ ] , long long , long long ) ; int main ( void ) { long long t , n , a [ <int> ] , i , j , cost = { <int> } , k , min ; si ( t ) ; for ( i = <int> ; i < t ; i ++ ) { si ( n ) ; for ( j = <int> ; j < n ; j ++ ) si ( a [ j ] ) ; cost = <int> ; min = <int> ; while ( n != <int> ) { min = <int> ; for ( j = <int> ; j < n ; j ++ ) if ( a [ j ] < a [ min ] ) min = j ; cost += a [ min ] ; if ( min != n - <int> || min != <int> ) if ( a [ min - <int> ] >= a [ min + <int> ] ) n = deletion ( a , n , ( min - <int> ) ) ; else n = deletion ( a , n , ( min + <int> ) ) ; else if ( min == <int> ) n = deletion ( a , n , <int> ) ; else n = deletion ( a , n , ( n - <int> ) ) ; } printf ( <str> , cost ) ; } return <int> ; } long long deletion ( long long a [ ] , long long n , long long pos ) { int i ; for ( i = pos ; i < n - <int> ; i ++ ) { a [ i ] = a [ i + <int> ] ; } n -- ; return n ; }", "label": 2, "id": 6472}
{"input": "int main ( ) { int t ; long int a , b , i , g , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = a < b ? a : b ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } } printf ( <str> , g , ( a * b ) / g ) ; } return <int> ; }", "label": 2, "id": 6473}
{"input": "int main ( void ) { long long int t ; scanf ( <str> , & t ) ; long long int a [ t ] , i , j , k , count , ans , sum , h = <int> ; for ( i = <int> ; i < t ; i ++ ) { count = <int> ; sum = <int> ; h = <int> ; scanf ( <str> , & a [ i ] ) ; long long int b [ a [ i ] ] ; for ( j = <int> ; j < a [ i ] ; j ++ ) { scanf ( <str> , & b [ j ] ) ; } if ( a [ i ] == <int> ) { printf ( <str> ) ; } else { for ( j = <int> ; j < a [ i ] ; j ++ ) { count = <int> ; h = <int> ; ans = <int> ; for ( k = j ; k < a [ i ] - <int> ; k ++ ) { if ( b [ k ] <= b [ k + <int> ] ) { count ++ ; ans = count * ( count + <int> ) / <int> ; if ( k == a [ i ] - <int> ) { h = <int> ; } } else { j = k ; break ; } } sum = sum + ans ; if ( h == <int> ) { break ; } } printf ( <str> , sum + a [ i ] ) ; } } return <int> ; }", "label": 0, "id": 6474}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a [ <int> ] [ <int> ] , i , j , diff ; long long int sum = <int> , n ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { j = <int> ; for ( j = <int> ; j <= i ; i ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum = a [ <int> ] [ <int> ] ; j = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { sum = sum + a [ i ] [ j ] ; } else if ( a [ i ] [ j ] < a [ i ] [ j + <int> ] ) { sum = sum + a [ i ] [ j + <int> ] ; j ++ ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 6475}
{"input": "int main ( ) { int t , i , n , j , min , out [ <int> ] , arr [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { min = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( arr [ j ] < min ) { min = arr [ j ] ; } } out [ i ] = min * ( n - <int> ) ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , out [ i ] ) ; } }", "label": 0, "id": 6476}
{"input": "int main ( ) { unsigned short int tests ; int a , b , max , min , mod ; scanf ( <str> , & tests ) ; while ( tests -- ) { scanf ( <str> , & a , & b ) ; max = ( a > b ? a : b ) ; min = ( a < b ? a : b ) ; mod = max % min ; while ( mod ) { max = min ; min = mod ; mod = max % min ; } printf ( <str> , min , ( ( a * b ) / min ) ) ; } return <int> ; }", "label": 1, "id": 6477}
{"input": "int i ; int main ( ) { int t , a , b , val ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; val = a <= b ? a : b ; for ( i = val ; i >= <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) { printf ( <str> , i ) ; break ; } } val = a >= b ? a : b ; for ( i = <int> ; ; i ++ ) { if ( ( val * i % a ) == <int> ) { printf ( <str> , val * i ) ; break ; } } } }", "label": 2, "id": 6478}
{"input": "int c , d ; void fact ( int [ <int> ] [ <int> ] , int , int , int ) ; int main ( void ) { int k [ <int> ] [ <int> ] , f = <int> , g = <int> , j , z , l , m , h ; scanf ( <str> , & z ) ; for ( j = <int> ; j < z ; j ++ ) ; { scanf ( <str> , & h ) ; for ( l = <int> ; l <= h ; l ++ ) { for ( m = <int> ; m <= l ; m ++ ) { scanf ( <str> , & k [ l ] [ m ] ) ; } } fact ( k , f , g , h ) ; printf ( <str> , d ) ; } return <int> ; } void fact ( int s [ <int> ] [ <int> ] , int a , int b , int n ) { while ( a <= n ) { c += s [ a ] [ b ] ; if ( b == n ) { if ( c > d ) d = c ; return ; } if ( b > a ) return ; fact ( s , a + <int> , b , n ) ; fact ( s , a + <int> , b + <int> , n ) ; } }", "label": 2, "id": 6479}
{"input": "char inbuffer [ BS ] ; int incount = <int> ; int bufsize = <int> ; char outBuffer [ BS ] ; int outcount = <int> ; int fastread ( ) { long int r = <int> ; int s = <int> ; while ( <int> ) { if ( incount >= bufsize ) { bufsize = read ( <int> , inbuffer , BS ) ; incount = <int> ; } if ( inbuffer [ incount ] < <int> ) { if ( s ) incount ++ ; else { return r ; } } else { s = <int> ; r = r * <int> + inbuffer [ incount ++ ] - <int> ; } } } void recursiveOutNum ( int num ) { if ( num && num < <int> ) { outBuffer [ outcount ++ ] = <char> + num ; } else { int count = <int> , i ; long int temp ; temp = num ; while ( temp ) { temp = temp / <int> ; count ++ ; } for ( i = outcount + count - <int> ; i >= outcount ; i -- ) { outBuffer [ i ] = <char> + num ; num = num / <int> ; } outcount += count ; } } void flush ( ) { write ( <int> , outBuffer , outcount ) ; outcount = <int> ; } int main ( ) { int n , N ; n = fastread ( ) ; int * array [ <int> ] ; int i = <int> , j , k , l ; int up , left ; while ( i < n ) { N = fastread ( ) ; for ( j = <int> ; j <= N ; j ++ ) { array [ j - <int> ] = ( int * ) malloc ( j * sizeof ( int ) ) ; for ( k = <int> ; k < j ; k ++ ) array [ j - <int> ] [ k ] = fastread ( ) ; } for ( j = <int> ; j < N ; j ++ ) { for ( k = <int> ; k < j ; k ++ ) { if ( k == <int> ) { array [ j ] [ k ] += array [ j - <int> ] [ k ] ; } else if ( k > <int> && k < j - <int> ) { up = array [ j ] [ k ] + array [ j - <int> ] [ k ] ; left = array [ j ] [ k ] + array [ j - <int> ] [ k - <int> ] ; if ( up >= left ) array [ j ] [ k ] = up ; else array [ j ] [ k ] = left ; } else if ( k == j - <int> ) { array [ j ] [ k ] += array [ j - <int> ] [ k - <int> ] ; } } } if ( N > <int> ) { int max = - <int> ; for ( k = <int> ; k < j ; k ++ ) { if ( array [ N - <int> ] [ k ] > max ) max = array [ N - <int> ] [ k ] ; } recursiveOutNum ( max ) ; outBuffer [ outcount ++ ] = <char> ; } i ++ ; } flush ( ) ; return <int> ; }", "label": 1, "id": 6480}
{"input": "int max ; void recur ( int * * p , int r , int i , int j , int sum ) { if ( i == r - <int> ) { if ( sum > max ) max = sum ; return ; } recur ( p , r , i + <int> , j , sum + p [ i + <int> ] [ j ] ) ; if ( j < i ) recur ( p , r , i + <int> , j + <int> , sum + p [ i + <int> ] [ j + <int> ] ) ; } int main ( ) { int t , r , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & r ) ; int * * p ; * p = ( int * ) ( malloc ( r * sizeof ( int ) ) ) ; for ( i = <int> ; i < r ; i ++ ) p [ i ] = ( int * ) ( malloc ( ( i + <int> ) * sizeof ( int ) ) ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & p [ i ] [ j ] ) ; } } int sum = p [ <int> ] [ <int> ] ; max = <int> ; recur ( p , r , <int> , <int> , sum ) ; printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 6481}
{"input": "char rows_count ; char a [ <int> ] ; int sum ( char n , char r ) { int s1 , s2 ; if ( r == rows_count ) { return a [ n ] ; } else { s1 = sum ( n + r , r + <int> ) ; s2 = sum ( n + r + <int> , r + <int> ) ; if ( s1 > s2 ) { return a [ n ] + s1 ; } else { return a [ n ] + s2 ; } } } int main ( ) { int t , j , i , k ; char s [ <int> ] ; char * c ; char last_char ; char num_idx ; scanf ( <str> , & t ) ; for ( j = <int> ; j < t ; j ++ ) { scanf ( <str> , & rows_count ) ; num_idx = <int> ; memset ( a , <int> , <int> ) ; for ( i = <int> ; i < rows_count ; i ++ ) { for ( k = <int> ; k < i + <int> ; k ++ ) { scanf ( <str> , & ( a [ num_idx ++ ] ) ) ; } } printf ( <str> , sum ( <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 6482}
{"input": "int main ( ) { int t , a , b , tem , c1 , c2 , f , temp , q1 , q2 ; scanf ( <str> , & t ) ; while ( t -- ) { f = <int> ; scanf ( <str> , & a , & b ) ; if ( b > a ) { temp = a ; a = b ; b = temp ; } tem = b ; while ( tem > <int> ) { c1 = b % tem ; if ( c1 == <int> ) { c2 = a % tem ; if ( c2 == <int> ) f = <int> ; } if ( f == <int> ) break ; tem -- ; } printf ( <str> , tem , ( a * b ) / tem ) ; printf ( <str> ) ; } }", "label": 1, "id": 6483}
{"input": "unsigned int tri [ <int> ] [ <int> ] ; int main ( ) { unsigned int n , l , i , j , total ; scanf ( <str> , & n ) ; while ( n > <int> ) { total = <int> ; scanf ( <str> , & l ) ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tri [ i ] [ j ] ) ; if ( j > <int> && i > <int> && j < i ) { tri [ i ] [ j ] += tri [ i - <int> ] [ j - <int> ] > tri [ i - <int> ] [ j ] ? tri [ i - <int> ] [ j - <int> ] : tri [ i - <int> ] [ j ] ; } else if ( j == <int> ) { tri [ i ] [ j ] += tri [ i - <int> ] [ <int> ] ; } else if ( j = i ) { tri [ i ] [ j ] += tri [ i - i ] [ j - <int> ] ; } } for ( i = <int> ; i < l ; i ++ ) { total = total > tri [ l - <int> ] [ i ] ? total : tri [ l - <int> ] [ i ] ; } printf ( <str> , total ) ; n -- ; } return <int> ; }", "label": 3, "id": 6484}
{"input": "int main ( ) { int t , a , b , g , l , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; for ( i = ( a < b ? a : b ) ; i >= <int> ; i -- ) { if ( a % i == <int> ) { if ( b % i == <int> ) { g = i ; break ; } } } l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 6485}
{"input": "int main ( ) { int t , i , n , a , min ; long long int cost ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( a < min ) { min = a ; } } cost = min * ( n - <int> ) ; printf ( <str> , cost ) ; } return <int> ; }", "label": 0, "id": 6486}
{"input": "long long int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } main ( ) { int t , a , b ; long long int gcd1 , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gcd1 = gcd ( a , b ) ; lcm = ( a * b ) / gcd1 ; printf ( <str> , gcd1 ) ; printf ( <str> ) ; printf ( <str> , lcm ) ; } }", "label": 1, "id": 6487}
{"input": "void main ( ) { long long int i , j , n , a [ <int> ] , s [ <int> ] ; int t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { s [ i ] = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) a [ j + <int> ] = a [ j ] ; s [ i ] = s [ i ] + a [ j + <int> ] ; } } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , s [ i ] ) ; return <int> ; }", "label": 1, "id": 6488}
{"input": "int main ( ) { int a , b , gcd , lcm , t , rem , n1 , n2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; n1 = a ; n2 = b ; rem = n1 % n2 ; while ( rem != <int> ) { n1 = n2 ; n2 = rem ; rem = n1 % n2 ; } printf ( <str> , n2 , ( a * b ) / n2 ) ; } }", "label": 1, "id": 6489}
{"input": "int arr [ <int> ] [ <int> ] , N ; int main ( ) { int T , ans , n , m ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( m = <int> ; m < N ; m ++ ) { for ( n = <int> ; n <= m ; n ++ ) scanf ( <str> , & arr [ m ] [ n ] ) ; } int val ; for ( n = N - <int> ; n >= <int> ; n -- ) { for ( m = <int> ; m < n ; m ++ ) { val = max ( arr [ n ] [ m ] , arr [ n ] [ m + <int> ] ) ; arr [ n - <int> ] [ m ] += val ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; free ( arr ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 3, "id": 6490}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j , sum [ <int> ] , temp1 , temp2 ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j - <int> >= <int> && j < i ) { temp1 = a [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; temp2 = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; if ( temp1 > temp2 ) { a [ i ] [ j ] = temp1 ; } else { a [ i ] [ j ] = temp2 ; } } else if ( j - <int> == - <int> ) { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else { a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; } } } temp1 = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] > a [ n - <int> ] [ temp1 ] ) { temp1 = i ; } } printf ( <str> , a [ n - <int> ] [ temp1 ] ) ; } return <int> ; }", "label": 0, "id": 6491}
{"input": "int main ( ) { int t , i , n , j , k , x ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = n - <int> ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j + <int> ; k ++ ) { if ( a [ j + <int> ] [ k ] > a [ j + <int> ] [ k + <int> ] ) x = a [ j + <int> ] [ k ] ; else x = a [ j + <int> ] [ k + <int> ] ; a [ j ] [ k ] += x ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6492}
{"input": "int a [ <int> ] [ <int> ] ; int max ( int i , int j ) { return ( i > j ) ? i : j ; } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] + max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6493}
{"input": "void sums ( void ) { int tests ; scanf ( <str> , & tests ) ; while ( tests -- ) { int num_lines ; int array [ <int> ] [ <int> ] ; int <unk> [ <int> ] [ <int> ] ; int i ; int j ; scanf ( <str> , & num_lines ) ; for ( i = <int> ; i < num_lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } <unk> [ <int> ] [ <int> ] = array [ <int> ] [ <int> ] ; for ( i = <int> ; i < num_lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { <unk> [ i ] [ j ] = array [ i ] [ j ] + <unk> [ i - <int> ] [ j ] ; } else { int best = <unk> [ i - <int> ] [ j ] ; if ( <unk> [ i - <int> ] [ j - <int> ] > best ) { best = <unk> [ i - <int> ] [ j - <int> ] ; } <unk> [ i ] [ j ] = array [ i ] [ j ] + best ; } } } int max = <int> ; for ( j = <int> ; j < num_lines ; j ++ ) { if ( <unk> [ num_lines - <int> ] [ j ] > max ) { max = <unk> [ num_lines - <int> ] [ j ] ; } } printf ( <str> , max ) ; } } int main ( int argc , char * * argv ) { sums ( ) ; return <int> ; }", "label": 1, "id": 6494}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , sum [ <int> ] [ <int> ] , max , k , i , j , p ; scanf ( <str> , & t ) ; while ( t -- ) { max = - <int> ; k = <int> ; p = <int> ; sum [ <int> ] [ <int> ] = <int> ; a [ <int> ] [ <int> ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; if ( n < <int> ) { printf ( <str> , sum [ <int> ] [ <int> ] ) ; } else { for ( i = <int> ; i < n ; i ++ ) { p = p * <int> ; for ( j = <int> ; j < p ; j ++ ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j / <int> ] + a [ i ] [ j / <int> ] ; if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } } printf ( <str> , max ) ; } } return <int> ; }", "label": 3, "id": 6495}
{"input": "static inline int max ( int a , int b ) { return a > b ? a : b ; } int <unk> ( int a [ ] , int <unk> ) { int i , <unk> = <int> ; for ( i = <int> ; i < <unk> ; i ++ ) <unk> = max ( <unk> , a [ i ] ) ; return <unk> ; } int main ( ) { int numberOfTestCases ; int numberOfRows ; int rowIndex ; int <unk> ; int <unk> [ <unk> ] ; int <unk> ; int <unk> ; int <unk> ; int i ; scanf ( <str> , & numberOfTestCases ) ; printf ( <str> , numberOfTestCases ) ; while ( numberOfTestCases -- ) { scanf ( <str> , & numberOfRows ) ; printf ( <str> , numberOfTestCases , numberOfRows ) ; for ( i = <int> ; i < <unk> ; i ++ ) <unk> [ i ] = <int> ; for ( rowIndex = <int> ; rowIndex < numberOfRows ; rowIndex ++ ) { for ( <unk> = <int> ; <unk> <= rowIndex ; <unk> ++ ) { scanf ( <str> , & <unk> ) ; <unk> = ( numberOfRows - rowIndex + <unk> ) % ( numberOfRows + <int> ) ; <unk> = ( <unk> + <int> ) % ( numberOfRows + <int> ) ; <unk> [ <unk> ] = max ( <unk> [ <unk> ] , <unk> [ <unk> ] ) + <unk> ; printf ( <str> , <unk> [ <unk> ] ) ; } printf ( <str> ) ; } printf ( <str> , <unk> ( <unk> , <unk> ) ) ; printf ( <str> , <unk> ( <unk> , <unk> ) ) ; } return <int> ; }", "label": 1, "id": 6496}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int a , b [ <int> ] , i ; scanf ( <str> , & a ) ; for ( i = <int> ; i <= a ; i ++ ) { scanf ( <str> , & b [ i ] ) ; } long long int min , s = <int> ; min = b [ <int> ] ; for ( i = <int> ; i <= a ; i ++ ) { if ( min > b [ i ] ) min = b [ i ] ; s = s + min ; } printf ( <str> , s ) ; } return <int> ; }", "label": 1, "id": 6497}
{"input": "int a [ max ] [ max ] ; int b [ max ] ; int main ( ) { int c , d , t = <int> , e , n , m , f , g , h , i ; scanf ( <str> , & c ) ; for ( d = <int> ; d <= c ; d ++ ) { scanf ( <str> , & e ) ; for ( m = <int> ; m < e ; m ++ ) { for ( n = <int> ; n <= m ; n ++ ) scanf ( <str> , & a [ m ] [ n ] ) ; } for ( f = e - <int> ; f > <int> ; f -- ) { for ( g = <int> ; g < f ; g ++ ) { h = a [ f ] [ g ] + a [ f - <int> ] [ g ] ; i = a [ f ] [ g + <int> ] + a [ f - <int> ] [ g ] ; if ( h > i ) a [ f - <int> ] [ g ] = h ; else a [ f - <int> ] [ g ] = i ; } } b [ t ] = a [ <int> ] [ <int> ] ; t ++ ; } printf ( <str> ) ; for ( h = <int> ; h < c ; h ++ ) { printf ( <str> , b [ h ] ) ; } return <int> ; }", "label": 1, "id": 6498}
{"input": "int num [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & num [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { num [ i ] [ j ] = num [ i ] [ j ] + max ( num [ i + <int> ] [ j ] , num [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , num [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6499}
{"input": "void main ( ) { int t , n , d , r , num1 , num2 , gcd , lcm ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { n = num1 ; d = num2 ; } else { n = num2 ; d = num1 ; } r = n % d ; while ( r != <int> ) { n = d ; d = r ; r = n % d ; } gcd = d ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6500}
{"input": "int maxi ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; long int ar [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } long int max = - <int> ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) ar [ i ] [ j ] += ar [ i - <int> ] [ j ] ; else if ( i == j ) ar [ i ] [ j ] += ar [ i - <int> ] [ j - <int> ] ; else ar [ i ] [ j ] += maxi ( ar [ i - <int> ] [ j ] , ar [ i - <int> ] [ j - <int> ] ) ; } } for ( int i = <int> ; i < n ; i ++ ) { if ( ar [ n - <int> ] [ i ] > max ) max = ar [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6501}
{"input": "int main ( ) { int a , b , c , i , n , prod , gcd , lcm , num , den , rem ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; prod = a * b ; rem = a % b ; while ( rem != <int> ) { a = den ; b = rem ; rem = a % b ; } printf ( <str> , b , prod / b ) ; } return <int> ; }", "label": 1, "id": 6502}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- != <int> ) { takeInput ( ) ; } return <int> ; } int ROWS , COLS ; void takeInput ( ) { int i , j ; int l ; scanf ( <str> , & l ) ; ROWS = COLS = l ; int A [ l ] [ l ] ; for ( i = <int> ; i < l ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & A [ i ] [ j ] ) ; int sum = recFun ( A , <int> , <int> , A [ <int> ] [ <int> ] , l - <int> ) ; printf ( <str> , sum ) ; } int recFun ( int A [ ROWS ] [ COLS ] , int i , int j , int sum , int l ) { static int max_sum = <int> ; if ( i == l ) { if ( sum > max_sum ) max_sum = sum ; } else { recFun ( A , i + <int> , j , sum + A [ i + <int> ] [ j ] , l ) ; recFun ( A , i + <int> , j + <int> , sum + A [ i + <int> ] [ j + <int> ] , l ) ; } return max_sum ; }", "label": 2, "id": 6503}
{"input": "long int ar [ <int> ] ; main ( ) { long int i , j , k , t , n , temp1 , sum = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ar [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { if ( i == <int> ) continue ; else { if ( ar [ i ] > ar [ i - <int> ] ) { sum = sum + ar [ i - <int> ] ; ar [ i ] = ar [ i - <int> ] ; } else if ( ar [ i - <int> ] > ar [ i ] ) sum = sum + ar [ i ] ; } } printf ( <str> , sum ) ; sum = <int> ; } return <int> ; }", "label": 1, "id": 6504}
{"input": "int main ( ) { int max_sum [ <int> ] [ <int> ] ; int flag_a = <int> ; int flag_b = <int> ; int result [ <int> ] = { <int> } ; int input , temp ; int total_cases , total_inputs ; int i , row , column , j , k ; scanf ( <str> , & total_cases ) ; { } for ( i = <int> ; i < total_cases ; i ++ ) { for ( k = <int> ; k < <int> ; k ++ ) { max_sum [ <int> ] [ k ] = <int> ; max_sum [ <int> ] [ k ] = <int> ; } scanf ( <str> , & total_inputs ) ; for ( row = <int> ; row <= total_inputs ; row ++ ) { for ( column = <int> ; column < row ; column ++ ) { scanf ( <str> , & input ) ; if ( column != <int> ) { if ( max_sum [ flag_a ] [ column ] > max_sum [ flag_a ] [ column - <int> ] ) max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column ] ; else max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column - <int> ] ; } if ( column == <int> ) max_sum [ flag_b ] [ column ] = input + max_sum [ flag_a ] [ column ] ; } temp = flag_a ; flag_a = flag_b ; flag_b = temp ; } int max = <int> ; for ( j = <int> ; j < total_inputs ; j ++ ) { if ( max_sum [ flag_a ] [ j ] > max ) max = max_sum [ flag_a ] [ j ] ; } result [ i ] = max ; } for ( i = <int> ; i < total_cases ; i ++ ) { printf ( <str> , result [ i ] ) ; } return <int> ; }", "label": 3, "id": 6505}
{"input": "int main ( void ) { int t , n ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( int j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } int max1 = a [ <int> ] ; for ( int k = <int> ; k < n ; k ++ ) { if ( a [ k ] > max1 ) { max1 = a [ k ] ; } } int max2 = a [ <int> ] ; for ( int l = <int> ; l < n ; l ++ ) { if ( a [ l ] > max2 && a [ l ] < max1 ) { max2 = a [ l ] ; } } printf ( <str> , max2 ) ; } return <int> ; }", "label": 1, "id": 6506}
{"input": "int scanInt ( ) { register int retInt = <int> , d ; while ( ( d = getchar ( ) ) >= <char> ) { retInt = ( retInt << <int> ) + ( retInt << <int> ) + ( d - <char> ) ; } return retInt ; } struct node { unsigned int length ; unsigned int * a ; unsigned int * b ; } ; int main ( void ) { register unsigned int testcase = <int> , i = <int> , j = <int> , k = <int> ; unsigned int * ans ; testcase = scanInt ( ) ; if ( testcase <= <int> ) { ans = ( int * ) malloc ( testcase * sizeof ( int ) ) ; for ( i = <int> ; i < testcase ; i ++ ) { struct node c ; c <fp> a = NULL ; c <fp> b = NULL ; c <fp> length = scanInt ( ) ; if ( c <fp> length < <int> ) { for ( j = <int> ; j < c <fp> length ; j ++ ) { c <fp> a = ( int * ) malloc ( ( j + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= j ; k ++ ) { int temp = scanInt ( ) ; if ( temp >= <int> && temp <= <int> ) { if ( j == <int> ) c <fp> a [ k ] = temp ; else { if ( k == <int> ) { c <fp> a [ k ] = c <fp> b [ k ] + temp ; } else { if ( j == k ) { c <fp> a [ k ] = c <fp> b [ k - <int> ] + temp ; } else { unsigned int total = temp ; unsigned int a1 = ( c <fp> b [ k - <int> ] + total ) ; unsigned int a2 = ( c <fp> b [ k ] + total ) ; c <fp> a [ k ] = ( a1 < a2 ) ? a2 : a1 ; } } } } else exit ( <int> ) ; } c <fp> b = c <fp> a ; c <fp> a = NULL ; } ans [ i ] = <int> ; j = c <fp> length - <int> ; k = <int> ; while ( k < c <fp> length ) { if ( ans [ i ] < c <fp> b [ k ] ) ans [ i ] = c <fp> b [ k ] ; k ++ ; } } else exit ( <int> ) ; } for ( i = <int> ; i < testcase ; i ++ ) { printf ( <str> , ans [ i ] ) ; } } return <int> ; }", "label": 1, "id": 6507}
{"input": "int a [ <int> ] [ <int> ] , n , i , j , t , x , y ; main ( ) { scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; ) scanf ( <str> , & a [ i ] [ j ++ ] ) ; for ( i -= <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; ) { x = a [ i + <int> ] [ j ] ; y = a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ++ ] += ( x > y ) ? x : y ; } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 6508}
{"input": "int main ( ) { int t , j , i , small , k ; long int sum ; scanf ( <str> , & t ) ; int n ; for ( j = <int> ; j <= t ; j ++ ) { scanf ( <str> , & n ) ; int a [ <int> ] = { } ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } small = a [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( small >= a [ k ] ) small = a [ k ] ; } n -- ; sum = small * n ; printf ( <str> , sum ) ; } }", "label": 0, "id": 6509}
{"input": "int main ( void ) { int i , j , a , b , c , d , n ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a , & b ) ; if ( a < b ) { for ( i = <int> ; i < a ; i ++ ) if ( a % i == <int> ) if ( b % i == <int> ) c = i ; } else if ( b < a ) { for ( i = <int> ; i < b ; i ++ ) if ( b % i == <int> ) if ( a % i == <int> ) c = i ; } d = a * b ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 2, "id": 6510}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int l , i = <int> , j , a , b [ <int> ] , c [ <int> ] , m = <int> ; scanf ( <str> , & l , & a ) ; b [ <int> ] = c [ <int> ] = a ; for ( ; i < l ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a ) ; if ( j == <int> ) c [ <int> ] = a + b [ <int> ] ; else if ( j == i ) c [ i ] = a + b [ i - <int> ] ; else c [ j ] = a + ( ( b [ j ] >= b [ j - <int> ] ) ? b [ j ] : b [ j - <int> ] ) ; } for ( j = <int> ; j <= i ; j ++ ) b [ j ] = c [ j ] ; } for ( i = <int> ; i < l ; i ++ ) if ( m < c [ i ] ) m = c [ i ] ; printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 6511}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int num ; scanf ( <str> , & num ) ; long int * array = ( long int * ) malloc ( num * sizeof ( long int ) ) ; int index = <int> ; while ( index < num ) { scanf ( <str> , array + index ) ; index ++ ; } index = <int> ; long int cont = <int> ; long int cur_sum = <int> ; long int sum = <int> ; for ( ; index < num ; index ++ ) { if ( index == num - <int> ) { sum = sum + cont * ( cont + <int> ) / <int> ; break ; } if ( array [ index ] <= array [ index + <int> ] ) { cont += <int> ; cur_sum = cont * ( cont + <int> ) / <int> ; continue ; } else { cont = <int> ; sum += cur_sum ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6512}
{"input": "int main ( ) { int T , N , a , b , i , j , c = <int> ; int A [ <int> ] ; scanf ( <str> , & T ) ; if ( T >= <int> && T <= <int> ) { for ( a = <int> ; a < T ; a ++ ) { scanf ( <str> , & N ) ; if ( N >= <int> && N <= <int> ) { for ( b = <int> ; b < N ; b ++ ) { scanf ( <str> , & A [ b ] ) ; } for ( i = <int> ; i < N ; i ++ ) { if ( A [ i ] >= A [ i - <int> ] ) c ++ ; } } } printf ( <str> , c + N ) ; } return <int> ; }", "label": 1, "id": 6513}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n1 , n2 , i , gcd ; scanf ( <str> , & n1 , & n2 ) ; for ( i = <int> ; i <= n2 && i <= n1 ; i ++ ) if ( ( ( n1 % i ) == <int> && ( n2 % i ) ) == <int> ) gcd = i ; printf ( <str> , gcd ) ; printf ( <str> , ( n1 * n2 ) / gcd ) ; } return ( <int> ) ; }", "label": 2, "id": 6514}
{"input": "int main ( void ) { int n , b ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & b ) ; int a [ b ] , j , k , count = <int> ; for ( j = <int> ; j < b ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( k = <int> ; k < b - <int> ; k ++ ) { if ( a [ k ] > a [ k + <int> ] ) { count = count + a [ k + <int> ] ; } else if ( a [ k ] <= a [ k + <int> ] ) { count = count + a [ k ] ; } } printf ( <str> , count ) ; count = <int> ; } return ( <int> ) ; }", "label": 1, "id": 6515}
{"input": "void main ( ) { int a [ <int> ] , n , i , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( a [ i ] < a [ i + <int> ] ) { for ( k = i + <int> ; k < n - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; i -- ; } else { for ( k = i ; k < n - <int> ; k ++ ) a [ k ] = a [ k + <int> ] ; i -- ; } n -- ; } printf ( <str> , a [ <int> ] ) ; }", "label": 1, "id": 6516}
{"input": "int Gcd ( int a , int b ) { if ( b == <int> ) { return a ; } else { Gcd ( b , a % b ) ; } } int main ( ) { int k , a , b , i , j , c , l ; scanf ( <str> , & k ) ; while ( k -- ) { scanf ( <str> , & b , & a ) ; if ( a < b ) { l = Gcd ( b , a ) ; } else { l = Gcd ( a , b ) ; } if ( l == <int> ) { c = b * a ; } else { c = l * ( b / l ) * ( a / l ) ; } printf ( <str> , l , c ) ; } return <int> ; }", "label": 1, "id": 6517}
{"input": "long long deletion ( long long [ ] , long long , long long ) ; int main ( void ) { long long t , n , a [ <int> ] , i , j , cost = { <int> } , k , min ; si ( t ) ; for ( i = <int> ; i <= t ; i ++ ) { si ( n ) ; for ( j = <int> ; j < n ; j ++ ) si ( a [ j ] ) ; cost = <int> ; min = <int> ; while ( n != <int> ) { min = <int> ; for ( j = <int> ; j < n ; j ++ ) if ( a [ j ] < a [ min ] ) min = j ; printf ( <str> , a [ min ] , n ) ; cost += a [ min ] ; if ( min != n - <int> || min != <int> ) if ( a [ min - <int> ] >= a [ min + <int> ] ) n = deletion ( a , n , ( min - <int> ) ) ; else n = deletion ( a , n , ( min + <int> ) ) ; else if ( min == <int> ) n = deletion ( a , n , <int> ) ; else n = deletion ( a , n , ( n - <int> ) ) ; } printf ( <str> , cost ) ; } return <int> ; } long long deletion ( long long a [ ] , long long n , long long pos ) { int i ; for ( i = pos ; i < n ; i ++ ) { a [ i ] = a [ i + <int> ] ; } n -- ; return n ; }", "label": 2, "id": 6518}
{"input": "long gcd ( long a , long b ) { if ( a == b ) return a ; else if ( a % b == <int> ) return b ; else if ( b % a == <int> ) return a ; else if ( a > b ) return gcd ( a % b , b ) ; else if ( a < b ) return gcd ( a , b % a ) ; } int main ( ) { int n , i ; long a , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; long g = gcd ( a , b ) ; long l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 6519}
{"input": "void main ( ) { long int t , i , j , n , a [ <int> ] [ <int> ] , temp ; long int sum = <int> , max , k , loc [ <int> ] , loc1 [ <int> ] , var = <int> , var1 = <int> ; int calc [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k < j + <int> ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } j = n - <int> ; max = a [ j ] [ <int> ] ; for ( k = <int> ; k < j + <int> ; k ++ ) { if ( a [ j ] [ k ] > max ) { max = a [ j ] [ k ] ; } } for ( k = <int> ; k < j + <int> ; k ++ ) { if ( max == a [ j ] [ k ] ) { loc1 [ var ] = k ; var ++ ; } } sum += max ; while ( j != <int> ) { var1 = <int> ; k = <int> ; j -- ; while ( k < var ) { temp = loc1 [ k ++ ] ; if ( temp == <int> ) { calc [ var1 ] = a [ j ] [ <int> ] ; loc [ var1 ++ ] = <int> ; } else if ( temp == n - <int> ) { calc [ var1 ] = a [ j ] [ n - <int> ] ; loc [ var1 ++ ] = n - <int> ; } else { if ( a [ j ] [ temp ] > a [ j ] [ temp - <int> ] ) { calc [ var1 ] = a [ j ] [ temp ] ; loc [ var1 ++ ] = temp ; } else if ( a [ j ] [ temp ] < a [ j ] [ temp - <int> ] ) { calc [ var1 ] = a [ j ] [ temp - <int> ] ; loc [ var1 ++ ] = temp - <int> ; } else { calc [ var1 ] = a [ j ] [ temp - <int> ] ; loc [ var1 ++ ] = temp - <int> ; calc [ var1 ] = a [ j ] [ temp ] ; calc [ var1 ++ ] = temp ; } } } max = calc [ <int> ] ; for ( k = <int> ; k < var1 ; k ++ ) { if ( calc [ k ] > max ) { max = calc [ k ] ; } } var = <int> ; for ( k = <int> ; k < var1 ; k ++ ) { if ( max == calc [ k ] ) { loc1 [ var ] = loc [ k ] ; var ++ ; } } sum += max ; } printf ( <str> , sum ) ; sum = <int> ; } }", "label": 1, "id": 6520}
{"input": "int arr [ <int> ] [ <int> ] ; int solve ( int i , int j ) ; int x , t ; int main ( ) { int i , j , result , n ; scanf ( <str> , & n ) ; while ( n ) { scanf ( <str> , & x ) ; for ( i = <int> ; i < x ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } result = solve ( <int> , <int> ) ; printf ( <str> , result ) ; n -- ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int solve ( int i , int j ) { int t1 , t2 ; if ( i >= x ) { return <int> ; } else { t1 = solve ( i + <int> , j ) ; t2 = solve ( i + <int> , j + <int> ) ; t = max ( t1 , t2 ) + arr [ i ] [ j ] ; return t ; } }", "label": 2, "id": 6521}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , b [ <int> ] , i , j , test = <int> , n = <int> ; long int ans ; for ( i = <int> ; i < <int> ; i ++ ) b [ i ] = <int> ; scanf ( <str> , & test ) ; while ( test != <int> ) { scanf ( <str> , & n ) ; while ( n != <int> ) { for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } if ( a [ i ] [ <int> ] > a [ i ] [ <int> ] ) b [ i ] = a [ i ] [ <int> ] ; else b [ i ] = a [ i ] [ <int> ] ; } for ( i = <int> ; i < <int> ; i ++ ) ans += b [ i ] ; printf ( <str> , ans ) ; printf ( <str> ) ; } } return <int> ; }", "label": 2, "id": 6522}
{"input": "void main ( ) { int t ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t > <int> ) { int a , b , n , min , max , t , gcd , lcm ; printf ( <str> ) ; scanf ( <str> , & a , & b ) ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } t = min ; while ( ( max % min ) != <int> ) { min = ( max % min ) ; max = t ; t = min ; } gcd = min ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } if ( ( max % min ) == <int> ) { lcm = max ; } else lcm = max * min ; printf ( <str> , gcd , lcm ) ; t -- ; } }", "label": 2, "id": 6523}
{"input": "int main ( ) { int tests , lines , i , j , t , k ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & tests ) ; while ( tests -- ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = lines - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k < i ; k ++ ) { t = ( a [ i ] [ k ] < a [ i ] [ k + <int> ] ) ? <int> : <int> ; a [ i - <int> ] [ k ] += a [ i ] [ k + t ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6524}
{"input": "int getNumOfPaths ( int numOfRows ) ; int getCurrentBlockSize ( int numOfRows , int currentRow ) ; int main ( ) { int numOfTestCases ; int numOfRows ; int i , j , k , l ; int rowValues [ MAX_VALUES_PER_ROW ] ; int rowIDsBefore [ NUM_OF_ERGS ] ; int ergs [ NUM_OF_ERGS ] ; int rowFillCounter ; int largestPath ; rowIDsBefore [ <int> ] = <int> ; for ( i = <int> ; i < NUM_OF_ERGS ; i ++ ) { ergs [ i ] = <int> ; } scanf ( <str> , & numOfTestCases ) ; for ( i = <int> ; i < numOfTestCases ; i ++ ) { scanf ( <str> , & numOfRows ) ; for ( j = <int> ; j < numOfRows ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & rowValues [ k ] ) ; } rowFillCounter = <int> ; for ( k = <int> ; k < j ; k ++ ) { for ( l = <int> ; l < getCurrentBlockSize ( numOfRows , j + <int> ) ; l ++ , rowFillCounter ++ ) { ergs [ rowFillCounter ] += rowValues [ rowIDsBefore [ k ] ] ; } for ( l = <int> ; l < getCurrentBlockSize ( numOfRows , j + <int> ) ; l ++ , rowFillCounter ++ ) { ergs [ rowFillCounter ] += rowValues [ rowIDsBefore [ k ] + <int> ] ; } } if ( j == <int> ) { for ( l = <int> ; l < getCurrentBlockSize ( numOfRows , j + <int> ) ; l ++ ) { ergs [ l ] = rowValues [ <int> ] ; } } for ( k = j - <int> ; k >= <int> ; k -- ) { rowIDsBefore [ <int> * k ] = rowIDsBefore [ k ] ; rowIDsBefore [ <int> * k + <int> ] = rowIDsBefore [ k ] + <int> ; } } largestPath = ergs [ <int> ] ; for ( j = <int> ; j < getNumOfPaths ( numOfRows ) ; j ++ ) { if ( ergs [ j ] > largestPath ) { largestPath = ergs [ j ] ; } } printf ( <str> , largestPath ) ; } return <int> ; } int getNumOfPaths ( int numOfRows ) { int erg = <int> ; int i ; for ( i = <int> ; i < numOfRows ; i ++ ) { erg = erg * <int> ; } return erg ; } int getCurrentBlockSize ( int numOfRows , int currentRow ) { int erg = <int> ; int i ; for ( i = <int> ; i < numOfRows - currentRow + <int> ; i ++ ) { erg = erg * <int> ; } return erg ; }", "label": 1, "id": 6525}
{"input": "int main ( ) { int t , n , i , j , arr [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( arr [ i ] [ j ] < arr [ i ] [ j + <int> ] ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i + <int> ] [ j + <int> ] ; } } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; return <int> ; }", "label": 1, "id": 6526}
{"input": "int main ( ) { long int a [ <int> ] , n , i ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { int small = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i ) { if ( small > a [ i ] ) small = a [ i ] ; } else small = a [ <int> ] ; } printf ( <str> , small * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6527}
{"input": "static int max = <int> ; unsigned long fast_in ( ) { char fast_c ; unsigned long fast_j ; for ( fast_c = getchar ( ) ; fast_c < <char> || fast_c > <char> ; fast_c = getchar ( ) ) ; for ( fast_j = <int> ; fast_c >= <char> && fast_c <= <char> ; fast_c = getchar ( ) ) fast_j = ( fast_j << <int> ) + ( fast_j << <int> ) + ( fast_c - <char> ) ; return fast_j ; } int main ( ) { int t , n , max , i , j ; int sum [ <int> ] [ <int> ] , a [ <int> ] [ <int> ] ; t = fast_in ( ) ; while ( t -- ) { n = fast_in ( ) ; a [ <int> ] [ <int> ] = fast_in ( ) ; sum [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; max = sum [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] = fast_in ( ) ; if ( j == <int> ) sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else { if ( sum [ i - <int> ] [ j ] > sum [ i - <int> ] [ j - <int> ] ) { sum [ i ] [ j ] = sum [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { sum [ i ] [ j ] = sum [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } } if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6528}
{"input": "int main ( ) { int t , row , i , j , k , l , max , count = <int> , arr [ <int> ] [ <int> ] ; scanf ( <str> , t ) ; while ( t -- ) { scanf ( <str> , row ) ; for ( i = <int> ; i < row ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , arr [ i ] [ j ] ) ; } } count = count + arr [ <int> ] [ <int> ] ; for ( k = <int> ; k < row ; k ++ ) { max = arr [ k ] [ <int> ] ; for ( l = <int> ; l < k ; l ++ ) { if ( arr [ k ] [ l ] > max ) max = arr [ k ] [ l ] ; } count = count + max ; } printf ( <str> , count ) ; } return <int> ; }", "label": 3, "id": 6529}
{"input": "void main ( ) { short int t ; long * a , N , i , cost , minimum ; scanf ( <str> , & t ) ; while ( t -- ) { cost = <int> ; scanf ( <str> , & N ) ; a = ( long * ) malloc ( N * sizeof ( long ) ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < N - <int> ; i ++ ) { if ( a [ i ] > a [ i + <int> ] ) { minimum = a [ i + <int> ] ; cost += minimum ; a [ i + <int> ] = minimum ; } else { minimum = a [ i ] ; cost += minimum ; a [ i + <int> ] = minimum ; } } printf ( <str> , cost ) ; free ( a ) ; } return ; }", "label": 1, "id": 6530}
{"input": "int main ( ) { int test ; scanf ( <str> , & test ) ; int i , j , n ; while ( test -- ) { scanf ( <str> , & n ) ; int vec1 [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & vec1 [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { if ( vec1 [ i + <int> ] [ j ] > vec1 [ i + <int> ] [ j + <int> ] ) vec1 [ i ] [ j ] = vec1 [ i ] [ j ] + vec1 [ i + <int> ] [ j ] ; else vec1 [ i ] [ j ] = vec1 [ i ] [ j ] + vec1 [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , vec1 [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6531}
{"input": "int main ( ) { int n , sum = <int> , i , j , t ; scanf ( <str> , & t ) ; if ( t < <int> ) exit ( <int> ) ; while ( t -- > <int> ) { sum = <int> ; scanf ( <str> , & n ) ; int arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] ) ; if ( arr [ i ] > <int> ) exit ( <int> ) ; sum = sum + arr [ i ] ; } } printf ( <str> , sum ) ; } return <int> ; }", "label": 3, "id": 6532}
{"input": "int main ( ) { unsigned long long int i , j , t , k , l ; scanf ( <str> , & k ) ; for ( l = <int> ; l < k ; l ++ ) { scanf ( <str> , & t ) ; unsigned long long int a [ t ] [ <int> ] ; for ( i = <int> ; i < t ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = t - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 6533}
{"input": "void main ( ) { int t , i , j , c ; scanf ( <str> , & t ) ; while ( t -- ) { int n , w = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { c = i ; w ++ ; for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ c ] >= a [ j ] ) break ; else c = j ; w ++ ; } } printf ( <str> , w ) ; } }", "label": 0, "id": 6534}
{"input": "int main ( ) { int t , a , b , x , i , j ; scanf ( <str> , & t ) ; int gcd [ t ] , lcm [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; lcm [ i ] = a * b ; if ( a == <int> ) gcd [ i ] = a ; else if ( b == <int> ) gcd [ i ] = b ; else { for ( j = <int> ; b != <int> ; j ++ ) { x = b ; b = a % b ; a = x ; } gcd [ i ] = a ; } lcm [ i ] = lcm [ i ] / gcd [ i ] ; printf ( <str> ) ; printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } }", "label": 1, "id": 6535}
{"input": "int main ( ) { int i , j , a , * * x , lar ; scanf ( <str> , & a ) ; x = ( int * * ) malloc ( sizeof ( int * ) * a ) ; for ( i = <int> ; i <= a ; i ++ ) { x [ i ] = ( int * ) malloc ( sizeof ( int ) * a ) ; } for ( i = <int> ; i <= a ; i ++ ) { for ( j = <int> ; j <= a ; j ++ ) { if ( j > <int> ) x [ i ] [ j ] = - <int> ; else scanf ( <str> , & x [ i ] [ j ] ) ; } } for ( i = <int> ; i <= a ; i ++ ) { for ( i = <int> ; i <= a ; i ++ ) { if ( i - <int> >= <int> ) { if ( j - <int> >= <int> ) { if ( x [ i - <int> ] [ j - <int> ] > x [ i - <int> ] [ j ] ) x [ i ] [ j ] += x [ i - <int> ] [ j - <int> ] ; else x [ i ] [ j ] += x [ i - <int> ] [ j ] ; } else x [ i ] [ j ] += x [ i - <int> ] [ j ] ; } } } for ( i = <int> , lar = x [ a ] [ <int> ] ; i <= a ; i ++ ) { if ( x [ a ] [ i ] > lar ) lar = x [ a ] [ i ] ; } printf ( <str> , lar ) ; return <int> ; }", "label": 1, "id": 6536}
{"input": "main ( ) { int t , n , a [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { int i , min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 6537}
{"input": "int main ( ) { int t , n , k [ <int> ] [ <int> ] ; int c , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & k [ i ] [ j ] ) ; } for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { c = MAX ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 6538}
{"input": "int main ( void ) { int T , i , j , k , r ; long int A , B , s ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; r = gcd ( A , B ) ; printf ( <str> , r ) ; s = A * B / r ; printf ( <str> , s ) ; printf ( <str> ) ; } return ( <int> ) ; } int gcd ( long int A , long int B ) { int c ; c = A % B ; if ( c == <int> ) return B ; else return ( gcd ( A , c ) ) ; }", "label": 1, "id": 6539}
{"input": "long gcd ( long , long ) ; int i , ans ; int main ( ) { int i , n , x , y , hcf ; scanf ( <str> , & n ) ; long a [ n ] , b [ n ] , lcm ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & x ) ; scanf ( <str> , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; a [ i ] = hcf ; b [ i ] = lcm ; } for ( i = <int> ; i < n ; i ++ ) printf ( <str> , a [ i ] , b [ i ] ) ; return <int> ; } long gcd ( long x , long y ) { if ( x == <int> ) return <int> ; for ( i = <int> ; i <= x ; i ++ ) { if ( x % i == <int> && y % i == <int> ) ans = i ; } return ans ; }", "label": 3, "id": 6540}
{"input": "int main ( ) { int t , A [ <int> ] , i , n , piv , cost = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } piv = A [ <int> ] ; for ( i = <int> ; i < n - <int> ; i ++ ) { if ( piv > A [ i + <int> ] ) piv = A [ i + <int> ] ; cost = cost + piv ; } printf ( <str> , cost ) ; cost = <int> ; } return <int> ; }", "label": 3, "id": 6541}
{"input": "int main ( ) { int sum [ <int> ] [ <int> ] , i = <int> , j = <int> , size = <int> , max = <int> , t = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & sum [ i ] [ j ] ) ; } for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == <int> && j == <int> ) sum [ i ] [ j ] = sum [ i ] [ j ] ; else if ( j == <int> ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - <int> ] [ j ] ; else if ( i == j ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - <int> ] [ j - <int> ] ; else { if ( sum [ i - <int> ] [ j - <int> ] > sum [ i - <int> ] [ j ] ) sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - <int> ] [ j - <int> ] ; else sum [ i ] [ j ] = sum [ i ] [ j ] + sum [ i - <int> ] [ j ] ; } } } for ( i = size - <int> , j = <int> ; j <= i ; j ++ ) { if ( max < sum [ i ] [ j ] ) max = sum [ i ] [ j ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 3, "id": 6542}
{"input": "int n , a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] = { <int> } ; int solve ( int i , int j ) { if ( b [ i ] [ j ] > <int> ) return ( b [ i ] [ j ] ) ; if ( i >= n ) return <int> ; int t1 = solve ( i + <int> , j ) ; int t2 = solve ( i + <int> , j + <int> ) ; int t ; t = ( ( t1 > t2 ) ? t1 : t2 ) ; t += a [ i ] [ j ] ; b [ i ] [ j ] = t ; return t ; } int main ( ) { int i , j , k , t ; scanf ( <str> , & t ) ; while ( t -- ) { for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) { b [ i ] [ j ] = <int> ; a [ i ] [ j ] = <int> ; } scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; k = solve ( <int> , <int> ) ; printf ( <str> , k ) ; } }", "label": 3, "id": 6543}
{"input": "int main ( ) { unsigned long int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { unsigned long int n , j , k ; scanf ( <str> , & n ) ; unsigned long int a [ n ] ; for ( j = <int> ; j < n ; j ++ ) scanf ( <str> , & a [ j ] ) ; int min = a [ <int> ] ; for ( k = <int> ; k < n ; k ++ ) { if ( a [ k ] < min ) min = a [ k ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 6544}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int i , j , n , s ; int a [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } i = <int> , j = <int> ; s = a [ i ] [ j ] ; while ( i < n ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { s += a [ i + <int> ] [ j ] ; } else { s += a [ i + <int> ] [ j + <int> ] ; j ++ ; } } printf ( <str> , s ) ; return <int> ; } }", "label": 2, "id": 6545}
{"input": "int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } void disp_array ( int * A , int len ) { int i = <int> ; while ( i < len ) { printf ( <str> , A [ i ] ) ; i ++ ; } printf ( <str> ) ; return ; } static char _rbuf [ <int> * <int> ] ; static char * _rend = <int> ; static char * _rpos = <int> ; static int _getchar ( ) { int n = read ( <int> , _rbuf , sizeof _rbuf ) ; if ( n <= <int> ) { printf ( <str> , n ) ; exit ( <int> ) ; } _rend = _rbuf + n ; _rpos = _rbuf + <int> ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( c = getchar ( ) ) < <char> ) { } int n = c - <char> ; while ( ( c = getchar ( ) ) >= <char> ) { n = n * <int> + ( c - <char> ) ; } return n ; } static int put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - <int> ; while ( <int> ) { buf [ bn -- ] = <char> + ( n ) ; n = n / <int> ; if ( n == <int> ) break ; } while ( bn < BSIZE - <int> ) putchar ( buf [ ++ bn ] ) ; putchar ( <char> ) ; } void sumTrain ( int rows ) { int a [ rows ] ; int b [ rows ] ; int * curr ; int * old ; old = a ; curr = b ; a [ <int> ] = <int> ; b [ <int> ] = <int> ; int i = <int> ; int n , j ; while ( i < rows ) { j = <int> ; n = get_i ( ) ; curr [ <int> ] = old [ <int> ] + n ; if ( i ) { while ( j < i ) { n = get_i ( ) ; curr [ j ] = n + max ( old [ j ] , old [ j - <int> ] ) ; j ++ ; } n = get_i ( ) ; curr [ j ] = old [ j - <int> ] + n ; } if ( old == a ) { curr = a ; old = b ; } else { old = a ; curr = b ; } i ++ ; } int mx = <int> ; for ( i = <int> ; i < rows ; i ++ ) { if ( old [ i ] > mx ) { mx = old [ i ] ; } } put_i ( mx ) ; } int main ( ) { int n , rows , c ; n = get_i ( ) ; while ( n > <int> ) { rows = get_i ( ) ; sumTrain ( rows ) ; n -- ; rows = <int> ; } return <int> ; }", "label": 1, "id": 6546}
{"input": "int tab [ <int> ] [ <int> ] ; int rows ; static inline int max ( int a , int b ) { return a > b ? a : b ; } int getsum ( int row , int col ) { int val ; if ( row == rows ) return <int> ; val = tab [ row ] [ col ] ; return max ( val + getsum ( row + <int> , col ) , val + getsum ( row + <int> , col + <int> ) ) ; } int main ( ) { int n ; int i , j ; int sum ; scanf ( <str> , & n ) ; while ( n -- > <int> ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & tab [ i ] [ j ] ) ; } } sum = max ( tab [ <int> ] [ <int> ] + getsum ( <int> , <int> ) , tab [ <int> ] [ <int> ] + getsum ( <int> , <int> ) ) ; printf ( <str> , sum ) ; } return <int> ; }", "label": 2, "id": 6547}
{"input": "int main ( ) { long long int t , i , n , a [ <int> ] , j , min ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) { min = a [ j ] ; } } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } return <int> ; }", "label": 0, "id": 6548}
{"input": "int main ( ) { int i , j , r , a [ <int> ] [ <int> ] , max ; scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i - <int> ] [ j ] > a [ i - <int> ] [ j - <int> ] ) { a [ i ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } else { a [ i ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } } i = r ; max = a [ i ] [ <int> ] ; for ( j = <int> ; j < r ; j ++ ) { if ( max < a [ i ] [ j ] ) { max = a [ i ] [ j ] ; } } printf ( <str> , max ) ; }", "label": 3, "id": 6549}
{"input": "int main ( ) { int tests ; scanf ( <str> , & tests ) ; while ( tests -- ) { int n ; int i ; int min = INT_MAX ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { int temp ; scanf ( <str> , & temp ) ; if ( temp < min ) { min = temp ; } } printf ( <str> , ( long ) min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6550}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , st , nd , rem ; scanf ( <str> , & a , & b ) ; if ( a > b ) { st = a ; nd = b ; } else if ( b > a ) { st = b ; nd = a ; } rem = st % nd ; while ( rem != <int> ) { st = nd ; nd = rem ; rem = st % nd ; } printf ( <str> , nd ) ; printf ( <str> , a * b / nd ) ; } }", "label": 1, "id": 6551}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; int i = <int> ; for ( i = <int> ; i < t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int j = <int> ; int arr [ n ] ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; } int min = arr [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( arr [ j ] < min ) min = arr [ j ] ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 6552}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { int a , b , gcd , lcm , i ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a || i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 2, "id": 6553}
{"input": "long long int gcd ( int a , int b ) { int temp ; while ( a ) { temp = a ; a = b % a ; b = temp ; } return b ; } int main ( int argc , char const * argv [ ] ) { int t , a , b ; long long int hcf , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) lcm = gcd ( b , a ) ; else lcm = gcd ( a , b ) ; hcf = ( a * b ) / lcm ; printf ( <str> , lcm , hcf ) ; } return <int> ; }", "label": 1, "id": 6554}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 6555}
{"input": "int main ( ) { long long int t , i ; scanf ( <str> , & t ) ; while ( t > <int> ) { long long int n , i , j , c = <int> ; scanf ( <str> , & n ) ; long long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } c = n ; for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ j ] > a [ j - <int> ] ) { c ++ ; } else break ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 1, "id": 6556}
{"input": "int mat [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x > y ) return x ; else return y ; } int solve ( int x ) { int k , l ; if ( x == <int> ) return mat [ <int> ] [ <int> ] ; for ( k = x - <int> ; k >= <int> ; k -- ) { for ( l = <int> ; l <= k ; l ++ ) { mat [ k ] [ l ] += max ( mat [ k + <int> ] [ l ] , mat [ k + <int> ] [ l + <int> ] ) ; } } return mat [ <int> ] [ <int> ] ; } int main ( ) { int i , j , k , l , w ; scanf ( <str> , & j ) ; int x ; for ( i = <int> ; i < j ; i ++ ) { scanf ( <str> , & x ) ; for ( k = <int> ; k < x ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & w ) ; mat [ k ] [ l ] = w ; } } printf ( <str> , solve ( x ) ) ; } return <int> ; }", "label": 1, "id": 6557}
{"input": "int main ( ) { long int num1 , num2 , gcd , lcm , a , i , testcases = <int> ; x : scanf ( <str> , & testcases ) ; if ( testcases <= <int> && testcases >= <int> ) { for ( i = <int> ; i <= testcases ; i ++ ) { y : scanf ( <str> , & num1 , & num2 ) ; if ( num1 <= <int> && num2 <= <int> && num1 >= <int> && num2 >= <int> ) { if ( num1 > num2 ) { a = num1 ; num1 = num2 ; num2 = a ; } for ( i = num1 ; i >= <int> ; i -- ) { if ( num1 % i == <int> ) { if ( num2 % i == <int> ) { gcd = i ; break ; } } } lcm = num1 * num2 / gcd ; printf ( <str> , lcm , gcd ) ; } else goto y ; } } else goto x ; return <int> ; }", "label": 2, "id": 6558}
{"input": "static int pos = <int> ; static int len = <int> ; static char buffer [ BUF_SIZE ] ; static inline int read_more ( void ) { len = read ( <int> , buffer , BUF_SIZE ) ; if ( len ) { pos = <int> ; return buffer [ pos ] ; } return <int> ; } static int readInt ( void ) { int i = <int> ; int c = <char> ; if ( pos + <int> < len ) { do { i = ( i << <int> + i << <int> ) + ( c - <char> ) ; c = buffer [ pos ] ; pos ++ ; } while ( c >= <char> && c <= <char> ) ; do { c = buffer [ pos ] ; pos ++ ; } while ( c < <char> || c > <char> ) ; pos -- ; } else { do { i = ( i << <int> + i << <int> ) + ( c - <char> ) ; c = ( pos < len ) ? buffer [ pos ] : read_more ( ) ; pos ++ ; } while ( c >= <char> && c <= <char> ) ; do { c = ( pos < len ) ? buffer [ pos ] : read_more ( ) ; pos ++ ; } while ( ( c < <char> || c > <char> ) && c ) ; pos -- ; } return i ; } int main ( int argc , char * argv [ ] ) { int T , n , i , j , A [ <int> ] [ <int> ] ; T = readInt ( ) ; while ( T -- ) { n = readInt ( ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] = readInt ( ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) A [ i ] [ j ] += MAX ( A [ i + <int> ] [ j ] , A [ i + <int> ] [ j + <int> ] ) ; printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 6559}
{"input": "int main ( ) { int t , i , j , row [ <int> ] , arr [ <int> ] , a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) scanf ( <str> , & row [ i ] ) ; int p = t ; while ( t != <int> ) { for ( i = <int> ; i < row [ p - t ] ; i ++ ) { arr [ i ] = <int> ; a [ i ] = <int> ; } for ( i = <int> ; i < row [ p - t ] ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; a [ j ] = arr [ j ] + a [ j ] ; } } for ( i = <int> ; i < row [ p - t ] ; i ++ ) printf ( <str> , a [ i ] ) ; t -- ; } }", "label": 3, "id": 6560}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { int n ; scanf ( <str> , n ) ; int i , j , arr [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { arr [ i - <int> ] [ j ] += ( arr [ i ] [ j ] > arr [ i ] [ j + <int> ] ? arr [ i ] [ j ] : arr [ i ] [ j + <int> ] ) ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 6561}
{"input": "int main ( ) { int t ; long n , i ; long long res ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; res = n ; long long arr [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & arr [ i ] ) ; } long prev = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( arr [ i - <int> ] > arr [ i ] ) { res += ( i - prev ) * ( i - <int> - prev ) / <int> ; prev = i ; } } res += ( i - prev ) * ( i - <int> - prev ) / <int> ; printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 6562}
{"input": "int main ( ) { int n , i , j , k , a [ <int> ] [ <int> ] , b ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & b ) ; for ( j = <int> ; j < b ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = ( b - <int> ) ; j >= <int> ; j -- ) { for ( k = <int> ; k <= j - <int> ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + <int> ] ) { a [ j - <int> ] [ k ] = a [ j - <int> ] [ k ] + a [ j ] [ k ] ; } else { a [ j - <int> ] [ k ] = a [ j - <int> ] [ k ] + a [ j ] [ k + <int> ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6563}
{"input": "int main ( ) { int trail , n , i , j , a [ <int> ] [ <int> ] ; scanf ( <str> , & trail ) ; while ( trail > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i + <int> ] [ j ] + a [ i ] [ j ] ; else a [ i ] [ j ] = a [ i + <int> ] [ j + <int> ] + a [ i ] [ j ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; trail -- ; } return <int> ; }", "label": 0, "id": 6564}
{"input": "int main ( ) { int t , i , j , k , max = <int> , n , sum , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { sum = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; sum = sum + a [ j ] [ k ] ; } if ( sum > max ) max = sum ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 6565}
{"input": "int main ( ) { int t , n , arr [ <int> ] [ <int> ] , i , j , p , s ; scanf ( <str> , & t ) ; while ( t ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( i == j ) { arr [ i ] [ j ] += arr [ i - <int> ] [ j - <int> ] ; } if ( i != <int> && j == <int> ) arr [ i ] [ j ] += arr [ i - <int> ] [ j ] ; if ( i > j && j != <int> ) { p = arr [ i ] [ j ] + arr [ i - <int> ] [ j - <int> ] ; s = arr [ i ] [ j ] + arr [ i - <int> ] [ j ] ; if ( p > s ) { arr [ i ] [ j ] = p ; } else { arr [ i ] [ j ] = s ; } } } } p = arr [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( p < arr [ n - <int> ] [ j ] ) { p = arr [ n - <int> ] [ j ] ; } } printf ( <str> , p ) ; t -- ; } return <int> ; }", "label": 0, "id": 6566}
{"input": "int main ( ) { int a , b , c , d , i , p , q , l ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b , & c ) ; if ( b > c ) { p = b ; q = c ; } else { p = c ; q = b ; } for ( i = <int> ; i <= q ; i ++ ) { if ( ( p % i == <int> ) && ( q % i == <int> ) ) { d = i ; } } l = b * c / d ; printf ( <str> , d , l ) ; } return <int> ; }", "label": 1, "id": 6567}
{"input": "int arr [ <int> ] [ <int> ] , cache [ <int> ] [ <int> ] ; int main ( ) { int t , i , j , ans , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; cache [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { cache [ i ] [ j ] = arr [ i ] [ j ] + cache [ i - <int> ] [ j ] ; } else { cache [ i ] [ j ] = arr [ i ] [ j ] + ( cache [ i - <int> ] [ j ] > cache [ i - <int> ] [ j - <int> ] ? cache [ i - <int> ] [ j ] : cache [ i - <int> ] [ j - <int> ] ) ; } } ans = cache [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) if ( cache [ n - <int> ] [ i ] > ans ) ans = cache [ n - <int> ] [ i ] ; printf ( <str> , ans ) ; } }", "label": 0, "id": 6568}
{"input": "int main ( ) { int t , i , j , min , a [ <int> ] , n ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } min = a [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < min ) min = a [ j ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 6569}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int n ; scanf ( <str> , & n ) ; long int a [ n ] , i , temp ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( i == <int> || a [ i ] < temp ) temp = a [ i ] ; } printf ( <str> , temp * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6570}
{"input": "int main ( ) { int i , j , T , n , a , b , cost = <int> ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & n ) ; scanf ( <str> , & a ) ; cost = a ; for ( j = <int> ; j <= n ; j ++ ) { scanf ( <str> , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } cost += a ; } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 6571}
{"input": "int b [ <int> ] [ <int> ] ; int a [ <int> ] [ <int> ] ; int main ( ) { int i , j , t , k , n , r , temp , temp1 = <int> ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; r = n * ( n + <int> ) / <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; b [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { temp = b [ i ] [ j ] ; b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j ] ; if ( temp >= b [ i ] [ j ] ) b [ i ] [ j ] = temp ; b [ i ] [ j + <int> ] = a [ i ] [ j + <int> ] + b [ i - <int> ] [ j ] ; } } temp1 = b [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { if ( b [ n - <int> ] [ j ] > temp1 ) temp1 = b [ n - <int> ] [ j ] ; } printf ( <str> , temp1 ) ; } return <int> ; }", "label": 1, "id": 6572}
{"input": "int main ( ) { int a , b , i , t , c , n , j = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( b < a ) { t = b ; b = a ; a = t ; } while ( j > <int> ) { c = b * j ; if ( c % a == <int> ) { break ; } j ++ ; } printf ( <str> , ( a * b / c ) , c ) ; j = <int> ; } }", "label": 1, "id": 6573}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int numerator , denominator , n1 , n2 , remainder ; scanf ( <str> , & n1 , & n2 ) ; if ( n1 > n2 ) { numerator = n1 ; denominator = n2 ; } else { numerator = n2 ; denominator = n1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } long int gcd = denominator ; long int lcm = n1 * n2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 6574}
{"input": "int gcd ( int , int ) ; int main ( ) { int hcf , lcm , t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; hcf = gcd ( a , b ) ; lcm = a * b / hcf ; printf ( <str> , hcf , lcm ) ; } } int gcd ( int a , int b ) { int i , j , t ; j = b ; t = a ; while ( t != <int> ) { t = t % j ; if ( t == <int> ) { break ; } j = j % t ; } return ( j ) ; }", "label": 3, "id": 6575}
{"input": "int main ( ) { long int T , i , N ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; long int A [ N ] , i ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } int sum = <int> ; for ( i = <int> ; i < N ; ) { int count = <int> ; if ( A [ i ] <= A [ i + <int> ] ) { while ( A [ i ] <= A [ i + <int> ] ) { count ++ ; i ++ ; } } else i ++ ; sum = sum + count ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6576}
{"input": "int compare ( const void * a , const void * b ) { return ( * ( int * ) a - * ( int * ) b ) ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] , i ; long long int s = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } qsort ( a , n , sizeof ( int ) , compare ) ; s = ( n - <int> ) * a [ <int> ] ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 6577}
{"input": "long long int max ( long long int a , long long int b ) { if ( a > b ) { return a ; } else { return b ; } } long long int gcd ( long long int a , long long int b ) { long long int i , maxi ; maxi = max ( a , b ) ; for ( i = <int> ; i <= maxi / <int> ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { return i ; } else { return <int> ; } } } long long int lcm ( long long int a , long long int b ) { long long int i , lc = <int> , maxi ; maxi = max ( a , b ) ; while ( a != <int> && b != <int> ) { for ( i = <int> ; i <= maxi / <int> ; i ++ ) { if ( a % i == <int> && b % i != <int> ) { lc *= i ; a /= i ; } else if ( a % i != <int> && b % i == <int> ) { lc *= i ; b /= i ; } else if ( ( a % i == <int> && b % i == <int> ) ) { lc *= i ; a /= i ; b /= i ; } } } return lc ; } void main ( ) { long long int a , b , gc , lc , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; gc = gcd ( a , b ) ; lc = lcm ( a , b ) ; printf ( <str> , lc , gc ) ; } }", "label": 2, "id": 6578}
{"input": "long long int max ( long long int a , long long int b ) ; long long int hcf ( long long int a , long long int b ) ; int main ( ) { int n ; long long int a , b , lcm , gcd ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; if ( a == b ) printf ( <str> , a ) ; else { gcd = hcf ( a , b ) ; a = a / gcd ; b = b / gcd ; lcm = a * b * gcd ; printf ( <str> , gcd , lcm ) ; } } return <int> ; } long long max ( long long int a , long long int b ) { if ( a > b ) return a ; else return b ; } long long int hcf ( long long int a , long long int b ) { while ( a != b ) { if ( a > b ) { a = a - b ; } else { b = b - a ; } } return a ; }", "label": 0, "id": 6579}
{"input": "int main ( ) { long long int a , b , max , min , r , t , i ; scanf ( <str> , & t ) ; while ( t -- > <int> ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; max = ( a > b ) ? a : b ; min = ( a <= b ) ? a : b ; while ( max > min ) { r = max % min ; if ( r != <int> ) { max = min ; min = r ; } else break ; } printf ( <str> , min , a * b / min ) ; } return <int> ; }", "label": 0, "id": 6580}
{"input": "int main ( ) { long long int n1 , n2 , x , y , t , lcm , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } lcm = ( x * y ) / n1 ; printf ( <str> , n1 , lcm ) ; } }", "label": 1, "id": 6581}
{"input": "int main ( ) { int i , j , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i <= n - <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; } else { a [ i - <int> ] [ j ] = a [ i ] [ j + <int> ] + a [ i - <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 6582}
{"input": "int maxsum ( int arr [ ] [ <int> ] , int row , int col ) ; int max ( int a , int b ) ; int n ; int main ( ) { int arr [ <int> ] [ <int> ] , i , j , t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & arr [ i ] [ j ] ) ; } } printf ( <str> , maxsum ( arr , <int> , <int> ) ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int maxsum ( int arr [ ] [ <int> ] , int row , int col ) { int maxm = <int> ; int sum = <int> ; int dp [ <int> ] [ <int> ] = { <int> } ; if ( row == n - <int> ) { maxm = arr [ row ] [ col ] ; dp [ row ] [ col ] = maxm ; return maxm ; } else { if ( dp [ row ] [ col ] == <int> ) { dp [ row ] [ col ] = arr [ row ] [ col ] + max ( maxsum ( arr , row + <int> , col ) , maxsum ( arr , row + <int> , col + <int> ) ) ; } maxm += dp [ row ] [ col ] ; return maxm ; } }", "label": 2, "id": 6583}
{"input": "int main ( void ) { int t ; int a , b , m , n ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = a ; n = b ; while ( n ) { m = m % n ; m ^= n ^= m ^= n ; } printf ( <str> , m , ( a * b ) / m ) ; } return <int> ; }", "label": 1, "id": 6584}
{"input": "int main ( ) { int T , n , i , j , a , b , m ; for ( scanf ( <str> , & T ) ; T > <int> ; T -- ) { int s [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & n , & m ) ; s [ <int> ] [ <int> ] = m ; for ( i = <int> ; i < n - <int> ; i ++ ) for ( j = <int> ; j < i + <int> ; ) { b = s [ i ] [ j ] ; a = s [ i ] [ j - <int> ] ; if ( j > <int> && b < a ) b = a ; scanf ( <str> , & a ) ; b += a ; s [ i + <int> ] [ j ++ ] = b ; if ( m < b ) m = b ; } printf ( <str> , m ) ; } return <int> ; }", "label": 3, "id": 6585}
{"input": "int main ( ) { int t , i , n , min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) ; { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) min = a [ i ] ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 1, "id": 6586}
{"input": "int main ( ) { int t , n , i , j , k ; int a [ <int> ] [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & a [ j ] [ k ] ) ; } } for ( j = ( n - <int> ) ; j >= <int> ; j -- ) { for ( k = <int> ; k < j ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + <int> ] ) a [ j - <int> ] [ k ] = a [ j - <int> ] [ k ] + a [ j ] [ k ] ; else a [ j - <int> ] [ k ] = a [ j - <int> ] [ k ] + a [ j ] [ k + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6587}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , T , i , j ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] += a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6588}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( int i = n - <int> ; i > <int> ; i -- ) { for ( int j = <int> ; j < i ; j ++ ) { if ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) a [ i - <int> ] [ j ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j ] += a [ i ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 6589}
{"input": "int gcd ( int a , int b ) { if ( a == <int> ) return b ; else return gcd ( b % a , a ) ; } int main ( ) { int hcf , lcm ; int T ; int A , B ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A ) ; scanf ( <str> , & B ) ; hcf = gcd ( A , B ) ; printf ( <str> , hcf , A * B / hcf ) ; } return <int> ; }", "label": 1, "id": 6590}
{"input": "int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n ) ; int k = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( i == <int> ) b [ <int> ] [ <int> ] = a [ i ] [ j ] ; else if ( i == <int> && j == <int> ) { b [ i ] [ j ] = a [ i ] [ j ] + b [ <int> ] [ <int> ] ; } else if ( j == i ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - <int> ] [ j - <int> ] ; else b [ i ] [ j ] = max ( b [ i - <int> ] [ j ] , b [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } k ++ ; } int ans = b [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( ans < b [ n - <int> ] [ i ] ) ans = b [ n - <int> ] [ i ] ; } printf ( <str> , ans ) ; } return <int> ; }", "label": 1, "id": 6591}
{"input": "int main ( void ) { int t , g , l , a , b , i , j , p , c , d ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { g = <int> ; scanf ( <str> , & a , & b ) ; c = a ; d = b ; if ( a > b ) { p = b ; } else { p = a ; } for ( j = p ; j >= <int> ; j -- ) { if ( a % j == <int> ) { if ( b % j == <int> ) { g = g * j ; a /= j ; b /= j ; } } } l = ( c * d ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 6592}
{"input": "int gcd ( int a , int b ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , r = <int> , v ; scanf ( <str> , & a , & b ) ; r = gcd ( a , b ) ; v = ( a * b ) / r ; printf ( <str> , r , v ) ; } return <int> ; } int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } return a ; }", "label": 1, "id": 6593}
{"input": "int main ( ) { int t , a [ <int> ] ; int n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } int d ; d = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( d > a [ i ] ) { d = a [ i ] ; } } printf ( <str> , d * ( n - <int> ) ) ; } return <int> ; }", "label": 3, "id": 6594}
{"input": "int main ( ) { int T , i ; long int A , B , h , j ; long long int l , p ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( A > B ) { for ( j = <int> ; j <= B ; j ++ ) if ( A % j == <int> && B % j == <int> ) h = j ; } else { for ( j = <int> ; j <= A ; j ++ ) if ( A % j == <int> && B % j == <int> ) h = j ; } p = A * B ; l = p / h ; printf ( <str> , h , l ) ; } return <int> ; }", "label": 2, "id": 6595}
{"input": "int main ( ) { long long int A , B , t , gcd , lcm , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & A , & B ) ; a = ( A > B ) ? A : B ; b = ( A < B ) ? A : B ; while ( b != <int> ) { long long int x = b ; b = a % b ; a = x ; } gcd = a ; lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 0, "id": 6596}
{"input": "int main ( ) { int t ; long long n , i ; long a [ NUM ] , min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( a [ i ] < min ) { min = a [ i ] ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6597}
{"input": "int main ( void ) { int sum [ <int> ] , t , arr [ <int> ] , n , i , j , big , k [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; k [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & arr [ j ] ) ; if ( j == <int> ) sum [ <int> ] = k [ <int> ] + arr [ <int> ] ; else { if ( k [ j ] > k [ j - <int> ] ) sum [ j ] = arr [ j ] + k [ j ] ; else sum [ j ] = arr [ j ] + k [ j - <int> ] ; } } for ( j = <int> ; j <= i ; j ++ ) k [ j ] = sum [ j ] ; } big = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( big < sum [ i ] ) big = sum [ i ] ; } printf ( <str> , big ) ; t -- ; } return <int> ; }", "label": 0, "id": 6598}
{"input": "long long int gcd ( long long int a , long long int b ) { if ( a == <int> || b == <int> ) { return <int> ; } if ( a == b ) { return a ; } if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } long long int lcm ( long long int a , long long int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t ; long long int x , y , r , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; r = gcd ( x , y ) ; l = lcm ( x , y ) ; printf ( <str> , r , l ) ; printf ( <str> ) ; } return <int> ; }", "label": 0, "id": 6599}
{"input": "int A [ <int> ] [ <int> ] ; int max ( int x , int y ) { if ( x < y ) return y ; if ( y <= x ) return x ; } int newPath ( int n , int i , int j ) { int t1 , t2 , total = <int> ; if ( i == n ) return <int> ; else { t1 = newPath ( n , i + <int> , j + <int> ) ; t2 = newPath ( n , i + <int> , j ) ; total = A [ i ] [ j ] + max ( t1 , t2 ) ; return total ; } } int main ( ) { int m , k , l , i , j ; scanf ( <str> , & i ) ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & m ) ; for ( k = <int> ; k < m ; k ++ ) { for ( l = <int> ; l < k + <int> ; l ++ ) { scanf ( <str> , & A [ k ] [ l ] ) ; } } printf ( <str> , newPath ( m , <int> , <int> ) ) ; } return <int> ; }", "label": 3, "id": 6600}
{"input": "long long int max ( long long int a , long long int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { long long int t , r , i , k , tri [ <int> ] [ <int> ] , j , sum ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & r ) ; for ( k = <int> ; k < r ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & tri [ k ] [ j ] ) ; } } for ( k = <int> ; k < r ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { if ( j == <int> ) { tri [ k ] [ j ] = tri [ k ] [ j ] + tri [ k - <int> ] [ j ] ; } else if ( j == i ) { tri [ k ] [ j ] = tri [ k ] [ j ] + tri [ k - <int> ] [ j - <int> ] ; } else { tri [ k ] [ j ] = tri [ k ] [ j ] + max ( tri [ k - <int> ] [ j ] , tri [ k - <int> ] [ j - <int> ] ) ; } } } sum = <int> ; for ( j = <int> ; j < r ; j ++ ) { if ( tri [ r - <int> ] [ j ] > sum ) sum = tri [ r - <int> ] [ j ] ; } printf ( <str> , sum ) ; } return <int> ; }", "label": 1, "id": 6601}
{"input": "int main ( void ) { int t , i ; long long int a , b , c , ans , l ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a * b ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) { ans = i ; } } l = c / ans ; printf ( <str> , ans , l ) ; } return <int> ; }", "label": 2, "id": 6602}
{"input": "int a [ <int> ] ; int b [ <int> ] ; int main ( ) { int n , r , i , j , max ; scanf ( <str> , & n ) ; while ( n -- ) { for ( i = <int> ; i < <int> ; i ++ ) { a [ i ] = <int> ; b [ i ] = <int> ; } scanf ( <str> , & r ) ; for ( i = <int> ; i <= r ; i ++ ) { if ( i % <int> ) { for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & b [ j ] ) ; if ( j ) b [ j ] += ( ( a [ j ] > a [ j - <int> ] ) ? a [ j ] : a [ j - <int> ] ) ; else b [ j ] += a [ j ] ; } } else for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & a [ j ] ) ; if ( j ) a [ j ] += ( ( b [ j ] > b [ j - <int> ] ) ? b [ j ] : b [ j - <int> ] ) ; else a [ j ] += b [ j ] ; } } if ( ! ( r % <int> ) ) { max = a [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { if ( a [ i ] > max ) max = a [ i ] ; } } else { max = b [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { if ( b [ i ] > max ) max = b [ i ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6603}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , n , t , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i + <int> ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j ] + a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6604}
{"input": "int main ( ) { long int lcm ; int i , t , n1 , n2 , x , y ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n1 , & n2 ) ; x = n1 ; y = n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; else n2 = n2 - n1 ; } lcm = ( x * y ) / n1 ; printf ( <str> , n1 , lcm ) ; } }", "label": 1, "id": 6605}
{"input": "int gcd ( int c , int d ) ; int main ( ) { int t ; long int a , b , i , lcm , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; m = gcd ( a , b ) ; lcm = ( a * b ) / m ; printf ( <str> , m , lcm ) ; } return <int> ; } int gcd ( int c , int d ) { if ( d == <int> ) return c ; else return gcd ( d , c % d ) ; }", "label": 1, "id": 6606}
{"input": "void print_array ( int * * head , int nl ) ; int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int nl ; scanf ( <str> , & nl ) ; int count = <int> ; int * * head = ( int * * ) malloc ( nl * sizeof ( int * ) ) ; int * * sum = ( int * * ) malloc ( nl * sizeof ( int * ) ) ; int i = <int> ; for ( ; i < nl ; i ++ ) { * ( head + i ) = ( int * ) malloc ( nl * sizeof ( int ) ) ; * ( sum + i ) = ( int * ) malloc ( nl * sizeof ( int ) ) ; } while ( count < nl ) { for ( i = <int> ; i <= count ; i ++ ) { scanf ( <str> , * ( head + count ) + i ) ; if ( count < nl - <int> ) sum [ count ] [ i ] = - <int> ; else sum [ count ] [ i ] = head [ count ] [ i ] ; } count ++ ; } printf ( <str> , max ( head , <int> , <int> , nl , sum ) ) ; } } void print_array ( int * * head , int nl ) { int i = <int> ; int j = <int> ; for ( ; i < nl ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) printf ( <str> , * ( * ( head + i ) + j ) ) ; printf ( <str> ) ; } } int max ( int * * head , int i , int j , int nl , int * * sum ) { if ( i < nl - <int> ) { int m1 , m2 ; if ( sum [ i + <int> ] [ j ] == - <int> ) sum [ i + <int> ] [ j ] = max ( head , i + <int> , j , nl , sum ) ; m1 = sum [ i + <int> ] [ j ] ; if ( sum [ i + <int> ] [ j + <int> ] == - <int> ) sum [ i + <int> ] [ j + <int> ] = max ( head , i + <int> , j + <int> , nl , sum ) ; m2 = sum [ i + <int> ] [ j + <int> ] ; m1 = ( m1 > m2 ) ? m1 : m2 ; return ( m1 + head [ i ] [ j ] ) ; } else return head [ i ] [ j ] ; }", "label": 0, "id": 6607}
{"input": "int gcd ( int a , int b ) { int temp ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } return a ; } int main ( void ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; long long l = ( a * b ) / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 6608}
{"input": "int main ( void ) { int i , T ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { int A , temp , B , j ; scanf ( <str> , & A , & B ) ; if ( A < B ) { temp = A ; A = B ; B = temp ; } int g , l ; for ( j = <int> ; j <= B ; j ++ ) { if ( A % j == <int> && B % j == <int> ) { g = j ; } } l = A * B / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 6609}
{"input": "int main ( void ) { int T , n , s ; scanf ( <str> , & T ) ; for ( int i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & n ) ; int a [ n ] ; for ( int j = <int> ; j <= n - <int> ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( int j = <int> ; j <= n - <int> ; j ++ ) { if ( a [ <int> ] > a [ j + <int> ] ) { a [ <int> ] = a [ j + <int> ] ; } } s = a [ <int> ] * ( n - <int> ) ; printf ( <str> , s ) ; } return <int> ; }", "label": 0, "id": 6610}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , n , i , j ; int c = <int> , k = <int> , l = <int> , p ; int t , m ; scanf ( <str> , & t ) ; for ( m = <int> ; m < t ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( j = <int> ; j < n ; j ++ ) { if ( a [ n - <int> ] [ j ] > k ) { k = a [ n - <int> ] [ j ] ; l = j ; } } c = c + k ; for ( i = n - <int> ; i >= <int> ; i -- ) { if ( l != <int> ) { if ( a [ i ] [ l ] + a [ i - <int> ] [ l ] > a [ i ] [ l ] + a [ i - <int> ] [ l - <int> ] ) { c = c + a [ i - <int> ] [ l ] ; l = l ; } else { c = c + a [ i - <int> ] [ l - <int> ] ; l = l - <int> ; } if ( l == <int> ) { p = i - <int> ; } } } if ( l == <int> && p != <int> ) { for ( i = p - <int> ; i >= <int> ; i -- ) { c = c + a [ i ] [ <int> ] ; } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 6611}
{"input": "main ( ) { int n1 , n2 , gcd , lcm , rem , t1 , t2 , x ; scanf ( <str> , & x ) ; while ( x -- ) { scanf ( <str> , & n1 , & n2 ) ; t1 = n1 ; t2 = n2 ; while ( n2 != <int> ) { rem = n1 % n2 ; n1 = n2 ; n2 = rem ; } gcd = n1 ; lcm = ( t1 * t2 ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 6612}
{"input": "main ( ) { int a , b , z , gcd , temp , t , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; z = a * b ; while ( b != <int> ) { temp = b ; b = a % b ; a = temp ; } gcd = a ; lcm = z / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6613}
{"input": "int main ( ) { unsigned int t , a , b , r , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; p = a * b ; while ( b ) { a = a % b ; r = a ; a = b ; b = r ; } printf ( <str> , a , p / a ) ; } return <int> ; }", "label": 1, "id": 6614}
{"input": "int gcd ( int a , int b ) { int i ; i = a / <int> ; for ( ; i >= <int> ; i -- ) { if ( ( a % i == <int> ) && ( b % i == <int> ) ) return i ; } } int lcm ( int a , int b ) { int k , o ; o = gcd ( a , b ) ; k = ( b / o ) * a ; return k ; } int main ( ) { int t , a , b , l , m ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a == b ) { printf ( <str> , a , a ) ; break ; } else if ( a > b ) { l = gcd ( b , a ) ; m = lcm ( b , a ) ; } else { l = gcd ( a , b ) ; m = lcm ( a , b ) ; } printf ( <str> , l , m ) ; } return <int> ; }", "label": 1, "id": 6615}
{"input": "int main ( ) { int a , b , r , lcm ; int x , y ; int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; x = a ; y = b ; while ( b != <int> ) { r = a % b ; a = b ; b = r ; } lcm = x * y ; printf ( <str> , a , lcm ) ; } return <int> ; }", "label": 1, "id": 6616}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int n , i , c = <int> , sum = <int> ; scanf ( <str> , & n ) ; int a [ n ] , b [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] <= a [ i + <int> ] ) c ++ ; else { if ( c > <int> ) sum = sum + ( c * ( c - <int> ) / <int> ) ; else if ( c == <int> ) sum = sum + c ; c = <int> ; } } printf ( <str> , sum + n ) ; } }", "label": 1, "id": 6617}
{"input": "int main ( ) { int n1 , n2 , prod , gcd , lcm , t ; scanf ( <str> , & t ) ; while ( t > <int> ) { t -- ; scanf ( <str> , & n1 , & n2 ) ; prod = n1 * n2 ; while ( n1 != n2 ) { if ( n1 > n2 ) n1 = n1 - n2 ; if ( n2 > n1 ) n2 = n2 - n1 ; } gcd = n1 ; lcm = prod / gcd ; } printf ( <str> , gcd , lcm ) ; return <int> ; }", "label": 1, "id": 6618}
{"input": "int main ( ) { int N , A [ <int> ] , i , j , t , T , k = <int> , m ; scanf ( <str> , & T ) ; for ( t = <int> ; t < T ; t ++ ) { scanf ( <str> , & N ) ; m = N ; for ( i = <int> ; i < N ; i ++ ) { scanf ( <str> , & A [ i ] ) ; } for ( j = <int> ; j < N ; ) { if ( A [ j ] < A [ j + <int> ] ) { j ++ ; k ++ ; } else { if ( A [ j ] == A [ j + <int> ] ) { j ++ ; k ++ ; m = m - <int> ; } else { if ( A [ j ] > A [ j + <int> ] ) { j ++ ; } } } } printf ( <str> , ( k + m ) ) ; k = <int> ; } return <int> ; }", "label": 3, "id": 6619}
{"input": "int max ( int a , int b ) { return ( a >= b ) ? a : b ; } int main ( ) { int test , n , i , j ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { a [ i ] [ j ] += max ( a [ i + <int> ] [ j ] , a [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 6620}
{"input": "int main ( ) { int t , num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6621}
{"input": "int max ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int maxim , n , line , i , j ; int Arr [ <int> ] [ <int> ] ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & line ) ; i = <int> ; for ( i ; i < line ; i ++ ) { j = <int> ; for ( j ; j <= i ; j ++ ) { scanf ( <str> , & Arr [ i ] [ j ] ) ; } } if ( line == <int> ) printf ( <str> , Arr [ <int> ] [ <int> ] ) ; else for ( i = <int> ; i < line ; i ++ ) { j = <int> ; for ( j ; j <= i ; j ++ ) { Arr [ i ] [ j ] += max ( Arr [ i - <int> ] [ j - <int> ] , Arr [ i - <int> ] [ j ] ) ; } } j = <int> ; maxim = <int> ; for ( j ; j < line ; j ++ ) { if ( Arr [ line - <int> ] [ j ] > maxim ) maxim = Arr [ line - <int> ] [ j ] ; } printf ( <str> , maxim ) ; } return <int> ; }", "label": 1, "id": 6622}
{"input": "int main ( ) { int t , i , j , k , l , n [ <int> ] [ <int> ] , b [ <int> ] = { <int> } ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & n ) ; } } for ( i = <int> ; i < t ; i ++ ) { for ( k = <int> ; k < l ; k ++ ) { for ( j = <int> ; j < l ; j ++ ) b [ k ] += n [ j ] [ k ] ; } for ( k = <int> ; k < l - <int> ; k ++ ) { if ( b [ <int> ] > b [ k + <int> ] ) continue ; else b [ <int> ] = b [ k + <int> ] ; printf ( <str> , b [ <int> ] ) ; } } }", "label": 1, "id": 6623}
{"input": "int main ( ) { long long int min , n2 ; long long int T , n , i ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & n2 ) ; if ( i == <int> ) { min = n2 ; } else if ( min > n2 ) { min = n2 ; } } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6624}
{"input": "int main ( ) { int i , j , k , l , m , n , arr [ <int> ] ; scanf ( <str> , & k ) ; for ( m = <int> ; m < k ; m ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ ( i * ( i + <int> ) / <int> ) + j ] ) ; } if ( n >= <int> ) { for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { arr [ ( i * ( i + <int> ) / <int> ) + j ] = arr [ ( i * ( i + <int> ) / <int> ) + j ] + max ( arr [ ( i + <int> ) * ( i + <int> ) / <int> + j ] , arr [ ( i + <int> ) * ( i + <int> ) / <int> + j + <int> ] ) ; } } } printf ( <str> , arr [ <int> ] ) ; } exit ( <int> ) ; return <int> ; } int max ( int a , int b ) { if ( a < b ) return b ; else return a ; }", "label": 3, "id": 6625}
{"input": "int main ( ) { unsigned int t , n , a [ <int> ] , i = <int> , j , k , sum ; scanf ( <str> , & t ) ; while ( i < t ) { sum = <int> ; scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> , k = <int> ; k < n ; k ++ ) { if ( a [ j ] > a [ k ] ) { j = k ; sum = sum + a [ j ] ; } else sum = sum + a [ j ] ; } printf ( <str> , sum ) ; i ++ ; } return <int> ; }", "label": 1, "id": 6626}
{"input": "int main ( ) { int i , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t - <int> ; i ++ ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6627}
{"input": "int hcf ( int a , int b ) { if ( b == <int> ) return a ; else return hcf ( b , a % b ) ; } void main ( ) { int arr [ <int> ] , brr [ <int> ] , t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & arr [ <int> * i ] , & arr [ <int> * i + <int> ] ) ; } for ( i = <int> ; i < t ; i ++ ) { brr [ <int> * i ] = hcf ( arr [ <int> * i ] , arr [ <int> * i + <int> ] ) ; brr [ <int> * i + <int> ] = ( arr [ <int> * i ] * arr [ <int> * i + <int> ] ) / brr [ <int> * i ] ; } for ( i = <int> ; i < t ; i ++ ) { printf ( <str> , brr [ <int> * i ] , brr [ <int> * i + <int> ] ) ; } }", "label": 1, "id": 6628}
{"input": "int main ( ) { int i , c ; long int N ; int a [ <int> ] , T , min ; scanf ( <str> , & T ) ; while ( T -- ) { c = <int> ; scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & a [ i ] ) ; min = a [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } for ( i = <int> ; i < N ; i ++ ) { if ( a [ i ] > min ) c ++ ; } printf ( <str> , ( c * min ) ) ; } return <int> ; }", "label": 1, "id": 6629}
{"input": "main ( ) { int t , n , i , j , s ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; if ( n > <int> && n < <int> ) { int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] < <int> || a [ i ] [ j ] > <int> ) return <int> ; } for ( i = n - <int> ; i >= <int> ; i -- ) for ( j = <int> ; j < i ; j ++ ) a [ i - <int> ] [ j ] += ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; printf ( <str> , a [ <int> ] [ <int> ] ) ; } else return <int> ; } }", "label": 0, "id": 6630}
{"input": "int main ( ) { int t , c , a , b ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & a , & b ) ; if ( a > b ) c = gcd ( a , b ) ; else c = gcd ( b , a ) ; printf ( <str> , c ) ; printf ( <str> , ( a * b ) / c ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a % b == <int> ) return b ; else gcd ( b , a % b ) ; }", "label": 2, "id": 6631}
{"input": "int i , k = <int> , l , m , n , t , a [ <int> ] [ <int> ] ; void rec ( int i , int x , int j ) { if ( i == n ) { if ( j > k ) { k = j ; } return ; } else { j = j + a [ i ] [ x ] ; rec ( i + <int> , x , j ) ; j = j + a [ i ] [ x + <int> ] - a [ i ] [ x ] ; rec ( i + <int> , x + <int> , j ) ; return ; } } int main ( ) { scanf ( <str> , & t ) ; int j ; for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } j = a [ <int> ] [ <int> ] ; rec ( <int> , <int> , j ) ; printf ( <str> , k ) ; k = <int> ; } return <int> ; }", "label": 2, "id": 6632}
{"input": "int main ( void ) { int t , a , b , g , k = <int> , l ; scanf ( <str> , & t ) ; while ( t > k ) { l = <int> ; g = <int> ; scanf ( <str> , & a , & b ) ; g = gcd ( a , b ) ; l = lcm ( a , b ) ; printf ( <str> , g , l ) ; k ++ ; } return <int> ; } int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { int i , max ; if ( a < b ) max = b ; else max = a ; for ( i = max ; i <= ( a * b ) ; i ++ ) { if ( i % a == <int> && i % b == <int> ) return i ; } }", "label": 2, "id": 6633}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a ; scanf ( <str> , & a ) ; int b [ a ] , i , l , j , k ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & b [ i ] ) ; } if ( b [ <int> ] > b [ <int> ] ) { k = b [ <int> ] ; j = <int> ; } else { k = b [ <int> ] ; j = <int> ; } for ( i = <int> ; i < a ; i ++ ) { if ( b [ i ] < k ) { k = b [ i ] ; } } l = ( a - <int> ) * k ; printf ( <str> , l ) ; } return <int> ; }", "label": 0, "id": 6634}
{"input": "main ( ) { int t , i , k , g ; int p = <int> ; scanf ( <str> , & t ) ; int w [ t * <int> ] ; for ( g = <int> ; g <= t ; g ++ ) { int a , b , hcf , lcm ; scanf ( <str> , & a , & b ) ; if ( a > <int> || b > <int> && a < <int> || b < <int> ) { printf ( <str> ) ; exit ( <int> ) ; } for ( i = <int> ; i <= a ; i ++ ) { if ( a % i == <int> && b % i == <int> ) hcf = i ; } for ( i = a ; i <= a * b ; i ++ ) { if ( i % a == <int> && i % b == <int> ) { lcm = i ; break ; } } w [ p ] = hcf ; w [ p + <int> ] = lcm ; p = p + <int> ; ; } printf ( <str> ) ; for ( i = <int> ; i < t * <int> ; i ++ ) { printf ( <str> , w [ i ] ) ; if ( i % <int> != <int> ) printf ( <str> ) ; } }", "label": 2, "id": 6635}
{"input": "int main ( ) { int T ; scanf ( <str> , & T ) ; while ( T -- ) { unsigned int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6636}
{"input": "int main ( ) { long unsigned int n , t , a , b , m , L , h ; scanf ( <str> , & n ) ; while ( n -- ) { scanf ( <str> , & a , & b ) ; if ( b > a ) { t = b ; b = a ; a = t ; } h = ( a * b ) ; while ( b != <int> ) { m = a % b ; a = b ; b = m ; } L = h / a ; printf ( <str> , a , L ) ; } return <int> ; }", "label": 0, "id": 6637}
{"input": "int main ( ) { int i , j , num , tc , temp , prev , curr ; long long count ; scanf ( <str> , & tc ) ; for ( i = <int> ; i <= tc ; i ++ ) { count = <int> ; temp = <int> ; for ( j = <int> ; j <= num ; j ++ ) { if ( j == <int> ) scanf ( <str> , & prev ) ; else { scanf ( <str> , & curr ) ; if ( prev > curr ) temp = j ; count += ( j - temp + <int> ) ; } } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 6638}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; return gcd ( b , a % b ) ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n1 , n2 , g = <int> ; long long int lcm ; scanf ( <str> , & n1 , & n2 ) ; g = gcd ( n1 , n2 ) ; lcm = n1 * n2 / g ; printf ( <str> , g , lcm ) ; } }", "label": 1, "id": 6639}
{"input": "int main ( ) { int i , a , b , t , m , gcd , lcm ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a < b ) m = a ; else m = b ; for ( i = <int> ; i <= m ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b / gcd ) ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6640}
{"input": "char rbuffer [ rbuffer_size ] ; int rfptr = rbuffer_size ; char wbuffer [ wbuffer_size ] ; int wfptr = <int> ; int readno = <int> ; void rd ( ) { rfptr = <int> ; readno = read ( <int> , rbuffer , sizeof ( rbuffer ) ) ; } int get_i ( ) { int sum = <int> ; char c ; int sign = <int> ; while ( <int> ) { if ( ( rfptr >= rbuffer_size ) || ( rfptr >= readno ) ) rd ( ) ; c = rbuffer [ rfptr ++ ] ; if ( c == <char> ) { sign = - <int> ; } else { if ( c == <char> || c == <char> ) return sum * sign ; else sum = sum * <int> + c - <char> ; } } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( void ) { int t , n , i ; int * * p ; int k ; int tempval ; t = get_i ( ) ; while ( t -- > <int> ) { n = get_i ( ) ; p = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( k = <int> ; k <= i ; k ++ ) { p [ i ] [ k ] = get_i ( ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( k = <int> ; k <= i ; k ++ ) { p [ i ] [ k ] += max ( p [ i + <int> ] [ k ] , p [ i + <int> ] [ k + <int> ] ) ; } } printf ( <str> , p [ <int> ] [ <int> ] ) ; } }", "label": 3, "id": 6641}
{"input": "int gsum ( int * , int i , int j , int n ) ; int main ( ) { int n , * arr , i = <int> , num , j , n1 , sum ; scanf ( <str> , & n1 ) ; while ( i < n1 ) { scanf ( <str> , & n ) ; arr = ( int * ) malloc ( sizeof ( int ) * n ) ; j = <int> ; while ( j < n ) { scanf ( <str> , & num ) ; arr [ j ] = num ; j ++ ; } sum = gsum ( arr , <int> , <int> , n ) ; printf ( <str> , sum ) ; free ( arr ) ; i ++ ; } return <int> ; } int gsum ( int * b , int i , int j , int n ) { int n1 , n2 , k ; if ( i >= n ) return <int> ; n1 = b [ i ] + gsum ( b , i + j , j + <int> , n ) ; n2 = b [ i ] + gsum ( b , i + j + <int> , j + <int> , n ) ; if ( n1 > n2 ) return n1 ; else return n2 ; }", "label": 1, "id": 6642}
{"input": "int main ( ) { int i , j , k , a [ <int> ] [ <int> ] , T , N ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , * ( a + i ) + j ) ; for ( i = N - <int> ; i ; i -- ) { for ( j = i ; j ; j -- ) { if ( a [ i ] [ j ] > a [ i ] [ j - <int> ] ) a [ i - <int> ] [ j - <int> ] += a [ i ] [ j ] ; else a [ i - <int> ] [ j - <int> ] += a [ i ] [ j - <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6643}
{"input": "int main ( void ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b , gcd , lcm , i , d , min ; scanf ( <str> , & a , & b ) ; if ( a < b ) min = a ; else min = b ; if ( a == <int> || b == <int> ) { printf ( <str> ) ; } for ( i = <int> ; i <= min ; i ++ ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } d = a * b ; lcm = d / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6644}
{"input": "int main ( int argc , char const * argv [ ] ) { freopen ( <str> , <str> , stdin ) ; freopen ( <str> , <str> , stdout ) ; int array [ <int> ] [ <int> ] ; int t , k ; int i , j ; int sum = <int> , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & k ) ; for ( i = <int> ; i < k ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & array [ i ] [ j ] ) ; } } for ( i = k - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j < k + <int> ; j ++ ) { if ( array [ i ] [ j ] > array [ i ] [ j + <int> ] ) array [ i - <int> ] [ j ] += array [ i ] [ j ] ; else array [ i - <int> ] [ j ] += array [ i ] [ j + <int> ] ; } } printf ( <str> , array [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 1, "id": 6645}
{"input": "int main ( ) { int t , n , a [ <int> ] [ <int> ] , i , j , k ; long int sum , sum1 , sum2 , <unk> , large ; scanf ( <str> , & t ) ; for ( k = <int> ; k < t ; k ++ ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } <unk> = <int> ; for ( j = <int> ; j <= n - <int> ; j ++ ) { sum = <int> ; for ( i = j ; i <= n - <int> ; i ++ ) { sum = sum + a [ i ] [ j ] ; } sum1 = sum + a [ i ] [ j ] ; sum2 = sum + a [ i ] [ j + <int> ] ; if ( sum1 > sum2 ) large = sum1 ; else large = sum2 ; if ( large > <unk> ) <unk> = large ; else continue ; } printf ( <str> , <unk> ) ; } }", "label": 3, "id": 6646}
{"input": "int hcf ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; if ( a == b ) return a ; else if ( a > b ) return hcf ( a - b , b ) ; return hcf ( a , b - a ) ; } int main ( ) { int T , A , B ; scanf ( <str> , & T ) ; for ( int i = <int> ; i < T ; i ++ ) { scanf ( <str> , & A , & B ) ; int gcd = <int> , lcm = <int> ; gcd = hcf ( A , B ) ; lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 6647}
{"input": "int main ( ) { int i , j , k , b , c ; unsigned int n , m ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & m ) ; unsigned int a [ m ] ; for ( j = <int> ; j < m ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( k = <int> ; k < m ; k ++ ) { if ( a [ <int> ] > a [ k ] ) { c = a [ <int> ] ; a [ <int> ] = a [ k ] ; a [ k ] = c ; } } b = m - <int> ; printf ( <str> , a [ <int> ] * b ) ; } }", "label": 0, "id": 6648}
{"input": "int main ( ) { int i , j , k , sum , gr = <int> , row , t , n ; scanf ( <str> , & t ) ; if ( t <= <int> ) { for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & row ) ; gr = <int> ; if ( row <= <int> ) { for ( j = <int> ; j <= row ; j ++ ) { sum = <int> ; for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & n ) ; if ( n > <int> && n < <int> ) { sum += n ; } } if ( sum > gr ) { gr = sum ; } } printf ( <str> , gr ) ; } } } return <int> ; }", "label": 1, "id": 6649}
{"input": "int main ( void ) { int t , n , i , ans ; long int min ; scanf ( <str> , & t ) ; while ( t -- ) { min = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & ans ) ; if ( ans < min ) min = ans ; } printf ( <str> , min * ( n - <int> ) ) ; } return <int> ; }", "label": 0, "id": 6650}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; int n ; int l = <int> ; for ( l = <int> ; l < t ; l ++ ) { scanf ( <str> , & n ) ; int A [ n + <int> ] [ n + <int> ] , B [ n + <int> ] [ n + <int> ] ; int i , j ; for ( i = <int> ; i <= n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } } for ( i = <int> ; i <= n ; i ++ ) { B [ n ] [ i ] = A [ n ] [ i ] ; } for ( i = n - <int> ; i > <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { B [ i ] [ j ] = max ( A [ i ] [ j ] + B [ i + <int> ] [ j ] , A [ i ] [ j ] + B [ i + <int> ] [ j + <int> ] ) ; } } printf ( <str> , B [ <int> ] [ <int> ] ) ; } return <int> ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 6651}
{"input": "long int gcd ( long int , long int ) ; int main ( ) { int t ; long long int a , b , min , lcm , hcf , max ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } hcf = gcd ( max , min ) ; lcm = ( a * b ) / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; } long int gcd ( long int p , long int q ) { if ( p % q == <int> ) return q ; else return gcd ( q , p % q ) ; }", "label": 0, "id": 6652}
{"input": "void main ( ) { int a , b , g , l , i ; scanf ( <str> , & a , & b ) ; for ( i = <int> ; i <= a && i <= b ; i ++ ) { if ( a % i == <int> && b % i == <int> ) g = i ; } l = ( a * b ) / g ; printf ( <str> , g , l ) ; }", "label": 1, "id": 6653}
{"input": "int n ; unsigned long long int max ( unsigned long long int a , unsigned long long int b ) { if ( b > a ) return b ; else return a ; } unsigned long long int sot ( long long int a [ ] [ <int> ] , int r , int c , unsigned long long int b [ ] [ <int> ] ) { if ( r >= n || c >= n ) return <int> ; if ( r == ( n - <int> ) || c == ( n - <int> ) ) { b [ r ] [ c ] = a [ r ] [ c ] ; return a [ r ] [ c ] ; } else { if ( b [ r ] [ c ] == <int> ) b [ r ] [ c ] = a [ r ] [ c ] + max ( sot ( a , r + <int> , c + <int> , b ) , sot ( a , r + <int> , c + <int> , b ) ) ; if ( b [ r + <int> ] [ c ] == <int> ) b [ r + <int> ] [ c ] = a [ r + <int> ] [ c ] + max ( sot ( a , r + <int> , c + <int> , b ) , sot ( a , r + <int> , c , b ) ) ; if ( b [ r + <int> ] [ c + <int> ] == <int> ) b [ r + <int> ] [ c + <int> ] = a [ r + <int> ] [ c + <int> ] + max ( sot ( a , r + <int> , c + <int> , b ) , sot ( a , r + <int> , c + <int> , b ) ) ; return ( a [ r ] [ c ] + max ( b [ r + <int> ] [ c ] , b [ r + <int> ] [ c + <int> ] ) ) ; } } int main ( ) { int t , i , j ; unsigned long long int b [ <int> ] [ <int> ] ; long long int a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; b [ i ] [ j ] = <int> ; } } printf ( <str> , sot ( a , <int> , <int> , b ) ) ; } return <int> ; }", "label": 1, "id": 6654}
{"input": "int main ( ) { int t ; long int x , y , a , b , g , l , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & x , & y ) ; a = x ; b = y ; while ( b != <int> ) { r = a % b ; a = b ; b = r ; } g = a ; l = ( x * y ) / g ; printf ( <str> , g , l ) ; printf ( <str> ) ; } return <int> ; }", "label": 1, "id": 6655}
{"input": "int gcd ( long a , long b ) { if ( b == <int> ) return a ; else gcd ( b , a % b ) ; } int main ( ) { long a , b , g , l ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a ) ; scanf ( <str> , & b ) ; g = gcd ( a , b ) ; l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 0, "id": 6656}
{"input": "unsigned int gcd ( unsigned m , unsigned n ) ; int main ( ) { int n , a , b , i ; printf ( <str> ) ; scanf ( <str> , & n ) ; printf ( <str> ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , ( a * b ) / gcd ( a , b ) ) ; } return <int> ; } unsigned int gcd ( unsigned m , unsigned n ) { if ( n > m ) return gcd ( n , m ) ; if ( n == <int> ) return m ; else return gcd ( n , m % n ) ; }", "label": 1, "id": 6657}
{"input": "main ( ) { int t ; long int n , i ; long long int min ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long int a [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } min = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } min = min * ( n - <int> ) ; printf ( <str> , min ) ; } }", "label": 0, "id": 6658}
{"input": "unsigned int numRows = <int> ; void ReadInput ( char * data , int num ) { int i = <int> ; for ( i = <int> ; i < num ; i ++ ) { scanf ( <str> , & data [ i ] ) ; fflush ( stdin ) ; } } void AnalyseData ( ) { int * sum = NULL ; char * data = NULL ; int i = <int> , j = <int> ; int max = <int> ; scanf ( <str> , & numRows ) ; fflush ( stdin ) ; if ( ! numRows ) return ; sum = ( int * ) malloc ( numRows * sizeof ( int ) ) ; for ( i = <int> ; i < numRows ; i ++ ) { data = ( char * ) malloc ( ( <int> + i ) * sizeof ( char ) ) ; ReadInput ( data , i + <int> ) ; for ( j = <int> ; j < i ; j ++ ) { if ( data [ j ] > data [ j + <int> ] ) sum [ j ] += data [ j ] ; else sum [ j ] += data [ j + <int> ] ; } sum [ i ] = data [ i ] ; free ( data ) ; } for ( i = <int> ; i < numRows ; i ++ ) { if ( max < sum [ i ] ) max = sum [ i ] ; } free ( sum ) ; printf ( <str> , max ) ; } int main ( ) { unsigned int numTestCases = <int> ; int i = <int> ; scanf ( <str> , & numTestCases ) ; fflush ( stdin ) ; for ( i = <int> ; i < numTestCases ; i ++ ) { AnalyseData ( ) ; numRows = <int> ; } return <int> ; }", "label": 3, "id": 6659}
{"input": "int testcases , m ; int result [ <int> ] ; int main ( ) { scanf ( <str> , & testcases ) ; for ( m = <int> ; m < testcases ; m ++ ) { int size , i , j , k , matrix [ <int> ] [ <int> ] ; int max , sum ; scanf ( <str> , & size ) ; for ( i = <int> ; i < size ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & matrix [ i ] [ j ] ) ; } for ( k = j ; k < size ; k ++ ) { matrix [ i ] [ k ] = <int> ; } } sum = <int> ; for ( i = <int> ; i < size ; i ++ ) { max = matrix [ i ] [ <int> ] ; for ( j = <int> ; j <= i ; j ++ ) { if ( matrix [ i ] [ j ] > max ) { max = matrix [ i ] [ j ] ; } } sum += max ; } result [ m ] = sum ; } for ( m = <int> ; m < testcases ; m ++ ) { printf ( <str> , result [ m ] ) ; } return <int> ; }", "label": 3, "id": 6660}
{"input": "int main ( ) { int t , l , a [ <int> ] [ <int> ] , i , j , x , y , max , k ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & x ) ; a [ j ] [ k ] = x ; } } max = a [ <int> ] [ <int> ] ; for ( j = <int> ; j < l ; j ++ ) { a [ j ] [ <int> ] = a [ j - <int> ] [ <int> ] + a [ j ] [ <int> ] ; if ( a [ j ] [ <int> ] > max ) max = a [ j ] [ <int> ] ; a [ j ] [ j ] = a [ j - <int> ] [ j - <int> ] + a [ j ] [ j ] ; if ( a [ j ] [ j ] > max ) max = a [ j ] [ j ] ; } for ( j = <int> ; j < l ; j ++ ) { for ( k = <int> ; k < j ; k ++ ) { x = a [ j - <int> ] [ k - <int> ] + a [ j ] [ k ] ; y = a [ j - <int> ] [ k ] + a [ j ] [ k ] ; a [ j ] [ k ] = x > y ? x : y ; if ( a [ j ] [ k ] > max ) max = a [ j ] [ k ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6661}
{"input": "int main ( void ) { long int a , b , hcf , min , temp , max ; long int lcm ; int t , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; min = a >= b ? b : a ; max = a >= b ? a : b ; while ( <int> ) { if ( max % min == <int> ) { hcf = min ; break ; } else { temp = min ; min = max % min ; max = temp ; } } lcm = ( a * b ) / hcf ; printf ( <str> , hcf ) ; printf ( <str> , <char> , lcm ) ; } return <int> ; }", "label": 1, "id": 6662}
{"input": "int main ( ) { long long int a , b , max , min ; int i , n , j ; long long int p ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { min = b ; max = a ; } else { min = a ; max = b ; } for ( j = min ; j > <int> ; j = j - ( max - min ) ) { if ( a % j == <int> && b % j == <int> ) { p = ( a * b ) / j ; printf ( <str> , j , p ) ; j = <int> ; } } } }", "label": 1, "id": 6663}
{"input": "int main ( ) { int t , n , i , j , k ; int in [ <int> ] [ <int> ] , result [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & in [ j ] [ k ] ) ; } for ( j = n - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k < j ; k ++ ) { if ( in [ j ] [ k ] > in [ j ] [ k + <int> ] ) in [ j - <int> ] [ k ] = in [ j - <int> ] [ k ] + in [ j ] [ k ] ; else in [ j - <int> ] [ k ] = in [ j - <int> ] [ k ] + in [ j ] [ k + <int> ] ; } } result [ i ] = in [ <int> ] [ <int> ] ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; }", "label": 0, "id": 6664}
{"input": "main ( ) { int i , j , a [ <int> ] [ <int> ] , m , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { m = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i <= n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] += M ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) ; if ( a [ i ] [ j ] > m ) m = a [ i ] [ j ] ; } printf ( <str> , m ) ; } return <int> ; }", "label": 0, "id": 6665}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6666}
{"input": "int main ( ) { int N , arr [ size ] ; int j , i , min , T , result [ <int> ] ; scanf ( <str> , & T ) ; for ( j = <int> ; j < T ; j ++ ) { scanf ( <str> , & N ) ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & arr [ i ] ) ; min = arr [ <int> ] ; for ( i = <int> ; i < N ; i ++ ) { if ( min > arr [ i ] ) min = arr [ i ] ; } result [ j ] = min * ( N - <int> ) ; } for ( i = <int> ; i < T ; i ++ ) printf ( <str> , result [ i ] ) ; return <int> ; }", "label": 0, "id": 6667}
{"input": "long trisum ( int h , int line ) ; int a [ <int> ] ; int l ; int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & l ) ; int i , j ; for ( i = <int> ; i < l ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , a + j ) ; } int sum = trisum ( <int> , <int> ) ; printf ( <str> , sum ) ; t -- ; } return <int> ; } long trisum ( int h , int line ) { if ( line == l - <int> ) { if ( a [ h + l - <int> ] > a [ h + l ] ) return a [ h + l - <int> ] + a [ h ] ; else return a [ h ] + a [ l + h ] ; } else { if ( trisum ( h + line , line + <int> ) > trisum ( h + line + <int> , line + <int> ) ) return a [ h ] + trisum ( h + line , line + <int> ) ; else return a [ h ] + trisum ( h + line + <int> , line + <int> ) ; } }", "label": 3, "id": 6668}
{"input": "int main ( ) { int a , b , T , max ; scanf ( <str> , & T ) ; while ( T > <int> ) { scanf ( <str> , & a , & b ) ; if ( a > b ) max = a ; else max = b ; while ( <int> ) { if ( max % a == <int> && max % b == <int> ) break ; max ++ ; } if ( b == <int> ) printf ( <str> , a ) ; else { a = b ; b = a % b ; } printf ( <str> , a , max ) ; T -- ; } return <int> ; }", "label": 2, "id": 6669}
{"input": "int gcd ( int a , int b ) { if ( a % b == <int> ) { return b ; } else { return gcd ( b , a % b ) ; } } int main ( ) { int m , n ; scanf ( <str> , & m , & n ) ; int p = gcd ( m , n ) ; int lcm = ( m * n ) / p ; printf ( <str> , lcm ) ; return <int> ; }", "label": 1, "id": 6670}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t != <int> ) { int n ; scanf ( <str> , & n ) ; int arr [ n ] , i , c = n , j = <int> , k = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & arr [ i ] ) ; if ( n == <int> ) printf ( <str> , n ) ; else { while ( j != n - <int> ) { if ( arr [ j ] <= arr [ j + <int> ] ) k ++ ; else { while ( k != <int> ) { c = c + k ; k -- ; } } j ++ ; } if ( k != <int> ) { while ( k != <int> ) { c = c + k ; k -- ; } } printf ( <str> , c ) ; } t -- ; } return <int> ; }", "label": 0, "id": 6671}
{"input": "int noele ( int a [ ] , int n ) { int i , nod = <int> ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] != <int> ) nod ++ ; } return nod ; } int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , i , j ; scanf ( <str> , & n ) ; int a [ n ] , cost = <int> ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; while ( noele ( a , n ) > <int> ) { for ( i = <int> , j = <int> ; i < n && j < n ; i ++ ) { if ( a [ i ] == <int> && a [ j ] == <int> ) { j ++ ; continue ; } else if ( a [ i ] == <int> ) continue ; else if ( a [ j ] == <int> ) { i -- ; j ++ ; continue ; } else { if ( a [ i ] > a [ j ] ) { a [ i ] = <int> ; cost = cost + a [ j ] ; j ++ ; } else { a [ j ] = <int> ; cost = cost + a [ i ] ; j ++ ; } } } } printf ( <str> , cost ) ; } return <int> ; }", "label": 1, "id": 6672}
{"input": "int main ( void ) { int i , j , t ; long int a , b , temp , gcd ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { if ( a % b == <int> ) gcd = b ; else { for ( j = <int> ; j <= b / <int> ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } } } else { if ( b % a == <int> ) gcd = a ; else { for ( j = <int> ; j <= a / <int> ; j ++ ) { if ( a % j == <int> && b % j == <int> ) gcd = j ; } } } printf ( <str> , gcd , a * b / gcd ) ; } }", "label": 2, "id": 6673}
{"input": "int main ( ) { int t , n , sum , a ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; sum = <int> ; for ( int i = <int> ; i < n ; i ++ ) { for ( int j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a ) ; sum += a ; } } printf ( <str> , sum ) ; } }", "label": 1, "id": 6674}
{"input": "int main ( ) { int i , T ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { int A , B , H , L ; scanf ( <str> , & A , & B ) ; { for ( H = A < B ? A : B ; H >= <int> ; H -- ) if ( A % H == <int> && B % H == <int> ) break ; } { for ( L = A > B ? A : B ; L >= <int> ; L ++ ) if ( L % A == <int> && L % B == <int> ) break ; } printf ( <str> , H , L ) ; } return <int> ; }", "label": 2, "id": 6675}
{"input": "int main ( ) { long int a [ <int> ] , c , t , n ; scanf ( <str> , & t ) ; while ( t -- ) { c = <int> ; long int i , j , k ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] == ( a [ j ] + <int> ) ) { for ( k = i ; k < n ; k ++ ) a [ k ] = a [ k + <int> ] ; c = c + a [ j ] ; } else if ( a [ j ] == a [ i ] + <int> ) { for ( k = j ; k < n ; k ++ ) a [ k ] = a [ k + <int> ] ; c = c + a [ i ] ; } } } printf ( <str> , c ) ; } return <int> ; }", "label": 3, "id": 6676}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long int a , b , gcd , lcm ; scanf ( <str> , & a , & b ) ; int i ; for ( i = <int> ; i <= a && i <= b ; ++ i ) { if ( a % i == <int> && b % i == <int> ) gcd = i ; } lcm = ( a * b ) / gcd ; printf ( <str> , & gcd , & lcm ) ; } return <int> ; }", "label": 3, "id": 6677}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n ; scanf ( <str> , & n ) ; int i , j ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } if ( n == <int> ) { printf ( <str> , a [ <int> ] [ <int> ] ) ; continue ; } int k = n - <int> - <int> ; for ( i = k ; i > <int> ; i -- ) { for ( j = <int> ; j < i + <int> ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } } if ( a [ <int> ] [ <int> ] > a [ <int> ] [ <int> ] ) { printf ( <str> , a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; } else { printf ( <str> , a [ <int> ] [ <int> ] + a [ <int> ] [ <int> ] ) ; } } return <int> ; }", "label": 0, "id": 6678}
{"input": "int main ( ) { int a ; scanf ( <str> , & a ) ; int i ; for ( i = <int> ; i < a ; i ++ ) { char s ; scanf ( <str> , & s ) ; if ( i == <int> ) { scanf ( <str> , & s ) ; } int count = <int> ; while ( s != <char> ) { if ( s == <char> || s == <char> || s == <char> || s == <char> || s == <char> || s == <char> ) { count ++ ; } else if ( s == <char> ) { count = count + <int> ; } scanf ( <str> , & s ) ; } printf ( <str> , count ) ; } return <int> ; }", "label": 1, "id": 6679}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t > <int> ) { int n , i ; scanf ( <str> , & n ) ; int a [ n ] , e , j , k , g ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = <int> ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) { scanf ( <str> , & g ) ; for ( k = j ; k < n ; k = k + i + <int> ) { a [ k ] = a [ k ] + g ; } } } for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n - i ; j ++ ) { if ( a [ j ] < a [ j - <int> ] ) { e = a [ j ] ; a [ j ] = a [ j - <int> ] ; a [ j - <int> ] = e ; } } } printf ( <str> , a [ n - <int> ] ) ; t = t - <int> ; } }", "label": 1, "id": 6680}
{"input": "int <unk> ( int path [ ] [ <int> ] , int rows ) { int sum [ <int> ] [ <int> ] , i , j ; for ( i = <int> ; i < <int> ; i ++ ) for ( j = <int> ; j < <int> ; j ++ ) sum [ i ] [ j ] = <int> ; for ( i = <int> ; i <= rows ; i ++ ) { for ( j = <int> ; j <= rows - i ; j ++ ) { sum [ i ] [ j ] = path [ rows - i ] [ j ] + MAX ( sum [ i - <int> ] [ j ] , sum [ i - <int> ] [ j + <int> ] ) ; } } return sum [ rows ] [ <int> ] ; } int main ( ) { int path [ <int> ] [ <int> ] , rows = <int> , row = <int> , col = <int> , cases = <int> , res [ <int> ] , i = <int> ; scanf ( <str> , & cases ) ; while ( cases != <int> ) { scanf ( <str> , & rows ) ; for ( row = <int> ; row < rows ; row ++ ) { for ( col = <int> ; col <= row ; col ++ ) { scanf ( <str> , & path [ row ] [ col ] ) ; } } res [ i ] = <unk> ( path , rows ) ; i ++ ; cases -- ; } for ( row = <int> ; row < i ; row ++ ) { printf ( <str> , res [ row ] ) ; } return <int> ; }", "label": 1, "id": 6681}
{"input": "long int gcd ( long long int a , long long int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int main ( ) { long long int A , B , lcm ; int tc ; long int g ; scanf ( <str> , & tc ) ; while ( tc -- > <int> ) { scanf ( <str> , & A , & B ) ; g = gcd ( A , B ) ; lcm = ( A * B ) / g ; printf ( <str> , g , lcm ) ; } return <int> ; }", "label": 1, "id": 6682}
{"input": "int main ( ) { int a [ <int> ] [ <int> ] , i , j , t , n , x , y , lar ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { if ( j == i ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; else if ( j == <int> ) a [ i ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; else { y = a [ i ] [ j ] + a [ i - <int> ] [ j ] ; x = a [ i ] [ j ] + a [ i - <int> ] [ j - <int> ] ; if ( x > y ) a [ i ] [ j ] = x ; else a [ i ] [ j ] = y ; } } lar = a [ n - <int> ] [ <int> ] ; for ( j = <int> ; j < n - <int> ; j ++ ) { if ( lar < a [ n - <int> ] [ j + <int> ] ) lar = a [ n - <int> ] [ j + <int> ] ; } printf ( <str> , lar ) ; } return <int> ; }", "label": 3, "id": 6683}
{"input": "int main ( ) { int n , i , j , swap , a ; scanf ( <str> , & a ) ; while ( a -- ) { scanf ( <str> , & n ) ; int b [ n ] ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & b [ i ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = <int> ; j < n - <int> - i ; j ++ ) { if ( b [ j ] > b [ j + <int> ] ) { swap = b [ j ] ; b [ j ] = b [ j + <int> ] ; b [ j + <int> ] = swap ; } } } printf ( <str> , b [ <int> ] * ( n - <int> ) ) ; } return <int> ; }", "label": 2, "id": 6684}
{"input": "int main ( ) { int t , i ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { long long int a , b , GCD = <int> , x , l , c = <int> , p , q ; scanf ( <str> , & a , & b ) ; if ( a > b ) { p = a ; q = b ; c = a - b ; for ( l = <int> ; l <= c ; l ++ ) { c = b ; if ( a % b == <int> ) { GCD = b ; break ; } b = a % b ; a = c ; } printf ( <str> , GCD , ( p * q ) / GCD ) ; } else if ( b > a ) { p = a ; q = b ; c = b - a ; for ( l = <int> ; l <= c ; l ++ ) { c = a ; if ( b % a == <int> ) { GCD = a ; break ; } a = b % a ; b = c ; } printf ( <str> , GCD , ( p * q ) / GCD ) ; } else if ( a == b ) { GCD = a ; printf ( <str> , a , a ) ; } } return <int> ; }", "label": 3, "id": 6685}
{"input": "int main ( ) { int n , T , A , B , D , X , Y ; scanf ( <str> , & T ) ; for ( n = <int> ; n <= T ; n ++ ) { scanf ( <str> , & A , & B ) ; if ( A == <int> ) X = A * B ; do { D = A % B ; A = B ; B = D ; } while ( B != <int> ) ; Y = X / A ; printf ( <str> , A , Y ) ; } return <int> ; }", "label": 1, "id": 6686}
{"input": "int main ( ) { int test , n , a [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & test ) ; while ( test -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) a [ i ] [ j ] += a [ i + <int> ] [ j ] ; else a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 1, "id": 6687}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , a , min = INT_MAX ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a ) ; if ( min > a ) min = a ; } printf ( <str> , min * ( n - <int> ) ) ; } }", "label": 0, "id": 6688}
{"input": "int maxx ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int t , b , n , i , j , tt , max = INT_MIN ; scanf ( <str> , & t ) ; if ( t > <int> || t < <int> ) return - <int> ; tt = t ; while ( t -- ) { max = INT_MIN ; scanf ( <str> , & n ) ; int arr [ n ] [ n ] , brr [ n ] [ n ] ; if ( n == <int> ) { scanf ( <str> , & b ) ; printf ( <str> , b ) ; } else { for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { if ( j <= i ) scanf ( <str> , & arr [ i ] [ j ] ) ; else arr [ i ] [ j ] = <int> ; } } brr [ <int> ] [ <int> ] = arr [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) brr [ <int> ] [ i ] = <int> ; for ( i = <int> ; i < n ; i ++ ) brr [ i ] [ <int> ] = brr [ i - <int> ] [ <int> ] + arr [ i ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < n ; j ++ ) { brr [ i ] [ j ] = maxx ( brr [ i - <int> ] [ j ] , brr [ i - <int> ] [ j - <int> ] ) + arr [ i ] [ j ] ; if ( brr [ i ] [ j ] > max ) max = brr [ i ] [ j ] ; } } printf ( <str> , max ) ; } } return <int> ; }", "label": 0, "id": 6689}
{"input": "main ( ) { int T , N ; int temp = <int> ; int min = <int> ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & N ) ; for ( int i = <int> ; i < N ; i ++ ) { scanf ( <str> , & temp ) ; if ( temp < min ) { min = temp ; } } printf ( <str> , min * ( N - <int> ) ) ; min = <int> ; } }", "label": 0, "id": 6690}
{"input": "int main ( ) { int t = <int> , c = <int> ; scanf ( <str> , & t ) ; for ( c = <int> ; c < t ; c ++ ) { int x = <int> , y = <int> , a = <int> , b = <int> , prod = <int> , hcf = <int> , lcm = <int> , i = <int> , rem = <int> ; scanf ( <str> , & x , & y ) ; a = MAX ( x , y ) ; b = MIN ( x , y ) ; prod = a * b ; while ( b != <int> ) { rem = a % b ; a = b ; hcf = a ; b = rem ; } lcm = prod / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 1, "id": 6691}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; for ( int i = <int> ; i < n ; i ++ ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; scanf ( <str> , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != <int> ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( <str> , gcd , lcm ) ; } }", "label": 1, "id": 6692}
{"input": "int main ( void ) { long long int tc , n , sum = <int> , a [ <int> ] , i , first ; scanf ( <str> , & tc ) ; while ( tc > <int> ) { sum = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; first = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < first ) { sum = sum + a [ i ] ; first = a [ i ] ; } else sum = sum + first ; } printf ( <str> , sum ) ; tc -- ; } return <int> ; }", "label": 1, "id": 6693}
{"input": "long long func ( long long int * * a , long long int pm , long long int ii , long long int n ) ; int main ( ) { long long t ; long long int n , i , j , maxim ; long long ans = <int> , p ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; long long int * * a = ( long long int * * ) malloc ( n * sizeof ( int * ) ) ; long long int * max = ( long long int * ) malloc ( n * sizeof ( n ) ) ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = ( long long int * ) malloc ( n * sizeof ( long long int ) ) ; } for ( i = <int> ; i < n ; i ++ ) { maxim = <int> ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] > maxim ) { max [ i ] = j ; maxim = a [ i ] [ j ] ; } } } ans = <int> ; for ( i = <int> ; i < n ; i ++ ) { p = func ( a , max [ i ] , i , n ) ; if ( p > ans ) ans = p ; } printf ( <str> , p ) ; } return <int> ; } long long func ( long long int * * a , long long int pm , long long int ii , long long int n ) { long long int i , j , prev = pm ; long long sum = a [ ii ] [ pm ] ; for ( i = ii + <int> ; i < n ; i ++ ) { if ( prev + <int> <= i ) { if ( a [ i ] [ prev ] > a [ i ] [ prev + <int> ] ) { sum += a [ i ] [ prev ] ; } else { sum += a [ i ] [ prev + <int> ] ; prev ++ ; } } else { sum += a [ i ] [ prev ] ; } } prev = pm ; for ( i = ii - <int> ; i >= <int> ; i -- ) { if ( prev - <int> >= <int> ) { if ( a [ i ] [ prev ] > a [ i ] [ prev - <int> ] ) { sum += a [ i ] [ prev ] ; } else { sum += a [ i ] [ prev - <int> ] ; prev -- ; } } else { sum += a [ i ] [ prev ] ; } } return sum ; }", "label": 1, "id": 6694}
{"input": "main ( ) { int t , n1 , n2 , temp , GCD , LCM ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n1 , & n2 ) ; LCM = n1 * n2 ; if ( n1 != <int> && n2 != <int> ) { temp = n1 % n2 ; n1 = n2 ; n2 = temp ; } } GCD = n1 ; LCM = LCM / GCD ; printf ( <str> , GCD , LCM ) ; }", "label": 1, "id": 6695}
{"input": "int main ( ) { long long int i , j , t , count1 , s ; long int * A [ <int> ] ; long int N [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & N [ i ] ) ; A [ i ] = ( long int * ) malloc ( N [ i ] * sizeof ( long int ) ) ; for ( j = <int> ; j < N [ i ] ; j ++ ) { scanf ( <str> , & A [ i ] [ j ] ) ; } count1 = <int> ; s = <int> ; for ( j = <int> ; j < N [ i ] ; j ++ ) { if ( A [ i ] [ j - <int> ] <= A [ i ] [ j ] ) { s ++ ; } else s = <int> ; count1 += s ; } printf ( <str> , count1 + <int> ) ; } return <int> ; }", "label": 3, "id": 6696}
{"input": "int gcd ( int A , int B ) { if ( A == <int> ) return B ; if ( B == <int> ) return A ; return gcd ( B , A % B ) ; } int main ( ) { int T ; int A , B ; int GCD , LCM ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) GCD = gcd ( A , B ) ; else GCD = gcd ( B , A ) ; LCM = ( A * B ) / GCD ; printf ( <str> , GCD , LCM ) ; } return <int> ; }", "label": 1, "id": 6697}
{"input": "int main ( ) { int i , T ; long long gcd , A , B , lcm , x , y ; scanf ( <str> , & T ) ; for ( i = <int> ; i <= T ; i ++ ) { scanf ( <str> , & A , & B ) ; if ( B > A ) { A = A + B ; B = A - B ; A = A - B ; } x = A , y = B ; while ( y != <int> ) { gcd = x % y ; x = y ; y = gcd ; } lcm = A / x * B ; printf ( <str> , x , lcm ) ; } return <int> ; }", "label": 1, "id": 6698}
{"input": "void <unk> ( int * p , int * q , int i ) ; int max ( int a , int b ) ; int main ( ) { int n , r , i , m [ <int> ] , j , k = <int> ; int * p , * q ; scanf ( <str> , & n ) ; if ( n > <unk> ) return <int> ; while ( k < n ) { scanf ( <str> , & r ) ; if ( r < <int> && r > rmax ) return <int> ; q = malloc ( r * sizeof ( int ) ) ; for ( i = <int> ; i < r ; i ++ ) { p = malloc ( ( i + <int> ) * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & p [ j ] ) ; if ( p [ j ] < <int> && p [ j ] > <int> ) return <int> ; } <unk> ( p , q , i ) ; free ( p ) ; } m [ k ] = <int> ; for ( j = <int> ; j < r ; j ++ ) { if ( m [ k ] < q [ j ] ) m [ k ] = q [ j ] ; } free ( q ) ; k ++ ; } for ( k = <int> ; k < n ; k ++ ) printf ( <str> , m [ k ] ) ; return <int> ; } void <unk> ( int * p , int * q , int i ) { int j ; if ( i > <int> ) { p [ <int> ] += q [ <int> ] ; q [ i ] = <int> ; for ( j = <int> ; j <= i ; j ++ ) p [ j ] = max ( q [ j - <int> ] , q [ j ] ) + p [ j ] ; } for ( j = <int> ; j <= i ; j ++ ) q [ j ] = p [ j ] ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }", "label": 0, "id": 6699}
{"input": "int main ( ) { int i , j , k , t ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { int n ; scanf ( <str> , & n ) ; int A [ n ] [ n ] ; for ( k = <int> ; k < n ; k ++ ) { for ( j = <int> ; j <= k ; j ++ ) { scanf ( <str> , & A [ k ] [ j ] ) ; } } for ( k = n - <int> ; k >= <int> ; k -- ) { for ( j = <int> ; j <= k ; j ++ ) { if ( A [ k ] [ j ] + A [ k + <int> ] [ j ] > A [ k ] [ j ] + A [ k + <int> ] [ j + <int> ] ) { A [ k ] [ j ] += A [ k + <int> ] [ j ] ; } else { A [ k ] [ j ] += A [ k + <int> ] [ j + <int> ] ; } } } printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6700}
{"input": "int gcd ( int a , int b ) { if ( a == <int> || b == <int> ) return <int> ; else if ( a == b ) return a ; else if ( a > b ) return gcd ( a - b , b ) ; else return gcd ( a , b - a ) ; } int main ( ) { int a , b ; scanf ( <str> , & a , & b ) ; int g = gcd ( a , b ) ; int l = ( a * b ) / g ; printf ( <str> , g , l ) ; }", "label": 1, "id": 6701}
{"input": "int * a ; int n , N ; int maxtraversalsum ( int i , int j ) { int sum = a [ i ] ; if ( j < n ) sum += MAX ( maxtraversalsum ( i + j , j + <int> ) , maxtraversalsum ( i + j + <int> , j + <int> ) ) ; return sum ; } int main ( void ) { int t , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; a = ( int * ) malloc ( ( N = ( n * ( n + <int> ) ) / <int> + <int> ) * sizeof ( int ) ) ; a [ <int> ] = <int> ; for ( i = <int> ; i < N ; i ++ ) scanf ( <str> , & ( a [ i ] ) ) ; printf ( <str> , maxtraversalsum ( <int> , <int> ) ) ; } return <int> ; }", "label": 2, "id": 6702}
{"input": "int main ( ) { int t , n , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( a [ i + <int> ] [ j + <int> ] >= a [ i + <int> ] [ j ] ) { a [ i ] [ j ] += a [ i + <int> ] [ j + <int> ] ; } else { a [ i ] [ j ] += a [ i + <int> ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 6703}
{"input": "int main ( ) { int T , l , lcm ; long A , B ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A < B ) l = A ; else l = B ; l -- ; while ( l != <int> ) { if ( A % l == <int> && B % l == <int> ) break ; l -- ; } lcm = ( A * B ) / l ; printf ( <str> , l , lcm ) ; } return <int> ; }", "label": 2, "id": 6704}
{"input": "int max ( int x , int y ) { if ( x >= y ) return x ; else return y ; } int sum ( int r ) { int a [ r ] [ r ] , s [ r ] [ r ] , d ; int i , j ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j < r ; j ++ ) { a [ i ] [ j ] = <int> ; s [ i ] [ j ] = <int> ; } } for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } s [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) s [ i ] [ j ] = a [ i ] [ j ] + ( s [ i - <int> ] [ j ] ) ; else s [ i ] [ j ] = a [ i ] [ j ] + max ( s [ i - <int> ] [ j ] , s [ i - <int> ] [ j - <int> ] ) ; } } d = s [ r - <int> ] [ <int> ] ; for ( j = <int> ; j < r ; j ++ ) { if ( s [ r - <int> ] [ j ] > d ) d = s [ r - <int> ] [ j ] ; } return d ; } void main ( ) { int t , r ; printf ( <str> ) ; scanf ( <str> , & t ) ; while ( t -- ) { printf ( <str> ) ; scanf ( <str> , & r ) ; printf ( <str> , sum ( r ) ) ; } }", "label": 1, "id": 6705}
{"input": "int gcd ( int a , int b ) { if ( b == <int> ) return a ; else return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } int main ( ) { int t , a , b ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 6706}
{"input": "main ( ) { int t , a , b , i , j , g , l ; scanf ( <str> , & t ) ; for ( i = <int> ; i <= t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= ( a < b ? a : b ) ; j ++ ) { if ( a % j == <int> && b % j == <int> ) g = j ; } for ( j = ( a > b ? a : b ) ; j <= a * b ; j ++ ) { if ( j % a == <int> && j % b == <int> ) { l = j ; break ; } } printf ( <str> , g , l ) ; } }", "label": 2, "id": 6707}
{"input": "int main ( ) { int i , j , k , l , m , ll ; scanf ( <str> , & i ) ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & k ) ; int A [ k ] [ k ] ; for ( l = <int> ; l < k ; l ++ ) { for ( ll = <int> ; ll <= l ; ll ++ ) { scanf ( <str> , & A [ l ] [ ll ] ) ; } } for ( j = k - <int> ; j > <int> ; j -- ) for ( l = <int> ; l <= j ; l ++ ) { if ( A [ j - <int> ] [ l ] + A [ j ] [ l ] > A [ j - <int> ] [ l ] + A [ j ] [ l + <int> ] ) A [ j - <int> ] [ l ] = A [ j - <int> ] [ l ] + A [ j ] [ l ] ; else A [ j - <int> ] [ l ] = A [ j - <int> ] [ l ] + A [ j ] [ l + <int> ] ; } printf ( <str> , A [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 2, "id": 6708}
{"input": "int main ( ) { int a , b , t , rem , num , den ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { num = a ; den = b ; } else { num = b ; den = a ; } rem = num % den ; while ( rem != <int> ) { num = den ; den = rem ; rem = num % den ; } printf ( <str> , den , ( ( a * b ) / den ) ) ; } return <int> ; }", "label": 1, "id": 6709}
{"input": "void build_tringle ( ) ; long int max ( long int , long int ) ; long int a [ <int> ] [ <int> ] , b [ <int> ] [ <int> ] ; int main ( ) { int i , j , n , rows = <int> ; long int sum = <int> ; scanf ( <str> , & n ) ; while ( n != <int> ) { scanf ( <str> , & rows ) ; for ( i = <int> ; i < rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } build_tringle ( ) ; for ( i = <int> ; i < rows ; i ++ ) { if ( b [ rows - <int> ] [ i ] >= sum ) sum = b [ rows - <int> ] [ i ] ; } printf ( <str> , sum ) ; n -- ; } return <int> ; } void build_tringle ( ) { int i , j ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < <int> ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == i ) { b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; } b [ i ] [ j ] = max ( b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] , b [ i - <int> ] [ j ] + a [ i ] [ j ] ) ; } } } long int max ( long int a , long int b ) { if ( a >= b ) return a ; else return b ; }", "label": 1, "id": 6710}
{"input": "char ibuf [ BUF ] ; int ipt = BUF ; int readInt ( ) { while ( ipt < BUF && ibuf [ ipt ] < <char> ) ipt ++ ; if ( ipt == BUF ) { fread ( ibuf , <int> , BUF , stdin ) ; ipt = <int> ; while ( ipt < BUF && ibuf [ ipt ] < <char> ) ipt ++ ; } int n = <int> ; while ( ipt < BUF && ibuf [ ipt ] >= <char> ) n = ( n * <int> ) + ( ibuf [ ipt ++ ] - <char> ) ; if ( ipt == BUF ) { fread ( ibuf , <int> , BUF , stdin ) ; ipt = <int> ; while ( ipt < BUF && ibuf [ ipt ] >= <char> ) n = ( n * <int> ) + ( ibuf [ ipt ++ ] - <char> ) ; } return n ; } int main ( ) { int i , j , t , n , * * a , * * b , max ; t = readInt ( ) ; while ( t > <int> ) { t -- ; n = readInt ( ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; b = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = <int> ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; b [ i ] = ( int * ) malloc ( ( i + <int> ) * sizeof ( int ) ) ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = readInt ( ) ; b [ <int> ] [ <int> ] = a [ <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j - <int> < <int> ) b [ i ] [ j ] = b [ i - <int> ] [ j ] + a [ i ] [ j ] ; else if ( j == i ) b [ i ] [ j ] = b [ i - <int> ] [ j - <int> ] + a [ i ] [ j ] ; else { b [ i ] [ j ] = b [ i - <int> ] [ j ] > b [ i - <int> ] [ j - <int> ] ? b [ i - <int> ] [ j ] : b [ i - <int> ] [ j - <int> ] ; b [ i ] [ j ] += a [ i ] [ j ] ; } } } max = <int> ; for ( j = <int> ; j < n ; j ++ ) if ( b [ n - <int> ] [ j ] > max ) max = b [ n - <int> ] [ j ] ; printf ( <str> , max ) ; for ( i = <int> ; i < n ; i ++ ) { free ( a [ i ] ) ; free ( b [ i ] ) ; } free ( a ) ; free ( b ) ; } return <int> ; }", "label": 0, "id": 6711}
{"input": "long int GCD ( long int , long int ) ; long int LCM ( long int , long int ) ; int main ( ) { int t ; scanf ( <str> , & t ) ; long int a , b , c = <int> , d = <int> ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = GCD ( a , b ) ; d = LCM ( a , b ) ; printf ( <str> , c , d ) ; } return <int> ; } long int GCD ( long int a , long int b ) { if ( a % b == <int> ) return b ; else { if ( b % a == <int> ) return a ; else { if ( a > b ) return GCD ( b , a % b ) ; else return GCD ( a , b % a ) ; } } } long int LCM ( long int a , long int b ) { int x = <int> ; if ( a % b == <int> ) return a ; else { if ( b % a == <int> ) return b ; else { if ( a > b ) { x = GCD ( a , b ) ; if ( x == <int> ) return ( a * b ) ; else return ( x * b ) ; } else { x = GCD ( a , b ) ; if ( x == <int> ) return ( a * b ) ; else return ( x * a ) ; } } } }", "label": 1, "id": 6712}
{"input": "int main ( ) { int t , n , i , j , a [ <int> ] [ <int> ] = { <int> } , x ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { x = ( a [ i ] [ j ] > a [ i ] [ j + <int> ] ) ? a [ i ] [ j ] : a [ i ] [ j + <int> ] ; a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + x ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6713}
{"input": "int a [ <int> ] [ <int> ] ; void max_sum ( int d ) ; int main ( ) { int t , h , val , i , j ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & h ) ; for ( i = <int> ; i < h ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & val ) ; a [ i ] [ j ] = val ; } max_sum ( h - <int> ) ; } return <int> ; } void max_sum ( int d ) { int i ; if ( d == <int> ) { printf ( <str> , a [ <int> ] [ <int> ] ) ; } else { for ( i = <int> ; i < d ; i ++ ) a [ d - <int> ] [ i ] += ( max ( a [ d ] [ i ] , a [ d ] [ i + <int> ] ) ) ; max_sum ( d - <int> ) ; } }", "label": 0, "id": 6714}
{"input": "int main ( ) { int n ; scanf ( <str> , & n ) ; while ( n -- ) { long int a , b , i , min ; scanf ( <str> , & a , & b ) ; min = a < b ? a : b ; for ( i = min ; i >= <int> ; i -- ) { if ( a % i == <int> && b % i == <int> ) { printf ( <str> , i , a * b / i ) ; break ; } } } return <int> ; }", "label": 2, "id": 6715}
{"input": "int gcd ( int , int ) ; int lcm ( int , int ) ; int main ( ) { int i ; int g , l , T , A [ <int> ] , B [ <int> ] ; do { scanf ( <str> , & T ) ; } while ( T < <int> || T > <int> ) ; for ( i = <int> ; i < T ; i ++ ) { do { scanf ( <str> , & A [ i ] , & B [ i ] ) ; } while ( A [ i ] < <int> || A [ i ] > <int> || B [ i ] < <int> || B [ i ] > <int> ) ; } printf ( <str> ) ; for ( i = <int> ; i < T ; i ++ ) { g = gcd ( A [ i ] , B [ i ] ) ; l = lcm ( A [ i ] , B [ i ] ) ; printf ( <str> , g , l ) ; } return <int> ; } int gcd ( int a , int b ) { if ( a == b ) return a ; else if ( a > b ) a = gcd ( a - b , b ) ; else a = gcd ( b - a , a ) ; return a ; } int lcm ( int a , int b ) { int temp , i ; if ( a > b ) { temp = b ; b = a ; a = temp ; } for ( i = <int> ; i <= b ; i ++ ) { if ( ( a * i ) % b == <int> ) return ( a * i ) ; } return <int> ; }", "label": 2, "id": 6716}
{"input": "int n [ <int> ] [ <int> ] ; int main ( void ) { int t , j , i , l ; scanf ( <str> , & t ) ; while ( t != <int> ) { scanf ( <str> , & l ) ; for ( j = <int> ; j < l ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) { scanf ( <str> , & n [ j ] [ i ] ) ; } } for ( i = l - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { if ( n [ i + <int> ] [ j ] >= n [ i + <int> ] [ j + <int> ] ) n [ i ] [ j ] += n [ i + <int> ] [ j ] ; else n [ i ] [ j ] += n [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , n [ <int> ] [ <int> ] ) ; t -- ; } return <int> ; }", "label": 0, "id": 6717}
{"input": "int GCD ( int a , int b ) { int rem = a % b ; if ( rem == <int> ) return b ; else return GCD ( b , rem ) ; } int main ( ) { int t , n1 , n2 , i , gcd , lcm ; scanf ( <str> , & t ) ; while ( t >= <int> ) { scanf ( <str> , & n1 , & n2 ) ; gcd = GCD ( n2 , n1 ) ; lcm = ( n1 * n2 ) / gcd ; printf ( <str> , gcd , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 6718}
{"input": "int gcd_fun ( int a , int b ) { int x , gcd ; if ( a > b ) { x = b ; } else x = a ; while ( x >= <int> ) { if ( a % x == <int> && b % x == <int> ) { gcd = x ; return gcd ; } x -- ; } return gcd ; } int main ( ) { int a , b , test , i , gc , lc ; scanf ( <str> , & test ) ; for ( i = <int> ; i < test ; i ++ ) { scanf ( <str> , & a , & b ) ; gc = gcd_fun ( a , b ) ; lc = ( a * b ) / gc ; printf ( <str> , gc , lc ) ; } return <int> ; }", "label": 1, "id": 6719}
{"input": "int main ( ) { int t , i , j , n , a [ <int> ] [ <int> ] , sum = <int> , max = <int> ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n - <int> ; i ++ ) { for ( j = i ; j < n - <int> ; j ++ ) { sum += a [ j ] [ i ] ; } sum = sum + a [ j ] [ i + <int> ] ; if ( max < sum ) max = sum ; sum = <int> ; } printf ( <str> , max ) ; max = <int> ; } }", "label": 1, "id": 6720}
{"input": "int main ( ) { long long n , i , h , l ; scanf ( <str> , & n ) ; long long a [ <int> ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ <int> ] [ i ] , & a [ <int> ] [ i ] ) ; for ( i = <int> ; i < n ; i ++ ) { for ( h = a [ <int> ] [ i ] < a [ <int> ] [ i ] ? a [ <int> ] [ i ] : a [ <int> ] [ i ] ; h >= <int> ; h -- ) { if ( a [ <int> ] [ i ] % h == <int> && a [ <int> ] [ i ] % h == <int> ) break ; } printf ( <str> , h ) ; for ( l = a [ <int> ] [ i ] > a [ <int> ] [ i ] ? a [ <int> ] [ i ] : a [ <int> ] [ i ] ; l <= a [ <int> ] [ i ] * a [ <int> ] [ i ] ; l += ( a [ <int> ] [ i ] > a [ <int> ] [ i ] ? a [ <int> ] [ i ] : a [ <int> ] [ i ] ) ) if ( l % a [ <int> ] [ i ] == <int> && l % a [ <int> ] [ i ] == <int> ) break ; printf ( <str> , l ) ; } return <int> ; }", "label": 2, "id": 6721}
{"input": "int main ( ) { int n , i , j ; long int a [ i ] , b [ i ] , gcd [ i ] , lcm [ i ] ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; for ( j = <int> ; j <= a [ i ] ; j ++ ) { if ( a [ i ] % j == <int> && b [ i ] % j == <int> ) gcd [ i ] = j ; } lcm [ i ] = ( a [ i ] * b [ i ] ) / gcd [ i ] ; } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , gcd [ i ] , lcm [ i ] ) ; } return <int> ; }", "label": 1, "id": 6722}
{"input": "int main ( ) { int A , B , lcm , gcd , i , T , min ; scanf ( <str> , & T ) ; while ( T -- ) { scanf ( <str> , & A , & B ) ; if ( A > B ) min = B ; else if ( A < B ) min = A ; for ( i = <int> ; i <= min ; i ++ ) { if ( ( A % i == <int> ) && ( B % i == <int> ) ) gcd = i ; } lcm = ( A * B ) / gcd ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6723}
{"input": "main ( ) { unsigned int s , m , n , i , j , k , k1 , ans ; scanf ( <str> , & m ) ; for ( s = <int> ; s < m ; s ++ ) { scanf ( <str> , & n ) ; unsigned int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & k ) ; if ( i == <int> ) { a [ i ] [ j ] = k ; ans = k ; } else { if ( i != j ) a [ i ] [ j ] = a [ i - <int> ] [ j > <int> ? j - <int> : j ] >= a [ i - <int> ] [ j ] ? ( a [ i - <int> ] [ j > <int> ? j - <int> : j ] + k ) : ( a [ i - <int> ] [ j ] + k ) ; else a [ i ] [ j ] = a [ i - <int> ] [ j - <int> ] + k ; k1 = a [ i ] [ j ] ; if ( k1 > ans ) ans = k1 ; } } printf ( <str> , ans ) ; } }", "label": 1, "id": 6724}
{"input": "int maxm ( int a , int b ) { return a > b ? a : b ; } int main ( ) { int a [ <int> ] [ <int> ] , i , j , n , cases , max ; scanf ( <str> , & cases ) ; while ( cases -- ) { scanf ( <str> , & n ) ; scanf ( <str> , & a [ <int> ] [ <int> ] ) ; a [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; a [ i ] [ j ] = maxm ( a [ i - <int> ] [ j ] , a [ i - <int> ] [ j - <int> ] ) + a [ i ] [ j ] ; } a [ i ] [ j + <int> ] = <int> ; } max = a [ n - <int> ] [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ n - <int> ] [ i ] > max ) max = a [ n - <int> ] [ i ] ; } printf ( <str> , max ) ; } return <int> ; }", "label": 1, "id": 6725}
{"input": "static int parseint ( void ) { int c , n ; n = getchar_unlocked ( ) - <char> ; while ( ( c = getchar_unlocked ( ) ) >= <char> ) n = <int> * n + c - <char> ; return n ; } int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int no_of_rows , i , j , max_value = <int> ; int tests ; tests = parseint ( ) ; while ( tests -- ) { scanf ( <str> , & no_of_rows ) ; int lower_triangle [ no_of_rows ] [ no_of_rows ] ; for ( i = <int> ; i < no_of_rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & lower_triangle [ i ] [ j ] ) ; } for ( i = <int> ; i < no_of_rows ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { if ( j == <int> ) { lower_triangle [ i ] [ j ] = lower_triangle [ i ] [ j ] + lower_triangle [ i - <int> ] [ j ] ; } else if ( lower_triangle [ ( i - <int> ) ] [ j ] >= lower_triangle [ ( i - <int> ) ] [ ( j - <int> ) ] && j == i && ! ( j == <int> ) ) { lower_triangle [ i ] [ j ] = lower_triangle [ i - <int> ] [ j - <int> ] + lower_triangle [ i ] [ j ] ; } else { lower_triangle [ i ] [ j ] = lower_triangle [ i ] [ j ] + max ( lower_triangle [ i - <int> ] [ j ] , lower_triangle [ i - <int> ] [ j - <int> ] ) ; } } } max_value = <int> ; for ( j = <int> ; j < no_of_rows ; j ++ ) { if ( lower_triangle [ no_of_rows - <int> ] [ j ] > max_value ) max_value = lower_triangle [ no_of_rows - <int> ] [ j ] ; } printf ( <str> , max_value ) ; } return <int> ; }", "label": 0, "id": 6726}
{"input": "int main ( ) { int n , t , i , j , k , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; for ( j = <int> ; j < n ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) scanf ( <str> , & a [ j ] [ k ] ) ; } for ( j = n - <int> ; j > <int> ; j -- ) { for ( k = <int> ; k <= j - <int> ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + <int> ] ) a [ j - <int> ] [ k ] += a [ j ] [ k ] ; else a [ j - <int> ] [ k ] += a [ j ] [ k + <int> ] ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } }", "label": 0, "id": 6727}
{"input": "int main ( ) { long int a , b , c , d , t , i , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & a , & b ) ; for ( j = <int> ; j <= a && j <= b ; j ++ ) { if ( a % j == <int> && b % j == <int> ) { c = j ; } } d = a * b / c ; printf ( <str> , c , d ) ; } return <int> ; }", "label": 2, "id": 6728}
{"input": "int main ( ) { int n , i , t ; long int a [ <int> ] , s , r ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) scanf ( <str> , & a [ i ] ) ; s = a [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( a [ i ] < s ) s = a [ i ] ; } r = s * ( n - <int> ) ; printf ( <str> , r ) ; } return <int> ; }", "label": 1, "id": 6729}
{"input": "int sum_of_tri ( int * , int , int , int , int * ) ; int main ( ) { int t , n , x , y ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int tri [ n ] [ n ] ; for ( x = <int> ; x < n ; x ++ ) for ( y = <int> ; y <= x ; y ++ ) scanf ( <str> , & tri [ x ] [ y ] ) ; for ( x = n - <int> ; x >= <int> ; x -- ) for ( y = x ; y >= <int> ; y -- ) tri [ x ] [ y ] += ( tri [ x + <int> ] [ y + <int> ] > tri [ x + <int> ] [ y ] ) ? tri [ x + <int> ] [ y + <int> ] : tri [ x + <int> ] [ y ] ; printf ( <str> , tri [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6730}
{"input": "int gcd ( int m , int n ) { if ( m < n ) return gcd ( n , m ) ; if ( m % n == <int> ) return n ; else return gcd ( n , m % n ) ; } int lcm ( int m , int n ) { int i ; if ( n > m ) return lcm ( n , m ) ; if ( m % n == <int> ) return m ; for ( i = <int> ; i < n ; i ++ ) { if ( m % i == <int> && n % i == <int> ) { m /= i ; n /= i ; } } return ( m * n ) ; } int main ( ) { long a , b ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; printf ( <str> , gcd ( a , b ) , lcm ( a , b ) ) ; } return <int> ; }", "label": 1, "id": 6731}
{"input": "int findmax ( int X [ ] , int level , int last ) ; int main ( ) { int T , N , A [ MAX ] , i , j , total ; scanf ( <str> , & T ) ; for ( i = <int> ; i < T ; i ++ ) { scanf ( <str> , & N ) ; total = ( N * ( N + <int> ) ) / <int> ; for ( j = <int> ; j < total ; j ++ ) { scanf ( <str> , & A [ j ] ) ; } printf ( <str> , findmax ( A , N - <int> , total - <int> ) ) ; } return <int> ; } int findmax ( int X [ ] , int level , int last ) { int j , temp ; if ( level == <int> ) return X [ <int> ] ; else { temp = ( level * ( level + <int> ) ) / <int> ; for ( j = last ; j >= ( temp + <int> ) ; j -- ) { if ( ( X [ j - level - <int> ] + X [ j ] ) >= ( X [ j - level - <int> ] + X [ j - <int> ] ) ) X [ j - level - <int> ] = ( X [ j - level - <int> ] + X [ j ] ) ; else X [ j - level - <int> ] = ( X [ j - level - <int> ] + X [ j - <int> ] ) ; } findmax ( X , level - <int> , temp - <int> ) ; } }", "label": 3, "id": 6732}
{"input": "int a [ <int> ] [ <int> ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int ans ( int a [ <int> ] [ <int> ] , int i , int j ) { if ( i < <int> || j < <int> ) return <int> ; if ( i == <int> && j == <int> ) return a [ i ] [ j ] ; else return ( a [ i ] [ j ] + max ( ans ( a , i - <int> , j ) , ans ( a , i - <int> , j - <int> ) ) ) ; } int main ( ) { int n , r , i , j , count = <int> , se ; int an [ <int> ] ; scanf ( <str> , & n ) ; while ( n ) { scanf ( <str> , & r ) ; for ( i = <int> ; i < r ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = <int> ; i < r ; i ++ ) { se = ans ( a , r - <int> , i ) ; if ( ans ( a , r - <int> , i ) > se ) se = ans ( a , r - <int> , i ) ; } an [ count ] = se ; count ++ ; n -- ; } for ( i = <int> ; i < count ; i ++ ) printf ( <str> , an [ i ] ) ; return <int> ; }", "label": 2, "id": 6733}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int a , b ; scanf ( <str> , & a , & b ) ; int x = a , y = b , r = <int> ; if ( x < y ) { while ( r != <int> ) { r = y % x ; y = x ; x = r ; } long int l = ( a * b ) / y ; printf ( <str> , y , l ) ; } else { while ( r != <int> ) { r = x % y ; x = y ; y = r ; } long int l = ( a * b ) / x ; printf ( <str> , x , l ) ; } } return <int> ; }", "label": 1, "id": 6734}
{"input": "int main ( ) { int t , n , i , j , k , no ; long a [ <int> ] , count ; scanf ( <str> , & t ) ; while ( t ) { count = k = j = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( j = <int> ; j < n ; ) { no = <int> ; for ( i = j ; i < n ; i ++ ) { k = i ; if ( a [ i ] <= a [ i + <int> ] ) { no ++ ; } else break ; } if ( no ) count += ( no * ( no + <int> ) ) / <int> ; if ( no > <int> ) j = k ; else j ++ ; } printf ( <str> , count ) ; t -- ; } return <int> ; }", "label": 1, "id": 6735}
{"input": "int main ( ) { int t , n , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] ; int min = <int> ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; if ( min > a [ i ] ) min = a [ i ] ; } printf ( <str> , ( n - <int> ) * min ) ; } }", "label": 0, "id": 6736}
{"input": "int gcd ( int a , int b ) { if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } int lcm ( int a , int b ) { return ( ( a * b ) / gcd ( a , b ) ) ; } main ( ) { int t ; scanf ( <str> , & t ) ; for ( int i = <int> ; i < t ; i ++ ) { int a , b ; scanf ( <str> , & a , & b ) ; int m ; int n ; m = lcm ( a , b ) ; n = gcd ( a , b ) ; printf ( <str> , n , m ) ; printf ( <str> ) ; } }", "label": 1, "id": 6737}
{"input": "main ( ) { long int a [ <int> ] , c , i , j , n , e ; scanf ( <str> , & a ) ; for ( i = <int> ; i < a ; i ++ ) { scanf ( <str> , & c ) ; e = <int> ; n = c ; if ( c == <int> ) { printf ( <str> , c ) ; break ; } else { for ( j = <int> ; j < c ; j ++ ) { scanf ( <str> , & a [ j ] ) ; } for ( j = <int> ; j < c ; j ++ ) { if ( j <= ( c - <int> ) ) { while ( j < c ) { if ( a [ j ] < a [ j + <int> ] ) { n ++ ; j ++ ; } else break ; } } } } printf ( <str> , n ) ; } return <int> ; }", "label": 3, "id": 6738}
{"input": "int GCD ( int n1 , int n2 ) { while ( n1 != n2 ) { if ( n1 == <int> || n2 == <int> ) return <int> ; if ( n1 > n2 ) n1 = n1 - n2 ; if ( n1 < n2 ) n2 = n2 - n1 ; } return n1 ; } int main ( ) { int gcd , lcm , t , n1 , n2 ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n1 ) ; scanf ( <str> , & n2 ) ; gcd = GCD ( n1 , n2 ) ; lcm = n1 * n2 / gcd ; printf ( <str> , gcd ) ; printf ( <str> , lcm ) ; t -- ; } return <int> ; }", "label": 1, "id": 6739}
{"input": "int main ( ) { int a [ <int> ] , b [ <int> ] , i , j , hcf [ <int> ] , tc ; long int temp , lcm [ <int> ] ; scanf ( <str> , & tc ) ; for ( i = <int> ; i < tc ; i ++ ) { scanf ( <str> , & a [ i ] , & b [ i ] ) ; if ( a [ i ] < b [ i ] ) temp = a [ i ] ; else temp = b [ i ] ; for ( j = <int> ; j <= temp / <int> ; j ++ ) { if ( a [ i ] % j == <int> ) if ( b [ i ] % j == <int> ) hcf [ i ] = j ; } temp = ( long int ) a [ i ] * b [ i ] ; lcm [ i ] = ( long int ) temp / hcf [ i ] ; } for ( i = <int> ; i < tc ; i ++ ) printf ( <str> , hcf [ i ] , lcm [ i ] ) ; return <int> ; }", "label": 0, "id": 6740}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { long long int N ; scanf ( <str> , & N ) ; long long int A [ N ] ; long long int y = <int> ; while ( y < N ) { scanf ( <str> , & A [ y ] ) ; y ++ ; } long long int u = <int> , flag = N ; while ( u < N ) { if ( A [ u ] > A [ u + <int> ] ) { flag ++ ; } u ++ ; } printf ( <str> , flag ) ; } return <int> ; }", "label": 1, "id": 6741}
{"input": "int main ( void ) { short int arr [ <int> ] [ <int> ] ; short int testcases ; scanf ( <str> , & testcases ) ; while ( testcases ) { short int n , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & arr [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = <int> ; j <= i ; j ++ ) { arr [ i ] [ j ] += arr [ i + <int> ] [ j ] > arr [ i + <int> ] [ j + <int> ] ? arr [ i + <int> ] [ j ] : arr [ i + <int> ] [ j + <int> ] ; } } printf ( <str> , arr [ <int> ] [ <int> ] ) ; testcases -- ; } return <int> ; }", "label": 1, "id": 6742}
{"input": "int func ( int * arr , int size , int sum , int count , int pos ) { int a , b , c , d ; if ( ( size >= <int> ) && ( size - count > <int> ) ) { sum += arr [ ( ( count ) * ( count + <int> ) / <int> ) + pos - <int> ] ; } count ++ ; if ( ( size - count ) > <int> ) { a = func ( arr , size , sum , count , pos ) ; b = func ( arr , size , sum , count , pos + <int> ) ; } if ( ( size - count ) == <int> ) { return sum ; } if ( a > b ) return a ; else return b ; } int main ( ) { int a , b , c , temp , d = <int> , i , count , j , k , l , pos = <int> ; scanf ( <str> , & a ) ; int arr [ <int> ] ; for ( i = <int> ; i < a ; i ++ ) { d = <int> ; count = <int> ; scanf ( <str> , & b ) ; int * arr = ( int * ) malloc ( ( ( b ) * ( b + <int> ) * sizeof ( int ) ) / <int> ) ; for ( j = <int> ; j <= b ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { scanf ( <str> , & arr [ ( ( ( j ) * ( j - <int> ) / <int> ) + k - <int> ) ] ) ; } printf ( <str> ) ; } for ( j = <int> ; j <= b ; j ++ ) { for ( k = <int> ; k <= j ; k ++ ) { } } k = func ( arr , b , d , count , pos ) ; printf ( <str> , k ) ; } }", "label": 2, "id": 6743}
{"input": "int main ( ) { int n , lines , i , j , a [ <int> ] [ <int> ] , x ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & lines ) ; for ( i = <int> ; i < lines ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = lines - <int> ; i >= <int> ; i ++ ) { for ( j = <int> ; j < i ; j ++ ) { x = ( a [ i + <int> ] [ j ] > a [ i + <int> ] [ j + <int> ] ) ? a [ i + <int> ] [ j ] : a [ i + <int> ] [ j + <int> ] ; a [ i ] [ j ] = a [ i ] [ j ] + x ; } } printf ( <str> , a [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 3, "id": 6744}
{"input": "int main ( ) { long int k , t , i , j , * * a , * sum , n , total ; scanf ( <str> , & t ) ; a = ( int long * ) malloc ( <int> * sizeof ( long int ) ) ; while ( t -- ) { total = <int> ; scanf ( <str> , & n ) ; sum = ( long int * ) malloc ( n * sizeof ( long int ) ) ; for ( i = <int> ; i < n ; i ++ ) { sum [ i ] = <int> ; a [ i ] = ( long int * ) malloc ( <int> * sizeof ( int ) ) ; for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; } for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) { if ( j <= i ) k = <int> ; else k ++ ; sum [ i ] += a [ j ] [ k ] ; } total = sum [ <int> ] ; for ( i = <int> ; i < n ; i ++ ) { if ( total < sum [ i ] ) total = sum [ i ] ; } printf ( <str> , total ) ; free ( sum ) ; } return <int> ; }", "label": 1, "id": 6745}
{"input": "int main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int n , <unk> [ <int> ] [ <int> ] , i , j ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j < i + <int> ; j ++ ) scanf ( <str> , & <unk> [ i ] [ j ] ) ; } for ( i = n - <int> ; i >= <int> ; i -- ) { for ( j = i ; j >= <int> ; j -- ) { <unk> [ i ] [ j ] += ( <unk> [ i + <int> ] [ j + <int> ] > <unk> [ i + <int> ] [ j ] ? <unk> [ i + <int> ] [ j + <int> ] : <unk> [ i + <int> ] [ j ] ) ; } } printf ( <str> , <unk> [ <int> ] [ <int> ] ) ; } return <int> ; }", "label": 0, "id": 6746}
{"input": "int main ( ) { int t , n , i , j , temp , sum , a [ <int> ] ; scanf ( <str> , & t ) ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { scanf ( <str> , & a [ i ] ) ; } for ( i = <int> ; i < n ; i ++ ) { for ( j = i + <int> ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } } for ( i = <int> ; i < n ; i ++ ) { printf ( <str> , a [ i ] ) ; } sum = a [ <int> ] * ( n - <int> ) ; printf ( <str> , sum ) ; }", "label": 3, "id": 6747}
{"input": "int main ( ) { int i , a , b , n , g , l ; int t ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) n = b ; else n = a ; for ( i = n ; i >= <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { g = i ; break ; } l = a * b / g ; printf ( <str> , g , l ) ; } return <int> ; }", "label": 1, "id": 6748}
{"input": "main ( ) { int t , max ; scanf ( <str> , & t ) ; while ( t -- ) { int ar [ <int> ] [ <int> ] = { <int> } , i , j , n , s [ <int> ] [ <int> ] = { <int> } ; int ans ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & ar [ i ] [ j ] ) ; } ans = ar [ <int> ] [ <int> ] ; for ( j = <int> ; j < n ; j ++ ) { for ( i = <int> ; i <= j ; i ++ ) { max = ar [ j ] [ i ] + ar [ j - <int> ] [ i ] ; if ( i == <int> ) { max = ar [ j ] [ i ] + ar [ j - <int> ] [ <int> ] ; } else if ( j == i ) { max = ar [ j ] [ i ] + ar [ j - <int> ] [ i - <int> ] ; } else if ( ar [ j - <int> ] [ i - <int> ] > ar [ j - <int> ] [ i ] ) max = ar [ j ] [ i ] + ar [ j - <int> ] [ i - <int> ] ; ar [ j ] [ i ] = max ; if ( j == n - <int> && ans < max ) ans = max ; } } printf ( <str> , ans ) ; } return <int> ; }", "label": 0, "id": 6749}
{"input": "void call ( long ) ; long array [ <int> ] ; long result [ <int> ] ; long count = <int> ; int main ( ) { long i , t , inner , j ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & inner ) ; for ( j = <int> ; j < inner ; j ++ ) { scanf ( <str> , & array [ j ] ) ; } call ( inner ) ; } for ( j = <int> ; j < count ; j ++ ) { printf ( <str> , result [ j ] ) ; } return <int> ; } void call ( long inner ) { long i , sum = <int> ; for ( i = <int> ; i < inner - <int> ; i ++ ) { if ( array [ i + <int> ] > array [ i ] ) { array [ i + <int> ] = array [ i ] ; sum = sum + array [ i + <int> ] ; } else sum = sum + array [ i ] ; } result [ count ++ ] = sum ; }", "label": 1, "id": 6750}
{"input": "int main ( ) { int t , a , b , lcm , gcd ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; if ( a > b ) { a = a + b ; b = a - b ; a = a - b ; } lcm = b ; while ( lcm % a != <int> ) lcm += b ; if ( lcm = a * b ) { printf ( <str> , <int> , lcm ) ; continue ; } gcd = a ; while ( b % gcd != <int> || a % gcd != <int> ) gcd -- ; printf ( <str> , gcd , lcm ) ; } return <int> ; }", "label": 1, "id": 6751}
{"input": "long long max ( long long a , long long b ) { if ( a > b ) return a ; return b ; } int main ( ) { int test ; scanf ( <str> , & test ) ; while ( test -- ) { int row , i , j , k ; long long arr [ <int> ] , dp [ <int> ] [ <int> ] , res = <int> ; scanf ( <str> , & row ) ; dp [ <int> ] [ <int> ] = dp [ <int> ] [ <int> ] = <int> ; for ( i = <int> ; i < row ; ++ i ) { for ( j = <int> ; j <= i ; ++ j ) scanf ( <str> , & arr [ j ] ) ; for ( j = <int> ; j <= i ; ++ j ) { if ( j == <int> ) { dp [ j ] [ <int> ] = dp [ j ] [ <int> ] + arr [ j ] ; if ( dp [ j ] [ <int> ] > res ) res = dp [ j ] [ <int> ] ; continue ; } if ( j == i ) { dp [ j ] [ <int> ] = dp [ j - <int> ] [ <int> ] + arr [ j ] ; if ( dp [ j ] [ <int> ] > res ) res = dp [ j ] [ <int> ] ; continue ; } dp [ j ] [ <int> ] = arr [ j ] + max ( dp [ j ] [ <int> ] , dp [ j - <int> ] [ <int> ] ) ; if ( dp [ j ] [ <int> ] > res ) res = dp [ j ] [ <int> ] ; } for ( j = <int> ; j <= i ; ++ j ) dp [ j ] [ <int> ] = dp [ j ] [ <int> ] ; } printf ( <str> , res ) ; } return <int> ; }", "label": 0, "id": 6752}
{"input": "int main ( ) { int w ; scanf ( <str> , & w ) ; for ( int i = <int> ; i < w ; i ++ ) { int x , y , z ; scanf ( <str> , & x , & y ) ; int a = x , b = y ; int gcd ; while ( y != <int> ) { int temp = x % y ; x = y ; y = temp ; } printf ( <str> , x , <int> * a * b / x ) ; } return <int> ; }", "label": 1, "id": 6753}
{"input": "int main ( ) { int t ; long int a , b , c , hcf , lcm , i ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & a , & b ) ; c = a * b ; for ( i = c ; i >= <int> ; i -- ) if ( a % i == <int> && b % i == <int> ) { hcf = i ; break ; } lcm = c / hcf ; printf ( <str> , hcf , lcm ) ; } return <int> ; }", "label": 2, "id": 6754}
{"input": "int main ( ) { int t , i , j , count [ <int> ] , <unk> , row = <int> ; char aa [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; int n [ t ] ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n [ i ] ) ; for ( j = row ; j < ( row + n [ i ] ) ; j ++ ) scanf ( <str> , aa [ j ] ) ; row += n [ i ] ; } row = <int> ; for ( i = <int> ; i < t ; i ++ ) { count [ i ] = <int> ; for ( j = row ; j < ( row + n [ i ] ) ; j ++ ) { if ( j = <int> ) { count [ i ] = count [ i ] + aa [ j ] [ <int> ] - <int> ; <unk> = <int> ; } else { if ( aa [ j ] [ <unk> ] > aa [ j ] [ <unk> + <int> ] ) { count [ i ] = count [ i ] + aa [ j ] [ <unk> ] - <int> ; } else { count [ i ] = count [ i ] + aa [ j ] [ <unk> + <int> ] - <int> ; <unk> ++ ; } } } row += n [ i ] ; } for ( i = <int> ; i < t ; i ++ ) printf ( <str> , count [ i ] ) ; return <int> ; }", "label": 3, "id": 6755}
{"input": "main ( ) { int t ; scanf ( <str> , & t ) ; while ( t -- ) { int x , y , z , p ; scanf ( <str> , & x , & y ) ; z = x > y ? x : y ; while ( <int> ) { if ( z % y == <int> && z % x == <int> ) break ; else z ++ ; } p = x * y / z ; printf ( <str> , p , z ) ; } return <int> ; }", "label": 2, "id": 6756}
{"input": "int main ( ) { int tc ; scanf ( <str> , & tc ) ; while ( tc -- ) { int n , j , max ; scanf ( <str> , & n ) ; int arr [ <int> ] = { <int> } ; scanf ( <str> , & arr [ <int> ] ) ; max = arr [ <int> ] ; for ( int i = <int> ; i < n ; i ++ ) { int res [ <int> ] = { <int> } , x ; scanf ( <str> , & x ) ; res [ <int> ] = arr [ <int> ] + x ; for ( j = <int> ; j < i ; j ++ ) { scanf ( <str> , & x ) ; res [ j ] = arr [ j ] + x ; if ( arr [ j - <int> ] > arr [ j ] ) res [ j ] = arr [ j - <int> ] + x ; } scanf ( <str> , & x ) ; res [ j ] = arr [ j - <int> ] + x ; for ( int i = <int> ; i < n ; i ++ ) { arr [ i ] = res [ i ] ; if ( arr [ i ] > max ) max = arr [ i ] ; } } printf ( <str> , max ) ; } return <int> ; }", "label": 0, "id": 6757}
{"input": "int main ( ) { int i , j , k , l , m , n , p , arr [ <int> ] ; scanf ( <str> , & k ) ; for ( m = <int> ; m < k ; m ++ ) { l = <int> ; for ( i = <int> ; i < <int> ; i ++ ) arr [ i ] = <int> ; scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & p ) ; arr [ ( i * ( i + <int> ) / <int> ) + j ] = arr [ ( i * ( i + <int> ) / <int> ) + j ] + p ; } arr [ ( ( i + <int> ) * ( i + <int> ) / <int> ) ] = arr [ ( i * ( i + <int> ) / <int> ) ] ; arr [ ( ( i + <int> ) * ( i + <int> ) / <int> ) + i + <int> ] = arr [ ( i * ( i + <int> ) / <int> ) + i ] ; if ( i > <int> ) { for ( j = <int> ; j <= i ; j ++ ) arr [ ( ( i + <int> ) * ( i + <int> ) / <int> ) + j ] = max ( arr [ ( i * ( i + <int> ) / <int> ) + j ] , arr [ ( i * ( i + <int> ) / <int> ) + j - <int> ] ) ; } } for ( i = ( ( n * ( n - <int> ) ) / <int> ) ; i < ( ( n * ( n - <int> ) ) / <int> ) + n ; i ++ ) { if ( l < arr [ i ] ) l = arr [ i ] ; } printf ( <str> , l ) ; } return <int> ; } int max ( int a , int b ) { if ( a < b ) return b ; else return a ; }", "label": 3, "id": 6758}
{"input": "int main ( void ) { int cases , i , j , lines , sum , val , count ; scanf ( <str> , & cases ) ; for ( i = <int> ; i < cases ; i ++ ) { sum = <int> ; count = <int> ; scanf ( <str> , & lines ) ; while ( count != lines ) { for ( j = <int> ; j < count + <int> ; j ++ ) { scanf ( <str> , & val ) ; sum += val ; } count ++ ; } printf ( <str> , sum / <int> ) ; } return <int> ; }", "label": 1, "id": 6759}
{"input": "int main ( ) { int t , r , c , i , j , n , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t > <int> ) { scanf ( <str> , & n ) ; for ( i = <int> ; i <= ( n - <int> ) ; i ++ ) { for ( j = <int> ; j <= i ; j ++ ) { scanf ( <str> , & a [ i ] [ j ] ) ; } } for ( i = ( n - <int> ) ; i > <int> ; i -- ) { for ( j = <int> ; j < ( n - <int> ) ; j ++ ) { if ( a [ i ] [ j ] <= a [ i ] [ j + <int> ] ) { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j + <int> ] ; } else { a [ i - <int> ] [ j ] = a [ i - <int> ] [ j ] + a [ i ] [ j ] ; } } } printf ( <str> , a [ <int> ] [ <int> ] ) ; t -- ; } }", "label": 0, "id": 6760}
{"input": "int n ; int sot [ <int> ] [ <int> ] ; int max ( int t1 , int t2 ) { if ( t1 >= t2 ) return t1 ; else return t2 ; } int solve ( int i , int j , int a [ <int> ] [ <int> ] ) { int t1 , t2 , t ; if ( i > n ) return <int> ; if ( a [ i ] [ j ] ) return a [ i ] [ j ] ; t1 = solve ( i + <int> , j , a ) ; t2 = solve ( i + <int> , j + <int> , a ) ; t = max ( t1 , t2 ) + sot [ i ] [ j ] ; a [ i ] [ j ] = t ; return t ; } main ( ) { int i , j ; int sum , t , a [ <int> ] [ <int> ] ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j < n ; j ++ ) a [ i ] [ j ] = <int> ; for ( i = <int> ; i < n ; i ++ ) { printf ( <str> ) ; for ( j = <int> ; j < n ; j ++ ) { printf ( <str> , i , j ) ; scanf ( <str> , & sot [ i ] [ j ] ) ; } } sum = solve ( <int> , <int> , a ) ; printf ( <str> , sum ) ; } }", "label": 1, "id": 6761}
{"input": "main ( ) { int t , n , i , j , k ; scanf ( <str> , & t ) ; while ( t -- ) { scanf ( <str> , & n ) ; int a [ n ] [ n ] ; for ( i = <int> ; i < n ; i ++ ) for ( j = <int> ; j <= i ; j ++ ) scanf ( <str> , & a [ i ] [ j ] ) ; for ( i = n - <int> ; i >= <int> ; i -- ) { j = i + <int> ; for ( k = <int> ; k <= j ; k ++ ) { if ( a [ j ] [ k ] > a [ j ] [ k + <int> ] ) a [ i ] [ k ] += a [ j ] [ k ] ; else a [ i ] [ k ] += a [ j ] [ k + <int> ] ; } } printf ( <str> , a [ i + <int> ] [ i + <int> ] ) ; } }", "label": 0, "id": 6762}
{"input": "int main ( ) { int i , j , t , n , count ; long int a [ <int> ] ; scanf ( <str> , & t ) ; for ( i = <int> ; i < t ; i ++ ) { scanf ( <str> , & n ) ; count = n ; for ( j = <int> ; j < n ; j ++ ) { scanf ( <str> , a [ j ] ) ; } for ( j = <int> ; j < n ; j ++ ) { if ( a [ j ] < a [ j + <int> ] ) { count ++ ; } } printf ( <str> , count ) ; } }", "label": 3, "id": 6763}
